
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08008598  08008598  00009598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008618  08008618  0000a014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008618  08008618  00009618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008620  08008620  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008620  08008620  00009620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008624  08008624  00009624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  08008628  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a54  24000014  0800863c  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004a68  0800863c  0000aa68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd0b  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c2f  00000000  00000000  00029d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  0002d980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133c  00000000  00000000  0002f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000042d0  00000000  00000000  00030574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d935  00000000  00000000  00034844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001abc09  00000000  00000000  00052179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fdd82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006920  00000000  00000000  001fddc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  002046e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008580 	.word	0x08008580

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	08008580 	.word	0x08008580

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000610:	4b49      	ldr	r3, [pc, #292]	@ (8000738 <SystemInit+0x12c>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000616:	4a48      	ldr	r2, [pc, #288]	@ (8000738 <SystemInit+0x12c>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000620:	4b45      	ldr	r3, [pc, #276]	@ (8000738 <SystemInit+0x12c>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	4a44      	ldr	r2, [pc, #272]	@ (8000738 <SystemInit+0x12c>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062c:	4b43      	ldr	r3, [pc, #268]	@ (800073c <SystemInit+0x130>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f003 030f 	and.w	r3, r3, #15
 8000634:	2b06      	cmp	r3, #6
 8000636:	d807      	bhi.n	8000648 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000638:	4b40      	ldr	r3, [pc, #256]	@ (800073c <SystemInit+0x130>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f023 030f 	bic.w	r3, r3, #15
 8000640:	4a3e      	ldr	r2, [pc, #248]	@ (800073c <SystemInit+0x130>)
 8000642:	f043 0307 	orr.w	r3, r3, #7
 8000646:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <SystemInit+0x134>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a3c      	ldr	r2, [pc, #240]	@ (8000740 <SystemInit+0x134>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <SystemInit+0x134>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800065a:	4b39      	ldr	r3, [pc, #228]	@ (8000740 <SystemInit+0x134>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4938      	ldr	r1, [pc, #224]	@ (8000740 <SystemInit+0x134>)
 8000660:	4b38      	ldr	r3, [pc, #224]	@ (8000744 <SystemInit+0x138>)
 8000662:	4013      	ands	r3, r2
 8000664:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000666:	4b35      	ldr	r3, [pc, #212]	@ (800073c <SystemInit+0x130>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	2b00      	cmp	r3, #0
 8000670:	d007      	beq.n	8000682 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000672:	4b32      	ldr	r3, [pc, #200]	@ (800073c <SystemInit+0x130>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f023 030f 	bic.w	r3, r3, #15
 800067a:	4a30      	ldr	r2, [pc, #192]	@ (800073c <SystemInit+0x130>)
 800067c:	f043 0307 	orr.w	r3, r3, #7
 8000680:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000682:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <SystemInit+0x134>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000688:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <SystemInit+0x134>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800068e:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemInit+0x134>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <SystemInit+0x134>)
 8000696:	4a2c      	ldr	r2, [pc, #176]	@ (8000748 <SystemInit+0x13c>)
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemInit+0x134>)
 800069c:	4a2b      	ldr	r2, [pc, #172]	@ (800074c <SystemInit+0x140>)
 800069e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemInit+0x134>)
 80006a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <SystemInit+0x144>)
 80006a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <SystemInit+0x134>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <SystemInit+0x134>)
 80006ae:	4a28      	ldr	r2, [pc, #160]	@ (8000750 <SystemInit+0x144>)
 80006b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <SystemInit+0x134>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <SystemInit+0x134>)
 80006ba:	4a25      	ldr	r2, [pc, #148]	@ (8000750 <SystemInit+0x144>)
 80006bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <SystemInit+0x134>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <SystemInit+0x134>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000740 <SystemInit+0x134>)
 80006ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <SystemInit+0x134>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <SystemInit+0x148>)
 80006d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006da:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <SystemInit+0x148>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <SystemInit+0x14c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SystemInit+0x150>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006ee:	d202      	bcs.n	80006f6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <SystemInit+0x154>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <SystemInit+0x134>)
 80006f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d113      	bne.n	800072c <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <SystemInit+0x134>)
 8000706:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800070a:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <SystemInit+0x134>)
 800070c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000710:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <SystemInit+0x158>)
 8000716:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800071a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <SystemInit+0x134>)
 800071e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <SystemInit+0x134>)
 8000724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000728:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	52002000 	.word	0x52002000
 8000740:	58024400 	.word	0x58024400
 8000744:	eaf6ed7f 	.word	0xeaf6ed7f
 8000748:	02020200 	.word	0x02020200
 800074c:	01ff0000 	.word	0x01ff0000
 8000750:	01010280 	.word	0x01010280
 8000754:	580000c0 	.word	0x580000c0
 8000758:	5c001000 	.word	0x5c001000
 800075c:	ffff0000 	.word	0xffff0000
 8000760:	51008108 	.word	0x51008108
 8000764:	52004000 	.word	0x52004000

08000768 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <ExitRun0Mode+0x2c>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <ExitRun0Mode+0x2c>)
 8000772:	f023 0302 	bic.w	r3, r3, #2
 8000776:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000778:	bf00      	nop
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <ExitRun0Mode+0x2c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	58024800 	.word	0x58024800

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 800079e:	e000      	b.n	80007a2 <main+0xa>
 80007a0:	bf00      	nop
 80007a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <main+0x80>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f8      	bne.n	80007a0 <main+0x8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fac5 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f839 	bl	8000828 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <main+0x80>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007bc:	4a16      	ldr	r2, [pc, #88]	@ (8000818 <main+0x80>)
 80007be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <main+0x80>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 fda9 	bl	800132c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007da:	2100      	movs	r1, #0
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 fdbf 	bl	8001360 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 80007e2:	e000      	b.n	80007e6 <main+0x4e>
 80007e4:	bf00      	nop
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <main+0x80>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1f8      	bne.n	80007e4 <main+0x4c>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f000 f8eb 	bl	80009cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007f6:	f000 f89d 	bl	8000934 <MX_USART1_UART_Init>
//  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007fa:	f005 f905 	bl	8005a08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007fe:	4a07      	ldr	r2, [pc, #28]	@ (800081c <main+0x84>)
 8000800:	2100      	movs	r1, #0
 8000802:	4807      	ldr	r0, [pc, #28]	@ (8000820 <main+0x88>)
 8000804:	f005 f94a 	bl	8005a9c <osThreadNew>
 8000808:	4603      	mov	r3, r0
 800080a:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <main+0x8c>)
 800080c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800080e:	f005 f91f 	bl	8005a50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000812:	bf00      	nop
 8000814:	e7fd      	b.n	8000812 <main+0x7a>
 8000816:	bf00      	nop
 8000818:	58024400 	.word	0x58024400
 800081c:	080085cc 	.word	0x080085cc
 8000820:	08000a71 	.word	0x08000a71
 8000824:	240000c4 	.word	0x240000c4

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09c      	sub	sp, #112	@ 0x70
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000832:	224c      	movs	r2, #76	@ 0x4c
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f007 fe68 	bl	800850c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2220      	movs	r2, #32
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f007 fe62 	bl	800850c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000848:	2004      	movs	r0, #4
 800084a:	f000 fd9d 	bl	8001388 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b36      	ldr	r3, [pc, #216]	@ (800092c <SystemClock_Config+0x104>)
 8000854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000856:	4a35      	ldr	r2, [pc, #212]	@ (800092c <SystemClock_Config+0x104>)
 8000858:	f023 0301 	bic.w	r3, r3, #1
 800085c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800085e:	4b33      	ldr	r3, [pc, #204]	@ (800092c <SystemClock_Config+0x104>)
 8000860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	4b31      	ldr	r3, [pc, #196]	@ (8000930 <SystemClock_Config+0x108>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a30      	ldr	r2, [pc, #192]	@ (8000930 <SystemClock_Config+0x108>)
 800086e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b2e      	ldr	r3, [pc, #184]	@ (8000930 <SystemClock_Config+0x108>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000880:	bf00      	nop
 8000882:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <SystemClock_Config+0x108>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800088a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800088e:	d1f8      	bne.n	8000882 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000890:	230b      	movs	r3, #11
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800089a:	2301      	movs	r3, #1
 800089c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089e:	2340      	movs	r3, #64	@ 0x40
 80008a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008a2:	2301      	movs	r3, #1
 80008a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	2302      	movs	r3, #2
 80008ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008ae:	2305      	movs	r3, #5
 80008b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80008b2:	2330      	movs	r3, #48	@ 0x30
 80008b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008ba:	2305      	movs	r3, #5
 80008bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008c2:	2308      	movs	r3, #8
 80008c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fdb2 	bl	800143c <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008de:	f000 f8e1 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	233f      	movs	r3, #63	@ 0x3f
 80008e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f001 f9f2 	bl	8001cf0 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000912:	f000 f8c7 	bl	8000aa4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000916:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f001 fb9d 	bl	800205c <HAL_RCC_MCOConfig>
}
 8000922:	bf00      	nop
 8000924:	3770      	adds	r7, #112	@ 0x70
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	58000400 	.word	0x58000400
 8000930:	58024800 	.word	0x58024800

08000934 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000938:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 800093a:	4a23      	ldr	r2, [pc, #140]	@ (80009c8 <MX_USART1_UART_Init+0x94>)
 800093c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093e:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000970:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000976:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097c:	4811      	ldr	r0, [pc, #68]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 800097e:	f003 ff23 	bl	80047c8 <HAL_UART_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 f88c 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	480d      	ldr	r0, [pc, #52]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 8000990:	f004 ff2b 	bl	80057ea <HAL_UARTEx_SetTxFifoThreshold>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800099a:	f000 f883 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099e:	2100      	movs	r1, #0
 80009a0:	4808      	ldr	r0, [pc, #32]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 80009a2:	f004 ff60 	bl	8005866 <HAL_UARTEx_SetRxFifoThreshold>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009ac:	f000 f87a 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_USART1_UART_Init+0x90>)
 80009b2:	f004 fee1 	bl	8005778 <HAL_UARTEx_DisableFifoMode>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009bc:	f000 f872 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	24000030 	.word	0x24000030
 80009c8:	40011000 	.word	0x40011000

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <MX_GPIO_Init+0x9c>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a68 <MX_GPIO_Init+0x9c>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_GPIO_Init+0x9c>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <MX_GPIO_Init+0x9c>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <MX_GPIO_Init+0x9c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a10:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_GPIO_Init+0x9c>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_GPIO_Init+0x9c>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	4a10      	ldr	r2, [pc, #64]	@ (8000a68 <MX_GPIO_Init+0x9c>)
 8000a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_GPIO_Init+0x9c>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_GPIO_Init+0xa0>)
 8000a5a:	f000 fab7 	bl	8000fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	58024400 	.word	0x58024400
 8000a6c:	58020000 	.word	0x58020000

08000a70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f005 f8a1 	bl	8005bc0 <osDelay>
 8000a7e:	e7fb      	b.n	8000a78 <StartDefaultTask+0x8>

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a92:	f000 f98f 	bl	8000db4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40000800 	.word	0x40000800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <Error_Handler+0x8>

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_MspInit+0x38>)
 8000ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <HAL_MspInit+0x38>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <HAL_MspInit+0x38>)
 8000ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	f06f 0001 	mvn.w	r0, #1
 8000adc:	f000 fa4e 	bl	8000f7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	58024400 	.word	0x58024400

08000aec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0bc      	sub	sp, #240	@ 0xf0
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	22c8      	movs	r2, #200	@ 0xc8
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f007 fcfd 	bl	800850c <memset>
  if(huart->Instance==USART1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a27      	ldr	r2, [pc, #156]	@ (8000bb4 <HAL_UART_MspInit+0xc8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d146      	bne.n	8000baa <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b1c:	f04f 0201 	mov.w	r2, #1
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fd14 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b3e:	f7ff ffb1 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <HAL_UART_MspInit+0xcc>)
 8000b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b48:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb8 <HAL_UART_MspInit+0xcc>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <HAL_UART_MspInit+0xcc>)
 8000b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_UART_MspInit+0xcc>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b66:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <HAL_UART_MspInit+0xcc>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <HAL_UART_MspInit+0xcc>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000b7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <HAL_UART_MspInit+0xd0>)
 8000ba6:	f000 fa11 	bl	8000fcc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000baa:	bf00      	nop
 8000bac:	37f0      	adds	r7, #240	@ 0xf0
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	58024400 	.word	0x58024400
 8000bbc:	58020000 	.word	0x58020000

08000bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b090      	sub	sp, #64	@ 0x40
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b0f      	cmp	r3, #15
 8000bcc:	d827      	bhi.n	8000c1e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	201e      	movs	r0, #30
 8000bd4:	f000 f9d2 	bl	8000f7c <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bd8:	201e      	movs	r0, #30
 8000bda:	f000 f9e9 	bl	8000fb0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000bde:	4a29      	ldr	r2, [pc, #164]	@ (8000c84 <HAL_InitTick+0xc4>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000be4:	4b28      	ldr	r3, [pc, #160]	@ (8000c88 <HAL_InitTick+0xc8>)
 8000be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bea:	4a27      	ldr	r2, [pc, #156]	@ (8000c88 <HAL_InitTick+0xc8>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bf4:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <HAL_InitTick+0xc8>)
 8000bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c02:	f107 0210 	add.w	r2, r7, #16
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fc65 	bl	80024dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c14:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d106      	bne.n	8000c2a <HAL_InitTick+0x6a>
 8000c1c:	e001      	b.n	8000c22 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e02b      	b.n	8000c7a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c22:	f001 fc2f 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8000c26:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000c28:	e004      	b.n	8000c34 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c2a:	f001 fc2b 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c36:	4a15      	ldr	r2, [pc, #84]	@ (8000c8c <HAL_InitTick+0xcc>)
 8000c38:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3c:	0c9b      	lsrs	r3, r3, #18
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <HAL_InitTick+0xd0>)
 8000c44:	4a13      	ldr	r2, [pc, #76]	@ (8000c94 <HAL_InitTick+0xd4>)
 8000c46:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <HAL_InitTick+0xd0>)
 8000c4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c4e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000c50:	4a0f      	ldr	r2, [pc, #60]	@ (8000c90 <HAL_InitTick+0xd0>)
 8000c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c54:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <HAL_InitTick+0xd0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_InitTick+0xd0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000c62:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <HAL_InitTick+0xd0>)
 8000c64:	f003 fae8 	bl	8004238 <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d104      	bne.n	8000c78 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000c6e:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <HAL_InitTick+0xd0>)
 8000c70:	f003 fb44 	bl	80042fc <HAL_TIM_Base_Start_IT>
 8000c74:	4603      	mov	r3, r0
 8000c76:	e000      	b.n	8000c7a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3740      	adds	r7, #64	@ 0x40
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	24000008 	.word	0x24000008
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	431bde83 	.word	0x431bde83
 8000c90:	240000c8 	.word	0x240000c8
 8000c94:	40000800 	.word	0x40000800

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <NMI_Handler+0x4>

08000ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <MemManage_Handler+0x4>

08000cb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <TIM4_IRQHandler+0x10>)
 8000cd6:	f003 fb89 	bl	80043ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	240000c8 	.word	0x240000c8

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d20 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000ce8:	f7ff fd3e 	bl	8000768 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cec:	f7ff fc8e 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	@ (8000d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	@ (8000d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d16:	f007 fc01 	bl	800851c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fd3d 	bl	8000798 <main>
  bx  lr
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d20:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d28:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000d2c:	08008628 	.word	0x08008628
  ldr r2, =_sbss
 8000d30:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000d34:	24004a68 	.word	0x24004a68

08000d38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC3_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d42:	2003      	movs	r0, #3
 8000d44:	f000 f90f 	bl	8000f66 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d48:	f001 f9f2 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_Init+0x68>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	4913      	ldr	r1, [pc, #76]	@ (8000da8 <HAL_Init+0x6c>)
 8000d5a:	5ccb      	ldrb	r3, [r1, r3]
 8000d5c:	f003 031f 	and.w	r3, r3, #31
 8000d60:	fa22 f303 	lsr.w	r3, r2, r3
 8000d64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <HAL_Init+0x68>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000da8 <HAL_Init+0x6c>)
 8000d70:	5cd3      	ldrb	r3, [r2, r3]
 8000d72:	f003 031f 	and.w	r3, r3, #31
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dac <HAL_Init+0x70>)
 8000d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d80:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <HAL_Init+0x74>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d86:	200f      	movs	r0, #15
 8000d88:	f7ff ff1a 	bl	8000bc0 <HAL_InitTick>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e002      	b.n	8000d9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d96:	f7ff fe8b 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	58024400 	.word	0x58024400
 8000da8:	080085bc 	.word	0x080085bc
 8000dac:	24000004 	.word	0x24000004
 8000db0:	24000000 	.word	0x24000000

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2400000c 	.word	0x2400000c
 8000dd8:	24000114 	.word	0x24000114

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000114 	.word	0x24000114

08000df4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <HAL_GetREVID+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	0c1b      	lsrs	r3, r3, #16
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	5c001000 	.word	0x5c001000

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <__NVIC_SetPriorityGrouping+0x40>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <__NVIC_SetPriorityGrouping+0x40>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00
 8000e50:	05fa0000 	.word	0x05fa0000

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	@ (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff4c 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8a:	f7ff ff63 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000f8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff ffb3 	bl	8000f00 <NVIC_EncodePriority>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff82 	bl	8000eac <__NVIC_SetPriority>
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff56 	bl	8000e70 <__NVIC_EnableIRQ>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fda:	4b89      	ldr	r3, [pc, #548]	@ (8001200 <HAL_GPIO_Init+0x234>)
 8000fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fde:	e194      	b.n	800130a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8186 	beq.w	8001304 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b01      	cmp	r3, #1
 8001002:	d005      	beq.n	8001010 <HAL_GPIO_Init+0x44>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d130      	bne.n	8001072 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001046:	2201      	movs	r2, #1
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	f003 0201 	and.w	r2, r3, #1
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b03      	cmp	r3, #3
 800107c:	d017      	beq.n	80010ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d123      	bne.n	8001102 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	691a      	ldr	r2, [r3, #16]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	69b9      	ldr	r1, [r7, #24]
 80010fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0203 	and.w	r2, r3, #3
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 80e0 	beq.w	8001304 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001144:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <HAL_GPIO_Init+0x238>)
 8001146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800114a:	4a2e      	ldr	r2, [pc, #184]	@ (8001204 <HAL_GPIO_Init+0x238>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001154:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <HAL_GPIO_Init+0x238>)
 8001156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001162:	4a29      	ldr	r2, [pc, #164]	@ (8001208 <HAL_GPIO_Init+0x23c>)
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a20      	ldr	r2, [pc, #128]	@ (800120c <HAL_GPIO_Init+0x240>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d052      	beq.n	8001234 <HAL_GPIO_Init+0x268>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a1f      	ldr	r2, [pc, #124]	@ (8001210 <HAL_GPIO_Init+0x244>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d031      	beq.n	80011fa <HAL_GPIO_Init+0x22e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a1e      	ldr	r2, [pc, #120]	@ (8001214 <HAL_GPIO_Init+0x248>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_GPIO_Init+0x22a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001218 <HAL_GPIO_Init+0x24c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <HAL_GPIO_Init+0x250>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <HAL_GPIO_Init+0x254>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001224 <HAL_GPIO_Init+0x258>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a19      	ldr	r2, [pc, #100]	@ (8001228 <HAL_GPIO_Init+0x25c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a18      	ldr	r2, [pc, #96]	@ (800122c <HAL_GPIO_Init+0x260>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <HAL_GPIO_Init+0x264>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x20e>
 80011d6:	2309      	movs	r3, #9
 80011d8:	e02d      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011da:	230a      	movs	r3, #10
 80011dc:	e02b      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011de:	2308      	movs	r3, #8
 80011e0:	e029      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e027      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011e6:	2306      	movs	r3, #6
 80011e8:	e025      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e023      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e021      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e01f      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e01d      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e01b      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011fe:	bf00      	nop
 8001200:	58000080 	.word	0x58000080
 8001204:	58024400 	.word	0x58024400
 8001208:	58000400 	.word	0x58000400
 800120c:	58020000 	.word	0x58020000
 8001210:	58020400 	.word	0x58020400
 8001214:	58020800 	.word	0x58020800
 8001218:	58020c00 	.word	0x58020c00
 800121c:	58021000 	.word	0x58021000
 8001220:	58021400 	.word	0x58021400
 8001224:	58021800 	.word	0x58021800
 8001228:	58021c00 	.word	0x58021c00
 800122c:	58022000 	.word	0x58022000
 8001230:	58022400 	.word	0x58022400
 8001234:	2300      	movs	r3, #0
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4093      	lsls	r3, r2
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001246:	4938      	ldr	r1, [pc, #224]	@ (8001328 <HAL_GPIO_Init+0x35c>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800127a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	3301      	adds	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	f47f ae63 	bne.w	8000fe0 <HAL_GPIO_Init+0x14>
  }
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	3724      	adds	r7, #36	@ 0x24
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	58000400 	.word	0x58000400

0800132c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001334:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_HSEM_FastTake+0x2c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3320      	adds	r3, #32
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	4a07      	ldr	r2, [pc, #28]	@ (800135c <HAL_HSEM_FastTake+0x30>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	e000      	b.n	800134a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	58026400 	.word	0x58026400
 800135c:	80000300 	.word	0x80000300

08001360 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800136a:	4906      	ldr	r1, [pc, #24]	@ (8001384 <HAL_HSEM_Release+0x24>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	58026400 	.word	0x58026400

08001388 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001390:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	2b06      	cmp	r3, #6
 800139a:	d00a      	beq.n	80013b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800139c:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d001      	beq.n	80013ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e040      	b.n	8001430 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e03e      	b.n	8001430 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013b2:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80013ba:	491f      	ldr	r1, [pc, #124]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4313      	orrs	r3, r2
 80013c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80013c2:	f7ff fd0b 	bl	8000ddc <HAL_GetTick>
 80013c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013c8:	e009      	b.n	80013de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013ca:	f7ff fd07 	bl	8000ddc <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013d8:	d901      	bls.n	80013de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e028      	b.n	8001430 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013ea:	d1ee      	bne.n	80013ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b1e      	cmp	r3, #30
 80013f0:	d008      	beq.n	8001404 <HAL_PWREx_ConfigSupply+0x7c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80013f6:	d005      	beq.n	8001404 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b1d      	cmp	r3, #29
 80013fc:	d002      	beq.n	8001404 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b2d      	cmp	r3, #45	@ 0x2d
 8001402:	d114      	bne.n	800142e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001404:	f7ff fcea 	bl	8000ddc <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800140a:	e009      	b.n	8001420 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800140c:	f7ff fce6 	bl	8000ddc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800141a:	d901      	bls.n	8001420 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e007      	b.n	8001430 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800142c:	d1ee      	bne.n	800140c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	58024800 	.word	0x58024800

0800143c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	@ 0x30
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	f000 bc48 	b.w	8001ce0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 8088 	beq.w	800156e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145e:	4b99      	ldr	r3, [pc, #612]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001468:	4b96      	ldr	r3, [pc, #600]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800146a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800146e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001470:	2b10      	cmp	r3, #16
 8001472:	d007      	beq.n	8001484 <HAL_RCC_OscConfig+0x48>
 8001474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001476:	2b18      	cmp	r3, #24
 8001478:	d111      	bne.n	800149e <HAL_RCC_OscConfig+0x62>
 800147a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d10c      	bne.n	800149e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	4b8f      	ldr	r3, [pc, #572]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d06d      	beq.n	800156c <HAL_RCC_OscConfig+0x130>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d169      	bne.n	800156c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	f000 bc21 	b.w	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x7a>
 80014a8:	4b86      	ldr	r3, [pc, #536]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a85      	ldr	r2, [pc, #532]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e02e      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x9c>
 80014be:	4b81      	ldr	r3, [pc, #516]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a80      	ldr	r2, [pc, #512]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b7e      	ldr	r3, [pc, #504]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7d      	ldr	r2, [pc, #500]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0xc0>
 80014e2:	4b78      	ldr	r3, [pc, #480]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a77      	ldr	r2, [pc, #476]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b75      	ldr	r3, [pc, #468]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a74      	ldr	r2, [pc, #464]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014fc:	4b71      	ldr	r3, [pc, #452]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a70      	ldr	r2, [pc, #448]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b6e      	ldr	r3, [pc, #440]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6d      	ldr	r2, [pc, #436]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fc5e 	bl	8000ddc <HAL_GetTick>
 8001520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fc5a 	bl	8000ddc <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e3d4      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001536:	4b63      	ldr	r3, [pc, #396]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xe8>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fc4a 	bl	8000ddc <HAL_GetTick>
 8001548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fc46 	bl	8000ddc <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e3c0      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800155e:	4b59      	ldr	r3, [pc, #356]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x110>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80ca 	beq.w	8001710 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157c:	4b51      	ldr	r3, [pc, #324]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001584:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001586:	4b4f      	ldr	r3, [pc, #316]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_RCC_OscConfig+0x166>
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	2b18      	cmp	r3, #24
 8001596:	d156      	bne.n	8001646 <HAL_RCC_OscConfig+0x20a>
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d151      	bne.n	8001646 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a2:	4b48      	ldr	r3, [pc, #288]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x17e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e392      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015ba:	4b42      	ldr	r3, [pc, #264]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 0219 	bic.w	r2, r3, #25
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	493f      	ldr	r1, [pc, #252]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc06 	bl	8000ddc <HAL_GetTick>
 80015d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fc02 	bl	8000ddc <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e37c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015e6:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	f7ff fbff 	bl	8000df4 <HAL_GetREVID>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d817      	bhi.n	8001630 <HAL_RCC_OscConfig+0x1f4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b40      	cmp	r3, #64	@ 0x40
 8001606:	d108      	bne.n	800161a <HAL_RCC_OscConfig+0x1de>
 8001608:	4b2e      	ldr	r3, [pc, #184]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001610:	4a2c      	ldr	r2, [pc, #176]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001616:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001618:	e07a      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	031b      	lsls	r3, r3, #12
 8001628:	4926      	ldr	r1, [pc, #152]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162e:	e06f      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b24      	ldr	r3, [pc, #144]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	4921      	ldr	r1, [pc, #132]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001644:	e064      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d047      	beq.n	80016de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0219 	bic.w	r2, r3, #25
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	491a      	ldr	r1, [pc, #104]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fbbc 	bl	8000ddc <HAL_GetTick>
 8001664:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff fbb8 	bl	8000ddc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e332      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800167a:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	f7ff fbb5 	bl	8000df4 <HAL_GetREVID>
 800168a:	4603      	mov	r3, r0
 800168c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001690:	4293      	cmp	r3, r2
 8001692:	d819      	bhi.n	80016c8 <HAL_RCC_OscConfig+0x28c>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b40      	cmp	r3, #64	@ 0x40
 800169a:	d108      	bne.n	80016ae <HAL_RCC_OscConfig+0x272>
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016aa:	6053      	str	r3, [r2, #4]
 80016ac:	e030      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	031b      	lsls	r3, r3, #12
 80016bc:	4901      	ldr	r1, [pc, #4]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
 80016c2:	e025      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
 80016c4:	58024400 	.word	0x58024400
 80016c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	061b      	lsls	r3, r3, #24
 80016d6:	4997      	ldr	r1, [pc, #604]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
 80016dc:	e018      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b95      	ldr	r3, [pc, #596]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a94      	ldr	r2, [pc, #592]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff fb77 	bl	8000ddc <HAL_GetTick>
 80016ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fb73 	bl	8000ddc <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e2ed      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001704:	4b8b      	ldr	r3, [pc, #556]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a9 	beq.w	8001870 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171e:	4b85      	ldr	r3, [pc, #532]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001726:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001728:	4b82      	ldr	r3, [pc, #520]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b08      	cmp	r3, #8
 8001732:	d007      	beq.n	8001744 <HAL_RCC_OscConfig+0x308>
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2b18      	cmp	r3, #24
 8001738:	d13a      	bne.n	80017b0 <HAL_RCC_OscConfig+0x374>
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d135      	bne.n	80017b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001744:	4b7b      	ldr	r3, [pc, #492]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x320>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b80      	cmp	r3, #128	@ 0x80
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e2c1      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800175c:	f7ff fb4a 	bl	8000df4 <HAL_GetREVID>
 8001760:	4603      	mov	r3, r0
 8001762:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001766:	4293      	cmp	r3, r2
 8001768:	d817      	bhi.n	800179a <HAL_RCC_OscConfig+0x35e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	2b20      	cmp	r3, #32
 8001770:	d108      	bne.n	8001784 <HAL_RCC_OscConfig+0x348>
 8001772:	4b70      	ldr	r3, [pc, #448]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800177a:	4a6e      	ldr	r2, [pc, #440]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800177c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001780:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001782:	e075      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001784:	4b6b      	ldr	r3, [pc, #428]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	069b      	lsls	r3, r3, #26
 8001792:	4968      	ldr	r1, [pc, #416]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001798:	e06a      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800179a:	4b66      	ldr	r3, [pc, #408]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	061b      	lsls	r3, r3, #24
 80017a8:	4962      	ldr	r1, [pc, #392]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017ae:	e05f      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d042      	beq.n	800183e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80017be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb0a 	bl	8000ddc <HAL_GetTick>
 80017c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017cc:	f7ff fb06 	bl	8000ddc <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e280      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017de:	4b55      	ldr	r3, [pc, #340]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017ea:	f7ff fb03 	bl	8000df4 <HAL_GetREVID>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d817      	bhi.n	8001828 <HAL_RCC_OscConfig+0x3ec>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	2b20      	cmp	r3, #32
 80017fe:	d108      	bne.n	8001812 <HAL_RCC_OscConfig+0x3d6>
 8001800:	4b4c      	ldr	r3, [pc, #304]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001808:	4a4a      	ldr	r2, [pc, #296]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800180a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800180e:	6053      	str	r3, [r2, #4]
 8001810:	e02e      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
 8001812:	4b48      	ldr	r3, [pc, #288]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	069b      	lsls	r3, r3, #26
 8001820:	4944      	ldr	r1, [pc, #272]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
 8001826:	e023      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
 8001828:	4b42      	ldr	r3, [pc, #264]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	493f      	ldr	r1, [pc, #252]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001838:	4313      	orrs	r3, r2
 800183a:	60cb      	str	r3, [r1, #12]
 800183c:	e018      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800183e:	4b3d      	ldr	r3, [pc, #244]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a3c      	ldr	r2, [pc, #240]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff fac7 	bl	8000ddc <HAL_GetTick>
 800184e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001852:	f7ff fac3 	bl	8000ddc <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e23d      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001864:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d036      	beq.n	80018ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d019      	beq.n	80018b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001884:	4b2b      	ldr	r3, [pc, #172]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001888:	4a2a      	ldr	r2, [pc, #168]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff faa4 	bl	8000ddc <HAL_GetTick>
 8001894:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff faa0 	bl	8000ddc <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e21a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80018ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x45c>
 80018b6:	e018      	b.n	80018ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80018ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff fa8a 	bl	8000ddc <HAL_GetTick>
 80018c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fa86 	bl	8000ddc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e200      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d039      	beq.n	800196a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01c      	beq.n	8001938 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a0c      	ldr	r2, [pc, #48]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001904:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001908:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800190a:	f7ff fa67 	bl	8000ddc <HAL_GetTick>
 800190e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001912:	f7ff fa63 	bl	8000ddc <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1dd      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x4d6>
 8001930:	e01b      	b.n	800196a <HAL_RCC_OscConfig+0x52e>
 8001932:	bf00      	nop
 8001934:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001938:	4b9b      	ldr	r3, [pc, #620]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a9a      	ldr	r2, [pc, #616]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 800193e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001942:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001944:	f7ff fa4a 	bl	8000ddc <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194c:	f7ff fa46 	bl	8000ddc <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1c0      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800195e:	4b92      	ldr	r3, [pc, #584]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8081 	beq.w	8001a7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001978:	4b8c      	ldr	r3, [pc, #560]	@ (8001bac <HAL_RCC_OscConfig+0x770>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a8b      	ldr	r2, [pc, #556]	@ (8001bac <HAL_RCC_OscConfig+0x770>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001982:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001984:	f7ff fa2a 	bl	8000ddc <HAL_GetTick>
 8001988:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198c:	f7ff fa26 	bl	8000ddc <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	@ 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e1a0      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800199e:	4b83      	ldr	r3, [pc, #524]	@ (8001bac <HAL_RCC_OscConfig+0x770>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x584>
 80019b2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80019be:	e02d      	b.n	8001a1c <HAL_RCC_OscConfig+0x5e0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5a6>
 80019c8:	4b77      	ldr	r3, [pc, #476]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019cc:	4a76      	ldr	r2, [pc, #472]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d4:	4b74      	ldr	r3, [pc, #464]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d8:	4a73      	ldr	r2, [pc, #460]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019da:	f023 0304 	bic.w	r3, r3, #4
 80019de:	6713      	str	r3, [r2, #112]	@ 0x70
 80019e0:	e01c      	b.n	8001a1c <HAL_RCC_OscConfig+0x5e0>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x5c8>
 80019ea:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ee:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f6:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fa:	4a6b      	ldr	r2, [pc, #428]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0x5e0>
 8001a04:	4b68      	ldr	r3, [pc, #416]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a08:	4a67      	ldr	r2, [pc, #412]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a0a:	f023 0301 	bic.w	r3, r3, #1
 8001a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a10:	4b65      	ldr	r3, [pc, #404]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a14:	4a64      	ldr	r2, [pc, #400]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a16:	f023 0304 	bic.w	r3, r3, #4
 8001a1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d015      	beq.n	8001a50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f9da 	bl	8000ddc <HAL_GetTick>
 8001a28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2c:	f7ff f9d6 	bl	8000ddc <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e14e      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a42:	4b59      	ldr	r3, [pc, #356]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0ee      	beq.n	8001a2c <HAL_RCC_OscConfig+0x5f0>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f9c4 	bl	8000ddc <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff f9c0 	bl	8000ddc <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e138      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ee      	bne.n	8001a58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 812d 	beq.w	8001cde <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a84:	4b48      	ldr	r3, [pc, #288]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a8c:	2b18      	cmp	r3, #24
 8001a8e:	f000 80bd 	beq.w	8001c0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	f040 809e 	bne.w	8001bd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b42      	ldr	r3, [pc, #264]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a41      	ldr	r2, [pc, #260]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f998 	bl	8000ddc <HAL_GetTick>
 8001aac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f994 	bl	8000ddc <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e10e      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ac2:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001ad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ad2:	4b37      	ldr	r3, [pc, #220]	@ (8001bb0 <HAL_RCC_OscConfig+0x774>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	4931      	ldr	r1, [pc, #196]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aec:	3b01      	subs	r3, #1
 8001aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af6:	3b01      	subs	r3, #1
 8001af8:	025b      	lsls	r3, r3, #9
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b10:	3b01      	subs	r3, #1
 8001b12:	061b      	lsls	r3, r3, #24
 8001b14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001b18:	4923      	ldr	r1, [pc, #140]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	4a21      	ldr	r2, [pc, #132]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2e:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <HAL_RCC_OscConfig+0x778>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b36:	00d2      	lsls	r2, r2, #3
 8001b38:	491b      	ldr	r1, [pc, #108]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b42:	f023 020c 	bic.w	r2, r3, #12
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	4917      	ldr	r1, [pc, #92]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b50:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	f023 0202 	bic.w	r2, r3, #2
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5c:	4912      	ldr	r1, [pc, #72]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b66:	4a10      	ldr	r2, [pc, #64]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b86:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b92:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f91d 	bl	8000ddc <HAL_GetTick>
 8001ba2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ba4:	e011      	b.n	8001bca <HAL_RCC_OscConfig+0x78e>
 8001ba6:	bf00      	nop
 8001ba8:	58024400 	.word	0x58024400
 8001bac:	58024800 	.word	0x58024800
 8001bb0:	fffffc0c 	.word	0xfffffc0c
 8001bb4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff f910 	bl	8000ddc <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e08a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bca:	4b47      	ldr	r3, [pc, #284]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x77c>
 8001bd6:	e082      	b.n	8001cde <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd8:	4b43      	ldr	r3, [pc, #268]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a42      	ldr	r2, [pc, #264]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f8fa 	bl	8000ddc <HAL_GetTick>
 8001be8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f8f6 	bl	8000ddc <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e070      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x7b0>
 8001c0a:	e068      	b.n	8001cde <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c12:	4b35      	ldr	r3, [pc, #212]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d031      	beq.n	8001c84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f003 0203 	and.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d12a      	bne.n	8001c84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d122      	bne.n	8001c84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d11a      	bne.n	8001c84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	0a5b      	lsrs	r3, r3, #9
 8001c52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d111      	bne.n	8001c84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d108      	bne.n	8001c84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	0e1b      	lsrs	r3, r3, #24
 8001c76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e02b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c88:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d01f      	beq.n	8001cde <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca2:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001caa:	f7ff f897 	bl	8000ddc <HAL_GetTick>
 8001cae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001cb0:	bf00      	nop
 8001cb2:	f7ff f893 	bl	8000ddc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d0f9      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_RCC_OscConfig+0x8b0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cca:	00d2      	lsls	r2, r2, #3
 8001ccc:	4906      	ldr	r1, [pc, #24]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001cd2:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3730      	adds	r7, #48	@ 0x30
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	58024400 	.word	0x58024400
 8001cec:	ffff0007 	.word	0xffff0007

08001cf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e19c      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b8a      	ldr	r3, [pc, #552]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d910      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b87      	ldr	r3, [pc, #540]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 020f 	bic.w	r2, r3, #15
 8001d1a:	4985      	ldr	r1, [pc, #532]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b83      	ldr	r3, [pc, #524]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e184      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d010      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	4b7b      	ldr	r3, [pc, #492]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d908      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d50:	4b78      	ldr	r3, [pc, #480]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	4975      	ldr	r1, [pc, #468]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d010      	beq.n	8001d90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	4b70      	ldr	r3, [pc, #448]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d908      	bls.n	8001d90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	496a      	ldr	r1, [pc, #424]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	4b64      	ldr	r3, [pc, #400]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d908      	bls.n	8001dbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001dac:	4b61      	ldr	r3, [pc, #388]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	495e      	ldr	r1, [pc, #376]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	4b59      	ldr	r3, [pc, #356]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d908      	bls.n	8001dec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001dda:	4b56      	ldr	r3, [pc, #344]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4953      	ldr	r1, [pc, #332]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d010      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d908      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b4a      	ldr	r3, [pc, #296]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f023 020f 	bic.w	r2, r3, #15
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4947      	ldr	r1, [pc, #284]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d055      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e26:	4b43      	ldr	r3, [pc, #268]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4940      	ldr	r1, [pc, #256]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e40:	4b3c      	ldr	r3, [pc, #240]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d121      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0f6      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e58:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d115      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0ea      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e70:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0de      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e80:	4b2c      	ldr	r3, [pc, #176]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0d6      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e90:	4b28      	ldr	r3, [pc, #160]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f023 0207 	bic.w	r2, r3, #7
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4925      	ldr	r1, [pc, #148]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea2:	f7fe ff9b 	bl	8000ddc <HAL_GetTick>
 8001ea6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eaa:	f7fe ff97 	bl	8000ddc <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0be      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d1eb      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d010      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d208      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f023 020f 	bic.w	r2, r3, #15
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	490e      	ldr	r1, [pc, #56]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d214      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 020f 	bic.w	r2, r3, #15
 8001f16:	4906      	ldr	r1, [pc, #24]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e086      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
 8001f30:	52002000 	.word	0x52002000
 8001f34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d010      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	4b3f      	ldr	r3, [pc, #252]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d208      	bcs.n	8001f66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f54:	4b3c      	ldr	r3, [pc, #240]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	4939      	ldr	r1, [pc, #228]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d010      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	4b34      	ldr	r3, [pc, #208]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d208      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f82:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	492e      	ldr	r1, [pc, #184]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d010      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d208      	bcs.n	8001fc2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fb0:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4922      	ldr	r1, [pc, #136]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d010      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d208      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fde:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4917      	ldr	r1, [pc, #92]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ff0:	f000 f89e 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	4912      	ldr	r1, [pc, #72]	@ (800204c <HAL_RCC_ClockConfig+0x35c>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800200e:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <HAL_RCC_ClockConfig+0x35c>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
 8002024:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <HAL_RCC_ClockConfig+0x360>)
 8002026:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002028:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <HAL_RCC_ClockConfig+0x364>)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <HAL_RCC_ClockConfig+0x368>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fdc4 	bl	8000bc0 <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	58024400 	.word	0x58024400
 800204c:	080085bc 	.word	0x080085bc
 8002050:	24000004 	.word	0x24000004
 8002054:	24000000 	.word	0x24000000
 8002058:	24000008 	.word	0x24000008

0800205c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d12a      	bne.n	80020c4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800206e:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002074:	4a2b      	ldr	r2, [pc, #172]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207e:	4b29      	ldr	r3, [pc, #164]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800208c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	481f      	ldr	r0, [pc, #124]	@ (8002128 <HAL_RCC_MCOConfig+0xcc>)
 80020aa:	f7fe ff8f 	bl	8000fcc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80020ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	430b      	orrs	r3, r1
 80020bc:	4919      	ldr	r1, [pc, #100]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80020c2:	e02a      	b.n	800211a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80020c4:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ca:	4a16      	ldr	r2, [pc, #88]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 80020cc:	f043 0304 	orr.w	r3, r3, #4
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80020e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	4619      	mov	r1, r3
 80020fe:	480b      	ldr	r0, [pc, #44]	@ (800212c <HAL_RCC_MCOConfig+0xd0>)
 8002100:	f7fe ff64 	bl	8000fcc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002104:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	01d9      	lsls	r1, r3, #7
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	430b      	orrs	r3, r1
 8002114:	4903      	ldr	r1, [pc, #12]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 8002116:	4313      	orrs	r3, r2
 8002118:	610b      	str	r3, [r1, #16]
}
 800211a:	bf00      	nop
 800211c:	3730      	adds	r7, #48	@ 0x30
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	58024400 	.word	0x58024400
 8002128:	58020000 	.word	0x58020000
 800212c:	58020800 	.word	0x58020800

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	@ 0x24
 8002134:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002136:	4bb3      	ldr	r3, [pc, #716]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800213e:	2b18      	cmp	r3, #24
 8002140:	f200 8155 	bhi.w	80023ee <HAL_RCC_GetSysClockFreq+0x2be>
 8002144:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	080021b1 	.word	0x080021b1
 8002150:	080023ef 	.word	0x080023ef
 8002154:	080023ef 	.word	0x080023ef
 8002158:	080023ef 	.word	0x080023ef
 800215c:	080023ef 	.word	0x080023ef
 8002160:	080023ef 	.word	0x080023ef
 8002164:	080023ef 	.word	0x080023ef
 8002168:	080023ef 	.word	0x080023ef
 800216c:	080021d7 	.word	0x080021d7
 8002170:	080023ef 	.word	0x080023ef
 8002174:	080023ef 	.word	0x080023ef
 8002178:	080023ef 	.word	0x080023ef
 800217c:	080023ef 	.word	0x080023ef
 8002180:	080023ef 	.word	0x080023ef
 8002184:	080023ef 	.word	0x080023ef
 8002188:	080023ef 	.word	0x080023ef
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080023ef 	.word	0x080023ef
 8002194:	080023ef 	.word	0x080023ef
 8002198:	080023ef 	.word	0x080023ef
 800219c:	080023ef 	.word	0x080023ef
 80021a0:	080023ef 	.word	0x080023ef
 80021a4:	080023ef 	.word	0x080023ef
 80021a8:	080023ef 	.word	0x080023ef
 80021ac:	080021e3 	.word	0x080021e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021b0:	4b94      	ldr	r3, [pc, #592]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d009      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021bc:	4b91      	ldr	r3, [pc, #580]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	4a90      	ldr	r2, [pc, #576]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
 80021cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80021ce:	e111      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021d2:	61bb      	str	r3, [r7, #24]
      break;
 80021d4:	e10e      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80021d6:	4b8d      	ldr	r3, [pc, #564]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021d8:	61bb      	str	r3, [r7, #24]
      break;
 80021da:	e10b      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021de:	61bb      	str	r3, [r7, #24]
      break;
 80021e0:	e108      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021e2:	4b88      	ldr	r3, [pc, #544]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80021ec:	4b85      	ldr	r3, [pc, #532]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021f8:	4b82      	ldr	r3, [pc, #520]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002202:	4b80      	ldr	r3, [pc, #512]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80e1 	beq.w	80023e8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b02      	cmp	r3, #2
 800222a:	f000 8083 	beq.w	8002334 <HAL_RCC_GetSysClockFreq+0x204>
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b02      	cmp	r3, #2
 8002232:	f200 80a1 	bhi.w	8002378 <HAL_RCC_GetSysClockFreq+0x248>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x114>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d056      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002242:	e099      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002244:	4b6f      	ldr	r3, [pc, #444]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d02d      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002250:	4b6c      	ldr	r3, [pc, #432]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	4a6b      	ldr	r2, [pc, #428]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800227a:	4b62      	ldr	r3, [pc, #392]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800228a:	ed97 6a02 	vldr	s12, [r7, #8]
 800228e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800229a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800229e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80022aa:	e087      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002418 <HAL_RCC_GetSysClockFreq+0x2e8>
 80022ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022be:	4b51      	ldr	r3, [pc, #324]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80022d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ee:	e065      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2ec>
 80022fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002302:	4b40      	ldr	r3, [pc, #256]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002312:	ed97 6a02 	vldr	s12, [r7, #8]
 8002316:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800231a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800231e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800232a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002332:	e043      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002420 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002346:	4b2f      	ldr	r3, [pc, #188]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002356:	ed97 6a02 	vldr	s12, [r7, #8]
 800235a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800235e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800236a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800236e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002376:	e021      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002382:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800238a:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800239a:	ed97 6a02 	vldr	s12, [r7, #8]
 800239e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80023bc:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	0a5b      	lsrs	r3, r3, #9
 80023c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023c6:	3301      	adds	r3, #1
 80023c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80023d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
      break;
 80023ec:	e002      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80023ee:	4b07      	ldr	r3, [pc, #28]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023f0:	61bb      	str	r3, [r7, #24]
      break;
 80023f2:	bf00      	nop
  }

  return sysclockfreq;
 80023f4:	69bb      	ldr	r3, [r7, #24]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	58024400 	.word	0x58024400
 8002408:	03d09000 	.word	0x03d09000
 800240c:	003d0900 	.word	0x003d0900
 8002410:	017d7840 	.word	0x017d7840
 8002414:	46000000 	.word	0x46000000
 8002418:	4c742400 	.word	0x4c742400
 800241c:	4a742400 	.word	0x4a742400
 8002420:	4bbebc20 	.word	0x4bbebc20

08002424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800242a:	f7ff fe81 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 800242e:	4602      	mov	r2, r0
 8002430:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_RCC_GetHCLKFreq+0x50>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	490f      	ldr	r1, [pc, #60]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x54>)
 800243c:	5ccb      	ldrb	r3, [r1, r3]
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002448:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <HAL_RCC_GetHCLKFreq+0x50>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	4a09      	ldr	r2, [pc, #36]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x54>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	4a07      	ldr	r2, [pc, #28]	@ (800247c <HAL_RCC_GetHCLKFreq+0x58>)
 8002460:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002462:	4a07      	ldr	r2, [pc, #28]	@ (8002480 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <HAL_RCC_GetHCLKFreq+0x58>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024400 	.word	0x58024400
 8002478:	080085bc 	.word	0x080085bc
 800247c:	24000004 	.word	0x24000004
 8002480:	24000000 	.word	0x24000000

08002484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002488:	f7ff ffcc 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4904      	ldr	r1, [pc, #16]	@ (80024ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	58024400 	.word	0x58024400
 80024ac:	080085bc 	.word	0x080085bc

080024b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80024b4:	f7ff ffb6 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4904      	ldr	r1, [pc, #16]	@ (80024d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	58024400 	.word	0x58024400
 80024d8:	080085bc 	.word	0x080085bc

080024dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	223f      	movs	r2, #63	@ 0x3f
 80024ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <HAL_RCC_GetClockConfig+0x7c>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f003 0207 	and.w	r2, r3, #7
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80024f8:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <HAL_RCC_GetClockConfig+0x7c>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002504:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <HAL_RCC_GetClockConfig+0x7c>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 020f 	and.w	r2, r3, #15
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_RCC_GetClockConfig+0x7c>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800251c:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <HAL_RCC_GetClockConfig+0x7c>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_RCC_GetClockConfig+0x7c>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_RCC_GetClockConfig+0x7c>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_GetClockConfig+0x80>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	601a      	str	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	58024400 	.word	0x58024400
 800255c:	52002000 	.word	0x52002000

08002560 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002564:	b0cc      	sub	sp, #304	@ 0x130
 8002566:	af00      	add	r7, sp, #0
 8002568:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800256c:	2300      	movs	r3, #0
 800256e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002572:	2300      	movs	r3, #0
 8002574:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002578:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002584:	2500      	movs	r5, #0
 8002586:	ea54 0305 	orrs.w	r3, r4, r5
 800258a:	d049      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800258c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002592:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002596:	d02f      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002598:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800259c:	d828      	bhi.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800259e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025a2:	d01a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025a8:	d822      	bhi.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025b2:	d007      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025b4:	e01c      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b6:	4bb8      	ldr	r3, [pc, #736]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	4ab7      	ldr	r2, [pc, #732]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025c2:	e01a      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80025c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025c8:	3308      	adds	r3, #8
 80025ca:	2102      	movs	r1, #2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 fccf 	bl	8003f70 <RCCEx_PLL2_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025d8:	e00f      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80025da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025de:	3328      	adds	r3, #40	@ 0x28
 80025e0:	2102      	movs	r1, #2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 fd76 	bl	80040d4 <RCCEx_PLL3_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025ee:	e004      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80025f6:	e000      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80025f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10a      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002602:	4ba5      	ldr	r3, [pc, #660]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002606:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800260a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800260e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002610:	4aa1      	ldr	r2, [pc, #644]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002612:	430b      	orrs	r3, r1
 8002614:	6513      	str	r3, [r2, #80]	@ 0x50
 8002616:	e003      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002618:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800261c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002620:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800262c:	f04f 0900 	mov.w	r9, #0
 8002630:	ea58 0309 	orrs.w	r3, r8, r9
 8002634:	d047      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002636:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800263a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263c:	2b04      	cmp	r3, #4
 800263e:	d82a      	bhi.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002640:	a201      	add	r2, pc, #4	@ (adr r2, 8002648 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002646:	bf00      	nop
 8002648:	0800265d 	.word	0x0800265d
 800264c:	0800266b 	.word	0x0800266b
 8002650:	08002681 	.word	0x08002681
 8002654:	0800269f 	.word	0x0800269f
 8002658:	0800269f 	.word	0x0800269f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800265c:	4b8e      	ldr	r3, [pc, #568]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	4a8d      	ldr	r2, [pc, #564]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002668:	e01a      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800266a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800266e:	3308      	adds	r3, #8
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f001 fc7c 	bl	8003f70 <RCCEx_PLL2_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800267e:	e00f      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002680:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002684:	3328      	adds	r3, #40	@ 0x28
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fd23 	bl	80040d4 <RCCEx_PLL3_Config>
 800268e:	4603      	mov	r3, r0
 8002690:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002694:	e004      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800269c:	e000      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800269e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ac:	f023 0107 	bic.w	r1, r3, #7
 80026b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	4a78      	ldr	r2, [pc, #480]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80026bc:	e003      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80026c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80026d2:	f04f 0b00 	mov.w	fp, #0
 80026d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80026da:	d04c      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80026dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026e6:	d030      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80026e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ec:	d829      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80026f0:	d02d      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80026f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80026f4:	d825      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026f6:	2b80      	cmp	r3, #128	@ 0x80
 80026f8:	d018      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80026fa:	2b80      	cmp	r3, #128	@ 0x80
 80026fc:	d821      	bhi.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002702:	2b40      	cmp	r3, #64	@ 0x40
 8002704:	d007      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002706:	e01c      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002708:	4b63      	ldr	r3, [pc, #396]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	4a62      	ldr	r2, [pc, #392]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800270e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002714:	e01c      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800271a:	3308      	adds	r3, #8
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f001 fc26 	bl	8003f70 <RCCEx_PLL2_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800272a:	e011      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800272c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002730:	3328      	adds	r3, #40	@ 0x28
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f001 fccd 	bl	80040d4 <RCCEx_PLL3_Config>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002740:	e006      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002748:	e002      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800274a:	bf00      	nop
 800274c:	e000      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800274e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002750:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002758:	4b4f      	ldr	r3, [pc, #316]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800275a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002760:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	4a4c      	ldr	r2, [pc, #304]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002768:	430b      	orrs	r3, r1
 800276a:	6513      	str	r3, [r2, #80]	@ 0x50
 800276c:	e003      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002772:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002776:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002782:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800278c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002790:	460b      	mov	r3, r1
 8002792:	4313      	orrs	r3, r2
 8002794:	d053      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002796:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800279a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800279e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027a2:	d035      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80027a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027a8:	d82e      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027ae:	d031      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80027b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027b4:	d828      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ba:	d01a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80027bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c0:	d822      	bhi.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80027c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027ca:	d007      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80027cc:	e01c      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ce:	4b32      	ldr	r3, [pc, #200]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	4a31      	ldr	r2, [pc, #196]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027da:	e01c      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027e0:	3308      	adds	r3, #8
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 fbc3 	bl	8003f70 <RCCEx_PLL2_Config>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80027f0:	e011      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027f6:	3328      	adds	r3, #40	@ 0x28
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 fc6a 	bl	80040d4 <RCCEx_PLL3_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002806:	e006      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800280e:	e002      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002810:	bf00      	nop
 8002812:	e000      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002816:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10b      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002822:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002826:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800282a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800282e:	4a1a      	ldr	r2, [pc, #104]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002830:	430b      	orrs	r3, r1
 8002832:	6593      	str	r3, [r2, #88]	@ 0x58
 8002834:	e003      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002836:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800283a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800283e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800284a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002854:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002858:	460b      	mov	r3, r1
 800285a:	4313      	orrs	r3, r2
 800285c:	d056      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800285e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002866:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800286a:	d038      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800286c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002870:	d831      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002872:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002876:	d034      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002878:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800287c:	d82b      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800287e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002882:	d01d      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002884:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002888:	d825      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800288e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002894:	e01f      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002896:	bf00      	nop
 8002898:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289c:	4ba2      	ldr	r3, [pc, #648]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	4aa1      	ldr	r2, [pc, #644]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028a8:	e01c      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028ae:	3308      	adds	r3, #8
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 fb5c 	bl	8003f70 <RCCEx_PLL2_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80028be:	e011      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028c4:	3328      	adds	r3, #40	@ 0x28
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f001 fc03 	bl	80040d4 <RCCEx_PLL3_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028d4:	e006      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80028dc:	e002      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80028e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80028f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80028fc:	4a8a      	ldr	r2, [pc, #552]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028fe:	430b      	orrs	r3, r1
 8002900:	6593      	str	r3, [r2, #88]	@ 0x58
 8002902:	e003      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002904:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002908:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800290c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002918:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002922:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002926:	460b      	mov	r3, r1
 8002928:	4313      	orrs	r3, r2
 800292a:	d03a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800292c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002932:	2b30      	cmp	r3, #48	@ 0x30
 8002934:	d01f      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002936:	2b30      	cmp	r3, #48	@ 0x30
 8002938:	d819      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800293a:	2b20      	cmp	r3, #32
 800293c:	d00c      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800293e:	2b20      	cmp	r3, #32
 8002940:	d815      	bhi.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002942:	2b00      	cmp	r3, #0
 8002944:	d019      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002946:	2b10      	cmp	r3, #16
 8002948:	d111      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800294a:	4b77      	ldr	r3, [pc, #476]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	4a76      	ldr	r2, [pc, #472]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002954:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002956:	e011      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002958:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800295c:	3308      	adds	r3, #8
 800295e:	2102      	movs	r1, #2
 8002960:	4618      	mov	r0, r3
 8002962:	f001 fb05 	bl	8003f70 <RCCEx_PLL2_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800296c:	e006      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002974:	e002      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800297a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800297c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002984:	4b68      	ldr	r3, [pc, #416]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002988:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800298c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	4a65      	ldr	r2, [pc, #404]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002994:	430b      	orrs	r3, r1
 8002996:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002998:	e003      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800299e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80029ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80029b8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80029bc:	460b      	mov	r3, r1
 80029be:	4313      	orrs	r3, r2
 80029c0:	d051      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80029c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029cc:	d035      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80029ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029d2:	d82e      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029d8:	d031      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80029da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029de:	d828      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029e4:	d01a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80029e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ea:	d822      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80029f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f4:	d007      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80029f6:	e01c      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a04:	e01c      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 faae 	bl	8003f70 <RCCEx_PLL2_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a1a:	e011      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a20:	3328      	adds	r3, #40	@ 0x28
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 fb55 	bl	80040d4 <RCCEx_PLL3_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a30:	e006      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a38:	e002      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a3a:	bf00      	nop
 8002a3c:	e000      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a48:	4b37      	ldr	r3, [pc, #220]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a4c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a56:	4a34      	ldr	r2, [pc, #208]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a5c:	e003      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002a72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002a7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4313      	orrs	r3, r2
 8002a84:	d056      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a90:	d033      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002a92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a96:	d82c      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a9c:	d02f      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002a9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002aa2:	d826      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002aa4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002aa8:	d02b      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002aaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002aae:	d820      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ab0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ab4:	d012      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002aba:	d81a      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d022      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac4:	d115      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aca:	3308      	adds	r3, #8
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 fa4e 	bl	8003f70 <RCCEx_PLL2_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ada:	e015      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ae0:	3328      	adds	r3, #40	@ 0x28
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 faf5 	bl	80040d4 <RCCEx_PLL3_Config>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002af0:	e00a      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002af8:	e006      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002afa:	bf00      	nop
 8002afc:	e004      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002afe:	bf00      	nop
 8002b00:	e002      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b02:	bf00      	nop
 8002b04:	e000      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10d      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b1e:	4a02      	ldr	r2, [pc, #8]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b24:	e006      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b26:	bf00      	nop
 8002b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b30:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002b40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002b4a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4313      	orrs	r3, r2
 8002b52:	d055      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b60:	d033      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b66:	d82c      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6c:	d02f      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b72:	d826      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b78:	d02b      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002b7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b7e:	d820      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b84:	d012      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b8a:	d81a      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d022      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b94:	d115      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 f9e6 	bl	8003f70 <RCCEx_PLL2_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002baa:	e015      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bb0:	3328      	adds	r3, #40	@ 0x28
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 fa8d 	bl	80040d4 <RCCEx_PLL3_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bc8:	e006      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bca:	bf00      	nop
 8002bcc:	e004      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bce:	bf00      	nop
 8002bd0:	e002      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002be0:	4bb6      	ldr	r3, [pc, #728]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002be8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002bf0:	4ab2      	ldr	r2, [pc, #712]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bf6:	e003      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bfc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	d02a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d011      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c2e:	d10a      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c34:	3308      	adds	r3, #8
 8002c36:	2101      	movs	r1, #1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f001 f999 	bl	8003f70 <RCCEx_PLL2_Config>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002c44:	e004      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002c58:	4b98      	ldr	r3, [pc, #608]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8002c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c66:	4a95      	ldr	r2, [pc, #596]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c6c:	e003      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c8c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c90:	460b      	mov	r3, r1
 8002c92:	4313      	orrs	r3, r2
 8002c94:	d037      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca0:	d00e      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002ca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca6:	d816      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d018      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002cac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cb0:	d111      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb2:	4b82      	ldr	r3, [pc, #520]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb6:	4a81      	ldr	r2, [pc, #516]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cbe:	e00f      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 f951 	bl	8003f70 <RCCEx_PLL2_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cd4:	e004      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002cdc:	e000      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ce8:	4b74      	ldr	r3, [pc, #464]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002cf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf6:	4a71      	ldr	r2, [pc, #452]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cfc:	e003      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002d12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002d1c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4313      	orrs	r3, r2
 8002d24:	d03a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d81d      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002d30:	a201      	add	r2, pc, #4	@ (adr r2, 8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d75 	.word	0x08002d75
 8002d3c:	08002d49 	.word	0x08002d49
 8002d40:	08002d57 	.word	0x08002d57
 8002d44:	08002d75 	.word	0x08002d75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d48:	4b5c      	ldr	r3, [pc, #368]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	4a5b      	ldr	r2, [pc, #364]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d54:	e00f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 f906 	bl	8003f70 <RCCEx_PLL2_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d6a:	e004      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d72:	e000      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d82:	f023 0103 	bic.w	r1, r3, #3
 8002d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d92:	e003      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002da8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002db2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002db6:	460b      	mov	r3, r1
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f000 80a0 	beq.w	8002efe <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dbe:	4b40      	ldr	r3, [pc, #256]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dca:	f7fe f807 	bl	8000ddc <HAL_GetTick>
 8002dce:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd2:	e00b      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe f802 	bl	8000ddc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b64      	cmp	r3, #100	@ 0x64
 8002de2:	d903      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002dea:	e005      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dec:	4b34      	ldr	r3, [pc, #208]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ed      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002df8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d17a      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e00:	4b2e      	ldr	r3, [pc, #184]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e0c:	4053      	eors	r3, r2
 8002e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e16:	4b29      	ldr	r3, [pc, #164]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e1e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e22:	4b26      	ldr	r3, [pc, #152]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e26:	4a25      	ldr	r2, [pc, #148]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e2c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2e:	4b23      	ldr	r3, [pc, #140]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e32:	4a22      	ldr	r2, [pc, #136]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e38:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e3a:	4a20      	ldr	r2, [pc, #128]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002e40:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e4e:	d118      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fd ffc4 	bl	8000ddc <HAL_GetTick>
 8002e54:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e58:	e00d      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fd ffbf 	bl	8000ddc <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e64:	1ad2      	subs	r2, r2, r3
 8002e66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d903      	bls.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002e74:	e005      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e76:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0eb      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d130      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e9a:	d115      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002e9c:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ea8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002eac:	091a      	lsrs	r2, r3, #4
 8002eae:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	4a02      	ldr	r2, [pc, #8]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6113      	str	r3, [r2, #16]
 8002eb8:	e00c      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002eba:	bf00      	nop
 8002ebc:	58024400 	.word	0x58024400
 8002ec0:	58024800 	.word	0x58024800
 8002ec4:	00ffffcf 	.word	0x00ffffcf
 8002ec8:	4bd4      	ldr	r3, [pc, #848]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	4ad3      	ldr	r2, [pc, #844]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ece:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ed2:	6113      	str	r3, [r2, #16]
 8002ed4:	4bd1      	ldr	r3, [pc, #836]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ed6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002edc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	4acd      	ldr	r2, [pc, #820]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eea:	e008      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ef0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002ef4:	e003      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002efa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002efe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	f002 0301 	and.w	r3, r2, #1
 8002f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f000 808b 	beq.w	8003036 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f28:	2b28      	cmp	r3, #40	@ 0x28
 8002f2a:	d86b      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	0800300d 	.word	0x0800300d
 8002f38:	08003005 	.word	0x08003005
 8002f3c:	08003005 	.word	0x08003005
 8002f40:	08003005 	.word	0x08003005
 8002f44:	08003005 	.word	0x08003005
 8002f48:	08003005 	.word	0x08003005
 8002f4c:	08003005 	.word	0x08003005
 8002f50:	08003005 	.word	0x08003005
 8002f54:	08002fd9 	.word	0x08002fd9
 8002f58:	08003005 	.word	0x08003005
 8002f5c:	08003005 	.word	0x08003005
 8002f60:	08003005 	.word	0x08003005
 8002f64:	08003005 	.word	0x08003005
 8002f68:	08003005 	.word	0x08003005
 8002f6c:	08003005 	.word	0x08003005
 8002f70:	08003005 	.word	0x08003005
 8002f74:	08002fef 	.word	0x08002fef
 8002f78:	08003005 	.word	0x08003005
 8002f7c:	08003005 	.word	0x08003005
 8002f80:	08003005 	.word	0x08003005
 8002f84:	08003005 	.word	0x08003005
 8002f88:	08003005 	.word	0x08003005
 8002f8c:	08003005 	.word	0x08003005
 8002f90:	08003005 	.word	0x08003005
 8002f94:	0800300d 	.word	0x0800300d
 8002f98:	08003005 	.word	0x08003005
 8002f9c:	08003005 	.word	0x08003005
 8002fa0:	08003005 	.word	0x08003005
 8002fa4:	08003005 	.word	0x08003005
 8002fa8:	08003005 	.word	0x08003005
 8002fac:	08003005 	.word	0x08003005
 8002fb0:	08003005 	.word	0x08003005
 8002fb4:	0800300d 	.word	0x0800300d
 8002fb8:	08003005 	.word	0x08003005
 8002fbc:	08003005 	.word	0x08003005
 8002fc0:	08003005 	.word	0x08003005
 8002fc4:	08003005 	.word	0x08003005
 8002fc8:	08003005 	.word	0x08003005
 8002fcc:	08003005 	.word	0x08003005
 8002fd0:	08003005 	.word	0x08003005
 8002fd4:	0800300d 	.word	0x0800300d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fdc:	3308      	adds	r3, #8
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 ffc5 	bl	8003f70 <RCCEx_PLL2_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fec:	e00f      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ff2:	3328      	adds	r3, #40	@ 0x28
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 f86c 	bl	80040d4 <RCCEx_PLL3_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003002:	e004      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800300a:	e000      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 800300c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003016:	4b81      	ldr	r3, [pc, #516]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800301e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003026:	4a7d      	ldr	r2, [pc, #500]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003028:	430b      	orrs	r3, r1
 800302a:	6553      	str	r3, [r2, #84]	@ 0x54
 800302c:	e003      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003032:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003036:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f002 0302 	and.w	r3, r2, #2
 8003042:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800304c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003050:	460b      	mov	r3, r1
 8003052:	4313      	orrs	r3, r2
 8003054:	d042      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800305a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800305c:	2b05      	cmp	r3, #5
 800305e:	d825      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003060:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	080030b5 	.word	0x080030b5
 800306c:	08003081 	.word	0x08003081
 8003070:	08003097 	.word	0x08003097
 8003074:	080030b5 	.word	0x080030b5
 8003078:	080030b5 	.word	0x080030b5
 800307c:	080030b5 	.word	0x080030b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003084:	3308      	adds	r3, #8
 8003086:	2101      	movs	r1, #1
 8003088:	4618      	mov	r0, r3
 800308a:	f000 ff71 	bl	8003f70 <RCCEx_PLL2_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003094:	e00f      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800309a:	3328      	adds	r3, #40	@ 0x28
 800309c:	2101      	movs	r1, #1
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 f818 	bl	80040d4 <RCCEx_PLL3_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030aa:	e004      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80030b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030be:	4b57      	ldr	r3, [pc, #348]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c2:	f023 0107 	bic.w	r1, r3, #7
 80030c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030cc:	4a53      	ldr	r2, [pc, #332]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030ce:	430b      	orrs	r3, r1
 80030d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80030d2:	e003      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f002 0304 	and.w	r3, r2, #4
 80030e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4313      	orrs	r3, r2
 80030fa:	d044      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003100:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003104:	2b05      	cmp	r3, #5
 8003106:	d825      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003108:	a201      	add	r2, pc, #4	@ (adr r2, 8003110 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	0800315d 	.word	0x0800315d
 8003114:	08003129 	.word	0x08003129
 8003118:	0800313f 	.word	0x0800313f
 800311c:	0800315d 	.word	0x0800315d
 8003120:	0800315d 	.word	0x0800315d
 8003124:	0800315d 	.word	0x0800315d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003128:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800312c:	3308      	adds	r3, #8
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f000 ff1d 	bl	8003f70 <RCCEx_PLL2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800313c:	e00f      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800313e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003142:	3328      	adds	r3, #40	@ 0x28
 8003144:	2101      	movs	r1, #1
 8003146:	4618      	mov	r0, r3
 8003148:	f000 ffc4 	bl	80040d4 <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003152:	e004      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800315c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10b      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003166:	4b2d      	ldr	r3, [pc, #180]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316a:	f023 0107 	bic.w	r1, r3, #7
 800316e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003172:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003176:	4a29      	ldr	r2, [pc, #164]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003178:	430b      	orrs	r3, r1
 800317a:	6593      	str	r3, [r2, #88]	@ 0x58
 800317c:	e003      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003182:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f002 0320 	and.w	r3, r2, #32
 8003192:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800319c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031a0:	460b      	mov	r3, r1
 80031a2:	4313      	orrs	r3, r2
 80031a4:	d057      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80031a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b2:	d035      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80031b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b8:	d82c      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031be:	d031      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c4:	d826      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80031c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031ca:	d02d      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80031cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031d0:	d820      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80031d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031d6:	d012      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80031d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031dc:	d81a      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d024      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80031e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031e6:	d115      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ec:	3308      	adds	r3, #8
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 febd 	bl	8003f70 <RCCEx_PLL2_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031fc:	e017      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003202:	3328      	adds	r3, #40	@ 0x28
 8003204:	2102      	movs	r1, #2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 ff64 	bl	80040d4 <RCCEx_PLL3_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003212:	e00c      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800321a:	e008      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 800321c:	58024400 	.word	0x58024400
        break;
 8003220:	bf00      	nop
 8003222:	e004      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003224:	bf00      	nop
 8003226:	e002      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003228:	bf00      	nop
 800322a:	e000      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800322c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10b      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003236:	4bc2      	ldr	r3, [pc, #776]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800323e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003246:	4abe      	ldr	r2, [pc, #760]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003248:	430b      	orrs	r3, r1
 800324a:	6553      	str	r3, [r2, #84]	@ 0x54
 800324c:	e003      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003252:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800326c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003270:	460b      	mov	r3, r1
 8003272:	4313      	orrs	r3, r2
 8003274:	d055      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003276:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800327a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800327e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003282:	d033      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003284:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003288:	d82c      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800328a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800328e:	d02f      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003294:	d826      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003296:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800329a:	d02b      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800329c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032a0:	d820      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80032a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032a6:	d012      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80032a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032ac:	d81a      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d022      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b6:	d115      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032bc:	3308      	adds	r3, #8
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fe55 	bl	8003f70 <RCCEx_PLL2_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032cc:	e015      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032d2:	3328      	adds	r3, #40	@ 0x28
 80032d4:	2102      	movs	r1, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fefc 	bl	80040d4 <RCCEx_PLL3_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032e2:	e00a      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032ea:	e006      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80032ec:	bf00      	nop
 80032ee:	e004      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80032f0:	bf00      	nop
 80032f2:	e002      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80032f4:	bf00      	nop
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80032f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003302:	4b8f      	ldr	r3, [pc, #572]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003306:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800330a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800330e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003312:	4a8b      	ldr	r2, [pc, #556]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003314:	430b      	orrs	r3, r1
 8003316:	6593      	str	r3, [r2, #88]	@ 0x58
 8003318:	e003      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800331e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800332e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003338:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800333c:	460b      	mov	r3, r1
 800333e:	4313      	orrs	r3, r2
 8003340:	d055      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800334a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800334e:	d033      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003350:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003354:	d82c      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800335a:	d02f      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800335c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003360:	d826      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003362:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003366:	d02b      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003368:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800336c:	d820      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800336e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003372:	d012      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003374:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003378:	d81a      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800337a:	2b00      	cmp	r3, #0
 800337c:	d022      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800337e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003382:	d115      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003384:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003388:	3308      	adds	r3, #8
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fdef 	bl	8003f70 <RCCEx_PLL2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003398:	e015      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800339a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800339e:	3328      	adds	r3, #40	@ 0x28
 80033a0:	2102      	movs	r1, #2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fe96 	bl	80040d4 <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033ae:	e00a      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80033b6:	e006      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80033b8:	bf00      	nop
 80033ba:	e004      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80033bc:	bf00      	nop
 80033be:	e002      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80033c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80033d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033de:	4a58      	ldr	r2, [pc, #352]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e4:	e003      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f002 0308 	and.w	r3, r2, #8
 80033fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003404:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003408:	460b      	mov	r3, r1
 800340a:	4313      	orrs	r3, r2
 800340c:	d01e      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800340e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800341a:	d10c      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800341c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003420:	3328      	adds	r3, #40	@ 0x28
 8003422:	2102      	movs	r1, #2
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fe55 	bl	80040d4 <RCCEx_PLL3_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003436:	4b42      	ldr	r3, [pc, #264]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800343e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003446:	4a3e      	ldr	r2, [pc, #248]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003448:	430b      	orrs	r3, r1
 800344a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800344c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f002 0310 	and.w	r3, r2, #16
 8003458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800345c:	2300      	movs	r3, #0
 800345e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003462:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003466:	460b      	mov	r3, r1
 8003468:	4313      	orrs	r3, r2
 800346a:	d01e      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800346c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003470:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003478:	d10c      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800347a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800347e:	3328      	adds	r3, #40	@ 0x28
 8003480:	2102      	movs	r1, #2
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fe26 	bl	80040d4 <RCCEx_PLL3_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003494:	4b2a      	ldr	r3, [pc, #168]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003498:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800349c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034a4:	4a26      	ldr	r2, [pc, #152]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034a6:	430b      	orrs	r3, r1
 80034a8:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80034b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034ba:	2300      	movs	r3, #0
 80034bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80034c4:	460b      	mov	r3, r1
 80034c6:	4313      	orrs	r3, r2
 80034c8:	d040      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80034ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034d6:	d022      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80034d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034dc:	d81b      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80034e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e6:	d00b      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80034e8:	e015      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ee:	3308      	adds	r3, #8
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fd3c 	bl	8003f70 <RCCEx_PLL2_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034fe:	e00f      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003500:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003504:	3328      	adds	r3, #40	@ 0x28
 8003506:	2102      	movs	r1, #2
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fde3 	bl	80040d4 <RCCEx_PLL3_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003514:	e004      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800351c:	e000      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800351e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003520:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003530:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003534:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003538:	4a01      	ldr	r2, [pc, #4]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800353a:	430b      	orrs	r3, r1
 800353c:	6593      	str	r3, [r2, #88]	@ 0x58
 800353e:	e005      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003548:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800354c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003558:	67bb      	str	r3, [r7, #120]	@ 0x78
 800355a:	2300      	movs	r3, #0
 800355c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800355e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003562:	460b      	mov	r3, r1
 8003564:	4313      	orrs	r3, r2
 8003566:	d03b      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003570:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003574:	d01f      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003576:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800357a:	d818      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800357c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003580:	d003      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003582:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003586:	d007      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003588:	e011      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358a:	4b64      	ldr	r3, [pc, #400]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	4a63      	ldr	r2, [pc, #396]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003596:	e00f      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800359c:	3328      	adds	r3, #40	@ 0x28
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fd97 	bl	80040d4 <RCCEx_PLL3_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80035ac:	e004      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80035b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10b      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c0:	4b56      	ldr	r3, [pc, #344]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035d0:	4a52      	ldr	r2, [pc, #328]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035d2:	430b      	orrs	r3, r1
 80035d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80035d6:	e003      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80035ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ee:	2300      	movs	r3, #0
 80035f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80035f2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d031      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800360a:	d007      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800360c:	e011      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360e:	4b43      	ldr	r3, [pc, #268]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	4a42      	ldr	r2, [pc, #264]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003618:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800361a:	e00e      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800361c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003620:	3308      	adds	r3, #8
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fca3 	bl	8003f70 <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003630:	e003      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003642:	4b36      	ldr	r3, [pc, #216]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003646:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800364a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800364e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003650:	4a32      	ldr	r2, [pc, #200]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003652:	430b      	orrs	r3, r1
 8003654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003656:	e003      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003658:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800365c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800366c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800366e:	2300      	movs	r3, #0
 8003670:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003672:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003676:	460b      	mov	r3, r1
 8003678:	4313      	orrs	r3, r2
 800367a:	d00c      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800367c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003680:	3328      	adds	r3, #40	@ 0x28
 8003682:	2102      	movs	r1, #2
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fd25 	bl	80040d4 <RCCEx_PLL3_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80036a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80036a4:	2300      	movs	r3, #0
 80036a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80036a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80036ac:	460b      	mov	r3, r1
 80036ae:	4313      	orrs	r3, r2
 80036b0:	d03a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80036b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036be:	d018      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80036c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036c4:	d811      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80036c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ca:	d014      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80036cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036d0:	d80b      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d011      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036da:	d106      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036dc:	4b0f      	ldr	r3, [pc, #60]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	4a0e      	ldr	r2, [pc, #56]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80036e8:	e008      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80036f0:	e004      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80036fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10d      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003708:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800370c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003714:	4a01      	ldr	r2, [pc, #4]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003716:	430b      	orrs	r3, r1
 8003718:	6553      	str	r3, [r2, #84]	@ 0x54
 800371a:	e005      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800371c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003724:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003734:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003736:	2300      	movs	r3, #0
 8003738:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800373a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800373e:	460b      	mov	r3, r1
 8003740:	4313      	orrs	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003744:	4baa      	ldr	r3, [pc, #680]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003748:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800374c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003752:	4aa7      	ldr	r2, [pc, #668]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003754:	430b      	orrs	r3, r1
 8003756:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003758:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003764:	653b      	str	r3, [r7, #80]	@ 0x50
 8003766:	2300      	movs	r3, #0
 8003768:	657b      	str	r3, [r7, #84]	@ 0x54
 800376a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800376e:	460b      	mov	r3, r1
 8003770:	4313      	orrs	r3, r2
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003774:	4b9e      	ldr	r3, [pc, #632]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800377c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003780:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003784:	4a9a      	ldr	r2, [pc, #616]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003786:	430b      	orrs	r3, r1
 8003788:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800378a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003798:	2300      	movs	r3, #0
 800379a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800379c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80037a0:	460b      	mov	r3, r1
 80037a2:	4313      	orrs	r3, r2
 80037a4:	d009      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037a6:	4b92      	ldr	r3, [pc, #584]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037aa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80037ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b4:	4a8e      	ldr	r2, [pc, #568]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037b6:	430b      	orrs	r3, r1
 80037b8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80037c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c8:	2300      	movs	r3, #0
 80037ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80037cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80037d0:	460b      	mov	r3, r1
 80037d2:	4313      	orrs	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037d6:	4b86      	ldr	r3, [pc, #536]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	4a85      	ldr	r2, [pc, #532]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037e0:	6113      	str	r3, [r2, #16]
 80037e2:	4b83      	ldr	r3, [pc, #524]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037e4:	6919      	ldr	r1, [r3, #16]
 80037e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80037ee:	4a80      	ldr	r2, [pc, #512]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003800:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003802:	2300      	movs	r3, #0
 8003804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003806:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800380a:	460b      	mov	r3, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003810:	4b77      	ldr	r3, [pc, #476]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003814:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	4a74      	ldr	r2, [pc, #464]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003820:	430b      	orrs	r3, r1
 8003822:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003830:	633b      	str	r3, [r7, #48]	@ 0x30
 8003832:	2300      	movs	r3, #0
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
 8003836:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003840:	4b6b      	ldr	r3, [pc, #428]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003844:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003848:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003850:	4a67      	ldr	r2, [pc, #412]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003852:	430b      	orrs	r3, r1
 8003854:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003856:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	2100      	movs	r1, #0
 8003860:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003868:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d011      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003872:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003876:	3308      	adds	r3, #8
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fb78 	bl	8003f70 <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003886:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003892:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003896:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	2100      	movs	r1, #0
 80038a0:	6239      	str	r1, [r7, #32]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038ac:	460b      	mov	r3, r1
 80038ae:	4313      	orrs	r3, r2
 80038b0:	d011      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038b6:	3308      	adds	r3, #8
 80038b8:	2101      	movs	r1, #1
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fb58 	bl	8003f70 <RCCEx_PLL2_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80038c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	2100      	movs	r1, #0
 80038e0:	61b9      	str	r1, [r7, #24]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038ec:	460b      	mov	r3, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	d011      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038f6:	3308      	adds	r3, #8
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fb38 	bl	8003f70 <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003906:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003912:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003916:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	2100      	movs	r1, #0
 8003920:	6139      	str	r1, [r7, #16]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800392c:	460b      	mov	r3, r1
 800392e:	4313      	orrs	r3, r2
 8003930:	d011      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003936:	3328      	adds	r3, #40	@ 0x28
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fbca 	bl	80040d4 <RCCEx_PLL3_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003946:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003952:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003956:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	2100      	movs	r1, #0
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800396c:	460b      	mov	r3, r1
 800396e:	4313      	orrs	r3, r2
 8003970:	d011      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003976:	3328      	adds	r3, #40	@ 0x28
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fbaa 	bl	80040d4 <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003986:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003992:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	2100      	movs	r1, #0
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039ac:	460b      	mov	r3, r1
 80039ae:	4313      	orrs	r3, r2
 80039b0:	d011      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039b6:	3328      	adds	r3, #40	@ 0x28
 80039b8:	2102      	movs	r1, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fb8a 	bl	80040d4 <RCCEx_PLL3_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80039c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80039d6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80039ea:	46bd      	mov	sp, r7
 80039ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f0:	58024400 	.word	0x58024400

080039f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80039f8:	f7fe fd14 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4904      	ldr	r1, [pc, #16]	@ (8003a1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	080085bc 	.word	0x080085bc

08003a20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	@ 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a28:	4ba1      	ldr	r3, [pc, #644]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003a32:	4b9f      	ldr	r3, [pc, #636]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a36:	0b1b      	lsrs	r3, r3, #12
 8003a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a3e:	4b9c      	ldr	r3, [pc, #624]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a4a:	4b99      	ldr	r3, [pc, #612]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4e:	08db      	lsrs	r3, r3, #3
 8003a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8111 	beq.w	8003c90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	f000 8083 	beq.w	8003b7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	f200 80a1 	bhi.w	8003bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d056      	beq.n	8003b38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a8a:	e099      	b.n	8003bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a8c:	4b88      	ldr	r3, [pc, #544]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d02d      	beq.n	8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a98:	4b85      	ldr	r3, [pc, #532]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	4a84      	ldr	r2, [pc, #528]	@ (8003cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	ee07 3a90 	vmov	s15, r3
 8003ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ad6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003af2:	e087      	b.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b06:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b36:	e065      	b.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4a:	4b59      	ldr	r3, [pc, #356]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7a:	e043      	b.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8e:	4b48      	ldr	r3, [pc, #288]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bbe:	e021      	b.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd2:	4b37      	ldr	r3, [pc, #220]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003c04:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	0a5b      	lsrs	r3, r3, #9
 8003c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2a:	ee17 2a90 	vmov	r2, s15
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c32:	4b1f      	ldr	r3, [pc, #124]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c3c:	ee07 3a90 	vmov	s15, r3
 8003c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c58:	ee17 2a90 	vmov	r2, s15
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c60:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c64:	0e1b      	lsrs	r3, r3, #24
 8003c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c86:	ee17 2a90 	vmov	r2, s15
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	609a      	str	r2, [r3, #8]
}
 8003ca2:	bf00      	nop
 8003ca4:	3724      	adds	r7, #36	@ 0x24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	03d09000 	.word	0x03d09000
 8003cb8:	46000000 	.word	0x46000000
 8003cbc:	4c742400 	.word	0x4c742400
 8003cc0:	4a742400 	.word	0x4a742400
 8003cc4:	4bbebc20 	.word	0x4bbebc20

08003cc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	@ 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cd0:	4ba1      	ldr	r3, [pc, #644]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003cda:	4b9f      	ldr	r3, [pc, #636]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cde:	0d1b      	lsrs	r3, r3, #20
 8003ce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ce4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ce6:	4b9c      	ldr	r3, [pc, #624]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cf2:	4b99      	ldr	r3, [pc, #612]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	08db      	lsrs	r3, r3, #3
 8003cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8111 	beq.w	8003f38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	f000 8083 	beq.w	8003e24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	f200 80a1 	bhi.w	8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d056      	beq.n	8003de0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d32:	e099      	b.n	8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d34:	4b88      	ldr	r3, [pc, #544]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d02d      	beq.n	8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d40:	4b85      	ldr	r3, [pc, #532]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	08db      	lsrs	r3, r3, #3
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	4a84      	ldr	r2, [pc, #528]	@ (8003f5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d50:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d9a:	e087      	b.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dae:	4b6a      	ldr	r3, [pc, #424]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dc2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dde:	e065      	b.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df2:	4b59      	ldr	r3, [pc, #356]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e22:	e043      	b.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e36:	4b48      	ldr	r3, [pc, #288]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e66:	e021      	b.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e7a:	4b37      	ldr	r3, [pc, #220]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eaa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003eac:	4b2a      	ldr	r3, [pc, #168]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	0a5b      	lsrs	r3, r3, #9
 8003eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed2:	ee17 2a90 	vmov	r2, s15
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003eda:	4b1f      	ldr	r3, [pc, #124]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f00:	ee17 2a90 	vmov	r2, s15
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003f08:	4b13      	ldr	r3, [pc, #76]	@ (8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	0e1b      	lsrs	r3, r3, #24
 8003f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f2e:	ee17 2a90 	vmov	r2, s15
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f36:	e008      	b.n	8003f4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
}
 8003f4a:	bf00      	nop
 8003f4c:	3724      	adds	r7, #36	@ 0x24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	58024400 	.word	0x58024400
 8003f5c:	03d09000 	.word	0x03d09000
 8003f60:	46000000 	.word	0x46000000
 8003f64:	4c742400 	.word	0x4c742400
 8003f68:	4a742400 	.word	0x4a742400
 8003f6c:	4bbebc20 	.word	0x4bbebc20

08003f70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f7e:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d101      	bne.n	8003f8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e099      	b.n	80040c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a4e      	ldr	r2, [pc, #312]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003f94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9a:	f7fc ff1f 	bl	8000ddc <HAL_GetTick>
 8003f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fa2:	f7fc ff1b 	bl	8000ddc <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e086      	b.n	80040c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fb4:	4b45      	ldr	r3, [pc, #276]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fc0:	4b42      	ldr	r3, [pc, #264]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	031b      	lsls	r3, r3, #12
 8003fce:	493f      	ldr	r1, [pc, #252]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	025b      	lsls	r3, r3, #9
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	061b      	lsls	r3, r3, #24
 8004000:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004004:	4931      	ldr	r1, [pc, #196]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004006:	4313      	orrs	r3, r2
 8004008:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800400a:	4b30      	ldr	r3, [pc, #192]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	492d      	ldr	r1, [pc, #180]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800401c:	4b2b      	ldr	r3, [pc, #172]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	f023 0220 	bic.w	r2, r3, #32
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4928      	ldr	r1, [pc, #160]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800402e:	4b27      	ldr	r3, [pc, #156]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	4a26      	ldr	r2, [pc, #152]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004034:	f023 0310 	bic.w	r3, r3, #16
 8004038:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800403a:	4b24      	ldr	r3, [pc, #144]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800403c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800403e:	4b24      	ldr	r3, [pc, #144]	@ (80040d0 <RCCEx_PLL2_Config+0x160>)
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	69d2      	ldr	r2, [r2, #28]
 8004046:	00d2      	lsls	r2, r2, #3
 8004048:	4920      	ldr	r1, [pc, #128]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800404a:	4313      	orrs	r3, r2
 800404c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800404e:	4b1f      	ldr	r3, [pc, #124]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	4a1e      	ldr	r2, [pc, #120]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004054:	f043 0310 	orr.w	r3, r3, #16
 8004058:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004060:	4b1a      	ldr	r3, [pc, #104]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	4a19      	ldr	r2, [pc, #100]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004066:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800406a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800406c:	e00f      	b.n	800408e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004074:	4b15      	ldr	r3, [pc, #84]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	4a14      	ldr	r2, [pc, #80]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 800407a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800407e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004080:	e005      	b.n	800408e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004082:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	4a11      	ldr	r2, [pc, #68]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004088:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800408c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800408e:	4b0f      	ldr	r3, [pc, #60]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a0e      	ldr	r2, [pc, #56]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 8004094:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409a:	f7fc fe9f 	bl	8000ddc <HAL_GetTick>
 800409e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040a0:	e008      	b.n	80040b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040a2:	f7fc fe9b 	bl	8000ddc <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e006      	b.n	80040c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <RCCEx_PLL2_Config+0x15c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	ffff0007 	.word	0xffff0007

080040d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040e2:	4b53      	ldr	r3, [pc, #332]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d101      	bne.n	80040f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e099      	b.n	8004226 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80040f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fe:	f7fc fe6d 	bl	8000ddc <HAL_GetTick>
 8004102:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004104:	e008      	b.n	8004118 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004106:	f7fc fe69 	bl	8000ddc <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e086      	b.n	8004226 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004118:	4b45      	ldr	r3, [pc, #276]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004124:	4b42      	ldr	r3, [pc, #264]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	051b      	lsls	r3, r3, #20
 8004132:	493f      	ldr	r1, [pc, #252]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	628b      	str	r3, [r1, #40]	@ 0x28
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	3b01      	subs	r3, #1
 800413e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	3b01      	subs	r3, #1
 8004148:	025b      	lsls	r3, r3, #9
 800414a:	b29b      	uxth	r3, r3
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	041b      	lsls	r3, r3, #16
 8004156:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	3b01      	subs	r3, #1
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004168:	4931      	ldr	r1, [pc, #196]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800416e:	4b30      	ldr	r3, [pc, #192]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004172:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	492d      	ldr	r1, [pc, #180]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004180:	4b2b      	ldr	r3, [pc, #172]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	4928      	ldr	r1, [pc, #160]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004192:	4b27      	ldr	r3, [pc, #156]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	4a26      	ldr	r2, [pc, #152]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 8004198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800419c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800419e:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041a2:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <RCCEx_PLL3_Config+0x160>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	69d2      	ldr	r2, [r2, #28]
 80041aa:	00d2      	lsls	r2, r2, #3
 80041ac:	4920      	ldr	r1, [pc, #128]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	4a19      	ldr	r2, [pc, #100]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041d0:	e00f      	b.n	80041f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041d8:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	4a14      	ldr	r2, [pc, #80]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041e4:	e005      	b.n	80041f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041e6:	4b12      	ldr	r3, [pc, #72]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	4a11      	ldr	r2, [pc, #68]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fe:	f7fc fded 	bl	8000ddc <HAL_GetTick>
 8004202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004204:	e008      	b.n	8004218 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004206:	f7fc fde9 	bl	8000ddc <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e006      	b.n	8004226 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004218:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <RCCEx_PLL3_Config+0x15c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	58024400 	.word	0x58024400
 8004234:	ffff0007 	.word	0xffff0007

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e049      	b.n	80042de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f841 	bl	80042e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f000 f9e8 	bl	800464c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d001      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e054      	b.n	80043be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a26      	ldr	r2, [pc, #152]	@ (80043cc <HAL_TIM_Base_Start_IT+0xd0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d022      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x80>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800433e:	d01d      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x80>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a22      	ldr	r2, [pc, #136]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d018      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x80>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a21      	ldr	r2, [pc, #132]	@ (80043d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x80>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1f      	ldr	r2, [pc, #124]	@ (80043d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x80>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1e      	ldr	r2, [pc, #120]	@ (80043dc <HAL_TIM_Base_Start_IT+0xe0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x80>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1c      	ldr	r2, [pc, #112]	@ (80043e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x80>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1b      	ldr	r2, [pc, #108]	@ (80043e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d115      	bne.n	80043a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	4b19      	ldr	r3, [pc, #100]	@ (80043e8 <HAL_TIM_Base_Start_IT+0xec>)
 8004384:	4013      	ands	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b06      	cmp	r3, #6
 800438c:	d015      	beq.n	80043ba <HAL_TIM_Base_Start_IT+0xbe>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004394:	d011      	beq.n	80043ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a6:	e008      	b.n	80043ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e000      	b.n	80043bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40010400 	.word	0x40010400
 80043e0:	40001800 	.word	0x40001800
 80043e4:	40014000 	.word	0x40014000
 80043e8:	00010007 	.word	0x00010007

080043ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d020      	beq.n	8004450 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01b      	beq.n	8004450 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0202 	mvn.w	r2, #2
 8004420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8e9 	bl	800460e <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f8db 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f8ec 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d020      	beq.n	800449c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01b      	beq.n	800449c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0204 	mvn.w	r2, #4
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8c3 	bl	800460e <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8b5 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f8c6 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d020      	beq.n	80044e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01b      	beq.n	80044e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0208 	mvn.w	r2, #8
 80044b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2204      	movs	r2, #4
 80044be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f89d 	bl	800460e <HAL_TIM_IC_CaptureCallback>
 80044d4:	e005      	b.n	80044e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f88f 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8a0 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d020      	beq.n	8004534 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01b      	beq.n	8004534 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0210 	mvn.w	r2, #16
 8004504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2208      	movs	r2, #8
 800450a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f877 	bl	800460e <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f869 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f87a 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00c      	beq.n	8004558 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d007      	beq.n	8004558 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0201 	mvn.w	r2, #1
 8004550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc fa94 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00c      	beq.n	8004586 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800457e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f90d 	bl	80047a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f905 	bl	80047b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00c      	beq.n	80045ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f834 	bl	8004636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00c      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d007      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0220 	mvn.w	r2, #32
 80045ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f8cd 	bl	800478c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a43      	ldr	r2, [pc, #268]	@ (800476c <TIM_Base_SetConfig+0x120>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <TIM_Base_SetConfig+0x40>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466a:	d00f      	beq.n	800468c <TIM_Base_SetConfig+0x40>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a40      	ldr	r2, [pc, #256]	@ (8004770 <TIM_Base_SetConfig+0x124>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_Base_SetConfig+0x40>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a3f      	ldr	r2, [pc, #252]	@ (8004774 <TIM_Base_SetConfig+0x128>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <TIM_Base_SetConfig+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a3e      	ldr	r2, [pc, #248]	@ (8004778 <TIM_Base_SetConfig+0x12c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a3d      	ldr	r2, [pc, #244]	@ (800477c <TIM_Base_SetConfig+0x130>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d108      	bne.n	800469e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a32      	ldr	r2, [pc, #200]	@ (800476c <TIM_Base_SetConfig+0x120>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01f      	beq.n	80046e6 <TIM_Base_SetConfig+0x9a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ac:	d01b      	beq.n	80046e6 <TIM_Base_SetConfig+0x9a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a2f      	ldr	r2, [pc, #188]	@ (8004770 <TIM_Base_SetConfig+0x124>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d017      	beq.n	80046e6 <TIM_Base_SetConfig+0x9a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004774 <TIM_Base_SetConfig+0x128>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <TIM_Base_SetConfig+0x9a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004778 <TIM_Base_SetConfig+0x12c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00f      	beq.n	80046e6 <TIM_Base_SetConfig+0x9a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a2c      	ldr	r2, [pc, #176]	@ (800477c <TIM_Base_SetConfig+0x130>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <TIM_Base_SetConfig+0x9a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004780 <TIM_Base_SetConfig+0x134>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <TIM_Base_SetConfig+0x9a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004784 <TIM_Base_SetConfig+0x138>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <TIM_Base_SetConfig+0x9a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a29      	ldr	r2, [pc, #164]	@ (8004788 <TIM_Base_SetConfig+0x13c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d108      	bne.n	80046f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a14      	ldr	r2, [pc, #80]	@ (800476c <TIM_Base_SetConfig+0x120>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00f      	beq.n	800473e <TIM_Base_SetConfig+0xf2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a16      	ldr	r2, [pc, #88]	@ (800477c <TIM_Base_SetConfig+0x130>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00b      	beq.n	800473e <TIM_Base_SetConfig+0xf2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a15      	ldr	r2, [pc, #84]	@ (8004780 <TIM_Base_SetConfig+0x134>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <TIM_Base_SetConfig+0xf2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a14      	ldr	r2, [pc, #80]	@ (8004784 <TIM_Base_SetConfig+0x138>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d003      	beq.n	800473e <TIM_Base_SetConfig+0xf2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a13      	ldr	r2, [pc, #76]	@ (8004788 <TIM_Base_SetConfig+0x13c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d103      	bne.n	8004746 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	601a      	str	r2, [r3, #0]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800
 8004778:	40000c00 	.word	0x40000c00
 800477c:	40010400 	.word	0x40010400
 8004780:	40014000 	.word	0x40014000
 8004784:	40014400 	.word	0x40014400
 8004788:	40014800 	.word	0x40014800

0800478c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e042      	b.n	8004860 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fc f97d 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2224      	movs	r2, #36	@ 0x24
 80047f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fd90 	bl	8005338 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f825 	bl	8004868 <UART_SetConfig>
 800481e:	4603      	mov	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e01b      	b.n	8004860 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fe0f 	bl	800547c <UART_CheckIdleState>
 800485e:	4603      	mov	r3, r0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b092      	sub	sp, #72	@ 0x48
 800486e:	af00      	add	r7, sp, #0
 8004870:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	431a      	orrs	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	431a      	orrs	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	4313      	orrs	r3, r2
 800488e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4bbe      	ldr	r3, [pc, #760]	@ (8004b90 <UART_SetConfig+0x328>)
 8004898:	4013      	ands	r3, r2
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4ab3      	ldr	r2, [pc, #716]	@ (8004b94 <UART_SetConfig+0x32c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048d0:	4313      	orrs	r3, r2
 80048d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	4baf      	ldr	r3, [pc, #700]	@ (8004b98 <UART_SetConfig+0x330>)
 80048dc:	4013      	ands	r3, r2
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ee:	f023 010f 	bic.w	r1, r3, #15
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4aa6      	ldr	r2, [pc, #664]	@ (8004b9c <UART_SetConfig+0x334>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d177      	bne.n	80049f8 <UART_SetConfig+0x190>
 8004908:	4ba5      	ldr	r3, [pc, #660]	@ (8004ba0 <UART_SetConfig+0x338>)
 800490a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004910:	2b28      	cmp	r3, #40	@ 0x28
 8004912:	d86d      	bhi.n	80049f0 <UART_SetConfig+0x188>
 8004914:	a201      	add	r2, pc, #4	@ (adr r2, 800491c <UART_SetConfig+0xb4>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	080049c1 	.word	0x080049c1
 8004920:	080049f1 	.word	0x080049f1
 8004924:	080049f1 	.word	0x080049f1
 8004928:	080049f1 	.word	0x080049f1
 800492c:	080049f1 	.word	0x080049f1
 8004930:	080049f1 	.word	0x080049f1
 8004934:	080049f1 	.word	0x080049f1
 8004938:	080049f1 	.word	0x080049f1
 800493c:	080049c9 	.word	0x080049c9
 8004940:	080049f1 	.word	0x080049f1
 8004944:	080049f1 	.word	0x080049f1
 8004948:	080049f1 	.word	0x080049f1
 800494c:	080049f1 	.word	0x080049f1
 8004950:	080049f1 	.word	0x080049f1
 8004954:	080049f1 	.word	0x080049f1
 8004958:	080049f1 	.word	0x080049f1
 800495c:	080049d1 	.word	0x080049d1
 8004960:	080049f1 	.word	0x080049f1
 8004964:	080049f1 	.word	0x080049f1
 8004968:	080049f1 	.word	0x080049f1
 800496c:	080049f1 	.word	0x080049f1
 8004970:	080049f1 	.word	0x080049f1
 8004974:	080049f1 	.word	0x080049f1
 8004978:	080049f1 	.word	0x080049f1
 800497c:	080049d9 	.word	0x080049d9
 8004980:	080049f1 	.word	0x080049f1
 8004984:	080049f1 	.word	0x080049f1
 8004988:	080049f1 	.word	0x080049f1
 800498c:	080049f1 	.word	0x080049f1
 8004990:	080049f1 	.word	0x080049f1
 8004994:	080049f1 	.word	0x080049f1
 8004998:	080049f1 	.word	0x080049f1
 800499c:	080049e1 	.word	0x080049e1
 80049a0:	080049f1 	.word	0x080049f1
 80049a4:	080049f1 	.word	0x080049f1
 80049a8:	080049f1 	.word	0x080049f1
 80049ac:	080049f1 	.word	0x080049f1
 80049b0:	080049f1 	.word	0x080049f1
 80049b4:	080049f1 	.word	0x080049f1
 80049b8:	080049f1 	.word	0x080049f1
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c6:	e222      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049c8:	2304      	movs	r3, #4
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ce:	e21e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049d0:	2308      	movs	r3, #8
 80049d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d6:	e21a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049d8:	2310      	movs	r3, #16
 80049da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049de:	e216      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049e0:	2320      	movs	r3, #32
 80049e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e6:	e212      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049e8:	2340      	movs	r3, #64	@ 0x40
 80049ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ee:	e20e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f6:	e20a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a69      	ldr	r2, [pc, #420]	@ (8004ba4 <UART_SetConfig+0x33c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d130      	bne.n	8004a64 <UART_SetConfig+0x1fc>
 8004a02:	4b67      	ldr	r3, [pc, #412]	@ (8004ba0 <UART_SetConfig+0x338>)
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d826      	bhi.n	8004a5c <UART_SetConfig+0x1f4>
 8004a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <UART_SetConfig+0x1ac>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a2d 	.word	0x08004a2d
 8004a18:	08004a35 	.word	0x08004a35
 8004a1c:	08004a3d 	.word	0x08004a3d
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	08004a55 	.word	0x08004a55
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a32:	e1ec      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3a:	e1e8      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a42:	e1e4      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4a:	e1e0      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a52:	e1dc      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a54:	2340      	movs	r3, #64	@ 0x40
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5a:	e1d8      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a62:	e1d4      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a4f      	ldr	r2, [pc, #316]	@ (8004ba8 <UART_SetConfig+0x340>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d130      	bne.n	8004ad0 <UART_SetConfig+0x268>
 8004a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8004ba0 <UART_SetConfig+0x338>)
 8004a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d826      	bhi.n	8004ac8 <UART_SetConfig+0x260>
 8004a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <UART_SetConfig+0x218>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004a99 	.word	0x08004a99
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	08004aa9 	.word	0x08004aa9
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004ac1 	.word	0x08004ac1
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9e:	e1b6      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa6:	e1b2      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aae:	e1ae      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab6:	e1aa      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ab8:	2320      	movs	r3, #32
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004abe:	e1a6      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ac0:	2340      	movs	r3, #64	@ 0x40
 8004ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac6:	e1a2      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ace:	e19e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a35      	ldr	r2, [pc, #212]	@ (8004bac <UART_SetConfig+0x344>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d130      	bne.n	8004b3c <UART_SetConfig+0x2d4>
 8004ada:	4b31      	ldr	r3, [pc, #196]	@ (8004ba0 <UART_SetConfig+0x338>)
 8004adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	d826      	bhi.n	8004b34 <UART_SetConfig+0x2cc>
 8004ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8004aec <UART_SetConfig+0x284>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004b05 	.word	0x08004b05
 8004af0:	08004b0d 	.word	0x08004b0d
 8004af4:	08004b15 	.word	0x08004b15
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0a:	e180      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b12:	e17c      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b14:	2308      	movs	r3, #8
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1a:	e178      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b22:	e174      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b24:	2320      	movs	r3, #32
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2a:	e170      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b2c:	2340      	movs	r3, #64	@ 0x40
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b32:	e16c      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3a:	e168      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb0 <UART_SetConfig+0x348>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d142      	bne.n	8004bcc <UART_SetConfig+0x364>
 8004b46:	4b16      	ldr	r3, [pc, #88]	@ (8004ba0 <UART_SetConfig+0x338>)
 8004b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	d838      	bhi.n	8004bc4 <UART_SetConfig+0x35c>
 8004b52:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <UART_SetConfig+0x2f0>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b71 	.word	0x08004b71
 8004b5c:	08004b79 	.word	0x08004b79
 8004b60:	08004b81 	.word	0x08004b81
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004bb5 	.word	0x08004bb5
 8004b6c:	08004bbd 	.word	0x08004bbd
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b76:	e14a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7e:	e146      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b86:	e142      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b8e:	e13e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b90:	cfff69f3 	.word	0xcfff69f3
 8004b94:	58000c00 	.word	0x58000c00
 8004b98:	11fff4ff 	.word	0x11fff4ff
 8004b9c:	40011000 	.word	0x40011000
 8004ba0:	58024400 	.word	0x58024400
 8004ba4:	40004400 	.word	0x40004400
 8004ba8:	40004800 	.word	0x40004800
 8004bac:	40004c00 	.word	0x40004c00
 8004bb0:	40005000 	.word	0x40005000
 8004bb4:	2320      	movs	r3, #32
 8004bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bba:	e128      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004bbc:	2340      	movs	r3, #64	@ 0x40
 8004bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bc2:	e124      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004bc4:	2380      	movs	r3, #128	@ 0x80
 8004bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bca:	e120      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4acb      	ldr	r2, [pc, #812]	@ (8004f00 <UART_SetConfig+0x698>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d176      	bne.n	8004cc4 <UART_SetConfig+0x45c>
 8004bd6:	4bcb      	ldr	r3, [pc, #812]	@ (8004f04 <UART_SetConfig+0x69c>)
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bde:	2b28      	cmp	r3, #40	@ 0x28
 8004be0:	d86c      	bhi.n	8004cbc <UART_SetConfig+0x454>
 8004be2:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <UART_SetConfig+0x380>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004c8d 	.word	0x08004c8d
 8004bec:	08004cbd 	.word	0x08004cbd
 8004bf0:	08004cbd 	.word	0x08004cbd
 8004bf4:	08004cbd 	.word	0x08004cbd
 8004bf8:	08004cbd 	.word	0x08004cbd
 8004bfc:	08004cbd 	.word	0x08004cbd
 8004c00:	08004cbd 	.word	0x08004cbd
 8004c04:	08004cbd 	.word	0x08004cbd
 8004c08:	08004c95 	.word	0x08004c95
 8004c0c:	08004cbd 	.word	0x08004cbd
 8004c10:	08004cbd 	.word	0x08004cbd
 8004c14:	08004cbd 	.word	0x08004cbd
 8004c18:	08004cbd 	.word	0x08004cbd
 8004c1c:	08004cbd 	.word	0x08004cbd
 8004c20:	08004cbd 	.word	0x08004cbd
 8004c24:	08004cbd 	.word	0x08004cbd
 8004c28:	08004c9d 	.word	0x08004c9d
 8004c2c:	08004cbd 	.word	0x08004cbd
 8004c30:	08004cbd 	.word	0x08004cbd
 8004c34:	08004cbd 	.word	0x08004cbd
 8004c38:	08004cbd 	.word	0x08004cbd
 8004c3c:	08004cbd 	.word	0x08004cbd
 8004c40:	08004cbd 	.word	0x08004cbd
 8004c44:	08004cbd 	.word	0x08004cbd
 8004c48:	08004ca5 	.word	0x08004ca5
 8004c4c:	08004cbd 	.word	0x08004cbd
 8004c50:	08004cbd 	.word	0x08004cbd
 8004c54:	08004cbd 	.word	0x08004cbd
 8004c58:	08004cbd 	.word	0x08004cbd
 8004c5c:	08004cbd 	.word	0x08004cbd
 8004c60:	08004cbd 	.word	0x08004cbd
 8004c64:	08004cbd 	.word	0x08004cbd
 8004c68:	08004cad 	.word	0x08004cad
 8004c6c:	08004cbd 	.word	0x08004cbd
 8004c70:	08004cbd 	.word	0x08004cbd
 8004c74:	08004cbd 	.word	0x08004cbd
 8004c78:	08004cbd 	.word	0x08004cbd
 8004c7c:	08004cbd 	.word	0x08004cbd
 8004c80:	08004cbd 	.word	0x08004cbd
 8004c84:	08004cbd 	.word	0x08004cbd
 8004c88:	08004cb5 	.word	0x08004cb5
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c92:	e0bc      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004c94:	2304      	movs	r3, #4
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9a:	e0b8      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca2:	e0b4      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004caa:	e0b0      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004cac:	2320      	movs	r3, #32
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb2:	e0ac      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004cb4:	2340      	movs	r3, #64	@ 0x40
 8004cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cba:	e0a8      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc2:	e0a4      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a8f      	ldr	r2, [pc, #572]	@ (8004f08 <UART_SetConfig+0x6a0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d130      	bne.n	8004d30 <UART_SetConfig+0x4c8>
 8004cce:	4b8d      	ldr	r3, [pc, #564]	@ (8004f04 <UART_SetConfig+0x69c>)
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d826      	bhi.n	8004d28 <UART_SetConfig+0x4c0>
 8004cda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce0 <UART_SetConfig+0x478>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf9 	.word	0x08004cf9
 8004ce4:	08004d01 	.word	0x08004d01
 8004ce8:	08004d09 	.word	0x08004d09
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d19 	.word	0x08004d19
 8004cf4:	08004d21 	.word	0x08004d21
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfe:	e086      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d00:	2304      	movs	r3, #4
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d06:	e082      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0e:	e07e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d16:	e07a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d18:	2320      	movs	r3, #32
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1e:	e076      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d20:	2340      	movs	r3, #64	@ 0x40
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d26:	e072      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d28:	2380      	movs	r3, #128	@ 0x80
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2e:	e06e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a75      	ldr	r2, [pc, #468]	@ (8004f0c <UART_SetConfig+0x6a4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d130      	bne.n	8004d9c <UART_SetConfig+0x534>
 8004d3a:	4b72      	ldr	r3, [pc, #456]	@ (8004f04 <UART_SetConfig+0x69c>)
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d826      	bhi.n	8004d94 <UART_SetConfig+0x52c>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <UART_SetConfig+0x4e4>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d65 	.word	0x08004d65
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	08004d75 	.word	0x08004d75
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6a:	e050      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d72:	e04c      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d74:	2308      	movs	r3, #8
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7a:	e048      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d82:	e044      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d84:	2320      	movs	r3, #32
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8a:	e040      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d8c:	2340      	movs	r3, #64	@ 0x40
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d92:	e03c      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d94:	2380      	movs	r3, #128	@ 0x80
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9a:	e038      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5b      	ldr	r2, [pc, #364]	@ (8004f10 <UART_SetConfig+0x6a8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d130      	bne.n	8004e08 <UART_SetConfig+0x5a0>
 8004da6:	4b57      	ldr	r3, [pc, #348]	@ (8004f04 <UART_SetConfig+0x69c>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	2b05      	cmp	r3, #5
 8004db0:	d826      	bhi.n	8004e00 <UART_SetConfig+0x598>
 8004db2:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <UART_SetConfig+0x550>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004dd1 	.word	0x08004dd1
 8004dbc:	08004dd9 	.word	0x08004dd9
 8004dc0:	08004de1 	.word	0x08004de1
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd6:	e01a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dde:	e016      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de6:	e012      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dee:	e00e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004df0:	2320      	movs	r3, #32
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df6:	e00a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004df8:	2340      	movs	r3, #64	@ 0x40
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfe:	e006      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e06:	e002      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004e08:	2380      	movs	r3, #128	@ 0x80
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a3f      	ldr	r2, [pc, #252]	@ (8004f10 <UART_SetConfig+0x6a8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	f040 80f8 	bne.w	800500a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	dc46      	bgt.n	8004eb0 <UART_SetConfig+0x648>
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	f2c0 8082 	blt.w	8004f2c <UART_SetConfig+0x6c4>
 8004e28:	3b02      	subs	r3, #2
 8004e2a:	2b1e      	cmp	r3, #30
 8004e2c:	d87e      	bhi.n	8004f2c <UART_SetConfig+0x6c4>
 8004e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <UART_SetConfig+0x5cc>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004eb7 	.word	0x08004eb7
 8004e38:	08004f2d 	.word	0x08004f2d
 8004e3c:	08004ebf 	.word	0x08004ebf
 8004e40:	08004f2d 	.word	0x08004f2d
 8004e44:	08004f2d 	.word	0x08004f2d
 8004e48:	08004f2d 	.word	0x08004f2d
 8004e4c:	08004ecf 	.word	0x08004ecf
 8004e50:	08004f2d 	.word	0x08004f2d
 8004e54:	08004f2d 	.word	0x08004f2d
 8004e58:	08004f2d 	.word	0x08004f2d
 8004e5c:	08004f2d 	.word	0x08004f2d
 8004e60:	08004f2d 	.word	0x08004f2d
 8004e64:	08004f2d 	.word	0x08004f2d
 8004e68:	08004f2d 	.word	0x08004f2d
 8004e6c:	08004edf 	.word	0x08004edf
 8004e70:	08004f2d 	.word	0x08004f2d
 8004e74:	08004f2d 	.word	0x08004f2d
 8004e78:	08004f2d 	.word	0x08004f2d
 8004e7c:	08004f2d 	.word	0x08004f2d
 8004e80:	08004f2d 	.word	0x08004f2d
 8004e84:	08004f2d 	.word	0x08004f2d
 8004e88:	08004f2d 	.word	0x08004f2d
 8004e8c:	08004f2d 	.word	0x08004f2d
 8004e90:	08004f2d 	.word	0x08004f2d
 8004e94:	08004f2d 	.word	0x08004f2d
 8004e98:	08004f2d 	.word	0x08004f2d
 8004e9c:	08004f2d 	.word	0x08004f2d
 8004ea0:	08004f2d 	.word	0x08004f2d
 8004ea4:	08004f2d 	.word	0x08004f2d
 8004ea8:	08004f2d 	.word	0x08004f2d
 8004eac:	08004f1f 	.word	0x08004f1f
 8004eb0:	2b40      	cmp	r3, #64	@ 0x40
 8004eb2:	d037      	beq.n	8004f24 <UART_SetConfig+0x6bc>
 8004eb4:	e03a      	b.n	8004f2c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004eb6:	f7fe fd9d 	bl	80039f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004eba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ebc:	e03c      	b.n	8004f38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fdac 	bl	8003a20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ecc:	e034      	b.n	8004f38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ece:	f107 0318 	add.w	r3, r7, #24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fef8 	bl	8003cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004edc:	e02c      	b.n	8004f38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ede:	4b09      	ldr	r3, [pc, #36]	@ (8004f04 <UART_SetConfig+0x69c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004eea:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <UART_SetConfig+0x69c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	08db      	lsrs	r3, r3, #3
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	4a07      	ldr	r2, [pc, #28]	@ (8004f14 <UART_SetConfig+0x6ac>)
 8004ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8004efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004efc:	e01c      	b.n	8004f38 <UART_SetConfig+0x6d0>
 8004efe:	bf00      	nop
 8004f00:	40011400 	.word	0x40011400
 8004f04:	58024400 	.word	0x58024400
 8004f08:	40007800 	.word	0x40007800
 8004f0c:	40007c00 	.word	0x40007c00
 8004f10:	58000c00 	.word	0x58000c00
 8004f14:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004f18:	4b9d      	ldr	r3, [pc, #628]	@ (8005190 <UART_SetConfig+0x928>)
 8004f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f1c:	e00c      	b.n	8004f38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f1e:	4b9d      	ldr	r3, [pc, #628]	@ (8005194 <UART_SetConfig+0x92c>)
 8004f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f22:	e009      	b.n	8004f38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f2a:	e005      	b.n	8004f38 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 81de 	beq.w	80052fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	4a94      	ldr	r2, [pc, #592]	@ (8005198 <UART_SetConfig+0x930>)
 8004f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f52:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d305      	bcc.n	8004f70 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d903      	bls.n	8004f78 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f76:	e1c1      	b.n	80052fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	60fa      	str	r2, [r7, #12]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	4a84      	ldr	r2, [pc, #528]	@ (8005198 <UART_SetConfig+0x930>)
 8004f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f9a:	f7fb f9a1 	bl	80002e0 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	020b      	lsls	r3, r1, #8
 8004fb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fb4:	0202      	lsls	r2, r0, #8
 8004fb6:	6979      	ldr	r1, [r7, #20]
 8004fb8:	6849      	ldr	r1, [r1, #4]
 8004fba:	0849      	lsrs	r1, r1, #1
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	eb12 0804 	adds.w	r8, r2, r4
 8004fc6:	eb43 0905 	adc.w	r9, r3, r5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	4693      	mov	fp, r2
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	465b      	mov	r3, fp
 8004fd8:	4640      	mov	r0, r8
 8004fda:	4649      	mov	r1, r9
 8004fdc:	f7fb f980 	bl	80002e0 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fee:	d308      	bcc.n	8005002 <UART_SetConfig+0x79a>
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ff6:	d204      	bcs.n	8005002 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ffe:	60da      	str	r2, [r3, #12]
 8005000:	e17c      	b.n	80052fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005008:	e178      	b.n	80052fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005012:	f040 80c5 	bne.w	80051a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005016:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800501a:	2b20      	cmp	r3, #32
 800501c:	dc48      	bgt.n	80050b0 <UART_SetConfig+0x848>
 800501e:	2b00      	cmp	r3, #0
 8005020:	db7b      	blt.n	800511a <UART_SetConfig+0x8b2>
 8005022:	2b20      	cmp	r3, #32
 8005024:	d879      	bhi.n	800511a <UART_SetConfig+0x8b2>
 8005026:	a201      	add	r2, pc, #4	@ (adr r2, 800502c <UART_SetConfig+0x7c4>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	080050b7 	.word	0x080050b7
 8005030:	080050bf 	.word	0x080050bf
 8005034:	0800511b 	.word	0x0800511b
 8005038:	0800511b 	.word	0x0800511b
 800503c:	080050c7 	.word	0x080050c7
 8005040:	0800511b 	.word	0x0800511b
 8005044:	0800511b 	.word	0x0800511b
 8005048:	0800511b 	.word	0x0800511b
 800504c:	080050d7 	.word	0x080050d7
 8005050:	0800511b 	.word	0x0800511b
 8005054:	0800511b 	.word	0x0800511b
 8005058:	0800511b 	.word	0x0800511b
 800505c:	0800511b 	.word	0x0800511b
 8005060:	0800511b 	.word	0x0800511b
 8005064:	0800511b 	.word	0x0800511b
 8005068:	0800511b 	.word	0x0800511b
 800506c:	080050e7 	.word	0x080050e7
 8005070:	0800511b 	.word	0x0800511b
 8005074:	0800511b 	.word	0x0800511b
 8005078:	0800511b 	.word	0x0800511b
 800507c:	0800511b 	.word	0x0800511b
 8005080:	0800511b 	.word	0x0800511b
 8005084:	0800511b 	.word	0x0800511b
 8005088:	0800511b 	.word	0x0800511b
 800508c:	0800511b 	.word	0x0800511b
 8005090:	0800511b 	.word	0x0800511b
 8005094:	0800511b 	.word	0x0800511b
 8005098:	0800511b 	.word	0x0800511b
 800509c:	0800511b 	.word	0x0800511b
 80050a0:	0800511b 	.word	0x0800511b
 80050a4:	0800511b 	.word	0x0800511b
 80050a8:	0800511b 	.word	0x0800511b
 80050ac:	0800510d 	.word	0x0800510d
 80050b0:	2b40      	cmp	r3, #64	@ 0x40
 80050b2:	d02e      	beq.n	8005112 <UART_SetConfig+0x8aa>
 80050b4:	e031      	b.n	800511a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b6:	f7fd f9e5 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 80050ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050bc:	e033      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050be:	f7fd f9f7 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 80050c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050c4:	e02f      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fca8 	bl	8003a20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050d4:	e027      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050d6:	f107 0318 	add.w	r3, r7, #24
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fdf4 	bl	8003cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050e4:	e01f      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e6:	4b2d      	ldr	r3, [pc, #180]	@ (800519c <UART_SetConfig+0x934>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050f2:	4b2a      	ldr	r3, [pc, #168]	@ (800519c <UART_SetConfig+0x934>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	08db      	lsrs	r3, r3, #3
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	4a24      	ldr	r2, [pc, #144]	@ (8005190 <UART_SetConfig+0x928>)
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005104:	e00f      	b.n	8005126 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005106:	4b22      	ldr	r3, [pc, #136]	@ (8005190 <UART_SetConfig+0x928>)
 8005108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800510a:	e00c      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800510c:	4b21      	ldr	r3, [pc, #132]	@ (8005194 <UART_SetConfig+0x92c>)
 800510e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005110:	e009      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005118:	e005      	b.n	8005126 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80e7 	beq.w	80052fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	4a19      	ldr	r2, [pc, #100]	@ (8005198 <UART_SetConfig+0x930>)
 8005134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005138:	461a      	mov	r2, r3
 800513a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800513c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005140:	005a      	lsls	r2, r3, #1
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	441a      	add	r2, r3
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005156:	2b0f      	cmp	r3, #15
 8005158:	d916      	bls.n	8005188 <UART_SetConfig+0x920>
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005160:	d212      	bcs.n	8005188 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	b29b      	uxth	r3, r3
 8005166:	f023 030f 	bic.w	r3, r3, #15
 800516a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	b29b      	uxth	r3, r3
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	b29a      	uxth	r2, r3
 8005178:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800517a:	4313      	orrs	r3, r2
 800517c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005184:	60da      	str	r2, [r3, #12]
 8005186:	e0b9      	b.n	80052fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800518e:	e0b5      	b.n	80052fc <UART_SetConfig+0xa94>
 8005190:	03d09000 	.word	0x03d09000
 8005194:	003d0900 	.word	0x003d0900
 8005198:	080085f0 	.word	0x080085f0
 800519c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80051a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	dc49      	bgt.n	800523c <UART_SetConfig+0x9d4>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	db7c      	blt.n	80052a6 <UART_SetConfig+0xa3e>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d87a      	bhi.n	80052a6 <UART_SetConfig+0xa3e>
 80051b0:	a201      	add	r2, pc, #4	@ (adr r2, 80051b8 <UART_SetConfig+0x950>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	08005243 	.word	0x08005243
 80051bc:	0800524b 	.word	0x0800524b
 80051c0:	080052a7 	.word	0x080052a7
 80051c4:	080052a7 	.word	0x080052a7
 80051c8:	08005253 	.word	0x08005253
 80051cc:	080052a7 	.word	0x080052a7
 80051d0:	080052a7 	.word	0x080052a7
 80051d4:	080052a7 	.word	0x080052a7
 80051d8:	08005263 	.word	0x08005263
 80051dc:	080052a7 	.word	0x080052a7
 80051e0:	080052a7 	.word	0x080052a7
 80051e4:	080052a7 	.word	0x080052a7
 80051e8:	080052a7 	.word	0x080052a7
 80051ec:	080052a7 	.word	0x080052a7
 80051f0:	080052a7 	.word	0x080052a7
 80051f4:	080052a7 	.word	0x080052a7
 80051f8:	08005273 	.word	0x08005273
 80051fc:	080052a7 	.word	0x080052a7
 8005200:	080052a7 	.word	0x080052a7
 8005204:	080052a7 	.word	0x080052a7
 8005208:	080052a7 	.word	0x080052a7
 800520c:	080052a7 	.word	0x080052a7
 8005210:	080052a7 	.word	0x080052a7
 8005214:	080052a7 	.word	0x080052a7
 8005218:	080052a7 	.word	0x080052a7
 800521c:	080052a7 	.word	0x080052a7
 8005220:	080052a7 	.word	0x080052a7
 8005224:	080052a7 	.word	0x080052a7
 8005228:	080052a7 	.word	0x080052a7
 800522c:	080052a7 	.word	0x080052a7
 8005230:	080052a7 	.word	0x080052a7
 8005234:	080052a7 	.word	0x080052a7
 8005238:	08005299 	.word	0x08005299
 800523c:	2b40      	cmp	r3, #64	@ 0x40
 800523e:	d02e      	beq.n	800529e <UART_SetConfig+0xa36>
 8005240:	e031      	b.n	80052a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005242:	f7fd f91f 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8005246:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005248:	e033      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800524a:	f7fd f931 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 800524e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005250:	e02f      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fbe2 	bl	8003a20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005260:	e027      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005262:	f107 0318 	add.w	r3, r7, #24
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fd2e 	bl	8003cc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005270:	e01f      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005272:	4b2d      	ldr	r3, [pc, #180]	@ (8005328 <UART_SetConfig+0xac0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800527e:	4b2a      	ldr	r3, [pc, #168]	@ (8005328 <UART_SetConfig+0xac0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	08db      	lsrs	r3, r3, #3
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	4a28      	ldr	r2, [pc, #160]	@ (800532c <UART_SetConfig+0xac4>)
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005290:	e00f      	b.n	80052b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005292:	4b26      	ldr	r3, [pc, #152]	@ (800532c <UART_SetConfig+0xac4>)
 8005294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005296:	e00c      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005298:	4b25      	ldr	r3, [pc, #148]	@ (8005330 <UART_SetConfig+0xac8>)
 800529a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800529c:	e009      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052a4:	e005      	b.n	80052b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80052b0:	bf00      	nop
    }

    if (pclk != 0U)
 80052b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d021      	beq.n	80052fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005334 <UART_SetConfig+0xacc>)
 80052be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	441a      	add	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	d909      	bls.n	80052f6 <UART_SetConfig+0xa8e>
 80052e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e8:	d205      	bcs.n	80052f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60da      	str	r2, [r3, #12]
 80052f4:	e002      	b.n	80052fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2201      	movs	r2, #1
 8005300:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2201      	movs	r2, #1
 8005308:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2200      	movs	r2, #0
 8005310:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005318:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800531c:	4618      	mov	r0, r3
 800531e:	3748      	adds	r7, #72	@ 0x48
 8005320:	46bd      	mov	sp, r7
 8005322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005326:	bf00      	nop
 8005328:	58024400 	.word	0x58024400
 800532c:	03d09000 	.word	0x03d09000
 8005330:	003d0900 	.word	0x003d0900
 8005334:	080085f0 	.word	0x080085f0

08005338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01a      	beq.n	800544e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005436:	d10a      	bne.n	800544e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]
  }
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b098      	sub	sp, #96	@ 0x60
 8005480:	af02      	add	r7, sp, #8
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800548c:	f7fb fca6 	bl	8000ddc <HAL_GetTick>
 8005490:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b08      	cmp	r3, #8
 800549e:	d12f      	bne.n	8005500 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a8:	2200      	movs	r2, #0
 80054aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f88e 	bl	80055d0 <UART_WaitOnFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d022      	beq.n	8005500 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e6      	bne.n	80054ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e063      	b.n	80055c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b04      	cmp	r3, #4
 800550c:	d149      	bne.n	80055a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800550e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005516:	2200      	movs	r2, #0
 8005518:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f857 	bl	80055d0 <UART_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d03c      	beq.n	80055a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	623b      	str	r3, [r7, #32]
   return(result);
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800553c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005546:	633b      	str	r3, [r7, #48]	@ 0x30
 8005548:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800554c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e6      	bne.n	8005528 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3308      	adds	r3, #8
 8005560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	60fb      	str	r3, [r7, #12]
   return(result);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f023 0301 	bic.w	r3, r3, #1
 8005570:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800557a:	61fa      	str	r2, [r7, #28]
 800557c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	69b9      	ldr	r1, [r7, #24]
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	617b      	str	r3, [r7, #20]
   return(result);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e5      	bne.n	800555a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e012      	b.n	80055c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3758      	adds	r7, #88	@ 0x58
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e0:	e04f      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d04b      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ea:	f7fb fbf7 	bl	8000ddc <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <UART_WaitOnFlagUntilTimeout+0x30>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e04e      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d037      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b80      	cmp	r3, #128	@ 0x80
 8005616:	d034      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b40      	cmp	r3, #64	@ 0x40
 800561c:	d031      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b08      	cmp	r3, #8
 800562a:	d110      	bne.n	800564e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2208      	movs	r2, #8
 8005632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f839 	bl	80056ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2208      	movs	r2, #8
 800563e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e029      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800565c:	d111      	bne.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f81f 	bl	80056ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e00f      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4013      	ands	r3, r2
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	429a      	cmp	r2, r3
 8005690:	bf0c      	ite	eq
 8005692:	2301      	moveq	r3, #1
 8005694:	2300      	movne	r3, #0
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	429a      	cmp	r2, r3
 800569e:	d0a0      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b095      	sub	sp, #84	@ 0x54
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e6      	bne.n	80056b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005774 <UART_EndRxTransfer+0xc8>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3308      	adds	r3, #8
 8005704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005708:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800570c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e5      	bne.n	80056e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571e:	2b01      	cmp	r3, #1
 8005720:	d118      	bne.n	8005754 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	647b      	str	r3, [r7, #68]	@ 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6979      	ldr	r1, [r7, #20]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	613b      	str	r3, [r7, #16]
   return(result);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e6      	bne.n	8005722 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005768:	bf00      	nop
 800576a:	3754      	adds	r7, #84	@ 0x54
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	effffffe 	.word	0xeffffffe

08005778 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_UARTEx_DisableFifoMode+0x16>
 800578a:	2302      	movs	r3, #2
 800578c:	e027      	b.n	80057de <HAL_UARTEx_DisableFifoMode+0x66>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2224      	movs	r2, #36	@ 0x24
 800579a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057fe:	2302      	movs	r3, #2
 8005800:	e02d      	b.n	800585e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2224      	movs	r2, #36	@ 0x24
 800580e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f850 	bl	80058e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800587a:	2302      	movs	r3, #2
 800587c:	e02d      	b.n	80058da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2224      	movs	r2, #36	@ 0x24
 800588a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f812 	bl	80058e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d108      	bne.n	8005906 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005904:	e031      	b.n	800596a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005906:	2310      	movs	r3, #16
 8005908:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800590a:	2310      	movs	r3, #16
 800590c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	0e5b      	lsrs	r3, r3, #25
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	0f5b      	lsrs	r3, r3, #29
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	7b3a      	ldrb	r2, [r7, #12]
 8005932:	4911      	ldr	r1, [pc, #68]	@ (8005978 <UARTEx_SetNbDataToProcess+0x94>)
 8005934:	5c8a      	ldrb	r2, [r1, r2]
 8005936:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800593a:	7b3a      	ldrb	r2, [r7, #12]
 800593c:	490f      	ldr	r1, [pc, #60]	@ (800597c <UARTEx_SetNbDataToProcess+0x98>)
 800593e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005940:	fb93 f3f2 	sdiv	r3, r3, r2
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	7b7a      	ldrb	r2, [r7, #13]
 8005950:	4909      	ldr	r1, [pc, #36]	@ (8005978 <UARTEx_SetNbDataToProcess+0x94>)
 8005952:	5c8a      	ldrb	r2, [r1, r2]
 8005954:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005958:	7b7a      	ldrb	r2, [r7, #13]
 800595a:	4908      	ldr	r1, [pc, #32]	@ (800597c <UARTEx_SetNbDataToProcess+0x98>)
 800595c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800595e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800596a:	bf00      	nop
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	08008608 	.word	0x08008608
 800597c:	08008610 	.word	0x08008610

08005980 <__NVIC_SetPriority>:
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	6039      	str	r1, [r7, #0]
 800598a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800598c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	db0a      	blt.n	80059aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	490c      	ldr	r1, [pc, #48]	@ (80059cc <__NVIC_SetPriority+0x4c>)
 800599a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800599e:	0112      	lsls	r2, r2, #4
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	440b      	add	r3, r1
 80059a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80059a8:	e00a      	b.n	80059c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	4908      	ldr	r1, [pc, #32]	@ (80059d0 <__NVIC_SetPriority+0x50>)
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	3b04      	subs	r3, #4
 80059b8:	0112      	lsls	r2, r2, #4
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	440b      	add	r3, r1
 80059be:	761a      	strb	r2, [r3, #24]
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	e000e100 	.word	0xe000e100
 80059d0:	e000ed00 	.word	0xe000ed00

080059d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80059d8:	4b05      	ldr	r3, [pc, #20]	@ (80059f0 <SysTick_Handler+0x1c>)
 80059da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80059dc:	f002 f95a 	bl	8007c94 <xTaskGetSchedulerState>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d001      	beq.n	80059ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80059e6:	f000 fd9f 	bl	8006528 <xPortSysTickHandler>
  }
}
 80059ea:	bf00      	nop
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	e000e010 	.word	0xe000e010

080059f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80059f8:	2100      	movs	r1, #0
 80059fa:	f06f 0004 	mvn.w	r0, #4
 80059fe:	f7ff ffbf 	bl	8005980 <__NVIC_SetPriority>
#endif
}
 8005a02:	bf00      	nop
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a0e:	f3ef 8305 	mrs	r3, IPSR
 8005a12:	603b      	str	r3, [r7, #0]
  return(result);
 8005a14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a1a:	f06f 0305 	mvn.w	r3, #5
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	e00c      	b.n	8005a3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a22:	4b0a      	ldr	r3, [pc, #40]	@ (8005a4c <osKernelInitialize+0x44>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d105      	bne.n	8005a36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a2a:	4b08      	ldr	r3, [pc, #32]	@ (8005a4c <osKernelInitialize+0x44>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	607b      	str	r3, [r7, #4]
 8005a34:	e002      	b.n	8005a3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a36:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a3c:	687b      	ldr	r3, [r7, #4]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	24000118 	.word	0x24000118

08005a50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a56:	f3ef 8305 	mrs	r3, IPSR
 8005a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8005a5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a62:	f06f 0305 	mvn.w	r3, #5
 8005a66:	607b      	str	r3, [r7, #4]
 8005a68:	e010      	b.n	8005a8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <osKernelStart+0x48>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d109      	bne.n	8005a86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a72:	f7ff ffbf 	bl	80059f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a76:	4b08      	ldr	r3, [pc, #32]	@ (8005a98 <osKernelStart+0x48>)
 8005a78:	2202      	movs	r2, #2
 8005a7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a7c:	f001 fcbc 	bl	80073f8 <vTaskStartScheduler>
      stat = osOK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	607b      	str	r3, [r7, #4]
 8005a84:	e002      	b.n	8005a8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a86:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a8c:	687b      	ldr	r3, [r7, #4]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	24000118 	.word	0x24000118

08005a9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08e      	sub	sp, #56	@ 0x38
 8005aa0:	af04      	add	r7, sp, #16
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aac:	f3ef 8305 	mrs	r3, IPSR
 8005ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ab2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d17e      	bne.n	8005bb6 <osThreadNew+0x11a>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d07b      	beq.n	8005bb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005abe:	2380      	movs	r3, #128	@ 0x80
 8005ac0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ac2:	2318      	movs	r3, #24
 8005ac4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005aca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ace:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d045      	beq.n	8005b62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <osThreadNew+0x48>
        name = attr->name;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <osThreadNew+0x6e>
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	2b38      	cmp	r3, #56	@ 0x38
 8005afc:	d805      	bhi.n	8005b0a <osThreadNew+0x6e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <osThreadNew+0x72>
        return (NULL);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e054      	b.n	8005bb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00e      	beq.n	8005b44 <osThreadNew+0xa8>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	2b5b      	cmp	r3, #91	@ 0x5b
 8005b2c:	d90a      	bls.n	8005b44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d006      	beq.n	8005b44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <osThreadNew+0xa8>
        mem = 1;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	e010      	b.n	8005b66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10c      	bne.n	8005b66 <osThreadNew+0xca>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d108      	bne.n	8005b66 <osThreadNew+0xca>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d104      	bne.n	8005b66 <osThreadNew+0xca>
          mem = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	e001      	b.n	8005b66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d110      	bne.n	8005b8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b74:	9202      	str	r2, [sp, #8]
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6a3a      	ldr	r2, [r7, #32]
 8005b80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f001 fa5c 	bl	8007040 <xTaskCreateStatic>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	e013      	b.n	8005bb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d110      	bne.n	8005bb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	f107 0310 	add.w	r3, r7, #16
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f001 faaa 	bl	8007100 <xTaskCreate>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d001      	beq.n	8005bb6 <osThreadNew+0x11a>
            hTask = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005bb6:	693b      	ldr	r3, [r7, #16]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	@ 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc8:	f3ef 8305 	mrs	r3, IPSR
 8005bcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <osDelay+0x1c>
    stat = osErrorISR;
 8005bd4:	f06f 0305 	mvn.w	r3, #5
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e007      	b.n	8005bec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <osDelay+0x2c>
      vTaskDelay(ticks);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 fbd0 	bl	800738c <vTaskDelay>
    }
  }

  return (stat);
 8005bec:	68fb      	ldr	r3, [r7, #12]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4a07      	ldr	r2, [pc, #28]	@ (8005c24 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4a06      	ldr	r2, [pc, #24]	@ (8005c28 <vApplicationGetIdleTaskMemory+0x30>)
 8005c0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2280      	movs	r2, #128	@ 0x80
 8005c14:	601a      	str	r2, [r3, #0]
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	2400011c 	.word	0x2400011c
 8005c28:	24000178 	.word	0x24000178

08005c2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a07      	ldr	r2, [pc, #28]	@ (8005c58 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4a06      	ldr	r2, [pc, #24]	@ (8005c5c <vApplicationGetTimerTaskMemory+0x30>)
 8005c42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c4a:	601a      	str	r2, [r3, #0]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	24000378 	.word	0x24000378
 8005c5c:	240003d4 	.word	0x240003d4

08005c60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08a      	sub	sp, #40	@ 0x28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c6c:	f001 fc2c 	bl	80074c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c70:	4b5c      	ldr	r3, [pc, #368]	@ (8005de4 <pvPortMalloc+0x184>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c78:	f000 f924 	bl	8005ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8005de8 <pvPortMalloc+0x188>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 8095 	bne.w	8005db4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01e      	beq.n	8005cce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c90:	2208      	movs	r2, #8
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d015      	beq.n	8005cce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f023 0307 	bic.w	r3, r3, #7
 8005ca8:	3308      	adds	r3, #8
 8005caa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00b      	beq.n	8005cce <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	e7fd      	b.n	8005cca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d06f      	beq.n	8005db4 <pvPortMalloc+0x154>
 8005cd4:	4b45      	ldr	r3, [pc, #276]	@ (8005dec <pvPortMalloc+0x18c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d86a      	bhi.n	8005db4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cde:	4b44      	ldr	r3, [pc, #272]	@ (8005df0 <pvPortMalloc+0x190>)
 8005ce0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ce2:	4b43      	ldr	r3, [pc, #268]	@ (8005df0 <pvPortMalloc+0x190>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ce8:	e004      	b.n	8005cf4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d903      	bls.n	8005d06 <pvPortMalloc+0xa6>
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f1      	bne.n	8005cea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d06:	4b37      	ldr	r3, [pc, #220]	@ (8005de4 <pvPortMalloc+0x184>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d051      	beq.n	8005db4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2208      	movs	r2, #8
 8005d16:	4413      	add	r3, r2
 8005d18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	1ad2      	subs	r2, r2, r3
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d920      	bls.n	8005d74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4413      	add	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <pvPortMalloc+0xfc>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	613b      	str	r3, [r7, #16]
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	e7fd      	b.n	8005d58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	1ad2      	subs	r2, r2, r3
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d6e:	69b8      	ldr	r0, [r7, #24]
 8005d70:	f000 f90a 	bl	8005f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d74:	4b1d      	ldr	r3, [pc, #116]	@ (8005dec <pvPortMalloc+0x18c>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dec <pvPortMalloc+0x18c>)
 8005d80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d82:	4b1a      	ldr	r3, [pc, #104]	@ (8005dec <pvPortMalloc+0x18c>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4b1b      	ldr	r3, [pc, #108]	@ (8005df4 <pvPortMalloc+0x194>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d203      	bcs.n	8005d96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d8e:	4b17      	ldr	r3, [pc, #92]	@ (8005dec <pvPortMalloc+0x18c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a18      	ldr	r2, [pc, #96]	@ (8005df4 <pvPortMalloc+0x194>)
 8005d94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	4b13      	ldr	r3, [pc, #76]	@ (8005de8 <pvPortMalloc+0x188>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005daa:	4b13      	ldr	r3, [pc, #76]	@ (8005df8 <pvPortMalloc+0x198>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3301      	adds	r3, #1
 8005db0:	4a11      	ldr	r2, [pc, #68]	@ (8005df8 <pvPortMalloc+0x198>)
 8005db2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005db4:	f001 fb96 	bl	80074e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <pvPortMalloc+0x17a>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	60fb      	str	r3, [r7, #12]
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	e7fd      	b.n	8005dd6 <pvPortMalloc+0x176>
	return pvReturn;
 8005dda:	69fb      	ldr	r3, [r7, #28]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3728      	adds	r7, #40	@ 0x28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	240043dc 	.word	0x240043dc
 8005de8:	240043f0 	.word	0x240043f0
 8005dec:	240043e0 	.word	0x240043e0
 8005df0:	240043d4 	.word	0x240043d4
 8005df4:	240043e4 	.word	0x240043e4
 8005df8:	240043e8 	.word	0x240043e8

08005dfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d04f      	beq.n	8005eae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e0e:	2308      	movs	r3, #8
 8005e10:	425b      	negs	r3, r3
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4413      	add	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	4b25      	ldr	r3, [pc, #148]	@ (8005eb8 <vPortFree+0xbc>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <vPortFree+0x46>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	60fb      	str	r3, [r7, #12]
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	e7fd      	b.n	8005e3e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <vPortFree+0x66>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	60bb      	str	r3, [r7, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	bf00      	nop
 8005e60:	e7fd      	b.n	8005e5e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b14      	ldr	r3, [pc, #80]	@ (8005eb8 <vPortFree+0xbc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01e      	beq.n	8005eae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d11a      	bne.n	8005eae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb8 <vPortFree+0xbc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	401a      	ands	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e88:	f001 fb1e 	bl	80074c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4b0a      	ldr	r3, [pc, #40]	@ (8005ebc <vPortFree+0xc0>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	4a09      	ldr	r2, [pc, #36]	@ (8005ebc <vPortFree+0xc0>)
 8005e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f000 f874 	bl	8005f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ea0:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <vPortFree+0xc4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a06      	ldr	r2, [pc, #24]	@ (8005ec0 <vPortFree+0xc4>)
 8005ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eaa:	f001 fb1b 	bl	80074e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	240043f0 	.word	0x240043f0
 8005ebc:	240043e0 	.word	0x240043e0
 8005ec0:	240043ec 	.word	0x240043ec

08005ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ed0:	4b27      	ldr	r3, [pc, #156]	@ (8005f70 <prvHeapInit+0xac>)
 8005ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8005f70 <prvHeapInit+0xac>)
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005efc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f74 <prvHeapInit+0xb0>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f02:	4b1c      	ldr	r3, [pc, #112]	@ (8005f74 <prvHeapInit+0xb0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f10:	2208      	movs	r2, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a15      	ldr	r2, [pc, #84]	@ (8005f78 <prvHeapInit+0xb4>)
 8005f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f26:	4b14      	ldr	r3, [pc, #80]	@ (8005f78 <prvHeapInit+0xb4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f2e:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <prvHeapInit+0xb4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	@ (8005f78 <prvHeapInit+0xb4>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	@ (8005f7c <prvHeapInit+0xb8>)
 8005f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a09      	ldr	r2, [pc, #36]	@ (8005f80 <prvHeapInit+0xbc>)
 8005f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f5c:	4b09      	ldr	r3, [pc, #36]	@ (8005f84 <prvHeapInit+0xc0>)
 8005f5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	240007d4 	.word	0x240007d4
 8005f74:	240043d4 	.word	0x240043d4
 8005f78:	240043dc 	.word	0x240043dc
 8005f7c:	240043e4 	.word	0x240043e4
 8005f80:	240043e0 	.word	0x240043e0
 8005f84:	240043f0 	.word	0x240043f0

08005f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f90:	4b28      	ldr	r3, [pc, #160]	@ (8006034 <prvInsertBlockIntoFreeList+0xac>)
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x14>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d8f7      	bhi.n	8005f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d108      	bne.n	8005fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d118      	bne.n	8006010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	@ (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d00d      	beq.n	8006006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e008      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006006:	4b0c      	ldr	r3, [pc, #48]	@ (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e003      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	240043d4 	.word	0x240043d4
 8006038:	240043dc 	.word	0x240043dc

0800603c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f103 0208 	add.w	r2, r3, #8
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f103 0208 	add.w	r2, r3, #8
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f103 0208 	add.w	r2, r3, #8
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	601a      	str	r2, [r3, #0]
}
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f4:	d103      	bne.n	80060fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	e00c      	b.n	8006118 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3308      	adds	r3, #8
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	e002      	b.n	800610c <vListInsert+0x2e>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	429a      	cmp	r2, r3
 8006116:	d2f6      	bcs.n	8006106 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6892      	ldr	r2, [r2, #8]
 8006166:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6852      	ldr	r2, [r2, #4]
 8006170:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	429a      	cmp	r2, r3
 800617a:	d103      	bne.n	8006184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	1e5a      	subs	r2, r3, #1
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3b04      	subs	r3, #4
 80061b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3b04      	subs	r3, #4
 80061c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f023 0201 	bic.w	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006208 <pxPortInitialiseStack+0x64>)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3b14      	subs	r3, #20
 80061de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3b04      	subs	r3, #4
 80061ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f06f 0202 	mvn.w	r2, #2
 80061f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3b20      	subs	r3, #32
 80061f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061fa:	68fb      	ldr	r3, [r7, #12]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	0800620d 	.word	0x0800620d

0800620c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006216:	4b13      	ldr	r3, [pc, #76]	@ (8006264 <prvTaskExitError+0x58>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d00b      	beq.n	8006238 <prvTaskExitError+0x2c>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
}
 8006232:	bf00      	nop
 8006234:	bf00      	nop
 8006236:	e7fd      	b.n	8006234 <prvTaskExitError+0x28>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	60bb      	str	r3, [r7, #8]
}
 800624a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800624c:	bf00      	nop
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0fc      	beq.n	800624e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	24000010 	.word	0x24000010
	...

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	@ (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	4770      	bx	lr
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst2>:
 8006290:	2400443c 	.word	0x2400443c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006298:	4808      	ldr	r0, [pc, #32]	@ (80062bc <prvPortStartFirstTask+0x24>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8814 	msr	CONTROL, r0
 80062aa:	b662      	cpsie	i
 80062ac:	b661      	cpsie	f
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	df00      	svc	0
 80062b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ba:	bf00      	nop
 80062bc:	e000ed08 	.word	0xe000ed08

080062c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062c6:	4b47      	ldr	r3, [pc, #284]	@ (80063e4 <xPortStartScheduler+0x124>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a47      	ldr	r2, [pc, #284]	@ (80063e8 <xPortStartScheduler+0x128>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10b      	bne.n	80062e8 <xPortStartScheduler+0x28>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	60fb      	str	r3, [r7, #12]
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062e8:	4b3e      	ldr	r3, [pc, #248]	@ (80063e4 <xPortStartScheduler+0x124>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a3f      	ldr	r2, [pc, #252]	@ (80063ec <xPortStartScheduler+0x12c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d10b      	bne.n	800630a <xPortStartScheduler+0x4a>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	613b      	str	r3, [r7, #16]
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800630a:	4b39      	ldr	r3, [pc, #228]	@ (80063f0 <xPortStartScheduler+0x130>)
 800630c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	22ff      	movs	r2, #255	@ 0xff
 800631a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4b31      	ldr	r3, [pc, #196]	@ (80063f4 <xPortStartScheduler+0x134>)
 8006330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006332:	4b31      	ldr	r3, [pc, #196]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006334:	2207      	movs	r2, #7
 8006336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006338:	e009      	b.n	800634e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800633a:	4b2f      	ldr	r3, [pc, #188]	@ (80063f8 <xPortStartScheduler+0x138>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3b01      	subs	r3, #1
 8006340:	4a2d      	ldr	r2, [pc, #180]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006356:	2b80      	cmp	r3, #128	@ 0x80
 8006358:	d0ef      	beq.n	800633a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800635a:	4b27      	ldr	r3, [pc, #156]	@ (80063f8 <xPortStartScheduler+0x138>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f1c3 0307 	rsb	r3, r3, #7
 8006362:	2b04      	cmp	r3, #4
 8006364:	d00b      	beq.n	800637e <xPortStartScheduler+0xbe>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	60bb      	str	r3, [r7, #8]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800637e:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	4a1c      	ldr	r2, [pc, #112]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006388:	4b1b      	ldr	r3, [pc, #108]	@ (80063f8 <xPortStartScheduler+0x138>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006390:	4a19      	ldr	r2, [pc, #100]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800639c:	4b17      	ldr	r3, [pc, #92]	@ (80063fc <xPortStartScheduler+0x13c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063a8:	4b14      	ldr	r3, [pc, #80]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a13      	ldr	r2, [pc, #76]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063b4:	f000 f8da 	bl	800656c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063b8:	4b11      	ldr	r3, [pc, #68]	@ (8006400 <xPortStartScheduler+0x140>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063be:	f000 f8f9 	bl	80065b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063c2:	4b10      	ldr	r3, [pc, #64]	@ (8006404 <xPortStartScheduler+0x144>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006404 <xPortStartScheduler+0x144>)
 80063c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80063cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063ce:	f7ff ff63 	bl	8006298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063d2:	f001 f9ef 	bl	80077b4 <vTaskSwitchContext>
	prvTaskExitError();
 80063d6:	f7ff ff19 	bl	800620c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	e000ed00 	.word	0xe000ed00
 80063e8:	410fc271 	.word	0x410fc271
 80063ec:	410fc270 	.word	0x410fc270
 80063f0:	e000e400 	.word	0xe000e400
 80063f4:	240043f4 	.word	0x240043f4
 80063f8:	240043f8 	.word	0x240043f8
 80063fc:	e000ed20 	.word	0xe000ed20
 8006400:	24000010 	.word	0x24000010
 8006404:	e000ef34 	.word	0xe000ef34

08006408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006422:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <vPortEnterCritical+0x5c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	4a0e      	ldr	r2, [pc, #56]	@ (8006464 <vPortEnterCritical+0x5c>)
 800642a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800642c:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <vPortEnterCritical+0x5c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d110      	bne.n	8006456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006434:	4b0c      	ldr	r3, [pc, #48]	@ (8006468 <vPortEnterCritical+0x60>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <vPortEnterCritical+0x4e>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	603b      	str	r3, [r7, #0]
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	e7fd      	b.n	8006452 <vPortEnterCritical+0x4a>
	}
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	24000010 	.word	0x24000010
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006472:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <vPortExitCritical+0x50>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <vPortExitCritical+0x26>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	607b      	str	r3, [r7, #4]
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	e7fd      	b.n	800648e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006492:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <vPortExitCritical+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3b01      	subs	r3, #1
 8006498:	4a08      	ldr	r2, [pc, #32]	@ (80064bc <vPortExitCritical+0x50>)
 800649a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800649c:	4b07      	ldr	r3, [pc, #28]	@ (80064bc <vPortExitCritical+0x50>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <vPortExitCritical+0x44>
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	24000010 	.word	0x24000010

080064c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064c0:	f3ef 8009 	mrs	r0, PSP
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	4b15      	ldr	r3, [pc, #84]	@ (8006520 <pxCurrentTCBConst>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f01e 0f10 	tst.w	lr, #16
 80064d0:	bf08      	it	eq
 80064d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064da:	6010      	str	r0, [r2, #0]
 80064dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064e4:	f380 8811 	msr	BASEPRI, r0
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f001 f960 	bl	80077b4 <vTaskSwitchContext>
 80064f4:	f04f 0000 	mov.w	r0, #0
 80064f8:	f380 8811 	msr	BASEPRI, r0
 80064fc:	bc09      	pop	{r0, r3}
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	6808      	ldr	r0, [r1, #0]
 8006502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f01e 0f10 	tst.w	lr, #16
 800650a:	bf08      	it	eq
 800650c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006510:	f380 8809 	msr	PSP, r0
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst>:
 8006520:	2400443c 	.word	0x2400443c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006542:	f001 f87d 	bl	8007640 <xTaskIncrementTick>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <xPortSysTickHandler+0x40>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	2300      	movs	r3, #0
 8006556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f383 8811 	msr	BASEPRI, r3
}
 800655e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006570:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006576:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <vPortSetupTimerInterrupt+0x38>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800657c:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <vPortSetupTimerInterrupt+0x3c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0a      	ldr	r2, [pc, #40]	@ (80065ac <vPortSetupTimerInterrupt+0x40>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	4a09      	ldr	r2, [pc, #36]	@ (80065b0 <vPortSetupTimerInterrupt+0x44>)
 800658a:	3b01      	subs	r3, #1
 800658c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800658e:	4b04      	ldr	r3, [pc, #16]	@ (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006590:	2207      	movs	r2, #7
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	bf00      	nop
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	e000e010 	.word	0xe000e010
 80065a4:	e000e018 	.word	0xe000e018
 80065a8:	24000000 	.word	0x24000000
 80065ac:	10624dd3 	.word	0x10624dd3
 80065b0:	e000e014 	.word	0xe000e014

080065b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80065c4 <vPortEnableVFP+0x10>
 80065b8:	6801      	ldr	r1, [r0, #0]
 80065ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80065be:	6001      	str	r1, [r0, #0]
 80065c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065c2:	bf00      	nop
 80065c4:	e000ed88 	.word	0xe000ed88

080065c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ce:	f3ef 8305 	mrs	r3, IPSR
 80065d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d915      	bls.n	8006606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065da:	4a18      	ldr	r2, [pc, #96]	@ (800663c <vPortValidateInterruptPriority+0x74>)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065e4:	4b16      	ldr	r3, [pc, #88]	@ (8006640 <vPortValidateInterruptPriority+0x78>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	7afa      	ldrb	r2, [r7, #11]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d20b      	bcs.n	8006606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006606:	4b0f      	ldr	r3, [pc, #60]	@ (8006644 <vPortValidateInterruptPriority+0x7c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800660e:	4b0e      	ldr	r3, [pc, #56]	@ (8006648 <vPortValidateInterruptPriority+0x80>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d90b      	bls.n	800662e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	603b      	str	r3, [r7, #0]
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	e7fd      	b.n	800662a <vPortValidateInterruptPriority+0x62>
	}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	e000e3f0 	.word	0xe000e3f0
 8006640:	240043f4 	.word	0x240043f4
 8006644:	e000ed0c 	.word	0xe000ed0c
 8006648:	240043f8 	.word	0x240043f8

0800664c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10b      	bne.n	8006678 <xQueueGenericReset+0x2c>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60bb      	str	r3, [r7, #8]
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006678:	f7ff fec6 	bl	8006408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006684:	68f9      	ldr	r1, [r7, #12]
 8006686:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006688:	fb01 f303 	mul.w	r3, r1, r3
 800668c:	441a      	add	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a8:	3b01      	subs	r3, #1
 80066aa:	68f9      	ldr	r1, [r7, #12]
 80066ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80066ae:	fb01 f303 	mul.w	r3, r1, r3
 80066b2:	441a      	add	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	22ff      	movs	r2, #255	@ 0xff
 80066bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	22ff      	movs	r2, #255	@ 0xff
 80066c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d114      	bne.n	80066f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01a      	beq.n	800670c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3310      	adds	r3, #16
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 f91a 	bl	8007914 <xTaskRemoveFromEventList>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d012      	beq.n	800670c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066e6:	4b0d      	ldr	r3, [pc, #52]	@ (800671c <xQueueGenericReset+0xd0>)
 80066e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	e009      	b.n	800670c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3310      	adds	r3, #16
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fc9d 	bl	800603c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3324      	adds	r3, #36	@ 0x24
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fc98 	bl	800603c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800670c:	f7ff feae 	bl	800646c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006710:	2301      	movs	r3, #1
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	@ 0x38
 8006724:	af02      	add	r7, sp, #8
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	e7fd      	b.n	8006748 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	e7fd      	b.n	8006766 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <xQueueGenericCreateStatic+0x56>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <xQueueGenericCreateStatic+0x5a>
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <xQueueGenericCreateStatic+0x5c>
 800677a:	2300      	movs	r3, #0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	623b      	str	r3, [r7, #32]
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <xQueueGenericCreateStatic+0x84>
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <xQueueGenericCreateStatic+0x88>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <xQueueGenericCreateStatic+0x8a>
 80067a8:	2300      	movs	r3, #0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10b      	bne.n	80067c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	61fb      	str	r3, [r7, #28]
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	e7fd      	b.n	80067c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067c6:	2350      	movs	r3, #80	@ 0x50
 80067c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b50      	cmp	r3, #80	@ 0x50
 80067ce:	d00b      	beq.n	80067e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	61bb      	str	r3, [r7, #24]
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	e7fd      	b.n	80067e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80067ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00d      	beq.n	8006810 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 f805 	bl	800681a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006812:	4618      	mov	r0, r3
 8006814:	3730      	adds	r7, #48	@ 0x30
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
 8006826:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d103      	bne.n	8006836 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e002      	b.n	800683c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006848:	2101      	movs	r1, #1
 800684a:	69b8      	ldr	r0, [r7, #24]
 800684c:	f7ff fefe 	bl	800664c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08e      	sub	sp, #56	@ 0x38
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800686e:	2300      	movs	r3, #0
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10b      	bne.n	8006894 <xQueueGenericSend+0x34>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	e7fd      	b.n	8006890 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <xQueueGenericSend+0x42>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <xQueueGenericSend+0x46>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <xQueueGenericSend+0x48>
 80068a6:	2300      	movs	r3, #0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10b      	bne.n	80068c4 <xQueueGenericSend+0x64>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	e7fd      	b.n	80068c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d103      	bne.n	80068d2 <xQueueGenericSend+0x72>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <xQueueGenericSend+0x76>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <xQueueGenericSend+0x78>
 80068d6:	2300      	movs	r3, #0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <xQueueGenericSend+0x94>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	623b      	str	r3, [r7, #32]
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	e7fd      	b.n	80068f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068f4:	f001 f9ce 	bl	8007c94 <xTaskGetSchedulerState>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <xQueueGenericSend+0xa4>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <xQueueGenericSend+0xa8>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <xQueueGenericSend+0xaa>
 8006908:	2300      	movs	r3, #0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <xQueueGenericSend+0xc6>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	61fb      	str	r3, [r7, #28]
}
 8006920:	bf00      	nop
 8006922:	bf00      	nop
 8006924:	e7fd      	b.n	8006922 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006926:	f7ff fd6f 	bl	8006408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006932:	429a      	cmp	r2, r3
 8006934:	d302      	bcc.n	800693c <xQueueGenericSend+0xdc>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d129      	bne.n	8006990 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006942:	f000 fa0f 	bl	8006d64 <prvCopyDataToQueue>
 8006946:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	d010      	beq.n	8006972 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	3324      	adds	r3, #36	@ 0x24
 8006954:	4618      	mov	r0, r3
 8006956:	f000 ffdd 	bl	8007914 <xTaskRemoveFromEventList>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d013      	beq.n	8006988 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006960:	4b3f      	ldr	r3, [pc, #252]	@ (8006a60 <xQueueGenericSend+0x200>)
 8006962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	e00a      	b.n	8006988 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d007      	beq.n	8006988 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006978:	4b39      	ldr	r3, [pc, #228]	@ (8006a60 <xQueueGenericSend+0x200>)
 800697a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006988:	f7ff fd70 	bl	800646c <vPortExitCritical>
				return pdPASS;
 800698c:	2301      	movs	r3, #1
 800698e:	e063      	b.n	8006a58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006996:	f7ff fd69 	bl	800646c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800699a:	2300      	movs	r3, #0
 800699c:	e05c      	b.n	8006a58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800699e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d106      	bne.n	80069b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069a4:	f107 0314 	add.w	r3, r7, #20
 80069a8:	4618      	mov	r0, r3
 80069aa:	f001 f817 	bl	80079dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ae:	2301      	movs	r3, #1
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069b2:	f7ff fd5b 	bl	800646c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069b6:	f000 fd87 	bl	80074c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069ba:	f7ff fd25 	bl	8006408 <vPortEnterCritical>
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069c4:	b25b      	sxtb	r3, r3
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d103      	bne.n	80069d4 <xQueueGenericSend+0x174>
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069da:	b25b      	sxtb	r3, r3
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d103      	bne.n	80069ea <xQueueGenericSend+0x18a>
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069ea:	f7ff fd3f 	bl	800646c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069ee:	1d3a      	adds	r2, r7, #4
 80069f0:	f107 0314 	add.w	r3, r7, #20
 80069f4:	4611      	mov	r1, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 f806 	bl	8007a08 <xTaskCheckForTimeOut>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d124      	bne.n	8006a4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a04:	f000 faa6 	bl	8006f54 <prvIsQueueFull>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d018      	beq.n	8006a40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	3310      	adds	r3, #16
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	4611      	mov	r1, r2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 ff2a 	bl	8007870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a1e:	f000 fa31 	bl	8006e84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a22:	f000 fd5f 	bl	80074e4 <xTaskResumeAll>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f47f af7c 	bne.w	8006926 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a60 <xQueueGenericSend+0x200>)
 8006a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	e772      	b.n	8006926 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a42:	f000 fa1f 	bl	8006e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a46:	f000 fd4d 	bl	80074e4 <xTaskResumeAll>
 8006a4a:	e76c      	b.n	8006926 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a4e:	f000 fa19 	bl	8006e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a52:	f000 fd47 	bl	80074e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3738      	adds	r7, #56	@ 0x38
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	e000ed04 	.word	0xe000ed04

08006a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b090      	sub	sp, #64	@ 0x40
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10b      	bne.n	8006a94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <xQueueGenericSendFromISR+0x3e>
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <xQueueGenericSendFromISR+0x42>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <xQueueGenericSendFromISR+0x44>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	e7fd      	b.n	8006ac0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d103      	bne.n	8006ad2 <xQueueGenericSendFromISR+0x6e>
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <xQueueGenericSendFromISR+0x72>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xQueueGenericSendFromISR+0x74>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	623b      	str	r3, [r7, #32]
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006af4:	f7ff fd68 	bl	80065c8 <vPortValidateInterruptPriority>
	__asm volatile
 8006af8:	f3ef 8211 	mrs	r2, BASEPRI
 8006afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	61fa      	str	r2, [r7, #28]
 8006b0e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006b10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d302      	bcc.n	8006b26 <xQueueGenericSendFromISR+0xc2>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d12f      	bne.n	8006b86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b3c:	f000 f912 	bl	8006d64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b48:	d112      	bne.n	8006b70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d016      	beq.n	8006b80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b54:	3324      	adds	r3, #36	@ 0x24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fedc 	bl	8007914 <xTaskRemoveFromEventList>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	e007      	b.n	8006b80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b74:	3301      	adds	r3, #1
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	b25a      	sxtb	r2, r3
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b80:	2301      	movs	r3, #1
 8006b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b84:	e001      	b.n	8006b8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b86:	2300      	movs	r3, #0
 8006b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f383 8811 	msr	BASEPRI, r3
}
 8006b94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3740      	adds	r7, #64	@ 0x40
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08c      	sub	sp, #48	@ 0x30
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bac:	2300      	movs	r3, #0
 8006bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10b      	bne.n	8006bd2 <xQueueReceive+0x32>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	623b      	str	r3, [r7, #32]
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	e7fd      	b.n	8006bce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d103      	bne.n	8006be0 <xQueueReceive+0x40>
 8006bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <xQueueReceive+0x44>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <xQueueReceive+0x46>
 8006be4:	2300      	movs	r3, #0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <xQueueReceive+0x62>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	61fb      	str	r3, [r7, #28]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c02:	f001 f847 	bl	8007c94 <xTaskGetSchedulerState>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <xQueueReceive+0x72>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <xQueueReceive+0x76>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <xQueueReceive+0x78>
 8006c16:	2300      	movs	r3, #0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <xQueueReceive+0x94>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	61bb      	str	r3, [r7, #24]
}
 8006c2e:	bf00      	nop
 8006c30:	bf00      	nop
 8006c32:	e7fd      	b.n	8006c30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c34:	f7ff fbe8 	bl	8006408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d01f      	beq.n	8006c84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c48:	f000 f8f6 	bl	8006e38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	1e5a      	subs	r2, r3, #1
 8006c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00f      	beq.n	8006c7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5e:	3310      	adds	r3, #16
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fe57 	bl	8007914 <xTaskRemoveFromEventList>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8006d60 <xQueueReceive+0x1c0>)
 8006c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c7c:	f7ff fbf6 	bl	800646c <vPortExitCritical>
				return pdPASS;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e069      	b.n	8006d58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d103      	bne.n	8006c92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c8a:	f7ff fbef 	bl	800646c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e062      	b.n	8006d58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c98:	f107 0310 	add.w	r3, r7, #16
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fe9d 	bl	80079dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ca6:	f7ff fbe1 	bl	800646c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006caa:	f000 fc0d 	bl	80074c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cae:	f7ff fbab 	bl	8006408 <vPortEnterCritical>
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cb8:	b25b      	sxtb	r3, r3
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d103      	bne.n	8006cc8 <xQueueReceive+0x128>
 8006cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd4:	d103      	bne.n	8006cde <xQueueReceive+0x13e>
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cde:	f7ff fbc5 	bl	800646c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ce2:	1d3a      	adds	r2, r7, #4
 8006ce4:	f107 0310 	add.w	r3, r7, #16
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fe8c 	bl	8007a08 <xTaskCheckForTimeOut>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d123      	bne.n	8006d3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cf8:	f000 f916 	bl	8006f28 <prvIsQueueEmpty>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d017      	beq.n	8006d32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d04:	3324      	adds	r3, #36	@ 0x24
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4611      	mov	r1, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fdb0 	bl	8007870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d12:	f000 f8b7 	bl	8006e84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d16:	f000 fbe5 	bl	80074e4 <xTaskResumeAll>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d189      	bne.n	8006c34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006d20:	4b0f      	ldr	r3, [pc, #60]	@ (8006d60 <xQueueReceive+0x1c0>)
 8006d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	e780      	b.n	8006c34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d34:	f000 f8a6 	bl	8006e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d38:	f000 fbd4 	bl	80074e4 <xTaskResumeAll>
 8006d3c:	e77a      	b.n	8006c34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d40:	f000 f8a0 	bl	8006e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d44:	f000 fbce 	bl	80074e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d4a:	f000 f8ed 	bl	8006f28 <prvIsQueueEmpty>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f43f af6f 	beq.w	8006c34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3730      	adds	r7, #48	@ 0x30
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	e000ed04 	.word	0xe000ed04

08006d64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10d      	bne.n	8006d9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d14d      	bne.n	8006e26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 ff9e 	bl	8007cd0 <xTaskPriorityDisinherit>
 8006d94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	609a      	str	r2, [r3, #8]
 8006d9c:	e043      	b.n	8006e26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d119      	bne.n	8006dd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6858      	ldr	r0, [r3, #4]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dac:	461a      	mov	r2, r3
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	f001 fbd8 	bl	8008564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbc:	441a      	add	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d32b      	bcc.n	8006e26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	605a      	str	r2, [r3, #4]
 8006dd6:	e026      	b.n	8006e26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68d8      	ldr	r0, [r3, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de0:	461a      	mov	r2, r3
 8006de2:	68b9      	ldr	r1, [r7, #8]
 8006de4:	f001 fbbe 	bl	8008564 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df0:	425b      	negs	r3, r3
 8006df2:	441a      	add	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d207      	bcs.n	8006e14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0c:	425b      	negs	r3, r3
 8006e0e:	441a      	add	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d105      	bne.n	8006e26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e2e:	697b      	ldr	r3, [r7, #20]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d018      	beq.n	8006e7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e52:	441a      	add	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d303      	bcc.n	8006e6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68d9      	ldr	r1, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e74:	461a      	mov	r2, r3
 8006e76:	6838      	ldr	r0, [r7, #0]
 8006e78:	f001 fb74 	bl	8008564 <memcpy>
	}
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e8c:	f7ff fabc 	bl	8006408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e98:	e011      	b.n	8006ebe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d012      	beq.n	8006ec8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3324      	adds	r3, #36	@ 0x24
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fd34 	bl	8007914 <xTaskRemoveFromEventList>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006eb2:	f000 fe0d 	bl	8007ad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dce9      	bgt.n	8006e9a <prvUnlockQueue+0x16>
 8006ec6:	e000      	b.n	8006eca <prvUnlockQueue+0x46>
					break;
 8006ec8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	22ff      	movs	r2, #255	@ 0xff
 8006ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006ed2:	f7ff facb 	bl	800646c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ed6:	f7ff fa97 	bl	8006408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ee0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ee2:	e011      	b.n	8006f08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d012      	beq.n	8006f12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3310      	adds	r3, #16
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fd0f 	bl	8007914 <xTaskRemoveFromEventList>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006efc:	f000 fde8 	bl	8007ad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dce9      	bgt.n	8006ee4 <prvUnlockQueue+0x60>
 8006f10:	e000      	b.n	8006f14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	22ff      	movs	r2, #255	@ 0xff
 8006f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f1c:	f7ff faa6 	bl	800646c <vPortExitCritical>
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f30:	f7ff fa6a 	bl	8006408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e001      	b.n	8006f46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f46:	f7ff fa91 	bl	800646c <vPortExitCritical>

	return xReturn;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f5c:	f7ff fa54 	bl	8006408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d102      	bne.n	8006f72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	e001      	b.n	8006f76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f76:	f7ff fa79 	bl	800646c <vPortExitCritical>

	return xReturn;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	e014      	b.n	8006fbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f94:	4a0f      	ldr	r2, [pc, #60]	@ (8006fd4 <vQueueAddToRegistry+0x50>)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fa0:	490c      	ldr	r1, [pc, #48]	@ (8006fd4 <vQueueAddToRegistry+0x50>)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006faa:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd4 <vQueueAddToRegistry+0x50>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006fb6:	e006      	b.n	8006fc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b07      	cmp	r3, #7
 8006fc2:	d9e7      	bls.n	8006f94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	240043fc 	.word	0x240043fc

08006fd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fe8:	f7ff fa0e 	bl	8006408 <vPortEnterCritical>
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ff2:	b25b      	sxtb	r3, r3
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d103      	bne.n	8007002 <vQueueWaitForMessageRestricted+0x2a>
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007008:	b25b      	sxtb	r3, r3
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d103      	bne.n	8007018 <vQueueWaitForMessageRestricted+0x40>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007018:	f7ff fa28 	bl	800646c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	2b00      	cmp	r3, #0
 8007022:	d106      	bne.n	8007032 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	3324      	adds	r3, #36	@ 0x24
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fc45 	bl	80078bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007032:	6978      	ldr	r0, [r7, #20]
 8007034:	f7ff ff26 	bl	8006e84 <prvUnlockQueue>
	}
 8007038:	bf00      	nop
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08e      	sub	sp, #56	@ 0x38
 8007044:	af04      	add	r7, sp, #16
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800704e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10b      	bne.n	800706c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	623b      	str	r3, [r7, #32]
}
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	e7fd      	b.n	8007068 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800706c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10b      	bne.n	800708a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	61fb      	str	r3, [r7, #28]
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800708a:	235c      	movs	r3, #92	@ 0x5c
 800708c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b5c      	cmp	r3, #92	@ 0x5c
 8007092:	d00b      	beq.n	80070ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	61bb      	str	r3, [r7, #24]
}
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	e7fd      	b.n	80070a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01e      	beq.n	80070f2 <xTaskCreateStatic+0xb2>
 80070b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01b      	beq.n	80070f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070cc:	2300      	movs	r3, #0
 80070ce:	9303      	str	r3, [sp, #12]
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	9302      	str	r3, [sp, #8]
 80070d4:	f107 0314 	add.w	r3, r7, #20
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f850 	bl	800718a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070ec:	f000 f8de 	bl	80072ac <prvAddNewTaskToReadyList>
 80070f0:	e001      	b.n	80070f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070f6:	697b      	ldr	r3, [r7, #20]
	}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3728      	adds	r7, #40	@ 0x28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08c      	sub	sp, #48	@ 0x30
 8007104:	af04      	add	r7, sp, #16
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	4613      	mov	r3, r2
 800710e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe fda3 	bl	8005c60 <pvPortMalloc>
 800711a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007122:	205c      	movs	r0, #92	@ 0x5c
 8007124:	f7fe fd9c 	bl	8005c60 <pvPortMalloc>
 8007128:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	631a      	str	r2, [r3, #48]	@ 0x30
 8007136:	e005      	b.n	8007144 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007138:	6978      	ldr	r0, [r7, #20]
 800713a:	f7fe fe5f 	bl	8005dfc <vPortFree>
 800713e:	e001      	b.n	8007144 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007140:	2300      	movs	r3, #0
 8007142:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d017      	beq.n	800717a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	2300      	movs	r3, #0
 8007156:	9303      	str	r3, [sp, #12]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	9302      	str	r3, [sp, #8]
 800715c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715e:	9301      	str	r3, [sp, #4]
 8007160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 f80e 	bl	800718a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800716e:	69f8      	ldr	r0, [r7, #28]
 8007170:	f000 f89c 	bl	80072ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007174:	2301      	movs	r3, #1
 8007176:	61bb      	str	r3, [r7, #24]
 8007178:	e002      	b.n	8007180 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800717a:	f04f 33ff 	mov.w	r3, #4294967295
 800717e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007180:	69bb      	ldr	r3, [r7, #24]
	}
 8007182:	4618      	mov	r0, r3
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b088      	sub	sp, #32
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	607a      	str	r2, [r7, #4]
 8007196:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	461a      	mov	r2, r3
 80071a2:	21a5      	movs	r1, #165	@ 0xa5
 80071a4:	f001 f9b2 	bl	800850c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80071b2:	440b      	add	r3, r1
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	f023 0307 	bic.w	r3, r3, #7
 80071c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	617b      	str	r3, [r7, #20]
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01f      	beq.n	800722a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	e012      	b.n	8007216 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	7819      	ldrb	r1, [r3, #0]
 80071f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	3334      	adds	r3, #52	@ 0x34
 8007200:	460a      	mov	r2, r1
 8007202:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d006      	beq.n	800721e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	3301      	adds	r3, #1
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	2b0f      	cmp	r3, #15
 800721a:	d9e9      	bls.n	80071f0 <prvInitialiseNewTask+0x66>
 800721c:	e000      	b.n	8007220 <prvInitialiseNewTask+0x96>
			{
				break;
 800721e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007228:	e003      	b.n	8007232 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007234:	2b37      	cmp	r3, #55	@ 0x37
 8007236:	d901      	bls.n	800723c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007238:	2337      	movs	r3, #55	@ 0x37
 800723a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007240:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007246:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724a:	2200      	movs	r2, #0
 800724c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	3304      	adds	r3, #4
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe ff12 	bl	800607c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725a:	3318      	adds	r3, #24
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe ff0d 	bl	800607c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007266:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800726e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007270:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007276:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	2200      	movs	r2, #0
 800727c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	69b8      	ldr	r0, [r7, #24]
 800728c:	f7fe ff8a 	bl	80061a4 <pxPortInitialiseStack>
 8007290:	4602      	mov	r2, r0
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800729c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072a2:	bf00      	nop
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072b4:	f7ff f8a8 	bl	8006408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007370 <prvAddNewTaskToReadyList+0xc4>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3301      	adds	r3, #1
 80072be:	4a2c      	ldr	r2, [pc, #176]	@ (8007370 <prvAddNewTaskToReadyList+0xc4>)
 80072c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007374 <prvAddNewTaskToReadyList+0xc8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007374 <prvAddNewTaskToReadyList+0xc8>)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072d0:	4b27      	ldr	r3, [pc, #156]	@ (8007370 <prvAddNewTaskToReadyList+0xc4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d110      	bne.n	80072fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072d8:	f000 fc1e 	bl	8007b18 <prvInitialiseTaskLists>
 80072dc:	e00d      	b.n	80072fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072de:	4b26      	ldr	r3, [pc, #152]	@ (8007378 <prvAddNewTaskToReadyList+0xcc>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072e6:	4b23      	ldr	r3, [pc, #140]	@ (8007374 <prvAddNewTaskToReadyList+0xc8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d802      	bhi.n	80072fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007374 <prvAddNewTaskToReadyList+0xc8>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072fa:	4b20      	ldr	r3, [pc, #128]	@ (800737c <prvAddNewTaskToReadyList+0xd0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3301      	adds	r3, #1
 8007300:	4a1e      	ldr	r2, [pc, #120]	@ (800737c <prvAddNewTaskToReadyList+0xd0>)
 8007302:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007304:	4b1d      	ldr	r3, [pc, #116]	@ (800737c <prvAddNewTaskToReadyList+0xd0>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007310:	4b1b      	ldr	r3, [pc, #108]	@ (8007380 <prvAddNewTaskToReadyList+0xd4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d903      	bls.n	8007320 <prvAddNewTaskToReadyList+0x74>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731c:	4a18      	ldr	r2, [pc, #96]	@ (8007380 <prvAddNewTaskToReadyList+0xd4>)
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4a15      	ldr	r2, [pc, #84]	@ (8007384 <prvAddNewTaskToReadyList+0xd8>)
 800732e:	441a      	add	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f7fe fead 	bl	8006096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800733c:	f7ff f896 	bl	800646c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007340:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <prvAddNewTaskToReadyList+0xcc>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00e      	beq.n	8007366 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007348:	4b0a      	ldr	r3, [pc, #40]	@ (8007374 <prvAddNewTaskToReadyList+0xc8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007352:	429a      	cmp	r2, r3
 8007354:	d207      	bcs.n	8007366 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007356:	4b0c      	ldr	r3, [pc, #48]	@ (8007388 <prvAddNewTaskToReadyList+0xdc>)
 8007358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	24004910 	.word	0x24004910
 8007374:	2400443c 	.word	0x2400443c
 8007378:	2400491c 	.word	0x2400491c
 800737c:	2400492c 	.word	0x2400492c
 8007380:	24004918 	.word	0x24004918
 8007384:	24004440 	.word	0x24004440
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d018      	beq.n	80073d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800739e:	4b14      	ldr	r3, [pc, #80]	@ (80073f0 <vTaskDelay+0x64>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <vTaskDelay+0x32>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60bb      	str	r3, [r7, #8]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073be:	f000 f883 	bl	80074c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073c2:	2100      	movs	r1, #0
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fcf3 	bl	8007db0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073ca:	f000 f88b 	bl	80074e4 <xTaskResumeAll>
 80073ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d107      	bne.n	80073e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80073d6:	4b07      	ldr	r3, [pc, #28]	@ (80073f4 <vTaskDelay+0x68>)
 80073d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	24004938 	.word	0x24004938
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	@ 0x28
 80073fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007406:	463a      	mov	r2, r7
 8007408:	1d39      	adds	r1, r7, #4
 800740a:	f107 0308 	add.w	r3, r7, #8
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fbf2 	bl	8005bf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	9202      	str	r2, [sp, #8]
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	2300      	movs	r3, #0
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	2300      	movs	r3, #0
 8007424:	460a      	mov	r2, r1
 8007426:	4922      	ldr	r1, [pc, #136]	@ (80074b0 <vTaskStartScheduler+0xb8>)
 8007428:	4822      	ldr	r0, [pc, #136]	@ (80074b4 <vTaskStartScheduler+0xbc>)
 800742a:	f7ff fe09 	bl	8007040 <xTaskCreateStatic>
 800742e:	4603      	mov	r3, r0
 8007430:	4a21      	ldr	r2, [pc, #132]	@ (80074b8 <vTaskStartScheduler+0xc0>)
 8007432:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007434:	4b20      	ldr	r3, [pc, #128]	@ (80074b8 <vTaskStartScheduler+0xc0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e001      	b.n	8007446 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d102      	bne.n	8007452 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800744c:	f000 fd04 	bl	8007e58 <xTimerCreateTimerTask>
 8007450:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d116      	bne.n	8007486 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	613b      	str	r3, [r7, #16]
}
 800746a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800746c:	4b13      	ldr	r3, [pc, #76]	@ (80074bc <vTaskStartScheduler+0xc4>)
 800746e:	f04f 32ff 	mov.w	r2, #4294967295
 8007472:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007474:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <vTaskStartScheduler+0xc8>)
 8007476:	2201      	movs	r2, #1
 8007478:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800747a:	4b12      	ldr	r3, [pc, #72]	@ (80074c4 <vTaskStartScheduler+0xcc>)
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007480:	f7fe ff1e 	bl	80062c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007484:	e00f      	b.n	80074a6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748c:	d10b      	bne.n	80074a6 <vTaskStartScheduler+0xae>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	60fb      	str	r3, [r7, #12]
}
 80074a0:	bf00      	nop
 80074a2:	bf00      	nop
 80074a4:	e7fd      	b.n	80074a2 <vTaskStartScheduler+0xaa>
}
 80074a6:	bf00      	nop
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	080085a4 	.word	0x080085a4
 80074b4:	08007ae9 	.word	0x08007ae9
 80074b8:	24004934 	.word	0x24004934
 80074bc:	24004930 	.word	0x24004930
 80074c0:	2400491c 	.word	0x2400491c
 80074c4:	24004914 	.word	0x24004914

080074c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074cc:	4b04      	ldr	r3, [pc, #16]	@ (80074e0 <vTaskSuspendAll+0x18>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	4a03      	ldr	r2, [pc, #12]	@ (80074e0 <vTaskSuspendAll+0x18>)
 80074d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074d6:	bf00      	nop
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	24004938 	.word	0x24004938

080074e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074f2:	4b42      	ldr	r3, [pc, #264]	@ (80075fc <xTaskResumeAll+0x118>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10b      	bne.n	8007512 <xTaskResumeAll+0x2e>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	603b      	str	r3, [r7, #0]
}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	e7fd      	b.n	800750e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007512:	f7fe ff79 	bl	8006408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007516:	4b39      	ldr	r3, [pc, #228]	@ (80075fc <xTaskResumeAll+0x118>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3b01      	subs	r3, #1
 800751c:	4a37      	ldr	r2, [pc, #220]	@ (80075fc <xTaskResumeAll+0x118>)
 800751e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007520:	4b36      	ldr	r3, [pc, #216]	@ (80075fc <xTaskResumeAll+0x118>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d162      	bne.n	80075ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007528:	4b35      	ldr	r3, [pc, #212]	@ (8007600 <xTaskResumeAll+0x11c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d05e      	beq.n	80075ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007530:	e02f      	b.n	8007592 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007532:	4b34      	ldr	r3, [pc, #208]	@ (8007604 <xTaskResumeAll+0x120>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3318      	adds	r3, #24
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe fe06 	bl	8006150 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3304      	adds	r3, #4
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe fe01 	bl	8006150 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007552:	4b2d      	ldr	r3, [pc, #180]	@ (8007608 <xTaskResumeAll+0x124>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d903      	bls.n	8007562 <xTaskResumeAll+0x7e>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755e:	4a2a      	ldr	r2, [pc, #168]	@ (8007608 <xTaskResumeAll+0x124>)
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007566:	4613      	mov	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4a27      	ldr	r2, [pc, #156]	@ (800760c <xTaskResumeAll+0x128>)
 8007570:	441a      	add	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3304      	adds	r3, #4
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f7fe fd8c 	bl	8006096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007582:	4b23      	ldr	r3, [pc, #140]	@ (8007610 <xTaskResumeAll+0x12c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	429a      	cmp	r2, r3
 800758a:	d302      	bcc.n	8007592 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800758c:	4b21      	ldr	r3, [pc, #132]	@ (8007614 <xTaskResumeAll+0x130>)
 800758e:	2201      	movs	r2, #1
 8007590:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007592:	4b1c      	ldr	r3, [pc, #112]	@ (8007604 <xTaskResumeAll+0x120>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1cb      	bne.n	8007532 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075a0:	f000 fb58 	bl	8007c54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007618 <xTaskResumeAll+0x134>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d010      	beq.n	80075d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075b0:	f000 f846 	bl	8007640 <xTaskIncrementTick>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80075ba:	4b16      	ldr	r3, [pc, #88]	@ (8007614 <xTaskResumeAll+0x130>)
 80075bc:	2201      	movs	r2, #1
 80075be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1f1      	bne.n	80075b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80075cc:	4b12      	ldr	r3, [pc, #72]	@ (8007618 <xTaskResumeAll+0x134>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075d2:	4b10      	ldr	r3, [pc, #64]	@ (8007614 <xTaskResumeAll+0x130>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d009      	beq.n	80075ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075da:	2301      	movs	r3, #1
 80075dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075de:	4b0f      	ldr	r3, [pc, #60]	@ (800761c <xTaskResumeAll+0x138>)
 80075e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075ee:	f7fe ff3d 	bl	800646c <vPortExitCritical>

	return xAlreadyYielded;
 80075f2:	68bb      	ldr	r3, [r7, #8]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	24004938 	.word	0x24004938
 8007600:	24004910 	.word	0x24004910
 8007604:	240048d0 	.word	0x240048d0
 8007608:	24004918 	.word	0x24004918
 800760c:	24004440 	.word	0x24004440
 8007610:	2400443c 	.word	0x2400443c
 8007614:	24004924 	.word	0x24004924
 8007618:	24004920 	.word	0x24004920
 800761c:	e000ed04 	.word	0xe000ed04

08007620 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007626:	4b05      	ldr	r3, [pc, #20]	@ (800763c <xTaskGetTickCount+0x1c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800762c:	687b      	ldr	r3, [r7, #4]
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	24004914 	.word	0x24004914

08007640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007646:	2300      	movs	r3, #0
 8007648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800764a:	4b4f      	ldr	r3, [pc, #316]	@ (8007788 <xTaskIncrementTick+0x148>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f040 8090 	bne.w	8007774 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007654:	4b4d      	ldr	r3, [pc, #308]	@ (800778c <xTaskIncrementTick+0x14c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3301      	adds	r3, #1
 800765a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800765c:	4a4b      	ldr	r2, [pc, #300]	@ (800778c <xTaskIncrementTick+0x14c>)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d121      	bne.n	80076ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007668:	4b49      	ldr	r3, [pc, #292]	@ (8007790 <xTaskIncrementTick+0x150>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	603b      	str	r3, [r7, #0]
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <xTaskIncrementTick+0x46>
 800768a:	4b41      	ldr	r3, [pc, #260]	@ (8007790 <xTaskIncrementTick+0x150>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	4b40      	ldr	r3, [pc, #256]	@ (8007794 <xTaskIncrementTick+0x154>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a3e      	ldr	r2, [pc, #248]	@ (8007790 <xTaskIncrementTick+0x150>)
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	4a3e      	ldr	r2, [pc, #248]	@ (8007794 <xTaskIncrementTick+0x154>)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	4b3e      	ldr	r3, [pc, #248]	@ (8007798 <xTaskIncrementTick+0x158>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3301      	adds	r3, #1
 80076a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007798 <xTaskIncrementTick+0x158>)
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	f000 fad4 	bl	8007c54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076ac:	4b3b      	ldr	r3, [pc, #236]	@ (800779c <xTaskIncrementTick+0x15c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d349      	bcc.n	800774a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076b6:	4b36      	ldr	r3, [pc, #216]	@ (8007790 <xTaskIncrementTick+0x150>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d104      	bne.n	80076ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c0:	4b36      	ldr	r3, [pc, #216]	@ (800779c <xTaskIncrementTick+0x15c>)
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	601a      	str	r2, [r3, #0]
					break;
 80076c8:	e03f      	b.n	800774a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ca:	4b31      	ldr	r3, [pc, #196]	@ (8007790 <xTaskIncrementTick+0x150>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d203      	bcs.n	80076ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076e2:	4a2e      	ldr	r2, [pc, #184]	@ (800779c <xTaskIncrementTick+0x15c>)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076e8:	e02f      	b.n	800774a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	3304      	adds	r3, #4
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe fd2e 	bl	8006150 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d004      	beq.n	8007706 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	3318      	adds	r3, #24
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe fd25 	bl	8006150 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770a:	4b25      	ldr	r3, [pc, #148]	@ (80077a0 <xTaskIncrementTick+0x160>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d903      	bls.n	800771a <xTaskIncrementTick+0xda>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007716:	4a22      	ldr	r2, [pc, #136]	@ (80077a0 <xTaskIncrementTick+0x160>)
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4a1f      	ldr	r2, [pc, #124]	@ (80077a4 <xTaskIncrementTick+0x164>)
 8007728:	441a      	add	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	3304      	adds	r3, #4
 800772e:	4619      	mov	r1, r3
 8007730:	4610      	mov	r0, r2
 8007732:	f7fe fcb0 	bl	8006096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773a:	4b1b      	ldr	r3, [pc, #108]	@ (80077a8 <xTaskIncrementTick+0x168>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007740:	429a      	cmp	r2, r3
 8007742:	d3b8      	bcc.n	80076b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007744:	2301      	movs	r3, #1
 8007746:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007748:	e7b5      	b.n	80076b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800774a:	4b17      	ldr	r3, [pc, #92]	@ (80077a8 <xTaskIncrementTick+0x168>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007750:	4914      	ldr	r1, [pc, #80]	@ (80077a4 <xTaskIncrementTick+0x164>)
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d901      	bls.n	8007766 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007762:	2301      	movs	r3, #1
 8007764:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007766:	4b11      	ldr	r3, [pc, #68]	@ (80077ac <xTaskIncrementTick+0x16c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d007      	beq.n	800777e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800776e:	2301      	movs	r3, #1
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	e004      	b.n	800777e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007774:	4b0e      	ldr	r3, [pc, #56]	@ (80077b0 <xTaskIncrementTick+0x170>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3301      	adds	r3, #1
 800777a:	4a0d      	ldr	r2, [pc, #52]	@ (80077b0 <xTaskIncrementTick+0x170>)
 800777c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800777e:	697b      	ldr	r3, [r7, #20]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	24004938 	.word	0x24004938
 800778c:	24004914 	.word	0x24004914
 8007790:	240048c8 	.word	0x240048c8
 8007794:	240048cc 	.word	0x240048cc
 8007798:	24004928 	.word	0x24004928
 800779c:	24004930 	.word	0x24004930
 80077a0:	24004918 	.word	0x24004918
 80077a4:	24004440 	.word	0x24004440
 80077a8:	2400443c 	.word	0x2400443c
 80077ac:	24004924 	.word	0x24004924
 80077b0:	24004920 	.word	0x24004920

080077b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077ba:	4b28      	ldr	r3, [pc, #160]	@ (800785c <vTaskSwitchContext+0xa8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077c2:	4b27      	ldr	r3, [pc, #156]	@ (8007860 <vTaskSwitchContext+0xac>)
 80077c4:	2201      	movs	r2, #1
 80077c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077c8:	e042      	b.n	8007850 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80077ca:	4b25      	ldr	r3, [pc, #148]	@ (8007860 <vTaskSwitchContext+0xac>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d0:	4b24      	ldr	r3, [pc, #144]	@ (8007864 <vTaskSwitchContext+0xb0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	e011      	b.n	80077fc <vTaskSwitchContext+0x48>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10b      	bne.n	80077f6 <vTaskSwitchContext+0x42>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	607b      	str	r3, [r7, #4]
}
 80077f0:	bf00      	nop
 80077f2:	bf00      	nop
 80077f4:	e7fd      	b.n	80077f2 <vTaskSwitchContext+0x3e>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	491a      	ldr	r1, [pc, #104]	@ (8007868 <vTaskSwitchContext+0xb4>)
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	440b      	add	r3, r1
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0e3      	beq.n	80077d8 <vTaskSwitchContext+0x24>
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4a13      	ldr	r2, [pc, #76]	@ (8007868 <vTaskSwitchContext+0xb4>)
 800781c:	4413      	add	r3, r2
 800781e:	60bb      	str	r3, [r7, #8]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	605a      	str	r2, [r3, #4]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	3308      	adds	r3, #8
 8007832:	429a      	cmp	r2, r3
 8007834:	d104      	bne.n	8007840 <vTaskSwitchContext+0x8c>
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	605a      	str	r2, [r3, #4]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	4a09      	ldr	r2, [pc, #36]	@ (800786c <vTaskSwitchContext+0xb8>)
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	4a06      	ldr	r2, [pc, #24]	@ (8007864 <vTaskSwitchContext+0xb0>)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6013      	str	r3, [r2, #0]
}
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	24004938 	.word	0x24004938
 8007860:	24004924 	.word	0x24004924
 8007864:	24004918 	.word	0x24004918
 8007868:	24004440 	.word	0x24004440
 800786c:	2400443c 	.word	0x2400443c

08007870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10b      	bne.n	8007898 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	60fb      	str	r3, [r7, #12]
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007898:	4b07      	ldr	r3, [pc, #28]	@ (80078b8 <vTaskPlaceOnEventList+0x48>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3318      	adds	r3, #24
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7fe fc1c 	bl	80060de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078a6:	2101      	movs	r1, #1
 80078a8:	6838      	ldr	r0, [r7, #0]
 80078aa:	f000 fa81 	bl	8007db0 <prvAddCurrentTaskToDelayedList>
}
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	2400443c 	.word	0x2400443c

080078bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	617b      	str	r3, [r7, #20]
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	e7fd      	b.n	80078e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007910 <vTaskPlaceOnEventListRestricted+0x54>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3318      	adds	r3, #24
 80078ec:	4619      	mov	r1, r3
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7fe fbd1 	bl	8006096 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80078fa:	f04f 33ff 	mov.w	r3, #4294967295
 80078fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	68b8      	ldr	r0, [r7, #8]
 8007904:	f000 fa54 	bl	8007db0 <prvAddCurrentTaskToDelayedList>
	}
 8007908:	bf00      	nop
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	2400443c 	.word	0x2400443c

08007914 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	60fb      	str	r3, [r7, #12]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	3318      	adds	r3, #24
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fc02 	bl	8006150 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800794c:	4b1d      	ldr	r3, [pc, #116]	@ (80079c4 <xTaskRemoveFromEventList+0xb0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d11d      	bne.n	8007990 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	3304      	adds	r3, #4
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe fbf9 	bl	8006150 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007962:	4b19      	ldr	r3, [pc, #100]	@ (80079c8 <xTaskRemoveFromEventList+0xb4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d903      	bls.n	8007972 <xTaskRemoveFromEventList+0x5e>
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796e:	4a16      	ldr	r2, [pc, #88]	@ (80079c8 <xTaskRemoveFromEventList+0xb4>)
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4a13      	ldr	r2, [pc, #76]	@ (80079cc <xTaskRemoveFromEventList+0xb8>)
 8007980:	441a      	add	r2, r3
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	3304      	adds	r3, #4
 8007986:	4619      	mov	r1, r3
 8007988:	4610      	mov	r0, r2
 800798a:	f7fe fb84 	bl	8006096 <vListInsertEnd>
 800798e:	e005      	b.n	800799c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	3318      	adds	r3, #24
 8007994:	4619      	mov	r1, r3
 8007996:	480e      	ldr	r0, [pc, #56]	@ (80079d0 <xTaskRemoveFromEventList+0xbc>)
 8007998:	f7fe fb7d 	bl	8006096 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a0:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <xTaskRemoveFromEventList+0xc0>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d905      	bls.n	80079b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079aa:	2301      	movs	r3, #1
 80079ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079ae:	4b0a      	ldr	r3, [pc, #40]	@ (80079d8 <xTaskRemoveFromEventList+0xc4>)
 80079b0:	2201      	movs	r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e001      	b.n	80079ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80079ba:	697b      	ldr	r3, [r7, #20]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	24004938 	.word	0x24004938
 80079c8:	24004918 	.word	0x24004918
 80079cc:	24004440 	.word	0x24004440
 80079d0:	240048d0 	.word	0x240048d0
 80079d4:	2400443c 	.word	0x2400443c
 80079d8:	24004924 	.word	0x24004924

080079dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079e4:	4b06      	ldr	r3, [pc, #24]	@ (8007a00 <vTaskInternalSetTimeOutState+0x24>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079ec:	4b05      	ldr	r3, [pc, #20]	@ (8007a04 <vTaskInternalSetTimeOutState+0x28>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	605a      	str	r2, [r3, #4]
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	24004928 	.word	0x24004928
 8007a04:	24004914 	.word	0x24004914

08007a08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10b      	bne.n	8007a30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	613b      	str	r3, [r7, #16]
}
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
 8007a2e:	e7fd      	b.n	8007a2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10b      	bne.n	8007a4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	60fb      	str	r3, [r7, #12]
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	e7fd      	b.n	8007a4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a4e:	f7fe fcdb 	bl	8006408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a52:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac8 <xTaskCheckForTimeOut+0xc0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6a:	d102      	bne.n	8007a72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61fb      	str	r3, [r7, #28]
 8007a70:	e023      	b.n	8007aba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	4b15      	ldr	r3, [pc, #84]	@ (8007acc <xTaskCheckForTimeOut+0xc4>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d007      	beq.n	8007a8e <xTaskCheckForTimeOut+0x86>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d302      	bcc.n	8007a8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	61fb      	str	r3, [r7, #28]
 8007a8c:	e015      	b.n	8007aba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d20b      	bcs.n	8007ab0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff ff99 	bl	80079dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
 8007aae:	e004      	b.n	8007aba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007aba:	f7fe fcd7 	bl	800646c <vPortExitCritical>

	return xReturn;
 8007abe:	69fb      	ldr	r3, [r7, #28]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	24004914 	.word	0x24004914
 8007acc:	24004928 	.word	0x24004928

08007ad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ad4:	4b03      	ldr	r3, [pc, #12]	@ (8007ae4 <vTaskMissedYield+0x14>)
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]
}
 8007ada:	bf00      	nop
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	24004924 	.word	0x24004924

08007ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007af0:	f000 f852 	bl	8007b98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007af4:	4b06      	ldr	r3, [pc, #24]	@ (8007b10 <prvIdleTask+0x28>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d9f9      	bls.n	8007af0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007afc:	4b05      	ldr	r3, [pc, #20]	@ (8007b14 <prvIdleTask+0x2c>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b0c:	e7f0      	b.n	8007af0 <prvIdleTask+0x8>
 8007b0e:	bf00      	nop
 8007b10:	24004440 	.word	0x24004440
 8007b14:	e000ed04 	.word	0xe000ed04

08007b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b1e:	2300      	movs	r3, #0
 8007b20:	607b      	str	r3, [r7, #4]
 8007b22:	e00c      	b.n	8007b3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4a12      	ldr	r2, [pc, #72]	@ (8007b78 <prvInitialiseTaskLists+0x60>)
 8007b30:	4413      	add	r3, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fa82 	bl	800603c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	607b      	str	r3, [r7, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b37      	cmp	r3, #55	@ 0x37
 8007b42:	d9ef      	bls.n	8007b24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b44:	480d      	ldr	r0, [pc, #52]	@ (8007b7c <prvInitialiseTaskLists+0x64>)
 8007b46:	f7fe fa79 	bl	800603c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b4a:	480d      	ldr	r0, [pc, #52]	@ (8007b80 <prvInitialiseTaskLists+0x68>)
 8007b4c:	f7fe fa76 	bl	800603c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b50:	480c      	ldr	r0, [pc, #48]	@ (8007b84 <prvInitialiseTaskLists+0x6c>)
 8007b52:	f7fe fa73 	bl	800603c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b56:	480c      	ldr	r0, [pc, #48]	@ (8007b88 <prvInitialiseTaskLists+0x70>)
 8007b58:	f7fe fa70 	bl	800603c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b5c:	480b      	ldr	r0, [pc, #44]	@ (8007b8c <prvInitialiseTaskLists+0x74>)
 8007b5e:	f7fe fa6d 	bl	800603c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b62:	4b0b      	ldr	r3, [pc, #44]	@ (8007b90 <prvInitialiseTaskLists+0x78>)
 8007b64:	4a05      	ldr	r2, [pc, #20]	@ (8007b7c <prvInitialiseTaskLists+0x64>)
 8007b66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b68:	4b0a      	ldr	r3, [pc, #40]	@ (8007b94 <prvInitialiseTaskLists+0x7c>)
 8007b6a:	4a05      	ldr	r2, [pc, #20]	@ (8007b80 <prvInitialiseTaskLists+0x68>)
 8007b6c:	601a      	str	r2, [r3, #0]
}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	24004440 	.word	0x24004440
 8007b7c:	240048a0 	.word	0x240048a0
 8007b80:	240048b4 	.word	0x240048b4
 8007b84:	240048d0 	.word	0x240048d0
 8007b88:	240048e4 	.word	0x240048e4
 8007b8c:	240048fc 	.word	0x240048fc
 8007b90:	240048c8 	.word	0x240048c8
 8007b94:	240048cc 	.word	0x240048cc

08007b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b9e:	e019      	b.n	8007bd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ba0:	f7fe fc32 	bl	8006408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba4:	4b10      	ldr	r3, [pc, #64]	@ (8007be8 <prvCheckTasksWaitingTermination+0x50>)
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fe facd 	bl	8006150 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bec <prvCheckTasksWaitingTermination+0x54>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8007bec <prvCheckTasksWaitingTermination+0x54>)
 8007bbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf0 <prvCheckTasksWaitingTermination+0x58>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf0 <prvCheckTasksWaitingTermination+0x58>)
 8007bc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bca:	f7fe fc4f 	bl	800646c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f810 	bl	8007bf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bd4:	4b06      	ldr	r3, [pc, #24]	@ (8007bf0 <prvCheckTasksWaitingTermination+0x58>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e1      	bne.n	8007ba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	240048e4 	.word	0x240048e4
 8007bec:	24004910 	.word	0x24004910
 8007bf0:	240048f8 	.word	0x240048f8

08007bf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d108      	bne.n	8007c18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe f8f6 	bl	8005dfc <vPortFree>
				vPortFree( pxTCB );
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7fe f8f3 	bl	8005dfc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c16:	e019      	b.n	8007c4c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d103      	bne.n	8007c2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fe f8ea 	bl	8005dfc <vPortFree>
	}
 8007c28:	e010      	b.n	8007c4c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d00b      	beq.n	8007c4c <prvDeleteTCB+0x58>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	60fb      	str	r3, [r7, #12]
}
 8007c46:	bf00      	nop
 8007c48:	bf00      	nop
 8007c4a:	e7fd      	b.n	8007c48 <prvDeleteTCB+0x54>
	}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c8c <prvResetNextTaskUnblockTime+0x38>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d104      	bne.n	8007c6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c64:	4b0a      	ldr	r3, [pc, #40]	@ (8007c90 <prvResetNextTaskUnblockTime+0x3c>)
 8007c66:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c6c:	e008      	b.n	8007c80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c6e:	4b07      	ldr	r3, [pc, #28]	@ (8007c8c <prvResetNextTaskUnblockTime+0x38>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	4a04      	ldr	r2, [pc, #16]	@ (8007c90 <prvResetNextTaskUnblockTime+0x3c>)
 8007c7e:	6013      	str	r3, [r2, #0]
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	240048c8 	.word	0x240048c8
 8007c90:	24004930 	.word	0x24004930

08007c94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc8 <xTaskGetSchedulerState+0x34>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d102      	bne.n	8007ca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	607b      	str	r3, [r7, #4]
 8007ca6:	e008      	b.n	8007cba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca8:	4b08      	ldr	r3, [pc, #32]	@ (8007ccc <xTaskGetSchedulerState+0x38>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	607b      	str	r3, [r7, #4]
 8007cb4:	e001      	b.n	8007cba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cba:	687b      	ldr	r3, [r7, #4]
	}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	2400491c 	.word	0x2400491c
 8007ccc:	24004938 	.word	0x24004938

08007cd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d058      	beq.n	8007d98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8007da4 <xTaskPriorityDisinherit+0xd4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d00b      	beq.n	8007d08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	60fb      	str	r3, [r7, #12]
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	e7fd      	b.n	8007d04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	60bb      	str	r3, [r7, #8]
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	e7fd      	b.n	8007d24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d2c:	1e5a      	subs	r2, r3, #1
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d02c      	beq.n	8007d98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d128      	bne.n	8007d98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fa00 	bl	8006150 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d68:	4b0f      	ldr	r3, [pc, #60]	@ (8007da8 <xTaskPriorityDisinherit+0xd8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d903      	bls.n	8007d78 <xTaskPriorityDisinherit+0xa8>
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	4a0c      	ldr	r2, [pc, #48]	@ (8007da8 <xTaskPriorityDisinherit+0xd8>)
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4a09      	ldr	r2, [pc, #36]	@ (8007dac <xTaskPriorityDisinherit+0xdc>)
 8007d86:	441a      	add	r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f7fe f981 	bl	8006096 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d98:	697b      	ldr	r3, [r7, #20]
	}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	2400443c 	.word	0x2400443c
 8007da8:	24004918 	.word	0x24004918
 8007dac:	24004440 	.word	0x24004440

08007db0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dba:	4b21      	ldr	r3, [pc, #132]	@ (8007e40 <prvAddCurrentTaskToDelayedList+0x90>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dc0:	4b20      	ldr	r3, [pc, #128]	@ (8007e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe f9c2 	bl	8006150 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd2:	d10a      	bne.n	8007dea <prvAddCurrentTaskToDelayedList+0x3a>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d007      	beq.n	8007dea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dda:	4b1a      	ldr	r3, [pc, #104]	@ (8007e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4619      	mov	r1, r3
 8007de2:	4819      	ldr	r0, [pc, #100]	@ (8007e48 <prvAddCurrentTaskToDelayedList+0x98>)
 8007de4:	f7fe f957 	bl	8006096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007de8:	e026      	b.n	8007e38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4413      	add	r3, r2
 8007df0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007df2:	4b14      	ldr	r3, [pc, #80]	@ (8007e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d209      	bcs.n	8007e16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e02:	4b12      	ldr	r3, [pc, #72]	@ (8007e4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4b0f      	ldr	r3, [pc, #60]	@ (8007e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7fe f965 	bl	80060de <vListInsert>
}
 8007e14:	e010      	b.n	8007e38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e16:	4b0e      	ldr	r3, [pc, #56]	@ (8007e50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe f95b 	bl	80060de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e28:	4b0a      	ldr	r3, [pc, #40]	@ (8007e54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d202      	bcs.n	8007e38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e32:	4a08      	ldr	r2, [pc, #32]	@ (8007e54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	6013      	str	r3, [r2, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	24004914 	.word	0x24004914
 8007e44:	2400443c 	.word	0x2400443c
 8007e48:	240048fc 	.word	0x240048fc
 8007e4c:	240048cc 	.word	0x240048cc
 8007e50:	240048c8 	.word	0x240048c8
 8007e54:	24004930 	.word	0x24004930

08007e58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	@ 0x28
 8007e5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e62:	f000 fb13 	bl	800848c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e66:	4b1d      	ldr	r3, [pc, #116]	@ (8007edc <xTimerCreateTimerTask+0x84>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d021      	beq.n	8007eb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e76:	1d3a      	adds	r2, r7, #4
 8007e78:	f107 0108 	add.w	r1, r7, #8
 8007e7c:	f107 030c 	add.w	r3, r7, #12
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fd fed3 	bl	8005c2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	9202      	str	r2, [sp, #8]
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	2302      	movs	r3, #2
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	2300      	movs	r3, #0
 8007e96:	460a      	mov	r2, r1
 8007e98:	4911      	ldr	r1, [pc, #68]	@ (8007ee0 <xTimerCreateTimerTask+0x88>)
 8007e9a:	4812      	ldr	r0, [pc, #72]	@ (8007ee4 <xTimerCreateTimerTask+0x8c>)
 8007e9c:	f7ff f8d0 	bl	8007040 <xTaskCreateStatic>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	4a11      	ldr	r2, [pc, #68]	@ (8007ee8 <xTimerCreateTimerTask+0x90>)
 8007ea4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ea6:	4b10      	ldr	r3, [pc, #64]	@ (8007ee8 <xTimerCreateTimerTask+0x90>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10b      	bne.n	8007ed0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	613b      	str	r3, [r7, #16]
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ed0:	697b      	ldr	r3, [r7, #20]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	2400496c 	.word	0x2400496c
 8007ee0:	080085ac 	.word	0x080085ac
 8007ee4:	08008025 	.word	0x08008025
 8007ee8:	24004970 	.word	0x24004970

08007eec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	@ 0x28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10b      	bne.n	8007f1c <xTimerGenericCommand+0x30>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	623b      	str	r3, [r7, #32]
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	e7fd      	b.n	8007f18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f1c:	4b19      	ldr	r3, [pc, #100]	@ (8007f84 <xTimerGenericCommand+0x98>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d02a      	beq.n	8007f7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	dc18      	bgt.n	8007f68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f36:	f7ff fead 	bl	8007c94 <xTaskGetSchedulerState>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d109      	bne.n	8007f54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f40:	4b10      	ldr	r3, [pc, #64]	@ (8007f84 <xTimerGenericCommand+0x98>)
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	f107 0110 	add.w	r1, r7, #16
 8007f48:	2300      	movs	r3, #0
 8007f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f4c:	f7fe fc88 	bl	8006860 <xQueueGenericSend>
 8007f50:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f52:	e012      	b.n	8007f7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f54:	4b0b      	ldr	r3, [pc, #44]	@ (8007f84 <xTimerGenericCommand+0x98>)
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	f107 0110 	add.w	r1, r7, #16
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f7fe fc7e 	bl	8006860 <xQueueGenericSend>
 8007f64:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f66:	e008      	b.n	8007f7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f68:	4b06      	ldr	r3, [pc, #24]	@ (8007f84 <xTimerGenericCommand+0x98>)
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	f107 0110 	add.w	r1, r7, #16
 8007f70:	2300      	movs	r3, #0
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	f7fe fd76 	bl	8006a64 <xQueueGenericSendFromISR>
 8007f78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3728      	adds	r7, #40	@ 0x28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	2400496c 	.word	0x2400496c

08007f88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f92:	4b23      	ldr	r3, [pc, #140]	@ (8008020 <prvProcessExpiredTimer+0x98>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe f8d5 	bl	8006150 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d023      	beq.n	8007ffc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	18d1      	adds	r1, r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	6978      	ldr	r0, [r7, #20]
 8007fc2:	f000 f8d5 	bl	8008170 <prvInsertTimerInActiveList>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d020      	beq.n	800800e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	6978      	ldr	r0, [r7, #20]
 8007fd8:	f7ff ff88 	bl	8007eec <xTimerGenericCommand>
 8007fdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d114      	bne.n	800800e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	60fb      	str	r3, [r7, #12]
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	e7fd      	b.n	8007ff8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008002:	f023 0301 	bic.w	r3, r3, #1
 8008006:	b2da      	uxtb	r2, r3
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	6978      	ldr	r0, [r7, #20]
 8008014:	4798      	blx	r3
}
 8008016:	bf00      	nop
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	24004964 	.word	0x24004964

08008024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800802c:	f107 0308 	add.w	r3, r7, #8
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f859 	bl	80080e8 <prvGetNextExpireTime>
 8008036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4619      	mov	r1, r3
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 f805 	bl	800804c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008042:	f000 f8d7 	bl	80081f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008046:	bf00      	nop
 8008048:	e7f0      	b.n	800802c <prvTimerTask+0x8>
	...

0800804c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008056:	f7ff fa37 	bl	80074c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800805a:	f107 0308 	add.w	r3, r7, #8
 800805e:	4618      	mov	r0, r3
 8008060:	f000 f866 	bl	8008130 <prvSampleTimeNow>
 8008064:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d130      	bne.n	80080ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10a      	bne.n	8008088 <prvProcessTimerOrBlockTask+0x3c>
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	429a      	cmp	r2, r3
 8008078:	d806      	bhi.n	8008088 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800807a:	f7ff fa33 	bl	80074e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800807e:	68f9      	ldr	r1, [r7, #12]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff ff81 	bl	8007f88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008086:	e024      	b.n	80080d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d008      	beq.n	80080a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800808e:	4b13      	ldr	r3, [pc, #76]	@ (80080dc <prvProcessTimerOrBlockTask+0x90>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d101      	bne.n	800809c <prvProcessTimerOrBlockTask+0x50>
 8008098:	2301      	movs	r3, #1
 800809a:	e000      	b.n	800809e <prvProcessTimerOrBlockTask+0x52>
 800809c:	2300      	movs	r3, #0
 800809e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080a0:	4b0f      	ldr	r3, [pc, #60]	@ (80080e0 <prvProcessTimerOrBlockTask+0x94>)
 80080a2:	6818      	ldr	r0, [r3, #0]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	f7fe ff93 	bl	8006fd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080b2:	f7ff fa17 	bl	80074e4 <xTaskResumeAll>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080bc:	4b09      	ldr	r3, [pc, #36]	@ (80080e4 <prvProcessTimerOrBlockTask+0x98>)
 80080be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	f3bf 8f6f 	isb	sy
}
 80080cc:	e001      	b.n	80080d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080ce:	f7ff fa09 	bl	80074e4 <xTaskResumeAll>
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	24004968 	.word	0x24004968
 80080e0:	2400496c 	.word	0x2400496c
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080f0:	4b0e      	ldr	r3, [pc, #56]	@ (800812c <prvGetNextExpireTime+0x44>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <prvGetNextExpireTime+0x16>
 80080fa:	2201      	movs	r2, #1
 80080fc:	e000      	b.n	8008100 <prvGetNextExpireTime+0x18>
 80080fe:	2200      	movs	r2, #0
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d105      	bne.n	8008118 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800810c:	4b07      	ldr	r3, [pc, #28]	@ (800812c <prvGetNextExpireTime+0x44>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	e001      	b.n	800811c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800811c:	68fb      	ldr	r3, [r7, #12]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	24004964 	.word	0x24004964

08008130 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008138:	f7ff fa72 	bl	8007620 <xTaskGetTickCount>
 800813c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800813e:	4b0b      	ldr	r3, [pc, #44]	@ (800816c <prvSampleTimeNow+0x3c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	429a      	cmp	r2, r3
 8008146:	d205      	bcs.n	8008154 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008148:	f000 f93a 	bl	80083c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e002      	b.n	800815a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800815a:	4a04      	ldr	r2, [pc, #16]	@ (800816c <prvSampleTimeNow+0x3c>)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008160:	68fb      	ldr	r3, [r7, #12]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	24004974 	.word	0x24004974

08008170 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	429a      	cmp	r2, r3
 8008194:	d812      	bhi.n	80081bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	1ad2      	subs	r2, r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d302      	bcc.n	80081aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081a4:	2301      	movs	r3, #1
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e01b      	b.n	80081e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081aa:	4b10      	ldr	r3, [pc, #64]	@ (80081ec <prvInsertTimerInActiveList+0x7c>)
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3304      	adds	r3, #4
 80081b2:	4619      	mov	r1, r3
 80081b4:	4610      	mov	r0, r2
 80081b6:	f7fd ff92 	bl	80060de <vListInsert>
 80081ba:	e012      	b.n	80081e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d206      	bcs.n	80081d2 <prvInsertTimerInActiveList+0x62>
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d302      	bcc.n	80081d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081cc:	2301      	movs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	e007      	b.n	80081e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081d2:	4b07      	ldr	r3, [pc, #28]	@ (80081f0 <prvInsertTimerInActiveList+0x80>)
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3304      	adds	r3, #4
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f7fd ff7e 	bl	80060de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081e2:	697b      	ldr	r3, [r7, #20]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	24004968 	.word	0x24004968
 80081f0:	24004964 	.word	0x24004964

080081f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b08e      	sub	sp, #56	@ 0x38
 80081f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081fa:	e0ce      	b.n	800839a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	da19      	bge.n	8008236 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008202:	1d3b      	adds	r3, r7, #4
 8008204:	3304      	adds	r3, #4
 8008206:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10b      	bne.n	8008226 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	61fb      	str	r3, [r7, #28]
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	e7fd      	b.n	8008222 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800822c:	6850      	ldr	r0, [r2, #4]
 800822e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008230:	6892      	ldr	r2, [r2, #8]
 8008232:	4611      	mov	r1, r2
 8008234:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f2c0 80ae 	blt.w	800839a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d004      	beq.n	8008254 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800824a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824c:	3304      	adds	r3, #4
 800824e:	4618      	mov	r0, r3
 8008250:	f7fd ff7e 	bl	8006150 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008254:	463b      	mov	r3, r7
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff ff6a 	bl	8008130 <prvSampleTimeNow>
 800825c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b09      	cmp	r3, #9
 8008262:	f200 8097 	bhi.w	8008394 <prvProcessReceivedCommands+0x1a0>
 8008266:	a201      	add	r2, pc, #4	@ (adr r2, 800826c <prvProcessReceivedCommands+0x78>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008295 	.word	0x08008295
 8008270:	08008295 	.word	0x08008295
 8008274:	08008295 	.word	0x08008295
 8008278:	0800830b 	.word	0x0800830b
 800827c:	0800831f 	.word	0x0800831f
 8008280:	0800836b 	.word	0x0800836b
 8008284:	08008295 	.word	0x08008295
 8008288:	08008295 	.word	0x08008295
 800828c:	0800830b 	.word	0x0800830b
 8008290:	0800831f 	.word	0x0800831f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008296:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	18d1      	adds	r1, r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082b4:	f7ff ff5c 	bl	8008170 <prvInsertTimerInActiveList>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d06c      	beq.n	8008398 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d061      	beq.n	8008398 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	441a      	add	r2, r3
 80082dc:	2300      	movs	r3, #0
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	2300      	movs	r3, #0
 80082e2:	2100      	movs	r1, #0
 80082e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082e6:	f7ff fe01 	bl	8007eec <xTimerGenericCommand>
 80082ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d152      	bne.n	8008398 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	61bb      	str	r3, [r7, #24]
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop
 8008308:	e7fd      	b.n	8008306 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800830a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008310:	f023 0301 	bic.w	r3, r3, #1
 8008314:	b2da      	uxtb	r2, r3
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800831c:	e03d      	b.n	800839a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008324:	f043 0301 	orr.w	r3, r3, #1
 8008328:	b2da      	uxtb	r2, r3
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008334:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10b      	bne.n	8008356 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	617b      	str	r3, [r7, #20]
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	e7fd      	b.n	8008352 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	18d1      	adds	r1, r2, r3
 800835e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008364:	f7ff ff04 	bl	8008170 <prvInsertTimerInActiveList>
					break;
 8008368:	e017      	b.n	800839a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d103      	bne.n	8008380 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800837a:	f7fd fd3f 	bl	8005dfc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800837e:	e00c      	b.n	800839a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008382:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008386:	f023 0301 	bic.w	r3, r3, #1
 800838a:	b2da      	uxtb	r2, r3
 800838c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008392:	e002      	b.n	800839a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008394:	bf00      	nop
 8008396:	e000      	b.n	800839a <prvProcessReceivedCommands+0x1a6>
					break;
 8008398:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800839a:	4b08      	ldr	r3, [pc, #32]	@ (80083bc <prvProcessReceivedCommands+0x1c8>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	1d39      	adds	r1, r7, #4
 80083a0:	2200      	movs	r2, #0
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe fbfc 	bl	8006ba0 <xQueueReceive>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f47f af26 	bne.w	80081fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	3730      	adds	r7, #48	@ 0x30
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	2400496c 	.word	0x2400496c

080083c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083c6:	e049      	b.n	800845c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083c8:	4b2e      	ldr	r3, [pc, #184]	@ (8008484 <prvSwitchTimerLists+0xc4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d2:	4b2c      	ldr	r3, [pc, #176]	@ (8008484 <prvSwitchTimerLists+0xc4>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3304      	adds	r3, #4
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fd feb5 	bl	8006150 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d02f      	beq.n	800845c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	4413      	add	r3, r2
 8008404:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	429a      	cmp	r2, r3
 800840c:	d90e      	bls.n	800842c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800841a:	4b1a      	ldr	r3, [pc, #104]	@ (8008484 <prvSwitchTimerLists+0xc4>)
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3304      	adds	r3, #4
 8008422:	4619      	mov	r1, r3
 8008424:	4610      	mov	r0, r2
 8008426:	f7fd fe5a 	bl	80060de <vListInsert>
 800842a:	e017      	b.n	800845c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800842c:	2300      	movs	r3, #0
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	2300      	movs	r3, #0
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	2100      	movs	r1, #0
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7ff fd58 	bl	8007eec <xTimerGenericCommand>
 800843c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10b      	bne.n	800845c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	603b      	str	r3, [r7, #0]
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	e7fd      	b.n	8008458 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800845c:	4b09      	ldr	r3, [pc, #36]	@ (8008484 <prvSwitchTimerLists+0xc4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1b0      	bne.n	80083c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008466:	4b07      	ldr	r3, [pc, #28]	@ (8008484 <prvSwitchTimerLists+0xc4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800846c:	4b06      	ldr	r3, [pc, #24]	@ (8008488 <prvSwitchTimerLists+0xc8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a04      	ldr	r2, [pc, #16]	@ (8008484 <prvSwitchTimerLists+0xc4>)
 8008472:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008474:	4a04      	ldr	r2, [pc, #16]	@ (8008488 <prvSwitchTimerLists+0xc8>)
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	6013      	str	r3, [r2, #0]
}
 800847a:	bf00      	nop
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	24004964 	.word	0x24004964
 8008488:	24004968 	.word	0x24004968

0800848c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008492:	f7fd ffb9 	bl	8006408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008496:	4b15      	ldr	r3, [pc, #84]	@ (80084ec <prvCheckForValidListAndQueue+0x60>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d120      	bne.n	80084e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800849e:	4814      	ldr	r0, [pc, #80]	@ (80084f0 <prvCheckForValidListAndQueue+0x64>)
 80084a0:	f7fd fdcc 	bl	800603c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084a4:	4813      	ldr	r0, [pc, #76]	@ (80084f4 <prvCheckForValidListAndQueue+0x68>)
 80084a6:	f7fd fdc9 	bl	800603c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084aa:	4b13      	ldr	r3, [pc, #76]	@ (80084f8 <prvCheckForValidListAndQueue+0x6c>)
 80084ac:	4a10      	ldr	r2, [pc, #64]	@ (80084f0 <prvCheckForValidListAndQueue+0x64>)
 80084ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084b0:	4b12      	ldr	r3, [pc, #72]	@ (80084fc <prvCheckForValidListAndQueue+0x70>)
 80084b2:	4a10      	ldr	r2, [pc, #64]	@ (80084f4 <prvCheckForValidListAndQueue+0x68>)
 80084b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084b6:	2300      	movs	r3, #0
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	4b11      	ldr	r3, [pc, #68]	@ (8008500 <prvCheckForValidListAndQueue+0x74>)
 80084bc:	4a11      	ldr	r2, [pc, #68]	@ (8008504 <prvCheckForValidListAndQueue+0x78>)
 80084be:	2110      	movs	r1, #16
 80084c0:	200a      	movs	r0, #10
 80084c2:	f7fe f92d 	bl	8006720 <xQueueGenericCreateStatic>
 80084c6:	4603      	mov	r3, r0
 80084c8:	4a08      	ldr	r2, [pc, #32]	@ (80084ec <prvCheckForValidListAndQueue+0x60>)
 80084ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084cc:	4b07      	ldr	r3, [pc, #28]	@ (80084ec <prvCheckForValidListAndQueue+0x60>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d005      	beq.n	80084e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084d4:	4b05      	ldr	r3, [pc, #20]	@ (80084ec <prvCheckForValidListAndQueue+0x60>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	490b      	ldr	r1, [pc, #44]	@ (8008508 <prvCheckForValidListAndQueue+0x7c>)
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fe fd52 	bl	8006f84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084e0:	f7fd ffc4 	bl	800646c <vPortExitCritical>
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	2400496c 	.word	0x2400496c
 80084f0:	2400493c 	.word	0x2400493c
 80084f4:	24004950 	.word	0x24004950
 80084f8:	24004964 	.word	0x24004964
 80084fc:	24004968 	.word	0x24004968
 8008500:	24004a18 	.word	0x24004a18
 8008504:	24004978 	.word	0x24004978
 8008508:	080085b4 	.word	0x080085b4

0800850c <memset>:
 800850c:	4402      	add	r2, r0
 800850e:	4603      	mov	r3, r0
 8008510:	4293      	cmp	r3, r2
 8008512:	d100      	bne.n	8008516 <memset+0xa>
 8008514:	4770      	bx	lr
 8008516:	f803 1b01 	strb.w	r1, [r3], #1
 800851a:	e7f9      	b.n	8008510 <memset+0x4>

0800851c <__libc_init_array>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4d0d      	ldr	r5, [pc, #52]	@ (8008554 <__libc_init_array+0x38>)
 8008520:	4c0d      	ldr	r4, [pc, #52]	@ (8008558 <__libc_init_array+0x3c>)
 8008522:	1b64      	subs	r4, r4, r5
 8008524:	10a4      	asrs	r4, r4, #2
 8008526:	2600      	movs	r6, #0
 8008528:	42a6      	cmp	r6, r4
 800852a:	d109      	bne.n	8008540 <__libc_init_array+0x24>
 800852c:	4d0b      	ldr	r5, [pc, #44]	@ (800855c <__libc_init_array+0x40>)
 800852e:	4c0c      	ldr	r4, [pc, #48]	@ (8008560 <__libc_init_array+0x44>)
 8008530:	f000 f826 	bl	8008580 <_init>
 8008534:	1b64      	subs	r4, r4, r5
 8008536:	10a4      	asrs	r4, r4, #2
 8008538:	2600      	movs	r6, #0
 800853a:	42a6      	cmp	r6, r4
 800853c:	d105      	bne.n	800854a <__libc_init_array+0x2e>
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	f855 3b04 	ldr.w	r3, [r5], #4
 8008544:	4798      	blx	r3
 8008546:	3601      	adds	r6, #1
 8008548:	e7ee      	b.n	8008528 <__libc_init_array+0xc>
 800854a:	f855 3b04 	ldr.w	r3, [r5], #4
 800854e:	4798      	blx	r3
 8008550:	3601      	adds	r6, #1
 8008552:	e7f2      	b.n	800853a <__libc_init_array+0x1e>
 8008554:	08008620 	.word	0x08008620
 8008558:	08008620 	.word	0x08008620
 800855c:	08008620 	.word	0x08008620
 8008560:	08008624 	.word	0x08008624

08008564 <memcpy>:
 8008564:	440a      	add	r2, r1
 8008566:	4291      	cmp	r1, r2
 8008568:	f100 33ff 	add.w	r3, r0, #4294967295
 800856c:	d100      	bne.n	8008570 <memcpy+0xc>
 800856e:	4770      	bx	lr
 8008570:	b510      	push	{r4, lr}
 8008572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800857a:	4291      	cmp	r1, r2
 800857c:	d1f9      	bne.n	8008572 <memcpy+0xe>
 800857e:	bd10      	pop	{r4, pc}

08008580 <_init>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	bf00      	nop
 8008584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008586:	bc08      	pop	{r3}
 8008588:	469e      	mov	lr, r3
 800858a:	4770      	bx	lr

0800858c <_fini>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	bf00      	nop
 8008590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008592:	bc08      	pop	{r3}
 8008594:	469e      	mov	lr, r3
 8008596:	4770      	bx	lr
