
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009598  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08009838  08009838  0000a838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f4  080099f4  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080099f4  080099f4  0000a9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099fc  080099fc  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099fc  080099fc  0000a9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a00  08009a00  0000aa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  08009a04  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  24000070  08009a74  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000910  08009a74  0000b910  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022665  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e5  00000000  00000000  0002d703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  00031be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014d5  00000000  00000000  000336e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000446ce  00000000  00000000  00034bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022856  00000000  00000000  00079283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b3581  00000000  00000000  0009bad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024f05a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078fc  00000000  00000000  0024f0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0025699c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009820 	.word	0x08009820

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08009820 	.word	0x08009820

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CriticalErrorHandler>:
    else if (v > upper) return upper;
    else return v;
}

 void CriticalErrorHandler(void)
 {
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
   __disable_irq();
   while (1);
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <CriticalErrorHandler+0x8>

080006b8 <__assert_func>:
 }

void __assert_func(
    const char *file, int line, const char *func, const char *failedexpr
) 
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]
    __BKPT(1);
 80006c6:	be01      	bkpt	0x0001
    // asm volatile ("bkpt 1");
    CriticalErrorHandler();
 80006c8:	f7ff fff0 	bl	80006ac <CriticalErrorHandler>
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <FlightContextUpdateIMUData>:
/*
* \brief IMU collects it accel and gyro data in millimeters and millidegrees. This is
* converted to meters and degrees
*/
void FlightContextUpdateIMUData(FlightContext *pContext, Vec3 accel, Vec3 gyro)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	4638      	mov	r0, r7
 80006de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pContext->imuUnFilteredAccel.x = ((float)accel.x) / 1000.0f;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	ee07 3a90 	vmov	s15, r3
 80006e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ec:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 80006f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	edc3 7a00 	vstr	s15, [r3]
    pContext->imuUnFilteredAccel.y = ((float)accel.y) / 1000.0f;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	ee07 3a90 	vmov	s15, r3
 8000700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000704:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	edc3 7a01 	vstr	s15, [r3, #4]
    pContext->imuUnFilteredAccel.z = ((float)accel.z) / 1000.0f;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800071c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	edc3 7a02 	vstr	s15, [r3, #8]

    pContext->imuUnFilteredGyro.x = ((float)gyro.x) / 1000.0f;
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	ee07 3a90 	vmov	s15, r3
 8000730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000734:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	edc3 7a03 	vstr	s15, [r3, #12]
    pContext->imuUnFilteredGyro.y = ((float)gyro.y) / 1000.0f;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800074c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	edc3 7a04 	vstr	s15, [r3, #16]
    pContext->imuUnFilteredGyro.z = ((float)gyro.z) / 1000.0f;
 800075a:	6a3b      	ldr	r3, [r7, #32]
 800075c:	ee07 3a90 	vmov	s15, r3
 8000760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000764:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000780 <FlightContextUpdateIMUData+0xac>
 8000768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	447a0000 	.word	0x447a0000

08000784 <__io_putchar>:

static STATUS_TYPE LoggerSyncUARTTaskHandler(void);
static STATUS_TYPE LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    if(HAL_GetCurrentCPUID() == CM7_CPUID)
 800078c:	f001 fd58 	bl	8002240 <HAL_GetCurrentCPUID>
 8000790:	4603      	mov	r3, r0
 8000792:	2b03      	cmp	r3, #3
 8000794:	d11e      	bne.n	80007d4 <__io_putchar+0x50>
    {
        RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <__io_putchar+0xa0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1d39      	adds	r1, r7, #4
 800079c:	2201      	movs	r2, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f9e0 	bl	8000b64 <RingBuffWrite>
        ASSERT(RingBuffIsValid(pCM7RingBuf) == 1);
 80007a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <__io_putchar+0xa0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f9b3 	bl	8000b14 <RingBuffIsValid>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d005      	beq.n	80007c0 <__io_putchar+0x3c>
 80007b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <__io_putchar+0xa4>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	@ (800082c <__io_putchar+0xa8>)
 80007b8:	211d      	movs	r1, #29
 80007ba:	481d      	ldr	r0, [pc, #116]	@ (8000830 <__io_putchar+0xac>)
 80007bc:	f7ff ff7c 	bl	80006b8 <__assert_func>
        if((char)ch == '\n')
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b0a      	cmp	r3, #10
 80007c6:	d127      	bne.n	8000818 <__io_putchar+0x94>
        {
            LoggerWriteToUART(pCM7RingBuf);
 80007c8:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <__io_putchar+0xa0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f871 	bl	80008b4 <LoggerWriteToUART>
 80007d2:	e021      	b.n	8000818 <__io_putchar+0x94>
        }
    }
    else 
    {
        RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <__io_putchar+0xb0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	2201      	movs	r2, #1
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f9c1 	bl	8000b64 <RingBuffWrite>
        ASSERT(RingBuffIsValid(pCM4RingBuf) == 1);
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <__io_putchar+0xb0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f994 	bl	8000b14 <RingBuffIsValid>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d005      	beq.n	80007fe <__io_putchar+0x7a>
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <__io_putchar+0xb4>)
 80007f4:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <__io_putchar+0xa8>)
 80007f6:	2126      	movs	r1, #38	@ 0x26
 80007f8:	480d      	ldr	r0, [pc, #52]	@ (8000830 <__io_putchar+0xac>)
 80007fa:	f7ff ff5d 	bl	80006b8 <__assert_func>
        if((char)ch == '\n')
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d108      	bne.n	8000818 <__io_putchar+0x94>
        {
            /*
            * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
            */
            uint32_t taskID = SYNC_TASKID_UART_OUT;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
            SyncMailBoxWriteNotify(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2204      	movs	r2, #4
 8000810:	4619      	mov	r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	f000 fc49 	bl	80010aa <SyncMailBoxWriteNotify>
        }
    }
    return ch;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	24000090 	.word	0x24000090
 8000828:	08009838 	.word	0x08009838
 800082c:	08009978 	.word	0x08009978
 8000830:	0800985c 	.word	0x0800985c
 8000834:	2400008c 	.word	0x2400008c
 8000838:	0800988c 	.word	0x0800988c

0800083c <LoggerInit>:

STATUS_TYPE LoggerInit(UART_HandleTypeDef *pUART_)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    pUART = NULL;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <LoggerInit+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
    if(HAL_GetCurrentCPUID() == CM7_CPUID && pUART_ != NULL)
 800084a:	f001 fcf9 	bl	8002240 <HAL_GetCurrentCPUID>
 800084e:	4603      	mov	r3, r0
 8000850:	2b03      	cmp	r3, #3
 8000852:	d105      	bne.n	8000860 <LoggerInit+0x24>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <LoggerInit+0x24>
    {
        pUART = pUART_;
 800085a:	4a10      	ldr	r2, [pc, #64]	@ (800089c <LoggerInit+0x60>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6013      	str	r3, [r2, #0]
    }
    /*
    * Local variables are not shared among the cores. 
    * So each ring buffer pointer needs to be inited for each core
    */
    pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8000860:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000864:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <LoggerInit+0x64>)
 8000866:	f000 f925 	bl	8000ab4 <RingBuffCreate>
 800086a:	4603      	mov	r3, r0
 800086c:	4a0d      	ldr	r2, [pc, #52]	@ (80008a4 <LoggerInit+0x68>)
 800086e:	6013      	str	r3, [r2, #0]
    pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8000870:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <LoggerInit+0x6c>)
 8000876:	f000 f91d 	bl	8000ab4 <RingBuffCreate>
 800087a:	4603      	mov	r3, r0
 800087c:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <LoggerInit+0x70>)
 800087e:	6013      	str	r3, [r2, #0]

    if(SyncRegisterHandler(LoggerSyncUARTTaskHandler, SYNC_TASKID_UART_OUT) != 1)
 8000880:	2100      	movs	r1, #0
 8000882:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <LoggerInit+0x74>)
 8000884:	f000 fc66 	bl	8001154 <SyncRegisterHandler>
 8000888:	4603      	mov	r3, r0
 800088a:	2b01      	cmp	r3, #1
 800088c:	d001      	beq.n	8000892 <LoggerInit+0x56>
    {
        return eSTATUS_FAILURE;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <LoggerInit+0x58>
    }

    return eSTATUS_SUCCESS;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	24000094 	.word	0x24000094
 80008a0:	38000008 	.word	0x38000008
 80008a4:	2400008c 	.word	0x2400008c
 80008a8:	38000128 	.word	0x38000128
 80008ac:	24000090 	.word	0x24000090
 80008b0:	08000905 	.word	0x08000905

080008b4 <LoggerWriteToUART>:

static STATUS_TYPE LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
    void *pBufToTransmit = NULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]

    send:
    len = RingBuffGetLinearBlockReadLength(pRingBuf);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 fa89 	bl	8000ddc <RingBuffGetLinearBlockReadLength>
 80008ca:	60f8      	str	r0, [r7, #12]
    if(len > 0)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d011      	beq.n	80008f6 <LoggerWriteToUART+0x42>
    {
        pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 fa58 	bl	8000d88 <RingBuffGetLinearBlockReadAddress>
 80008d8:	60b8      	str	r0, [r7, #8]
        HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <LoggerWriteToUART+0x4c>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	f006 fbac 	bl	8007044 <HAL_UART_Transmit>
        RingBuffSkip(pRingBuf, len);
 80008ec:	68f9      	ldr	r1, [r7, #12]
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 fab6 	bl	8000e60 <RingBuffSkip>
        /* Check for anything in the overflow buffer */
        goto send;
 80008f4:	e7e6      	b.n	80008c4 <LoggerWriteToUART+0x10>
    }
    return eSTATUS_SUCCESS;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	24000094 	.word	0x24000094

08000904 <LoggerSyncUARTTaskHandler>:

static STATUS_TYPE LoggerSyncUARTTaskHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8000908:	f001 fc9a 	bl	8002240 <HAL_GetCurrentCPUID>
 800090c:	4603      	mov	r3, r0
 800090e:	2b03      	cmp	r3, #3
 8000910:	d104      	bne.n	800091c <LoggerSyncUARTTaskHandler+0x18>
    {
        LoggerWriteToUART(pCM4RingBuf);
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <LoggerSyncUARTTaskHandler+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffcc 	bl	80008b4 <LoggerWriteToUART>
    }
    return eSTATUS_SUCCESS;
 800091c:	2301      	movs	r3, #1
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2400008c 	.word	0x2400008c

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800092c:	4b49      	ldr	r3, [pc, #292]	@ (8000a54 <SystemInit+0x12c>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000932:	4a48      	ldr	r2, [pc, #288]	@ (8000a54 <SystemInit+0x12c>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800093c:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <SystemInit+0x12c>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	4a44      	ldr	r2, [pc, #272]	@ (8000a54 <SystemInit+0x12c>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000948:	4b43      	ldr	r3, [pc, #268]	@ (8000a58 <SystemInit+0x130>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	2b06      	cmp	r3, #6
 8000952:	d807      	bhi.n	8000964 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000954:	4b40      	ldr	r3, [pc, #256]	@ (8000a58 <SystemInit+0x130>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f023 030f 	bic.w	r3, r3, #15
 800095c:	4a3e      	ldr	r2, [pc, #248]	@ (8000a58 <SystemInit+0x130>)
 800095e:	f043 0307 	orr.w	r3, r3, #7
 8000962:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000964:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <SystemInit+0x134>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a3c      	ldr	r2, [pc, #240]	@ (8000a5c <SystemInit+0x134>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000970:	4b3a      	ldr	r3, [pc, #232]	@ (8000a5c <SystemInit+0x134>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000976:	4b39      	ldr	r3, [pc, #228]	@ (8000a5c <SystemInit+0x134>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4938      	ldr	r1, [pc, #224]	@ (8000a5c <SystemInit+0x134>)
 800097c:	4b38      	ldr	r3, [pc, #224]	@ (8000a60 <SystemInit+0x138>)
 800097e:	4013      	ands	r3, r2
 8000980:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000982:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <SystemInit+0x130>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800098e:	4b32      	ldr	r3, [pc, #200]	@ (8000a58 <SystemInit+0x130>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f023 030f 	bic.w	r3, r3, #15
 8000996:	4a30      	ldr	r2, [pc, #192]	@ (8000a58 <SystemInit+0x130>)
 8000998:	f043 0307 	orr.w	r3, r3, #7
 800099c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <SystemInit+0x134>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009a4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <SystemInit+0x134>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <SystemInit+0x134>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <SystemInit+0x134>)
 80009b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a64 <SystemInit+0x13c>)
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009b6:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <SystemInit+0x134>)
 80009b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a68 <SystemInit+0x140>)
 80009ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009bc:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <SystemInit+0x134>)
 80009be:	4a2b      	ldr	r2, [pc, #172]	@ (8000a6c <SystemInit+0x144>)
 80009c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009c2:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <SystemInit+0x134>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009c8:	4b24      	ldr	r3, [pc, #144]	@ (8000a5c <SystemInit+0x134>)
 80009ca:	4a28      	ldr	r2, [pc, #160]	@ (8000a6c <SystemInit+0x144>)
 80009cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ce:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <SystemInit+0x134>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009d4:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <SystemInit+0x134>)
 80009d6:	4a25      	ldr	r2, [pc, #148]	@ (8000a6c <SystemInit+0x144>)
 80009d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009da:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <SystemInit+0x134>)
 80009dc:	2200      	movs	r2, #0
 80009de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <SystemInit+0x134>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <SystemInit+0x134>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <SystemInit+0x134>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <SystemInit+0x148>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a70 <SystemInit+0x148>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <SystemInit+0x14c>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <SystemInit+0x150>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a0a:	d202      	bcs.n	8000a12 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <SystemInit+0x154>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <SystemInit+0x134>)
 8000a14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d113      	bne.n	8000a48 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <SystemInit+0x134>)
 8000a22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a26:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <SystemInit+0x134>)
 8000a28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a2c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <SystemInit+0x158>)
 8000a32:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a36:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <SystemInit+0x134>)
 8000a3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a3e:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <SystemInit+0x134>)
 8000a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a44:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00
 8000a58:	52002000 	.word	0x52002000
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a64:	02020200 	.word	0x02020200
 8000a68:	01ff0000 	.word	0x01ff0000
 8000a6c:	01010280 	.word	0x01010280
 8000a70:	580000c0 	.word	0x580000c0
 8000a74:	5c001000 	.word	0x5c001000
 8000a78:	ffff0000 	.word	0xffff0000
 8000a7c:	51008108 	.word	0x51008108
 8000a80:	52004000 	.word	0x52004000

08000a84 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <ExitRun0Mode+0x2c>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <ExitRun0Mode+0x2c>)
 8000a8e:	f023 0302 	bic.w	r3, r3, #2
 8000a92:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000a94:	bf00      	nop
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <ExitRun0Mode+0x2c>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	58024800 	.word	0x58024800

08000ab4 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d005      	beq.n	8000ad0 <RingBuffCreate+0x1c>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <RingBuffCreate+0x1c>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b20      	cmp	r3, #32
 8000ace:	d801      	bhi.n	8000ad4 <RingBuffCreate+0x20>
        return NULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e017      	b.n	8000b04 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 8000ad8:	2220      	movs	r2, #32
 8000ada:	2100      	movs	r1, #0
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f008 f90f 	bl	8008d00 <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f1a3 0220 	sub.w	r2, r3, #32
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f103 0220 	add.w	r2, r3, #32
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <RingBuffCreate+0x58>)
 8000afa:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <RingBuffCreate+0x5c>)
 8000b00:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	deadbeef 	.word	0xdeadbeef
 8000b10:	21524110 	.word	0x21524110

08000b14 <RingBuffIsValid>:
/**
 * \brief           Check if ringbuff is initialized and ready to use
 * \param[in]       buff: Buffer handle
 * \return          `1` if ready, `0` otherwise
 */
STATUS_TYPE RingBuffIsValid(RINGBUFF_VOLATILE RingBuff* buff) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    return BUF_IS_VALID(buff);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d013      	beq.n	8000b4a <RingBuffIsValid+0x36>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <RingBuffIsValid+0x48>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d10e      	bne.n	8000b4a <RingBuffIsValid+0x36>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <RingBuffIsValid+0x4c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d109      	bne.n	8000b4a <RingBuffIsValid+0x36>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d005      	beq.n	8000b4a <RingBuffIsValid+0x36>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <RingBuffIsValid+0x36>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <RingBuffIsValid+0x38>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	deadbeef 	.word	0xdeadbeef
 8000b60:	21524110 	.word	0x21524110

08000b64 <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d017      	beq.n	8000baa <RingBuffWrite+0x46>
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c6c <RingBuffWrite+0x108>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d112      	bne.n	8000baa <RingBuffWrite+0x46>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a39      	ldr	r2, [pc, #228]	@ (8000c70 <RingBuffWrite+0x10c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10d      	bne.n	8000baa <RingBuffWrite+0x46>
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d009      	beq.n	8000baa <RingBuffWrite+0x46>
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <RingBuffWrite+0x46>
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <RingBuffWrite+0x46>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <RingBuffWrite+0x4a>
        return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e059      	b.n	8000c62 <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f000 f860 	bl	8000c74 <RingBuffGetFree>
 8000bb4:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	bf28      	it	cs
 8000bbe:	4613      	movcs	r3, r2
 8000bc0:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <RingBuffWrite+0x68>
        return 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e04a      	b.n	8000c62 <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d905      	bls.n	8000be8 <RingBuffWrite+0x84>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	e000      	b.n	8000bea <RingBuffWrite+0x86>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	69f9      	ldr	r1, [r7, #28]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 f8fb 	bl	8008df6 <memcpy>
    buff->w += tocopy;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	441a      	add	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6858      	ldr	r0, [r3, #4]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	4413      	add	r3, r2
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4619      	mov	r1, r3
 8000c28:	f008 f8e5 	bl	8008df6 <memcpy>
        buff->w = btw;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	691a      	ldr	r2, [r3, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d302      	bcc.n	8000c44 <RingBuffWrite+0xe0>
        buff->w = 0;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d007      	beq.n	8000c5c <RingBuffWrite+0xf8>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	6979      	ldr	r1, [r7, #20]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	440a      	add	r2, r1
 8000c56:	2101      	movs	r1, #1
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	4798      	blx	r3
    return tocopy + btw;
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	deadbeef 	.word	0xdeadbeef
 8000c70:	21524110 	.word	0x21524110

08000c74 <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d011      	beq.n	8000ca6 <RingBuffGetFree+0x32>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <RingBuffGetFree+0x84>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d10c      	bne.n	8000ca6 <RingBuffGetFree+0x32>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <RingBuffGetFree+0x88>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d107      	bne.n	8000ca6 <RingBuffGetFree+0x32>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <RingBuffGetFree+0x32>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <RingBuffGetFree+0x36>
        return 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e01f      	b.n	8000cea <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d103      	bne.n	8000cc6 <RingBuffGetFree+0x52>
        size = buff->size;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e00f      	b.n	8000ce6 <RingBuffGetFree+0x72>
    } else if (r > w) {
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d904      	bls.n	8000cd8 <RingBuffGetFree+0x64>
        size = r - w;
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e006      	b.n	8000ce6 <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	68f9      	ldr	r1, [r7, #12]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3b01      	subs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	deadbeef 	.word	0xdeadbeef
 8000cfc:	21524110 	.word	0x21524110

08000d00 <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d011      	beq.n	8000d32 <RingBuffGetFull+0x32>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <RingBuffGetFull+0x80>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d10c      	bne.n	8000d32 <RingBuffGetFull+0x32>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <RingBuffGetFull+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d107      	bne.n	8000d32 <RingBuffGetFull+0x32>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <RingBuffGetFull+0x32>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <RingBuffGetFull+0x36>
        return 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e01d      	b.n	8000d72 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d102      	bne.n	8000d50 <RingBuffGetFull+0x50>
        size = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e00f      	b.n	8000d70 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d904      	bls.n	8000d62 <RingBuffGetFull+0x62>
        size = w - r;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e006      	b.n	8000d70 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	6939      	ldr	r1, [r7, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000d70:	697b      	ldr	r3, [r7, #20]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	371c      	adds	r7, #28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	deadbeef 	.word	0xdeadbeef
 8000d84:	21524110 	.word	0x21524110

08000d88 <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d011      	beq.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d10c      	bne.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <RingBuffGetLinearBlockReadAddress+0x50>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d107      	bne.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <RingBuffGetLinearBlockReadAddress+0x32>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e004      	b.n	8000dc8 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	4413      	add	r3, r2
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	deadbeef 	.word	0xdeadbeef
 8000dd8:	21524110 	.word	0x21524110

08000ddc <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d011      	beq.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a1a      	ldr	r2, [pc, #104]	@ (8000e58 <RingBuffGetLinearBlockReadLength+0x7c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d10c      	bne.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <RingBuffGetLinearBlockReadLength+0x80>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d107      	bne.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <RingBuffGetLinearBlockReadLength+0x32>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e01b      	b.n	8000e4a <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d904      	bls.n	8000e30 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e00b      	b.n	8000e48 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d905      	bls.n	8000e44 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e001      	b.n	8000e48 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000e48:	697b      	ldr	r3, [r7, #20]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	deadbeef 	.word	0xdeadbeef
 8000e5c:	21524110 	.word	0x21524110

08000e60 <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d014      	beq.n	8000e9a <RingBuffSkip+0x3a>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a20      	ldr	r2, [pc, #128]	@ (8000ef8 <RingBuffSkip+0x98>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10f      	bne.n	8000e9a <RingBuffSkip+0x3a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000efc <RingBuffSkip+0x9c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d10a      	bne.n	8000e9a <RingBuffSkip+0x3a>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <RingBuffSkip+0x3a>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <RingBuffSkip+0x3a>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <RingBuffSkip+0x3e>
        return 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e027      	b.n	8000eee <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff2e 	bl	8000d00 <RingBuffGetFull>
 8000ea4:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	bf28      	it	cs
 8000eae:	4613      	movcs	r3, r2
 8000eb0:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	441a      	add	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d306      	bcc.n	8000ed8 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68d2      	ldr	r2, [r2, #12]
 8000ed2:	1ad2      	subs	r2, r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <RingBuffSkip+0x8c>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	4798      	blx	r3
    return len;
 8000eec:	683b      	ldr	r3, [r7, #0]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	deadbeef 	.word	0xdeadbeef
 8000efc:	21524110 	.word	0x21524110

08000f00 <IMUReadReg>:
    0x2e, 0x00, 0xc1
};


STATUS_TYPE IMUReadReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b091      	sub	sp, #68	@ 0x44
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 8000f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f14:	2210      	movs	r2, #16
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f007 fef1 	bl	8008d00 <memset>
	// 0x80 bmi270 read bit
	pTx[0] = 0x80 | reg;
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t pRx[16];
	memset(pRx, 0, sizeof(pRx));
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2210      	movs	r2, #16
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f007 fee4 	bl	8008d00 <memset>
	// status = HAL_SPI_Transmit(pIMUSPIRef, pTemp, 1, 100);

	// set NSS high
	// HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

	if(len + 1 > 16)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	2b10      	cmp	r3, #16
 8000f3e:	d901      	bls.n	8000f44 <IMUReadReg+0x44>
	{
		return eSTATUS_FAILURE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e01f      	b.n	8000f84 <IMUReadReg+0x84>
	}

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(pIMU->pSPI, pTx, pRx, len + 1, 100);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6818      	ldr	r0, [r3, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	f107 0214 	add.w	r2, r7, #20
 8000f54:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000f58:	2464      	movs	r4, #100	@ 0x64
 8000f5a:	9400      	str	r4, [sp, #0]
 8000f5c:	f004 fbf6 	bl	800574c <HAL_SPI_TransmitReceive>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if(status != HAL_OK)
 8000f66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <IMUReadReg+0x72>
	{
		return eSTATUS_FAILURE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e008      	b.n	8000f84 <IMUReadReg+0x84>
	}
	// 1st byte sent by bmi270 is a dummy byte
	memcpy(pBuf, &pRx[1], len);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	3301      	adds	r3, #1
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f007 ff3a 	bl	8008df6 <memcpy>

	return eSTATUS_SUCCESS;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	373c      	adds	r7, #60	@ 0x3c
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd90      	pop	{r4, r7, pc}

08000f8c <IMU2CPUInterruptHandler>:
}

STATUS_TYPE IMU2CPUInterruptHandler(
  IMU *pIMU, Vec3 *pOutputAccel,Vec3 *pOutputGyro
)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  if(pIMU == NULL || pIMU->pSPI == NULL || pOutputAccel == NULL || pOutputGyro == NULL)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d009      	beq.n	8000fb2 <IMU2CPUInterruptHandler+0x26>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <IMU2CPUInterruptHandler+0x26>
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <IMU2CPUInterruptHandler+0x26>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d112      	bne.n	8000fd8 <IMU2CPUInterruptHandler+0x4c>
  {
    LOG_ERROR("Invalid arguments");
 8000fb2:	481f      	ldr	r0, [pc, #124]	@ (8001030 <IMU2CPUInterruptHandler+0xa4>)
 8000fb4:	f007 fd5c 	bl	8008a70 <iprintf>
 8000fb8:	481e      	ldr	r0, [pc, #120]	@ (8001034 <IMU2CPUInterruptHandler+0xa8>)
 8000fba:	f007 fd59 	bl	8008a70 <iprintf>
 8000fbe:	f240 214a 	movw	r1, #586	@ 0x24a
 8000fc2:	481d      	ldr	r0, [pc, #116]	@ (8001038 <IMU2CPUInterruptHandler+0xac>)
 8000fc4:	f007 fd54 	bl	8008a70 <iprintf>
 8000fc8:	481c      	ldr	r0, [pc, #112]	@ (800103c <IMU2CPUInterruptHandler+0xb0>)
 8000fca:	f007 fd51 	bl	8008a70 <iprintf>
 8000fce:	481c      	ldr	r0, [pc, #112]	@ (8001040 <IMU2CPUInterruptHandler+0xb4>)
 8000fd0:	f007 fdb6 	bl	8008b40 <puts>
    return eSTATUS_FAILURE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e026      	b.n	8001026 <IMU2CPUInterruptHandler+0x9a>
  }

  // read both status registers
  uint8_t pBuf[2] = {0, 0};
 8000fd8:	2300      	movs	r3, #0
 8000fda:	82bb      	strh	r3, [r7, #20]
  STATUS_TYPE status = IMUReadReg(pIMU, BMI2_INT_STATUS_1_ADDR, pBuf, 2);
 8000fdc:	f107 0214 	add.w	r2, r7, #20
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	211d      	movs	r1, #29
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f7ff ff8b 	bl	8000f00 <IMUReadReg>
 8000fea:	4603      	mov	r3, r0
 8000fec:	75fb      	strb	r3, [r7, #23]

  if(IS_STATUS_FAILURE(status))
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <IMU2CPUInterruptHandler+0x6c>
  {
    return eSTATUS_FAILURE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e016      	b.n	8001026 <IMU2CPUInterruptHandler+0x9a>
  }

  // uint8_t intStatus0 = pBuf[0];
  uint8_t intStatus1 = pBuf[1];
 8000ff8:	7d7b      	ldrb	r3, [r7, #21]
 8000ffa:	75bb      	strb	r3, [r7, #22]
  }

  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_ACC_RDY_BIT)) status |= IMUUpdateAccel(pIMU, *pOutputAccel, pOutputAccel);
  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_GYR_RDY_BIT)) status |= IMUUpdateGyro(pIMU, *pOutputGyro, pOutputGyro);

  if(IS_STATUS_FAILURE(status)) LOG_ERROR("Failed to update IMU position data");
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d110      	bne.n	8001024 <IMU2CPUInterruptHandler+0x98>
 8001002:	480b      	ldr	r0, [pc, #44]	@ (8001030 <IMU2CPUInterruptHandler+0xa4>)
 8001004:	f007 fd34 	bl	8008a70 <iprintf>
 8001008:	480a      	ldr	r0, [pc, #40]	@ (8001034 <IMU2CPUInterruptHandler+0xa8>)
 800100a:	f007 fd31 	bl	8008a70 <iprintf>
 800100e:	f240 2165 	movw	r1, #613	@ 0x265
 8001012:	4809      	ldr	r0, [pc, #36]	@ (8001038 <IMU2CPUInterruptHandler+0xac>)
 8001014:	f007 fd2c 	bl	8008a70 <iprintf>
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <IMU2CPUInterruptHandler+0xb8>)
 800101a:	f007 fd29 	bl	8008a70 <iprintf>
 800101e:	4808      	ldr	r0, [pc, #32]	@ (8001040 <IMU2CPUInterruptHandler+0xb4>)
 8001020:	f007 fd8e 	bl	8008b40 <puts>

  return status;
 8001024:	7dfb      	ldrb	r3, [r7, #23]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	080098b0 	.word	0x080098b0
 8001034:	080098bc 	.word	0x080098bc
 8001038:	080098f8 	.word	0x080098f8
 800103c:	08009900 	.word	0x08009900
 8001040:	08009914 	.word	0x08009914
 8001044:	08009918 	.word	0x08009918

08001048 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d103      	bne.n	8001062 <SyncMailBoxGet+0x1a>
 800105a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	e001      	b.n	8001066 <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8001062:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <SyncMailBoxGet+0x2c>)
 8001064:	60fb      	str	r3, [r7, #12]
    return pMB;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	38000004 	.word	0x38000004

08001078 <SyncMailBoxWrite>:

STATUS_TYPE SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return eSTATUS_FAILURE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d901      	bls.n	800108e <SyncMailBoxWrite+0x16>
 800108a:	2300      	movs	r3, #0
 800108c:	e009      	b.n	80010a2 <SyncMailBoxWrite+0x2a>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff ffda 	bl	8001048 <SyncMailBoxGet>
 8001094:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f007 feab 	bl	8008df6 <memcpy>
    return eSTATUS_SUCCESS;
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <SyncMailBoxWriteNotify>:

STATUS_TYPE SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
    STATUS_TYPE status = SyncMailBoxWrite(mbID, pBuffer, len);
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f7ff ffdc 	bl	8001078 <SyncMailBoxWrite>
 80010c0:	4603      	mov	r3, r0
 80010c2:	75fb      	strb	r3, [r7, #23]
    if(status != eSTATUS_SUCCESS) return eSTATUS_FAILURE;
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d001      	beq.n	80010ce <SyncMailBoxWriteNotify+0x24>
 80010ca:	2300      	movs	r3, #0
 80010cc:	e003      	b.n	80010d6 <SyncMailBoxWriteNotify+0x2c>
    asm volatile ("dsb");
 80010ce:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 80010d2:	bf40      	sev
    return eSTATUS_SUCCESS;
 80010d4:	2301      	movs	r3, #1
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <SyncMailBoxRead>:

STATUS_TYPE SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return eSTATUS_FAILURE;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d901      	bls.n	80010f4 <SyncMailBoxRead+0x16>
 80010f0:	2300      	movs	r3, #0
 80010f2:	e009      	b.n	8001108 <SyncMailBoxRead+0x2a>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f7ff ffa7 	bl	8001048 <SyncMailBoxGet>
 80010fa:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6979      	ldr	r1, [r7, #20]
 8001100:	68b8      	ldr	r0, [r7, #8]
 8001102:	f007 fe78 	bl	8008df6 <memcpy>
    return eSTATUS_SUCCESS;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <SyncGetTaskHandler>:
#define NUM_TASK_TYPES 2

task_handler_fn_t handlers[NUM_TASK_TYPES];

task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <SyncGetTaskHandler+0x12>
 800111e:	2300      	movs	r3, #0
 8001120:	e003      	b.n	800112a <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <SyncGetTaskHandler+0x28>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	24000098 	.word	0x24000098

0800113c <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
STATUS_TYPE SyncInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8001140:	2208      	movs	r2, #8
 8001142:	2100      	movs	r1, #0
 8001144:	4802      	ldr	r0, [pc, #8]	@ (8001150 <SyncInit+0x14>)
 8001146:	f007 fddb 	bl	8008d00 <memset>
    return eSTATUS_SUCCESS;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	bd80      	pop	{r7, pc}
 8001150:	24000098 	.word	0x24000098

08001154 <SyncRegisterHandler>:

STATUS_TYPE SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return eSTATUS_FAILURE;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <SyncRegisterHandler+0x14>
 8001164:	2300      	movs	r3, #0
 8001166:	e005      	b.n	8001174 <SyncRegisterHandler+0x20>
    handlers[taskID] = fn;
 8001168:	4905      	ldr	r1, [pc, #20]	@ (8001180 <SyncRegisterHandler+0x2c>)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return eSTATUS_SUCCESS;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	24000098 	.word	0x24000098

08001184 <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 800118e:	463b      	mov	r3, r7
 8001190:	2204      	movs	r2, #4
 8001192:	4619      	mov	r1, r3
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff ffa2 	bl	80010de <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffb7 	bl	8001110 <SyncGetTaskHandler>
 80011a2:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4798      	blx	r3
    }
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 80011c0:	463b      	mov	r3, r7
 80011c2:	2204      	movs	r2, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff ff89 	bl	80010de <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff9e 	bl	8001110 <SyncGetTaskHandler>
 80011d4:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4798      	blx	r3
    }
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_GPIO_EXTI_Callback>:
FilterMadgwickContext gFilterMadgwickContext;
PIDContext gPIDAngleContext;
TaskHandle_t gpTaskMotionControlUpdate;

void HAL_GPIO_EXTI_Callback(uint16_t gpioPin)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b08d      	sub	sp, #52	@ 0x34
 80011ec:	af04      	add	r7, sp, #16
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
    if(gpioPin == IMU_INT_Pin) 
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	2b80      	cmp	r3, #128	@ 0x80
 80011f6:	d122      	bne.n	800123e <HAL_GPIO_EXTI_Callback+0x56>
    {
        Vec3 accel, gyro;
        if(IS_STATUS_SUCCESS(IMU2CPUInterruptHandler(&gIMU, &accel, &gyro)))
 80011f8:	f107 0208 	add.w	r2, r7, #8
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4811      	ldr	r0, [pc, #68]	@ (8001248 <HAL_GPIO_EXTI_Callback+0x60>)
 8001204:	f7ff fec2 	bl	8000f8c <IMU2CPUInterruptHandler>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d117      	bne.n	800123e <HAL_GPIO_EXTI_Callback+0x56>
        {
            FlightContextUpdateIMUData(&gFlightContext, accel, gyro);
 800120e:	466c      	mov	r4, sp
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001222:	480a      	ldr	r0, [pc, #40]	@ (800124c <HAL_GPIO_EXTI_Callback+0x64>)
 8001224:	f7ff fa56 	bl	80006d4 <FlightContextUpdateIMUData>
            if(gpTaskMotionControlUpdate != NULL) xTaskNotifyGive(gpTaskMotionControlUpdate);
 8001228:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_GPIO_EXTI_Callback+0x68>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <HAL_GPIO_EXTI_Callback+0x56>
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <HAL_GPIO_EXTI_Callback+0x68>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	2202      	movs	r2, #2
 8001238:	2100      	movs	r1, #0
 800123a:	f007 fa9d 	bl	8008778 <xTaskGenericNotify>
        }
    }
}
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	bf00      	nop
 8001248:	24000254 	.word	0x24000254
 800124c:	2400028c 	.word	0x2400028c
 8001250:	240002e0 	.word	0x240002e0

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */

    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm volatile ("NOP"); }
 800125a:	e000      	b.n	800125e <main+0xa>
 800125c:	bf00      	nop
 800125e:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <main+0xc0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f8      	bne.n	800125c <main+0x8>

    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    if(HAL_Init() != HAL_OK)
 800126a:	f000 fe7d 	bl	8001f68 <HAL_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <main+0x24>
    {
      CriticalErrorHandler();
 8001274:	f7ff fa1a 	bl	80006ac <CriticalErrorHandler>
    /* USER CODE BEGIN Init */
    
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001278:	f000 f860 	bl	800133c <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */

    MX_GPIO_Init();
 800127c:	f000 fa64 	bl	8001748 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8001280:	f000 fa16 	bl	80016b0 <MX_USART1_UART_Init>
    MX_SPI2_Init();
 8001284:	f000 f8e0 	bl	8001448 <MX_SPI2_Init>
    MX_TIM8_Init();
 8001288:	f000 f934 	bl	80014f4 <MX_TIM8_Init>
    MX_TIM13_Init();
 800128c:	f000 f9c2 	bl	8001614 <MX_TIM13_Init>

    if(IS_STATUS_FAILURE(SyncInit()) || IS_STATUS_FAILURE(LoggerInit(&huart1)))
 8001290:	f7ff ff54 	bl	800113c <SyncInit>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <main+0x52>
 800129a:	481f      	ldr	r0, [pc, #124]	@ (8001318 <main+0xc4>)
 800129c:	f7ff face 	bl	800083c <LoggerInit>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <main+0x56>
    {
      CriticalErrorHandler();
 80012a6:	f7ff fa01 	bl	80006ac <CriticalErrorHandler>
    }

    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification */

    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <main+0xc0>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	4a18      	ldr	r2, [pc, #96]	@ (8001314 <main+0xc0>)
 80012b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ba:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <main+0xc0>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
    // /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f001 f995 	bl	80025f8 <HAL_HSEM_FastTake>
    // /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f001 f9ab 	bl	800262c <HAL_HSEM_Release>
    // /* wait until CPU2 wakes up from stop mode */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) { asm volatile ("NOP"); }
 80012d6:	e000      	b.n	80012da <main+0x86>
 80012d8:	bf00      	nop
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <main+0xc0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f8      	beq.n	80012d8 <main+0x84>
    //   IMU_GYRO_ODR_100
    // );
    while (1)
    {
        /* USER CODE END WHILE */
        HAL_Delay(1000);
 80012e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012ea:	f000 fe99 	bl	8002020 <HAL_Delay>
        LOG_INFO("Hello from CM7");
 80012ee:	480b      	ldr	r0, [pc, #44]	@ (800131c <main+0xc8>)
 80012f0:	f007 fbbe 	bl	8008a70 <iprintf>
 80012f4:	480a      	ldr	r0, [pc, #40]	@ (8001320 <main+0xcc>)
 80012f6:	f007 fbbb 	bl	8008a70 <iprintf>
 80012fa:	21f8      	movs	r1, #248	@ 0xf8
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <main+0xd0>)
 80012fe:	f007 fbb7 	bl	8008a70 <iprintf>
 8001302:	4809      	ldr	r0, [pc, #36]	@ (8001328 <main+0xd4>)
 8001304:	f007 fbb4 	bl	8008a70 <iprintf>
 8001308:	4808      	ldr	r0, [pc, #32]	@ (800132c <main+0xd8>)
 800130a:	f007 fc19 	bl	8008b40 <puts>
        HAL_Delay(1000);
 800130e:	bf00      	nop
 8001310:	e7e9      	b.n	80012e6 <main+0x92>
 8001312:	bf00      	nop
 8001314:	58024400 	.word	0x58024400
 8001318:	240001c0 	.word	0x240001c0
 800131c:	0800993c 	.word	0x0800993c
 8001320:	08009948 	.word	0x08009948
 8001324:	0800995c 	.word	0x0800995c
 8001328:	08009964 	.word	0x08009964
 800132c:	08009974 	.word	0x08009974

08001330 <Error_Handler>:
    }
    /* USER CODE END 3 */
}

void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  __disable_irq();
  while (1);
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <Error_Handler+0x8>

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b09c      	sub	sp, #112	@ 0x70
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001346:	224c      	movs	r2, #76	@ 0x4c
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f007 fcd8 	bl	8008d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2220      	movs	r2, #32
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f007 fcd2 	bl	8008d00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800135c:	2004      	movs	r0, #4
 800135e:	f001 f979 	bl	8002654 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <SystemClock_Config+0x104>)
 8001368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136a:	4a35      	ldr	r2, [pc, #212]	@ (8001440 <SystemClock_Config+0x104>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001372:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <SystemClock_Config+0x104>)
 8001374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4b31      	ldr	r3, [pc, #196]	@ (8001444 <SystemClock_Config+0x108>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a30      	ldr	r2, [pc, #192]	@ (8001444 <SystemClock_Config+0x108>)
 8001382:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <SystemClock_Config+0x108>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001394:	bf00      	nop
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <SystemClock_Config+0x108>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800139e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013a2:	d1f8      	bne.n	8001396 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80013a4:	230b      	movs	r3, #11
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b2:	2340      	movs	r3, #64	@ 0x40
 80013b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013b6:	2301      	movs	r3, #1
 80013b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ba:	2302      	movs	r3, #2
 80013bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013be:	2302      	movs	r3, #2
 80013c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80013c2:	2305      	movs	r3, #5
 80013c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80013c6:	2330      	movs	r3, #48	@ 0x30
 80013c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80013ce:	2305      	movs	r3, #5
 80013d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80013d6:	2308      	movs	r3, #8
 80013d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013da:	2300      	movs	r3, #0
 80013dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 f98e 	bl	8002708 <HAL_RCC_OscConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0xba>
  {
    CriticalErrorHandler();
 80013f2:	f7ff f95b 	bl	80006ac <CriticalErrorHandler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f6:	233f      	movs	r3, #63	@ 0x3f
 80013f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f001 fdce 	bl	8002fbc <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xee>
  {
    CriticalErrorHandler();
 8001426:	f7ff f941 	bl	80006ac <CriticalErrorHandler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800142a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800142e:	2100      	movs	r1, #0
 8001430:	2000      	movs	r0, #0
 8001432:	f001 ff79 	bl	8003328 <HAL_RCC_MCOConfig>
}
 8001436:	bf00      	nop
 8001438:	3770      	adds	r7, #112	@ 0x70
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	58000400 	.word	0x58000400
 8001444:	58024800 	.word	0x58024800

08001448 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800144c:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <MX_SPI2_Init+0xa4>)
 800144e:	4a28      	ldr	r2, [pc, #160]	@ (80014f0 <MX_SPI2_Init+0xa8>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <MX_SPI2_Init+0xa4>)
 8001454:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001458:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <MX_SPI2_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <MX_SPI2_Init+0xa4>)
 8001462:	2207      	movs	r2, #7
 8001464:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001466:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <MX_SPI2_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <MX_SPI2_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001472:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <MX_SPI2_Init+0xa4>)
 8001474:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001478:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <MX_SPI2_Init+0xa4>)
 800147c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001480:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001482:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <MX_SPI2_Init+0xa4>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001488:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <MX_SPI2_Init+0xa4>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <MX_SPI2_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001494:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <MX_SPI2_Init+0xa4>)
 8001496:	2200      	movs	r2, #0
 8001498:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_SPI2_Init+0xa4>)
 800149c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014a2:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <MX_SPI2_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <MX_SPI2_Init+0xa4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_SPI2_Init+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <MX_SPI2_Init+0xa4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <MX_SPI2_Init+0xa4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <MX_SPI2_Init+0xa4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <MX_SPI2_Init+0xa4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <MX_SPI2_Init+0xa4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <MX_SPI2_Init+0xa4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	@ (80014ec <MX_SPI2_Init+0xa4>)
 80014da:	f004 f813 	bl	8005504 <HAL_SPI_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_SPI2_Init+0xa0>
  {
    CriticalErrorHandler();
 80014e4:	f7ff f8e2 	bl	80006ac <CriticalErrorHandler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	240000a0 	.word	0x240000a0
 80014f0:	40003800 	.word	0x40003800

080014f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	@ 0x58
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	222c      	movs	r2, #44	@ 0x2c
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f007 fbed 	bl	8008d00 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001526:	4b39      	ldr	r3, [pc, #228]	@ (800160c <MX_TIM8_Init+0x118>)
 8001528:	4a39      	ldr	r2, [pc, #228]	@ (8001610 <MX_TIM8_Init+0x11c>)
 800152a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800152c:	4b37      	ldr	r3, [pc, #220]	@ (800160c <MX_TIM8_Init+0x118>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b36      	ldr	r3, [pc, #216]	@ (800160c <MX_TIM8_Init+0x118>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001538:	4b34      	ldr	r3, [pc, #208]	@ (800160c <MX_TIM8_Init+0x118>)
 800153a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800153e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b32      	ldr	r3, [pc, #200]	@ (800160c <MX_TIM8_Init+0x118>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001546:	4b31      	ldr	r3, [pc, #196]	@ (800160c <MX_TIM8_Init+0x118>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <MX_TIM8_Init+0x118>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001552:	482e      	ldr	r0, [pc, #184]	@ (800160c <MX_TIM8_Init+0x118>)
 8001554:	f004 fdec 	bl	8006130 <HAL_TIM_PWM_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM8_Init+0x6e>
  {
    CriticalErrorHandler();
 800155e:	f7ff f8a5 	bl	80006ac <CriticalErrorHandler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800156e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001572:	4619      	mov	r1, r3
 8001574:	4825      	ldr	r0, [pc, #148]	@ (800160c <MX_TIM8_Init+0x118>)
 8001576:	f005 fbeb 	bl	8006d50 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM8_Init+0x90>
  {
    CriticalErrorHandler();
 8001580:	f7ff f894 	bl	80006ac <CriticalErrorHandler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001584:	2360      	movs	r3, #96	@ 0x60
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001590:	2300      	movs	r3, #0
 8001592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	4818      	ldr	r0, [pc, #96]	@ (800160c <MX_TIM8_Init+0x118>)
 80015aa:	f004 ff1f 	bl	80063ec <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM8_Init+0xc4>
  {
    CriticalErrorHandler();
 80015b4:	f7ff f87a 	bl	80006ac <CriticalErrorHandler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4807      	ldr	r0, [pc, #28]	@ (800160c <MX_TIM8_Init+0x118>)
 80015ee:	f005 fc3d 	bl	8006e6c <HAL_TIMEx_ConfigBreakDeadTime>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM8_Init+0x108>
  {
    CriticalErrorHandler();
 80015f8:	f7ff f858 	bl	80006ac <CriticalErrorHandler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015fc:	4803      	ldr	r0, [pc, #12]	@ (800160c <MX_TIM8_Init+0x118>)
 80015fe:	f000 fa5b 	bl	8001ab8 <HAL_TIM_MspPostInit>

}
 8001602:	bf00      	nop
 8001604:	3758      	adds	r7, #88	@ 0x58
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	24000128 	.word	0x24000128
 8001610:	40010400 	.word	0x40010400

08001614 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MX_TIM13_Init+0x94>)
 800162e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ac <MX_TIM13_Init+0x98>)
 8001630:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001632:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <MX_TIM13_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_TIM13_Init+0x94>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_TIM13_Init+0x94>)
 8001640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001644:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_TIM13_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <MX_TIM13_Init+0x94>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001652:	4815      	ldr	r0, [pc, #84]	@ (80016a8 <MX_TIM13_Init+0x94>)
 8001654:	f004 fc9d 	bl	8005f92 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM13_Init+0x4e>
  {
    CriticalErrorHandler();
 800165e:	f7ff f825 	bl	80006ac <CriticalErrorHandler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001662:	4811      	ldr	r0, [pc, #68]	@ (80016a8 <MX_TIM13_Init+0x94>)
 8001664:	f004 fd64 	bl	8006130 <HAL_TIM_PWM_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM13_Init+0x5e>
  {
    CriticalErrorHandler();
 800166e:	f7ff f81d 	bl	80006ac <CriticalErrorHandler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001672:	2360      	movs	r3, #96	@ 0x60
 8001674:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <MX_TIM13_Init+0x94>)
 800168a:	f004 feaf 	bl	80063ec <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM13_Init+0x84>
  {
    CriticalErrorHandler();
 8001694:	f7ff f80a 	bl	80006ac <CriticalErrorHandler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001698:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <MX_TIM13_Init+0x94>)
 800169a:	f000 fa0d 	bl	8001ab8 <HAL_TIM_MspPostInit>

}
 800169e:	bf00      	nop
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24000174 	.word	0x24000174
 80016ac:	40001c00 	.word	0x40001c00

080016b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b4:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016b6:	4a23      	ldr	r2, [pc, #140]	@ (8001744 <MX_USART1_UART_Init+0x94>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ba:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f2:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f8:	4811      	ldr	r0, [pc, #68]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 80016fa:	f005 fc53 	bl	8006fa4 <HAL_UART_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART1_UART_Init+0x58>
  {
    CriticalErrorHandler();
 8001704:	f7fe ffd2 	bl	80006ac <CriticalErrorHandler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001708:	2100      	movs	r1, #0
 800170a:	480d      	ldr	r0, [pc, #52]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 800170c:	f006 fce9 	bl	80080e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART1_UART_Init+0x6a>
  {
    CriticalErrorHandler();
 8001716:	f7fe ffc9 	bl	80006ac <CriticalErrorHandler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	4808      	ldr	r0, [pc, #32]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 800171e:	f006 fd1e 	bl	800815e <HAL_UARTEx_SetRxFifoThreshold>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART1_UART_Init+0x7c>
  {
    CriticalErrorHandler();
 8001728:	f7fe ffc0 	bl	80006ac <CriticalErrorHandler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800172c:	4804      	ldr	r0, [pc, #16]	@ (8001740 <MX_USART1_UART_Init+0x90>)
 800172e:	f006 fc9f 	bl	8008070 <HAL_UARTEx_DisableFifoMode>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_USART1_UART_Init+0x8c>
  {
    CriticalErrorHandler();
 8001738:	f7fe ffb8 	bl	80006ac <CriticalErrorHandler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	240001c0 	.word	0x240001c0
 8001744:	40011000 	.word	0x40011000

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	@ 0x28
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	4b3a      	ldr	r3, [pc, #232]	@ (8001848 <MX_GPIO_Init+0x100>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001764:	4a38      	ldr	r2, [pc, #224]	@ (8001848 <MX_GPIO_Init+0x100>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800176e:	4b36      	ldr	r3, [pc, #216]	@ (8001848 <MX_GPIO_Init+0x100>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b32      	ldr	r3, [pc, #200]	@ (8001848 <MX_GPIO_Init+0x100>)
 800177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001782:	4a31      	ldr	r2, [pc, #196]	@ (8001848 <MX_GPIO_Init+0x100>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800178c:	4b2e      	ldr	r3, [pc, #184]	@ (8001848 <MX_GPIO_Init+0x100>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179a:	4b2b      	ldr	r3, [pc, #172]	@ (8001848 <MX_GPIO_Init+0x100>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a0:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <MX_GPIO_Init+0x100>)
 80017a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <MX_GPIO_Init+0x100>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b8:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <MX_GPIO_Init+0x100>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017be:	4a22      	ldr	r2, [pc, #136]	@ (8001848 <MX_GPIO_Init+0x100>)
 80017c0:	f043 0320 	orr.w	r3, r3, #32
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <MX_GPIO_Init+0x100>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <MX_GPIO_Init+0x100>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <MX_GPIO_Init+0x100>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <MX_GPIO_Init+0x100>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80017f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	480e      	ldr	r0, [pc, #56]	@ (800184c <MX_GPIO_Init+0x104>)
 8001812:	f000 fd27 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800181a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4809      	ldr	r0, [pc, #36]	@ (8001850 <MX_GPIO_Init+0x108>)
 800182c:	f000 fd1a 	bl	8002264 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(IMU_INT_EXTI_IRQn, 5, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2105      	movs	r1, #5
 8001834:	2017      	movs	r0, #23
 8001836:	f000 fcdb 	bl	80021f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(IMU_INT_EXTI_IRQn);
 800183a:	2017      	movs	r0, #23
 800183c:	f000 fcf2 	bl	8002224 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	@ 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	58024400 	.word	0x58024400
 800184c:	58020000 	.word	0x58020000
 8001850:	58020800 	.word	0x58020800

08001854 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001866:	f000 fbbb 	bl	8001fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40000800 	.word	0x40000800

08001878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <HAL_MspInit+0x48>)
 8001880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001884:	4a0e      	ldr	r2, [pc, #56]	@ (80018c0 <HAL_MspInit+0x48>)
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800188e:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <HAL_MspInit+0x48>)
 8001890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	210f      	movs	r1, #15
 80018a0:	f06f 0001 	mvn.w	r0, #1
 80018a4:	f000 fca4 	bl	80021f0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2105      	movs	r1, #5
 80018ac:	2041      	movs	r0, #65	@ 0x41
 80018ae:	f000 fc9f 	bl	80021f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80018b2:	2041      	movs	r0, #65	@ 0x41
 80018b4:	f000 fcb6 	bl	8002224 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	58024400 	.word	0x58024400

080018c4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0be      	sub	sp, #248	@ 0xf8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	22c8      	movs	r2, #200	@ 0xc8
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f007 fa0b 	bl	8008d00 <memset>
  if(hspi->Instance==SPI2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a38      	ldr	r2, [pc, #224]	@ (80019d0 <HAL_SPI_MspInit+0x10c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d169      	bne.n	80019c8 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80018f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001900:	2300      	movs	r3, #0
 8001902:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	4618      	mov	r0, r3
 800190a:	f001 ff8f 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001914:	f7ff fd0c 	bl	8001330 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001918:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <HAL_SPI_MspInit+0x110>)
 800191a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800191e:	4a2d      	ldr	r2, [pc, #180]	@ (80019d4 <HAL_SPI_MspInit+0x110>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001924:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001928:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <HAL_SPI_MspInit+0x110>)
 800192a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800192e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_SPI_MspInit+0x110>)
 8001938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193c:	4a25      	ldr	r2, [pc, #148]	@ (80019d4 <HAL_SPI_MspInit+0x110>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001946:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_SPI_MspInit+0x110>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001954:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <HAL_SPI_MspInit+0x110>)
 8001956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195a:	4a1e      	ldr	r2, [pc, #120]	@ (80019d4 <HAL_SPI_MspInit+0x110>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <HAL_SPI_MspInit+0x110>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 8001972:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800198c:	2305      	movs	r3, #5
 800198e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001996:	4619      	mov	r1, r3
 8001998:	480f      	ldr	r0, [pc, #60]	@ (80019d8 <HAL_SPI_MspInit+0x114>)
 800199a:	f000 fc63 	bl	8002264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 800199e:	230c      	movs	r3, #12
 80019a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019b6:	2305      	movs	r3, #5
 80019b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019bc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4806      	ldr	r0, [pc, #24]	@ (80019dc <HAL_SPI_MspInit+0x118>)
 80019c4:	f000 fc4e 	bl	8002264 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80019c8:	bf00      	nop
 80019ca:	37f8      	adds	r7, #248	@ 0xf8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40003800 	.word	0x40003800
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58020000 	.word	0x58020000
 80019dc:	58020800 	.word	0x58020800

080019e0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	@ 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a68 <HAL_TIM_PWM_MspInit+0x88>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12d      	bne.n	8001a5e <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <HAL_TIM_PWM_MspInit+0x8c>)
 8001a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a08:	4a18      	ldr	r2, [pc, #96]	@ (8001a6c <HAL_TIM_PWM_MspInit+0x8c>)
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a12:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <HAL_TIM_PWM_MspInit+0x8c>)
 8001a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_TIM_PWM_MspInit+0x8c>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a26:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <HAL_TIM_PWM_MspInit+0x8c>)
 8001a28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_TIM_PWM_MspInit+0x8c>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001a3e:	2340      	movs	r3, #64	@ 0x40
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_TIM_PWM_MspInit+0x90>)
 8001a5a:	f000 fc03 	bl	8002264 <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	@ 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40010400 	.word	0x40010400
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	58022400 	.word	0x58022400

08001a74 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10e      	bne.n	8001aa4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a8c:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a96:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40001c00 	.word	0x40001c00
 8001ab4:	58024400 	.word	0x58024400

08001ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a35      	ldr	r2, [pc, #212]	@ (8001bac <HAL_TIM_MspPostInit+0xf4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d13e      	bne.n	8001b58 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	4b35      	ldr	r3, [pc, #212]	@ (8001bb0 <HAL_TIM_MspPostInit+0xf8>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae0:	4a33      	ldr	r2, [pc, #204]	@ (8001bb0 <HAL_TIM_MspPostInit+0xf8>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aea:	4b31      	ldr	r3, [pc, #196]	@ (8001bb0 <HAL_TIM_MspPostInit+0xf8>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001af8:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb0 <HAL_TIM_MspPostInit+0xf8>)
 8001afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001afe:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb0 <HAL_TIM_MspPostInit+0xf8>)
 8001b00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <HAL_TIM_MspPostInit+0xf8>)
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b16:	2340      	movs	r3, #64	@ 0x40
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b26:	2303      	movs	r3, #3
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4820      	ldr	r0, [pc, #128]	@ (8001bb4 <HAL_TIM_MspPostInit+0xfc>)
 8001b32:	f000 fb97 	bl	8002264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001b36:	2380      	movs	r3, #128	@ 0x80
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b46:	2303      	movs	r3, #3
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4819      	ldr	r0, [pc, #100]	@ (8001bb8 <HAL_TIM_MspPostInit+0x100>)
 8001b52:	f000 fb87 	bl	8002264 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001b56:	e024      	b.n	8001ba2 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <HAL_TIM_MspPostInit+0x104>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d11f      	bne.n	8001ba2 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b62:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <HAL_TIM_MspPostInit+0xf8>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b68:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <HAL_TIM_MspPostInit+0xf8>)
 8001b6a:	f043 0320 	orr.w	r3, r3, #32
 8001b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b72:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_TIM_MspPostInit+0xf8>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8001b80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001b92:	2309      	movs	r3, #9
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4808      	ldr	r0, [pc, #32]	@ (8001bc0 <HAL_TIM_MspPostInit+0x108>)
 8001b9e:	f000 fb61 	bl	8002264 <HAL_GPIO_Init>
}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	@ 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40010400 	.word	0x40010400
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	58020800 	.word	0x58020800
 8001bb8:	58022400 	.word	0x58022400
 8001bbc:	40001c00 	.word	0x40001c00
 8001bc0:	58021400 	.word	0x58021400

08001bc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0bc      	sub	sp, #240	@ 0xf0
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	22c8      	movs	r2, #200	@ 0xc8
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f007 f88b 	bl	8008d00 <memset>
  if(huart->Instance==USART1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a27      	ldr	r2, [pc, #156]	@ (8001c8c <HAL_UART_MspInit+0xc8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d146      	bne.n	8001c82 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bf4:	f04f 0201 	mov.w	r2, #1
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fe0e 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c16:	f7ff fb8b 	bl	8001330 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_UART_MspInit+0xcc>)
 8001c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c20:	4a1b      	ldr	r2, [pc, #108]	@ (8001c90 <HAL_UART_MspInit+0xcc>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c2a:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <HAL_UART_MspInit+0xcc>)
 8001c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <HAL_UART_MspInit+0xcc>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c3e:	4a14      	ldr	r2, [pc, #80]	@ (8001c90 <HAL_UART_MspInit+0xcc>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c48:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_UART_MspInit+0xcc>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001c56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c70:	2307      	movs	r3, #7
 8001c72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <HAL_UART_MspInit+0xd0>)
 8001c7e:	f000 faf1 	bl	8002264 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c82:	bf00      	nop
 8001c84:	37f0      	adds	r7, #240	@ 0xf0
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40011000 	.word	0x40011000
 8001c90:	58024400 	.word	0x58024400
 8001c94:	58020000 	.word	0x58020000

08001c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b090      	sub	sp, #64	@ 0x40
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	d827      	bhi.n	8001cf6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	201e      	movs	r0, #30
 8001cac:	f000 faa0 	bl	80021f0 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cb0:	201e      	movs	r0, #30
 8001cb2:	f000 fab7 	bl	8002224 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001cb6:	4a29      	ldr	r2, [pc, #164]	@ (8001d5c <HAL_InitTick+0xc4>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cbc:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <HAL_InitTick+0xc8>)
 8001cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cc2:	4a27      	ldr	r2, [pc, #156]	@ (8001d60 <HAL_InitTick+0xc8>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ccc:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <HAL_InitTick+0xc8>)
 8001cce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cda:	f107 0210 	add.w	r2, r7, #16
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 fd5f 	bl	80037a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cec:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d106      	bne.n	8001d02 <HAL_InitTick+0x6a>
 8001cf4:	e001      	b.n	8001cfa <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e02b      	b.n	8001d52 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cfa:	f001 fd29 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8001cfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001d00:	e004      	b.n	8001d0c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d02:	f001 fd25 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8001d06:	4603      	mov	r3, r0
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d0e:	4a15      	ldr	r2, [pc, #84]	@ (8001d64 <HAL_InitTick+0xcc>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	0c9b      	lsrs	r3, r3, #18
 8001d16:	3b01      	subs	r3, #1
 8001d18:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <HAL_InitTick+0xd0>)
 8001d1c:	4a13      	ldr	r2, [pc, #76]	@ (8001d6c <HAL_InitTick+0xd4>)
 8001d1e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_InitTick+0xd0>)
 8001d22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d26:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d28:	4a0f      	ldr	r2, [pc, #60]	@ (8001d68 <HAL_InitTick+0xd0>)
 8001d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <HAL_InitTick+0xd0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_InitTick+0xd0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001d3a:	480b      	ldr	r0, [pc, #44]	@ (8001d68 <HAL_InitTick+0xd0>)
 8001d3c:	f004 f929 	bl	8005f92 <HAL_TIM_Base_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d104      	bne.n	8001d50 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001d46:	4808      	ldr	r0, [pc, #32]	@ (8001d68 <HAL_InitTick+0xd0>)
 8001d48:	f004 f97a 	bl	8006040 <HAL_TIM_Base_Start_IT>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	e000      	b.n	8001d52 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3740      	adds	r7, #64	@ 0x40
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	24000008 	.word	0x24000008
 8001d60:	58024400 	.word	0x58024400
 8001d64:	431bde83 	.word	0x431bde83
 8001d68:	240002e4 	.word	0x240002e4
 8001d6c:	40000800 	.word	0x40000800

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <NMI_Handler+0x4>

08001d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <MemManage_Handler+0x4>

08001d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001daa:	2080      	movs	r0, #128	@ 0x80
 8001dac:	f000 fc0a 	bl	80025c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <TIM4_IRQHandler+0x10>)
 8001dba:	f004 fa10 	bl	80061de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	240002e4 	.word	0x240002e4

08001dc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	e00a      	b.n	8001df0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dda:	f3af 8000 	nop.w
 8001dde:	4601      	mov	r1, r0
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	60ba      	str	r2, [r7, #8]
 8001de6:	b2ca      	uxtb	r2, r1
 8001de8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3301      	adds	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbf0      	blt.n	8001dda <_read+0x12>
  }

  return len;
 8001df8:	687b      	ldr	r3, [r7, #4]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e009      	b.n	8001e28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fcb1 	bl	8000784 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf1      	blt.n	8001e14 <_write+0x12>
  }
  return len;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_close>:

int _close(int file)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e62:	605a      	str	r2, [r3, #4]
  return 0;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_isatty>:

int _isatty(int file)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eac:	4a14      	ldr	r2, [pc, #80]	@ (8001f00 <_sbrk+0x5c>)
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <_sbrk+0x60>)
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <_sbrk+0x64>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <_sbrk+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d207      	bcs.n	8001ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed4:	f006 ff62 	bl	8008d9c <__errno>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	220c      	movs	r2, #12
 8001edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e009      	b.n	8001ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eea:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <_sbrk+0x64>)
 8001ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	24080000 	.word	0x24080000
 8001f04:	00000400 	.word	0x00000400
 8001f08:	24000330 	.word	0x24000330
 8001f0c:	24000910 	.word	0x24000910

08001f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f10:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001f4c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001f14:	f7fe fdb6 	bl	8000a84 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f18:	f7fe fd06 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f1c:	480c      	ldr	r0, [pc, #48]	@ (8001f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f1e:	490d      	ldr	r1, [pc, #52]	@ (8001f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f20:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f34:	4c0a      	ldr	r4, [pc, #40]	@ (8001f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f42:	f006 ff31 	bl	8008da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f46:	f7ff f985 	bl	8001254 <main>
  bx  lr
 8001f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f4c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f54:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001f58:	08009a04 	.word	0x08009a04
  ldr r2, =_sbss
 8001f5c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001f60:	24000910 	.word	0x24000910

08001f64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC3_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6e:	2003      	movs	r0, #3
 8001f70:	f000 f933 	bl	80021da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f74:	f001 fa42 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <HAL_Init+0x68>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	4913      	ldr	r1, [pc, #76]	@ (8001fd4 <HAL_Init+0x6c>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f92:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <HAL_Init+0x68>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <HAL_Init+0x6c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd8 <HAL_Init+0x70>)
 8001faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fac:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <HAL_Init+0x74>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb2:	200f      	movs	r0, #15
 8001fb4:	f7ff fe70 	bl	8001c98 <HAL_InitTick>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e002      	b.n	8001fc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc2:	f7ff fc59 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	08009988 	.word	0x08009988
 8001fd8:	24000004 	.word	0x24000004
 8001fdc:	24000000 	.word	0x24000000

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2400000c 	.word	0x2400000c
 8002004:	24000334 	.word	0x24000334

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	24000334 	.word	0x24000334

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2400000c 	.word	0x2400000c

08002068 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <HAL_GetREVID+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0c1b      	lsrs	r3, r3, #16
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	5c001000 	.word	0x5c001000

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ae:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <__NVIC_SetPriorityGrouping+0x40>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	60d3      	str	r3, [r2, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00
 80020c4:	05fa0000 	.word	0x05fa0000

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	@ (800211c <__NVIC_EnableIRQ+0x38>)
 80020fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	@ (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	@ (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	@ 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ff4c 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021fe:	f7ff ff63 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 8002202:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	6978      	ldr	r0, [r7, #20]
 800220a:	f7ff ffb3 	bl	8002174 <NVIC_EncodePriority>
 800220e:	4602      	mov	r2, r0
 8002210:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff82 	bl	8002120 <__NVIC_SetPriority>
}
 800221c:	bf00      	nop
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff56 	bl	80020e4 <__NVIC_EnableIRQ>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_GetCurrentCPUID+0x20>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800224c:	2b70      	cmp	r3, #112	@ 0x70
 800224e:	d101      	bne.n	8002254 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8002250:	2303      	movs	r3, #3
 8002252:	e000      	b.n	8002256 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8002254:	2301      	movs	r3, #1
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	@ 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002272:	4b89      	ldr	r3, [pc, #548]	@ (8002498 <HAL_GPIO_Init+0x234>)
 8002274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002276:	e194      	b.n	80025a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8186 	beq.w	800259c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d005      	beq.n	80022a8 <HAL_GPIO_Init+0x44>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d130      	bne.n	800230a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022de:	2201      	movs	r2, #1
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 0201 	and.w	r2, r3, #1
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b03      	cmp	r3, #3
 8002314:	d017      	beq.n	8002346 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d123      	bne.n	800239a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	69b9      	ldr	r1, [r7, #24]
 8002396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0203 	and.w	r2, r3, #3
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80e0 	beq.w	800259c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023dc:	4b2f      	ldr	r3, [pc, #188]	@ (800249c <HAL_GPIO_Init+0x238>)
 80023de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023e2:	4a2e      	ldr	r2, [pc, #184]	@ (800249c <HAL_GPIO_Init+0x238>)
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023ec:	4b2b      	ldr	r3, [pc, #172]	@ (800249c <HAL_GPIO_Init+0x238>)
 80023ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fa:	4a29      	ldr	r2, [pc, #164]	@ (80024a0 <HAL_GPIO_Init+0x23c>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a20      	ldr	r2, [pc, #128]	@ (80024a4 <HAL_GPIO_Init+0x240>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d052      	beq.n	80024cc <HAL_GPIO_Init+0x268>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a1f      	ldr	r2, [pc, #124]	@ (80024a8 <HAL_GPIO_Init+0x244>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d031      	beq.n	8002492 <HAL_GPIO_Init+0x22e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1e      	ldr	r2, [pc, #120]	@ (80024ac <HAL_GPIO_Init+0x248>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02b      	beq.n	800248e <HAL_GPIO_Init+0x22a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a1d      	ldr	r2, [pc, #116]	@ (80024b0 <HAL_GPIO_Init+0x24c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d025      	beq.n	800248a <HAL_GPIO_Init+0x226>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1c      	ldr	r2, [pc, #112]	@ (80024b4 <HAL_GPIO_Init+0x250>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01f      	beq.n	8002486 <HAL_GPIO_Init+0x222>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a1b      	ldr	r2, [pc, #108]	@ (80024b8 <HAL_GPIO_Init+0x254>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_GPIO_Init+0x21e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a1a      	ldr	r2, [pc, #104]	@ (80024bc <HAL_GPIO_Init+0x258>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0x21a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a19      	ldr	r2, [pc, #100]	@ (80024c0 <HAL_GPIO_Init+0x25c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00d      	beq.n	800247a <HAL_GPIO_Init+0x216>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a18      	ldr	r2, [pc, #96]	@ (80024c4 <HAL_GPIO_Init+0x260>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <HAL_GPIO_Init+0x212>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a17      	ldr	r2, [pc, #92]	@ (80024c8 <HAL_GPIO_Init+0x264>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_GPIO_Init+0x20e>
 800246e:	2309      	movs	r3, #9
 8002470:	e02d      	b.n	80024ce <HAL_GPIO_Init+0x26a>
 8002472:	230a      	movs	r3, #10
 8002474:	e02b      	b.n	80024ce <HAL_GPIO_Init+0x26a>
 8002476:	2308      	movs	r3, #8
 8002478:	e029      	b.n	80024ce <HAL_GPIO_Init+0x26a>
 800247a:	2307      	movs	r3, #7
 800247c:	e027      	b.n	80024ce <HAL_GPIO_Init+0x26a>
 800247e:	2306      	movs	r3, #6
 8002480:	e025      	b.n	80024ce <HAL_GPIO_Init+0x26a>
 8002482:	2305      	movs	r3, #5
 8002484:	e023      	b.n	80024ce <HAL_GPIO_Init+0x26a>
 8002486:	2304      	movs	r3, #4
 8002488:	e021      	b.n	80024ce <HAL_GPIO_Init+0x26a>
 800248a:	2303      	movs	r3, #3
 800248c:	e01f      	b.n	80024ce <HAL_GPIO_Init+0x26a>
 800248e:	2302      	movs	r3, #2
 8002490:	e01d      	b.n	80024ce <HAL_GPIO_Init+0x26a>
 8002492:	2301      	movs	r3, #1
 8002494:	e01b      	b.n	80024ce <HAL_GPIO_Init+0x26a>
 8002496:	bf00      	nop
 8002498:	58000080 	.word	0x58000080
 800249c:	58024400 	.word	0x58024400
 80024a0:	58000400 	.word	0x58000400
 80024a4:	58020000 	.word	0x58020000
 80024a8:	58020400 	.word	0x58020400
 80024ac:	58020800 	.word	0x58020800
 80024b0:	58020c00 	.word	0x58020c00
 80024b4:	58021000 	.word	0x58021000
 80024b8:	58021400 	.word	0x58021400
 80024bc:	58021800 	.word	0x58021800
 80024c0:	58021c00 	.word	0x58021c00
 80024c4:	58022000 	.word	0x58022000
 80024c8:	58022400 	.word	0x58022400
 80024cc:	2300      	movs	r3, #0
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	f002 0203 	and.w	r2, r2, #3
 80024d4:	0092      	lsls	r2, r2, #2
 80024d6:	4093      	lsls	r3, r2
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024de:	4938      	ldr	r1, [pc, #224]	@ (80025c0 <HAL_GPIO_Init+0x35c>)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	3302      	adds	r3, #2
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002512:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002540:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	3301      	adds	r3, #1
 80025a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f47f ae63 	bne.w	8002278 <HAL_GPIO_Init+0x14>
  }
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	3724      	adds	r7, #36	@ 0x24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	58000400 	.word	0x58000400

080025c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fdfc 	bl	80011e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002600:	4a08      	ldr	r2, [pc, #32]	@ (8002624 <HAL_HSEM_FastTake+0x2c>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3320      	adds	r3, #32
 8002606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260a:	4a07      	ldr	r2, [pc, #28]	@ (8002628 <HAL_HSEM_FastTake+0x30>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	58026400 	.word	0x58026400
 8002628:	80000300 	.word	0x80000300

0800262c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002636:	4906      	ldr	r1, [pc, #24]	@ (8002650 <HAL_HSEM_Release+0x24>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	58026400 	.word	0x58026400

08002654 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800265c:	4b29      	ldr	r3, [pc, #164]	@ (8002704 <HAL_PWREx_ConfigSupply+0xb0>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	2b06      	cmp	r3, #6
 8002666:	d00a      	beq.n	800267e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002668:	4b26      	ldr	r3, [pc, #152]	@ (8002704 <HAL_PWREx_ConfigSupply+0xb0>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e040      	b.n	80026fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	e03e      	b.n	80026fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800267e:	4b21      	ldr	r3, [pc, #132]	@ (8002704 <HAL_PWREx_ConfigSupply+0xb0>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002686:	491f      	ldr	r1, [pc, #124]	@ (8002704 <HAL_PWREx_ConfigSupply+0xb0>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4313      	orrs	r3, r2
 800268c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800268e:	f7ff fcbb 	bl	8002008 <HAL_GetTick>
 8002692:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002694:	e009      	b.n	80026aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002696:	f7ff fcb7 	bl	8002008 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026a4:	d901      	bls.n	80026aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e028      	b.n	80026fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026aa:	4b16      	ldr	r3, [pc, #88]	@ (8002704 <HAL_PWREx_ConfigSupply+0xb0>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026b6:	d1ee      	bne.n	8002696 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b1e      	cmp	r3, #30
 80026bc:	d008      	beq.n	80026d0 <HAL_PWREx_ConfigSupply+0x7c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80026c2:	d005      	beq.n	80026d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b1d      	cmp	r3, #29
 80026c8:	d002      	beq.n	80026d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b2d      	cmp	r3, #45	@ 0x2d
 80026ce:	d114      	bne.n	80026fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80026d0:	f7ff fc9a 	bl	8002008 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026d6:	e009      	b.n	80026ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026d8:	f7ff fc96 	bl	8002008 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026e6:	d901      	bls.n	80026ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e007      	b.n	80026fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <HAL_PWREx_ConfigSupply+0xb0>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f8:	d1ee      	bne.n	80026d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	58024800 	.word	0x58024800

08002708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	@ 0x30
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f000 bc48 	b.w	8002fac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8088 	beq.w	800283a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272a:	4b99      	ldr	r3, [pc, #612]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002734:	4b96      	ldr	r3, [pc, #600]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273c:	2b10      	cmp	r3, #16
 800273e:	d007      	beq.n	8002750 <HAL_RCC_OscConfig+0x48>
 8002740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002742:	2b18      	cmp	r3, #24
 8002744:	d111      	bne.n	800276a <HAL_RCC_OscConfig+0x62>
 8002746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d10c      	bne.n	800276a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	4b8f      	ldr	r3, [pc, #572]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d06d      	beq.n	8002838 <HAL_RCC_OscConfig+0x130>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d169      	bne.n	8002838 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f000 bc21 	b.w	8002fac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x7a>
 8002774:	4b86      	ldr	r3, [pc, #536]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a85      	ldr	r2, [pc, #532]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	e02e      	b.n	80027e0 <HAL_RCC_OscConfig+0xd8>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x9c>
 800278a:	4b81      	ldr	r3, [pc, #516]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a80      	ldr	r2, [pc, #512]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b7e      	ldr	r3, [pc, #504]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a7d      	ldr	r2, [pc, #500]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800279c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e01d      	b.n	80027e0 <HAL_RCC_OscConfig+0xd8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0xc0>
 80027ae:	4b78      	ldr	r3, [pc, #480]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a77      	ldr	r2, [pc, #476]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b75      	ldr	r3, [pc, #468]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a74      	ldr	r2, [pc, #464]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0xd8>
 80027c8:	4b71      	ldr	r3, [pc, #452]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a70      	ldr	r2, [pc, #448]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b6e      	ldr	r3, [pc, #440]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a6d      	ldr	r2, [pc, #436]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80027da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7ff fc0e 	bl	8002008 <HAL_GetTick>
 80027ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff fc0a 	bl	8002008 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e3d4      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002802:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0xe8>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7ff fbfa 	bl	8002008 <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7ff fbf6 	bl	8002008 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e3c0      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800282a:	4b59      	ldr	r3, [pc, #356]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x110>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80ca 	beq.w	80029dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002848:	4b51      	ldr	r3, [pc, #324]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002850:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002852:	4b4f      	ldr	r3, [pc, #316]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002856:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_RCC_OscConfig+0x166>
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	2b18      	cmp	r3, #24
 8002862:	d156      	bne.n	8002912 <HAL_RCC_OscConfig+0x20a>
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d151      	bne.n	8002912 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286e:	4b48      	ldr	r3, [pc, #288]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x17e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e392      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002886:	4b42      	ldr	r3, [pc, #264]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 0219 	bic.w	r2, r3, #25
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	493f      	ldr	r1, [pc, #252]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7ff fbb6 	bl	8002008 <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a0:	f7ff fbb2 	bl	8002008 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e37c      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028b2:	4b37      	ldr	r3, [pc, #220]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	f7ff fbd3 	bl	8002068 <HAL_GetREVID>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d817      	bhi.n	80028fc <HAL_RCC_OscConfig+0x1f4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b40      	cmp	r3, #64	@ 0x40
 80028d2:	d108      	bne.n	80028e6 <HAL_RCC_OscConfig+0x1de>
 80028d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80028de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e4:	e07a      	b.n	80029dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	031b      	lsls	r3, r3, #12
 80028f4:	4926      	ldr	r1, [pc, #152]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fa:	e06f      	b.n	80029dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b24      	ldr	r3, [pc, #144]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	4921      	ldr	r1, [pc, #132]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002910:	e064      	b.n	80029dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d047      	beq.n	80029aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800291a:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0219 	bic.w	r2, r3, #25
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	491a      	ldr	r1, [pc, #104]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff fb6c 	bl	8002008 <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002934:	f7ff fb68 	bl	8002008 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e332      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002946:	4b12      	ldr	r3, [pc, #72]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	f7ff fb89 	bl	8002068 <HAL_GetREVID>
 8002956:	4603      	mov	r3, r0
 8002958:	f241 0203 	movw	r2, #4099	@ 0x1003
 800295c:	4293      	cmp	r3, r2
 800295e:	d819      	bhi.n	8002994 <HAL_RCC_OscConfig+0x28c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b40      	cmp	r3, #64	@ 0x40
 8002966:	d108      	bne.n	800297a <HAL_RCC_OscConfig+0x272>
 8002968:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002970:	4a07      	ldr	r2, [pc, #28]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 8002972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002976:	6053      	str	r3, [r2, #4]
 8002978:	e030      	b.n	80029dc <HAL_RCC_OscConfig+0x2d4>
 800297a:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	031b      	lsls	r3, r3, #12
 8002988:	4901      	ldr	r1, [pc, #4]	@ (8002990 <HAL_RCC_OscConfig+0x288>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
 800298e:	e025      	b.n	80029dc <HAL_RCC_OscConfig+0x2d4>
 8002990:	58024400 	.word	0x58024400
 8002994:	4b9a      	ldr	r3, [pc, #616]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	4997      	ldr	r1, [pc, #604]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	e018      	b.n	80029dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b95      	ldr	r3, [pc, #596]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a94      	ldr	r2, [pc, #592]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7ff fb27 	bl	8002008 <HAL_GetTick>
 80029ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029be:	f7ff fb23 	bl	8002008 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e2ed      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029d0:	4b8b      	ldr	r3, [pc, #556]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a9 	beq.w	8002b3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ea:	4b85      	ldr	r3, [pc, #532]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029f4:	4b82      	ldr	r3, [pc, #520]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d007      	beq.n	8002a10 <HAL_RCC_OscConfig+0x308>
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b18      	cmp	r3, #24
 8002a04:	d13a      	bne.n	8002a7c <HAL_RCC_OscConfig+0x374>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d135      	bne.n	8002a7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a10:	4b7b      	ldr	r3, [pc, #492]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_OscConfig+0x320>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	2b80      	cmp	r3, #128	@ 0x80
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e2c1      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a28:	f7ff fb1e 	bl	8002068 <HAL_GetREVID>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d817      	bhi.n	8002a66 <HAL_RCC_OscConfig+0x35e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d108      	bne.n	8002a50 <HAL_RCC_OscConfig+0x348>
 8002a3e:	4b70      	ldr	r3, [pc, #448]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a46:	4a6e      	ldr	r2, [pc, #440]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002a48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a4e:	e075      	b.n	8002b3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a50:	4b6b      	ldr	r3, [pc, #428]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	069b      	lsls	r3, r3, #26
 8002a5e:	4968      	ldr	r1, [pc, #416]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a64:	e06a      	b.n	8002b3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a66:	4b66      	ldr	r3, [pc, #408]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	061b      	lsls	r3, r3, #24
 8002a74:	4962      	ldr	r1, [pc, #392]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a7a:	e05f      	b.n	8002b3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d042      	beq.n	8002b0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a84:	4b5e      	ldr	r3, [pc, #376]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a5d      	ldr	r2, [pc, #372]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7ff faba 	bl	8002008 <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a98:	f7ff fab6 	bl	8002008 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e280      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aaa:	4b55      	ldr	r3, [pc, #340]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ab6:	f7ff fad7 	bl	8002068 <HAL_GetREVID>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d817      	bhi.n	8002af4 <HAL_RCC_OscConfig+0x3ec>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d108      	bne.n	8002ade <HAL_RCC_OscConfig+0x3d6>
 8002acc:	4b4c      	ldr	r3, [pc, #304]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002ad6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ada:	6053      	str	r3, [r2, #4]
 8002adc:	e02e      	b.n	8002b3c <HAL_RCC_OscConfig+0x434>
 8002ade:	4b48      	ldr	r3, [pc, #288]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	069b      	lsls	r3, r3, #26
 8002aec:	4944      	ldr	r1, [pc, #272]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
 8002af2:	e023      	b.n	8002b3c <HAL_RCC_OscConfig+0x434>
 8002af4:	4b42      	ldr	r3, [pc, #264]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	493f      	ldr	r1, [pc, #252]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
 8002b08:	e018      	b.n	8002b3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002b10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7ff fa77 	bl	8002008 <HAL_GetTick>
 8002b1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b1e:	f7ff fa73 	bl	8002008 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e23d      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b30:	4b33      	ldr	r3, [pc, #204]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d036      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d019      	beq.n	8002b84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b50:	4b2b      	ldr	r3, [pc, #172]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b54:	4a2a      	ldr	r2, [pc, #168]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7ff fa54 	bl	8002008 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b64:	f7ff fa50 	bl	8002008 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e21a      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b76:	4b22      	ldr	r3, [pc, #136]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x45c>
 8002b82:	e018      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b84:	4b1e      	ldr	r3, [pc, #120]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b88:	4a1d      	ldr	r2, [pc, #116]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7ff fa3a 	bl	8002008 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b98:	f7ff fa36 	bl	8002008 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e200      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002baa:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d039      	beq.n	8002c36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01c      	beq.n	8002c04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bca:	4b0d      	ldr	r3, [pc, #52]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a0c      	ldr	r2, [pc, #48]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bd6:	f7ff fa17 	bl	8002008 <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bde:	f7ff fa13 	bl	8002008 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1dd      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bf0:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x4d6>
 8002bfc:	e01b      	b.n	8002c36 <HAL_RCC_OscConfig+0x52e>
 8002bfe:	bf00      	nop
 8002c00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c04:	4b9b      	ldr	r3, [pc, #620]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a9a      	ldr	r2, [pc, #616]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002c0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c10:	f7ff f9fa 	bl	8002008 <HAL_GetTick>
 8002c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c18:	f7ff f9f6 	bl	8002008 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1c0      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c2a:	4b92      	ldr	r3, [pc, #584]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8081 	beq.w	8002d46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c44:	4b8c      	ldr	r3, [pc, #560]	@ (8002e78 <HAL_RCC_OscConfig+0x770>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a8b      	ldr	r2, [pc, #556]	@ (8002e78 <HAL_RCC_OscConfig+0x770>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c50:	f7ff f9da 	bl	8002008 <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c58:	f7ff f9d6 	bl	8002008 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	@ 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1a0      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c6a:	4b83      	ldr	r3, [pc, #524]	@ (8002e78 <HAL_RCC_OscConfig+0x770>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x584>
 8002c7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	4a7c      	ldr	r2, [pc, #496]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8a:	e02d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x5e0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10c      	bne.n	8002cae <HAL_RCC_OscConfig+0x5a6>
 8002c94:	4b77      	ldr	r3, [pc, #476]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c98:	4a76      	ldr	r2, [pc, #472]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca0:	4b74      	ldr	r3, [pc, #464]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca4:	4a73      	ldr	r2, [pc, #460]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002ca6:	f023 0304 	bic.w	r3, r3, #4
 8002caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cac:	e01c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x5e0>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5c8>
 8002cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	4a6e      	ldr	r2, [pc, #440]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc2:	4b6c      	ldr	r3, [pc, #432]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	4a6b      	ldr	r2, [pc, #428]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x5e0>
 8002cd0:	4b68      	ldr	r3, [pc, #416]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd4:	4a67      	ldr	r2, [pc, #412]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cdc:	4b65      	ldr	r3, [pc, #404]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	4a64      	ldr	r2, [pc, #400]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d015      	beq.n	8002d1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7ff f98a 	bl	8002008 <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7ff f986 	bl	8002008 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e14e      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0e:	4b59      	ldr	r3, [pc, #356]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ee      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x5f0>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7ff f974 	bl	8002008 <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7ff f970 	bl	8002008 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e138      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ee      	bne.n	8002d24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 812d 	beq.w	8002faa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d50:	4b48      	ldr	r3, [pc, #288]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d58:	2b18      	cmp	r3, #24
 8002d5a:	f000 80bd 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	f040 809e 	bne.w	8002ea4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d68:	4b42      	ldr	r3, [pc, #264]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a41      	ldr	r2, [pc, #260]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002d6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7ff f948 	bl	8002008 <HAL_GetTick>
 8002d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7ff f944 	bl	8002008 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e10e      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d8e:	4b39      	ldr	r3, [pc, #228]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9a:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d9e:	4b37      	ldr	r3, [pc, #220]	@ (8002e7c <HAL_RCC_OscConfig+0x774>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002daa:	0112      	lsls	r2, r2, #4
 8002dac:	430a      	orrs	r2, r1
 8002dae:	4931      	ldr	r1, [pc, #196]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	3b01      	subs	r3, #1
 8002dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	025b      	lsls	r3, r3, #9
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002de4:	4923      	ldr	r1, [pc, #140]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002dea:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	4a21      	ldr	r2, [pc, #132]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002df6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dfa:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <HAL_RCC_OscConfig+0x778>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e02:	00d2      	lsls	r2, r2, #3
 8002e04:	491b      	ldr	r1, [pc, #108]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	f023 020c 	bic.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	4917      	ldr	r1, [pc, #92]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e1c:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	f023 0202 	bic.w	r2, r3, #2
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e28:	4912      	ldr	r1, [pc, #72]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e2e:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	4a10      	ldr	r2, [pc, #64]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e46:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e52:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e56:	4a07      	ldr	r2, [pc, #28]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e5e:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a04      	ldr	r2, [pc, #16]	@ (8002e74 <HAL_RCC_OscConfig+0x76c>)
 8002e64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7ff f8cd 	bl	8002008 <HAL_GetTick>
 8002e6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e70:	e011      	b.n	8002e96 <HAL_RCC_OscConfig+0x78e>
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400
 8002e78:	58024800 	.word	0x58024800
 8002e7c:	fffffc0c 	.word	0xfffffc0c
 8002e80:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7ff f8c0 	bl	8002008 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e08a      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e96:	4b47      	ldr	r3, [pc, #284]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x77c>
 8002ea2:	e082      	b.n	8002faa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea4:	4b43      	ldr	r3, [pc, #268]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a42      	ldr	r2, [pc, #264]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7ff f8aa 	bl	8002008 <HAL_GetTick>
 8002eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7ff f8a6 	bl	8002008 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e070      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eca:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x7b0>
 8002ed6:	e068      	b.n	8002faa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ed8:	4b36      	ldr	r3, [pc, #216]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ede:	4b35      	ldr	r3, [pc, #212]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d031      	beq.n	8002f50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f003 0203 	and.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d12a      	bne.n	8002f50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d122      	bne.n	8002f50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f14:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d11a      	bne.n	8002f50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	0a5b      	lsrs	r3, r3, #9
 8002f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f26:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d111      	bne.n	8002f50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d108      	bne.n	8002f50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	0e1b      	lsrs	r3, r3, #24
 8002f42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e02b      	b.n	8002fac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f54:	4b17      	ldr	r3, [pc, #92]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f58:	08db      	lsrs	r3, r3, #3
 8002f5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f5e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d01f      	beq.n	8002faa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f6a:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6e:	4a11      	ldr	r2, [pc, #68]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f76:	f7ff f847 	bl	8002008 <HAL_GetTick>
 8002f7a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f7c:	bf00      	nop
 8002f7e:	f7ff f843 	bl	8002008 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d0f9      	beq.n	8002f7e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <HAL_RCC_OscConfig+0x8b0>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f96:	00d2      	lsls	r2, r2, #3
 8002f98:	4906      	ldr	r1, [pc, #24]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f9e:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <HAL_RCC_OscConfig+0x8ac>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3730      	adds	r7, #48	@ 0x30
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	58024400 	.word	0x58024400
 8002fb8:	ffff0007 	.word	0xffff0007

08002fbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e19c      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b8a      	ldr	r3, [pc, #552]	@ (80031fc <HAL_RCC_ClockConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d910      	bls.n	8003000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b87      	ldr	r3, [pc, #540]	@ (80031fc <HAL_RCC_ClockConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 020f 	bic.w	r2, r3, #15
 8002fe6:	4985      	ldr	r1, [pc, #532]	@ (80031fc <HAL_RCC_ClockConfig+0x240>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b83      	ldr	r3, [pc, #524]	@ (80031fc <HAL_RCC_ClockConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e184      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	4b7b      	ldr	r3, [pc, #492]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003018:	429a      	cmp	r2, r3
 800301a:	d908      	bls.n	800302e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800301c:	4b78      	ldr	r3, [pc, #480]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	4975      	ldr	r1, [pc, #468]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800302a:	4313      	orrs	r3, r2
 800302c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d010      	beq.n	800305c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	4b70      	ldr	r3, [pc, #448]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003046:	429a      	cmp	r2, r3
 8003048:	d908      	bls.n	800305c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800304a:	4b6d      	ldr	r3, [pc, #436]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	496a      	ldr	r1, [pc, #424]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003058:	4313      	orrs	r3, r2
 800305a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d010      	beq.n	800308a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	4b64      	ldr	r3, [pc, #400]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003074:	429a      	cmp	r2, r3
 8003076:	d908      	bls.n	800308a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003078:	4b61      	ldr	r3, [pc, #388]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	495e      	ldr	r1, [pc, #376]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003086:	4313      	orrs	r3, r2
 8003088:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	4b59      	ldr	r3, [pc, #356]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d908      	bls.n	80030b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030a6:	4b56      	ldr	r3, [pc, #344]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4953      	ldr	r1, [pc, #332]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d908      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f023 020f 	bic.w	r2, r3, #15
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4947      	ldr	r1, [pc, #284]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d055      	beq.n	800319e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030f2:	4b43      	ldr	r3, [pc, #268]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4940      	ldr	r1, [pc, #256]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003100:	4313      	orrs	r3, r2
 8003102:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d107      	bne.n	800311c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800310c:	4b3c      	ldr	r3, [pc, #240]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d121      	bne.n	800315c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0f6      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d107      	bne.n	8003134 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003124:	4b36      	ldr	r3, [pc, #216]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d115      	bne.n	800315c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0ea      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800313c:	4b30      	ldr	r3, [pc, #192]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0de      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800314c:	4b2c      	ldr	r3, [pc, #176]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0d6      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800315c:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f023 0207 	bic.w	r2, r3, #7
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4925      	ldr	r1, [pc, #148]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800316a:	4313      	orrs	r3, r2
 800316c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316e:	f7fe ff4b 	bl	8002008 <HAL_GetTick>
 8003172:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003174:	e00a      	b.n	800318c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003176:	f7fe ff47 	bl	8002008 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0be      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318c:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	429a      	cmp	r2, r3
 800319c:	d1eb      	bne.n	8003176 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d208      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ba:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f023 020f 	bic.w	r2, r3, #15
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	490e      	ldr	r1, [pc, #56]	@ (8003200 <HAL_RCC_ClockConfig+0x244>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <HAL_RCC_ClockConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d214      	bcs.n	8003204 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <HAL_RCC_ClockConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 020f 	bic.w	r2, r3, #15
 80031e2:	4906      	ldr	r1, [pc, #24]	@ (80031fc <HAL_RCC_ClockConfig+0x240>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b04      	ldr	r3, [pc, #16]	@ (80031fc <HAL_RCC_ClockConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e086      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
 80031fc:	52002000 	.word	0x52002000
 8003200:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d010      	beq.n	8003232 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	4b3f      	ldr	r3, [pc, #252]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800321c:	429a      	cmp	r2, r3
 800321e:	d208      	bcs.n	8003232 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003220:	4b3c      	ldr	r3, [pc, #240]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	4939      	ldr	r1, [pc, #228]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 800322e:	4313      	orrs	r3, r2
 8003230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d010      	beq.n	8003260 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	4b34      	ldr	r3, [pc, #208]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800324a:	429a      	cmp	r2, r3
 800324c:	d208      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800324e:	4b31      	ldr	r3, [pc, #196]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	492e      	ldr	r1, [pc, #184]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 800325c:	4313      	orrs	r3, r2
 800325e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d010      	beq.n	800328e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003278:	429a      	cmp	r2, r3
 800327a:	d208      	bcs.n	800328e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800327c:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	4922      	ldr	r1, [pc, #136]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 800328a:	4313      	orrs	r3, r2
 800328c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d010      	beq.n	80032bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	4b1d      	ldr	r3, [pc, #116]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d208      	bcs.n	80032bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	4917      	ldr	r1, [pc, #92]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032bc:	f000 f89e 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b14      	ldr	r3, [pc, #80]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	4912      	ldr	r1, [pc, #72]	@ (8003318 <HAL_RCC_ClockConfig+0x35c>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
 80032d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032da:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <HAL_RCC_ClockConfig+0x358>)
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <HAL_RCC_ClockConfig+0x35c>)
 80032e4:	5cd3      	ldrb	r3, [r2, r3]
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	4a0a      	ldr	r2, [pc, #40]	@ (800331c <HAL_RCC_ClockConfig+0x360>)
 80032f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003320 <HAL_RCC_ClockConfig+0x364>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80032fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <HAL_RCC_ClockConfig+0x368>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fcca 	bl	8001c98 <HAL_InitTick>
 8003304:	4603      	mov	r3, r0
 8003306:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	58024400 	.word	0x58024400
 8003318:	08009988 	.word	0x08009988
 800331c:	24000004 	.word	0x24000004
 8003320:	24000000 	.word	0x24000000
 8003324:	24000008 	.word	0x24000008

08003328 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	@ 0x30
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d12a      	bne.n	8003390 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800333a:	4b2d      	ldr	r3, [pc, #180]	@ (80033f0 <HAL_RCC_MCOConfig+0xc8>)
 800333c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003340:	4a2b      	ldr	r2, [pc, #172]	@ (80033f0 <HAL_RCC_MCOConfig+0xc8>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800334a:	4b29      	ldr	r3, [pc, #164]	@ (80033f0 <HAL_RCC_MCOConfig+0xc8>)
 800334c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800335c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335e:	2302      	movs	r3, #2
 8003360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003362:	2303      	movs	r3, #3
 8003364:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800336a:	2300      	movs	r3, #0
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800336e:	f107 031c 	add.w	r3, r7, #28
 8003372:	4619      	mov	r1, r3
 8003374:	481f      	ldr	r0, [pc, #124]	@ (80033f4 <HAL_RCC_MCOConfig+0xcc>)
 8003376:	f7fe ff75 	bl	8002264 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800337a:	4b1d      	ldr	r3, [pc, #116]	@ (80033f0 <HAL_RCC_MCOConfig+0xc8>)
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	430b      	orrs	r3, r1
 8003388:	4919      	ldr	r1, [pc, #100]	@ (80033f0 <HAL_RCC_MCOConfig+0xc8>)
 800338a:	4313      	orrs	r3, r2
 800338c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800338e:	e02a      	b.n	80033e6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003390:	4b17      	ldr	r3, [pc, #92]	@ (80033f0 <HAL_RCC_MCOConfig+0xc8>)
 8003392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003396:	4a16      	ldr	r2, [pc, #88]	@ (80033f0 <HAL_RCC_MCOConfig+0xc8>)
 8003398:	f043 0304 	orr.w	r3, r3, #4
 800339c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033a0:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <HAL_RCC_MCOConfig+0xc8>)
 80033a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80033ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80033c0:	2300      	movs	r3, #0
 80033c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	4619      	mov	r1, r3
 80033ca:	480b      	ldr	r0, [pc, #44]	@ (80033f8 <HAL_RCC_MCOConfig+0xd0>)
 80033cc:	f7fe ff4a 	bl	8002264 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80033d0:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <HAL_RCC_MCOConfig+0xc8>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	01d9      	lsls	r1, r3, #7
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	430b      	orrs	r3, r1
 80033e0:	4903      	ldr	r1, [pc, #12]	@ (80033f0 <HAL_RCC_MCOConfig+0xc8>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	610b      	str	r3, [r1, #16]
}
 80033e6:	bf00      	nop
 80033e8:	3730      	adds	r7, #48	@ 0x30
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	58024400 	.word	0x58024400
 80033f4:	58020000 	.word	0x58020000
 80033f8:	58020800 	.word	0x58020800

080033fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	@ 0x24
 8003400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003402:	4bb3      	ldr	r3, [pc, #716]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800340a:	2b18      	cmp	r3, #24
 800340c:	f200 8155 	bhi.w	80036ba <HAL_RCC_GetSysClockFreq+0x2be>
 8003410:	a201      	add	r2, pc, #4	@ (adr r2, 8003418 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	0800347d 	.word	0x0800347d
 800341c:	080036bb 	.word	0x080036bb
 8003420:	080036bb 	.word	0x080036bb
 8003424:	080036bb 	.word	0x080036bb
 8003428:	080036bb 	.word	0x080036bb
 800342c:	080036bb 	.word	0x080036bb
 8003430:	080036bb 	.word	0x080036bb
 8003434:	080036bb 	.word	0x080036bb
 8003438:	080034a3 	.word	0x080034a3
 800343c:	080036bb 	.word	0x080036bb
 8003440:	080036bb 	.word	0x080036bb
 8003444:	080036bb 	.word	0x080036bb
 8003448:	080036bb 	.word	0x080036bb
 800344c:	080036bb 	.word	0x080036bb
 8003450:	080036bb 	.word	0x080036bb
 8003454:	080036bb 	.word	0x080036bb
 8003458:	080034a9 	.word	0x080034a9
 800345c:	080036bb 	.word	0x080036bb
 8003460:	080036bb 	.word	0x080036bb
 8003464:	080036bb 	.word	0x080036bb
 8003468:	080036bb 	.word	0x080036bb
 800346c:	080036bb 	.word	0x080036bb
 8003470:	080036bb 	.word	0x080036bb
 8003474:	080036bb 	.word	0x080036bb
 8003478:	080034af 	.word	0x080034af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800347c:	4b94      	ldr	r3, [pc, #592]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003488:	4b91      	ldr	r3, [pc, #580]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	08db      	lsrs	r3, r3, #3
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	4a90      	ldr	r2, [pc, #576]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
 8003498:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800349a:	e111      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800349c:	4b8d      	ldr	r3, [pc, #564]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800349e:	61bb      	str	r3, [r7, #24]
      break;
 80034a0:	e10e      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80034a2:	4b8d      	ldr	r3, [pc, #564]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034a4:	61bb      	str	r3, [r7, #24]
      break;
 80034a6:	e10b      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80034a8:	4b8c      	ldr	r3, [pc, #560]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034aa:	61bb      	str	r3, [r7, #24]
      break;
 80034ac:	e108      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034ae:	4b88      	ldr	r3, [pc, #544]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80034b8:	4b85      	ldr	r3, [pc, #532]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034c4:	4b82      	ldr	r3, [pc, #520]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80034ce:	4b80      	ldr	r3, [pc, #512]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d2:	08db      	lsrs	r3, r3, #3
 80034d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80e1 	beq.w	80036b4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	f000 8083 	beq.w	8003600 <HAL_RCC_GetSysClockFreq+0x204>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	f200 80a1 	bhi.w	8003644 <HAL_RCC_GetSysClockFreq+0x248>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x114>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d056      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800350e:	e099      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003510:	4b6f      	ldr	r3, [pc, #444]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d02d      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800351c:	4b6c      	ldr	r3, [pc, #432]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	4a6b      	ldr	r2, [pc, #428]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
 800352c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003546:	4b62      	ldr	r3, [pc, #392]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003556:	ed97 6a02 	vldr	s12, [r7, #8]
 800355a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800355e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800356a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800356e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003572:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003576:	e087      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003582:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80036e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800358a:	4b51      	ldr	r3, [pc, #324]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359a:	ed97 6a02 	vldr	s12, [r7, #8]
 800359e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035ba:	e065      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80036e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ce:	4b40      	ldr	r3, [pc, #256]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035de:	ed97 6a02 	vldr	s12, [r7, #8]
 80035e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035fe:	e043      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80036ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800360e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003612:	4b2f      	ldr	r3, [pc, #188]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003622:	ed97 6a02 	vldr	s12, [r7, #8]
 8003626:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800362a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800363a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003642:	e021      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80036e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003656:	4b1e      	ldr	r3, [pc, #120]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003666:	ed97 6a02 	vldr	s12, [r7, #8]
 800366a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800366e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800367a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003686:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003688:	4b11      	ldr	r3, [pc, #68]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	0a5b      	lsrs	r3, r3, #9
 800368e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003692:	3301      	adds	r3, #1
 8003694:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80036a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ac:	ee17 3a90 	vmov	r3, s15
 80036b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80036b2:	e005      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61bb      	str	r3, [r7, #24]
      break;
 80036b8:	e002      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80036ba:	4b07      	ldr	r3, [pc, #28]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036bc:	61bb      	str	r3, [r7, #24]
      break;
 80036be:	bf00      	nop
  }

  return sysclockfreq;
 80036c0:	69bb      	ldr	r3, [r7, #24]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	@ 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	58024400 	.word	0x58024400
 80036d4:	03d09000 	.word	0x03d09000
 80036d8:	003d0900 	.word	0x003d0900
 80036dc:	017d7840 	.word	0x017d7840
 80036e0:	46000000 	.word	0x46000000
 80036e4:	4c742400 	.word	0x4c742400
 80036e8:	4a742400 	.word	0x4a742400
 80036ec:	4bbebc20 	.word	0x4bbebc20

080036f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036f6:	f7ff fe81 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b10      	ldr	r3, [pc, #64]	@ (8003740 <HAL_RCC_GetHCLKFreq+0x50>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	490f      	ldr	r1, [pc, #60]	@ (8003744 <HAL_RCC_GetHCLKFreq+0x54>)
 8003708:	5ccb      	ldrb	r3, [r1, r3]
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	fa22 f303 	lsr.w	r3, r2, r3
 8003712:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003714:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <HAL_RCC_GetHCLKFreq+0x50>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	4a09      	ldr	r2, [pc, #36]	@ (8003744 <HAL_RCC_GetHCLKFreq+0x54>)
 800371e:	5cd3      	ldrb	r3, [r2, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a07      	ldr	r2, [pc, #28]	@ (8003748 <HAL_RCC_GetHCLKFreq+0x58>)
 800372c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800372e:	4a07      	ldr	r2, [pc, #28]	@ (800374c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003734:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <HAL_RCC_GetHCLKFreq+0x58>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	58024400 	.word	0x58024400
 8003744:	08009988 	.word	0x08009988
 8003748:	24000004 	.word	0x24000004
 800374c:	24000000 	.word	0x24000000

08003750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003754:	f7ff ffcc 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4904      	ldr	r1, [pc, #16]	@ (8003778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	58024400 	.word	0x58024400
 8003778:	08009988 	.word	0x08009988

0800377c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003780:	f7ff ffb6 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4904      	ldr	r1, [pc, #16]	@ (80037a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	58024400 	.word	0x58024400
 80037a4:	08009988 	.word	0x08009988

080037a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	223f      	movs	r2, #63	@ 0x3f
 80037b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003824 <HAL_RCC_GetClockConfig+0x7c>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f003 0207 	and.w	r2, r3, #7
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80037c4:	4b17      	ldr	r3, [pc, #92]	@ (8003824 <HAL_RCC_GetClockConfig+0x7c>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80037d0:	4b14      	ldr	r3, [pc, #80]	@ (8003824 <HAL_RCC_GetClockConfig+0x7c>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 020f 	and.w	r2, r3, #15
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <HAL_RCC_GetClockConfig+0x7c>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80037e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003824 <HAL_RCC_GetClockConfig+0x7c>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80037f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <HAL_RCC_GetClockConfig+0x7c>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003800:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <HAL_RCC_GetClockConfig+0x7c>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_RCC_GetClockConfig+0x80>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 020f 	and.w	r2, r3, #15
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	601a      	str	r2, [r3, #0]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	58024400 	.word	0x58024400
 8003828:	52002000 	.word	0x52002000

0800382c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800382c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003830:	b0cc      	sub	sp, #304	@ 0x130
 8003832:	af00      	add	r7, sp, #0
 8003834:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003838:	2300      	movs	r3, #0
 800383a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800383e:	2300      	movs	r3, #0
 8003840:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003844:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003850:	2500      	movs	r5, #0
 8003852:	ea54 0305 	orrs.w	r3, r4, r5
 8003856:	d049      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003858:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800385c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800385e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003862:	d02f      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003864:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003868:	d828      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800386a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800386e:	d01a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003874:	d822      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800387a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800387e:	d007      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003880:	e01c      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003882:	4bb8      	ldr	r3, [pc, #736]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003886:	4ab7      	ldr	r2, [pc, #732]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800388c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800388e:	e01a      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003890:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003894:	3308      	adds	r3, #8
 8003896:	2102      	movs	r1, #2
 8003898:	4618      	mov	r0, r3
 800389a:	f001 fccf 	bl	800523c <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038a4:	e00f      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038aa:	3328      	adds	r3, #40	@ 0x28
 80038ac:	2102      	movs	r1, #2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 fd76 	bl	80053a0 <RCCEx_PLL3_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038ba:	e004      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80038c2:	e000      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80038c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038ce:	4ba5      	ldr	r3, [pc, #660]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038dc:	4aa1      	ldr	r2, [pc, #644]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038de:	430b      	orrs	r3, r1
 80038e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80038e2:	e003      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80038f8:	f04f 0900 	mov.w	r9, #0
 80038fc:	ea58 0309 	orrs.w	r3, r8, r9
 8003900:	d047      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003908:	2b04      	cmp	r3, #4
 800390a:	d82a      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800390c:	a201      	add	r2, pc, #4	@ (adr r2, 8003914 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003929 	.word	0x08003929
 8003918:	08003937 	.word	0x08003937
 800391c:	0800394d 	.word	0x0800394d
 8003920:	0800396b 	.word	0x0800396b
 8003924:	0800396b 	.word	0x0800396b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003928:	4b8e      	ldr	r3, [pc, #568]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	4a8d      	ldr	r2, [pc, #564]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800392e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003934:	e01a      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003936:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800393a:	3308      	adds	r3, #8
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f001 fc7c 	bl	800523c <RCCEx_PLL2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800394a:	e00f      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800394c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003950:	3328      	adds	r3, #40	@ 0x28
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f001 fd23 	bl	80053a0 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003960:	e004      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003968:	e000      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800396a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003974:	4b7b      	ldr	r3, [pc, #492]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003978:	f023 0107 	bic.w	r1, r3, #7
 800397c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003982:	4a78      	ldr	r2, [pc, #480]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003984:	430b      	orrs	r3, r1
 8003986:	6513      	str	r3, [r2, #80]	@ 0x50
 8003988:	e003      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800398e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003992:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800399e:	f04f 0b00 	mov.w	fp, #0
 80039a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80039a6:	d04c      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80039a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039b2:	d030      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80039b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039b8:	d829      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80039bc:	d02d      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039be:	2bc0      	cmp	r3, #192	@ 0xc0
 80039c0:	d825      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039c2:	2b80      	cmp	r3, #128	@ 0x80
 80039c4:	d018      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039c6:	2b80      	cmp	r3, #128	@ 0x80
 80039c8:	d821      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80039ce:	2b40      	cmp	r3, #64	@ 0x40
 80039d0:	d007      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80039d2:	e01c      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4b63      	ldr	r3, [pc, #396]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	4a62      	ldr	r2, [pc, #392]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039e0:	e01c      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039e6:	3308      	adds	r3, #8
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 fc26 	bl	800523c <RCCEx_PLL2_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039f6:	e011      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039fc:	3328      	adds	r3, #40	@ 0x28
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 fccd 	bl	80053a0 <RCCEx_PLL3_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a0c:	e006      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a14:	e002      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a16:	bf00      	nop
 8003a18:	e000      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a24:	4b4f      	ldr	r3, [pc, #316]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a32:	4a4c      	ldr	r2, [pc, #304]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a38:	e003      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003a4e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003a58:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	d053      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a6e:	d035      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003a70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a74:	d82e      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a7a:	d031      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a80:	d828      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a86:	d01a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003a88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a8c:	d822      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a96:	d007      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a98:	e01c      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9a:	4b32      	ldr	r3, [pc, #200]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9e:	4a31      	ldr	r2, [pc, #196]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aa6:	e01c      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aac:	3308      	adds	r3, #8
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 fbc3 	bl	800523c <RCCEx_PLL2_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003abc:	e011      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ac2:	3328      	adds	r3, #40	@ 0x28
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 fc6a 	bl	80053a0 <RCCEx_PLL3_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ad2:	e006      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ada:	e002      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003adc:	bf00      	nop
 8003ade:	e000      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003aea:	4b1e      	ldr	r3, [pc, #120]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003af6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003afa:	4a1a      	ldr	r2, [pc, #104]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003b20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d056      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b36:	d038      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b3c:	d831      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b42:	d034      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003b44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b48:	d82b      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b4e:	d01d      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b54:	d825      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003b5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b60:	e01f      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b62:	bf00      	nop
 8003b64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b68:	4ba2      	ldr	r3, [pc, #648]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	4aa1      	ldr	r2, [pc, #644]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b74:	e01c      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fb5c 	bl	800523c <RCCEx_PLL2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b8a:	e011      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b90:	3328      	adds	r3, #40	@ 0x28
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f001 fc03 	bl	80053a0 <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ba0:	e006      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ba8:	e002      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bb8:	4b8e      	ldr	r3, [pc, #568]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bc8:	4a8a      	ldr	r2, [pc, #552]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bce:	e003      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bd4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003be4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003bee:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d03a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfe:	2b30      	cmp	r3, #48	@ 0x30
 8003c00:	d01f      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003c02:	2b30      	cmp	r3, #48	@ 0x30
 8003c04:	d819      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d00c      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d815      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d019      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d111      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c16:	4b77      	ldr	r3, [pc, #476]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1a:	4a76      	ldr	r2, [pc, #472]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c22:	e011      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c28:	3308      	adds	r3, #8
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 fb05 	bl	800523c <RCCEx_PLL2_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c38:	e006      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003c40:	e002      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c48:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c50:	4b68      	ldr	r3, [pc, #416]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5e:	4a65      	ldr	r2, [pc, #404]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c60:	430b      	orrs	r3, r1
 8003c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c64:	e003      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003c7a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003c84:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	d051      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c98:	d035      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c9e:	d82e      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ca0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ca4:	d031      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ca6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003caa:	d828      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb0:	d01a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb6:	d822      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc0:	d007      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003cc2:	e01c      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cd0:	e01c      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 faae 	bl	800523c <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ce6:	e011      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cec:	3328      	adds	r3, #40	@ 0x28
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 fb55 	bl	80053a0 <RCCEx_PLL3_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003d04:	e002      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d14:	4b37      	ldr	r3, [pc, #220]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d22:	4a34      	ldr	r2, [pc, #208]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d28:	e003      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003d3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003d42:	2300      	movs	r3, #0
 8003d44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003d48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	d056      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d5c:	d033      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d62:	d82c      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d68:	d02f      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003d6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d6e:	d826      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d74:	d02b      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003d76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d7a:	d820      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d80:	d012      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003d82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d86:	d81a      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d022      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d90:	d115      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d96:	3308      	adds	r3, #8
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 fa4e 	bl	800523c <RCCEx_PLL2_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003da6:	e015      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dac:	3328      	adds	r3, #40	@ 0x28
 8003dae:	2101      	movs	r1, #1
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 faf5 	bl	80053a0 <RCCEx_PLL3_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dc6:	bf00      	nop
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10d      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ddc:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003de8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dea:	4a02      	ldr	r2, [pc, #8]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003df0:	e006      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003df2:	bf00      	nop
 8003df4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dfc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003e0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e16:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	d055      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e2c:	d033      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e32:	d82c      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e38:	d02f      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3e:	d826      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e44:	d02b      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003e46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e4a:	d820      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e50:	d012      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e56:	d81a      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d022      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003e5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e60:	d115      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e66:	3308      	adds	r3, #8
 8003e68:	2101      	movs	r1, #1
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 f9e6 	bl	800523c <RCCEx_PLL2_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e76:	e015      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e7c:	3328      	adds	r3, #40	@ 0x28
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 fa8d 	bl	80053a0 <RCCEx_PLL3_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e96:	bf00      	nop
 8003e98:	e004      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003eac:	4bb6      	ldr	r3, [pc, #728]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003eb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ebc:	4ab2      	ldr	r2, [pc, #712]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ec2:	e003      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ec8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	d02a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d011      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003efa:	d10a      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f00:	3308      	adds	r3, #8
 8003f02:	2101      	movs	r1, #1
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 f999 	bl	800523c <RCCEx_PLL2_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003f10:	e004      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003f18:	e000      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003f24:	4b98      	ldr	r3, [pc, #608]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f28:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f32:	4a95      	ldr	r2, [pc, #596]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f34:	430b      	orrs	r3, r1
 8003f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f38:	e003      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003f58:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	d037      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f6c:	d00e      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f72:	d816      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d018      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f7c:	d111      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7e:	4b82      	ldr	r3, [pc, #520]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	4a81      	ldr	r2, [pc, #516]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f8a:	e00f      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f90:	3308      	adds	r3, #8
 8003f92:	2101      	movs	r1, #1
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 f951 	bl	800523c <RCCEx_PLL2_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fa0:	e004      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003fa8:	e000      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fb4:	4b74      	ldr	r3, [pc, #464]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc2:	4a71      	ldr	r2, [pc, #452]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fc8:	e003      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003fde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003fe8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	d03a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d81d      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004041 	.word	0x08004041
 8004008:	08004015 	.word	0x08004015
 800400c:	08004023 	.word	0x08004023
 8004010:	08004041 	.word	0x08004041
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004014:	4b5c      	ldr	r3, [pc, #368]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	4a5b      	ldr	r2, [pc, #364]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800401a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800401e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004020:	e00f      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004022:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004026:	3308      	adds	r3, #8
 8004028:	2102      	movs	r1, #2
 800402a:	4618      	mov	r0, r3
 800402c:	f001 f906 	bl	800523c <RCCEx_PLL2_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004036:	e004      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004042:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800404a:	4b4f      	ldr	r3, [pc, #316]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800404c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404e:	f023 0103 	bic.w	r1, r3, #3
 8004052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004058:	4a4b      	ldr	r2, [pc, #300]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800405a:	430b      	orrs	r3, r1
 800405c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800405e:	e003      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004064:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004074:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800407e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004082:	460b      	mov	r3, r1
 8004084:	4313      	orrs	r3, r2
 8004086:	f000 80a0 	beq.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800408a:	4b40      	ldr	r3, [pc, #256]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a3f      	ldr	r2, [pc, #252]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004094:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004096:	f7fd ffb7 	bl	8002008 <HAL_GetTick>
 800409a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800409e:	e00b      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a0:	f7fd ffb2 	bl	8002008 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b64      	cmp	r3, #100	@ 0x64
 80040ae:	d903      	bls.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80040b6:	e005      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040b8:	4b34      	ldr	r3, [pc, #208]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ed      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80040c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d17a      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80040d8:	4053      	eors	r3, r2
 80040da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d015      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e2:	4b29      	ldr	r3, [pc, #164]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ee:	4b26      	ldr	r3, [pc, #152]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f2:	4a25      	ldr	r2, [pc, #148]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040fa:	4b23      	ldr	r3, [pc, #140]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fe:	4a22      	ldr	r2, [pc, #136]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004104:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004106:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004108:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800410c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800410e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004112:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800411a:	d118      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd ff74 	bl	8002008 <HAL_GetTick>
 8004120:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004124:	e00d      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004126:	f7fd ff6f 	bl	8002008 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004130:	1ad2      	subs	r2, r2, r3
 8004132:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004136:	429a      	cmp	r2, r3
 8004138:	d903      	bls.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8004140:	e005      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004142:	4b11      	ldr	r3, [pc, #68]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0eb      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800414e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004152:	2b00      	cmp	r3, #0
 8004154:	d130      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004156:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800415a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800415e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004166:	d115      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004168:	4b07      	ldr	r3, [pc, #28]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004170:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004174:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004178:	091a      	lsrs	r2, r3, #4
 800417a:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800417c:	4013      	ands	r3, r2
 800417e:	4a02      	ldr	r2, [pc, #8]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004180:	430b      	orrs	r3, r1
 8004182:	6113      	str	r3, [r2, #16]
 8004184:	e00c      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004186:	bf00      	nop
 8004188:	58024400 	.word	0x58024400
 800418c:	58024800 	.word	0x58024800
 8004190:	00ffffcf 	.word	0x00ffffcf
 8004194:	4bd4      	ldr	r3, [pc, #848]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	4ad3      	ldr	r2, [pc, #844]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800419a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800419e:	6113      	str	r3, [r2, #16]
 80041a0:	4bd1      	ldr	r3, [pc, #836]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80041a2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80041a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b0:	4acd      	ldr	r2, [pc, #820]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80041b2:	430b      	orrs	r3, r1
 80041b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b6:	e008      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80041c0:	e003      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f002 0301 	and.w	r3, r2, #1
 80041d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f000 808b 	beq.w	8004302 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80041ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f4:	2b28      	cmp	r3, #40	@ 0x28
 80041f6:	d86b      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80041f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004200 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	080042d9 	.word	0x080042d9
 8004204:	080042d1 	.word	0x080042d1
 8004208:	080042d1 	.word	0x080042d1
 800420c:	080042d1 	.word	0x080042d1
 8004210:	080042d1 	.word	0x080042d1
 8004214:	080042d1 	.word	0x080042d1
 8004218:	080042d1 	.word	0x080042d1
 800421c:	080042d1 	.word	0x080042d1
 8004220:	080042a5 	.word	0x080042a5
 8004224:	080042d1 	.word	0x080042d1
 8004228:	080042d1 	.word	0x080042d1
 800422c:	080042d1 	.word	0x080042d1
 8004230:	080042d1 	.word	0x080042d1
 8004234:	080042d1 	.word	0x080042d1
 8004238:	080042d1 	.word	0x080042d1
 800423c:	080042d1 	.word	0x080042d1
 8004240:	080042bb 	.word	0x080042bb
 8004244:	080042d1 	.word	0x080042d1
 8004248:	080042d1 	.word	0x080042d1
 800424c:	080042d1 	.word	0x080042d1
 8004250:	080042d1 	.word	0x080042d1
 8004254:	080042d1 	.word	0x080042d1
 8004258:	080042d1 	.word	0x080042d1
 800425c:	080042d1 	.word	0x080042d1
 8004260:	080042d9 	.word	0x080042d9
 8004264:	080042d1 	.word	0x080042d1
 8004268:	080042d1 	.word	0x080042d1
 800426c:	080042d1 	.word	0x080042d1
 8004270:	080042d1 	.word	0x080042d1
 8004274:	080042d1 	.word	0x080042d1
 8004278:	080042d1 	.word	0x080042d1
 800427c:	080042d1 	.word	0x080042d1
 8004280:	080042d9 	.word	0x080042d9
 8004284:	080042d1 	.word	0x080042d1
 8004288:	080042d1 	.word	0x080042d1
 800428c:	080042d1 	.word	0x080042d1
 8004290:	080042d1 	.word	0x080042d1
 8004294:	080042d1 	.word	0x080042d1
 8004298:	080042d1 	.word	0x080042d1
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080042d9 	.word	0x080042d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042a8:	3308      	adds	r3, #8
 80042aa:	2101      	movs	r1, #1
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 ffc5 	bl	800523c <RCCEx_PLL2_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042b8:	e00f      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042be:	3328      	adds	r3, #40	@ 0x28
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f86c 	bl	80053a0 <RCCEx_PLL3_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042ce:	e004      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80042d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10b      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042e2:	4b81      	ldr	r3, [pc, #516]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80042e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80042ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f2:	4a7d      	ldr	r2, [pc, #500]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80042f8:	e003      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004302:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f002 0302 	and.w	r3, r2, #2
 800430e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004318:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800431c:	460b      	mov	r3, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	d042      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004328:	2b05      	cmp	r3, #5
 800432a:	d825      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800432c:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004381 	.word	0x08004381
 8004338:	0800434d 	.word	0x0800434d
 800433c:	08004363 	.word	0x08004363
 8004340:	08004381 	.word	0x08004381
 8004344:	08004381 	.word	0x08004381
 8004348:	08004381 	.word	0x08004381
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800434c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004350:	3308      	adds	r3, #8
 8004352:	2101      	movs	r1, #1
 8004354:	4618      	mov	r0, r3
 8004356:	f000 ff71 	bl	800523c <RCCEx_PLL2_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004360:	e00f      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004362:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004366:	3328      	adds	r3, #40	@ 0x28
 8004368:	2101      	movs	r1, #1
 800436a:	4618      	mov	r0, r3
 800436c:	f001 f818 	bl	80053a0 <RCCEx_PLL3_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004376:	e004      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004382:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800438a:	4b57      	ldr	r3, [pc, #348]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438e:	f023 0107 	bic.w	r1, r3, #7
 8004392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004396:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004398:	4a53      	ldr	r2, [pc, #332]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800439a:	430b      	orrs	r3, r1
 800439c:	6553      	str	r3, [r2, #84]	@ 0x54
 800439e:	e003      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	f002 0304 	and.w	r3, r2, #4
 80043b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043b8:	2300      	movs	r3, #0
 80043ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	d044      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80043c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d825      	bhi.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80043d4:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004429 	.word	0x08004429
 80043e0:	080043f5 	.word	0x080043f5
 80043e4:	0800440b 	.word	0x0800440b
 80043e8:	08004429 	.word	0x08004429
 80043ec:	08004429 	.word	0x08004429
 80043f0:	08004429 	.word	0x08004429
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043f8:	3308      	adds	r3, #8
 80043fa:	2101      	movs	r1, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 ff1d 	bl	800523c <RCCEx_PLL2_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004408:	e00f      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800440a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800440e:	3328      	adds	r3, #40	@ 0x28
 8004410:	2101      	movs	r1, #1
 8004412:	4618      	mov	r0, r3
 8004414:	f000 ffc4 	bl	80053a0 <RCCEx_PLL3_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800441e:	e004      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004426:	e000      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800442a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004432:	4b2d      	ldr	r3, [pc, #180]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004436:	f023 0107 	bic.w	r1, r3, #7
 800443a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800443e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004442:	4a29      	ldr	r2, [pc, #164]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004444:	430b      	orrs	r3, r1
 8004446:	6593      	str	r3, [r2, #88]	@ 0x58
 8004448:	e003      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800444e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445a:	f002 0320 	and.w	r3, r2, #32
 800445e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004462:	2300      	movs	r3, #0
 8004464:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004468:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800446c:	460b      	mov	r3, r1
 800446e:	4313      	orrs	r3, r2
 8004470:	d057      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800447a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800447e:	d035      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004480:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004484:	d82c      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800448a:	d031      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800448c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004490:	d826      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004492:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004496:	d02d      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004498:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800449c:	d820      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800449e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044a2:	d012      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80044a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044a8:	d81a      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d024      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80044ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044b2:	d115      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044b8:	3308      	adds	r3, #8
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 febd 	bl	800523c <RCCEx_PLL2_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044c8:	e017      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044ce:	3328      	adds	r3, #40	@ 0x28
 80044d0:	2102      	movs	r1, #2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 ff64 	bl	80053a0 <RCCEx_PLL3_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044de:	e00c      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80044e6:	e008      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80044e8:	58024400 	.word	0x58024400
        break;
 80044ec:	bf00      	nop
 80044ee:	e004      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80044f0:	bf00      	nop
 80044f2:	e002      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80044f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004502:	4bc2      	ldr	r3, [pc, #776]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800450a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800450e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004512:	4abe      	ldr	r2, [pc, #760]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004514:	430b      	orrs	r3, r1
 8004516:	6553      	str	r3, [r2, #84]	@ 0x54
 8004518:	e003      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800451e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800452e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004532:	2300      	movs	r3, #0
 8004534:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004538:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800453c:	460b      	mov	r3, r1
 800453e:	4313      	orrs	r3, r2
 8004540:	d055      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004546:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800454a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800454e:	d033      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004550:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004554:	d82c      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455a:	d02f      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800455c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004560:	d826      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004562:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004566:	d02b      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004568:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800456c:	d820      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800456e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004572:	d012      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004578:	d81a      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800457a:	2b00      	cmp	r3, #0
 800457c:	d022      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800457e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004582:	d115      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004588:	3308      	adds	r3, #8
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fe55 	bl	800523c <RCCEx_PLL2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004598:	e015      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800459a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800459e:	3328      	adds	r3, #40	@ 0x28
 80045a0:	2102      	movs	r1, #2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fefc 	bl	80053a0 <RCCEx_PLL3_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045ae:	e00a      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80045b6:	e006      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80045b8:	bf00      	nop
 80045ba:	e004      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80045bc:	bf00      	nop
 80045be:	e002      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80045c0:	bf00      	nop
 80045c2:	e000      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80045c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10b      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045ce:	4b8f      	ldr	r3, [pc, #572]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80045d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045de:	4a8b      	ldr	r2, [pc, #556]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045e4:	e003      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80045fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045fe:	2300      	movs	r3, #0
 8004600:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004604:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004608:	460b      	mov	r3, r1
 800460a:	4313      	orrs	r3, r2
 800460c:	d055      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800460e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004612:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004616:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800461a:	d033      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800461c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004620:	d82c      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004626:	d02f      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800462c:	d826      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800462e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004632:	d02b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004634:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004638:	d820      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800463a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800463e:	d012      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004644:	d81a      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d022      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800464a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800464e:	d115      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004650:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004654:	3308      	adds	r3, #8
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fdef 	bl	800523c <RCCEx_PLL2_Config>
 800465e:	4603      	mov	r3, r0
 8004660:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004664:	e015      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800466a:	3328      	adds	r3, #40	@ 0x28
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fe96 	bl	80053a0 <RCCEx_PLL3_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800467a:	e00a      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004682:	e006      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004684:	bf00      	nop
 8004686:	e004      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004688:	bf00      	nop
 800468a:	e002      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800468c:	bf00      	nop
 800468e:	e000      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004692:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10b      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800469a:	4b5c      	ldr	r3, [pc, #368]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800469c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80046a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046aa:	4a58      	ldr	r2, [pc, #352]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80046b0:	e003      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f002 0308 	and.w	r3, r2, #8
 80046c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046ca:	2300      	movs	r3, #0
 80046cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046d0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d01e      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80046da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e6:	d10c      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046ec:	3328      	adds	r3, #40	@ 0x28
 80046ee:	2102      	movs	r1, #2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fe55 	bl	80053a0 <RCCEx_PLL3_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004702:	4b42      	ldr	r3, [pc, #264]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004706:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800470a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004712:	4a3e      	ldr	r2, [pc, #248]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004714:	430b      	orrs	r3, r1
 8004716:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f002 0310 	and.w	r3, r2, #16
 8004724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004728:	2300      	movs	r3, #0
 800472a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800472e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004732:	460b      	mov	r3, r1
 8004734:	4313      	orrs	r3, r2
 8004736:	d01e      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004738:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800473c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004744:	d10c      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004746:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800474a:	3328      	adds	r3, #40	@ 0x28
 800474c:	2102      	movs	r1, #2
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fe26 	bl	80053a0 <RCCEx_PLL3_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004760:	4b2a      	ldr	r3, [pc, #168]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004768:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800476c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004770:	4a26      	ldr	r2, [pc, #152]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004772:	430b      	orrs	r3, r1
 8004774:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004776:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004782:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004786:	2300      	movs	r3, #0
 8004788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800478c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004790:	460b      	mov	r3, r1
 8004792:	4313      	orrs	r3, r2
 8004794:	d040      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004796:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800479a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800479e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047a2:	d022      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80047a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047a8:	d81b      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b2:	d00b      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80047b4:	e015      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047ba:	3308      	adds	r3, #8
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fd3c 	bl	800523c <RCCEx_PLL2_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047ca:	e00f      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047d0:	3328      	adds	r3, #40	@ 0x28
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fde3 	bl	80053a0 <RCCEx_PLL3_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047e0:	e004      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80047e8:	e000      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80047ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10d      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80047fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004800:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004804:	4a01      	ldr	r2, [pc, #4]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004806:	430b      	orrs	r3, r1
 8004808:	6593      	str	r3, [r2, #88]	@ 0x58
 800480a:	e005      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800480c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004814:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004824:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004826:	2300      	movs	r3, #0
 8004828:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800482a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800482e:	460b      	mov	r3, r1
 8004830:	4313      	orrs	r3, r2
 8004832:	d03b      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004834:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800483c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004840:	d01f      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004842:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004846:	d818      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800484c:	d003      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800484e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004852:	d007      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004854:	e011      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004856:	4b64      	ldr	r3, [pc, #400]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	4a63      	ldr	r2, [pc, #396]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800485c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004862:	e00f      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004868:	3328      	adds	r3, #40	@ 0x28
 800486a:	2101      	movs	r1, #1
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fd97 	bl	80053a0 <RCCEx_PLL3_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004878:	e004      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004880:	e000      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8004882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004884:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10b      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800488c:	4b56      	ldr	r3, [pc, #344]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800488e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004890:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004894:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800489c:	4a52      	ldr	r2, [pc, #328]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800489e:	430b      	orrs	r3, r1
 80048a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80048a2:	e003      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80048b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80048ba:	2300      	movs	r3, #0
 80048bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80048be:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d031      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80048c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80048d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d6:	d007      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80048d8:	e011      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048da:	4b43      	ldr	r3, [pc, #268]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	4a42      	ldr	r2, [pc, #264]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80048e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048e6:	e00e      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048ec:	3308      	adds	r3, #8
 80048ee:	2102      	movs	r1, #2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fca3 	bl	800523c <RCCEx_PLL2_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048fc:	e003      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004906:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800490e:	4b36      	ldr	r3, [pc, #216]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004912:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004916:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800491a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491c:	4a32      	ldr	r2, [pc, #200]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800491e:	430b      	orrs	r3, r1
 8004920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004922:	e003      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004928:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800492c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004938:	66bb      	str	r3, [r7, #104]	@ 0x68
 800493a:	2300      	movs	r3, #0
 800493c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800493e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004942:	460b      	mov	r3, r1
 8004944:	4313      	orrs	r3, r2
 8004946:	d00c      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004948:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800494c:	3328      	adds	r3, #40	@ 0x28
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fd25 	bl	80053a0 <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004962:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800496e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004970:	2300      	movs	r3, #0
 8004972:	667b      	str	r3, [r7, #100]	@ 0x64
 8004974:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d03a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800497e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800498a:	d018      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800498c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004990:	d811      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004996:	d014      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800499c:	d80b      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d011      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a6:	d106      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a8:	4b0f      	ldr	r3, [pc, #60]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	4a0e      	ldr	r2, [pc, #56]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80049b4:	e008      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80049bc:	e004      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80049be:	bf00      	nop
 80049c0:	e002      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80049c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10d      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049d0:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049e0:	4a01      	ldr	r2, [pc, #4]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80049e2:	430b      	orrs	r3, r1
 80049e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80049e6:	e005      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80049e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004a00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a02:	2300      	movs	r3, #0
 8004a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	d009      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a10:	4baa      	ldr	r3, [pc, #680]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004a18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a1e:	4aa7      	ldr	r2, [pc, #668]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004a30:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a32:	2300      	movs	r3, #0
 8004a34:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a40:	4b9e      	ldr	r3, [pc, #632]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004a48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004a50:	4a9a      	ldr	r2, [pc, #616]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a52:	430b      	orrs	r3, r1
 8004a54:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004a62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a64:	2300      	movs	r3, #0
 8004a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	d009      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a72:	4b92      	ldr	r3, [pc, #584]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a76:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a80:	4a8e      	ldr	r2, [pc, #568]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a82:	430b      	orrs	r3, r1
 8004a84:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a92:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a94:	2300      	movs	r3, #0
 8004a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aa2:	4b86      	ldr	r3, [pc, #536]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	4a85      	ldr	r2, [pc, #532]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004aa8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004aac:	6113      	str	r3, [r2, #16]
 8004aae:	4b83      	ldr	r3, [pc, #524]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004ab0:	6919      	ldr	r1, [r3, #16]
 8004ab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ab6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004aba:	4a80      	ldr	r2, [pc, #512]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004acc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ace:	2300      	movs	r3, #0
 8004ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ad2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004adc:	4b77      	ldr	r3, [pc, #476]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aea:	4a74      	ldr	r2, [pc, #464]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004aec:	430b      	orrs	r3, r1
 8004aee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004afc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004afe:	2300      	movs	r3, #0
 8004b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004b06:	460b      	mov	r3, r1
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b10:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1c:	4a67      	ldr	r2, [pc, #412]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	d011      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b42:	3308      	adds	r3, #8
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fb78 	bl	800523c <RCCEx_PLL2_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004b52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	6239      	str	r1, [r7, #32]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d011      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b82:	3308      	adds	r3, #8
 8004b84:	2101      	movs	r1, #1
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fb58 	bl	800523c <RCCEx_PLL2_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004b92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	2100      	movs	r1, #0
 8004bac:	61b9      	str	r1, [r7, #24]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	d011      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fb38 	bl	800523c <RCCEx_PLL2_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004bd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bde:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	2100      	movs	r1, #0
 8004bec:	6139      	str	r1, [r7, #16]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	d011      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c02:	3328      	adds	r3, #40	@ 0x28
 8004c04:	2100      	movs	r1, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fbca 	bl	80053a0 <RCCEx_PLL3_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8004c12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	d011      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c42:	3328      	adds	r3, #40	@ 0x28
 8004c44:	2101      	movs	r1, #1
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fbaa 	bl	80053a0 <RCCEx_PLL3_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004c52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	6039      	str	r1, [r7, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	d011      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c82:	3328      	adds	r3, #40	@ 0x28
 8004c84:	2102      	movs	r1, #2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fb8a 	bl	80053a0 <RCCEx_PLL3_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004c92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8004ca2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	e000      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cbc:	58024400 	.word	0x58024400

08004cc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004cc4:	f7fe fd14 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	4904      	ldr	r1, [pc, #16]	@ (8004ce8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004cd6:	5ccb      	ldrb	r3, [r1, r3]
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	08009988 	.word	0x08009988

08004cec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b089      	sub	sp, #36	@ 0x24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cf4:	4ba1      	ldr	r3, [pc, #644]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004cfe:	4b9f      	ldr	r3, [pc, #636]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	0b1b      	lsrs	r3, r3, #12
 8004d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d0a:	4b9c      	ldr	r3, [pc, #624]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004d16:	4b99      	ldr	r3, [pc, #612]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1a:	08db      	lsrs	r3, r3, #3
 8004d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8111 	beq.w	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	f000 8083 	beq.w	8004e48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	f200 80a1 	bhi.w	8004e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d056      	beq.n	8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d56:	e099      	b.n	8004e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d58:	4b88      	ldr	r3, [pc, #544]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02d      	beq.n	8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d64:	4b85      	ldr	r3, [pc, #532]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	08db      	lsrs	r3, r3, #3
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	4a84      	ldr	r2, [pc, #528]	@ (8004f80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	ee07 3a90 	vmov	s15, r3
 8004d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004dbe:	e087      	b.n	8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004de6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e02:	e065      	b.n	8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e16:	4b59      	ldr	r3, [pc, #356]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e46:	e043      	b.n	8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5a:	4b48      	ldr	r3, [pc, #288]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e8a:	e021      	b.n	8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9e:	4b37      	ldr	r3, [pc, #220]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ece:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	0a5b      	lsrs	r3, r3, #9
 8004ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef6:	ee17 2a90 	vmov	r2, s15
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004efe:	4b1f      	ldr	r3, [pc, #124]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f24:	ee17 2a90 	vmov	r2, s15
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f2c:	4b13      	ldr	r3, [pc, #76]	@ (8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	0e1b      	lsrs	r3, r3, #24
 8004f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f52:	ee17 2a90 	vmov	r2, s15
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f5a:	e008      	b.n	8004f6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	609a      	str	r2, [r3, #8]
}
 8004f6e:	bf00      	nop
 8004f70:	3724      	adds	r7, #36	@ 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	03d09000 	.word	0x03d09000
 8004f84:	46000000 	.word	0x46000000
 8004f88:	4c742400 	.word	0x4c742400
 8004f8c:	4a742400 	.word	0x4a742400
 8004f90:	4bbebc20 	.word	0x4bbebc20

08004f94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b089      	sub	sp, #36	@ 0x24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f9c:	4ba1      	ldr	r3, [pc, #644]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004fa6:	4b9f      	ldr	r3, [pc, #636]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004faa:	0d1b      	lsrs	r3, r3, #20
 8004fac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fb2:	4b9c      	ldr	r3, [pc, #624]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004fbe:	4b99      	ldr	r3, [pc, #612]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc2:	08db      	lsrs	r3, r3, #3
 8004fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	fb02 f303 	mul.w	r3, r2, r3
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8111 	beq.w	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	f000 8083 	beq.w	80050f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	f200 80a1 	bhi.w	8005134 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d056      	beq.n	80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ffe:	e099      	b.n	8005134 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005000:	4b88      	ldr	r3, [pc, #544]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d02d      	beq.n	8005068 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800500c:	4b85      	ldr	r3, [pc, #532]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	08db      	lsrs	r3, r3, #3
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	4a84      	ldr	r2, [pc, #528]	@ (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
 800501c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	ee07 3a90 	vmov	s15, r3
 8005024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005036:	4b7b      	ldr	r3, [pc, #492]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005046:	ed97 6a03 	vldr	s12, [r7, #12]
 800504a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800522c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800504e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800505a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005062:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005066:	e087      	b.n	8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005072:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507a:	4b6a      	ldr	r3, [pc, #424]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508a:	ed97 6a03 	vldr	s12, [r7, #12]
 800508e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800522c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800509e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050aa:	e065      	b.n	8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050be:	4b59      	ldr	r3, [pc, #356]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800522c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ee:	e043      	b.n	8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80050fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005102:	4b48      	ldr	r3, [pc, #288]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005112:	ed97 6a03 	vldr	s12, [r7, #12]
 8005116:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800522c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800511a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800511e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005132:	e021      	b.n	8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005146:	4b37      	ldr	r3, [pc, #220]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005156:	ed97 6a03 	vldr	s12, [r7, #12]
 800515a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800522c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800515e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800516a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005176:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005178:	4b2a      	ldr	r3, [pc, #168]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	0a5b      	lsrs	r3, r3, #9
 800517e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800518e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005192:	edd7 6a07 	vldr	s13, [r7, #28]
 8005196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800519e:	ee17 2a90 	vmov	r2, s15
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051b0:	ee07 3a90 	vmov	s15, r3
 80051b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80051c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051cc:	ee17 2a90 	vmov	r2, s15
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80051d4:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	0e1b      	lsrs	r3, r3, #24
 80051da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80051f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051fa:	ee17 2a90 	vmov	r2, s15
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005202:	e008      	b.n	8005216 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	609a      	str	r2, [r3, #8]
}
 8005216:	bf00      	nop
 8005218:	3724      	adds	r7, #36	@ 0x24
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	58024400 	.word	0x58024400
 8005228:	03d09000 	.word	0x03d09000
 800522c:	46000000 	.word	0x46000000
 8005230:	4c742400 	.word	0x4c742400
 8005234:	4a742400 	.word	0x4a742400
 8005238:	4bbebc20 	.word	0x4bbebc20

0800523c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800524a:	4b53      	ldr	r3, [pc, #332]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 800524c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	2b03      	cmp	r3, #3
 8005254:	d101      	bne.n	800525a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e099      	b.n	800538e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800525a:	4b4f      	ldr	r3, [pc, #316]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a4e      	ldr	r2, [pc, #312]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005260:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005266:	f7fc fecf 	bl	8002008 <HAL_GetTick>
 800526a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800526c:	e008      	b.n	8005280 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800526e:	f7fc fecb 	bl	8002008 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e086      	b.n	800538e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005280:	4b45      	ldr	r3, [pc, #276]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800528c:	4b42      	ldr	r3, [pc, #264]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	031b      	lsls	r3, r3, #12
 800529a:	493f      	ldr	r1, [pc, #252]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	628b      	str	r3, [r1, #40]	@ 0x28
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	025b      	lsls	r3, r3, #9
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	061b      	lsls	r3, r3, #24
 80052cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80052d0:	4931      	ldr	r1, [pc, #196]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80052d6:	4b30      	ldr	r3, [pc, #192]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	492d      	ldr	r1, [pc, #180]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80052e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	f023 0220 	bic.w	r2, r3, #32
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	4928      	ldr	r1, [pc, #160]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80052fa:	4b27      	ldr	r3, [pc, #156]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fe:	4a26      	ldr	r2, [pc, #152]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005300:	f023 0310 	bic.w	r3, r3, #16
 8005304:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005306:	4b24      	ldr	r3, [pc, #144]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005308:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800530a:	4b24      	ldr	r3, [pc, #144]	@ (800539c <RCCEx_PLL2_Config+0x160>)
 800530c:	4013      	ands	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	69d2      	ldr	r2, [r2, #28]
 8005312:	00d2      	lsls	r2, r2, #3
 8005314:	4920      	ldr	r1, [pc, #128]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005316:	4313      	orrs	r3, r2
 8005318:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800531a:	4b1f      	ldr	r3, [pc, #124]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	4a1e      	ldr	r2, [pc, #120]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005320:	f043 0310 	orr.w	r3, r3, #16
 8005324:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800532c:	4b1a      	ldr	r3, [pc, #104]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 800532e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005330:	4a19      	ldr	r2, [pc, #100]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005332:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005336:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005338:	e00f      	b.n	800535a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d106      	bne.n	800534e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005340:	4b15      	ldr	r3, [pc, #84]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	4a14      	ldr	r2, [pc, #80]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800534a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800534c:	e005      	b.n	800535a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800534e:	4b12      	ldr	r3, [pc, #72]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005352:	4a11      	ldr	r2, [pc, #68]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005354:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005358:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800535a:	4b0f      	ldr	r3, [pc, #60]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a0e      	ldr	r2, [pc, #56]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005360:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005366:	f7fc fe4f 	bl	8002008 <HAL_GetTick>
 800536a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800536c:	e008      	b.n	8005380 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800536e:	f7fc fe4b 	bl	8002008 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e006      	b.n	800538e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005380:	4b05      	ldr	r3, [pc, #20]	@ (8005398 <RCCEx_PLL2_Config+0x15c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800538c:	7bfb      	ldrb	r3, [r7, #15]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	58024400 	.word	0x58024400
 800539c:	ffff0007 	.word	0xffff0007

080053a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053ae:	4b53      	ldr	r3, [pc, #332]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d101      	bne.n	80053be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e099      	b.n	80054f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80053be:	4b4f      	ldr	r3, [pc, #316]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a4e      	ldr	r2, [pc, #312]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80053c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ca:	f7fc fe1d 	bl	8002008 <HAL_GetTick>
 80053ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053d0:	e008      	b.n	80053e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053d2:	f7fc fe19 	bl	8002008 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e086      	b.n	80054f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053e4:	4b45      	ldr	r3, [pc, #276]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f0      	bne.n	80053d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80053f0:	4b42      	ldr	r3, [pc, #264]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80053f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	051b      	lsls	r3, r3, #20
 80053fe:	493f      	ldr	r1, [pc, #252]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 8005400:	4313      	orrs	r3, r2
 8005402:	628b      	str	r3, [r1, #40]	@ 0x28
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	3b01      	subs	r3, #1
 800540a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	3b01      	subs	r3, #1
 8005414:	025b      	lsls	r3, r3, #9
 8005416:	b29b      	uxth	r3, r3
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	3b01      	subs	r3, #1
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	3b01      	subs	r3, #1
 800542e:	061b      	lsls	r3, r3, #24
 8005430:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005434:	4931      	ldr	r1, [pc, #196]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800543a:	4b30      	ldr	r3, [pc, #192]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	492d      	ldr	r1, [pc, #180]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 8005448:	4313      	orrs	r3, r2
 800544a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800544c:	4b2b      	ldr	r3, [pc, #172]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	4928      	ldr	r1, [pc, #160]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 800545a:	4313      	orrs	r3, r2
 800545c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800545e:	4b27      	ldr	r3, [pc, #156]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	4a26      	ldr	r2, [pc, #152]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 8005464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005468:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800546a:	4b24      	ldr	r3, [pc, #144]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 800546c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800546e:	4b24      	ldr	r3, [pc, #144]	@ (8005500 <RCCEx_PLL3_Config+0x160>)
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	69d2      	ldr	r2, [r2, #28]
 8005476:	00d2      	lsls	r2, r2, #3
 8005478:	4920      	ldr	r1, [pc, #128]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 800547a:	4313      	orrs	r3, r2
 800547c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800547e:	4b1f      	ldr	r3, [pc, #124]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 8005480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005482:	4a1e      	ldr	r2, [pc, #120]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 8005484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005488:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005490:	4b1a      	ldr	r3, [pc, #104]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 8005492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005494:	4a19      	ldr	r2, [pc, #100]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 8005496:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800549a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800549c:	e00f      	b.n	80054be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d106      	bne.n	80054b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054a4:	4b15      	ldr	r3, [pc, #84]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	4a14      	ldr	r2, [pc, #80]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80054aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80054ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054b0:	e005      	b.n	80054be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054b2:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80054b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b6:	4a11      	ldr	r2, [pc, #68]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80054b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054be:	4b0f      	ldr	r3, [pc, #60]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a0e      	ldr	r2, [pc, #56]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ca:	f7fc fd9d 	bl	8002008 <HAL_GetTick>
 80054ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054d0:	e008      	b.n	80054e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054d2:	f7fc fd99 	bl	8002008 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e006      	b.n	80054f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054e4:	4b05      	ldr	r3, [pc, #20]	@ (80054fc <RCCEx_PLL3_Config+0x15c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	58024400 	.word	0x58024400
 8005500:	ffff0007 	.word	0xffff0007

08005504 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e10f      	b.n	8005736 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a87      	ldr	r2, [pc, #540]	@ (8005740 <HAL_SPI_Init+0x23c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00f      	beq.n	8005546 <HAL_SPI_Init+0x42>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a86      	ldr	r2, [pc, #536]	@ (8005744 <HAL_SPI_Init+0x240>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00a      	beq.n	8005546 <HAL_SPI_Init+0x42>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a84      	ldr	r2, [pc, #528]	@ (8005748 <HAL_SPI_Init+0x244>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d005      	beq.n	8005546 <HAL_SPI_Init+0x42>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	2b0f      	cmp	r3, #15
 8005540:	d901      	bls.n	8005546 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0f7      	b.n	8005736 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fd08 	bl	8005f5c <SPI_GetPacketSize>
 800554c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a7b      	ldr	r2, [pc, #492]	@ (8005740 <HAL_SPI_Init+0x23c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00c      	beq.n	8005572 <HAL_SPI_Init+0x6e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a79      	ldr	r2, [pc, #484]	@ (8005744 <HAL_SPI_Init+0x240>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d007      	beq.n	8005572 <HAL_SPI_Init+0x6e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a78      	ldr	r2, [pc, #480]	@ (8005748 <HAL_SPI_Init+0x244>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d002      	beq.n	8005572 <HAL_SPI_Init+0x6e>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b08      	cmp	r3, #8
 8005570:	d811      	bhi.n	8005596 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005576:	4a72      	ldr	r2, [pc, #456]	@ (8005740 <HAL_SPI_Init+0x23c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a70      	ldr	r2, [pc, #448]	@ (8005744 <HAL_SPI_Init+0x240>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_SPI_Init+0x8c>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a6f      	ldr	r2, [pc, #444]	@ (8005748 <HAL_SPI_Init+0x244>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d104      	bne.n	800559a <HAL_SPI_Init+0x96>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b10      	cmp	r3, #16
 8005594:	d901      	bls.n	800559a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0cd      	b.n	8005736 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fc f988 	bl	80018c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80055d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055e0:	d119      	bne.n	8005616 <HAL_SPI_Init+0x112>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055ea:	d103      	bne.n	80055f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10c      	bne.n	8005616 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005600:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005604:	d107      	bne.n	8005616 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005614:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00f      	beq.n	8005642 <HAL_SPI_Init+0x13e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2b06      	cmp	r3, #6
 8005628:	d90b      	bls.n	8005642 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e007      	b.n	8005652 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005650:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69da      	ldr	r2, [r3, #28]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	431a      	orrs	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005664:	ea42 0103 	orr.w	r1, r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b2:	ea42 0103 	orr.w	r1, r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d113      	bne.n	80056f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40013000 	.word	0x40013000
 8005744:	40003800 	.word	0x40003800
 8005748:	40003c00 	.word	0x40003c00

0800574c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08e      	sub	sp, #56	@ 0x38
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3320      	adds	r3, #32
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3330      	adds	r3, #48	@ 0x30
 8005768:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	b29b      	uxth	r3, r3
 8005772:	3301      	adds	r3, #1
 8005774:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005776:	f7fc fc47 	bl	8002008 <HAL_GetTick>
 800577a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800577c:	887b      	ldrh	r3, [r7, #2]
 800577e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005780:	887b      	ldrh	r3, [r7, #2]
 8005782:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d001      	beq.n	8005794 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
 8005792:	e310      	b.n	8005db6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d005      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x5a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x5a>
 80057a0:	887b      	ldrh	r3, [r7, #2]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e305      	b.n	8005db6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x6c>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e2fe      	b.n	8005db6 <HAL_SPI_TransmitReceive+0x66a>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2205      	movs	r2, #5
 80057c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	887a      	ldrh	r2, [r7, #2]
 80057e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	887a      	ldrh	r2, [r7, #2]
 80057f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005816:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a70      	ldr	r2, [pc, #448]	@ (80059e0 <HAL_SPI_TransmitReceive+0x294>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_SPI_TransmitReceive+0xea>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a6f      	ldr	r2, [pc, #444]	@ (80059e4 <HAL_SPI_TransmitReceive+0x298>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_SPI_TransmitReceive+0xea>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a6d      	ldr	r2, [pc, #436]	@ (80059e8 <HAL_SPI_TransmitReceive+0x29c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d102      	bne.n	800583c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005836:	2310      	movs	r3, #16
 8005838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800583a:	e001      	b.n	8005840 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800583c:	2308      	movs	r3, #8
 800583e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	4b69      	ldr	r3, [pc, #420]	@ (80059ec <HAL_SPI_TransmitReceive+0x2a0>)
 8005848:	4013      	ands	r3, r2
 800584a:	8879      	ldrh	r1, [r7, #2]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	430b      	orrs	r3, r1
 8005852:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800586c:	d107      	bne.n	800587e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800587c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	2b0f      	cmp	r3, #15
 8005884:	f240 80a2 	bls.w	80059cc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588a:	089b      	lsrs	r3, r3, #2
 800588c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800588e:	e094      	b.n	80059ba <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d120      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x194>
 800589e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01d      	beq.n	80058e0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80058a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80058a6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058aa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d217      	bcs.n	80058e0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c0:	1d1a      	adds	r2, r3, #4
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80058de:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80058e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d065      	beq.n	80059ba <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d118      	bne.n	800592e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005904:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005906:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800590c:	1d1a      	adds	r2, r3, #4
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800592a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800592c:	e045      	b.n	80059ba <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800592e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005930:	8bfb      	ldrh	r3, [r7, #30]
 8005932:	429a      	cmp	r2, r3
 8005934:	d21d      	bcs.n	8005972 <HAL_SPI_TransmitReceive+0x226>
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d018      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005948:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800594a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005950:	1d1a      	adds	r2, r3, #4
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800596e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005970:	e023      	b.n	80059ba <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005972:	f7fc fb49 	bl	8002008 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800597e:	429a      	cmp	r2, r3
 8005980:	d803      	bhi.n	800598a <HAL_SPI_TransmitReceive+0x23e>
 8005982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005988:	d102      	bne.n	8005990 <HAL_SPI_TransmitReceive+0x244>
 800598a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598c:	2b00      	cmp	r3, #0
 800598e:	d114      	bne.n	80059ba <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 fa15 	bl	8005dc0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800599c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e1fd      	b.n	8005db6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80059ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f47f af67 	bne.w	8005890 <HAL_SPI_TransmitReceive+0x144>
 80059c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f47f af63 	bne.w	8005890 <HAL_SPI_TransmitReceive+0x144>
 80059ca:	e1ce      	b.n	8005d6a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	2b07      	cmp	r3, #7
 80059d2:	f240 81c2 	bls.w	8005d5a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80059d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80059dc:	e0c9      	b.n	8005b72 <HAL_SPI_TransmitReceive+0x426>
 80059de:	bf00      	nop
 80059e0:	40013000 	.word	0x40013000
 80059e4:	40003800 	.word	0x40003800
 80059e8:	40003c00 	.word	0x40003c00
 80059ec:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d11f      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x2f2>
 80059fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01c      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005a04:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a06:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d216      	bcs.n	8005a3e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a14:	881a      	ldrh	r2, [r3, #0]
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1e:	1c9a      	adds	r2, r3, #2
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a3c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005a46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8092 	beq.w	8005b72 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d118      	bne.n	8005a8e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	8812      	ldrh	r2, [r2, #0]
 8005a64:	b292      	uxth	r2, r2
 8005a66:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a6c:	1c9a      	adds	r2, r3, #2
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a8a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a8c:	e071      	b.n	8005b72 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005a8e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a90:	8bfb      	ldrh	r3, [r7, #30]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d228      	bcs.n	8005ae8 <HAL_SPI_TransmitReceive+0x39c>
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d023      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa4:	6a3a      	ldr	r2, [r7, #32]
 8005aa6:	8812      	ldrh	r2, [r2, #0]
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ab0:	1c9a      	adds	r2, r3, #2
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aba:	6a3a      	ldr	r2, [r7, #32]
 8005abc:	8812      	ldrh	r2, [r2, #0]
 8005abe:	b292      	uxth	r2, r2
 8005ac0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac6:	1c9a      	adds	r2, r3, #2
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b02      	subs	r3, #2
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ae4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ae6:	e044      	b.n	8005b72 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005ae8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d11d      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x3de>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d018      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005afc:	6a3a      	ldr	r2, [r7, #32]
 8005afe:	8812      	ldrh	r2, [r2, #0]
 8005b00:	b292      	uxth	r2, r2
 8005b02:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b08:	1c9a      	adds	r2, r3, #2
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b26:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b28:	e023      	b.n	8005b72 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b2a:	f7fc fa6d 	bl	8002008 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d803      	bhi.n	8005b42 <HAL_SPI_TransmitReceive+0x3f6>
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d102      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x3fc>
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d114      	bne.n	8005b72 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f939 	bl	8005dc0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e121      	b.n	8005db6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f47f af3b 	bne.w	80059f0 <HAL_SPI_TransmitReceive+0x2a4>
 8005b7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f47f af37 	bne.w	80059f0 <HAL_SPI_TransmitReceive+0x2a4>
 8005b82:	e0f2      	b.n	8005d6a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d121      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x48a>
 8005b92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01e      	beq.n	8005bd6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005b98:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b9a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d218      	bcs.n	8005bd6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3320      	adds	r3, #32
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bd4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005bde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80ba 	beq.w	8005d5a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d11b      	bne.n	8005c2c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c00:	7812      	ldrb	r2, [r2, #0]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c28:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c2a:	e096      	b.n	8005d5a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005c2c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005c2e:	8bfb      	ldrh	r3, [r7, #30]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d24a      	bcs.n	8005cca <HAL_SPI_TransmitReceive+0x57e>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d045      	beq.n	8005cca <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c66:	7812      	ldrb	r2, [r2, #0]
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b04      	subs	r3, #4
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005cc8:	e047      	b.n	8005d5a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005cca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d820      	bhi.n	8005d12 <HAL_SPI_TransmitReceive+0x5c6>
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01b      	beq.n	8005d12 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce6:	7812      	ldrb	r2, [r2, #0]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d0e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d10:	e023      	b.n	8005d5a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d12:	f7fc f979 	bl	8002008 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d803      	bhi.n	8005d2a <HAL_SPI_TransmitReceive+0x5de>
 8005d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d28:	d102      	bne.n	8005d30 <HAL_SPI_TransmitReceive+0x5e4>
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d114      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f845 	bl	8005dc0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e02d      	b.n	8005db6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f47f af11 	bne.w	8005b84 <HAL_SPI_TransmitReceive+0x438>
 8005d62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f47f af0d 	bne.w	8005b84 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d70:	2200      	movs	r2, #0
 8005d72:	2108      	movs	r1, #8
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f8c3 	bl	8005f00 <SPI_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f815 	bl	8005dc0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
  }
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3730      	adds	r7, #48	@ 0x30
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop

08005dc0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0208 	orr.w	r2, r2, #8
 8005dde:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0210 	orr.w	r2, r2, #16
 8005dee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6919      	ldr	r1, [r3, #16]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8005efc <SPI_CloseTransfer+0x13c>)
 8005e0c:	400b      	ands	r3, r1
 8005e0e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005e1e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d014      	beq.n	8005e56 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00f      	beq.n	8005e56 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0220 	orr.w	r2, r2, #32
 8005e54:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d014      	beq.n	8005e8c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00f      	beq.n	8005e8c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e72:	f043 0204 	orr.w	r2, r3, #4
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e8a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00f      	beq.n	8005eb6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e9c:	f043 0201 	orr.w	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eb4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00f      	beq.n	8005ee0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ec6:	f043 0208 	orr.w	r2, r3, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ede:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005ef0:	bf00      	nop
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	fffffc90 	.word	0xfffffc90

08005f00 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005f10:	e010      	b.n	8005f34 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f12:	f7fc f879 	bl	8002008 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d803      	bhi.n	8005f2a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d102      	bne.n	8005f30 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e00f      	b.n	8005f54 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695a      	ldr	r2, [r3, #20]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	bf0c      	ite	eq
 8005f44:	2301      	moveq	r3, #1
 8005f46:	2300      	movne	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d0df      	beq.n	8005f12 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f68:	095b      	lsrs	r3, r3, #5
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	3307      	adds	r3, #7
 8005f7a:	08db      	lsrs	r3, r3, #3
 8005f7c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	fb02 f303 	mul.w	r3, r2, r3
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e049      	b.n	8006038 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d106      	bne.n	8005fbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7fb fd5b 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	f000 fb47 	bl	8006664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	d001      	beq.n	8006058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e054      	b.n	8006102 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a26      	ldr	r2, [pc, #152]	@ (8006110 <HAL_TIM_Base_Start_IT+0xd0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d022      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x80>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006082:	d01d      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x80>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a22      	ldr	r2, [pc, #136]	@ (8006114 <HAL_TIM_Base_Start_IT+0xd4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d018      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x80>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a21      	ldr	r2, [pc, #132]	@ (8006118 <HAL_TIM_Base_Start_IT+0xd8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d013      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x80>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1f      	ldr	r2, [pc, #124]	@ (800611c <HAL_TIM_Base_Start_IT+0xdc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00e      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x80>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006120 <HAL_TIM_Base_Start_IT+0xe0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d009      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x80>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006124 <HAL_TIM_Base_Start_IT+0xe4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <HAL_TIM_Base_Start_IT+0x80>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006128 <HAL_TIM_Base_Start_IT+0xe8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d115      	bne.n	80060ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	4b19      	ldr	r3, [pc, #100]	@ (800612c <HAL_TIM_Base_Start_IT+0xec>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b06      	cmp	r3, #6
 80060d0:	d015      	beq.n	80060fe <HAL_TIM_Base_Start_IT+0xbe>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d8:	d011      	beq.n	80060fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ea:	e008      	b.n	80060fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	e000      	b.n	8006100 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40010400 	.word	0x40010400
 8006124:	40001800 	.word	0x40001800
 8006128:	40014000 	.word	0x40014000
 800612c:	00010007 	.word	0x00010007

08006130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e049      	b.n	80061d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fb fc42 	bl	80019e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f000 fa78 	bl	8006664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d020      	beq.n	8006242 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01b      	beq.n	8006242 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f06f 0202 	mvn.w	r2, #2
 8006212:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f9fd 	bl	8006628 <HAL_TIM_IC_CaptureCallback>
 800622e:	e005      	b.n	800623c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f9ef 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa00 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d020      	beq.n	800628e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01b      	beq.n	800628e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f06f 0204 	mvn.w	r2, #4
 800625e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f9d7 	bl	8006628 <HAL_TIM_IC_CaptureCallback>
 800627a:	e005      	b.n	8006288 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f9c9 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f9da 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d020      	beq.n	80062da <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01b      	beq.n	80062da <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f06f 0208 	mvn.w	r2, #8
 80062aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2204      	movs	r2, #4
 80062b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f9b1 	bl	8006628 <HAL_TIM_IC_CaptureCallback>
 80062c6:	e005      	b.n	80062d4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f9a3 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f9b4 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01b      	beq.n	8006326 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f06f 0210 	mvn.w	r2, #16
 80062f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2208      	movs	r2, #8
 80062fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f98b 	bl	8006628 <HAL_TIM_IC_CaptureCallback>
 8006312:	e005      	b.n	8006320 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f97d 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f98e 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00c      	beq.n	800634a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f06f 0201 	mvn.w	r2, #1
 8006342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7fb fa85 	bl	8001854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00c      	beq.n	8006378 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fe02 	bl	8006f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fdfa 	bl	8006f90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00c      	beq.n	80063c0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d007      	beq.n	80063c0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f948 	bl	8006650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00c      	beq.n	80063e4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0220 	mvn.w	r2, #32
 80063dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fdc2 	bl	8006f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006406:	2302      	movs	r3, #2
 8006408:	e0ff      	b.n	800660a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b14      	cmp	r3, #20
 8006416:	f200 80f0 	bhi.w	80065fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800641a:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006475 	.word	0x08006475
 8006424:	080065fb 	.word	0x080065fb
 8006428:	080065fb 	.word	0x080065fb
 800642c:	080065fb 	.word	0x080065fb
 8006430:	080064b5 	.word	0x080064b5
 8006434:	080065fb 	.word	0x080065fb
 8006438:	080065fb 	.word	0x080065fb
 800643c:	080065fb 	.word	0x080065fb
 8006440:	080064f7 	.word	0x080064f7
 8006444:	080065fb 	.word	0x080065fb
 8006448:	080065fb 	.word	0x080065fb
 800644c:	080065fb 	.word	0x080065fb
 8006450:	08006537 	.word	0x08006537
 8006454:	080065fb 	.word	0x080065fb
 8006458:	080065fb 	.word	0x080065fb
 800645c:	080065fb 	.word	0x080065fb
 8006460:	08006579 	.word	0x08006579
 8006464:	080065fb 	.word	0x080065fb
 8006468:	080065fb 	.word	0x080065fb
 800646c:	080065fb 	.word	0x080065fb
 8006470:	080065b9 	.word	0x080065b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 f992 	bl	80067a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0208 	orr.w	r2, r2, #8
 800648e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0204 	bic.w	r2, r2, #4
 800649e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6999      	ldr	r1, [r3, #24]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	619a      	str	r2, [r3, #24]
      break;
 80064b2:	e0a5      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fa02 	bl	80068c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6999      	ldr	r1, [r3, #24]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	619a      	str	r2, [r3, #24]
      break;
 80064f4:	e084      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fa6b 	bl	80069d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0208 	orr.w	r2, r2, #8
 8006510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0204 	bic.w	r2, r2, #4
 8006520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69d9      	ldr	r1, [r3, #28]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	61da      	str	r2, [r3, #28]
      break;
 8006534:	e064      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fad3 	bl	8006ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69d9      	ldr	r1, [r3, #28]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	021a      	lsls	r2, r3, #8
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	61da      	str	r2, [r3, #28]
      break;
 8006576:	e043      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fb1c 	bl	8006bbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0208 	orr.w	r2, r2, #8
 8006592:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0204 	bic.w	r2, r2, #4
 80065a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80065b6:	e023      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fb60 	bl	8006c84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	021a      	lsls	r2, r3, #8
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80065f8:	e002      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
      break;
 80065fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006608:	7dfb      	ldrb	r3, [r7, #23]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop

08006614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a43      	ldr	r2, [pc, #268]	@ (8006784 <TIM_Base_SetConfig+0x120>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d013      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006682:	d00f      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a40      	ldr	r2, [pc, #256]	@ (8006788 <TIM_Base_SetConfig+0x124>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a3f      	ldr	r2, [pc, #252]	@ (800678c <TIM_Base_SetConfig+0x128>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a3e      	ldr	r2, [pc, #248]	@ (8006790 <TIM_Base_SetConfig+0x12c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a3d      	ldr	r2, [pc, #244]	@ (8006794 <TIM_Base_SetConfig+0x130>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d108      	bne.n	80066b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a32      	ldr	r2, [pc, #200]	@ (8006784 <TIM_Base_SetConfig+0x120>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01f      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c4:	d01b      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006788 <TIM_Base_SetConfig+0x124>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d017      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2e      	ldr	r2, [pc, #184]	@ (800678c <TIM_Base_SetConfig+0x128>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d013      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006790 <TIM_Base_SetConfig+0x12c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00f      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006794 <TIM_Base_SetConfig+0x130>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00b      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006798 <TIM_Base_SetConfig+0x134>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2a      	ldr	r2, [pc, #168]	@ (800679c <TIM_Base_SetConfig+0x138>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a29      	ldr	r2, [pc, #164]	@ (80067a0 <TIM_Base_SetConfig+0x13c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d108      	bne.n	8006710 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a14      	ldr	r2, [pc, #80]	@ (8006784 <TIM_Base_SetConfig+0x120>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00f      	beq.n	8006756 <TIM_Base_SetConfig+0xf2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a16      	ldr	r2, [pc, #88]	@ (8006794 <TIM_Base_SetConfig+0x130>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_Base_SetConfig+0xf2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a15      	ldr	r2, [pc, #84]	@ (8006798 <TIM_Base_SetConfig+0x134>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_Base_SetConfig+0xf2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a14      	ldr	r2, [pc, #80]	@ (800679c <TIM_Base_SetConfig+0x138>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_Base_SetConfig+0xf2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a13      	ldr	r2, [pc, #76]	@ (80067a0 <TIM_Base_SetConfig+0x13c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d103      	bne.n	800675e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f043 0204 	orr.w	r2, r3, #4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	601a      	str	r2, [r3, #0]
}
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40010000 	.word	0x40010000
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40000c00 	.word	0x40000c00
 8006794:	40010400 	.word	0x40010400
 8006798:	40014000 	.word	0x40014000
 800679c:	40014400 	.word	0x40014400
 80067a0:	40014800 	.word	0x40014800

080067a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f023 0201 	bic.w	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4b37      	ldr	r3, [pc, #220]	@ (80068ac <TIM_OC1_SetConfig+0x108>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 0302 	bic.w	r3, r3, #2
 80067ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a2d      	ldr	r2, [pc, #180]	@ (80068b0 <TIM_OC1_SetConfig+0x10c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00f      	beq.n	8006820 <TIM_OC1_SetConfig+0x7c>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a2c      	ldr	r2, [pc, #176]	@ (80068b4 <TIM_OC1_SetConfig+0x110>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <TIM_OC1_SetConfig+0x7c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a2b      	ldr	r2, [pc, #172]	@ (80068b8 <TIM_OC1_SetConfig+0x114>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d007      	beq.n	8006820 <TIM_OC1_SetConfig+0x7c>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a2a      	ldr	r2, [pc, #168]	@ (80068bc <TIM_OC1_SetConfig+0x118>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_OC1_SetConfig+0x7c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a29      	ldr	r2, [pc, #164]	@ (80068c0 <TIM_OC1_SetConfig+0x11c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d10c      	bne.n	800683a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f023 0308 	bic.w	r3, r3, #8
 8006826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f023 0304 	bic.w	r3, r3, #4
 8006838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a1c      	ldr	r2, [pc, #112]	@ (80068b0 <TIM_OC1_SetConfig+0x10c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_OC1_SetConfig+0xbe>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a1b      	ldr	r2, [pc, #108]	@ (80068b4 <TIM_OC1_SetConfig+0x110>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_OC1_SetConfig+0xbe>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a1a      	ldr	r2, [pc, #104]	@ (80068b8 <TIM_OC1_SetConfig+0x114>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_OC1_SetConfig+0xbe>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a19      	ldr	r2, [pc, #100]	@ (80068bc <TIM_OC1_SetConfig+0x118>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC1_SetConfig+0xbe>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a18      	ldr	r2, [pc, #96]	@ (80068c0 <TIM_OC1_SetConfig+0x11c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d111      	bne.n	8006886 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	621a      	str	r2, [r3, #32]
}
 80068a0:	bf00      	nop
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	fffeff8f 	.word	0xfffeff8f
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40010400 	.word	0x40010400
 80068b8:	40014000 	.word	0x40014000
 80068bc:	40014400 	.word	0x40014400
 80068c0:	40014800 	.word	0x40014800

080068c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f023 0210 	bic.w	r2, r3, #16
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4b34      	ldr	r3, [pc, #208]	@ (80069c0 <TIM_OC2_SetConfig+0xfc>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0320 	bic.w	r3, r3, #32
 800690e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a29      	ldr	r2, [pc, #164]	@ (80069c4 <TIM_OC2_SetConfig+0x100>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_OC2_SetConfig+0x68>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a28      	ldr	r2, [pc, #160]	@ (80069c8 <TIM_OC2_SetConfig+0x104>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d10d      	bne.n	8006948 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006946:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a1e      	ldr	r2, [pc, #120]	@ (80069c4 <TIM_OC2_SetConfig+0x100>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00f      	beq.n	8006970 <TIM_OC2_SetConfig+0xac>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a1d      	ldr	r2, [pc, #116]	@ (80069c8 <TIM_OC2_SetConfig+0x104>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00b      	beq.n	8006970 <TIM_OC2_SetConfig+0xac>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a1c      	ldr	r2, [pc, #112]	@ (80069cc <TIM_OC2_SetConfig+0x108>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d007      	beq.n	8006970 <TIM_OC2_SetConfig+0xac>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a1b      	ldr	r2, [pc, #108]	@ (80069d0 <TIM_OC2_SetConfig+0x10c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <TIM_OC2_SetConfig+0xac>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a1a      	ldr	r2, [pc, #104]	@ (80069d4 <TIM_OC2_SetConfig+0x110>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d113      	bne.n	8006998 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800697e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	feff8fff 	.word	0xfeff8fff
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40014400 	.word	0x40014400
 80069d4:	40014800 	.word	0x40014800

080069d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4b33      	ldr	r3, [pc, #204]	@ (8006ad0 <TIM_OC3_SetConfig+0xf8>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a28      	ldr	r2, [pc, #160]	@ (8006ad4 <TIM_OC3_SetConfig+0xfc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d003      	beq.n	8006a3e <TIM_OC3_SetConfig+0x66>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a27      	ldr	r2, [pc, #156]	@ (8006ad8 <TIM_OC3_SetConfig+0x100>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d10d      	bne.n	8006a5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad4 <TIM_OC3_SetConfig+0xfc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00f      	beq.n	8006a82 <TIM_OC3_SetConfig+0xaa>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad8 <TIM_OC3_SetConfig+0x100>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00b      	beq.n	8006a82 <TIM_OC3_SetConfig+0xaa>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006adc <TIM_OC3_SetConfig+0x104>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d007      	beq.n	8006a82 <TIM_OC3_SetConfig+0xaa>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1a      	ldr	r2, [pc, #104]	@ (8006ae0 <TIM_OC3_SetConfig+0x108>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d003      	beq.n	8006a82 <TIM_OC3_SetConfig+0xaa>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ae4 <TIM_OC3_SetConfig+0x10c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d113      	bne.n	8006aaa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	621a      	str	r2, [r3, #32]
}
 8006ac4:	bf00      	nop
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	fffeff8f 	.word	0xfffeff8f
 8006ad4:	40010000 	.word	0x40010000
 8006ad8:	40010400 	.word	0x40010400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400
 8006ae4:	40014800 	.word	0x40014800

08006ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4b24      	ldr	r3, [pc, #144]	@ (8006ba4 <TIM_OC4_SetConfig+0xbc>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	031b      	lsls	r3, r3, #12
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a19      	ldr	r2, [pc, #100]	@ (8006ba8 <TIM_OC4_SetConfig+0xc0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00f      	beq.n	8006b68 <TIM_OC4_SetConfig+0x80>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a18      	ldr	r2, [pc, #96]	@ (8006bac <TIM_OC4_SetConfig+0xc4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00b      	beq.n	8006b68 <TIM_OC4_SetConfig+0x80>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a17      	ldr	r2, [pc, #92]	@ (8006bb0 <TIM_OC4_SetConfig+0xc8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d007      	beq.n	8006b68 <TIM_OC4_SetConfig+0x80>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a16      	ldr	r2, [pc, #88]	@ (8006bb4 <TIM_OC4_SetConfig+0xcc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_OC4_SetConfig+0x80>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a15      	ldr	r2, [pc, #84]	@ (8006bb8 <TIM_OC4_SetConfig+0xd0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d109      	bne.n	8006b7c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	019b      	lsls	r3, r3, #6
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	feff8fff 	.word	0xfeff8fff
 8006ba8:	40010000 	.word	0x40010000
 8006bac:	40010400 	.word	0x40010400
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800

08006bbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4b21      	ldr	r3, [pc, #132]	@ (8006c6c <TIM_OC5_SetConfig+0xb0>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006bfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	041b      	lsls	r3, r3, #16
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a18      	ldr	r2, [pc, #96]	@ (8006c70 <TIM_OC5_SetConfig+0xb4>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00f      	beq.n	8006c32 <TIM_OC5_SetConfig+0x76>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a17      	ldr	r2, [pc, #92]	@ (8006c74 <TIM_OC5_SetConfig+0xb8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00b      	beq.n	8006c32 <TIM_OC5_SetConfig+0x76>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a16      	ldr	r2, [pc, #88]	@ (8006c78 <TIM_OC5_SetConfig+0xbc>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d007      	beq.n	8006c32 <TIM_OC5_SetConfig+0x76>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a15      	ldr	r2, [pc, #84]	@ (8006c7c <TIM_OC5_SetConfig+0xc0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d003      	beq.n	8006c32 <TIM_OC5_SetConfig+0x76>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a14      	ldr	r2, [pc, #80]	@ (8006c80 <TIM_OC5_SetConfig+0xc4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d109      	bne.n	8006c46 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	021b      	lsls	r3, r3, #8
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	621a      	str	r2, [r3, #32]
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	fffeff8f 	.word	0xfffeff8f
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40010400 	.word	0x40010400
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	40014400 	.word	0x40014400
 8006c80:	40014800 	.word	0x40014800

08006c84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4b22      	ldr	r3, [pc, #136]	@ (8006d38 <TIM_OC6_SetConfig+0xb4>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	051b      	lsls	r3, r3, #20
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a19      	ldr	r2, [pc, #100]	@ (8006d3c <TIM_OC6_SetConfig+0xb8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00f      	beq.n	8006cfc <TIM_OC6_SetConfig+0x78>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a18      	ldr	r2, [pc, #96]	@ (8006d40 <TIM_OC6_SetConfig+0xbc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00b      	beq.n	8006cfc <TIM_OC6_SetConfig+0x78>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a17      	ldr	r2, [pc, #92]	@ (8006d44 <TIM_OC6_SetConfig+0xc0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d007      	beq.n	8006cfc <TIM_OC6_SetConfig+0x78>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a16      	ldr	r2, [pc, #88]	@ (8006d48 <TIM_OC6_SetConfig+0xc4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d003      	beq.n	8006cfc <TIM_OC6_SetConfig+0x78>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a15      	ldr	r2, [pc, #84]	@ (8006d4c <TIM_OC6_SetConfig+0xc8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d109      	bne.n	8006d10 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	029b      	lsls	r3, r3, #10
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	feff8fff 	.word	0xfeff8fff
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40010400 	.word	0x40010400
 8006d44:	40014000 	.word	0x40014000
 8006d48:	40014400 	.word	0x40014400
 8006d4c:	40014800 	.word	0x40014800

08006d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e06d      	b.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a30      	ldr	r2, [pc, #192]	@ (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2f      	ldr	r2, [pc, #188]	@ (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d108      	bne.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006da2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a20      	ldr	r2, [pc, #128]	@ (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d022      	beq.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dda:	d01d      	beq.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d018      	beq.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a1c      	ldr	r2, [pc, #112]	@ (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a1a      	ldr	r2, [pc, #104]	@ (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00e      	beq.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a15      	ldr	r2, [pc, #84]	@ (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d009      	beq.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a16      	ldr	r2, [pc, #88]	@ (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a15      	ldr	r2, [pc, #84]	@ (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d10c      	bne.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	40010000 	.word	0x40010000
 8006e54:	40010400 	.word	0x40010400
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800
 8006e60:	40000c00 	.word	0x40000c00
 8006e64:	40001800 	.word	0x40001800
 8006e68:	40014000 	.word	0x40014000

08006e6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e065      	b.n	8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	041b      	lsls	r3, r3, #16
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a16      	ldr	r2, [pc, #88]	@ (8006f60 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d004      	beq.n	8006f16 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a14      	ldr	r2, [pc, #80]	@ (8006f64 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d115      	bne.n	8006f42 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	051b      	lsls	r3, r3, #20
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	40010000 	.word	0x40010000
 8006f64:	40010400 	.word	0x40010400

08006f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e042      	b.n	800703c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d106      	bne.n	8006fce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7fa fdfb 	bl	8001bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2224      	movs	r2, #36	@ 0x24
 8006fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0201 	bic.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fe1e 	bl	8007c30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f8b3 	bl	8007160 <UART_SetConfig>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e01b      	b.n	800703c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fe9d 	bl	8007d74 <UART_CheckIdleState>
 800703a:	4603      	mov	r3, r0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08a      	sub	sp, #40	@ 0x28
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	4613      	mov	r3, r2
 8007052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705a:	2b20      	cmp	r3, #32
 800705c:	d17b      	bne.n	8007156 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <HAL_UART_Transmit+0x26>
 8007064:	88fb      	ldrh	r3, [r7, #6]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e074      	b.n	8007158 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2221      	movs	r2, #33	@ 0x21
 800707a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800707e:	f7fa ffc3 	bl	8002008 <HAL_GetTick>
 8007082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	88fa      	ldrh	r2, [r7, #6]
 8007088:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800709c:	d108      	bne.n	80070b0 <HAL_UART_Transmit+0x6c>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d104      	bne.n	80070b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	61bb      	str	r3, [r7, #24]
 80070ae:	e003      	b.n	80070b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070b8:	e030      	b.n	800711c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2200      	movs	r2, #0
 80070c2:	2180      	movs	r1, #128	@ 0x80
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 feff 	bl	8007ec8 <UART_WaitOnFlagUntilTimeout>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e03d      	b.n	8007158 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10b      	bne.n	80070fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	3302      	adds	r3, #2
 80070f6:	61bb      	str	r3, [r7, #24]
 80070f8:	e007      	b.n	800710a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	781a      	ldrb	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	3301      	adds	r3, #1
 8007108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1c8      	bne.n	80070ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2200      	movs	r2, #0
 8007130:	2140      	movs	r1, #64	@ 0x40
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 fec8 	bl	8007ec8 <UART_WaitOnFlagUntilTimeout>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e006      	b.n	8007158 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2220      	movs	r2, #32
 800714e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	e000      	b.n	8007158 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007156:	2302      	movs	r3, #2
  }
}
 8007158:	4618      	mov	r0, r3
 800715a:	3720      	adds	r7, #32
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007164:	b092      	sub	sp, #72	@ 0x48
 8007166:	af00      	add	r7, sp, #0
 8007168:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	431a      	orrs	r2, r3
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	431a      	orrs	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	4313      	orrs	r3, r2
 8007186:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4bbe      	ldr	r3, [pc, #760]	@ (8007488 <UART_SetConfig+0x328>)
 8007190:	4013      	ands	r3, r2
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007198:	430b      	orrs	r3, r1
 800719a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4ab3      	ldr	r2, [pc, #716]	@ (800748c <UART_SetConfig+0x32c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d004      	beq.n	80071cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071c8:	4313      	orrs	r3, r2
 80071ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689a      	ldr	r2, [r3, #8]
 80071d2:	4baf      	ldr	r3, [pc, #700]	@ (8007490 <UART_SetConfig+0x330>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80071dc:	430b      	orrs	r3, r1
 80071de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	f023 010f 	bic.w	r1, r3, #15
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4aa6      	ldr	r2, [pc, #664]	@ (8007494 <UART_SetConfig+0x334>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d177      	bne.n	80072f0 <UART_SetConfig+0x190>
 8007200:	4ba5      	ldr	r3, [pc, #660]	@ (8007498 <UART_SetConfig+0x338>)
 8007202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007208:	2b28      	cmp	r3, #40	@ 0x28
 800720a:	d86d      	bhi.n	80072e8 <UART_SetConfig+0x188>
 800720c:	a201      	add	r2, pc, #4	@ (adr r2, 8007214 <UART_SetConfig+0xb4>)
 800720e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007212:	bf00      	nop
 8007214:	080072b9 	.word	0x080072b9
 8007218:	080072e9 	.word	0x080072e9
 800721c:	080072e9 	.word	0x080072e9
 8007220:	080072e9 	.word	0x080072e9
 8007224:	080072e9 	.word	0x080072e9
 8007228:	080072e9 	.word	0x080072e9
 800722c:	080072e9 	.word	0x080072e9
 8007230:	080072e9 	.word	0x080072e9
 8007234:	080072c1 	.word	0x080072c1
 8007238:	080072e9 	.word	0x080072e9
 800723c:	080072e9 	.word	0x080072e9
 8007240:	080072e9 	.word	0x080072e9
 8007244:	080072e9 	.word	0x080072e9
 8007248:	080072e9 	.word	0x080072e9
 800724c:	080072e9 	.word	0x080072e9
 8007250:	080072e9 	.word	0x080072e9
 8007254:	080072c9 	.word	0x080072c9
 8007258:	080072e9 	.word	0x080072e9
 800725c:	080072e9 	.word	0x080072e9
 8007260:	080072e9 	.word	0x080072e9
 8007264:	080072e9 	.word	0x080072e9
 8007268:	080072e9 	.word	0x080072e9
 800726c:	080072e9 	.word	0x080072e9
 8007270:	080072e9 	.word	0x080072e9
 8007274:	080072d1 	.word	0x080072d1
 8007278:	080072e9 	.word	0x080072e9
 800727c:	080072e9 	.word	0x080072e9
 8007280:	080072e9 	.word	0x080072e9
 8007284:	080072e9 	.word	0x080072e9
 8007288:	080072e9 	.word	0x080072e9
 800728c:	080072e9 	.word	0x080072e9
 8007290:	080072e9 	.word	0x080072e9
 8007294:	080072d9 	.word	0x080072d9
 8007298:	080072e9 	.word	0x080072e9
 800729c:	080072e9 	.word	0x080072e9
 80072a0:	080072e9 	.word	0x080072e9
 80072a4:	080072e9 	.word	0x080072e9
 80072a8:	080072e9 	.word	0x080072e9
 80072ac:	080072e9 	.word	0x080072e9
 80072b0:	080072e9 	.word	0x080072e9
 80072b4:	080072e1 	.word	0x080072e1
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072be:	e222      	b.n	8007706 <UART_SetConfig+0x5a6>
 80072c0:	2304      	movs	r3, #4
 80072c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c6:	e21e      	b.n	8007706 <UART_SetConfig+0x5a6>
 80072c8:	2308      	movs	r3, #8
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ce:	e21a      	b.n	8007706 <UART_SetConfig+0x5a6>
 80072d0:	2310      	movs	r3, #16
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d6:	e216      	b.n	8007706 <UART_SetConfig+0x5a6>
 80072d8:	2320      	movs	r3, #32
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072de:	e212      	b.n	8007706 <UART_SetConfig+0x5a6>
 80072e0:	2340      	movs	r3, #64	@ 0x40
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e6:	e20e      	b.n	8007706 <UART_SetConfig+0x5a6>
 80072e8:	2380      	movs	r3, #128	@ 0x80
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ee:	e20a      	b.n	8007706 <UART_SetConfig+0x5a6>
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a69      	ldr	r2, [pc, #420]	@ (800749c <UART_SetConfig+0x33c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d130      	bne.n	800735c <UART_SetConfig+0x1fc>
 80072fa:	4b67      	ldr	r3, [pc, #412]	@ (8007498 <UART_SetConfig+0x338>)
 80072fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	2b05      	cmp	r3, #5
 8007304:	d826      	bhi.n	8007354 <UART_SetConfig+0x1f4>
 8007306:	a201      	add	r2, pc, #4	@ (adr r2, 800730c <UART_SetConfig+0x1ac>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007325 	.word	0x08007325
 8007310:	0800732d 	.word	0x0800732d
 8007314:	08007335 	.word	0x08007335
 8007318:	0800733d 	.word	0x0800733d
 800731c:	08007345 	.word	0x08007345
 8007320:	0800734d 	.word	0x0800734d
 8007324:	2300      	movs	r3, #0
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732a:	e1ec      	b.n	8007706 <UART_SetConfig+0x5a6>
 800732c:	2304      	movs	r3, #4
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007332:	e1e8      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007334:	2308      	movs	r3, #8
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733a:	e1e4      	b.n	8007706 <UART_SetConfig+0x5a6>
 800733c:	2310      	movs	r3, #16
 800733e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007342:	e1e0      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007344:	2320      	movs	r3, #32
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734a:	e1dc      	b.n	8007706 <UART_SetConfig+0x5a6>
 800734c:	2340      	movs	r3, #64	@ 0x40
 800734e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007352:	e1d8      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007354:	2380      	movs	r3, #128	@ 0x80
 8007356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735a:	e1d4      	b.n	8007706 <UART_SetConfig+0x5a6>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a4f      	ldr	r2, [pc, #316]	@ (80074a0 <UART_SetConfig+0x340>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d130      	bne.n	80073c8 <UART_SetConfig+0x268>
 8007366:	4b4c      	ldr	r3, [pc, #304]	@ (8007498 <UART_SetConfig+0x338>)
 8007368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	2b05      	cmp	r3, #5
 8007370:	d826      	bhi.n	80073c0 <UART_SetConfig+0x260>
 8007372:	a201      	add	r2, pc, #4	@ (adr r2, 8007378 <UART_SetConfig+0x218>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	08007391 	.word	0x08007391
 800737c:	08007399 	.word	0x08007399
 8007380:	080073a1 	.word	0x080073a1
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073b1 	.word	0x080073b1
 800738c:	080073b9 	.word	0x080073b9
 8007390:	2300      	movs	r3, #0
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007396:	e1b6      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007398:	2304      	movs	r3, #4
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739e:	e1b2      	b.n	8007706 <UART_SetConfig+0x5a6>
 80073a0:	2308      	movs	r3, #8
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a6:	e1ae      	b.n	8007706 <UART_SetConfig+0x5a6>
 80073a8:	2310      	movs	r3, #16
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ae:	e1aa      	b.n	8007706 <UART_SetConfig+0x5a6>
 80073b0:	2320      	movs	r3, #32
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b6:	e1a6      	b.n	8007706 <UART_SetConfig+0x5a6>
 80073b8:	2340      	movs	r3, #64	@ 0x40
 80073ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073be:	e1a2      	b.n	8007706 <UART_SetConfig+0x5a6>
 80073c0:	2380      	movs	r3, #128	@ 0x80
 80073c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c6:	e19e      	b.n	8007706 <UART_SetConfig+0x5a6>
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a35      	ldr	r2, [pc, #212]	@ (80074a4 <UART_SetConfig+0x344>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d130      	bne.n	8007434 <UART_SetConfig+0x2d4>
 80073d2:	4b31      	ldr	r3, [pc, #196]	@ (8007498 <UART_SetConfig+0x338>)
 80073d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	2b05      	cmp	r3, #5
 80073dc:	d826      	bhi.n	800742c <UART_SetConfig+0x2cc>
 80073de:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <UART_SetConfig+0x284>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	080073fd 	.word	0x080073fd
 80073e8:	08007405 	.word	0x08007405
 80073ec:	0800740d 	.word	0x0800740d
 80073f0:	08007415 	.word	0x08007415
 80073f4:	0800741d 	.word	0x0800741d
 80073f8:	08007425 	.word	0x08007425
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e180      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007404:	2304      	movs	r3, #4
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740a:	e17c      	b.n	8007706 <UART_SetConfig+0x5a6>
 800740c:	2308      	movs	r3, #8
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007412:	e178      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007414:	2310      	movs	r3, #16
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741a:	e174      	b.n	8007706 <UART_SetConfig+0x5a6>
 800741c:	2320      	movs	r3, #32
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007422:	e170      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007424:	2340      	movs	r3, #64	@ 0x40
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742a:	e16c      	b.n	8007706 <UART_SetConfig+0x5a6>
 800742c:	2380      	movs	r3, #128	@ 0x80
 800742e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007432:	e168      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1b      	ldr	r2, [pc, #108]	@ (80074a8 <UART_SetConfig+0x348>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d142      	bne.n	80074c4 <UART_SetConfig+0x364>
 800743e:	4b16      	ldr	r3, [pc, #88]	@ (8007498 <UART_SetConfig+0x338>)
 8007440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b05      	cmp	r3, #5
 8007448:	d838      	bhi.n	80074bc <UART_SetConfig+0x35c>
 800744a:	a201      	add	r2, pc, #4	@ (adr r2, 8007450 <UART_SetConfig+0x2f0>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	08007469 	.word	0x08007469
 8007454:	08007471 	.word	0x08007471
 8007458:	08007479 	.word	0x08007479
 800745c:	08007481 	.word	0x08007481
 8007460:	080074ad 	.word	0x080074ad
 8007464:	080074b5 	.word	0x080074b5
 8007468:	2300      	movs	r3, #0
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746e:	e14a      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007470:	2304      	movs	r3, #4
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007476:	e146      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007478:	2308      	movs	r3, #8
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747e:	e142      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007480:	2310      	movs	r3, #16
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007486:	e13e      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007488:	cfff69f3 	.word	0xcfff69f3
 800748c:	58000c00 	.word	0x58000c00
 8007490:	11fff4ff 	.word	0x11fff4ff
 8007494:	40011000 	.word	0x40011000
 8007498:	58024400 	.word	0x58024400
 800749c:	40004400 	.word	0x40004400
 80074a0:	40004800 	.word	0x40004800
 80074a4:	40004c00 	.word	0x40004c00
 80074a8:	40005000 	.word	0x40005000
 80074ac:	2320      	movs	r3, #32
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b2:	e128      	b.n	8007706 <UART_SetConfig+0x5a6>
 80074b4:	2340      	movs	r3, #64	@ 0x40
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ba:	e124      	b.n	8007706 <UART_SetConfig+0x5a6>
 80074bc:	2380      	movs	r3, #128	@ 0x80
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c2:	e120      	b.n	8007706 <UART_SetConfig+0x5a6>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4acb      	ldr	r2, [pc, #812]	@ (80077f8 <UART_SetConfig+0x698>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d176      	bne.n	80075bc <UART_SetConfig+0x45c>
 80074ce:	4bcb      	ldr	r3, [pc, #812]	@ (80077fc <UART_SetConfig+0x69c>)
 80074d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074d6:	2b28      	cmp	r3, #40	@ 0x28
 80074d8:	d86c      	bhi.n	80075b4 <UART_SetConfig+0x454>
 80074da:	a201      	add	r2, pc, #4	@ (adr r2, 80074e0 <UART_SetConfig+0x380>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007585 	.word	0x08007585
 80074e4:	080075b5 	.word	0x080075b5
 80074e8:	080075b5 	.word	0x080075b5
 80074ec:	080075b5 	.word	0x080075b5
 80074f0:	080075b5 	.word	0x080075b5
 80074f4:	080075b5 	.word	0x080075b5
 80074f8:	080075b5 	.word	0x080075b5
 80074fc:	080075b5 	.word	0x080075b5
 8007500:	0800758d 	.word	0x0800758d
 8007504:	080075b5 	.word	0x080075b5
 8007508:	080075b5 	.word	0x080075b5
 800750c:	080075b5 	.word	0x080075b5
 8007510:	080075b5 	.word	0x080075b5
 8007514:	080075b5 	.word	0x080075b5
 8007518:	080075b5 	.word	0x080075b5
 800751c:	080075b5 	.word	0x080075b5
 8007520:	08007595 	.word	0x08007595
 8007524:	080075b5 	.word	0x080075b5
 8007528:	080075b5 	.word	0x080075b5
 800752c:	080075b5 	.word	0x080075b5
 8007530:	080075b5 	.word	0x080075b5
 8007534:	080075b5 	.word	0x080075b5
 8007538:	080075b5 	.word	0x080075b5
 800753c:	080075b5 	.word	0x080075b5
 8007540:	0800759d 	.word	0x0800759d
 8007544:	080075b5 	.word	0x080075b5
 8007548:	080075b5 	.word	0x080075b5
 800754c:	080075b5 	.word	0x080075b5
 8007550:	080075b5 	.word	0x080075b5
 8007554:	080075b5 	.word	0x080075b5
 8007558:	080075b5 	.word	0x080075b5
 800755c:	080075b5 	.word	0x080075b5
 8007560:	080075a5 	.word	0x080075a5
 8007564:	080075b5 	.word	0x080075b5
 8007568:	080075b5 	.word	0x080075b5
 800756c:	080075b5 	.word	0x080075b5
 8007570:	080075b5 	.word	0x080075b5
 8007574:	080075b5 	.word	0x080075b5
 8007578:	080075b5 	.word	0x080075b5
 800757c:	080075b5 	.word	0x080075b5
 8007580:	080075ad 	.word	0x080075ad
 8007584:	2301      	movs	r3, #1
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758a:	e0bc      	b.n	8007706 <UART_SetConfig+0x5a6>
 800758c:	2304      	movs	r3, #4
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007592:	e0b8      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007594:	2308      	movs	r3, #8
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759a:	e0b4      	b.n	8007706 <UART_SetConfig+0x5a6>
 800759c:	2310      	movs	r3, #16
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a2:	e0b0      	b.n	8007706 <UART_SetConfig+0x5a6>
 80075a4:	2320      	movs	r3, #32
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075aa:	e0ac      	b.n	8007706 <UART_SetConfig+0x5a6>
 80075ac:	2340      	movs	r3, #64	@ 0x40
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b2:	e0a8      	b.n	8007706 <UART_SetConfig+0x5a6>
 80075b4:	2380      	movs	r3, #128	@ 0x80
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ba:	e0a4      	b.n	8007706 <UART_SetConfig+0x5a6>
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a8f      	ldr	r2, [pc, #572]	@ (8007800 <UART_SetConfig+0x6a0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d130      	bne.n	8007628 <UART_SetConfig+0x4c8>
 80075c6:	4b8d      	ldr	r3, [pc, #564]	@ (80077fc <UART_SetConfig+0x69c>)
 80075c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	2b05      	cmp	r3, #5
 80075d0:	d826      	bhi.n	8007620 <UART_SetConfig+0x4c0>
 80075d2:	a201      	add	r2, pc, #4	@ (adr r2, 80075d8 <UART_SetConfig+0x478>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	080075f1 	.word	0x080075f1
 80075dc:	080075f9 	.word	0x080075f9
 80075e0:	08007601 	.word	0x08007601
 80075e4:	08007609 	.word	0x08007609
 80075e8:	08007611 	.word	0x08007611
 80075ec:	08007619 	.word	0x08007619
 80075f0:	2300      	movs	r3, #0
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f6:	e086      	b.n	8007706 <UART_SetConfig+0x5a6>
 80075f8:	2304      	movs	r3, #4
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fe:	e082      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007600:	2308      	movs	r3, #8
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007606:	e07e      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007608:	2310      	movs	r3, #16
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760e:	e07a      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007610:	2320      	movs	r3, #32
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007616:	e076      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007618:	2340      	movs	r3, #64	@ 0x40
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761e:	e072      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007620:	2380      	movs	r3, #128	@ 0x80
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007626:	e06e      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a75      	ldr	r2, [pc, #468]	@ (8007804 <UART_SetConfig+0x6a4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d130      	bne.n	8007694 <UART_SetConfig+0x534>
 8007632:	4b72      	ldr	r3, [pc, #456]	@ (80077fc <UART_SetConfig+0x69c>)
 8007634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b05      	cmp	r3, #5
 800763c:	d826      	bhi.n	800768c <UART_SetConfig+0x52c>
 800763e:	a201      	add	r2, pc, #4	@ (adr r2, 8007644 <UART_SetConfig+0x4e4>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	0800765d 	.word	0x0800765d
 8007648:	08007665 	.word	0x08007665
 800764c:	0800766d 	.word	0x0800766d
 8007650:	08007675 	.word	0x08007675
 8007654:	0800767d 	.word	0x0800767d
 8007658:	08007685 	.word	0x08007685
 800765c:	2300      	movs	r3, #0
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007662:	e050      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007664:	2304      	movs	r3, #4
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766a:	e04c      	b.n	8007706 <UART_SetConfig+0x5a6>
 800766c:	2308      	movs	r3, #8
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007672:	e048      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007674:	2310      	movs	r3, #16
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767a:	e044      	b.n	8007706 <UART_SetConfig+0x5a6>
 800767c:	2320      	movs	r3, #32
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007682:	e040      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007684:	2340      	movs	r3, #64	@ 0x40
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768a:	e03c      	b.n	8007706 <UART_SetConfig+0x5a6>
 800768c:	2380      	movs	r3, #128	@ 0x80
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007692:	e038      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a5b      	ldr	r2, [pc, #364]	@ (8007808 <UART_SetConfig+0x6a8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d130      	bne.n	8007700 <UART_SetConfig+0x5a0>
 800769e:	4b57      	ldr	r3, [pc, #348]	@ (80077fc <UART_SetConfig+0x69c>)
 80076a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a2:	f003 0307 	and.w	r3, r3, #7
 80076a6:	2b05      	cmp	r3, #5
 80076a8:	d826      	bhi.n	80076f8 <UART_SetConfig+0x598>
 80076aa:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <UART_SetConfig+0x550>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	080076c9 	.word	0x080076c9
 80076b4:	080076d1 	.word	0x080076d1
 80076b8:	080076d9 	.word	0x080076d9
 80076bc:	080076e1 	.word	0x080076e1
 80076c0:	080076e9 	.word	0x080076e9
 80076c4:	080076f1 	.word	0x080076f1
 80076c8:	2302      	movs	r3, #2
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ce:	e01a      	b.n	8007706 <UART_SetConfig+0x5a6>
 80076d0:	2304      	movs	r3, #4
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d6:	e016      	b.n	8007706 <UART_SetConfig+0x5a6>
 80076d8:	2308      	movs	r3, #8
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076de:	e012      	b.n	8007706 <UART_SetConfig+0x5a6>
 80076e0:	2310      	movs	r3, #16
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e6:	e00e      	b.n	8007706 <UART_SetConfig+0x5a6>
 80076e8:	2320      	movs	r3, #32
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ee:	e00a      	b.n	8007706 <UART_SetConfig+0x5a6>
 80076f0:	2340      	movs	r3, #64	@ 0x40
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f6:	e006      	b.n	8007706 <UART_SetConfig+0x5a6>
 80076f8:	2380      	movs	r3, #128	@ 0x80
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fe:	e002      	b.n	8007706 <UART_SetConfig+0x5a6>
 8007700:	2380      	movs	r3, #128	@ 0x80
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a3f      	ldr	r2, [pc, #252]	@ (8007808 <UART_SetConfig+0x6a8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	f040 80f8 	bne.w	8007902 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007712:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007716:	2b20      	cmp	r3, #32
 8007718:	dc46      	bgt.n	80077a8 <UART_SetConfig+0x648>
 800771a:	2b02      	cmp	r3, #2
 800771c:	f2c0 8082 	blt.w	8007824 <UART_SetConfig+0x6c4>
 8007720:	3b02      	subs	r3, #2
 8007722:	2b1e      	cmp	r3, #30
 8007724:	d87e      	bhi.n	8007824 <UART_SetConfig+0x6c4>
 8007726:	a201      	add	r2, pc, #4	@ (adr r2, 800772c <UART_SetConfig+0x5cc>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	080077af 	.word	0x080077af
 8007730:	08007825 	.word	0x08007825
 8007734:	080077b7 	.word	0x080077b7
 8007738:	08007825 	.word	0x08007825
 800773c:	08007825 	.word	0x08007825
 8007740:	08007825 	.word	0x08007825
 8007744:	080077c7 	.word	0x080077c7
 8007748:	08007825 	.word	0x08007825
 800774c:	08007825 	.word	0x08007825
 8007750:	08007825 	.word	0x08007825
 8007754:	08007825 	.word	0x08007825
 8007758:	08007825 	.word	0x08007825
 800775c:	08007825 	.word	0x08007825
 8007760:	08007825 	.word	0x08007825
 8007764:	080077d7 	.word	0x080077d7
 8007768:	08007825 	.word	0x08007825
 800776c:	08007825 	.word	0x08007825
 8007770:	08007825 	.word	0x08007825
 8007774:	08007825 	.word	0x08007825
 8007778:	08007825 	.word	0x08007825
 800777c:	08007825 	.word	0x08007825
 8007780:	08007825 	.word	0x08007825
 8007784:	08007825 	.word	0x08007825
 8007788:	08007825 	.word	0x08007825
 800778c:	08007825 	.word	0x08007825
 8007790:	08007825 	.word	0x08007825
 8007794:	08007825 	.word	0x08007825
 8007798:	08007825 	.word	0x08007825
 800779c:	08007825 	.word	0x08007825
 80077a0:	08007825 	.word	0x08007825
 80077a4:	08007817 	.word	0x08007817
 80077a8:	2b40      	cmp	r3, #64	@ 0x40
 80077aa:	d037      	beq.n	800781c <UART_SetConfig+0x6bc>
 80077ac:	e03a      	b.n	8007824 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077ae:	f7fd fa87 	bl	8004cc0 <HAL_RCCEx_GetD3PCLK1Freq>
 80077b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077b4:	e03c      	b.n	8007830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fd fa96 	bl	8004cec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c4:	e034      	b.n	8007830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c6:	f107 0318 	add.w	r3, r7, #24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fd fbe2 	bl	8004f94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d4:	e02c      	b.n	8007830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077d6:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <UART_SetConfig+0x69c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d016      	beq.n	8007810 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077e2:	4b06      	ldr	r3, [pc, #24]	@ (80077fc <UART_SetConfig+0x69c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	08db      	lsrs	r3, r3, #3
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	4a07      	ldr	r2, [pc, #28]	@ (800780c <UART_SetConfig+0x6ac>)
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077f4:	e01c      	b.n	8007830 <UART_SetConfig+0x6d0>
 80077f6:	bf00      	nop
 80077f8:	40011400 	.word	0x40011400
 80077fc:	58024400 	.word	0x58024400
 8007800:	40007800 	.word	0x40007800
 8007804:	40007c00 	.word	0x40007c00
 8007808:	58000c00 	.word	0x58000c00
 800780c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007810:	4b9d      	ldr	r3, [pc, #628]	@ (8007a88 <UART_SetConfig+0x928>)
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007814:	e00c      	b.n	8007830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007816:	4b9d      	ldr	r3, [pc, #628]	@ (8007a8c <UART_SetConfig+0x92c>)
 8007818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800781a:	e009      	b.n	8007830 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800781c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007822:	e005      	b.n	8007830 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800782e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 81de 	beq.w	8007bf4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783c:	4a94      	ldr	r2, [pc, #592]	@ (8007a90 <UART_SetConfig+0x930>)
 800783e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007842:	461a      	mov	r2, r3
 8007844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007846:	fbb3 f3f2 	udiv	r3, r3, r2
 800784a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	4613      	mov	r3, r2
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	4413      	add	r3, r2
 8007856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007858:	429a      	cmp	r2, r3
 800785a:	d305      	bcc.n	8007868 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007864:	429a      	cmp	r2, r3
 8007866:	d903      	bls.n	8007870 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800786e:	e1c1      	b.n	8007bf4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007872:	2200      	movs	r2, #0
 8007874:	60bb      	str	r3, [r7, #8]
 8007876:	60fa      	str	r2, [r7, #12]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787c:	4a84      	ldr	r2, [pc, #528]	@ (8007a90 <UART_SetConfig+0x930>)
 800787e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007882:	b29b      	uxth	r3, r3
 8007884:	2200      	movs	r2, #0
 8007886:	603b      	str	r3, [r7, #0]
 8007888:	607a      	str	r2, [r7, #4]
 800788a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007892:	f7f8 fd75 	bl	8000380 <__aeabi_uldivmod>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4610      	mov	r0, r2
 800789c:	4619      	mov	r1, r3
 800789e:	f04f 0200 	mov.w	r2, #0
 80078a2:	f04f 0300 	mov.w	r3, #0
 80078a6:	020b      	lsls	r3, r1, #8
 80078a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078ac:	0202      	lsls	r2, r0, #8
 80078ae:	6979      	ldr	r1, [r7, #20]
 80078b0:	6849      	ldr	r1, [r1, #4]
 80078b2:	0849      	lsrs	r1, r1, #1
 80078b4:	2000      	movs	r0, #0
 80078b6:	460c      	mov	r4, r1
 80078b8:	4605      	mov	r5, r0
 80078ba:	eb12 0804 	adds.w	r8, r2, r4
 80078be:	eb43 0905 	adc.w	r9, r3, r5
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	469a      	mov	sl, r3
 80078ca:	4693      	mov	fp, r2
 80078cc:	4652      	mov	r2, sl
 80078ce:	465b      	mov	r3, fp
 80078d0:	4640      	mov	r0, r8
 80078d2:	4649      	mov	r1, r9
 80078d4:	f7f8 fd54 	bl	8000380 <__aeabi_uldivmod>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4613      	mov	r3, r2
 80078de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078e6:	d308      	bcc.n	80078fa <UART_SetConfig+0x79a>
 80078e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078ee:	d204      	bcs.n	80078fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078f6:	60da      	str	r2, [r3, #12]
 80078f8:	e17c      	b.n	8007bf4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007900:	e178      	b.n	8007bf4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800790a:	f040 80c5 	bne.w	8007a98 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800790e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007912:	2b20      	cmp	r3, #32
 8007914:	dc48      	bgt.n	80079a8 <UART_SetConfig+0x848>
 8007916:	2b00      	cmp	r3, #0
 8007918:	db7b      	blt.n	8007a12 <UART_SetConfig+0x8b2>
 800791a:	2b20      	cmp	r3, #32
 800791c:	d879      	bhi.n	8007a12 <UART_SetConfig+0x8b2>
 800791e:	a201      	add	r2, pc, #4	@ (adr r2, 8007924 <UART_SetConfig+0x7c4>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	080079af 	.word	0x080079af
 8007928:	080079b7 	.word	0x080079b7
 800792c:	08007a13 	.word	0x08007a13
 8007930:	08007a13 	.word	0x08007a13
 8007934:	080079bf 	.word	0x080079bf
 8007938:	08007a13 	.word	0x08007a13
 800793c:	08007a13 	.word	0x08007a13
 8007940:	08007a13 	.word	0x08007a13
 8007944:	080079cf 	.word	0x080079cf
 8007948:	08007a13 	.word	0x08007a13
 800794c:	08007a13 	.word	0x08007a13
 8007950:	08007a13 	.word	0x08007a13
 8007954:	08007a13 	.word	0x08007a13
 8007958:	08007a13 	.word	0x08007a13
 800795c:	08007a13 	.word	0x08007a13
 8007960:	08007a13 	.word	0x08007a13
 8007964:	080079df 	.word	0x080079df
 8007968:	08007a13 	.word	0x08007a13
 800796c:	08007a13 	.word	0x08007a13
 8007970:	08007a13 	.word	0x08007a13
 8007974:	08007a13 	.word	0x08007a13
 8007978:	08007a13 	.word	0x08007a13
 800797c:	08007a13 	.word	0x08007a13
 8007980:	08007a13 	.word	0x08007a13
 8007984:	08007a13 	.word	0x08007a13
 8007988:	08007a13 	.word	0x08007a13
 800798c:	08007a13 	.word	0x08007a13
 8007990:	08007a13 	.word	0x08007a13
 8007994:	08007a13 	.word	0x08007a13
 8007998:	08007a13 	.word	0x08007a13
 800799c:	08007a13 	.word	0x08007a13
 80079a0:	08007a13 	.word	0x08007a13
 80079a4:	08007a05 	.word	0x08007a05
 80079a8:	2b40      	cmp	r3, #64	@ 0x40
 80079aa:	d02e      	beq.n	8007a0a <UART_SetConfig+0x8aa>
 80079ac:	e031      	b.n	8007a12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ae:	f7fb fecf 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 80079b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079b4:	e033      	b.n	8007a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079b6:	f7fb fee1 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 80079ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80079bc:	e02f      	b.n	8007a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fd f992 	bl	8004cec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079cc:	e027      	b.n	8007a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ce:	f107 0318 	add.w	r3, r7, #24
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fd fade 	bl	8004f94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079dc:	e01f      	b.n	8007a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079de:	4b2d      	ldr	r3, [pc, #180]	@ (8007a94 <UART_SetConfig+0x934>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079ea:	4b2a      	ldr	r3, [pc, #168]	@ (8007a94 <UART_SetConfig+0x934>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	08db      	lsrs	r3, r3, #3
 80079f0:	f003 0303 	and.w	r3, r3, #3
 80079f4:	4a24      	ldr	r2, [pc, #144]	@ (8007a88 <UART_SetConfig+0x928>)
 80079f6:	fa22 f303 	lsr.w	r3, r2, r3
 80079fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079fc:	e00f      	b.n	8007a1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80079fe:	4b22      	ldr	r3, [pc, #136]	@ (8007a88 <UART_SetConfig+0x928>)
 8007a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a02:	e00c      	b.n	8007a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a04:	4b21      	ldr	r3, [pc, #132]	@ (8007a8c <UART_SetConfig+0x92c>)
 8007a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a08:	e009      	b.n	8007a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a10:	e005      	b.n	8007a1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80e7 	beq.w	8007bf4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	4a19      	ldr	r2, [pc, #100]	@ (8007a90 <UART_SetConfig+0x930>)
 8007a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a30:	461a      	mov	r2, r3
 8007a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a38:	005a      	lsls	r2, r3, #1
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	085b      	lsrs	r3, r3, #1
 8007a40:	441a      	add	r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4e:	2b0f      	cmp	r3, #15
 8007a50:	d916      	bls.n	8007a80 <UART_SetConfig+0x920>
 8007a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a58:	d212      	bcs.n	8007a80 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f023 030f 	bic.w	r3, r3, #15
 8007a62:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a72:	4313      	orrs	r3, r2
 8007a74:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007a7c:	60da      	str	r2, [r3, #12]
 8007a7e:	e0b9      	b.n	8007bf4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007a86:	e0b5      	b.n	8007bf4 <UART_SetConfig+0xa94>
 8007a88:	03d09000 	.word	0x03d09000
 8007a8c:	003d0900 	.word	0x003d0900
 8007a90:	08009998 	.word	0x08009998
 8007a94:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	dc49      	bgt.n	8007b34 <UART_SetConfig+0x9d4>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	db7c      	blt.n	8007b9e <UART_SetConfig+0xa3e>
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d87a      	bhi.n	8007b9e <UART_SetConfig+0xa3e>
 8007aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab0 <UART_SetConfig+0x950>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007b3b 	.word	0x08007b3b
 8007ab4:	08007b43 	.word	0x08007b43
 8007ab8:	08007b9f 	.word	0x08007b9f
 8007abc:	08007b9f 	.word	0x08007b9f
 8007ac0:	08007b4b 	.word	0x08007b4b
 8007ac4:	08007b9f 	.word	0x08007b9f
 8007ac8:	08007b9f 	.word	0x08007b9f
 8007acc:	08007b9f 	.word	0x08007b9f
 8007ad0:	08007b5b 	.word	0x08007b5b
 8007ad4:	08007b9f 	.word	0x08007b9f
 8007ad8:	08007b9f 	.word	0x08007b9f
 8007adc:	08007b9f 	.word	0x08007b9f
 8007ae0:	08007b9f 	.word	0x08007b9f
 8007ae4:	08007b9f 	.word	0x08007b9f
 8007ae8:	08007b9f 	.word	0x08007b9f
 8007aec:	08007b9f 	.word	0x08007b9f
 8007af0:	08007b6b 	.word	0x08007b6b
 8007af4:	08007b9f 	.word	0x08007b9f
 8007af8:	08007b9f 	.word	0x08007b9f
 8007afc:	08007b9f 	.word	0x08007b9f
 8007b00:	08007b9f 	.word	0x08007b9f
 8007b04:	08007b9f 	.word	0x08007b9f
 8007b08:	08007b9f 	.word	0x08007b9f
 8007b0c:	08007b9f 	.word	0x08007b9f
 8007b10:	08007b9f 	.word	0x08007b9f
 8007b14:	08007b9f 	.word	0x08007b9f
 8007b18:	08007b9f 	.word	0x08007b9f
 8007b1c:	08007b9f 	.word	0x08007b9f
 8007b20:	08007b9f 	.word	0x08007b9f
 8007b24:	08007b9f 	.word	0x08007b9f
 8007b28:	08007b9f 	.word	0x08007b9f
 8007b2c:	08007b9f 	.word	0x08007b9f
 8007b30:	08007b91 	.word	0x08007b91
 8007b34:	2b40      	cmp	r3, #64	@ 0x40
 8007b36:	d02e      	beq.n	8007b96 <UART_SetConfig+0xa36>
 8007b38:	e031      	b.n	8007b9e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b3a:	f7fb fe09 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8007b3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b40:	e033      	b.n	8007baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b42:	f7fb fe1b 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 8007b46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b48:	e02f      	b.n	8007baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fd f8cc 	bl	8004cec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b58:	e027      	b.n	8007baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b5a:	f107 0318 	add.w	r3, r7, #24
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fd fa18 	bl	8004f94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b68:	e01f      	b.n	8007baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8007c20 <UART_SetConfig+0xac0>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b76:	4b2a      	ldr	r3, [pc, #168]	@ (8007c20 <UART_SetConfig+0xac0>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	08db      	lsrs	r3, r3, #3
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	4a28      	ldr	r2, [pc, #160]	@ (8007c24 <UART_SetConfig+0xac4>)
 8007b82:	fa22 f303 	lsr.w	r3, r2, r3
 8007b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b88:	e00f      	b.n	8007baa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007b8a:	4b26      	ldr	r3, [pc, #152]	@ (8007c24 <UART_SetConfig+0xac4>)
 8007b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b8e:	e00c      	b.n	8007baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b90:	4b25      	ldr	r3, [pc, #148]	@ (8007c28 <UART_SetConfig+0xac8>)
 8007b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b94:	e009      	b.n	8007baa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b9c:	e005      	b.n	8007baa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ba8:	bf00      	nop
    }

    if (pclk != 0U)
 8007baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d021      	beq.n	8007bf4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c2c <UART_SetConfig+0xacc>)
 8007bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	085b      	lsrs	r3, r3, #1
 8007bc8:	441a      	add	r2, r3
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd6:	2b0f      	cmp	r3, #15
 8007bd8:	d909      	bls.n	8007bee <UART_SetConfig+0xa8e>
 8007bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007be0:	d205      	bcs.n	8007bee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60da      	str	r2, [r3, #12]
 8007bec:	e002      	b.n	8007bf4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	2200      	movs	r2, #0
 8007c08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c10:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3748      	adds	r7, #72	@ 0x48
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c1e:	bf00      	nop
 8007c20:	58024400 	.word	0x58024400
 8007c24:	03d09000 	.word	0x03d09000
 8007c28:	003d0900 	.word	0x003d0900
 8007c2c:	08009998 	.word	0x08009998

08007c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00a      	beq.n	8007c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00a      	beq.n	8007c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca2:	f003 0304 	and.w	r3, r3, #4
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00a      	beq.n	8007cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00a      	beq.n	8007ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d01a      	beq.n	8007d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d2e:	d10a      	bne.n	8007d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	605a      	str	r2, [r3, #4]
  }
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b098      	sub	sp, #96	@ 0x60
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d84:	f7fa f940 	bl	8002008 <HAL_GetTick>
 8007d88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d12f      	bne.n	8007df8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da0:	2200      	movs	r2, #0
 8007da2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f88e 	bl	8007ec8 <UART_WaitOnFlagUntilTimeout>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d022      	beq.n	8007df8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e6      	bne.n	8007db2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e063      	b.n	8007ec0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d149      	bne.n	8007e9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f857 	bl	8007ec8 <UART_WaitOnFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d03c      	beq.n	8007e9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e6      	bne.n	8007e20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3308      	adds	r3, #8
 8007e58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f023 0301 	bic.w	r3, r3, #1
 8007e68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e72:	61fa      	str	r2, [r7, #28]
 8007e74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	69b9      	ldr	r1, [r7, #24]
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e5      	bne.n	8007e52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e012      	b.n	8007ec0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3758      	adds	r7, #88	@ 0x58
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ed8:	e04f      	b.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d04b      	beq.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ee2:	f7fa f891 	bl	8002008 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d302      	bcc.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e04e      	b.n	8007f9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d037      	beq.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b80      	cmp	r3, #128	@ 0x80
 8007f0e:	d034      	beq.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b40      	cmp	r3, #64	@ 0x40
 8007f14:	d031      	beq.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d110      	bne.n	8007f46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2208      	movs	r2, #8
 8007f2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f839 	bl	8007fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2208      	movs	r2, #8
 8007f36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e029      	b.n	8007f9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f54:	d111      	bne.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f81f 	bl	8007fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e00f      	b.n	8007f9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69da      	ldr	r2, [r3, #28]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	4013      	ands	r3, r2
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	bf0c      	ite	eq
 8007f8a:	2301      	moveq	r3, #1
 8007f8c:	2300      	movne	r3, #0
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d0a0      	beq.n	8007eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b095      	sub	sp, #84	@ 0x54
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fca:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e6      	bne.n	8007fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	e853 3f00 	ldrex	r3, [r3]
 8007fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800806c <UART_EndRxTransfer+0xc8>)
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e5      	bne.n	8007fde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008016:	2b01      	cmp	r3, #1
 8008018:	d118      	bne.n	800804c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	60bb      	str	r3, [r7, #8]
   return(result);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f023 0310 	bic.w	r3, r3, #16
 800802e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	6979      	ldr	r1, [r7, #20]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	613b      	str	r3, [r7, #16]
   return(result);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e6      	bne.n	800801a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008060:	bf00      	nop
 8008062:	3754      	adds	r7, #84	@ 0x54
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	effffffe 	.word	0xeffffffe

08008070 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_UARTEx_DisableFifoMode+0x16>
 8008082:	2302      	movs	r3, #2
 8008084:	e027      	b.n	80080d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2224      	movs	r2, #36	@ 0x24
 8008092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0201 	bic.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80080b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d101      	bne.n	80080fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080f6:	2302      	movs	r3, #2
 80080f8:	e02d      	b.n	8008156 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2224      	movs	r2, #36	@ 0x24
 8008106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f850 	bl	80081dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008172:	2302      	movs	r3, #2
 8008174:	e02d      	b.n	80081d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2224      	movs	r2, #36	@ 0x24
 8008182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0201 	bic.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f812 	bl	80081dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d108      	bne.n	80081fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081fc:	e031      	b.n	8008262 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081fe:	2310      	movs	r3, #16
 8008200:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008202:	2310      	movs	r3, #16
 8008204:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	0e5b      	lsrs	r3, r3, #25
 800820e:	b2db      	uxtb	r3, r3
 8008210:	f003 0307 	and.w	r3, r3, #7
 8008214:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	0f5b      	lsrs	r3, r3, #29
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	7b3a      	ldrb	r2, [r7, #12]
 800822a:	4911      	ldr	r1, [pc, #68]	@ (8008270 <UARTEx_SetNbDataToProcess+0x94>)
 800822c:	5c8a      	ldrb	r2, [r1, r2]
 800822e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008232:	7b3a      	ldrb	r2, [r7, #12]
 8008234:	490f      	ldr	r1, [pc, #60]	@ (8008274 <UARTEx_SetNbDataToProcess+0x98>)
 8008236:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008238:	fb93 f3f2 	sdiv	r3, r3, r2
 800823c:	b29a      	uxth	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	7b7a      	ldrb	r2, [r7, #13]
 8008248:	4909      	ldr	r1, [pc, #36]	@ (8008270 <UARTEx_SetNbDataToProcess+0x94>)
 800824a:	5c8a      	ldrb	r2, [r1, r2]
 800824c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008250:	7b7a      	ldrb	r2, [r7, #13]
 8008252:	4908      	ldr	r1, [pc, #32]	@ (8008274 <UARTEx_SetNbDataToProcess+0x98>)
 8008254:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008256:	fb93 f3f2 	sdiv	r3, r3, r2
 800825a:	b29a      	uxth	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008262:	bf00      	nop
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	080099b0 	.word	0x080099b0
 8008274:	080099b8 	.word	0x080099b8

08008278 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800827c:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <SysTick_Handler+0x1c>)
 800827e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008280:	f000 fa5c 	bl	800873c <xTaskGetSchedulerState>
 8008284:	4603      	mov	r3, r0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d001      	beq.n	800828e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800828a:	f000 f8fd 	bl	8008488 <xPortSysTickHandler>
  }
}
 800828e:	bf00      	nop
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	e000e010 	.word	0xe000e010

08008298 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	601a      	str	r2, [r3, #0]
}
 80082d4:	bf00      	nop
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6892      	ldr	r2, [r2, #8]
 80082f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6852      	ldr	r2, [r2, #4]
 8008300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	429a      	cmp	r2, r3
 800830a:	d103      	bne.n	8008314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	1e5a      	subs	r2, r3, #1
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
	...

08008340 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008340:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <pxCurrentTCBConst2>)
 8008342:	6819      	ldr	r1, [r3, #0]
 8008344:	6808      	ldr	r0, [r1, #0]
 8008346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834a:	f380 8809 	msr	PSP, r0
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f04f 0000 	mov.w	r0, #0
 8008356:	f380 8811 	msr	BASEPRI, r0
 800835a:	4770      	bx	lr
 800835c:	f3af 8000 	nop.w

08008360 <pxCurrentTCBConst2>:
 8008360:	24000338 	.word	0x24000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop

08008368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008382:	4b10      	ldr	r3, [pc, #64]	@ (80083c4 <vPortEnterCritical+0x5c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	4a0e      	ldr	r2, [pc, #56]	@ (80083c4 <vPortEnterCritical+0x5c>)
 800838a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800838c:	4b0d      	ldr	r3, [pc, #52]	@ (80083c4 <vPortEnterCritical+0x5c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d110      	bne.n	80083b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008394:	4b0c      	ldr	r3, [pc, #48]	@ (80083c8 <vPortEnterCritical+0x60>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00b      	beq.n	80083b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	603b      	str	r3, [r7, #0]
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	e7fd      	b.n	80083b2 <vPortEnterCritical+0x4a>
	}
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	24000010 	.word	0x24000010
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083d2:	4b12      	ldr	r3, [pc, #72]	@ (800841c <vPortExitCritical+0x50>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <vPortExitCritical+0x26>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	607b      	str	r3, [r7, #4]
}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	e7fd      	b.n	80083ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083f2:	4b0a      	ldr	r3, [pc, #40]	@ (800841c <vPortExitCritical+0x50>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	4a08      	ldr	r2, [pc, #32]	@ (800841c <vPortExitCritical+0x50>)
 80083fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083fc:	4b07      	ldr	r3, [pc, #28]	@ (800841c <vPortExitCritical+0x50>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d105      	bne.n	8008410 <vPortExitCritical+0x44>
 8008404:	2300      	movs	r3, #0
 8008406:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800840e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	24000010 	.word	0x24000010

08008420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008420:	f3ef 8009 	mrs	r0, PSP
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	4b15      	ldr	r3, [pc, #84]	@ (8008480 <pxCurrentTCBConst>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	f01e 0f10 	tst.w	lr, #16
 8008430:	bf08      	it	eq
 8008432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843a:	6010      	str	r0, [r2, #0]
 800843c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008444:	f380 8811 	msr	BASEPRI, r0
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f000 f8f6 	bl	8008640 <vTaskSwitchContext>
 8008454:	f04f 0000 	mov.w	r0, #0
 8008458:	f380 8811 	msr	BASEPRI, r0
 800845c:	bc09      	pop	{r0, r3}
 800845e:	6819      	ldr	r1, [r3, #0]
 8008460:	6808      	ldr	r0, [r1, #0]
 8008462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008466:	f01e 0f10 	tst.w	lr, #16
 800846a:	bf08      	it	eq
 800846c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008470:	f380 8809 	msr	PSP, r0
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	f3af 8000 	nop.w

08008480 <pxCurrentTCBConst>:
 8008480:	24000338 	.word	0x24000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop

08008488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	607b      	str	r3, [r7, #4]
}
 80084a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084a2:	f000 f813 	bl	80084cc <xTaskIncrementTick>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084ac:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <xPortSysTickHandler+0x40>)
 80084ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	2300      	movs	r3, #0
 80084b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	f383 8811 	msr	BASEPRI, r3
}
 80084be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084d6:	4b4f      	ldr	r3, [pc, #316]	@ (8008614 <xTaskIncrementTick+0x148>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f040 8090 	bne.w	8008600 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084e0:	4b4d      	ldr	r3, [pc, #308]	@ (8008618 <xTaskIncrementTick+0x14c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084e8:	4a4b      	ldr	r2, [pc, #300]	@ (8008618 <xTaskIncrementTick+0x14c>)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d121      	bne.n	8008538 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80084f4:	4b49      	ldr	r3, [pc, #292]	@ (800861c <xTaskIncrementTick+0x150>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00b      	beq.n	8008516 <xTaskIncrementTick+0x4a>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	603b      	str	r3, [r7, #0]
}
 8008510:	bf00      	nop
 8008512:	bf00      	nop
 8008514:	e7fd      	b.n	8008512 <xTaskIncrementTick+0x46>
 8008516:	4b41      	ldr	r3, [pc, #260]	@ (800861c <xTaskIncrementTick+0x150>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	4b40      	ldr	r3, [pc, #256]	@ (8008620 <xTaskIncrementTick+0x154>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a3e      	ldr	r2, [pc, #248]	@ (800861c <xTaskIncrementTick+0x150>)
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	4a3e      	ldr	r2, [pc, #248]	@ (8008620 <xTaskIncrementTick+0x154>)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	4b3e      	ldr	r3, [pc, #248]	@ (8008624 <xTaskIncrementTick+0x158>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3301      	adds	r3, #1
 8008530:	4a3c      	ldr	r2, [pc, #240]	@ (8008624 <xTaskIncrementTick+0x158>)
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	f000 f8e2 	bl	80086fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008538:	4b3b      	ldr	r3, [pc, #236]	@ (8008628 <xTaskIncrementTick+0x15c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	429a      	cmp	r2, r3
 8008540:	d349      	bcc.n	80085d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008542:	4b36      	ldr	r3, [pc, #216]	@ (800861c <xTaskIncrementTick+0x150>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d104      	bne.n	8008556 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800854c:	4b36      	ldr	r3, [pc, #216]	@ (8008628 <xTaskIncrementTick+0x15c>)
 800854e:	f04f 32ff 	mov.w	r2, #4294967295
 8008552:	601a      	str	r2, [r3, #0]
					break;
 8008554:	e03f      	b.n	80085d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008556:	4b31      	ldr	r3, [pc, #196]	@ (800861c <xTaskIncrementTick+0x150>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d203      	bcs.n	8008576 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800856e:	4a2e      	ldr	r2, [pc, #184]	@ (8008628 <xTaskIncrementTick+0x15c>)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008574:	e02f      	b.n	80085d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	3304      	adds	r3, #4
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff feb0 	bl	80082e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	3318      	adds	r3, #24
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff fea7 	bl	80082e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008596:	4b25      	ldr	r3, [pc, #148]	@ (800862c <xTaskIncrementTick+0x160>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d903      	bls.n	80085a6 <xTaskIncrementTick+0xda>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a2:	4a22      	ldr	r2, [pc, #136]	@ (800862c <xTaskIncrementTick+0x160>)
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085aa:	4613      	mov	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008630 <xTaskIncrementTick+0x164>)
 80085b4:	441a      	add	r2, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	3304      	adds	r3, #4
 80085ba:	4619      	mov	r1, r3
 80085bc:	4610      	mov	r0, r2
 80085be:	f7ff fe6b 	bl	8008298 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c6:	4b1b      	ldr	r3, [pc, #108]	@ (8008634 <xTaskIncrementTick+0x168>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d3b8      	bcc.n	8008542 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80085d0:	2301      	movs	r3, #1
 80085d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085d4:	e7b5      	b.n	8008542 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085d6:	4b17      	ldr	r3, [pc, #92]	@ (8008634 <xTaskIncrementTick+0x168>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085dc:	4914      	ldr	r1, [pc, #80]	@ (8008630 <xTaskIncrementTick+0x164>)
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	440b      	add	r3, r1
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d901      	bls.n	80085f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80085ee:	2301      	movs	r3, #1
 80085f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085f2:	4b11      	ldr	r3, [pc, #68]	@ (8008638 <xTaskIncrementTick+0x16c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80085fa:	2301      	movs	r3, #1
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e004      	b.n	800860a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008600:	4b0e      	ldr	r3, [pc, #56]	@ (800863c <xTaskIncrementTick+0x170>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3301      	adds	r3, #1
 8008606:	4a0d      	ldr	r2, [pc, #52]	@ (800863c <xTaskIncrementTick+0x170>)
 8008608:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800860a:	697b      	ldr	r3, [r7, #20]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	240007c0 	.word	0x240007c0
 8008618:	240007a4 	.word	0x240007a4
 800861c:	2400079c 	.word	0x2400079c
 8008620:	240007a0 	.word	0x240007a0
 8008624:	240007b8 	.word	0x240007b8
 8008628:	240007bc 	.word	0x240007bc
 800862c:	240007a8 	.word	0x240007a8
 8008630:	2400033c 	.word	0x2400033c
 8008634:	24000338 	.word	0x24000338
 8008638:	240007b4 	.word	0x240007b4
 800863c:	240007b0 	.word	0x240007b0

08008640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008646:	4b28      	ldr	r3, [pc, #160]	@ (80086e8 <vTaskSwitchContext+0xa8>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800864e:	4b27      	ldr	r3, [pc, #156]	@ (80086ec <vTaskSwitchContext+0xac>)
 8008650:	2201      	movs	r2, #1
 8008652:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008654:	e042      	b.n	80086dc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008656:	4b25      	ldr	r3, [pc, #148]	@ (80086ec <vTaskSwitchContext+0xac>)
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800865c:	4b24      	ldr	r3, [pc, #144]	@ (80086f0 <vTaskSwitchContext+0xb0>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60fb      	str	r3, [r7, #12]
 8008662:	e011      	b.n	8008688 <vTaskSwitchContext+0x48>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10b      	bne.n	8008682 <vTaskSwitchContext+0x42>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	607b      	str	r3, [r7, #4]
}
 800867c:	bf00      	nop
 800867e:	bf00      	nop
 8008680:	e7fd      	b.n	800867e <vTaskSwitchContext+0x3e>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3b01      	subs	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	491a      	ldr	r1, [pc, #104]	@ (80086f4 <vTaskSwitchContext+0xb4>)
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0e3      	beq.n	8008664 <vTaskSwitchContext+0x24>
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4a13      	ldr	r2, [pc, #76]	@ (80086f4 <vTaskSwitchContext+0xb4>)
 80086a8:	4413      	add	r3, r2
 80086aa:	60bb      	str	r3, [r7, #8]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	605a      	str	r2, [r3, #4]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	3308      	adds	r3, #8
 80086be:	429a      	cmp	r2, r3
 80086c0:	d104      	bne.n	80086cc <vTaskSwitchContext+0x8c>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	605a      	str	r2, [r3, #4]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	4a09      	ldr	r2, [pc, #36]	@ (80086f8 <vTaskSwitchContext+0xb8>)
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	4a06      	ldr	r2, [pc, #24]	@ (80086f0 <vTaskSwitchContext+0xb0>)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6013      	str	r3, [r2, #0]
}
 80086dc:	bf00      	nop
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	240007c0 	.word	0x240007c0
 80086ec:	240007b4 	.word	0x240007b4
 80086f0:	240007a8 	.word	0x240007a8
 80086f4:	2400033c 	.word	0x2400033c
 80086f8:	24000338 	.word	0x24000338

080086fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008702:	4b0c      	ldr	r3, [pc, #48]	@ (8008734 <prvResetNextTaskUnblockTime+0x38>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800870c:	4b0a      	ldr	r3, [pc, #40]	@ (8008738 <prvResetNextTaskUnblockTime+0x3c>)
 800870e:	f04f 32ff 	mov.w	r2, #4294967295
 8008712:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008714:	e008      	b.n	8008728 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008716:	4b07      	ldr	r3, [pc, #28]	@ (8008734 <prvResetNextTaskUnblockTime+0x38>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	4a04      	ldr	r2, [pc, #16]	@ (8008738 <prvResetNextTaskUnblockTime+0x3c>)
 8008726:	6013      	str	r3, [r2, #0]
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	2400079c 	.word	0x2400079c
 8008738:	240007bc 	.word	0x240007bc

0800873c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008742:	4b0b      	ldr	r3, [pc, #44]	@ (8008770 <xTaskGetSchedulerState+0x34>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d102      	bne.n	8008750 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800874a:	2301      	movs	r3, #1
 800874c:	607b      	str	r3, [r7, #4]
 800874e:	e008      	b.n	8008762 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008750:	4b08      	ldr	r3, [pc, #32]	@ (8008774 <xTaskGetSchedulerState+0x38>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008758:	2302      	movs	r3, #2
 800875a:	607b      	str	r3, [r7, #4]
 800875c:	e001      	b.n	8008762 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800875e:	2300      	movs	r3, #0
 8008760:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008762:	687b      	ldr	r3, [r7, #4]
	}
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	240007ac 	.word	0x240007ac
 8008774:	240007c0 	.word	0x240007c0

08008778 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	@ 0x28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	4613      	mov	r3, r2
 8008786:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008788:	2301      	movs	r3, #1
 800878a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10b      	bne.n	80087aa <xTaskGenericNotify+0x32>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	61bb      	str	r3, [r7, #24]
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop
 80087a8:	e7fd      	b.n	80087a6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80087ae:	f7ff fddb 	bl	8008368 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80087c6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d827      	bhi.n	8008826 <xTaskGenericNotify+0xae>
 80087d6:	a201      	add	r2, pc, #4	@ (adr r2, 80087dc <xTaskGenericNotify+0x64>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	08008849 	.word	0x08008849
 80087e0:	080087f1 	.word	0x080087f1
 80087e4:	080087ff 	.word	0x080087ff
 80087e8:	0800880b 	.word	0x0800880b
 80087ec:	08008813 	.word	0x08008813
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	431a      	orrs	r2, r3
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80087fc:	e027      	b.n	800884e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8008808:	e021      	b.n	800884e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8008810:	e01d      	b.n	800884e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008812:	7ffb      	ldrb	r3, [r7, #31]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d003      	beq.n	8008820 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008818:	6a3b      	ldr	r3, [r7, #32]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800881e:	e016      	b.n	800884e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8008820:	2300      	movs	r3, #0
 8008822:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8008824:	e013      	b.n	800884e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882e:	d00d      	beq.n	800884c <xTaskGenericNotify+0xd4>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	617b      	str	r3, [r7, #20]
}
 8008842:	bf00      	nop
 8008844:	bf00      	nop
 8008846:	e7fd      	b.n	8008844 <xTaskGenericNotify+0xcc>
					break;
 8008848:	bf00      	nop
 800884a:	e000      	b.n	800884e <xTaskGenericNotify+0xd6>

					break;
 800884c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800884e:	7ffb      	ldrb	r3, [r7, #31]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d13b      	bne.n	80088cc <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	3304      	adds	r3, #4
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff fd41 	bl	80082e0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008862:	4b1e      	ldr	r3, [pc, #120]	@ (80088dc <xTaskGenericNotify+0x164>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d903      	bls.n	8008872 <xTaskGenericNotify+0xfa>
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886e:	4a1b      	ldr	r2, [pc, #108]	@ (80088dc <xTaskGenericNotify+0x164>)
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008876:	4613      	mov	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4a18      	ldr	r2, [pc, #96]	@ (80088e0 <xTaskGenericNotify+0x168>)
 8008880:	441a      	add	r2, r3
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	3304      	adds	r3, #4
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f7ff fd05 	bl	8008298 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00b      	beq.n	80088ae <xTaskGenericNotify+0x136>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	613b      	str	r3, [r7, #16]
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	e7fd      	b.n	80088aa <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b2:	4b0c      	ldr	r3, [pc, #48]	@ (80088e4 <xTaskGenericNotify+0x16c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d907      	bls.n	80088cc <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80088bc:	4b0a      	ldr	r3, [pc, #40]	@ (80088e8 <xTaskGenericNotify+0x170>)
 80088be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80088cc:	f7ff fd7e 	bl	80083cc <vPortExitCritical>

		return xReturn;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3728      	adds	r7, #40	@ 0x28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	240007a8 	.word	0x240007a8
 80088e0:	2400033c 	.word	0x2400033c
 80088e4:	24000338 	.word	0x24000338
 80088e8:	e000ed04 	.word	0xe000ed04

080088ec <std>:
 80088ec:	2300      	movs	r3, #0
 80088ee:	b510      	push	{r4, lr}
 80088f0:	4604      	mov	r4, r0
 80088f2:	e9c0 3300 	strd	r3, r3, [r0]
 80088f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088fa:	6083      	str	r3, [r0, #8]
 80088fc:	8181      	strh	r1, [r0, #12]
 80088fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008900:	81c2      	strh	r2, [r0, #14]
 8008902:	6183      	str	r3, [r0, #24]
 8008904:	4619      	mov	r1, r3
 8008906:	2208      	movs	r2, #8
 8008908:	305c      	adds	r0, #92	@ 0x5c
 800890a:	f000 f9f9 	bl	8008d00 <memset>
 800890e:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <std+0x58>)
 8008910:	6263      	str	r3, [r4, #36]	@ 0x24
 8008912:	4b0d      	ldr	r3, [pc, #52]	@ (8008948 <std+0x5c>)
 8008914:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008916:	4b0d      	ldr	r3, [pc, #52]	@ (800894c <std+0x60>)
 8008918:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800891a:	4b0d      	ldr	r3, [pc, #52]	@ (8008950 <std+0x64>)
 800891c:	6323      	str	r3, [r4, #48]	@ 0x30
 800891e:	4b0d      	ldr	r3, [pc, #52]	@ (8008954 <std+0x68>)
 8008920:	6224      	str	r4, [r4, #32]
 8008922:	429c      	cmp	r4, r3
 8008924:	d006      	beq.n	8008934 <std+0x48>
 8008926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800892a:	4294      	cmp	r4, r2
 800892c:	d002      	beq.n	8008934 <std+0x48>
 800892e:	33d0      	adds	r3, #208	@ 0xd0
 8008930:	429c      	cmp	r4, r3
 8008932:	d105      	bne.n	8008940 <std+0x54>
 8008934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800893c:	f000 ba58 	b.w	8008df0 <__retarget_lock_init_recursive>
 8008940:	bd10      	pop	{r4, pc}
 8008942:	bf00      	nop
 8008944:	08008b51 	.word	0x08008b51
 8008948:	08008b73 	.word	0x08008b73
 800894c:	08008bab 	.word	0x08008bab
 8008950:	08008bcf 	.word	0x08008bcf
 8008954:	240007c4 	.word	0x240007c4

08008958 <stdio_exit_handler>:
 8008958:	4a02      	ldr	r2, [pc, #8]	@ (8008964 <stdio_exit_handler+0xc>)
 800895a:	4903      	ldr	r1, [pc, #12]	@ (8008968 <stdio_exit_handler+0x10>)
 800895c:	4803      	ldr	r0, [pc, #12]	@ (800896c <stdio_exit_handler+0x14>)
 800895e:	f000 b869 	b.w	8008a34 <_fwalk_sglue>
 8008962:	bf00      	nop
 8008964:	24000014 	.word	0x24000014
 8008968:	080096a9 	.word	0x080096a9
 800896c:	24000024 	.word	0x24000024

08008970 <cleanup_stdio>:
 8008970:	6841      	ldr	r1, [r0, #4]
 8008972:	4b0c      	ldr	r3, [pc, #48]	@ (80089a4 <cleanup_stdio+0x34>)
 8008974:	4299      	cmp	r1, r3
 8008976:	b510      	push	{r4, lr}
 8008978:	4604      	mov	r4, r0
 800897a:	d001      	beq.n	8008980 <cleanup_stdio+0x10>
 800897c:	f000 fe94 	bl	80096a8 <_fflush_r>
 8008980:	68a1      	ldr	r1, [r4, #8]
 8008982:	4b09      	ldr	r3, [pc, #36]	@ (80089a8 <cleanup_stdio+0x38>)
 8008984:	4299      	cmp	r1, r3
 8008986:	d002      	beq.n	800898e <cleanup_stdio+0x1e>
 8008988:	4620      	mov	r0, r4
 800898a:	f000 fe8d 	bl	80096a8 <_fflush_r>
 800898e:	68e1      	ldr	r1, [r4, #12]
 8008990:	4b06      	ldr	r3, [pc, #24]	@ (80089ac <cleanup_stdio+0x3c>)
 8008992:	4299      	cmp	r1, r3
 8008994:	d004      	beq.n	80089a0 <cleanup_stdio+0x30>
 8008996:	4620      	mov	r0, r4
 8008998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800899c:	f000 be84 	b.w	80096a8 <_fflush_r>
 80089a0:	bd10      	pop	{r4, pc}
 80089a2:	bf00      	nop
 80089a4:	240007c4 	.word	0x240007c4
 80089a8:	2400082c 	.word	0x2400082c
 80089ac:	24000894 	.word	0x24000894

080089b0 <global_stdio_init.part.0>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	4b0b      	ldr	r3, [pc, #44]	@ (80089e0 <global_stdio_init.part.0+0x30>)
 80089b4:	4c0b      	ldr	r4, [pc, #44]	@ (80089e4 <global_stdio_init.part.0+0x34>)
 80089b6:	4a0c      	ldr	r2, [pc, #48]	@ (80089e8 <global_stdio_init.part.0+0x38>)
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	4620      	mov	r0, r4
 80089bc:	2200      	movs	r2, #0
 80089be:	2104      	movs	r1, #4
 80089c0:	f7ff ff94 	bl	80088ec <std>
 80089c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089c8:	2201      	movs	r2, #1
 80089ca:	2109      	movs	r1, #9
 80089cc:	f7ff ff8e 	bl	80088ec <std>
 80089d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089d4:	2202      	movs	r2, #2
 80089d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089da:	2112      	movs	r1, #18
 80089dc:	f7ff bf86 	b.w	80088ec <std>
 80089e0:	240008fc 	.word	0x240008fc
 80089e4:	240007c4 	.word	0x240007c4
 80089e8:	08008959 	.word	0x08008959

080089ec <__sfp_lock_acquire>:
 80089ec:	4801      	ldr	r0, [pc, #4]	@ (80089f4 <__sfp_lock_acquire+0x8>)
 80089ee:	f000 ba00 	b.w	8008df2 <__retarget_lock_acquire_recursive>
 80089f2:	bf00      	nop
 80089f4:	24000905 	.word	0x24000905

080089f8 <__sfp_lock_release>:
 80089f8:	4801      	ldr	r0, [pc, #4]	@ (8008a00 <__sfp_lock_release+0x8>)
 80089fa:	f000 b9fb 	b.w	8008df4 <__retarget_lock_release_recursive>
 80089fe:	bf00      	nop
 8008a00:	24000905 	.word	0x24000905

08008a04 <__sinit>:
 8008a04:	b510      	push	{r4, lr}
 8008a06:	4604      	mov	r4, r0
 8008a08:	f7ff fff0 	bl	80089ec <__sfp_lock_acquire>
 8008a0c:	6a23      	ldr	r3, [r4, #32]
 8008a0e:	b11b      	cbz	r3, 8008a18 <__sinit+0x14>
 8008a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a14:	f7ff bff0 	b.w	80089f8 <__sfp_lock_release>
 8008a18:	4b04      	ldr	r3, [pc, #16]	@ (8008a2c <__sinit+0x28>)
 8008a1a:	6223      	str	r3, [r4, #32]
 8008a1c:	4b04      	ldr	r3, [pc, #16]	@ (8008a30 <__sinit+0x2c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1f5      	bne.n	8008a10 <__sinit+0xc>
 8008a24:	f7ff ffc4 	bl	80089b0 <global_stdio_init.part.0>
 8008a28:	e7f2      	b.n	8008a10 <__sinit+0xc>
 8008a2a:	bf00      	nop
 8008a2c:	08008971 	.word	0x08008971
 8008a30:	240008fc 	.word	0x240008fc

08008a34 <_fwalk_sglue>:
 8008a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a38:	4607      	mov	r7, r0
 8008a3a:	4688      	mov	r8, r1
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	2600      	movs	r6, #0
 8008a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a44:	f1b9 0901 	subs.w	r9, r9, #1
 8008a48:	d505      	bpl.n	8008a56 <_fwalk_sglue+0x22>
 8008a4a:	6824      	ldr	r4, [r4, #0]
 8008a4c:	2c00      	cmp	r4, #0
 8008a4e:	d1f7      	bne.n	8008a40 <_fwalk_sglue+0xc>
 8008a50:	4630      	mov	r0, r6
 8008a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a56:	89ab      	ldrh	r3, [r5, #12]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d907      	bls.n	8008a6c <_fwalk_sglue+0x38>
 8008a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a60:	3301      	adds	r3, #1
 8008a62:	d003      	beq.n	8008a6c <_fwalk_sglue+0x38>
 8008a64:	4629      	mov	r1, r5
 8008a66:	4638      	mov	r0, r7
 8008a68:	47c0      	blx	r8
 8008a6a:	4306      	orrs	r6, r0
 8008a6c:	3568      	adds	r5, #104	@ 0x68
 8008a6e:	e7e9      	b.n	8008a44 <_fwalk_sglue+0x10>

08008a70 <iprintf>:
 8008a70:	b40f      	push	{r0, r1, r2, r3}
 8008a72:	b507      	push	{r0, r1, r2, lr}
 8008a74:	4906      	ldr	r1, [pc, #24]	@ (8008a90 <iprintf+0x20>)
 8008a76:	ab04      	add	r3, sp, #16
 8008a78:	6808      	ldr	r0, [r1, #0]
 8008a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7e:	6881      	ldr	r1, [r0, #8]
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	f000 fae9 	bl	8009058 <_vfiprintf_r>
 8008a86:	b003      	add	sp, #12
 8008a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a8c:	b004      	add	sp, #16
 8008a8e:	4770      	bx	lr
 8008a90:	24000020 	.word	0x24000020

08008a94 <_puts_r>:
 8008a94:	6a03      	ldr	r3, [r0, #32]
 8008a96:	b570      	push	{r4, r5, r6, lr}
 8008a98:	6884      	ldr	r4, [r0, #8]
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	460e      	mov	r6, r1
 8008a9e:	b90b      	cbnz	r3, 8008aa4 <_puts_r+0x10>
 8008aa0:	f7ff ffb0 	bl	8008a04 <__sinit>
 8008aa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008aa6:	07db      	lsls	r3, r3, #31
 8008aa8:	d405      	bmi.n	8008ab6 <_puts_r+0x22>
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	0598      	lsls	r0, r3, #22
 8008aae:	d402      	bmi.n	8008ab6 <_puts_r+0x22>
 8008ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ab2:	f000 f99e 	bl	8008df2 <__retarget_lock_acquire_recursive>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	0719      	lsls	r1, r3, #28
 8008aba:	d502      	bpl.n	8008ac2 <_puts_r+0x2e>
 8008abc:	6923      	ldr	r3, [r4, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d135      	bne.n	8008b2e <_puts_r+0x9a>
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f000 f8c5 	bl	8008c54 <__swsetup_r>
 8008aca:	b380      	cbz	r0, 8008b2e <_puts_r+0x9a>
 8008acc:	f04f 35ff 	mov.w	r5, #4294967295
 8008ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ad2:	07da      	lsls	r2, r3, #31
 8008ad4:	d405      	bmi.n	8008ae2 <_puts_r+0x4e>
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	059b      	lsls	r3, r3, #22
 8008ada:	d402      	bmi.n	8008ae2 <_puts_r+0x4e>
 8008adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ade:	f000 f989 	bl	8008df4 <__retarget_lock_release_recursive>
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	bd70      	pop	{r4, r5, r6, pc}
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	da04      	bge.n	8008af4 <_puts_r+0x60>
 8008aea:	69a2      	ldr	r2, [r4, #24]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	dc17      	bgt.n	8008b20 <_puts_r+0x8c>
 8008af0:	290a      	cmp	r1, #10
 8008af2:	d015      	beq.n	8008b20 <_puts_r+0x8c>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	6022      	str	r2, [r4, #0]
 8008afa:	7019      	strb	r1, [r3, #0]
 8008afc:	68a3      	ldr	r3, [r4, #8]
 8008afe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b02:	3b01      	subs	r3, #1
 8008b04:	60a3      	str	r3, [r4, #8]
 8008b06:	2900      	cmp	r1, #0
 8008b08:	d1ed      	bne.n	8008ae6 <_puts_r+0x52>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	da11      	bge.n	8008b32 <_puts_r+0x9e>
 8008b0e:	4622      	mov	r2, r4
 8008b10:	210a      	movs	r1, #10
 8008b12:	4628      	mov	r0, r5
 8008b14:	f000 f85f 	bl	8008bd6 <__swbuf_r>
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d0d7      	beq.n	8008acc <_puts_r+0x38>
 8008b1c:	250a      	movs	r5, #10
 8008b1e:	e7d7      	b.n	8008ad0 <_puts_r+0x3c>
 8008b20:	4622      	mov	r2, r4
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 f857 	bl	8008bd6 <__swbuf_r>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d1e7      	bne.n	8008afc <_puts_r+0x68>
 8008b2c:	e7ce      	b.n	8008acc <_puts_r+0x38>
 8008b2e:	3e01      	subs	r6, #1
 8008b30:	e7e4      	b.n	8008afc <_puts_r+0x68>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	1c5a      	adds	r2, r3, #1
 8008b36:	6022      	str	r2, [r4, #0]
 8008b38:	220a      	movs	r2, #10
 8008b3a:	701a      	strb	r2, [r3, #0]
 8008b3c:	e7ee      	b.n	8008b1c <_puts_r+0x88>
	...

08008b40 <puts>:
 8008b40:	4b02      	ldr	r3, [pc, #8]	@ (8008b4c <puts+0xc>)
 8008b42:	4601      	mov	r1, r0
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	f7ff bfa5 	b.w	8008a94 <_puts_r>
 8008b4a:	bf00      	nop
 8008b4c:	24000020 	.word	0x24000020

08008b50 <__sread>:
 8008b50:	b510      	push	{r4, lr}
 8008b52:	460c      	mov	r4, r1
 8008b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b58:	f000 f8fc 	bl	8008d54 <_read_r>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	bfab      	itete	ge
 8008b60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b62:	89a3      	ldrhlt	r3, [r4, #12]
 8008b64:	181b      	addge	r3, r3, r0
 8008b66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b6a:	bfac      	ite	ge
 8008b6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b6e:	81a3      	strhlt	r3, [r4, #12]
 8008b70:	bd10      	pop	{r4, pc}

08008b72 <__swrite>:
 8008b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b76:	461f      	mov	r7, r3
 8008b78:	898b      	ldrh	r3, [r1, #12]
 8008b7a:	05db      	lsls	r3, r3, #23
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	4616      	mov	r6, r2
 8008b82:	d505      	bpl.n	8008b90 <__swrite+0x1e>
 8008b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b88:	2302      	movs	r3, #2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f000 f8d0 	bl	8008d30 <_lseek_r>
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	f000 b8e7 	b.w	8008d78 <_write_r>

08008baa <__sseek>:
 8008baa:	b510      	push	{r4, lr}
 8008bac:	460c      	mov	r4, r1
 8008bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb2:	f000 f8bd 	bl	8008d30 <_lseek_r>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	bf15      	itete	ne
 8008bbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bc6:	81a3      	strheq	r3, [r4, #12]
 8008bc8:	bf18      	it	ne
 8008bca:	81a3      	strhne	r3, [r4, #12]
 8008bcc:	bd10      	pop	{r4, pc}

08008bce <__sclose>:
 8008bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd2:	f000 b89d 	b.w	8008d10 <_close_r>

08008bd6 <__swbuf_r>:
 8008bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd8:	460e      	mov	r6, r1
 8008bda:	4614      	mov	r4, r2
 8008bdc:	4605      	mov	r5, r0
 8008bde:	b118      	cbz	r0, 8008be8 <__swbuf_r+0x12>
 8008be0:	6a03      	ldr	r3, [r0, #32]
 8008be2:	b90b      	cbnz	r3, 8008be8 <__swbuf_r+0x12>
 8008be4:	f7ff ff0e 	bl	8008a04 <__sinit>
 8008be8:	69a3      	ldr	r3, [r4, #24]
 8008bea:	60a3      	str	r3, [r4, #8]
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	071a      	lsls	r2, r3, #28
 8008bf0:	d501      	bpl.n	8008bf6 <__swbuf_r+0x20>
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	b943      	cbnz	r3, 8008c08 <__swbuf_r+0x32>
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f000 f82b 	bl	8008c54 <__swsetup_r>
 8008bfe:	b118      	cbz	r0, 8008c08 <__swbuf_r+0x32>
 8008c00:	f04f 37ff 	mov.w	r7, #4294967295
 8008c04:	4638      	mov	r0, r7
 8008c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	6922      	ldr	r2, [r4, #16]
 8008c0c:	1a98      	subs	r0, r3, r2
 8008c0e:	6963      	ldr	r3, [r4, #20]
 8008c10:	b2f6      	uxtb	r6, r6
 8008c12:	4283      	cmp	r3, r0
 8008c14:	4637      	mov	r7, r6
 8008c16:	dc05      	bgt.n	8008c24 <__swbuf_r+0x4e>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f000 fd44 	bl	80096a8 <_fflush_r>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d1ed      	bne.n	8008c00 <__swbuf_r+0x2a>
 8008c24:	68a3      	ldr	r3, [r4, #8]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	60a3      	str	r3, [r4, #8]
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	6022      	str	r2, [r4, #0]
 8008c30:	701e      	strb	r6, [r3, #0]
 8008c32:	6962      	ldr	r2, [r4, #20]
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d004      	beq.n	8008c44 <__swbuf_r+0x6e>
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	07db      	lsls	r3, r3, #31
 8008c3e:	d5e1      	bpl.n	8008c04 <__swbuf_r+0x2e>
 8008c40:	2e0a      	cmp	r6, #10
 8008c42:	d1df      	bne.n	8008c04 <__swbuf_r+0x2e>
 8008c44:	4621      	mov	r1, r4
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 fd2e 	bl	80096a8 <_fflush_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d0d9      	beq.n	8008c04 <__swbuf_r+0x2e>
 8008c50:	e7d6      	b.n	8008c00 <__swbuf_r+0x2a>
	...

08008c54 <__swsetup_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4b29      	ldr	r3, [pc, #164]	@ (8008cfc <__swsetup_r+0xa8>)
 8008c58:	4605      	mov	r5, r0
 8008c5a:	6818      	ldr	r0, [r3, #0]
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	b118      	cbz	r0, 8008c68 <__swsetup_r+0x14>
 8008c60:	6a03      	ldr	r3, [r0, #32]
 8008c62:	b90b      	cbnz	r3, 8008c68 <__swsetup_r+0x14>
 8008c64:	f7ff fece 	bl	8008a04 <__sinit>
 8008c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c6c:	0719      	lsls	r1, r3, #28
 8008c6e:	d422      	bmi.n	8008cb6 <__swsetup_r+0x62>
 8008c70:	06da      	lsls	r2, r3, #27
 8008c72:	d407      	bmi.n	8008c84 <__swsetup_r+0x30>
 8008c74:	2209      	movs	r2, #9
 8008c76:	602a      	str	r2, [r5, #0]
 8008c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c7c:	81a3      	strh	r3, [r4, #12]
 8008c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c82:	e033      	b.n	8008cec <__swsetup_r+0x98>
 8008c84:	0758      	lsls	r0, r3, #29
 8008c86:	d512      	bpl.n	8008cae <__swsetup_r+0x5a>
 8008c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c8a:	b141      	cbz	r1, 8008c9e <__swsetup_r+0x4a>
 8008c8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c90:	4299      	cmp	r1, r3
 8008c92:	d002      	beq.n	8008c9a <__swsetup_r+0x46>
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 f8bd 	bl	8008e14 <_free_r>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ca4:	81a3      	strh	r3, [r4, #12]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	6063      	str	r3, [r4, #4]
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f043 0308 	orr.w	r3, r3, #8
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	b94b      	cbnz	r3, 8008cce <__swsetup_r+0x7a>
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cc4:	d003      	beq.n	8008cce <__swsetup_r+0x7a>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f000 fd3b 	bl	8009744 <__smakebuf_r>
 8008cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd2:	f013 0201 	ands.w	r2, r3, #1
 8008cd6:	d00a      	beq.n	8008cee <__swsetup_r+0x9a>
 8008cd8:	2200      	movs	r2, #0
 8008cda:	60a2      	str	r2, [r4, #8]
 8008cdc:	6962      	ldr	r2, [r4, #20]
 8008cde:	4252      	negs	r2, r2
 8008ce0:	61a2      	str	r2, [r4, #24]
 8008ce2:	6922      	ldr	r2, [r4, #16]
 8008ce4:	b942      	cbnz	r2, 8008cf8 <__swsetup_r+0xa4>
 8008ce6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cea:	d1c5      	bne.n	8008c78 <__swsetup_r+0x24>
 8008cec:	bd38      	pop	{r3, r4, r5, pc}
 8008cee:	0799      	lsls	r1, r3, #30
 8008cf0:	bf58      	it	pl
 8008cf2:	6962      	ldrpl	r2, [r4, #20]
 8008cf4:	60a2      	str	r2, [r4, #8]
 8008cf6:	e7f4      	b.n	8008ce2 <__swsetup_r+0x8e>
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e7f7      	b.n	8008cec <__swsetup_r+0x98>
 8008cfc:	24000020 	.word	0x24000020

08008d00 <memset>:
 8008d00:	4402      	add	r2, r0
 8008d02:	4603      	mov	r3, r0
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d100      	bne.n	8008d0a <memset+0xa>
 8008d08:	4770      	bx	lr
 8008d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d0e:	e7f9      	b.n	8008d04 <memset+0x4>

08008d10 <_close_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d06      	ldr	r5, [pc, #24]	@ (8008d2c <_close_r+0x1c>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	602b      	str	r3, [r5, #0]
 8008d1c:	f7f9 f88d 	bl	8001e3a <_close>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_close_r+0x1a>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_close_r+0x1a>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	24000900 	.word	0x24000900

08008d30 <_lseek_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d07      	ldr	r5, [pc, #28]	@ (8008d50 <_lseek_r+0x20>)
 8008d34:	4604      	mov	r4, r0
 8008d36:	4608      	mov	r0, r1
 8008d38:	4611      	mov	r1, r2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	602a      	str	r2, [r5, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f7f9 f8a2 	bl	8001e88 <_lseek>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_lseek_r+0x1e>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_lseek_r+0x1e>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	24000900 	.word	0x24000900

08008d54 <_read_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d07      	ldr	r5, [pc, #28]	@ (8008d74 <_read_r+0x20>)
 8008d58:	4604      	mov	r4, r0
 8008d5a:	4608      	mov	r0, r1
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	2200      	movs	r2, #0
 8008d60:	602a      	str	r2, [r5, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	f7f9 f830 	bl	8001dc8 <_read>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d102      	bne.n	8008d72 <_read_r+0x1e>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	b103      	cbz	r3, 8008d72 <_read_r+0x1e>
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	bd38      	pop	{r3, r4, r5, pc}
 8008d74:	24000900 	.word	0x24000900

08008d78 <_write_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d07      	ldr	r5, [pc, #28]	@ (8008d98 <_write_r+0x20>)
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	4608      	mov	r0, r1
 8008d80:	4611      	mov	r1, r2
 8008d82:	2200      	movs	r2, #0
 8008d84:	602a      	str	r2, [r5, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f7f9 f83b 	bl	8001e02 <_write>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_write_r+0x1e>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_write_r+0x1e>
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	24000900 	.word	0x24000900

08008d9c <__errno>:
 8008d9c:	4b01      	ldr	r3, [pc, #4]	@ (8008da4 <__errno+0x8>)
 8008d9e:	6818      	ldr	r0, [r3, #0]
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	24000020 	.word	0x24000020

08008da8 <__libc_init_array>:
 8008da8:	b570      	push	{r4, r5, r6, lr}
 8008daa:	4d0d      	ldr	r5, [pc, #52]	@ (8008de0 <__libc_init_array+0x38>)
 8008dac:	4c0d      	ldr	r4, [pc, #52]	@ (8008de4 <__libc_init_array+0x3c>)
 8008dae:	1b64      	subs	r4, r4, r5
 8008db0:	10a4      	asrs	r4, r4, #2
 8008db2:	2600      	movs	r6, #0
 8008db4:	42a6      	cmp	r6, r4
 8008db6:	d109      	bne.n	8008dcc <__libc_init_array+0x24>
 8008db8:	4d0b      	ldr	r5, [pc, #44]	@ (8008de8 <__libc_init_array+0x40>)
 8008dba:	4c0c      	ldr	r4, [pc, #48]	@ (8008dec <__libc_init_array+0x44>)
 8008dbc:	f000 fd30 	bl	8009820 <_init>
 8008dc0:	1b64      	subs	r4, r4, r5
 8008dc2:	10a4      	asrs	r4, r4, #2
 8008dc4:	2600      	movs	r6, #0
 8008dc6:	42a6      	cmp	r6, r4
 8008dc8:	d105      	bne.n	8008dd6 <__libc_init_array+0x2e>
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
 8008dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd0:	4798      	blx	r3
 8008dd2:	3601      	adds	r6, #1
 8008dd4:	e7ee      	b.n	8008db4 <__libc_init_array+0xc>
 8008dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dda:	4798      	blx	r3
 8008ddc:	3601      	adds	r6, #1
 8008dde:	e7f2      	b.n	8008dc6 <__libc_init_array+0x1e>
 8008de0:	080099fc 	.word	0x080099fc
 8008de4:	080099fc 	.word	0x080099fc
 8008de8:	080099fc 	.word	0x080099fc
 8008dec:	08009a00 	.word	0x08009a00

08008df0 <__retarget_lock_init_recursive>:
 8008df0:	4770      	bx	lr

08008df2 <__retarget_lock_acquire_recursive>:
 8008df2:	4770      	bx	lr

08008df4 <__retarget_lock_release_recursive>:
 8008df4:	4770      	bx	lr

08008df6 <memcpy>:
 8008df6:	440a      	add	r2, r1
 8008df8:	4291      	cmp	r1, r2
 8008dfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dfe:	d100      	bne.n	8008e02 <memcpy+0xc>
 8008e00:	4770      	bx	lr
 8008e02:	b510      	push	{r4, lr}
 8008e04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e0c:	4291      	cmp	r1, r2
 8008e0e:	d1f9      	bne.n	8008e04 <memcpy+0xe>
 8008e10:	bd10      	pop	{r4, pc}
	...

08008e14 <_free_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4605      	mov	r5, r0
 8008e18:	2900      	cmp	r1, #0
 8008e1a:	d041      	beq.n	8008ea0 <_free_r+0x8c>
 8008e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e20:	1f0c      	subs	r4, r1, #4
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	bfb8      	it	lt
 8008e26:	18e4      	addlt	r4, r4, r3
 8008e28:	f000 f8e0 	bl	8008fec <__malloc_lock>
 8008e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea4 <_free_r+0x90>)
 8008e2e:	6813      	ldr	r3, [r2, #0]
 8008e30:	b933      	cbnz	r3, 8008e40 <_free_r+0x2c>
 8008e32:	6063      	str	r3, [r4, #4]
 8008e34:	6014      	str	r4, [r2, #0]
 8008e36:	4628      	mov	r0, r5
 8008e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e3c:	f000 b8dc 	b.w	8008ff8 <__malloc_unlock>
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	d908      	bls.n	8008e56 <_free_r+0x42>
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	1821      	adds	r1, r4, r0
 8008e48:	428b      	cmp	r3, r1
 8008e4a:	bf01      	itttt	eq
 8008e4c:	6819      	ldreq	r1, [r3, #0]
 8008e4e:	685b      	ldreq	r3, [r3, #4]
 8008e50:	1809      	addeq	r1, r1, r0
 8008e52:	6021      	streq	r1, [r4, #0]
 8008e54:	e7ed      	b.n	8008e32 <_free_r+0x1e>
 8008e56:	461a      	mov	r2, r3
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	b10b      	cbz	r3, 8008e60 <_free_r+0x4c>
 8008e5c:	42a3      	cmp	r3, r4
 8008e5e:	d9fa      	bls.n	8008e56 <_free_r+0x42>
 8008e60:	6811      	ldr	r1, [r2, #0]
 8008e62:	1850      	adds	r0, r2, r1
 8008e64:	42a0      	cmp	r0, r4
 8008e66:	d10b      	bne.n	8008e80 <_free_r+0x6c>
 8008e68:	6820      	ldr	r0, [r4, #0]
 8008e6a:	4401      	add	r1, r0
 8008e6c:	1850      	adds	r0, r2, r1
 8008e6e:	4283      	cmp	r3, r0
 8008e70:	6011      	str	r1, [r2, #0]
 8008e72:	d1e0      	bne.n	8008e36 <_free_r+0x22>
 8008e74:	6818      	ldr	r0, [r3, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	6053      	str	r3, [r2, #4]
 8008e7a:	4408      	add	r0, r1
 8008e7c:	6010      	str	r0, [r2, #0]
 8008e7e:	e7da      	b.n	8008e36 <_free_r+0x22>
 8008e80:	d902      	bls.n	8008e88 <_free_r+0x74>
 8008e82:	230c      	movs	r3, #12
 8008e84:	602b      	str	r3, [r5, #0]
 8008e86:	e7d6      	b.n	8008e36 <_free_r+0x22>
 8008e88:	6820      	ldr	r0, [r4, #0]
 8008e8a:	1821      	adds	r1, r4, r0
 8008e8c:	428b      	cmp	r3, r1
 8008e8e:	bf04      	itt	eq
 8008e90:	6819      	ldreq	r1, [r3, #0]
 8008e92:	685b      	ldreq	r3, [r3, #4]
 8008e94:	6063      	str	r3, [r4, #4]
 8008e96:	bf04      	itt	eq
 8008e98:	1809      	addeq	r1, r1, r0
 8008e9a:	6021      	streq	r1, [r4, #0]
 8008e9c:	6054      	str	r4, [r2, #4]
 8008e9e:	e7ca      	b.n	8008e36 <_free_r+0x22>
 8008ea0:	bd38      	pop	{r3, r4, r5, pc}
 8008ea2:	bf00      	nop
 8008ea4:	2400090c 	.word	0x2400090c

08008ea8 <sbrk_aligned>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	4e0f      	ldr	r6, [pc, #60]	@ (8008ee8 <sbrk_aligned+0x40>)
 8008eac:	460c      	mov	r4, r1
 8008eae:	6831      	ldr	r1, [r6, #0]
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	b911      	cbnz	r1, 8008eba <sbrk_aligned+0x12>
 8008eb4:	f000 fca4 	bl	8009800 <_sbrk_r>
 8008eb8:	6030      	str	r0, [r6, #0]
 8008eba:	4621      	mov	r1, r4
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f000 fc9f 	bl	8009800 <_sbrk_r>
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	d103      	bne.n	8008ece <sbrk_aligned+0x26>
 8008ec6:	f04f 34ff 	mov.w	r4, #4294967295
 8008eca:	4620      	mov	r0, r4
 8008ecc:	bd70      	pop	{r4, r5, r6, pc}
 8008ece:	1cc4      	adds	r4, r0, #3
 8008ed0:	f024 0403 	bic.w	r4, r4, #3
 8008ed4:	42a0      	cmp	r0, r4
 8008ed6:	d0f8      	beq.n	8008eca <sbrk_aligned+0x22>
 8008ed8:	1a21      	subs	r1, r4, r0
 8008eda:	4628      	mov	r0, r5
 8008edc:	f000 fc90 	bl	8009800 <_sbrk_r>
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d1f2      	bne.n	8008eca <sbrk_aligned+0x22>
 8008ee4:	e7ef      	b.n	8008ec6 <sbrk_aligned+0x1e>
 8008ee6:	bf00      	nop
 8008ee8:	24000908 	.word	0x24000908

08008eec <_malloc_r>:
 8008eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef0:	1ccd      	adds	r5, r1, #3
 8008ef2:	f025 0503 	bic.w	r5, r5, #3
 8008ef6:	3508      	adds	r5, #8
 8008ef8:	2d0c      	cmp	r5, #12
 8008efa:	bf38      	it	cc
 8008efc:	250c      	movcc	r5, #12
 8008efe:	2d00      	cmp	r5, #0
 8008f00:	4606      	mov	r6, r0
 8008f02:	db01      	blt.n	8008f08 <_malloc_r+0x1c>
 8008f04:	42a9      	cmp	r1, r5
 8008f06:	d904      	bls.n	8008f12 <_malloc_r+0x26>
 8008f08:	230c      	movs	r3, #12
 8008f0a:	6033      	str	r3, [r6, #0]
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fe8 <_malloc_r+0xfc>
 8008f16:	f000 f869 	bl	8008fec <__malloc_lock>
 8008f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f1e:	461c      	mov	r4, r3
 8008f20:	bb44      	cbnz	r4, 8008f74 <_malloc_r+0x88>
 8008f22:	4629      	mov	r1, r5
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff ffbf 	bl	8008ea8 <sbrk_aligned>
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	d158      	bne.n	8008fe2 <_malloc_r+0xf6>
 8008f30:	f8d8 4000 	ldr.w	r4, [r8]
 8008f34:	4627      	mov	r7, r4
 8008f36:	2f00      	cmp	r7, #0
 8008f38:	d143      	bne.n	8008fc2 <_malloc_r+0xd6>
 8008f3a:	2c00      	cmp	r4, #0
 8008f3c:	d04b      	beq.n	8008fd6 <_malloc_r+0xea>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	4639      	mov	r1, r7
 8008f42:	4630      	mov	r0, r6
 8008f44:	eb04 0903 	add.w	r9, r4, r3
 8008f48:	f000 fc5a 	bl	8009800 <_sbrk_r>
 8008f4c:	4581      	cmp	r9, r0
 8008f4e:	d142      	bne.n	8008fd6 <_malloc_r+0xea>
 8008f50:	6821      	ldr	r1, [r4, #0]
 8008f52:	1a6d      	subs	r5, r5, r1
 8008f54:	4629      	mov	r1, r5
 8008f56:	4630      	mov	r0, r6
 8008f58:	f7ff ffa6 	bl	8008ea8 <sbrk_aligned>
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d03a      	beq.n	8008fd6 <_malloc_r+0xea>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	442b      	add	r3, r5
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	f8d8 3000 	ldr.w	r3, [r8]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	bb62      	cbnz	r2, 8008fc8 <_malloc_r+0xdc>
 8008f6e:	f8c8 7000 	str.w	r7, [r8]
 8008f72:	e00f      	b.n	8008f94 <_malloc_r+0xa8>
 8008f74:	6822      	ldr	r2, [r4, #0]
 8008f76:	1b52      	subs	r2, r2, r5
 8008f78:	d420      	bmi.n	8008fbc <_malloc_r+0xd0>
 8008f7a:	2a0b      	cmp	r2, #11
 8008f7c:	d917      	bls.n	8008fae <_malloc_r+0xc2>
 8008f7e:	1961      	adds	r1, r4, r5
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	6025      	str	r5, [r4, #0]
 8008f84:	bf18      	it	ne
 8008f86:	6059      	strne	r1, [r3, #4]
 8008f88:	6863      	ldr	r3, [r4, #4]
 8008f8a:	bf08      	it	eq
 8008f8c:	f8c8 1000 	streq.w	r1, [r8]
 8008f90:	5162      	str	r2, [r4, r5]
 8008f92:	604b      	str	r3, [r1, #4]
 8008f94:	4630      	mov	r0, r6
 8008f96:	f000 f82f 	bl	8008ff8 <__malloc_unlock>
 8008f9a:	f104 000b 	add.w	r0, r4, #11
 8008f9e:	1d23      	adds	r3, r4, #4
 8008fa0:	f020 0007 	bic.w	r0, r0, #7
 8008fa4:	1ac2      	subs	r2, r0, r3
 8008fa6:	bf1c      	itt	ne
 8008fa8:	1a1b      	subne	r3, r3, r0
 8008faa:	50a3      	strne	r3, [r4, r2]
 8008fac:	e7af      	b.n	8008f0e <_malloc_r+0x22>
 8008fae:	6862      	ldr	r2, [r4, #4]
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	bf0c      	ite	eq
 8008fb4:	f8c8 2000 	streq.w	r2, [r8]
 8008fb8:	605a      	strne	r2, [r3, #4]
 8008fba:	e7eb      	b.n	8008f94 <_malloc_r+0xa8>
 8008fbc:	4623      	mov	r3, r4
 8008fbe:	6864      	ldr	r4, [r4, #4]
 8008fc0:	e7ae      	b.n	8008f20 <_malloc_r+0x34>
 8008fc2:	463c      	mov	r4, r7
 8008fc4:	687f      	ldr	r7, [r7, #4]
 8008fc6:	e7b6      	b.n	8008f36 <_malloc_r+0x4a>
 8008fc8:	461a      	mov	r2, r3
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	d1fb      	bne.n	8008fc8 <_malloc_r+0xdc>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	6053      	str	r3, [r2, #4]
 8008fd4:	e7de      	b.n	8008f94 <_malloc_r+0xa8>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	6033      	str	r3, [r6, #0]
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f000 f80c 	bl	8008ff8 <__malloc_unlock>
 8008fe0:	e794      	b.n	8008f0c <_malloc_r+0x20>
 8008fe2:	6005      	str	r5, [r0, #0]
 8008fe4:	e7d6      	b.n	8008f94 <_malloc_r+0xa8>
 8008fe6:	bf00      	nop
 8008fe8:	2400090c 	.word	0x2400090c

08008fec <__malloc_lock>:
 8008fec:	4801      	ldr	r0, [pc, #4]	@ (8008ff4 <__malloc_lock+0x8>)
 8008fee:	f7ff bf00 	b.w	8008df2 <__retarget_lock_acquire_recursive>
 8008ff2:	bf00      	nop
 8008ff4:	24000904 	.word	0x24000904

08008ff8 <__malloc_unlock>:
 8008ff8:	4801      	ldr	r0, [pc, #4]	@ (8009000 <__malloc_unlock+0x8>)
 8008ffa:	f7ff befb 	b.w	8008df4 <__retarget_lock_release_recursive>
 8008ffe:	bf00      	nop
 8009000:	24000904 	.word	0x24000904

08009004 <__sfputc_r>:
 8009004:	6893      	ldr	r3, [r2, #8]
 8009006:	3b01      	subs	r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	b410      	push	{r4}
 800900c:	6093      	str	r3, [r2, #8]
 800900e:	da08      	bge.n	8009022 <__sfputc_r+0x1e>
 8009010:	6994      	ldr	r4, [r2, #24]
 8009012:	42a3      	cmp	r3, r4
 8009014:	db01      	blt.n	800901a <__sfputc_r+0x16>
 8009016:	290a      	cmp	r1, #10
 8009018:	d103      	bne.n	8009022 <__sfputc_r+0x1e>
 800901a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800901e:	f7ff bdda 	b.w	8008bd6 <__swbuf_r>
 8009022:	6813      	ldr	r3, [r2, #0]
 8009024:	1c58      	adds	r0, r3, #1
 8009026:	6010      	str	r0, [r2, #0]
 8009028:	7019      	strb	r1, [r3, #0]
 800902a:	4608      	mov	r0, r1
 800902c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009030:	4770      	bx	lr

08009032 <__sfputs_r>:
 8009032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009034:	4606      	mov	r6, r0
 8009036:	460f      	mov	r7, r1
 8009038:	4614      	mov	r4, r2
 800903a:	18d5      	adds	r5, r2, r3
 800903c:	42ac      	cmp	r4, r5
 800903e:	d101      	bne.n	8009044 <__sfputs_r+0x12>
 8009040:	2000      	movs	r0, #0
 8009042:	e007      	b.n	8009054 <__sfputs_r+0x22>
 8009044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009048:	463a      	mov	r2, r7
 800904a:	4630      	mov	r0, r6
 800904c:	f7ff ffda 	bl	8009004 <__sfputc_r>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d1f3      	bne.n	800903c <__sfputs_r+0xa>
 8009054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009058 <_vfiprintf_r>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	460d      	mov	r5, r1
 800905e:	b09d      	sub	sp, #116	@ 0x74
 8009060:	4614      	mov	r4, r2
 8009062:	4698      	mov	r8, r3
 8009064:	4606      	mov	r6, r0
 8009066:	b118      	cbz	r0, 8009070 <_vfiprintf_r+0x18>
 8009068:	6a03      	ldr	r3, [r0, #32]
 800906a:	b90b      	cbnz	r3, 8009070 <_vfiprintf_r+0x18>
 800906c:	f7ff fcca 	bl	8008a04 <__sinit>
 8009070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009072:	07d9      	lsls	r1, r3, #31
 8009074:	d405      	bmi.n	8009082 <_vfiprintf_r+0x2a>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	059a      	lsls	r2, r3, #22
 800907a:	d402      	bmi.n	8009082 <_vfiprintf_r+0x2a>
 800907c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800907e:	f7ff feb8 	bl	8008df2 <__retarget_lock_acquire_recursive>
 8009082:	89ab      	ldrh	r3, [r5, #12]
 8009084:	071b      	lsls	r3, r3, #28
 8009086:	d501      	bpl.n	800908c <_vfiprintf_r+0x34>
 8009088:	692b      	ldr	r3, [r5, #16]
 800908a:	b99b      	cbnz	r3, 80090b4 <_vfiprintf_r+0x5c>
 800908c:	4629      	mov	r1, r5
 800908e:	4630      	mov	r0, r6
 8009090:	f7ff fde0 	bl	8008c54 <__swsetup_r>
 8009094:	b170      	cbz	r0, 80090b4 <_vfiprintf_r+0x5c>
 8009096:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009098:	07dc      	lsls	r4, r3, #31
 800909a:	d504      	bpl.n	80090a6 <_vfiprintf_r+0x4e>
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	b01d      	add	sp, #116	@ 0x74
 80090a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a6:	89ab      	ldrh	r3, [r5, #12]
 80090a8:	0598      	lsls	r0, r3, #22
 80090aa:	d4f7      	bmi.n	800909c <_vfiprintf_r+0x44>
 80090ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090ae:	f7ff fea1 	bl	8008df4 <__retarget_lock_release_recursive>
 80090b2:	e7f3      	b.n	800909c <_vfiprintf_r+0x44>
 80090b4:	2300      	movs	r3, #0
 80090b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090b8:	2320      	movs	r3, #32
 80090ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090be:	f8cd 800c 	str.w	r8, [sp, #12]
 80090c2:	2330      	movs	r3, #48	@ 0x30
 80090c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009274 <_vfiprintf_r+0x21c>
 80090c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090cc:	f04f 0901 	mov.w	r9, #1
 80090d0:	4623      	mov	r3, r4
 80090d2:	469a      	mov	sl, r3
 80090d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d8:	b10a      	cbz	r2, 80090de <_vfiprintf_r+0x86>
 80090da:	2a25      	cmp	r2, #37	@ 0x25
 80090dc:	d1f9      	bne.n	80090d2 <_vfiprintf_r+0x7a>
 80090de:	ebba 0b04 	subs.w	fp, sl, r4
 80090e2:	d00b      	beq.n	80090fc <_vfiprintf_r+0xa4>
 80090e4:	465b      	mov	r3, fp
 80090e6:	4622      	mov	r2, r4
 80090e8:	4629      	mov	r1, r5
 80090ea:	4630      	mov	r0, r6
 80090ec:	f7ff ffa1 	bl	8009032 <__sfputs_r>
 80090f0:	3001      	adds	r0, #1
 80090f2:	f000 80a7 	beq.w	8009244 <_vfiprintf_r+0x1ec>
 80090f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090f8:	445a      	add	r2, fp
 80090fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80090fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 809f 	beq.w	8009244 <_vfiprintf_r+0x1ec>
 8009106:	2300      	movs	r3, #0
 8009108:	f04f 32ff 	mov.w	r2, #4294967295
 800910c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009110:	f10a 0a01 	add.w	sl, sl, #1
 8009114:	9304      	str	r3, [sp, #16]
 8009116:	9307      	str	r3, [sp, #28]
 8009118:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800911c:	931a      	str	r3, [sp, #104]	@ 0x68
 800911e:	4654      	mov	r4, sl
 8009120:	2205      	movs	r2, #5
 8009122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009126:	4853      	ldr	r0, [pc, #332]	@ (8009274 <_vfiprintf_r+0x21c>)
 8009128:	f7f7 f8da 	bl	80002e0 <memchr>
 800912c:	9a04      	ldr	r2, [sp, #16]
 800912e:	b9d8      	cbnz	r0, 8009168 <_vfiprintf_r+0x110>
 8009130:	06d1      	lsls	r1, r2, #27
 8009132:	bf44      	itt	mi
 8009134:	2320      	movmi	r3, #32
 8009136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800913a:	0713      	lsls	r3, r2, #28
 800913c:	bf44      	itt	mi
 800913e:	232b      	movmi	r3, #43	@ 0x2b
 8009140:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009144:	f89a 3000 	ldrb.w	r3, [sl]
 8009148:	2b2a      	cmp	r3, #42	@ 0x2a
 800914a:	d015      	beq.n	8009178 <_vfiprintf_r+0x120>
 800914c:	9a07      	ldr	r2, [sp, #28]
 800914e:	4654      	mov	r4, sl
 8009150:	2000      	movs	r0, #0
 8009152:	f04f 0c0a 	mov.w	ip, #10
 8009156:	4621      	mov	r1, r4
 8009158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800915c:	3b30      	subs	r3, #48	@ 0x30
 800915e:	2b09      	cmp	r3, #9
 8009160:	d94b      	bls.n	80091fa <_vfiprintf_r+0x1a2>
 8009162:	b1b0      	cbz	r0, 8009192 <_vfiprintf_r+0x13a>
 8009164:	9207      	str	r2, [sp, #28]
 8009166:	e014      	b.n	8009192 <_vfiprintf_r+0x13a>
 8009168:	eba0 0308 	sub.w	r3, r0, r8
 800916c:	fa09 f303 	lsl.w	r3, r9, r3
 8009170:	4313      	orrs	r3, r2
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	46a2      	mov	sl, r4
 8009176:	e7d2      	b.n	800911e <_vfiprintf_r+0xc6>
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	1d19      	adds	r1, r3, #4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	9103      	str	r1, [sp, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	bfbb      	ittet	lt
 8009184:	425b      	neglt	r3, r3
 8009186:	f042 0202 	orrlt.w	r2, r2, #2
 800918a:	9307      	strge	r3, [sp, #28]
 800918c:	9307      	strlt	r3, [sp, #28]
 800918e:	bfb8      	it	lt
 8009190:	9204      	strlt	r2, [sp, #16]
 8009192:	7823      	ldrb	r3, [r4, #0]
 8009194:	2b2e      	cmp	r3, #46	@ 0x2e
 8009196:	d10a      	bne.n	80091ae <_vfiprintf_r+0x156>
 8009198:	7863      	ldrb	r3, [r4, #1]
 800919a:	2b2a      	cmp	r3, #42	@ 0x2a
 800919c:	d132      	bne.n	8009204 <_vfiprintf_r+0x1ac>
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	1d1a      	adds	r2, r3, #4
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	9203      	str	r2, [sp, #12]
 80091a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091aa:	3402      	adds	r4, #2
 80091ac:	9305      	str	r3, [sp, #20]
 80091ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009284 <_vfiprintf_r+0x22c>
 80091b2:	7821      	ldrb	r1, [r4, #0]
 80091b4:	2203      	movs	r2, #3
 80091b6:	4650      	mov	r0, sl
 80091b8:	f7f7 f892 	bl	80002e0 <memchr>
 80091bc:	b138      	cbz	r0, 80091ce <_vfiprintf_r+0x176>
 80091be:	9b04      	ldr	r3, [sp, #16]
 80091c0:	eba0 000a 	sub.w	r0, r0, sl
 80091c4:	2240      	movs	r2, #64	@ 0x40
 80091c6:	4082      	lsls	r2, r0
 80091c8:	4313      	orrs	r3, r2
 80091ca:	3401      	adds	r4, #1
 80091cc:	9304      	str	r3, [sp, #16]
 80091ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d2:	4829      	ldr	r0, [pc, #164]	@ (8009278 <_vfiprintf_r+0x220>)
 80091d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091d8:	2206      	movs	r2, #6
 80091da:	f7f7 f881 	bl	80002e0 <memchr>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d03f      	beq.n	8009262 <_vfiprintf_r+0x20a>
 80091e2:	4b26      	ldr	r3, [pc, #152]	@ (800927c <_vfiprintf_r+0x224>)
 80091e4:	bb1b      	cbnz	r3, 800922e <_vfiprintf_r+0x1d6>
 80091e6:	9b03      	ldr	r3, [sp, #12]
 80091e8:	3307      	adds	r3, #7
 80091ea:	f023 0307 	bic.w	r3, r3, #7
 80091ee:	3308      	adds	r3, #8
 80091f0:	9303      	str	r3, [sp, #12]
 80091f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f4:	443b      	add	r3, r7
 80091f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f8:	e76a      	b.n	80090d0 <_vfiprintf_r+0x78>
 80091fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80091fe:	460c      	mov	r4, r1
 8009200:	2001      	movs	r0, #1
 8009202:	e7a8      	b.n	8009156 <_vfiprintf_r+0xfe>
 8009204:	2300      	movs	r3, #0
 8009206:	3401      	adds	r4, #1
 8009208:	9305      	str	r3, [sp, #20]
 800920a:	4619      	mov	r1, r3
 800920c:	f04f 0c0a 	mov.w	ip, #10
 8009210:	4620      	mov	r0, r4
 8009212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009216:	3a30      	subs	r2, #48	@ 0x30
 8009218:	2a09      	cmp	r2, #9
 800921a:	d903      	bls.n	8009224 <_vfiprintf_r+0x1cc>
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0c6      	beq.n	80091ae <_vfiprintf_r+0x156>
 8009220:	9105      	str	r1, [sp, #20]
 8009222:	e7c4      	b.n	80091ae <_vfiprintf_r+0x156>
 8009224:	fb0c 2101 	mla	r1, ip, r1, r2
 8009228:	4604      	mov	r4, r0
 800922a:	2301      	movs	r3, #1
 800922c:	e7f0      	b.n	8009210 <_vfiprintf_r+0x1b8>
 800922e:	ab03      	add	r3, sp, #12
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	462a      	mov	r2, r5
 8009234:	4b12      	ldr	r3, [pc, #72]	@ (8009280 <_vfiprintf_r+0x228>)
 8009236:	a904      	add	r1, sp, #16
 8009238:	4630      	mov	r0, r6
 800923a:	f3af 8000 	nop.w
 800923e:	4607      	mov	r7, r0
 8009240:	1c78      	adds	r0, r7, #1
 8009242:	d1d6      	bne.n	80091f2 <_vfiprintf_r+0x19a>
 8009244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009246:	07d9      	lsls	r1, r3, #31
 8009248:	d405      	bmi.n	8009256 <_vfiprintf_r+0x1fe>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	059a      	lsls	r2, r3, #22
 800924e:	d402      	bmi.n	8009256 <_vfiprintf_r+0x1fe>
 8009250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009252:	f7ff fdcf 	bl	8008df4 <__retarget_lock_release_recursive>
 8009256:	89ab      	ldrh	r3, [r5, #12]
 8009258:	065b      	lsls	r3, r3, #25
 800925a:	f53f af1f 	bmi.w	800909c <_vfiprintf_r+0x44>
 800925e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009260:	e71e      	b.n	80090a0 <_vfiprintf_r+0x48>
 8009262:	ab03      	add	r3, sp, #12
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	462a      	mov	r2, r5
 8009268:	4b05      	ldr	r3, [pc, #20]	@ (8009280 <_vfiprintf_r+0x228>)
 800926a:	a904      	add	r1, sp, #16
 800926c:	4630      	mov	r0, r6
 800926e:	f000 f879 	bl	8009364 <_printf_i>
 8009272:	e7e4      	b.n	800923e <_vfiprintf_r+0x1e6>
 8009274:	080099c0 	.word	0x080099c0
 8009278:	080099ca 	.word	0x080099ca
 800927c:	00000000 	.word	0x00000000
 8009280:	08009033 	.word	0x08009033
 8009284:	080099c6 	.word	0x080099c6

08009288 <_printf_common>:
 8009288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800928c:	4616      	mov	r6, r2
 800928e:	4698      	mov	r8, r3
 8009290:	688a      	ldr	r2, [r1, #8]
 8009292:	690b      	ldr	r3, [r1, #16]
 8009294:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009298:	4293      	cmp	r3, r2
 800929a:	bfb8      	it	lt
 800929c:	4613      	movlt	r3, r2
 800929e:	6033      	str	r3, [r6, #0]
 80092a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80092a4:	4607      	mov	r7, r0
 80092a6:	460c      	mov	r4, r1
 80092a8:	b10a      	cbz	r2, 80092ae <_printf_common+0x26>
 80092aa:	3301      	adds	r3, #1
 80092ac:	6033      	str	r3, [r6, #0]
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	0699      	lsls	r1, r3, #26
 80092b2:	bf42      	ittt	mi
 80092b4:	6833      	ldrmi	r3, [r6, #0]
 80092b6:	3302      	addmi	r3, #2
 80092b8:	6033      	strmi	r3, [r6, #0]
 80092ba:	6825      	ldr	r5, [r4, #0]
 80092bc:	f015 0506 	ands.w	r5, r5, #6
 80092c0:	d106      	bne.n	80092d0 <_printf_common+0x48>
 80092c2:	f104 0a19 	add.w	sl, r4, #25
 80092c6:	68e3      	ldr	r3, [r4, #12]
 80092c8:	6832      	ldr	r2, [r6, #0]
 80092ca:	1a9b      	subs	r3, r3, r2
 80092cc:	42ab      	cmp	r3, r5
 80092ce:	dc26      	bgt.n	800931e <_printf_common+0x96>
 80092d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092d4:	6822      	ldr	r2, [r4, #0]
 80092d6:	3b00      	subs	r3, #0
 80092d8:	bf18      	it	ne
 80092da:	2301      	movne	r3, #1
 80092dc:	0692      	lsls	r2, r2, #26
 80092de:	d42b      	bmi.n	8009338 <_printf_common+0xb0>
 80092e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092e4:	4641      	mov	r1, r8
 80092e6:	4638      	mov	r0, r7
 80092e8:	47c8      	blx	r9
 80092ea:	3001      	adds	r0, #1
 80092ec:	d01e      	beq.n	800932c <_printf_common+0xa4>
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	6922      	ldr	r2, [r4, #16]
 80092f2:	f003 0306 	and.w	r3, r3, #6
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	bf02      	ittt	eq
 80092fa:	68e5      	ldreq	r5, [r4, #12]
 80092fc:	6833      	ldreq	r3, [r6, #0]
 80092fe:	1aed      	subeq	r5, r5, r3
 8009300:	68a3      	ldr	r3, [r4, #8]
 8009302:	bf0c      	ite	eq
 8009304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009308:	2500      	movne	r5, #0
 800930a:	4293      	cmp	r3, r2
 800930c:	bfc4      	itt	gt
 800930e:	1a9b      	subgt	r3, r3, r2
 8009310:	18ed      	addgt	r5, r5, r3
 8009312:	2600      	movs	r6, #0
 8009314:	341a      	adds	r4, #26
 8009316:	42b5      	cmp	r5, r6
 8009318:	d11a      	bne.n	8009350 <_printf_common+0xc8>
 800931a:	2000      	movs	r0, #0
 800931c:	e008      	b.n	8009330 <_printf_common+0xa8>
 800931e:	2301      	movs	r3, #1
 8009320:	4652      	mov	r2, sl
 8009322:	4641      	mov	r1, r8
 8009324:	4638      	mov	r0, r7
 8009326:	47c8      	blx	r9
 8009328:	3001      	adds	r0, #1
 800932a:	d103      	bne.n	8009334 <_printf_common+0xac>
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009334:	3501      	adds	r5, #1
 8009336:	e7c6      	b.n	80092c6 <_printf_common+0x3e>
 8009338:	18e1      	adds	r1, r4, r3
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	2030      	movs	r0, #48	@ 0x30
 800933e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009342:	4422      	add	r2, r4
 8009344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800934c:	3302      	adds	r3, #2
 800934e:	e7c7      	b.n	80092e0 <_printf_common+0x58>
 8009350:	2301      	movs	r3, #1
 8009352:	4622      	mov	r2, r4
 8009354:	4641      	mov	r1, r8
 8009356:	4638      	mov	r0, r7
 8009358:	47c8      	blx	r9
 800935a:	3001      	adds	r0, #1
 800935c:	d0e6      	beq.n	800932c <_printf_common+0xa4>
 800935e:	3601      	adds	r6, #1
 8009360:	e7d9      	b.n	8009316 <_printf_common+0x8e>
	...

08009364 <_printf_i>:
 8009364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009368:	7e0f      	ldrb	r7, [r1, #24]
 800936a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800936c:	2f78      	cmp	r7, #120	@ 0x78
 800936e:	4691      	mov	r9, r2
 8009370:	4680      	mov	r8, r0
 8009372:	460c      	mov	r4, r1
 8009374:	469a      	mov	sl, r3
 8009376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800937a:	d807      	bhi.n	800938c <_printf_i+0x28>
 800937c:	2f62      	cmp	r7, #98	@ 0x62
 800937e:	d80a      	bhi.n	8009396 <_printf_i+0x32>
 8009380:	2f00      	cmp	r7, #0
 8009382:	f000 80d1 	beq.w	8009528 <_printf_i+0x1c4>
 8009386:	2f58      	cmp	r7, #88	@ 0x58
 8009388:	f000 80b8 	beq.w	80094fc <_printf_i+0x198>
 800938c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009394:	e03a      	b.n	800940c <_printf_i+0xa8>
 8009396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800939a:	2b15      	cmp	r3, #21
 800939c:	d8f6      	bhi.n	800938c <_printf_i+0x28>
 800939e:	a101      	add	r1, pc, #4	@ (adr r1, 80093a4 <_printf_i+0x40>)
 80093a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093a4:	080093fd 	.word	0x080093fd
 80093a8:	08009411 	.word	0x08009411
 80093ac:	0800938d 	.word	0x0800938d
 80093b0:	0800938d 	.word	0x0800938d
 80093b4:	0800938d 	.word	0x0800938d
 80093b8:	0800938d 	.word	0x0800938d
 80093bc:	08009411 	.word	0x08009411
 80093c0:	0800938d 	.word	0x0800938d
 80093c4:	0800938d 	.word	0x0800938d
 80093c8:	0800938d 	.word	0x0800938d
 80093cc:	0800938d 	.word	0x0800938d
 80093d0:	0800950f 	.word	0x0800950f
 80093d4:	0800943b 	.word	0x0800943b
 80093d8:	080094c9 	.word	0x080094c9
 80093dc:	0800938d 	.word	0x0800938d
 80093e0:	0800938d 	.word	0x0800938d
 80093e4:	08009531 	.word	0x08009531
 80093e8:	0800938d 	.word	0x0800938d
 80093ec:	0800943b 	.word	0x0800943b
 80093f0:	0800938d 	.word	0x0800938d
 80093f4:	0800938d 	.word	0x0800938d
 80093f8:	080094d1 	.word	0x080094d1
 80093fc:	6833      	ldr	r3, [r6, #0]
 80093fe:	1d1a      	adds	r2, r3, #4
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6032      	str	r2, [r6, #0]
 8009404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800940c:	2301      	movs	r3, #1
 800940e:	e09c      	b.n	800954a <_printf_i+0x1e6>
 8009410:	6833      	ldr	r3, [r6, #0]
 8009412:	6820      	ldr	r0, [r4, #0]
 8009414:	1d19      	adds	r1, r3, #4
 8009416:	6031      	str	r1, [r6, #0]
 8009418:	0606      	lsls	r6, r0, #24
 800941a:	d501      	bpl.n	8009420 <_printf_i+0xbc>
 800941c:	681d      	ldr	r5, [r3, #0]
 800941e:	e003      	b.n	8009428 <_printf_i+0xc4>
 8009420:	0645      	lsls	r5, r0, #25
 8009422:	d5fb      	bpl.n	800941c <_printf_i+0xb8>
 8009424:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009428:	2d00      	cmp	r5, #0
 800942a:	da03      	bge.n	8009434 <_printf_i+0xd0>
 800942c:	232d      	movs	r3, #45	@ 0x2d
 800942e:	426d      	negs	r5, r5
 8009430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009434:	4858      	ldr	r0, [pc, #352]	@ (8009598 <_printf_i+0x234>)
 8009436:	230a      	movs	r3, #10
 8009438:	e011      	b.n	800945e <_printf_i+0xfa>
 800943a:	6821      	ldr	r1, [r4, #0]
 800943c:	6833      	ldr	r3, [r6, #0]
 800943e:	0608      	lsls	r0, r1, #24
 8009440:	f853 5b04 	ldr.w	r5, [r3], #4
 8009444:	d402      	bmi.n	800944c <_printf_i+0xe8>
 8009446:	0649      	lsls	r1, r1, #25
 8009448:	bf48      	it	mi
 800944a:	b2ad      	uxthmi	r5, r5
 800944c:	2f6f      	cmp	r7, #111	@ 0x6f
 800944e:	4852      	ldr	r0, [pc, #328]	@ (8009598 <_printf_i+0x234>)
 8009450:	6033      	str	r3, [r6, #0]
 8009452:	bf14      	ite	ne
 8009454:	230a      	movne	r3, #10
 8009456:	2308      	moveq	r3, #8
 8009458:	2100      	movs	r1, #0
 800945a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800945e:	6866      	ldr	r6, [r4, #4]
 8009460:	60a6      	str	r6, [r4, #8]
 8009462:	2e00      	cmp	r6, #0
 8009464:	db05      	blt.n	8009472 <_printf_i+0x10e>
 8009466:	6821      	ldr	r1, [r4, #0]
 8009468:	432e      	orrs	r6, r5
 800946a:	f021 0104 	bic.w	r1, r1, #4
 800946e:	6021      	str	r1, [r4, #0]
 8009470:	d04b      	beq.n	800950a <_printf_i+0x1a6>
 8009472:	4616      	mov	r6, r2
 8009474:	fbb5 f1f3 	udiv	r1, r5, r3
 8009478:	fb03 5711 	mls	r7, r3, r1, r5
 800947c:	5dc7      	ldrb	r7, [r0, r7]
 800947e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009482:	462f      	mov	r7, r5
 8009484:	42bb      	cmp	r3, r7
 8009486:	460d      	mov	r5, r1
 8009488:	d9f4      	bls.n	8009474 <_printf_i+0x110>
 800948a:	2b08      	cmp	r3, #8
 800948c:	d10b      	bne.n	80094a6 <_printf_i+0x142>
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	07df      	lsls	r7, r3, #31
 8009492:	d508      	bpl.n	80094a6 <_printf_i+0x142>
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	6861      	ldr	r1, [r4, #4]
 8009498:	4299      	cmp	r1, r3
 800949a:	bfde      	ittt	le
 800949c:	2330      	movle	r3, #48	@ 0x30
 800949e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094a6:	1b92      	subs	r2, r2, r6
 80094a8:	6122      	str	r2, [r4, #16]
 80094aa:	f8cd a000 	str.w	sl, [sp]
 80094ae:	464b      	mov	r3, r9
 80094b0:	aa03      	add	r2, sp, #12
 80094b2:	4621      	mov	r1, r4
 80094b4:	4640      	mov	r0, r8
 80094b6:	f7ff fee7 	bl	8009288 <_printf_common>
 80094ba:	3001      	adds	r0, #1
 80094bc:	d14a      	bne.n	8009554 <_printf_i+0x1f0>
 80094be:	f04f 30ff 	mov.w	r0, #4294967295
 80094c2:	b004      	add	sp, #16
 80094c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	f043 0320 	orr.w	r3, r3, #32
 80094ce:	6023      	str	r3, [r4, #0]
 80094d0:	4832      	ldr	r0, [pc, #200]	@ (800959c <_printf_i+0x238>)
 80094d2:	2778      	movs	r7, #120	@ 0x78
 80094d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	6831      	ldr	r1, [r6, #0]
 80094dc:	061f      	lsls	r7, r3, #24
 80094de:	f851 5b04 	ldr.w	r5, [r1], #4
 80094e2:	d402      	bmi.n	80094ea <_printf_i+0x186>
 80094e4:	065f      	lsls	r7, r3, #25
 80094e6:	bf48      	it	mi
 80094e8:	b2ad      	uxthmi	r5, r5
 80094ea:	6031      	str	r1, [r6, #0]
 80094ec:	07d9      	lsls	r1, r3, #31
 80094ee:	bf44      	itt	mi
 80094f0:	f043 0320 	orrmi.w	r3, r3, #32
 80094f4:	6023      	strmi	r3, [r4, #0]
 80094f6:	b11d      	cbz	r5, 8009500 <_printf_i+0x19c>
 80094f8:	2310      	movs	r3, #16
 80094fa:	e7ad      	b.n	8009458 <_printf_i+0xf4>
 80094fc:	4826      	ldr	r0, [pc, #152]	@ (8009598 <_printf_i+0x234>)
 80094fe:	e7e9      	b.n	80094d4 <_printf_i+0x170>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	f023 0320 	bic.w	r3, r3, #32
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	e7f6      	b.n	80094f8 <_printf_i+0x194>
 800950a:	4616      	mov	r6, r2
 800950c:	e7bd      	b.n	800948a <_printf_i+0x126>
 800950e:	6833      	ldr	r3, [r6, #0]
 8009510:	6825      	ldr	r5, [r4, #0]
 8009512:	6961      	ldr	r1, [r4, #20]
 8009514:	1d18      	adds	r0, r3, #4
 8009516:	6030      	str	r0, [r6, #0]
 8009518:	062e      	lsls	r6, r5, #24
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	d501      	bpl.n	8009522 <_printf_i+0x1be>
 800951e:	6019      	str	r1, [r3, #0]
 8009520:	e002      	b.n	8009528 <_printf_i+0x1c4>
 8009522:	0668      	lsls	r0, r5, #25
 8009524:	d5fb      	bpl.n	800951e <_printf_i+0x1ba>
 8009526:	8019      	strh	r1, [r3, #0]
 8009528:	2300      	movs	r3, #0
 800952a:	6123      	str	r3, [r4, #16]
 800952c:	4616      	mov	r6, r2
 800952e:	e7bc      	b.n	80094aa <_printf_i+0x146>
 8009530:	6833      	ldr	r3, [r6, #0]
 8009532:	1d1a      	adds	r2, r3, #4
 8009534:	6032      	str	r2, [r6, #0]
 8009536:	681e      	ldr	r6, [r3, #0]
 8009538:	6862      	ldr	r2, [r4, #4]
 800953a:	2100      	movs	r1, #0
 800953c:	4630      	mov	r0, r6
 800953e:	f7f6 fecf 	bl	80002e0 <memchr>
 8009542:	b108      	cbz	r0, 8009548 <_printf_i+0x1e4>
 8009544:	1b80      	subs	r0, r0, r6
 8009546:	6060      	str	r0, [r4, #4]
 8009548:	6863      	ldr	r3, [r4, #4]
 800954a:	6123      	str	r3, [r4, #16]
 800954c:	2300      	movs	r3, #0
 800954e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009552:	e7aa      	b.n	80094aa <_printf_i+0x146>
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	4632      	mov	r2, r6
 8009558:	4649      	mov	r1, r9
 800955a:	4640      	mov	r0, r8
 800955c:	47d0      	blx	sl
 800955e:	3001      	adds	r0, #1
 8009560:	d0ad      	beq.n	80094be <_printf_i+0x15a>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	079b      	lsls	r3, r3, #30
 8009566:	d413      	bmi.n	8009590 <_printf_i+0x22c>
 8009568:	68e0      	ldr	r0, [r4, #12]
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	4298      	cmp	r0, r3
 800956e:	bfb8      	it	lt
 8009570:	4618      	movlt	r0, r3
 8009572:	e7a6      	b.n	80094c2 <_printf_i+0x15e>
 8009574:	2301      	movs	r3, #1
 8009576:	4632      	mov	r2, r6
 8009578:	4649      	mov	r1, r9
 800957a:	4640      	mov	r0, r8
 800957c:	47d0      	blx	sl
 800957e:	3001      	adds	r0, #1
 8009580:	d09d      	beq.n	80094be <_printf_i+0x15a>
 8009582:	3501      	adds	r5, #1
 8009584:	68e3      	ldr	r3, [r4, #12]
 8009586:	9903      	ldr	r1, [sp, #12]
 8009588:	1a5b      	subs	r3, r3, r1
 800958a:	42ab      	cmp	r3, r5
 800958c:	dcf2      	bgt.n	8009574 <_printf_i+0x210>
 800958e:	e7eb      	b.n	8009568 <_printf_i+0x204>
 8009590:	2500      	movs	r5, #0
 8009592:	f104 0619 	add.w	r6, r4, #25
 8009596:	e7f5      	b.n	8009584 <_printf_i+0x220>
 8009598:	080099d1 	.word	0x080099d1
 800959c:	080099e2 	.word	0x080099e2

080095a0 <__sflush_r>:
 80095a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a8:	0716      	lsls	r6, r2, #28
 80095aa:	4605      	mov	r5, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	d454      	bmi.n	800965a <__sflush_r+0xba>
 80095b0:	684b      	ldr	r3, [r1, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	dc02      	bgt.n	80095bc <__sflush_r+0x1c>
 80095b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	dd48      	ble.n	800964e <__sflush_r+0xae>
 80095bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095be:	2e00      	cmp	r6, #0
 80095c0:	d045      	beq.n	800964e <__sflush_r+0xae>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095c8:	682f      	ldr	r7, [r5, #0]
 80095ca:	6a21      	ldr	r1, [r4, #32]
 80095cc:	602b      	str	r3, [r5, #0]
 80095ce:	d030      	beq.n	8009632 <__sflush_r+0x92>
 80095d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	0759      	lsls	r1, r3, #29
 80095d6:	d505      	bpl.n	80095e4 <__sflush_r+0x44>
 80095d8:	6863      	ldr	r3, [r4, #4]
 80095da:	1ad2      	subs	r2, r2, r3
 80095dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095de:	b10b      	cbz	r3, 80095e4 <__sflush_r+0x44>
 80095e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095e2:	1ad2      	subs	r2, r2, r3
 80095e4:	2300      	movs	r3, #0
 80095e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095e8:	6a21      	ldr	r1, [r4, #32]
 80095ea:	4628      	mov	r0, r5
 80095ec:	47b0      	blx	r6
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	d106      	bne.n	8009602 <__sflush_r+0x62>
 80095f4:	6829      	ldr	r1, [r5, #0]
 80095f6:	291d      	cmp	r1, #29
 80095f8:	d82b      	bhi.n	8009652 <__sflush_r+0xb2>
 80095fa:	4a2a      	ldr	r2, [pc, #168]	@ (80096a4 <__sflush_r+0x104>)
 80095fc:	40ca      	lsrs	r2, r1
 80095fe:	07d6      	lsls	r6, r2, #31
 8009600:	d527      	bpl.n	8009652 <__sflush_r+0xb2>
 8009602:	2200      	movs	r2, #0
 8009604:	6062      	str	r2, [r4, #4]
 8009606:	04d9      	lsls	r1, r3, #19
 8009608:	6922      	ldr	r2, [r4, #16]
 800960a:	6022      	str	r2, [r4, #0]
 800960c:	d504      	bpl.n	8009618 <__sflush_r+0x78>
 800960e:	1c42      	adds	r2, r0, #1
 8009610:	d101      	bne.n	8009616 <__sflush_r+0x76>
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	b903      	cbnz	r3, 8009618 <__sflush_r+0x78>
 8009616:	6560      	str	r0, [r4, #84]	@ 0x54
 8009618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800961a:	602f      	str	r7, [r5, #0]
 800961c:	b1b9      	cbz	r1, 800964e <__sflush_r+0xae>
 800961e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009622:	4299      	cmp	r1, r3
 8009624:	d002      	beq.n	800962c <__sflush_r+0x8c>
 8009626:	4628      	mov	r0, r5
 8009628:	f7ff fbf4 	bl	8008e14 <_free_r>
 800962c:	2300      	movs	r3, #0
 800962e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009630:	e00d      	b.n	800964e <__sflush_r+0xae>
 8009632:	2301      	movs	r3, #1
 8009634:	4628      	mov	r0, r5
 8009636:	47b0      	blx	r6
 8009638:	4602      	mov	r2, r0
 800963a:	1c50      	adds	r0, r2, #1
 800963c:	d1c9      	bne.n	80095d2 <__sflush_r+0x32>
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d0c6      	beq.n	80095d2 <__sflush_r+0x32>
 8009644:	2b1d      	cmp	r3, #29
 8009646:	d001      	beq.n	800964c <__sflush_r+0xac>
 8009648:	2b16      	cmp	r3, #22
 800964a:	d11e      	bne.n	800968a <__sflush_r+0xea>
 800964c:	602f      	str	r7, [r5, #0]
 800964e:	2000      	movs	r0, #0
 8009650:	e022      	b.n	8009698 <__sflush_r+0xf8>
 8009652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009656:	b21b      	sxth	r3, r3
 8009658:	e01b      	b.n	8009692 <__sflush_r+0xf2>
 800965a:	690f      	ldr	r7, [r1, #16]
 800965c:	2f00      	cmp	r7, #0
 800965e:	d0f6      	beq.n	800964e <__sflush_r+0xae>
 8009660:	0793      	lsls	r3, r2, #30
 8009662:	680e      	ldr	r6, [r1, #0]
 8009664:	bf08      	it	eq
 8009666:	694b      	ldreq	r3, [r1, #20]
 8009668:	600f      	str	r7, [r1, #0]
 800966a:	bf18      	it	ne
 800966c:	2300      	movne	r3, #0
 800966e:	eba6 0807 	sub.w	r8, r6, r7
 8009672:	608b      	str	r3, [r1, #8]
 8009674:	f1b8 0f00 	cmp.w	r8, #0
 8009678:	dde9      	ble.n	800964e <__sflush_r+0xae>
 800967a:	6a21      	ldr	r1, [r4, #32]
 800967c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800967e:	4643      	mov	r3, r8
 8009680:	463a      	mov	r2, r7
 8009682:	4628      	mov	r0, r5
 8009684:	47b0      	blx	r6
 8009686:	2800      	cmp	r0, #0
 8009688:	dc08      	bgt.n	800969c <__sflush_r+0xfc>
 800968a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	f04f 30ff 	mov.w	r0, #4294967295
 8009698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800969c:	4407      	add	r7, r0
 800969e:	eba8 0800 	sub.w	r8, r8, r0
 80096a2:	e7e7      	b.n	8009674 <__sflush_r+0xd4>
 80096a4:	20400001 	.word	0x20400001

080096a8 <_fflush_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	690b      	ldr	r3, [r1, #16]
 80096ac:	4605      	mov	r5, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	b913      	cbnz	r3, 80096b8 <_fflush_r+0x10>
 80096b2:	2500      	movs	r5, #0
 80096b4:	4628      	mov	r0, r5
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	b118      	cbz	r0, 80096c2 <_fflush_r+0x1a>
 80096ba:	6a03      	ldr	r3, [r0, #32]
 80096bc:	b90b      	cbnz	r3, 80096c2 <_fflush_r+0x1a>
 80096be:	f7ff f9a1 	bl	8008a04 <__sinit>
 80096c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0f3      	beq.n	80096b2 <_fflush_r+0xa>
 80096ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096cc:	07d0      	lsls	r0, r2, #31
 80096ce:	d404      	bmi.n	80096da <_fflush_r+0x32>
 80096d0:	0599      	lsls	r1, r3, #22
 80096d2:	d402      	bmi.n	80096da <_fflush_r+0x32>
 80096d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096d6:	f7ff fb8c 	bl	8008df2 <__retarget_lock_acquire_recursive>
 80096da:	4628      	mov	r0, r5
 80096dc:	4621      	mov	r1, r4
 80096de:	f7ff ff5f 	bl	80095a0 <__sflush_r>
 80096e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096e4:	07da      	lsls	r2, r3, #31
 80096e6:	4605      	mov	r5, r0
 80096e8:	d4e4      	bmi.n	80096b4 <_fflush_r+0xc>
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	059b      	lsls	r3, r3, #22
 80096ee:	d4e1      	bmi.n	80096b4 <_fflush_r+0xc>
 80096f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096f2:	f7ff fb7f 	bl	8008df4 <__retarget_lock_release_recursive>
 80096f6:	e7dd      	b.n	80096b4 <_fflush_r+0xc>

080096f8 <__swhatbuf_r>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	460c      	mov	r4, r1
 80096fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009700:	2900      	cmp	r1, #0
 8009702:	b096      	sub	sp, #88	@ 0x58
 8009704:	4615      	mov	r5, r2
 8009706:	461e      	mov	r6, r3
 8009708:	da0d      	bge.n	8009726 <__swhatbuf_r+0x2e>
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009710:	f04f 0100 	mov.w	r1, #0
 8009714:	bf14      	ite	ne
 8009716:	2340      	movne	r3, #64	@ 0x40
 8009718:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800971c:	2000      	movs	r0, #0
 800971e:	6031      	str	r1, [r6, #0]
 8009720:	602b      	str	r3, [r5, #0]
 8009722:	b016      	add	sp, #88	@ 0x58
 8009724:	bd70      	pop	{r4, r5, r6, pc}
 8009726:	466a      	mov	r2, sp
 8009728:	f000 f848 	bl	80097bc <_fstat_r>
 800972c:	2800      	cmp	r0, #0
 800972e:	dbec      	blt.n	800970a <__swhatbuf_r+0x12>
 8009730:	9901      	ldr	r1, [sp, #4]
 8009732:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009736:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800973a:	4259      	negs	r1, r3
 800973c:	4159      	adcs	r1, r3
 800973e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009742:	e7eb      	b.n	800971c <__swhatbuf_r+0x24>

08009744 <__smakebuf_r>:
 8009744:	898b      	ldrh	r3, [r1, #12]
 8009746:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009748:	079d      	lsls	r5, r3, #30
 800974a:	4606      	mov	r6, r0
 800974c:	460c      	mov	r4, r1
 800974e:	d507      	bpl.n	8009760 <__smakebuf_r+0x1c>
 8009750:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	6123      	str	r3, [r4, #16]
 8009758:	2301      	movs	r3, #1
 800975a:	6163      	str	r3, [r4, #20]
 800975c:	b003      	add	sp, #12
 800975e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009760:	ab01      	add	r3, sp, #4
 8009762:	466a      	mov	r2, sp
 8009764:	f7ff ffc8 	bl	80096f8 <__swhatbuf_r>
 8009768:	9f00      	ldr	r7, [sp, #0]
 800976a:	4605      	mov	r5, r0
 800976c:	4639      	mov	r1, r7
 800976e:	4630      	mov	r0, r6
 8009770:	f7ff fbbc 	bl	8008eec <_malloc_r>
 8009774:	b948      	cbnz	r0, 800978a <__smakebuf_r+0x46>
 8009776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977a:	059a      	lsls	r2, r3, #22
 800977c:	d4ee      	bmi.n	800975c <__smakebuf_r+0x18>
 800977e:	f023 0303 	bic.w	r3, r3, #3
 8009782:	f043 0302 	orr.w	r3, r3, #2
 8009786:	81a3      	strh	r3, [r4, #12]
 8009788:	e7e2      	b.n	8009750 <__smakebuf_r+0xc>
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	6020      	str	r0, [r4, #0]
 800978e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009792:	81a3      	strh	r3, [r4, #12]
 8009794:	9b01      	ldr	r3, [sp, #4]
 8009796:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800979a:	b15b      	cbz	r3, 80097b4 <__smakebuf_r+0x70>
 800979c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097a0:	4630      	mov	r0, r6
 80097a2:	f000 f81d 	bl	80097e0 <_isatty_r>
 80097a6:	b128      	cbz	r0, 80097b4 <__smakebuf_r+0x70>
 80097a8:	89a3      	ldrh	r3, [r4, #12]
 80097aa:	f023 0303 	bic.w	r3, r3, #3
 80097ae:	f043 0301 	orr.w	r3, r3, #1
 80097b2:	81a3      	strh	r3, [r4, #12]
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	431d      	orrs	r5, r3
 80097b8:	81a5      	strh	r5, [r4, #12]
 80097ba:	e7cf      	b.n	800975c <__smakebuf_r+0x18>

080097bc <_fstat_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4d07      	ldr	r5, [pc, #28]	@ (80097dc <_fstat_r+0x20>)
 80097c0:	2300      	movs	r3, #0
 80097c2:	4604      	mov	r4, r0
 80097c4:	4608      	mov	r0, r1
 80097c6:	4611      	mov	r1, r2
 80097c8:	602b      	str	r3, [r5, #0]
 80097ca:	f7f8 fb42 	bl	8001e52 <_fstat>
 80097ce:	1c43      	adds	r3, r0, #1
 80097d0:	d102      	bne.n	80097d8 <_fstat_r+0x1c>
 80097d2:	682b      	ldr	r3, [r5, #0]
 80097d4:	b103      	cbz	r3, 80097d8 <_fstat_r+0x1c>
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	bd38      	pop	{r3, r4, r5, pc}
 80097da:	bf00      	nop
 80097dc:	24000900 	.word	0x24000900

080097e0 <_isatty_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d06      	ldr	r5, [pc, #24]	@ (80097fc <_isatty_r+0x1c>)
 80097e4:	2300      	movs	r3, #0
 80097e6:	4604      	mov	r4, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	602b      	str	r3, [r5, #0]
 80097ec:	f7f8 fb41 	bl	8001e72 <_isatty>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d102      	bne.n	80097fa <_isatty_r+0x1a>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	b103      	cbz	r3, 80097fa <_isatty_r+0x1a>
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	24000900 	.word	0x24000900

08009800 <_sbrk_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d06      	ldr	r5, [pc, #24]	@ (800981c <_sbrk_r+0x1c>)
 8009804:	2300      	movs	r3, #0
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	f7f8 fb4a 	bl	8001ea4 <_sbrk>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d102      	bne.n	800981a <_sbrk_r+0x1a>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b103      	cbz	r3, 800981a <_sbrk_r+0x1a>
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	24000900 	.word	0x24000900

08009820 <_init>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr

0800982c <_fini>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	bf00      	nop
 8009830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009832:	bc08      	pop	{r3}
 8009834:	469e      	mov	lr, r3
 8009836:	4770      	bx	lr
