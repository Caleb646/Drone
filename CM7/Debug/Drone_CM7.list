
Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094a8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08009748  08009748  0000a748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009894  08009894  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009894  08009894  0000a894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800989c  0800989c  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800989c  0800989c  0000a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098a0  080098a0  0000a8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  080098a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  24000070  08009914  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000910  08009914  0000b910  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022407  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000439d  00000000  00000000  0002d4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00031848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014af  00000000  00000000  00033308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041f75  00000000  00000000  000347b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022183  00000000  00000000  0007672c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b368a  00000000  00000000  000988af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024bf39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007860  00000000  00000000  0024bf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  002537dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009730 	.word	0x08009730

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08009730 	.word	0x08009730

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <FlightContextUpdateIMUData>:
/*
* \brief IMU collects it accel and gyro data in millimeters and millidegrees. This is
* converted to meters and degrees
*/
void FlightContextUpdateIMUData(FlightContext *pContext, Vec3 accel, Vec3 gyro)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	4638      	mov	r0, r7
 80006b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    pContext->imuUnFilteredAccel.x = ((float)accel.x) / 1000.0f;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006c4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 80006c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	edc3 7a00 	vstr	s15, [r3]
    pContext->imuUnFilteredAccel.y = ((float)accel.y) / 1000.0f;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	ee07 3a90 	vmov	s15, r3
 80006d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006dc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 80006e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	edc3 7a01 	vstr	s15, [r3, #4]
    pContext->imuUnFilteredAccel.z = ((float)accel.z) / 1000.0f;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f4:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 80006f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	edc3 7a02 	vstr	s15, [r3, #8]

    pContext->imuUnFilteredGyro.x = ((float)gyro.x) / 1000.0f;
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800070c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 8000710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	edc3 7a03 	vstr	s15, [r3, #12]
    pContext->imuUnFilteredGyro.y = ((float)gyro.y) / 1000.0f;
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	ee07 3a90 	vmov	s15, r3
 8000720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000724:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 8000728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	edc3 7a04 	vstr	s15, [r3, #16]
    pContext->imuUnFilteredGyro.z = ((float)gyro.z) / 1000.0f;
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	ee07 3a90 	vmov	s15, r3
 8000738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800073c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000758 <FlightContextUpdateIMUData+0xac>
 8000740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	447a0000 	.word	0x447a0000

0800075c <__io_putchar>:

static void SyncUARTTaskHandler(void);
static int8_t LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8000764:	f001 fcfa 	bl	800215c <HAL_GetCurrentCPUID>
 8000768:	4603      	mov	r3, r0
 800076a:	2b03      	cmp	r3, #3
 800076c:	d110      	bne.n	8000790 <__io_putchar+0x34>
  {
    RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <__io_putchar+0x68>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	1d39      	adds	r1, r7, #4
 8000774:	2201      	movs	r2, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f990 	bl	8000a9c <RingBuffWrite>
    if((char)ch == '\n')
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b0a      	cmp	r3, #10
 8000782:	d119      	bne.n	80007b8 <__io_putchar+0x5c>
    {
      LoggerWriteToUART(pCM7RingBuf);
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <__io_putchar+0x68>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f859 	bl	8000840 <LoggerWriteToUART>
 800078e:	e013      	b.n	80007b8 <__io_putchar+0x5c>
    }
  }
  else 
  {
    RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 8000790:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <__io_putchar+0x6c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	1d39      	adds	r1, r7, #4
 8000796:	2201      	movs	r2, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f97f 	bl	8000a9c <RingBuffWrite>
    if((char)ch == '\n')
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b0a      	cmp	r3, #10
 80007a4:	d108      	bne.n	80007b8 <__io_putchar+0x5c>
    {
      /*
      * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
      */
      uint32_t taskID = SYNC_TASKID_UART_OUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
      SyncMailBoxWriteNotify(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2204      	movs	r2, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 fc10 	bl	8000fd8 <SyncMailBoxWriteNotify>
    }
  }
  return ch;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24000090 	.word	0x24000090
 80007c8:	2400008c 	.word	0x2400008c

080007cc <LoggerInit>:

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 80007d4:	f001 fcc2 	bl	800215c <HAL_GetCurrentCPUID>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d102      	bne.n	80007e4 <LoggerInit+0x18>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d105      	bne.n	80007f0 <LoggerInit+0x24>
  {
    pUART = NULL;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <LoggerInit+0x5c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
    return -1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	e017      	b.n	8000820 <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 80007f0:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80007f4:	480d      	ldr	r0, [pc, #52]	@ (800082c <LoggerInit+0x60>)
 80007f6:	f000 f921 	bl	8000a3c <RingBuffCreate>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000830 <LoggerInit+0x64>)
 80007fe:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8000800:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000804:	480b      	ldr	r0, [pc, #44]	@ (8000834 <LoggerInit+0x68>)
 8000806:	f000 f919 	bl	8000a3c <RingBuffCreate>
 800080a:	4603      	mov	r3, r0
 800080c:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <LoggerInit+0x6c>)
 800080e:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 8000810:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <LoggerInit+0x5c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 8000816:	2100      	movs	r1, #0
 8000818:	4808      	ldr	r0, [pc, #32]	@ (800083c <LoggerInit+0x70>)
 800081a:	f000 fc35 	bl	8001088 <SyncRegisterHandler>

  return 0;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	24000094 	.word	0x24000094
 800082c:	38000008 	.word	0x38000008
 8000830:	2400008c 	.word	0x2400008c
 8000834:	38000128 	.word	0x38000128
 8000838:	24000090 	.word	0x24000090
 800083c:	08000891 	.word	0x08000891

08000840 <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 fa5f 	bl	8000d14 <RingBuffGetLinearBlockReadLength>
 8000856:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d011      	beq.n	8000882 <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 fa2e 	bl	8000cc0 <RingBuffGetLinearBlockReadAddress>
 8000864:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <LoggerWriteToUART+0x4c>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	b29a      	uxth	r2, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	f006 fb74 	bl	8006f60 <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 8000878:	68f9      	ldr	r1, [r7, #12]
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 fa8c 	bl	8000d98 <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 8000880:	e7e6      	b.n	8000850 <LoggerWriteToUART+0x10>
  }
  return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	24000094 	.word	0x24000094

08000890 <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8000894:	f001 fc62 	bl	800215c <HAL_GetCurrentCPUID>
 8000898:	4603      	mov	r3, r0
 800089a:	2b03      	cmp	r3, #3
 800089c:	d104      	bne.n	80008a8 <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 800089e:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <SyncUARTTaskHandler+0x1c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ffcc 	bl	8000840 <LoggerWriteToUART>
  }
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2400008c 	.word	0x2400008c

080008b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008b4:	4b49      	ldr	r3, [pc, #292]	@ (80009dc <SystemInit+0x12c>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ba:	4a48      	ldr	r2, [pc, #288]	@ (80009dc <SystemInit+0x12c>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80008c4:	4b45      	ldr	r3, [pc, #276]	@ (80009dc <SystemInit+0x12c>)
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	4a44      	ldr	r2, [pc, #272]	@ (80009dc <SystemInit+0x12c>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008d0:	4b43      	ldr	r3, [pc, #268]	@ (80009e0 <SystemInit+0x130>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f003 030f 	and.w	r3, r3, #15
 80008d8:	2b06      	cmp	r3, #6
 80008da:	d807      	bhi.n	80008ec <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008dc:	4b40      	ldr	r3, [pc, #256]	@ (80009e0 <SystemInit+0x130>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f023 030f 	bic.w	r3, r3, #15
 80008e4:	4a3e      	ldr	r2, [pc, #248]	@ (80009e0 <SystemInit+0x130>)
 80008e6:	f043 0307 	orr.w	r3, r3, #7
 80008ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008ec:	4b3d      	ldr	r3, [pc, #244]	@ (80009e4 <SystemInit+0x134>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a3c      	ldr	r2, [pc, #240]	@ (80009e4 <SystemInit+0x134>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008f8:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <SystemInit+0x134>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008fe:	4b39      	ldr	r3, [pc, #228]	@ (80009e4 <SystemInit+0x134>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	4938      	ldr	r1, [pc, #224]	@ (80009e4 <SystemInit+0x134>)
 8000904:	4b38      	ldr	r3, [pc, #224]	@ (80009e8 <SystemInit+0x138>)
 8000906:	4013      	ands	r3, r2
 8000908:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800090a:	4b35      	ldr	r3, [pc, #212]	@ (80009e0 <SystemInit+0x130>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	2b00      	cmp	r3, #0
 8000914:	d007      	beq.n	8000926 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000916:	4b32      	ldr	r3, [pc, #200]	@ (80009e0 <SystemInit+0x130>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f023 030f 	bic.w	r3, r3, #15
 800091e:	4a30      	ldr	r2, [pc, #192]	@ (80009e0 <SystemInit+0x130>)
 8000920:	f043 0307 	orr.w	r3, r3, #7
 8000924:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000926:	4b2f      	ldr	r3, [pc, #188]	@ (80009e4 <SystemInit+0x134>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800092c:	4b2d      	ldr	r3, [pc, #180]	@ (80009e4 <SystemInit+0x134>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000932:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <SystemInit+0x134>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000938:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <SystemInit+0x134>)
 800093a:	4a2c      	ldr	r2, [pc, #176]	@ (80009ec <SystemInit+0x13c>)
 800093c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <SystemInit+0x134>)
 8000940:	4a2b      	ldr	r2, [pc, #172]	@ (80009f0 <SystemInit+0x140>)
 8000942:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000944:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <SystemInit+0x134>)
 8000946:	4a2b      	ldr	r2, [pc, #172]	@ (80009f4 <SystemInit+0x144>)
 8000948:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <SystemInit+0x134>)
 800094c:	2200      	movs	r2, #0
 800094e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000950:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <SystemInit+0x134>)
 8000952:	4a28      	ldr	r2, [pc, #160]	@ (80009f4 <SystemInit+0x144>)
 8000954:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <SystemInit+0x134>)
 8000958:	2200      	movs	r2, #0
 800095a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800095c:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <SystemInit+0x134>)
 800095e:	4a25      	ldr	r2, [pc, #148]	@ (80009f4 <SystemInit+0x144>)
 8000960:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <SystemInit+0x134>)
 8000964:	2200      	movs	r2, #0
 8000966:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000968:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <SystemInit+0x134>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1d      	ldr	r2, [pc, #116]	@ (80009e4 <SystemInit+0x134>)
 800096e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000972:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <SystemInit+0x134>)
 8000976:	2200      	movs	r2, #0
 8000978:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800097a:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <SystemInit+0x148>)
 800097c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800097e:	4a1e      	ldr	r2, [pc, #120]	@ (80009f8 <SystemInit+0x148>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000984:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000986:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <SystemInit+0x14c>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <SystemInit+0x150>)
 800098c:	4013      	ands	r3, r2
 800098e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000992:	d202      	bcs.n	800099a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <SystemInit+0x154>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <SystemInit+0x134>)
 800099c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80009a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d113      	bne.n	80009d0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <SystemInit+0x134>)
 80009aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80009ae:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <SystemInit+0x134>)
 80009b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <SystemInit+0x158>)
 80009ba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80009be:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <SystemInit+0x134>)
 80009c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80009c6:	4a07      	ldr	r2, [pc, #28]	@ (80009e4 <SystemInit+0x134>)
 80009c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00
 80009e0:	52002000 	.word	0x52002000
 80009e4:	58024400 	.word	0x58024400
 80009e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80009ec:	02020200 	.word	0x02020200
 80009f0:	01ff0000 	.word	0x01ff0000
 80009f4:	01010280 	.word	0x01010280
 80009f8:	580000c0 	.word	0x580000c0
 80009fc:	5c001000 	.word	0x5c001000
 8000a00:	ffff0000 	.word	0xffff0000
 8000a04:	51008108 	.word	0x51008108
 8000a08:	52004000 	.word	0x52004000

08000a0c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <ExitRun0Mode+0x2c>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <ExitRun0Mode+0x2c>)
 8000a16:	f023 0302 	bic.w	r3, r3, #2
 8000a1a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000a1c:	bf00      	nop
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <ExitRun0Mode+0x2c>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f9      	beq.n	8000a1e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	58024800 	.word	0x58024800

08000a3c <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d005      	beq.n	8000a58 <RingBuffCreate+0x1c>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <RingBuffCreate+0x1c>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b20      	cmp	r3, #32
 8000a56:	d801      	bhi.n	8000a5c <RingBuffCreate+0x20>
        return NULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e017      	b.n	8000a8c <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 8000a60:	2220      	movs	r2, #32
 8000a62:	2100      	movs	r1, #0
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f008 f8d3 	bl	8008c10 <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	f1a3 0220 	sub.w	r2, r3, #32
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f103 0220 	add.w	r2, r3, #32
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <RingBuffCreate+0x58>)
 8000a82:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <RingBuffCreate+0x5c>)
 8000a88:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	deadbeef 	.word	0xdeadbeef
 8000a98:	21524110 	.word	0x21524110

08000a9c <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d017      	beq.n	8000ae2 <RingBuffWrite+0x46>
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ba4 <RingBuffWrite+0x108>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d112      	bne.n	8000ae2 <RingBuffWrite+0x46>
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a39      	ldr	r2, [pc, #228]	@ (8000ba8 <RingBuffWrite+0x10c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d10d      	bne.n	8000ae2 <RingBuffWrite+0x46>
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d009      	beq.n	8000ae2 <RingBuffWrite+0x46>
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d005      	beq.n	8000ae2 <RingBuffWrite+0x46>
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <RingBuffWrite+0x46>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <RingBuffWrite+0x4a>
        return 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e059      	b.n	8000b9a <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f000 f860 	bl	8000bac <RingBuffGetFree>
 8000aec:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	4293      	cmp	r3, r2
 8000af4:	bf28      	it	cs
 8000af6:	4613      	movcs	r3, r2
 8000af8:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <RingBuffWrite+0x68>
        return 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	e04a      	b.n	8000b9a <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	691b      	ldr	r3, [r3, #16]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d905      	bls.n	8000b20 <RingBuffWrite+0x84>
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	689a      	ldr	r2, [r3, #8]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	e000      	b.n	8000b22 <RingBuffWrite+0x86>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	69f9      	ldr	r1, [r7, #28]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f008 f8e7 	bl	8008d06 <memcpy>
    buff->w += tocopy;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	691a      	ldr	r2, [r3, #16]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	441a      	add	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00b      	beq.n	8000b6a <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	6858      	ldr	r0, [r3, #4]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f008 f8d1 	bl	8008d06 <memcpy>
        buff->w = btw;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d302      	bcc.n	8000b7c <RingBuffWrite+0xe0>
        buff->w = 0;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d007      	beq.n	8000b94 <RingBuffWrite+0xf8>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	6979      	ldr	r1, [r7, #20]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	440a      	add	r2, r1
 8000b8e:	2101      	movs	r1, #1
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	4798      	blx	r3
    return tocopy + btw;
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	deadbeef 	.word	0xdeadbeef
 8000ba8:	21524110 	.word	0x21524110

08000bac <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d011      	beq.n	8000bde <RingBuffGetFree+0x32>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c30 <RingBuffGetFree+0x84>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d10c      	bne.n	8000bde <RingBuffGetFree+0x32>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c34 <RingBuffGetFree+0x88>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d107      	bne.n	8000bde <RingBuffGetFree+0x32>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <RingBuffGetFree+0x32>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <RingBuffGetFree+0x36>
        return 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e01f      	b.n	8000c22 <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d103      	bne.n	8000bfe <RingBuffGetFree+0x52>
        size = buff->size;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e00f      	b.n	8000c1e <RingBuffGetFree+0x72>
    } else if (r > w) {
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d904      	bls.n	8000c10 <RingBuffGetFree+0x64>
        size = r - w;
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e006      	b.n	8000c1e <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	68f9      	ldr	r1, [r7, #12]
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1acb      	subs	r3, r1, r3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3b01      	subs	r3, #1
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	deadbeef 	.word	0xdeadbeef
 8000c34:	21524110 	.word	0x21524110

08000c38 <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d011      	beq.n	8000c6a <RingBuffGetFull+0x32>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <RingBuffGetFull+0x80>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d10c      	bne.n	8000c6a <RingBuffGetFull+0x32>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a19      	ldr	r2, [pc, #100]	@ (8000cbc <RingBuffGetFull+0x84>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d107      	bne.n	8000c6a <RingBuffGetFull+0x32>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <RingBuffGetFull+0x32>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <RingBuffGetFull+0x36>
        return 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e01d      	b.n	8000caa <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d102      	bne.n	8000c88 <RingBuffGetFull+0x50>
        size = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e00f      	b.n	8000ca8 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d904      	bls.n	8000c9a <RingBuffGetFull+0x62>
        size = w - r;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e006      	b.n	8000ca8 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	6939      	ldr	r1, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000ca8:	697b      	ldr	r3, [r7, #20]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	371c      	adds	r7, #28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	deadbeef 	.word	0xdeadbeef
 8000cbc:	21524110 	.word	0x21524110

08000cc0 <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d011      	beq.n	8000cf2 <RingBuffGetLinearBlockReadAddress+0x32>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d0c <RingBuffGetLinearBlockReadAddress+0x4c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d10c      	bne.n	8000cf2 <RingBuffGetLinearBlockReadAddress+0x32>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d10 <RingBuffGetLinearBlockReadAddress+0x50>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d107      	bne.n	8000cf2 <RingBuffGetLinearBlockReadAddress+0x32>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <RingBuffGetLinearBlockReadAddress+0x32>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e004      	b.n	8000d00 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	4413      	add	r3, r2
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	deadbeef 	.word	0xdeadbeef
 8000d10:	21524110 	.word	0x21524110

08000d14 <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d011      	beq.n	8000d46 <RingBuffGetLinearBlockReadLength+0x32>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1a      	ldr	r2, [pc, #104]	@ (8000d90 <RingBuffGetLinearBlockReadLength+0x7c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d10c      	bne.n	8000d46 <RingBuffGetLinearBlockReadLength+0x32>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <RingBuffGetLinearBlockReadLength+0x80>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d107      	bne.n	8000d46 <RingBuffGetLinearBlockReadLength+0x32>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <RingBuffGetLinearBlockReadLength+0x32>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e01b      	b.n	8000d82 <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d904      	bls.n	8000d68 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	e00b      	b.n	8000d80 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d905      	bls.n	8000d7c <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e001      	b.n	8000d80 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000d80:	697b      	ldr	r3, [r7, #20]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	deadbeef 	.word	0xdeadbeef
 8000d94:	21524110 	.word	0x21524110

08000d98 <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d014      	beq.n	8000dd2 <RingBuffSkip+0x3a>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a20      	ldr	r2, [pc, #128]	@ (8000e30 <RingBuffSkip+0x98>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10f      	bne.n	8000dd2 <RingBuffSkip+0x3a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e34 <RingBuffSkip+0x9c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d10a      	bne.n	8000dd2 <RingBuffSkip+0x3a>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <RingBuffSkip+0x3a>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d002      	beq.n	8000dd2 <RingBuffSkip+0x3a>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <RingBuffSkip+0x3e>
        return 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e027      	b.n	8000e26 <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff2e 	bl	8000c38 <RingBuffGetFull>
 8000ddc:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4293      	cmp	r3, r2
 8000de4:	bf28      	it	cs
 8000de6:	4613      	movcs	r3, r2
 8000de8:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	441a      	add	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d306      	bcc.n	8000e10 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68d2      	ldr	r2, [r2, #12]
 8000e0a:	1ad2      	subs	r2, r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <RingBuffSkip+0x8c>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	2100      	movs	r1, #0
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	4798      	blx	r3
    return len;
 8000e24:	683b      	ldr	r3, [r7, #0]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	deadbeef 	.word	0xdeadbeef
 8000e34:	21524110 	.word	0x21524110

08000e38 <IMUReadReg>:
    0x2e, 0x00, 0xc1
};


IMU_STATUS IMUReadReg(IMU *pIMU, uint8_t reg, uint8_t *pBuf, uint32_t len)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b091      	sub	sp, #68	@ 0x44
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	460b      	mov	r3, r1
 8000e46:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 8000e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4c:	2210      	movs	r2, #16
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f007 fedd 	bl	8008c10 <memset>
	// 0x80 bmi270 read bit
	pTx[0] = 0x80 | reg;
 8000e56:	7afb      	ldrb	r3, [r7, #11]
 8000e58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t pRx[16];
	memset(pRx, 0, sizeof(pRx));
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	2210      	movs	r2, #16
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f007 fed0 	bl	8008c10 <memset>
	// status = HAL_SPI_Transmit(pIMUSPIRef, pTemp, 1, 100);

	// set NSS high
	// HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

	if(len + 1 > 16)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	2b10      	cmp	r3, #16
 8000e76:	d901      	bls.n	8000e7c <IMUReadReg+0x44>
	{
		return IMU_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e01f      	b.n	8000ebc <IMUReadReg+0x84>
	}

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(pIMU->pSPI, pTx, pRx, len + 1, 100);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	3301      	adds	r3, #1
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	f107 0214 	add.w	r2, r7, #20
 8000e8c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e90:	2464      	movs	r4, #100	@ 0x64
 8000e92:	9400      	str	r4, [sp, #0]
 8000e94:	f004 fbe8 	bl	8005668 <HAL_SPI_TransmitReceive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if(status != HAL_OK)
 8000e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <IMUReadReg+0x72>
	{
		return IMU_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e008      	b.n	8000ebc <IMUReadReg+0x84>
	}
	// 1st byte sent by bmi270 is a dummy byte
	memcpy(pBuf, &pRx[1], len);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	3301      	adds	r3, #1
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f007 ff26 	bl	8008d06 <memcpy>

	return IMU_OK;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	373c      	adds	r7, #60	@ 0x3c
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd90      	pop	{r4, r7, pc}

08000ec4 <IMU2CPUInterruptHandler>:
}

IMU_STATUS IMU2CPUInterruptHandler(
  IMU *pIMU, Vec3 *pOutputAccel,Vec3 *pOutputGyro
)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  if(pIMU == NULL || pIMU->pSPI == NULL || pOutputAccel == NULL || pOutputGyro == NULL)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d009      	beq.n	8000eea <IMU2CPUInterruptHandler+0x26>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d005      	beq.n	8000eea <IMU2CPUInterruptHandler+0x26>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <IMU2CPUInterruptHandler+0x26>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d112      	bne.n	8000f10 <IMU2CPUInterruptHandler+0x4c>
  {
    LOG_ERROR("Invalid arguments");
 8000eea:	481c      	ldr	r0, [pc, #112]	@ (8000f5c <IMU2CPUInterruptHandler+0x98>)
 8000eec:	f007 fd48 	bl	8008980 <iprintf>
 8000ef0:	481b      	ldr	r0, [pc, #108]	@ (8000f60 <IMU2CPUInterruptHandler+0x9c>)
 8000ef2:	f007 fd45 	bl	8008980 <iprintf>
 8000ef6:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000efa:	481a      	ldr	r0, [pc, #104]	@ (8000f64 <IMU2CPUInterruptHandler+0xa0>)
 8000efc:	f007 fd40 	bl	8008980 <iprintf>
 8000f00:	4819      	ldr	r0, [pc, #100]	@ (8000f68 <IMU2CPUInterruptHandler+0xa4>)
 8000f02:	f007 fd3d 	bl	8008980 <iprintf>
 8000f06:	4819      	ldr	r0, [pc, #100]	@ (8000f6c <IMU2CPUInterruptHandler+0xa8>)
 8000f08:	f007 fda2 	bl	8008a50 <puts>
    return IMU_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e021      	b.n	8000f54 <IMU2CPUInterruptHandler+0x90>
  }

  // read both status registers
  uint8_t pBuf[2] = {0, 0};
 8000f10:	2300      	movs	r3, #0
 8000f12:	82bb      	strh	r3, [r7, #20]
  IMU_STATUS status = IMUReadReg(pIMU, BMI2_INT_STATUS_1_ADDR, pBuf, 2);
 8000f14:	f107 0214 	add.w	r2, r7, #20
 8000f18:	2302      	movs	r3, #2
 8000f1a:	211d      	movs	r1, #29
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f7ff ff8b 	bl	8000e38 <IMUReadReg>
 8000f22:	4603      	mov	r3, r0
 8000f24:	75fb      	strb	r3, [r7, #23]

  // uint8_t intStatus0 = pBuf[0];
  uint8_t intStatus1 = pBuf[1];
 8000f26:	7d7b      	ldrb	r3, [r7, #21]
 8000f28:	75bb      	strb	r3, [r7, #22]
  }

  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_ACC_RDY_BIT)) status |= IMUUpdateAccel(pIMU, *pOutputAccel, pOutputAccel);
  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_GYR_RDY_BIT)) status |= IMUUpdateGyro(pIMU, *pOutputGyro, pOutputGyro);

  if(status != IMU_OK) LOG_ERROR("Failed to update IMU position data");
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d010      	beq.n	8000f52 <IMU2CPUInterruptHandler+0x8e>
 8000f30:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <IMU2CPUInterruptHandler+0x98>)
 8000f32:	f007 fd25 	bl	8008980 <iprintf>
 8000f36:	480a      	ldr	r0, [pc, #40]	@ (8000f60 <IMU2CPUInterruptHandler+0x9c>)
 8000f38:	f007 fd22 	bl	8008980 <iprintf>
 8000f3c:	f240 215a 	movw	r1, #602	@ 0x25a
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <IMU2CPUInterruptHandler+0xa0>)
 8000f42:	f007 fd1d 	bl	8008980 <iprintf>
 8000f46:	480a      	ldr	r0, [pc, #40]	@ (8000f70 <IMU2CPUInterruptHandler+0xac>)
 8000f48:	f007 fd1a 	bl	8008980 <iprintf>
 8000f4c:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <IMU2CPUInterruptHandler+0xa8>)
 8000f4e:	f007 fd7f 	bl	8008a50 <puts>

  return status;
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	08009748 	.word	0x08009748
 8000f60:	08009754 	.word	0x08009754
 8000f64:	080097a8 	.word	0x080097a8
 8000f68:	080097b0 	.word	0x080097b0
 8000f6c:	080097c4 	.word	0x080097c4
 8000f70:	080097c8 	.word	0x080097c8

08000f74 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d103      	bne.n	8000f8e <SyncMailBoxGet+0x1a>
 8000f86:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e001      	b.n	8000f92 <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <SyncMailBoxGet+0x2c>)
 8000f90:	60fb      	str	r3, [r7, #12]
    return pMB;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	38000004 	.word	0x38000004

08000fa4 <SyncMailBoxWrite>:

int8_t SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d902      	bls.n	8000fbc <SyncMailBoxWrite+0x18>
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	e009      	b.n	8000fd0 <SyncMailBoxWrite+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff ffd9 	bl	8000f74 <SyncMailBoxGet>
 8000fc2:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	6978      	ldr	r0, [r7, #20]
 8000fca:	f007 fe9c 	bl	8008d06 <memcpy>
    return 0;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SyncMailBoxWriteNotify>:

int8_t SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
    int8_t status = SyncMailBoxWrite(mbID, pBuffer, len);
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff ffdb 	bl	8000fa4 <SyncMailBoxWrite>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
    if(status < 0) return status;
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	da02      	bge.n	8001000 <SyncMailBoxWriteNotify+0x28>
 8000ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ffe:	e003      	b.n	8001008 <SyncMailBoxWriteNotify+0x30>
    asm volatile ("dsb");
 8001000:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 8001004:	bf40      	sev
    return 0;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <SyncMailBoxRead>:

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d902      	bls.n	8001028 <SyncMailBoxRead+0x18>
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff ffa3 	bl	8000f74 <SyncMailBoxGet>
 800102e:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6979      	ldr	r1, [r7, #20]
 8001034:	68b8      	ldr	r0, [r7, #8]
 8001036:	f007 fe66 	bl	8008d06 <memcpy>
    return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <SyncGetTaskHandler+0x12>
 8001052:	2300      	movs	r3, #0
 8001054:	e003      	b.n	800105e <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SyncGetTaskHandler+0x28>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	24000098 	.word	0x24000098

08001070 <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8001074:	2208      	movs	r2, #8
 8001076:	2100      	movs	r1, #0
 8001078:	4802      	ldr	r0, [pc, #8]	@ (8001084 <SyncInit+0x14>)
 800107a:	f007 fdc9 	bl	8008c10 <memset>
    return 0;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	bd80      	pop	{r7, pc}
 8001084:	24000098 	.word	0x24000098

08001088 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d902      	bls.n	800109e <SyncRegisterHandler+0x16>
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	e005      	b.n	80010aa <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 800109e:	4906      	ldr	r1, [pc, #24]	@ (80010b8 <SyncRegisterHandler+0x30>)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	24000098 	.word	0x24000098

080010bc <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 80010c6:	463b      	mov	r3, r7
 80010c8:	2204      	movs	r2, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff ff9f 	bl	8001010 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffb5 	bl	8001044 <SyncGetTaskHandler>
 80010da:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4798      	blx	r3
    }
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 80010f8:	463b      	mov	r3, r7
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff86 	bl	8001010 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff9c 	bl	8001044 <SyncGetTaskHandler>
 800110c:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4798      	blx	r3
    }
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_GPIO_EXTI_Callback>:
FilterMadgwickContext gFilterMadgwickContext;
PIDContext gPIDAngleContext;
TaskHandle_t gpTaskMotionControlUpdate;

void HAL_GPIO_EXTI_Callback(uint16_t gpioPin)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b08d      	sub	sp, #52	@ 0x34
 8001124:	af04      	add	r7, sp, #16
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
    if(gpioPin == IMU_INT_Pin) 
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	2b80      	cmp	r3, #128	@ 0x80
 800112e:	d122      	bne.n	8001176 <HAL_GPIO_EXTI_Callback+0x56>
    {
        Vec3 accel, gyro;
        if(IMU2CPUInterruptHandler(&gIMU, &accel, &gyro) == IMU_OK)
 8001130:	f107 0208 	add.w	r2, r7, #8
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4811      	ldr	r0, [pc, #68]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x60>)
 800113c:	f7ff fec2 	bl	8000ec4 <IMU2CPUInterruptHandler>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d117      	bne.n	8001176 <HAL_GPIO_EXTI_Callback+0x56>
        {
            FlightContextUpdateIMUData(&gFlightContext, accel, gyro);
 8001146:	466c      	mov	r4, sp
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800115a:	480a      	ldr	r0, [pc, #40]	@ (8001184 <HAL_GPIO_EXTI_Callback+0x64>)
 800115c:	f7ff faa6 	bl	80006ac <FlightContextUpdateIMUData>
            if(gpTaskMotionControlUpdate != NULL) xTaskNotifyGive(gpTaskMotionControlUpdate);
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x68>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <HAL_GPIO_EXTI_Callback+0x56>
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x68>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	2202      	movs	r2, #2
 8001170:	2100      	movs	r1, #0
 8001172:	f007 fa89 	bl	8008688 <xTaskGenericNotify>
        }
    }
}
 8001176:	bf00      	nop
 8001178:	3724      	adds	r7, #36	@ 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd90      	pop	{r4, r7, pc}
 800117e:	bf00      	nop
 8001180:	24000254 	.word	0x24000254
 8001184:	2400028c 	.word	0x2400028c
 8001188:	240002e0 	.word	0x240002e0

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */

    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm volatile ("NOP"); }
 8001192:	e000      	b.n	8001196 <main+0xa>
 8001194:	bf00      	nop
 8001196:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <main+0xa4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f8      	bne.n	8001194 <main+0x8>

    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80011a2:	f000 fe6f 	bl	8001e84 <HAL_Init>

    /* USER CODE BEGIN Init */

    SyncInit();
 80011a6:	f7ff ff63 	bl	8001070 <SyncInit>
    LoggerInit(&huart1);
 80011aa:	4822      	ldr	r0, [pc, #136]	@ (8001234 <main+0xa8>)
 80011ac:	f7ff fb0e 	bl	80007cc <LoggerInit>
    
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80011b0:	f000 f84c 	bl	800124c <SystemClock_Config>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <main+0xa4>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001230 <main+0xa4>)
 80011bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <main+0xa4>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
    // /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f001 f99e 	bl	8002514 <HAL_HSEM_FastTake>
    // /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 80011d8:	2100      	movs	r1, #0
 80011da:	2000      	movs	r0, #0
 80011dc:	f001 f9b4 	bl	8002548 <HAL_HSEM_Release>
    // /* wait until CPU2 wakes up from stop mode */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) { asm volatile ("NOP"); }
 80011e0:	e000      	b.n	80011e4 <main+0x58>
 80011e2:	bf00      	nop
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <main+0xa4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f8      	beq.n	80011e2 <main+0x56>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80011f0:	f000 fa32 	bl	8001658 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 80011f4:	f000 f9e4 	bl	80015c0 <MX_USART1_UART_Init>
    MX_SPI2_Init();
 80011f8:	f000 f8ae 	bl	8001358 <MX_SPI2_Init>
    MX_TIM8_Init();
 80011fc:	f000 f902 	bl	8001404 <MX_TIM8_Init>
    MX_TIM13_Init();
 8001200:	f000 f990 	bl	8001524 <MX_TIM13_Init>
    //   IMU_GYRO_ODR_100
    // );
    while (1)
    {
        /* USER CODE END WHILE */
        HAL_Delay(1000);
 8001204:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001208:	f000 fe98 	bl	8001f3c <HAL_Delay>
        LOG_INFO("Hello from CM7");
 800120c:	480a      	ldr	r0, [pc, #40]	@ (8001238 <main+0xac>)
 800120e:	f007 fbb7 	bl	8008980 <iprintf>
 8001212:	480a      	ldr	r0, [pc, #40]	@ (800123c <main+0xb0>)
 8001214:	f007 fbb4 	bl	8008980 <iprintf>
 8001218:	21f1      	movs	r1, #241	@ 0xf1
 800121a:	4809      	ldr	r0, [pc, #36]	@ (8001240 <main+0xb4>)
 800121c:	f007 fbb0 	bl	8008980 <iprintf>
 8001220:	4808      	ldr	r0, [pc, #32]	@ (8001244 <main+0xb8>)
 8001222:	f007 fbad 	bl	8008980 <iprintf>
 8001226:	4808      	ldr	r0, [pc, #32]	@ (8001248 <main+0xbc>)
 8001228:	f007 fc12 	bl	8008a50 <puts>
        HAL_Delay(1000);
 800122c:	bf00      	nop
 800122e:	e7e9      	b.n	8001204 <main+0x78>
 8001230:	58024400 	.word	0x58024400
 8001234:	240001c0 	.word	0x240001c0
 8001238:	080097ec 	.word	0x080097ec
 800123c:	080097f8 	.word	0x080097f8
 8001240:	0800980c 	.word	0x0800980c
 8001244:	08009814 	.word	0x08009814
 8001248:	08009824 	.word	0x08009824

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b09c      	sub	sp, #112	@ 0x70
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001256:	224c      	movs	r2, #76	@ 0x4c
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f007 fcd8 	bl	8008c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2220      	movs	r2, #32
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f007 fcd2 	bl	8008c10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800126c:	2004      	movs	r0, #4
 800126e:	f001 f97f 	bl	8002570 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <SystemClock_Config+0x104>)
 8001278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127a:	4a35      	ldr	r2, [pc, #212]	@ (8001350 <SystemClock_Config+0x104>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001282:	4b33      	ldr	r3, [pc, #204]	@ (8001350 <SystemClock_Config+0x104>)
 8001284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <SystemClock_Config+0x108>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a30      	ldr	r2, [pc, #192]	@ (8001354 <SystemClock_Config+0x108>)
 8001292:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <SystemClock_Config+0x108>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012a4:	bf00      	nop
 80012a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <SystemClock_Config+0x108>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012b2:	d1f8      	bne.n	80012a6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80012b4:	230b      	movs	r3, #11
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012be:	2301      	movs	r3, #1
 80012c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c2:	2340      	movs	r3, #64	@ 0x40
 80012c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012c6:	2301      	movs	r3, #1
 80012c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2302      	movs	r3, #2
 80012cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ce:	2302      	movs	r3, #2
 80012d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80012d2:	2305      	movs	r3, #5
 80012d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80012d6:	2330      	movs	r3, #48	@ 0x30
 80012d8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012da:	2302      	movs	r3, #2
 80012dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80012de:	2305      	movs	r3, #5
 80012e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80012e6:	2308      	movs	r3, #8
 80012e8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 f994 	bl	8002624 <HAL_RCC_OscConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001302:	f000 fa41 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	233f      	movs	r3, #63	@ 0x3f
 8001308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fdd4 	bl	8002ed8 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001336:	f000 fa27 	bl	8001788 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800133a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800133e:	2100      	movs	r1, #0
 8001340:	2000      	movs	r0, #0
 8001342:	f001 ff7f 	bl	8003244 <HAL_RCC_MCOConfig>
}
 8001346:	bf00      	nop
 8001348:	3770      	adds	r7, #112	@ 0x70
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	58000400 	.word	0x58000400
 8001354:	58024800 	.word	0x58024800

08001358 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800135c:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <MX_SPI2_Init+0xa4>)
 800135e:	4a28      	ldr	r2, [pc, #160]	@ (8001400 <MX_SPI2_Init+0xa8>)
 8001360:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001362:	4b26      	ldr	r3, [pc, #152]	@ (80013fc <MX_SPI2_Init+0xa4>)
 8001364:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001368:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <MX_SPI2_Init+0xa4>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001370:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <MX_SPI2_Init+0xa4>)
 8001372:	2207      	movs	r2, #7
 8001374:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <MX_SPI2_Init+0xa4>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800137c:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <MX_SPI2_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <MX_SPI2_Init+0xa4>)
 8001384:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001388:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800138a:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <MX_SPI2_Init+0xa4>)
 800138c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001390:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001392:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_SPI2_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <MX_SPI2_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013a4:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	@ (80013fc <MX_SPI2_Init+0xa4>)
 80013ea:	f004 f819 	bl	8005420 <HAL_SPI_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80013f4:	f000 f9c8 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	240000a0 	.word	0x240000a0
 8001400:	40003800 	.word	0x40003800

08001404 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b096      	sub	sp, #88	@ 0x58
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001416:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	222c      	movs	r2, #44	@ 0x2c
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f007 fbed 	bl	8008c10 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001436:	4b39      	ldr	r3, [pc, #228]	@ (800151c <MX_TIM8_Init+0x118>)
 8001438:	4a39      	ldr	r2, [pc, #228]	@ (8001520 <MX_TIM8_Init+0x11c>)
 800143a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800143c:	4b37      	ldr	r3, [pc, #220]	@ (800151c <MX_TIM8_Init+0x118>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b36      	ldr	r3, [pc, #216]	@ (800151c <MX_TIM8_Init+0x118>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001448:	4b34      	ldr	r3, [pc, #208]	@ (800151c <MX_TIM8_Init+0x118>)
 800144a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800144e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b32      	ldr	r3, [pc, #200]	@ (800151c <MX_TIM8_Init+0x118>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <MX_TIM8_Init+0x118>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b2f      	ldr	r3, [pc, #188]	@ (800151c <MX_TIM8_Init+0x118>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001462:	482e      	ldr	r0, [pc, #184]	@ (800151c <MX_TIM8_Init+0x118>)
 8001464:	f004 fdf2 	bl	800604c <HAL_TIM_PWM_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800146e:	f000 f98b 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800147e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001482:	4619      	mov	r1, r3
 8001484:	4825      	ldr	r0, [pc, #148]	@ (800151c <MX_TIM8_Init+0x118>)
 8001486:	f005 fbf1 	bl	8006c6c <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001490:	f000 f97a 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	@ 0x60
 8001496:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4818      	ldr	r0, [pc, #96]	@ (800151c <MX_TIM8_Init+0x118>)
 80014ba:	f004 ff25 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014c4:	f000 f960 	bl	8001788 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4807      	ldr	r0, [pc, #28]	@ (800151c <MX_TIM8_Init+0x118>)
 80014fe:	f005 fc43 	bl	8006d88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001508:	f000 f93e 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800150c:	4803      	ldr	r0, [pc, #12]	@ (800151c <MX_TIM8_Init+0x118>)
 800150e:	f000 fa61 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 8001512:	bf00      	nop
 8001514:	3758      	adds	r7, #88	@ 0x58
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	24000128 	.word	0x24000128
 8001520:	40010400 	.word	0x40010400

08001524 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <MX_TIM13_Init+0x94>)
 800153e:	4a1f      	ldr	r2, [pc, #124]	@ (80015bc <MX_TIM13_Init+0x98>)
 8001540:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001542:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <MX_TIM13_Init+0x94>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <MX_TIM13_Init+0x94>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <MX_TIM13_Init+0x94>)
 8001550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001554:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <MX_TIM13_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <MX_TIM13_Init+0x94>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001562:	4815      	ldr	r0, [pc, #84]	@ (80015b8 <MX_TIM13_Init+0x94>)
 8001564:	f004 fca3 	bl	8005eae <HAL_TIM_Base_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800156e:	f000 f90b 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001572:	4811      	ldr	r0, [pc, #68]	@ (80015b8 <MX_TIM13_Init+0x94>)
 8001574:	f004 fd6a 	bl	800604c <HAL_TIM_PWM_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800157e:	f000 f903 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001582:	2360      	movs	r3, #96	@ 0x60
 8001584:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	4619      	mov	r1, r3
 8001598:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <MX_TIM13_Init+0x94>)
 800159a:	f004 feb5 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80015a4:	f000 f8f0 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80015a8:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <MX_TIM13_Init+0x94>)
 80015aa:	f000 fa13 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 80015ae:	bf00      	nop
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	24000174 	.word	0x24000174
 80015bc:	40001c00 	.word	0x40001c00

080015c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 80015c6:	4a23      	ldr	r2, [pc, #140]	@ (8001654 <MX_USART1_UART_Init+0x94>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ca:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001608:	4811      	ldr	r0, [pc, #68]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 800160a:	f005 fc59 	bl	8006ec0 <HAL_UART_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001614:	f000 f8b8 	bl	8001788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001618:	2100      	movs	r1, #0
 800161a:	480d      	ldr	r0, [pc, #52]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 800161c:	f006 fcef 	bl	8007ffe <HAL_UARTEx_SetTxFifoThreshold>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001626:	f000 f8af 	bl	8001788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162a:	2100      	movs	r1, #0
 800162c:	4808      	ldr	r0, [pc, #32]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 800162e:	f006 fd24 	bl	800807a <HAL_UARTEx_SetRxFifoThreshold>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001638:	f000 f8a6 	bl	8001788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MX_USART1_UART_Init+0x90>)
 800163e:	f006 fca5 	bl	8007f8c <HAL_UARTEx_DisableFifoMode>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001648:	f000 f89e 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	240001c0 	.word	0x240001c0
 8001654:	40011000 	.word	0x40011000

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166e:	4b3a      	ldr	r3, [pc, #232]	@ (8001758 <MX_GPIO_Init+0x100>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001674:	4a38      	ldr	r2, [pc, #224]	@ (8001758 <MX_GPIO_Init+0x100>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167e:	4b36      	ldr	r3, [pc, #216]	@ (8001758 <MX_GPIO_Init+0x100>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <MX_GPIO_Init+0x100>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001692:	4a31      	ldr	r2, [pc, #196]	@ (8001758 <MX_GPIO_Init+0x100>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169c:	4b2e      	ldr	r3, [pc, #184]	@ (8001758 <MX_GPIO_Init+0x100>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b0:	4a29      	ldr	r2, [pc, #164]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ba:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c8:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	4a22      	ldr	r2, [pc, #136]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f6:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <MX_GPIO_Init+0x100>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	480e      	ldr	r0, [pc, #56]	@ (800175c <MX_GPIO_Init+0x104>)
 8001722:	f000 fd2d 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001726:	2380      	movs	r3, #128	@ 0x80
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4809      	ldr	r0, [pc, #36]	@ (8001760 <MX_GPIO_Init+0x108>)
 800173c:	f000 fd20 	bl	8002180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(IMU_INT_EXTI_IRQn, 5, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2105      	movs	r1, #5
 8001744:	2017      	movs	r0, #23
 8001746:	f000 fce1 	bl	800210c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(IMU_INT_EXTI_IRQn);
 800174a:	2017      	movs	r0, #23
 800174c:	f000 fcf8 	bl	8002140 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	@ 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	58024400 	.word	0x58024400
 800175c:	58020000 	.word	0x58020000
 8001760:	58020800 	.word	0x58020800

08001764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001776:	f000 fbc1 	bl	8001efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40000800 	.word	0x40000800

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <Error_Handler+0x8>

08001794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_MspInit+0x48>)
 800179c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017a0:	4a0e      	ldr	r2, [pc, #56]	@ (80017dc <HAL_MspInit+0x48>)
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017aa:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <HAL_MspInit+0x48>)
 80017ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	210f      	movs	r1, #15
 80017bc:	f06f 0001 	mvn.w	r0, #1
 80017c0:	f000 fca4 	bl	800210c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2105      	movs	r1, #5
 80017c8:	2041      	movs	r0, #65	@ 0x41
 80017ca:	f000 fc9f 	bl	800210c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80017ce:	2041      	movs	r0, #65	@ 0x41
 80017d0:	f000 fcb6 	bl	8002140 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	58024400 	.word	0x58024400

080017e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0be      	sub	sp, #248	@ 0xf8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	22c8      	movs	r2, #200	@ 0xc8
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f007 fa05 	bl	8008c10 <memset>
  if(hspi->Instance==SPI2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a38      	ldr	r2, [pc, #224]	@ (80018ec <HAL_SPI_MspInit+0x10c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d169      	bne.n	80018e4 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001810:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800181c:	2300      	movs	r3, #0
 800181e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001820:	f107 0318 	add.w	r3, r7, #24
 8001824:	4618      	mov	r0, r3
 8001826:	f001 ff8f 	bl	8003748 <HAL_RCCEx_PeriphCLKConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001830:	f7ff ffaa 	bl	8001788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001834:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <HAL_SPI_MspInit+0x110>)
 8001836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800183a:	4a2d      	ldr	r2, [pc, #180]	@ (80018f0 <HAL_SPI_MspInit+0x110>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001840:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001844:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <HAL_SPI_MspInit+0x110>)
 8001846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800184a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <HAL_SPI_MspInit+0x110>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001858:	4a25      	ldr	r2, [pc, #148]	@ (80018f0 <HAL_SPI_MspInit+0x110>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001862:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <HAL_SPI_MspInit+0x110>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001870:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <HAL_SPI_MspInit+0x110>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001876:	4a1e      	ldr	r2, [pc, #120]	@ (80018f0 <HAL_SPI_MspInit+0x110>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_SPI_MspInit+0x110>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 800188e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018a8:	2305      	movs	r3, #5
 80018aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018b2:	4619      	mov	r1, r3
 80018b4:	480f      	ldr	r0, [pc, #60]	@ (80018f4 <HAL_SPI_MspInit+0x114>)
 80018b6:	f000 fc63 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 80018ba:	230c      	movs	r3, #12
 80018bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d2:	2305      	movs	r3, #5
 80018d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <HAL_SPI_MspInit+0x118>)
 80018e0:	f000 fc4e 	bl	8002180 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80018e4:	bf00      	nop
 80018e6:	37f8      	adds	r7, #248	@ 0xf8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40003800 	.word	0x40003800
 80018f0:	58024400 	.word	0x58024400
 80018f4:	58020000 	.word	0x58020000
 80018f8:	58020800 	.word	0x58020800

080018fc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1a      	ldr	r2, [pc, #104]	@ (8001984 <HAL_TIM_PWM_MspInit+0x88>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d12d      	bne.n	800197a <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <HAL_TIM_PWM_MspInit+0x8c>)
 8001920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001924:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <HAL_TIM_PWM_MspInit+0x8c>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <HAL_TIM_PWM_MspInit+0x8c>)
 8001930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_TIM_PWM_MspInit+0x8c>)
 800193e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001942:	4a11      	ldr	r2, [pc, #68]	@ (8001988 <HAL_TIM_PWM_MspInit+0x8c>)
 8001944:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_TIM_PWM_MspInit+0x8c>)
 800194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 800195a:	2340      	movs	r3, #64	@ 0x40
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800196a:	2303      	movs	r3, #3
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	@ (800198c <HAL_TIM_PWM_MspInit+0x90>)
 8001976:	f000 fc03 	bl	8002180 <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40010400 	.word	0x40010400
 8001988:	58024400 	.word	0x58024400
 800198c:	58022400 	.word	0x58022400

08001990 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0b      	ldr	r2, [pc, #44]	@ (80019cc <HAL_TIM_Base_MspInit+0x3c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d10e      	bne.n	80019c0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_TIM_Base_MspInit+0x40>)
 80019a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019a8:	4a09      	ldr	r2, [pc, #36]	@ (80019d0 <HAL_TIM_Base_MspInit+0x40>)
 80019aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <HAL_TIM_Base_MspInit+0x40>)
 80019b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40001c00 	.word	0x40001c00
 80019d0:	58024400 	.word	0x58024400

080019d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	@ 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a35      	ldr	r2, [pc, #212]	@ (8001ac8 <HAL_TIM_MspPostInit+0xf4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d13e      	bne.n	8001a74 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	4b35      	ldr	r3, [pc, #212]	@ (8001acc <HAL_TIM_MspPostInit+0xf8>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fc:	4a33      	ldr	r2, [pc, #204]	@ (8001acc <HAL_TIM_MspPostInit+0xf8>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a06:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <HAL_TIM_MspPostInit+0xf8>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a14:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <HAL_TIM_MspPostInit+0xf8>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8001acc <HAL_TIM_MspPostInit+0xf8>)
 8001a1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a24:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <HAL_TIM_MspPostInit+0xf8>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a32:	2340      	movs	r3, #64	@ 0x40
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a42:	2303      	movs	r3, #3
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4820      	ldr	r0, [pc, #128]	@ (8001ad0 <HAL_TIM_MspPostInit+0xfc>)
 8001a4e:	f000 fb97 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001a52:	2380      	movs	r3, #128	@ 0x80
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a62:	2303      	movs	r3, #3
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4819      	ldr	r0, [pc, #100]	@ (8001ad4 <HAL_TIM_MspPostInit+0x100>)
 8001a6e:	f000 fb87 	bl	8002180 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001a72:	e024      	b.n	8001abe <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a17      	ldr	r2, [pc, #92]	@ (8001ad8 <HAL_TIM_MspPostInit+0x104>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d11f      	bne.n	8001abe <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <HAL_TIM_MspPostInit+0xf8>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a84:	4a11      	ldr	r2, [pc, #68]	@ (8001acc <HAL_TIM_MspPostInit+0xf8>)
 8001a86:	f043 0320 	orr.w	r3, r3, #32
 8001a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <HAL_TIM_MspPostInit+0xf8>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8001a9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001aae:	2309      	movs	r3, #9
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4808      	ldr	r0, [pc, #32]	@ (8001adc <HAL_TIM_MspPostInit+0x108>)
 8001aba:	f000 fb61 	bl	8002180 <HAL_GPIO_Init>
}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	@ 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40010400 	.word	0x40010400
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	58020800 	.word	0x58020800
 8001ad4:	58022400 	.word	0x58022400
 8001ad8:	40001c00 	.word	0x40001c00
 8001adc:	58021400 	.word	0x58021400

08001ae0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0bc      	sub	sp, #240	@ 0xf0
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	22c8      	movs	r2, #200	@ 0xc8
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f007 f885 	bl	8008c10 <memset>
  if(huart->Instance==USART1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a27      	ldr	r2, [pc, #156]	@ (8001ba8 <HAL_UART_MspInit+0xc8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d146      	bne.n	8001b9e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b10:	f04f 0201 	mov.w	r2, #1
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	4618      	mov	r0, r3
 8001b28:	f001 fe0e 	bl	8003748 <HAL_RCCEx_PeriphCLKConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b32:	f7ff fe29 	bl	8001788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b36:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <HAL_UART_MspInit+0xcc>)
 8001b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bac <HAL_UART_MspInit+0xcc>)
 8001b3e:	f043 0310 	orr.w	r3, r3, #16
 8001b42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_UART_MspInit+0xcc>)
 8001b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_UART_MspInit+0xcc>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b5a:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <HAL_UART_MspInit+0xcc>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_UART_MspInit+0xcc>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001b72:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <HAL_UART_MspInit+0xd0>)
 8001b9a:	f000 faf1 	bl	8002180 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b9e:	bf00      	nop
 8001ba0:	37f0      	adds	r7, #240	@ 0xf0
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40011000 	.word	0x40011000
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	58020000 	.word	0x58020000

08001bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b090      	sub	sp, #64	@ 0x40
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	d827      	bhi.n	8001c12 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	201e      	movs	r0, #30
 8001bc8:	f000 faa0 	bl	800210c <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bcc:	201e      	movs	r0, #30
 8001bce:	f000 fab7 	bl	8002140 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001bd2:	4a29      	ldr	r2, [pc, #164]	@ (8001c78 <HAL_InitTick+0xc4>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001bd8:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <HAL_InitTick+0xc8>)
 8001bda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bde:	4a27      	ldr	r2, [pc, #156]	@ (8001c7c <HAL_InitTick+0xc8>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001be8:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <HAL_InitTick+0xc8>)
 8001bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bf6:	f107 0210 	add.w	r2, r7, #16
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 fd5f 	bl	80036c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d106      	bne.n	8001c1e <HAL_InitTick+0x6a>
 8001c10:	e001      	b.n	8001c16 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e02b      	b.n	8001c6e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c16:	f001 fd29 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8001c1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001c1c:	e004      	b.n	8001c28 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c1e:	f001 fd25 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8001c22:	4603      	mov	r3, r0
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c2a:	4a15      	ldr	r2, [pc, #84]	@ (8001c80 <HAL_InitTick+0xcc>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	0c9b      	lsrs	r3, r3, #18
 8001c32:	3b01      	subs	r3, #1
 8001c34:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001c36:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <HAL_InitTick+0xd0>)
 8001c38:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <HAL_InitTick+0xd4>)
 8001c3a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <HAL_InitTick+0xd0>)
 8001c3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c42:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001c44:	4a0f      	ldr	r2, [pc, #60]	@ (8001c84 <HAL_InitTick+0xd0>)
 8001c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c48:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <HAL_InitTick+0xd0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <HAL_InitTick+0xd0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001c56:	480b      	ldr	r0, [pc, #44]	@ (8001c84 <HAL_InitTick+0xd0>)
 8001c58:	f004 f929 	bl	8005eae <HAL_TIM_Base_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d104      	bne.n	8001c6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001c62:	4808      	ldr	r0, [pc, #32]	@ (8001c84 <HAL_InitTick+0xd0>)
 8001c64:	f004 f97a 	bl	8005f5c <HAL_TIM_Base_Start_IT>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	e000      	b.n	8001c6e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3740      	adds	r7, #64	@ 0x40
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	24000008 	.word	0x24000008
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	431bde83 	.word	0x431bde83
 8001c84:	240002e4 	.word	0x240002e4
 8001c88:	40000800 	.word	0x40000800

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <NMI_Handler+0x4>

08001c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001cc6:	2080      	movs	r0, #128	@ 0x80
 8001cc8:	f000 fc0a 	bl	80024e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <TIM4_IRQHandler+0x10>)
 8001cd6:	f004 fa10 	bl	80060fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	240002e4 	.word	0x240002e4

08001ce4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e00a      	b.n	8001d0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cf6:	f3af 8000 	nop.w
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf0      	blt.n	8001cf6 <_read+0x12>
  }

  return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e009      	b.n	8001d44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	60ba      	str	r2, [r7, #8]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fd0f 	bl	800075c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbf1      	blt.n	8001d30 <_write+0x12>
  }
  return len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_close>:

int _close(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_isatty>:

int _isatty(int file)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	@ (8001e1c <_sbrk+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <_sbrk+0x60>)
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <_sbrk+0x64>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	@ (8001e28 <_sbrk+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de2:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d207      	bcs.n	8001e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df0:	f006 ff5c 	bl	8008cac <__errno>
 8001df4:	4603      	mov	r3, r0
 8001df6:	220c      	movs	r2, #12
 8001df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	e009      	b.n	8001e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e06:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <_sbrk+0x64>)
 8001e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	24080000 	.word	0x24080000
 8001e20:	00000400 	.word	0x00000400
 8001e24:	24000330 	.word	0x24000330
 8001e28:	24000910 	.word	0x24000910

08001e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e2c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001e68 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001e30:	f7fe fdec 	bl	8000a0c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e34:	f7fe fd3c 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e38:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3a:	490d      	ldr	r1, [pc, #52]	@ (8001e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e50:	4c0a      	ldr	r4, [pc, #40]	@ (8001e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f006 ff2b 	bl	8008cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e62:	f7ff f993 	bl	800118c <main>
  bx  lr
 8001e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e70:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001e74:	080098a4 	.word	0x080098a4
  ldr r2, =_sbss
 8001e78:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001e7c:	24000910 	.word	0x24000910

08001e80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC3_IRQHandler>
	...

08001e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	f000 f933 	bl	80020f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e90:	f001 fa42 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <HAL_Init+0x68>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	4913      	ldr	r1, [pc, #76]	@ (8001ef0 <HAL_Init+0x6c>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eae:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <HAL_Init+0x68>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef0 <HAL_Init+0x6c>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef4 <HAL_Init+0x70>)
 8001ec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <HAL_Init+0x74>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f7ff fe70 	bl	8001bb4 <HAL_InitTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e002      	b.n	8001ee4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ede:	f7ff fc59 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	58024400 	.word	0x58024400
 8001ef0:	08009828 	.word	0x08009828
 8001ef4:	24000004 	.word	0x24000004
 8001ef8:	24000000 	.word	0x24000000

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2400000c 	.word	0x2400000c
 8001f20:	24000334 	.word	0x24000334

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	24000334 	.word	0x24000334

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2400000c 	.word	0x2400000c

08001f84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <HAL_GetREVID+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0c1b      	lsrs	r3, r3, #16
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	5c001000 	.word	0x5c001000

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x40>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x40>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00
 8001fe0:	05fa0000 	.word	0x05fa0000

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	@ (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	@ (800208c <__NVIC_SetPriority+0x50>)
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ff4c 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800211a:	f7ff ff63 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 800211e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	6978      	ldr	r0, [r7, #20]
 8002126:	f7ff ffb3 	bl	8002090 <NVIC_EncodePriority>
 800212a:	4602      	mov	r2, r0
 800212c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff82 	bl	800203c <__NVIC_SetPriority>
}
 8002138:	bf00      	nop
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff56 	bl	8002000 <__NVIC_EnableIRQ>
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_GetCurrentCPUID+0x20>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002168:	2b70      	cmp	r3, #112	@ 0x70
 800216a:	d101      	bne.n	8002170 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 800216c:	2303      	movs	r3, #3
 800216e:	e000      	b.n	8002172 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8002170:	2301      	movs	r3, #1
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	@ 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800218e:	4b89      	ldr	r3, [pc, #548]	@ (80023b4 <HAL_GPIO_Init+0x234>)
 8002190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002192:	e194      	b.n	80024be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8186 	beq.w	80024b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d005      	beq.n	80021c4 <HAL_GPIO_Init+0x44>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d130      	bne.n	8002226 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021fa:	2201      	movs	r2, #1
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f003 0201 	and.w	r2, r3, #1
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b03      	cmp	r3, #3
 8002230:	d017      	beq.n	8002262 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d123      	bne.n	80022b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	69b9      	ldr	r1, [r7, #24]
 80022b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0203 	and.w	r2, r3, #3
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80e0 	beq.w	80024b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f8:	4b2f      	ldr	r3, [pc, #188]	@ (80023b8 <HAL_GPIO_Init+0x238>)
 80022fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022fe:	4a2e      	ldr	r2, [pc, #184]	@ (80023b8 <HAL_GPIO_Init+0x238>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002308:	4b2b      	ldr	r3, [pc, #172]	@ (80023b8 <HAL_GPIO_Init+0x238>)
 800230a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002316:	4a29      	ldr	r2, [pc, #164]	@ (80023bc <HAL_GPIO_Init+0x23c>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a20      	ldr	r2, [pc, #128]	@ (80023c0 <HAL_GPIO_Init+0x240>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d052      	beq.n	80023e8 <HAL_GPIO_Init+0x268>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1f      	ldr	r2, [pc, #124]	@ (80023c4 <HAL_GPIO_Init+0x244>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d031      	beq.n	80023ae <HAL_GPIO_Init+0x22e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1e      	ldr	r2, [pc, #120]	@ (80023c8 <HAL_GPIO_Init+0x248>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d02b      	beq.n	80023aa <HAL_GPIO_Init+0x22a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1d      	ldr	r2, [pc, #116]	@ (80023cc <HAL_GPIO_Init+0x24c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d025      	beq.n	80023a6 <HAL_GPIO_Init+0x226>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1c      	ldr	r2, [pc, #112]	@ (80023d0 <HAL_GPIO_Init+0x250>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01f      	beq.n	80023a2 <HAL_GPIO_Init+0x222>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1b      	ldr	r2, [pc, #108]	@ (80023d4 <HAL_GPIO_Init+0x254>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x21e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1a      	ldr	r2, [pc, #104]	@ (80023d8 <HAL_GPIO_Init+0x258>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x21a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a19      	ldr	r2, [pc, #100]	@ (80023dc <HAL_GPIO_Init+0x25c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x216>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a18      	ldr	r2, [pc, #96]	@ (80023e0 <HAL_GPIO_Init+0x260>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x212>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_GPIO_Init+0x264>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x20e>
 800238a:	2309      	movs	r3, #9
 800238c:	e02d      	b.n	80023ea <HAL_GPIO_Init+0x26a>
 800238e:	230a      	movs	r3, #10
 8002390:	e02b      	b.n	80023ea <HAL_GPIO_Init+0x26a>
 8002392:	2308      	movs	r3, #8
 8002394:	e029      	b.n	80023ea <HAL_GPIO_Init+0x26a>
 8002396:	2307      	movs	r3, #7
 8002398:	e027      	b.n	80023ea <HAL_GPIO_Init+0x26a>
 800239a:	2306      	movs	r3, #6
 800239c:	e025      	b.n	80023ea <HAL_GPIO_Init+0x26a>
 800239e:	2305      	movs	r3, #5
 80023a0:	e023      	b.n	80023ea <HAL_GPIO_Init+0x26a>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e021      	b.n	80023ea <HAL_GPIO_Init+0x26a>
 80023a6:	2303      	movs	r3, #3
 80023a8:	e01f      	b.n	80023ea <HAL_GPIO_Init+0x26a>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e01d      	b.n	80023ea <HAL_GPIO_Init+0x26a>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e01b      	b.n	80023ea <HAL_GPIO_Init+0x26a>
 80023b2:	bf00      	nop
 80023b4:	58000080 	.word	0x58000080
 80023b8:	58024400 	.word	0x58024400
 80023bc:	58000400 	.word	0x58000400
 80023c0:	58020000 	.word	0x58020000
 80023c4:	58020400 	.word	0x58020400
 80023c8:	58020800 	.word	0x58020800
 80023cc:	58020c00 	.word	0x58020c00
 80023d0:	58021000 	.word	0x58021000
 80023d4:	58021400 	.word	0x58021400
 80023d8:	58021800 	.word	0x58021800
 80023dc:	58021c00 	.word	0x58021c00
 80023e0:	58022000 	.word	0x58022000
 80023e4:	58022400 	.word	0x58022400
 80023e8:	2300      	movs	r3, #0
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	f002 0203 	and.w	r2, r2, #3
 80023f0:	0092      	lsls	r2, r2, #2
 80023f2:	4093      	lsls	r3, r2
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023fa:	4938      	ldr	r1, [pc, #224]	@ (80024dc <HAL_GPIO_Init+0x35c>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800242e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800245c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	3301      	adds	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f ae63 	bne.w	8002194 <HAL_GPIO_Init+0x14>
  }
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	3724      	adds	r7, #36	@ 0x24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	58000400 	.word	0x58000400

080024e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fe0a 	bl	8001120 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800251c:	4a08      	ldr	r2, [pc, #32]	@ (8002540 <HAL_HSEM_FastTake+0x2c>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3320      	adds	r3, #32
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	4a07      	ldr	r2, [pc, #28]	@ (8002544 <HAL_HSEM_FastTake+0x30>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d101      	bne.n	8002530 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	e000      	b.n	8002532 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	58026400 	.word	0x58026400
 8002544:	80000300 	.word	0x80000300

08002548 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002552:	4906      	ldr	r1, [pc, #24]	@ (800256c <HAL_HSEM_Release+0x24>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	58026400 	.word	0x58026400

08002570 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002578:	4b29      	ldr	r3, [pc, #164]	@ (8002620 <HAL_PWREx_ConfigSupply+0xb0>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	2b06      	cmp	r3, #6
 8002582:	d00a      	beq.n	800259a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002584:	4b26      	ldr	r3, [pc, #152]	@ (8002620 <HAL_PWREx_ConfigSupply+0xb0>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e040      	b.n	8002618 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e03e      	b.n	8002618 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800259a:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <HAL_PWREx_ConfigSupply+0xb0>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80025a2:	491f      	ldr	r1, [pc, #124]	@ (8002620 <HAL_PWREx_ConfigSupply+0xb0>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025aa:	f7ff fcbb 	bl	8001f24 <HAL_GetTick>
 80025ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025b0:	e009      	b.n	80025c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025b2:	f7ff fcb7 	bl	8001f24 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025c0:	d901      	bls.n	80025c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e028      	b.n	8002618 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025c6:	4b16      	ldr	r3, [pc, #88]	@ (8002620 <HAL_PWREx_ConfigSupply+0xb0>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025d2:	d1ee      	bne.n	80025b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b1e      	cmp	r3, #30
 80025d8:	d008      	beq.n	80025ec <HAL_PWREx_ConfigSupply+0x7c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80025de:	d005      	beq.n	80025ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b1d      	cmp	r3, #29
 80025e4:	d002      	beq.n	80025ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b2d      	cmp	r3, #45	@ 0x2d
 80025ea:	d114      	bne.n	8002616 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80025ec:	f7ff fc9a 	bl	8001f24 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025f2:	e009      	b.n	8002608 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025f4:	f7ff fc96 	bl	8001f24 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002602:	d901      	bls.n	8002608 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e007      	b.n	8002618 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_PWREx_ConfigSupply+0xb0>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002614:	d1ee      	bne.n	80025f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	58024800 	.word	0x58024800

08002624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	@ 0x30
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f000 bc48 	b.w	8002ec8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8088 	beq.w	8002756 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002646:	4b99      	ldr	r3, [pc, #612]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800264e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002650:	4b96      	ldr	r3, [pc, #600]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002654:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002658:	2b10      	cmp	r3, #16
 800265a:	d007      	beq.n	800266c <HAL_RCC_OscConfig+0x48>
 800265c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265e:	2b18      	cmp	r3, #24
 8002660:	d111      	bne.n	8002686 <HAL_RCC_OscConfig+0x62>
 8002662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d10c      	bne.n	8002686 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	4b8f      	ldr	r3, [pc, #572]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d06d      	beq.n	8002754 <HAL_RCC_OscConfig+0x130>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d169      	bne.n	8002754 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f000 bc21 	b.w	8002ec8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x7a>
 8002690:	4b86      	ldr	r3, [pc, #536]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a85      	ldr	r2, [pc, #532]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e02e      	b.n	80026fc <HAL_RCC_OscConfig+0xd8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x9c>
 80026a6:	4b81      	ldr	r3, [pc, #516]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a80      	ldr	r2, [pc, #512]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b7e      	ldr	r3, [pc, #504]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a7d      	ldr	r2, [pc, #500]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e01d      	b.n	80026fc <HAL_RCC_OscConfig+0xd8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0xc0>
 80026ca:	4b78      	ldr	r3, [pc, #480]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a77      	ldr	r2, [pc, #476]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b75      	ldr	r3, [pc, #468]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a74      	ldr	r2, [pc, #464]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xd8>
 80026e4:	4b71      	ldr	r3, [pc, #452]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a70      	ldr	r2, [pc, #448]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b6e      	ldr	r3, [pc, #440]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a6d      	ldr	r2, [pc, #436]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7ff fc0e 	bl	8001f24 <HAL_GetTick>
 8002708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7ff fc0a 	bl	8001f24 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e3d4      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271e:	4b63      	ldr	r3, [pc, #396]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xe8>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7ff fbfa 	bl	8001f24 <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff fbf6 	bl	8001f24 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	@ 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e3c0      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002746:	4b59      	ldr	r3, [pc, #356]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x110>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80ca 	beq.w	80028f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002764:	4b51      	ldr	r3, [pc, #324]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800276c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800276e:	4b4f      	ldr	r3, [pc, #316]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_RCC_OscConfig+0x166>
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	2b18      	cmp	r3, #24
 800277e:	d156      	bne.n	800282e <HAL_RCC_OscConfig+0x20a>
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d151      	bne.n	800282e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278a:	4b48      	ldr	r3, [pc, #288]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x17e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e392      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027a2:	4b42      	ldr	r3, [pc, #264]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 0219 	bic.w	r2, r3, #25
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	493f      	ldr	r1, [pc, #252]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7ff fbb6 	bl	8001f24 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027bc:	f7ff fbb2 	bl	8001f24 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e37c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027da:	f7ff fbd3 	bl	8001f84 <HAL_GetREVID>
 80027de:	4603      	mov	r3, r0
 80027e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d817      	bhi.n	8002818 <HAL_RCC_OscConfig+0x1f4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b40      	cmp	r3, #64	@ 0x40
 80027ee:	d108      	bne.n	8002802 <HAL_RCC_OscConfig+0x1de>
 80027f0:	4b2e      	ldr	r3, [pc, #184]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027f8:	4a2c      	ldr	r2, [pc, #176]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80027fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027fe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002800:	e07a      	b.n	80028f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	4b2a      	ldr	r3, [pc, #168]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	031b      	lsls	r3, r3, #12
 8002810:	4926      	ldr	r1, [pc, #152]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002816:	e06f      	b.n	80028f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	4921      	ldr	r1, [pc, #132]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282c:	e064      	b.n	80028f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d047      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002836:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0219 	bic.w	r2, r3, #25
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	491a      	ldr	r1, [pc, #104]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002844:	4313      	orrs	r3, r2
 8002846:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7ff fb6c 	bl	8001f24 <HAL_GetTick>
 800284c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002850:	f7ff fb68 	bl	8001f24 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e332      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	f7ff fb89 	bl	8001f84 <HAL_GetREVID>
 8002872:	4603      	mov	r3, r0
 8002874:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002878:	4293      	cmp	r3, r2
 800287a:	d819      	bhi.n	80028b0 <HAL_RCC_OscConfig+0x28c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b40      	cmp	r3, #64	@ 0x40
 8002882:	d108      	bne.n	8002896 <HAL_RCC_OscConfig+0x272>
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800288c:	4a07      	ldr	r2, [pc, #28]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 800288e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002892:	6053      	str	r3, [r2, #4]
 8002894:	e030      	b.n	80028f8 <HAL_RCC_OscConfig+0x2d4>
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	031b      	lsls	r3, r3, #12
 80028a4:	4901      	ldr	r1, [pc, #4]	@ (80028ac <HAL_RCC_OscConfig+0x288>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
 80028aa:	e025      	b.n	80028f8 <HAL_RCC_OscConfig+0x2d4>
 80028ac:	58024400 	.word	0x58024400
 80028b0:	4b9a      	ldr	r3, [pc, #616]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	4997      	ldr	r1, [pc, #604]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
 80028c4:	e018      	b.n	80028f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c6:	4b95      	ldr	r3, [pc, #596]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a94      	ldr	r2, [pc, #592]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7ff fb27 	bl	8001f24 <HAL_GetTick>
 80028d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028da:	f7ff fb23 	bl	8001f24 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e2ed      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028ec:	4b8b      	ldr	r3, [pc, #556]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a9 	beq.w	8002a58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002906:	4b85      	ldr	r3, [pc, #532]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800290e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002910:	4b82      	ldr	r3, [pc, #520]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002914:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d007      	beq.n	800292c <HAL_RCC_OscConfig+0x308>
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b18      	cmp	r3, #24
 8002920:	d13a      	bne.n	8002998 <HAL_RCC_OscConfig+0x374>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d135      	bne.n	8002998 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800292c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x320>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b80      	cmp	r3, #128	@ 0x80
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e2c1      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002944:	f7ff fb1e 	bl	8001f84 <HAL_GetREVID>
 8002948:	4603      	mov	r3, r0
 800294a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800294e:	4293      	cmp	r3, r2
 8002950:	d817      	bhi.n	8002982 <HAL_RCC_OscConfig+0x35e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	2b20      	cmp	r3, #32
 8002958:	d108      	bne.n	800296c <HAL_RCC_OscConfig+0x348>
 800295a:	4b70      	ldr	r3, [pc, #448]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002962:	4a6e      	ldr	r2, [pc, #440]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002964:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002968:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800296a:	e075      	b.n	8002a58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800296c:	4b6b      	ldr	r3, [pc, #428]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	069b      	lsls	r3, r3, #26
 800297a:	4968      	ldr	r1, [pc, #416]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002980:	e06a      	b.n	8002a58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002982:	4b66      	ldr	r3, [pc, #408]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	061b      	lsls	r3, r3, #24
 8002990:	4962      	ldr	r1, [pc, #392]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002996:	e05f      	b.n	8002a58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d042      	beq.n	8002a26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029a0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a5d      	ldr	r2, [pc, #372]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7ff faba 	bl	8001f24 <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029b4:	f7ff fab6 	bl	8001f24 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e280      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029c6:	4b55      	ldr	r3, [pc, #340]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029d2:	f7ff fad7 	bl	8001f84 <HAL_GetREVID>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029dc:	4293      	cmp	r3, r2
 80029de:	d817      	bhi.n	8002a10 <HAL_RCC_OscConfig+0x3ec>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d108      	bne.n	80029fa <HAL_RCC_OscConfig+0x3d6>
 80029e8:	4b4c      	ldr	r3, [pc, #304]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029f0:	4a4a      	ldr	r2, [pc, #296]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80029f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029f6:	6053      	str	r3, [r2, #4]
 80029f8:	e02e      	b.n	8002a58 <HAL_RCC_OscConfig+0x434>
 80029fa:	4b48      	ldr	r3, [pc, #288]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	069b      	lsls	r3, r3, #26
 8002a08:	4944      	ldr	r1, [pc, #272]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
 8002a0e:	e023      	b.n	8002a58 <HAL_RCC_OscConfig+0x434>
 8002a10:	4b42      	ldr	r3, [pc, #264]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	493f      	ldr	r1, [pc, #252]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60cb      	str	r3, [r1, #12]
 8002a24:	e018      	b.n	8002a58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a26:	4b3d      	ldr	r3, [pc, #244]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002a2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7ff fa77 	bl	8001f24 <HAL_GetTick>
 8002a36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a3a:	f7ff fa73 	bl	8001f24 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e23d      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a4c:	4b33      	ldr	r3, [pc, #204]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f0      	bne.n	8002a3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d036      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d019      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a70:	4a2a      	ldr	r2, [pc, #168]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7ff fa54 	bl	8001f24 <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7ff fa50 	bl	8001f24 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e21a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a92:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x45c>
 8002a9e:	e018      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7ff fa3a 	bl	8001f24 <HAL_GetTick>
 8002ab0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7ff fa36 	bl	8001f24 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e200      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d039      	beq.n	8002b52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a0c      	ldr	r2, [pc, #48]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002aec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002af0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002af2:	f7ff fa17 	bl	8001f24 <HAL_GetTick>
 8002af6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002afa:	f7ff fa13 	bl	8001f24 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1dd      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b0c:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x4d6>
 8002b18:	e01b      	b.n	8002b52 <HAL_RCC_OscConfig+0x52e>
 8002b1a:	bf00      	nop
 8002b1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b20:	4b9b      	ldr	r3, [pc, #620]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a9a      	ldr	r2, [pc, #616]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002b26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b2c:	f7ff f9fa 	bl	8001f24 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b34:	f7ff f9f6 	bl	8001f24 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1c0      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b46:	4b92      	ldr	r3, [pc, #584]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8081 	beq.w	8002c62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b60:	4b8c      	ldr	r3, [pc, #560]	@ (8002d94 <HAL_RCC_OscConfig+0x770>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a8b      	ldr	r2, [pc, #556]	@ (8002d94 <HAL_RCC_OscConfig+0x770>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b6c:	f7ff f9da 	bl	8001f24 <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b74:	f7ff f9d6 	bl	8001f24 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	@ 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1a0      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b86:	4b83      	ldr	r3, [pc, #524]	@ (8002d94 <HAL_RCC_OscConfig+0x770>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x584>
 8002b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba6:	e02d      	b.n	8002c04 <HAL_RCC_OscConfig+0x5e0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10c      	bne.n	8002bca <HAL_RCC_OscConfig+0x5a6>
 8002bb0:	4b77      	ldr	r3, [pc, #476]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb4:	4a76      	ldr	r2, [pc, #472]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bbc:	4b74      	ldr	r3, [pc, #464]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc0:	4a73      	ldr	r2, [pc, #460]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002bc2:	f023 0304 	bic.w	r3, r3, #4
 8002bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCC_OscConfig+0x5e0>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x5c8>
 8002bd2:	4b6f      	ldr	r3, [pc, #444]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bde:	4b6c      	ldr	r3, [pc, #432]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	4a6b      	ldr	r2, [pc, #428]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0x5e0>
 8002bec:	4b68      	ldr	r3, [pc, #416]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf0:	4a67      	ldr	r2, [pc, #412]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf8:	4b65      	ldr	r3, [pc, #404]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfc:	4a64      	ldr	r2, [pc, #400]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	f023 0304 	bic.w	r3, r3, #4
 8002c02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d015      	beq.n	8002c38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7ff f98a 	bl	8001f24 <HAL_GetTick>
 8002c10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7ff f986 	bl	8001f24 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e14e      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c2a:	4b59      	ldr	r3, [pc, #356]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ee      	beq.n	8002c14 <HAL_RCC_OscConfig+0x5f0>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7ff f974 	bl	8001f24 <HAL_GetTick>
 8002c3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7ff f970 	bl	8001f24 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e138      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c56:	4b4e      	ldr	r3, [pc, #312]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ee      	bne.n	8002c40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 812d 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c6c:	4b48      	ldr	r3, [pc, #288]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c74:	2b18      	cmp	r3, #24
 8002c76:	f000 80bd 	beq.w	8002df4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	f040 809e 	bne.w	8002dc0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c84:	4b42      	ldr	r3, [pc, #264]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a41      	ldr	r2, [pc, #260]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7ff f948 	bl	8001f24 <HAL_GetTick>
 8002c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7ff f944 	bl	8001f24 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e10e      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002caa:	4b39      	ldr	r3, [pc, #228]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb6:	4b36      	ldr	r3, [pc, #216]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cba:	4b37      	ldr	r3, [pc, #220]	@ (8002d98 <HAL_RCC_OscConfig+0x774>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	4931      	ldr	r1, [pc, #196]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	025b      	lsls	r3, r3, #9
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cea:	3b01      	subs	r3, #1
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	061b      	lsls	r3, r3, #24
 8002cfc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d00:	4923      	ldr	r1, [pc, #140]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d06:	4b22      	ldr	r3, [pc, #136]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0a:	4a21      	ldr	r2, [pc, #132]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d12:	4b1f      	ldr	r3, [pc, #124]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d16:	4b21      	ldr	r3, [pc, #132]	@ (8002d9c <HAL_RCC_OscConfig+0x778>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d1e:	00d2      	lsls	r2, r2, #3
 8002d20:	491b      	ldr	r1, [pc, #108]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d26:	4b1a      	ldr	r3, [pc, #104]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2a:	f023 020c 	bic.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	4917      	ldr	r1, [pc, #92]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d38:	4b15      	ldr	r3, [pc, #84]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	f023 0202 	bic.w	r2, r3, #2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d44:	4912      	ldr	r1, [pc, #72]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d4a:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	4a10      	ldr	r2, [pc, #64]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d56:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d62:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d66:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	4a07      	ldr	r2, [pc, #28]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7ff f8cd 	bl	8001f24 <HAL_GetTick>
 8002d8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d8c:	e011      	b.n	8002db2 <HAL_RCC_OscConfig+0x78e>
 8002d8e:	bf00      	nop
 8002d90:	58024400 	.word	0x58024400
 8002d94:	58024800 	.word	0x58024800
 8002d98:	fffffc0c 	.word	0xfffffc0c
 8002d9c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7ff f8c0 	bl	8001f24 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e08a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db2:	4b47      	ldr	r3, [pc, #284]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x77c>
 8002dbe:	e082      	b.n	8002ec6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc0:	4b43      	ldr	r3, [pc, #268]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a42      	ldr	r2, [pc, #264]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7ff f8aa 	bl	8001f24 <HAL_GetTick>
 8002dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7ff f8a6 	bl	8001f24 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e070      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002de6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x7b0>
 8002df2:	e068      	b.n	8002ec6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002df4:	4b36      	ldr	r3, [pc, #216]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dfa:	4b35      	ldr	r3, [pc, #212]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d031      	beq.n	8002e6c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 0203 	and.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d12a      	bne.n	8002e6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d122      	bne.n	8002e6c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d11a      	bne.n	8002e6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	0a5b      	lsrs	r3, r3, #9
 8002e3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e42:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d111      	bne.n	8002e6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d108      	bne.n	8002e6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	0e1b      	lsrs	r3, r3, #24
 8002e5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e02b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e70:	4b17      	ldr	r3, [pc, #92]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e74:	08db      	lsrs	r3, r3, #3
 8002e76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e7a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d01f      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e86:	4b12      	ldr	r3, [pc, #72]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	4a11      	ldr	r2, [pc, #68]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e92:	f7ff f847 	bl	8001f24 <HAL_GetTick>
 8002e96:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e98:	bf00      	nop
 8002e9a:	f7ff f843 	bl	8001f24 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d0f9      	beq.n	8002e9a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_RCC_OscConfig+0x8b0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eb2:	00d2      	lsls	r2, r2, #3
 8002eb4:	4906      	ldr	r1, [pc, #24]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002eba:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	4a04      	ldr	r2, [pc, #16]	@ (8002ed0 <HAL_RCC_OscConfig+0x8ac>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3730      	adds	r7, #48	@ 0x30
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	58024400 	.word	0x58024400
 8002ed4:	ffff0007 	.word	0xffff0007

08002ed8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e19c      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b8a      	ldr	r3, [pc, #552]	@ (8003118 <HAL_RCC_ClockConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d910      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b87      	ldr	r3, [pc, #540]	@ (8003118 <HAL_RCC_ClockConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 020f 	bic.w	r2, r3, #15
 8002f02:	4985      	ldr	r1, [pc, #532]	@ (8003118 <HAL_RCC_ClockConfig+0x240>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b83      	ldr	r3, [pc, #524]	@ (8003118 <HAL_RCC_ClockConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e184      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d010      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	4b7b      	ldr	r3, [pc, #492]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d908      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f38:	4b78      	ldr	r3, [pc, #480]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	4975      	ldr	r1, [pc, #468]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d010      	beq.n	8002f78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	4b70      	ldr	r3, [pc, #448]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d908      	bls.n	8002f78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f66:	4b6d      	ldr	r3, [pc, #436]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	496a      	ldr	r1, [pc, #424]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	4b64      	ldr	r3, [pc, #400]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d908      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f94:	4b61      	ldr	r3, [pc, #388]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	495e      	ldr	r1, [pc, #376]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	4b59      	ldr	r3, [pc, #356]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d908      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fc2:	4b56      	ldr	r3, [pc, #344]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4953      	ldr	r1, [pc, #332]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	4b4d      	ldr	r3, [pc, #308]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d908      	bls.n	8003002 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b4a      	ldr	r3, [pc, #296]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f023 020f 	bic.w	r2, r3, #15
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4947      	ldr	r1, [pc, #284]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d055      	beq.n	80030ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800300e:	4b43      	ldr	r3, [pc, #268]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4940      	ldr	r1, [pc, #256]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 800301c:	4313      	orrs	r3, r2
 800301e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d107      	bne.n	8003038 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003028:	4b3c      	ldr	r3, [pc, #240]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d121      	bne.n	8003078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0f6      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d107      	bne.n	8003050 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003040:	4b36      	ldr	r3, [pc, #216]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d115      	bne.n	8003078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0ea      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003058:	4b30      	ldr	r3, [pc, #192]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0de      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003068:	4b2c      	ldr	r3, [pc, #176]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0d6      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003078:	4b28      	ldr	r3, [pc, #160]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4925      	ldr	r1, [pc, #148]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 8003086:	4313      	orrs	r3, r2
 8003088:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800308a:	f7fe ff4b 	bl	8001f24 <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003092:	f7fe ff47 	bl	8001f24 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0be      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a8:	4b1c      	ldr	r3, [pc, #112]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d1eb      	bne.n	8003092 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d010      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	4b14      	ldr	r3, [pc, #80]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d208      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d6:	4b11      	ldr	r3, [pc, #68]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f023 020f 	bic.w	r2, r3, #15
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	490e      	ldr	r1, [pc, #56]	@ (800311c <HAL_RCC_ClockConfig+0x244>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d214      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_RCC_ClockConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	4906      	ldr	r1, [pc, #24]	@ (8003118 <HAL_RCC_ClockConfig+0x240>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b04      	ldr	r3, [pc, #16]	@ (8003118 <HAL_RCC_ClockConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e086      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
 8003118:	52002000 	.word	0x52002000
 800311c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	4b3f      	ldr	r3, [pc, #252]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003138:	429a      	cmp	r2, r3
 800313a:	d208      	bcs.n	800314e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800313c:	4b3c      	ldr	r3, [pc, #240]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	4939      	ldr	r1, [pc, #228]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 800314a:	4313      	orrs	r3, r2
 800314c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	4b34      	ldr	r3, [pc, #208]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003166:	429a      	cmp	r2, r3
 8003168:	d208      	bcs.n	800317c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800316a:	4b31      	ldr	r3, [pc, #196]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	492e      	ldr	r1, [pc, #184]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003194:	429a      	cmp	r2, r3
 8003196:	d208      	bcs.n	80031aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003198:	4b25      	ldr	r3, [pc, #148]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4922      	ldr	r1, [pc, #136]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d010      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d208      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4917      	ldr	r1, [pc, #92]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031d8:	f000 f89e 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	4912      	ldr	r1, [pc, #72]	@ (8003234 <HAL_RCC_ClockConfig+0x35c>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
 80031f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003234 <HAL_RCC_ClockConfig+0x35c>)
 8003200:	5cd3      	ldrb	r3, [r2, r3]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
 800320c:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <HAL_RCC_ClockConfig+0x360>)
 800320e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003210:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <HAL_RCC_ClockConfig+0x364>)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003216:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <HAL_RCC_ClockConfig+0x368>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fcca 	bl	8001bb4 <HAL_InitTick>
 8003220:	4603      	mov	r3, r0
 8003222:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	58024400 	.word	0x58024400
 8003234:	08009828 	.word	0x08009828
 8003238:	24000004 	.word	0x24000004
 800323c:	24000000 	.word	0x24000000
 8003240:	24000008 	.word	0x24000008

08003244 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	@ 0x30
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d12a      	bne.n	80032ac <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003256:	4b2d      	ldr	r3, [pc, #180]	@ (800330c <HAL_RCC_MCOConfig+0xc8>)
 8003258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800325c:	4a2b      	ldr	r2, [pc, #172]	@ (800330c <HAL_RCC_MCOConfig+0xc8>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003266:	4b29      	ldr	r3, [pc, #164]	@ (800330c <HAL_RCC_MCOConfig+0xc8>)
 8003268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327e:	2303      	movs	r3, #3
 8003280:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003286:	2300      	movs	r3, #0
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	4619      	mov	r1, r3
 8003290:	481f      	ldr	r0, [pc, #124]	@ (8003310 <HAL_RCC_MCOConfig+0xcc>)
 8003292:	f7fe ff75 	bl	8002180 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <HAL_RCC_MCOConfig+0xc8>)
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	430b      	orrs	r3, r1
 80032a4:	4919      	ldr	r1, [pc, #100]	@ (800330c <HAL_RCC_MCOConfig+0xc8>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80032aa:	e02a      	b.n	8003302 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80032ac:	4b17      	ldr	r3, [pc, #92]	@ (800330c <HAL_RCC_MCOConfig+0xc8>)
 80032ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032b2:	4a16      	ldr	r2, [pc, #88]	@ (800330c <HAL_RCC_MCOConfig+0xc8>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032bc:	4b13      	ldr	r3, [pc, #76]	@ (800330c <HAL_RCC_MCOConfig+0xc8>)
 80032be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80032ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d4:	2303      	movs	r3, #3
 80032d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	4619      	mov	r1, r3
 80032e6:	480b      	ldr	r0, [pc, #44]	@ (8003314 <HAL_RCC_MCOConfig+0xd0>)
 80032e8:	f7fe ff4a 	bl	8002180 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80032ec:	4b07      	ldr	r3, [pc, #28]	@ (800330c <HAL_RCC_MCOConfig+0xc8>)
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	01d9      	lsls	r1, r3, #7
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	430b      	orrs	r3, r1
 80032fc:	4903      	ldr	r1, [pc, #12]	@ (800330c <HAL_RCC_MCOConfig+0xc8>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	610b      	str	r3, [r1, #16]
}
 8003302:	bf00      	nop
 8003304:	3730      	adds	r7, #48	@ 0x30
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	58024400 	.word	0x58024400
 8003310:	58020000 	.word	0x58020000
 8003314:	58020800 	.word	0x58020800

08003318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	b089      	sub	sp, #36	@ 0x24
 800331c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331e:	4bb3      	ldr	r3, [pc, #716]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003326:	2b18      	cmp	r3, #24
 8003328:	f200 8155 	bhi.w	80035d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800332c:	a201      	add	r2, pc, #4	@ (adr r2, 8003334 <HAL_RCC_GetSysClockFreq+0x1c>)
 800332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003332:	bf00      	nop
 8003334:	08003399 	.word	0x08003399
 8003338:	080035d7 	.word	0x080035d7
 800333c:	080035d7 	.word	0x080035d7
 8003340:	080035d7 	.word	0x080035d7
 8003344:	080035d7 	.word	0x080035d7
 8003348:	080035d7 	.word	0x080035d7
 800334c:	080035d7 	.word	0x080035d7
 8003350:	080035d7 	.word	0x080035d7
 8003354:	080033bf 	.word	0x080033bf
 8003358:	080035d7 	.word	0x080035d7
 800335c:	080035d7 	.word	0x080035d7
 8003360:	080035d7 	.word	0x080035d7
 8003364:	080035d7 	.word	0x080035d7
 8003368:	080035d7 	.word	0x080035d7
 800336c:	080035d7 	.word	0x080035d7
 8003370:	080035d7 	.word	0x080035d7
 8003374:	080033c5 	.word	0x080033c5
 8003378:	080035d7 	.word	0x080035d7
 800337c:	080035d7 	.word	0x080035d7
 8003380:	080035d7 	.word	0x080035d7
 8003384:	080035d7 	.word	0x080035d7
 8003388:	080035d7 	.word	0x080035d7
 800338c:	080035d7 	.word	0x080035d7
 8003390:	080035d7 	.word	0x080035d7
 8003394:	080033cb 	.word	0x080033cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003398:	4b94      	ldr	r3, [pc, #592]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d009      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033a4:	4b91      	ldr	r3, [pc, #580]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	4a90      	ldr	r2, [pc, #576]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
 80033b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80033b6:	e111      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033b8:	4b8d      	ldr	r3, [pc, #564]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ba:	61bb      	str	r3, [r7, #24]
      break;
 80033bc:	e10e      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80033be:	4b8d      	ldr	r3, [pc, #564]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033c0:	61bb      	str	r3, [r7, #24]
      break;
 80033c2:	e10b      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80033c4:	4b8c      	ldr	r3, [pc, #560]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033c6:	61bb      	str	r3, [r7, #24]
      break;
 80033c8:	e108      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033ca:	4b88      	ldr	r3, [pc, #544]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033d4:	4b85      	ldr	r3, [pc, #532]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033e0:	4b82      	ldr	r3, [pc, #520]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80033ea:	4b80      	ldr	r3, [pc, #512]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ee:	08db      	lsrs	r3, r3, #3
 80033f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80e1 	beq.w	80035d0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b02      	cmp	r3, #2
 8003412:	f000 8083 	beq.w	800351c <HAL_RCC_GetSysClockFreq+0x204>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b02      	cmp	r3, #2
 800341a:	f200 80a1 	bhi.w	8003560 <HAL_RCC_GetSysClockFreq+0x248>
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x114>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d056      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800342a:	e099      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800342c:	4b6f      	ldr	r3, [pc, #444]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d02d      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003438:	4b6c      	ldr	r3, [pc, #432]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	4a6b      	ldr	r2, [pc, #428]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
 8003448:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003462:	4b62      	ldr	r3, [pc, #392]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003472:	ed97 6a02 	vldr	s12, [r7, #8]
 8003476:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80035fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800347a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800347e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003492:	e087      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003600 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a6:	4b51      	ldr	r3, [pc, #324]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80035fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80034be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034d6:	e065      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003604 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ea:	4b40      	ldr	r3, [pc, #256]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80034fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80035fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800350e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800351a:	e043      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003526:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003608 <HAL_RCC_GetSysClockFreq+0x2f0>
 800352a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800352e:	4b2f      	ldr	r3, [pc, #188]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800353e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003542:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80035fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800354a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800354e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800355e:	e021      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003604 <HAL_RCC_GetSysClockFreq+0x2ec>
 800356e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003572:	4b1e      	ldr	r3, [pc, #120]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003582:	ed97 6a02 	vldr	s12, [r7, #8]
 8003586:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80035fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800358a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800358e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800359a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035a4:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	0a5b      	lsrs	r3, r3, #9
 80035aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035ae:	3301      	adds	r3, #1
 80035b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	ee07 3a90 	vmov	s15, r3
 80035b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80035c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035c8:	ee17 3a90 	vmov	r3, s15
 80035cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80035ce:	e005      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
      break;
 80035d4:	e002      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80035d6:	4b07      	ldr	r3, [pc, #28]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035d8:	61bb      	str	r3, [r7, #24]
      break;
 80035da:	bf00      	nop
  }

  return sysclockfreq;
 80035dc:	69bb      	ldr	r3, [r7, #24]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	@ 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	58024400 	.word	0x58024400
 80035f0:	03d09000 	.word	0x03d09000
 80035f4:	003d0900 	.word	0x003d0900
 80035f8:	017d7840 	.word	0x017d7840
 80035fc:	46000000 	.word	0x46000000
 8003600:	4c742400 	.word	0x4c742400
 8003604:	4a742400 	.word	0x4a742400
 8003608:	4bbebc20 	.word	0x4bbebc20

0800360c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003612:	f7ff fe81 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 8003616:	4602      	mov	r2, r0
 8003618:	4b10      	ldr	r3, [pc, #64]	@ (800365c <HAL_RCC_GetHCLKFreq+0x50>)
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	490f      	ldr	r1, [pc, #60]	@ (8003660 <HAL_RCC_GetHCLKFreq+0x54>)
 8003624:	5ccb      	ldrb	r3, [r1, r3]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	fa22 f303 	lsr.w	r3, r2, r3
 800362e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003630:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <HAL_RCC_GetHCLKFreq+0x50>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	4a09      	ldr	r2, [pc, #36]	@ (8003660 <HAL_RCC_GetHCLKFreq+0x54>)
 800363a:	5cd3      	ldrb	r3, [r2, r3]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	4a07      	ldr	r2, [pc, #28]	@ (8003664 <HAL_RCC_GetHCLKFreq+0x58>)
 8003648:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800364a:	4a07      	ldr	r2, [pc, #28]	@ (8003668 <HAL_RCC_GetHCLKFreq+0x5c>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <HAL_RCC_GetHCLKFreq+0x58>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	58024400 	.word	0x58024400
 8003660:	08009828 	.word	0x08009828
 8003664:	24000004 	.word	0x24000004
 8003668:	24000000 	.word	0x24000000

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003670:	f7ff ffcc 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4904      	ldr	r1, [pc, #16]	@ (8003694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	58024400 	.word	0x58024400
 8003694:	08009828 	.word	0x08009828

08003698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800369c:	f7ff ffb6 	bl	800360c <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4904      	ldr	r1, [pc, #16]	@ (80036c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	58024400 	.word	0x58024400
 80036c0:	08009828 	.word	0x08009828

080036c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	223f      	movs	r2, #63	@ 0x3f
 80036d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <HAL_RCC_GetClockConfig+0x7c>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f003 0207 	and.w	r2, r3, #7
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80036e0:	4b17      	ldr	r3, [pc, #92]	@ (8003740 <HAL_RCC_GetClockConfig+0x7c>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80036ec:	4b14      	ldr	r3, [pc, #80]	@ (8003740 <HAL_RCC_GetClockConfig+0x7c>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f003 020f 	and.w	r2, r3, #15
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80036f8:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <HAL_RCC_GetClockConfig+0x7c>)
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003704:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <HAL_RCC_GetClockConfig+0x7c>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <HAL_RCC_GetClockConfig+0x7c>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800371c:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <HAL_RCC_GetClockConfig+0x7c>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <HAL_RCC_GetClockConfig+0x80>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	601a      	str	r2, [r3, #0]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	58024400 	.word	0x58024400
 8003744:	52002000 	.word	0x52002000

08003748 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800374c:	b0cc      	sub	sp, #304	@ 0x130
 800374e:	af00      	add	r7, sp, #0
 8003750:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003754:	2300      	movs	r3, #0
 8003756:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800375a:	2300      	movs	r3, #0
 800375c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003760:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800376c:	2500      	movs	r5, #0
 800376e:	ea54 0305 	orrs.w	r3, r4, r5
 8003772:	d049      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003774:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800377a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800377e:	d02f      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003780:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003784:	d828      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003786:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800378a:	d01a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800378c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003790:	d822      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800379a:	d007      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800379c:	e01c      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379e:	4bb8      	ldr	r3, [pc, #736]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a2:	4ab7      	ldr	r2, [pc, #732]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037aa:	e01a      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037b0:	3308      	adds	r3, #8
 80037b2:	2102      	movs	r1, #2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 fccf 	bl	8005158 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037c0:	e00f      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037c6:	3328      	adds	r3, #40	@ 0x28
 80037c8:	2102      	movs	r1, #2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fd76 	bl	80052bc <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037d6:	e004      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80037de:	e000      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80037e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037ea:	4ba5      	ldr	r3, [pc, #660]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f8:	4aa1      	ldr	r2, [pc, #644]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037fa:	430b      	orrs	r3, r1
 80037fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80037fe:	e003      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003800:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003804:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003808:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003814:	f04f 0900 	mov.w	r9, #0
 8003818:	ea58 0309 	orrs.w	r3, r8, r9
 800381c:	d047      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800381e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003824:	2b04      	cmp	r3, #4
 8003826:	d82a      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003828:	a201      	add	r2, pc, #4	@ (adr r2, 8003830 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003845 	.word	0x08003845
 8003834:	08003853 	.word	0x08003853
 8003838:	08003869 	.word	0x08003869
 800383c:	08003887 	.word	0x08003887
 8003840:	08003887 	.word	0x08003887
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003844:	4b8e      	ldr	r3, [pc, #568]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	4a8d      	ldr	r2, [pc, #564]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800384a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800384e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003850:	e01a      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003856:	3308      	adds	r3, #8
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f001 fc7c 	bl	8005158 <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003866:	e00f      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003868:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800386c:	3328      	adds	r3, #40	@ 0x28
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fd23 	bl	80052bc <RCCEx_PLL3_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800387c:	e004      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003884:	e000      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003888:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003890:	4b7b      	ldr	r3, [pc, #492]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003894:	f023 0107 	bic.w	r1, r3, #7
 8003898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800389c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389e:	4a78      	ldr	r2, [pc, #480]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80038a4:	e003      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80038ba:	f04f 0b00 	mov.w	fp, #0
 80038be:	ea5a 030b 	orrs.w	r3, sl, fp
 80038c2:	d04c      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80038c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ce:	d030      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80038d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d4:	d829      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038d8:	d02d      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80038da:	2bc0      	cmp	r3, #192	@ 0xc0
 80038dc:	d825      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038de:	2b80      	cmp	r3, #128	@ 0x80
 80038e0:	d018      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038e2:	2b80      	cmp	r3, #128	@ 0x80
 80038e4:	d821      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80038ea:	2b40      	cmp	r3, #64	@ 0x40
 80038ec:	d007      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80038ee:	e01c      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f0:	4b63      	ldr	r3, [pc, #396]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	4a62      	ldr	r2, [pc, #392]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038fc:	e01c      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003902:	3308      	adds	r3, #8
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f001 fc26 	bl	8005158 <RCCEx_PLL2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003912:	e011      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003914:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003918:	3328      	adds	r3, #40	@ 0x28
 800391a:	2100      	movs	r1, #0
 800391c:	4618      	mov	r0, r3
 800391e:	f001 fccd 	bl	80052bc <RCCEx_PLL3_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003928:	e006      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003930:	e002      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003938:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003940:	4b4f      	ldr	r3, [pc, #316]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003944:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003948:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800394c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394e:	4a4c      	ldr	r2, [pc, #304]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003950:	430b      	orrs	r3, r1
 8003952:	6513      	str	r3, [r2, #80]	@ 0x50
 8003954:	e003      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003956:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800395a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800395e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800396a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003974:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003978:	460b      	mov	r3, r1
 800397a:	4313      	orrs	r3, r2
 800397c:	d053      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800397e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003982:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003986:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800398a:	d035      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800398c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003990:	d82e      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003992:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003996:	d031      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003998:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800399c:	d828      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800399e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039a2:	d01a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80039a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039a8:	d822      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80039ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039b2:	d007      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80039b4:	e01c      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b6:	4b32      	ldr	r3, [pc, #200]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	4a31      	ldr	r2, [pc, #196]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039c2:	e01c      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039c8:	3308      	adds	r3, #8
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 fbc3 	bl	8005158 <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039d8:	e011      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039de:	3328      	adds	r3, #40	@ 0x28
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 fc6a 	bl	80052bc <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039ee:	e006      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039f6:	e002      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10b      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a06:	4b1e      	ldr	r3, [pc, #120]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a16:	4a1a      	ldr	r2, [pc, #104]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a1c:	e003      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003a3c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003a40:	460b      	mov	r3, r1
 8003a42:	4313      	orrs	r3, r2
 8003a44:	d056      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a52:	d038      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a58:	d831      	bhi.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a5e:	d034      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a64:	d82b      	bhi.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a6a:	d01d      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a70:	d825      	bhi.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a7c:	e01f      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a7e:	bf00      	nop
 8003a80:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a84:	4ba2      	ldr	r3, [pc, #648]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	4aa1      	ldr	r2, [pc, #644]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a90:	e01c      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a96:	3308      	adds	r3, #8
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 fb5c 	bl	8005158 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003aa6:	e011      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aac:	3328      	adds	r3, #40	@ 0x28
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 fc03 	bl	80052bc <RCCEx_PLL3_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ac4:	e002      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003acc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ae0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ae4:	4a8a      	ldr	r2, [pc, #552]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aea:	e003      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003af0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003af4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b0a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	d03a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b1a:	2b30      	cmp	r3, #48	@ 0x30
 8003b1c:	d01f      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b1e:	2b30      	cmp	r3, #48	@ 0x30
 8003b20:	d819      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d00c      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d815      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d019      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b2e:	2b10      	cmp	r3, #16
 8003b30:	d111      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b32:	4b77      	ldr	r3, [pc, #476]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	4a76      	ldr	r2, [pc, #472]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b3e:	e011      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b44:	3308      	adds	r3, #8
 8003b46:	2102      	movs	r1, #2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 fb05 	bl	8005158 <RCCEx_PLL2_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b5c:	e002      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b5e:	bf00      	nop
 8003b60:	e000      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b6c:	4b68      	ldr	r3, [pc, #416]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7a:	4a65      	ldr	r2, [pc, #404]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003b96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003ba0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d051      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bb4:	d035      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003bb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bba:	d82e      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bc0:	d031      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003bc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bc6:	d828      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bcc:	d01a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bd2:	d822      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bdc:	d007      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003bde:	e01c      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be0:	4b4b      	ldr	r3, [pc, #300]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	4a4a      	ldr	r2, [pc, #296]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bec:	e01c      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 faae 	bl	8005158 <RCCEx_PLL2_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c02:	e011      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c08:	3328      	adds	r3, #40	@ 0x28
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 fb55 	bl	80052bc <RCCEx_PLL3_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c18:	e006      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003c20:	e002      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c30:	4b37      	ldr	r3, [pc, #220]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c3e:	4a34      	ldr	r2, [pc, #208]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c44:	e003      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003c5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	d056      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c78:	d033      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c7e:	d82c      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c84:	d02f      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c8a:	d826      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c90:	d02b      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c96:	d820      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c9c:	d012      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ca2:	d81a      	bhi.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d022      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cac:	d115      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 fa4e 	bl	8005158 <RCCEx_PLL2_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cc2:	e015      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cc8:	3328      	adds	r3, #40	@ 0x28
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 faf5 	bl	80052bc <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ce2:	bf00      	nop
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d06:	4a02      	ldr	r2, [pc, #8]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d0e:	bf00      	nop
 8003d10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d32:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d36:	460b      	mov	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	d055      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d48:	d033      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d4e:	d82c      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d54:	d02f      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d5a:	d826      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d60:	d02b      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d66:	d820      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d6c:	d012      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d72:	d81a      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d022      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d7c:	d115      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d82:	3308      	adds	r3, #8
 8003d84:	2101      	movs	r1, #1
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 f9e6 	bl	8005158 <RCCEx_PLL2_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d92:	e015      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d98:	3328      	adds	r3, #40	@ 0x28
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 fa8d 	bl	80052bc <RCCEx_PLL3_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003db0:	e006      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003db2:	bf00      	nop
 8003db4:	e004      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003db6:	bf00      	nop
 8003db8:	e002      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dc8:	4bb6      	ldr	r3, [pc, #728]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dcc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003dd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dd8:	4ab2      	ldr	r2, [pc, #712]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dde:	e003      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003de4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dfe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	d02a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003e08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d011      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e16:	d10a      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	2101      	movs	r1, #1
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 f999 	bl	8005158 <RCCEx_PLL2_Config>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003e2c:	e004      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e34:	e000      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003e40:	4b98      	ldr	r3, [pc, #608]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e44:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003e48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4e:	4a95      	ldr	r2, [pc, #596]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e74:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	d037      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e88:	d00e      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e8e:	d816      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d018      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e98:	d111      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9a:	4b82      	ldr	r3, [pc, #520]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9e:	4a81      	ldr	r2, [pc, #516]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ea6:	e00f      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eac:	3308      	adds	r3, #8
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 f951 	bl	8005158 <RCCEx_PLL2_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ebc:	e004      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ed0:	4b74      	ldr	r3, [pc, #464]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ede:	4a71      	ldr	r2, [pc, #452]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ee4:	e003      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003eea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003eee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003efa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f04:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	d03a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d81d      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003f18:	a201      	add	r2, pc, #4	@ (adr r2, 8003f20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1e:	bf00      	nop
 8003f20:	08003f5d 	.word	0x08003f5d
 8003f24:	08003f31 	.word	0x08003f31
 8003f28:	08003f3f 	.word	0x08003f3f
 8003f2c:	08003f5d 	.word	0x08003f5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f30:	4b5c      	ldr	r3, [pc, #368]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	4a5b      	ldr	r2, [pc, #364]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f3c:	e00f      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f42:	3308      	adds	r3, #8
 8003f44:	2102      	movs	r1, #2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f906 	bl	8005158 <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f66:	4b4f      	ldr	r3, [pc, #316]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6a:	f023 0103 	bic.w	r1, r3, #3
 8003f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f74:	4a4b      	ldr	r2, [pc, #300]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f76:	430b      	orrs	r3, r1
 8003f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f80:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f000 80a0 	beq.w	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa6:	4b40      	ldr	r3, [pc, #256]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3f      	ldr	r2, [pc, #252]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb2:	f7fd ffb7 	bl	8001f24 <HAL_GetTick>
 8003fb6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fba:	e00b      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbc:	f7fd ffb2 	bl	8001f24 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b64      	cmp	r3, #100	@ 0x64
 8003fca:	d903      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd4:	4b34      	ldr	r3, [pc, #208]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ed      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003fe0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d17a      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003fea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ff0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003ff4:	4053      	eors	r3, r2
 8003ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d015      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ffe:	4b29      	ldr	r3, [pc, #164]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004006:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800400a:	4b26      	ldr	r3, [pc, #152]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	4a25      	ldr	r2, [pc, #148]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004014:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004016:	4b23      	ldr	r3, [pc, #140]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	4a22      	ldr	r2, [pc, #136]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800401c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004020:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004022:	4a20      	ldr	r2, [pc, #128]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004024:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004028:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800402a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800402e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004036:	d118      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd ff74 	bl	8001f24 <HAL_GetTick>
 800403c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004040:	e00d      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fd ff6f 	bl	8001f24 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800404c:	1ad2      	subs	r2, r2, r3
 800404e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004052:	429a      	cmp	r2, r3
 8004054:	d903      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800405c:	e005      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800405e:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0eb      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800406a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800406e:	2b00      	cmp	r3, #0
 8004070:	d130      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004072:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004076:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800407a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004082:	d115      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004084:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800408c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004090:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004094:	091a      	lsrs	r2, r3, #4
 8004096:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004098:	4013      	ands	r3, r2
 800409a:	4a02      	ldr	r2, [pc, #8]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800409c:	430b      	orrs	r3, r1
 800409e:	6113      	str	r3, [r2, #16]
 80040a0:	e00c      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x974>
 80040a2:	bf00      	nop
 80040a4:	58024400 	.word	0x58024400
 80040a8:	58024800 	.word	0x58024800
 80040ac:	00ffffcf 	.word	0x00ffffcf
 80040b0:	4bd4      	ldr	r3, [pc, #848]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	4ad3      	ldr	r2, [pc, #844]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80040b6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040ba:	6113      	str	r3, [r2, #16]
 80040bc:	4bd1      	ldr	r3, [pc, #836]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80040be:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80040c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80040c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040cc:	4acd      	ldr	r2, [pc, #820]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80040ce:	430b      	orrs	r3, r1
 80040d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d2:	e008      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80040dc:	e003      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f002 0301 	and.w	r3, r2, #1
 80040f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004100:	460b      	mov	r3, r1
 8004102:	4313      	orrs	r3, r2
 8004104:	f000 808b 	beq.w	800421e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004110:	2b28      	cmp	r3, #40	@ 0x28
 8004112:	d86b      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004114:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	080041f5 	.word	0x080041f5
 8004120:	080041ed 	.word	0x080041ed
 8004124:	080041ed 	.word	0x080041ed
 8004128:	080041ed 	.word	0x080041ed
 800412c:	080041ed 	.word	0x080041ed
 8004130:	080041ed 	.word	0x080041ed
 8004134:	080041ed 	.word	0x080041ed
 8004138:	080041ed 	.word	0x080041ed
 800413c:	080041c1 	.word	0x080041c1
 8004140:	080041ed 	.word	0x080041ed
 8004144:	080041ed 	.word	0x080041ed
 8004148:	080041ed 	.word	0x080041ed
 800414c:	080041ed 	.word	0x080041ed
 8004150:	080041ed 	.word	0x080041ed
 8004154:	080041ed 	.word	0x080041ed
 8004158:	080041ed 	.word	0x080041ed
 800415c:	080041d7 	.word	0x080041d7
 8004160:	080041ed 	.word	0x080041ed
 8004164:	080041ed 	.word	0x080041ed
 8004168:	080041ed 	.word	0x080041ed
 800416c:	080041ed 	.word	0x080041ed
 8004170:	080041ed 	.word	0x080041ed
 8004174:	080041ed 	.word	0x080041ed
 8004178:	080041ed 	.word	0x080041ed
 800417c:	080041f5 	.word	0x080041f5
 8004180:	080041ed 	.word	0x080041ed
 8004184:	080041ed 	.word	0x080041ed
 8004188:	080041ed 	.word	0x080041ed
 800418c:	080041ed 	.word	0x080041ed
 8004190:	080041ed 	.word	0x080041ed
 8004194:	080041ed 	.word	0x080041ed
 8004198:	080041ed 	.word	0x080041ed
 800419c:	080041f5 	.word	0x080041f5
 80041a0:	080041ed 	.word	0x080041ed
 80041a4:	080041ed 	.word	0x080041ed
 80041a8:	080041ed 	.word	0x080041ed
 80041ac:	080041ed 	.word	0x080041ed
 80041b0:	080041ed 	.word	0x080041ed
 80041b4:	080041ed 	.word	0x080041ed
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	080041f5 	.word	0x080041f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041c4:	3308      	adds	r3, #8
 80041c6:	2101      	movs	r1, #1
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 ffc5 	bl	8005158 <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041d4:	e00f      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041da:	3328      	adds	r3, #40	@ 0x28
 80041dc:	2101      	movs	r1, #1
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 f86c 	bl	80052bc <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10b      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041fe:	4b81      	ldr	r3, [pc, #516]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004202:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004206:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800420e:	4a7d      	ldr	r2, [pc, #500]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6553      	str	r3, [r2, #84]	@ 0x54
 8004214:	e003      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004216:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800421a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800421e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	f002 0302 	and.w	r3, r2, #2
 800422a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800422e:	2300      	movs	r3, #0
 8004230:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004234:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004238:	460b      	mov	r3, r1
 800423a:	4313      	orrs	r3, r2
 800423c:	d042      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800423e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004244:	2b05      	cmp	r3, #5
 8004246:	d825      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004248:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	0800429d 	.word	0x0800429d
 8004254:	08004269 	.word	0x08004269
 8004258:	0800427f 	.word	0x0800427f
 800425c:	0800429d 	.word	0x0800429d
 8004260:	0800429d 	.word	0x0800429d
 8004264:	0800429d 	.word	0x0800429d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800426c:	3308      	adds	r3, #8
 800426e:	2101      	movs	r1, #1
 8004270:	4618      	mov	r0, r3
 8004272:	f000 ff71 	bl	8005158 <RCCEx_PLL2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800427c:	e00f      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800427e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004282:	3328      	adds	r3, #40	@ 0x28
 8004284:	2101      	movs	r1, #1
 8004286:	4618      	mov	r0, r3
 8004288:	f001 f818 	bl	80052bc <RCCEx_PLL3_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004292:	e004      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800429a:	e000      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 800429c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042a6:	4b57      	ldr	r3, [pc, #348]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	f023 0107 	bic.w	r1, r3, #7
 80042ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042b4:	4a53      	ldr	r2, [pc, #332]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80042b6:	430b      	orrs	r3, r1
 80042b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80042ba:	e003      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f002 0304 	and.w	r3, r2, #4
 80042d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042de:	460b      	mov	r3, r1
 80042e0:	4313      	orrs	r3, r2
 80042e2:	d044      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d825      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80042f0:	a201      	add	r2, pc, #4	@ (adr r2, 80042f8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004345 	.word	0x08004345
 80042fc:	08004311 	.word	0x08004311
 8004300:	08004327 	.word	0x08004327
 8004304:	08004345 	.word	0x08004345
 8004308:	08004345 	.word	0x08004345
 800430c:	08004345 	.word	0x08004345
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004314:	3308      	adds	r3, #8
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f000 ff1d 	bl	8005158 <RCCEx_PLL2_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004324:	e00f      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004326:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800432a:	3328      	adds	r3, #40	@ 0x28
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f000 ffc4 	bl	80052bc <RCCEx_PLL3_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800433a:	e004      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004342:	e000      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004346:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800434e:	4b2d      	ldr	r3, [pc, #180]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	f023 0107 	bic.w	r1, r3, #7
 8004356:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800435a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800435e:	4a29      	ldr	r2, [pc, #164]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004360:	430b      	orrs	r3, r1
 8004362:	6593      	str	r3, [r2, #88]	@ 0x58
 8004364:	e003      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004366:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800436a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800436e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f002 0320 	and.w	r3, r2, #32
 800437a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004388:	460b      	mov	r3, r1
 800438a:	4313      	orrs	r3, r2
 800438c:	d057      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800438e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800439a:	d035      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800439c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043a0:	d82c      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a6:	d031      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ac:	d826      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80043ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043b2:	d02d      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80043b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043b8:	d820      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80043ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043be:	d012      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80043c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c4:	d81a      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d024      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80043ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ce:	d115      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043d4:	3308      	adds	r3, #8
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 febd 	bl	8005158 <RCCEx_PLL2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043e4:	e017      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043ea:	3328      	adds	r3, #40	@ 0x28
 80043ec:	2102      	movs	r1, #2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 ff64 	bl	80052bc <RCCEx_PLL3_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043fa:	e00c      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004402:	e008      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004404:	58024400 	.word	0x58024400
        break;
 8004408:	bf00      	nop
 800440a:	e004      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800440c:	bf00      	nop
 800440e:	e002      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004410:	bf00      	nop
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004416:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800441e:	4bc2      	ldr	r3, [pc, #776]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800442a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442e:	4abe      	ldr	r2, [pc, #760]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004430:	430b      	orrs	r3, r1
 8004432:	6553      	str	r3, [r2, #84]	@ 0x54
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004436:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800443a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800443e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800444a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800444e:	2300      	movs	r3, #0
 8004450:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004454:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004458:	460b      	mov	r3, r1
 800445a:	4313      	orrs	r3, r2
 800445c:	d055      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800445e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004462:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004466:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800446a:	d033      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800446c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004470:	d82c      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004476:	d02f      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447c:	d826      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800447e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004482:	d02b      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004484:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004488:	d820      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800448a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800448e:	d012      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004494:	d81a      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d022      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d115      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044a4:	3308      	adds	r3, #8
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fe55 	bl	8005158 <RCCEx_PLL2_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044b4:	e015      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044ba:	3328      	adds	r3, #40	@ 0x28
 80044bc:	2102      	movs	r1, #2
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fefc 	bl	80052bc <RCCEx_PLL3_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044ca:	e00a      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80044d2:	e006      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80044d4:	bf00      	nop
 80044d6:	e004      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80044d8:	bf00      	nop
 80044da:	e002      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80044dc:	bf00      	nop
 80044de:	e000      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80044e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10b      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ea:	4b8f      	ldr	r3, [pc, #572]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80044f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044fa:	4a8b      	ldr	r2, [pc, #556]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004500:	e003      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004502:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004506:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800450a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004516:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800451a:	2300      	movs	r3, #0
 800451c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004520:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004524:	460b      	mov	r3, r1
 8004526:	4313      	orrs	r3, r2
 8004528:	d055      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800452a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800452e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004532:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004536:	d033      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004538:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800453c:	d82c      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004542:	d02f      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004548:	d826      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800454a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800454e:	d02b      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004550:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004554:	d820      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800455a:	d012      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800455c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004560:	d81a      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d022      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800456a:	d115      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800456c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004570:	3308      	adds	r3, #8
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fdef 	bl	8005158 <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004580:	e015      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004586:	3328      	adds	r3, #40	@ 0x28
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fe96 	bl	80052bc <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004596:	e00a      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800459e:	e006      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80045a0:	bf00      	nop
 80045a2:	e004      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80045a4:	bf00      	nop
 80045a6:	e002      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80045ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80045be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045c6:	4a58      	ldr	r2, [pc, #352]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80045cc:	e003      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f002 0308 	and.w	r3, r2, #8
 80045e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045ec:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045f0:	460b      	mov	r3, r1
 80045f2:	4313      	orrs	r3, r2
 80045f4:	d01e      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004602:	d10c      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004608:	3328      	adds	r3, #40	@ 0x28
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fe55 	bl	80052bc <RCCEx_PLL3_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800461e:	4b42      	ldr	r3, [pc, #264]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004622:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004626:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	4a3e      	ldr	r2, [pc, #248]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004630:	430b      	orrs	r3, r1
 8004632:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004634:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f002 0310 	and.w	r3, r2, #16
 8004640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800464a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800464e:	460b      	mov	r3, r1
 8004650:	4313      	orrs	r3, r2
 8004652:	d01e      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004654:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004658:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800465c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004660:	d10c      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004662:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004666:	3328      	adds	r3, #40	@ 0x28
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fe26 	bl	80052bc <RCCEx_PLL3_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800467c:	4b2a      	ldr	r3, [pc, #168]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800467e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004680:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004684:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004688:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800468c:	4a26      	ldr	r2, [pc, #152]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800468e:	430b      	orrs	r3, r1
 8004690:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800469e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80046ac:	460b      	mov	r3, r1
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d040      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80046b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80046ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046be:	d022      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80046c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046c4:	d81b      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80046ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ce:	d00b      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80046d0:	e015      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046d6:	3308      	adds	r3, #8
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fd3c 	bl	8005158 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046e6:	e00f      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046ec:	3328      	adds	r3, #40	@ 0x28
 80046ee:	2102      	movs	r1, #2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fde3 	bl	80052bc <RCCEx_PLL3_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046fc:	e004      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004704:	e000      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8004706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004708:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004710:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004714:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800471c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004720:	4a01      	ldr	r2, [pc, #4]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004722:	430b      	orrs	r3, r1
 8004724:	6593      	str	r3, [r2, #88]	@ 0x58
 8004726:	e005      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004730:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004734:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004740:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004742:	2300      	movs	r3, #0
 8004744:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004746:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800474a:	460b      	mov	r3, r1
 800474c:	4313      	orrs	r3, r2
 800474e:	d03b      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004750:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004758:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800475c:	d01f      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800475e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004762:	d818      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004768:	d003      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800476a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800476e:	d007      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004770:	e011      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004772:	4b64      	ldr	r3, [pc, #400]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	4a63      	ldr	r2, [pc, #396]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800477c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800477e:	e00f      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004780:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004784:	3328      	adds	r3, #40	@ 0x28
 8004786:	2101      	movs	r1, #1
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fd97 	bl	80052bc <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004794:	e004      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800479c:	e000      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800479e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10b      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047a8:	4b56      	ldr	r3, [pc, #344]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80047aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80047b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b8:	4a52      	ldr	r2, [pc, #328]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80047be:	e003      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80047d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80047d6:	2300      	movs	r3, #0
 80047d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80047da:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047de:	460b      	mov	r3, r1
 80047e0:	4313      	orrs	r3, r2
 80047e2:	d031      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80047ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f2:	d007      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80047f4:	e011      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f6:	4b43      	ldr	r3, [pc, #268]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	4a42      	ldr	r2, [pc, #264]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80047fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004802:	e00e      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004808:	3308      	adds	r3, #8
 800480a:	2102      	movs	r1, #2
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fca3 	bl	8005158 <RCCEx_PLL2_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004818:	e003      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004822:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10a      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800482a:	4b36      	ldr	r3, [pc, #216]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800482c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004832:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004838:	4a32      	ldr	r2, [pc, #200]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800483a:	430b      	orrs	r3, r1
 800483c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800483e:	e003      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004840:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004844:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004848:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004856:	2300      	movs	r3, #0
 8004858:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800485a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800485e:	460b      	mov	r3, r1
 8004860:	4313      	orrs	r3, r2
 8004862:	d00c      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004868:	3328      	adds	r3, #40	@ 0x28
 800486a:	2102      	movs	r1, #2
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fd25 	bl	80052bc <RCCEx_PLL3_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800487e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800488a:	663b      	str	r3, [r7, #96]	@ 0x60
 800488c:	2300      	movs	r3, #0
 800488e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004890:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004894:	460b      	mov	r3, r1
 8004896:	4313      	orrs	r3, r2
 8004898:	d03a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800489a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800489e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a6:	d018      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80048a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ac:	d811      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80048ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b2:	d014      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80048b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b8:	d80b      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d011      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80048be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c2:	d106      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80048ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048d0:	e008      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80048d8:	e004      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80048da:	bf00      	nop
 80048dc:	e002      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80048de:	bf00      	nop
 80048e0:	e000      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80048e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10d      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80048ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048fc:	4a01      	ldr	r2, [pc, #4]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80048fe:	430b      	orrs	r3, r1
 8004900:	6553      	str	r3, [r2, #84]	@ 0x54
 8004902:	e005      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8004904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004908:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800490c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800491c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800491e:	2300      	movs	r3, #0
 8004920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004922:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800492c:	4baa      	ldr	r3, [pc, #680]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800492e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004930:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004934:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800493a:	4aa7      	ldr	r2, [pc, #668]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800493c:	430b      	orrs	r3, r1
 800493e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800494c:	653b      	str	r3, [r7, #80]	@ 0x50
 800494e:	2300      	movs	r3, #0
 8004950:	657b      	str	r3, [r7, #84]	@ 0x54
 8004952:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004956:	460b      	mov	r3, r1
 8004958:	4313      	orrs	r3, r2
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800495c:	4b9e      	ldr	r3, [pc, #632]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004964:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004968:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800496c:	4a9a      	ldr	r2, [pc, #616]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800496e:	430b      	orrs	r3, r1
 8004970:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800497e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004980:	2300      	movs	r3, #0
 8004982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004984:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800498e:	4b92      	ldr	r3, [pc, #584]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004992:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800499a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499c:	4a8e      	ldr	r2, [pc, #568]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800499e:	430b      	orrs	r3, r1
 80049a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80049ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80049b0:	2300      	movs	r3, #0
 80049b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80049b8:	460b      	mov	r3, r1
 80049ba:	4313      	orrs	r3, r2
 80049bc:	d00e      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049be:	4b86      	ldr	r3, [pc, #536]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	4a85      	ldr	r2, [pc, #532]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80049c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049c8:	6113      	str	r3, [r2, #16]
 80049ca:	4b83      	ldr	r3, [pc, #524]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80049cc:	6919      	ldr	r1, [r3, #16]
 80049ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80049d6:	4a80      	ldr	r2, [pc, #512]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80049d8:	430b      	orrs	r3, r1
 80049da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80049e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049ea:	2300      	movs	r3, #0
 80049ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049f2:	460b      	mov	r3, r1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049f8:	4b77      	ldr	r3, [pc, #476]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80049fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a06:	4a74      	ldr	r2, [pc, #464]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a22:	460b      	mov	r3, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a28:	4b6b      	ldr	r3, [pc, #428]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a38:	4a67      	ldr	r2, [pc, #412]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	2100      	movs	r1, #0
 8004a48:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d011      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a5e:	3308      	adds	r3, #8
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fb78 	bl	8005158 <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004a6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	2100      	movs	r1, #0
 8004a88:	6239      	str	r1, [r7, #32]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d011      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fb58 	bl	8005158 <RCCEx_PLL2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004aae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004aba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	61b9      	str	r1, [r7, #24]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	d011      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ada:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ade:	3308      	adds	r3, #8
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fb38 	bl	8005158 <RCCEx_PLL2_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004aee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004afa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	2100      	movs	r1, #0
 8004b08:	6139      	str	r1, [r7, #16]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b14:	460b      	mov	r3, r1
 8004b16:	4313      	orrs	r3, r2
 8004b18:	d011      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b1e:	3328      	adds	r3, #40	@ 0x28
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fbca 	bl	80052bc <RCCEx_PLL3_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8004b2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	2100      	movs	r1, #0
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b54:	460b      	mov	r3, r1
 8004b56:	4313      	orrs	r3, r2
 8004b58:	d011      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b5e:	3328      	adds	r3, #40	@ 0x28
 8004b60:	2101      	movs	r1, #1
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fbaa 	bl	80052bc <RCCEx_PLL3_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004b6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	2100      	movs	r1, #0
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b94:	460b      	mov	r3, r1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	d011      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b9e:	3328      	adds	r3, #40	@ 0x28
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fb8a 	bl	80052bc <RCCEx_PLL3_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004bae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8004bbe:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd8:	58024400 	.word	0x58024400

08004bdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004be0:	f7fe fd14 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8004be4:	4602      	mov	r2, r0
 8004be6:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	4904      	ldr	r1, [pc, #16]	@ (8004c04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bf2:	5ccb      	ldrb	r3, [r1, r3]
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	58024400 	.word	0x58024400
 8004c04:	08009828 	.word	0x08009828

08004c08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b089      	sub	sp, #36	@ 0x24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c10:	4ba1      	ldr	r3, [pc, #644]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004c1a:	4b9f      	ldr	r3, [pc, #636]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1e:	0b1b      	lsrs	r3, r3, #12
 8004c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c26:	4b9c      	ldr	r3, [pc, #624]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c32:	4b99      	ldr	r3, [pc, #612]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c36:	08db      	lsrs	r3, r3, #3
 8004c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8111 	beq.w	8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	f000 8083 	beq.w	8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	f200 80a1 	bhi.w	8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d056      	beq.n	8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c72:	e099      	b.n	8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c74:	4b88      	ldr	r3, [pc, #544]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d02d      	beq.n	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c80:	4b85      	ldr	r3, [pc, #532]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	4a84      	ldr	r2, [pc, #528]	@ (8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004caa:	4b7b      	ldr	r3, [pc, #492]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cda:	e087      	b.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cee:	4b6a      	ldr	r3, [pc, #424]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1e:	e065      	b.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d32:	4b59      	ldr	r3, [pc, #356]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d62:	e043      	b.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d76:	4b48      	ldr	r3, [pc, #288]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da6:	e021      	b.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dba:	4b37      	ldr	r3, [pc, #220]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004dec:	4b2a      	ldr	r3, [pc, #168]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	0a5b      	lsrs	r3, r3, #9
 8004df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e12:	ee17 2a90 	vmov	r2, s15
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e24:	ee07 3a90 	vmov	s15, r3
 8004e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e40:	ee17 2a90 	vmov	r2, s15
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e48:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	0e1b      	lsrs	r3, r3, #24
 8004e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6e:	ee17 2a90 	vmov	r2, s15
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e76:	e008      	b.n	8004e8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	609a      	str	r2, [r3, #8]
}
 8004e8a:	bf00      	nop
 8004e8c:	3724      	adds	r7, #36	@ 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	03d09000 	.word	0x03d09000
 8004ea0:	46000000 	.word	0x46000000
 8004ea4:	4c742400 	.word	0x4c742400
 8004ea8:	4a742400 	.word	0x4a742400
 8004eac:	4bbebc20 	.word	0x4bbebc20

08004eb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b089      	sub	sp, #36	@ 0x24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004eb8:	4ba1      	ldr	r3, [pc, #644]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ec2:	4b9f      	ldr	r3, [pc, #636]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec6:	0d1b      	lsrs	r3, r3, #20
 8004ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ecc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ece:	4b9c      	ldr	r3, [pc, #624]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004eda:	4b99      	ldr	r3, [pc, #612]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	08db      	lsrs	r3, r3, #3
 8004ee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8111 	beq.w	8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	f000 8083 	beq.w	800500c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	f200 80a1 	bhi.w	8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d056      	beq.n	8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f1a:	e099      	b.n	8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f1c:	4b88      	ldr	r3, [pc, #544]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d02d      	beq.n	8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f28:	4b85      	ldr	r3, [pc, #532]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	4a84      	ldr	r2, [pc, #528]	@ (8005144 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
 8004f38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f52:	4b7b      	ldr	r3, [pc, #492]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f82:	e087      	b.n	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800514c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f96:	4b6a      	ldr	r3, [pc, #424]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004faa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc6:	e065      	b.n	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fda:	4b59      	ldr	r3, [pc, #356]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800500a:	e043      	b.n	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800501a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501e:	4b48      	ldr	r3, [pc, #288]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005032:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800504e:	e021      	b.n	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800505e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005062:	4b37      	ldr	r3, [pc, #220]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005072:	ed97 6a03 	vldr	s12, [r7, #12]
 8005076:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800507a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005092:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005094:	4b2a      	ldr	r3, [pc, #168]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005098:	0a5b      	lsrs	r3, r3, #9
 800509a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ba:	ee17 2a90 	vmov	r2, s15
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80050c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050cc:	ee07 3a90 	vmov	s15, r3
 80050d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80050e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e8:	ee17 2a90 	vmov	r2, s15
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050f0:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	0e1b      	lsrs	r3, r3, #24
 80050f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800510a:	edd7 6a07 	vldr	s13, [r7, #28]
 800510e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005116:	ee17 2a90 	vmov	r2, s15
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800511e:	e008      	b.n	8005132 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	609a      	str	r2, [r3, #8]
}
 8005132:	bf00      	nop
 8005134:	3724      	adds	r7, #36	@ 0x24
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	58024400 	.word	0x58024400
 8005144:	03d09000 	.word	0x03d09000
 8005148:	46000000 	.word	0x46000000
 800514c:	4c742400 	.word	0x4c742400
 8005150:	4a742400 	.word	0x4a742400
 8005154:	4bbebc20 	.word	0x4bbebc20

08005158 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005166:	4b53      	ldr	r3, [pc, #332]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b03      	cmp	r3, #3
 8005170:	d101      	bne.n	8005176 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e099      	b.n	80052aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005176:	4b4f      	ldr	r3, [pc, #316]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a4e      	ldr	r2, [pc, #312]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800517c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005182:	f7fc fecf 	bl	8001f24 <HAL_GetTick>
 8005186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005188:	e008      	b.n	800519c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800518a:	f7fc fecb 	bl	8001f24 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e086      	b.n	80052aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800519c:	4b45      	ldr	r3, [pc, #276]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051a8:	4b42      	ldr	r3, [pc, #264]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 80051aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	031b      	lsls	r3, r3, #12
 80051b6:	493f      	ldr	r1, [pc, #252]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	025b      	lsls	r3, r3, #9
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051ec:	4931      	ldr	r1, [pc, #196]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051f2:	4b30      	ldr	r3, [pc, #192]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	492d      	ldr	r1, [pc, #180]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005200:	4313      	orrs	r3, r2
 8005202:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005204:	4b2b      	ldr	r3, [pc, #172]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	f023 0220 	bic.w	r2, r3, #32
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	4928      	ldr	r1, [pc, #160]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005212:	4313      	orrs	r3, r2
 8005214:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005216:	4b27      	ldr	r3, [pc, #156]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	4a26      	ldr	r2, [pc, #152]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800521c:	f023 0310 	bic.w	r3, r3, #16
 8005220:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005222:	4b24      	ldr	r3, [pc, #144]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005226:	4b24      	ldr	r3, [pc, #144]	@ (80052b8 <RCCEx_PLL2_Config+0x160>)
 8005228:	4013      	ands	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	69d2      	ldr	r2, [r2, #28]
 800522e:	00d2      	lsls	r2, r2, #3
 8005230:	4920      	ldr	r1, [pc, #128]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005232:	4313      	orrs	r3, r2
 8005234:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005236:	4b1f      	ldr	r3, [pc, #124]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523a:	4a1e      	ldr	r2, [pc, #120]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800523c:	f043 0310 	orr.w	r3, r3, #16
 8005240:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005248:	4b1a      	ldr	r3, [pc, #104]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	4a19      	ldr	r2, [pc, #100]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800524e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005254:	e00f      	b.n	8005276 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d106      	bne.n	800526a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800525c:	4b15      	ldr	r3, [pc, #84]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	4a14      	ldr	r2, [pc, #80]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005266:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005268:	e005      	b.n	8005276 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800526a:	4b12      	ldr	r3, [pc, #72]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	4a11      	ldr	r2, [pc, #68]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005274:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005276:	4b0f      	ldr	r3, [pc, #60]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a0e      	ldr	r2, [pc, #56]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800527c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005282:	f7fc fe4f 	bl	8001f24 <HAL_GetTick>
 8005286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005288:	e008      	b.n	800529c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800528a:	f7fc fe4b 	bl	8001f24 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e006      	b.n	80052aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800529c:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0f0      	beq.n	800528a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	58024400 	.word	0x58024400
 80052b8:	ffff0007 	.word	0xffff0007

080052bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ca:	4b53      	ldr	r3, [pc, #332]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d101      	bne.n	80052da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e099      	b.n	800540e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052da:	4b4f      	ldr	r3, [pc, #316]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a4e      	ldr	r2, [pc, #312]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80052e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e6:	f7fc fe1d 	bl	8001f24 <HAL_GetTick>
 80052ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052ec:	e008      	b.n	8005300 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052ee:	f7fc fe19 	bl	8001f24 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e086      	b.n	800540e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005300:	4b45      	ldr	r3, [pc, #276]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f0      	bne.n	80052ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800530c:	4b42      	ldr	r3, [pc, #264]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 800530e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005310:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	051b      	lsls	r3, r3, #20
 800531a:	493f      	ldr	r1, [pc, #252]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	3b01      	subs	r3, #1
 8005326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	3b01      	subs	r3, #1
 8005330:	025b      	lsls	r3, r3, #9
 8005332:	b29b      	uxth	r3, r3
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	3b01      	subs	r3, #1
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	3b01      	subs	r3, #1
 800534a:	061b      	lsls	r3, r3, #24
 800534c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005350:	4931      	ldr	r1, [pc, #196]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005356:	4b30      	ldr	r3, [pc, #192]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	492d      	ldr	r1, [pc, #180]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005364:	4313      	orrs	r3, r2
 8005366:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005368:	4b2b      	ldr	r3, [pc, #172]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 800536a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	4928      	ldr	r1, [pc, #160]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005376:	4313      	orrs	r3, r2
 8005378:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800537a:	4b27      	ldr	r3, [pc, #156]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 800537c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537e:	4a26      	ldr	r2, [pc, #152]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005386:	4b24      	ldr	r3, [pc, #144]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800538a:	4b24      	ldr	r3, [pc, #144]	@ (800541c <RCCEx_PLL3_Config+0x160>)
 800538c:	4013      	ands	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	69d2      	ldr	r2, [r2, #28]
 8005392:	00d2      	lsls	r2, r2, #3
 8005394:	4920      	ldr	r1, [pc, #128]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005396:	4313      	orrs	r3, r2
 8005398:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800539a:	4b1f      	ldr	r3, [pc, #124]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	4a1e      	ldr	r2, [pc, #120]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d106      	bne.n	80053ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80053ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b0:	4a19      	ldr	r2, [pc, #100]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053b8:	e00f      	b.n	80053da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d106      	bne.n	80053ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053c0:	4b15      	ldr	r3, [pc, #84]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	4a14      	ldr	r2, [pc, #80]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053cc:	e005      	b.n	80053da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053ce:	4b12      	ldr	r3, [pc, #72]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d2:	4a11      	ldr	r2, [pc, #68]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053da:	4b0f      	ldr	r3, [pc, #60]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a0e      	ldr	r2, [pc, #56]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e6:	f7fc fd9d 	bl	8001f24 <HAL_GetTick>
 80053ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053ec:	e008      	b.n	8005400 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053ee:	f7fc fd99 	bl	8001f24 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e006      	b.n	800540e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005400:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	58024400 	.word	0x58024400
 800541c:	ffff0007 	.word	0xffff0007

08005420 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e10f      	b.n	8005652 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a87      	ldr	r2, [pc, #540]	@ (800565c <HAL_SPI_Init+0x23c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00f      	beq.n	8005462 <HAL_SPI_Init+0x42>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a86      	ldr	r2, [pc, #536]	@ (8005660 <HAL_SPI_Init+0x240>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00a      	beq.n	8005462 <HAL_SPI_Init+0x42>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a84      	ldr	r2, [pc, #528]	@ (8005664 <HAL_SPI_Init+0x244>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d005      	beq.n	8005462 <HAL_SPI_Init+0x42>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d901      	bls.n	8005462 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e0f7      	b.n	8005652 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fd08 	bl	8005e78 <SPI_GetPacketSize>
 8005468:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a7b      	ldr	r2, [pc, #492]	@ (800565c <HAL_SPI_Init+0x23c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00c      	beq.n	800548e <HAL_SPI_Init+0x6e>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a79      	ldr	r2, [pc, #484]	@ (8005660 <HAL_SPI_Init+0x240>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <HAL_SPI_Init+0x6e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a78      	ldr	r2, [pc, #480]	@ (8005664 <HAL_SPI_Init+0x244>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d002      	beq.n	800548e <HAL_SPI_Init+0x6e>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b08      	cmp	r3, #8
 800548c:	d811      	bhi.n	80054b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005492:	4a72      	ldr	r2, [pc, #456]	@ (800565c <HAL_SPI_Init+0x23c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a70      	ldr	r2, [pc, #448]	@ (8005660 <HAL_SPI_Init+0x240>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_SPI_Init+0x8c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a6f      	ldr	r2, [pc, #444]	@ (8005664 <HAL_SPI_Init+0x244>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d104      	bne.n	80054b6 <HAL_SPI_Init+0x96>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d901      	bls.n	80054b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e0cd      	b.n	8005652 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fc f988 	bl	80017e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80054f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054fc:	d119      	bne.n	8005532 <HAL_SPI_Init+0x112>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005506:	d103      	bne.n	8005510 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10c      	bne.n	8005532 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800551c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005520:	d107      	bne.n	8005532 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005530:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00f      	beq.n	800555e <HAL_SPI_Init+0x13e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2b06      	cmp	r3, #6
 8005544:	d90b      	bls.n	800555e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e007      	b.n	800556e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800556c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69da      	ldr	r2, [r3, #28]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	431a      	orrs	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	ea42 0103 	orr.w	r1, r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ce:	ea42 0103 	orr.w	r1, r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d113      	bne.n	800560e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800560c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0201 	bic.w	r2, r2, #1
 800561c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40013000 	.word	0x40013000
 8005660:	40003800 	.word	0x40003800
 8005664:	40003c00 	.word	0x40003c00

08005668 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08e      	sub	sp, #56	@ 0x38
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3320      	adds	r3, #32
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3330      	adds	r3, #48	@ 0x30
 8005684:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	b29b      	uxth	r3, r3
 800568e:	3301      	adds	r3, #1
 8005690:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005692:	f7fc fc47 	bl	8001f24 <HAL_GetTick>
 8005696:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005698:	887b      	ldrh	r3, [r7, #2]
 800569a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800569c:	887b      	ldrh	r3, [r7, #2]
 800569e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d001      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
 80056ae:	e310      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <HAL_SPI_TransmitReceive+0x5a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SPI_TransmitReceive+0x5a>
 80056bc:	887b      	ldrh	r3, [r7, #2]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e305      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x6c>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e2fe      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x66a>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2205      	movs	r2, #5
 80056e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	887a      	ldrh	r2, [r7, #2]
 80056f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	887a      	ldrh	r2, [r7, #2]
 80056fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	887a      	ldrh	r2, [r7, #2]
 800570c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	887a      	ldrh	r2, [r7, #2]
 8005714:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005732:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a70      	ldr	r2, [pc, #448]	@ (80058fc <HAL_SPI_TransmitReceive+0x294>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_SPI_TransmitReceive+0xea>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a6f      	ldr	r2, [pc, #444]	@ (8005900 <HAL_SPI_TransmitReceive+0x298>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_SPI_TransmitReceive+0xea>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a6d      	ldr	r2, [pc, #436]	@ (8005904 <HAL_SPI_TransmitReceive+0x29c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d102      	bne.n	8005758 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005752:	2310      	movs	r3, #16
 8005754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005756:	e001      	b.n	800575c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005758:	2308      	movs	r3, #8
 800575a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	4b69      	ldr	r3, [pc, #420]	@ (8005908 <HAL_SPI_TransmitReceive+0x2a0>)
 8005764:	4013      	ands	r3, r2
 8005766:	8879      	ldrh	r1, [r7, #2]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	430b      	orrs	r3, r1
 800576e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005788:	d107      	bne.n	800579a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005798:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	f240 80a2 	bls.w	80058e8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80057a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a6:	089b      	lsrs	r3, r3, #2
 80057a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80057aa:	e094      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d120      	bne.n	80057fc <HAL_SPI_TransmitReceive+0x194>
 80057ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01d      	beq.n	80057fc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80057c0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80057c2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80057c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d217      	bcs.n	80057fc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057dc:	1d1a      	adds	r2, r3, #4
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005804:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d065      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b01      	cmp	r3, #1
 8005816:	d118      	bne.n	800584a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005820:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005822:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005846:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005848:	e045      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800584a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800584c:	8bfb      	ldrh	r3, [r7, #30]
 800584e:	429a      	cmp	r2, r3
 8005850:	d21d      	bcs.n	800588e <HAL_SPI_TransmitReceive+0x226>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d018      	beq.n	800588e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005864:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005866:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800586c:	1d1a      	adds	r2, r3, #4
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800588a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800588c:	e023      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800588e:	f7fc fb49 	bl	8001f24 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800589a:	429a      	cmp	r2, r3
 800589c:	d803      	bhi.n	80058a6 <HAL_SPI_TransmitReceive+0x23e>
 800589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d102      	bne.n	80058ac <HAL_SPI_TransmitReceive+0x244>
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d114      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fa15 	bl	8005cdc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e1fd      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f47f af67 	bne.w	80057ac <HAL_SPI_TransmitReceive+0x144>
 80058de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f47f af63 	bne.w	80057ac <HAL_SPI_TransmitReceive+0x144>
 80058e6:	e1ce      	b.n	8005c86 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b07      	cmp	r3, #7
 80058ee:	f240 81c2 	bls.w	8005c76 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058f8:	e0c9      	b.n	8005a8e <HAL_SPI_TransmitReceive+0x426>
 80058fa:	bf00      	nop
 80058fc:	40013000 	.word	0x40013000
 8005900:	40003800 	.word	0x40003800
 8005904:	40003c00 	.word	0x40003c00
 8005908:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b02      	cmp	r3, #2
 8005918:	d11f      	bne.n	800595a <HAL_SPI_TransmitReceive+0x2f2>
 800591a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01c      	beq.n	800595a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005920:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005922:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005926:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005928:	429a      	cmp	r2, r3
 800592a:	d216      	bcs.n	800595a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005930:	881a      	ldrh	r2, [r3, #0]
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593a:	1c9a      	adds	r2, r3, #2
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005958:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005962:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8092 	beq.w	8005a8e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d118      	bne.n	80059aa <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	8812      	ldrh	r2, [r2, #0]
 8005980:	b292      	uxth	r2, r2
 8005982:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005988:	1c9a      	adds	r2, r3, #2
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80059a8:	e071      	b.n	8005a8e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80059aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80059ac:	8bfb      	ldrh	r3, [r7, #30]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d228      	bcs.n	8005a04 <HAL_SPI_TransmitReceive+0x39c>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d023      	beq.n	8005a04 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	8812      	ldrh	r2, [r2, #0]
 80059c4:	b292      	uxth	r2, r2
 80059c6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059cc:	1c9a      	adds	r2, r3, #2
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059d6:	6a3a      	ldr	r2, [r7, #32]
 80059d8:	8812      	ldrh	r2, [r2, #0]
 80059da:	b292      	uxth	r2, r2
 80059dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059e2:	1c9a      	adds	r2, r3, #2
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	3b02      	subs	r3, #2
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a00:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a02:	e044      	b.n	8005a8e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005a04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d11d      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x3de>
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d018      	beq.n	8005a46 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a18:	6a3a      	ldr	r2, [r7, #32]
 8005a1a:	8812      	ldrh	r2, [r2, #0]
 8005a1c:	b292      	uxth	r2, r2
 8005a1e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a24:	1c9a      	adds	r2, r3, #2
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a42:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005a44:	e023      	b.n	8005a8e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a46:	f7fc fa6d 	bl	8001f24 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d803      	bhi.n	8005a5e <HAL_SPI_TransmitReceive+0x3f6>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d102      	bne.n	8005a64 <HAL_SPI_TransmitReceive+0x3fc>
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d114      	bne.n	8005a8e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f939 	bl	8005cdc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e121      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f47f af3b 	bne.w	800590c <HAL_SPI_TransmitReceive+0x2a4>
 8005a96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f47f af37 	bne.w	800590c <HAL_SPI_TransmitReceive+0x2a4>
 8005a9e:	e0f2      	b.n	8005c86 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d121      	bne.n	8005af2 <HAL_SPI_TransmitReceive+0x48a>
 8005aae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01e      	beq.n	8005af2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005ab4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005ab6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d218      	bcs.n	8005af2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3320      	adds	r3, #32
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005af0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005afa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80ba 	beq.w	8005c76 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d11b      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b1c:	7812      	ldrb	r2, [r2, #0]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b44:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b46:	e096      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005b48:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b4a:	8bfb      	ldrh	r3, [r7, #30]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d24a      	bcs.n	8005be6 <HAL_SPI_TransmitReceive+0x57e>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d045      	beq.n	8005be6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b9e:	7812      	ldrb	r2, [r2, #0]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bba:	7812      	ldrb	r2, [r2, #0]
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b04      	subs	r3, #4
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005be2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005be4:	e047      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005be6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d820      	bhi.n	8005c2e <HAL_SPI_TransmitReceive+0x5c6>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01b      	beq.n	8005c2e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c02:	7812      	ldrb	r2, [r2, #0]
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c2c:	e023      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2e:	f7fc f979 	bl	8001f24 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d803      	bhi.n	8005c46 <HAL_SPI_TransmitReceive+0x5de>
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d102      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x5e4>
 8005c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d114      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f845 	bl	8005cdc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e02d      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f47f af11 	bne.w	8005aa0 <HAL_SPI_TransmitReceive+0x438>
 8005c7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f47f af0d 	bne.w	8005aa0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2108      	movs	r1, #8
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f8c3 	bl	8005e1c <SPI_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ca2:	f043 0220 	orr.w	r2, r3, #32
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f815 	bl	8005cdc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3730      	adds	r7, #48	@ 0x30
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop

08005cdc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0208 	orr.w	r2, r2, #8
 8005cfa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0210 	orr.w	r2, r2, #16
 8005d0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6919      	ldr	r1, [r3, #16]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4b3c      	ldr	r3, [pc, #240]	@ (8005e18 <SPI_CloseTransfer+0x13c>)
 8005d28:	400b      	ands	r3, r1
 8005d2a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005d3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d014      	beq.n	8005d72 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00f      	beq.n	8005d72 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0220 	orr.w	r2, r2, #32
 8005d70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d014      	beq.n	8005da8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00f      	beq.n	8005da8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d8e:	f043 0204 	orr.w	r2, r3, #4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005da6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00f      	beq.n	8005dd2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005db8:	f043 0201 	orr.w	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	699a      	ldr	r2, [r3, #24]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dd0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00f      	beq.n	8005dfc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005de2:	f043 0208 	orr.w	r2, r3, #8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dfa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	fffffc90 	.word	0xfffffc90

08005e1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005e2c:	e010      	b.n	8005e50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e2e:	f7fc f879 	bl	8001f24 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d803      	bhi.n	8005e46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d102      	bne.n	8005e4c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e00f      	b.n	8005e70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	bf0c      	ite	eq
 8005e60:	2301      	moveq	r3, #1
 8005e62:	2300      	movne	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d0df      	beq.n	8005e2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	3301      	adds	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	3307      	adds	r3, #7
 8005e96:	08db      	lsrs	r3, r3, #3
 8005e98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e049      	b.n	8005f54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7fb fd5b 	bl	8001990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f000 fb47 	bl	8006580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d001      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e054      	b.n	800601e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a26      	ldr	r2, [pc, #152]	@ (800602c <HAL_TIM_Base_Start_IT+0xd0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d022      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x80>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9e:	d01d      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x80>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a22      	ldr	r2, [pc, #136]	@ (8006030 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d018      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x80>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a21      	ldr	r2, [pc, #132]	@ (8006034 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x80>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8006038 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00e      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x80>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800603c <HAL_TIM_Base_Start_IT+0xe0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d009      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x80>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006040 <HAL_TIM_Base_Start_IT+0xe4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x80>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8006044 <HAL_TIM_Base_Start_IT+0xe8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d115      	bne.n	8006008 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	4b19      	ldr	r3, [pc, #100]	@ (8006048 <HAL_TIM_Base_Start_IT+0xec>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b06      	cmp	r3, #6
 8005fec:	d015      	beq.n	800601a <HAL_TIM_Base_Start_IT+0xbe>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff4:	d011      	beq.n	800601a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006006:	e008      	b.n	800601a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e000      	b.n	800601c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40010000 	.word	0x40010000
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40000c00 	.word	0x40000c00
 800603c:	40010400 	.word	0x40010400
 8006040:	40001800 	.word	0x40001800
 8006044:	40014000 	.word	0x40014000
 8006048:	00010007 	.word	0x00010007

0800604c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e049      	b.n	80060f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fb fc42 	bl	80018fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f000 fa78 	bl	8006580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d020      	beq.n	800615e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01b      	beq.n	800615e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f06f 0202 	mvn.w	r2, #2
 800612e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f9fd 	bl	8006544 <HAL_TIM_IC_CaptureCallback>
 800614a:	e005      	b.n	8006158 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f9ef 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fa00 	bl	8006558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01b      	beq.n	80061aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f06f 0204 	mvn.w	r2, #4
 800617a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f9d7 	bl	8006544 <HAL_TIM_IC_CaptureCallback>
 8006196:	e005      	b.n	80061a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f9c9 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9da 	bl	8006558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d020      	beq.n	80061f6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01b      	beq.n	80061f6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f06f 0208 	mvn.w	r2, #8
 80061c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2204      	movs	r2, #4
 80061cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f9b1 	bl	8006544 <HAL_TIM_IC_CaptureCallback>
 80061e2:	e005      	b.n	80061f0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f9a3 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9b4 	bl	8006558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d020      	beq.n	8006242 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01b      	beq.n	8006242 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f06f 0210 	mvn.w	r2, #16
 8006212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2208      	movs	r2, #8
 8006218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f98b 	bl	8006544 <HAL_TIM_IC_CaptureCallback>
 800622e:	e005      	b.n	800623c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f97d 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f98e 	bl	8006558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00c      	beq.n	8006266 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f06f 0201 	mvn.w	r2, #1
 800625e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7fb fa7f 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00c      	beq.n	8006294 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fe02 	bl	8006e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00c      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fdfa 	bl	8006eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00c      	beq.n	80062dc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f948 	bl	800656c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00c      	beq.n	8006300 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0220 	mvn.w	r2, #32
 80062f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fdc2 	bl	8006e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006322:	2302      	movs	r3, #2
 8006324:	e0ff      	b.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b14      	cmp	r3, #20
 8006332:	f200 80f0 	bhi.w	8006516 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006336:	a201      	add	r2, pc, #4	@ (adr r2, 800633c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	08006391 	.word	0x08006391
 8006340:	08006517 	.word	0x08006517
 8006344:	08006517 	.word	0x08006517
 8006348:	08006517 	.word	0x08006517
 800634c:	080063d1 	.word	0x080063d1
 8006350:	08006517 	.word	0x08006517
 8006354:	08006517 	.word	0x08006517
 8006358:	08006517 	.word	0x08006517
 800635c:	08006413 	.word	0x08006413
 8006360:	08006517 	.word	0x08006517
 8006364:	08006517 	.word	0x08006517
 8006368:	08006517 	.word	0x08006517
 800636c:	08006453 	.word	0x08006453
 8006370:	08006517 	.word	0x08006517
 8006374:	08006517 	.word	0x08006517
 8006378:	08006517 	.word	0x08006517
 800637c:	08006495 	.word	0x08006495
 8006380:	08006517 	.word	0x08006517
 8006384:	08006517 	.word	0x08006517
 8006388:	08006517 	.word	0x08006517
 800638c:	080064d5 	.word	0x080064d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 f992 	bl	80066c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0208 	orr.w	r2, r2, #8
 80063aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0204 	bic.w	r2, r2, #4
 80063ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6999      	ldr	r1, [r3, #24]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	619a      	str	r2, [r3, #24]
      break;
 80063ce:	e0a5      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fa02 	bl	80067e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	619a      	str	r2, [r3, #24]
      break;
 8006410:	e084      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fa6b 	bl	80068f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0208 	orr.w	r2, r2, #8
 800642c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0204 	bic.w	r2, r2, #4
 800643c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69d9      	ldr	r1, [r3, #28]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	61da      	str	r2, [r3, #28]
      break;
 8006450:	e064      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fad3 	bl	8006a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	021a      	lsls	r2, r3, #8
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	61da      	str	r2, [r3, #28]
      break;
 8006492:	e043      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fb1c 	bl	8006ad8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0208 	orr.w	r2, r2, #8
 80064ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0204 	bic.w	r2, r2, #4
 80064be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80064d2:	e023      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fb60 	bl	8006ba0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	021a      	lsls	r2, r3, #8
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006514:	e002      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	75fb      	strb	r3, [r7, #23]
      break;
 800651a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop

08006530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a43      	ldr	r2, [pc, #268]	@ (80066a0 <TIM_Base_SetConfig+0x120>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d013      	beq.n	80065c0 <TIM_Base_SetConfig+0x40>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659e:	d00f      	beq.n	80065c0 <TIM_Base_SetConfig+0x40>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a40      	ldr	r2, [pc, #256]	@ (80066a4 <TIM_Base_SetConfig+0x124>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00b      	beq.n	80065c0 <TIM_Base_SetConfig+0x40>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a3f      	ldr	r2, [pc, #252]	@ (80066a8 <TIM_Base_SetConfig+0x128>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d007      	beq.n	80065c0 <TIM_Base_SetConfig+0x40>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a3e      	ldr	r2, [pc, #248]	@ (80066ac <TIM_Base_SetConfig+0x12c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a3d      	ldr	r2, [pc, #244]	@ (80066b0 <TIM_Base_SetConfig+0x130>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d108      	bne.n	80065d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a32      	ldr	r2, [pc, #200]	@ (80066a0 <TIM_Base_SetConfig+0x120>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d01f      	beq.n	800661a <TIM_Base_SetConfig+0x9a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e0:	d01b      	beq.n	800661a <TIM_Base_SetConfig+0x9a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2f      	ldr	r2, [pc, #188]	@ (80066a4 <TIM_Base_SetConfig+0x124>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d017      	beq.n	800661a <TIM_Base_SetConfig+0x9a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a2e      	ldr	r2, [pc, #184]	@ (80066a8 <TIM_Base_SetConfig+0x128>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d013      	beq.n	800661a <TIM_Base_SetConfig+0x9a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2d      	ldr	r2, [pc, #180]	@ (80066ac <TIM_Base_SetConfig+0x12c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00f      	beq.n	800661a <TIM_Base_SetConfig+0x9a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2c      	ldr	r2, [pc, #176]	@ (80066b0 <TIM_Base_SetConfig+0x130>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00b      	beq.n	800661a <TIM_Base_SetConfig+0x9a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2b      	ldr	r2, [pc, #172]	@ (80066b4 <TIM_Base_SetConfig+0x134>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d007      	beq.n	800661a <TIM_Base_SetConfig+0x9a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2a      	ldr	r2, [pc, #168]	@ (80066b8 <TIM_Base_SetConfig+0x138>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d003      	beq.n	800661a <TIM_Base_SetConfig+0x9a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a29      	ldr	r2, [pc, #164]	@ (80066bc <TIM_Base_SetConfig+0x13c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d108      	bne.n	800662c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a14      	ldr	r2, [pc, #80]	@ (80066a0 <TIM_Base_SetConfig+0x120>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00f      	beq.n	8006672 <TIM_Base_SetConfig+0xf2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a16      	ldr	r2, [pc, #88]	@ (80066b0 <TIM_Base_SetConfig+0x130>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00b      	beq.n	8006672 <TIM_Base_SetConfig+0xf2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a15      	ldr	r2, [pc, #84]	@ (80066b4 <TIM_Base_SetConfig+0x134>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_Base_SetConfig+0xf2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a14      	ldr	r2, [pc, #80]	@ (80066b8 <TIM_Base_SetConfig+0x138>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_Base_SetConfig+0xf2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a13      	ldr	r2, [pc, #76]	@ (80066bc <TIM_Base_SetConfig+0x13c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d103      	bne.n	800667a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f043 0204 	orr.w	r2, r3, #4
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	601a      	str	r2, [r3, #0]
}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40010000 	.word	0x40010000
 80066a4:	40000400 	.word	0x40000400
 80066a8:	40000800 	.word	0x40000800
 80066ac:	40000c00 	.word	0x40000c00
 80066b0:	40010400 	.word	0x40010400
 80066b4:	40014000 	.word	0x40014000
 80066b8:	40014400 	.word	0x40014400
 80066bc:	40014800 	.word	0x40014800

080066c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f023 0201 	bic.w	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4b37      	ldr	r3, [pc, #220]	@ (80067c8 <TIM_OC1_SetConfig+0x108>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f023 0302 	bic.w	r3, r3, #2
 8006708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a2d      	ldr	r2, [pc, #180]	@ (80067cc <TIM_OC1_SetConfig+0x10c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00f      	beq.n	800673c <TIM_OC1_SetConfig+0x7c>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a2c      	ldr	r2, [pc, #176]	@ (80067d0 <TIM_OC1_SetConfig+0x110>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00b      	beq.n	800673c <TIM_OC1_SetConfig+0x7c>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a2b      	ldr	r2, [pc, #172]	@ (80067d4 <TIM_OC1_SetConfig+0x114>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d007      	beq.n	800673c <TIM_OC1_SetConfig+0x7c>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a2a      	ldr	r2, [pc, #168]	@ (80067d8 <TIM_OC1_SetConfig+0x118>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <TIM_OC1_SetConfig+0x7c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a29      	ldr	r2, [pc, #164]	@ (80067dc <TIM_OC1_SetConfig+0x11c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d10c      	bne.n	8006756 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f023 0308 	bic.w	r3, r3, #8
 8006742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 0304 	bic.w	r3, r3, #4
 8006754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a1c      	ldr	r2, [pc, #112]	@ (80067cc <TIM_OC1_SetConfig+0x10c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00f      	beq.n	800677e <TIM_OC1_SetConfig+0xbe>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a1b      	ldr	r2, [pc, #108]	@ (80067d0 <TIM_OC1_SetConfig+0x110>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00b      	beq.n	800677e <TIM_OC1_SetConfig+0xbe>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a1a      	ldr	r2, [pc, #104]	@ (80067d4 <TIM_OC1_SetConfig+0x114>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <TIM_OC1_SetConfig+0xbe>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a19      	ldr	r2, [pc, #100]	@ (80067d8 <TIM_OC1_SetConfig+0x118>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_OC1_SetConfig+0xbe>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <TIM_OC1_SetConfig+0x11c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d111      	bne.n	80067a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800678c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	621a      	str	r2, [r3, #32]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	fffeff8f 	.word	0xfffeff8f
 80067cc:	40010000 	.word	0x40010000
 80067d0:	40010400 	.word	0x40010400
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40014400 	.word	0x40014400
 80067dc:	40014800 	.word	0x40014800

080067e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	f023 0210 	bic.w	r2, r3, #16
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4b34      	ldr	r3, [pc, #208]	@ (80068dc <TIM_OC2_SetConfig+0xfc>)
 800680c:	4013      	ands	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f023 0320 	bic.w	r3, r3, #32
 800682a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a29      	ldr	r2, [pc, #164]	@ (80068e0 <TIM_OC2_SetConfig+0x100>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_OC2_SetConfig+0x68>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a28      	ldr	r2, [pc, #160]	@ (80068e4 <TIM_OC2_SetConfig+0x104>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10d      	bne.n	8006864 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800684e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006862:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a1e      	ldr	r2, [pc, #120]	@ (80068e0 <TIM_OC2_SetConfig+0x100>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00f      	beq.n	800688c <TIM_OC2_SetConfig+0xac>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a1d      	ldr	r2, [pc, #116]	@ (80068e4 <TIM_OC2_SetConfig+0x104>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00b      	beq.n	800688c <TIM_OC2_SetConfig+0xac>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a1c      	ldr	r2, [pc, #112]	@ (80068e8 <TIM_OC2_SetConfig+0x108>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d007      	beq.n	800688c <TIM_OC2_SetConfig+0xac>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a1b      	ldr	r2, [pc, #108]	@ (80068ec <TIM_OC2_SetConfig+0x10c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_OC2_SetConfig+0xac>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1a      	ldr	r2, [pc, #104]	@ (80068f0 <TIM_OC2_SetConfig+0x110>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d113      	bne.n	80068b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800689a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	621a      	str	r2, [r3, #32]
}
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	feff8fff 	.word	0xfeff8fff
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40010400 	.word	0x40010400
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40014400 	.word	0x40014400
 80068f0:	40014800 	.word	0x40014800

080068f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4b33      	ldr	r3, [pc, #204]	@ (80069ec <TIM_OC3_SetConfig+0xf8>)
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800693c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a28      	ldr	r2, [pc, #160]	@ (80069f0 <TIM_OC3_SetConfig+0xfc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_OC3_SetConfig+0x66>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a27      	ldr	r2, [pc, #156]	@ (80069f4 <TIM_OC3_SetConfig+0x100>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d10d      	bne.n	8006976 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a1d      	ldr	r2, [pc, #116]	@ (80069f0 <TIM_OC3_SetConfig+0xfc>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00f      	beq.n	800699e <TIM_OC3_SetConfig+0xaa>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1c      	ldr	r2, [pc, #112]	@ (80069f4 <TIM_OC3_SetConfig+0x100>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00b      	beq.n	800699e <TIM_OC3_SetConfig+0xaa>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1b      	ldr	r2, [pc, #108]	@ (80069f8 <TIM_OC3_SetConfig+0x104>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d007      	beq.n	800699e <TIM_OC3_SetConfig+0xaa>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a1a      	ldr	r2, [pc, #104]	@ (80069fc <TIM_OC3_SetConfig+0x108>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d003      	beq.n	800699e <TIM_OC3_SetConfig+0xaa>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a19      	ldr	r2, [pc, #100]	@ (8006a00 <TIM_OC3_SetConfig+0x10c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d113      	bne.n	80069c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	621a      	str	r2, [r3, #32]
}
 80069e0:	bf00      	nop
 80069e2:	371c      	adds	r7, #28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	fffeff8f 	.word	0xfffeff8f
 80069f0:	40010000 	.word	0x40010000
 80069f4:	40010400 	.word	0x40010400
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400
 8006a00:	40014800 	.word	0x40014800

08006a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ac0 <TIM_OC4_SetConfig+0xbc>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	031b      	lsls	r3, r3, #12
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a19      	ldr	r2, [pc, #100]	@ (8006ac4 <TIM_OC4_SetConfig+0xc0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00f      	beq.n	8006a84 <TIM_OC4_SetConfig+0x80>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a18      	ldr	r2, [pc, #96]	@ (8006ac8 <TIM_OC4_SetConfig+0xc4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00b      	beq.n	8006a84 <TIM_OC4_SetConfig+0x80>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a17      	ldr	r2, [pc, #92]	@ (8006acc <TIM_OC4_SetConfig+0xc8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d007      	beq.n	8006a84 <TIM_OC4_SetConfig+0x80>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a16      	ldr	r2, [pc, #88]	@ (8006ad0 <TIM_OC4_SetConfig+0xcc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d003      	beq.n	8006a84 <TIM_OC4_SetConfig+0x80>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a15      	ldr	r2, [pc, #84]	@ (8006ad4 <TIM_OC4_SetConfig+0xd0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d109      	bne.n	8006a98 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	019b      	lsls	r3, r3, #6
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	621a      	str	r2, [r3, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	feff8fff 	.word	0xfeff8fff
 8006ac4:	40010000 	.word	0x40010000
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800

08006ad8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4b21      	ldr	r3, [pc, #132]	@ (8006b88 <TIM_OC5_SetConfig+0xb0>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a18      	ldr	r2, [pc, #96]	@ (8006b8c <TIM_OC5_SetConfig+0xb4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00f      	beq.n	8006b4e <TIM_OC5_SetConfig+0x76>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a17      	ldr	r2, [pc, #92]	@ (8006b90 <TIM_OC5_SetConfig+0xb8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00b      	beq.n	8006b4e <TIM_OC5_SetConfig+0x76>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a16      	ldr	r2, [pc, #88]	@ (8006b94 <TIM_OC5_SetConfig+0xbc>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d007      	beq.n	8006b4e <TIM_OC5_SetConfig+0x76>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a15      	ldr	r2, [pc, #84]	@ (8006b98 <TIM_OC5_SetConfig+0xc0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d003      	beq.n	8006b4e <TIM_OC5_SetConfig+0x76>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a14      	ldr	r2, [pc, #80]	@ (8006b9c <TIM_OC5_SetConfig+0xc4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d109      	bne.n	8006b62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	621a      	str	r2, [r3, #32]
}
 8006b7c:	bf00      	nop
 8006b7e:	371c      	adds	r7, #28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	fffeff8f 	.word	0xfffeff8f
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40010400 	.word	0x40010400
 8006b94:	40014000 	.word	0x40014000
 8006b98:	40014400 	.word	0x40014400
 8006b9c:	40014800 	.word	0x40014800

08006ba0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4b22      	ldr	r3, [pc, #136]	@ (8006c54 <TIM_OC6_SetConfig+0xb4>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	051b      	lsls	r3, r3, #20
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a19      	ldr	r2, [pc, #100]	@ (8006c58 <TIM_OC6_SetConfig+0xb8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00f      	beq.n	8006c18 <TIM_OC6_SetConfig+0x78>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a18      	ldr	r2, [pc, #96]	@ (8006c5c <TIM_OC6_SetConfig+0xbc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00b      	beq.n	8006c18 <TIM_OC6_SetConfig+0x78>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a17      	ldr	r2, [pc, #92]	@ (8006c60 <TIM_OC6_SetConfig+0xc0>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d007      	beq.n	8006c18 <TIM_OC6_SetConfig+0x78>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a16      	ldr	r2, [pc, #88]	@ (8006c64 <TIM_OC6_SetConfig+0xc4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_OC6_SetConfig+0x78>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a15      	ldr	r2, [pc, #84]	@ (8006c68 <TIM_OC6_SetConfig+0xc8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d109      	bne.n	8006c2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	029b      	lsls	r3, r3, #10
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	feff8fff 	.word	0xfeff8fff
 8006c58:	40010000 	.word	0x40010000
 8006c5c:	40010400 	.word	0x40010400
 8006c60:	40014000 	.word	0x40014000
 8006c64:	40014400 	.word	0x40014400
 8006c68:	40014800 	.word	0x40014800

08006c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e06d      	b.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a30      	ldr	r2, [pc, #192]	@ (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a20      	ldr	r2, [pc, #128]	@ (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d022      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf6:	d01d      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d018      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1c      	ldr	r2, [pc, #112]	@ (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d013      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1a      	ldr	r2, [pc, #104]	@ (8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00e      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a15      	ldr	r2, [pc, #84]	@ (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d009      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a16      	ldr	r2, [pc, #88]	@ (8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a15      	ldr	r2, [pc, #84]	@ (8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d10c      	bne.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	40010000 	.word	0x40010000
 8006d70:	40010400 	.word	0x40010400
 8006d74:	40000400 	.word	0x40000400
 8006d78:	40000800 	.word	0x40000800
 8006d7c:	40000c00 	.word	0x40000c00
 8006d80:	40001800 	.word	0x40001800
 8006d84:	40014000 	.word	0x40014000

08006d88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e065      	b.n	8006e70 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	041b      	lsls	r3, r3, #16
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a16      	ldr	r2, [pc, #88]	@ (8006e7c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a14      	ldr	r2, [pc, #80]	@ (8006e80 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d115      	bne.n	8006e5e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3c:	051b      	lsls	r3, r3, #20
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	40010000 	.word	0x40010000
 8006e80:	40010400 	.word	0x40010400

08006e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e042      	b.n	8006f58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7fa fdfb 	bl	8001ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2224      	movs	r2, #36	@ 0x24
 8006eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0201 	bic.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fe1e 	bl	8007b4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f8b3 	bl	800707c <UART_SetConfig>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e01b      	b.n	8006f58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0201 	orr.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fe9d 	bl	8007c90 <UART_CheckIdleState>
 8006f56:	4603      	mov	r3, r0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	@ 0x28
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d17b      	bne.n	8007072 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_UART_Transmit+0x26>
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e074      	b.n	8007074 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2221      	movs	r2, #33	@ 0x21
 8006f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f9a:	f7fa ffc3 	bl	8001f24 <HAL_GetTick>
 8006f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb8:	d108      	bne.n	8006fcc <HAL_UART_Transmit+0x6c>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	e003      	b.n	8006fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fd4:	e030      	b.n	8007038 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2180      	movs	r1, #128	@ 0x80
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 feff 	bl	8007de4 <UART_WaitOnFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e03d      	b.n	8007074 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800700c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	3302      	adds	r3, #2
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	e007      	b.n	8007026 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	3301      	adds	r3, #1
 8007024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1c8      	bne.n	8006fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2200      	movs	r2, #0
 800704c:	2140      	movs	r1, #64	@ 0x40
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 fec8 	bl	8007de4 <UART_WaitOnFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e006      	b.n	8007074 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2220      	movs	r2, #32
 800706a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	e000      	b.n	8007074 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007072:	2302      	movs	r3, #2
  }
}
 8007074:	4618      	mov	r0, r3
 8007076:	3720      	adds	r7, #32
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800707c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007080:	b092      	sub	sp, #72	@ 0x48
 8007082:	af00      	add	r7, sp, #0
 8007084:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	431a      	orrs	r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	431a      	orrs	r2, r3
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	4bbe      	ldr	r3, [pc, #760]	@ (80073a4 <UART_SetConfig+0x328>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070b4:	430b      	orrs	r3, r1
 80070b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4ab3      	ldr	r2, [pc, #716]	@ (80073a8 <UART_SetConfig+0x32c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d004      	beq.n	80070e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070e4:	4313      	orrs	r3, r2
 80070e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	4baf      	ldr	r3, [pc, #700]	@ (80073ac <UART_SetConfig+0x330>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007102:	f023 010f 	bic.w	r1, r3, #15
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4aa6      	ldr	r2, [pc, #664]	@ (80073b0 <UART_SetConfig+0x334>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d177      	bne.n	800720c <UART_SetConfig+0x190>
 800711c:	4ba5      	ldr	r3, [pc, #660]	@ (80073b4 <UART_SetConfig+0x338>)
 800711e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007120:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007124:	2b28      	cmp	r3, #40	@ 0x28
 8007126:	d86d      	bhi.n	8007204 <UART_SetConfig+0x188>
 8007128:	a201      	add	r2, pc, #4	@ (adr r2, 8007130 <UART_SetConfig+0xb4>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	080071d5 	.word	0x080071d5
 8007134:	08007205 	.word	0x08007205
 8007138:	08007205 	.word	0x08007205
 800713c:	08007205 	.word	0x08007205
 8007140:	08007205 	.word	0x08007205
 8007144:	08007205 	.word	0x08007205
 8007148:	08007205 	.word	0x08007205
 800714c:	08007205 	.word	0x08007205
 8007150:	080071dd 	.word	0x080071dd
 8007154:	08007205 	.word	0x08007205
 8007158:	08007205 	.word	0x08007205
 800715c:	08007205 	.word	0x08007205
 8007160:	08007205 	.word	0x08007205
 8007164:	08007205 	.word	0x08007205
 8007168:	08007205 	.word	0x08007205
 800716c:	08007205 	.word	0x08007205
 8007170:	080071e5 	.word	0x080071e5
 8007174:	08007205 	.word	0x08007205
 8007178:	08007205 	.word	0x08007205
 800717c:	08007205 	.word	0x08007205
 8007180:	08007205 	.word	0x08007205
 8007184:	08007205 	.word	0x08007205
 8007188:	08007205 	.word	0x08007205
 800718c:	08007205 	.word	0x08007205
 8007190:	080071ed 	.word	0x080071ed
 8007194:	08007205 	.word	0x08007205
 8007198:	08007205 	.word	0x08007205
 800719c:	08007205 	.word	0x08007205
 80071a0:	08007205 	.word	0x08007205
 80071a4:	08007205 	.word	0x08007205
 80071a8:	08007205 	.word	0x08007205
 80071ac:	08007205 	.word	0x08007205
 80071b0:	080071f5 	.word	0x080071f5
 80071b4:	08007205 	.word	0x08007205
 80071b8:	08007205 	.word	0x08007205
 80071bc:	08007205 	.word	0x08007205
 80071c0:	08007205 	.word	0x08007205
 80071c4:	08007205 	.word	0x08007205
 80071c8:	08007205 	.word	0x08007205
 80071cc:	08007205 	.word	0x08007205
 80071d0:	080071fd 	.word	0x080071fd
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071da:	e222      	b.n	8007622 <UART_SetConfig+0x5a6>
 80071dc:	2304      	movs	r3, #4
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e2:	e21e      	b.n	8007622 <UART_SetConfig+0x5a6>
 80071e4:	2308      	movs	r3, #8
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ea:	e21a      	b.n	8007622 <UART_SetConfig+0x5a6>
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f2:	e216      	b.n	8007622 <UART_SetConfig+0x5a6>
 80071f4:	2320      	movs	r3, #32
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fa:	e212      	b.n	8007622 <UART_SetConfig+0x5a6>
 80071fc:	2340      	movs	r3, #64	@ 0x40
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007202:	e20e      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007204:	2380      	movs	r3, #128	@ 0x80
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720a:	e20a      	b.n	8007622 <UART_SetConfig+0x5a6>
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a69      	ldr	r2, [pc, #420]	@ (80073b8 <UART_SetConfig+0x33c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d130      	bne.n	8007278 <UART_SetConfig+0x1fc>
 8007216:	4b67      	ldr	r3, [pc, #412]	@ (80073b4 <UART_SetConfig+0x338>)
 8007218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	2b05      	cmp	r3, #5
 8007220:	d826      	bhi.n	8007270 <UART_SetConfig+0x1f4>
 8007222:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <UART_SetConfig+0x1ac>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007241 	.word	0x08007241
 800722c:	08007249 	.word	0x08007249
 8007230:	08007251 	.word	0x08007251
 8007234:	08007259 	.word	0x08007259
 8007238:	08007261 	.word	0x08007261
 800723c:	08007269 	.word	0x08007269
 8007240:	2300      	movs	r3, #0
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007246:	e1ec      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007248:	2304      	movs	r3, #4
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724e:	e1e8      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007250:	2308      	movs	r3, #8
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007256:	e1e4      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800725e:	e1e0      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007260:	2320      	movs	r3, #32
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007266:	e1dc      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007268:	2340      	movs	r3, #64	@ 0x40
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726e:	e1d8      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007270:	2380      	movs	r3, #128	@ 0x80
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007276:	e1d4      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a4f      	ldr	r2, [pc, #316]	@ (80073bc <UART_SetConfig+0x340>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d130      	bne.n	80072e4 <UART_SetConfig+0x268>
 8007282:	4b4c      	ldr	r3, [pc, #304]	@ (80073b4 <UART_SetConfig+0x338>)
 8007284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	2b05      	cmp	r3, #5
 800728c:	d826      	bhi.n	80072dc <UART_SetConfig+0x260>
 800728e:	a201      	add	r2, pc, #4	@ (adr r2, 8007294 <UART_SetConfig+0x218>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	080072ad 	.word	0x080072ad
 8007298:	080072b5 	.word	0x080072b5
 800729c:	080072bd 	.word	0x080072bd
 80072a0:	080072c5 	.word	0x080072c5
 80072a4:	080072cd 	.word	0x080072cd
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	2300      	movs	r3, #0
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b2:	e1b6      	b.n	8007622 <UART_SetConfig+0x5a6>
 80072b4:	2304      	movs	r3, #4
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ba:	e1b2      	b.n	8007622 <UART_SetConfig+0x5a6>
 80072bc:	2308      	movs	r3, #8
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c2:	e1ae      	b.n	8007622 <UART_SetConfig+0x5a6>
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ca:	e1aa      	b.n	8007622 <UART_SetConfig+0x5a6>
 80072cc:	2320      	movs	r3, #32
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d2:	e1a6      	b.n	8007622 <UART_SetConfig+0x5a6>
 80072d4:	2340      	movs	r3, #64	@ 0x40
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072da:	e1a2      	b.n	8007622 <UART_SetConfig+0x5a6>
 80072dc:	2380      	movs	r3, #128	@ 0x80
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e2:	e19e      	b.n	8007622 <UART_SetConfig+0x5a6>
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a35      	ldr	r2, [pc, #212]	@ (80073c0 <UART_SetConfig+0x344>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d130      	bne.n	8007350 <UART_SetConfig+0x2d4>
 80072ee:	4b31      	ldr	r3, [pc, #196]	@ (80073b4 <UART_SetConfig+0x338>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	d826      	bhi.n	8007348 <UART_SetConfig+0x2cc>
 80072fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007300 <UART_SetConfig+0x284>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007319 	.word	0x08007319
 8007304:	08007321 	.word	0x08007321
 8007308:	08007329 	.word	0x08007329
 800730c:	08007331 	.word	0x08007331
 8007310:	08007339 	.word	0x08007339
 8007314:	08007341 	.word	0x08007341
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731e:	e180      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007320:	2304      	movs	r3, #4
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007326:	e17c      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007328:	2308      	movs	r3, #8
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732e:	e178      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007330:	2310      	movs	r3, #16
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007336:	e174      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007338:	2320      	movs	r3, #32
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733e:	e170      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007340:	2340      	movs	r3, #64	@ 0x40
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007346:	e16c      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007348:	2380      	movs	r3, #128	@ 0x80
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e168      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a1b      	ldr	r2, [pc, #108]	@ (80073c4 <UART_SetConfig+0x348>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d142      	bne.n	80073e0 <UART_SetConfig+0x364>
 800735a:	4b16      	ldr	r3, [pc, #88]	@ (80073b4 <UART_SetConfig+0x338>)
 800735c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	2b05      	cmp	r3, #5
 8007364:	d838      	bhi.n	80073d8 <UART_SetConfig+0x35c>
 8007366:	a201      	add	r2, pc, #4	@ (adr r2, 800736c <UART_SetConfig+0x2f0>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	08007385 	.word	0x08007385
 8007370:	0800738d 	.word	0x0800738d
 8007374:	08007395 	.word	0x08007395
 8007378:	0800739d 	.word	0x0800739d
 800737c:	080073c9 	.word	0x080073c9
 8007380:	080073d1 	.word	0x080073d1
 8007384:	2300      	movs	r3, #0
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738a:	e14a      	b.n	8007622 <UART_SetConfig+0x5a6>
 800738c:	2304      	movs	r3, #4
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007392:	e146      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007394:	2308      	movs	r3, #8
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739a:	e142      	b.n	8007622 <UART_SetConfig+0x5a6>
 800739c:	2310      	movs	r3, #16
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a2:	e13e      	b.n	8007622 <UART_SetConfig+0x5a6>
 80073a4:	cfff69f3 	.word	0xcfff69f3
 80073a8:	58000c00 	.word	0x58000c00
 80073ac:	11fff4ff 	.word	0x11fff4ff
 80073b0:	40011000 	.word	0x40011000
 80073b4:	58024400 	.word	0x58024400
 80073b8:	40004400 	.word	0x40004400
 80073bc:	40004800 	.word	0x40004800
 80073c0:	40004c00 	.word	0x40004c00
 80073c4:	40005000 	.word	0x40005000
 80073c8:	2320      	movs	r3, #32
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ce:	e128      	b.n	8007622 <UART_SetConfig+0x5a6>
 80073d0:	2340      	movs	r3, #64	@ 0x40
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d6:	e124      	b.n	8007622 <UART_SetConfig+0x5a6>
 80073d8:	2380      	movs	r3, #128	@ 0x80
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073de:	e120      	b.n	8007622 <UART_SetConfig+0x5a6>
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4acb      	ldr	r2, [pc, #812]	@ (8007714 <UART_SetConfig+0x698>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d176      	bne.n	80074d8 <UART_SetConfig+0x45c>
 80073ea:	4bcb      	ldr	r3, [pc, #812]	@ (8007718 <UART_SetConfig+0x69c>)
 80073ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073f2:	2b28      	cmp	r3, #40	@ 0x28
 80073f4:	d86c      	bhi.n	80074d0 <UART_SetConfig+0x454>
 80073f6:	a201      	add	r2, pc, #4	@ (adr r2, 80073fc <UART_SetConfig+0x380>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	080074a1 	.word	0x080074a1
 8007400:	080074d1 	.word	0x080074d1
 8007404:	080074d1 	.word	0x080074d1
 8007408:	080074d1 	.word	0x080074d1
 800740c:	080074d1 	.word	0x080074d1
 8007410:	080074d1 	.word	0x080074d1
 8007414:	080074d1 	.word	0x080074d1
 8007418:	080074d1 	.word	0x080074d1
 800741c:	080074a9 	.word	0x080074a9
 8007420:	080074d1 	.word	0x080074d1
 8007424:	080074d1 	.word	0x080074d1
 8007428:	080074d1 	.word	0x080074d1
 800742c:	080074d1 	.word	0x080074d1
 8007430:	080074d1 	.word	0x080074d1
 8007434:	080074d1 	.word	0x080074d1
 8007438:	080074d1 	.word	0x080074d1
 800743c:	080074b1 	.word	0x080074b1
 8007440:	080074d1 	.word	0x080074d1
 8007444:	080074d1 	.word	0x080074d1
 8007448:	080074d1 	.word	0x080074d1
 800744c:	080074d1 	.word	0x080074d1
 8007450:	080074d1 	.word	0x080074d1
 8007454:	080074d1 	.word	0x080074d1
 8007458:	080074d1 	.word	0x080074d1
 800745c:	080074b9 	.word	0x080074b9
 8007460:	080074d1 	.word	0x080074d1
 8007464:	080074d1 	.word	0x080074d1
 8007468:	080074d1 	.word	0x080074d1
 800746c:	080074d1 	.word	0x080074d1
 8007470:	080074d1 	.word	0x080074d1
 8007474:	080074d1 	.word	0x080074d1
 8007478:	080074d1 	.word	0x080074d1
 800747c:	080074c1 	.word	0x080074c1
 8007480:	080074d1 	.word	0x080074d1
 8007484:	080074d1 	.word	0x080074d1
 8007488:	080074d1 	.word	0x080074d1
 800748c:	080074d1 	.word	0x080074d1
 8007490:	080074d1 	.word	0x080074d1
 8007494:	080074d1 	.word	0x080074d1
 8007498:	080074d1 	.word	0x080074d1
 800749c:	080074c9 	.word	0x080074c9
 80074a0:	2301      	movs	r3, #1
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a6:	e0bc      	b.n	8007622 <UART_SetConfig+0x5a6>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ae:	e0b8      	b.n	8007622 <UART_SetConfig+0x5a6>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e0b4      	b.n	8007622 <UART_SetConfig+0x5a6>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e0b0      	b.n	8007622 <UART_SetConfig+0x5a6>
 80074c0:	2320      	movs	r3, #32
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e0ac      	b.n	8007622 <UART_SetConfig+0x5a6>
 80074c8:	2340      	movs	r3, #64	@ 0x40
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e0a8      	b.n	8007622 <UART_SetConfig+0x5a6>
 80074d0:	2380      	movs	r3, #128	@ 0x80
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e0a4      	b.n	8007622 <UART_SetConfig+0x5a6>
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a8f      	ldr	r2, [pc, #572]	@ (800771c <UART_SetConfig+0x6a0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d130      	bne.n	8007544 <UART_SetConfig+0x4c8>
 80074e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007718 <UART_SetConfig+0x69c>)
 80074e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	d826      	bhi.n	800753c <UART_SetConfig+0x4c0>
 80074ee:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <UART_SetConfig+0x478>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	0800750d 	.word	0x0800750d
 80074f8:	08007515 	.word	0x08007515
 80074fc:	0800751d 	.word	0x0800751d
 8007500:	08007525 	.word	0x08007525
 8007504:	0800752d 	.word	0x0800752d
 8007508:	08007535 	.word	0x08007535
 800750c:	2300      	movs	r3, #0
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007512:	e086      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007514:	2304      	movs	r3, #4
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751a:	e082      	b.n	8007622 <UART_SetConfig+0x5a6>
 800751c:	2308      	movs	r3, #8
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e07e      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007524:	2310      	movs	r3, #16
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e07a      	b.n	8007622 <UART_SetConfig+0x5a6>
 800752c:	2320      	movs	r3, #32
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e076      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007534:	2340      	movs	r3, #64	@ 0x40
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e072      	b.n	8007622 <UART_SetConfig+0x5a6>
 800753c:	2380      	movs	r3, #128	@ 0x80
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e06e      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a75      	ldr	r2, [pc, #468]	@ (8007720 <UART_SetConfig+0x6a4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d130      	bne.n	80075b0 <UART_SetConfig+0x534>
 800754e:	4b72      	ldr	r3, [pc, #456]	@ (8007718 <UART_SetConfig+0x69c>)
 8007550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	2b05      	cmp	r3, #5
 8007558:	d826      	bhi.n	80075a8 <UART_SetConfig+0x52c>
 800755a:	a201      	add	r2, pc, #4	@ (adr r2, 8007560 <UART_SetConfig+0x4e4>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	08007579 	.word	0x08007579
 8007564:	08007581 	.word	0x08007581
 8007568:	08007589 	.word	0x08007589
 800756c:	08007591 	.word	0x08007591
 8007570:	08007599 	.word	0x08007599
 8007574:	080075a1 	.word	0x080075a1
 8007578:	2300      	movs	r3, #0
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757e:	e050      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007580:	2304      	movs	r3, #4
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007586:	e04c      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007588:	2308      	movs	r3, #8
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e048      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007590:	2310      	movs	r3, #16
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e044      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007598:	2320      	movs	r3, #32
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e040      	b.n	8007622 <UART_SetConfig+0x5a6>
 80075a0:	2340      	movs	r3, #64	@ 0x40
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e03c      	b.n	8007622 <UART_SetConfig+0x5a6>
 80075a8:	2380      	movs	r3, #128	@ 0x80
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e038      	b.n	8007622 <UART_SetConfig+0x5a6>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a5b      	ldr	r2, [pc, #364]	@ (8007724 <UART_SetConfig+0x6a8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d130      	bne.n	800761c <UART_SetConfig+0x5a0>
 80075ba:	4b57      	ldr	r3, [pc, #348]	@ (8007718 <UART_SetConfig+0x69c>)
 80075bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	2b05      	cmp	r3, #5
 80075c4:	d826      	bhi.n	8007614 <UART_SetConfig+0x598>
 80075c6:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <UART_SetConfig+0x550>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075e5 	.word	0x080075e5
 80075d0:	080075ed 	.word	0x080075ed
 80075d4:	080075f5 	.word	0x080075f5
 80075d8:	080075fd 	.word	0x080075fd
 80075dc:	08007605 	.word	0x08007605
 80075e0:	0800760d 	.word	0x0800760d
 80075e4:	2302      	movs	r3, #2
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ea:	e01a      	b.n	8007622 <UART_SetConfig+0x5a6>
 80075ec:	2304      	movs	r3, #4
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e016      	b.n	8007622 <UART_SetConfig+0x5a6>
 80075f4:	2308      	movs	r3, #8
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e012      	b.n	8007622 <UART_SetConfig+0x5a6>
 80075fc:	2310      	movs	r3, #16
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e00e      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007604:	2320      	movs	r3, #32
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e00a      	b.n	8007622 <UART_SetConfig+0x5a6>
 800760c:	2340      	movs	r3, #64	@ 0x40
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e006      	b.n	8007622 <UART_SetConfig+0x5a6>
 8007614:	2380      	movs	r3, #128	@ 0x80
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e002      	b.n	8007622 <UART_SetConfig+0x5a6>
 800761c:	2380      	movs	r3, #128	@ 0x80
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a3f      	ldr	r2, [pc, #252]	@ (8007724 <UART_SetConfig+0x6a8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	f040 80f8 	bne.w	800781e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800762e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007632:	2b20      	cmp	r3, #32
 8007634:	dc46      	bgt.n	80076c4 <UART_SetConfig+0x648>
 8007636:	2b02      	cmp	r3, #2
 8007638:	f2c0 8082 	blt.w	8007740 <UART_SetConfig+0x6c4>
 800763c:	3b02      	subs	r3, #2
 800763e:	2b1e      	cmp	r3, #30
 8007640:	d87e      	bhi.n	8007740 <UART_SetConfig+0x6c4>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <UART_SetConfig+0x5cc>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	080076cb 	.word	0x080076cb
 800764c:	08007741 	.word	0x08007741
 8007650:	080076d3 	.word	0x080076d3
 8007654:	08007741 	.word	0x08007741
 8007658:	08007741 	.word	0x08007741
 800765c:	08007741 	.word	0x08007741
 8007660:	080076e3 	.word	0x080076e3
 8007664:	08007741 	.word	0x08007741
 8007668:	08007741 	.word	0x08007741
 800766c:	08007741 	.word	0x08007741
 8007670:	08007741 	.word	0x08007741
 8007674:	08007741 	.word	0x08007741
 8007678:	08007741 	.word	0x08007741
 800767c:	08007741 	.word	0x08007741
 8007680:	080076f3 	.word	0x080076f3
 8007684:	08007741 	.word	0x08007741
 8007688:	08007741 	.word	0x08007741
 800768c:	08007741 	.word	0x08007741
 8007690:	08007741 	.word	0x08007741
 8007694:	08007741 	.word	0x08007741
 8007698:	08007741 	.word	0x08007741
 800769c:	08007741 	.word	0x08007741
 80076a0:	08007741 	.word	0x08007741
 80076a4:	08007741 	.word	0x08007741
 80076a8:	08007741 	.word	0x08007741
 80076ac:	08007741 	.word	0x08007741
 80076b0:	08007741 	.word	0x08007741
 80076b4:	08007741 	.word	0x08007741
 80076b8:	08007741 	.word	0x08007741
 80076bc:	08007741 	.word	0x08007741
 80076c0:	08007733 	.word	0x08007733
 80076c4:	2b40      	cmp	r3, #64	@ 0x40
 80076c6:	d037      	beq.n	8007738 <UART_SetConfig+0x6bc>
 80076c8:	e03a      	b.n	8007740 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80076ca:	f7fd fa87 	bl	8004bdc <HAL_RCCEx_GetD3PCLK1Freq>
 80076ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076d0:	e03c      	b.n	800774c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fd fa96 	bl	8004c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e0:	e034      	b.n	800774c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e2:	f107 0318 	add.w	r3, r7, #24
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fd fbe2 	bl	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076f0:	e02c      	b.n	800774c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f2:	4b09      	ldr	r3, [pc, #36]	@ (8007718 <UART_SetConfig+0x69c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076fe:	4b06      	ldr	r3, [pc, #24]	@ (8007718 <UART_SetConfig+0x69c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	08db      	lsrs	r3, r3, #3
 8007704:	f003 0303 	and.w	r3, r3, #3
 8007708:	4a07      	ldr	r2, [pc, #28]	@ (8007728 <UART_SetConfig+0x6ac>)
 800770a:	fa22 f303 	lsr.w	r3, r2, r3
 800770e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007710:	e01c      	b.n	800774c <UART_SetConfig+0x6d0>
 8007712:	bf00      	nop
 8007714:	40011400 	.word	0x40011400
 8007718:	58024400 	.word	0x58024400
 800771c:	40007800 	.word	0x40007800
 8007720:	40007c00 	.word	0x40007c00
 8007724:	58000c00 	.word	0x58000c00
 8007728:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800772c:	4b9d      	ldr	r3, [pc, #628]	@ (80079a4 <UART_SetConfig+0x928>)
 800772e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007730:	e00c      	b.n	800774c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007732:	4b9d      	ldr	r3, [pc, #628]	@ (80079a8 <UART_SetConfig+0x92c>)
 8007734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007736:	e009      	b.n	800774c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007738:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800773c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800773e:	e005      	b.n	800774c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800774a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800774c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 81de 	beq.w	8007b10 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007758:	4a94      	ldr	r2, [pc, #592]	@ (80079ac <UART_SetConfig+0x930>)
 800775a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800775e:	461a      	mov	r2, r3
 8007760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007762:	fbb3 f3f2 	udiv	r3, r3, r2
 8007766:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	4613      	mov	r3, r2
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	4413      	add	r3, r2
 8007772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007774:	429a      	cmp	r2, r3
 8007776:	d305      	bcc.n	8007784 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800777e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007780:	429a      	cmp	r2, r3
 8007782:	d903      	bls.n	800778c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800778a:	e1c1      	b.n	8007b10 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800778c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800778e:	2200      	movs	r2, #0
 8007790:	60bb      	str	r3, [r7, #8]
 8007792:	60fa      	str	r2, [r7, #12]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007798:	4a84      	ldr	r2, [pc, #528]	@ (80079ac <UART_SetConfig+0x930>)
 800779a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2200      	movs	r2, #0
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077ae:	f7f8 fde7 	bl	8000380 <__aeabi_uldivmod>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4610      	mov	r0, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	f04f 0200 	mov.w	r2, #0
 80077be:	f04f 0300 	mov.w	r3, #0
 80077c2:	020b      	lsls	r3, r1, #8
 80077c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077c8:	0202      	lsls	r2, r0, #8
 80077ca:	6979      	ldr	r1, [r7, #20]
 80077cc:	6849      	ldr	r1, [r1, #4]
 80077ce:	0849      	lsrs	r1, r1, #1
 80077d0:	2000      	movs	r0, #0
 80077d2:	460c      	mov	r4, r1
 80077d4:	4605      	mov	r5, r0
 80077d6:	eb12 0804 	adds.w	r8, r2, r4
 80077da:	eb43 0905 	adc.w	r9, r3, r5
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	469a      	mov	sl, r3
 80077e6:	4693      	mov	fp, r2
 80077e8:	4652      	mov	r2, sl
 80077ea:	465b      	mov	r3, fp
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f8 fdc6 	bl	8000380 <__aeabi_uldivmod>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4613      	mov	r3, r2
 80077fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007802:	d308      	bcc.n	8007816 <UART_SetConfig+0x79a>
 8007804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800780a:	d204      	bcs.n	8007816 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007812:	60da      	str	r2, [r3, #12]
 8007814:	e17c      	b.n	8007b10 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800781c:	e178      	b.n	8007b10 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007826:	f040 80c5 	bne.w	80079b4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800782a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800782e:	2b20      	cmp	r3, #32
 8007830:	dc48      	bgt.n	80078c4 <UART_SetConfig+0x848>
 8007832:	2b00      	cmp	r3, #0
 8007834:	db7b      	blt.n	800792e <UART_SetConfig+0x8b2>
 8007836:	2b20      	cmp	r3, #32
 8007838:	d879      	bhi.n	800792e <UART_SetConfig+0x8b2>
 800783a:	a201      	add	r2, pc, #4	@ (adr r2, 8007840 <UART_SetConfig+0x7c4>)
 800783c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007840:	080078cb 	.word	0x080078cb
 8007844:	080078d3 	.word	0x080078d3
 8007848:	0800792f 	.word	0x0800792f
 800784c:	0800792f 	.word	0x0800792f
 8007850:	080078db 	.word	0x080078db
 8007854:	0800792f 	.word	0x0800792f
 8007858:	0800792f 	.word	0x0800792f
 800785c:	0800792f 	.word	0x0800792f
 8007860:	080078eb 	.word	0x080078eb
 8007864:	0800792f 	.word	0x0800792f
 8007868:	0800792f 	.word	0x0800792f
 800786c:	0800792f 	.word	0x0800792f
 8007870:	0800792f 	.word	0x0800792f
 8007874:	0800792f 	.word	0x0800792f
 8007878:	0800792f 	.word	0x0800792f
 800787c:	0800792f 	.word	0x0800792f
 8007880:	080078fb 	.word	0x080078fb
 8007884:	0800792f 	.word	0x0800792f
 8007888:	0800792f 	.word	0x0800792f
 800788c:	0800792f 	.word	0x0800792f
 8007890:	0800792f 	.word	0x0800792f
 8007894:	0800792f 	.word	0x0800792f
 8007898:	0800792f 	.word	0x0800792f
 800789c:	0800792f 	.word	0x0800792f
 80078a0:	0800792f 	.word	0x0800792f
 80078a4:	0800792f 	.word	0x0800792f
 80078a8:	0800792f 	.word	0x0800792f
 80078ac:	0800792f 	.word	0x0800792f
 80078b0:	0800792f 	.word	0x0800792f
 80078b4:	0800792f 	.word	0x0800792f
 80078b8:	0800792f 	.word	0x0800792f
 80078bc:	0800792f 	.word	0x0800792f
 80078c0:	08007921 	.word	0x08007921
 80078c4:	2b40      	cmp	r3, #64	@ 0x40
 80078c6:	d02e      	beq.n	8007926 <UART_SetConfig+0x8aa>
 80078c8:	e031      	b.n	800792e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ca:	f7fb fecf 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 80078ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078d0:	e033      	b.n	800793a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078d2:	f7fb fee1 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 80078d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078d8:	e02f      	b.n	800793a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fd f992 	bl	8004c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e8:	e027      	b.n	800793a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ea:	f107 0318 	add.w	r3, r7, #24
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fd fade 	bl	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f8:	e01f      	b.n	800793a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078fa:	4b2d      	ldr	r3, [pc, #180]	@ (80079b0 <UART_SetConfig+0x934>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0320 	and.w	r3, r3, #32
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007906:	4b2a      	ldr	r3, [pc, #168]	@ (80079b0 <UART_SetConfig+0x934>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	08db      	lsrs	r3, r3, #3
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	4a24      	ldr	r2, [pc, #144]	@ (80079a4 <UART_SetConfig+0x928>)
 8007912:	fa22 f303 	lsr.w	r3, r2, r3
 8007916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007918:	e00f      	b.n	800793a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800791a:	4b22      	ldr	r3, [pc, #136]	@ (80079a4 <UART_SetConfig+0x928>)
 800791c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800791e:	e00c      	b.n	800793a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007920:	4b21      	ldr	r3, [pc, #132]	@ (80079a8 <UART_SetConfig+0x92c>)
 8007922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007924:	e009      	b.n	800793a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800792a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800792c:	e005      	b.n	800793a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800793a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80e7 	beq.w	8007b10 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007946:	4a19      	ldr	r2, [pc, #100]	@ (80079ac <UART_SetConfig+0x930>)
 8007948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800794c:	461a      	mov	r2, r3
 800794e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007950:	fbb3 f3f2 	udiv	r3, r3, r2
 8007954:	005a      	lsls	r2, r3, #1
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	085b      	lsrs	r3, r3, #1
 800795c:	441a      	add	r2, r3
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	fbb2 f3f3 	udiv	r3, r2, r3
 8007966:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796a:	2b0f      	cmp	r3, #15
 800796c:	d916      	bls.n	800799c <UART_SetConfig+0x920>
 800796e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007974:	d212      	bcs.n	800799c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007978:	b29b      	uxth	r3, r3
 800797a:	f023 030f 	bic.w	r3, r3, #15
 800797e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	b29b      	uxth	r3, r3
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	b29a      	uxth	r2, r3
 800798c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800798e:	4313      	orrs	r3, r2
 8007990:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007998:	60da      	str	r2, [r3, #12]
 800799a:	e0b9      	b.n	8007b10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079a2:	e0b5      	b.n	8007b10 <UART_SetConfig+0xa94>
 80079a4:	03d09000 	.word	0x03d09000
 80079a8:	003d0900 	.word	0x003d0900
 80079ac:	08009838 	.word	0x08009838
 80079b0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80079b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	dc49      	bgt.n	8007a50 <UART_SetConfig+0x9d4>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	db7c      	blt.n	8007aba <UART_SetConfig+0xa3e>
 80079c0:	2b20      	cmp	r3, #32
 80079c2:	d87a      	bhi.n	8007aba <UART_SetConfig+0xa3e>
 80079c4:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <UART_SetConfig+0x950>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	08007a57 	.word	0x08007a57
 80079d0:	08007a5f 	.word	0x08007a5f
 80079d4:	08007abb 	.word	0x08007abb
 80079d8:	08007abb 	.word	0x08007abb
 80079dc:	08007a67 	.word	0x08007a67
 80079e0:	08007abb 	.word	0x08007abb
 80079e4:	08007abb 	.word	0x08007abb
 80079e8:	08007abb 	.word	0x08007abb
 80079ec:	08007a77 	.word	0x08007a77
 80079f0:	08007abb 	.word	0x08007abb
 80079f4:	08007abb 	.word	0x08007abb
 80079f8:	08007abb 	.word	0x08007abb
 80079fc:	08007abb 	.word	0x08007abb
 8007a00:	08007abb 	.word	0x08007abb
 8007a04:	08007abb 	.word	0x08007abb
 8007a08:	08007abb 	.word	0x08007abb
 8007a0c:	08007a87 	.word	0x08007a87
 8007a10:	08007abb 	.word	0x08007abb
 8007a14:	08007abb 	.word	0x08007abb
 8007a18:	08007abb 	.word	0x08007abb
 8007a1c:	08007abb 	.word	0x08007abb
 8007a20:	08007abb 	.word	0x08007abb
 8007a24:	08007abb 	.word	0x08007abb
 8007a28:	08007abb 	.word	0x08007abb
 8007a2c:	08007abb 	.word	0x08007abb
 8007a30:	08007abb 	.word	0x08007abb
 8007a34:	08007abb 	.word	0x08007abb
 8007a38:	08007abb 	.word	0x08007abb
 8007a3c:	08007abb 	.word	0x08007abb
 8007a40:	08007abb 	.word	0x08007abb
 8007a44:	08007abb 	.word	0x08007abb
 8007a48:	08007abb 	.word	0x08007abb
 8007a4c:	08007aad 	.word	0x08007aad
 8007a50:	2b40      	cmp	r3, #64	@ 0x40
 8007a52:	d02e      	beq.n	8007ab2 <UART_SetConfig+0xa36>
 8007a54:	e031      	b.n	8007aba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a56:	f7fb fe09 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8007a5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a5c:	e033      	b.n	8007ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a5e:	f7fb fe1b 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 8007a62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a64:	e02f      	b.n	8007ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fd f8cc 	bl	8004c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a74:	e027      	b.n	8007ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a76:	f107 0318 	add.w	r3, r7, #24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fd fa18 	bl	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a84:	e01f      	b.n	8007ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a86:	4b2d      	ldr	r3, [pc, #180]	@ (8007b3c <UART_SetConfig+0xac0>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a92:	4b2a      	ldr	r3, [pc, #168]	@ (8007b3c <UART_SetConfig+0xac0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	08db      	lsrs	r3, r3, #3
 8007a98:	f003 0303 	and.w	r3, r3, #3
 8007a9c:	4a28      	ldr	r2, [pc, #160]	@ (8007b40 <UART_SetConfig+0xac4>)
 8007a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007aa4:	e00f      	b.n	8007ac6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007aa6:	4b26      	ldr	r3, [pc, #152]	@ (8007b40 <UART_SetConfig+0xac4>)
 8007aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aaa:	e00c      	b.n	8007ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007aac:	4b25      	ldr	r3, [pc, #148]	@ (8007b44 <UART_SetConfig+0xac8>)
 8007aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab0:	e009      	b.n	8007ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab8:	e005      	b.n	8007ac6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ac4:	bf00      	nop
    }

    if (pclk != 0U)
 8007ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d021      	beq.n	8007b10 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b48 <UART_SetConfig+0xacc>)
 8007ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ada:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	441a      	add	r2, r3
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	2b0f      	cmp	r3, #15
 8007af4:	d909      	bls.n	8007b0a <UART_SetConfig+0xa8e>
 8007af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007afc:	d205      	bcs.n	8007b0a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60da      	str	r2, [r3, #12]
 8007b08:	e002      	b.n	8007b10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2200      	movs	r2, #0
 8007b24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b2c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3748      	adds	r7, #72	@ 0x48
 8007b34:	46bd      	mov	sp, r7
 8007b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b3a:	bf00      	nop
 8007b3c:	58024400 	.word	0x58024400
 8007b40:	03d09000 	.word	0x03d09000
 8007b44:	003d0900 	.word	0x003d0900
 8007b48:	08009838 	.word	0x08009838

08007b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbe:	f003 0304 	and.w	r3, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01a      	beq.n	8007c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c4a:	d10a      	bne.n	8007c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	605a      	str	r2, [r3, #4]
  }
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b098      	sub	sp, #96	@ 0x60
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ca0:	f7fa f940 	bl	8001f24 <HAL_GetTick>
 8007ca4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d12f      	bne.n	8007d14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f88e 	bl	8007de4 <UART_WaitOnFlagUntilTimeout>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d022      	beq.n	8007d14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e6      	bne.n	8007cce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e063      	b.n	8007ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0304 	and.w	r3, r3, #4
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d149      	bne.n	8007db6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f857 	bl	8007de4 <UART_WaitOnFlagUntilTimeout>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d03c      	beq.n	8007db6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	623b      	str	r3, [r7, #32]
   return(result);
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e6      	bne.n	8007d3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d8e:	61fa      	str	r2, [r7, #28]
 8007d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	69b9      	ldr	r1, [r7, #24]
 8007d94:	69fa      	ldr	r2, [r7, #28]
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e5      	bne.n	8007d6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e012      	b.n	8007ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3758      	adds	r7, #88	@ 0x58
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	4613      	mov	r3, r2
 8007df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df4:	e04f      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d04b      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dfe:	f7fa f891 	bl	8001f24 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d302      	bcc.n	8007e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e04e      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0304 	and.w	r3, r3, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d037      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2b80      	cmp	r3, #128	@ 0x80
 8007e2a:	d034      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b40      	cmp	r3, #64	@ 0x40
 8007e30:	d031      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	f003 0308 	and.w	r3, r3, #8
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d110      	bne.n	8007e62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2208      	movs	r2, #8
 8007e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f839 	bl	8007ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2208      	movs	r2, #8
 8007e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e029      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e70:	d111      	bne.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f81f 	bl	8007ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e00f      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69da      	ldr	r2, [r3, #28]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	bf0c      	ite	eq
 8007ea6:	2301      	moveq	r3, #1
 8007ea8:	2300      	movne	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	461a      	mov	r2, r3
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d0a0      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b095      	sub	sp, #84	@ 0x54
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e6      	bne.n	8007ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3308      	adds	r3, #8
 8007f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8007f88 <UART_EndRxTransfer+0xc8>)
 8007f0e:	4013      	ands	r3, r2
 8007f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3308      	adds	r3, #8
 8007f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e5      	bne.n	8007efa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d118      	bne.n	8007f68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f023 0310 	bic.w	r3, r3, #16
 8007f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f54:	61bb      	str	r3, [r7, #24]
 8007f56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	6979      	ldr	r1, [r7, #20]
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	613b      	str	r3, [r7, #16]
   return(result);
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e6      	bne.n	8007f36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f7c:	bf00      	nop
 8007f7e:	3754      	adds	r7, #84	@ 0x54
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	effffffe 	.word	0xeffffffe

08007f8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e027      	b.n	8007ff2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2224      	movs	r2, #36	@ 0x24
 8007fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0201 	bic.w	r2, r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007fd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008012:	2302      	movs	r3, #2
 8008014:	e02d      	b.n	8008072 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2224      	movs	r2, #36	@ 0x24
 8008022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0201 	bic.w	r2, r2, #1
 800803c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f850 	bl	80080f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800808e:	2302      	movs	r3, #2
 8008090:	e02d      	b.n	80080ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2224      	movs	r2, #36	@ 0x24
 800809e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f812 	bl	80080f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2220      	movs	r2, #32
 80080e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008104:	2b00      	cmp	r3, #0
 8008106:	d108      	bne.n	800811a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008118:	e031      	b.n	800817e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800811a:	2310      	movs	r3, #16
 800811c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800811e:	2310      	movs	r3, #16
 8008120:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	0e5b      	lsrs	r3, r3, #25
 800812a:	b2db      	uxtb	r3, r3
 800812c:	f003 0307 	and.w	r3, r3, #7
 8008130:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	0f5b      	lsrs	r3, r3, #29
 800813a:	b2db      	uxtb	r3, r3
 800813c:	f003 0307 	and.w	r3, r3, #7
 8008140:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	7b3a      	ldrb	r2, [r7, #12]
 8008146:	4911      	ldr	r1, [pc, #68]	@ (800818c <UARTEx_SetNbDataToProcess+0x94>)
 8008148:	5c8a      	ldrb	r2, [r1, r2]
 800814a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800814e:	7b3a      	ldrb	r2, [r7, #12]
 8008150:	490f      	ldr	r1, [pc, #60]	@ (8008190 <UARTEx_SetNbDataToProcess+0x98>)
 8008152:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008154:	fb93 f3f2 	sdiv	r3, r3, r2
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	7b7a      	ldrb	r2, [r7, #13]
 8008164:	4909      	ldr	r1, [pc, #36]	@ (800818c <UARTEx_SetNbDataToProcess+0x94>)
 8008166:	5c8a      	ldrb	r2, [r1, r2]
 8008168:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800816c:	7b7a      	ldrb	r2, [r7, #13]
 800816e:	4908      	ldr	r1, [pc, #32]	@ (8008190 <UARTEx_SetNbDataToProcess+0x98>)
 8008170:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008172:	fb93 f3f2 	sdiv	r3, r3, r2
 8008176:	b29a      	uxth	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	08009850 	.word	0x08009850
 8008190:	08009858 	.word	0x08009858

08008194 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008198:	4b05      	ldr	r3, [pc, #20]	@ (80081b0 <SysTick_Handler+0x1c>)
 800819a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800819c:	f000 fa56 	bl	800864c <xTaskGetSchedulerState>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d001      	beq.n	80081aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081a6:	f000 f8f7 	bl	8008398 <xPortSysTickHandler>
  }
}
 80081aa:	bf00      	nop
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	e000e010 	.word	0xe000e010

080081b4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	601a      	str	r2, [r3, #0]
}
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6892      	ldr	r2, [r2, #8]
 8008212:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	6852      	ldr	r2, [r2, #4]
 800821c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d103      	bne.n	8008230 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	1e5a      	subs	r2, r3, #1
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008250:	4b07      	ldr	r3, [pc, #28]	@ (8008270 <pxCurrentTCBConst2>)
 8008252:	6819      	ldr	r1, [r3, #0]
 8008254:	6808      	ldr	r0, [r1, #0]
 8008256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825a:	f380 8809 	msr	PSP, r0
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f04f 0000 	mov.w	r0, #0
 8008266:	f380 8811 	msr	BASEPRI, r0
 800826a:	4770      	bx	lr
 800826c:	f3af 8000 	nop.w

08008270 <pxCurrentTCBConst2>:
 8008270:	24000338 	.word	0x24000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop

08008278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008292:	4b10      	ldr	r3, [pc, #64]	@ (80082d4 <vPortEnterCritical+0x5c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3301      	adds	r3, #1
 8008298:	4a0e      	ldr	r2, [pc, #56]	@ (80082d4 <vPortEnterCritical+0x5c>)
 800829a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800829c:	4b0d      	ldr	r3, [pc, #52]	@ (80082d4 <vPortEnterCritical+0x5c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d110      	bne.n	80082c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082a4:	4b0c      	ldr	r3, [pc, #48]	@ (80082d8 <vPortEnterCritical+0x60>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	603b      	str	r3, [r7, #0]
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	e7fd      	b.n	80082c2 <vPortEnterCritical+0x4a>
	}
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	24000010 	.word	0x24000010
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082e2:	4b12      	ldr	r3, [pc, #72]	@ (800832c <vPortExitCritical+0x50>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10b      	bne.n	8008302 <vPortExitCritical+0x26>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	607b      	str	r3, [r7, #4]
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	e7fd      	b.n	80082fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008302:	4b0a      	ldr	r3, [pc, #40]	@ (800832c <vPortExitCritical+0x50>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3b01      	subs	r3, #1
 8008308:	4a08      	ldr	r2, [pc, #32]	@ (800832c <vPortExitCritical+0x50>)
 800830a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800830c:	4b07      	ldr	r3, [pc, #28]	@ (800832c <vPortExitCritical+0x50>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d105      	bne.n	8008320 <vPortExitCritical+0x44>
 8008314:	2300      	movs	r3, #0
 8008316:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800831e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	24000010 	.word	0x24000010

08008330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008330:	f3ef 8009 	mrs	r0, PSP
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	4b15      	ldr	r3, [pc, #84]	@ (8008390 <pxCurrentTCBConst>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	f01e 0f10 	tst.w	lr, #16
 8008340:	bf08      	it	eq
 8008342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834a:	6010      	str	r0, [r2, #0]
 800834c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008354:	f380 8811 	msr	BASEPRI, r0
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f000 f8f6 	bl	8008550 <vTaskSwitchContext>
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	f380 8811 	msr	BASEPRI, r0
 800836c:	bc09      	pop	{r0, r3}
 800836e:	6819      	ldr	r1, [r3, #0]
 8008370:	6808      	ldr	r0, [r1, #0]
 8008372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008376:	f01e 0f10 	tst.w	lr, #16
 800837a:	bf08      	it	eq
 800837c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008380:	f380 8809 	msr	PSP, r0
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	f3af 8000 	nop.w

08008390 <pxCurrentTCBConst>:
 8008390:	24000338 	.word	0x24000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop

08008398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	607b      	str	r3, [r7, #4]
}
 80083b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083b2:	f000 f813 	bl	80083dc <xTaskIncrementTick>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083bc:	4b06      	ldr	r3, [pc, #24]	@ (80083d8 <xPortSysTickHandler+0x40>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	2300      	movs	r3, #0
 80083c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	f383 8811 	msr	BASEPRI, r3
}
 80083ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083e2:	2300      	movs	r3, #0
 80083e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008524 <xTaskIncrementTick+0x148>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 8090 	bne.w	8008510 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083f0:	4b4d      	ldr	r3, [pc, #308]	@ (8008528 <xTaskIncrementTick+0x14c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083f8:	4a4b      	ldr	r2, [pc, #300]	@ (8008528 <xTaskIncrementTick+0x14c>)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d121      	bne.n	8008448 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008404:	4b49      	ldr	r3, [pc, #292]	@ (800852c <xTaskIncrementTick+0x150>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00b      	beq.n	8008426 <xTaskIncrementTick+0x4a>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	603b      	str	r3, [r7, #0]
}
 8008420:	bf00      	nop
 8008422:	bf00      	nop
 8008424:	e7fd      	b.n	8008422 <xTaskIncrementTick+0x46>
 8008426:	4b41      	ldr	r3, [pc, #260]	@ (800852c <xTaskIncrementTick+0x150>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	4b40      	ldr	r3, [pc, #256]	@ (8008530 <xTaskIncrementTick+0x154>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a3e      	ldr	r2, [pc, #248]	@ (800852c <xTaskIncrementTick+0x150>)
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	4a3e      	ldr	r2, [pc, #248]	@ (8008530 <xTaskIncrementTick+0x154>)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	4b3e      	ldr	r3, [pc, #248]	@ (8008534 <xTaskIncrementTick+0x158>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3301      	adds	r3, #1
 8008440:	4a3c      	ldr	r2, [pc, #240]	@ (8008534 <xTaskIncrementTick+0x158>)
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	f000 f8e2 	bl	800860c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008448:	4b3b      	ldr	r3, [pc, #236]	@ (8008538 <xTaskIncrementTick+0x15c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	429a      	cmp	r2, r3
 8008450:	d349      	bcc.n	80084e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008452:	4b36      	ldr	r3, [pc, #216]	@ (800852c <xTaskIncrementTick+0x150>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d104      	bne.n	8008466 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800845c:	4b36      	ldr	r3, [pc, #216]	@ (8008538 <xTaskIncrementTick+0x15c>)
 800845e:	f04f 32ff 	mov.w	r2, #4294967295
 8008462:	601a      	str	r2, [r3, #0]
					break;
 8008464:	e03f      	b.n	80084e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008466:	4b31      	ldr	r3, [pc, #196]	@ (800852c <xTaskIncrementTick+0x150>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	429a      	cmp	r2, r3
 800847c:	d203      	bcs.n	8008486 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800847e:	4a2e      	ldr	r2, [pc, #184]	@ (8008538 <xTaskIncrementTick+0x15c>)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008484:	e02f      	b.n	80084e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	3304      	adds	r3, #4
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff feb6 	bl	80081fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008494:	2b00      	cmp	r3, #0
 8008496:	d004      	beq.n	80084a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	3318      	adds	r3, #24
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff fead 	bl	80081fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a6:	4b25      	ldr	r3, [pc, #148]	@ (800853c <xTaskIncrementTick+0x160>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d903      	bls.n	80084b6 <xTaskIncrementTick+0xda>
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b2:	4a22      	ldr	r2, [pc, #136]	@ (800853c <xTaskIncrementTick+0x160>)
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ba:	4613      	mov	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008540 <xTaskIncrementTick+0x164>)
 80084c4:	441a      	add	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4619      	mov	r1, r3
 80084cc:	4610      	mov	r0, r2
 80084ce:	f7ff fe71 	bl	80081b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008544 <xTaskIncrementTick+0x168>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084dc:	429a      	cmp	r2, r3
 80084de:	d3b8      	bcc.n	8008452 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084e0:	2301      	movs	r3, #1
 80084e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084e4:	e7b5      	b.n	8008452 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084e6:	4b17      	ldr	r3, [pc, #92]	@ (8008544 <xTaskIncrementTick+0x168>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ec:	4914      	ldr	r1, [pc, #80]	@ (8008540 <xTaskIncrementTick+0x164>)
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d901      	bls.n	8008502 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80084fe:	2301      	movs	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008502:	4b11      	ldr	r3, [pc, #68]	@ (8008548 <xTaskIncrementTick+0x16c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d007      	beq.n	800851a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800850a:	2301      	movs	r3, #1
 800850c:	617b      	str	r3, [r7, #20]
 800850e:	e004      	b.n	800851a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008510:	4b0e      	ldr	r3, [pc, #56]	@ (800854c <xTaskIncrementTick+0x170>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	4a0d      	ldr	r2, [pc, #52]	@ (800854c <xTaskIncrementTick+0x170>)
 8008518:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800851a:	697b      	ldr	r3, [r7, #20]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	240007c0 	.word	0x240007c0
 8008528:	240007a4 	.word	0x240007a4
 800852c:	2400079c 	.word	0x2400079c
 8008530:	240007a0 	.word	0x240007a0
 8008534:	240007b8 	.word	0x240007b8
 8008538:	240007bc 	.word	0x240007bc
 800853c:	240007a8 	.word	0x240007a8
 8008540:	2400033c 	.word	0x2400033c
 8008544:	24000338 	.word	0x24000338
 8008548:	240007b4 	.word	0x240007b4
 800854c:	240007b0 	.word	0x240007b0

08008550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008556:	4b28      	ldr	r3, [pc, #160]	@ (80085f8 <vTaskSwitchContext+0xa8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800855e:	4b27      	ldr	r3, [pc, #156]	@ (80085fc <vTaskSwitchContext+0xac>)
 8008560:	2201      	movs	r2, #1
 8008562:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008564:	e042      	b.n	80085ec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008566:	4b25      	ldr	r3, [pc, #148]	@ (80085fc <vTaskSwitchContext+0xac>)
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800856c:	4b24      	ldr	r3, [pc, #144]	@ (8008600 <vTaskSwitchContext+0xb0>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	e011      	b.n	8008598 <vTaskSwitchContext+0x48>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10b      	bne.n	8008592 <vTaskSwitchContext+0x42>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	607b      	str	r3, [r7, #4]
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	e7fd      	b.n	800858e <vTaskSwitchContext+0x3e>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3b01      	subs	r3, #1
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	491a      	ldr	r1, [pc, #104]	@ (8008604 <vTaskSwitchContext+0xb4>)
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	4613      	mov	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	440b      	add	r3, r1
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0e3      	beq.n	8008574 <vTaskSwitchContext+0x24>
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4a13      	ldr	r2, [pc, #76]	@ (8008604 <vTaskSwitchContext+0xb4>)
 80085b8:	4413      	add	r3, r2
 80085ba:	60bb      	str	r3, [r7, #8]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	3308      	adds	r3, #8
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d104      	bne.n	80085dc <vTaskSwitchContext+0x8c>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	605a      	str	r2, [r3, #4]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	4a09      	ldr	r2, [pc, #36]	@ (8008608 <vTaskSwitchContext+0xb8>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4a06      	ldr	r2, [pc, #24]	@ (8008600 <vTaskSwitchContext+0xb0>)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6013      	str	r3, [r2, #0]
}
 80085ec:	bf00      	nop
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	240007c0 	.word	0x240007c0
 80085fc:	240007b4 	.word	0x240007b4
 8008600:	240007a8 	.word	0x240007a8
 8008604:	2400033c 	.word	0x2400033c
 8008608:	24000338 	.word	0x24000338

0800860c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008612:	4b0c      	ldr	r3, [pc, #48]	@ (8008644 <prvResetNextTaskUnblockTime+0x38>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d104      	bne.n	8008626 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800861c:	4b0a      	ldr	r3, [pc, #40]	@ (8008648 <prvResetNextTaskUnblockTime+0x3c>)
 800861e:	f04f 32ff 	mov.w	r2, #4294967295
 8008622:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008624:	e008      	b.n	8008638 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008626:	4b07      	ldr	r3, [pc, #28]	@ (8008644 <prvResetNextTaskUnblockTime+0x38>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	4a04      	ldr	r2, [pc, #16]	@ (8008648 <prvResetNextTaskUnblockTime+0x3c>)
 8008636:	6013      	str	r3, [r2, #0]
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	2400079c 	.word	0x2400079c
 8008648:	240007bc 	.word	0x240007bc

0800864c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008652:	4b0b      	ldr	r3, [pc, #44]	@ (8008680 <xTaskGetSchedulerState+0x34>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d102      	bne.n	8008660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800865a:	2301      	movs	r3, #1
 800865c:	607b      	str	r3, [r7, #4]
 800865e:	e008      	b.n	8008672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008660:	4b08      	ldr	r3, [pc, #32]	@ (8008684 <xTaskGetSchedulerState+0x38>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008668:	2302      	movs	r3, #2
 800866a:	607b      	str	r3, [r7, #4]
 800866c:	e001      	b.n	8008672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800866e:	2300      	movs	r3, #0
 8008670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008672:	687b      	ldr	r3, [r7, #4]
	}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	240007ac 	.word	0x240007ac
 8008684:	240007c0 	.word	0x240007c0

08008688 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08a      	sub	sp, #40	@ 0x28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	4613      	mov	r3, r2
 8008696:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008698:	2301      	movs	r3, #1
 800869a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10b      	bne.n	80086ba <xTaskGenericNotify+0x32>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	61bb      	str	r3, [r7, #24]
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	e7fd      	b.n	80086b6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80086be:	f7ff fddb 	bl	8008278 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80086d6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	2202      	movs	r2, #2
 80086dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	d827      	bhi.n	8008736 <xTaskGenericNotify+0xae>
 80086e6:	a201      	add	r2, pc, #4	@ (adr r2, 80086ec <xTaskGenericNotify+0x64>)
 80086e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ec:	08008759 	.word	0x08008759
 80086f0:	08008701 	.word	0x08008701
 80086f4:	0800870f 	.word	0x0800870f
 80086f8:	0800871b 	.word	0x0800871b
 80086fc:	08008723 	.word	0x08008723
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	431a      	orrs	r2, r3
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800870c:	e027      	b.n	800875e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8008718:	e021      	b.n	800875e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8008720:	e01d      	b.n	800875e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008722:	7ffb      	ldrb	r3, [r7, #31]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d003      	beq.n	8008730 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800872e:	e016      	b.n	800875e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8008730:	2300      	movs	r3, #0
 8008732:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8008734:	e013      	b.n	800875e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873e:	d00d      	beq.n	800875c <xTaskGenericNotify+0xd4>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	617b      	str	r3, [r7, #20]
}
 8008752:	bf00      	nop
 8008754:	bf00      	nop
 8008756:	e7fd      	b.n	8008754 <xTaskGenericNotify+0xcc>
					break;
 8008758:	bf00      	nop
 800875a:	e000      	b.n	800875e <xTaskGenericNotify+0xd6>

					break;
 800875c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800875e:	7ffb      	ldrb	r3, [r7, #31]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d13b      	bne.n	80087dc <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	3304      	adds	r3, #4
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fd47 	bl	80081fc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008772:	4b1e      	ldr	r3, [pc, #120]	@ (80087ec <xTaskGenericNotify+0x164>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d903      	bls.n	8008782 <xTaskGenericNotify+0xfa>
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877e:	4a1b      	ldr	r2, [pc, #108]	@ (80087ec <xTaskGenericNotify+0x164>)
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4a18      	ldr	r2, [pc, #96]	@ (80087f0 <xTaskGenericNotify+0x168>)
 8008790:	441a      	add	r2, r3
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	3304      	adds	r3, #4
 8008796:	4619      	mov	r1, r3
 8008798:	4610      	mov	r0, r2
 800879a:	f7ff fd0b 	bl	80081b4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00b      	beq.n	80087be <xTaskGenericNotify+0x136>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	613b      	str	r3, [r7, #16]
}
 80087b8:	bf00      	nop
 80087ba:	bf00      	nop
 80087bc:	e7fd      	b.n	80087ba <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c2:	4b0c      	ldr	r3, [pc, #48]	@ (80087f4 <xTaskGenericNotify+0x16c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d907      	bls.n	80087dc <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80087cc:	4b0a      	ldr	r3, [pc, #40]	@ (80087f8 <xTaskGenericNotify+0x170>)
 80087ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80087dc:	f7ff fd7e 	bl	80082dc <vPortExitCritical>

		return xReturn;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3728      	adds	r7, #40	@ 0x28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	240007a8 	.word	0x240007a8
 80087f0:	2400033c 	.word	0x2400033c
 80087f4:	24000338 	.word	0x24000338
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <std>:
 80087fc:	2300      	movs	r3, #0
 80087fe:	b510      	push	{r4, lr}
 8008800:	4604      	mov	r4, r0
 8008802:	e9c0 3300 	strd	r3, r3, [r0]
 8008806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800880a:	6083      	str	r3, [r0, #8]
 800880c:	8181      	strh	r1, [r0, #12]
 800880e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008810:	81c2      	strh	r2, [r0, #14]
 8008812:	6183      	str	r3, [r0, #24]
 8008814:	4619      	mov	r1, r3
 8008816:	2208      	movs	r2, #8
 8008818:	305c      	adds	r0, #92	@ 0x5c
 800881a:	f000 f9f9 	bl	8008c10 <memset>
 800881e:	4b0d      	ldr	r3, [pc, #52]	@ (8008854 <std+0x58>)
 8008820:	6263      	str	r3, [r4, #36]	@ 0x24
 8008822:	4b0d      	ldr	r3, [pc, #52]	@ (8008858 <std+0x5c>)
 8008824:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008826:	4b0d      	ldr	r3, [pc, #52]	@ (800885c <std+0x60>)
 8008828:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800882a:	4b0d      	ldr	r3, [pc, #52]	@ (8008860 <std+0x64>)
 800882c:	6323      	str	r3, [r4, #48]	@ 0x30
 800882e:	4b0d      	ldr	r3, [pc, #52]	@ (8008864 <std+0x68>)
 8008830:	6224      	str	r4, [r4, #32]
 8008832:	429c      	cmp	r4, r3
 8008834:	d006      	beq.n	8008844 <std+0x48>
 8008836:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800883a:	4294      	cmp	r4, r2
 800883c:	d002      	beq.n	8008844 <std+0x48>
 800883e:	33d0      	adds	r3, #208	@ 0xd0
 8008840:	429c      	cmp	r4, r3
 8008842:	d105      	bne.n	8008850 <std+0x54>
 8008844:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800884c:	f000 ba58 	b.w	8008d00 <__retarget_lock_init_recursive>
 8008850:	bd10      	pop	{r4, pc}
 8008852:	bf00      	nop
 8008854:	08008a61 	.word	0x08008a61
 8008858:	08008a83 	.word	0x08008a83
 800885c:	08008abb 	.word	0x08008abb
 8008860:	08008adf 	.word	0x08008adf
 8008864:	240007c4 	.word	0x240007c4

08008868 <stdio_exit_handler>:
 8008868:	4a02      	ldr	r2, [pc, #8]	@ (8008874 <stdio_exit_handler+0xc>)
 800886a:	4903      	ldr	r1, [pc, #12]	@ (8008878 <stdio_exit_handler+0x10>)
 800886c:	4803      	ldr	r0, [pc, #12]	@ (800887c <stdio_exit_handler+0x14>)
 800886e:	f000 b869 	b.w	8008944 <_fwalk_sglue>
 8008872:	bf00      	nop
 8008874:	24000014 	.word	0x24000014
 8008878:	080095b9 	.word	0x080095b9
 800887c:	24000024 	.word	0x24000024

08008880 <cleanup_stdio>:
 8008880:	6841      	ldr	r1, [r0, #4]
 8008882:	4b0c      	ldr	r3, [pc, #48]	@ (80088b4 <cleanup_stdio+0x34>)
 8008884:	4299      	cmp	r1, r3
 8008886:	b510      	push	{r4, lr}
 8008888:	4604      	mov	r4, r0
 800888a:	d001      	beq.n	8008890 <cleanup_stdio+0x10>
 800888c:	f000 fe94 	bl	80095b8 <_fflush_r>
 8008890:	68a1      	ldr	r1, [r4, #8]
 8008892:	4b09      	ldr	r3, [pc, #36]	@ (80088b8 <cleanup_stdio+0x38>)
 8008894:	4299      	cmp	r1, r3
 8008896:	d002      	beq.n	800889e <cleanup_stdio+0x1e>
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fe8d 	bl	80095b8 <_fflush_r>
 800889e:	68e1      	ldr	r1, [r4, #12]
 80088a0:	4b06      	ldr	r3, [pc, #24]	@ (80088bc <cleanup_stdio+0x3c>)
 80088a2:	4299      	cmp	r1, r3
 80088a4:	d004      	beq.n	80088b0 <cleanup_stdio+0x30>
 80088a6:	4620      	mov	r0, r4
 80088a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ac:	f000 be84 	b.w	80095b8 <_fflush_r>
 80088b0:	bd10      	pop	{r4, pc}
 80088b2:	bf00      	nop
 80088b4:	240007c4 	.word	0x240007c4
 80088b8:	2400082c 	.word	0x2400082c
 80088bc:	24000894 	.word	0x24000894

080088c0 <global_stdio_init.part.0>:
 80088c0:	b510      	push	{r4, lr}
 80088c2:	4b0b      	ldr	r3, [pc, #44]	@ (80088f0 <global_stdio_init.part.0+0x30>)
 80088c4:	4c0b      	ldr	r4, [pc, #44]	@ (80088f4 <global_stdio_init.part.0+0x34>)
 80088c6:	4a0c      	ldr	r2, [pc, #48]	@ (80088f8 <global_stdio_init.part.0+0x38>)
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	4620      	mov	r0, r4
 80088cc:	2200      	movs	r2, #0
 80088ce:	2104      	movs	r1, #4
 80088d0:	f7ff ff94 	bl	80087fc <std>
 80088d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088d8:	2201      	movs	r2, #1
 80088da:	2109      	movs	r1, #9
 80088dc:	f7ff ff8e 	bl	80087fc <std>
 80088e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80088e4:	2202      	movs	r2, #2
 80088e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ea:	2112      	movs	r1, #18
 80088ec:	f7ff bf86 	b.w	80087fc <std>
 80088f0:	240008fc 	.word	0x240008fc
 80088f4:	240007c4 	.word	0x240007c4
 80088f8:	08008869 	.word	0x08008869

080088fc <__sfp_lock_acquire>:
 80088fc:	4801      	ldr	r0, [pc, #4]	@ (8008904 <__sfp_lock_acquire+0x8>)
 80088fe:	f000 ba00 	b.w	8008d02 <__retarget_lock_acquire_recursive>
 8008902:	bf00      	nop
 8008904:	24000905 	.word	0x24000905

08008908 <__sfp_lock_release>:
 8008908:	4801      	ldr	r0, [pc, #4]	@ (8008910 <__sfp_lock_release+0x8>)
 800890a:	f000 b9fb 	b.w	8008d04 <__retarget_lock_release_recursive>
 800890e:	bf00      	nop
 8008910:	24000905 	.word	0x24000905

08008914 <__sinit>:
 8008914:	b510      	push	{r4, lr}
 8008916:	4604      	mov	r4, r0
 8008918:	f7ff fff0 	bl	80088fc <__sfp_lock_acquire>
 800891c:	6a23      	ldr	r3, [r4, #32]
 800891e:	b11b      	cbz	r3, 8008928 <__sinit+0x14>
 8008920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008924:	f7ff bff0 	b.w	8008908 <__sfp_lock_release>
 8008928:	4b04      	ldr	r3, [pc, #16]	@ (800893c <__sinit+0x28>)
 800892a:	6223      	str	r3, [r4, #32]
 800892c:	4b04      	ldr	r3, [pc, #16]	@ (8008940 <__sinit+0x2c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1f5      	bne.n	8008920 <__sinit+0xc>
 8008934:	f7ff ffc4 	bl	80088c0 <global_stdio_init.part.0>
 8008938:	e7f2      	b.n	8008920 <__sinit+0xc>
 800893a:	bf00      	nop
 800893c:	08008881 	.word	0x08008881
 8008940:	240008fc 	.word	0x240008fc

08008944 <_fwalk_sglue>:
 8008944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008948:	4607      	mov	r7, r0
 800894a:	4688      	mov	r8, r1
 800894c:	4614      	mov	r4, r2
 800894e:	2600      	movs	r6, #0
 8008950:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008954:	f1b9 0901 	subs.w	r9, r9, #1
 8008958:	d505      	bpl.n	8008966 <_fwalk_sglue+0x22>
 800895a:	6824      	ldr	r4, [r4, #0]
 800895c:	2c00      	cmp	r4, #0
 800895e:	d1f7      	bne.n	8008950 <_fwalk_sglue+0xc>
 8008960:	4630      	mov	r0, r6
 8008962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008966:	89ab      	ldrh	r3, [r5, #12]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d907      	bls.n	800897c <_fwalk_sglue+0x38>
 800896c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008970:	3301      	adds	r3, #1
 8008972:	d003      	beq.n	800897c <_fwalk_sglue+0x38>
 8008974:	4629      	mov	r1, r5
 8008976:	4638      	mov	r0, r7
 8008978:	47c0      	blx	r8
 800897a:	4306      	orrs	r6, r0
 800897c:	3568      	adds	r5, #104	@ 0x68
 800897e:	e7e9      	b.n	8008954 <_fwalk_sglue+0x10>

08008980 <iprintf>:
 8008980:	b40f      	push	{r0, r1, r2, r3}
 8008982:	b507      	push	{r0, r1, r2, lr}
 8008984:	4906      	ldr	r1, [pc, #24]	@ (80089a0 <iprintf+0x20>)
 8008986:	ab04      	add	r3, sp, #16
 8008988:	6808      	ldr	r0, [r1, #0]
 800898a:	f853 2b04 	ldr.w	r2, [r3], #4
 800898e:	6881      	ldr	r1, [r0, #8]
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	f000 fae9 	bl	8008f68 <_vfiprintf_r>
 8008996:	b003      	add	sp, #12
 8008998:	f85d eb04 	ldr.w	lr, [sp], #4
 800899c:	b004      	add	sp, #16
 800899e:	4770      	bx	lr
 80089a0:	24000020 	.word	0x24000020

080089a4 <_puts_r>:
 80089a4:	6a03      	ldr	r3, [r0, #32]
 80089a6:	b570      	push	{r4, r5, r6, lr}
 80089a8:	6884      	ldr	r4, [r0, #8]
 80089aa:	4605      	mov	r5, r0
 80089ac:	460e      	mov	r6, r1
 80089ae:	b90b      	cbnz	r3, 80089b4 <_puts_r+0x10>
 80089b0:	f7ff ffb0 	bl	8008914 <__sinit>
 80089b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089b6:	07db      	lsls	r3, r3, #31
 80089b8:	d405      	bmi.n	80089c6 <_puts_r+0x22>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	0598      	lsls	r0, r3, #22
 80089be:	d402      	bmi.n	80089c6 <_puts_r+0x22>
 80089c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089c2:	f000 f99e 	bl	8008d02 <__retarget_lock_acquire_recursive>
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	0719      	lsls	r1, r3, #28
 80089ca:	d502      	bpl.n	80089d2 <_puts_r+0x2e>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d135      	bne.n	8008a3e <_puts_r+0x9a>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4628      	mov	r0, r5
 80089d6:	f000 f8c5 	bl	8008b64 <__swsetup_r>
 80089da:	b380      	cbz	r0, 8008a3e <_puts_r+0x9a>
 80089dc:	f04f 35ff 	mov.w	r5, #4294967295
 80089e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089e2:	07da      	lsls	r2, r3, #31
 80089e4:	d405      	bmi.n	80089f2 <_puts_r+0x4e>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	059b      	lsls	r3, r3, #22
 80089ea:	d402      	bmi.n	80089f2 <_puts_r+0x4e>
 80089ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089ee:	f000 f989 	bl	8008d04 <__retarget_lock_release_recursive>
 80089f2:	4628      	mov	r0, r5
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	da04      	bge.n	8008a04 <_puts_r+0x60>
 80089fa:	69a2      	ldr	r2, [r4, #24]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	dc17      	bgt.n	8008a30 <_puts_r+0x8c>
 8008a00:	290a      	cmp	r1, #10
 8008a02:	d015      	beq.n	8008a30 <_puts_r+0x8c>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	6022      	str	r2, [r4, #0]
 8008a0a:	7019      	strb	r1, [r3, #0]
 8008a0c:	68a3      	ldr	r3, [r4, #8]
 8008a0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a12:	3b01      	subs	r3, #1
 8008a14:	60a3      	str	r3, [r4, #8]
 8008a16:	2900      	cmp	r1, #0
 8008a18:	d1ed      	bne.n	80089f6 <_puts_r+0x52>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	da11      	bge.n	8008a42 <_puts_r+0x9e>
 8008a1e:	4622      	mov	r2, r4
 8008a20:	210a      	movs	r1, #10
 8008a22:	4628      	mov	r0, r5
 8008a24:	f000 f85f 	bl	8008ae6 <__swbuf_r>
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d0d7      	beq.n	80089dc <_puts_r+0x38>
 8008a2c:	250a      	movs	r5, #10
 8008a2e:	e7d7      	b.n	80089e0 <_puts_r+0x3c>
 8008a30:	4622      	mov	r2, r4
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 f857 	bl	8008ae6 <__swbuf_r>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d1e7      	bne.n	8008a0c <_puts_r+0x68>
 8008a3c:	e7ce      	b.n	80089dc <_puts_r+0x38>
 8008a3e:	3e01      	subs	r6, #1
 8008a40:	e7e4      	b.n	8008a0c <_puts_r+0x68>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	6022      	str	r2, [r4, #0]
 8008a48:	220a      	movs	r2, #10
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	e7ee      	b.n	8008a2c <_puts_r+0x88>
	...

08008a50 <puts>:
 8008a50:	4b02      	ldr	r3, [pc, #8]	@ (8008a5c <puts+0xc>)
 8008a52:	4601      	mov	r1, r0
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	f7ff bfa5 	b.w	80089a4 <_puts_r>
 8008a5a:	bf00      	nop
 8008a5c:	24000020 	.word	0x24000020

08008a60 <__sread>:
 8008a60:	b510      	push	{r4, lr}
 8008a62:	460c      	mov	r4, r1
 8008a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a68:	f000 f8fc 	bl	8008c64 <_read_r>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	bfab      	itete	ge
 8008a70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a72:	89a3      	ldrhlt	r3, [r4, #12]
 8008a74:	181b      	addge	r3, r3, r0
 8008a76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a7a:	bfac      	ite	ge
 8008a7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a7e:	81a3      	strhlt	r3, [r4, #12]
 8008a80:	bd10      	pop	{r4, pc}

08008a82 <__swrite>:
 8008a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a86:	461f      	mov	r7, r3
 8008a88:	898b      	ldrh	r3, [r1, #12]
 8008a8a:	05db      	lsls	r3, r3, #23
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	4616      	mov	r6, r2
 8008a92:	d505      	bpl.n	8008aa0 <__swrite+0x1e>
 8008a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a98:	2302      	movs	r3, #2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f000 f8d0 	bl	8008c40 <_lseek_r>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	4632      	mov	r2, r6
 8008aae:	463b      	mov	r3, r7
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab6:	f000 b8e7 	b.w	8008c88 <_write_r>

08008aba <__sseek>:
 8008aba:	b510      	push	{r4, lr}
 8008abc:	460c      	mov	r4, r1
 8008abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac2:	f000 f8bd 	bl	8008c40 <_lseek_r>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	89a3      	ldrh	r3, [r4, #12]
 8008aca:	bf15      	itete	ne
 8008acc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ace:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ad2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008ad6:	81a3      	strheq	r3, [r4, #12]
 8008ad8:	bf18      	it	ne
 8008ada:	81a3      	strhne	r3, [r4, #12]
 8008adc:	bd10      	pop	{r4, pc}

08008ade <__sclose>:
 8008ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae2:	f000 b89d 	b.w	8008c20 <_close_r>

08008ae6 <__swbuf_r>:
 8008ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae8:	460e      	mov	r6, r1
 8008aea:	4614      	mov	r4, r2
 8008aec:	4605      	mov	r5, r0
 8008aee:	b118      	cbz	r0, 8008af8 <__swbuf_r+0x12>
 8008af0:	6a03      	ldr	r3, [r0, #32]
 8008af2:	b90b      	cbnz	r3, 8008af8 <__swbuf_r+0x12>
 8008af4:	f7ff ff0e 	bl	8008914 <__sinit>
 8008af8:	69a3      	ldr	r3, [r4, #24]
 8008afa:	60a3      	str	r3, [r4, #8]
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	071a      	lsls	r2, r3, #28
 8008b00:	d501      	bpl.n	8008b06 <__swbuf_r+0x20>
 8008b02:	6923      	ldr	r3, [r4, #16]
 8008b04:	b943      	cbnz	r3, 8008b18 <__swbuf_r+0x32>
 8008b06:	4621      	mov	r1, r4
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f000 f82b 	bl	8008b64 <__swsetup_r>
 8008b0e:	b118      	cbz	r0, 8008b18 <__swbuf_r+0x32>
 8008b10:	f04f 37ff 	mov.w	r7, #4294967295
 8008b14:	4638      	mov	r0, r7
 8008b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	6922      	ldr	r2, [r4, #16]
 8008b1c:	1a98      	subs	r0, r3, r2
 8008b1e:	6963      	ldr	r3, [r4, #20]
 8008b20:	b2f6      	uxtb	r6, r6
 8008b22:	4283      	cmp	r3, r0
 8008b24:	4637      	mov	r7, r6
 8008b26:	dc05      	bgt.n	8008b34 <__swbuf_r+0x4e>
 8008b28:	4621      	mov	r1, r4
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 fd44 	bl	80095b8 <_fflush_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d1ed      	bne.n	8008b10 <__swbuf_r+0x2a>
 8008b34:	68a3      	ldr	r3, [r4, #8]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	60a3      	str	r3, [r4, #8]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	6022      	str	r2, [r4, #0]
 8008b40:	701e      	strb	r6, [r3, #0]
 8008b42:	6962      	ldr	r2, [r4, #20]
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d004      	beq.n	8008b54 <__swbuf_r+0x6e>
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	07db      	lsls	r3, r3, #31
 8008b4e:	d5e1      	bpl.n	8008b14 <__swbuf_r+0x2e>
 8008b50:	2e0a      	cmp	r6, #10
 8008b52:	d1df      	bne.n	8008b14 <__swbuf_r+0x2e>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4628      	mov	r0, r5
 8008b58:	f000 fd2e 	bl	80095b8 <_fflush_r>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d0d9      	beq.n	8008b14 <__swbuf_r+0x2e>
 8008b60:	e7d6      	b.n	8008b10 <__swbuf_r+0x2a>
	...

08008b64 <__swsetup_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4b29      	ldr	r3, [pc, #164]	@ (8008c0c <__swsetup_r+0xa8>)
 8008b68:	4605      	mov	r5, r0
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	b118      	cbz	r0, 8008b78 <__swsetup_r+0x14>
 8008b70:	6a03      	ldr	r3, [r0, #32]
 8008b72:	b90b      	cbnz	r3, 8008b78 <__swsetup_r+0x14>
 8008b74:	f7ff fece 	bl	8008914 <__sinit>
 8008b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7c:	0719      	lsls	r1, r3, #28
 8008b7e:	d422      	bmi.n	8008bc6 <__swsetup_r+0x62>
 8008b80:	06da      	lsls	r2, r3, #27
 8008b82:	d407      	bmi.n	8008b94 <__swsetup_r+0x30>
 8008b84:	2209      	movs	r2, #9
 8008b86:	602a      	str	r2, [r5, #0]
 8008b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b8c:	81a3      	strh	r3, [r4, #12]
 8008b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b92:	e033      	b.n	8008bfc <__swsetup_r+0x98>
 8008b94:	0758      	lsls	r0, r3, #29
 8008b96:	d512      	bpl.n	8008bbe <__swsetup_r+0x5a>
 8008b98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b9a:	b141      	cbz	r1, 8008bae <__swsetup_r+0x4a>
 8008b9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ba0:	4299      	cmp	r1, r3
 8008ba2:	d002      	beq.n	8008baa <__swsetup_r+0x46>
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	f000 f8bd 	bl	8008d24 <_free_r>
 8008baa:	2300      	movs	r3, #0
 8008bac:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	f043 0308 	orr.w	r3, r3, #8
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	6923      	ldr	r3, [r4, #16]
 8008bc8:	b94b      	cbnz	r3, 8008bde <__swsetup_r+0x7a>
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bd4:	d003      	beq.n	8008bde <__swsetup_r+0x7a>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f000 fd3b 	bl	8009654 <__smakebuf_r>
 8008bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be2:	f013 0201 	ands.w	r2, r3, #1
 8008be6:	d00a      	beq.n	8008bfe <__swsetup_r+0x9a>
 8008be8:	2200      	movs	r2, #0
 8008bea:	60a2      	str	r2, [r4, #8]
 8008bec:	6962      	ldr	r2, [r4, #20]
 8008bee:	4252      	negs	r2, r2
 8008bf0:	61a2      	str	r2, [r4, #24]
 8008bf2:	6922      	ldr	r2, [r4, #16]
 8008bf4:	b942      	cbnz	r2, 8008c08 <__swsetup_r+0xa4>
 8008bf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008bfa:	d1c5      	bne.n	8008b88 <__swsetup_r+0x24>
 8008bfc:	bd38      	pop	{r3, r4, r5, pc}
 8008bfe:	0799      	lsls	r1, r3, #30
 8008c00:	bf58      	it	pl
 8008c02:	6962      	ldrpl	r2, [r4, #20]
 8008c04:	60a2      	str	r2, [r4, #8]
 8008c06:	e7f4      	b.n	8008bf2 <__swsetup_r+0x8e>
 8008c08:	2000      	movs	r0, #0
 8008c0a:	e7f7      	b.n	8008bfc <__swsetup_r+0x98>
 8008c0c:	24000020 	.word	0x24000020

08008c10 <memset>:
 8008c10:	4402      	add	r2, r0
 8008c12:	4603      	mov	r3, r0
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d100      	bne.n	8008c1a <memset+0xa>
 8008c18:	4770      	bx	lr
 8008c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c1e:	e7f9      	b.n	8008c14 <memset+0x4>

08008c20 <_close_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4d06      	ldr	r5, [pc, #24]	@ (8008c3c <_close_r+0x1c>)
 8008c24:	2300      	movs	r3, #0
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	602b      	str	r3, [r5, #0]
 8008c2c:	f7f9 f893 	bl	8001d56 <_close>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_close_r+0x1a>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_close_r+0x1a>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	24000900 	.word	0x24000900

08008c40 <_lseek_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4d07      	ldr	r5, [pc, #28]	@ (8008c60 <_lseek_r+0x20>)
 8008c44:	4604      	mov	r4, r0
 8008c46:	4608      	mov	r0, r1
 8008c48:	4611      	mov	r1, r2
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	602a      	str	r2, [r5, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f7f9 f8a8 	bl	8001da4 <_lseek>
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	d102      	bne.n	8008c5e <_lseek_r+0x1e>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	b103      	cbz	r3, 8008c5e <_lseek_r+0x1e>
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	24000900 	.word	0x24000900

08008c64 <_read_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d07      	ldr	r5, [pc, #28]	@ (8008c84 <_read_r+0x20>)
 8008c68:	4604      	mov	r4, r0
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	2200      	movs	r2, #0
 8008c70:	602a      	str	r2, [r5, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	f7f9 f836 	bl	8001ce4 <_read>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_read_r+0x1e>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_read_r+0x1e>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	24000900 	.word	0x24000900

08008c88 <_write_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4d07      	ldr	r5, [pc, #28]	@ (8008ca8 <_write_r+0x20>)
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	4608      	mov	r0, r1
 8008c90:	4611      	mov	r1, r2
 8008c92:	2200      	movs	r2, #0
 8008c94:	602a      	str	r2, [r5, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	f7f9 f841 	bl	8001d1e <_write>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d102      	bne.n	8008ca6 <_write_r+0x1e>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	b103      	cbz	r3, 8008ca6 <_write_r+0x1e>
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	24000900 	.word	0x24000900

08008cac <__errno>:
 8008cac:	4b01      	ldr	r3, [pc, #4]	@ (8008cb4 <__errno+0x8>)
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	24000020 	.word	0x24000020

08008cb8 <__libc_init_array>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	4d0d      	ldr	r5, [pc, #52]	@ (8008cf0 <__libc_init_array+0x38>)
 8008cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8008cf4 <__libc_init_array+0x3c>)
 8008cbe:	1b64      	subs	r4, r4, r5
 8008cc0:	10a4      	asrs	r4, r4, #2
 8008cc2:	2600      	movs	r6, #0
 8008cc4:	42a6      	cmp	r6, r4
 8008cc6:	d109      	bne.n	8008cdc <__libc_init_array+0x24>
 8008cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8008cf8 <__libc_init_array+0x40>)
 8008cca:	4c0c      	ldr	r4, [pc, #48]	@ (8008cfc <__libc_init_array+0x44>)
 8008ccc:	f000 fd30 	bl	8009730 <_init>
 8008cd0:	1b64      	subs	r4, r4, r5
 8008cd2:	10a4      	asrs	r4, r4, #2
 8008cd4:	2600      	movs	r6, #0
 8008cd6:	42a6      	cmp	r6, r4
 8008cd8:	d105      	bne.n	8008ce6 <__libc_init_array+0x2e>
 8008cda:	bd70      	pop	{r4, r5, r6, pc}
 8008cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce0:	4798      	blx	r3
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	e7ee      	b.n	8008cc4 <__libc_init_array+0xc>
 8008ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cea:	4798      	blx	r3
 8008cec:	3601      	adds	r6, #1
 8008cee:	e7f2      	b.n	8008cd6 <__libc_init_array+0x1e>
 8008cf0:	0800989c 	.word	0x0800989c
 8008cf4:	0800989c 	.word	0x0800989c
 8008cf8:	0800989c 	.word	0x0800989c
 8008cfc:	080098a0 	.word	0x080098a0

08008d00 <__retarget_lock_init_recursive>:
 8008d00:	4770      	bx	lr

08008d02 <__retarget_lock_acquire_recursive>:
 8008d02:	4770      	bx	lr

08008d04 <__retarget_lock_release_recursive>:
 8008d04:	4770      	bx	lr

08008d06 <memcpy>:
 8008d06:	440a      	add	r2, r1
 8008d08:	4291      	cmp	r1, r2
 8008d0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d0e:	d100      	bne.n	8008d12 <memcpy+0xc>
 8008d10:	4770      	bx	lr
 8008d12:	b510      	push	{r4, lr}
 8008d14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d1c:	4291      	cmp	r1, r2
 8008d1e:	d1f9      	bne.n	8008d14 <memcpy+0xe>
 8008d20:	bd10      	pop	{r4, pc}
	...

08008d24 <_free_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4605      	mov	r5, r0
 8008d28:	2900      	cmp	r1, #0
 8008d2a:	d041      	beq.n	8008db0 <_free_r+0x8c>
 8008d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d30:	1f0c      	subs	r4, r1, #4
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	bfb8      	it	lt
 8008d36:	18e4      	addlt	r4, r4, r3
 8008d38:	f000 f8e0 	bl	8008efc <__malloc_lock>
 8008d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8008db4 <_free_r+0x90>)
 8008d3e:	6813      	ldr	r3, [r2, #0]
 8008d40:	b933      	cbnz	r3, 8008d50 <_free_r+0x2c>
 8008d42:	6063      	str	r3, [r4, #4]
 8008d44:	6014      	str	r4, [r2, #0]
 8008d46:	4628      	mov	r0, r5
 8008d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d4c:	f000 b8dc 	b.w	8008f08 <__malloc_unlock>
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d908      	bls.n	8008d66 <_free_r+0x42>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	1821      	adds	r1, r4, r0
 8008d58:	428b      	cmp	r3, r1
 8008d5a:	bf01      	itttt	eq
 8008d5c:	6819      	ldreq	r1, [r3, #0]
 8008d5e:	685b      	ldreq	r3, [r3, #4]
 8008d60:	1809      	addeq	r1, r1, r0
 8008d62:	6021      	streq	r1, [r4, #0]
 8008d64:	e7ed      	b.n	8008d42 <_free_r+0x1e>
 8008d66:	461a      	mov	r2, r3
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	b10b      	cbz	r3, 8008d70 <_free_r+0x4c>
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	d9fa      	bls.n	8008d66 <_free_r+0x42>
 8008d70:	6811      	ldr	r1, [r2, #0]
 8008d72:	1850      	adds	r0, r2, r1
 8008d74:	42a0      	cmp	r0, r4
 8008d76:	d10b      	bne.n	8008d90 <_free_r+0x6c>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	4401      	add	r1, r0
 8008d7c:	1850      	adds	r0, r2, r1
 8008d7e:	4283      	cmp	r3, r0
 8008d80:	6011      	str	r1, [r2, #0]
 8008d82:	d1e0      	bne.n	8008d46 <_free_r+0x22>
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	6053      	str	r3, [r2, #4]
 8008d8a:	4408      	add	r0, r1
 8008d8c:	6010      	str	r0, [r2, #0]
 8008d8e:	e7da      	b.n	8008d46 <_free_r+0x22>
 8008d90:	d902      	bls.n	8008d98 <_free_r+0x74>
 8008d92:	230c      	movs	r3, #12
 8008d94:	602b      	str	r3, [r5, #0]
 8008d96:	e7d6      	b.n	8008d46 <_free_r+0x22>
 8008d98:	6820      	ldr	r0, [r4, #0]
 8008d9a:	1821      	adds	r1, r4, r0
 8008d9c:	428b      	cmp	r3, r1
 8008d9e:	bf04      	itt	eq
 8008da0:	6819      	ldreq	r1, [r3, #0]
 8008da2:	685b      	ldreq	r3, [r3, #4]
 8008da4:	6063      	str	r3, [r4, #4]
 8008da6:	bf04      	itt	eq
 8008da8:	1809      	addeq	r1, r1, r0
 8008daa:	6021      	streq	r1, [r4, #0]
 8008dac:	6054      	str	r4, [r2, #4]
 8008dae:	e7ca      	b.n	8008d46 <_free_r+0x22>
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
 8008db2:	bf00      	nop
 8008db4:	2400090c 	.word	0x2400090c

08008db8 <sbrk_aligned>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	4e0f      	ldr	r6, [pc, #60]	@ (8008df8 <sbrk_aligned+0x40>)
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	6831      	ldr	r1, [r6, #0]
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	b911      	cbnz	r1, 8008dca <sbrk_aligned+0x12>
 8008dc4:	f000 fca4 	bl	8009710 <_sbrk_r>
 8008dc8:	6030      	str	r0, [r6, #0]
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4628      	mov	r0, r5
 8008dce:	f000 fc9f 	bl	8009710 <_sbrk_r>
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	d103      	bne.n	8008dde <sbrk_aligned+0x26>
 8008dd6:	f04f 34ff 	mov.w	r4, #4294967295
 8008dda:	4620      	mov	r0, r4
 8008ddc:	bd70      	pop	{r4, r5, r6, pc}
 8008dde:	1cc4      	adds	r4, r0, #3
 8008de0:	f024 0403 	bic.w	r4, r4, #3
 8008de4:	42a0      	cmp	r0, r4
 8008de6:	d0f8      	beq.n	8008dda <sbrk_aligned+0x22>
 8008de8:	1a21      	subs	r1, r4, r0
 8008dea:	4628      	mov	r0, r5
 8008dec:	f000 fc90 	bl	8009710 <_sbrk_r>
 8008df0:	3001      	adds	r0, #1
 8008df2:	d1f2      	bne.n	8008dda <sbrk_aligned+0x22>
 8008df4:	e7ef      	b.n	8008dd6 <sbrk_aligned+0x1e>
 8008df6:	bf00      	nop
 8008df8:	24000908 	.word	0x24000908

08008dfc <_malloc_r>:
 8008dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e00:	1ccd      	adds	r5, r1, #3
 8008e02:	f025 0503 	bic.w	r5, r5, #3
 8008e06:	3508      	adds	r5, #8
 8008e08:	2d0c      	cmp	r5, #12
 8008e0a:	bf38      	it	cc
 8008e0c:	250c      	movcc	r5, #12
 8008e0e:	2d00      	cmp	r5, #0
 8008e10:	4606      	mov	r6, r0
 8008e12:	db01      	blt.n	8008e18 <_malloc_r+0x1c>
 8008e14:	42a9      	cmp	r1, r5
 8008e16:	d904      	bls.n	8008e22 <_malloc_r+0x26>
 8008e18:	230c      	movs	r3, #12
 8008e1a:	6033      	str	r3, [r6, #0]
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ef8 <_malloc_r+0xfc>
 8008e26:	f000 f869 	bl	8008efc <__malloc_lock>
 8008e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2e:	461c      	mov	r4, r3
 8008e30:	bb44      	cbnz	r4, 8008e84 <_malloc_r+0x88>
 8008e32:	4629      	mov	r1, r5
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7ff ffbf 	bl	8008db8 <sbrk_aligned>
 8008e3a:	1c43      	adds	r3, r0, #1
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	d158      	bne.n	8008ef2 <_malloc_r+0xf6>
 8008e40:	f8d8 4000 	ldr.w	r4, [r8]
 8008e44:	4627      	mov	r7, r4
 8008e46:	2f00      	cmp	r7, #0
 8008e48:	d143      	bne.n	8008ed2 <_malloc_r+0xd6>
 8008e4a:	2c00      	cmp	r4, #0
 8008e4c:	d04b      	beq.n	8008ee6 <_malloc_r+0xea>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	4639      	mov	r1, r7
 8008e52:	4630      	mov	r0, r6
 8008e54:	eb04 0903 	add.w	r9, r4, r3
 8008e58:	f000 fc5a 	bl	8009710 <_sbrk_r>
 8008e5c:	4581      	cmp	r9, r0
 8008e5e:	d142      	bne.n	8008ee6 <_malloc_r+0xea>
 8008e60:	6821      	ldr	r1, [r4, #0]
 8008e62:	1a6d      	subs	r5, r5, r1
 8008e64:	4629      	mov	r1, r5
 8008e66:	4630      	mov	r0, r6
 8008e68:	f7ff ffa6 	bl	8008db8 <sbrk_aligned>
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d03a      	beq.n	8008ee6 <_malloc_r+0xea>
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	442b      	add	r3, r5
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	f8d8 3000 	ldr.w	r3, [r8]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	bb62      	cbnz	r2, 8008ed8 <_malloc_r+0xdc>
 8008e7e:	f8c8 7000 	str.w	r7, [r8]
 8008e82:	e00f      	b.n	8008ea4 <_malloc_r+0xa8>
 8008e84:	6822      	ldr	r2, [r4, #0]
 8008e86:	1b52      	subs	r2, r2, r5
 8008e88:	d420      	bmi.n	8008ecc <_malloc_r+0xd0>
 8008e8a:	2a0b      	cmp	r2, #11
 8008e8c:	d917      	bls.n	8008ebe <_malloc_r+0xc2>
 8008e8e:	1961      	adds	r1, r4, r5
 8008e90:	42a3      	cmp	r3, r4
 8008e92:	6025      	str	r5, [r4, #0]
 8008e94:	bf18      	it	ne
 8008e96:	6059      	strne	r1, [r3, #4]
 8008e98:	6863      	ldr	r3, [r4, #4]
 8008e9a:	bf08      	it	eq
 8008e9c:	f8c8 1000 	streq.w	r1, [r8]
 8008ea0:	5162      	str	r2, [r4, r5]
 8008ea2:	604b      	str	r3, [r1, #4]
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f000 f82f 	bl	8008f08 <__malloc_unlock>
 8008eaa:	f104 000b 	add.w	r0, r4, #11
 8008eae:	1d23      	adds	r3, r4, #4
 8008eb0:	f020 0007 	bic.w	r0, r0, #7
 8008eb4:	1ac2      	subs	r2, r0, r3
 8008eb6:	bf1c      	itt	ne
 8008eb8:	1a1b      	subne	r3, r3, r0
 8008eba:	50a3      	strne	r3, [r4, r2]
 8008ebc:	e7af      	b.n	8008e1e <_malloc_r+0x22>
 8008ebe:	6862      	ldr	r2, [r4, #4]
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	bf0c      	ite	eq
 8008ec4:	f8c8 2000 	streq.w	r2, [r8]
 8008ec8:	605a      	strne	r2, [r3, #4]
 8008eca:	e7eb      	b.n	8008ea4 <_malloc_r+0xa8>
 8008ecc:	4623      	mov	r3, r4
 8008ece:	6864      	ldr	r4, [r4, #4]
 8008ed0:	e7ae      	b.n	8008e30 <_malloc_r+0x34>
 8008ed2:	463c      	mov	r4, r7
 8008ed4:	687f      	ldr	r7, [r7, #4]
 8008ed6:	e7b6      	b.n	8008e46 <_malloc_r+0x4a>
 8008ed8:	461a      	mov	r2, r3
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	d1fb      	bne.n	8008ed8 <_malloc_r+0xdc>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	6053      	str	r3, [r2, #4]
 8008ee4:	e7de      	b.n	8008ea4 <_malloc_r+0xa8>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	6033      	str	r3, [r6, #0]
 8008eea:	4630      	mov	r0, r6
 8008eec:	f000 f80c 	bl	8008f08 <__malloc_unlock>
 8008ef0:	e794      	b.n	8008e1c <_malloc_r+0x20>
 8008ef2:	6005      	str	r5, [r0, #0]
 8008ef4:	e7d6      	b.n	8008ea4 <_malloc_r+0xa8>
 8008ef6:	bf00      	nop
 8008ef8:	2400090c 	.word	0x2400090c

08008efc <__malloc_lock>:
 8008efc:	4801      	ldr	r0, [pc, #4]	@ (8008f04 <__malloc_lock+0x8>)
 8008efe:	f7ff bf00 	b.w	8008d02 <__retarget_lock_acquire_recursive>
 8008f02:	bf00      	nop
 8008f04:	24000904 	.word	0x24000904

08008f08 <__malloc_unlock>:
 8008f08:	4801      	ldr	r0, [pc, #4]	@ (8008f10 <__malloc_unlock+0x8>)
 8008f0a:	f7ff befb 	b.w	8008d04 <__retarget_lock_release_recursive>
 8008f0e:	bf00      	nop
 8008f10:	24000904 	.word	0x24000904

08008f14 <__sfputc_r>:
 8008f14:	6893      	ldr	r3, [r2, #8]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	b410      	push	{r4}
 8008f1c:	6093      	str	r3, [r2, #8]
 8008f1e:	da08      	bge.n	8008f32 <__sfputc_r+0x1e>
 8008f20:	6994      	ldr	r4, [r2, #24]
 8008f22:	42a3      	cmp	r3, r4
 8008f24:	db01      	blt.n	8008f2a <__sfputc_r+0x16>
 8008f26:	290a      	cmp	r1, #10
 8008f28:	d103      	bne.n	8008f32 <__sfputc_r+0x1e>
 8008f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f2e:	f7ff bdda 	b.w	8008ae6 <__swbuf_r>
 8008f32:	6813      	ldr	r3, [r2, #0]
 8008f34:	1c58      	adds	r0, r3, #1
 8008f36:	6010      	str	r0, [r2, #0]
 8008f38:	7019      	strb	r1, [r3, #0]
 8008f3a:	4608      	mov	r0, r1
 8008f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <__sfputs_r>:
 8008f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f44:	4606      	mov	r6, r0
 8008f46:	460f      	mov	r7, r1
 8008f48:	4614      	mov	r4, r2
 8008f4a:	18d5      	adds	r5, r2, r3
 8008f4c:	42ac      	cmp	r4, r5
 8008f4e:	d101      	bne.n	8008f54 <__sfputs_r+0x12>
 8008f50:	2000      	movs	r0, #0
 8008f52:	e007      	b.n	8008f64 <__sfputs_r+0x22>
 8008f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f58:	463a      	mov	r2, r7
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f7ff ffda 	bl	8008f14 <__sfputc_r>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d1f3      	bne.n	8008f4c <__sfputs_r+0xa>
 8008f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f68 <_vfiprintf_r>:
 8008f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	460d      	mov	r5, r1
 8008f6e:	b09d      	sub	sp, #116	@ 0x74
 8008f70:	4614      	mov	r4, r2
 8008f72:	4698      	mov	r8, r3
 8008f74:	4606      	mov	r6, r0
 8008f76:	b118      	cbz	r0, 8008f80 <_vfiprintf_r+0x18>
 8008f78:	6a03      	ldr	r3, [r0, #32]
 8008f7a:	b90b      	cbnz	r3, 8008f80 <_vfiprintf_r+0x18>
 8008f7c:	f7ff fcca 	bl	8008914 <__sinit>
 8008f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f82:	07d9      	lsls	r1, r3, #31
 8008f84:	d405      	bmi.n	8008f92 <_vfiprintf_r+0x2a>
 8008f86:	89ab      	ldrh	r3, [r5, #12]
 8008f88:	059a      	lsls	r2, r3, #22
 8008f8a:	d402      	bmi.n	8008f92 <_vfiprintf_r+0x2a>
 8008f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f8e:	f7ff feb8 	bl	8008d02 <__retarget_lock_acquire_recursive>
 8008f92:	89ab      	ldrh	r3, [r5, #12]
 8008f94:	071b      	lsls	r3, r3, #28
 8008f96:	d501      	bpl.n	8008f9c <_vfiprintf_r+0x34>
 8008f98:	692b      	ldr	r3, [r5, #16]
 8008f9a:	b99b      	cbnz	r3, 8008fc4 <_vfiprintf_r+0x5c>
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff fde0 	bl	8008b64 <__swsetup_r>
 8008fa4:	b170      	cbz	r0, 8008fc4 <_vfiprintf_r+0x5c>
 8008fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fa8:	07dc      	lsls	r4, r3, #31
 8008faa:	d504      	bpl.n	8008fb6 <_vfiprintf_r+0x4e>
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb0:	b01d      	add	sp, #116	@ 0x74
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	0598      	lsls	r0, r3, #22
 8008fba:	d4f7      	bmi.n	8008fac <_vfiprintf_r+0x44>
 8008fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fbe:	f7ff fea1 	bl	8008d04 <__retarget_lock_release_recursive>
 8008fc2:	e7f3      	b.n	8008fac <_vfiprintf_r+0x44>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fc8:	2320      	movs	r3, #32
 8008fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fd2:	2330      	movs	r3, #48	@ 0x30
 8008fd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009184 <_vfiprintf_r+0x21c>
 8008fd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fdc:	f04f 0901 	mov.w	r9, #1
 8008fe0:	4623      	mov	r3, r4
 8008fe2:	469a      	mov	sl, r3
 8008fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe8:	b10a      	cbz	r2, 8008fee <_vfiprintf_r+0x86>
 8008fea:	2a25      	cmp	r2, #37	@ 0x25
 8008fec:	d1f9      	bne.n	8008fe2 <_vfiprintf_r+0x7a>
 8008fee:	ebba 0b04 	subs.w	fp, sl, r4
 8008ff2:	d00b      	beq.n	800900c <_vfiprintf_r+0xa4>
 8008ff4:	465b      	mov	r3, fp
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff ffa1 	bl	8008f42 <__sfputs_r>
 8009000:	3001      	adds	r0, #1
 8009002:	f000 80a7 	beq.w	8009154 <_vfiprintf_r+0x1ec>
 8009006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009008:	445a      	add	r2, fp
 800900a:	9209      	str	r2, [sp, #36]	@ 0x24
 800900c:	f89a 3000 	ldrb.w	r3, [sl]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 809f 	beq.w	8009154 <_vfiprintf_r+0x1ec>
 8009016:	2300      	movs	r3, #0
 8009018:	f04f 32ff 	mov.w	r2, #4294967295
 800901c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009020:	f10a 0a01 	add.w	sl, sl, #1
 8009024:	9304      	str	r3, [sp, #16]
 8009026:	9307      	str	r3, [sp, #28]
 8009028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800902c:	931a      	str	r3, [sp, #104]	@ 0x68
 800902e:	4654      	mov	r4, sl
 8009030:	2205      	movs	r2, #5
 8009032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009036:	4853      	ldr	r0, [pc, #332]	@ (8009184 <_vfiprintf_r+0x21c>)
 8009038:	f7f7 f952 	bl	80002e0 <memchr>
 800903c:	9a04      	ldr	r2, [sp, #16]
 800903e:	b9d8      	cbnz	r0, 8009078 <_vfiprintf_r+0x110>
 8009040:	06d1      	lsls	r1, r2, #27
 8009042:	bf44      	itt	mi
 8009044:	2320      	movmi	r3, #32
 8009046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800904a:	0713      	lsls	r3, r2, #28
 800904c:	bf44      	itt	mi
 800904e:	232b      	movmi	r3, #43	@ 0x2b
 8009050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009054:	f89a 3000 	ldrb.w	r3, [sl]
 8009058:	2b2a      	cmp	r3, #42	@ 0x2a
 800905a:	d015      	beq.n	8009088 <_vfiprintf_r+0x120>
 800905c:	9a07      	ldr	r2, [sp, #28]
 800905e:	4654      	mov	r4, sl
 8009060:	2000      	movs	r0, #0
 8009062:	f04f 0c0a 	mov.w	ip, #10
 8009066:	4621      	mov	r1, r4
 8009068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800906c:	3b30      	subs	r3, #48	@ 0x30
 800906e:	2b09      	cmp	r3, #9
 8009070:	d94b      	bls.n	800910a <_vfiprintf_r+0x1a2>
 8009072:	b1b0      	cbz	r0, 80090a2 <_vfiprintf_r+0x13a>
 8009074:	9207      	str	r2, [sp, #28]
 8009076:	e014      	b.n	80090a2 <_vfiprintf_r+0x13a>
 8009078:	eba0 0308 	sub.w	r3, r0, r8
 800907c:	fa09 f303 	lsl.w	r3, r9, r3
 8009080:	4313      	orrs	r3, r2
 8009082:	9304      	str	r3, [sp, #16]
 8009084:	46a2      	mov	sl, r4
 8009086:	e7d2      	b.n	800902e <_vfiprintf_r+0xc6>
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	1d19      	adds	r1, r3, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	9103      	str	r1, [sp, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	bfbb      	ittet	lt
 8009094:	425b      	neglt	r3, r3
 8009096:	f042 0202 	orrlt.w	r2, r2, #2
 800909a:	9307      	strge	r3, [sp, #28]
 800909c:	9307      	strlt	r3, [sp, #28]
 800909e:	bfb8      	it	lt
 80090a0:	9204      	strlt	r2, [sp, #16]
 80090a2:	7823      	ldrb	r3, [r4, #0]
 80090a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80090a6:	d10a      	bne.n	80090be <_vfiprintf_r+0x156>
 80090a8:	7863      	ldrb	r3, [r4, #1]
 80090aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ac:	d132      	bne.n	8009114 <_vfiprintf_r+0x1ac>
 80090ae:	9b03      	ldr	r3, [sp, #12]
 80090b0:	1d1a      	adds	r2, r3, #4
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	9203      	str	r2, [sp, #12]
 80090b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090ba:	3402      	adds	r4, #2
 80090bc:	9305      	str	r3, [sp, #20]
 80090be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009194 <_vfiprintf_r+0x22c>
 80090c2:	7821      	ldrb	r1, [r4, #0]
 80090c4:	2203      	movs	r2, #3
 80090c6:	4650      	mov	r0, sl
 80090c8:	f7f7 f90a 	bl	80002e0 <memchr>
 80090cc:	b138      	cbz	r0, 80090de <_vfiprintf_r+0x176>
 80090ce:	9b04      	ldr	r3, [sp, #16]
 80090d0:	eba0 000a 	sub.w	r0, r0, sl
 80090d4:	2240      	movs	r2, #64	@ 0x40
 80090d6:	4082      	lsls	r2, r0
 80090d8:	4313      	orrs	r3, r2
 80090da:	3401      	adds	r4, #1
 80090dc:	9304      	str	r3, [sp, #16]
 80090de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e2:	4829      	ldr	r0, [pc, #164]	@ (8009188 <_vfiprintf_r+0x220>)
 80090e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090e8:	2206      	movs	r2, #6
 80090ea:	f7f7 f8f9 	bl	80002e0 <memchr>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d03f      	beq.n	8009172 <_vfiprintf_r+0x20a>
 80090f2:	4b26      	ldr	r3, [pc, #152]	@ (800918c <_vfiprintf_r+0x224>)
 80090f4:	bb1b      	cbnz	r3, 800913e <_vfiprintf_r+0x1d6>
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	3307      	adds	r3, #7
 80090fa:	f023 0307 	bic.w	r3, r3, #7
 80090fe:	3308      	adds	r3, #8
 8009100:	9303      	str	r3, [sp, #12]
 8009102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009104:	443b      	add	r3, r7
 8009106:	9309      	str	r3, [sp, #36]	@ 0x24
 8009108:	e76a      	b.n	8008fe0 <_vfiprintf_r+0x78>
 800910a:	fb0c 3202 	mla	r2, ip, r2, r3
 800910e:	460c      	mov	r4, r1
 8009110:	2001      	movs	r0, #1
 8009112:	e7a8      	b.n	8009066 <_vfiprintf_r+0xfe>
 8009114:	2300      	movs	r3, #0
 8009116:	3401      	adds	r4, #1
 8009118:	9305      	str	r3, [sp, #20]
 800911a:	4619      	mov	r1, r3
 800911c:	f04f 0c0a 	mov.w	ip, #10
 8009120:	4620      	mov	r0, r4
 8009122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009126:	3a30      	subs	r2, #48	@ 0x30
 8009128:	2a09      	cmp	r2, #9
 800912a:	d903      	bls.n	8009134 <_vfiprintf_r+0x1cc>
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0c6      	beq.n	80090be <_vfiprintf_r+0x156>
 8009130:	9105      	str	r1, [sp, #20]
 8009132:	e7c4      	b.n	80090be <_vfiprintf_r+0x156>
 8009134:	fb0c 2101 	mla	r1, ip, r1, r2
 8009138:	4604      	mov	r4, r0
 800913a:	2301      	movs	r3, #1
 800913c:	e7f0      	b.n	8009120 <_vfiprintf_r+0x1b8>
 800913e:	ab03      	add	r3, sp, #12
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	462a      	mov	r2, r5
 8009144:	4b12      	ldr	r3, [pc, #72]	@ (8009190 <_vfiprintf_r+0x228>)
 8009146:	a904      	add	r1, sp, #16
 8009148:	4630      	mov	r0, r6
 800914a:	f3af 8000 	nop.w
 800914e:	4607      	mov	r7, r0
 8009150:	1c78      	adds	r0, r7, #1
 8009152:	d1d6      	bne.n	8009102 <_vfiprintf_r+0x19a>
 8009154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009156:	07d9      	lsls	r1, r3, #31
 8009158:	d405      	bmi.n	8009166 <_vfiprintf_r+0x1fe>
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	059a      	lsls	r2, r3, #22
 800915e:	d402      	bmi.n	8009166 <_vfiprintf_r+0x1fe>
 8009160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009162:	f7ff fdcf 	bl	8008d04 <__retarget_lock_release_recursive>
 8009166:	89ab      	ldrh	r3, [r5, #12]
 8009168:	065b      	lsls	r3, r3, #25
 800916a:	f53f af1f 	bmi.w	8008fac <_vfiprintf_r+0x44>
 800916e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009170:	e71e      	b.n	8008fb0 <_vfiprintf_r+0x48>
 8009172:	ab03      	add	r3, sp, #12
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	462a      	mov	r2, r5
 8009178:	4b05      	ldr	r3, [pc, #20]	@ (8009190 <_vfiprintf_r+0x228>)
 800917a:	a904      	add	r1, sp, #16
 800917c:	4630      	mov	r0, r6
 800917e:	f000 f879 	bl	8009274 <_printf_i>
 8009182:	e7e4      	b.n	800914e <_vfiprintf_r+0x1e6>
 8009184:	08009860 	.word	0x08009860
 8009188:	0800986a 	.word	0x0800986a
 800918c:	00000000 	.word	0x00000000
 8009190:	08008f43 	.word	0x08008f43
 8009194:	08009866 	.word	0x08009866

08009198 <_printf_common>:
 8009198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	4616      	mov	r6, r2
 800919e:	4698      	mov	r8, r3
 80091a0:	688a      	ldr	r2, [r1, #8]
 80091a2:	690b      	ldr	r3, [r1, #16]
 80091a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091a8:	4293      	cmp	r3, r2
 80091aa:	bfb8      	it	lt
 80091ac:	4613      	movlt	r3, r2
 80091ae:	6033      	str	r3, [r6, #0]
 80091b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091b4:	4607      	mov	r7, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	b10a      	cbz	r2, 80091be <_printf_common+0x26>
 80091ba:	3301      	adds	r3, #1
 80091bc:	6033      	str	r3, [r6, #0]
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	0699      	lsls	r1, r3, #26
 80091c2:	bf42      	ittt	mi
 80091c4:	6833      	ldrmi	r3, [r6, #0]
 80091c6:	3302      	addmi	r3, #2
 80091c8:	6033      	strmi	r3, [r6, #0]
 80091ca:	6825      	ldr	r5, [r4, #0]
 80091cc:	f015 0506 	ands.w	r5, r5, #6
 80091d0:	d106      	bne.n	80091e0 <_printf_common+0x48>
 80091d2:	f104 0a19 	add.w	sl, r4, #25
 80091d6:	68e3      	ldr	r3, [r4, #12]
 80091d8:	6832      	ldr	r2, [r6, #0]
 80091da:	1a9b      	subs	r3, r3, r2
 80091dc:	42ab      	cmp	r3, r5
 80091de:	dc26      	bgt.n	800922e <_printf_common+0x96>
 80091e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091e4:	6822      	ldr	r2, [r4, #0]
 80091e6:	3b00      	subs	r3, #0
 80091e8:	bf18      	it	ne
 80091ea:	2301      	movne	r3, #1
 80091ec:	0692      	lsls	r2, r2, #26
 80091ee:	d42b      	bmi.n	8009248 <_printf_common+0xb0>
 80091f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091f4:	4641      	mov	r1, r8
 80091f6:	4638      	mov	r0, r7
 80091f8:	47c8      	blx	r9
 80091fa:	3001      	adds	r0, #1
 80091fc:	d01e      	beq.n	800923c <_printf_common+0xa4>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	6922      	ldr	r2, [r4, #16]
 8009202:	f003 0306 	and.w	r3, r3, #6
 8009206:	2b04      	cmp	r3, #4
 8009208:	bf02      	ittt	eq
 800920a:	68e5      	ldreq	r5, [r4, #12]
 800920c:	6833      	ldreq	r3, [r6, #0]
 800920e:	1aed      	subeq	r5, r5, r3
 8009210:	68a3      	ldr	r3, [r4, #8]
 8009212:	bf0c      	ite	eq
 8009214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009218:	2500      	movne	r5, #0
 800921a:	4293      	cmp	r3, r2
 800921c:	bfc4      	itt	gt
 800921e:	1a9b      	subgt	r3, r3, r2
 8009220:	18ed      	addgt	r5, r5, r3
 8009222:	2600      	movs	r6, #0
 8009224:	341a      	adds	r4, #26
 8009226:	42b5      	cmp	r5, r6
 8009228:	d11a      	bne.n	8009260 <_printf_common+0xc8>
 800922a:	2000      	movs	r0, #0
 800922c:	e008      	b.n	8009240 <_printf_common+0xa8>
 800922e:	2301      	movs	r3, #1
 8009230:	4652      	mov	r2, sl
 8009232:	4641      	mov	r1, r8
 8009234:	4638      	mov	r0, r7
 8009236:	47c8      	blx	r9
 8009238:	3001      	adds	r0, #1
 800923a:	d103      	bne.n	8009244 <_printf_common+0xac>
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009244:	3501      	adds	r5, #1
 8009246:	e7c6      	b.n	80091d6 <_printf_common+0x3e>
 8009248:	18e1      	adds	r1, r4, r3
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	2030      	movs	r0, #48	@ 0x30
 800924e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009252:	4422      	add	r2, r4
 8009254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009258:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800925c:	3302      	adds	r3, #2
 800925e:	e7c7      	b.n	80091f0 <_printf_common+0x58>
 8009260:	2301      	movs	r3, #1
 8009262:	4622      	mov	r2, r4
 8009264:	4641      	mov	r1, r8
 8009266:	4638      	mov	r0, r7
 8009268:	47c8      	blx	r9
 800926a:	3001      	adds	r0, #1
 800926c:	d0e6      	beq.n	800923c <_printf_common+0xa4>
 800926e:	3601      	adds	r6, #1
 8009270:	e7d9      	b.n	8009226 <_printf_common+0x8e>
	...

08009274 <_printf_i>:
 8009274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009278:	7e0f      	ldrb	r7, [r1, #24]
 800927a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800927c:	2f78      	cmp	r7, #120	@ 0x78
 800927e:	4691      	mov	r9, r2
 8009280:	4680      	mov	r8, r0
 8009282:	460c      	mov	r4, r1
 8009284:	469a      	mov	sl, r3
 8009286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800928a:	d807      	bhi.n	800929c <_printf_i+0x28>
 800928c:	2f62      	cmp	r7, #98	@ 0x62
 800928e:	d80a      	bhi.n	80092a6 <_printf_i+0x32>
 8009290:	2f00      	cmp	r7, #0
 8009292:	f000 80d1 	beq.w	8009438 <_printf_i+0x1c4>
 8009296:	2f58      	cmp	r7, #88	@ 0x58
 8009298:	f000 80b8 	beq.w	800940c <_printf_i+0x198>
 800929c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092a4:	e03a      	b.n	800931c <_printf_i+0xa8>
 80092a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092aa:	2b15      	cmp	r3, #21
 80092ac:	d8f6      	bhi.n	800929c <_printf_i+0x28>
 80092ae:	a101      	add	r1, pc, #4	@ (adr r1, 80092b4 <_printf_i+0x40>)
 80092b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092b4:	0800930d 	.word	0x0800930d
 80092b8:	08009321 	.word	0x08009321
 80092bc:	0800929d 	.word	0x0800929d
 80092c0:	0800929d 	.word	0x0800929d
 80092c4:	0800929d 	.word	0x0800929d
 80092c8:	0800929d 	.word	0x0800929d
 80092cc:	08009321 	.word	0x08009321
 80092d0:	0800929d 	.word	0x0800929d
 80092d4:	0800929d 	.word	0x0800929d
 80092d8:	0800929d 	.word	0x0800929d
 80092dc:	0800929d 	.word	0x0800929d
 80092e0:	0800941f 	.word	0x0800941f
 80092e4:	0800934b 	.word	0x0800934b
 80092e8:	080093d9 	.word	0x080093d9
 80092ec:	0800929d 	.word	0x0800929d
 80092f0:	0800929d 	.word	0x0800929d
 80092f4:	08009441 	.word	0x08009441
 80092f8:	0800929d 	.word	0x0800929d
 80092fc:	0800934b 	.word	0x0800934b
 8009300:	0800929d 	.word	0x0800929d
 8009304:	0800929d 	.word	0x0800929d
 8009308:	080093e1 	.word	0x080093e1
 800930c:	6833      	ldr	r3, [r6, #0]
 800930e:	1d1a      	adds	r2, r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6032      	str	r2, [r6, #0]
 8009314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800931c:	2301      	movs	r3, #1
 800931e:	e09c      	b.n	800945a <_printf_i+0x1e6>
 8009320:	6833      	ldr	r3, [r6, #0]
 8009322:	6820      	ldr	r0, [r4, #0]
 8009324:	1d19      	adds	r1, r3, #4
 8009326:	6031      	str	r1, [r6, #0]
 8009328:	0606      	lsls	r6, r0, #24
 800932a:	d501      	bpl.n	8009330 <_printf_i+0xbc>
 800932c:	681d      	ldr	r5, [r3, #0]
 800932e:	e003      	b.n	8009338 <_printf_i+0xc4>
 8009330:	0645      	lsls	r5, r0, #25
 8009332:	d5fb      	bpl.n	800932c <_printf_i+0xb8>
 8009334:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009338:	2d00      	cmp	r5, #0
 800933a:	da03      	bge.n	8009344 <_printf_i+0xd0>
 800933c:	232d      	movs	r3, #45	@ 0x2d
 800933e:	426d      	negs	r5, r5
 8009340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009344:	4858      	ldr	r0, [pc, #352]	@ (80094a8 <_printf_i+0x234>)
 8009346:	230a      	movs	r3, #10
 8009348:	e011      	b.n	800936e <_printf_i+0xfa>
 800934a:	6821      	ldr	r1, [r4, #0]
 800934c:	6833      	ldr	r3, [r6, #0]
 800934e:	0608      	lsls	r0, r1, #24
 8009350:	f853 5b04 	ldr.w	r5, [r3], #4
 8009354:	d402      	bmi.n	800935c <_printf_i+0xe8>
 8009356:	0649      	lsls	r1, r1, #25
 8009358:	bf48      	it	mi
 800935a:	b2ad      	uxthmi	r5, r5
 800935c:	2f6f      	cmp	r7, #111	@ 0x6f
 800935e:	4852      	ldr	r0, [pc, #328]	@ (80094a8 <_printf_i+0x234>)
 8009360:	6033      	str	r3, [r6, #0]
 8009362:	bf14      	ite	ne
 8009364:	230a      	movne	r3, #10
 8009366:	2308      	moveq	r3, #8
 8009368:	2100      	movs	r1, #0
 800936a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800936e:	6866      	ldr	r6, [r4, #4]
 8009370:	60a6      	str	r6, [r4, #8]
 8009372:	2e00      	cmp	r6, #0
 8009374:	db05      	blt.n	8009382 <_printf_i+0x10e>
 8009376:	6821      	ldr	r1, [r4, #0]
 8009378:	432e      	orrs	r6, r5
 800937a:	f021 0104 	bic.w	r1, r1, #4
 800937e:	6021      	str	r1, [r4, #0]
 8009380:	d04b      	beq.n	800941a <_printf_i+0x1a6>
 8009382:	4616      	mov	r6, r2
 8009384:	fbb5 f1f3 	udiv	r1, r5, r3
 8009388:	fb03 5711 	mls	r7, r3, r1, r5
 800938c:	5dc7      	ldrb	r7, [r0, r7]
 800938e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009392:	462f      	mov	r7, r5
 8009394:	42bb      	cmp	r3, r7
 8009396:	460d      	mov	r5, r1
 8009398:	d9f4      	bls.n	8009384 <_printf_i+0x110>
 800939a:	2b08      	cmp	r3, #8
 800939c:	d10b      	bne.n	80093b6 <_printf_i+0x142>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	07df      	lsls	r7, r3, #31
 80093a2:	d508      	bpl.n	80093b6 <_printf_i+0x142>
 80093a4:	6923      	ldr	r3, [r4, #16]
 80093a6:	6861      	ldr	r1, [r4, #4]
 80093a8:	4299      	cmp	r1, r3
 80093aa:	bfde      	ittt	le
 80093ac:	2330      	movle	r3, #48	@ 0x30
 80093ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093b6:	1b92      	subs	r2, r2, r6
 80093b8:	6122      	str	r2, [r4, #16]
 80093ba:	f8cd a000 	str.w	sl, [sp]
 80093be:	464b      	mov	r3, r9
 80093c0:	aa03      	add	r2, sp, #12
 80093c2:	4621      	mov	r1, r4
 80093c4:	4640      	mov	r0, r8
 80093c6:	f7ff fee7 	bl	8009198 <_printf_common>
 80093ca:	3001      	adds	r0, #1
 80093cc:	d14a      	bne.n	8009464 <_printf_i+0x1f0>
 80093ce:	f04f 30ff 	mov.w	r0, #4294967295
 80093d2:	b004      	add	sp, #16
 80093d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	f043 0320 	orr.w	r3, r3, #32
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	4832      	ldr	r0, [pc, #200]	@ (80094ac <_printf_i+0x238>)
 80093e2:	2778      	movs	r7, #120	@ 0x78
 80093e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	6831      	ldr	r1, [r6, #0]
 80093ec:	061f      	lsls	r7, r3, #24
 80093ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80093f2:	d402      	bmi.n	80093fa <_printf_i+0x186>
 80093f4:	065f      	lsls	r7, r3, #25
 80093f6:	bf48      	it	mi
 80093f8:	b2ad      	uxthmi	r5, r5
 80093fa:	6031      	str	r1, [r6, #0]
 80093fc:	07d9      	lsls	r1, r3, #31
 80093fe:	bf44      	itt	mi
 8009400:	f043 0320 	orrmi.w	r3, r3, #32
 8009404:	6023      	strmi	r3, [r4, #0]
 8009406:	b11d      	cbz	r5, 8009410 <_printf_i+0x19c>
 8009408:	2310      	movs	r3, #16
 800940a:	e7ad      	b.n	8009368 <_printf_i+0xf4>
 800940c:	4826      	ldr	r0, [pc, #152]	@ (80094a8 <_printf_i+0x234>)
 800940e:	e7e9      	b.n	80093e4 <_printf_i+0x170>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	f023 0320 	bic.w	r3, r3, #32
 8009416:	6023      	str	r3, [r4, #0]
 8009418:	e7f6      	b.n	8009408 <_printf_i+0x194>
 800941a:	4616      	mov	r6, r2
 800941c:	e7bd      	b.n	800939a <_printf_i+0x126>
 800941e:	6833      	ldr	r3, [r6, #0]
 8009420:	6825      	ldr	r5, [r4, #0]
 8009422:	6961      	ldr	r1, [r4, #20]
 8009424:	1d18      	adds	r0, r3, #4
 8009426:	6030      	str	r0, [r6, #0]
 8009428:	062e      	lsls	r6, r5, #24
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	d501      	bpl.n	8009432 <_printf_i+0x1be>
 800942e:	6019      	str	r1, [r3, #0]
 8009430:	e002      	b.n	8009438 <_printf_i+0x1c4>
 8009432:	0668      	lsls	r0, r5, #25
 8009434:	d5fb      	bpl.n	800942e <_printf_i+0x1ba>
 8009436:	8019      	strh	r1, [r3, #0]
 8009438:	2300      	movs	r3, #0
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	4616      	mov	r6, r2
 800943e:	e7bc      	b.n	80093ba <_printf_i+0x146>
 8009440:	6833      	ldr	r3, [r6, #0]
 8009442:	1d1a      	adds	r2, r3, #4
 8009444:	6032      	str	r2, [r6, #0]
 8009446:	681e      	ldr	r6, [r3, #0]
 8009448:	6862      	ldr	r2, [r4, #4]
 800944a:	2100      	movs	r1, #0
 800944c:	4630      	mov	r0, r6
 800944e:	f7f6 ff47 	bl	80002e0 <memchr>
 8009452:	b108      	cbz	r0, 8009458 <_printf_i+0x1e4>
 8009454:	1b80      	subs	r0, r0, r6
 8009456:	6060      	str	r0, [r4, #4]
 8009458:	6863      	ldr	r3, [r4, #4]
 800945a:	6123      	str	r3, [r4, #16]
 800945c:	2300      	movs	r3, #0
 800945e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009462:	e7aa      	b.n	80093ba <_printf_i+0x146>
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	4632      	mov	r2, r6
 8009468:	4649      	mov	r1, r9
 800946a:	4640      	mov	r0, r8
 800946c:	47d0      	blx	sl
 800946e:	3001      	adds	r0, #1
 8009470:	d0ad      	beq.n	80093ce <_printf_i+0x15a>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	079b      	lsls	r3, r3, #30
 8009476:	d413      	bmi.n	80094a0 <_printf_i+0x22c>
 8009478:	68e0      	ldr	r0, [r4, #12]
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	4298      	cmp	r0, r3
 800947e:	bfb8      	it	lt
 8009480:	4618      	movlt	r0, r3
 8009482:	e7a6      	b.n	80093d2 <_printf_i+0x15e>
 8009484:	2301      	movs	r3, #1
 8009486:	4632      	mov	r2, r6
 8009488:	4649      	mov	r1, r9
 800948a:	4640      	mov	r0, r8
 800948c:	47d0      	blx	sl
 800948e:	3001      	adds	r0, #1
 8009490:	d09d      	beq.n	80093ce <_printf_i+0x15a>
 8009492:	3501      	adds	r5, #1
 8009494:	68e3      	ldr	r3, [r4, #12]
 8009496:	9903      	ldr	r1, [sp, #12]
 8009498:	1a5b      	subs	r3, r3, r1
 800949a:	42ab      	cmp	r3, r5
 800949c:	dcf2      	bgt.n	8009484 <_printf_i+0x210>
 800949e:	e7eb      	b.n	8009478 <_printf_i+0x204>
 80094a0:	2500      	movs	r5, #0
 80094a2:	f104 0619 	add.w	r6, r4, #25
 80094a6:	e7f5      	b.n	8009494 <_printf_i+0x220>
 80094a8:	08009871 	.word	0x08009871
 80094ac:	08009882 	.word	0x08009882

080094b0 <__sflush_r>:
 80094b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b8:	0716      	lsls	r6, r2, #28
 80094ba:	4605      	mov	r5, r0
 80094bc:	460c      	mov	r4, r1
 80094be:	d454      	bmi.n	800956a <__sflush_r+0xba>
 80094c0:	684b      	ldr	r3, [r1, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dc02      	bgt.n	80094cc <__sflush_r+0x1c>
 80094c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dd48      	ble.n	800955e <__sflush_r+0xae>
 80094cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	d045      	beq.n	800955e <__sflush_r+0xae>
 80094d2:	2300      	movs	r3, #0
 80094d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094d8:	682f      	ldr	r7, [r5, #0]
 80094da:	6a21      	ldr	r1, [r4, #32]
 80094dc:	602b      	str	r3, [r5, #0]
 80094de:	d030      	beq.n	8009542 <__sflush_r+0x92>
 80094e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	0759      	lsls	r1, r3, #29
 80094e6:	d505      	bpl.n	80094f4 <__sflush_r+0x44>
 80094e8:	6863      	ldr	r3, [r4, #4]
 80094ea:	1ad2      	subs	r2, r2, r3
 80094ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094ee:	b10b      	cbz	r3, 80094f4 <__sflush_r+0x44>
 80094f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094f2:	1ad2      	subs	r2, r2, r3
 80094f4:	2300      	movs	r3, #0
 80094f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094f8:	6a21      	ldr	r1, [r4, #32]
 80094fa:	4628      	mov	r0, r5
 80094fc:	47b0      	blx	r6
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	d106      	bne.n	8009512 <__sflush_r+0x62>
 8009504:	6829      	ldr	r1, [r5, #0]
 8009506:	291d      	cmp	r1, #29
 8009508:	d82b      	bhi.n	8009562 <__sflush_r+0xb2>
 800950a:	4a2a      	ldr	r2, [pc, #168]	@ (80095b4 <__sflush_r+0x104>)
 800950c:	40ca      	lsrs	r2, r1
 800950e:	07d6      	lsls	r6, r2, #31
 8009510:	d527      	bpl.n	8009562 <__sflush_r+0xb2>
 8009512:	2200      	movs	r2, #0
 8009514:	6062      	str	r2, [r4, #4]
 8009516:	04d9      	lsls	r1, r3, #19
 8009518:	6922      	ldr	r2, [r4, #16]
 800951a:	6022      	str	r2, [r4, #0]
 800951c:	d504      	bpl.n	8009528 <__sflush_r+0x78>
 800951e:	1c42      	adds	r2, r0, #1
 8009520:	d101      	bne.n	8009526 <__sflush_r+0x76>
 8009522:	682b      	ldr	r3, [r5, #0]
 8009524:	b903      	cbnz	r3, 8009528 <__sflush_r+0x78>
 8009526:	6560      	str	r0, [r4, #84]	@ 0x54
 8009528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800952a:	602f      	str	r7, [r5, #0]
 800952c:	b1b9      	cbz	r1, 800955e <__sflush_r+0xae>
 800952e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009532:	4299      	cmp	r1, r3
 8009534:	d002      	beq.n	800953c <__sflush_r+0x8c>
 8009536:	4628      	mov	r0, r5
 8009538:	f7ff fbf4 	bl	8008d24 <_free_r>
 800953c:	2300      	movs	r3, #0
 800953e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009540:	e00d      	b.n	800955e <__sflush_r+0xae>
 8009542:	2301      	movs	r3, #1
 8009544:	4628      	mov	r0, r5
 8009546:	47b0      	blx	r6
 8009548:	4602      	mov	r2, r0
 800954a:	1c50      	adds	r0, r2, #1
 800954c:	d1c9      	bne.n	80094e2 <__sflush_r+0x32>
 800954e:	682b      	ldr	r3, [r5, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d0c6      	beq.n	80094e2 <__sflush_r+0x32>
 8009554:	2b1d      	cmp	r3, #29
 8009556:	d001      	beq.n	800955c <__sflush_r+0xac>
 8009558:	2b16      	cmp	r3, #22
 800955a:	d11e      	bne.n	800959a <__sflush_r+0xea>
 800955c:	602f      	str	r7, [r5, #0]
 800955e:	2000      	movs	r0, #0
 8009560:	e022      	b.n	80095a8 <__sflush_r+0xf8>
 8009562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009566:	b21b      	sxth	r3, r3
 8009568:	e01b      	b.n	80095a2 <__sflush_r+0xf2>
 800956a:	690f      	ldr	r7, [r1, #16]
 800956c:	2f00      	cmp	r7, #0
 800956e:	d0f6      	beq.n	800955e <__sflush_r+0xae>
 8009570:	0793      	lsls	r3, r2, #30
 8009572:	680e      	ldr	r6, [r1, #0]
 8009574:	bf08      	it	eq
 8009576:	694b      	ldreq	r3, [r1, #20]
 8009578:	600f      	str	r7, [r1, #0]
 800957a:	bf18      	it	ne
 800957c:	2300      	movne	r3, #0
 800957e:	eba6 0807 	sub.w	r8, r6, r7
 8009582:	608b      	str	r3, [r1, #8]
 8009584:	f1b8 0f00 	cmp.w	r8, #0
 8009588:	dde9      	ble.n	800955e <__sflush_r+0xae>
 800958a:	6a21      	ldr	r1, [r4, #32]
 800958c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800958e:	4643      	mov	r3, r8
 8009590:	463a      	mov	r2, r7
 8009592:	4628      	mov	r0, r5
 8009594:	47b0      	blx	r6
 8009596:	2800      	cmp	r0, #0
 8009598:	dc08      	bgt.n	80095ac <__sflush_r+0xfc>
 800959a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800959e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095a2:	81a3      	strh	r3, [r4, #12]
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ac:	4407      	add	r7, r0
 80095ae:	eba8 0800 	sub.w	r8, r8, r0
 80095b2:	e7e7      	b.n	8009584 <__sflush_r+0xd4>
 80095b4:	20400001 	.word	0x20400001

080095b8 <_fflush_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	690b      	ldr	r3, [r1, #16]
 80095bc:	4605      	mov	r5, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	b913      	cbnz	r3, 80095c8 <_fflush_r+0x10>
 80095c2:	2500      	movs	r5, #0
 80095c4:	4628      	mov	r0, r5
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	b118      	cbz	r0, 80095d2 <_fflush_r+0x1a>
 80095ca:	6a03      	ldr	r3, [r0, #32]
 80095cc:	b90b      	cbnz	r3, 80095d2 <_fflush_r+0x1a>
 80095ce:	f7ff f9a1 	bl	8008914 <__sinit>
 80095d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0f3      	beq.n	80095c2 <_fflush_r+0xa>
 80095da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095dc:	07d0      	lsls	r0, r2, #31
 80095de:	d404      	bmi.n	80095ea <_fflush_r+0x32>
 80095e0:	0599      	lsls	r1, r3, #22
 80095e2:	d402      	bmi.n	80095ea <_fflush_r+0x32>
 80095e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095e6:	f7ff fb8c 	bl	8008d02 <__retarget_lock_acquire_recursive>
 80095ea:	4628      	mov	r0, r5
 80095ec:	4621      	mov	r1, r4
 80095ee:	f7ff ff5f 	bl	80094b0 <__sflush_r>
 80095f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095f4:	07da      	lsls	r2, r3, #31
 80095f6:	4605      	mov	r5, r0
 80095f8:	d4e4      	bmi.n	80095c4 <_fflush_r+0xc>
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	059b      	lsls	r3, r3, #22
 80095fe:	d4e1      	bmi.n	80095c4 <_fflush_r+0xc>
 8009600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009602:	f7ff fb7f 	bl	8008d04 <__retarget_lock_release_recursive>
 8009606:	e7dd      	b.n	80095c4 <_fflush_r+0xc>

08009608 <__swhatbuf_r>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	460c      	mov	r4, r1
 800960c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009610:	2900      	cmp	r1, #0
 8009612:	b096      	sub	sp, #88	@ 0x58
 8009614:	4615      	mov	r5, r2
 8009616:	461e      	mov	r6, r3
 8009618:	da0d      	bge.n	8009636 <__swhatbuf_r+0x2e>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009620:	f04f 0100 	mov.w	r1, #0
 8009624:	bf14      	ite	ne
 8009626:	2340      	movne	r3, #64	@ 0x40
 8009628:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800962c:	2000      	movs	r0, #0
 800962e:	6031      	str	r1, [r6, #0]
 8009630:	602b      	str	r3, [r5, #0]
 8009632:	b016      	add	sp, #88	@ 0x58
 8009634:	bd70      	pop	{r4, r5, r6, pc}
 8009636:	466a      	mov	r2, sp
 8009638:	f000 f848 	bl	80096cc <_fstat_r>
 800963c:	2800      	cmp	r0, #0
 800963e:	dbec      	blt.n	800961a <__swhatbuf_r+0x12>
 8009640:	9901      	ldr	r1, [sp, #4]
 8009642:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009646:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800964a:	4259      	negs	r1, r3
 800964c:	4159      	adcs	r1, r3
 800964e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009652:	e7eb      	b.n	800962c <__swhatbuf_r+0x24>

08009654 <__smakebuf_r>:
 8009654:	898b      	ldrh	r3, [r1, #12]
 8009656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009658:	079d      	lsls	r5, r3, #30
 800965a:	4606      	mov	r6, r0
 800965c:	460c      	mov	r4, r1
 800965e:	d507      	bpl.n	8009670 <__smakebuf_r+0x1c>
 8009660:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	6123      	str	r3, [r4, #16]
 8009668:	2301      	movs	r3, #1
 800966a:	6163      	str	r3, [r4, #20]
 800966c:	b003      	add	sp, #12
 800966e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009670:	ab01      	add	r3, sp, #4
 8009672:	466a      	mov	r2, sp
 8009674:	f7ff ffc8 	bl	8009608 <__swhatbuf_r>
 8009678:	9f00      	ldr	r7, [sp, #0]
 800967a:	4605      	mov	r5, r0
 800967c:	4639      	mov	r1, r7
 800967e:	4630      	mov	r0, r6
 8009680:	f7ff fbbc 	bl	8008dfc <_malloc_r>
 8009684:	b948      	cbnz	r0, 800969a <__smakebuf_r+0x46>
 8009686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968a:	059a      	lsls	r2, r3, #22
 800968c:	d4ee      	bmi.n	800966c <__smakebuf_r+0x18>
 800968e:	f023 0303 	bic.w	r3, r3, #3
 8009692:	f043 0302 	orr.w	r3, r3, #2
 8009696:	81a3      	strh	r3, [r4, #12]
 8009698:	e7e2      	b.n	8009660 <__smakebuf_r+0xc>
 800969a:	89a3      	ldrh	r3, [r4, #12]
 800969c:	6020      	str	r0, [r4, #0]
 800969e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	9b01      	ldr	r3, [sp, #4]
 80096a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096aa:	b15b      	cbz	r3, 80096c4 <__smakebuf_r+0x70>
 80096ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096b0:	4630      	mov	r0, r6
 80096b2:	f000 f81d 	bl	80096f0 <_isatty_r>
 80096b6:	b128      	cbz	r0, 80096c4 <__smakebuf_r+0x70>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	f023 0303 	bic.w	r3, r3, #3
 80096be:	f043 0301 	orr.w	r3, r3, #1
 80096c2:	81a3      	strh	r3, [r4, #12]
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	431d      	orrs	r5, r3
 80096c8:	81a5      	strh	r5, [r4, #12]
 80096ca:	e7cf      	b.n	800966c <__smakebuf_r+0x18>

080096cc <_fstat_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4d07      	ldr	r5, [pc, #28]	@ (80096ec <_fstat_r+0x20>)
 80096d0:	2300      	movs	r3, #0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	4611      	mov	r1, r2
 80096d8:	602b      	str	r3, [r5, #0]
 80096da:	f7f8 fb48 	bl	8001d6e <_fstat>
 80096de:	1c43      	adds	r3, r0, #1
 80096e0:	d102      	bne.n	80096e8 <_fstat_r+0x1c>
 80096e2:	682b      	ldr	r3, [r5, #0]
 80096e4:	b103      	cbz	r3, 80096e8 <_fstat_r+0x1c>
 80096e6:	6023      	str	r3, [r4, #0]
 80096e8:	bd38      	pop	{r3, r4, r5, pc}
 80096ea:	bf00      	nop
 80096ec:	24000900 	.word	0x24000900

080096f0 <_isatty_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d06      	ldr	r5, [pc, #24]	@ (800970c <_isatty_r+0x1c>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f7f8 fb47 	bl	8001d8e <_isatty>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_isatty_r+0x1a>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_isatty_r+0x1a>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	24000900 	.word	0x24000900

08009710 <_sbrk_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d06      	ldr	r5, [pc, #24]	@ (800972c <_sbrk_r+0x1c>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f8 fb50 	bl	8001dc0 <_sbrk>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_sbrk_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_sbrk_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	24000900 	.word	0x24000900

08009730 <_init>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	bf00      	nop
 8009734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009736:	bc08      	pop	{r3}
 8009738:	469e      	mov	lr, r3
 800973a:	4770      	bx	lr

0800973c <_fini>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	bf00      	nop
 8009740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009742:	bc08      	pop	{r3}
 8009744:	469e      	mov	lr, r3
 8009746:	4770      	bx	lr
