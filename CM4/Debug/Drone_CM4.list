
Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008664  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08108904  08108904  00009904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08108984  08108984  00009984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810898c  0810898c  0000998c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08108990  08108990  00009990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  10000000  08108994  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc4  1000006c  08108a00  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000e30  08108a00  0000ae30  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028dfc  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fcd  00000000  00000000  00032e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021e8  00000000  00000000  00037e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a53  00000000  00000000  0003a050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044b4d  00000000  00000000  0003baa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002bdd8  00000000  00000000  000805f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001c0b18  00000000  00000000  000ac3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026cee0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009890  00000000  00000000  0026cf24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  002767b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000006c 	.word	0x1000006c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081088ec 	.word	0x081088ec

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000070 	.word	0x10000070
 81002dc:	081088ec 	.word	0x081088ec

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__io_putchar>:

static int8_t LoggerSyncUARTTaskHandler(void);
static int8_t LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 8100380:	b580      	push	{r7, lr}
 8100382:	b084      	sub	sp, #16
 8100384:	af00      	add	r7, sp, #0
 8100386:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8100388:	f002 f85c 	bl	8102444 <HAL_GetCurrentCPUID>
 810038c:	4603      	mov	r3, r0
 810038e:	2b03      	cmp	r3, #3
 8100390:	d110      	bne.n	81003b4 <__io_putchar+0x34>
  {
    RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 8100392:	4b15      	ldr	r3, [pc, #84]	@ (81003e8 <__io_putchar+0x68>)
 8100394:	681b      	ldr	r3, [r3, #0]
 8100396:	1d39      	adds	r1, r7, #4
 8100398:	2201      	movs	r2, #1
 810039a:	4618      	mov	r0, r3
 810039c:	f000 f900 	bl	81005a0 <RingBuffWrite>
    // RingBuffWrite(pCM7RingBuf, (void*)&d, 1);
    // RingBuffWrite(pCM7RingBuf, (void*)&d, 1);
    if((char)ch == '\n')
 81003a0:	687b      	ldr	r3, [r7, #4]
 81003a2:	b2db      	uxtb	r3, r3
 81003a4:	2b0a      	cmp	r3, #10
 81003a6:	d119      	bne.n	81003dc <__io_putchar+0x5c>
    {
      LoggerWriteToUART(pCM7RingBuf);
 81003a8:	4b0f      	ldr	r3, [pc, #60]	@ (81003e8 <__io_putchar+0x68>)
 81003aa:	681b      	ldr	r3, [r3, #0]
 81003ac:	4618      	mov	r0, r3
 81003ae:	f000 f85d 	bl	810046c <LoggerWriteToUART>
 81003b2:	e013      	b.n	81003dc <__io_putchar+0x5c>
    }
  }
  else 
  {
    RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 81003b4:	4b0d      	ldr	r3, [pc, #52]	@ (81003ec <__io_putchar+0x6c>)
 81003b6:	681b      	ldr	r3, [r3, #0]
 81003b8:	1d39      	adds	r1, r7, #4
 81003ba:	2201      	movs	r2, #1
 81003bc:	4618      	mov	r0, r3
 81003be:	f000 f8ef 	bl	81005a0 <RingBuffWrite>
    if((char)ch == '\n')
 81003c2:	687b      	ldr	r3, [r7, #4]
 81003c4:	b2db      	uxtb	r3, r3
 81003c6:	2b0a      	cmp	r3, #10
 81003c8:	d108      	bne.n	81003dc <__io_putchar+0x5c>
    {
      /*
      * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
      */
      uint32_t taskID = SYNC_TASKID_UART_OUT;
 81003ca:	2300      	movs	r3, #0
 81003cc:	60fb      	str	r3, [r7, #12]
      SyncMailBoxWriteNotify(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 81003ce:	f107 030c 	add.w	r3, r7, #12
 81003d2:	2204      	movs	r2, #4
 81003d4:	4619      	mov	r1, r3
 81003d6:	2001      	movs	r0, #1
 81003d8:	f000 fae2 	bl	81009a0 <SyncMailBoxWriteNotify>
    }
  }
  return ch;
 81003dc:	687b      	ldr	r3, [r7, #4]
}
 81003de:	4618      	mov	r0, r3
 81003e0:	3710      	adds	r7, #16
 81003e2:	46bd      	mov	sp, r7
 81003e4:	bd80      	pop	{r7, pc}
 81003e6:	bf00      	nop
 81003e8:	1000008c 	.word	0x1000008c
 81003ec:	10000088 	.word	0x10000088

081003f0 <LoggerInit>:

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 81003f0:	b580      	push	{r7, lr}
 81003f2:	b082      	sub	sp, #8
 81003f4:	af00      	add	r7, sp, #0
 81003f6:	6078      	str	r0, [r7, #4]
  pUART = NULL;
 81003f8:	4b16      	ldr	r3, [pc, #88]	@ (8100454 <LoggerInit+0x64>)
 81003fa:	2200      	movs	r2, #0
 81003fc:	601a      	str	r2, [r3, #0]
  if(HAL_GetCurrentCPUID() == CM7_CPUID && pUART_ != NULL)
 81003fe:	f002 f821 	bl	8102444 <HAL_GetCurrentCPUID>
 8100402:	4603      	mov	r3, r0
 8100404:	2b03      	cmp	r3, #3
 8100406:	d105      	bne.n	8100414 <LoggerInit+0x24>
 8100408:	687b      	ldr	r3, [r7, #4]
 810040a:	2b00      	cmp	r3, #0
 810040c:	d002      	beq.n	8100414 <LoggerInit+0x24>
  {
    pUART = pUART_;
 810040e:	4a11      	ldr	r2, [pc, #68]	@ (8100454 <LoggerInit+0x64>)
 8100410:	687b      	ldr	r3, [r7, #4]
 8100412:	6013      	str	r3, [r2, #0]
  }
  /*
  * Local variables are not shared among the cores. 
  * So each ring buffer pointer needs to be inited for each core
  */
  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8100414:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8100418:	480f      	ldr	r0, [pc, #60]	@ (8100458 <LoggerInit+0x68>)
 810041a:	f000 f891 	bl	8100540 <RingBuffCreate>
 810041e:	4603      	mov	r3, r0
 8100420:	4a0e      	ldr	r2, [pc, #56]	@ (810045c <LoggerInit+0x6c>)
 8100422:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8100424:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8100428:	480d      	ldr	r0, [pc, #52]	@ (8100460 <LoggerInit+0x70>)
 810042a:	f000 f889 	bl	8100540 <RingBuffCreate>
 810042e:	4603      	mov	r3, r0
 8100430:	4a0c      	ldr	r2, [pc, #48]	@ (8100464 <LoggerInit+0x74>)
 8100432:	6013      	str	r3, [r2, #0]

  if(SyncRegisterHandler(LoggerSyncUARTTaskHandler, SYNC_TASKID_UART_OUT) != 1)
 8100434:	2100      	movs	r1, #0
 8100436:	480c      	ldr	r0, [pc, #48]	@ (8100468 <LoggerInit+0x78>)
 8100438:	f000 fb0a 	bl	8100a50 <SyncRegisterHandler>
 810043c:	4603      	mov	r3, r0
 810043e:	2b01      	cmp	r3, #1
 8100440:	d002      	beq.n	8100448 <LoggerInit+0x58>
  {
    return -1;
 8100442:	f04f 33ff 	mov.w	r3, #4294967295
 8100446:	e000      	b.n	810044a <LoggerInit+0x5a>
  }

  return 1;
 8100448:	2301      	movs	r3, #1
}
 810044a:	4618      	mov	r0, r3
 810044c:	3708      	adds	r7, #8
 810044e:	46bd      	mov	sp, r7
 8100450:	bd80      	pop	{r7, pc}
 8100452:	bf00      	nop
 8100454:	10000090 	.word	0x10000090
 8100458:	38000008 	.word	0x38000008
 810045c:	10000088 	.word	0x10000088
 8100460:	38000128 	.word	0x38000128
 8100464:	1000008c 	.word	0x1000008c
 8100468:	081004bd 	.word	0x081004bd

0810046c <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 810046c:	b580      	push	{r7, lr}
 810046e:	b084      	sub	sp, #16
 8100470:	af00      	add	r7, sp, #0
 8100472:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 8100474:	2300      	movs	r3, #0
 8100476:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 8100478:	2300      	movs	r3, #0
 810047a:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 810047c:	6878      	ldr	r0, [r7, #4]
 810047e:	f000 f9cb 	bl	8100818 <RingBuffGetLinearBlockReadLength>
 8100482:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 8100484:	68fb      	ldr	r3, [r7, #12]
 8100486:	2b00      	cmp	r3, #0
 8100488:	d011      	beq.n	81004ae <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 810048a:	6878      	ldr	r0, [r7, #4]
 810048c:	f000 f99a 	bl	81007c4 <RingBuffGetLinearBlockReadAddress>
 8100490:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 8100492:	4b09      	ldr	r3, [pc, #36]	@ (81004b8 <LoggerWriteToUART+0x4c>)
 8100494:	6818      	ldr	r0, [r3, #0]
 8100496:	68fb      	ldr	r3, [r7, #12]
 8100498:	b29a      	uxth	r2, r3
 810049a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810049e:	68b9      	ldr	r1, [r7, #8]
 81004a0:	f006 fbfe 	bl	8106ca0 <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 81004a4:	68f9      	ldr	r1, [r7, #12]
 81004a6:	6878      	ldr	r0, [r7, #4]
 81004a8:	f000 f9f8 	bl	810089c <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 81004ac:	e7e6      	b.n	810047c <LoggerWriteToUART+0x10>
  }
  return 1;
 81004ae:	2301      	movs	r3, #1
}
 81004b0:	4618      	mov	r0, r3
 81004b2:	3710      	adds	r7, #16
 81004b4:	46bd      	mov	sp, r7
 81004b6:	bd80      	pop	{r7, pc}
 81004b8:	10000090 	.word	0x10000090

081004bc <LoggerSyncUARTTaskHandler>:

static int8_t LoggerSyncUARTTaskHandler(void)
{
 81004bc:	b580      	push	{r7, lr}
 81004be:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 81004c0:	f001 ffc0 	bl	8102444 <HAL_GetCurrentCPUID>
 81004c4:	4603      	mov	r3, r0
 81004c6:	2b03      	cmp	r3, #3
 81004c8:	d106      	bne.n	81004d8 <LoggerSyncUARTTaskHandler+0x1c>
  {
    // LOG_INFO("Sending cm4 buffer to UART");
    LoggerWriteToUART(pCM4RingBuf);
 81004ca:	4b04      	ldr	r3, [pc, #16]	@ (81004dc <LoggerSyncUARTTaskHandler+0x20>)
 81004cc:	681b      	ldr	r3, [r3, #0]
 81004ce:	4618      	mov	r0, r3
 81004d0:	f7ff ffcc 	bl	810046c <LoggerWriteToUART>
    return 1;
 81004d4:	2301      	movs	r3, #1
 81004d6:	e7ff      	b.n	81004d8 <LoggerSyncUARTTaskHandler+0x1c>
  }
 81004d8:	4618      	mov	r0, r3
 81004da:	bd80      	pop	{r7, pc}
 81004dc:	10000088 	.word	0x10000088

081004e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81004e0:	b480      	push	{r7}
 81004e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81004e4:	4b09      	ldr	r3, [pc, #36]	@ (810050c <SystemInit+0x2c>)
 81004e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81004ea:	4a08      	ldr	r2, [pc, #32]	@ (810050c <SystemInit+0x2c>)
 81004ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81004f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81004f4:	4b05      	ldr	r3, [pc, #20]	@ (810050c <SystemInit+0x2c>)
 81004f6:	691b      	ldr	r3, [r3, #16]
 81004f8:	4a04      	ldr	r2, [pc, #16]	@ (810050c <SystemInit+0x2c>)
 81004fa:	f043 0310 	orr.w	r3, r3, #16
 81004fe:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100500:	bf00      	nop
 8100502:	46bd      	mov	sp, r7
 8100504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100508:	4770      	bx	lr
 810050a:	bf00      	nop
 810050c:	e000ed00 	.word	0xe000ed00

08100510 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100510:	b480      	push	{r7}
 8100512:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100514:	4b09      	ldr	r3, [pc, #36]	@ (810053c <ExitRun0Mode+0x2c>)
 8100516:	68db      	ldr	r3, [r3, #12]
 8100518:	4a08      	ldr	r2, [pc, #32]	@ (810053c <ExitRun0Mode+0x2c>)
 810051a:	f023 0302 	bic.w	r3, r3, #2
 810051e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100520:	bf00      	nop
 8100522:	4b06      	ldr	r3, [pc, #24]	@ (810053c <ExitRun0Mode+0x2c>)
 8100524:	685b      	ldr	r3, [r3, #4]
 8100526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810052a:	2b00      	cmp	r3, #0
 810052c:	d0f9      	beq.n	8100522 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810052e:	bf00      	nop
 8100530:	bf00      	nop
 8100532:	46bd      	mov	sp, r7
 8100534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100538:	4770      	bx	lr
 810053a:	bf00      	nop
 810053c:	58024800 	.word	0x58024800

08100540 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8100540:	b580      	push	{r7, lr}
 8100542:	b084      	sub	sp, #16
 8100544:	af00      	add	r7, sp, #0
 8100546:	6078      	str	r0, [r7, #4]
 8100548:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 810054a:	687b      	ldr	r3, [r7, #4]
 810054c:	2b00      	cmp	r3, #0
 810054e:	d005      	beq.n	810055c <RingBuffCreate+0x1c>
 8100550:	683b      	ldr	r3, [r7, #0]
 8100552:	2b00      	cmp	r3, #0
 8100554:	d002      	beq.n	810055c <RingBuffCreate+0x1c>
 8100556:	683b      	ldr	r3, [r7, #0]
 8100558:	2b20      	cmp	r3, #32
 810055a:	d801      	bhi.n	8100560 <RingBuffCreate+0x20>
        return NULL;
 810055c:	2300      	movs	r3, #0
 810055e:	e017      	b.n	8100590 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 8100560:	687b      	ldr	r3, [r7, #4]
 8100562:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 8100564:	2220      	movs	r2, #32
 8100566:	2100      	movs	r1, #0
 8100568:	68f8      	ldr	r0, [r7, #12]
 810056a:	f007 fc2f 	bl	8107dcc <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 810056e:	683b      	ldr	r3, [r7, #0]
 8100570:	f1a3 0220 	sub.w	r2, r3, #32
 8100574:	68fb      	ldr	r3, [r7, #12]
 8100576:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 8100578:	687b      	ldr	r3, [r7, #4]
 810057a:	f103 0220 	add.w	r2, r3, #32
 810057e:	68fb      	ldr	r3, [r7, #12]
 8100580:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8100582:	68fb      	ldr	r3, [r7, #12]
 8100584:	4a04      	ldr	r2, [pc, #16]	@ (8100598 <RingBuffCreate+0x58>)
 8100586:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 8100588:	68fb      	ldr	r3, [r7, #12]
 810058a:	4a04      	ldr	r2, [pc, #16]	@ (810059c <RingBuffCreate+0x5c>)
 810058c:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 810058e:	68fb      	ldr	r3, [r7, #12]
}
 8100590:	4618      	mov	r0, r3
 8100592:	3710      	adds	r7, #16
 8100594:	46bd      	mov	sp, r7
 8100596:	bd80      	pop	{r7, pc}
 8100598:	deadbeef 	.word	0xdeadbeef
 810059c:	21524110 	.word	0x21524110

081005a0 <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 81005a0:	b580      	push	{r7, lr}
 81005a2:	b088      	sub	sp, #32
 81005a4:	af00      	add	r7, sp, #0
 81005a6:	60f8      	str	r0, [r7, #12]
 81005a8:	60b9      	str	r1, [r7, #8]
 81005aa:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 81005ac:	68bb      	ldr	r3, [r7, #8]
 81005ae:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 81005b0:	68fb      	ldr	r3, [r7, #12]
 81005b2:	2b00      	cmp	r3, #0
 81005b4:	d017      	beq.n	81005e6 <RingBuffWrite+0x46>
 81005b6:	68fb      	ldr	r3, [r7, #12]
 81005b8:	681b      	ldr	r3, [r3, #0]
 81005ba:	4a3b      	ldr	r2, [pc, #236]	@ (81006a8 <RingBuffWrite+0x108>)
 81005bc:	4293      	cmp	r3, r2
 81005be:	d112      	bne.n	81005e6 <RingBuffWrite+0x46>
 81005c0:	68fb      	ldr	r3, [r7, #12]
 81005c2:	699b      	ldr	r3, [r3, #24]
 81005c4:	4a39      	ldr	r2, [pc, #228]	@ (81006ac <RingBuffWrite+0x10c>)
 81005c6:	4293      	cmp	r3, r2
 81005c8:	d10d      	bne.n	81005e6 <RingBuffWrite+0x46>
 81005ca:	68fb      	ldr	r3, [r7, #12]
 81005cc:	685b      	ldr	r3, [r3, #4]
 81005ce:	2b00      	cmp	r3, #0
 81005d0:	d009      	beq.n	81005e6 <RingBuffWrite+0x46>
 81005d2:	68fb      	ldr	r3, [r7, #12]
 81005d4:	689b      	ldr	r3, [r3, #8]
 81005d6:	2b00      	cmp	r3, #0
 81005d8:	d005      	beq.n	81005e6 <RingBuffWrite+0x46>
 81005da:	68bb      	ldr	r3, [r7, #8]
 81005dc:	2b00      	cmp	r3, #0
 81005de:	d002      	beq.n	81005e6 <RingBuffWrite+0x46>
 81005e0:	687b      	ldr	r3, [r7, #4]
 81005e2:	2b00      	cmp	r3, #0
 81005e4:	d101      	bne.n	81005ea <RingBuffWrite+0x4a>
        return 0;
 81005e6:	2300      	movs	r3, #0
 81005e8:	e059      	b.n	810069e <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 81005ea:	68f8      	ldr	r0, [r7, #12]
 81005ec:	f000 f860 	bl	81006b0 <RingBuffGetFree>
 81005f0:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 81005f2:	687a      	ldr	r2, [r7, #4]
 81005f4:	69bb      	ldr	r3, [r7, #24]
 81005f6:	4293      	cmp	r3, r2
 81005f8:	bf28      	it	cs
 81005fa:	4613      	movcs	r3, r2
 81005fc:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 81005fe:	687b      	ldr	r3, [r7, #4]
 8100600:	2b00      	cmp	r3, #0
 8100602:	d101      	bne.n	8100608 <RingBuffWrite+0x68>
        return 0;
 8100604:	2300      	movs	r3, #0
 8100606:	e04a      	b.n	810069e <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8100608:	68fb      	ldr	r3, [r7, #12]
 810060a:	689a      	ldr	r2, [r3, #8]
 810060c:	68fb      	ldr	r3, [r7, #12]
 810060e:	691b      	ldr	r3, [r3, #16]
 8100610:	1ad3      	subs	r3, r2, r3
 8100612:	687a      	ldr	r2, [r7, #4]
 8100614:	429a      	cmp	r2, r3
 8100616:	d905      	bls.n	8100624 <RingBuffWrite+0x84>
 8100618:	68fb      	ldr	r3, [r7, #12]
 810061a:	689a      	ldr	r2, [r3, #8]
 810061c:	68fb      	ldr	r3, [r7, #12]
 810061e:	691b      	ldr	r3, [r3, #16]
 8100620:	1ad3      	subs	r3, r2, r3
 8100622:	e000      	b.n	8100626 <RingBuffWrite+0x86>
 8100624:	687b      	ldr	r3, [r7, #4]
 8100626:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8100628:	68fb      	ldr	r3, [r7, #12]
 810062a:	685a      	ldr	r2, [r3, #4]
 810062c:	68fb      	ldr	r3, [r7, #12]
 810062e:	691b      	ldr	r3, [r3, #16]
 8100630:	4413      	add	r3, r2
 8100632:	697a      	ldr	r2, [r7, #20]
 8100634:	69f9      	ldr	r1, [r7, #28]
 8100636:	4618      	mov	r0, r3
 8100638:	f007 fc43 	bl	8107ec2 <memcpy>
    buff->w += tocopy;
 810063c:	68fb      	ldr	r3, [r7, #12]
 810063e:	691a      	ldr	r2, [r3, #16]
 8100640:	697b      	ldr	r3, [r7, #20]
 8100642:	441a      	add	r2, r3
 8100644:	68fb      	ldr	r3, [r7, #12]
 8100646:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8100648:	687a      	ldr	r2, [r7, #4]
 810064a:	697b      	ldr	r3, [r7, #20]
 810064c:	1ad3      	subs	r3, r2, r3
 810064e:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8100650:	687b      	ldr	r3, [r7, #4]
 8100652:	2b00      	cmp	r3, #0
 8100654:	d00b      	beq.n	810066e <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8100656:	68fb      	ldr	r3, [r7, #12]
 8100658:	6858      	ldr	r0, [r3, #4]
 810065a:	69fa      	ldr	r2, [r7, #28]
 810065c:	697b      	ldr	r3, [r7, #20]
 810065e:	4413      	add	r3, r2
 8100660:	687a      	ldr	r2, [r7, #4]
 8100662:	4619      	mov	r1, r3
 8100664:	f007 fc2d 	bl	8107ec2 <memcpy>
        buff->w = btw;
 8100668:	68fb      	ldr	r3, [r7, #12]
 810066a:	687a      	ldr	r2, [r7, #4]
 810066c:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 810066e:	68fb      	ldr	r3, [r7, #12]
 8100670:	691a      	ldr	r2, [r3, #16]
 8100672:	68fb      	ldr	r3, [r7, #12]
 8100674:	689b      	ldr	r3, [r3, #8]
 8100676:	429a      	cmp	r2, r3
 8100678:	d302      	bcc.n	8100680 <RingBuffWrite+0xe0>
        buff->w = 0;
 810067a:	68fb      	ldr	r3, [r7, #12]
 810067c:	2200      	movs	r2, #0
 810067e:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8100680:	68fb      	ldr	r3, [r7, #12]
 8100682:	695b      	ldr	r3, [r3, #20]
 8100684:	2b00      	cmp	r3, #0
 8100686:	d007      	beq.n	8100698 <RingBuffWrite+0xf8>
 8100688:	68fb      	ldr	r3, [r7, #12]
 810068a:	695b      	ldr	r3, [r3, #20]
 810068c:	6979      	ldr	r1, [r7, #20]
 810068e:	687a      	ldr	r2, [r7, #4]
 8100690:	440a      	add	r2, r1
 8100692:	2101      	movs	r1, #1
 8100694:	68f8      	ldr	r0, [r7, #12]
 8100696:	4798      	blx	r3
    return tocopy + btw;
 8100698:	697a      	ldr	r2, [r7, #20]
 810069a:	687b      	ldr	r3, [r7, #4]
 810069c:	4413      	add	r3, r2
}
 810069e:	4618      	mov	r0, r3
 81006a0:	3720      	adds	r7, #32
 81006a2:	46bd      	mov	sp, r7
 81006a4:	bd80      	pop	{r7, pc}
 81006a6:	bf00      	nop
 81006a8:	deadbeef 	.word	0xdeadbeef
 81006ac:	21524110 	.word	0x21524110

081006b0 <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 81006b0:	b480      	push	{r7}
 81006b2:	b087      	sub	sp, #28
 81006b4:	af00      	add	r7, sp, #0
 81006b6:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 81006b8:	687b      	ldr	r3, [r7, #4]
 81006ba:	2b00      	cmp	r3, #0
 81006bc:	d011      	beq.n	81006e2 <RingBuffGetFree+0x32>
 81006be:	687b      	ldr	r3, [r7, #4]
 81006c0:	681b      	ldr	r3, [r3, #0]
 81006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8100734 <RingBuffGetFree+0x84>)
 81006c4:	4293      	cmp	r3, r2
 81006c6:	d10c      	bne.n	81006e2 <RingBuffGetFree+0x32>
 81006c8:	687b      	ldr	r3, [r7, #4]
 81006ca:	699b      	ldr	r3, [r3, #24]
 81006cc:	4a1a      	ldr	r2, [pc, #104]	@ (8100738 <RingBuffGetFree+0x88>)
 81006ce:	4293      	cmp	r3, r2
 81006d0:	d107      	bne.n	81006e2 <RingBuffGetFree+0x32>
 81006d2:	687b      	ldr	r3, [r7, #4]
 81006d4:	685b      	ldr	r3, [r3, #4]
 81006d6:	2b00      	cmp	r3, #0
 81006d8:	d003      	beq.n	81006e2 <RingBuffGetFree+0x32>
 81006da:	687b      	ldr	r3, [r7, #4]
 81006dc:	689b      	ldr	r3, [r3, #8]
 81006de:	2b00      	cmp	r3, #0
 81006e0:	d101      	bne.n	81006e6 <RingBuffGetFree+0x36>
        return 0;
 81006e2:	2300      	movs	r3, #0
 81006e4:	e01f      	b.n	8100726 <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 81006e6:	687b      	ldr	r3, [r7, #4]
 81006e8:	691b      	ldr	r3, [r3, #16]
 81006ea:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81006ec:	687b      	ldr	r3, [r7, #4]
 81006ee:	68db      	ldr	r3, [r3, #12]
 81006f0:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 81006f2:	693a      	ldr	r2, [r7, #16]
 81006f4:	68fb      	ldr	r3, [r7, #12]
 81006f6:	429a      	cmp	r2, r3
 81006f8:	d103      	bne.n	8100702 <RingBuffGetFree+0x52>
        size = buff->size;
 81006fa:	687b      	ldr	r3, [r7, #4]
 81006fc:	689b      	ldr	r3, [r3, #8]
 81006fe:	617b      	str	r3, [r7, #20]
 8100700:	e00f      	b.n	8100722 <RingBuffGetFree+0x72>
    } else if (r > w) {
 8100702:	68fa      	ldr	r2, [r7, #12]
 8100704:	693b      	ldr	r3, [r7, #16]
 8100706:	429a      	cmp	r2, r3
 8100708:	d904      	bls.n	8100714 <RingBuffGetFree+0x64>
        size = r - w;
 810070a:	68fa      	ldr	r2, [r7, #12]
 810070c:	693b      	ldr	r3, [r7, #16]
 810070e:	1ad3      	subs	r3, r2, r3
 8100710:	617b      	str	r3, [r7, #20]
 8100712:	e006      	b.n	8100722 <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8100714:	687b      	ldr	r3, [r7, #4]
 8100716:	689a      	ldr	r2, [r3, #8]
 8100718:	68f9      	ldr	r1, [r7, #12]
 810071a:	693b      	ldr	r3, [r7, #16]
 810071c:	1acb      	subs	r3, r1, r3
 810071e:	4413      	add	r3, r2
 8100720:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8100722:	697b      	ldr	r3, [r7, #20]
 8100724:	3b01      	subs	r3, #1
}
 8100726:	4618      	mov	r0, r3
 8100728:	371c      	adds	r7, #28
 810072a:	46bd      	mov	sp, r7
 810072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100730:	4770      	bx	lr
 8100732:	bf00      	nop
 8100734:	deadbeef 	.word	0xdeadbeef
 8100738:	21524110 	.word	0x21524110

0810073c <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 810073c:	b480      	push	{r7}
 810073e:	b087      	sub	sp, #28
 8100740:	af00      	add	r7, sp, #0
 8100742:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8100744:	687b      	ldr	r3, [r7, #4]
 8100746:	2b00      	cmp	r3, #0
 8100748:	d011      	beq.n	810076e <RingBuffGetFull+0x32>
 810074a:	687b      	ldr	r3, [r7, #4]
 810074c:	681b      	ldr	r3, [r3, #0]
 810074e:	4a1b      	ldr	r2, [pc, #108]	@ (81007bc <RingBuffGetFull+0x80>)
 8100750:	4293      	cmp	r3, r2
 8100752:	d10c      	bne.n	810076e <RingBuffGetFull+0x32>
 8100754:	687b      	ldr	r3, [r7, #4]
 8100756:	699b      	ldr	r3, [r3, #24]
 8100758:	4a19      	ldr	r2, [pc, #100]	@ (81007c0 <RingBuffGetFull+0x84>)
 810075a:	4293      	cmp	r3, r2
 810075c:	d107      	bne.n	810076e <RingBuffGetFull+0x32>
 810075e:	687b      	ldr	r3, [r7, #4]
 8100760:	685b      	ldr	r3, [r3, #4]
 8100762:	2b00      	cmp	r3, #0
 8100764:	d003      	beq.n	810076e <RingBuffGetFull+0x32>
 8100766:	687b      	ldr	r3, [r7, #4]
 8100768:	689b      	ldr	r3, [r3, #8]
 810076a:	2b00      	cmp	r3, #0
 810076c:	d101      	bne.n	8100772 <RingBuffGetFull+0x36>
        return 0;
 810076e:	2300      	movs	r3, #0
 8100770:	e01d      	b.n	81007ae <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8100772:	687b      	ldr	r3, [r7, #4]
 8100774:	691b      	ldr	r3, [r3, #16]
 8100776:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100778:	687b      	ldr	r3, [r7, #4]
 810077a:	68db      	ldr	r3, [r3, #12]
 810077c:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 810077e:	693a      	ldr	r2, [r7, #16]
 8100780:	68fb      	ldr	r3, [r7, #12]
 8100782:	429a      	cmp	r2, r3
 8100784:	d102      	bne.n	810078c <RingBuffGetFull+0x50>
        size = 0;
 8100786:	2300      	movs	r3, #0
 8100788:	617b      	str	r3, [r7, #20]
 810078a:	e00f      	b.n	81007ac <RingBuffGetFull+0x70>
    } else if (w > r) {
 810078c:	693a      	ldr	r2, [r7, #16]
 810078e:	68fb      	ldr	r3, [r7, #12]
 8100790:	429a      	cmp	r2, r3
 8100792:	d904      	bls.n	810079e <RingBuffGetFull+0x62>
        size = w - r;
 8100794:	693a      	ldr	r2, [r7, #16]
 8100796:	68fb      	ldr	r3, [r7, #12]
 8100798:	1ad3      	subs	r3, r2, r3
 810079a:	617b      	str	r3, [r7, #20]
 810079c:	e006      	b.n	81007ac <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 810079e:	687b      	ldr	r3, [r7, #4]
 81007a0:	689a      	ldr	r2, [r3, #8]
 81007a2:	6939      	ldr	r1, [r7, #16]
 81007a4:	68fb      	ldr	r3, [r7, #12]
 81007a6:	1acb      	subs	r3, r1, r3
 81007a8:	4413      	add	r3, r2
 81007aa:	617b      	str	r3, [r7, #20]
    }
    return size;
 81007ac:	697b      	ldr	r3, [r7, #20]
}
 81007ae:	4618      	mov	r0, r3
 81007b0:	371c      	adds	r7, #28
 81007b2:	46bd      	mov	sp, r7
 81007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007b8:	4770      	bx	lr
 81007ba:	bf00      	nop
 81007bc:	deadbeef 	.word	0xdeadbeef
 81007c0:	21524110 	.word	0x21524110

081007c4 <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 81007c4:	b480      	push	{r7}
 81007c6:	b083      	sub	sp, #12
 81007c8:	af00      	add	r7, sp, #0
 81007ca:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 81007cc:	687b      	ldr	r3, [r7, #4]
 81007ce:	2b00      	cmp	r3, #0
 81007d0:	d011      	beq.n	81007f6 <RingBuffGetLinearBlockReadAddress+0x32>
 81007d2:	687b      	ldr	r3, [r7, #4]
 81007d4:	681b      	ldr	r3, [r3, #0]
 81007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8100810 <RingBuffGetLinearBlockReadAddress+0x4c>)
 81007d8:	4293      	cmp	r3, r2
 81007da:	d10c      	bne.n	81007f6 <RingBuffGetLinearBlockReadAddress+0x32>
 81007dc:	687b      	ldr	r3, [r7, #4]
 81007de:	699b      	ldr	r3, [r3, #24]
 81007e0:	4a0c      	ldr	r2, [pc, #48]	@ (8100814 <RingBuffGetLinearBlockReadAddress+0x50>)
 81007e2:	4293      	cmp	r3, r2
 81007e4:	d107      	bne.n	81007f6 <RingBuffGetLinearBlockReadAddress+0x32>
 81007e6:	687b      	ldr	r3, [r7, #4]
 81007e8:	685b      	ldr	r3, [r3, #4]
 81007ea:	2b00      	cmp	r3, #0
 81007ec:	d003      	beq.n	81007f6 <RingBuffGetLinearBlockReadAddress+0x32>
 81007ee:	687b      	ldr	r3, [r7, #4]
 81007f0:	689b      	ldr	r3, [r3, #8]
 81007f2:	2b00      	cmp	r3, #0
 81007f4:	d101      	bne.n	81007fa <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 81007f6:	2300      	movs	r3, #0
 81007f8:	e004      	b.n	8100804 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 81007fa:	687b      	ldr	r3, [r7, #4]
 81007fc:	685a      	ldr	r2, [r3, #4]
 81007fe:	687b      	ldr	r3, [r7, #4]
 8100800:	68db      	ldr	r3, [r3, #12]
 8100802:	4413      	add	r3, r2
}
 8100804:	4618      	mov	r0, r3
 8100806:	370c      	adds	r7, #12
 8100808:	46bd      	mov	sp, r7
 810080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810080e:	4770      	bx	lr
 8100810:	deadbeef 	.word	0xdeadbeef
 8100814:	21524110 	.word	0x21524110

08100818 <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 8100818:	b480      	push	{r7}
 810081a:	b087      	sub	sp, #28
 810081c:	af00      	add	r7, sp, #0
 810081e:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8100820:	687b      	ldr	r3, [r7, #4]
 8100822:	2b00      	cmp	r3, #0
 8100824:	d011      	beq.n	810084a <RingBuffGetLinearBlockReadLength+0x32>
 8100826:	687b      	ldr	r3, [r7, #4]
 8100828:	681b      	ldr	r3, [r3, #0]
 810082a:	4a1a      	ldr	r2, [pc, #104]	@ (8100894 <RingBuffGetLinearBlockReadLength+0x7c>)
 810082c:	4293      	cmp	r3, r2
 810082e:	d10c      	bne.n	810084a <RingBuffGetLinearBlockReadLength+0x32>
 8100830:	687b      	ldr	r3, [r7, #4]
 8100832:	699b      	ldr	r3, [r3, #24]
 8100834:	4a18      	ldr	r2, [pc, #96]	@ (8100898 <RingBuffGetLinearBlockReadLength+0x80>)
 8100836:	4293      	cmp	r3, r2
 8100838:	d107      	bne.n	810084a <RingBuffGetLinearBlockReadLength+0x32>
 810083a:	687b      	ldr	r3, [r7, #4]
 810083c:	685b      	ldr	r3, [r3, #4]
 810083e:	2b00      	cmp	r3, #0
 8100840:	d003      	beq.n	810084a <RingBuffGetLinearBlockReadLength+0x32>
 8100842:	687b      	ldr	r3, [r7, #4]
 8100844:	689b      	ldr	r3, [r3, #8]
 8100846:	2b00      	cmp	r3, #0
 8100848:	d101      	bne.n	810084e <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 810084a:	2300      	movs	r3, #0
 810084c:	e01b      	b.n	8100886 <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 810084e:	687b      	ldr	r3, [r7, #4]
 8100850:	691b      	ldr	r3, [r3, #16]
 8100852:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100854:	687b      	ldr	r3, [r7, #4]
 8100856:	68db      	ldr	r3, [r3, #12]
 8100858:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 810085a:	693a      	ldr	r2, [r7, #16]
 810085c:	68fb      	ldr	r3, [r7, #12]
 810085e:	429a      	cmp	r2, r3
 8100860:	d904      	bls.n	810086c <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8100862:	693a      	ldr	r2, [r7, #16]
 8100864:	68fb      	ldr	r3, [r7, #12]
 8100866:	1ad3      	subs	r3, r2, r3
 8100868:	617b      	str	r3, [r7, #20]
 810086a:	e00b      	b.n	8100884 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 810086c:	68fa      	ldr	r2, [r7, #12]
 810086e:	693b      	ldr	r3, [r7, #16]
 8100870:	429a      	cmp	r2, r3
 8100872:	d905      	bls.n	8100880 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8100874:	687b      	ldr	r3, [r7, #4]
 8100876:	689a      	ldr	r2, [r3, #8]
 8100878:	68fb      	ldr	r3, [r7, #12]
 810087a:	1ad3      	subs	r3, r2, r3
 810087c:	617b      	str	r3, [r7, #20]
 810087e:	e001      	b.n	8100884 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8100880:	2300      	movs	r3, #0
 8100882:	617b      	str	r3, [r7, #20]
    }
    return len;
 8100884:	697b      	ldr	r3, [r7, #20]
}
 8100886:	4618      	mov	r0, r3
 8100888:	371c      	adds	r7, #28
 810088a:	46bd      	mov	sp, r7
 810088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100890:	4770      	bx	lr
 8100892:	bf00      	nop
 8100894:	deadbeef 	.word	0xdeadbeef
 8100898:	21524110 	.word	0x21524110

0810089c <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 810089c:	b580      	push	{r7, lr}
 810089e:	b084      	sub	sp, #16
 81008a0:	af00      	add	r7, sp, #0
 81008a2:	6078      	str	r0, [r7, #4]
 81008a4:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 81008a6:	687b      	ldr	r3, [r7, #4]
 81008a8:	2b00      	cmp	r3, #0
 81008aa:	d014      	beq.n	81008d6 <RingBuffSkip+0x3a>
 81008ac:	687b      	ldr	r3, [r7, #4]
 81008ae:	681b      	ldr	r3, [r3, #0]
 81008b0:	4a20      	ldr	r2, [pc, #128]	@ (8100934 <RingBuffSkip+0x98>)
 81008b2:	4293      	cmp	r3, r2
 81008b4:	d10f      	bne.n	81008d6 <RingBuffSkip+0x3a>
 81008b6:	687b      	ldr	r3, [r7, #4]
 81008b8:	699b      	ldr	r3, [r3, #24]
 81008ba:	4a1f      	ldr	r2, [pc, #124]	@ (8100938 <RingBuffSkip+0x9c>)
 81008bc:	4293      	cmp	r3, r2
 81008be:	d10a      	bne.n	81008d6 <RingBuffSkip+0x3a>
 81008c0:	687b      	ldr	r3, [r7, #4]
 81008c2:	685b      	ldr	r3, [r3, #4]
 81008c4:	2b00      	cmp	r3, #0
 81008c6:	d006      	beq.n	81008d6 <RingBuffSkip+0x3a>
 81008c8:	687b      	ldr	r3, [r7, #4]
 81008ca:	689b      	ldr	r3, [r3, #8]
 81008cc:	2b00      	cmp	r3, #0
 81008ce:	d002      	beq.n	81008d6 <RingBuffSkip+0x3a>
 81008d0:	683b      	ldr	r3, [r7, #0]
 81008d2:	2b00      	cmp	r3, #0
 81008d4:	d101      	bne.n	81008da <RingBuffSkip+0x3e>
        return 0;
 81008d6:	2300      	movs	r3, #0
 81008d8:	e027      	b.n	810092a <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 81008da:	6878      	ldr	r0, [r7, #4]
 81008dc:	f7ff ff2e 	bl	810073c <RingBuffGetFull>
 81008e0:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 81008e2:	683a      	ldr	r2, [r7, #0]
 81008e4:	68fb      	ldr	r3, [r7, #12]
 81008e6:	4293      	cmp	r3, r2
 81008e8:	bf28      	it	cs
 81008ea:	4613      	movcs	r3, r2
 81008ec:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 81008ee:	687b      	ldr	r3, [r7, #4]
 81008f0:	68da      	ldr	r2, [r3, #12]
 81008f2:	683b      	ldr	r3, [r7, #0]
 81008f4:	441a      	add	r2, r3
 81008f6:	687b      	ldr	r3, [r7, #4]
 81008f8:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 81008fa:	687b      	ldr	r3, [r7, #4]
 81008fc:	68da      	ldr	r2, [r3, #12]
 81008fe:	687b      	ldr	r3, [r7, #4]
 8100900:	689b      	ldr	r3, [r3, #8]
 8100902:	429a      	cmp	r2, r3
 8100904:	d306      	bcc.n	8100914 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8100906:	687b      	ldr	r3, [r7, #4]
 8100908:	689b      	ldr	r3, [r3, #8]
 810090a:	687a      	ldr	r2, [r7, #4]
 810090c:	68d2      	ldr	r2, [r2, #12]
 810090e:	1ad2      	subs	r2, r2, r3
 8100910:	687b      	ldr	r3, [r7, #4]
 8100912:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8100914:	687b      	ldr	r3, [r7, #4]
 8100916:	695b      	ldr	r3, [r3, #20]
 8100918:	2b00      	cmp	r3, #0
 810091a:	d005      	beq.n	8100928 <RingBuffSkip+0x8c>
 810091c:	687b      	ldr	r3, [r7, #4]
 810091e:	695b      	ldr	r3, [r3, #20]
 8100920:	683a      	ldr	r2, [r7, #0]
 8100922:	2100      	movs	r1, #0
 8100924:	6878      	ldr	r0, [r7, #4]
 8100926:	4798      	blx	r3
    return len;
 8100928:	683b      	ldr	r3, [r7, #0]
}
 810092a:	4618      	mov	r0, r3
 810092c:	3710      	adds	r7, #16
 810092e:	46bd      	mov	sp, r7
 8100930:	bd80      	pop	{r7, pc}
 8100932:	bf00      	nop
 8100934:	deadbeef 	.word	0xdeadbeef
 8100938:	21524110 	.word	0x21524110

0810093c <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 810093c:	b480      	push	{r7}
 810093e:	b085      	sub	sp, #20
 8100940:	af00      	add	r7, sp, #0
 8100942:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8100944:	2300      	movs	r3, #0
 8100946:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8100948:	687b      	ldr	r3, [r7, #4]
 810094a:	2b01      	cmp	r3, #1
 810094c:	d103      	bne.n	8100956 <SyncMailBoxGet+0x1a>
 810094e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8100952:	60fb      	str	r3, [r7, #12]
 8100954:	e001      	b.n	810095a <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8100956:	4b04      	ldr	r3, [pc, #16]	@ (8100968 <SyncMailBoxGet+0x2c>)
 8100958:	60fb      	str	r3, [r7, #12]
    return pMB;
 810095a:	68fb      	ldr	r3, [r7, #12]
}
 810095c:	4618      	mov	r0, r3
 810095e:	3714      	adds	r7, #20
 8100960:	46bd      	mov	sp, r7
 8100962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100966:	4770      	bx	lr
 8100968:	38000004 	.word	0x38000004

0810096c <SyncMailBoxWrite>:

int8_t SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 810096c:	b580      	push	{r7, lr}
 810096e:	b086      	sub	sp, #24
 8100970:	af00      	add	r7, sp, #0
 8100972:	60f8      	str	r0, [r7, #12]
 8100974:	60b9      	str	r1, [r7, #8]
 8100976:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8100978:	687b      	ldr	r3, [r7, #4]
 810097a:	2b04      	cmp	r3, #4
 810097c:	d902      	bls.n	8100984 <SyncMailBoxWrite+0x18>
 810097e:	f04f 33ff 	mov.w	r3, #4294967295
 8100982:	e009      	b.n	8100998 <SyncMailBoxWrite+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8100984:	68f8      	ldr	r0, [r7, #12]
 8100986:	f7ff ffd9 	bl	810093c <SyncMailBoxGet>
 810098a:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 810098c:	687a      	ldr	r2, [r7, #4]
 810098e:	68b9      	ldr	r1, [r7, #8]
 8100990:	6978      	ldr	r0, [r7, #20]
 8100992:	f007 fa96 	bl	8107ec2 <memcpy>
    return 0;
 8100996:	2300      	movs	r3, #0
}
 8100998:	4618      	mov	r0, r3
 810099a:	3718      	adds	r7, #24
 810099c:	46bd      	mov	sp, r7
 810099e:	bd80      	pop	{r7, pc}

081009a0 <SyncMailBoxWriteNotify>:

int8_t SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 81009a0:	b580      	push	{r7, lr}
 81009a2:	b086      	sub	sp, #24
 81009a4:	af00      	add	r7, sp, #0
 81009a6:	60f8      	str	r0, [r7, #12]
 81009a8:	60b9      	str	r1, [r7, #8]
 81009aa:	607a      	str	r2, [r7, #4]
    int8_t status = SyncMailBoxWrite(mbID, pBuffer, len);
 81009ac:	687a      	ldr	r2, [r7, #4]
 81009ae:	68b9      	ldr	r1, [r7, #8]
 81009b0:	68f8      	ldr	r0, [r7, #12]
 81009b2:	f7ff ffdb 	bl	810096c <SyncMailBoxWrite>
 81009b6:	4603      	mov	r3, r0
 81009b8:	75fb      	strb	r3, [r7, #23]
    if(status < 0) return status;
 81009ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 81009be:	2b00      	cmp	r3, #0
 81009c0:	da02      	bge.n	81009c8 <SyncMailBoxWriteNotify+0x28>
 81009c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 81009c6:	e003      	b.n	81009d0 <SyncMailBoxWriteNotify+0x30>
    asm volatile ("dsb");
 81009c8:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 81009cc:	bf40      	sev
    return 0;
 81009ce:	2300      	movs	r3, #0
}
 81009d0:	4618      	mov	r0, r3
 81009d2:	3718      	adds	r7, #24
 81009d4:	46bd      	mov	sp, r7
 81009d6:	bd80      	pop	{r7, pc}

081009d8 <SyncMailBoxRead>:

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 81009d8:	b580      	push	{r7, lr}
 81009da:	b086      	sub	sp, #24
 81009dc:	af00      	add	r7, sp, #0
 81009de:	60f8      	str	r0, [r7, #12]
 81009e0:	60b9      	str	r1, [r7, #8]
 81009e2:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 81009e4:	687b      	ldr	r3, [r7, #4]
 81009e6:	2b04      	cmp	r3, #4
 81009e8:	d902      	bls.n	81009f0 <SyncMailBoxRead+0x18>
 81009ea:	f04f 33ff 	mov.w	r3, #4294967295
 81009ee:	e009      	b.n	8100a04 <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 81009f0:	68f8      	ldr	r0, [r7, #12]
 81009f2:	f7ff ffa3 	bl	810093c <SyncMailBoxGet>
 81009f6:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 81009f8:	687a      	ldr	r2, [r7, #4]
 81009fa:	6979      	ldr	r1, [r7, #20]
 81009fc:	68b8      	ldr	r0, [r7, #8]
 81009fe:	f007 fa60 	bl	8107ec2 <memcpy>
    return 0;
 8100a02:	2300      	movs	r3, #0
}
 8100a04:	4618      	mov	r0, r3
 8100a06:	3718      	adds	r7, #24
 8100a08:	46bd      	mov	sp, r7
 8100a0a:	bd80      	pop	{r7, pc}

08100a0c <SyncGetTaskHandler>:
#define NUM_TASK_TYPES 2

task_handler_fn_t handlers[NUM_TASK_TYPES];

task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8100a0c:	b480      	push	{r7}
 8100a0e:	b083      	sub	sp, #12
 8100a10:	af00      	add	r7, sp, #0
 8100a12:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8100a14:	687b      	ldr	r3, [r7, #4]
 8100a16:	2b02      	cmp	r3, #2
 8100a18:	d901      	bls.n	8100a1e <SyncGetTaskHandler+0x12>
 8100a1a:	2300      	movs	r3, #0
 8100a1c:	e003      	b.n	8100a26 <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8100a1e:	4a05      	ldr	r2, [pc, #20]	@ (8100a34 <SyncGetTaskHandler+0x28>)
 8100a20:	687b      	ldr	r3, [r7, #4]
 8100a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8100a26:	4618      	mov	r0, r3
 8100a28:	370c      	adds	r7, #12
 8100a2a:	46bd      	mov	sp, r7
 8100a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a30:	4770      	bx	lr
 8100a32:	bf00      	nop
 8100a34:	10000094 	.word	0x10000094

08100a38 <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8100a38:	b580      	push	{r7, lr}
 8100a3a:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8100a3c:	2208      	movs	r2, #8
 8100a3e:	2100      	movs	r1, #0
 8100a40:	4802      	ldr	r0, [pc, #8]	@ (8100a4c <SyncInit+0x14>)
 8100a42:	f007 f9c3 	bl	8107dcc <memset>
    return 1;
 8100a46:	2301      	movs	r3, #1
}
 8100a48:	4618      	mov	r0, r3
 8100a4a:	bd80      	pop	{r7, pc}
 8100a4c:	10000094 	.word	0x10000094

08100a50 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8100a50:	b480      	push	{r7}
 8100a52:	b083      	sub	sp, #12
 8100a54:	af00      	add	r7, sp, #0
 8100a56:	6078      	str	r0, [r7, #4]
 8100a58:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8100a5a:	683b      	ldr	r3, [r7, #0]
 8100a5c:	2b02      	cmp	r3, #2
 8100a5e:	d902      	bls.n	8100a66 <SyncRegisterHandler+0x16>
 8100a60:	f04f 33ff 	mov.w	r3, #4294967295
 8100a64:	e005      	b.n	8100a72 <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 8100a66:	4906      	ldr	r1, [pc, #24]	@ (8100a80 <SyncRegisterHandler+0x30>)
 8100a68:	683b      	ldr	r3, [r7, #0]
 8100a6a:	687a      	ldr	r2, [r7, #4]
 8100a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 1;
 8100a70:	2301      	movs	r3, #1
}
 8100a72:	4618      	mov	r0, r3
 8100a74:	370c      	adds	r7, #12
 8100a76:	46bd      	mov	sp, r7
 8100a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a7c:	4770      	bx	lr
 8100a7e:	bf00      	nop
 8100a80:	10000094 	.word	0x10000094

08100a84 <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 8100a84:	b580      	push	{r7, lr}
 8100a86:	b082      	sub	sp, #8
 8100a88:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8100a8a:	2300      	movs	r3, #0
 8100a8c:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8100a8e:	463b      	mov	r3, r7
 8100a90:	2204      	movs	r2, #4
 8100a92:	4619      	mov	r1, r3
 8100a94:	2000      	movs	r0, #0
 8100a96:	f7ff ff9f 	bl	81009d8 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8100a9a:	683b      	ldr	r3, [r7, #0]
 8100a9c:	4618      	mov	r0, r3
 8100a9e:	f7ff ffb5 	bl	8100a0c <SyncGetTaskHandler>
 8100aa2:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8100aa4:	687b      	ldr	r3, [r7, #4]
 8100aa6:	2b00      	cmp	r3, #0
 8100aa8:	d001      	beq.n	8100aae <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 8100aaa:	687b      	ldr	r3, [r7, #4]
 8100aac:	4798      	blx	r3
    }
}
 8100aae:	bf00      	nop
 8100ab0:	3708      	adds	r7, #8
 8100ab2:	46bd      	mov	sp, r7
 8100ab4:	bd80      	pop	{r7, pc}

08100ab6 <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 8100ab6:	b580      	push	{r7, lr}
 8100ab8:	b082      	sub	sp, #8
 8100aba:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 8100abc:	2300      	movs	r3, #0
 8100abe:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8100ac0:	463b      	mov	r3, r7
 8100ac2:	2204      	movs	r2, #4
 8100ac4:	4619      	mov	r1, r3
 8100ac6:	2001      	movs	r0, #1
 8100ac8:	f7ff ff86 	bl	81009d8 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8100acc:	683b      	ldr	r3, [r7, #0]
 8100ace:	4618      	mov	r0, r3
 8100ad0:	f7ff ff9c 	bl	8100a0c <SyncGetTaskHandler>
 8100ad4:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8100ad6:	687b      	ldr	r3, [r7, #4]
 8100ad8:	2b00      	cmp	r3, #0
 8100ada:	d001      	beq.n	8100ae0 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 8100adc:	687b      	ldr	r3, [r7, #4]
 8100ade:	4798      	blx	r3
    }
 8100ae0:	bf00      	nop
 8100ae2:	3708      	adds	r7, #8
 8100ae4:	46bd      	mov	sp, r7
 8100ae6:	bd80      	pop	{r7, pc}

08100ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100ae8:	b580      	push	{r7, lr}
 8100aea:	b082      	sub	sp, #8
 8100aec:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100aee:	4b34      	ldr	r3, [pc, #208]	@ (8100bc0 <main+0xd8>)
 8100af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100af4:	4a32      	ldr	r2, [pc, #200]	@ (8100bc0 <main+0xd8>)
 8100af6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100afe:	4b30      	ldr	r3, [pc, #192]	@ (8100bc0 <main+0xd8>)
 8100b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100b08:	607b      	str	r3, [r7, #4]
 8100b0a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b0c:	2001      	movs	r0, #1
 8100b0e:	f001 fe5b 	bl	81027c8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100b12:	f002 f815 	bl	8102b40 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100b16:	2201      	movs	r2, #1
 8100b18:	2102      	movs	r1, #2
 8100b1a:	2000      	movs	r0, #0
 8100b1c:	f001 ff96 	bl	8102a4c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b20:	4b28      	ldr	r3, [pc, #160]	@ (8100bc4 <main+0xdc>)
 8100b22:	681b      	ldr	r3, [r3, #0]
 8100b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100b28:	2b70      	cmp	r3, #112	@ 0x70
 8100b2a:	d108      	bne.n	8100b3e <main+0x56>
 8100b2c:	4b26      	ldr	r3, [pc, #152]	@ (8100bc8 <main+0xe0>)
 8100b2e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100b32:	4a25      	ldr	r2, [pc, #148]	@ (8100bc8 <main+0xe0>)
 8100b34:	f043 0301 	orr.w	r3, r3, #1
 8100b38:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100b3c:	e007      	b.n	8100b4e <main+0x66>
 8100b3e:	4b22      	ldr	r3, [pc, #136]	@ (8100bc8 <main+0xe0>)
 8100b40:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100b44:	4a20      	ldr	r2, [pc, #128]	@ (8100bc8 <main+0xe0>)
 8100b46:	f043 0301 	orr.w	r3, r3, #1
 8100b4a:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  if(HAL_Init() != HAL_OK)
 8100b4e:	f001 f977 	bl	8101e40 <HAL_Init>
 8100b52:	4603      	mov	r3, r0
 8100b54:	2b00      	cmp	r3, #0
 8100b56:	d001      	beq.n	8100b5c <main+0x74>
  {
    Error_Handler();
 8100b58:	f000 fc6a 	bl	8101430 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100b5c:	f000 fa22 	bl	8100fa4 <MX_GPIO_Init>
  MX_HDMI_CEC_Init();
 8100b60:	f000 f83e 	bl	8100be0 <MX_HDMI_CEC_Init>
  MX_RTC_Init();
 8100b64:	f000 f870 	bl	8100c48 <MX_RTC_Init>
  MX_SAI1_Init();
 8100b68:	f000 f8bc 	bl	8100ce4 <MX_SAI1_Init>
  MX_SPDIFRX1_Init();
 8100b6c:	f000 f95c 	bl	8100e28 <MX_SPDIFRX1_Init>
  MX_SPI5_Init();
 8100b70:	f000 f992 	bl	8100e98 <MX_SPI5_Init>
  MX_USB_OTG_HS_PCD_Init();
 8100b74:	f000 f9e4 	bl	8100f40 <MX_USB_OTG_HS_PCD_Init>
//     (void*) NULL,                     /* Pointer to tasks arguments (parameter) */
//     tskIDLE_PRIORITY + 2UL,           /* Task priority*/
//     NULL                              /* Task handle */
// );

    if(SyncInit() != 1 || LoggerInit(NULL) != 1)
 8100b78:	f7ff ff5e 	bl	8100a38 <SyncInit>
 8100b7c:	4603      	mov	r3, r0
 8100b7e:	2b01      	cmp	r3, #1
 8100b80:	d105      	bne.n	8100b8e <main+0xa6>
 8100b82:	2000      	movs	r0, #0
 8100b84:	f7ff fc34 	bl	81003f0 <LoggerInit>
 8100b88:	4603      	mov	r3, r0
 8100b8a:	2b01      	cmp	r3, #1
 8100b8c:	d001      	beq.n	8100b92 <main+0xaa>
    {
        Error_Handler();
 8100b8e:	f000 fc4f 	bl	8101430 <Error_Handler>

  while (1)
  {
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	  HAL_Delay(1000);
 8100b92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100b96:	f001 f9d1 	bl	8101f3c <HAL_Delay>
	  LOG_INFO("Hello from CM4");
 8100b9a:	480c      	ldr	r0, [pc, #48]	@ (8100bcc <main+0xe4>)
 8100b9c:	f006 ffce 	bl	8107b3c <iprintf>
 8100ba0:	480b      	ldr	r0, [pc, #44]	@ (8100bd0 <main+0xe8>)
 8100ba2:	f006 ffcb 	bl	8107b3c <iprintf>
 8100ba6:	21b4      	movs	r1, #180	@ 0xb4
 8100ba8:	480a      	ldr	r0, [pc, #40]	@ (8100bd4 <main+0xec>)
 8100baa:	f006 ffc7 	bl	8107b3c <iprintf>
 8100bae:	480a      	ldr	r0, [pc, #40]	@ (8100bd8 <main+0xf0>)
 8100bb0:	f006 ffc4 	bl	8107b3c <iprintf>
 8100bb4:	4809      	ldr	r0, [pc, #36]	@ (8100bdc <main+0xf4>)
 8100bb6:	f007 f829 	bl	8107c0c <puts>
	  HAL_Delay(1000);
 8100bba:	bf00      	nop
 8100bbc:	e7e9      	b.n	8100b92 <main+0xaa>
 8100bbe:	bf00      	nop
 8100bc0:	58024400 	.word	0x58024400
 8100bc4:	e000ed00 	.word	0xe000ed00
 8100bc8:	58026400 	.word	0x58026400
 8100bcc:	08108904 	.word	0x08108904
 8100bd0:	08108910 	.word	0x08108910
 8100bd4:	08108924 	.word	0x08108924
 8100bd8:	0810892c 	.word	0x0810892c
 8100bdc:	0810893c 	.word	0x0810893c

08100be0 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100be0:	b580      	push	{r7, lr}
 8100be2:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100be4:	4b15      	ldr	r3, [pc, #84]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100be6:	4a16      	ldr	r2, [pc, #88]	@ (8100c40 <MX_HDMI_CEC_Init+0x60>)
 8100be8:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100bea:	4b14      	ldr	r3, [pc, #80]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100bec:	2200      	movs	r2, #0
 8100bee:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100bf0:	4b12      	ldr	r3, [pc, #72]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100bf2:	2200      	movs	r2, #0
 8100bf4:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100bf6:	4b11      	ldr	r3, [pc, #68]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100bf8:	2210      	movs	r2, #16
 8100bfa:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100bfe:	2200      	movs	r2, #0
 8100c00:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100c02:	4b0e      	ldr	r3, [pc, #56]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100c04:	2200      	movs	r2, #0
 8100c06:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100c08:	4b0c      	ldr	r3, [pc, #48]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100c0a:	2200      	movs	r2, #0
 8100c0c:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100c10:	2200      	movs	r2, #0
 8100c12:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100c14:	4b09      	ldr	r3, [pc, #36]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100c16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8100c1a:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100c1c:	4b07      	ldr	r3, [pc, #28]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100c1e:	2200      	movs	r2, #0
 8100c20:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100c22:	4b06      	ldr	r3, [pc, #24]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100c24:	4a07      	ldr	r2, [pc, #28]	@ (8100c44 <MX_HDMI_CEC_Init+0x64>)
 8100c26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100c28:	4804      	ldr	r0, [pc, #16]	@ (8100c3c <MX_HDMI_CEC_Init+0x5c>)
 8100c2a:	f001 f9cd 	bl	8101fc8 <HAL_CEC_Init>
 8100c2e:	4603      	mov	r3, r0
 8100c30:	2b00      	cmp	r3, #0
 8100c32:	d001      	beq.n	8100c38 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100c34:	f000 fbfc 	bl	8101430 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100c38:	bf00      	nop
 8100c3a:	bd80      	pop	{r7, pc}
 8100c3c:	1000009c 	.word	0x1000009c
 8100c40:	40006c00 	.word	0x40006c00
 8100c44:	100007f0 	.word	0x100007f0

08100c48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100c48:	b580      	push	{r7, lr}
 8100c4a:	b08a      	sub	sp, #40	@ 0x28
 8100c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100c4e:	463b      	mov	r3, r7
 8100c50:	2228      	movs	r2, #40	@ 0x28
 8100c52:	2100      	movs	r1, #0
 8100c54:	4618      	mov	r0, r3
 8100c56:	f007 f8b9 	bl	8107dcc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100c5a:	4b20      	ldr	r3, [pc, #128]	@ (8100cdc <MX_RTC_Init+0x94>)
 8100c5c:	4a20      	ldr	r2, [pc, #128]	@ (8100ce0 <MX_RTC_Init+0x98>)
 8100c5e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100c60:	4b1e      	ldr	r3, [pc, #120]	@ (8100cdc <MX_RTC_Init+0x94>)
 8100c62:	2200      	movs	r2, #0
 8100c64:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100c66:	4b1d      	ldr	r3, [pc, #116]	@ (8100cdc <MX_RTC_Init+0x94>)
 8100c68:	227f      	movs	r2, #127	@ 0x7f
 8100c6a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8100cdc <MX_RTC_Init+0x94>)
 8100c6e:	22ff      	movs	r2, #255	@ 0xff
 8100c70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100c72:	4b1a      	ldr	r3, [pc, #104]	@ (8100cdc <MX_RTC_Init+0x94>)
 8100c74:	2200      	movs	r2, #0
 8100c76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100c78:	4b18      	ldr	r3, [pc, #96]	@ (8100cdc <MX_RTC_Init+0x94>)
 8100c7a:	2200      	movs	r2, #0
 8100c7c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100c7e:	4b17      	ldr	r3, [pc, #92]	@ (8100cdc <MX_RTC_Init+0x94>)
 8100c80:	2200      	movs	r2, #0
 8100c82:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100c84:	4b15      	ldr	r3, [pc, #84]	@ (8100cdc <MX_RTC_Init+0x94>)
 8100c86:	2200      	movs	r2, #0
 8100c88:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100c8a:	4814      	ldr	r0, [pc, #80]	@ (8100cdc <MX_RTC_Init+0x94>)
 8100c8c:	f004 feb8 	bl	8105a00 <HAL_RTC_Init>
 8100c90:	4603      	mov	r3, r0
 8100c92:	2b00      	cmp	r3, #0
 8100c94:	d001      	beq.n	8100c9a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100c96:	f000 fbcb 	bl	8101430 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100c9a:	2301      	movs	r3, #1
 8100c9c:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100c9e:	2301      	movs	r3, #1
 8100ca0:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100ca2:	2300      	movs	r3, #0
 8100ca4:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100ca6:	2300      	movs	r3, #0
 8100ca8:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100caa:	2300      	movs	r3, #0
 8100cac:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100cae:	2300      	movs	r3, #0
 8100cb0:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100cb2:	2300      	movs	r3, #0
 8100cb4:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100cb6:	2300      	movs	r3, #0
 8100cb8:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100cba:	2380      	movs	r3, #128	@ 0x80
 8100cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100cbe:	463b      	mov	r3, r7
 8100cc0:	4619      	mov	r1, r3
 8100cc2:	4806      	ldr	r0, [pc, #24]	@ (8100cdc <MX_RTC_Init+0x94>)
 8100cc4:	f004 ffb4 	bl	8105c30 <HAL_RTCEx_SetTamper>
 8100cc8:	4603      	mov	r3, r0
 8100cca:	2b00      	cmp	r3, #0
 8100ccc:	d001      	beq.n	8100cd2 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100cce:	f000 fbaf 	bl	8101430 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100cd2:	bf00      	nop
 8100cd4:	3728      	adds	r7, #40	@ 0x28
 8100cd6:	46bd      	mov	sp, r7
 8100cd8:	bd80      	pop	{r7, pc}
 8100cda:	bf00      	nop
 8100cdc:	100000e0 	.word	0x100000e0
 8100ce0:	58004000 	.word	0x58004000

08100ce4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100ce4:	b580      	push	{r7, lr}
 8100ce6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100cea:	4a4b      	ldr	r2, [pc, #300]	@ (8100e18 <MX_SAI1_Init+0x134>)
 8100cec:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100cee:	4b49      	ldr	r3, [pc, #292]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100cf0:	2200      	movs	r2, #0
 8100cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100cf4:	4b47      	ldr	r3, [pc, #284]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100cf6:	2200      	movs	r2, #0
 8100cf8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100cfa:	4b46      	ldr	r3, [pc, #280]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100cfc:	2240      	movs	r2, #64	@ 0x40
 8100cfe:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100d00:	4b44      	ldr	r3, [pc, #272]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d02:	2200      	movs	r2, #0
 8100d04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100d06:	4b43      	ldr	r3, [pc, #268]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d08:	2200      	movs	r2, #0
 8100d0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100d0c:	4b41      	ldr	r3, [pc, #260]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d0e:	2200      	movs	r2, #0
 8100d10:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100d12:	4b40      	ldr	r3, [pc, #256]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d14:	2200      	movs	r2, #0
 8100d16:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100d18:	4b3e      	ldr	r3, [pc, #248]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d1a:	2200      	movs	r2, #0
 8100d1c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d20:	2200      	movs	r2, #0
 8100d22:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100d24:	4b3b      	ldr	r3, [pc, #236]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d26:	2200      	movs	r2, #0
 8100d28:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8100e1c <MX_SAI1_Init+0x138>)
 8100d2e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100d30:	4b38      	ldr	r3, [pc, #224]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d32:	2200      	movs	r2, #0
 8100d34:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100d36:	4b37      	ldr	r3, [pc, #220]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d38:	2200      	movs	r2, #0
 8100d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100d3c:	4b35      	ldr	r3, [pc, #212]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d3e:	2200      	movs	r2, #0
 8100d40:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100d42:	4b34      	ldr	r3, [pc, #208]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d44:	2200      	movs	r2, #0
 8100d46:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100d48:	4b32      	ldr	r3, [pc, #200]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d4a:	2200      	movs	r2, #0
 8100d4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100d50:	4b30      	ldr	r3, [pc, #192]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d52:	2201      	movs	r2, #1
 8100d54:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100d56:	4b2f      	ldr	r3, [pc, #188]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d60:	2208      	movs	r2, #8
 8100d62:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100d64:	4b2b      	ldr	r3, [pc, #172]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d66:	2201      	movs	r2, #1
 8100d68:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d6c:	2200      	movs	r2, #0
 8100d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100d70:	4b28      	ldr	r3, [pc, #160]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d72:	2200      	movs	r2, #0
 8100d74:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100d76:	4b27      	ldr	r3, [pc, #156]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d78:	2200      	movs	r2, #0
 8100d7a:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100d7c:	4b25      	ldr	r3, [pc, #148]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d7e:	2200      	movs	r2, #0
 8100d80:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100d82:	4b24      	ldr	r3, [pc, #144]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d84:	2200      	movs	r2, #0
 8100d86:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100d88:	4b22      	ldr	r3, [pc, #136]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d8a:	2201      	movs	r2, #1
 8100d8c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100d8e:	4b21      	ldr	r3, [pc, #132]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d90:	2200      	movs	r2, #0
 8100d92:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100d94:	481f      	ldr	r0, [pc, #124]	@ (8100e14 <MX_SAI1_Init+0x130>)
 8100d96:	f005 f82b 	bl	8105df0 <HAL_SAI_Init>
 8100d9a:	4603      	mov	r3, r0
 8100d9c:	2b00      	cmp	r3, #0
 8100d9e:	d001      	beq.n	8100da4 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8100da0:	f000 fb46 	bl	8101430 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100da4:	4b1e      	ldr	r3, [pc, #120]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100da6:	4a1f      	ldr	r2, [pc, #124]	@ (8100e24 <MX_SAI1_Init+0x140>)
 8100da8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100daa:	4b1d      	ldr	r3, [pc, #116]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100dac:	2204      	movs	r2, #4
 8100dae:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100db0:	4b1b      	ldr	r3, [pc, #108]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100db2:	2200      	movs	r2, #0
 8100db4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100db6:	4b1a      	ldr	r3, [pc, #104]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100db8:	2200      	movs	r2, #0
 8100dba:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100dbc:	4b18      	ldr	r3, [pc, #96]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100dbe:	2200      	movs	r2, #0
 8100dc0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100dc2:	4b17      	ldr	r3, [pc, #92]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100dc4:	2200      	movs	r2, #0
 8100dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100dc8:	4b15      	ldr	r3, [pc, #84]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100dca:	2200      	movs	r2, #0
 8100dcc:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100dce:	4b14      	ldr	r3, [pc, #80]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100dd0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100dd4:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100dd6:	4b12      	ldr	r3, [pc, #72]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100dd8:	2200      	movs	r2, #0
 8100dda:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100ddc:	4b10      	ldr	r3, [pc, #64]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100dde:	2200      	movs	r2, #0
 8100de0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100de2:	4b0f      	ldr	r3, [pc, #60]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100de4:	2200      	movs	r2, #0
 8100de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100de8:	4b0d      	ldr	r3, [pc, #52]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100dea:	2200      	movs	r2, #0
 8100dec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100df0:	4b0b      	ldr	r3, [pc, #44]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100df2:	2201      	movs	r2, #1
 8100df4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100df6:	4b0a      	ldr	r3, [pc, #40]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100df8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100dfe:	4808      	ldr	r0, [pc, #32]	@ (8100e20 <MX_SAI1_Init+0x13c>)
 8100e00:	f004 fff6 	bl	8105df0 <HAL_SAI_Init>
 8100e04:	4603      	mov	r3, r0
 8100e06:	2b00      	cmp	r3, #0
 8100e08:	d001      	beq.n	8100e0e <MX_SAI1_Init+0x12a>
  {
    Error_Handler();
 8100e0a:	f000 fb11 	bl	8101430 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100e0e:	bf00      	nop
 8100e10:	bd80      	pop	{r7, pc}
 8100e12:	bf00      	nop
 8100e14:	10000104 	.word	0x10000104
 8100e18:	40015804 	.word	0x40015804
 8100e1c:	0002ee00 	.word	0x0002ee00
 8100e20:	1000019c 	.word	0x1000019c
 8100e24:	40015824 	.word	0x40015824

08100e28 <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100e28:	b580      	push	{r7, lr}
 8100e2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100e2c:	4b19      	ldr	r3, [pc, #100]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e2e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100e32:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100e34:	4b17      	ldr	r3, [pc, #92]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e36:	2200      	movs	r2, #0
 8100e38:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100e3a:	4b16      	ldr	r3, [pc, #88]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e3c:	2200      	movs	r2, #0
 8100e3e:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100e40:	4b14      	ldr	r3, [pc, #80]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e42:	2200      	movs	r2, #0
 8100e44:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100e46:	4b13      	ldr	r3, [pc, #76]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e48:	2200      	movs	r2, #0
 8100e4a:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100e4c:	4b11      	ldr	r3, [pc, #68]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e4e:	2200      	movs	r2, #0
 8100e50:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100e52:	4b10      	ldr	r3, [pc, #64]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e54:	2200      	movs	r2, #0
 8100e56:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100e58:	4b0e      	ldr	r3, [pc, #56]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e5a:	2200      	movs	r2, #0
 8100e5c:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e60:	2200      	movs	r2, #0
 8100e62:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100e64:	4b0b      	ldr	r3, [pc, #44]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e66:	2200      	movs	r2, #0
 8100e68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e6c:	2200      	movs	r2, #0
 8100e6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100e70:	4b08      	ldr	r3, [pc, #32]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e72:	2200      	movs	r2, #0
 8100e74:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100e78:	4b06      	ldr	r3, [pc, #24]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e7a:	2200      	movs	r2, #0
 8100e7c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100e80:	4804      	ldr	r0, [pc, #16]	@ (8100e94 <MX_SPDIFRX1_Init+0x6c>)
 8100e82:	f005 fa99 	bl	81063b8 <HAL_SPDIFRX_Init>
 8100e86:	4603      	mov	r3, r0
 8100e88:	2b00      	cmp	r3, #0
 8100e8a:	d001      	beq.n	8100e90 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100e8c:	f000 fad0 	bl	8101430 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100e90:	bf00      	nop
 8100e92:	bd80      	pop	{r7, pc}
 8100e94:	10000234 	.word	0x10000234

08100e98 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100e98:	b580      	push	{r7, lr}
 8100e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100e9c:	4b26      	ldr	r3, [pc, #152]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100e9e:	4a27      	ldr	r2, [pc, #156]	@ (8100f3c <MX_SPI5_Init+0xa4>)
 8100ea0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100ea2:	4b25      	ldr	r3, [pc, #148]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100ea4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100ea8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100eaa:	4b23      	ldr	r3, [pc, #140]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100eac:	2200      	movs	r2, #0
 8100eae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100eb0:	4b21      	ldr	r3, [pc, #132]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100eb2:	2203      	movs	r2, #3
 8100eb4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100eb6:	4b20      	ldr	r3, [pc, #128]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100eb8:	2200      	movs	r2, #0
 8100eba:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100ebe:	2200      	movs	r2, #0
 8100ec0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100ec4:	2200      	movs	r2, #0
 8100ec6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100eca:	2200      	movs	r2, #0
 8100ecc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100ece:	4b1a      	ldr	r3, [pc, #104]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100ed0:	2200      	movs	r2, #0
 8100ed2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100ed4:	4b18      	ldr	r3, [pc, #96]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100ed6:	2200      	movs	r2, #0
 8100ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100eda:	4b17      	ldr	r3, [pc, #92]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100edc:	2200      	movs	r2, #0
 8100ede:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100ee0:	4b15      	ldr	r3, [pc, #84]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100ee2:	2200      	movs	r2, #0
 8100ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100ee6:	4b14      	ldr	r3, [pc, #80]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100ee8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100eec:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100eee:	4b12      	ldr	r3, [pc, #72]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100ef0:	2200      	movs	r2, #0
 8100ef2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100ef4:	4b10      	ldr	r3, [pc, #64]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100ef6:	2200      	movs	r2, #0
 8100ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100efa:	4b0f      	ldr	r3, [pc, #60]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100efc:	2200      	movs	r2, #0
 8100efe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f00:	4b0d      	ldr	r3, [pc, #52]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100f02:	2200      	movs	r2, #0
 8100f04:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100f06:	4b0c      	ldr	r3, [pc, #48]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100f08:	2200      	movs	r2, #0
 8100f0a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100f0e:	2200      	movs	r2, #0
 8100f10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100f12:	4b09      	ldr	r3, [pc, #36]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100f14:	2200      	movs	r2, #0
 8100f16:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100f18:	4b07      	ldr	r3, [pc, #28]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100f1a:	2200      	movs	r2, #0
 8100f1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100f1e:	4b06      	ldr	r3, [pc, #24]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100f20:	2200      	movs	r2, #0
 8100f22:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100f24:	4804      	ldr	r0, [pc, #16]	@ (8100f38 <MX_SPI5_Init+0xa0>)
 8100f26:	f005 fab5 	bl	8106494 <HAL_SPI_Init>
 8100f2a:	4603      	mov	r3, r0
 8100f2c:	2b00      	cmp	r3, #0
 8100f2e:	d001      	beq.n	8100f34 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100f30:	f000 fa7e 	bl	8101430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100f34:	bf00      	nop
 8100f36:	bd80      	pop	{r7, pc}
 8100f38:	10000284 	.word	0x10000284
 8100f3c:	40015000 	.word	0x40015000

08100f40 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8100f40:	b580      	push	{r7, lr}
 8100f42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8100f44:	4b15      	ldr	r3, [pc, #84]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f46:	4a16      	ldr	r2, [pc, #88]	@ (8100fa0 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8100f48:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8100f4a:	4b14      	ldr	r3, [pc, #80]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f4c:	2209      	movs	r2, #9
 8100f4e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8100f50:	4b12      	ldr	r3, [pc, #72]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f52:	2200      	movs	r2, #0
 8100f54:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8100f56:	4b11      	ldr	r3, [pc, #68]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f58:	2200      	movs	r2, #0
 8100f5a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8100f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f5e:	2201      	movs	r2, #1
 8100f60:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8100f62:	4b0e      	ldr	r3, [pc, #56]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f64:	2200      	movs	r2, #0
 8100f66:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8100f68:	4b0c      	ldr	r3, [pc, #48]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f6a:	2200      	movs	r2, #0
 8100f6c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8100f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f70:	2200      	movs	r2, #0
 8100f72:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8100f74:	4b09      	ldr	r3, [pc, #36]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f76:	2200      	movs	r2, #0
 8100f78:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8100f7a:	4b08      	ldr	r3, [pc, #32]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f7c:	2200      	movs	r2, #0
 8100f7e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8100f80:	4b06      	ldr	r3, [pc, #24]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f82:	2200      	movs	r2, #0
 8100f84:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8100f86:	4805      	ldr	r0, [pc, #20]	@ (8100f9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f88:	f001 fc30 	bl	81027ec <HAL_PCD_Init>
 8100f8c:	4603      	mov	r3, r0
 8100f8e:	2b00      	cmp	r3, #0
 8100f90:	d001      	beq.n	8100f96 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8100f92:	f000 fa4d 	bl	8101430 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8100f96:	bf00      	nop
 8100f98:	bd80      	pop	{r7, pc}
 8100f9a:	bf00      	nop
 8100f9c:	1000030c 	.word	0x1000030c
 8100fa0:	40040000 	.word	0x40040000

08100fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100fa4:	b580      	push	{r7, lr}
 8100fa6:	b090      	sub	sp, #64	@ 0x40
 8100fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100faa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100fae:	2200      	movs	r2, #0
 8100fb0:	601a      	str	r2, [r3, #0]
 8100fb2:	605a      	str	r2, [r3, #4]
 8100fb4:	609a      	str	r2, [r3, #8]
 8100fb6:	60da      	str	r2, [r3, #12]
 8100fb8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100fba:	4bbc      	ldr	r3, [pc, #752]	@ (81012ac <MX_GPIO_Init+0x308>)
 8100fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fc0:	4aba      	ldr	r2, [pc, #744]	@ (81012ac <MX_GPIO_Init+0x308>)
 8100fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fca:	4bb8      	ldr	r3, [pc, #736]	@ (81012ac <MX_GPIO_Init+0x308>)
 8100fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8100fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100fd8:	4bb4      	ldr	r3, [pc, #720]	@ (81012ac <MX_GPIO_Init+0x308>)
 8100fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fde:	4ab3      	ldr	r2, [pc, #716]	@ (81012ac <MX_GPIO_Init+0x308>)
 8100fe0:	f043 0302 	orr.w	r3, r3, #2
 8100fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fe8:	4bb0      	ldr	r3, [pc, #704]	@ (81012ac <MX_GPIO_Init+0x308>)
 8100fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fee:	f003 0302 	and.w	r3, r3, #2
 8100ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8100ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100ff6:	4bad      	ldr	r3, [pc, #692]	@ (81012ac <MX_GPIO_Init+0x308>)
 8100ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ffc:	4aab      	ldr	r2, [pc, #684]	@ (81012ac <MX_GPIO_Init+0x308>)
 8100ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101006:	4ba9      	ldr	r3, [pc, #676]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810100c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101010:	623b      	str	r3, [r7, #32]
 8101012:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101014:	4ba5      	ldr	r3, [pc, #660]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810101a:	4aa4      	ldr	r2, [pc, #656]	@ (81012ac <MX_GPIO_Init+0x308>)
 810101c:	f043 0304 	orr.w	r3, r3, #4
 8101020:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101024:	4ba1      	ldr	r3, [pc, #644]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810102a:	f003 0304 	and.w	r3, r3, #4
 810102e:	61fb      	str	r3, [r7, #28]
 8101030:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101032:	4b9e      	ldr	r3, [pc, #632]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101038:	4a9c      	ldr	r2, [pc, #624]	@ (81012ac <MX_GPIO_Init+0x308>)
 810103a:	f043 0310 	orr.w	r3, r3, #16
 810103e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101042:	4b9a      	ldr	r3, [pc, #616]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101048:	f003 0310 	and.w	r3, r3, #16
 810104c:	61bb      	str	r3, [r7, #24]
 810104e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8101050:	4b96      	ldr	r3, [pc, #600]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101056:	4a95      	ldr	r2, [pc, #596]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810105c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101060:	4b92      	ldr	r3, [pc, #584]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810106a:	617b      	str	r3, [r7, #20]
 810106c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810106e:	4b8f      	ldr	r3, [pc, #572]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101074:	4a8d      	ldr	r2, [pc, #564]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101076:	f043 0308 	orr.w	r3, r3, #8
 810107a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810107e:	4b8b      	ldr	r3, [pc, #556]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101084:	f003 0308 	and.w	r3, r3, #8
 8101088:	613b      	str	r3, [r7, #16]
 810108a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810108c:	4b87      	ldr	r3, [pc, #540]	@ (81012ac <MX_GPIO_Init+0x308>)
 810108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101092:	4a86      	ldr	r2, [pc, #536]	@ (81012ac <MX_GPIO_Init+0x308>)
 8101094:	f043 0320 	orr.w	r3, r3, #32
 8101098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810109c:	4b83      	ldr	r3, [pc, #524]	@ (81012ac <MX_GPIO_Init+0x308>)
 810109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010a2:	f003 0320 	and.w	r3, r3, #32
 81010a6:	60fb      	str	r3, [r7, #12]
 81010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 81010aa:	4b80      	ldr	r3, [pc, #512]	@ (81012ac <MX_GPIO_Init+0x308>)
 81010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010b0:	4a7e      	ldr	r2, [pc, #504]	@ (81012ac <MX_GPIO_Init+0x308>)
 81010b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010ba:	4b7c      	ldr	r3, [pc, #496]	@ (81012ac <MX_GPIO_Init+0x308>)
 81010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81010c4:	60bb      	str	r3, [r7, #8]
 81010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 81010c8:	4b78      	ldr	r3, [pc, #480]	@ (81012ac <MX_GPIO_Init+0x308>)
 81010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010ce:	4a77      	ldr	r2, [pc, #476]	@ (81012ac <MX_GPIO_Init+0x308>)
 81010d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81010d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010d8:	4b74      	ldr	r3, [pc, #464]	@ (81012ac <MX_GPIO_Init+0x308>)
 81010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81010e2:	607b      	str	r3, [r7, #4]
 81010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81010e6:	4b71      	ldr	r3, [pc, #452]	@ (81012ac <MX_GPIO_Init+0x308>)
 81010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010ec:	4a6f      	ldr	r2, [pc, #444]	@ (81012ac <MX_GPIO_Init+0x308>)
 81010ee:	f043 0301 	orr.w	r3, r3, #1
 81010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010f6:	4b6d      	ldr	r3, [pc, #436]	@ (81012ac <MX_GPIO_Init+0x308>)
 81010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010fc:	f003 0301 	and.w	r3, r3, #1
 8101100:	603b      	str	r3, [r7, #0]
 8101102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PI6 PI5 PI4 PI1
                           PI0 PI7 PI2 PI3
                           PI9 PI10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8101104:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8101108:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810110a:	2302      	movs	r3, #2
 810110c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810110e:	2300      	movs	r3, #0
 8101110:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101112:	2303      	movs	r3, #3
 8101114:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101116:	230c      	movs	r3, #12
 8101118:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 810111a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810111e:	4619      	mov	r1, r3
 8101120:	4863      	ldr	r0, [pc, #396]	@ (81012b0 <MX_GPIO_Init+0x30c>)
 8101122:	f001 f9a1 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8101126:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 810112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810112c:	2302      	movs	r3, #2
 810112e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101130:	2300      	movs	r3, #0
 8101132:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101134:	2300      	movs	r3, #0
 8101136:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101138:	2309      	movs	r3, #9
 810113a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810113c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101140:	4619      	mov	r1, r3
 8101142:	485c      	ldr	r0, [pc, #368]	@ (81012b4 <MX_GPIO_Init+0x310>)
 8101144:	f001 f990 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_8;
 8101148:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 810114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810114e:	2302      	movs	r3, #2
 8101150:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101152:	2300      	movs	r3, #0
 8101154:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101156:	2303      	movs	r3, #3
 8101158:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810115a:	230c      	movs	r3, #12
 810115c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810115e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101162:	4619      	mov	r1, r3
 8101164:	4854      	ldr	r0, [pc, #336]	@ (81012b8 <MX_GPIO_Init+0x314>)
 8101166:	f001 f97f 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 810116a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 810116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101170:	2302      	movs	r3, #2
 8101172:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101174:	2300      	movs	r3, #0
 8101176:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101178:	2303      	movs	r3, #3
 810117a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810117c:	230c      	movs	r3, #12
 810117e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101180:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101184:	4619      	mov	r1, r3
 8101186:	484d      	ldr	r0, [pc, #308]	@ (81012bc <MX_GPIO_Init+0x318>)
 8101188:	f001 f96e 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 810118c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8101190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101192:	2302      	movs	r3, #2
 8101194:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101196:	2300      	movs	r3, #0
 8101198:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810119a:	2300      	movs	r3, #0
 810119c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810119e:	230b      	movs	r3, #11
 81011a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81011a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81011a6:	4619      	mov	r1, r3
 81011a8:	4842      	ldr	r0, [pc, #264]	@ (81012b4 <MX_GPIO_Init+0x310>)
 81011aa:	f001 f95d 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH14 PH13 PH5
                           PH10 PH11 PH9 PH12
                           PH6 PH8 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_5
 81011ae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 81011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_12
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011b4:	2302      	movs	r3, #2
 81011b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011b8:	2300      	movs	r3, #0
 81011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011bc:	2303      	movs	r3, #3
 81011be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81011c0:	230c      	movs	r3, #12
 81011c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81011c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81011c8:	4619      	mov	r1, r3
 81011ca:	483d      	ldr	r0, [pc, #244]	@ (81012c0 <MX_GPIO_Init+0x31c>)
 81011cc:	f001 f94c 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG4 PG2
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_2
 81011d0:	f248 1317 	movw	r3, #33047	@ 0x8117
 81011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011d6:	2302      	movs	r3, #2
 81011d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011da:	2300      	movs	r3, #0
 81011dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011de:	2303      	movs	r3, #3
 81011e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81011e2:	230c      	movs	r3, #12
 81011e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81011e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81011ea:	4619      	mov	r1, r3
 81011ec:	4831      	ldr	r0, [pc, #196]	@ (81012b4 <MX_GPIO_Init+0x310>)
 81011ee:	f001 f93b 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 81011f2:	2304      	movs	r3, #4
 81011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011f6:	2302      	movs	r3, #2
 81011f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011fa:	2300      	movs	r3, #0
 81011fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011fe:	2303      	movs	r3, #3
 8101200:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101202:	230c      	movs	r3, #12
 8101204:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101206:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810120a:	4619      	mov	r1, r3
 810120c:	482d      	ldr	r0, [pc, #180]	@ (81012c4 <MX_GPIO_Init+0x320>)
 810120e:	f001 f92b 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8101212:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8101216:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101218:	2302      	movs	r3, #2
 810121a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810121c:	2300      	movs	r3, #0
 810121e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101220:	2303      	movs	r3, #3
 8101222:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101224:	230c      	movs	r3, #12
 8101226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101228:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810122c:	4619      	mov	r1, r3
 810122e:	4825      	ldr	r0, [pc, #148]	@ (81012c4 <MX_GPIO_Init+0x320>)
 8101230:	f001 f91a 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8101234:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8101238:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810123a:	2302      	movs	r3, #2
 810123c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810123e:	2300      	movs	r3, #0
 8101240:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101242:	2303      	movs	r3, #3
 8101244:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101246:	230c      	movs	r3, #12
 8101248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810124a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810124e:	4619      	mov	r1, r3
 8101250:	481d      	ldr	r0, [pc, #116]	@ (81012c8 <MX_GPIO_Init+0x324>)
 8101252:	f001 f909 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101256:	2340      	movs	r3, #64	@ 0x40
 8101258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810125a:	2302      	movs	r3, #2
 810125c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810125e:	2300      	movs	r3, #0
 8101260:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101262:	2300      	movs	r3, #0
 8101264:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101266:	230a      	movs	r3, #10
 8101268:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810126a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810126e:	4619      	mov	r1, r3
 8101270:	4810      	ldr	r0, [pc, #64]	@ (81012b4 <MX_GPIO_Init+0x310>)
 8101272:	f001 f8f9 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101276:	23c0      	movs	r3, #192	@ 0xc0
 8101278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810127a:	2302      	movs	r3, #2
 810127c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810127e:	2300      	movs	r3, #0
 8101280:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101282:	2300      	movs	r3, #0
 8101284:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101286:	2309      	movs	r3, #9
 8101288:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810128a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810128e:	4619      	mov	r1, r3
 8101290:	480d      	ldr	r0, [pc, #52]	@ (81012c8 <MX_GPIO_Init+0x324>)
 8101292:	f001 f8e9 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8101296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 810129c:	2303      	movs	r3, #3
 810129e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012a0:	2300      	movs	r3, #0
 81012a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81012a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81012a8:	4619      	mov	r1, r3
 81012aa:	e00f      	b.n	81012cc <MX_GPIO_Init+0x328>
 81012ac:	58024400 	.word	0x58024400
 81012b0:	58022000 	.word	0x58022000
 81012b4:	58021800 	.word	0x58021800
 81012b8:	58020800 	.word	0x58020800
 81012bc:	58021000 	.word	0x58021000
 81012c0:	58021c00 	.word	0x58021c00
 81012c4:	58020c00 	.word	0x58020c00
 81012c8:	58021400 	.word	0x58021400
 81012cc:	4848      	ldr	r0, [pc, #288]	@ (81013f0 <MX_GPIO_Init+0x44c>)
 81012ce:	f001 f8cb 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 81012d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012d8:	2302      	movs	r3, #2
 81012da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012dc:	2300      	movs	r3, #0
 81012de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012e0:	2300      	movs	r3, #0
 81012e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81012e4:	230a      	movs	r3, #10
 81012e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81012e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81012ec:	4619      	mov	r1, r3
 81012ee:	4840      	ldr	r0, [pc, #256]	@ (81013f0 <MX_GPIO_Init+0x44c>)
 81012f0:	f001 f8ba 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 81012f4:	2332      	movs	r3, #50	@ 0x32
 81012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012f8:	2302      	movs	r3, #2
 81012fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012fc:	2300      	movs	r3, #0
 81012fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101300:	2300      	movs	r3, #0
 8101302:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101304:	230b      	movs	r3, #11
 8101306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101308:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810130c:	4619      	mov	r1, r3
 810130e:	4839      	ldr	r0, [pc, #228]	@ (81013f4 <MX_GPIO_Init+0x450>)
 8101310:	f001 f8aa 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ9 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8101314:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8101318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810131a:	2302      	movs	r3, #2
 810131c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810131e:	2300      	movs	r3, #0
 8101320:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101322:	2300      	movs	r3, #0
 8101324:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8101326:	2308      	movs	r3, #8
 8101328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 810132a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810132e:	4619      	mov	r1, r3
 8101330:	4831      	ldr	r0, [pc, #196]	@ (81013f8 <MX_GPIO_Init+0x454>)
 8101332:	f001 f899 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8101336:	230c      	movs	r3, #12
 8101338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810133a:	2302      	movs	r3, #2
 810133c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810133e:	2300      	movs	r3, #0
 8101340:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101342:	2300      	movs	r3, #0
 8101344:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101346:	2309      	movs	r3, #9
 8101348:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 810134a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810134e:	4619      	mov	r1, r3
 8101350:	482a      	ldr	r0, [pc, #168]	@ (81013fc <MX_GPIO_Init+0x458>)
 8101352:	f001 f889 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 8101356:	2386      	movs	r3, #134	@ 0x86
 8101358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810135a:	2302      	movs	r3, #2
 810135c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810135e:	2300      	movs	r3, #0
 8101360:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101362:	2300      	movs	r3, #0
 8101364:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101366:	230b      	movs	r3, #11
 8101368:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810136a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810136e:	4619      	mov	r1, r3
 8101370:	4823      	ldr	r0, [pc, #140]	@ (8101400 <MX_GPIO_Init+0x45c>)
 8101372:	f001 f879 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101376:	2304      	movs	r3, #4
 8101378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810137a:	2302      	movs	r3, #2
 810137c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810137e:	2300      	movs	r3, #0
 8101380:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101382:	2300      	movs	r3, #0
 8101384:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101386:	2309      	movs	r3, #9
 8101388:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810138a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810138e:	4619      	mov	r1, r3
 8101390:	481c      	ldr	r0, [pc, #112]	@ (8101404 <MX_GPIO_Init+0x460>)
 8101392:	f001 f869 	bl	8102468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8101396:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810139c:	2302      	movs	r3, #2
 810139e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013a0:	2300      	movs	r3, #0
 81013a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013a4:	2300      	movs	r3, #0
 81013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81013a8:	2309      	movs	r3, #9
 81013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81013ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81013b0:	4619      	mov	r1, r3
 81013b2:	4815      	ldr	r0, [pc, #84]	@ (8101408 <MX_GPIO_Init+0x464>)
 81013b4:	f001 f858 	bl	8102468 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81013b8:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 81013bc:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 81013c0:	f000 fdec 	bl	8101f9c <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81013c4:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 81013c8:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 81013cc:	f000 fde6 	bl	8101f9c <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 81013d0:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 81013d4:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 81013d8:	f000 fde0 	bl	8101f9c <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 81013dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 81013e0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 81013e4:	f000 fdda 	bl	8101f9c <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81013e8:	bf00      	nop
 81013ea:	3740      	adds	r7, #64	@ 0x40
 81013ec:	46bd      	mov	sp, r7
 81013ee:	bd80      	pop	{r7, pc}
 81013f0:	58021400 	.word	0x58021400
 81013f4:	58020800 	.word	0x58020800
 81013f8:	58022400 	.word	0x58022400
 81013fc:	58021c00 	.word	0x58021c00
 8101400:	58020000 	.word	0x58020000
 8101404:	58020400 	.word	0x58020400
 8101408:	58020c00 	.word	0x58020c00

0810140c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 810140c:	b580      	push	{r7, lr}
 810140e:	b082      	sub	sp, #8
 8101410:	af00      	add	r7, sp, #0
 8101412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8101414:	687b      	ldr	r3, [r7, #4]
 8101416:	681b      	ldr	r3, [r3, #0]
 8101418:	4a04      	ldr	r2, [pc, #16]	@ (810142c <HAL_TIM_PeriodElapsedCallback+0x20>)
 810141a:	4293      	cmp	r3, r2
 810141c:	d101      	bne.n	8101422 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 810141e:	f000 fd6d 	bl	8101efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101422:	bf00      	nop
 8101424:	3708      	adds	r7, #8
 8101426:	46bd      	mov	sp, r7
 8101428:	bd80      	pop	{r7, pc}
 810142a:	bf00      	nop
 810142c:	40000400 	.word	0x40000400

08101430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101430:	b480      	push	{r7}
 8101432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101434:	b672      	cpsid	i
}
 8101436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101438:	bf00      	nop
 810143a:	e7fd      	b.n	8101438 <Error_Handler+0x8>

0810143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810143c:	b580      	push	{r7, lr}
 810143e:	b082      	sub	sp, #8
 8101440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101442:	4b10      	ldr	r3, [pc, #64]	@ (8101484 <HAL_MspInit+0x48>)
 8101444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101448:	4a0e      	ldr	r2, [pc, #56]	@ (8101484 <HAL_MspInit+0x48>)
 810144a:	f043 0302 	orr.w	r3, r3, #2
 810144e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101452:	4b0c      	ldr	r3, [pc, #48]	@ (8101484 <HAL_MspInit+0x48>)
 8101454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101458:	f003 0302 	and.w	r3, r3, #2
 810145c:	607b      	str	r3, [r7, #4]
 810145e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101460:	2200      	movs	r2, #0
 8101462:	210f      	movs	r1, #15
 8101464:	f06f 0001 	mvn.w	r0, #1
 8101468:	f000 ffc4 	bl	81023f4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 810146c:	2200      	movs	r2, #0
 810146e:	2105      	movs	r1, #5
 8101470:	2040      	movs	r0, #64	@ 0x40
 8101472:	f000 ffbf 	bl	81023f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8101476:	2040      	movs	r0, #64	@ 0x40
 8101478:	f000 ffd6 	bl	8102428 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810147c:	bf00      	nop
 810147e:	3708      	adds	r7, #8
 8101480:	46bd      	mov	sp, r7
 8101482:	bd80      	pop	{r7, pc}
 8101484:	58024400 	.word	0x58024400

08101488 <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101488:	b580      	push	{r7, lr}
 810148a:	b0bc      	sub	sp, #240	@ 0xf0
 810148c:	af00      	add	r7, sp, #0
 810148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101490:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101494:	2200      	movs	r2, #0
 8101496:	601a      	str	r2, [r3, #0]
 8101498:	605a      	str	r2, [r3, #4]
 810149a:	609a      	str	r2, [r3, #8]
 810149c:	60da      	str	r2, [r3, #12]
 810149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81014a0:	f107 0310 	add.w	r3, r7, #16
 81014a4:	22c8      	movs	r2, #200	@ 0xc8
 81014a6:	2100      	movs	r1, #0
 81014a8:	4618      	mov	r0, r3
 81014aa:	f006 fc8f 	bl	8107dcc <memset>
  if(hcec->Instance==CEC)
 81014ae:	687b      	ldr	r3, [r7, #4]
 81014b0:	681b      	ldr	r3, [r3, #0]
 81014b2:	4a2b      	ldr	r2, [pc, #172]	@ (8101560 <HAL_CEC_MspInit+0xd8>)
 81014b4:	4293      	cmp	r3, r2
 81014b6:	d14e      	bne.n	8101556 <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 81014b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 81014bc:	f04f 0300 	mov.w	r3, #0
 81014c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 81014c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 81014c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81014cc:	f107 0310 	add.w	r3, r7, #16
 81014d0:	4618      	mov	r0, r3
 81014d2:	f001 fd57 	bl	8102f84 <HAL_RCCEx_PeriphCLKConfig>
 81014d6:	4603      	mov	r3, r0
 81014d8:	2b00      	cmp	r3, #0
 81014da:	d001      	beq.n	81014e0 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 81014dc:	f7ff ffa8 	bl	8101430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 81014e0:	4b20      	ldr	r3, [pc, #128]	@ (8101564 <HAL_CEC_MspInit+0xdc>)
 81014e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81014e6:	4a1f      	ldr	r2, [pc, #124]	@ (8101564 <HAL_CEC_MspInit+0xdc>)
 81014e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 81014ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81014f0:	4b1c      	ldr	r3, [pc, #112]	@ (8101564 <HAL_CEC_MspInit+0xdc>)
 81014f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81014f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81014fa:	60fb      	str	r3, [r7, #12]
 81014fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014fe:	4b19      	ldr	r3, [pc, #100]	@ (8101564 <HAL_CEC_MspInit+0xdc>)
 8101500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101504:	4a17      	ldr	r2, [pc, #92]	@ (8101564 <HAL_CEC_MspInit+0xdc>)
 8101506:	f043 0302 	orr.w	r3, r3, #2
 810150a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810150e:	4b15      	ldr	r3, [pc, #84]	@ (8101564 <HAL_CEC_MspInit+0xdc>)
 8101510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101514:	f003 0302 	and.w	r3, r3, #2
 8101518:	60bb      	str	r3, [r7, #8]
 810151a:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 810151c:	2340      	movs	r3, #64	@ 0x40
 810151e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101522:	2312      	movs	r3, #18
 8101524:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101528:	2300      	movs	r3, #0
 810152a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810152e:	2300      	movs	r3, #0
 8101530:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101534:	2305      	movs	r3, #5
 8101536:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 810153a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810153e:	4619      	mov	r1, r3
 8101540:	4809      	ldr	r0, [pc, #36]	@ (8101568 <HAL_CEC_MspInit+0xe0>)
 8101542:	f000 ff91 	bl	8102468 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 8101546:	2200      	movs	r2, #0
 8101548:	2105      	movs	r1, #5
 810154a:	205e      	movs	r0, #94	@ 0x5e
 810154c:	f000 ff52 	bl	81023f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8101550:	205e      	movs	r0, #94	@ 0x5e
 8101552:	f000 ff69 	bl	8102428 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 8101556:	bf00      	nop
 8101558:	37f0      	adds	r7, #240	@ 0xf0
 810155a:	46bd      	mov	sp, r7
 810155c:	bd80      	pop	{r7, pc}
 810155e:	bf00      	nop
 8101560:	40006c00 	.word	0x40006c00
 8101564:	58024400 	.word	0x58024400
 8101568:	58020400 	.word	0x58020400

0810156c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 810156c:	b580      	push	{r7, lr}
 810156e:	b0b4      	sub	sp, #208	@ 0xd0
 8101570:	af00      	add	r7, sp, #0
 8101572:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101574:	f107 0308 	add.w	r3, r7, #8
 8101578:	22c8      	movs	r2, #200	@ 0xc8
 810157a:	2100      	movs	r1, #0
 810157c:	4618      	mov	r0, r3
 810157e:	f006 fc25 	bl	8107dcc <memset>
  if(hrtc->Instance==RTC)
 8101582:	687b      	ldr	r3, [r7, #4]
 8101584:	681b      	ldr	r3, [r3, #0]
 8101586:	4a10      	ldr	r2, [pc, #64]	@ (81015c8 <HAL_RTC_MspInit+0x5c>)
 8101588:	4293      	cmp	r3, r2
 810158a:	d119      	bne.n	81015c0 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 810158c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101590:	f04f 0300 	mov.w	r3, #0
 8101594:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8101598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810159c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015a0:	f107 0308 	add.w	r3, r7, #8
 81015a4:	4618      	mov	r0, r3
 81015a6:	f001 fced 	bl	8102f84 <HAL_RCCEx_PeriphCLKConfig>
 81015aa:	4603      	mov	r3, r0
 81015ac:	2b00      	cmp	r3, #0
 81015ae:	d001      	beq.n	81015b4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 81015b0:	f7ff ff3e 	bl	8101430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 81015b4:	4b05      	ldr	r3, [pc, #20]	@ (81015cc <HAL_RTC_MspInit+0x60>)
 81015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81015b8:	4a04      	ldr	r2, [pc, #16]	@ (81015cc <HAL_RTC_MspInit+0x60>)
 81015ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81015be:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 81015c0:	bf00      	nop
 81015c2:	37d0      	adds	r7, #208	@ 0xd0
 81015c4:	46bd      	mov	sp, r7
 81015c6:	bd80      	pop	{r7, pc}
 81015c8:	58004000 	.word	0x58004000
 81015cc:	58024400 	.word	0x58024400

081015d0 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 81015d0:	b580      	push	{r7, lr}
 81015d2:	b0bc      	sub	sp, #240	@ 0xf0
 81015d4:	af00      	add	r7, sp, #0
 81015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81015dc:	2200      	movs	r2, #0
 81015de:	601a      	str	r2, [r3, #0]
 81015e0:	605a      	str	r2, [r3, #4]
 81015e2:	609a      	str	r2, [r3, #8]
 81015e4:	60da      	str	r2, [r3, #12]
 81015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81015e8:	f107 0310 	add.w	r3, r7, #16
 81015ec:	22c8      	movs	r2, #200	@ 0xc8
 81015ee:	2100      	movs	r1, #0
 81015f0:	4618      	mov	r0, r3
 81015f2:	f006 fbeb 	bl	8107dcc <memset>
  if(hspdifrx->Instance==SPDIFRX)
 81015f6:	687b      	ldr	r3, [r7, #4]
 81015f8:	681b      	ldr	r3, [r3, #0]
 81015fa:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 81015fe:	d144      	bne.n	810168a <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101600:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8101604:	f04f 0300 	mov.w	r3, #0
 8101608:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 810160c:	2300      	movs	r3, #0
 810160e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101610:	f107 0310 	add.w	r3, r7, #16
 8101614:	4618      	mov	r0, r3
 8101616:	f001 fcb5 	bl	8102f84 <HAL_RCCEx_PeriphCLKConfig>
 810161a:	4603      	mov	r3, r0
 810161c:	2b00      	cmp	r3, #0
 810161e:	d001      	beq.n	8101624 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8101620:	f7ff ff06 	bl	8101430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101624:	4b1b      	ldr	r3, [pc, #108]	@ (8101694 <HAL_SPDIFRX_MspInit+0xc4>)
 8101626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810162a:	4a1a      	ldr	r2, [pc, #104]	@ (8101694 <HAL_SPDIFRX_MspInit+0xc4>)
 810162c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101630:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101634:	4b17      	ldr	r3, [pc, #92]	@ (8101694 <HAL_SPDIFRX_MspInit+0xc4>)
 8101636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810163a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810163e:	60fb      	str	r3, [r7, #12]
 8101640:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101642:	4b14      	ldr	r3, [pc, #80]	@ (8101694 <HAL_SPDIFRX_MspInit+0xc4>)
 8101644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101648:	4a12      	ldr	r2, [pc, #72]	@ (8101694 <HAL_SPDIFRX_MspInit+0xc4>)
 810164a:	f043 0308 	orr.w	r3, r3, #8
 810164e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101652:	4b10      	ldr	r3, [pc, #64]	@ (8101694 <HAL_SPDIFRX_MspInit+0xc4>)
 8101654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101658:	f003 0308 	and.w	r3, r3, #8
 810165c:	60bb      	str	r3, [r7, #8]
 810165e:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101660:	2380      	movs	r3, #128	@ 0x80
 8101662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101666:	2302      	movs	r3, #2
 8101668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810166c:	2300      	movs	r3, #0
 810166e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101672:	2300      	movs	r3, #0
 8101674:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101678:	2309      	movs	r3, #9
 810167a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 810167e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101682:	4619      	mov	r1, r3
 8101684:	4804      	ldr	r0, [pc, #16]	@ (8101698 <HAL_SPDIFRX_MspInit+0xc8>)
 8101686:	f000 feef 	bl	8102468 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 810168a:	bf00      	nop
 810168c:	37f0      	adds	r7, #240	@ 0xf0
 810168e:	46bd      	mov	sp, r7
 8101690:	bd80      	pop	{r7, pc}
 8101692:	bf00      	nop
 8101694:	58024400 	.word	0x58024400
 8101698:	58020c00 	.word	0x58020c00

0810169c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 810169c:	b580      	push	{r7, lr}
 810169e:	b0be      	sub	sp, #248	@ 0xf8
 81016a0:	af00      	add	r7, sp, #0
 81016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81016a4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81016a8:	2200      	movs	r2, #0
 81016aa:	601a      	str	r2, [r3, #0]
 81016ac:	605a      	str	r2, [r3, #4]
 81016ae:	609a      	str	r2, [r3, #8]
 81016b0:	60da      	str	r2, [r3, #12]
 81016b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81016b4:	f107 0318 	add.w	r3, r7, #24
 81016b8:	22c8      	movs	r2, #200	@ 0xc8
 81016ba:	2100      	movs	r1, #0
 81016bc:	4618      	mov	r0, r3
 81016be:	f006 fb85 	bl	8107dcc <memset>
  if(hspi->Instance==SPI5)
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	681b      	ldr	r3, [r3, #0]
 81016c6:	4a39      	ldr	r2, [pc, #228]	@ (81017ac <HAL_SPI_MspInit+0x110>)
 81016c8:	4293      	cmp	r3, r2
 81016ca:	d16a      	bne.n	81017a2 <HAL_SPI_MspInit+0x106>

    /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 81016cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81016d0:	f04f 0300 	mov.w	r3, #0
 81016d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 81016d8:	2300      	movs	r3, #0
 81016da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016de:	f107 0318 	add.w	r3, r7, #24
 81016e2:	4618      	mov	r0, r3
 81016e4:	f001 fc4e 	bl	8102f84 <HAL_RCCEx_PeriphCLKConfig>
 81016e8:	4603      	mov	r3, r0
 81016ea:	2b00      	cmp	r3, #0
 81016ec:	d001      	beq.n	81016f2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 81016ee:	f7ff fe9f 	bl	8101430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 81016f2:	4b2f      	ldr	r3, [pc, #188]	@ (81017b0 <HAL_SPI_MspInit+0x114>)
 81016f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81016f8:	4a2d      	ldr	r2, [pc, #180]	@ (81017b0 <HAL_SPI_MspInit+0x114>)
 81016fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81016fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101702:	4b2b      	ldr	r3, [pc, #172]	@ (81017b0 <HAL_SPI_MspInit+0x114>)
 8101704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810170c:	617b      	str	r3, [r7, #20]
 810170e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101710:	4b27      	ldr	r3, [pc, #156]	@ (81017b0 <HAL_SPI_MspInit+0x114>)
 8101712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101716:	4a26      	ldr	r2, [pc, #152]	@ (81017b0 <HAL_SPI_MspInit+0x114>)
 8101718:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810171c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101720:	4b23      	ldr	r3, [pc, #140]	@ (81017b0 <HAL_SPI_MspInit+0x114>)
 8101722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810172a:	613b      	str	r3, [r7, #16]
 810172c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 810172e:	4b20      	ldr	r3, [pc, #128]	@ (81017b0 <HAL_SPI_MspInit+0x114>)
 8101730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101734:	4a1e      	ldr	r2, [pc, #120]	@ (81017b0 <HAL_SPI_MspInit+0x114>)
 8101736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810173a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810173e:	4b1c      	ldr	r3, [pc, #112]	@ (81017b0 <HAL_SPI_MspInit+0x114>)
 8101740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101748:	60fb      	str	r3, [r7, #12]
 810174a:	68fb      	ldr	r3, [r7, #12]
    PK0     ------> SPI5_SCK
    PK1     ------> SPI5_NSS
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 810174c:	2303      	movs	r3, #3
 810174e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101752:	2302      	movs	r3, #2
 8101754:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101758:	2300      	movs	r3, #0
 810175a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810175e:	2300      	movs	r3, #0
 8101760:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101764:	2305      	movs	r3, #5
 8101766:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 810176a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810176e:	4619      	mov	r1, r3
 8101770:	4810      	ldr	r0, [pc, #64]	@ (81017b4 <HAL_SPI_MspInit+0x118>)
 8101772:	f000 fe79 	bl	8102468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8101776:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 810177a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810177e:	2302      	movs	r3, #2
 8101780:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101784:	2300      	movs	r3, #0
 8101786:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810178a:	2300      	movs	r3, #0
 810178c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101790:	2305      	movs	r3, #5
 8101792:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101796:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810179a:	4619      	mov	r1, r3
 810179c:	4806      	ldr	r0, [pc, #24]	@ (81017b8 <HAL_SPI_MspInit+0x11c>)
 810179e:	f000 fe63 	bl	8102468 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 81017a2:	bf00      	nop
 81017a4:	37f8      	adds	r7, #248	@ 0xf8
 81017a6:	46bd      	mov	sp, r7
 81017a8:	bd80      	pop	{r7, pc}
 81017aa:	bf00      	nop
 81017ac:	40015000 	.word	0x40015000
 81017b0:	58024400 	.word	0x58024400
 81017b4:	58022800 	.word	0x58022800
 81017b8:	58022400 	.word	0x58022400

081017bc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 81017bc:	b580      	push	{r7, lr}
 81017be:	b0c2      	sub	sp, #264	@ 0x108
 81017c0:	af00      	add	r7, sp, #0
 81017c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81017c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81017ca:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017cc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81017d0:	2200      	movs	r2, #0
 81017d2:	601a      	str	r2, [r3, #0]
 81017d4:	605a      	str	r2, [r3, #4]
 81017d6:	609a      	str	r2, [r3, #8]
 81017d8:	60da      	str	r2, [r3, #12]
 81017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81017e0:	22c8      	movs	r2, #200	@ 0xc8
 81017e2:	2100      	movs	r1, #0
 81017e4:	4618      	mov	r0, r3
 81017e6:	f006 faf1 	bl	8107dcc <memset>
  if(hpcd->Instance==USB_OTG_HS)
 81017ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81017ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81017f2:	681b      	ldr	r3, [r3, #0]
 81017f4:	681b      	ldr	r3, [r3, #0]
 81017f6:	4a79      	ldr	r2, [pc, #484]	@ (81019dc <HAL_PCD_MspInit+0x220>)
 81017f8:	4293      	cmp	r3, r2
 81017fa:	f040 80ea 	bne.w	81019d2 <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81017fe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8101802:	f04f 0300 	mov.w	r3, #0
 8101806:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 810180a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810180e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101812:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101816:	4618      	mov	r0, r3
 8101818:	f001 fbb4 	bl	8102f84 <HAL_RCCEx_PeriphCLKConfig>
 810181c:	4603      	mov	r3, r0
 810181e:	2b00      	cmp	r3, #0
 8101820:	d001      	beq.n	8101826 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8101822:	f7ff fe05 	bl	8101430 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8101826:	f001 f999 	bl	8102b5c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810182a:	4b6d      	ldr	r3, [pc, #436]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 810182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101830:	4a6b      	ldr	r2, [pc, #428]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 8101832:	f043 0302 	orr.w	r3, r3, #2
 8101836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810183a:	4b69      	ldr	r3, [pc, #420]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 810183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101840:	f003 0302 	and.w	r3, r3, #2
 8101844:	627b      	str	r3, [r7, #36]	@ 0x24
 8101846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8101848:	4b65      	ldr	r3, [pc, #404]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 810184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810184e:	4a64      	ldr	r2, [pc, #400]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 8101850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101854:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101858:	4b61      	ldr	r3, [pc, #388]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 810185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810185e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101862:	623b      	str	r3, [r7, #32]
 8101864:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101866:	4b5e      	ldr	r3, [pc, #376]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 8101868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810186c:	4a5c      	ldr	r2, [pc, #368]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 810186e:	f043 0304 	orr.w	r3, r3, #4
 8101872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101876:	4b5a      	ldr	r3, [pc, #360]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 8101878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810187c:	f003 0304 	and.w	r3, r3, #4
 8101880:	61fb      	str	r3, [r7, #28]
 8101882:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101884:	4b56      	ldr	r3, [pc, #344]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 8101886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810188a:	4a55      	ldr	r2, [pc, #340]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 810188c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101894:	4b52      	ldr	r3, [pc, #328]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 8101896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810189a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810189e:	61bb      	str	r3, [r7, #24]
 81018a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81018a2:	4b4f      	ldr	r3, [pc, #316]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 81018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018a8:	4a4d      	ldr	r2, [pc, #308]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 81018aa:	f043 0301 	orr.w	r3, r3, #1
 81018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018b2:	4b4b      	ldr	r3, [pc, #300]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 81018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018b8:	f003 0301 	and.w	r3, r3, #1
 81018bc:	617b      	str	r3, [r7, #20]
 81018be:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 81018c0:	f643 4323 	movw	r3, #15395	@ 0x3c23
 81018c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018c8:	2302      	movs	r3, #2
 81018ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018ce:	2300      	movs	r3, #0
 81018d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81018d4:	2302      	movs	r3, #2
 81018d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81018da:	230a      	movs	r3, #10
 81018dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81018e0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81018e4:	4619      	mov	r1, r3
 81018e6:	483f      	ldr	r0, [pc, #252]	@ (81019e4 <HAL_PCD_MspInit+0x228>)
 81018e8:	f000 fdbe 	bl	8102468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 81018ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81018f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018f4:	2302      	movs	r3, #2
 81018f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018fa:	2300      	movs	r3, #0
 81018fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101900:	2302      	movs	r3, #2
 8101902:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101906:	230a      	movs	r3, #10
 8101908:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 810190c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101910:	4619      	mov	r1, r3
 8101912:	4835      	ldr	r0, [pc, #212]	@ (81019e8 <HAL_PCD_MspInit+0x22c>)
 8101914:	f000 fda8 	bl	8102468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8101918:	2301      	movs	r3, #1
 810191a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810191e:	2302      	movs	r3, #2
 8101920:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101924:	2300      	movs	r3, #0
 8101926:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810192a:	2302      	movs	r3, #2
 810192c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101930:	230a      	movs	r3, #10
 8101932:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8101936:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810193a:	4619      	mov	r1, r3
 810193c:	482b      	ldr	r0, [pc, #172]	@ (81019ec <HAL_PCD_MspInit+0x230>)
 810193e:	f000 fd93 	bl	8102468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8101942:	2310      	movs	r3, #16
 8101944:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101948:	2302      	movs	r3, #2
 810194a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810194e:	2300      	movs	r3, #0
 8101950:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101954:	2302      	movs	r3, #2
 8101956:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810195a:	230a      	movs	r3, #10
 810195c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8101960:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101964:	4619      	mov	r1, r3
 8101966:	4822      	ldr	r0, [pc, #136]	@ (81019f0 <HAL_PCD_MspInit+0x234>)
 8101968:	f000 fd7e 	bl	8102468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 810196c:	2328      	movs	r3, #40	@ 0x28
 810196e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101972:	2302      	movs	r3, #2
 8101974:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101978:	2300      	movs	r3, #0
 810197a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810197e:	2302      	movs	r3, #2
 8101980:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101984:	230a      	movs	r3, #10
 8101986:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810198a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810198e:	4619      	mov	r1, r3
 8101990:	4818      	ldr	r0, [pc, #96]	@ (81019f4 <HAL_PCD_MspInit+0x238>)
 8101992:	f000 fd69 	bl	8102468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8101996:	4b12      	ldr	r3, [pc, #72]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 8101998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810199c:	4a10      	ldr	r2, [pc, #64]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 810199e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81019a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81019a6:	4b0e      	ldr	r3, [pc, #56]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 81019a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81019ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81019b0:	613b      	str	r3, [r7, #16]
 81019b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 81019b4:	4b0a      	ldr	r3, [pc, #40]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 81019b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81019ba:	4a09      	ldr	r2, [pc, #36]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 81019bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81019c0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81019c4:	4b06      	ldr	r3, [pc, #24]	@ (81019e0 <HAL_PCD_MspInit+0x224>)
 81019c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81019ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 81019ce:	60fb      	str	r3, [r7, #12]
 81019d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 81019d2:	bf00      	nop
 81019d4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 81019d8:	46bd      	mov	sp, r7
 81019da:	bd80      	pop	{r7, pc}
 81019dc:	40040000 	.word	0x40040000
 81019e0:	58024400 	.word	0x58024400
 81019e4:	58020400 	.word	0x58020400
 81019e8:	58022000 	.word	0x58022000
 81019ec:	58020800 	.word	0x58020800
 81019f0:	58021c00 	.word	0x58021c00
 81019f4:	58020000 	.word	0x58020000

081019f8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 81019f8:	b580      	push	{r7, lr}
 81019fa:	b0bc      	sub	sp, #240	@ 0xf0
 81019fc:	af00      	add	r7, sp, #0
 81019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a00:	f107 0310 	add.w	r3, r7, #16
 8101a04:	22c8      	movs	r2, #200	@ 0xc8
 8101a06:	2100      	movs	r1, #0
 8101a08:	4618      	mov	r0, r3
 8101a0a:	f006 f9df 	bl	8107dcc <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	681b      	ldr	r3, [r3, #0]
 8101a12:	4a4f      	ldr	r2, [pc, #316]	@ (8101b50 <HAL_SAI_MspInit+0x158>)
 8101a14:	4293      	cmp	r3, r2
 8101a16:	d153      	bne.n	8101ac0 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8101a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101a1c:	f04f 0300 	mov.w	r3, #0
 8101a20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101a24:	2300      	movs	r3, #0
 8101a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a28:	f107 0310 	add.w	r3, r7, #16
 8101a2c:	4618      	mov	r0, r3
 8101a2e:	f001 faa9 	bl	8102f84 <HAL_RCCEx_PeriphCLKConfig>
 8101a32:	4603      	mov	r3, r0
 8101a34:	2b00      	cmp	r3, #0
 8101a36:	d001      	beq.n	8101a3c <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8101a38:	f7ff fcfa 	bl	8101430 <Error_Handler>
    }

    if (SAI1_client == 0)
 8101a3c:	4b45      	ldr	r3, [pc, #276]	@ (8101b54 <HAL_SAI_MspInit+0x15c>)
 8101a3e:	681b      	ldr	r3, [r3, #0]
 8101a40:	2b00      	cmp	r3, #0
 8101a42:	d10e      	bne.n	8101a62 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101a44:	4b44      	ldr	r3, [pc, #272]	@ (8101b58 <HAL_SAI_MspInit+0x160>)
 8101a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101a4a:	4a43      	ldr	r2, [pc, #268]	@ (8101b58 <HAL_SAI_MspInit+0x160>)
 8101a4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101a50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101a54:	4b40      	ldr	r3, [pc, #256]	@ (8101b58 <HAL_SAI_MspInit+0x160>)
 8101a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101a5e:	60fb      	str	r3, [r7, #12]
 8101a60:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8101a62:	4b3c      	ldr	r3, [pc, #240]	@ (8101b54 <HAL_SAI_MspInit+0x15c>)
 8101a64:	681b      	ldr	r3, [r3, #0]
 8101a66:	3301      	adds	r3, #1
 8101a68:	4a3a      	ldr	r2, [pc, #232]	@ (8101b54 <HAL_SAI_MspInit+0x15c>)
 8101a6a:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8101a6c:	2370      	movs	r3, #112	@ 0x70
 8101a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a72:	2302      	movs	r3, #2
 8101a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a78:	2300      	movs	r3, #0
 8101a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a7e:	2300      	movs	r3, #0
 8101a80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101a84:	2306      	movs	r3, #6
 8101a86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101a8a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101a8e:	4619      	mov	r1, r3
 8101a90:	4832      	ldr	r0, [pc, #200]	@ (8101b5c <HAL_SAI_MspInit+0x164>)
 8101a92:	f000 fce9 	bl	8102468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8101a96:	2380      	movs	r3, #128	@ 0x80
 8101a98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a9c:	2302      	movs	r3, #2
 8101a9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101aa2:	2300      	movs	r3, #0
 8101aa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101aa8:	2300      	movs	r3, #0
 8101aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101aae:	2306      	movs	r3, #6
 8101ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 8101ab4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101ab8:	4619      	mov	r1, r3
 8101aba:	4829      	ldr	r0, [pc, #164]	@ (8101b60 <HAL_SAI_MspInit+0x168>)
 8101abc:	f000 fcd4 	bl	8102468 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	681b      	ldr	r3, [r3, #0]
 8101ac4:	4a27      	ldr	r2, [pc, #156]	@ (8101b64 <HAL_SAI_MspInit+0x16c>)
 8101ac6:	4293      	cmp	r3, r2
 8101ac8:	d13e      	bne.n	8101b48 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8101aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101ace:	f04f 0300 	mov.w	r3, #0
 8101ad2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101ad6:	2300      	movs	r3, #0
 8101ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101ada:	f107 0310 	add.w	r3, r7, #16
 8101ade:	4618      	mov	r0, r3
 8101ae0:	f001 fa50 	bl	8102f84 <HAL_RCCEx_PeriphCLKConfig>
 8101ae4:	4603      	mov	r3, r0
 8101ae6:	2b00      	cmp	r3, #0
 8101ae8:	d001      	beq.n	8101aee <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 8101aea:	f7ff fca1 	bl	8101430 <Error_Handler>
    }

      if (SAI1_client == 0)
 8101aee:	4b19      	ldr	r3, [pc, #100]	@ (8101b54 <HAL_SAI_MspInit+0x15c>)
 8101af0:	681b      	ldr	r3, [r3, #0]
 8101af2:	2b00      	cmp	r3, #0
 8101af4:	d10e      	bne.n	8101b14 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101af6:	4b18      	ldr	r3, [pc, #96]	@ (8101b58 <HAL_SAI_MspInit+0x160>)
 8101af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101afc:	4a16      	ldr	r2, [pc, #88]	@ (8101b58 <HAL_SAI_MspInit+0x160>)
 8101afe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101b02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101b06:	4b14      	ldr	r3, [pc, #80]	@ (8101b58 <HAL_SAI_MspInit+0x160>)
 8101b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101b10:	60bb      	str	r3, [r7, #8]
 8101b12:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8101b14:	4b0f      	ldr	r3, [pc, #60]	@ (8101b54 <HAL_SAI_MspInit+0x15c>)
 8101b16:	681b      	ldr	r3, [r3, #0]
 8101b18:	3301      	adds	r3, #1
 8101b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8101b54 <HAL_SAI_MspInit+0x15c>)
 8101b1c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8101b1e:	2308      	movs	r3, #8
 8101b20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b24:	2302      	movs	r3, #2
 8101b26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b2a:	2300      	movs	r3, #0
 8101b2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b30:	2300      	movs	r3, #0
 8101b32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101b36:	2306      	movs	r3, #6
 8101b38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8101b3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101b40:	4619      	mov	r1, r3
 8101b42:	4806      	ldr	r0, [pc, #24]	@ (8101b5c <HAL_SAI_MspInit+0x164>)
 8101b44:	f000 fc90 	bl	8102468 <HAL_GPIO_Init>

    }
}
 8101b48:	bf00      	nop
 8101b4a:	37f0      	adds	r7, #240	@ 0xf0
 8101b4c:	46bd      	mov	sp, r7
 8101b4e:	bd80      	pop	{r7, pc}
 8101b50:	40015804 	.word	0x40015804
 8101b54:	10000800 	.word	0x10000800
 8101b58:	58024400 	.word	0x58024400
 8101b5c:	58021000 	.word	0x58021000
 8101b60:	58021800 	.word	0x58021800
 8101b64:	40015824 	.word	0x40015824

08101b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101b68:	b580      	push	{r7, lr}
 8101b6a:	b090      	sub	sp, #64	@ 0x40
 8101b6c:	af00      	add	r7, sp, #0
 8101b6e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	2b0f      	cmp	r3, #15
 8101b74:	d827      	bhi.n	8101bc6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8101b76:	2200      	movs	r2, #0
 8101b78:	6879      	ldr	r1, [r7, #4]
 8101b7a:	201d      	movs	r0, #29
 8101b7c:	f000 fc3a 	bl	81023f4 <HAL_NVIC_SetPriority>

     /* Enable the TIM3 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8101b80:	201d      	movs	r0, #29
 8101b82:	f000 fc51 	bl	8102428 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8101b86:	4a29      	ldr	r2, [pc, #164]	@ (8101c2c <HAL_InitTick+0xc4>)
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8101b8c:	4b28      	ldr	r3, [pc, #160]	@ (8101c30 <HAL_InitTick+0xc8>)
 8101b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b92:	4a27      	ldr	r2, [pc, #156]	@ (8101c30 <HAL_InitTick+0xc8>)
 8101b94:	f043 0302 	orr.w	r3, r3, #2
 8101b98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101b9c:	4b24      	ldr	r3, [pc, #144]	@ (8101c30 <HAL_InitTick+0xc8>)
 8101b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101ba2:	f003 0302 	and.w	r3, r3, #2
 8101ba6:	60fb      	str	r3, [r7, #12]
 8101ba8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101baa:	f107 0210 	add.w	r2, r7, #16
 8101bae:	f107 0314 	add.w	r3, r7, #20
 8101bb2:	4611      	mov	r1, r2
 8101bb4:	4618      	mov	r0, r3
 8101bb6:	f001 f9a3 	bl	8102f00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8101bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8101bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101bc0:	2b00      	cmp	r3, #0
 8101bc2:	d106      	bne.n	8101bd2 <HAL_InitTick+0x6a>
 8101bc4:	e001      	b.n	8101bca <HAL_InitTick+0x62>
    return HAL_ERROR;
 8101bc6:	2301      	movs	r3, #1
 8101bc8:	e02b      	b.n	8101c22 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8101bca:	f001 f983 	bl	8102ed4 <HAL_RCC_GetPCLK1Freq>
 8101bce:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8101bd0:	e004      	b.n	8101bdc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8101bd2:	f001 f97f 	bl	8102ed4 <HAL_RCC_GetPCLK1Freq>
 8101bd6:	4603      	mov	r3, r0
 8101bd8:	005b      	lsls	r3, r3, #1
 8101bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101bde:	4a15      	ldr	r2, [pc, #84]	@ (8101c34 <HAL_InitTick+0xcc>)
 8101be0:	fba2 2303 	umull	r2, r3, r2, r3
 8101be4:	0c9b      	lsrs	r3, r3, #18
 8101be6:	3b01      	subs	r3, #1
 8101be8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8101bea:	4b13      	ldr	r3, [pc, #76]	@ (8101c38 <HAL_InitTick+0xd0>)
 8101bec:	4a13      	ldr	r2, [pc, #76]	@ (8101c3c <HAL_InitTick+0xd4>)
 8101bee:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8101bf0:	4b11      	ldr	r3, [pc, #68]	@ (8101c38 <HAL_InitTick+0xd0>)
 8101bf2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8101bf6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8101bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8101c38 <HAL_InitTick+0xd0>)
 8101bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101bfc:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8101bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8101c38 <HAL_InitTick+0xd0>)
 8101c00:	2200      	movs	r2, #0
 8101c02:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101c04:	4b0c      	ldr	r3, [pc, #48]	@ (8101c38 <HAL_InitTick+0xd0>)
 8101c06:	2200      	movs	r2, #0
 8101c08:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8101c0a:	480b      	ldr	r0, [pc, #44]	@ (8101c38 <HAL_InitTick+0xd0>)
 8101c0c:	f004 fd81 	bl	8106712 <HAL_TIM_Base_Init>
 8101c10:	4603      	mov	r3, r0
 8101c12:	2b00      	cmp	r3, #0
 8101c14:	d104      	bne.n	8101c20 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8101c16:	4808      	ldr	r0, [pc, #32]	@ (8101c38 <HAL_InitTick+0xd0>)
 8101c18:	f004 fddc 	bl	81067d4 <HAL_TIM_Base_Start_IT>
 8101c1c:	4603      	mov	r3, r0
 8101c1e:	e000      	b.n	8101c22 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8101c20:	2301      	movs	r3, #1
}
 8101c22:	4618      	mov	r0, r3
 8101c24:	3740      	adds	r7, #64	@ 0x40
 8101c26:	46bd      	mov	sp, r7
 8101c28:	bd80      	pop	{r7, pc}
 8101c2a:	bf00      	nop
 8101c2c:	10000008 	.word	0x10000008
 8101c30:	58024400 	.word	0x58024400
 8101c34:	431bde83 	.word	0x431bde83
 8101c38:	10000804 	.word	0x10000804
 8101c3c:	40000400 	.word	0x40000400

08101c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101c40:	b480      	push	{r7}
 8101c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101c44:	bf00      	nop
 8101c46:	e7fd      	b.n	8101c44 <NMI_Handler+0x4>

08101c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101c48:	b480      	push	{r7}
 8101c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101c4c:	bf00      	nop
 8101c4e:	e7fd      	b.n	8101c4c <HardFault_Handler+0x4>

08101c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101c50:	b480      	push	{r7}
 8101c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101c54:	bf00      	nop
 8101c56:	e7fd      	b.n	8101c54 <MemManage_Handler+0x4>

08101c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101c58:	b480      	push	{r7}
 8101c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101c5c:	bf00      	nop
 8101c5e:	e7fd      	b.n	8101c5c <BusFault_Handler+0x4>

08101c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101c60:	b480      	push	{r7}
 8101c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101c64:	bf00      	nop
 8101c66:	e7fd      	b.n	8101c64 <UsageFault_Handler+0x4>

08101c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101c68:	b480      	push	{r7}
 8101c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101c6c:	bf00      	nop
 8101c6e:	46bd      	mov	sp, r7
 8101c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c74:	4770      	bx	lr
	...

08101c78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8101c78:	b580      	push	{r7, lr}
 8101c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8101c7c:	4802      	ldr	r0, [pc, #8]	@ (8101c88 <TIM3_IRQHandler+0x10>)
 8101c7e:	f004 fe21 	bl	81068c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8101c82:	bf00      	nop
 8101c84:	bd80      	pop	{r7, pc}
 8101c86:	bf00      	nop
 8101c88:	10000804 	.word	0x10000804

08101c8c <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8101c8c:	b580      	push	{r7, lr}
 8101c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8101c90:	4802      	ldr	r0, [pc, #8]	@ (8101c9c <CEC_IRQHandler+0x10>)
 8101c92:	f000 f9fb 	bl	810208c <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8101c96:	bf00      	nop
 8101c98:	bd80      	pop	{r7, pc}
 8101c9a:	bf00      	nop
 8101c9c:	1000009c 	.word	0x1000009c

08101ca0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101ca0:	b580      	push	{r7, lr}
 8101ca2:	b086      	sub	sp, #24
 8101ca4:	af00      	add	r7, sp, #0
 8101ca6:	60f8      	str	r0, [r7, #12]
 8101ca8:	60b9      	str	r1, [r7, #8]
 8101caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101cac:	2300      	movs	r3, #0
 8101cae:	617b      	str	r3, [r7, #20]
 8101cb0:	e00a      	b.n	8101cc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101cb2:	f3af 8000 	nop.w
 8101cb6:	4601      	mov	r1, r0
 8101cb8:	68bb      	ldr	r3, [r7, #8]
 8101cba:	1c5a      	adds	r2, r3, #1
 8101cbc:	60ba      	str	r2, [r7, #8]
 8101cbe:	b2ca      	uxtb	r2, r1
 8101cc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101cc2:	697b      	ldr	r3, [r7, #20]
 8101cc4:	3301      	adds	r3, #1
 8101cc6:	617b      	str	r3, [r7, #20]
 8101cc8:	697a      	ldr	r2, [r7, #20]
 8101cca:	687b      	ldr	r3, [r7, #4]
 8101ccc:	429a      	cmp	r2, r3
 8101cce:	dbf0      	blt.n	8101cb2 <_read+0x12>
  }

  return len;
 8101cd0:	687b      	ldr	r3, [r7, #4]
}
 8101cd2:	4618      	mov	r0, r3
 8101cd4:	3718      	adds	r7, #24
 8101cd6:	46bd      	mov	sp, r7
 8101cd8:	bd80      	pop	{r7, pc}

08101cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101cda:	b580      	push	{r7, lr}
 8101cdc:	b086      	sub	sp, #24
 8101cde:	af00      	add	r7, sp, #0
 8101ce0:	60f8      	str	r0, [r7, #12]
 8101ce2:	60b9      	str	r1, [r7, #8]
 8101ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ce6:	2300      	movs	r3, #0
 8101ce8:	617b      	str	r3, [r7, #20]
 8101cea:	e009      	b.n	8101d00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101cec:	68bb      	ldr	r3, [r7, #8]
 8101cee:	1c5a      	adds	r2, r3, #1
 8101cf0:	60ba      	str	r2, [r7, #8]
 8101cf2:	781b      	ldrb	r3, [r3, #0]
 8101cf4:	4618      	mov	r0, r3
 8101cf6:	f7fe fb43 	bl	8100380 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101cfa:	697b      	ldr	r3, [r7, #20]
 8101cfc:	3301      	adds	r3, #1
 8101cfe:	617b      	str	r3, [r7, #20]
 8101d00:	697a      	ldr	r2, [r7, #20]
 8101d02:	687b      	ldr	r3, [r7, #4]
 8101d04:	429a      	cmp	r2, r3
 8101d06:	dbf1      	blt.n	8101cec <_write+0x12>
  }
  return len;
 8101d08:	687b      	ldr	r3, [r7, #4]
}
 8101d0a:	4618      	mov	r0, r3
 8101d0c:	3718      	adds	r7, #24
 8101d0e:	46bd      	mov	sp, r7
 8101d10:	bd80      	pop	{r7, pc}

08101d12 <_close>:

int _close(int file)
{
 8101d12:	b480      	push	{r7}
 8101d14:	b083      	sub	sp, #12
 8101d16:	af00      	add	r7, sp, #0
 8101d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101d1e:	4618      	mov	r0, r3
 8101d20:	370c      	adds	r7, #12
 8101d22:	46bd      	mov	sp, r7
 8101d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d28:	4770      	bx	lr

08101d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101d2a:	b480      	push	{r7}
 8101d2c:	b083      	sub	sp, #12
 8101d2e:	af00      	add	r7, sp, #0
 8101d30:	6078      	str	r0, [r7, #4]
 8101d32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101d34:	683b      	ldr	r3, [r7, #0]
 8101d36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101d3a:	605a      	str	r2, [r3, #4]
  return 0;
 8101d3c:	2300      	movs	r3, #0
}
 8101d3e:	4618      	mov	r0, r3
 8101d40:	370c      	adds	r7, #12
 8101d42:	46bd      	mov	sp, r7
 8101d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d48:	4770      	bx	lr

08101d4a <_isatty>:

int _isatty(int file)
{
 8101d4a:	b480      	push	{r7}
 8101d4c:	b083      	sub	sp, #12
 8101d4e:	af00      	add	r7, sp, #0
 8101d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101d52:	2301      	movs	r3, #1
}
 8101d54:	4618      	mov	r0, r3
 8101d56:	370c      	adds	r7, #12
 8101d58:	46bd      	mov	sp, r7
 8101d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d5e:	4770      	bx	lr

08101d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101d60:	b480      	push	{r7}
 8101d62:	b085      	sub	sp, #20
 8101d64:	af00      	add	r7, sp, #0
 8101d66:	60f8      	str	r0, [r7, #12]
 8101d68:	60b9      	str	r1, [r7, #8]
 8101d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101d6c:	2300      	movs	r3, #0
}
 8101d6e:	4618      	mov	r0, r3
 8101d70:	3714      	adds	r7, #20
 8101d72:	46bd      	mov	sp, r7
 8101d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d78:	4770      	bx	lr
	...

08101d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101d7c:	b580      	push	{r7, lr}
 8101d7e:	b086      	sub	sp, #24
 8101d80:	af00      	add	r7, sp, #0
 8101d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101d84:	4a14      	ldr	r2, [pc, #80]	@ (8101dd8 <_sbrk+0x5c>)
 8101d86:	4b15      	ldr	r3, [pc, #84]	@ (8101ddc <_sbrk+0x60>)
 8101d88:	1ad3      	subs	r3, r2, r3
 8101d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101d8c:	697b      	ldr	r3, [r7, #20]
 8101d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101d90:	4b13      	ldr	r3, [pc, #76]	@ (8101de0 <_sbrk+0x64>)
 8101d92:	681b      	ldr	r3, [r3, #0]
 8101d94:	2b00      	cmp	r3, #0
 8101d96:	d102      	bne.n	8101d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101d98:	4b11      	ldr	r3, [pc, #68]	@ (8101de0 <_sbrk+0x64>)
 8101d9a:	4a12      	ldr	r2, [pc, #72]	@ (8101de4 <_sbrk+0x68>)
 8101d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101d9e:	4b10      	ldr	r3, [pc, #64]	@ (8101de0 <_sbrk+0x64>)
 8101da0:	681a      	ldr	r2, [r3, #0]
 8101da2:	687b      	ldr	r3, [r7, #4]
 8101da4:	4413      	add	r3, r2
 8101da6:	693a      	ldr	r2, [r7, #16]
 8101da8:	429a      	cmp	r2, r3
 8101daa:	d207      	bcs.n	8101dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101dac:	f006 f85c 	bl	8107e68 <__errno>
 8101db0:	4603      	mov	r3, r0
 8101db2:	220c      	movs	r2, #12
 8101db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101db6:	f04f 33ff 	mov.w	r3, #4294967295
 8101dba:	e009      	b.n	8101dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101dbc:	4b08      	ldr	r3, [pc, #32]	@ (8101de0 <_sbrk+0x64>)
 8101dbe:	681b      	ldr	r3, [r3, #0]
 8101dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101dc2:	4b07      	ldr	r3, [pc, #28]	@ (8101de0 <_sbrk+0x64>)
 8101dc4:	681a      	ldr	r2, [r3, #0]
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	4413      	add	r3, r2
 8101dca:	4a05      	ldr	r2, [pc, #20]	@ (8101de0 <_sbrk+0x64>)
 8101dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101dce:	68fb      	ldr	r3, [r7, #12]
}
 8101dd0:	4618      	mov	r0, r3
 8101dd2:	3718      	adds	r7, #24
 8101dd4:	46bd      	mov	sp, r7
 8101dd6:	bd80      	pop	{r7, pc}
 8101dd8:	10048000 	.word	0x10048000
 8101ddc:	00000400 	.word	0x00000400
 8101de0:	10000850 	.word	0x10000850
 8101de4:	10000e30 	.word	0x10000e30

08101de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101de8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8101e24 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8101dec:	f7fe fb90 	bl	8100510 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8101df0:	f7fe fb76 	bl	81004e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101df4:	480c      	ldr	r0, [pc, #48]	@ (8101e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101df6:	490d      	ldr	r1, [pc, #52]	@ (8101e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101df8:	4a0d      	ldr	r2, [pc, #52]	@ (8101e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101dfc:	e002      	b.n	8101e04 <LoopCopyDataInit>

08101dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101e02:	3304      	adds	r3, #4

08101e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101e08:	d3f9      	bcc.n	8101dfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8101e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8101e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101e10:	e001      	b.n	8101e16 <LoopFillZerobss>

08101e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101e14:	3204      	adds	r2, #4

08101e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101e18:	d3fb      	bcc.n	8101e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101e1a:	f006 f82b 	bl	8107e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101e1e:	f7fe fe63 	bl	8100ae8 <main>
  bx  lr
 8101e22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101e24:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101e28:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101e2c:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 8101e30:	08108994 	.word	0x08108994
  ldr r2, =_sbss
 8101e34:	1000006c 	.word	0x1000006c
  ldr r4, =_ebss
 8101e38:	10000e30 	.word	0x10000e30

08101e3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101e3c:	e7fe      	b.n	8101e3c <ADC3_IRQHandler>
	...

08101e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101e40:	b580      	push	{r7, lr}
 8101e42:	b082      	sub	sp, #8
 8101e44:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101e46:	4b28      	ldr	r3, [pc, #160]	@ (8101ee8 <HAL_Init+0xa8>)
 8101e48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e4c:	4a26      	ldr	r2, [pc, #152]	@ (8101ee8 <HAL_Init+0xa8>)
 8101e4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101e52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101e56:	4b24      	ldr	r3, [pc, #144]	@ (8101ee8 <HAL_Init+0xa8>)
 8101e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101e60:	603b      	str	r3, [r7, #0]
 8101e62:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101e64:	4b21      	ldr	r3, [pc, #132]	@ (8101eec <HAL_Init+0xac>)
 8101e66:	681b      	ldr	r3, [r3, #0]
 8101e68:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101e6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101e70:	4a1e      	ldr	r2, [pc, #120]	@ (8101eec <HAL_Init+0xac>)
 8101e72:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8101e76:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101e78:	4b1c      	ldr	r3, [pc, #112]	@ (8101eec <HAL_Init+0xac>)
 8101e7a:	681b      	ldr	r3, [r3, #0]
 8101e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8101eec <HAL_Init+0xac>)
 8101e7e:	f043 0301 	orr.w	r3, r3, #1
 8101e82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101e84:	2003      	movs	r0, #3
 8101e86:	f000 faaa 	bl	81023de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101e8a:	f000 fe77 	bl	8102b7c <HAL_RCC_GetSysClockFreq>
 8101e8e:	4602      	mov	r2, r0
 8101e90:	4b15      	ldr	r3, [pc, #84]	@ (8101ee8 <HAL_Init+0xa8>)
 8101e92:	699b      	ldr	r3, [r3, #24]
 8101e94:	0a1b      	lsrs	r3, r3, #8
 8101e96:	f003 030f 	and.w	r3, r3, #15
 8101e9a:	4915      	ldr	r1, [pc, #84]	@ (8101ef0 <HAL_Init+0xb0>)
 8101e9c:	5ccb      	ldrb	r3, [r1, r3]
 8101e9e:	f003 031f 	and.w	r3, r3, #31
 8101ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8101ea6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8101ee8 <HAL_Init+0xa8>)
 8101eaa:	699b      	ldr	r3, [r3, #24]
 8101eac:	f003 030f 	and.w	r3, r3, #15
 8101eb0:	4a0f      	ldr	r2, [pc, #60]	@ (8101ef0 <HAL_Init+0xb0>)
 8101eb2:	5cd3      	ldrb	r3, [r2, r3]
 8101eb4:	f003 031f 	and.w	r3, r3, #31
 8101eb8:	687a      	ldr	r2, [r7, #4]
 8101eba:	fa22 f303 	lsr.w	r3, r2, r3
 8101ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8101ef4 <HAL_Init+0xb4>)
 8101ec0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8101ef4 <HAL_Init+0xb4>)
 8101ec4:	681b      	ldr	r3, [r3, #0]
 8101ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8101ef8 <HAL_Init+0xb8>)
 8101ec8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101eca:	200f      	movs	r0, #15
 8101ecc:	f7ff fe4c 	bl	8101b68 <HAL_InitTick>
 8101ed0:	4603      	mov	r3, r0
 8101ed2:	2b00      	cmp	r3, #0
 8101ed4:	d001      	beq.n	8101eda <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101ed6:	2301      	movs	r3, #1
 8101ed8:	e002      	b.n	8101ee0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101eda:	f7ff faaf 	bl	810143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101ede:	2300      	movs	r3, #0
}
 8101ee0:	4618      	mov	r0, r3
 8101ee2:	3708      	adds	r7, #8
 8101ee4:	46bd      	mov	sp, r7
 8101ee6:	bd80      	pop	{r7, pc}
 8101ee8:	58024400 	.word	0x58024400
 8101eec:	40024400 	.word	0x40024400
 8101ef0:	08108940 	.word	0x08108940
 8101ef4:	10000004 	.word	0x10000004
 8101ef8:	10000000 	.word	0x10000000

08101efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101efc:	b480      	push	{r7}
 8101efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101f00:	4b06      	ldr	r3, [pc, #24]	@ (8101f1c <HAL_IncTick+0x20>)
 8101f02:	781b      	ldrb	r3, [r3, #0]
 8101f04:	461a      	mov	r2, r3
 8101f06:	4b06      	ldr	r3, [pc, #24]	@ (8101f20 <HAL_IncTick+0x24>)
 8101f08:	681b      	ldr	r3, [r3, #0]
 8101f0a:	4413      	add	r3, r2
 8101f0c:	4a04      	ldr	r2, [pc, #16]	@ (8101f20 <HAL_IncTick+0x24>)
 8101f0e:	6013      	str	r3, [r2, #0]
}
 8101f10:	bf00      	nop
 8101f12:	46bd      	mov	sp, r7
 8101f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f18:	4770      	bx	lr
 8101f1a:	bf00      	nop
 8101f1c:	1000000c 	.word	0x1000000c
 8101f20:	10000854 	.word	0x10000854

08101f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101f24:	b480      	push	{r7}
 8101f26:	af00      	add	r7, sp, #0
  return uwTick;
 8101f28:	4b03      	ldr	r3, [pc, #12]	@ (8101f38 <HAL_GetTick+0x14>)
 8101f2a:	681b      	ldr	r3, [r3, #0]
}
 8101f2c:	4618      	mov	r0, r3
 8101f2e:	46bd      	mov	sp, r7
 8101f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f34:	4770      	bx	lr
 8101f36:	bf00      	nop
 8101f38:	10000854 	.word	0x10000854

08101f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101f3c:	b580      	push	{r7, lr}
 8101f3e:	b084      	sub	sp, #16
 8101f40:	af00      	add	r7, sp, #0
 8101f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101f44:	f7ff ffee 	bl	8101f24 <HAL_GetTick>
 8101f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101f4e:	68fb      	ldr	r3, [r7, #12]
 8101f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101f54:	d005      	beq.n	8101f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101f56:	4b0a      	ldr	r3, [pc, #40]	@ (8101f80 <HAL_Delay+0x44>)
 8101f58:	781b      	ldrb	r3, [r3, #0]
 8101f5a:	461a      	mov	r2, r3
 8101f5c:	68fb      	ldr	r3, [r7, #12]
 8101f5e:	4413      	add	r3, r2
 8101f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101f62:	bf00      	nop
 8101f64:	f7ff ffde 	bl	8101f24 <HAL_GetTick>
 8101f68:	4602      	mov	r2, r0
 8101f6a:	68bb      	ldr	r3, [r7, #8]
 8101f6c:	1ad3      	subs	r3, r2, r3
 8101f6e:	68fa      	ldr	r2, [r7, #12]
 8101f70:	429a      	cmp	r2, r3
 8101f72:	d8f7      	bhi.n	8101f64 <HAL_Delay+0x28>
  {
  }
}
 8101f74:	bf00      	nop
 8101f76:	bf00      	nop
 8101f78:	3710      	adds	r7, #16
 8101f7a:	46bd      	mov	sp, r7
 8101f7c:	bd80      	pop	{r7, pc}
 8101f7e:	bf00      	nop
 8101f80:	1000000c 	.word	0x1000000c

08101f84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101f84:	b480      	push	{r7}
 8101f86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101f88:	4b03      	ldr	r3, [pc, #12]	@ (8101f98 <HAL_GetREVID+0x14>)
 8101f8a:	681b      	ldr	r3, [r3, #0]
 8101f8c:	0c1b      	lsrs	r3, r3, #16
}
 8101f8e:	4618      	mov	r0, r3
 8101f90:	46bd      	mov	sp, r7
 8101f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f96:	4770      	bx	lr
 8101f98:	5c001000 	.word	0x5c001000

08101f9c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8101f9c:	b480      	push	{r7}
 8101f9e:	b083      	sub	sp, #12
 8101fa0:	af00      	add	r7, sp, #0
 8101fa2:	6078      	str	r0, [r7, #4]
 8101fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8101fa6:	4b07      	ldr	r3, [pc, #28]	@ (8101fc4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101fa8:	685a      	ldr	r2, [r3, #4]
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	43db      	mvns	r3, r3
 8101fae:	401a      	ands	r2, r3
 8101fb0:	4904      	ldr	r1, [pc, #16]	@ (8101fc4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101fb2:	683b      	ldr	r3, [r7, #0]
 8101fb4:	4313      	orrs	r3, r2
 8101fb6:	604b      	str	r3, [r1, #4]
}
 8101fb8:	bf00      	nop
 8101fba:	370c      	adds	r7, #12
 8101fbc:	46bd      	mov	sp, r7
 8101fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fc2:	4770      	bx	lr
 8101fc4:	58000400 	.word	0x58000400

08101fc8 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8101fc8:	b580      	push	{r7, lr}
 8101fca:	b082      	sub	sp, #8
 8101fcc:	af00      	add	r7, sp, #0
 8101fce:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	2b00      	cmp	r3, #0
 8101fd4:	d003      	beq.n	8101fde <HAL_CEC_Init+0x16>
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101fda:	2b00      	cmp	r3, #0
 8101fdc:	d101      	bne.n	8101fe2 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8101fde:	2301      	movs	r3, #1
 8101fe0:	e050      	b.n	8102084 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101fe6:	2b00      	cmp	r3, #0
 8101fe8:	d106      	bne.n	8101ff8 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	2200      	movs	r2, #0
 8101fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8101ff2:	6878      	ldr	r0, [r7, #4]
 8101ff4:	f7ff fa48 	bl	8101488 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	2224      	movs	r2, #36	@ 0x24
 8101ffc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	681b      	ldr	r3, [r3, #0]
 8102002:	681a      	ldr	r2, [r3, #0]
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	681b      	ldr	r3, [r3, #0]
 8102008:	f022 0201 	bic.w	r2, r2, #1
 810200c:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	685a      	ldr	r2, [r3, #4]
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	689b      	ldr	r3, [r3, #8]
 8102016:	431a      	orrs	r2, r3
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	68db      	ldr	r3, [r3, #12]
 810201c:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102022:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102024:	687b      	ldr	r3, [r7, #4]
 8102026:	695b      	ldr	r3, [r3, #20]
 8102028:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 810202e:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102030:	687b      	ldr	r3, [r7, #4]
 8102032:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8102034:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102036:	687b      	ldr	r3, [r7, #4]
 8102038:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810203a:	041b      	lsls	r3, r3, #16
 810203c:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102048:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810204a:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	681b      	ldr	r3, [r3, #0]
 8102050:	695b      	ldr	r3, [r3, #20]
 8102052:	687a      	ldr	r2, [r7, #4]
 8102054:	6812      	ldr	r2, [r2, #0]
 8102056:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 810205a:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 810205e:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	681a      	ldr	r2, [r3, #0]
 8102066:	687b      	ldr	r3, [r7, #4]
 8102068:	681b      	ldr	r3, [r3, #0]
 810206a:	f042 0201 	orr.w	r2, r2, #1
 810206e:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102070:	687b      	ldr	r3, [r7, #4]
 8102072:	2200      	movs	r2, #0
 8102074:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	2220      	movs	r2, #32
 810207a:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	2220      	movs	r2, #32
 8102080:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8102082:	2300      	movs	r3, #0
}
 8102084:	4618      	mov	r0, r3
 8102086:	3708      	adds	r7, #8
 8102088:	46bd      	mov	sp, r7
 810208a:	bd80      	pop	{r7, pc}

0810208c <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 810208c:	b580      	push	{r7, lr}
 810208e:	b084      	sub	sp, #16
 8102090:	af00      	add	r7, sp, #0
 8102092:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	681b      	ldr	r3, [r3, #0]
 8102098:	691b      	ldr	r3, [r3, #16]
 810209a:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 810209c:	68fb      	ldr	r3, [r7, #12]
 810209e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	d00a      	beq.n	81020bc <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	2280      	movs	r2, #128	@ 0x80
 81020aa:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 81020ac:	687b      	ldr	r3, [r7, #4]
 81020ae:	681b      	ldr	r3, [r3, #0]
 81020b0:	691a      	ldr	r2, [r3, #16]
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 81020ba:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 81020bc:	68fb      	ldr	r3, [r7, #12]
 81020be:	f003 0301 	and.w	r3, r3, #1
 81020c2:	2b00      	cmp	r3, #0
 81020c4:	d01c      	beq.n	8102100 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	2222      	movs	r2, #34	@ 0x22
 81020ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 81020cc:	687b      	ldr	r3, [r7, #4]
 81020ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81020d0:	3301      	adds	r3, #1
 81020d2:	b29a      	uxth	r2, r3
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 81020d8:	687b      	ldr	r3, [r7, #4]
 81020da:	681b      	ldr	r3, [r3, #0]
 81020dc:	68da      	ldr	r2, [r3, #12]
 81020de:	687b      	ldr	r3, [r7, #4]
 81020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81020e2:	b2d2      	uxtb	r2, r2
 81020e4:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81020ea:	1c5a      	adds	r2, r3, #1
 81020ec:	687b      	ldr	r3, [r7, #4]
 81020ee:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	681b      	ldr	r3, [r3, #0]
 81020f4:	691a      	ldr	r2, [r3, #16]
 81020f6:	687b      	ldr	r3, [r7, #4]
 81020f8:	681b      	ldr	r3, [r3, #0]
 81020fa:	f042 0201 	orr.w	r2, r2, #1
 81020fe:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8102100:	68fb      	ldr	r3, [r7, #12]
 8102102:	f003 0302 	and.w	r3, r3, #2
 8102106:	2b00      	cmp	r3, #0
 8102108:	d01e      	beq.n	8102148 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	681b      	ldr	r3, [r3, #0]
 810210e:	691a      	ldr	r2, [r3, #16]
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	681b      	ldr	r3, [r3, #0]
 8102114:	f042 0202 	orr.w	r2, r2, #2
 8102118:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	2220      	movs	r2, #32
 810211e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	2200      	movs	r2, #0
 8102124:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 810212e:	425b      	negs	r3, r3
 8102130:	441a      	add	r2, r3
 8102132:	687b      	ldr	r3, [r7, #4]
 8102134:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 810213a:	4619      	mov	r1, r3
 810213c:	6878      	ldr	r0, [r7, #4]
 810213e:	f000 f88c 	bl	810225a <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	2200      	movs	r2, #0
 8102146:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8102148:	68fb      	ldr	r3, [r7, #12]
 810214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810214e:	2b00      	cmp	r3, #0
 8102150:	d024      	beq.n	810219c <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8102152:	687b      	ldr	r3, [r7, #4]
 8102154:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8102156:	3b01      	subs	r3, #1
 8102158:	b29a      	uxth	r2, r3
 810215a:	687b      	ldr	r3, [r7, #4]
 810215c:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8102162:	2b00      	cmp	r3, #0
 8102164:	d107      	bne.n	8102176 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	681b      	ldr	r3, [r3, #0]
 810216a:	681a      	ldr	r2, [r3, #0]
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	681b      	ldr	r3, [r3, #0]
 8102170:	f042 0204 	orr.w	r2, r2, #4
 8102174:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8102176:	687b      	ldr	r3, [r7, #4]
 8102178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810217a:	781a      	ldrb	r2, [r3, #0]
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	681b      	ldr	r3, [r3, #0]
 8102180:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102186:	1c5a      	adds	r2, r3, #1
 8102188:	687b      	ldr	r3, [r7, #4]
 810218a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 810218c:	687b      	ldr	r3, [r7, #4]
 810218e:	681b      	ldr	r3, [r3, #0]
 8102190:	691a      	ldr	r2, [r3, #16]
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	681b      	ldr	r3, [r3, #0]
 8102196:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810219a:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 810219c:	68fb      	ldr	r3, [r7, #12]
 810219e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81021a2:	2b00      	cmp	r3, #0
 81021a4:	d014      	beq.n	81021d0 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 81021a6:	687b      	ldr	r3, [r7, #4]
 81021a8:	681b      	ldr	r3, [r3, #0]
 81021aa:	691a      	ldr	r2, [r3, #16]
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	681b      	ldr	r3, [r3, #0]
 81021b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81021b4:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	2220      	movs	r2, #32
 81021ba:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	2200      	movs	r2, #0
 81021c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	2200      	movs	r2, #0
 81021c8:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 81021ca:	6878      	ldr	r0, [r7, #4]
 81021cc:	f000 f83b 	bl	8102246 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 81021d0:	68fa      	ldr	r2, [r7, #12]
 81021d2:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 81021d6:	4013      	ands	r3, r2
 81021d8:	2b00      	cmp	r3, #0
 81021da:	d030      	beq.n	810223e <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	68fa      	ldr	r2, [r7, #12]
 81021e0:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	681b      	ldr	r3, [r3, #0]
 81021e6:	691b      	ldr	r3, [r3, #16]
 81021e8:	687a      	ldr	r2, [r7, #4]
 81021ea:	6812      	ldr	r2, [r2, #0]
 81021ec:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 81021f0:	f043 031c 	orr.w	r3, r3, #28
 81021f4:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 81021f6:	68fb      	ldr	r3, [r7, #12]
 81021f8:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 81021fc:	2b00      	cmp	r3, #0
 81021fe:	d00e      	beq.n	810221e <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8102204:	687b      	ldr	r3, [r7, #4]
 8102206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8102208:	425b      	negs	r3, r3
 810220a:	441a      	add	r2, r3
 810220c:	687b      	ldr	r3, [r7, #4]
 810220e:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	2200      	movs	r2, #0
 8102214:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8102216:	687b      	ldr	r3, [r7, #4]
 8102218:	2220      	movs	r2, #32
 810221a:	63da      	str	r2, [r3, #60]	@ 0x3c
 810221c:	e00c      	b.n	8102238 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 810221e:	68fb      	ldr	r3, [r7, #12]
 8102220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102224:	2b00      	cmp	r3, #0
 8102226:	d107      	bne.n	8102238 <HAL_CEC_IRQHandler+0x1ac>
 8102228:	68fb      	ldr	r3, [r7, #12]
 810222a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 810222e:	2b00      	cmp	r3, #0
 8102230:	d002      	beq.n	8102238 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	2220      	movs	r2, #32
 8102236:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8102238:	6878      	ldr	r0, [r7, #4]
 810223a:	f000 f819 	bl	8102270 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 810223e:	bf00      	nop
 8102240:	3710      	adds	r7, #16
 8102242:	46bd      	mov	sp, r7
 8102244:	bd80      	pop	{r7, pc}

08102246 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8102246:	b480      	push	{r7}
 8102248:	b083      	sub	sp, #12
 810224a:	af00      	add	r7, sp, #0
 810224c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 810224e:	bf00      	nop
 8102250:	370c      	adds	r7, #12
 8102252:	46bd      	mov	sp, r7
 8102254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102258:	4770      	bx	lr

0810225a <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 810225a:	b480      	push	{r7}
 810225c:	b083      	sub	sp, #12
 810225e:	af00      	add	r7, sp, #0
 8102260:	6078      	str	r0, [r7, #4]
 8102262:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8102264:	bf00      	nop
 8102266:	370c      	adds	r7, #12
 8102268:	46bd      	mov	sp, r7
 810226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810226e:	4770      	bx	lr

08102270 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8102270:	b480      	push	{r7}
 8102272:	b083      	sub	sp, #12
 8102274:	af00      	add	r7, sp, #0
 8102276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8102278:	bf00      	nop
 810227a:	370c      	adds	r7, #12
 810227c:	46bd      	mov	sp, r7
 810227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102282:	4770      	bx	lr

08102284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102284:	b480      	push	{r7}
 8102286:	b085      	sub	sp, #20
 8102288:	af00      	add	r7, sp, #0
 810228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	f003 0307 	and.w	r3, r3, #7
 8102292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102294:	4b0c      	ldr	r3, [pc, #48]	@ (81022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8102296:	68db      	ldr	r3, [r3, #12]
 8102298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810229a:	68ba      	ldr	r2, [r7, #8]
 810229c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81022a0:	4013      	ands	r3, r2
 81022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81022a4:	68fb      	ldr	r3, [r7, #12]
 81022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81022a8:	68bb      	ldr	r3, [r7, #8]
 81022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81022ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81022b6:	4a04      	ldr	r2, [pc, #16]	@ (81022c8 <__NVIC_SetPriorityGrouping+0x44>)
 81022b8:	68bb      	ldr	r3, [r7, #8]
 81022ba:	60d3      	str	r3, [r2, #12]
}
 81022bc:	bf00      	nop
 81022be:	3714      	adds	r7, #20
 81022c0:	46bd      	mov	sp, r7
 81022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c6:	4770      	bx	lr
 81022c8:	e000ed00 	.word	0xe000ed00

081022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81022cc:	b480      	push	{r7}
 81022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81022d0:	4b04      	ldr	r3, [pc, #16]	@ (81022e4 <__NVIC_GetPriorityGrouping+0x18>)
 81022d2:	68db      	ldr	r3, [r3, #12]
 81022d4:	0a1b      	lsrs	r3, r3, #8
 81022d6:	f003 0307 	and.w	r3, r3, #7
}
 81022da:	4618      	mov	r0, r3
 81022dc:	46bd      	mov	sp, r7
 81022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e2:	4770      	bx	lr
 81022e4:	e000ed00 	.word	0xe000ed00

081022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81022e8:	b480      	push	{r7}
 81022ea:	b083      	sub	sp, #12
 81022ec:	af00      	add	r7, sp, #0
 81022ee:	4603      	mov	r3, r0
 81022f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81022f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81022f6:	2b00      	cmp	r3, #0
 81022f8:	db0b      	blt.n	8102312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81022fa:	88fb      	ldrh	r3, [r7, #6]
 81022fc:	f003 021f 	and.w	r2, r3, #31
 8102300:	4907      	ldr	r1, [pc, #28]	@ (8102320 <__NVIC_EnableIRQ+0x38>)
 8102302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102306:	095b      	lsrs	r3, r3, #5
 8102308:	2001      	movs	r0, #1
 810230a:	fa00 f202 	lsl.w	r2, r0, r2
 810230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102312:	bf00      	nop
 8102314:	370c      	adds	r7, #12
 8102316:	46bd      	mov	sp, r7
 8102318:	f85d 7b04 	ldr.w	r7, [sp], #4
 810231c:	4770      	bx	lr
 810231e:	bf00      	nop
 8102320:	e000e100 	.word	0xe000e100

08102324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102324:	b480      	push	{r7}
 8102326:	b083      	sub	sp, #12
 8102328:	af00      	add	r7, sp, #0
 810232a:	4603      	mov	r3, r0
 810232c:	6039      	str	r1, [r7, #0]
 810232e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102334:	2b00      	cmp	r3, #0
 8102336:	db0a      	blt.n	810234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102338:	683b      	ldr	r3, [r7, #0]
 810233a:	b2da      	uxtb	r2, r3
 810233c:	490c      	ldr	r1, [pc, #48]	@ (8102370 <__NVIC_SetPriority+0x4c>)
 810233e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102342:	0112      	lsls	r2, r2, #4
 8102344:	b2d2      	uxtb	r2, r2
 8102346:	440b      	add	r3, r1
 8102348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810234c:	e00a      	b.n	8102364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810234e:	683b      	ldr	r3, [r7, #0]
 8102350:	b2da      	uxtb	r2, r3
 8102352:	4908      	ldr	r1, [pc, #32]	@ (8102374 <__NVIC_SetPriority+0x50>)
 8102354:	88fb      	ldrh	r3, [r7, #6]
 8102356:	f003 030f 	and.w	r3, r3, #15
 810235a:	3b04      	subs	r3, #4
 810235c:	0112      	lsls	r2, r2, #4
 810235e:	b2d2      	uxtb	r2, r2
 8102360:	440b      	add	r3, r1
 8102362:	761a      	strb	r2, [r3, #24]
}
 8102364:	bf00      	nop
 8102366:	370c      	adds	r7, #12
 8102368:	46bd      	mov	sp, r7
 810236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810236e:	4770      	bx	lr
 8102370:	e000e100 	.word	0xe000e100
 8102374:	e000ed00 	.word	0xe000ed00

08102378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102378:	b480      	push	{r7}
 810237a:	b089      	sub	sp, #36	@ 0x24
 810237c:	af00      	add	r7, sp, #0
 810237e:	60f8      	str	r0, [r7, #12]
 8102380:	60b9      	str	r1, [r7, #8]
 8102382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102384:	68fb      	ldr	r3, [r7, #12]
 8102386:	f003 0307 	and.w	r3, r3, #7
 810238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810238c:	69fb      	ldr	r3, [r7, #28]
 810238e:	f1c3 0307 	rsb	r3, r3, #7
 8102392:	2b04      	cmp	r3, #4
 8102394:	bf28      	it	cs
 8102396:	2304      	movcs	r3, #4
 8102398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810239a:	69fb      	ldr	r3, [r7, #28]
 810239c:	3304      	adds	r3, #4
 810239e:	2b06      	cmp	r3, #6
 81023a0:	d902      	bls.n	81023a8 <NVIC_EncodePriority+0x30>
 81023a2:	69fb      	ldr	r3, [r7, #28]
 81023a4:	3b03      	subs	r3, #3
 81023a6:	e000      	b.n	81023aa <NVIC_EncodePriority+0x32>
 81023a8:	2300      	movs	r3, #0
 81023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023ac:	f04f 32ff 	mov.w	r2, #4294967295
 81023b0:	69bb      	ldr	r3, [r7, #24]
 81023b2:	fa02 f303 	lsl.w	r3, r2, r3
 81023b6:	43da      	mvns	r2, r3
 81023b8:	68bb      	ldr	r3, [r7, #8]
 81023ba:	401a      	ands	r2, r3
 81023bc:	697b      	ldr	r3, [r7, #20]
 81023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81023c0:	f04f 31ff 	mov.w	r1, #4294967295
 81023c4:	697b      	ldr	r3, [r7, #20]
 81023c6:	fa01 f303 	lsl.w	r3, r1, r3
 81023ca:	43d9      	mvns	r1, r3
 81023cc:	687b      	ldr	r3, [r7, #4]
 81023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023d0:	4313      	orrs	r3, r2
         );
}
 81023d2:	4618      	mov	r0, r3
 81023d4:	3724      	adds	r7, #36	@ 0x24
 81023d6:	46bd      	mov	sp, r7
 81023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023dc:	4770      	bx	lr

081023de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81023de:	b580      	push	{r7, lr}
 81023e0:	b082      	sub	sp, #8
 81023e2:	af00      	add	r7, sp, #0
 81023e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81023e6:	6878      	ldr	r0, [r7, #4]
 81023e8:	f7ff ff4c 	bl	8102284 <__NVIC_SetPriorityGrouping>
}
 81023ec:	bf00      	nop
 81023ee:	3708      	adds	r7, #8
 81023f0:	46bd      	mov	sp, r7
 81023f2:	bd80      	pop	{r7, pc}

081023f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81023f4:	b580      	push	{r7, lr}
 81023f6:	b086      	sub	sp, #24
 81023f8:	af00      	add	r7, sp, #0
 81023fa:	4603      	mov	r3, r0
 81023fc:	60b9      	str	r1, [r7, #8]
 81023fe:	607a      	str	r2, [r7, #4]
 8102400:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102402:	f7ff ff63 	bl	81022cc <__NVIC_GetPriorityGrouping>
 8102406:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102408:	687a      	ldr	r2, [r7, #4]
 810240a:	68b9      	ldr	r1, [r7, #8]
 810240c:	6978      	ldr	r0, [r7, #20]
 810240e:	f7ff ffb3 	bl	8102378 <NVIC_EncodePriority>
 8102412:	4602      	mov	r2, r0
 8102414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102418:	4611      	mov	r1, r2
 810241a:	4618      	mov	r0, r3
 810241c:	f7ff ff82 	bl	8102324 <__NVIC_SetPriority>
}
 8102420:	bf00      	nop
 8102422:	3718      	adds	r7, #24
 8102424:	46bd      	mov	sp, r7
 8102426:	bd80      	pop	{r7, pc}

08102428 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102428:	b580      	push	{r7, lr}
 810242a:	b082      	sub	sp, #8
 810242c:	af00      	add	r7, sp, #0
 810242e:	4603      	mov	r3, r0
 8102430:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102436:	4618      	mov	r0, r3
 8102438:	f7ff ff56 	bl	81022e8 <__NVIC_EnableIRQ>
}
 810243c:	bf00      	nop
 810243e:	3708      	adds	r7, #8
 8102440:	46bd      	mov	sp, r7
 8102442:	bd80      	pop	{r7, pc}

08102444 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102444:	b480      	push	{r7}
 8102446:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102448:	4b06      	ldr	r3, [pc, #24]	@ (8102464 <HAL_GetCurrentCPUID+0x20>)
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8102450:	2b70      	cmp	r3, #112	@ 0x70
 8102452:	d101      	bne.n	8102458 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8102454:	2303      	movs	r3, #3
 8102456:	e000      	b.n	810245a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8102458:	2301      	movs	r3, #1
  }
}
 810245a:	4618      	mov	r0, r3
 810245c:	46bd      	mov	sp, r7
 810245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102462:	4770      	bx	lr
 8102464:	e000ed00 	.word	0xe000ed00

08102468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8102468:	b480      	push	{r7}
 810246a:	b089      	sub	sp, #36	@ 0x24
 810246c:	af00      	add	r7, sp, #0
 810246e:	6078      	str	r0, [r7, #4]
 8102470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102472:	2300      	movs	r3, #0
 8102474:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102476:	4b89      	ldr	r3, [pc, #548]	@ (810269c <HAL_GPIO_Init+0x234>)
 8102478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810247a:	e194      	b.n	81027a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810247c:	683b      	ldr	r3, [r7, #0]
 810247e:	681a      	ldr	r2, [r3, #0]
 8102480:	2101      	movs	r1, #1
 8102482:	69fb      	ldr	r3, [r7, #28]
 8102484:	fa01 f303 	lsl.w	r3, r1, r3
 8102488:	4013      	ands	r3, r2
 810248a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810248c:	693b      	ldr	r3, [r7, #16]
 810248e:	2b00      	cmp	r3, #0
 8102490:	f000 8186 	beq.w	81027a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102494:	683b      	ldr	r3, [r7, #0]
 8102496:	685b      	ldr	r3, [r3, #4]
 8102498:	f003 0303 	and.w	r3, r3, #3
 810249c:	2b01      	cmp	r3, #1
 810249e:	d005      	beq.n	81024ac <HAL_GPIO_Init+0x44>
 81024a0:	683b      	ldr	r3, [r7, #0]
 81024a2:	685b      	ldr	r3, [r3, #4]
 81024a4:	f003 0303 	and.w	r3, r3, #3
 81024a8:	2b02      	cmp	r3, #2
 81024aa:	d130      	bne.n	810250e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	689b      	ldr	r3, [r3, #8]
 81024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81024b2:	69fb      	ldr	r3, [r7, #28]
 81024b4:	005b      	lsls	r3, r3, #1
 81024b6:	2203      	movs	r2, #3
 81024b8:	fa02 f303 	lsl.w	r3, r2, r3
 81024bc:	43db      	mvns	r3, r3
 81024be:	69ba      	ldr	r2, [r7, #24]
 81024c0:	4013      	ands	r3, r2
 81024c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81024c4:	683b      	ldr	r3, [r7, #0]
 81024c6:	68da      	ldr	r2, [r3, #12]
 81024c8:	69fb      	ldr	r3, [r7, #28]
 81024ca:	005b      	lsls	r3, r3, #1
 81024cc:	fa02 f303 	lsl.w	r3, r2, r3
 81024d0:	69ba      	ldr	r2, [r7, #24]
 81024d2:	4313      	orrs	r3, r2
 81024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	69ba      	ldr	r2, [r7, #24]
 81024da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81024dc:	687b      	ldr	r3, [r7, #4]
 81024de:	685b      	ldr	r3, [r3, #4]
 81024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81024e2:	2201      	movs	r2, #1
 81024e4:	69fb      	ldr	r3, [r7, #28]
 81024e6:	fa02 f303 	lsl.w	r3, r2, r3
 81024ea:	43db      	mvns	r3, r3
 81024ec:	69ba      	ldr	r2, [r7, #24]
 81024ee:	4013      	ands	r3, r2
 81024f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81024f2:	683b      	ldr	r3, [r7, #0]
 81024f4:	685b      	ldr	r3, [r3, #4]
 81024f6:	091b      	lsrs	r3, r3, #4
 81024f8:	f003 0201 	and.w	r2, r3, #1
 81024fc:	69fb      	ldr	r3, [r7, #28]
 81024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8102502:	69ba      	ldr	r2, [r7, #24]
 8102504:	4313      	orrs	r3, r2
 8102506:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	69ba      	ldr	r2, [r7, #24]
 810250c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810250e:	683b      	ldr	r3, [r7, #0]
 8102510:	685b      	ldr	r3, [r3, #4]
 8102512:	f003 0303 	and.w	r3, r3, #3
 8102516:	2b03      	cmp	r3, #3
 8102518:	d017      	beq.n	810254a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810251a:	687b      	ldr	r3, [r7, #4]
 810251c:	68db      	ldr	r3, [r3, #12]
 810251e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102520:	69fb      	ldr	r3, [r7, #28]
 8102522:	005b      	lsls	r3, r3, #1
 8102524:	2203      	movs	r2, #3
 8102526:	fa02 f303 	lsl.w	r3, r2, r3
 810252a:	43db      	mvns	r3, r3
 810252c:	69ba      	ldr	r2, [r7, #24]
 810252e:	4013      	ands	r3, r2
 8102530:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102532:	683b      	ldr	r3, [r7, #0]
 8102534:	689a      	ldr	r2, [r3, #8]
 8102536:	69fb      	ldr	r3, [r7, #28]
 8102538:	005b      	lsls	r3, r3, #1
 810253a:	fa02 f303 	lsl.w	r3, r2, r3
 810253e:	69ba      	ldr	r2, [r7, #24]
 8102540:	4313      	orrs	r3, r2
 8102542:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	69ba      	ldr	r2, [r7, #24]
 8102548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810254a:	683b      	ldr	r3, [r7, #0]
 810254c:	685b      	ldr	r3, [r3, #4]
 810254e:	f003 0303 	and.w	r3, r3, #3
 8102552:	2b02      	cmp	r3, #2
 8102554:	d123      	bne.n	810259e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102556:	69fb      	ldr	r3, [r7, #28]
 8102558:	08da      	lsrs	r2, r3, #3
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	3208      	adds	r2, #8
 810255e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102564:	69fb      	ldr	r3, [r7, #28]
 8102566:	f003 0307 	and.w	r3, r3, #7
 810256a:	009b      	lsls	r3, r3, #2
 810256c:	220f      	movs	r2, #15
 810256e:	fa02 f303 	lsl.w	r3, r2, r3
 8102572:	43db      	mvns	r3, r3
 8102574:	69ba      	ldr	r2, [r7, #24]
 8102576:	4013      	ands	r3, r2
 8102578:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810257a:	683b      	ldr	r3, [r7, #0]
 810257c:	691a      	ldr	r2, [r3, #16]
 810257e:	69fb      	ldr	r3, [r7, #28]
 8102580:	f003 0307 	and.w	r3, r3, #7
 8102584:	009b      	lsls	r3, r3, #2
 8102586:	fa02 f303 	lsl.w	r3, r2, r3
 810258a:	69ba      	ldr	r2, [r7, #24]
 810258c:	4313      	orrs	r3, r2
 810258e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102590:	69fb      	ldr	r3, [r7, #28]
 8102592:	08da      	lsrs	r2, r3, #3
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	3208      	adds	r2, #8
 8102598:	69b9      	ldr	r1, [r7, #24]
 810259a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810259e:	687b      	ldr	r3, [r7, #4]
 81025a0:	681b      	ldr	r3, [r3, #0]
 81025a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81025a4:	69fb      	ldr	r3, [r7, #28]
 81025a6:	005b      	lsls	r3, r3, #1
 81025a8:	2203      	movs	r2, #3
 81025aa:	fa02 f303 	lsl.w	r3, r2, r3
 81025ae:	43db      	mvns	r3, r3
 81025b0:	69ba      	ldr	r2, [r7, #24]
 81025b2:	4013      	ands	r3, r2
 81025b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81025b6:	683b      	ldr	r3, [r7, #0]
 81025b8:	685b      	ldr	r3, [r3, #4]
 81025ba:	f003 0203 	and.w	r2, r3, #3
 81025be:	69fb      	ldr	r3, [r7, #28]
 81025c0:	005b      	lsls	r3, r3, #1
 81025c2:	fa02 f303 	lsl.w	r3, r2, r3
 81025c6:	69ba      	ldr	r2, [r7, #24]
 81025c8:	4313      	orrs	r3, r2
 81025ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	69ba      	ldr	r2, [r7, #24]
 81025d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81025d2:	683b      	ldr	r3, [r7, #0]
 81025d4:	685b      	ldr	r3, [r3, #4]
 81025d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81025da:	2b00      	cmp	r3, #0
 81025dc:	f000 80e0 	beq.w	81027a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81025e0:	4b2f      	ldr	r3, [pc, #188]	@ (81026a0 <HAL_GPIO_Init+0x238>)
 81025e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81025e6:	4a2e      	ldr	r2, [pc, #184]	@ (81026a0 <HAL_GPIO_Init+0x238>)
 81025e8:	f043 0302 	orr.w	r3, r3, #2
 81025ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81025f0:	4b2b      	ldr	r3, [pc, #172]	@ (81026a0 <HAL_GPIO_Init+0x238>)
 81025f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81025f6:	f003 0302 	and.w	r3, r3, #2
 81025fa:	60fb      	str	r3, [r7, #12]
 81025fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81025fe:	4a29      	ldr	r2, [pc, #164]	@ (81026a4 <HAL_GPIO_Init+0x23c>)
 8102600:	69fb      	ldr	r3, [r7, #28]
 8102602:	089b      	lsrs	r3, r3, #2
 8102604:	3302      	adds	r3, #2
 8102606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810260c:	69fb      	ldr	r3, [r7, #28]
 810260e:	f003 0303 	and.w	r3, r3, #3
 8102612:	009b      	lsls	r3, r3, #2
 8102614:	220f      	movs	r2, #15
 8102616:	fa02 f303 	lsl.w	r3, r2, r3
 810261a:	43db      	mvns	r3, r3
 810261c:	69ba      	ldr	r2, [r7, #24]
 810261e:	4013      	ands	r3, r2
 8102620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	4a20      	ldr	r2, [pc, #128]	@ (81026a8 <HAL_GPIO_Init+0x240>)
 8102626:	4293      	cmp	r3, r2
 8102628:	d052      	beq.n	81026d0 <HAL_GPIO_Init+0x268>
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	4a1f      	ldr	r2, [pc, #124]	@ (81026ac <HAL_GPIO_Init+0x244>)
 810262e:	4293      	cmp	r3, r2
 8102630:	d031      	beq.n	8102696 <HAL_GPIO_Init+0x22e>
 8102632:	687b      	ldr	r3, [r7, #4]
 8102634:	4a1e      	ldr	r2, [pc, #120]	@ (81026b0 <HAL_GPIO_Init+0x248>)
 8102636:	4293      	cmp	r3, r2
 8102638:	d02b      	beq.n	8102692 <HAL_GPIO_Init+0x22a>
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	4a1d      	ldr	r2, [pc, #116]	@ (81026b4 <HAL_GPIO_Init+0x24c>)
 810263e:	4293      	cmp	r3, r2
 8102640:	d025      	beq.n	810268e <HAL_GPIO_Init+0x226>
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	4a1c      	ldr	r2, [pc, #112]	@ (81026b8 <HAL_GPIO_Init+0x250>)
 8102646:	4293      	cmp	r3, r2
 8102648:	d01f      	beq.n	810268a <HAL_GPIO_Init+0x222>
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	4a1b      	ldr	r2, [pc, #108]	@ (81026bc <HAL_GPIO_Init+0x254>)
 810264e:	4293      	cmp	r3, r2
 8102650:	d019      	beq.n	8102686 <HAL_GPIO_Init+0x21e>
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	4a1a      	ldr	r2, [pc, #104]	@ (81026c0 <HAL_GPIO_Init+0x258>)
 8102656:	4293      	cmp	r3, r2
 8102658:	d013      	beq.n	8102682 <HAL_GPIO_Init+0x21a>
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	4a19      	ldr	r2, [pc, #100]	@ (81026c4 <HAL_GPIO_Init+0x25c>)
 810265e:	4293      	cmp	r3, r2
 8102660:	d00d      	beq.n	810267e <HAL_GPIO_Init+0x216>
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	4a18      	ldr	r2, [pc, #96]	@ (81026c8 <HAL_GPIO_Init+0x260>)
 8102666:	4293      	cmp	r3, r2
 8102668:	d007      	beq.n	810267a <HAL_GPIO_Init+0x212>
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	4a17      	ldr	r2, [pc, #92]	@ (81026cc <HAL_GPIO_Init+0x264>)
 810266e:	4293      	cmp	r3, r2
 8102670:	d101      	bne.n	8102676 <HAL_GPIO_Init+0x20e>
 8102672:	2309      	movs	r3, #9
 8102674:	e02d      	b.n	81026d2 <HAL_GPIO_Init+0x26a>
 8102676:	230a      	movs	r3, #10
 8102678:	e02b      	b.n	81026d2 <HAL_GPIO_Init+0x26a>
 810267a:	2308      	movs	r3, #8
 810267c:	e029      	b.n	81026d2 <HAL_GPIO_Init+0x26a>
 810267e:	2307      	movs	r3, #7
 8102680:	e027      	b.n	81026d2 <HAL_GPIO_Init+0x26a>
 8102682:	2306      	movs	r3, #6
 8102684:	e025      	b.n	81026d2 <HAL_GPIO_Init+0x26a>
 8102686:	2305      	movs	r3, #5
 8102688:	e023      	b.n	81026d2 <HAL_GPIO_Init+0x26a>
 810268a:	2304      	movs	r3, #4
 810268c:	e021      	b.n	81026d2 <HAL_GPIO_Init+0x26a>
 810268e:	2303      	movs	r3, #3
 8102690:	e01f      	b.n	81026d2 <HAL_GPIO_Init+0x26a>
 8102692:	2302      	movs	r3, #2
 8102694:	e01d      	b.n	81026d2 <HAL_GPIO_Init+0x26a>
 8102696:	2301      	movs	r3, #1
 8102698:	e01b      	b.n	81026d2 <HAL_GPIO_Init+0x26a>
 810269a:	bf00      	nop
 810269c:	580000c0 	.word	0x580000c0
 81026a0:	58024400 	.word	0x58024400
 81026a4:	58000400 	.word	0x58000400
 81026a8:	58020000 	.word	0x58020000
 81026ac:	58020400 	.word	0x58020400
 81026b0:	58020800 	.word	0x58020800
 81026b4:	58020c00 	.word	0x58020c00
 81026b8:	58021000 	.word	0x58021000
 81026bc:	58021400 	.word	0x58021400
 81026c0:	58021800 	.word	0x58021800
 81026c4:	58021c00 	.word	0x58021c00
 81026c8:	58022000 	.word	0x58022000
 81026cc:	58022400 	.word	0x58022400
 81026d0:	2300      	movs	r3, #0
 81026d2:	69fa      	ldr	r2, [r7, #28]
 81026d4:	f002 0203 	and.w	r2, r2, #3
 81026d8:	0092      	lsls	r2, r2, #2
 81026da:	4093      	lsls	r3, r2
 81026dc:	69ba      	ldr	r2, [r7, #24]
 81026de:	4313      	orrs	r3, r2
 81026e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81026e2:	4938      	ldr	r1, [pc, #224]	@ (81027c4 <HAL_GPIO_Init+0x35c>)
 81026e4:	69fb      	ldr	r3, [r7, #28]
 81026e6:	089b      	lsrs	r3, r3, #2
 81026e8:	3302      	adds	r3, #2
 81026ea:	69ba      	ldr	r2, [r7, #24]
 81026ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81026f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81026f4:	681b      	ldr	r3, [r3, #0]
 81026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026f8:	693b      	ldr	r3, [r7, #16]
 81026fa:	43db      	mvns	r3, r3
 81026fc:	69ba      	ldr	r2, [r7, #24]
 81026fe:	4013      	ands	r3, r2
 8102700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102702:	683b      	ldr	r3, [r7, #0]
 8102704:	685b      	ldr	r3, [r3, #4]
 8102706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810270a:	2b00      	cmp	r3, #0
 810270c:	d003      	beq.n	8102716 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810270e:	69ba      	ldr	r2, [r7, #24]
 8102710:	693b      	ldr	r3, [r7, #16]
 8102712:	4313      	orrs	r3, r2
 8102714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102716:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810271a:	69bb      	ldr	r3, [r7, #24]
 810271c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810271e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102722:	685b      	ldr	r3, [r3, #4]
 8102724:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102726:	693b      	ldr	r3, [r7, #16]
 8102728:	43db      	mvns	r3, r3
 810272a:	69ba      	ldr	r2, [r7, #24]
 810272c:	4013      	ands	r3, r2
 810272e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102730:	683b      	ldr	r3, [r7, #0]
 8102732:	685b      	ldr	r3, [r3, #4]
 8102734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102738:	2b00      	cmp	r3, #0
 810273a:	d003      	beq.n	8102744 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810273c:	69ba      	ldr	r2, [r7, #24]
 810273e:	693b      	ldr	r3, [r7, #16]
 8102740:	4313      	orrs	r3, r2
 8102742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102744:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102748:	69bb      	ldr	r3, [r7, #24]
 810274a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810274c:	697b      	ldr	r3, [r7, #20]
 810274e:	685b      	ldr	r3, [r3, #4]
 8102750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102752:	693b      	ldr	r3, [r7, #16]
 8102754:	43db      	mvns	r3, r3
 8102756:	69ba      	ldr	r2, [r7, #24]
 8102758:	4013      	ands	r3, r2
 810275a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810275c:	683b      	ldr	r3, [r7, #0]
 810275e:	685b      	ldr	r3, [r3, #4]
 8102760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102764:	2b00      	cmp	r3, #0
 8102766:	d003      	beq.n	8102770 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102768:	69ba      	ldr	r2, [r7, #24]
 810276a:	693b      	ldr	r3, [r7, #16]
 810276c:	4313      	orrs	r3, r2
 810276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102770:	697b      	ldr	r3, [r7, #20]
 8102772:	69ba      	ldr	r2, [r7, #24]
 8102774:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102776:	697b      	ldr	r3, [r7, #20]
 8102778:	681b      	ldr	r3, [r3, #0]
 810277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810277c:	693b      	ldr	r3, [r7, #16]
 810277e:	43db      	mvns	r3, r3
 8102780:	69ba      	ldr	r2, [r7, #24]
 8102782:	4013      	ands	r3, r2
 8102784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102786:	683b      	ldr	r3, [r7, #0]
 8102788:	685b      	ldr	r3, [r3, #4]
 810278a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810278e:	2b00      	cmp	r3, #0
 8102790:	d003      	beq.n	810279a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102792:	69ba      	ldr	r2, [r7, #24]
 8102794:	693b      	ldr	r3, [r7, #16]
 8102796:	4313      	orrs	r3, r2
 8102798:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810279a:	697b      	ldr	r3, [r7, #20]
 810279c:	69ba      	ldr	r2, [r7, #24]
 810279e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81027a0:	69fb      	ldr	r3, [r7, #28]
 81027a2:	3301      	adds	r3, #1
 81027a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81027a6:	683b      	ldr	r3, [r7, #0]
 81027a8:	681a      	ldr	r2, [r3, #0]
 81027aa:	69fb      	ldr	r3, [r7, #28]
 81027ac:	fa22 f303 	lsr.w	r3, r2, r3
 81027b0:	2b00      	cmp	r3, #0
 81027b2:	f47f ae63 	bne.w	810247c <HAL_GPIO_Init+0x14>
  }
}
 81027b6:	bf00      	nop
 81027b8:	bf00      	nop
 81027ba:	3724      	adds	r7, #36	@ 0x24
 81027bc:	46bd      	mov	sp, r7
 81027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027c2:	4770      	bx	lr
 81027c4:	58000400 	.word	0x58000400

081027c8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81027c8:	b480      	push	{r7}
 81027ca:	b083      	sub	sp, #12
 81027cc:	af00      	add	r7, sp, #0
 81027ce:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81027d0:	4b05      	ldr	r3, [pc, #20]	@ (81027e8 <HAL_HSEM_ActivateNotification+0x20>)
 81027d2:	681a      	ldr	r2, [r3, #0]
 81027d4:	4904      	ldr	r1, [pc, #16]	@ (81027e8 <HAL_HSEM_ActivateNotification+0x20>)
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	4313      	orrs	r3, r2
 81027da:	600b      	str	r3, [r1, #0]
#endif
}
 81027dc:	bf00      	nop
 81027de:	370c      	adds	r7, #12
 81027e0:	46bd      	mov	sp, r7
 81027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027e6:	4770      	bx	lr
 81027e8:	58026510 	.word	0x58026510

081027ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81027ec:	b580      	push	{r7, lr}
 81027ee:	b086      	sub	sp, #24
 81027f0:	af02      	add	r7, sp, #8
 81027f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	2b00      	cmp	r3, #0
 81027f8:	d101      	bne.n	81027fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81027fa:	2301      	movs	r3, #1
 81027fc:	e0fe      	b.n	81029fc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8102804:	b2db      	uxtb	r3, r3
 8102806:	2b00      	cmp	r3, #0
 8102808:	d106      	bne.n	8102818 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	2200      	movs	r2, #0
 810280e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8102812:	6878      	ldr	r0, [r7, #4]
 8102814:	f7fe ffd2 	bl	81017bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8102818:	687b      	ldr	r3, [r7, #4]
 810281a:	2203      	movs	r2, #3
 810281c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8102820:	687b      	ldr	r3, [r7, #4]
 8102822:	681b      	ldr	r3, [r3, #0]
 8102824:	4618      	mov	r0, r3
 8102826:	f004 fc0d 	bl	8107044 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	6818      	ldr	r0, [r3, #0]
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	7c1a      	ldrb	r2, [r3, #16]
 8102832:	f88d 2000 	strb.w	r2, [sp]
 8102836:	3304      	adds	r3, #4
 8102838:	cb0e      	ldmia	r3, {r1, r2, r3}
 810283a:	f004 fb92 	bl	8106f62 <USB_CoreInit>
 810283e:	4603      	mov	r3, r0
 8102840:	2b00      	cmp	r3, #0
 8102842:	d005      	beq.n	8102850 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102844:	687b      	ldr	r3, [r7, #4]
 8102846:	2202      	movs	r2, #2
 8102848:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810284c:	2301      	movs	r3, #1
 810284e:	e0d5      	b.n	81029fc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	681b      	ldr	r3, [r3, #0]
 8102854:	2100      	movs	r1, #0
 8102856:	4618      	mov	r0, r3
 8102858:	f004 fc05 	bl	8107066 <USB_SetCurrentMode>
 810285c:	4603      	mov	r3, r0
 810285e:	2b00      	cmp	r3, #0
 8102860:	d005      	beq.n	810286e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	2202      	movs	r2, #2
 8102866:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810286a:	2301      	movs	r3, #1
 810286c:	e0c6      	b.n	81029fc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810286e:	2300      	movs	r3, #0
 8102870:	73fb      	strb	r3, [r7, #15]
 8102872:	e04a      	b.n	810290a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8102874:	7bfa      	ldrb	r2, [r7, #15]
 8102876:	6879      	ldr	r1, [r7, #4]
 8102878:	4613      	mov	r3, r2
 810287a:	00db      	lsls	r3, r3, #3
 810287c:	4413      	add	r3, r2
 810287e:	009b      	lsls	r3, r3, #2
 8102880:	440b      	add	r3, r1
 8102882:	3315      	adds	r3, #21
 8102884:	2201      	movs	r2, #1
 8102886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8102888:	7bfa      	ldrb	r2, [r7, #15]
 810288a:	6879      	ldr	r1, [r7, #4]
 810288c:	4613      	mov	r3, r2
 810288e:	00db      	lsls	r3, r3, #3
 8102890:	4413      	add	r3, r2
 8102892:	009b      	lsls	r3, r3, #2
 8102894:	440b      	add	r3, r1
 8102896:	3314      	adds	r3, #20
 8102898:	7bfa      	ldrb	r2, [r7, #15]
 810289a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 810289c:	7bfa      	ldrb	r2, [r7, #15]
 810289e:	7bfb      	ldrb	r3, [r7, #15]
 81028a0:	b298      	uxth	r0, r3
 81028a2:	6879      	ldr	r1, [r7, #4]
 81028a4:	4613      	mov	r3, r2
 81028a6:	00db      	lsls	r3, r3, #3
 81028a8:	4413      	add	r3, r2
 81028aa:	009b      	lsls	r3, r3, #2
 81028ac:	440b      	add	r3, r1
 81028ae:	332e      	adds	r3, #46	@ 0x2e
 81028b0:	4602      	mov	r2, r0
 81028b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81028b4:	7bfa      	ldrb	r2, [r7, #15]
 81028b6:	6879      	ldr	r1, [r7, #4]
 81028b8:	4613      	mov	r3, r2
 81028ba:	00db      	lsls	r3, r3, #3
 81028bc:	4413      	add	r3, r2
 81028be:	009b      	lsls	r3, r3, #2
 81028c0:	440b      	add	r3, r1
 81028c2:	3318      	adds	r3, #24
 81028c4:	2200      	movs	r2, #0
 81028c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81028c8:	7bfa      	ldrb	r2, [r7, #15]
 81028ca:	6879      	ldr	r1, [r7, #4]
 81028cc:	4613      	mov	r3, r2
 81028ce:	00db      	lsls	r3, r3, #3
 81028d0:	4413      	add	r3, r2
 81028d2:	009b      	lsls	r3, r3, #2
 81028d4:	440b      	add	r3, r1
 81028d6:	331c      	adds	r3, #28
 81028d8:	2200      	movs	r2, #0
 81028da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81028dc:	7bfa      	ldrb	r2, [r7, #15]
 81028de:	6879      	ldr	r1, [r7, #4]
 81028e0:	4613      	mov	r3, r2
 81028e2:	00db      	lsls	r3, r3, #3
 81028e4:	4413      	add	r3, r2
 81028e6:	009b      	lsls	r3, r3, #2
 81028e8:	440b      	add	r3, r1
 81028ea:	3320      	adds	r3, #32
 81028ec:	2200      	movs	r2, #0
 81028ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81028f0:	7bfa      	ldrb	r2, [r7, #15]
 81028f2:	6879      	ldr	r1, [r7, #4]
 81028f4:	4613      	mov	r3, r2
 81028f6:	00db      	lsls	r3, r3, #3
 81028f8:	4413      	add	r3, r2
 81028fa:	009b      	lsls	r3, r3, #2
 81028fc:	440b      	add	r3, r1
 81028fe:	3324      	adds	r3, #36	@ 0x24
 8102900:	2200      	movs	r2, #0
 8102902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102904:	7bfb      	ldrb	r3, [r7, #15]
 8102906:	3301      	adds	r3, #1
 8102908:	73fb      	strb	r3, [r7, #15]
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	791b      	ldrb	r3, [r3, #4]
 810290e:	7bfa      	ldrb	r2, [r7, #15]
 8102910:	429a      	cmp	r2, r3
 8102912:	d3af      	bcc.n	8102874 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102914:	2300      	movs	r3, #0
 8102916:	73fb      	strb	r3, [r7, #15]
 8102918:	e044      	b.n	81029a4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 810291a:	7bfa      	ldrb	r2, [r7, #15]
 810291c:	6879      	ldr	r1, [r7, #4]
 810291e:	4613      	mov	r3, r2
 8102920:	00db      	lsls	r3, r3, #3
 8102922:	4413      	add	r3, r2
 8102924:	009b      	lsls	r3, r3, #2
 8102926:	440b      	add	r3, r1
 8102928:	f203 2355 	addw	r3, r3, #597	@ 0x255
 810292c:	2200      	movs	r2, #0
 810292e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8102930:	7bfa      	ldrb	r2, [r7, #15]
 8102932:	6879      	ldr	r1, [r7, #4]
 8102934:	4613      	mov	r3, r2
 8102936:	00db      	lsls	r3, r3, #3
 8102938:	4413      	add	r3, r2
 810293a:	009b      	lsls	r3, r3, #2
 810293c:	440b      	add	r3, r1
 810293e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8102942:	7bfa      	ldrb	r2, [r7, #15]
 8102944:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8102946:	7bfa      	ldrb	r2, [r7, #15]
 8102948:	6879      	ldr	r1, [r7, #4]
 810294a:	4613      	mov	r3, r2
 810294c:	00db      	lsls	r3, r3, #3
 810294e:	4413      	add	r3, r2
 8102950:	009b      	lsls	r3, r3, #2
 8102952:	440b      	add	r3, r1
 8102954:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8102958:	2200      	movs	r2, #0
 810295a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 810295c:	7bfa      	ldrb	r2, [r7, #15]
 810295e:	6879      	ldr	r1, [r7, #4]
 8102960:	4613      	mov	r3, r2
 8102962:	00db      	lsls	r3, r3, #3
 8102964:	4413      	add	r3, r2
 8102966:	009b      	lsls	r3, r3, #2
 8102968:	440b      	add	r3, r1
 810296a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 810296e:	2200      	movs	r2, #0
 8102970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8102972:	7bfa      	ldrb	r2, [r7, #15]
 8102974:	6879      	ldr	r1, [r7, #4]
 8102976:	4613      	mov	r3, r2
 8102978:	00db      	lsls	r3, r3, #3
 810297a:	4413      	add	r3, r2
 810297c:	009b      	lsls	r3, r3, #2
 810297e:	440b      	add	r3, r1
 8102980:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8102984:	2200      	movs	r2, #0
 8102986:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8102988:	7bfa      	ldrb	r2, [r7, #15]
 810298a:	6879      	ldr	r1, [r7, #4]
 810298c:	4613      	mov	r3, r2
 810298e:	00db      	lsls	r3, r3, #3
 8102990:	4413      	add	r3, r2
 8102992:	009b      	lsls	r3, r3, #2
 8102994:	440b      	add	r3, r1
 8102996:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 810299a:	2200      	movs	r2, #0
 810299c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810299e:	7bfb      	ldrb	r3, [r7, #15]
 81029a0:	3301      	adds	r3, #1
 81029a2:	73fb      	strb	r3, [r7, #15]
 81029a4:	687b      	ldr	r3, [r7, #4]
 81029a6:	791b      	ldrb	r3, [r3, #4]
 81029a8:	7bfa      	ldrb	r2, [r7, #15]
 81029aa:	429a      	cmp	r2, r3
 81029ac:	d3b5      	bcc.n	810291a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	6818      	ldr	r0, [r3, #0]
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	7c1a      	ldrb	r2, [r3, #16]
 81029b6:	f88d 2000 	strb.w	r2, [sp]
 81029ba:	3304      	adds	r3, #4
 81029bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 81029be:	f004 fb9f 	bl	8107100 <USB_DevInit>
 81029c2:	4603      	mov	r3, r0
 81029c4:	2b00      	cmp	r3, #0
 81029c6:	d005      	beq.n	81029d4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	2202      	movs	r2, #2
 81029cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81029d0:	2301      	movs	r3, #1
 81029d2:	e013      	b.n	81029fc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	2200      	movs	r2, #0
 81029d8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	2201      	movs	r2, #1
 81029de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	7b1b      	ldrb	r3, [r3, #12]
 81029e6:	2b01      	cmp	r3, #1
 81029e8:	d102      	bne.n	81029f0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 81029ea:	6878      	ldr	r0, [r7, #4]
 81029ec:	f000 f80a 	bl	8102a04 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	4618      	mov	r0, r3
 81029f6:	f004 fd5a 	bl	81074ae <USB_DevDisconnect>

  return HAL_OK;
 81029fa:	2300      	movs	r3, #0
}
 81029fc:	4618      	mov	r0, r3
 81029fe:	3710      	adds	r7, #16
 8102a00:	46bd      	mov	sp, r7
 8102a02:	bd80      	pop	{r7, pc}

08102a04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8102a04:	b480      	push	{r7}
 8102a06:	b085      	sub	sp, #20
 8102a08:	af00      	add	r7, sp, #0
 8102a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	681b      	ldr	r3, [r3, #0]
 8102a10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	2201      	movs	r2, #1
 8102a16:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	2200      	movs	r2, #0
 8102a1e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8102a22:	68fb      	ldr	r3, [r7, #12]
 8102a24:	699b      	ldr	r3, [r3, #24]
 8102a26:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8102a2a:	68fb      	ldr	r3, [r7, #12]
 8102a2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8102a2e:	68fb      	ldr	r3, [r7, #12]
 8102a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8102a36:	f043 0303 	orr.w	r3, r3, #3
 8102a3a:	68fa      	ldr	r2, [r7, #12]
 8102a3c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8102a3e:	2300      	movs	r3, #0
}
 8102a40:	4618      	mov	r0, r3
 8102a42:	3714      	adds	r7, #20
 8102a44:	46bd      	mov	sp, r7
 8102a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a4a:	4770      	bx	lr

08102a4c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102a4c:	b580      	push	{r7, lr}
 8102a4e:	b084      	sub	sp, #16
 8102a50:	af00      	add	r7, sp, #0
 8102a52:	60f8      	str	r0, [r7, #12]
 8102a54:	460b      	mov	r3, r1
 8102a56:	607a      	str	r2, [r7, #4]
 8102a58:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102a5a:	4b37      	ldr	r3, [pc, #220]	@ (8102b38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	f023 0201 	bic.w	r2, r3, #1
 8102a62:	4935      	ldr	r1, [pc, #212]	@ (8102b38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a64:	68fb      	ldr	r3, [r7, #12]
 8102a66:	4313      	orrs	r3, r2
 8102a68:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	2b00      	cmp	r3, #0
 8102a6e:	d123      	bne.n	8102ab8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102a70:	f7ff fce8 	bl	8102444 <HAL_GetCurrentCPUID>
 8102a74:	4603      	mov	r3, r0
 8102a76:	2b03      	cmp	r3, #3
 8102a78:	d158      	bne.n	8102b2c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8102b38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a7c:	691b      	ldr	r3, [r3, #16]
 8102a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8102b38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a80:	f023 0301 	bic.w	r3, r3, #1
 8102a84:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102a86:	4b2d      	ldr	r3, [pc, #180]	@ (8102b3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a88:	691b      	ldr	r3, [r3, #16]
 8102a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8102b3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a8c:	f043 0304 	orr.w	r3, r3, #4
 8102a90:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102a92:	f3bf 8f4f 	dsb	sy
}
 8102a96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102a98:	f3bf 8f6f 	isb	sy
}
 8102a9c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102a9e:	7afb      	ldrb	r3, [r7, #11]
 8102aa0:	2b01      	cmp	r3, #1
 8102aa2:	d101      	bne.n	8102aa8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102aa4:	bf30      	wfi
 8102aa6:	e000      	b.n	8102aaa <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102aa8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102aaa:	4b24      	ldr	r3, [pc, #144]	@ (8102b3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102aac:	691b      	ldr	r3, [r3, #16]
 8102aae:	4a23      	ldr	r2, [pc, #140]	@ (8102b3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ab0:	f023 0304 	bic.w	r3, r3, #4
 8102ab4:	6113      	str	r3, [r2, #16]
 8102ab6:	e03c      	b.n	8102b32 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	2b01      	cmp	r3, #1
 8102abc:	d123      	bne.n	8102b06 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102abe:	f7ff fcc1 	bl	8102444 <HAL_GetCurrentCPUID>
 8102ac2:	4603      	mov	r3, r0
 8102ac4:	2b01      	cmp	r3, #1
 8102ac6:	d133      	bne.n	8102b30 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8102b38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102aca:	695b      	ldr	r3, [r3, #20]
 8102acc:	4a1a      	ldr	r2, [pc, #104]	@ (8102b38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ace:	f023 0302 	bic.w	r3, r3, #2
 8102ad2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102ad4:	4b19      	ldr	r3, [pc, #100]	@ (8102b3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ad6:	691b      	ldr	r3, [r3, #16]
 8102ad8:	4a18      	ldr	r2, [pc, #96]	@ (8102b3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ada:	f043 0304 	orr.w	r3, r3, #4
 8102ade:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102ae0:	f3bf 8f4f 	dsb	sy
}
 8102ae4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102ae6:	f3bf 8f6f 	isb	sy
}
 8102aea:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102aec:	7afb      	ldrb	r3, [r7, #11]
 8102aee:	2b01      	cmp	r3, #1
 8102af0:	d101      	bne.n	8102af6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102af2:	bf30      	wfi
 8102af4:	e000      	b.n	8102af8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102af6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102af8:	4b10      	ldr	r3, [pc, #64]	@ (8102b3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102afa:	691b      	ldr	r3, [r3, #16]
 8102afc:	4a0f      	ldr	r2, [pc, #60]	@ (8102b3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102afe:	f023 0304 	bic.w	r3, r3, #4
 8102b02:	6113      	str	r3, [r2, #16]
 8102b04:	e015      	b.n	8102b32 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102b06:	f7ff fc9d 	bl	8102444 <HAL_GetCurrentCPUID>
 8102b0a:	4603      	mov	r3, r0
 8102b0c:	2b03      	cmp	r3, #3
 8102b0e:	d106      	bne.n	8102b1e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102b10:	4b09      	ldr	r3, [pc, #36]	@ (8102b38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b12:	691b      	ldr	r3, [r3, #16]
 8102b14:	4a08      	ldr	r2, [pc, #32]	@ (8102b38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b16:	f023 0304 	bic.w	r3, r3, #4
 8102b1a:	6113      	str	r3, [r2, #16]
 8102b1c:	e009      	b.n	8102b32 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102b1e:	4b06      	ldr	r3, [pc, #24]	@ (8102b38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b20:	695b      	ldr	r3, [r3, #20]
 8102b22:	4a05      	ldr	r2, [pc, #20]	@ (8102b38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b24:	f023 0304 	bic.w	r3, r3, #4
 8102b28:	6153      	str	r3, [r2, #20]
 8102b2a:	e002      	b.n	8102b32 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102b2c:	bf00      	nop
 8102b2e:	e000      	b.n	8102b32 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102b30:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102b32:	3710      	adds	r7, #16
 8102b34:	46bd      	mov	sp, r7
 8102b36:	bd80      	pop	{r7, pc}
 8102b38:	58024800 	.word	0x58024800
 8102b3c:	e000ed00 	.word	0xe000ed00

08102b40 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102b40:	b580      	push	{r7, lr}
 8102b42:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102b44:	f7ff fc7e 	bl	8102444 <HAL_GetCurrentCPUID>
 8102b48:	4603      	mov	r3, r0
 8102b4a:	2b03      	cmp	r3, #3
 8102b4c:	d101      	bne.n	8102b52 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102b4e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102b50:	e001      	b.n	8102b56 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102b52:	bf40      	sev
    __WFE ();
 8102b54:	bf20      	wfe
}
 8102b56:	bf00      	nop
 8102b58:	bd80      	pop	{r7, pc}
	...

08102b5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8102b5c:	b480      	push	{r7}
 8102b5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8102b60:	4b05      	ldr	r3, [pc, #20]	@ (8102b78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8102b62:	68db      	ldr	r3, [r3, #12]
 8102b64:	4a04      	ldr	r2, [pc, #16]	@ (8102b78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8102b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8102b6a:	60d3      	str	r3, [r2, #12]
}
 8102b6c:	bf00      	nop
 8102b6e:	46bd      	mov	sp, r7
 8102b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b74:	4770      	bx	lr
 8102b76:	bf00      	nop
 8102b78:	58024800 	.word	0x58024800

08102b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102b7c:	b480      	push	{r7}
 8102b7e:	b089      	sub	sp, #36	@ 0x24
 8102b80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102b82:	4bb3      	ldr	r3, [pc, #716]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b84:	691b      	ldr	r3, [r3, #16]
 8102b86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8102b8a:	2b18      	cmp	r3, #24
 8102b8c:	f200 8155 	bhi.w	8102e3a <HAL_RCC_GetSysClockFreq+0x2be>
 8102b90:	a201      	add	r2, pc, #4	@ (adr r2, 8102b98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102b96:	bf00      	nop
 8102b98:	08102bfd 	.word	0x08102bfd
 8102b9c:	08102e3b 	.word	0x08102e3b
 8102ba0:	08102e3b 	.word	0x08102e3b
 8102ba4:	08102e3b 	.word	0x08102e3b
 8102ba8:	08102e3b 	.word	0x08102e3b
 8102bac:	08102e3b 	.word	0x08102e3b
 8102bb0:	08102e3b 	.word	0x08102e3b
 8102bb4:	08102e3b 	.word	0x08102e3b
 8102bb8:	08102c23 	.word	0x08102c23
 8102bbc:	08102e3b 	.word	0x08102e3b
 8102bc0:	08102e3b 	.word	0x08102e3b
 8102bc4:	08102e3b 	.word	0x08102e3b
 8102bc8:	08102e3b 	.word	0x08102e3b
 8102bcc:	08102e3b 	.word	0x08102e3b
 8102bd0:	08102e3b 	.word	0x08102e3b
 8102bd4:	08102e3b 	.word	0x08102e3b
 8102bd8:	08102c29 	.word	0x08102c29
 8102bdc:	08102e3b 	.word	0x08102e3b
 8102be0:	08102e3b 	.word	0x08102e3b
 8102be4:	08102e3b 	.word	0x08102e3b
 8102be8:	08102e3b 	.word	0x08102e3b
 8102bec:	08102e3b 	.word	0x08102e3b
 8102bf0:	08102e3b 	.word	0x08102e3b
 8102bf4:	08102e3b 	.word	0x08102e3b
 8102bf8:	08102c2f 	.word	0x08102c2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102bfc:	4b94      	ldr	r3, [pc, #592]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	f003 0320 	and.w	r3, r3, #32
 8102c04:	2b00      	cmp	r3, #0
 8102c06:	d009      	beq.n	8102c1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102c08:	4b91      	ldr	r3, [pc, #580]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c0a:	681b      	ldr	r3, [r3, #0]
 8102c0c:	08db      	lsrs	r3, r3, #3
 8102c0e:	f003 0303 	and.w	r3, r3, #3
 8102c12:	4a90      	ldr	r2, [pc, #576]	@ (8102e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c14:	fa22 f303 	lsr.w	r3, r2, r3
 8102c18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102c1a:	e111      	b.n	8102e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102c1c:	4b8d      	ldr	r3, [pc, #564]	@ (8102e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c1e:	61bb      	str	r3, [r7, #24]
      break;
 8102c20:	e10e      	b.n	8102e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102c22:	4b8d      	ldr	r3, [pc, #564]	@ (8102e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102c24:	61bb      	str	r3, [r7, #24]
      break;
 8102c26:	e10b      	b.n	8102e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102c28:	4b8c      	ldr	r3, [pc, #560]	@ (8102e5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102c2a:	61bb      	str	r3, [r7, #24]
      break;
 8102c2c:	e108      	b.n	8102e40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102c2e:	4b88      	ldr	r3, [pc, #544]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102c32:	f003 0303 	and.w	r3, r3, #3
 8102c36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102c38:	4b85      	ldr	r3, [pc, #532]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102c3c:	091b      	lsrs	r3, r3, #4
 8102c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102c42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102c44:	4b82      	ldr	r3, [pc, #520]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c48:	f003 0301 	and.w	r3, r3, #1
 8102c4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102c4e:	4b80      	ldr	r3, [pc, #512]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102c52:	08db      	lsrs	r3, r3, #3
 8102c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102c58:	68fa      	ldr	r2, [r7, #12]
 8102c5a:	fb02 f303 	mul.w	r3, r2, r3
 8102c5e:	ee07 3a90 	vmov	s15, r3
 8102c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102c6a:	693b      	ldr	r3, [r7, #16]
 8102c6c:	2b00      	cmp	r3, #0
 8102c6e:	f000 80e1 	beq.w	8102e34 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8102c72:	697b      	ldr	r3, [r7, #20]
 8102c74:	2b02      	cmp	r3, #2
 8102c76:	f000 8083 	beq.w	8102d80 <HAL_RCC_GetSysClockFreq+0x204>
 8102c7a:	697b      	ldr	r3, [r7, #20]
 8102c7c:	2b02      	cmp	r3, #2
 8102c7e:	f200 80a1 	bhi.w	8102dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8102c82:	697b      	ldr	r3, [r7, #20]
 8102c84:	2b00      	cmp	r3, #0
 8102c86:	d003      	beq.n	8102c90 <HAL_RCC_GetSysClockFreq+0x114>
 8102c88:	697b      	ldr	r3, [r7, #20]
 8102c8a:	2b01      	cmp	r3, #1
 8102c8c:	d056      	beq.n	8102d3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8102c8e:	e099      	b.n	8102dc4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102c90:	4b6f      	ldr	r3, [pc, #444]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c92:	681b      	ldr	r3, [r3, #0]
 8102c94:	f003 0320 	and.w	r3, r3, #32
 8102c98:	2b00      	cmp	r3, #0
 8102c9a:	d02d      	beq.n	8102cf8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	08db      	lsrs	r3, r3, #3
 8102ca2:	f003 0303 	and.w	r3, r3, #3
 8102ca6:	4a6b      	ldr	r2, [pc, #428]	@ (8102e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8102cac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102cae:	687b      	ldr	r3, [r7, #4]
 8102cb0:	ee07 3a90 	vmov	s15, r3
 8102cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cb8:	693b      	ldr	r3, [r7, #16]
 8102cba:	ee07 3a90 	vmov	s15, r3
 8102cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102cc6:	4b62      	ldr	r3, [pc, #392]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102cce:	ee07 3a90 	vmov	s15, r3
 8102cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8102cda:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8102e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8102cf6:	e087      	b.n	8102e08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102cf8:	693b      	ldr	r3, [r7, #16]
 8102cfa:	ee07 3a90 	vmov	s15, r3
 8102cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8102e64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d0a:	4b51      	ldr	r3, [pc, #324]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d12:	ee07 3a90 	vmov	s15, r3
 8102d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8102e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102d3a:	e065      	b.n	8102e08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102d3c:	693b      	ldr	r3, [r7, #16]
 8102d3e:	ee07 3a90 	vmov	s15, r3
 8102d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8102e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d4e:	4b40      	ldr	r3, [pc, #256]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d56:	ee07 3a90 	vmov	s15, r3
 8102d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8102e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102d7e:	e043      	b.n	8102e08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102d80:	693b      	ldr	r3, [r7, #16]
 8102d82:	ee07 3a90 	vmov	s15, r3
 8102d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102e6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8102d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d92:	4b2f      	ldr	r3, [pc, #188]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d9a:	ee07 3a90 	vmov	s15, r3
 8102d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8102da6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8102e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102dc2:	e021      	b.n	8102e08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102dc4:	693b      	ldr	r3, [r7, #16]
 8102dc6:	ee07 3a90 	vmov	s15, r3
 8102dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102dce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8102e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dde:	ee07 3a90 	vmov	s15, r3
 8102de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8102dea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8102e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102e06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102e08:	4b11      	ldr	r3, [pc, #68]	@ (8102e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102e0c:	0a5b      	lsrs	r3, r3, #9
 8102e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102e12:	3301      	adds	r3, #1
 8102e14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8102e16:	683b      	ldr	r3, [r7, #0]
 8102e18:	ee07 3a90 	vmov	s15, r3
 8102e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e2c:	ee17 3a90 	vmov	r3, s15
 8102e30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102e32:	e005      	b.n	8102e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102e34:	2300      	movs	r3, #0
 8102e36:	61bb      	str	r3, [r7, #24]
      break;
 8102e38:	e002      	b.n	8102e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8102e3a:	4b07      	ldr	r3, [pc, #28]	@ (8102e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102e3c:	61bb      	str	r3, [r7, #24]
      break;
 8102e3e:	bf00      	nop
  }

  return sysclockfreq;
 8102e40:	69bb      	ldr	r3, [r7, #24]
}
 8102e42:	4618      	mov	r0, r3
 8102e44:	3724      	adds	r7, #36	@ 0x24
 8102e46:	46bd      	mov	sp, r7
 8102e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e4c:	4770      	bx	lr
 8102e4e:	bf00      	nop
 8102e50:	58024400 	.word	0x58024400
 8102e54:	03d09000 	.word	0x03d09000
 8102e58:	003d0900 	.word	0x003d0900
 8102e5c:	017d7840 	.word	0x017d7840
 8102e60:	46000000 	.word	0x46000000
 8102e64:	4c742400 	.word	0x4c742400
 8102e68:	4a742400 	.word	0x4a742400
 8102e6c:	4bbebc20 	.word	0x4bbebc20

08102e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102e70:	b580      	push	{r7, lr}
 8102e72:	b082      	sub	sp, #8
 8102e74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102e76:	f7ff fe81 	bl	8102b7c <HAL_RCC_GetSysClockFreq>
 8102e7a:	4602      	mov	r2, r0
 8102e7c:	4b11      	ldr	r3, [pc, #68]	@ (8102ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8102e7e:	699b      	ldr	r3, [r3, #24]
 8102e80:	0a1b      	lsrs	r3, r3, #8
 8102e82:	f003 030f 	and.w	r3, r3, #15
 8102e86:	4910      	ldr	r1, [pc, #64]	@ (8102ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8102e88:	5ccb      	ldrb	r3, [r1, r3]
 8102e8a:	f003 031f 	and.w	r3, r3, #31
 8102e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8102e92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102e94:	4b0b      	ldr	r3, [pc, #44]	@ (8102ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8102e96:	699b      	ldr	r3, [r3, #24]
 8102e98:	f003 030f 	and.w	r3, r3, #15
 8102e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8102ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8102e9e:	5cd3      	ldrb	r3, [r2, r3]
 8102ea0:	f003 031f 	and.w	r3, r3, #31
 8102ea4:	687a      	ldr	r2, [r7, #4]
 8102ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8102eaa:	4a08      	ldr	r2, [pc, #32]	@ (8102ecc <HAL_RCC_GetHCLKFreq+0x5c>)
 8102eac:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102eae:	4b07      	ldr	r3, [pc, #28]	@ (8102ecc <HAL_RCC_GetHCLKFreq+0x5c>)
 8102eb0:	681b      	ldr	r3, [r3, #0]
 8102eb2:	4a07      	ldr	r2, [pc, #28]	@ (8102ed0 <HAL_RCC_GetHCLKFreq+0x60>)
 8102eb4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102eb6:	4b05      	ldr	r3, [pc, #20]	@ (8102ecc <HAL_RCC_GetHCLKFreq+0x5c>)
 8102eb8:	681b      	ldr	r3, [r3, #0]
}
 8102eba:	4618      	mov	r0, r3
 8102ebc:	3708      	adds	r7, #8
 8102ebe:	46bd      	mov	sp, r7
 8102ec0:	bd80      	pop	{r7, pc}
 8102ec2:	bf00      	nop
 8102ec4:	58024400 	.word	0x58024400
 8102ec8:	08108940 	.word	0x08108940
 8102ecc:	10000004 	.word	0x10000004
 8102ed0:	10000000 	.word	0x10000000

08102ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102ed4:	b580      	push	{r7, lr}
 8102ed6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102ed8:	f7ff ffca 	bl	8102e70 <HAL_RCC_GetHCLKFreq>
 8102edc:	4602      	mov	r2, r0
 8102ede:	4b06      	ldr	r3, [pc, #24]	@ (8102ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102ee0:	69db      	ldr	r3, [r3, #28]
 8102ee2:	091b      	lsrs	r3, r3, #4
 8102ee4:	f003 0307 	and.w	r3, r3, #7
 8102ee8:	4904      	ldr	r1, [pc, #16]	@ (8102efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8102eea:	5ccb      	ldrb	r3, [r1, r3]
 8102eec:	f003 031f 	and.w	r3, r3, #31
 8102ef0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102ef4:	4618      	mov	r0, r3
 8102ef6:	bd80      	pop	{r7, pc}
 8102ef8:	58024400 	.word	0x58024400
 8102efc:	08108940 	.word	0x08108940

08102f00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8102f00:	b480      	push	{r7}
 8102f02:	b083      	sub	sp, #12
 8102f04:	af00      	add	r7, sp, #0
 8102f06:	6078      	str	r0, [r7, #4]
 8102f08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	223f      	movs	r2, #63	@ 0x3f
 8102f0e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8102f10:	4b1a      	ldr	r3, [pc, #104]	@ (8102f7c <HAL_RCC_GetClockConfig+0x7c>)
 8102f12:	691b      	ldr	r3, [r3, #16]
 8102f14:	f003 0207 	and.w	r2, r3, #7
 8102f18:	687b      	ldr	r3, [r7, #4]
 8102f1a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8102f1c:	4b17      	ldr	r3, [pc, #92]	@ (8102f7c <HAL_RCC_GetClockConfig+0x7c>)
 8102f1e:	699b      	ldr	r3, [r3, #24]
 8102f20:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8102f28:	4b14      	ldr	r3, [pc, #80]	@ (8102f7c <HAL_RCC_GetClockConfig+0x7c>)
 8102f2a:	699b      	ldr	r3, [r3, #24]
 8102f2c:	f003 020f 	and.w	r2, r3, #15
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8102f34:	4b11      	ldr	r3, [pc, #68]	@ (8102f7c <HAL_RCC_GetClockConfig+0x7c>)
 8102f36:	699b      	ldr	r3, [r3, #24]
 8102f38:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8102f40:	4b0e      	ldr	r3, [pc, #56]	@ (8102f7c <HAL_RCC_GetClockConfig+0x7c>)
 8102f42:	69db      	ldr	r3, [r3, #28]
 8102f44:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8102f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8102f7c <HAL_RCC_GetClockConfig+0x7c>)
 8102f4e:	69db      	ldr	r3, [r3, #28]
 8102f50:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8102f58:	4b08      	ldr	r3, [pc, #32]	@ (8102f7c <HAL_RCC_GetClockConfig+0x7c>)
 8102f5a:	6a1b      	ldr	r3, [r3, #32]
 8102f5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8102f64:	4b06      	ldr	r3, [pc, #24]	@ (8102f80 <HAL_RCC_GetClockConfig+0x80>)
 8102f66:	681b      	ldr	r3, [r3, #0]
 8102f68:	f003 020f 	and.w	r2, r3, #15
 8102f6c:	683b      	ldr	r3, [r7, #0]
 8102f6e:	601a      	str	r2, [r3, #0]
}
 8102f70:	bf00      	nop
 8102f72:	370c      	adds	r7, #12
 8102f74:	46bd      	mov	sp, r7
 8102f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f7a:	4770      	bx	lr
 8102f7c:	58024400 	.word	0x58024400
 8102f80:	52002000 	.word	0x52002000

08102f84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102f88:	b0cc      	sub	sp, #304	@ 0x130
 8102f8a:	af00      	add	r7, sp, #0
 8102f8c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102f90:	2300      	movs	r3, #0
 8102f92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102f96:	2300      	movs	r3, #0
 8102f98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fa4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102fa8:	2500      	movs	r5, #0
 8102faa:	ea54 0305 	orrs.w	r3, r4, r5
 8102fae:	d049      	beq.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102fb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102fba:	d02f      	beq.n	810301c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102fbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102fc0:	d828      	bhi.n	8103014 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102fc6:	d01a      	beq.n	8102ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102fcc:	d822      	bhi.n	8103014 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102fce:	2b00      	cmp	r3, #0
 8102fd0:	d003      	beq.n	8102fda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8102fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102fd6:	d007      	beq.n	8102fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102fd8:	e01c      	b.n	8103014 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fda:	4bb8      	ldr	r3, [pc, #736]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fde:	4ab7      	ldr	r2, [pc, #732]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102fe6:	e01a      	b.n	810301e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fec:	3308      	adds	r3, #8
 8102fee:	2102      	movs	r1, #2
 8102ff0:	4618      	mov	r0, r3
 8102ff2:	f002 fba1 	bl	8105738 <RCCEx_PLL2_Config>
 8102ff6:	4603      	mov	r3, r0
 8102ff8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102ffc:	e00f      	b.n	810301e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102ffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103002:	3328      	adds	r3, #40	@ 0x28
 8103004:	2102      	movs	r1, #2
 8103006:	4618      	mov	r0, r3
 8103008:	f002 fc48 	bl	810589c <RCCEx_PLL3_Config>
 810300c:	4603      	mov	r3, r0
 810300e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103012:	e004      	b.n	810301e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103014:	2301      	movs	r3, #1
 8103016:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810301a:	e000      	b.n	810301e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810301c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810301e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103022:	2b00      	cmp	r3, #0
 8103024:	d10a      	bne.n	810303c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103026:	4ba5      	ldr	r3, [pc, #660]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810302a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810302e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103034:	4aa1      	ldr	r2, [pc, #644]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103036:	430b      	orrs	r3, r1
 8103038:	6513      	str	r3, [r2, #80]	@ 0x50
 810303a:	e003      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810303c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103040:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103044:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103048:	e9d3 2300 	ldrd	r2, r3, [r3]
 810304c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8103050:	f04f 0900 	mov.w	r9, #0
 8103054:	ea58 0309 	orrs.w	r3, r8, r9
 8103058:	d047      	beq.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810305a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810305e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103060:	2b04      	cmp	r3, #4
 8103062:	d82a      	bhi.n	81030ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103064:	a201      	add	r2, pc, #4	@ (adr r2, 810306c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8103066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810306a:	bf00      	nop
 810306c:	08103081 	.word	0x08103081
 8103070:	0810308f 	.word	0x0810308f
 8103074:	081030a5 	.word	0x081030a5
 8103078:	081030c3 	.word	0x081030c3
 810307c:	081030c3 	.word	0x081030c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103080:	4b8e      	ldr	r3, [pc, #568]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103084:	4a8d      	ldr	r2, [pc, #564]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810308a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810308c:	e01a      	b.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810308e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103092:	3308      	adds	r3, #8
 8103094:	2100      	movs	r1, #0
 8103096:	4618      	mov	r0, r3
 8103098:	f002 fb4e 	bl	8105738 <RCCEx_PLL2_Config>
 810309c:	4603      	mov	r3, r0
 810309e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81030a2:	e00f      	b.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81030a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030a8:	3328      	adds	r3, #40	@ 0x28
 81030aa:	2100      	movs	r1, #0
 81030ac:	4618      	mov	r0, r3
 81030ae:	f002 fbf5 	bl	810589c <RCCEx_PLL3_Config>
 81030b2:	4603      	mov	r3, r0
 81030b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81030b8:	e004      	b.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81030ba:	2301      	movs	r3, #1
 81030bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81030c0:	e000      	b.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81030c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81030c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81030c8:	2b00      	cmp	r3, #0
 81030ca:	d10a      	bne.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81030cc:	4b7b      	ldr	r3, [pc, #492]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81030ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81030d0:	f023 0107 	bic.w	r1, r3, #7
 81030d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81030da:	4a78      	ldr	r2, [pc, #480]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81030dc:	430b      	orrs	r3, r1
 81030de:	6513      	str	r3, [r2, #80]	@ 0x50
 81030e0:	e003      	b.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81030e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81030ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81030f6:	f04f 0b00 	mov.w	fp, #0
 81030fa:	ea5a 030b 	orrs.w	r3, sl, fp
 81030fe:	d04c      	beq.n	810319a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810310a:	d030      	beq.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810310c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103110:	d829      	bhi.n	8103166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103112:	2bc0      	cmp	r3, #192	@ 0xc0
 8103114:	d02d      	beq.n	8103172 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8103116:	2bc0      	cmp	r3, #192	@ 0xc0
 8103118:	d825      	bhi.n	8103166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810311a:	2b80      	cmp	r3, #128	@ 0x80
 810311c:	d018      	beq.n	8103150 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810311e:	2b80      	cmp	r3, #128	@ 0x80
 8103120:	d821      	bhi.n	8103166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103122:	2b00      	cmp	r3, #0
 8103124:	d002      	beq.n	810312c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8103126:	2b40      	cmp	r3, #64	@ 0x40
 8103128:	d007      	beq.n	810313a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810312a:	e01c      	b.n	8103166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810312c:	4b63      	ldr	r3, [pc, #396]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103130:	4a62      	ldr	r2, [pc, #392]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103138:	e01c      	b.n	8103174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810313a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810313e:	3308      	adds	r3, #8
 8103140:	2100      	movs	r1, #0
 8103142:	4618      	mov	r0, r3
 8103144:	f002 faf8 	bl	8105738 <RCCEx_PLL2_Config>
 8103148:	4603      	mov	r3, r0
 810314a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810314e:	e011      	b.n	8103174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103154:	3328      	adds	r3, #40	@ 0x28
 8103156:	2100      	movs	r1, #0
 8103158:	4618      	mov	r0, r3
 810315a:	f002 fb9f 	bl	810589c <RCCEx_PLL3_Config>
 810315e:	4603      	mov	r3, r0
 8103160:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103164:	e006      	b.n	8103174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103166:	2301      	movs	r3, #1
 8103168:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810316c:	e002      	b.n	8103174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810316e:	bf00      	nop
 8103170:	e000      	b.n	8103174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103174:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103178:	2b00      	cmp	r3, #0
 810317a:	d10a      	bne.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810317c:	4b4f      	ldr	r3, [pc, #316]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810317e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103180:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8103184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810318a:	4a4c      	ldr	r2, [pc, #304]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810318c:	430b      	orrs	r3, r1
 810318e:	6513      	str	r3, [r2, #80]	@ 0x50
 8103190:	e003      	b.n	810319a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103192:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103196:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810319a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81031a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 81031aa:	2300      	movs	r3, #0
 81031ac:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 81031b0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 81031b4:	460b      	mov	r3, r1
 81031b6:	4313      	orrs	r3, r2
 81031b8:	d053      	beq.n	8103262 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81031ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81031c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81031c6:	d035      	beq.n	8103234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81031c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81031cc:	d82e      	bhi.n	810322c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81031ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81031d2:	d031      	beq.n	8103238 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81031d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81031d8:	d828      	bhi.n	810322c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81031da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81031de:	d01a      	beq.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81031e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81031e4:	d822      	bhi.n	810322c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81031e6:	2b00      	cmp	r3, #0
 81031e8:	d003      	beq.n	81031f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81031ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81031ee:	d007      	beq.n	8103200 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81031f0:	e01c      	b.n	810322c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031f2:	4b32      	ldr	r3, [pc, #200]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81031f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031f6:	4a31      	ldr	r2, [pc, #196]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81031f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81031fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81031fe:	e01c      	b.n	810323a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103204:	3308      	adds	r3, #8
 8103206:	2100      	movs	r1, #0
 8103208:	4618      	mov	r0, r3
 810320a:	f002 fa95 	bl	8105738 <RCCEx_PLL2_Config>
 810320e:	4603      	mov	r3, r0
 8103210:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103214:	e011      	b.n	810323a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810321a:	3328      	adds	r3, #40	@ 0x28
 810321c:	2100      	movs	r1, #0
 810321e:	4618      	mov	r0, r3
 8103220:	f002 fb3c 	bl	810589c <RCCEx_PLL3_Config>
 8103224:	4603      	mov	r3, r0
 8103226:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810322a:	e006      	b.n	810323a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810322c:	2301      	movs	r3, #1
 810322e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103232:	e002      	b.n	810323a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103234:	bf00      	nop
 8103236:	e000      	b.n	810323a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103238:	bf00      	nop
    }

    if (ret == HAL_OK)
 810323a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810323e:	2b00      	cmp	r3, #0
 8103240:	d10b      	bne.n	810325a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103242:	4b1e      	ldr	r3, [pc, #120]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103246:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810324a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810324e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103252:	4a1a      	ldr	r2, [pc, #104]	@ (81032bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103254:	430b      	orrs	r3, r1
 8103256:	6593      	str	r3, [r2, #88]	@ 0x58
 8103258:	e003      	b.n	8103262 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810325a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810325e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103262:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103266:	e9d3 2300 	ldrd	r2, r3, [r3]
 810326a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810326e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8103272:	2300      	movs	r3, #0
 8103274:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8103278:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810327c:	460b      	mov	r3, r1
 810327e:	4313      	orrs	r3, r2
 8103280:	d056      	beq.n	8103330 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810328a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810328e:	d038      	beq.n	8103302 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103290:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103294:	d831      	bhi.n	81032fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103296:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810329a:	d034      	beq.n	8103306 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810329c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81032a0:	d82b      	bhi.n	81032fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 81032a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81032a6:	d01d      	beq.n	81032e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81032a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81032ac:	d825      	bhi.n	81032fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 81032ae:	2b00      	cmp	r3, #0
 81032b0:	d006      	beq.n	81032c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81032b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81032b6:	d00a      	beq.n	81032ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81032b8:	e01f      	b.n	81032fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 81032ba:	bf00      	nop
 81032bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032c0:	4ba2      	ldr	r3, [pc, #648]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81032c4:	4aa1      	ldr	r2, [pc, #644]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81032c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81032ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81032cc:	e01c      	b.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81032ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032d2:	3308      	adds	r3, #8
 81032d4:	2100      	movs	r1, #0
 81032d6:	4618      	mov	r0, r3
 81032d8:	f002 fa2e 	bl	8105738 <RCCEx_PLL2_Config>
 81032dc:	4603      	mov	r3, r0
 81032de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81032e2:	e011      	b.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81032e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032e8:	3328      	adds	r3, #40	@ 0x28
 81032ea:	2100      	movs	r1, #0
 81032ec:	4618      	mov	r0, r3
 81032ee:	f002 fad5 	bl	810589c <RCCEx_PLL3_Config>
 81032f2:	4603      	mov	r3, r0
 81032f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81032f8:	e006      	b.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81032fa:	2301      	movs	r3, #1
 81032fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103300:	e002      	b.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103302:	bf00      	nop
 8103304:	e000      	b.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103308:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810330c:	2b00      	cmp	r3, #0
 810330e:	d10b      	bne.n	8103328 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103310:	4b8e      	ldr	r3, [pc, #568]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103314:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8103318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810331c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103320:	4a8a      	ldr	r2, [pc, #552]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103322:	430b      	orrs	r3, r1
 8103324:	6593      	str	r3, [r2, #88]	@ 0x58
 8103326:	e003      	b.n	8103330 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103328:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810332c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103338:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810333c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8103340:	2300      	movs	r3, #0
 8103342:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8103346:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810334a:	460b      	mov	r3, r1
 810334c:	4313      	orrs	r3, r2
 810334e:	d03a      	beq.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103350:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103356:	2b30      	cmp	r3, #48	@ 0x30
 8103358:	d01f      	beq.n	810339a <HAL_RCCEx_PeriphCLKConfig+0x416>
 810335a:	2b30      	cmp	r3, #48	@ 0x30
 810335c:	d819      	bhi.n	8103392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810335e:	2b20      	cmp	r3, #32
 8103360:	d00c      	beq.n	810337c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103362:	2b20      	cmp	r3, #32
 8103364:	d815      	bhi.n	8103392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103366:	2b00      	cmp	r3, #0
 8103368:	d019      	beq.n	810339e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810336a:	2b10      	cmp	r3, #16
 810336c:	d111      	bne.n	8103392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810336e:	4b77      	ldr	r3, [pc, #476]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103372:	4a76      	ldr	r2, [pc, #472]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810337a:	e011      	b.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810337c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103380:	3308      	adds	r3, #8
 8103382:	2102      	movs	r1, #2
 8103384:	4618      	mov	r0, r3
 8103386:	f002 f9d7 	bl	8105738 <RCCEx_PLL2_Config>
 810338a:	4603      	mov	r3, r0
 810338c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103390:	e006      	b.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103392:	2301      	movs	r3, #1
 8103394:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103398:	e002      	b.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810339a:	bf00      	nop
 810339c:	e000      	b.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810339e:	bf00      	nop
    }

    if (ret == HAL_OK)
 81033a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033a4:	2b00      	cmp	r3, #0
 81033a6:	d10a      	bne.n	81033be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81033a8:	4b68      	ldr	r3, [pc, #416]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81033aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81033ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 81033b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81033b6:	4a65      	ldr	r2, [pc, #404]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81033b8:	430b      	orrs	r3, r1
 81033ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81033bc:	e003      	b.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81033c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81033d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81033d6:	2300      	movs	r3, #0
 81033d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81033dc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81033e0:	460b      	mov	r3, r1
 81033e2:	4313      	orrs	r3, r2
 81033e4:	d051      	beq.n	810348a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81033e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81033ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81033f0:	d035      	beq.n	810345e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81033f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81033f6:	d82e      	bhi.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81033f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81033fc:	d031      	beq.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81033fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103402:	d828      	bhi.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103408:	d01a      	beq.n	8103440 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810340a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810340e:	d822      	bhi.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103410:	2b00      	cmp	r3, #0
 8103412:	d003      	beq.n	810341c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103418:	d007      	beq.n	810342a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810341a:	e01c      	b.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810341c:	4b4b      	ldr	r3, [pc, #300]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103420:	4a4a      	ldr	r2, [pc, #296]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103428:	e01c      	b.n	8103464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810342a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810342e:	3308      	adds	r3, #8
 8103430:	2100      	movs	r1, #0
 8103432:	4618      	mov	r0, r3
 8103434:	f002 f980 	bl	8105738 <RCCEx_PLL2_Config>
 8103438:	4603      	mov	r3, r0
 810343a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810343e:	e011      	b.n	8103464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103444:	3328      	adds	r3, #40	@ 0x28
 8103446:	2100      	movs	r1, #0
 8103448:	4618      	mov	r0, r3
 810344a:	f002 fa27 	bl	810589c <RCCEx_PLL3_Config>
 810344e:	4603      	mov	r3, r0
 8103450:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103454:	e006      	b.n	8103464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103456:	2301      	movs	r3, #1
 8103458:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810345c:	e002      	b.n	8103464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810345e:	bf00      	nop
 8103460:	e000      	b.n	8103464 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103464:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103468:	2b00      	cmp	r3, #0
 810346a:	d10a      	bne.n	8103482 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810346c:	4b37      	ldr	r3, [pc, #220]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810346e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103470:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8103474:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810347a:	4a34      	ldr	r2, [pc, #208]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810347c:	430b      	orrs	r3, r1
 810347e:	6513      	str	r3, [r2, #80]	@ 0x50
 8103480:	e003      	b.n	810348a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103482:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103486:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810348a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103492:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8103496:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810349a:	2300      	movs	r3, #0
 810349c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81034a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81034a4:	460b      	mov	r3, r1
 81034a6:	4313      	orrs	r3, r2
 81034a8:	d056      	beq.n	8103558 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81034aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81034b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81034b4:	d033      	beq.n	810351e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81034b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81034ba:	d82c      	bhi.n	8103516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81034c0:	d02f      	beq.n	8103522 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81034c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81034c6:	d826      	bhi.n	8103516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81034cc:	d02b      	beq.n	8103526 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81034ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81034d2:	d820      	bhi.n	8103516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81034d8:	d012      	beq.n	8103500 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81034da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81034de:	d81a      	bhi.n	8103516 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034e0:	2b00      	cmp	r3, #0
 81034e2:	d022      	beq.n	810352a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81034e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81034e8:	d115      	bne.n	8103516 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81034ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034ee:	3308      	adds	r3, #8
 81034f0:	2101      	movs	r1, #1
 81034f2:	4618      	mov	r0, r3
 81034f4:	f002 f920 	bl	8105738 <RCCEx_PLL2_Config>
 81034f8:	4603      	mov	r3, r0
 81034fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81034fe:	e015      	b.n	810352c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103500:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103504:	3328      	adds	r3, #40	@ 0x28
 8103506:	2101      	movs	r1, #1
 8103508:	4618      	mov	r0, r3
 810350a:	f002 f9c7 	bl	810589c <RCCEx_PLL3_Config>
 810350e:	4603      	mov	r3, r0
 8103510:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103514:	e00a      	b.n	810352c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103516:	2301      	movs	r3, #1
 8103518:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810351c:	e006      	b.n	810352c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810351e:	bf00      	nop
 8103520:	e004      	b.n	810352c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103522:	bf00      	nop
 8103524:	e002      	b.n	810352c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103526:	bf00      	nop
 8103528:	e000      	b.n	810352c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810352a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810352c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103530:	2b00      	cmp	r3, #0
 8103532:	d10d      	bne.n	8103550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103534:	4b05      	ldr	r3, [pc, #20]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103538:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810353c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103542:	4a02      	ldr	r2, [pc, #8]	@ (810354c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103544:	430b      	orrs	r3, r1
 8103546:	6513      	str	r3, [r2, #80]	@ 0x50
 8103548:	e006      	b.n	8103558 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810354a:	bf00      	nop
 810354c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103550:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103554:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103560:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103564:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8103568:	2300      	movs	r3, #0
 810356a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810356e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8103572:	460b      	mov	r3, r1
 8103574:	4313      	orrs	r3, r2
 8103576:	d055      	beq.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103578:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810357c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103584:	d033      	beq.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810358a:	d82c      	bhi.n	81035e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810358c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103590:	d02f      	beq.n	81035f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103596:	d826      	bhi.n	81035e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103598:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810359c:	d02b      	beq.n	81035f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810359e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81035a2:	d820      	bhi.n	81035e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81035a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81035a8:	d012      	beq.n	81035d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81035aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81035ae:	d81a      	bhi.n	81035e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81035b0:	2b00      	cmp	r3, #0
 81035b2:	d022      	beq.n	81035fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 81035b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81035b8:	d115      	bne.n	81035e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81035ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035be:	3308      	adds	r3, #8
 81035c0:	2101      	movs	r1, #1
 81035c2:	4618      	mov	r0, r3
 81035c4:	f002 f8b8 	bl	8105738 <RCCEx_PLL2_Config>
 81035c8:	4603      	mov	r3, r0
 81035ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81035ce:	e015      	b.n	81035fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81035d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035d4:	3328      	adds	r3, #40	@ 0x28
 81035d6:	2101      	movs	r1, #1
 81035d8:	4618      	mov	r0, r3
 81035da:	f002 f95f 	bl	810589c <RCCEx_PLL3_Config>
 81035de:	4603      	mov	r3, r0
 81035e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81035e4:	e00a      	b.n	81035fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81035e6:	2301      	movs	r3, #1
 81035e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81035ec:	e006      	b.n	81035fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81035ee:	bf00      	nop
 81035f0:	e004      	b.n	81035fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81035f2:	bf00      	nop
 81035f4:	e002      	b.n	81035fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81035f6:	bf00      	nop
 81035f8:	e000      	b.n	81035fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81035fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81035fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103600:	2b00      	cmp	r3, #0
 8103602:	d10b      	bne.n	810361c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103604:	4bb7      	ldr	r3, [pc, #732]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103608:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810360c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103614:	4ab3      	ldr	r2, [pc, #716]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103616:	430b      	orrs	r3, r1
 8103618:	6593      	str	r3, [r2, #88]	@ 0x58
 810361a:	e003      	b.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810361c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103620:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8103624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103628:	e9d3 2300 	ldrd	r2, r3, [r3]
 810362c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8103630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8103634:	2300      	movs	r3, #0
 8103636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810363a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810363e:	460b      	mov	r3, r1
 8103640:	4313      	orrs	r3, r2
 8103642:	d02a      	beq.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8103644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810364a:	2b00      	cmp	r3, #0
 810364c:	d011      	beq.n	8103672 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810364e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103652:	d10a      	bne.n	810366a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103654:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103658:	3308      	adds	r3, #8
 810365a:	2101      	movs	r1, #1
 810365c:	4618      	mov	r0, r3
 810365e:	f002 f86b 	bl	8105738 <RCCEx_PLL2_Config>
 8103662:	4603      	mov	r3, r0
 8103664:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8103668:	e004      	b.n	8103674 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810366a:	2301      	movs	r3, #1
 810366c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103670:	e000      	b.n	8103674 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8103672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103674:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103678:	2b00      	cmp	r3, #0
 810367a:	d10a      	bne.n	8103692 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810367c:	4b99      	ldr	r3, [pc, #612]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810367e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103680:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8103684:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810368a:	4a96      	ldr	r2, [pc, #600]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810368c:	430b      	orrs	r3, r1
 810368e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103690:	e003      	b.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103692:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103696:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810369a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036a2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81036a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81036aa:	2300      	movs	r3, #0
 81036ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81036b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81036b4:	460b      	mov	r3, r1
 81036b6:	4313      	orrs	r3, r2
 81036b8:	d037      	beq.n	810372a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81036ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81036c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81036c4:	d00e      	beq.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 81036c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81036ca:	d816      	bhi.n	81036fa <HAL_RCCEx_PeriphCLKConfig+0x776>
 81036cc:	2b00      	cmp	r3, #0
 81036ce:	d018      	beq.n	8103702 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 81036d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81036d4:	d111      	bne.n	81036fa <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81036d6:	4b83      	ldr	r3, [pc, #524]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036da:	4a82      	ldr	r2, [pc, #520]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81036e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81036e2:	e00f      	b.n	8103704 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81036e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036e8:	3308      	adds	r3, #8
 81036ea:	2101      	movs	r1, #1
 81036ec:	4618      	mov	r0, r3
 81036ee:	f002 f823 	bl	8105738 <RCCEx_PLL2_Config>
 81036f2:	4603      	mov	r3, r0
 81036f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81036f8:	e004      	b.n	8103704 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036fa:	2301      	movs	r3, #1
 81036fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103700:	e000      	b.n	8103704 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8103702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103704:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103708:	2b00      	cmp	r3, #0
 810370a:	d10a      	bne.n	8103722 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810370c:	4b75      	ldr	r3, [pc, #468]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810370e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103710:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103714:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810371a:	4a72      	ldr	r2, [pc, #456]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810371c:	430b      	orrs	r3, r1
 810371e:	6513      	str	r3, [r2, #80]	@ 0x50
 8103720:	e003      	b.n	810372a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103722:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103726:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810372a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103732:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8103736:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810373a:	2300      	movs	r3, #0
 810373c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103740:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8103744:	460b      	mov	r3, r1
 8103746:	4313      	orrs	r3, r2
 8103748:	d03a      	beq.n	81037c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810374a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810374e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103750:	2b03      	cmp	r3, #3
 8103752:	d81d      	bhi.n	8103790 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8103754:	a201      	add	r2, pc, #4	@ (adr r2, 810375c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8103756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810375a:	bf00      	nop
 810375c:	08103799 	.word	0x08103799
 8103760:	0810376d 	.word	0x0810376d
 8103764:	0810377b 	.word	0x0810377b
 8103768:	08103799 	.word	0x08103799
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810376c:	4b5d      	ldr	r3, [pc, #372]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103770:	4a5c      	ldr	r2, [pc, #368]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103778:	e00f      	b.n	810379a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810377a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810377e:	3308      	adds	r3, #8
 8103780:	2102      	movs	r1, #2
 8103782:	4618      	mov	r0, r3
 8103784:	f001 ffd8 	bl	8105738 <RCCEx_PLL2_Config>
 8103788:	4603      	mov	r3, r0
 810378a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810378e:	e004      	b.n	810379a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103790:	2301      	movs	r3, #1
 8103792:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103796:	e000      	b.n	810379a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8103798:	bf00      	nop
    }

    if (ret == HAL_OK)
 810379a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810379e:	2b00      	cmp	r3, #0
 81037a0:	d10a      	bne.n	81037b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81037a2:	4b50      	ldr	r3, [pc, #320]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81037a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81037a6:	f023 0103 	bic.w	r1, r3, #3
 81037aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81037b0:	4a4c      	ldr	r2, [pc, #304]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81037b2:	430b      	orrs	r3, r1
 81037b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81037b6:	e003      	b.n	81037c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81037bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81037c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81037cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81037d0:	2300      	movs	r3, #0
 81037d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81037d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81037da:	460b      	mov	r3, r1
 81037dc:	4313      	orrs	r3, r2
 81037de:	f000 80a0 	beq.w	8103922 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81037e2:	4b41      	ldr	r3, [pc, #260]	@ (81038e8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	4a40      	ldr	r2, [pc, #256]	@ (81038e8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81037e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81037ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81037ee:	f7fe fb99 	bl	8101f24 <HAL_GetTick>
 81037f2:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81037f6:	e00b      	b.n	8103810 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81037f8:	f7fe fb94 	bl	8101f24 <HAL_GetTick>
 81037fc:	4602      	mov	r2, r0
 81037fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8103802:	1ad3      	subs	r3, r2, r3
 8103804:	2b64      	cmp	r3, #100	@ 0x64
 8103806:	d903      	bls.n	8103810 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8103808:	2303      	movs	r3, #3
 810380a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810380e:	e005      	b.n	810381c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103810:	4b35      	ldr	r3, [pc, #212]	@ (81038e8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103818:	2b00      	cmp	r3, #0
 810381a:	d0ed      	beq.n	81037f8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 810381c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103820:	2b00      	cmp	r3, #0
 8103822:	d17a      	bne.n	810391a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103824:	4b2f      	ldr	r3, [pc, #188]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103826:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8103828:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810382c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103830:	4053      	eors	r3, r2
 8103832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103836:	2b00      	cmp	r3, #0
 8103838:	d015      	beq.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810383a:	4b2a      	ldr	r3, [pc, #168]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810383c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810383e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103842:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103846:	4b27      	ldr	r3, [pc, #156]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810384a:	4a26      	ldr	r2, [pc, #152]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810384c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103850:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103852:	4b24      	ldr	r3, [pc, #144]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103856:	4a23      	ldr	r2, [pc, #140]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810385c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810385e:	4a21      	ldr	r2, [pc, #132]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103860:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8103864:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103866:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810386a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810386e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103872:	d118      	bne.n	81038a6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103874:	f7fe fb56 	bl	8101f24 <HAL_GetTick>
 8103878:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810387c:	e00d      	b.n	810389a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810387e:	f7fe fb51 	bl	8101f24 <HAL_GetTick>
 8103882:	4602      	mov	r2, r0
 8103884:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8103888:	1ad2      	subs	r2, r2, r3
 810388a:	f241 3388 	movw	r3, #5000	@ 0x1388
 810388e:	429a      	cmp	r2, r3
 8103890:	d903      	bls.n	810389a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8103892:	2303      	movs	r3, #3
 8103894:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8103898:	e005      	b.n	81038a6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810389a:	4b12      	ldr	r3, [pc, #72]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810389e:	f003 0302 	and.w	r3, r3, #2
 81038a2:	2b00      	cmp	r3, #0
 81038a4:	d0eb      	beq.n	810387e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 81038a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81038aa:	2b00      	cmp	r3, #0
 81038ac:	d130      	bne.n	8103910 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81038ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81038b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81038ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81038be:	d115      	bne.n	81038ec <HAL_RCCEx_PeriphCLKConfig+0x968>
 81038c0:	4b08      	ldr	r3, [pc, #32]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038c2:	691b      	ldr	r3, [r3, #16]
 81038c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81038c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81038d0:	091b      	lsrs	r3, r3, #4
 81038d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81038d6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81038da:	4a02      	ldr	r2, [pc, #8]	@ (81038e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038dc:	430b      	orrs	r3, r1
 81038de:	6113      	str	r3, [r2, #16]
 81038e0:	e00a      	b.n	81038f8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 81038e2:	bf00      	nop
 81038e4:	58024400 	.word	0x58024400
 81038e8:	58024800 	.word	0x58024800
 81038ec:	4bd4      	ldr	r3, [pc, #848]	@ (8103c40 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81038ee:	691b      	ldr	r3, [r3, #16]
 81038f0:	4ad3      	ldr	r2, [pc, #844]	@ (8103c40 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81038f2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81038f6:	6113      	str	r3, [r2, #16]
 81038f8:	4bd1      	ldr	r3, [pc, #836]	@ (8103c40 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81038fa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81038fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103900:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103908:	4acd      	ldr	r2, [pc, #820]	@ (8103c40 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810390a:	430b      	orrs	r3, r1
 810390c:	6713      	str	r3, [r2, #112]	@ 0x70
 810390e:	e008      	b.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103910:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103914:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8103918:	e003      	b.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810391a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810391e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103922:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103926:	e9d3 2300 	ldrd	r2, r3, [r3]
 810392a:	f002 0301 	and.w	r3, r2, #1
 810392e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8103932:	2300      	movs	r3, #0
 8103934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8103938:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810393c:	460b      	mov	r3, r1
 810393e:	4313      	orrs	r3, r2
 8103940:	f000 808b 	beq.w	8103a5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103944:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810394c:	2b28      	cmp	r3, #40	@ 0x28
 810394e:	d86b      	bhi.n	8103a28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8103950:	a201      	add	r2, pc, #4	@ (adr r2, 8103958 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8103952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103956:	bf00      	nop
 8103958:	08103a31 	.word	0x08103a31
 810395c:	08103a29 	.word	0x08103a29
 8103960:	08103a29 	.word	0x08103a29
 8103964:	08103a29 	.word	0x08103a29
 8103968:	08103a29 	.word	0x08103a29
 810396c:	08103a29 	.word	0x08103a29
 8103970:	08103a29 	.word	0x08103a29
 8103974:	08103a29 	.word	0x08103a29
 8103978:	081039fd 	.word	0x081039fd
 810397c:	08103a29 	.word	0x08103a29
 8103980:	08103a29 	.word	0x08103a29
 8103984:	08103a29 	.word	0x08103a29
 8103988:	08103a29 	.word	0x08103a29
 810398c:	08103a29 	.word	0x08103a29
 8103990:	08103a29 	.word	0x08103a29
 8103994:	08103a29 	.word	0x08103a29
 8103998:	08103a13 	.word	0x08103a13
 810399c:	08103a29 	.word	0x08103a29
 81039a0:	08103a29 	.word	0x08103a29
 81039a4:	08103a29 	.word	0x08103a29
 81039a8:	08103a29 	.word	0x08103a29
 81039ac:	08103a29 	.word	0x08103a29
 81039b0:	08103a29 	.word	0x08103a29
 81039b4:	08103a29 	.word	0x08103a29
 81039b8:	08103a31 	.word	0x08103a31
 81039bc:	08103a29 	.word	0x08103a29
 81039c0:	08103a29 	.word	0x08103a29
 81039c4:	08103a29 	.word	0x08103a29
 81039c8:	08103a29 	.word	0x08103a29
 81039cc:	08103a29 	.word	0x08103a29
 81039d0:	08103a29 	.word	0x08103a29
 81039d4:	08103a29 	.word	0x08103a29
 81039d8:	08103a31 	.word	0x08103a31
 81039dc:	08103a29 	.word	0x08103a29
 81039e0:	08103a29 	.word	0x08103a29
 81039e4:	08103a29 	.word	0x08103a29
 81039e8:	08103a29 	.word	0x08103a29
 81039ec:	08103a29 	.word	0x08103a29
 81039f0:	08103a29 	.word	0x08103a29
 81039f4:	08103a29 	.word	0x08103a29
 81039f8:	08103a31 	.word	0x08103a31
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81039fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a00:	3308      	adds	r3, #8
 8103a02:	2101      	movs	r1, #1
 8103a04:	4618      	mov	r0, r3
 8103a06:	f001 fe97 	bl	8105738 <RCCEx_PLL2_Config>
 8103a0a:	4603      	mov	r3, r0
 8103a0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103a10:	e00f      	b.n	8103a32 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a16:	3328      	adds	r3, #40	@ 0x28
 8103a18:	2101      	movs	r1, #1
 8103a1a:	4618      	mov	r0, r3
 8103a1c:	f001 ff3e 	bl	810589c <RCCEx_PLL3_Config>
 8103a20:	4603      	mov	r3, r0
 8103a22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103a26:	e004      	b.n	8103a32 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a28:	2301      	movs	r3, #1
 8103a2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103a2e:	e000      	b.n	8103a32 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8103a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a36:	2b00      	cmp	r3, #0
 8103a38:	d10b      	bne.n	8103a52 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103a3a:	4b81      	ldr	r3, [pc, #516]	@ (8103c40 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a3e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8103a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103a4a:	4a7d      	ldr	r2, [pc, #500]	@ (8103c40 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103a4c:	430b      	orrs	r3, r1
 8103a4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8103a50:	e003      	b.n	8103a5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a56:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a62:	f002 0302 	and.w	r3, r2, #2
 8103a66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8103a6a:	2300      	movs	r3, #0
 8103a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8103a70:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8103a74:	460b      	mov	r3, r1
 8103a76:	4313      	orrs	r3, r2
 8103a78:	d042      	beq.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103a80:	2b05      	cmp	r3, #5
 8103a82:	d825      	bhi.n	8103ad0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8103a84:	a201      	add	r2, pc, #4	@ (adr r2, 8103a8c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8103a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a8a:	bf00      	nop
 8103a8c:	08103ad9 	.word	0x08103ad9
 8103a90:	08103aa5 	.word	0x08103aa5
 8103a94:	08103abb 	.word	0x08103abb
 8103a98:	08103ad9 	.word	0x08103ad9
 8103a9c:	08103ad9 	.word	0x08103ad9
 8103aa0:	08103ad9 	.word	0x08103ad9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103aa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aa8:	3308      	adds	r3, #8
 8103aaa:	2101      	movs	r1, #1
 8103aac:	4618      	mov	r0, r3
 8103aae:	f001 fe43 	bl	8105738 <RCCEx_PLL2_Config>
 8103ab2:	4603      	mov	r3, r0
 8103ab4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103ab8:	e00f      	b.n	8103ada <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103abe:	3328      	adds	r3, #40	@ 0x28
 8103ac0:	2101      	movs	r1, #1
 8103ac2:	4618      	mov	r0, r3
 8103ac4:	f001 feea 	bl	810589c <RCCEx_PLL3_Config>
 8103ac8:	4603      	mov	r3, r0
 8103aca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103ace:	e004      	b.n	8103ada <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103ad0:	2301      	movs	r3, #1
 8103ad2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103ad6:	e000      	b.n	8103ada <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8103ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ada:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ade:	2b00      	cmp	r3, #0
 8103ae0:	d10a      	bne.n	8103af8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103ae2:	4b57      	ldr	r3, [pc, #348]	@ (8103c40 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ae6:	f023 0107 	bic.w	r1, r3, #7
 8103aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103af0:	4a53      	ldr	r2, [pc, #332]	@ (8103c40 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103af2:	430b      	orrs	r3, r1
 8103af4:	6553      	str	r3, [r2, #84]	@ 0x54
 8103af6:	e003      	b.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103af8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103afc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b08:	f002 0304 	and.w	r3, r2, #4
 8103b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8103b10:	2300      	movs	r3, #0
 8103b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8103b16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8103b1a:	460b      	mov	r3, r1
 8103b1c:	4313      	orrs	r3, r2
 8103b1e:	d044      	beq.n	8103baa <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103b28:	2b05      	cmp	r3, #5
 8103b2a:	d825      	bhi.n	8103b78 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8103b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8103b34 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8103b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b32:	bf00      	nop
 8103b34:	08103b81 	.word	0x08103b81
 8103b38:	08103b4d 	.word	0x08103b4d
 8103b3c:	08103b63 	.word	0x08103b63
 8103b40:	08103b81 	.word	0x08103b81
 8103b44:	08103b81 	.word	0x08103b81
 8103b48:	08103b81 	.word	0x08103b81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103b4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b50:	3308      	adds	r3, #8
 8103b52:	2101      	movs	r1, #1
 8103b54:	4618      	mov	r0, r3
 8103b56:	f001 fdef 	bl	8105738 <RCCEx_PLL2_Config>
 8103b5a:	4603      	mov	r3, r0
 8103b5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103b60:	e00f      	b.n	8103b82 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b66:	3328      	adds	r3, #40	@ 0x28
 8103b68:	2101      	movs	r1, #1
 8103b6a:	4618      	mov	r0, r3
 8103b6c:	f001 fe96 	bl	810589c <RCCEx_PLL3_Config>
 8103b70:	4603      	mov	r3, r0
 8103b72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103b76:	e004      	b.n	8103b82 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b78:	2301      	movs	r3, #1
 8103b7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103b7e:	e000      	b.n	8103b82 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8103b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b86:	2b00      	cmp	r3, #0
 8103b88:	d10b      	bne.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8103c40 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b8e:	f023 0107 	bic.w	r1, r3, #7
 8103b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103b9a:	4a29      	ldr	r2, [pc, #164]	@ (8103c40 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b9c:	430b      	orrs	r3, r1
 8103b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8103ba0:	e003      	b.n	8103baa <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ba2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ba6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bb2:	f002 0320 	and.w	r3, r2, #32
 8103bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8103bba:	2300      	movs	r3, #0
 8103bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8103bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8103bc4:	460b      	mov	r3, r1
 8103bc6:	4313      	orrs	r3, r2
 8103bc8:	d057      	beq.n	8103c7a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8103bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103bd6:	d035      	beq.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8103bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103bdc:	d82c      	bhi.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103be2:	d031      	beq.n	8103c48 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8103be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103be8:	d826      	bhi.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103bea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103bee:	d02d      	beq.n	8103c4c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8103bf0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103bf4:	d820      	bhi.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103bfa:	d012      	beq.n	8103c22 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8103bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103c00:	d81a      	bhi.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103c02:	2b00      	cmp	r3, #0
 8103c04:	d024      	beq.n	8103c50 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8103c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103c0a:	d115      	bne.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c10:	3308      	adds	r3, #8
 8103c12:	2100      	movs	r1, #0
 8103c14:	4618      	mov	r0, r3
 8103c16:	f001 fd8f 	bl	8105738 <RCCEx_PLL2_Config>
 8103c1a:	4603      	mov	r3, r0
 8103c1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103c20:	e017      	b.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103c22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c26:	3328      	adds	r3, #40	@ 0x28
 8103c28:	2102      	movs	r1, #2
 8103c2a:	4618      	mov	r0, r3
 8103c2c:	f001 fe36 	bl	810589c <RCCEx_PLL3_Config>
 8103c30:	4603      	mov	r3, r0
 8103c32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103c36:	e00c      	b.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c38:	2301      	movs	r3, #1
 8103c3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103c3e:	e008      	b.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8103c40:	58024400 	.word	0x58024400
        break;
 8103c44:	bf00      	nop
 8103c46:	e004      	b.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103c48:	bf00      	nop
 8103c4a:	e002      	b.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103c4c:	bf00      	nop
 8103c4e:	e000      	b.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c56:	2b00      	cmp	r3, #0
 8103c58:	d10b      	bne.n	8103c72 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103c5a:	4bc2      	ldr	r3, [pc, #776]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103c6a:	4abe      	ldr	r2, [pc, #760]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103c6c:	430b      	orrs	r3, r1
 8103c6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8103c70:	e003      	b.n	8103c7a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c82:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8103c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8103c8a:	2300      	movs	r3, #0
 8103c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8103c90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8103c94:	460b      	mov	r3, r1
 8103c96:	4313      	orrs	r3, r2
 8103c98:	d055      	beq.n	8103d46 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8103c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103ca2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103ca6:	d033      	beq.n	8103d10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8103ca8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103cac:	d82c      	bhi.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103cb2:	d02f      	beq.n	8103d14 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8103cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103cb8:	d826      	bhi.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103cba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103cbe:	d02b      	beq.n	8103d18 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8103cc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103cc4:	d820      	bhi.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103cc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103cca:	d012      	beq.n	8103cf2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8103ccc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103cd0:	d81a      	bhi.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103cd2:	2b00      	cmp	r3, #0
 8103cd4:	d022      	beq.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8103cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8103cda:	d115      	bne.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ce0:	3308      	adds	r3, #8
 8103ce2:	2100      	movs	r1, #0
 8103ce4:	4618      	mov	r0, r3
 8103ce6:	f001 fd27 	bl	8105738 <RCCEx_PLL2_Config>
 8103cea:	4603      	mov	r3, r0
 8103cec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103cf0:	e015      	b.n	8103d1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cf6:	3328      	adds	r3, #40	@ 0x28
 8103cf8:	2102      	movs	r1, #2
 8103cfa:	4618      	mov	r0, r3
 8103cfc:	f001 fdce 	bl	810589c <RCCEx_PLL3_Config>
 8103d00:	4603      	mov	r3, r0
 8103d02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103d06:	e00a      	b.n	8103d1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d08:	2301      	movs	r3, #1
 8103d0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103d0e:	e006      	b.n	8103d1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103d10:	bf00      	nop
 8103d12:	e004      	b.n	8103d1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103d14:	bf00      	nop
 8103d16:	e002      	b.n	8103d1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103d18:	bf00      	nop
 8103d1a:	e000      	b.n	8103d1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d22:	2b00      	cmp	r3, #0
 8103d24:	d10b      	bne.n	8103d3e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103d26:	4b8f      	ldr	r3, [pc, #572]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103d2a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8103d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103d36:	4a8b      	ldr	r2, [pc, #556]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103d38:	430b      	orrs	r3, r1
 8103d3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8103d3c:	e003      	b.n	8103d46 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d42:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d4e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8103d52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8103d56:	2300      	movs	r3, #0
 8103d58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8103d5c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8103d60:	460b      	mov	r3, r1
 8103d62:	4313      	orrs	r3, r2
 8103d64:	d055      	beq.n	8103e12 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103d6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103d72:	d033      	beq.n	8103ddc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8103d74:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103d78:	d82c      	bhi.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103d7e:	d02f      	beq.n	8103de0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8103d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103d84:	d826      	bhi.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103d86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103d8a:	d02b      	beq.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8103d8c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103d90:	d820      	bhi.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103d92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103d96:	d012      	beq.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8103d98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103d9c:	d81a      	bhi.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103d9e:	2b00      	cmp	r3, #0
 8103da0:	d022      	beq.n	8103de8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8103da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103da6:	d115      	bne.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dac:	3308      	adds	r3, #8
 8103dae:	2100      	movs	r1, #0
 8103db0:	4618      	mov	r0, r3
 8103db2:	f001 fcc1 	bl	8105738 <RCCEx_PLL2_Config>
 8103db6:	4603      	mov	r3, r0
 8103db8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103dbc:	e015      	b.n	8103dea <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dc2:	3328      	adds	r3, #40	@ 0x28
 8103dc4:	2102      	movs	r1, #2
 8103dc6:	4618      	mov	r0, r3
 8103dc8:	f001 fd68 	bl	810589c <RCCEx_PLL3_Config>
 8103dcc:	4603      	mov	r3, r0
 8103dce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103dd2:	e00a      	b.n	8103dea <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103dd4:	2301      	movs	r3, #1
 8103dd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103dda:	e006      	b.n	8103dea <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103ddc:	bf00      	nop
 8103dde:	e004      	b.n	8103dea <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103de0:	bf00      	nop
 8103de2:	e002      	b.n	8103dea <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103de4:	bf00      	nop
 8103de6:	e000      	b.n	8103dea <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103dea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103dee:	2b00      	cmp	r3, #0
 8103df0:	d10b      	bne.n	8103e0a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103df2:	4b5c      	ldr	r3, [pc, #368]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103df6:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8103dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103e02:	4a58      	ldr	r2, [pc, #352]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103e04:	430b      	orrs	r3, r1
 8103e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8103e08:	e003      	b.n	8103e12 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e1a:	f002 0308 	and.w	r3, r2, #8
 8103e1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103e22:	2300      	movs	r3, #0
 8103e24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8103e28:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8103e2c:	460b      	mov	r3, r1
 8103e2e:	4313      	orrs	r3, r2
 8103e30:	d01e      	beq.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103e3e:	d10c      	bne.n	8103e5a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e44:	3328      	adds	r3, #40	@ 0x28
 8103e46:	2102      	movs	r1, #2
 8103e48:	4618      	mov	r0, r3
 8103e4a:	f001 fd27 	bl	810589c <RCCEx_PLL3_Config>
 8103e4e:	4603      	mov	r3, r0
 8103e50:	2b00      	cmp	r3, #0
 8103e52:	d002      	beq.n	8103e5a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8103e54:	2301      	movs	r3, #1
 8103e56:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103e5a:	4b42      	ldr	r3, [pc, #264]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103e5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103e6a:	4a3e      	ldr	r2, [pc, #248]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103e6c:	430b      	orrs	r3, r1
 8103e6e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e78:	f002 0310 	and.w	r3, r2, #16
 8103e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8103e80:	2300      	movs	r3, #0
 8103e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8103e86:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8103e8a:	460b      	mov	r3, r1
 8103e8c:	4313      	orrs	r3, r2
 8103e8e:	d01e      	beq.n	8103ece <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8103e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103e9c:	d10c      	bne.n	8103eb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103e9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ea2:	3328      	adds	r3, #40	@ 0x28
 8103ea4:	2102      	movs	r1, #2
 8103ea6:	4618      	mov	r0, r3
 8103ea8:	f001 fcf8 	bl	810589c <RCCEx_PLL3_Config>
 8103eac:	4603      	mov	r3, r0
 8103eae:	2b00      	cmp	r3, #0
 8103eb0:	d002      	beq.n	8103eb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8103eb2:	2301      	movs	r3, #1
 8103eb4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103ebc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103ec0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103ec8:	4a26      	ldr	r2, [pc, #152]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103eca:	430b      	orrs	r3, r1
 8103ecc:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ed6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8103eda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103ede:	2300      	movs	r3, #0
 8103ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8103ee4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8103ee8:	460b      	mov	r3, r1
 8103eea:	4313      	orrs	r3, r2
 8103eec:	d040      	beq.n	8103f70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103eee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ef2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103ef6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103efa:	d022      	beq.n	8103f42 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8103efc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103f00:	d81b      	bhi.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103f02:	2b00      	cmp	r3, #0
 8103f04:	d003      	beq.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8103f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103f0a:	d00b      	beq.n	8103f24 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8103f0c:	e015      	b.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f12:	3308      	adds	r3, #8
 8103f14:	2100      	movs	r1, #0
 8103f16:	4618      	mov	r0, r3
 8103f18:	f001 fc0e 	bl	8105738 <RCCEx_PLL2_Config>
 8103f1c:	4603      	mov	r3, r0
 8103f1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103f22:	e00f      	b.n	8103f44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f28:	3328      	adds	r3, #40	@ 0x28
 8103f2a:	2102      	movs	r1, #2
 8103f2c:	4618      	mov	r0, r3
 8103f2e:	f001 fcb5 	bl	810589c <RCCEx_PLL3_Config>
 8103f32:	4603      	mov	r3, r0
 8103f34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103f38:	e004      	b.n	8103f44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f3a:	2301      	movs	r3, #1
 8103f3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103f40:	e000      	b.n	8103f44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8103f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f44:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f48:	2b00      	cmp	r3, #0
 8103f4a:	d10d      	bne.n	8103f68 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103f4c:	4b05      	ldr	r3, [pc, #20]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103f50:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8103f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103f5c:	4a01      	ldr	r2, [pc, #4]	@ (8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103f5e:	430b      	orrs	r3, r1
 8103f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8103f62:	e005      	b.n	8103f70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8103f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f6c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f78:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8103f7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8103f7e:	2300      	movs	r3, #0
 8103f80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8103f82:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8103f86:	460b      	mov	r3, r1
 8103f88:	4313      	orrs	r3, r2
 8103f8a:	d03b      	beq.n	8104004 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103f94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103f98:	d01f      	beq.n	8103fda <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8103f9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103f9e:	d818      	bhi.n	8103fd2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8103fa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103fa4:	d003      	beq.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8103fa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103faa:	d007      	beq.n	8103fbc <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8103fac:	e011      	b.n	8103fd2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103fae:	4b64      	ldr	r3, [pc, #400]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fb2:	4a63      	ldr	r2, [pc, #396]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103fba:	e00f      	b.n	8103fdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fc0:	3328      	adds	r3, #40	@ 0x28
 8103fc2:	2101      	movs	r1, #1
 8103fc4:	4618      	mov	r0, r3
 8103fc6:	f001 fc69 	bl	810589c <RCCEx_PLL3_Config>
 8103fca:	4603      	mov	r3, r0
 8103fcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8103fd0:	e004      	b.n	8103fdc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103fd2:	2301      	movs	r3, #1
 8103fd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103fd8:	e000      	b.n	8103fdc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8103fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103fdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103fe0:	2b00      	cmp	r3, #0
 8103fe2:	d10b      	bne.n	8103ffc <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103fe4:	4b56      	ldr	r3, [pc, #344]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103fe8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103ff4:	4a52      	ldr	r2, [pc, #328]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103ff6:	430b      	orrs	r3, r1
 8103ff8:	6553      	str	r3, [r2, #84]	@ 0x54
 8103ffa:	e003      	b.n	8104004 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ffc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104000:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104008:	e9d3 2300 	ldrd	r2, r3, [r3]
 810400c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8104010:	673b      	str	r3, [r7, #112]	@ 0x70
 8104012:	2300      	movs	r3, #0
 8104014:	677b      	str	r3, [r7, #116]	@ 0x74
 8104016:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810401a:	460b      	mov	r3, r1
 810401c:	4313      	orrs	r3, r2
 810401e:	d031      	beq.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8104020:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104026:	2b00      	cmp	r3, #0
 8104028:	d003      	beq.n	8104032 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810402a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810402e:	d007      	beq.n	8104040 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8104030:	e011      	b.n	8104056 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104032:	4b43      	ldr	r3, [pc, #268]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104036:	4a42      	ldr	r2, [pc, #264]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810403c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810403e:	e00e      	b.n	810405e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104044:	3308      	adds	r3, #8
 8104046:	2102      	movs	r1, #2
 8104048:	4618      	mov	r0, r3
 810404a:	f001 fb75 	bl	8105738 <RCCEx_PLL2_Config>
 810404e:	4603      	mov	r3, r0
 8104050:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104054:	e003      	b.n	810405e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8104056:	2301      	movs	r3, #1
 8104058:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810405e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104062:	2b00      	cmp	r3, #0
 8104064:	d10a      	bne.n	810407c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104066:	4b36      	ldr	r3, [pc, #216]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810406a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810406e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104074:	4a32      	ldr	r2, [pc, #200]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104076:	430b      	orrs	r3, r1
 8104078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810407a:	e003      	b.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810407c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104080:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104088:	e9d3 2300 	ldrd	r2, r3, [r3]
 810408c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8104090:	66bb      	str	r3, [r7, #104]	@ 0x68
 8104092:	2300      	movs	r3, #0
 8104094:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8104096:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810409a:	460b      	mov	r3, r1
 810409c:	4313      	orrs	r3, r2
 810409e:	d00c      	beq.n	81040ba <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81040a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040a4:	3328      	adds	r3, #40	@ 0x28
 81040a6:	2102      	movs	r1, #2
 81040a8:	4618      	mov	r0, r3
 81040aa:	f001 fbf7 	bl	810589c <RCCEx_PLL3_Config>
 81040ae:	4603      	mov	r3, r0
 81040b0:	2b00      	cmp	r3, #0
 81040b2:	d002      	beq.n	81040ba <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 81040b4:	2301      	movs	r3, #1
 81040b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81040ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81040c6:	663b      	str	r3, [r7, #96]	@ 0x60
 81040c8:	2300      	movs	r3, #0
 81040ca:	667b      	str	r3, [r7, #100]	@ 0x64
 81040cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81040d0:	460b      	mov	r3, r1
 81040d2:	4313      	orrs	r3, r2
 81040d4:	d03a      	beq.n	810414c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 81040d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81040de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81040e2:	d018      	beq.n	8104116 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 81040e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81040e8:	d811      	bhi.n	810410e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81040ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81040ee:	d014      	beq.n	810411a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 81040f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81040f4:	d80b      	bhi.n	810410e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81040f6:	2b00      	cmp	r3, #0
 81040f8:	d011      	beq.n	810411e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 81040fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81040fe:	d106      	bne.n	810410e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104100:	4b0f      	ldr	r3, [pc, #60]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104104:	4a0e      	ldr	r2, [pc, #56]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810410a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810410c:	e008      	b.n	8104120 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810410e:	2301      	movs	r3, #1
 8104110:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104114:	e004      	b.n	8104120 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104116:	bf00      	nop
 8104118:	e002      	b.n	8104120 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810411a:	bf00      	nop
 810411c:	e000      	b.n	8104120 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810411e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104120:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104124:	2b00      	cmp	r3, #0
 8104126:	d10d      	bne.n	8104144 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104128:	4b05      	ldr	r3, [pc, #20]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810412a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810412c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104138:	4a01      	ldr	r2, [pc, #4]	@ (8104140 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810413a:	430b      	orrs	r3, r1
 810413c:	6553      	str	r3, [r2, #84]	@ 0x54
 810413e:	e005      	b.n	810414c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8104140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104144:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104148:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810414c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104154:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8104158:	65bb      	str	r3, [r7, #88]	@ 0x58
 810415a:	2300      	movs	r3, #0
 810415c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810415e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8104162:	460b      	mov	r3, r1
 8104164:	4313      	orrs	r3, r2
 8104166:	d009      	beq.n	810417c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104168:	4baa      	ldr	r3, [pc, #680]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810416a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810416c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8104170:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104174:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104176:	4aa7      	ldr	r2, [pc, #668]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104178:	430b      	orrs	r3, r1
 810417a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810417c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104184:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8104188:	653b      	str	r3, [r7, #80]	@ 0x50
 810418a:	2300      	movs	r3, #0
 810418c:	657b      	str	r3, [r7, #84]	@ 0x54
 810418e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8104192:	460b      	mov	r3, r1
 8104194:	4313      	orrs	r3, r2
 8104196:	d00a      	beq.n	81041ae <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104198:	4b9e      	ldr	r3, [pc, #632]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810419a:	691b      	ldr	r3, [r3, #16]
 810419c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81041a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81041a8:	4a9a      	ldr	r2, [pc, #616]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81041aa:	430b      	orrs	r3, r1
 81041ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81041ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81041ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 81041bc:	2300      	movs	r3, #0
 81041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81041c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81041c4:	460b      	mov	r3, r1
 81041c6:	4313      	orrs	r3, r2
 81041c8:	d009      	beq.n	81041de <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81041ca:	4b92      	ldr	r3, [pc, #584]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81041cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81041ce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81041d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81041d8:	4a8e      	ldr	r2, [pc, #568]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81041da:	430b      	orrs	r3, r1
 81041dc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81041de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041e6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81041ea:	643b      	str	r3, [r7, #64]	@ 0x40
 81041ec:	2300      	movs	r3, #0
 81041ee:	647b      	str	r3, [r7, #68]	@ 0x44
 81041f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81041f4:	460b      	mov	r3, r1
 81041f6:	4313      	orrs	r3, r2
 81041f8:	d00e      	beq.n	8104218 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81041fa:	4b86      	ldr	r3, [pc, #536]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81041fc:	691b      	ldr	r3, [r3, #16]
 81041fe:	4a85      	ldr	r2, [pc, #532]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104200:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8104204:	6113      	str	r3, [r2, #16]
 8104206:	4b83      	ldr	r3, [pc, #524]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104208:	6919      	ldr	r1, [r3, #16]
 810420a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810420e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8104212:	4a80      	ldr	r2, [pc, #512]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104214:	430b      	orrs	r3, r1
 8104216:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104220:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8104224:	63bb      	str	r3, [r7, #56]	@ 0x38
 8104226:	2300      	movs	r3, #0
 8104228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810422a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810422e:	460b      	mov	r3, r1
 8104230:	4313      	orrs	r3, r2
 8104232:	d009      	beq.n	8104248 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104234:	4b77      	ldr	r3, [pc, #476]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104238:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810423c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104242:	4a74      	ldr	r2, [pc, #464]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104244:	430b      	orrs	r3, r1
 8104246:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104250:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8104254:	633b      	str	r3, [r7, #48]	@ 0x30
 8104256:	2300      	movs	r3, #0
 8104258:	637b      	str	r3, [r7, #52]	@ 0x34
 810425a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810425e:	460b      	mov	r3, r1
 8104260:	4313      	orrs	r3, r2
 8104262:	d00a      	beq.n	810427a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104264:	4b6b      	ldr	r3, [pc, #428]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104268:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810426c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104274:	4a67      	ldr	r2, [pc, #412]	@ (8104414 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104276:	430b      	orrs	r3, r1
 8104278:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810427a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104282:	2100      	movs	r1, #0
 8104284:	62b9      	str	r1, [r7, #40]	@ 0x28
 8104286:	f003 0301 	and.w	r3, r3, #1
 810428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810428c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8104290:	460b      	mov	r3, r1
 8104292:	4313      	orrs	r3, r2
 8104294:	d011      	beq.n	81042ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104296:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810429a:	3308      	adds	r3, #8
 810429c:	2100      	movs	r1, #0
 810429e:	4618      	mov	r0, r3
 81042a0:	f001 fa4a 	bl	8105738 <RCCEx_PLL2_Config>
 81042a4:	4603      	mov	r3, r0
 81042a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81042aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81042ae:	2b00      	cmp	r3, #0
 81042b0:	d003      	beq.n	81042ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81042b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81042ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042c2:	2100      	movs	r1, #0
 81042c4:	6239      	str	r1, [r7, #32]
 81042c6:	f003 0302 	and.w	r3, r3, #2
 81042ca:	627b      	str	r3, [r7, #36]	@ 0x24
 81042cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81042d0:	460b      	mov	r3, r1
 81042d2:	4313      	orrs	r3, r2
 81042d4:	d011      	beq.n	81042fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81042d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042da:	3308      	adds	r3, #8
 81042dc:	2101      	movs	r1, #1
 81042de:	4618      	mov	r0, r3
 81042e0:	f001 fa2a 	bl	8105738 <RCCEx_PLL2_Config>
 81042e4:	4603      	mov	r3, r0
 81042e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81042ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81042ee:	2b00      	cmp	r3, #0
 81042f0:	d003      	beq.n	81042fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81042f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81042fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104302:	2100      	movs	r1, #0
 8104304:	61b9      	str	r1, [r7, #24]
 8104306:	f003 0304 	and.w	r3, r3, #4
 810430a:	61fb      	str	r3, [r7, #28]
 810430c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104310:	460b      	mov	r3, r1
 8104312:	4313      	orrs	r3, r2
 8104314:	d011      	beq.n	810433a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810431a:	3308      	adds	r3, #8
 810431c:	2102      	movs	r1, #2
 810431e:	4618      	mov	r0, r3
 8104320:	f001 fa0a 	bl	8105738 <RCCEx_PLL2_Config>
 8104324:	4603      	mov	r3, r0
 8104326:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810432a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810432e:	2b00      	cmp	r3, #0
 8104330:	d003      	beq.n	810433a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104332:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104336:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810433a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104342:	2100      	movs	r1, #0
 8104344:	6139      	str	r1, [r7, #16]
 8104346:	f003 0308 	and.w	r3, r3, #8
 810434a:	617b      	str	r3, [r7, #20]
 810434c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104350:	460b      	mov	r3, r1
 8104352:	4313      	orrs	r3, r2
 8104354:	d011      	beq.n	810437a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104356:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810435a:	3328      	adds	r3, #40	@ 0x28
 810435c:	2100      	movs	r1, #0
 810435e:	4618      	mov	r0, r3
 8104360:	f001 fa9c 	bl	810589c <RCCEx_PLL3_Config>
 8104364:	4603      	mov	r3, r0
 8104366:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810436a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810436e:	2b00      	cmp	r3, #0
 8104370:	d003      	beq.n	810437a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104372:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104376:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810437a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104382:	2100      	movs	r1, #0
 8104384:	60b9      	str	r1, [r7, #8]
 8104386:	f003 0310 	and.w	r3, r3, #16
 810438a:	60fb      	str	r3, [r7, #12]
 810438c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104390:	460b      	mov	r3, r1
 8104392:	4313      	orrs	r3, r2
 8104394:	d011      	beq.n	81043ba <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104396:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810439a:	3328      	adds	r3, #40	@ 0x28
 810439c:	2101      	movs	r1, #1
 810439e:	4618      	mov	r0, r3
 81043a0:	f001 fa7c 	bl	810589c <RCCEx_PLL3_Config>
 81043a4:	4603      	mov	r3, r0
 81043a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81043aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043ae:	2b00      	cmp	r3, #0
 81043b0:	d003      	beq.n	81043ba <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81043ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043c2:	2100      	movs	r1, #0
 81043c4:	6039      	str	r1, [r7, #0]
 81043c6:	f003 0320 	and.w	r3, r3, #32
 81043ca:	607b      	str	r3, [r7, #4]
 81043cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 81043d0:	460b      	mov	r3, r1
 81043d2:	4313      	orrs	r3, r2
 81043d4:	d011      	beq.n	81043fa <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81043d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043da:	3328      	adds	r3, #40	@ 0x28
 81043dc:	2102      	movs	r1, #2
 81043de:	4618      	mov	r0, r3
 81043e0:	f001 fa5c 	bl	810589c <RCCEx_PLL3_Config>
 81043e4:	4603      	mov	r3, r0
 81043e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81043ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043ee:	2b00      	cmp	r3, #0
 81043f0:	d003      	beq.n	81043fa <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 81043fa:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 81043fe:	2b00      	cmp	r3, #0
 8104400:	d101      	bne.n	8104406 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8104402:	2300      	movs	r3, #0
 8104404:	e000      	b.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8104406:	2301      	movs	r3, #1
}
 8104408:	4618      	mov	r0, r3
 810440a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 810440e:	46bd      	mov	sp, r7
 8104410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104414:	58024400 	.word	0x58024400

08104418 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8104418:	b580      	push	{r7, lr}
 810441a:	b090      	sub	sp, #64	@ 0x40
 810441c:	af00      	add	r7, sp, #0
 810441e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104426:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810442a:	430b      	orrs	r3, r1
 810442c:	f040 8094 	bne.w	8104558 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8104430:	4b9e      	ldr	r3, [pc, #632]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104434:	f003 0307 	and.w	r3, r3, #7
 8104438:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810443c:	2b04      	cmp	r3, #4
 810443e:	f200 8087 	bhi.w	8104550 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8104442:	a201      	add	r2, pc, #4	@ (adr r2, 8104448 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8104444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104448:	0810445d 	.word	0x0810445d
 810444c:	08104485 	.word	0x08104485
 8104450:	081044ad 	.word	0x081044ad
 8104454:	08104549 	.word	0x08104549
 8104458:	081044d5 	.word	0x081044d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810445c:	4b93      	ldr	r3, [pc, #588]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104468:	d108      	bne.n	810447c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810446a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810446e:	4618      	mov	r0, r3
 8104470:	f001 f810 	bl	8105494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104478:	f000 bd45 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810447c:	2300      	movs	r3, #0
 810447e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104480:	f000 bd41 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104484:	4b89      	ldr	r3, [pc, #548]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810448c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104490:	d108      	bne.n	81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104492:	f107 0318 	add.w	r3, r7, #24
 8104496:	4618      	mov	r0, r3
 8104498:	f000 fd54 	bl	8104f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810449c:	69bb      	ldr	r3, [r7, #24]
 810449e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81044a0:	f000 bd31 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81044a4:	2300      	movs	r3, #0
 81044a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81044a8:	f000 bd2d 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81044ac:	4b7f      	ldr	r3, [pc, #508]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81044b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81044b8:	d108      	bne.n	81044cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81044ba:	f107 030c 	add.w	r3, r7, #12
 81044be:	4618      	mov	r0, r3
 81044c0:	f000 fe94 	bl	81051ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81044c4:	68fb      	ldr	r3, [r7, #12]
 81044c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81044c8:	f000 bd1d 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81044cc:	2300      	movs	r3, #0
 81044ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81044d0:	f000 bd19 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81044d4:	4b75      	ldr	r3, [pc, #468]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81044d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81044d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81044dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81044de:	4b73      	ldr	r3, [pc, #460]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81044e0:	681b      	ldr	r3, [r3, #0]
 81044e2:	f003 0304 	and.w	r3, r3, #4
 81044e6:	2b04      	cmp	r3, #4
 81044e8:	d10c      	bne.n	8104504 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81044ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81044ec:	2b00      	cmp	r3, #0
 81044ee:	d109      	bne.n	8104504 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81044f0:	4b6e      	ldr	r3, [pc, #440]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81044f2:	681b      	ldr	r3, [r3, #0]
 81044f4:	08db      	lsrs	r3, r3, #3
 81044f6:	f003 0303 	and.w	r3, r3, #3
 81044fa:	4a6d      	ldr	r2, [pc, #436]	@ (81046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81044fc:	fa22 f303 	lsr.w	r3, r2, r3
 8104500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104502:	e01f      	b.n	8104544 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104504:	4b69      	ldr	r3, [pc, #420]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810450c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104510:	d106      	bne.n	8104520 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8104512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104518:	d102      	bne.n	8104520 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810451a:	4b66      	ldr	r3, [pc, #408]	@ (81046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810451c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810451e:	e011      	b.n	8104544 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104520:	4b62      	ldr	r3, [pc, #392]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810452c:	d106      	bne.n	810453c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810452e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104534:	d102      	bne.n	810453c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104536:	4b60      	ldr	r3, [pc, #384]	@ (81046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810453a:	e003      	b.n	8104544 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810453c:	2300      	movs	r3, #0
 810453e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104540:	f000 bce1 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104544:	f000 bcdf 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104548:	4b5c      	ldr	r3, [pc, #368]	@ (81046bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810454a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810454c:	f000 bcdb 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104550:	2300      	movs	r3, #0
 8104552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104554:	f000 bcd7 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104558:	e9d7 2300 	ldrd	r2, r3, [r7]
 810455c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8104560:	430b      	orrs	r3, r1
 8104562:	f040 80ad 	bne.w	81046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8104566:	4b51      	ldr	r3, [pc, #324]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810456a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810456e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104576:	d056      	beq.n	8104626 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8104578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810457a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810457e:	f200 8090 	bhi.w	81046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104584:	2bc0      	cmp	r3, #192	@ 0xc0
 8104586:	f000 8088 	beq.w	810469a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810458c:	2bc0      	cmp	r3, #192	@ 0xc0
 810458e:	f200 8088 	bhi.w	81046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104594:	2b80      	cmp	r3, #128	@ 0x80
 8104596:	d032      	beq.n	81045fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8104598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810459a:	2b80      	cmp	r3, #128	@ 0x80
 810459c:	f200 8081 	bhi.w	81046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81045a2:	2b00      	cmp	r3, #0
 81045a4:	d003      	beq.n	81045ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 81045a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81045a8:	2b40      	cmp	r3, #64	@ 0x40
 81045aa:	d014      	beq.n	81045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81045ac:	e079      	b.n	81046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81045ae:	4b3f      	ldr	r3, [pc, #252]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81045b0:	681b      	ldr	r3, [r3, #0]
 81045b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81045b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81045ba:	d108      	bne.n	81045ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81045bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81045c0:	4618      	mov	r0, r3
 81045c2:	f000 ff67 	bl	8105494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81045c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81045ca:	f000 bc9c 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81045ce:	2300      	movs	r3, #0
 81045d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045d2:	f000 bc98 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81045d6:	4b35      	ldr	r3, [pc, #212]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81045d8:	681b      	ldr	r3, [r3, #0]
 81045da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81045de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81045e2:	d108      	bne.n	81045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81045e4:	f107 0318 	add.w	r3, r7, #24
 81045e8:	4618      	mov	r0, r3
 81045ea:	f000 fcab 	bl	8104f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81045ee:	69bb      	ldr	r3, [r7, #24]
 81045f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81045f2:	f000 bc88 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81045f6:	2300      	movs	r3, #0
 81045f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045fa:	f000 bc84 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81045fe:	4b2b      	ldr	r3, [pc, #172]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104600:	681b      	ldr	r3, [r3, #0]
 8104602:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810460a:	d108      	bne.n	810461e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810460c:	f107 030c 	add.w	r3, r7, #12
 8104610:	4618      	mov	r0, r3
 8104612:	f000 fdeb 	bl	81051ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104616:	68fb      	ldr	r3, [r7, #12]
 8104618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810461a:	f000 bc74 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810461e:	2300      	movs	r3, #0
 8104620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104622:	f000 bc70 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104626:	4b21      	ldr	r3, [pc, #132]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810462a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810462e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104630:	4b1e      	ldr	r3, [pc, #120]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	f003 0304 	and.w	r3, r3, #4
 8104638:	2b04      	cmp	r3, #4
 810463a:	d10c      	bne.n	8104656 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810463e:	2b00      	cmp	r3, #0
 8104640:	d109      	bne.n	8104656 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104642:	4b1a      	ldr	r3, [pc, #104]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	08db      	lsrs	r3, r3, #3
 8104648:	f003 0303 	and.w	r3, r3, #3
 810464c:	4a18      	ldr	r2, [pc, #96]	@ (81046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810464e:	fa22 f303 	lsr.w	r3, r2, r3
 8104652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104654:	e01f      	b.n	8104696 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104656:	4b15      	ldr	r3, [pc, #84]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810465e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104662:	d106      	bne.n	8104672 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8104664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810466a:	d102      	bne.n	8104672 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810466c:	4b11      	ldr	r3, [pc, #68]	@ (81046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810466e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104670:	e011      	b.n	8104696 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104672:	4b0e      	ldr	r3, [pc, #56]	@ (81046ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104674:	681b      	ldr	r3, [r3, #0]
 8104676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810467a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810467e:	d106      	bne.n	810468e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8104680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104686:	d102      	bne.n	810468e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104688:	4b0b      	ldr	r3, [pc, #44]	@ (81046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810468a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810468c:	e003      	b.n	8104696 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810468e:	2300      	movs	r3, #0
 8104690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104692:	f000 bc38 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104696:	f000 bc36 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810469a:	4b08      	ldr	r3, [pc, #32]	@ (81046bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810469c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810469e:	f000 bc32 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81046a2:	2300      	movs	r3, #0
 81046a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81046a6:	f000 bc2e 	b.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81046aa:	bf00      	nop
 81046ac:	58024400 	.word	0x58024400
 81046b0:	03d09000 	.word	0x03d09000
 81046b4:	003d0900 	.word	0x003d0900
 81046b8:	017d7840 	.word	0x017d7840
 81046bc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81046c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81046c4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 81046c8:	430b      	orrs	r3, r1
 81046ca:	f040 809c 	bne.w	8104806 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81046ce:	4b9e      	ldr	r3, [pc, #632]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81046d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81046d2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 81046d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81046de:	d054      	beq.n	810478a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 81046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81046e6:	f200 808b 	bhi.w	8104800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81046f0:	f000 8083 	beq.w	81047fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 81046f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81046fa:	f200 8081 	bhi.w	8104800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81046fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104704:	d02f      	beq.n	8104766 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8104706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810470c:	d878      	bhi.n	8104800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104710:	2b00      	cmp	r3, #0
 8104712:	d004      	beq.n	810471e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8104714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104716:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810471a:	d012      	beq.n	8104742 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810471c:	e070      	b.n	8104800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810471e:	4b8a      	ldr	r3, [pc, #552]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104726:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810472a:	d107      	bne.n	810473c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810472c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104730:	4618      	mov	r0, r3
 8104732:	f000 feaf 	bl	8105494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810473a:	e3e4      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810473c:	2300      	movs	r3, #0
 810473e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104740:	e3e1      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104742:	4b81      	ldr	r3, [pc, #516]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810474a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810474e:	d107      	bne.n	8104760 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104750:	f107 0318 	add.w	r3, r7, #24
 8104754:	4618      	mov	r0, r3
 8104756:	f000 fbf5 	bl	8104f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810475a:	69bb      	ldr	r3, [r7, #24]
 810475c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810475e:	e3d2      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104760:	2300      	movs	r3, #0
 8104762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104764:	e3cf      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104766:	4b78      	ldr	r3, [pc, #480]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104768:	681b      	ldr	r3, [r3, #0]
 810476a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810476e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104772:	d107      	bne.n	8104784 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104774:	f107 030c 	add.w	r3, r7, #12
 8104778:	4618      	mov	r0, r3
 810477a:	f000 fd37 	bl	81051ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810477e:	68fb      	ldr	r3, [r7, #12]
 8104780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104782:	e3c0      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104784:	2300      	movs	r3, #0
 8104786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104788:	e3bd      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810478a:	4b6f      	ldr	r3, [pc, #444]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810478c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810478e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104792:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104794:	4b6c      	ldr	r3, [pc, #432]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104796:	681b      	ldr	r3, [r3, #0]
 8104798:	f003 0304 	and.w	r3, r3, #4
 810479c:	2b04      	cmp	r3, #4
 810479e:	d10c      	bne.n	81047ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81047a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81047a2:	2b00      	cmp	r3, #0
 81047a4:	d109      	bne.n	81047ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81047a6:	4b68      	ldr	r3, [pc, #416]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81047a8:	681b      	ldr	r3, [r3, #0]
 81047aa:	08db      	lsrs	r3, r3, #3
 81047ac:	f003 0303 	and.w	r3, r3, #3
 81047b0:	4a66      	ldr	r2, [pc, #408]	@ (810494c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81047b2:	fa22 f303 	lsr.w	r3, r2, r3
 81047b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81047b8:	e01e      	b.n	81047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81047ba:	4b63      	ldr	r3, [pc, #396]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81047bc:	681b      	ldr	r3, [r3, #0]
 81047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81047c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81047c6:	d106      	bne.n	81047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81047c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81047ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81047ce:	d102      	bne.n	81047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81047d0:	4b5f      	ldr	r3, [pc, #380]	@ (8104950 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81047d4:	e010      	b.n	81047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81047d6:	4b5c      	ldr	r3, [pc, #368]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81047d8:	681b      	ldr	r3, [r3, #0]
 81047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81047de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81047e2:	d106      	bne.n	81047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 81047e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81047e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81047ea:	d102      	bne.n	81047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81047ec:	4b59      	ldr	r3, [pc, #356]	@ (8104954 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81047ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81047f0:	e002      	b.n	81047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81047f2:	2300      	movs	r3, #0
 81047f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81047f6:	e386      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81047f8:	e385      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81047fa:	4b57      	ldr	r3, [pc, #348]	@ (8104958 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81047fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81047fe:	e382      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104800:	2300      	movs	r3, #0
 8104802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104804:	e37f      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104806:	e9d7 2300 	ldrd	r2, r3, [r7]
 810480a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810480e:	430b      	orrs	r3, r1
 8104810:	f040 80a7 	bne.w	8104962 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8104814:	4b4c      	ldr	r3, [pc, #304]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104818:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810481c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810481e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104820:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104824:	d055      	beq.n	81048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8104826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810482c:	f200 8096 	bhi.w	810495c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104832:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104836:	f000 8084 	beq.w	8104942 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810483c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104840:	f200 808c 	bhi.w	810495c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810484a:	d030      	beq.n	81048ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810484e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104852:	f200 8083 	bhi.w	810495c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104858:	2b00      	cmp	r3, #0
 810485a:	d004      	beq.n	8104866 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810485e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104862:	d012      	beq.n	810488a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8104864:	e07a      	b.n	810495c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104866:	4b38      	ldr	r3, [pc, #224]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104868:	681b      	ldr	r3, [r3, #0]
 810486a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810486e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104872:	d107      	bne.n	8104884 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104878:	4618      	mov	r0, r3
 810487a:	f000 fe0b 	bl	8105494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104882:	e340      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104884:	2300      	movs	r3, #0
 8104886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104888:	e33d      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810488a:	4b2f      	ldr	r3, [pc, #188]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810488c:	681b      	ldr	r3, [r3, #0]
 810488e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104896:	d107      	bne.n	81048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104898:	f107 0318 	add.w	r3, r7, #24
 810489c:	4618      	mov	r0, r3
 810489e:	f000 fb51 	bl	8104f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81048a2:	69bb      	ldr	r3, [r7, #24]
 81048a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81048a6:	e32e      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81048a8:	2300      	movs	r3, #0
 81048aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81048ac:	e32b      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81048ae:	4b26      	ldr	r3, [pc, #152]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81048b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81048ba:	d107      	bne.n	81048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81048bc:	f107 030c 	add.w	r3, r7, #12
 81048c0:	4618      	mov	r0, r3
 81048c2:	f000 fc93 	bl	81051ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81048c6:	68fb      	ldr	r3, [r7, #12]
 81048c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81048ca:	e31c      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81048cc:	2300      	movs	r3, #0
 81048ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81048d0:	e319      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81048d2:	4b1d      	ldr	r3, [pc, #116]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81048d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81048d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81048da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81048dc:	4b1a      	ldr	r3, [pc, #104]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81048de:	681b      	ldr	r3, [r3, #0]
 81048e0:	f003 0304 	and.w	r3, r3, #4
 81048e4:	2b04      	cmp	r3, #4
 81048e6:	d10c      	bne.n	8104902 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 81048e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81048ea:	2b00      	cmp	r3, #0
 81048ec:	d109      	bne.n	8104902 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81048ee:	4b16      	ldr	r3, [pc, #88]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81048f0:	681b      	ldr	r3, [r3, #0]
 81048f2:	08db      	lsrs	r3, r3, #3
 81048f4:	f003 0303 	and.w	r3, r3, #3
 81048f8:	4a14      	ldr	r2, [pc, #80]	@ (810494c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81048fa:	fa22 f303 	lsr.w	r3, r2, r3
 81048fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104900:	e01e      	b.n	8104940 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104902:	4b11      	ldr	r3, [pc, #68]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104904:	681b      	ldr	r3, [r3, #0]
 8104906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810490a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810490e:	d106      	bne.n	810491e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8104910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104916:	d102      	bne.n	810491e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104918:	4b0d      	ldr	r3, [pc, #52]	@ (8104950 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810491a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810491c:	e010      	b.n	8104940 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810491e:	4b0a      	ldr	r3, [pc, #40]	@ (8104948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104920:	681b      	ldr	r3, [r3, #0]
 8104922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810492a:	d106      	bne.n	810493a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810492c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810492e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104932:	d102      	bne.n	810493a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104934:	4b07      	ldr	r3, [pc, #28]	@ (8104954 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104938:	e002      	b.n	8104940 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810493a:	2300      	movs	r3, #0
 810493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810493e:	e2e2      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104940:	e2e1      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104942:	4b05      	ldr	r3, [pc, #20]	@ (8104958 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104946:	e2de      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104948:	58024400 	.word	0x58024400
 810494c:	03d09000 	.word	0x03d09000
 8104950:	003d0900 	.word	0x003d0900
 8104954:	017d7840 	.word	0x017d7840
 8104958:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810495c:	2300      	movs	r3, #0
 810495e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104960:	e2d1      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8104962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104966:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810496a:	430b      	orrs	r3, r1
 810496c:	f040 809c 	bne.w	8104aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8104970:	4b93      	ldr	r3, [pc, #588]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104974:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8104978:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810497a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810497c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104980:	d054      	beq.n	8104a2c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8104982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104988:	f200 808b 	bhi.w	8104aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810498c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810498e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104992:	f000 8083 	beq.w	8104a9c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8104996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104998:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810499c:	f200 8081 	bhi.w	8104aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81049a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81049a6:	d02f      	beq.n	8104a08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81049a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81049ae:	d878      	bhi.n	8104aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81049b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049b2:	2b00      	cmp	r3, #0
 81049b4:	d004      	beq.n	81049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81049b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81049bc:	d012      	beq.n	81049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81049be:	e070      	b.n	8104aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81049c0:	4b7f      	ldr	r3, [pc, #508]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81049c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81049cc:	d107      	bne.n	81049de <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81049ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81049d2:	4618      	mov	r0, r3
 81049d4:	f000 fd5e 	bl	8105494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81049d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81049da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049dc:	e293      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049de:	2300      	movs	r3, #0
 81049e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81049e2:	e290      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81049e4:	4b76      	ldr	r3, [pc, #472]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81049e6:	681b      	ldr	r3, [r3, #0]
 81049e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81049ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81049f0:	d107      	bne.n	8104a02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81049f2:	f107 0318 	add.w	r3, r7, #24
 81049f6:	4618      	mov	r0, r3
 81049f8:	f000 faa4 	bl	8104f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81049fc:	69bb      	ldr	r3, [r7, #24]
 81049fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a00:	e281      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a02:	2300      	movs	r3, #0
 8104a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a06:	e27e      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104a08:	4b6d      	ldr	r3, [pc, #436]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a0a:	681b      	ldr	r3, [r3, #0]
 8104a0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104a14:	d107      	bne.n	8104a26 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104a16:	f107 030c 	add.w	r3, r7, #12
 8104a1a:	4618      	mov	r0, r3
 8104a1c:	f000 fbe6 	bl	81051ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104a20:	68fb      	ldr	r3, [r7, #12]
 8104a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a24:	e26f      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a26:	2300      	movs	r3, #0
 8104a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a2a:	e26c      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104a2c:	4b64      	ldr	r3, [pc, #400]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104a30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104a34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104a36:	4b62      	ldr	r3, [pc, #392]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	f003 0304 	and.w	r3, r3, #4
 8104a3e:	2b04      	cmp	r3, #4
 8104a40:	d10c      	bne.n	8104a5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8104a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104a44:	2b00      	cmp	r3, #0
 8104a46:	d109      	bne.n	8104a5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a48:	4b5d      	ldr	r3, [pc, #372]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	08db      	lsrs	r3, r3, #3
 8104a4e:	f003 0303 	and.w	r3, r3, #3
 8104a52:	4a5c      	ldr	r2, [pc, #368]	@ (8104bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104a54:	fa22 f303 	lsr.w	r3, r2, r3
 8104a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a5a:	e01e      	b.n	8104a9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104a5c:	4b58      	ldr	r3, [pc, #352]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a68:	d106      	bne.n	8104a78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8104a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104a70:	d102      	bne.n	8104a78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104a72:	4b55      	ldr	r3, [pc, #340]	@ (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a76:	e010      	b.n	8104a9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104a78:	4b51      	ldr	r3, [pc, #324]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104a84:	d106      	bne.n	8104a94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8104a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104a8c:	d102      	bne.n	8104a94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104a8e:	4b4f      	ldr	r3, [pc, #316]	@ (8104bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a92:	e002      	b.n	8104a9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104a94:	2300      	movs	r3, #0
 8104a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104a98:	e235      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104a9a:	e234      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8104bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8104a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104aa0:	e231      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104aa2:	2300      	movs	r3, #0
 8104aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104aa6:	e22e      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8104aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104aac:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8104ab0:	430b      	orrs	r3, r1
 8104ab2:	f040 808f 	bne.w	8104bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8104ab6:	4b42      	ldr	r3, [pc, #264]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104aba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8104abe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8104ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ac2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104ac6:	d06b      	beq.n	8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8104ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104aca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104ace:	d874      	bhi.n	8104bba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ad2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104ad6:	d056      	beq.n	8104b86 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8104ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104ade:	d86c      	bhi.n	8104bba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ae2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104ae6:	d03b      	beq.n	8104b60 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8104ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104aea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104aee:	d864      	bhi.n	8104bba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104af6:	d021      	beq.n	8104b3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8104af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104afa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104afe:	d85c      	bhi.n	8104bba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b02:	2b00      	cmp	r3, #0
 8104b04:	d004      	beq.n	8104b10 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8104b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104b0c:	d004      	beq.n	8104b18 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8104b0e:	e054      	b.n	8104bba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8104b10:	f7fe f9e0 	bl	8102ed4 <HAL_RCC_GetPCLK1Freq>
 8104b14:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104b16:	e1f6      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104b18:	4b29      	ldr	r3, [pc, #164]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104b20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104b24:	d107      	bne.n	8104b36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104b26:	f107 0318 	add.w	r3, r7, #24
 8104b2a:	4618      	mov	r0, r3
 8104b2c:	f000 fa0a 	bl	8104f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104b30:	69fb      	ldr	r3, [r7, #28]
 8104b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b34:	e1e7      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b36:	2300      	movs	r3, #0
 8104b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b3a:	e1e4      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104b3c:	4b20      	ldr	r3, [pc, #128]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104b48:	d107      	bne.n	8104b5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104b4a:	f107 030c 	add.w	r3, r7, #12
 8104b4e:	4618      	mov	r0, r3
 8104b50:	f000 fb4c 	bl	81051ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104b54:	693b      	ldr	r3, [r7, #16]
 8104b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b58:	e1d5      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b5a:	2300      	movs	r3, #0
 8104b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b5e:	e1d2      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104b60:	4b17      	ldr	r3, [pc, #92]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b62:	681b      	ldr	r3, [r3, #0]
 8104b64:	f003 0304 	and.w	r3, r3, #4
 8104b68:	2b04      	cmp	r3, #4
 8104b6a:	d109      	bne.n	8104b80 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104b6c:	4b14      	ldr	r3, [pc, #80]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b6e:	681b      	ldr	r3, [r3, #0]
 8104b70:	08db      	lsrs	r3, r3, #3
 8104b72:	f003 0303 	and.w	r3, r3, #3
 8104b76:	4a13      	ldr	r2, [pc, #76]	@ (8104bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104b78:	fa22 f303 	lsr.w	r3, r2, r3
 8104b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b7e:	e1c2      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b80:	2300      	movs	r3, #0
 8104b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b84:	e1bf      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8104b86:	4b0e      	ldr	r3, [pc, #56]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b88:	681b      	ldr	r3, [r3, #0]
 8104b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104b92:	d102      	bne.n	8104b9a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8104b94:	4b0c      	ldr	r3, [pc, #48]	@ (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b98:	e1b5      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b9a:	2300      	movs	r3, #0
 8104b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b9e:	e1b2      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104ba0:	4b07      	ldr	r3, [pc, #28]	@ (8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104ba2:	681b      	ldr	r3, [r3, #0]
 8104ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104bac:	d102      	bne.n	8104bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8104bae:	4b07      	ldr	r3, [pc, #28]	@ (8104bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104bb2:	e1a8      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104bb4:	2300      	movs	r3, #0
 8104bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104bb8:	e1a5      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104bba:	2300      	movs	r3, #0
 8104bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104bbe:	e1a2      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104bc0:	58024400 	.word	0x58024400
 8104bc4:	03d09000 	.word	0x03d09000
 8104bc8:	003d0900 	.word	0x003d0900
 8104bcc:	017d7840 	.word	0x017d7840
 8104bd0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8104bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104bd8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8104bdc:	430b      	orrs	r3, r1
 8104bde:	d173      	bne.n	8104cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8104be0:	4b9c      	ldr	r3, [pc, #624]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104be8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104bec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104bf0:	d02f      	beq.n	8104c52 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8104bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104bf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104bf8:	d863      	bhi.n	8104cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8104bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104bfc:	2b00      	cmp	r3, #0
 8104bfe:	d004      	beq.n	8104c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8104c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104c06:	d012      	beq.n	8104c2e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8104c08:	e05b      	b.n	8104cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104c0a:	4b92      	ldr	r3, [pc, #584]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c0c:	681b      	ldr	r3, [r3, #0]
 8104c0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104c12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104c16:	d107      	bne.n	8104c28 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104c18:	f107 0318 	add.w	r3, r7, #24
 8104c1c:	4618      	mov	r0, r3
 8104c1e:	f000 f991 	bl	8104f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104c22:	69bb      	ldr	r3, [r7, #24]
 8104c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c26:	e16e      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c28:	2300      	movs	r3, #0
 8104c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c2c:	e16b      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104c2e:	4b89      	ldr	r3, [pc, #548]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104c3a:	d107      	bne.n	8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104c3c:	f107 030c 	add.w	r3, r7, #12
 8104c40:	4618      	mov	r0, r3
 8104c42:	f000 fad3 	bl	81051ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8104c46:	697b      	ldr	r3, [r7, #20]
 8104c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c4a:	e15c      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c4c:	2300      	movs	r3, #0
 8104c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c50:	e159      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104c52:	4b80      	ldr	r3, [pc, #512]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104c56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104c5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104c5c:	4b7d      	ldr	r3, [pc, #500]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	f003 0304 	and.w	r3, r3, #4
 8104c64:	2b04      	cmp	r3, #4
 8104c66:	d10c      	bne.n	8104c82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8104c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104c6a:	2b00      	cmp	r3, #0
 8104c6c:	d109      	bne.n	8104c82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104c6e:	4b79      	ldr	r3, [pc, #484]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c70:	681b      	ldr	r3, [r3, #0]
 8104c72:	08db      	lsrs	r3, r3, #3
 8104c74:	f003 0303 	and.w	r3, r3, #3
 8104c78:	4a77      	ldr	r2, [pc, #476]	@ (8104e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8104c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104c80:	e01e      	b.n	8104cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104c82:	4b74      	ldr	r3, [pc, #464]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c84:	681b      	ldr	r3, [r3, #0]
 8104c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104c8e:	d106      	bne.n	8104c9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8104c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104c92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104c96:	d102      	bne.n	8104c9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104c98:	4b70      	ldr	r3, [pc, #448]	@ (8104e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104c9c:	e010      	b.n	8104cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ca0:	681b      	ldr	r3, [r3, #0]
 8104ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104ca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104caa:	d106      	bne.n	8104cba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8104cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104cb2:	d102      	bne.n	8104cba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8104e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104cb8:	e002      	b.n	8104cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104cba:	2300      	movs	r3, #0
 8104cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104cbe:	e122      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104cc0:	e121      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104cc2:	2300      	movs	r3, #0
 8104cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104cc6:	e11e      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8104cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104ccc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8104cd0:	430b      	orrs	r3, r1
 8104cd2:	d133      	bne.n	8104d3c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8104cd4:	4b5f      	ldr	r3, [pc, #380]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104cdc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ce0:	2b00      	cmp	r3, #0
 8104ce2:	d004      	beq.n	8104cee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8104ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104cea:	d012      	beq.n	8104d12 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8104cec:	e023      	b.n	8104d36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104cee:	4b59      	ldr	r3, [pc, #356]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104cf0:	681b      	ldr	r3, [r3, #0]
 8104cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104cf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104cfa:	d107      	bne.n	8104d0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104d00:	4618      	mov	r0, r3
 8104d02:	f000 fbc7 	bl	8105494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104d0a:	e0fc      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104d0c:	2300      	movs	r3, #0
 8104d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d10:	e0f9      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104d12:	4b50      	ldr	r3, [pc, #320]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104d14:	681b      	ldr	r3, [r3, #0]
 8104d16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104d1e:	d107      	bne.n	8104d30 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104d20:	f107 0318 	add.w	r3, r7, #24
 8104d24:	4618      	mov	r0, r3
 8104d26:	f000 f90d 	bl	8104f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8104d2a:	6a3b      	ldr	r3, [r7, #32]
 8104d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104d2e:	e0ea      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104d30:	2300      	movs	r3, #0
 8104d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d34:	e0e7      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104d36:	2300      	movs	r3, #0
 8104d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d3a:	e0e4      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8104d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104d40:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8104d44:	430b      	orrs	r3, r1
 8104d46:	f040 808d 	bne.w	8104e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8104d4a:	4b42      	ldr	r3, [pc, #264]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104d4e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8104d52:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104d5a:	d06b      	beq.n	8104e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8104d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104d62:	d874      	bhi.n	8104e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104d6a:	d056      	beq.n	8104e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8104d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104d72:	d86c      	bhi.n	8104e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104d7a:	d03b      	beq.n	8104df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8104d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104d82:	d864      	bhi.n	8104e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104d8a:	d021      	beq.n	8104dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8104d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104d92:	d85c      	bhi.n	8104e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d96:	2b00      	cmp	r3, #0
 8104d98:	d004      	beq.n	8104da4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8104d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104da0:	d004      	beq.n	8104dac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8104da2:	e054      	b.n	8104e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8104da4:	f000 f8b8 	bl	8104f18 <HAL_RCCEx_GetD3PCLK1Freq>
 8104da8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104daa:	e0ac      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104dac:	4b29      	ldr	r3, [pc, #164]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104dae:	681b      	ldr	r3, [r3, #0]
 8104db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104db8:	d107      	bne.n	8104dca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104dba:	f107 0318 	add.w	r3, r7, #24
 8104dbe:	4618      	mov	r0, r3
 8104dc0:	f000 f8c0 	bl	8104f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104dc4:	69fb      	ldr	r3, [r7, #28]
 8104dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dc8:	e09d      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104dca:	2300      	movs	r3, #0
 8104dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104dce:	e09a      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104dd0:	4b20      	ldr	r3, [pc, #128]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104dd2:	681b      	ldr	r3, [r3, #0]
 8104dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104ddc:	d107      	bne.n	8104dee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104dde:	f107 030c 	add.w	r3, r7, #12
 8104de2:	4618      	mov	r0, r3
 8104de4:	f000 fa02 	bl	81051ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104de8:	693b      	ldr	r3, [r7, #16]
 8104dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dec:	e08b      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104dee:	2300      	movs	r3, #0
 8104df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104df2:	e088      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104df4:	4b17      	ldr	r3, [pc, #92]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104df6:	681b      	ldr	r3, [r3, #0]
 8104df8:	f003 0304 	and.w	r3, r3, #4
 8104dfc:	2b04      	cmp	r3, #4
 8104dfe:	d109      	bne.n	8104e14 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104e00:	4b14      	ldr	r3, [pc, #80]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e02:	681b      	ldr	r3, [r3, #0]
 8104e04:	08db      	lsrs	r3, r3, #3
 8104e06:	f003 0303 	and.w	r3, r3, #3
 8104e0a:	4a13      	ldr	r2, [pc, #76]	@ (8104e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8104e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e12:	e078      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e14:	2300      	movs	r3, #0
 8104e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e18:	e075      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8104e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e1c:	681b      	ldr	r3, [r3, #0]
 8104e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104e26:	d102      	bne.n	8104e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8104e28:	4b0c      	ldr	r3, [pc, #48]	@ (8104e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e2c:	e06b      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e2e:	2300      	movs	r3, #0
 8104e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e32:	e068      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104e34:	4b07      	ldr	r3, [pc, #28]	@ (8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e36:	681b      	ldr	r3, [r3, #0]
 8104e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104e40:	d102      	bne.n	8104e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8104e42:	4b07      	ldr	r3, [pc, #28]	@ (8104e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e46:	e05e      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e48:	2300      	movs	r3, #0
 8104e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e4c:	e05b      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8104e4e:	2300      	movs	r3, #0
 8104e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e52:	e058      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104e54:	58024400 	.word	0x58024400
 8104e58:	03d09000 	.word	0x03d09000
 8104e5c:	003d0900 	.word	0x003d0900
 8104e60:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8104e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104e68:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8104e6c:	430b      	orrs	r3, r1
 8104e6e:	d148      	bne.n	8104f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8104e70:	4b27      	ldr	r3, [pc, #156]	@ (8104f10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104e78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104e80:	d02a      	beq.n	8104ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8104e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104e88:	d838      	bhi.n	8104efc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8104e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e8c:	2b00      	cmp	r3, #0
 8104e8e:	d004      	beq.n	8104e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8104e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104e96:	d00d      	beq.n	8104eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8104e98:	e030      	b.n	8104efc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8104f10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104ea2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104ea6:	d102      	bne.n	8104eae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8104ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8104eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104eac:	e02b      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104eae:	2300      	movs	r3, #0
 8104eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104eb2:	e028      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104eb4:	4b16      	ldr	r3, [pc, #88]	@ (8104f10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104ebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104ec0:	d107      	bne.n	8104ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104ec6:	4618      	mov	r0, r3
 8104ec8:	f000 fae4 	bl	8105494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ed0:	e019      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ed2:	2300      	movs	r3, #0
 8104ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ed6:	e016      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8104f10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104eda:	681b      	ldr	r3, [r3, #0]
 8104edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104ee0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104ee4:	d107      	bne.n	8104ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104ee6:	f107 0318 	add.w	r3, r7, #24
 8104eea:	4618      	mov	r0, r3
 8104eec:	f000 f82a 	bl	8104f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104ef0:	69fb      	ldr	r3, [r7, #28]
 8104ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ef4:	e007      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ef6:	2300      	movs	r3, #0
 8104ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104efa:	e004      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104efc:	2300      	movs	r3, #0
 8104efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f00:	e001      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8104f02:	2300      	movs	r3, #0
 8104f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8104f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8104f08:	4618      	mov	r0, r3
 8104f0a:	3740      	adds	r7, #64	@ 0x40
 8104f0c:	46bd      	mov	sp, r7
 8104f0e:	bd80      	pop	{r7, pc}
 8104f10:	58024400 	.word	0x58024400
 8104f14:	017d7840 	.word	0x017d7840

08104f18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104f18:	b580      	push	{r7, lr}
 8104f1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104f1c:	f7fd ffa8 	bl	8102e70 <HAL_RCC_GetHCLKFreq>
 8104f20:	4602      	mov	r2, r0
 8104f22:	4b06      	ldr	r3, [pc, #24]	@ (8104f3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104f24:	6a1b      	ldr	r3, [r3, #32]
 8104f26:	091b      	lsrs	r3, r3, #4
 8104f28:	f003 0307 	and.w	r3, r3, #7
 8104f2c:	4904      	ldr	r1, [pc, #16]	@ (8104f40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104f2e:	5ccb      	ldrb	r3, [r1, r3]
 8104f30:	f003 031f 	and.w	r3, r3, #31
 8104f34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104f38:	4618      	mov	r0, r3
 8104f3a:	bd80      	pop	{r7, pc}
 8104f3c:	58024400 	.word	0x58024400
 8104f40:	08108940 	.word	0x08108940

08104f44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8104f44:	b480      	push	{r7}
 8104f46:	b089      	sub	sp, #36	@ 0x24
 8104f48:	af00      	add	r7, sp, #0
 8104f4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104f4c:	4ba1      	ldr	r3, [pc, #644]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104f50:	f003 0303 	and.w	r3, r3, #3
 8104f54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8104f56:	4b9f      	ldr	r3, [pc, #636]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104f5a:	0b1b      	lsrs	r3, r3, #12
 8104f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104f60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104f62:	4b9c      	ldr	r3, [pc, #624]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104f66:	091b      	lsrs	r3, r3, #4
 8104f68:	f003 0301 	and.w	r3, r3, #1
 8104f6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8104f6e:	4b99      	ldr	r3, [pc, #612]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104f72:	08db      	lsrs	r3, r3, #3
 8104f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104f78:	693a      	ldr	r2, [r7, #16]
 8104f7a:	fb02 f303 	mul.w	r3, r2, r3
 8104f7e:	ee07 3a90 	vmov	s15, r3
 8104f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104f8a:	697b      	ldr	r3, [r7, #20]
 8104f8c:	2b00      	cmp	r3, #0
 8104f8e:	f000 8111 	beq.w	81051b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104f92:	69bb      	ldr	r3, [r7, #24]
 8104f94:	2b02      	cmp	r3, #2
 8104f96:	f000 8083 	beq.w	81050a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104f9a:	69bb      	ldr	r3, [r7, #24]
 8104f9c:	2b02      	cmp	r3, #2
 8104f9e:	f200 80a1 	bhi.w	81050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104fa2:	69bb      	ldr	r3, [r7, #24]
 8104fa4:	2b00      	cmp	r3, #0
 8104fa6:	d003      	beq.n	8104fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104fa8:	69bb      	ldr	r3, [r7, #24]
 8104faa:	2b01      	cmp	r3, #1
 8104fac:	d056      	beq.n	810505c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104fae:	e099      	b.n	81050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104fb0:	4b88      	ldr	r3, [pc, #544]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104fb2:	681b      	ldr	r3, [r3, #0]
 8104fb4:	f003 0320 	and.w	r3, r3, #32
 8104fb8:	2b00      	cmp	r3, #0
 8104fba:	d02d      	beq.n	8105018 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104fbc:	4b85      	ldr	r3, [pc, #532]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104fbe:	681b      	ldr	r3, [r3, #0]
 8104fc0:	08db      	lsrs	r3, r3, #3
 8104fc2:	f003 0303 	and.w	r3, r3, #3
 8104fc6:	4a84      	ldr	r2, [pc, #528]	@ (81051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8104fcc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104fce:	68bb      	ldr	r3, [r7, #8]
 8104fd0:	ee07 3a90 	vmov	s15, r3
 8104fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104fd8:	697b      	ldr	r3, [r7, #20]
 8104fda:	ee07 3a90 	vmov	s15, r3
 8104fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104fe6:	4b7b      	ldr	r3, [pc, #492]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104fee:	ee07 3a90 	vmov	s15, r3
 8104ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ffa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81051dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810500a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810500e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105012:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105016:	e087      	b.n	8105128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105018:	697b      	ldr	r3, [r7, #20]
 810501a:	ee07 3a90 	vmov	s15, r3
 810501e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105022:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810502a:	4b6a      	ldr	r3, [pc, #424]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810502e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105032:	ee07 3a90 	vmov	s15, r3
 8105036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810503a:	ed97 6a03 	vldr	s12, [r7, #12]
 810503e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81051dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810504a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810504e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810505a:	e065      	b.n	8105128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810505c:	697b      	ldr	r3, [r7, #20]
 810505e:	ee07 3a90 	vmov	s15, r3
 8105062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105066:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81051e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810506a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810506e:	4b59      	ldr	r3, [pc, #356]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105076:	ee07 3a90 	vmov	s15, r3
 810507a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810507e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105082:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81051dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810508a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810508e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105096:	ee67 7a27 	vmul.f32	s15, s14, s15
 810509a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810509e:	e043      	b.n	8105128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81050a0:	697b      	ldr	r3, [r7, #20]
 81050a2:	ee07 3a90 	vmov	s15, r3
 81050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81050ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050b2:	4b48      	ldr	r3, [pc, #288]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81050b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81050b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050ba:	ee07 3a90 	vmov	s15, r3
 81050be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81050c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81051dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81050ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81050d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81050e2:	e021      	b.n	8105128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81050e4:	697b      	ldr	r3, [r7, #20]
 81050e6:	ee07 3a90 	vmov	s15, r3
 81050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81051e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81050f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050f6:	4b37      	ldr	r3, [pc, #220]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81050f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81050fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050fe:	ee07 3a90 	vmov	s15, r3
 8105102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105106:	ed97 6a03 	vldr	s12, [r7, #12]
 810510a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81051dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810510e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810511a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810511e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105126:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105128:	4b2a      	ldr	r3, [pc, #168]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810512c:	0a5b      	lsrs	r3, r3, #9
 810512e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105132:	ee07 3a90 	vmov	s15, r3
 8105136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810513a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810513e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105142:	edd7 6a07 	vldr	s13, [r7, #28]
 8105146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810514a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810514e:	ee17 2a90 	vmov	r2, s15
 8105152:	687b      	ldr	r3, [r7, #4]
 8105154:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105156:	4b1f      	ldr	r3, [pc, #124]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810515a:	0c1b      	lsrs	r3, r3, #16
 810515c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105160:	ee07 3a90 	vmov	s15, r3
 8105164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105168:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810516c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105170:	edd7 6a07 	vldr	s13, [r7, #28]
 8105174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810517c:	ee17 2a90 	vmov	r2, s15
 8105180:	687b      	ldr	r3, [r7, #4]
 8105182:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105184:	4b13      	ldr	r3, [pc, #76]	@ (81051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105188:	0e1b      	lsrs	r3, r3, #24
 810518a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810518e:	ee07 3a90 	vmov	s15, r3
 8105192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105196:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810519a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810519e:	edd7 6a07 	vldr	s13, [r7, #28]
 81051a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81051a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81051aa:	ee17 2a90 	vmov	r2, s15
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81051b2:	e008      	b.n	81051c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	2200      	movs	r2, #0
 81051b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81051ba:	687b      	ldr	r3, [r7, #4]
 81051bc:	2200      	movs	r2, #0
 81051be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81051c0:	687b      	ldr	r3, [r7, #4]
 81051c2:	2200      	movs	r2, #0
 81051c4:	609a      	str	r2, [r3, #8]
}
 81051c6:	bf00      	nop
 81051c8:	3724      	adds	r7, #36	@ 0x24
 81051ca:	46bd      	mov	sp, r7
 81051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051d0:	4770      	bx	lr
 81051d2:	bf00      	nop
 81051d4:	58024400 	.word	0x58024400
 81051d8:	03d09000 	.word	0x03d09000
 81051dc:	46000000 	.word	0x46000000
 81051e0:	4c742400 	.word	0x4c742400
 81051e4:	4a742400 	.word	0x4a742400
 81051e8:	4bbebc20 	.word	0x4bbebc20

081051ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81051ec:	b480      	push	{r7}
 81051ee:	b089      	sub	sp, #36	@ 0x24
 81051f0:	af00      	add	r7, sp, #0
 81051f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81051f4:	4ba1      	ldr	r3, [pc, #644]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81051f8:	f003 0303 	and.w	r3, r3, #3
 81051fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81051fe:	4b9f      	ldr	r3, [pc, #636]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105202:	0d1b      	lsrs	r3, r3, #20
 8105204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105208:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810520a:	4b9c      	ldr	r3, [pc, #624]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810520c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810520e:	0a1b      	lsrs	r3, r3, #8
 8105210:	f003 0301 	and.w	r3, r3, #1
 8105214:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105216:	4b99      	ldr	r3, [pc, #612]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810521a:	08db      	lsrs	r3, r3, #3
 810521c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105220:	693a      	ldr	r2, [r7, #16]
 8105222:	fb02 f303 	mul.w	r3, r2, r3
 8105226:	ee07 3a90 	vmov	s15, r3
 810522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810522e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105232:	697b      	ldr	r3, [r7, #20]
 8105234:	2b00      	cmp	r3, #0
 8105236:	f000 8111 	beq.w	810545c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810523a:	69bb      	ldr	r3, [r7, #24]
 810523c:	2b02      	cmp	r3, #2
 810523e:	f000 8083 	beq.w	8105348 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105242:	69bb      	ldr	r3, [r7, #24]
 8105244:	2b02      	cmp	r3, #2
 8105246:	f200 80a1 	bhi.w	810538c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810524a:	69bb      	ldr	r3, [r7, #24]
 810524c:	2b00      	cmp	r3, #0
 810524e:	d003      	beq.n	8105258 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105250:	69bb      	ldr	r3, [r7, #24]
 8105252:	2b01      	cmp	r3, #1
 8105254:	d056      	beq.n	8105304 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105256:	e099      	b.n	810538c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105258:	4b88      	ldr	r3, [pc, #544]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810525a:	681b      	ldr	r3, [r3, #0]
 810525c:	f003 0320 	and.w	r3, r3, #32
 8105260:	2b00      	cmp	r3, #0
 8105262:	d02d      	beq.n	81052c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105264:	4b85      	ldr	r3, [pc, #532]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105266:	681b      	ldr	r3, [r3, #0]
 8105268:	08db      	lsrs	r3, r3, #3
 810526a:	f003 0303 	and.w	r3, r3, #3
 810526e:	4a84      	ldr	r2, [pc, #528]	@ (8105480 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105270:	fa22 f303 	lsr.w	r3, r2, r3
 8105274:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105276:	68bb      	ldr	r3, [r7, #8]
 8105278:	ee07 3a90 	vmov	s15, r3
 810527c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105280:	697b      	ldr	r3, [r7, #20]
 8105282:	ee07 3a90 	vmov	s15, r3
 8105286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810528a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810528e:	4b7b      	ldr	r3, [pc, #492]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105296:	ee07 3a90 	vmov	s15, r3
 810529a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810529e:	ed97 6a03 	vldr	s12, [r7, #12]
 81052a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81052a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81052b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81052be:	e087      	b.n	81053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81052c0:	697b      	ldr	r3, [r7, #20]
 81052c2:	ee07 3a90 	vmov	s15, r3
 81052c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105488 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81052ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052d2:	4b6a      	ldr	r3, [pc, #424]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81052d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052da:	ee07 3a90 	vmov	s15, r3
 81052de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81052e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81052ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81052f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105302:	e065      	b.n	81053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105304:	697b      	ldr	r3, [r7, #20]
 8105306:	ee07 3a90 	vmov	s15, r3
 810530a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810530e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810548c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105316:	4b59      	ldr	r3, [pc, #356]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810531a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810531e:	ee07 3a90 	vmov	s15, r3
 8105322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105326:	ed97 6a03 	vldr	s12, [r7, #12]
 810532a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810532e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810533a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810533e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105346:	e043      	b.n	81053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105348:	697b      	ldr	r3, [r7, #20]
 810534a:	ee07 3a90 	vmov	s15, r3
 810534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105352:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810535a:	4b48      	ldr	r3, [pc, #288]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810535e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105362:	ee07 3a90 	vmov	s15, r3
 8105366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810536a:	ed97 6a03 	vldr	s12, [r7, #12]
 810536e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810537a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810537e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810538a:	e021      	b.n	81053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810538c:	697b      	ldr	r3, [r7, #20]
 810538e:	ee07 3a90 	vmov	s15, r3
 8105392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105396:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810548c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810539a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810539e:	4b37      	ldr	r3, [pc, #220]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81053a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053a6:	ee07 3a90 	vmov	s15, r3
 81053aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81053ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81053b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81053b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81053ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81053be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81053c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81053ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81053d0:	4b2a      	ldr	r3, [pc, #168]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81053d4:	0a5b      	lsrs	r3, r3, #9
 81053d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81053da:	ee07 3a90 	vmov	s15, r3
 81053de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81053e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053ea:	edd7 6a07 	vldr	s13, [r7, #28]
 81053ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053f6:	ee17 2a90 	vmov	r2, s15
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81053fe:	4b1f      	ldr	r3, [pc, #124]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105402:	0c1b      	lsrs	r3, r3, #16
 8105404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105408:	ee07 3a90 	vmov	s15, r3
 810540c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105410:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105418:	edd7 6a07 	vldr	s13, [r7, #28]
 810541c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105424:	ee17 2a90 	vmov	r2, s15
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810542c:	4b13      	ldr	r3, [pc, #76]	@ (810547c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810542e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105430:	0e1b      	lsrs	r3, r3, #24
 8105432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105436:	ee07 3a90 	vmov	s15, r3
 810543a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810543e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105446:	edd7 6a07 	vldr	s13, [r7, #28]
 810544a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810544e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105452:	ee17 2a90 	vmov	r2, s15
 8105456:	687b      	ldr	r3, [r7, #4]
 8105458:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810545a:	e008      	b.n	810546e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	2200      	movs	r2, #0
 8105460:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	2200      	movs	r2, #0
 8105466:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	2200      	movs	r2, #0
 810546c:	609a      	str	r2, [r3, #8]
}
 810546e:	bf00      	nop
 8105470:	3724      	adds	r7, #36	@ 0x24
 8105472:	46bd      	mov	sp, r7
 8105474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105478:	4770      	bx	lr
 810547a:	bf00      	nop
 810547c:	58024400 	.word	0x58024400
 8105480:	03d09000 	.word	0x03d09000
 8105484:	46000000 	.word	0x46000000
 8105488:	4c742400 	.word	0x4c742400
 810548c:	4a742400 	.word	0x4a742400
 8105490:	4bbebc20 	.word	0x4bbebc20

08105494 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8105494:	b480      	push	{r7}
 8105496:	b089      	sub	sp, #36	@ 0x24
 8105498:	af00      	add	r7, sp, #0
 810549a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810549c:	4ba0      	ldr	r3, [pc, #640]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810549e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81054a0:	f003 0303 	and.w	r3, r3, #3
 81054a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81054a6:	4b9e      	ldr	r3, [pc, #632]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81054a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81054aa:	091b      	lsrs	r3, r3, #4
 81054ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81054b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81054b2:	4b9b      	ldr	r3, [pc, #620]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81054b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81054b6:	f003 0301 	and.w	r3, r3, #1
 81054ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81054bc:	4b98      	ldr	r3, [pc, #608]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81054be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81054c0:	08db      	lsrs	r3, r3, #3
 81054c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81054c6:	693a      	ldr	r2, [r7, #16]
 81054c8:	fb02 f303 	mul.w	r3, r2, r3
 81054cc:	ee07 3a90 	vmov	s15, r3
 81054d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81054d8:	697b      	ldr	r3, [r7, #20]
 81054da:	2b00      	cmp	r3, #0
 81054dc:	f000 8111 	beq.w	8105702 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81054e0:	69bb      	ldr	r3, [r7, #24]
 81054e2:	2b02      	cmp	r3, #2
 81054e4:	f000 8083 	beq.w	81055ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81054e8:	69bb      	ldr	r3, [r7, #24]
 81054ea:	2b02      	cmp	r3, #2
 81054ec:	f200 80a1 	bhi.w	8105632 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81054f0:	69bb      	ldr	r3, [r7, #24]
 81054f2:	2b00      	cmp	r3, #0
 81054f4:	d003      	beq.n	81054fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81054f6:	69bb      	ldr	r3, [r7, #24]
 81054f8:	2b01      	cmp	r3, #1
 81054fa:	d056      	beq.n	81055aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81054fc:	e099      	b.n	8105632 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81054fe:	4b88      	ldr	r3, [pc, #544]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105500:	681b      	ldr	r3, [r3, #0]
 8105502:	f003 0320 	and.w	r3, r3, #32
 8105506:	2b00      	cmp	r3, #0
 8105508:	d02d      	beq.n	8105566 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810550a:	4b85      	ldr	r3, [pc, #532]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810550c:	681b      	ldr	r3, [r3, #0]
 810550e:	08db      	lsrs	r3, r3, #3
 8105510:	f003 0303 	and.w	r3, r3, #3
 8105514:	4a83      	ldr	r2, [pc, #524]	@ (8105724 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105516:	fa22 f303 	lsr.w	r3, r2, r3
 810551a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810551c:	68bb      	ldr	r3, [r7, #8]
 810551e:	ee07 3a90 	vmov	s15, r3
 8105522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105526:	697b      	ldr	r3, [r7, #20]
 8105528:	ee07 3a90 	vmov	s15, r3
 810552c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105534:	4b7a      	ldr	r3, [pc, #488]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810553c:	ee07 3a90 	vmov	s15, r3
 8105540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105544:	ed97 6a03 	vldr	s12, [r7, #12]
 8105548:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8105728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810554c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105554:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810555c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105560:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105564:	e087      	b.n	8105676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105566:	697b      	ldr	r3, [r7, #20]
 8105568:	ee07 3a90 	vmov	s15, r3
 810556c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105570:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810572c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105578:	4b69      	ldr	r3, [pc, #420]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810557a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810557c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105580:	ee07 3a90 	vmov	s15, r3
 8105584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105588:	ed97 6a03 	vldr	s12, [r7, #12]
 810558c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8105728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810559c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81055a8:	e065      	b.n	8105676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81055aa:	697b      	ldr	r3, [r7, #20]
 81055ac:	ee07 3a90 	vmov	s15, r3
 81055b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055b4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8105730 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81055b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055bc:	4b58      	ldr	r3, [pc, #352]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81055be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055c4:	ee07 3a90 	vmov	s15, r3
 81055c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055cc:	ed97 6a03 	vldr	s12, [r7, #12]
 81055d0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8105728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81055d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81055e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81055ec:	e043      	b.n	8105676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81055ee:	697b      	ldr	r3, [r7, #20]
 81055f0:	ee07 3a90 	vmov	s15, r3
 81055f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055f8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8105734 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81055fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105600:	4b47      	ldr	r3, [pc, #284]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105608:	ee07 3a90 	vmov	s15, r3
 810560c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105610:	ed97 6a03 	vldr	s12, [r7, #12]
 8105614:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8105728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810561c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105620:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105628:	ee67 7a27 	vmul.f32	s15, s14, s15
 810562c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105630:	e021      	b.n	8105676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105632:	697b      	ldr	r3, [r7, #20]
 8105634:	ee07 3a90 	vmov	s15, r3
 8105638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810563c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810572c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105644:	4b36      	ldr	r3, [pc, #216]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810564c:	ee07 3a90 	vmov	s15, r3
 8105650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105654:	ed97 6a03 	vldr	s12, [r7, #12]
 8105658:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8105728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810565c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810566c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105674:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8105676:	4b2a      	ldr	r3, [pc, #168]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810567a:	0a5b      	lsrs	r3, r3, #9
 810567c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105680:	ee07 3a90 	vmov	s15, r3
 8105684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105688:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810568c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105690:	edd7 6a07 	vldr	s13, [r7, #28]
 8105694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810569c:	ee17 2a90 	vmov	r2, s15
 81056a0:	687b      	ldr	r3, [r7, #4]
 81056a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 81056a4:	4b1e      	ldr	r3, [pc, #120]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81056a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81056a8:	0c1b      	lsrs	r3, r3, #16
 81056aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81056ae:	ee07 3a90 	vmov	s15, r3
 81056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81056ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 81056be:	edd7 6a07 	vldr	s13, [r7, #28]
 81056c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81056c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81056ca:	ee17 2a90 	vmov	r2, s15
 81056ce:	687b      	ldr	r3, [r7, #4]
 81056d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 81056d2:	4b13      	ldr	r3, [pc, #76]	@ (8105720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81056d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81056d6:	0e1b      	lsrs	r3, r3, #24
 81056d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81056dc:	ee07 3a90 	vmov	s15, r3
 81056e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81056e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81056ec:	edd7 6a07 	vldr	s13, [r7, #28]
 81056f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81056f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81056f8:	ee17 2a90 	vmov	r2, s15
 81056fc:	687b      	ldr	r3, [r7, #4]
 81056fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105700:	e008      	b.n	8105714 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105702:	687b      	ldr	r3, [r7, #4]
 8105704:	2200      	movs	r2, #0
 8105706:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	2200      	movs	r2, #0
 810570c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	2200      	movs	r2, #0
 8105712:	609a      	str	r2, [r3, #8]
}
 8105714:	bf00      	nop
 8105716:	3724      	adds	r7, #36	@ 0x24
 8105718:	46bd      	mov	sp, r7
 810571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810571e:	4770      	bx	lr
 8105720:	58024400 	.word	0x58024400
 8105724:	03d09000 	.word	0x03d09000
 8105728:	46000000 	.word	0x46000000
 810572c:	4c742400 	.word	0x4c742400
 8105730:	4a742400 	.word	0x4a742400
 8105734:	4bbebc20 	.word	0x4bbebc20

08105738 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105738:	b580      	push	{r7, lr}
 810573a:	b084      	sub	sp, #16
 810573c:	af00      	add	r7, sp, #0
 810573e:	6078      	str	r0, [r7, #4]
 8105740:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105742:	2300      	movs	r3, #0
 8105744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105746:	4b54      	ldr	r3, [pc, #336]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810574a:	f003 0303 	and.w	r3, r3, #3
 810574e:	2b03      	cmp	r3, #3
 8105750:	d101      	bne.n	8105756 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105752:	2301      	movs	r3, #1
 8105754:	e09b      	b.n	810588e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105756:	4b50      	ldr	r3, [pc, #320]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	4a4f      	ldr	r2, [pc, #316]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 810575c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8105760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105762:	f7fc fbdf 	bl	8101f24 <HAL_GetTick>
 8105766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105768:	e008      	b.n	810577c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810576a:	f7fc fbdb 	bl	8101f24 <HAL_GetTick>
 810576e:	4602      	mov	r2, r0
 8105770:	68bb      	ldr	r3, [r7, #8]
 8105772:	1ad3      	subs	r3, r2, r3
 8105774:	2b02      	cmp	r3, #2
 8105776:	d901      	bls.n	810577c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105778:	2303      	movs	r3, #3
 810577a:	e088      	b.n	810588e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810577c:	4b46      	ldr	r3, [pc, #280]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 810577e:	681b      	ldr	r3, [r3, #0]
 8105780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105784:	2b00      	cmp	r3, #0
 8105786:	d1f0      	bne.n	810576a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105788:	4b43      	ldr	r3, [pc, #268]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 810578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810578c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8105790:	687b      	ldr	r3, [r7, #4]
 8105792:	681b      	ldr	r3, [r3, #0]
 8105794:	031b      	lsls	r3, r3, #12
 8105796:	4940      	ldr	r1, [pc, #256]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105798:	4313      	orrs	r3, r2
 810579a:	628b      	str	r3, [r1, #40]	@ 0x28
 810579c:	687b      	ldr	r3, [r7, #4]
 810579e:	685b      	ldr	r3, [r3, #4]
 81057a0:	3b01      	subs	r3, #1
 81057a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	689b      	ldr	r3, [r3, #8]
 81057aa:	3b01      	subs	r3, #1
 81057ac:	025b      	lsls	r3, r3, #9
 81057ae:	b29b      	uxth	r3, r3
 81057b0:	431a      	orrs	r2, r3
 81057b2:	687b      	ldr	r3, [r7, #4]
 81057b4:	68db      	ldr	r3, [r3, #12]
 81057b6:	3b01      	subs	r3, #1
 81057b8:	041b      	lsls	r3, r3, #16
 81057ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81057be:	431a      	orrs	r2, r3
 81057c0:	687b      	ldr	r3, [r7, #4]
 81057c2:	691b      	ldr	r3, [r3, #16]
 81057c4:	3b01      	subs	r3, #1
 81057c6:	061b      	lsls	r3, r3, #24
 81057c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81057cc:	4932      	ldr	r1, [pc, #200]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 81057ce:	4313      	orrs	r3, r2
 81057d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81057d2:	4b31      	ldr	r3, [pc, #196]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 81057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	695b      	ldr	r3, [r3, #20]
 81057de:	492e      	ldr	r1, [pc, #184]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 81057e0:	4313      	orrs	r3, r2
 81057e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81057e4:	4b2c      	ldr	r3, [pc, #176]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 81057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057e8:	f023 0220 	bic.w	r2, r3, #32
 81057ec:	687b      	ldr	r3, [r7, #4]
 81057ee:	699b      	ldr	r3, [r3, #24]
 81057f0:	4929      	ldr	r1, [pc, #164]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 81057f2:	4313      	orrs	r3, r2
 81057f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81057f6:	4b28      	ldr	r3, [pc, #160]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 81057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057fa:	4a27      	ldr	r2, [pc, #156]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 81057fc:	f023 0310 	bic.w	r3, r3, #16
 8105800:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105802:	4b25      	ldr	r3, [pc, #148]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810580a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810580e:	687a      	ldr	r2, [r7, #4]
 8105810:	69d2      	ldr	r2, [r2, #28]
 8105812:	00d2      	lsls	r2, r2, #3
 8105814:	4920      	ldr	r1, [pc, #128]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105816:	4313      	orrs	r3, r2
 8105818:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810581a:	4b1f      	ldr	r3, [pc, #124]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 810581c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810581e:	4a1e      	ldr	r2, [pc, #120]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105820:	f043 0310 	orr.w	r3, r3, #16
 8105824:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105826:	683b      	ldr	r3, [r7, #0]
 8105828:	2b00      	cmp	r3, #0
 810582a:	d106      	bne.n	810583a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810582c:	4b1a      	ldr	r3, [pc, #104]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 810582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105830:	4a19      	ldr	r2, [pc, #100]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105832:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8105836:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105838:	e00f      	b.n	810585a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810583a:	683b      	ldr	r3, [r7, #0]
 810583c:	2b01      	cmp	r3, #1
 810583e:	d106      	bne.n	810584e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105840:	4b15      	ldr	r3, [pc, #84]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105844:	4a14      	ldr	r2, [pc, #80]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810584a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810584c:	e005      	b.n	810585a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810584e:	4b12      	ldr	r3, [pc, #72]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105852:	4a11      	ldr	r2, [pc, #68]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105854:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105858:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810585a:	4b0f      	ldr	r3, [pc, #60]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	4a0e      	ldr	r2, [pc, #56]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105860:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8105864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105866:	f7fc fb5d 	bl	8101f24 <HAL_GetTick>
 810586a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810586c:	e008      	b.n	8105880 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810586e:	f7fc fb59 	bl	8101f24 <HAL_GetTick>
 8105872:	4602      	mov	r2, r0
 8105874:	68bb      	ldr	r3, [r7, #8]
 8105876:	1ad3      	subs	r3, r2, r3
 8105878:	2b02      	cmp	r3, #2
 810587a:	d901      	bls.n	8105880 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810587c:	2303      	movs	r3, #3
 810587e:	e006      	b.n	810588e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105880:	4b05      	ldr	r3, [pc, #20]	@ (8105898 <RCCEx_PLL2_Config+0x160>)
 8105882:	681b      	ldr	r3, [r3, #0]
 8105884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105888:	2b00      	cmp	r3, #0
 810588a:	d0f0      	beq.n	810586e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810588c:	7bfb      	ldrb	r3, [r7, #15]
}
 810588e:	4618      	mov	r0, r3
 8105890:	3710      	adds	r7, #16
 8105892:	46bd      	mov	sp, r7
 8105894:	bd80      	pop	{r7, pc}
 8105896:	bf00      	nop
 8105898:	58024400 	.word	0x58024400

0810589c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810589c:	b580      	push	{r7, lr}
 810589e:	b084      	sub	sp, #16
 81058a0:	af00      	add	r7, sp, #0
 81058a2:	6078      	str	r0, [r7, #4]
 81058a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81058a6:	2300      	movs	r3, #0
 81058a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81058aa:	4b54      	ldr	r3, [pc, #336]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81058ae:	f003 0303 	and.w	r3, r3, #3
 81058b2:	2b03      	cmp	r3, #3
 81058b4:	d101      	bne.n	81058ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81058b6:	2301      	movs	r3, #1
 81058b8:	e09b      	b.n	81059f2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81058ba:	4b50      	ldr	r3, [pc, #320]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	4a4f      	ldr	r2, [pc, #316]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81058c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81058c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81058c6:	f7fc fb2d 	bl	8101f24 <HAL_GetTick>
 81058ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81058cc:	e008      	b.n	81058e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81058ce:	f7fc fb29 	bl	8101f24 <HAL_GetTick>
 81058d2:	4602      	mov	r2, r0
 81058d4:	68bb      	ldr	r3, [r7, #8]
 81058d6:	1ad3      	subs	r3, r2, r3
 81058d8:	2b02      	cmp	r3, #2
 81058da:	d901      	bls.n	81058e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81058dc:	2303      	movs	r3, #3
 81058de:	e088      	b.n	81059f2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81058e0:	4b46      	ldr	r3, [pc, #280]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81058e2:	681b      	ldr	r3, [r3, #0]
 81058e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81058e8:	2b00      	cmp	r3, #0
 81058ea:	d1f0      	bne.n	81058ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81058ec:	4b43      	ldr	r3, [pc, #268]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81058ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81058f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81058f4:	687b      	ldr	r3, [r7, #4]
 81058f6:	681b      	ldr	r3, [r3, #0]
 81058f8:	051b      	lsls	r3, r3, #20
 81058fa:	4940      	ldr	r1, [pc, #256]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81058fc:	4313      	orrs	r3, r2
 81058fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8105900:	687b      	ldr	r3, [r7, #4]
 8105902:	685b      	ldr	r3, [r3, #4]
 8105904:	3b01      	subs	r3, #1
 8105906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810590a:	687b      	ldr	r3, [r7, #4]
 810590c:	689b      	ldr	r3, [r3, #8]
 810590e:	3b01      	subs	r3, #1
 8105910:	025b      	lsls	r3, r3, #9
 8105912:	b29b      	uxth	r3, r3
 8105914:	431a      	orrs	r2, r3
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	68db      	ldr	r3, [r3, #12]
 810591a:	3b01      	subs	r3, #1
 810591c:	041b      	lsls	r3, r3, #16
 810591e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8105922:	431a      	orrs	r2, r3
 8105924:	687b      	ldr	r3, [r7, #4]
 8105926:	691b      	ldr	r3, [r3, #16]
 8105928:	3b01      	subs	r3, #1
 810592a:	061b      	lsls	r3, r3, #24
 810592c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8105930:	4932      	ldr	r1, [pc, #200]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 8105932:	4313      	orrs	r3, r2
 8105934:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105936:	4b31      	ldr	r3, [pc, #196]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 8105938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810593a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	695b      	ldr	r3, [r3, #20]
 8105942:	492e      	ldr	r1, [pc, #184]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 8105944:	4313      	orrs	r3, r2
 8105946:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105948:	4b2c      	ldr	r3, [pc, #176]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 810594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810594c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	699b      	ldr	r3, [r3, #24]
 8105954:	4929      	ldr	r1, [pc, #164]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 8105956:	4313      	orrs	r3, r2
 8105958:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810595a:	4b28      	ldr	r3, [pc, #160]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 810595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810595e:	4a27      	ldr	r2, [pc, #156]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 8105960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8105964:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105966:	4b25      	ldr	r3, [pc, #148]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 8105968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810596a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810596e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8105972:	687a      	ldr	r2, [r7, #4]
 8105974:	69d2      	ldr	r2, [r2, #28]
 8105976:	00d2      	lsls	r2, r2, #3
 8105978:	4920      	ldr	r1, [pc, #128]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 810597a:	4313      	orrs	r3, r2
 810597c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810597e:	4b1f      	ldr	r3, [pc, #124]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 8105980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105982:	4a1e      	ldr	r2, [pc, #120]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 8105984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105988:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810598a:	683b      	ldr	r3, [r7, #0]
 810598c:	2b00      	cmp	r3, #0
 810598e:	d106      	bne.n	810599e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105990:	4b1a      	ldr	r3, [pc, #104]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 8105992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105994:	4a19      	ldr	r2, [pc, #100]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 8105996:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810599a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810599c:	e00f      	b.n	81059be <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810599e:	683b      	ldr	r3, [r7, #0]
 81059a0:	2b01      	cmp	r3, #1
 81059a2:	d106      	bne.n	81059b2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81059a4:	4b15      	ldr	r3, [pc, #84]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81059a8:	4a14      	ldr	r2, [pc, #80]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81059aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81059ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81059b0:	e005      	b.n	81059be <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81059b2:	4b12      	ldr	r3, [pc, #72]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81059b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81059b6:	4a11      	ldr	r2, [pc, #68]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81059b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81059bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81059be:	4b0f      	ldr	r3, [pc, #60]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81059c0:	681b      	ldr	r3, [r3, #0]
 81059c2:	4a0e      	ldr	r2, [pc, #56]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81059c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81059c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81059ca:	f7fc faab 	bl	8101f24 <HAL_GetTick>
 81059ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81059d0:	e008      	b.n	81059e4 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81059d2:	f7fc faa7 	bl	8101f24 <HAL_GetTick>
 81059d6:	4602      	mov	r2, r0
 81059d8:	68bb      	ldr	r3, [r7, #8]
 81059da:	1ad3      	subs	r3, r2, r3
 81059dc:	2b02      	cmp	r3, #2
 81059de:	d901      	bls.n	81059e4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81059e0:	2303      	movs	r3, #3
 81059e2:	e006      	b.n	81059f2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81059e4:	4b05      	ldr	r3, [pc, #20]	@ (81059fc <RCCEx_PLL3_Config+0x160>)
 81059e6:	681b      	ldr	r3, [r3, #0]
 81059e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81059ec:	2b00      	cmp	r3, #0
 81059ee:	d0f0      	beq.n	81059d2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81059f0:	7bfb      	ldrb	r3, [r7, #15]
}
 81059f2:	4618      	mov	r0, r3
 81059f4:	3710      	adds	r7, #16
 81059f6:	46bd      	mov	sp, r7
 81059f8:	bd80      	pop	{r7, pc}
 81059fa:	bf00      	nop
 81059fc:	58024400 	.word	0x58024400

08105a00 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8105a00:	b580      	push	{r7, lr}
 8105a02:	b084      	sub	sp, #16
 8105a04:	af00      	add	r7, sp, #0
 8105a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8105a08:	2301      	movs	r3, #1
 8105a0a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d073      	beq.n	8105afa <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8105a18:	b2db      	uxtb	r3, r3
 8105a1a:	2b00      	cmp	r3, #0
 8105a1c:	d106      	bne.n	8105a2c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	2200      	movs	r2, #0
 8105a22:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8105a26:	6878      	ldr	r0, [r7, #4]
 8105a28:	f7fb fda0 	bl	810156c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	2202      	movs	r2, #2
 8105a30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	681b      	ldr	r3, [r3, #0]
 8105a38:	68db      	ldr	r3, [r3, #12]
 8105a3a:	f003 0310 	and.w	r3, r3, #16
 8105a3e:	2b10      	cmp	r3, #16
 8105a40:	d052      	beq.n	8105ae8 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	681b      	ldr	r3, [r3, #0]
 8105a46:	22ca      	movs	r2, #202	@ 0xca
 8105a48:	625a      	str	r2, [r3, #36]	@ 0x24
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	681b      	ldr	r3, [r3, #0]
 8105a4e:	2253      	movs	r2, #83	@ 0x53
 8105a50:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8105a52:	6878      	ldr	r0, [r7, #4]
 8105a54:	f000 f87a 	bl	8105b4c <RTC_EnterInitMode>
 8105a58:	4603      	mov	r3, r0
 8105a5a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8105a5c:	7bfb      	ldrb	r3, [r7, #15]
 8105a5e:	2b00      	cmp	r3, #0
 8105a60:	d126      	bne.n	8105ab0 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8105a62:	687b      	ldr	r3, [r7, #4]
 8105a64:	681b      	ldr	r3, [r3, #0]
 8105a66:	689b      	ldr	r3, [r3, #8]
 8105a68:	687a      	ldr	r2, [r7, #4]
 8105a6a:	6812      	ldr	r2, [r2, #0]
 8105a6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8105a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8105a74:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	6899      	ldr	r1, [r3, #8]
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	685a      	ldr	r2, [r3, #4]
 8105a80:	687b      	ldr	r3, [r7, #4]
 8105a82:	691b      	ldr	r3, [r3, #16]
 8105a84:	431a      	orrs	r2, r3
 8105a86:	687b      	ldr	r3, [r7, #4]
 8105a88:	699b      	ldr	r3, [r3, #24]
 8105a8a:	431a      	orrs	r2, r3
 8105a8c:	687b      	ldr	r3, [r7, #4]
 8105a8e:	681b      	ldr	r3, [r3, #0]
 8105a90:	430a      	orrs	r2, r1
 8105a92:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	689b      	ldr	r3, [r3, #8]
 8105a98:	0419      	lsls	r1, r3, #16
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	68da      	ldr	r2, [r3, #12]
 8105a9e:	687b      	ldr	r3, [r7, #4]
 8105aa0:	681b      	ldr	r3, [r3, #0]
 8105aa2:	430a      	orrs	r2, r1
 8105aa4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8105aa6:	6878      	ldr	r0, [r7, #4]
 8105aa8:	f000 f884 	bl	8105bb4 <RTC_ExitInitMode>
 8105aac:	4603      	mov	r3, r0
 8105aae:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8105ab0:	7bfb      	ldrb	r3, [r7, #15]
 8105ab2:	2b00      	cmp	r3, #0
 8105ab4:	d113      	bne.n	8105ade <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	681b      	ldr	r3, [r3, #0]
 8105ac0:	f022 0203 	bic.w	r2, r2, #3
 8105ac4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	681b      	ldr	r3, [r3, #0]
 8105aca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	69da      	ldr	r2, [r3, #28]
 8105ad0:	687b      	ldr	r3, [r7, #4]
 8105ad2:	695b      	ldr	r3, [r3, #20]
 8105ad4:	431a      	orrs	r2, r3
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	430a      	orrs	r2, r1
 8105adc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105ade:	687b      	ldr	r3, [r7, #4]
 8105ae0:	681b      	ldr	r3, [r3, #0]
 8105ae2:	22ff      	movs	r2, #255	@ 0xff
 8105ae4:	625a      	str	r2, [r3, #36]	@ 0x24
 8105ae6:	e001      	b.n	8105aec <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8105ae8:	2300      	movs	r3, #0
 8105aea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8105aec:	7bfb      	ldrb	r3, [r7, #15]
 8105aee:	2b00      	cmp	r3, #0
 8105af0:	d103      	bne.n	8105afa <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	2201      	movs	r2, #1
 8105af6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8105afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8105afc:	4618      	mov	r0, r3
 8105afe:	3710      	adds	r7, #16
 8105b00:	46bd      	mov	sp, r7
 8105b02:	bd80      	pop	{r7, pc}

08105b04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8105b04:	b580      	push	{r7, lr}
 8105b06:	b084      	sub	sp, #16
 8105b08:	af00      	add	r7, sp, #0
 8105b0a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	681b      	ldr	r3, [r3, #0]
 8105b10:	4a0d      	ldr	r2, [pc, #52]	@ (8105b48 <HAL_RTC_WaitForSynchro+0x44>)
 8105b12:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8105b14:	f7fc fa06 	bl	8101f24 <HAL_GetTick>
 8105b18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105b1a:	e009      	b.n	8105b30 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8105b1c:	f7fc fa02 	bl	8101f24 <HAL_GetTick>
 8105b20:	4602      	mov	r2, r0
 8105b22:	68fb      	ldr	r3, [r7, #12]
 8105b24:	1ad3      	subs	r3, r2, r3
 8105b26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105b2a:	d901      	bls.n	8105b30 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8105b2c:	2303      	movs	r3, #3
 8105b2e:	e007      	b.n	8105b40 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	681b      	ldr	r3, [r3, #0]
 8105b34:	68db      	ldr	r3, [r3, #12]
 8105b36:	f003 0320 	and.w	r3, r3, #32
 8105b3a:	2b00      	cmp	r3, #0
 8105b3c:	d0ee      	beq.n	8105b1c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8105b3e:	2300      	movs	r3, #0
}
 8105b40:	4618      	mov	r0, r3
 8105b42:	3710      	adds	r7, #16
 8105b44:	46bd      	mov	sp, r7
 8105b46:	bd80      	pop	{r7, pc}
 8105b48:	0003ff5f 	.word	0x0003ff5f

08105b4c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8105b4c:	b580      	push	{r7, lr}
 8105b4e:	b084      	sub	sp, #16
 8105b50:	af00      	add	r7, sp, #0
 8105b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105b54:	2300      	movs	r3, #0
 8105b56:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	681b      	ldr	r3, [r3, #0]
 8105b5c:	68db      	ldr	r3, [r3, #12]
 8105b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105b62:	2b00      	cmp	r3, #0
 8105b64:	d120      	bne.n	8105ba8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8105b66:	687b      	ldr	r3, [r7, #4]
 8105b68:	681b      	ldr	r3, [r3, #0]
 8105b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8105b6e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8105b70:	f7fc f9d8 	bl	8101f24 <HAL_GetTick>
 8105b74:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105b76:	e00d      	b.n	8105b94 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8105b78:	f7fc f9d4 	bl	8101f24 <HAL_GetTick>
 8105b7c:	4602      	mov	r2, r0
 8105b7e:	68bb      	ldr	r3, [r7, #8]
 8105b80:	1ad3      	subs	r3, r2, r3
 8105b82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105b86:	d905      	bls.n	8105b94 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8105b88:	2303      	movs	r3, #3
 8105b8a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	2203      	movs	r2, #3
 8105b90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105b94:	687b      	ldr	r3, [r7, #4]
 8105b96:	681b      	ldr	r3, [r3, #0]
 8105b98:	68db      	ldr	r3, [r3, #12]
 8105b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105b9e:	2b00      	cmp	r3, #0
 8105ba0:	d102      	bne.n	8105ba8 <RTC_EnterInitMode+0x5c>
 8105ba2:	7bfb      	ldrb	r3, [r7, #15]
 8105ba4:	2b03      	cmp	r3, #3
 8105ba6:	d1e7      	bne.n	8105b78 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8105ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8105baa:	4618      	mov	r0, r3
 8105bac:	3710      	adds	r7, #16
 8105bae:	46bd      	mov	sp, r7
 8105bb0:	bd80      	pop	{r7, pc}
	...

08105bb4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8105bb4:	b580      	push	{r7, lr}
 8105bb6:	b084      	sub	sp, #16
 8105bb8:	af00      	add	r7, sp, #0
 8105bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105bbc:	2300      	movs	r3, #0
 8105bbe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8105bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8105c2c <RTC_ExitInitMode+0x78>)
 8105bc2:	68db      	ldr	r3, [r3, #12]
 8105bc4:	4a19      	ldr	r2, [pc, #100]	@ (8105c2c <RTC_ExitInitMode+0x78>)
 8105bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105bca:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8105bcc:	4b17      	ldr	r3, [pc, #92]	@ (8105c2c <RTC_ExitInitMode+0x78>)
 8105bce:	689b      	ldr	r3, [r3, #8]
 8105bd0:	f003 0320 	and.w	r3, r3, #32
 8105bd4:	2b00      	cmp	r3, #0
 8105bd6:	d10c      	bne.n	8105bf2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105bd8:	6878      	ldr	r0, [r7, #4]
 8105bda:	f7ff ff93 	bl	8105b04 <HAL_RTC_WaitForSynchro>
 8105bde:	4603      	mov	r3, r0
 8105be0:	2b00      	cmp	r3, #0
 8105be2:	d01e      	beq.n	8105c22 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105be4:	687b      	ldr	r3, [r7, #4]
 8105be6:	2203      	movs	r2, #3
 8105be8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8105bec:	2303      	movs	r3, #3
 8105bee:	73fb      	strb	r3, [r7, #15]
 8105bf0:	e017      	b.n	8105c22 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8105c2c <RTC_ExitInitMode+0x78>)
 8105bf4:	689b      	ldr	r3, [r3, #8]
 8105bf6:	4a0d      	ldr	r2, [pc, #52]	@ (8105c2c <RTC_ExitInitMode+0x78>)
 8105bf8:	f023 0320 	bic.w	r3, r3, #32
 8105bfc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105bfe:	6878      	ldr	r0, [r7, #4]
 8105c00:	f7ff ff80 	bl	8105b04 <HAL_RTC_WaitForSynchro>
 8105c04:	4603      	mov	r3, r0
 8105c06:	2b00      	cmp	r3, #0
 8105c08:	d005      	beq.n	8105c16 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105c0a:	687b      	ldr	r3, [r7, #4]
 8105c0c:	2203      	movs	r2, #3
 8105c0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8105c12:	2303      	movs	r3, #3
 8105c14:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105c16:	4b05      	ldr	r3, [pc, #20]	@ (8105c2c <RTC_ExitInitMode+0x78>)
 8105c18:	689b      	ldr	r3, [r3, #8]
 8105c1a:	4a04      	ldr	r2, [pc, #16]	@ (8105c2c <RTC_ExitInitMode+0x78>)
 8105c1c:	f043 0320 	orr.w	r3, r3, #32
 8105c20:	6093      	str	r3, [r2, #8]
  }

  return status;
 8105c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8105c24:	4618      	mov	r0, r3
 8105c26:	3710      	adds	r7, #16
 8105c28:	46bd      	mov	sp, r7
 8105c2a:	bd80      	pop	{r7, pc}
 8105c2c:	58004000 	.word	0x58004000

08105c30 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 8105c30:	b480      	push	{r7}
 8105c32:	b085      	sub	sp, #20
 8105c34:	af00      	add	r7, sp, #0
 8105c36:	6078      	str	r0, [r7, #4]
 8105c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8105c40:	2b01      	cmp	r3, #1
 8105c42:	d101      	bne.n	8105c48 <HAL_RTCEx_SetTamper+0x18>
 8105c44:	2302      	movs	r3, #2
 8105c46:	e0cc      	b.n	8105de2 <HAL_RTCEx_SetTamper+0x1b2>
 8105c48:	687b      	ldr	r3, [r7, #4]
 8105c4a:	2201      	movs	r2, #1
 8105c4c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8105c50:	687b      	ldr	r3, [r7, #4]
 8105c52:	2202      	movs	r2, #2
 8105c54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8105c58:	687b      	ldr	r3, [r7, #4]
 8105c5a:	681b      	ldr	r3, [r3, #0]
 8105c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105c5e:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8105c60:	683b      	ldr	r3, [r7, #0]
 8105c62:	681b      	ldr	r3, [r3, #0]
 8105c64:	68fa      	ldr	r2, [r7, #12]
 8105c66:	4313      	orrs	r3, r2
 8105c68:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8105c6a:	683b      	ldr	r3, [r7, #0]
 8105c6c:	689b      	ldr	r3, [r3, #8]
 8105c6e:	2b08      	cmp	r3, #8
 8105c70:	d003      	beq.n	8105c7a <HAL_RTCEx_SetTamper+0x4a>
 8105c72:	683b      	ldr	r3, [r7, #0]
 8105c74:	689b      	ldr	r3, [r3, #8]
 8105c76:	2b02      	cmp	r3, #2
 8105c78:	d106      	bne.n	8105c88 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8105c7a:	683b      	ldr	r3, [r7, #0]
 8105c7c:	681b      	ldr	r3, [r3, #0]
 8105c7e:	005b      	lsls	r3, r3, #1
 8105c80:	68fa      	ldr	r2, [r7, #12]
 8105c82:	4313      	orrs	r3, r2
 8105c84:	60fb      	str	r3, [r7, #12]
 8105c86:	e006      	b.n	8105c96 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8105c88:	683b      	ldr	r3, [r7, #0]
 8105c8a:	681b      	ldr	r3, [r3, #0]
 8105c8c:	005b      	lsls	r3, r3, #1
 8105c8e:	43db      	mvns	r3, r3
 8105c90:	68fa      	ldr	r2, [r7, #12]
 8105c92:	4013      	ands	r3, r2
 8105c94:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8105c96:	683b      	ldr	r3, [r7, #0]
 8105c98:	68db      	ldr	r3, [r3, #12]
 8105c9a:	2b00      	cmp	r3, #0
 8105c9c:	d01e      	beq.n	8105cdc <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105c9e:	683b      	ldr	r3, [r7, #0]
 8105ca0:	681b      	ldr	r3, [r3, #0]
 8105ca2:	f003 0301 	and.w	r3, r3, #1
 8105ca6:	2b00      	cmp	r3, #0
 8105ca8:	d003      	beq.n	8105cb2 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8105caa:	68fb      	ldr	r3, [r7, #12]
 8105cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105cb0:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105cb2:	683b      	ldr	r3, [r7, #0]
 8105cb4:	681b      	ldr	r3, [r3, #0]
 8105cb6:	f003 0308 	and.w	r3, r3, #8
 8105cba:	2b00      	cmp	r3, #0
 8105cbc:	d003      	beq.n	8105cc6 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8105cbe:	68fb      	ldr	r3, [r7, #12]
 8105cc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8105cc4:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105cc6:	683b      	ldr	r3, [r7, #0]
 8105cc8:	681b      	ldr	r3, [r3, #0]
 8105cca:	f003 0320 	and.w	r3, r3, #32
 8105cce:	2b00      	cmp	r3, #0
 8105cd0:	d022      	beq.n	8105d18 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8105cd2:	68fb      	ldr	r3, [r7, #12]
 8105cd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105cd8:	60fb      	str	r3, [r7, #12]
 8105cda:	e01d      	b.n	8105d18 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105cdc:	683b      	ldr	r3, [r7, #0]
 8105cde:	681b      	ldr	r3, [r3, #0]
 8105ce0:	f003 0301 	and.w	r3, r3, #1
 8105ce4:	2b00      	cmp	r3, #0
 8105ce6:	d003      	beq.n	8105cf0 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8105ce8:	68fb      	ldr	r3, [r7, #12]
 8105cea:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8105cee:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105cf0:	683b      	ldr	r3, [r7, #0]
 8105cf2:	681b      	ldr	r3, [r3, #0]
 8105cf4:	f003 0308 	and.w	r3, r3, #8
 8105cf8:	2b00      	cmp	r3, #0
 8105cfa:	d003      	beq.n	8105d04 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8105cfc:	68fb      	ldr	r3, [r7, #12]
 8105cfe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8105d02:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105d04:	683b      	ldr	r3, [r7, #0]
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	f003 0320 	and.w	r3, r3, #32
 8105d0c:	2b00      	cmp	r3, #0
 8105d0e:	d003      	beq.n	8105d18 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8105d10:	68fb      	ldr	r3, [r7, #12]
 8105d12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8105d16:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8105d18:	683b      	ldr	r3, [r7, #0]
 8105d1a:	691b      	ldr	r3, [r3, #16]
 8105d1c:	2b00      	cmp	r3, #0
 8105d1e:	d01e      	beq.n	8105d5e <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105d20:	683b      	ldr	r3, [r7, #0]
 8105d22:	681b      	ldr	r3, [r3, #0]
 8105d24:	f003 0301 	and.w	r3, r3, #1
 8105d28:	2b00      	cmp	r3, #0
 8105d2a:	d003      	beq.n	8105d34 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8105d2c:	68fb      	ldr	r3, [r7, #12]
 8105d2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8105d32:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105d34:	683b      	ldr	r3, [r7, #0]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	f003 0308 	and.w	r3, r3, #8
 8105d3c:	2b00      	cmp	r3, #0
 8105d3e:	d003      	beq.n	8105d48 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8105d40:	68fb      	ldr	r3, [r7, #12]
 8105d42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105d46:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105d48:	683b      	ldr	r3, [r7, #0]
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	f003 0320 	and.w	r3, r3, #32
 8105d50:	2b00      	cmp	r3, #0
 8105d52:	d022      	beq.n	8105d9a <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8105d54:	68fb      	ldr	r3, [r7, #12]
 8105d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105d5a:	60fb      	str	r3, [r7, #12]
 8105d5c:	e01d      	b.n	8105d9a <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105d5e:	683b      	ldr	r3, [r7, #0]
 8105d60:	681b      	ldr	r3, [r3, #0]
 8105d62:	f003 0301 	and.w	r3, r3, #1
 8105d66:	2b00      	cmp	r3, #0
 8105d68:	d003      	beq.n	8105d72 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8105d6a:	68fb      	ldr	r3, [r7, #12]
 8105d6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8105d70:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105d72:	683b      	ldr	r3, [r7, #0]
 8105d74:	681b      	ldr	r3, [r3, #0]
 8105d76:	f003 0308 	and.w	r3, r3, #8
 8105d7a:	2b00      	cmp	r3, #0
 8105d7c:	d003      	beq.n	8105d86 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8105d7e:	68fb      	ldr	r3, [r7, #12]
 8105d80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8105d84:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105d86:	683b      	ldr	r3, [r7, #0]
 8105d88:	681b      	ldr	r3, [r3, #0]
 8105d8a:	f003 0320 	and.w	r3, r3, #32
 8105d8e:	2b00      	cmp	r3, #0
 8105d90:	d003      	beq.n	8105d9a <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8105d92:	68fb      	ldr	r3, [r7, #12]
 8105d94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8105d98:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8105d9a:	68fb      	ldr	r3, [r7, #12]
 8105d9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105da4:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105da6:	683b      	ldr	r3, [r7, #0]
 8105da8:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8105daa:	683b      	ldr	r3, [r7, #0]
 8105dac:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105dae:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8105db0:	683b      	ldr	r3, [r7, #0]
 8105db2:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8105db4:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8105db6:	683b      	ldr	r3, [r7, #0]
 8105db8:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8105dba:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8105dbc:	683b      	ldr	r3, [r7, #0]
 8105dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8105dc0:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105dc2:	68fa      	ldr	r2, [r7, #12]
 8105dc4:	4313      	orrs	r3, r2
 8105dc6:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8105dc8:	687b      	ldr	r3, [r7, #4]
 8105dca:	681b      	ldr	r3, [r3, #0]
 8105dcc:	68fa      	ldr	r2, [r7, #12]
 8105dce:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8105dd0:	687b      	ldr	r3, [r7, #4]
 8105dd2:	2201      	movs	r2, #1
 8105dd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	2200      	movs	r2, #0
 8105ddc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8105de0:	2300      	movs	r3, #0
}
 8105de2:	4618      	mov	r0, r3
 8105de4:	3714      	adds	r7, #20
 8105de6:	46bd      	mov	sp, r7
 8105de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dec:	4770      	bx	lr
	...

08105df0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8105df0:	b580      	push	{r7, lr}
 8105df2:	b08a      	sub	sp, #40	@ 0x28
 8105df4:	af00      	add	r7, sp, #0
 8105df6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8105df8:	687b      	ldr	r3, [r7, #4]
 8105dfa:	2b00      	cmp	r3, #0
 8105dfc:	d101      	bne.n	8105e02 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8105dfe:	2301      	movs	r3, #1
 8105e00:	e290      	b.n	8106324 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105e02:	f7fc f8bf 	bl	8101f84 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8105e06:	687b      	ldr	r3, [r7, #4]
 8105e08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8105e0c:	2b01      	cmp	r3, #1
 8105e0e:	d113      	bne.n	8105e38 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105e10:	687b      	ldr	r3, [r7, #4]
 8105e12:	681b      	ldr	r3, [r3, #0]
 8105e14:	4a96      	ldr	r2, [pc, #600]	@ (8106070 <HAL_SAI_Init+0x280>)
 8105e16:	4293      	cmp	r3, r2
 8105e18:	d004      	beq.n	8105e24 <HAL_SAI_Init+0x34>
 8105e1a:	687b      	ldr	r3, [r7, #4]
 8105e1c:	681b      	ldr	r3, [r3, #0]
 8105e1e:	4a95      	ldr	r2, [pc, #596]	@ (8106074 <HAL_SAI_Init+0x284>)
 8105e20:	4293      	cmp	r3, r2
 8105e22:	d107      	bne.n	8105e34 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105e24:	687b      	ldr	r3, [r7, #4]
 8105e26:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105e28:	2b01      	cmp	r3, #1
 8105e2a:	d103      	bne.n	8105e34 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105e30:	2b00      	cmp	r3, #0
 8105e32:	d001      	beq.n	8105e38 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8105e34:	2301      	movs	r3, #1
 8105e36:	e275      	b.n	8106324 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	681b      	ldr	r3, [r3, #0]
 8105e3c:	4a8c      	ldr	r2, [pc, #560]	@ (8106070 <HAL_SAI_Init+0x280>)
 8105e3e:	4293      	cmp	r3, r2
 8105e40:	d004      	beq.n	8105e4c <HAL_SAI_Init+0x5c>
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	681b      	ldr	r3, [r3, #0]
 8105e46:	4a8c      	ldr	r2, [pc, #560]	@ (8106078 <HAL_SAI_Init+0x288>)
 8105e48:	4293      	cmp	r3, r2
 8105e4a:	d102      	bne.n	8105e52 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8105e4c:	4b8b      	ldr	r3, [pc, #556]	@ (810607c <HAL_SAI_Init+0x28c>)
 8105e4e:	61bb      	str	r3, [r7, #24]
 8105e50:	e028      	b.n	8105ea4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105e52:	687b      	ldr	r3, [r7, #4]
 8105e54:	681b      	ldr	r3, [r3, #0]
 8105e56:	4a8a      	ldr	r2, [pc, #552]	@ (8106080 <HAL_SAI_Init+0x290>)
 8105e58:	4293      	cmp	r3, r2
 8105e5a:	d004      	beq.n	8105e66 <HAL_SAI_Init+0x76>
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	681b      	ldr	r3, [r3, #0]
 8105e60:	4a88      	ldr	r2, [pc, #544]	@ (8106084 <HAL_SAI_Init+0x294>)
 8105e62:	4293      	cmp	r3, r2
 8105e64:	d102      	bne.n	8105e6c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8105e66:	4b88      	ldr	r3, [pc, #544]	@ (8106088 <HAL_SAI_Init+0x298>)
 8105e68:	61bb      	str	r3, [r7, #24]
 8105e6a:	e01b      	b.n	8105ea4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105e6c:	687b      	ldr	r3, [r7, #4]
 8105e6e:	681b      	ldr	r3, [r3, #0]
 8105e70:	4a86      	ldr	r2, [pc, #536]	@ (810608c <HAL_SAI_Init+0x29c>)
 8105e72:	4293      	cmp	r3, r2
 8105e74:	d004      	beq.n	8105e80 <HAL_SAI_Init+0x90>
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	681b      	ldr	r3, [r3, #0]
 8105e7a:	4a85      	ldr	r2, [pc, #532]	@ (8106090 <HAL_SAI_Init+0x2a0>)
 8105e7c:	4293      	cmp	r3, r2
 8105e7e:	d102      	bne.n	8105e86 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8105e80:	4b84      	ldr	r3, [pc, #528]	@ (8106094 <HAL_SAI_Init+0x2a4>)
 8105e82:	61bb      	str	r3, [r7, #24]
 8105e84:	e00e      	b.n	8105ea4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8105e86:	687b      	ldr	r3, [r7, #4]
 8105e88:	681b      	ldr	r3, [r3, #0]
 8105e8a:	4a7a      	ldr	r2, [pc, #488]	@ (8106074 <HAL_SAI_Init+0x284>)
 8105e8c:	4293      	cmp	r3, r2
 8105e8e:	d004      	beq.n	8105e9a <HAL_SAI_Init+0xaa>
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	681b      	ldr	r3, [r3, #0]
 8105e94:	4a80      	ldr	r2, [pc, #512]	@ (8106098 <HAL_SAI_Init+0x2a8>)
 8105e96:	4293      	cmp	r3, r2
 8105e98:	d102      	bne.n	8105ea0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8105e9a:	4b80      	ldr	r3, [pc, #512]	@ (810609c <HAL_SAI_Init+0x2ac>)
 8105e9c:	61bb      	str	r3, [r7, #24]
 8105e9e:	e001      	b.n	8105ea4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8105ea0:	2301      	movs	r3, #1
 8105ea2:	e23f      	b.n	8106324 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8105ea4:	687b      	ldr	r3, [r7, #4]
 8105ea6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8105eaa:	b2db      	uxtb	r3, r3
 8105eac:	2b00      	cmp	r3, #0
 8105eae:	d106      	bne.n	8105ebe <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	2200      	movs	r2, #0
 8105eb4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8105eb8:	6878      	ldr	r0, [r7, #4]
 8105eba:	f7fb fd9d 	bl	81019f8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8105ebe:	6878      	ldr	r0, [r7, #4]
 8105ec0:	f000 fa40 	bl	8106344 <SAI_Disable>
 8105ec4:	4603      	mov	r3, r0
 8105ec6:	2b00      	cmp	r3, #0
 8105ec8:	d001      	beq.n	8105ece <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8105eca:	2301      	movs	r3, #1
 8105ecc:	e22a      	b.n	8106324 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8105ece:	687b      	ldr	r3, [r7, #4]
 8105ed0:	2202      	movs	r2, #2
 8105ed2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8105ed6:	687b      	ldr	r3, [r7, #4]
 8105ed8:	68db      	ldr	r3, [r3, #12]
 8105eda:	2b02      	cmp	r3, #2
 8105edc:	d00c      	beq.n	8105ef8 <HAL_SAI_Init+0x108>
 8105ede:	2b02      	cmp	r3, #2
 8105ee0:	d80d      	bhi.n	8105efe <HAL_SAI_Init+0x10e>
 8105ee2:	2b00      	cmp	r3, #0
 8105ee4:	d002      	beq.n	8105eec <HAL_SAI_Init+0xfc>
 8105ee6:	2b01      	cmp	r3, #1
 8105ee8:	d003      	beq.n	8105ef2 <HAL_SAI_Init+0x102>
 8105eea:	e008      	b.n	8105efe <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8105eec:	2300      	movs	r3, #0
 8105eee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105ef0:	e008      	b.n	8105f04 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8105ef2:	2310      	movs	r3, #16
 8105ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105ef6:	e005      	b.n	8105f04 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8105ef8:	2320      	movs	r3, #32
 8105efa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105efc:	e002      	b.n	8105f04 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8105efe:	2300      	movs	r3, #0
 8105f00:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105f02:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8105f04:	687b      	ldr	r3, [r7, #4]
 8105f06:	689b      	ldr	r3, [r3, #8]
 8105f08:	2b05      	cmp	r3, #5
 8105f0a:	d832      	bhi.n	8105f72 <HAL_SAI_Init+0x182>
 8105f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8105f14 <HAL_SAI_Init+0x124>)
 8105f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f12:	bf00      	nop
 8105f14:	08105f2d 	.word	0x08105f2d
 8105f18:	08105f33 	.word	0x08105f33
 8105f1c:	08105f3b 	.word	0x08105f3b
 8105f20:	08105f43 	.word	0x08105f43
 8105f24:	08105f53 	.word	0x08105f53
 8105f28:	08105f63 	.word	0x08105f63
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8105f2c:	2300      	movs	r3, #0
 8105f2e:	61fb      	str	r3, [r7, #28]
      break;
 8105f30:	e022      	b.n	8105f78 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8105f32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8105f36:	61fb      	str	r3, [r7, #28]
      break;
 8105f38:	e01e      	b.n	8105f78 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105f3e:	61fb      	str	r3, [r7, #28]
      break;
 8105f40:	e01a      	b.n	8105f78 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105f46:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8105f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f4a:	f043 0301 	orr.w	r3, r3, #1
 8105f4e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105f50:	e012      	b.n	8105f78 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105f56:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8105f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f5a:	f043 0302 	orr.w	r3, r3, #2
 8105f5e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105f60:	e00a      	b.n	8105f78 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105f66:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8105f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f6a:	f043 0303 	orr.w	r3, r3, #3
 8105f6e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105f70:	e002      	b.n	8105f78 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8105f72:	2300      	movs	r3, #0
 8105f74:	61fb      	str	r3, [r7, #28]
      break;
 8105f76:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8105f78:	69bb      	ldr	r3, [r7, #24]
 8105f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105f7c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	6a1b      	ldr	r3, [r3, #32]
 8105f82:	2b00      	cmp	r3, #0
 8105f84:	f000 80c5 	beq.w	8106112 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8105f88:	2300      	movs	r3, #0
 8105f8a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	681b      	ldr	r3, [r3, #0]
 8105f90:	4a37      	ldr	r2, [pc, #220]	@ (8106070 <HAL_SAI_Init+0x280>)
 8105f92:	4293      	cmp	r3, r2
 8105f94:	d004      	beq.n	8105fa0 <HAL_SAI_Init+0x1b0>
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	681b      	ldr	r3, [r3, #0]
 8105f9a:	4a37      	ldr	r2, [pc, #220]	@ (8106078 <HAL_SAI_Init+0x288>)
 8105f9c:	4293      	cmp	r3, r2
 8105f9e:	d106      	bne.n	8105fae <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8105fa0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8105fa4:	f04f 0100 	mov.w	r1, #0
 8105fa8:	f7fe fa36 	bl	8104418 <HAL_RCCEx_GetPeriphCLKFreq>
 8105fac:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105fae:	687b      	ldr	r3, [r7, #4]
 8105fb0:	681b      	ldr	r3, [r3, #0]
 8105fb2:	4a33      	ldr	r2, [pc, #204]	@ (8106080 <HAL_SAI_Init+0x290>)
 8105fb4:	4293      	cmp	r3, r2
 8105fb6:	d004      	beq.n	8105fc2 <HAL_SAI_Init+0x1d2>
 8105fb8:	687b      	ldr	r3, [r7, #4]
 8105fba:	681b      	ldr	r3, [r3, #0]
 8105fbc:	4a31      	ldr	r2, [pc, #196]	@ (8106084 <HAL_SAI_Init+0x294>)
 8105fbe:	4293      	cmp	r3, r2
 8105fc0:	d106      	bne.n	8105fd0 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8105fc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8105fc6:	f04f 0100 	mov.w	r1, #0
 8105fca:	f7fe fa25 	bl	8104418 <HAL_RCCEx_GetPeriphCLKFreq>
 8105fce:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	681b      	ldr	r3, [r3, #0]
 8105fd4:	4a2d      	ldr	r2, [pc, #180]	@ (810608c <HAL_SAI_Init+0x29c>)
 8105fd6:	4293      	cmp	r3, r2
 8105fd8:	d004      	beq.n	8105fe4 <HAL_SAI_Init+0x1f4>
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	681b      	ldr	r3, [r3, #0]
 8105fde:	4a2c      	ldr	r2, [pc, #176]	@ (8106090 <HAL_SAI_Init+0x2a0>)
 8105fe0:	4293      	cmp	r3, r2
 8105fe2:	d106      	bne.n	8105ff2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8105fe4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8105fe8:	f04f 0100 	mov.w	r1, #0
 8105fec:	f7fe fa14 	bl	8104418 <HAL_RCCEx_GetPeriphCLKFreq>
 8105ff0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8105ff2:	687b      	ldr	r3, [r7, #4]
 8105ff4:	681b      	ldr	r3, [r3, #0]
 8105ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8106074 <HAL_SAI_Init+0x284>)
 8105ff8:	4293      	cmp	r3, r2
 8105ffa:	d106      	bne.n	810600a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8105ffc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8106000:	f04f 0100 	mov.w	r1, #0
 8106004:	f7fe fa08 	bl	8104418 <HAL_RCCEx_GetPeriphCLKFreq>
 8106008:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 810600a:	687b      	ldr	r3, [r7, #4]
 810600c:	681b      	ldr	r3, [r3, #0]
 810600e:	4a22      	ldr	r2, [pc, #136]	@ (8106098 <HAL_SAI_Init+0x2a8>)
 8106010:	4293      	cmp	r3, r2
 8106012:	d106      	bne.n	8106022 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8106014:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8106018:	f04f 0100 	mov.w	r1, #0
 810601c:	f7fe f9fc 	bl	8104418 <HAL_RCCEx_GetPeriphCLKFreq>
 8106020:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8106022:	687b      	ldr	r3, [r7, #4]
 8106024:	699b      	ldr	r3, [r3, #24]
 8106026:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 810602a:	d139      	bne.n	81060a0 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106030:	2b04      	cmp	r3, #4
 8106032:	d102      	bne.n	810603a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8106034:	2340      	movs	r3, #64	@ 0x40
 8106036:	60fb      	str	r3, [r7, #12]
 8106038:	e00a      	b.n	8106050 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810603e:	2b08      	cmp	r3, #8
 8106040:	d103      	bne.n	810604a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8106042:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8106046:	60fb      	str	r3, [r7, #12]
 8106048:	e002      	b.n	8106050 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 810604a:	687b      	ldr	r3, [r7, #4]
 810604c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810604e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8106050:	697a      	ldr	r2, [r7, #20]
 8106052:	4613      	mov	r3, r2
 8106054:	009b      	lsls	r3, r3, #2
 8106056:	4413      	add	r3, r2
 8106058:	005b      	lsls	r3, r3, #1
 810605a:	4619      	mov	r1, r3
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	6a1b      	ldr	r3, [r3, #32]
 8106060:	68fa      	ldr	r2, [r7, #12]
 8106062:	fb02 f303 	mul.w	r3, r2, r3
 8106066:	fbb1 f3f3 	udiv	r3, r1, r3
 810606a:	613b      	str	r3, [r7, #16]
 810606c:	e030      	b.n	81060d0 <HAL_SAI_Init+0x2e0>
 810606e:	bf00      	nop
 8106070:	40015804 	.word	0x40015804
 8106074:	58005404 	.word	0x58005404
 8106078:	40015824 	.word	0x40015824
 810607c:	40015800 	.word	0x40015800
 8106080:	40015c04 	.word	0x40015c04
 8106084:	40015c24 	.word	0x40015c24
 8106088:	40015c00 	.word	0x40015c00
 810608c:	40016004 	.word	0x40016004
 8106090:	40016024 	.word	0x40016024
 8106094:	40016000 	.word	0x40016000
 8106098:	58005424 	.word	0x58005424
 810609c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81060a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81060a8:	d101      	bne.n	81060ae <HAL_SAI_Init+0x2be>
 81060aa:	2302      	movs	r3, #2
 81060ac:	e000      	b.n	81060b0 <HAL_SAI_Init+0x2c0>
 81060ae:	2301      	movs	r3, #1
 81060b0:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 81060b2:	697a      	ldr	r2, [r7, #20]
 81060b4:	4613      	mov	r3, r2
 81060b6:	009b      	lsls	r3, r3, #2
 81060b8:	4413      	add	r3, r2
 81060ba:	005b      	lsls	r3, r3, #1
 81060bc:	4619      	mov	r1, r3
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	6a1b      	ldr	r3, [r3, #32]
 81060c2:	68ba      	ldr	r2, [r7, #8]
 81060c4:	fb02 f303 	mul.w	r3, r2, r3
 81060c8:	021b      	lsls	r3, r3, #8
 81060ca:	fbb1 f3f3 	udiv	r3, r1, r3
 81060ce:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 81060d0:	693b      	ldr	r3, [r7, #16]
 81060d2:	4a96      	ldr	r2, [pc, #600]	@ (810632c <HAL_SAI_Init+0x53c>)
 81060d4:	fba2 2303 	umull	r2, r3, r2, r3
 81060d8:	08da      	lsrs	r2, r3, #3
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 81060de:	6939      	ldr	r1, [r7, #16]
 81060e0:	4b92      	ldr	r3, [pc, #584]	@ (810632c <HAL_SAI_Init+0x53c>)
 81060e2:	fba3 2301 	umull	r2, r3, r3, r1
 81060e6:	08da      	lsrs	r2, r3, #3
 81060e8:	4613      	mov	r3, r2
 81060ea:	009b      	lsls	r3, r3, #2
 81060ec:	4413      	add	r3, r2
 81060ee:	005b      	lsls	r3, r3, #1
 81060f0:	1aca      	subs	r2, r1, r3
 81060f2:	2a08      	cmp	r2, #8
 81060f4:	d904      	bls.n	8106100 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81060fa:	1c5a      	adds	r2, r3, #1
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106104:	2b04      	cmp	r3, #4
 8106106:	d104      	bne.n	8106112 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810610c:	085a      	lsrs	r2, r3, #1
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	685b      	ldr	r3, [r3, #4]
 8106116:	2b00      	cmp	r3, #0
 8106118:	d003      	beq.n	8106122 <HAL_SAI_Init+0x332>
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	685b      	ldr	r3, [r3, #4]
 810611e:	2b02      	cmp	r3, #2
 8106120:	d109      	bne.n	8106136 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106126:	2b01      	cmp	r3, #1
 8106128:	d101      	bne.n	810612e <HAL_SAI_Init+0x33e>
 810612a:	2300      	movs	r3, #0
 810612c:	e001      	b.n	8106132 <HAL_SAI_Init+0x342>
 810612e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8106132:	623b      	str	r3, [r7, #32]
 8106134:	e008      	b.n	8106148 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810613a:	2b01      	cmp	r3, #1
 810613c:	d102      	bne.n	8106144 <HAL_SAI_Init+0x354>
 810613e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8106142:	e000      	b.n	8106146 <HAL_SAI_Init+0x356>
 8106144:	2300      	movs	r3, #0
 8106146:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8106148:	f7fb ff1c 	bl	8101f84 <HAL_GetREVID>
 810614c:	4603      	mov	r3, r0
 810614e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106152:	d331      	bcc.n	81061b8 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106154:	687b      	ldr	r3, [r7, #4]
 8106156:	681b      	ldr	r3, [r3, #0]
 8106158:	6819      	ldr	r1, [r3, #0]
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	681a      	ldr	r2, [r3, #0]
 810615e:	4b74      	ldr	r3, [pc, #464]	@ (8106330 <HAL_SAI_Init+0x540>)
 8106160:	400b      	ands	r3, r1
 8106162:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	6819      	ldr	r1, [r3, #0]
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	685a      	ldr	r2, [r3, #4]
 810616e:	687b      	ldr	r3, [r7, #4]
 8106170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106172:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106178:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810617a:	687b      	ldr	r3, [r7, #4]
 810617c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810617e:	431a      	orrs	r2, r3
 8106180:	6a3b      	ldr	r3, [r7, #32]
 8106182:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106184:	69fb      	ldr	r3, [r7, #28]
 8106186:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 810618c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	695b      	ldr	r3, [r3, #20]
 8106192:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106194:	687b      	ldr	r3, [r7, #4]
 8106196:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106198:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810619e:	051b      	lsls	r3, r3, #20
 81061a0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81061a6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 81061a8:	687b      	ldr	r3, [r7, #4]
 81061aa:	691b      	ldr	r3, [r3, #16]
 81061ac:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81061ae:	687b      	ldr	r3, [r7, #4]
 81061b0:	681b      	ldr	r3, [r3, #0]
 81061b2:	430a      	orrs	r2, r1
 81061b4:	601a      	str	r2, [r3, #0]
 81061b6:	e02d      	b.n	8106214 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	681b      	ldr	r3, [r3, #0]
 81061bc:	6819      	ldr	r1, [r3, #0]
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	681a      	ldr	r2, [r3, #0]
 81061c2:	4b5c      	ldr	r3, [pc, #368]	@ (8106334 <HAL_SAI_Init+0x544>)
 81061c4:	400b      	ands	r3, r1
 81061c6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81061c8:	687b      	ldr	r3, [r7, #4]
 81061ca:	681b      	ldr	r3, [r3, #0]
 81061cc:	6819      	ldr	r1, [r3, #0]
 81061ce:	687b      	ldr	r3, [r7, #4]
 81061d0:	685a      	ldr	r2, [r3, #4]
 81061d2:	687b      	ldr	r3, [r7, #4]
 81061d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81061d6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81061d8:	687b      	ldr	r3, [r7, #4]
 81061da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81061dc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81061de:	687b      	ldr	r3, [r7, #4]
 81061e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81061e2:	431a      	orrs	r2, r3
 81061e4:	6a3b      	ldr	r3, [r7, #32]
 81061e6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81061e8:	69fb      	ldr	r3, [r7, #28]
 81061ea:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 81061f0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	695b      	ldr	r3, [r3, #20]
 81061f6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81061f8:	687b      	ldr	r3, [r7, #4]
 81061fa:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81061fc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81061fe:	687b      	ldr	r3, [r7, #4]
 8106200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106202:	051b      	lsls	r3, r3, #20
 8106204:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810620a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	681b      	ldr	r3, [r3, #0]
 8106210:	430a      	orrs	r2, r1
 8106212:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	681b      	ldr	r3, [r3, #0]
 8106218:	685b      	ldr	r3, [r3, #4]
 810621a:	687a      	ldr	r2, [r7, #4]
 810621c:	6812      	ldr	r2, [r2, #0]
 810621e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8106222:	f023 030f 	bic.w	r3, r3, #15
 8106226:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	681b      	ldr	r3, [r3, #0]
 810622c:	6859      	ldr	r1, [r3, #4]
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	69da      	ldr	r2, [r3, #28]
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106236:	431a      	orrs	r2, r3
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810623c:	431a      	orrs	r2, r3
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	430a      	orrs	r2, r1
 8106244:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	681b      	ldr	r3, [r3, #0]
 810624a:	6899      	ldr	r1, [r3, #8]
 810624c:	687b      	ldr	r3, [r7, #4]
 810624e:	681a      	ldr	r2, [r3, #0]
 8106250:	4b39      	ldr	r3, [pc, #228]	@ (8106338 <HAL_SAI_Init+0x548>)
 8106252:	400b      	ands	r3, r1
 8106254:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106256:	687b      	ldr	r3, [r7, #4]
 8106258:	681b      	ldr	r3, [r3, #0]
 810625a:	6899      	ldr	r1, [r3, #8]
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106260:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8106262:	687b      	ldr	r3, [r7, #4]
 8106264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106266:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8106268:	687b      	ldr	r3, [r7, #4]
 810626a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 810626c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 810626e:	687b      	ldr	r3, [r7, #4]
 8106270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8106272:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106278:	3b01      	subs	r3, #1
 810627a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 810627c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810627e:	687b      	ldr	r3, [r7, #4]
 8106280:	681b      	ldr	r3, [r3, #0]
 8106282:	430a      	orrs	r2, r1
 8106284:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8106286:	687b      	ldr	r3, [r7, #4]
 8106288:	681b      	ldr	r3, [r3, #0]
 810628a:	68d9      	ldr	r1, [r3, #12]
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	681a      	ldr	r2, [r3, #0]
 8106290:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8106294:	400b      	ands	r3, r1
 8106296:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106298:	687b      	ldr	r3, [r7, #4]
 810629a:	681b      	ldr	r3, [r3, #0]
 810629c:	68d9      	ldr	r1, [r3, #12]
 810629e:	687b      	ldr	r3, [r7, #4]
 81062a0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81062a6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81062a8:	687b      	ldr	r3, [r7, #4]
 81062aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81062ac:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81062ae:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81062b4:	3b01      	subs	r3, #1
 81062b6:	021b      	lsls	r3, r3, #8
 81062b8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81062ba:	687b      	ldr	r3, [r7, #4]
 81062bc:	681b      	ldr	r3, [r3, #0]
 81062be:	430a      	orrs	r2, r1
 81062c0:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	681b      	ldr	r3, [r3, #0]
 81062c6:	4a1d      	ldr	r2, [pc, #116]	@ (810633c <HAL_SAI_Init+0x54c>)
 81062c8:	4293      	cmp	r3, r2
 81062ca:	d004      	beq.n	81062d6 <HAL_SAI_Init+0x4e6>
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	681b      	ldr	r3, [r3, #0]
 81062d0:	4a1b      	ldr	r2, [pc, #108]	@ (8106340 <HAL_SAI_Init+0x550>)
 81062d2:	4293      	cmp	r3, r2
 81062d4:	d119      	bne.n	810630a <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 81062d6:	69bb      	ldr	r3, [r7, #24]
 81062d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81062da:	f023 0201 	bic.w	r2, r3, #1
 81062de:	69bb      	ldr	r3, [r7, #24]
 81062e0:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 81062e2:	687b      	ldr	r3, [r7, #4]
 81062e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81062e8:	2b01      	cmp	r3, #1
 81062ea:	d10e      	bne.n	810630a <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81062ec:	687b      	ldr	r3, [r7, #4]
 81062ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81062f4:	3b01      	subs	r3, #1
 81062f6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81062f8:	431a      	orrs	r2, r3
 81062fa:	69bb      	ldr	r3, [r7, #24]
 81062fc:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81062fe:	69bb      	ldr	r3, [r7, #24]
 8106300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106302:	f043 0201 	orr.w	r2, r3, #1
 8106306:	69bb      	ldr	r3, [r7, #24]
 8106308:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 810630a:	687b      	ldr	r3, [r7, #4]
 810630c:	2200      	movs	r2, #0
 810630e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	2201      	movs	r2, #1
 8106316:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 810631a:	687b      	ldr	r3, [r7, #4]
 810631c:	2200      	movs	r2, #0
 810631e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8106322:	2300      	movs	r3, #0
}
 8106324:	4618      	mov	r0, r3
 8106326:	3728      	adds	r7, #40	@ 0x28
 8106328:	46bd      	mov	sp, r7
 810632a:	bd80      	pop	{r7, pc}
 810632c:	cccccccd 	.word	0xcccccccd
 8106330:	f005c010 	.word	0xf005c010
 8106334:	f805c010 	.word	0xf805c010
 8106338:	fff88000 	.word	0xfff88000
 810633c:	40015804 	.word	0x40015804
 8106340:	58005404 	.word	0x58005404

08106344 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8106344:	b480      	push	{r7}
 8106346:	b085      	sub	sp, #20
 8106348:	af00      	add	r7, sp, #0
 810634a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 810634c:	4b18      	ldr	r3, [pc, #96]	@ (81063b0 <SAI_Disable+0x6c>)
 810634e:	681b      	ldr	r3, [r3, #0]
 8106350:	4a18      	ldr	r2, [pc, #96]	@ (81063b4 <SAI_Disable+0x70>)
 8106352:	fba2 2303 	umull	r2, r3, r2, r3
 8106356:	0b1b      	lsrs	r3, r3, #12
 8106358:	009b      	lsls	r3, r3, #2
 810635a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 810635c:	2300      	movs	r3, #0
 810635e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	681b      	ldr	r3, [r3, #0]
 8106364:	681a      	ldr	r2, [r3, #0]
 8106366:	687b      	ldr	r3, [r7, #4]
 8106368:	681b      	ldr	r3, [r3, #0]
 810636a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 810636e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8106370:	68fb      	ldr	r3, [r7, #12]
 8106372:	2b00      	cmp	r3, #0
 8106374:	d10a      	bne.n	810638c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810637c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8106386:	2303      	movs	r3, #3
 8106388:	72fb      	strb	r3, [r7, #11]
      break;
 810638a:	e009      	b.n	81063a0 <SAI_Disable+0x5c>
    }
    count--;
 810638c:	68fb      	ldr	r3, [r7, #12]
 810638e:	3b01      	subs	r3, #1
 8106390:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	681b      	ldr	r3, [r3, #0]
 8106396:	681b      	ldr	r3, [r3, #0]
 8106398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810639c:	2b00      	cmp	r3, #0
 810639e:	d1e7      	bne.n	8106370 <SAI_Disable+0x2c>

  return status;
 81063a0:	7afb      	ldrb	r3, [r7, #11]
}
 81063a2:	4618      	mov	r0, r3
 81063a4:	3714      	adds	r7, #20
 81063a6:	46bd      	mov	sp, r7
 81063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063ac:	4770      	bx	lr
 81063ae:	bf00      	nop
 81063b0:	10000000 	.word	0x10000000
 81063b4:	95cbec1b 	.word	0x95cbec1b

081063b8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 81063b8:	b580      	push	{r7, lr}
 81063ba:	b084      	sub	sp, #16
 81063bc:	af00      	add	r7, sp, #0
 81063be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	2b00      	cmp	r3, #0
 81063c4:	d101      	bne.n	81063ca <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 81063c6:	2301      	movs	r3, #1
 81063c8:	e05e      	b.n	8106488 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 81063ca:	687b      	ldr	r3, [r7, #4]
 81063cc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 81063d0:	b2db      	uxtb	r3, r3
 81063d2:	2b00      	cmp	r3, #0
 81063d4:	d106      	bne.n	81063e4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	2200      	movs	r2, #0
 81063da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 81063de:	6878      	ldr	r0, [r7, #4]
 81063e0:	f7fb f8f6 	bl	81015d0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	2202      	movs	r2, #2
 81063e8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 81063ec:	687b      	ldr	r3, [r7, #4]
 81063ee:	681b      	ldr	r3, [r3, #0]
 81063f0:	681a      	ldr	r2, [r3, #0]
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	681b      	ldr	r3, [r3, #0]
 81063f6:	f022 0203 	bic.w	r2, r2, #3
 81063fa:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	681b      	ldr	r3, [r3, #0]
 8106400:	681b      	ldr	r3, [r3, #0]
 8106402:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8106404:	68fa      	ldr	r2, [r7, #12]
 8106406:	4b22      	ldr	r3, [pc, #136]	@ (8106490 <HAL_SPDIFRX_Init+0xd8>)
 8106408:	4013      	ands	r3, r2
 810640a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8106410:	687b      	ldr	r3, [r7, #4]
 8106412:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8106414:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 810641a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 810641c:	687b      	ldr	r3, [r7, #4]
 810641e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8106420:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8106422:	687b      	ldr	r3, [r7, #4]
 8106424:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8106426:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 810642c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8106432:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8106438:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 810643e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8106440:	687b      	ldr	r3, [r7, #4]
 8106442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8106444:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8106446:	68fa      	ldr	r2, [r7, #12]
 8106448:	4313      	orrs	r3, r2
 810644a:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 810644c:	687b      	ldr	r3, [r7, #4]
 810644e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8106452:	2b01      	cmp	r3, #1
 8106454:	d103      	bne.n	810645e <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8106456:	68fb      	ldr	r3, [r7, #12]
 8106458:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810645c:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8106464:	2b01      	cmp	r3, #1
 8106466:	d103      	bne.n	8106470 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8106468:	68fb      	ldr	r3, [r7, #12]
 810646a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810646e:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	68fa      	ldr	r2, [r7, #12]
 8106476:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8106478:	687b      	ldr	r3, [r7, #4]
 810647a:	2200      	movs	r2, #0
 810647c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 810647e:	687b      	ldr	r3, [r7, #4]
 8106480:	2201      	movs	r2, #1
 8106482:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8106486:	2300      	movs	r3, #0
}
 8106488:	4618      	mov	r0, r3
 810648a:	3710      	adds	r7, #16
 810648c:	46bd      	mov	sp, r7
 810648e:	bd80      	pop	{r7, pc}
 8106490:	ffc88407 	.word	0xffc88407

08106494 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8106494:	b580      	push	{r7, lr}
 8106496:	b084      	sub	sp, #16
 8106498:	af00      	add	r7, sp, #0
 810649a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	2b00      	cmp	r3, #0
 81064a0:	d101      	bne.n	81064a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 81064a2:	2301      	movs	r3, #1
 81064a4:	e10f      	b.n	81066c6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	2200      	movs	r2, #0
 81064aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	4a87      	ldr	r2, [pc, #540]	@ (81066d0 <HAL_SPI_Init+0x23c>)
 81064b2:	4293      	cmp	r3, r2
 81064b4:	d00f      	beq.n	81064d6 <HAL_SPI_Init+0x42>
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	681b      	ldr	r3, [r3, #0]
 81064ba:	4a86      	ldr	r2, [pc, #536]	@ (81066d4 <HAL_SPI_Init+0x240>)
 81064bc:	4293      	cmp	r3, r2
 81064be:	d00a      	beq.n	81064d6 <HAL_SPI_Init+0x42>
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	4a84      	ldr	r2, [pc, #528]	@ (81066d8 <HAL_SPI_Init+0x244>)
 81064c6:	4293      	cmp	r3, r2
 81064c8:	d005      	beq.n	81064d6 <HAL_SPI_Init+0x42>
 81064ca:	687b      	ldr	r3, [r7, #4]
 81064cc:	68db      	ldr	r3, [r3, #12]
 81064ce:	2b0f      	cmp	r3, #15
 81064d0:	d901      	bls.n	81064d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81064d2:	2301      	movs	r3, #1
 81064d4:	e0f7      	b.n	81066c6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81064d6:	6878      	ldr	r0, [r7, #4]
 81064d8:	f000 f900 	bl	81066dc <SPI_GetPacketSize>
 81064dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	681b      	ldr	r3, [r3, #0]
 81064e2:	4a7b      	ldr	r2, [pc, #492]	@ (81066d0 <HAL_SPI_Init+0x23c>)
 81064e4:	4293      	cmp	r3, r2
 81064e6:	d00c      	beq.n	8106502 <HAL_SPI_Init+0x6e>
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	681b      	ldr	r3, [r3, #0]
 81064ec:	4a79      	ldr	r2, [pc, #484]	@ (81066d4 <HAL_SPI_Init+0x240>)
 81064ee:	4293      	cmp	r3, r2
 81064f0:	d007      	beq.n	8106502 <HAL_SPI_Init+0x6e>
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	681b      	ldr	r3, [r3, #0]
 81064f6:	4a78      	ldr	r2, [pc, #480]	@ (81066d8 <HAL_SPI_Init+0x244>)
 81064f8:	4293      	cmp	r3, r2
 81064fa:	d002      	beq.n	8106502 <HAL_SPI_Init+0x6e>
 81064fc:	68fb      	ldr	r3, [r7, #12]
 81064fe:	2b08      	cmp	r3, #8
 8106500:	d811      	bhi.n	8106526 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106506:	4a72      	ldr	r2, [pc, #456]	@ (81066d0 <HAL_SPI_Init+0x23c>)
 8106508:	4293      	cmp	r3, r2
 810650a:	d009      	beq.n	8106520 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	681b      	ldr	r3, [r3, #0]
 8106510:	4a70      	ldr	r2, [pc, #448]	@ (81066d4 <HAL_SPI_Init+0x240>)
 8106512:	4293      	cmp	r3, r2
 8106514:	d004      	beq.n	8106520 <HAL_SPI_Init+0x8c>
 8106516:	687b      	ldr	r3, [r7, #4]
 8106518:	681b      	ldr	r3, [r3, #0]
 810651a:	4a6f      	ldr	r2, [pc, #444]	@ (81066d8 <HAL_SPI_Init+0x244>)
 810651c:	4293      	cmp	r3, r2
 810651e:	d104      	bne.n	810652a <HAL_SPI_Init+0x96>
 8106520:	68fb      	ldr	r3, [r7, #12]
 8106522:	2b10      	cmp	r3, #16
 8106524:	d901      	bls.n	810652a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8106526:	2301      	movs	r3, #1
 8106528:	e0cd      	b.n	81066c6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8106530:	b2db      	uxtb	r3, r3
 8106532:	2b00      	cmp	r3, #0
 8106534:	d106      	bne.n	8106544 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8106536:	687b      	ldr	r3, [r7, #4]
 8106538:	2200      	movs	r2, #0
 810653a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810653e:	6878      	ldr	r0, [r7, #4]
 8106540:	f7fb f8ac 	bl	810169c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	2202      	movs	r2, #2
 8106548:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	681b      	ldr	r3, [r3, #0]
 8106550:	681a      	ldr	r2, [r3, #0]
 8106552:	687b      	ldr	r3, [r7, #4]
 8106554:	681b      	ldr	r3, [r3, #0]
 8106556:	f022 0201 	bic.w	r2, r2, #1
 810655a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	681b      	ldr	r3, [r3, #0]
 8106560:	689b      	ldr	r3, [r3, #8]
 8106562:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8106566:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	699b      	ldr	r3, [r3, #24]
 810656c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106570:	d119      	bne.n	81065a6 <HAL_SPI_Init+0x112>
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	685b      	ldr	r3, [r3, #4]
 8106576:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810657a:	d103      	bne.n	8106584 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810657c:	687b      	ldr	r3, [r7, #4]
 810657e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106580:	2b00      	cmp	r3, #0
 8106582:	d008      	beq.n	8106596 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106584:	687b      	ldr	r3, [r7, #4]
 8106586:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106588:	2b00      	cmp	r3, #0
 810658a:	d10c      	bne.n	81065a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106594:	d107      	bne.n	81065a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8106596:	687b      	ldr	r3, [r7, #4]
 8106598:	681b      	ldr	r3, [r3, #0]
 810659a:	681a      	ldr	r2, [r3, #0]
 810659c:	687b      	ldr	r3, [r7, #4]
 810659e:	681b      	ldr	r3, [r3, #0]
 81065a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 81065a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	685b      	ldr	r3, [r3, #4]
 81065aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81065ae:	2b00      	cmp	r3, #0
 81065b0:	d00f      	beq.n	81065d2 <HAL_SPI_Init+0x13e>
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	68db      	ldr	r3, [r3, #12]
 81065b6:	2b06      	cmp	r3, #6
 81065b8:	d90b      	bls.n	81065d2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	681b      	ldr	r3, [r3, #0]
 81065be:	681b      	ldr	r3, [r3, #0]
 81065c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81065c8:	687b      	ldr	r3, [r7, #4]
 81065ca:	681b      	ldr	r3, [r3, #0]
 81065cc:	430a      	orrs	r2, r1
 81065ce:	601a      	str	r2, [r3, #0]
 81065d0:	e007      	b.n	81065e2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 81065d2:	687b      	ldr	r3, [r7, #4]
 81065d4:	681b      	ldr	r3, [r3, #0]
 81065d6:	681a      	ldr	r2, [r3, #0]
 81065d8:	687b      	ldr	r3, [r7, #4]
 81065da:	681b      	ldr	r3, [r3, #0]
 81065dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81065e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81065e2:	687b      	ldr	r3, [r7, #4]
 81065e4:	69da      	ldr	r2, [r3, #28]
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81065ea:	431a      	orrs	r2, r3
 81065ec:	68bb      	ldr	r3, [r7, #8]
 81065ee:	431a      	orrs	r2, r3
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81065f4:	ea42 0103 	orr.w	r1, r2, r3
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	68da      	ldr	r2, [r3, #12]
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	430a      	orrs	r2, r1
 8106602:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8106604:	687b      	ldr	r3, [r7, #4]
 8106606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106608:	687b      	ldr	r3, [r7, #4]
 810660a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810660c:	431a      	orrs	r2, r3
 810660e:	687b      	ldr	r3, [r7, #4]
 8106610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106612:	431a      	orrs	r2, r3
 8106614:	687b      	ldr	r3, [r7, #4]
 8106616:	699b      	ldr	r3, [r3, #24]
 8106618:	431a      	orrs	r2, r3
 810661a:	687b      	ldr	r3, [r7, #4]
 810661c:	691b      	ldr	r3, [r3, #16]
 810661e:	431a      	orrs	r2, r3
 8106620:	687b      	ldr	r3, [r7, #4]
 8106622:	695b      	ldr	r3, [r3, #20]
 8106624:	431a      	orrs	r2, r3
 8106626:	687b      	ldr	r3, [r7, #4]
 8106628:	6a1b      	ldr	r3, [r3, #32]
 810662a:	431a      	orrs	r2, r3
 810662c:	687b      	ldr	r3, [r7, #4]
 810662e:	685b      	ldr	r3, [r3, #4]
 8106630:	431a      	orrs	r2, r3
 8106632:	687b      	ldr	r3, [r7, #4]
 8106634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106636:	431a      	orrs	r2, r3
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	689b      	ldr	r3, [r3, #8]
 810663c:	431a      	orrs	r2, r3
 810663e:	687b      	ldr	r3, [r7, #4]
 8106640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106642:	ea42 0103 	orr.w	r1, r2, r3
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	681b      	ldr	r3, [r3, #0]
 810664e:	430a      	orrs	r2, r1
 8106650:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	685b      	ldr	r3, [r3, #4]
 8106656:	2b00      	cmp	r3, #0
 8106658:	d113      	bne.n	8106682 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	681b      	ldr	r3, [r3, #0]
 810665e:	689b      	ldr	r3, [r3, #8]
 8106660:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	681b      	ldr	r3, [r3, #0]
 8106668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810666c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810666e:	687b      	ldr	r3, [r7, #4]
 8106670:	681b      	ldr	r3, [r3, #0]
 8106672:	689b      	ldr	r3, [r3, #8]
 8106674:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	681b      	ldr	r3, [r3, #0]
 810667c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8106680:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	681b      	ldr	r3, [r3, #0]
 8106686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8106688:	687b      	ldr	r3, [r7, #4]
 810668a:	681b      	ldr	r3, [r3, #0]
 810668c:	f022 0201 	bic.w	r2, r2, #1
 8106690:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8106692:	687b      	ldr	r3, [r7, #4]
 8106694:	685b      	ldr	r3, [r3, #4]
 8106696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810669a:	2b00      	cmp	r3, #0
 810669c:	d00a      	beq.n	81066b4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810669e:	687b      	ldr	r3, [r7, #4]
 81066a0:	681b      	ldr	r3, [r3, #0]
 81066a2:	68db      	ldr	r3, [r3, #12]
 81066a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	681b      	ldr	r3, [r3, #0]
 81066b0:	430a      	orrs	r2, r1
 81066b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	2200      	movs	r2, #0
 81066b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	2201      	movs	r2, #1
 81066c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 81066c4:	2300      	movs	r3, #0
}
 81066c6:	4618      	mov	r0, r3
 81066c8:	3710      	adds	r7, #16
 81066ca:	46bd      	mov	sp, r7
 81066cc:	bd80      	pop	{r7, pc}
 81066ce:	bf00      	nop
 81066d0:	40013000 	.word	0x40013000
 81066d4:	40003800 	.word	0x40003800
 81066d8:	40003c00 	.word	0x40003c00

081066dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 81066dc:	b480      	push	{r7}
 81066de:	b085      	sub	sp, #20
 81066e0:	af00      	add	r7, sp, #0
 81066e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81066e4:	687b      	ldr	r3, [r7, #4]
 81066e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81066e8:	095b      	lsrs	r3, r3, #5
 81066ea:	3301      	adds	r3, #1
 81066ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	68db      	ldr	r3, [r3, #12]
 81066f2:	3301      	adds	r3, #1
 81066f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81066f6:	68bb      	ldr	r3, [r7, #8]
 81066f8:	3307      	adds	r3, #7
 81066fa:	08db      	lsrs	r3, r3, #3
 81066fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81066fe:	68bb      	ldr	r3, [r7, #8]
 8106700:	68fa      	ldr	r2, [r7, #12]
 8106702:	fb02 f303 	mul.w	r3, r2, r3
}
 8106706:	4618      	mov	r0, r3
 8106708:	3714      	adds	r7, #20
 810670a:	46bd      	mov	sp, r7
 810670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106710:	4770      	bx	lr

08106712 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106712:	b580      	push	{r7, lr}
 8106714:	b082      	sub	sp, #8
 8106716:	af00      	add	r7, sp, #0
 8106718:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	2b00      	cmp	r3, #0
 810671e:	d101      	bne.n	8106724 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106720:	2301      	movs	r3, #1
 8106722:	e049      	b.n	81067b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810672a:	b2db      	uxtb	r3, r3
 810672c:	2b00      	cmp	r3, #0
 810672e:	d106      	bne.n	810673e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	2200      	movs	r2, #0
 8106734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106738:	6878      	ldr	r0, [r7, #4]
 810673a:	f000 f841 	bl	81067c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810673e:	687b      	ldr	r3, [r7, #4]
 8106740:	2202      	movs	r2, #2
 8106742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106746:	687b      	ldr	r3, [r7, #4]
 8106748:	681a      	ldr	r2, [r3, #0]
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	3304      	adds	r3, #4
 810674e:	4619      	mov	r1, r3
 8106750:	4610      	mov	r0, r2
 8106752:	f000 f9e7 	bl	8106b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106756:	687b      	ldr	r3, [r7, #4]
 8106758:	2201      	movs	r2, #1
 810675a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810675e:	687b      	ldr	r3, [r7, #4]
 8106760:	2201      	movs	r2, #1
 8106762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106766:	687b      	ldr	r3, [r7, #4]
 8106768:	2201      	movs	r2, #1
 810676a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810676e:	687b      	ldr	r3, [r7, #4]
 8106770:	2201      	movs	r2, #1
 8106772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	2201      	movs	r2, #1
 810677a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810677e:	687b      	ldr	r3, [r7, #4]
 8106780:	2201      	movs	r2, #1
 8106782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106786:	687b      	ldr	r3, [r7, #4]
 8106788:	2201      	movs	r2, #1
 810678a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810678e:	687b      	ldr	r3, [r7, #4]
 8106790:	2201      	movs	r2, #1
 8106792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106796:	687b      	ldr	r3, [r7, #4]
 8106798:	2201      	movs	r2, #1
 810679a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	2201      	movs	r2, #1
 81067a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81067a6:	687b      	ldr	r3, [r7, #4]
 81067a8:	2201      	movs	r2, #1
 81067aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81067ae:	687b      	ldr	r3, [r7, #4]
 81067b0:	2201      	movs	r2, #1
 81067b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81067b6:	2300      	movs	r3, #0
}
 81067b8:	4618      	mov	r0, r3
 81067ba:	3708      	adds	r7, #8
 81067bc:	46bd      	mov	sp, r7
 81067be:	bd80      	pop	{r7, pc}

081067c0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81067c0:	b480      	push	{r7}
 81067c2:	b083      	sub	sp, #12
 81067c4:	af00      	add	r7, sp, #0
 81067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81067c8:	bf00      	nop
 81067ca:	370c      	adds	r7, #12
 81067cc:	46bd      	mov	sp, r7
 81067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067d2:	4770      	bx	lr

081067d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81067d4:	b480      	push	{r7}
 81067d6:	b085      	sub	sp, #20
 81067d8:	af00      	add	r7, sp, #0
 81067da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81067dc:	687b      	ldr	r3, [r7, #4]
 81067de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81067e2:	b2db      	uxtb	r3, r3
 81067e4:	2b01      	cmp	r3, #1
 81067e6:	d001      	beq.n	81067ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81067e8:	2301      	movs	r3, #1
 81067ea:	e054      	b.n	8106896 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	2202      	movs	r2, #2
 81067f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	681b      	ldr	r3, [r3, #0]
 81067f8:	68da      	ldr	r2, [r3, #12]
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	681b      	ldr	r3, [r3, #0]
 81067fe:	f042 0201 	orr.w	r2, r2, #1
 8106802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106804:	687b      	ldr	r3, [r7, #4]
 8106806:	681b      	ldr	r3, [r3, #0]
 8106808:	4a26      	ldr	r2, [pc, #152]	@ (81068a4 <HAL_TIM_Base_Start_IT+0xd0>)
 810680a:	4293      	cmp	r3, r2
 810680c:	d022      	beq.n	8106854 <HAL_TIM_Base_Start_IT+0x80>
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	681b      	ldr	r3, [r3, #0]
 8106812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106816:	d01d      	beq.n	8106854 <HAL_TIM_Base_Start_IT+0x80>
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	681b      	ldr	r3, [r3, #0]
 810681c:	4a22      	ldr	r2, [pc, #136]	@ (81068a8 <HAL_TIM_Base_Start_IT+0xd4>)
 810681e:	4293      	cmp	r3, r2
 8106820:	d018      	beq.n	8106854 <HAL_TIM_Base_Start_IT+0x80>
 8106822:	687b      	ldr	r3, [r7, #4]
 8106824:	681b      	ldr	r3, [r3, #0]
 8106826:	4a21      	ldr	r2, [pc, #132]	@ (81068ac <HAL_TIM_Base_Start_IT+0xd8>)
 8106828:	4293      	cmp	r3, r2
 810682a:	d013      	beq.n	8106854 <HAL_TIM_Base_Start_IT+0x80>
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	681b      	ldr	r3, [r3, #0]
 8106830:	4a1f      	ldr	r2, [pc, #124]	@ (81068b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8106832:	4293      	cmp	r3, r2
 8106834:	d00e      	beq.n	8106854 <HAL_TIM_Base_Start_IT+0x80>
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	681b      	ldr	r3, [r3, #0]
 810683a:	4a1e      	ldr	r2, [pc, #120]	@ (81068b4 <HAL_TIM_Base_Start_IT+0xe0>)
 810683c:	4293      	cmp	r3, r2
 810683e:	d009      	beq.n	8106854 <HAL_TIM_Base_Start_IT+0x80>
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	681b      	ldr	r3, [r3, #0]
 8106844:	4a1c      	ldr	r2, [pc, #112]	@ (81068b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8106846:	4293      	cmp	r3, r2
 8106848:	d004      	beq.n	8106854 <HAL_TIM_Base_Start_IT+0x80>
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	681b      	ldr	r3, [r3, #0]
 810684e:	4a1b      	ldr	r2, [pc, #108]	@ (81068bc <HAL_TIM_Base_Start_IT+0xe8>)
 8106850:	4293      	cmp	r3, r2
 8106852:	d115      	bne.n	8106880 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106854:	687b      	ldr	r3, [r7, #4]
 8106856:	681b      	ldr	r3, [r3, #0]
 8106858:	689a      	ldr	r2, [r3, #8]
 810685a:	4b19      	ldr	r3, [pc, #100]	@ (81068c0 <HAL_TIM_Base_Start_IT+0xec>)
 810685c:	4013      	ands	r3, r2
 810685e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106860:	68fb      	ldr	r3, [r7, #12]
 8106862:	2b06      	cmp	r3, #6
 8106864:	d015      	beq.n	8106892 <HAL_TIM_Base_Start_IT+0xbe>
 8106866:	68fb      	ldr	r3, [r7, #12]
 8106868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810686c:	d011      	beq.n	8106892 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	681b      	ldr	r3, [r3, #0]
 8106872:	681a      	ldr	r2, [r3, #0]
 8106874:	687b      	ldr	r3, [r7, #4]
 8106876:	681b      	ldr	r3, [r3, #0]
 8106878:	f042 0201 	orr.w	r2, r2, #1
 810687c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810687e:	e008      	b.n	8106892 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	681b      	ldr	r3, [r3, #0]
 8106884:	681a      	ldr	r2, [r3, #0]
 8106886:	687b      	ldr	r3, [r7, #4]
 8106888:	681b      	ldr	r3, [r3, #0]
 810688a:	f042 0201 	orr.w	r2, r2, #1
 810688e:	601a      	str	r2, [r3, #0]
 8106890:	e000      	b.n	8106894 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106894:	2300      	movs	r3, #0
}
 8106896:	4618      	mov	r0, r3
 8106898:	3714      	adds	r7, #20
 810689a:	46bd      	mov	sp, r7
 810689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068a0:	4770      	bx	lr
 81068a2:	bf00      	nop
 81068a4:	40010000 	.word	0x40010000
 81068a8:	40000400 	.word	0x40000400
 81068ac:	40000800 	.word	0x40000800
 81068b0:	40000c00 	.word	0x40000c00
 81068b4:	40010400 	.word	0x40010400
 81068b8:	40001800 	.word	0x40001800
 81068bc:	40014000 	.word	0x40014000
 81068c0:	00010007 	.word	0x00010007

081068c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81068c4:	b580      	push	{r7, lr}
 81068c6:	b084      	sub	sp, #16
 81068c8:	af00      	add	r7, sp, #0
 81068ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	681b      	ldr	r3, [r3, #0]
 81068d0:	68db      	ldr	r3, [r3, #12]
 81068d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	681b      	ldr	r3, [r3, #0]
 81068d8:	691b      	ldr	r3, [r3, #16]
 81068da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 81068dc:	68bb      	ldr	r3, [r7, #8]
 81068de:	f003 0302 	and.w	r3, r3, #2
 81068e2:	2b00      	cmp	r3, #0
 81068e4:	d020      	beq.n	8106928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 81068e6:	68fb      	ldr	r3, [r7, #12]
 81068e8:	f003 0302 	and.w	r3, r3, #2
 81068ec:	2b00      	cmp	r3, #0
 81068ee:	d01b      	beq.n	8106928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	681b      	ldr	r3, [r3, #0]
 81068f4:	f06f 0202 	mvn.w	r2, #2
 81068f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	2201      	movs	r2, #1
 81068fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	681b      	ldr	r3, [r3, #0]
 8106904:	699b      	ldr	r3, [r3, #24]
 8106906:	f003 0303 	and.w	r3, r3, #3
 810690a:	2b00      	cmp	r3, #0
 810690c:	d003      	beq.n	8106916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810690e:	6878      	ldr	r0, [r7, #4]
 8106910:	f000 f8e9 	bl	8106ae6 <HAL_TIM_IC_CaptureCallback>
 8106914:	e005      	b.n	8106922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106916:	6878      	ldr	r0, [r7, #4]
 8106918:	f000 f8db 	bl	8106ad2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810691c:	6878      	ldr	r0, [r7, #4]
 810691e:	f000 f8ec 	bl	8106afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106922:	687b      	ldr	r3, [r7, #4]
 8106924:	2200      	movs	r2, #0
 8106926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8106928:	68bb      	ldr	r3, [r7, #8]
 810692a:	f003 0304 	and.w	r3, r3, #4
 810692e:	2b00      	cmp	r3, #0
 8106930:	d020      	beq.n	8106974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8106932:	68fb      	ldr	r3, [r7, #12]
 8106934:	f003 0304 	and.w	r3, r3, #4
 8106938:	2b00      	cmp	r3, #0
 810693a:	d01b      	beq.n	8106974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	681b      	ldr	r3, [r3, #0]
 8106940:	f06f 0204 	mvn.w	r2, #4
 8106944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	2202      	movs	r2, #2
 810694a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	681b      	ldr	r3, [r3, #0]
 8106950:	699b      	ldr	r3, [r3, #24]
 8106952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106956:	2b00      	cmp	r3, #0
 8106958:	d003      	beq.n	8106962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810695a:	6878      	ldr	r0, [r7, #4]
 810695c:	f000 f8c3 	bl	8106ae6 <HAL_TIM_IC_CaptureCallback>
 8106960:	e005      	b.n	810696e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106962:	6878      	ldr	r0, [r7, #4]
 8106964:	f000 f8b5 	bl	8106ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106968:	6878      	ldr	r0, [r7, #4]
 810696a:	f000 f8c6 	bl	8106afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810696e:	687b      	ldr	r3, [r7, #4]
 8106970:	2200      	movs	r2, #0
 8106972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8106974:	68bb      	ldr	r3, [r7, #8]
 8106976:	f003 0308 	and.w	r3, r3, #8
 810697a:	2b00      	cmp	r3, #0
 810697c:	d020      	beq.n	81069c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810697e:	68fb      	ldr	r3, [r7, #12]
 8106980:	f003 0308 	and.w	r3, r3, #8
 8106984:	2b00      	cmp	r3, #0
 8106986:	d01b      	beq.n	81069c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8106988:	687b      	ldr	r3, [r7, #4]
 810698a:	681b      	ldr	r3, [r3, #0]
 810698c:	f06f 0208 	mvn.w	r2, #8
 8106990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106992:	687b      	ldr	r3, [r7, #4]
 8106994:	2204      	movs	r2, #4
 8106996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106998:	687b      	ldr	r3, [r7, #4]
 810699a:	681b      	ldr	r3, [r3, #0]
 810699c:	69db      	ldr	r3, [r3, #28]
 810699e:	f003 0303 	and.w	r3, r3, #3
 81069a2:	2b00      	cmp	r3, #0
 81069a4:	d003      	beq.n	81069ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81069a6:	6878      	ldr	r0, [r7, #4]
 81069a8:	f000 f89d 	bl	8106ae6 <HAL_TIM_IC_CaptureCallback>
 81069ac:	e005      	b.n	81069ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81069ae:	6878      	ldr	r0, [r7, #4]
 81069b0:	f000 f88f 	bl	8106ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81069b4:	6878      	ldr	r0, [r7, #4]
 81069b6:	f000 f8a0 	bl	8106afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	2200      	movs	r2, #0
 81069be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 81069c0:	68bb      	ldr	r3, [r7, #8]
 81069c2:	f003 0310 	and.w	r3, r3, #16
 81069c6:	2b00      	cmp	r3, #0
 81069c8:	d020      	beq.n	8106a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81069ca:	68fb      	ldr	r3, [r7, #12]
 81069cc:	f003 0310 	and.w	r3, r3, #16
 81069d0:	2b00      	cmp	r3, #0
 81069d2:	d01b      	beq.n	8106a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 81069d4:	687b      	ldr	r3, [r7, #4]
 81069d6:	681b      	ldr	r3, [r3, #0]
 81069d8:	f06f 0210 	mvn.w	r2, #16
 81069dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81069de:	687b      	ldr	r3, [r7, #4]
 81069e0:	2208      	movs	r2, #8
 81069e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81069e4:	687b      	ldr	r3, [r7, #4]
 81069e6:	681b      	ldr	r3, [r3, #0]
 81069e8:	69db      	ldr	r3, [r3, #28]
 81069ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81069ee:	2b00      	cmp	r3, #0
 81069f0:	d003      	beq.n	81069fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81069f2:	6878      	ldr	r0, [r7, #4]
 81069f4:	f000 f877 	bl	8106ae6 <HAL_TIM_IC_CaptureCallback>
 81069f8:	e005      	b.n	8106a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81069fa:	6878      	ldr	r0, [r7, #4]
 81069fc:	f000 f869 	bl	8106ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106a00:	6878      	ldr	r0, [r7, #4]
 8106a02:	f000 f87a 	bl	8106afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106a06:	687b      	ldr	r3, [r7, #4]
 8106a08:	2200      	movs	r2, #0
 8106a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8106a0c:	68bb      	ldr	r3, [r7, #8]
 8106a0e:	f003 0301 	and.w	r3, r3, #1
 8106a12:	2b00      	cmp	r3, #0
 8106a14:	d00c      	beq.n	8106a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8106a16:	68fb      	ldr	r3, [r7, #12]
 8106a18:	f003 0301 	and.w	r3, r3, #1
 8106a1c:	2b00      	cmp	r3, #0
 8106a1e:	d007      	beq.n	8106a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	f06f 0201 	mvn.w	r2, #1
 8106a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8106a2a:	6878      	ldr	r0, [r7, #4]
 8106a2c:	f7fa fcee 	bl	810140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106a30:	68bb      	ldr	r3, [r7, #8]
 8106a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106a36:	2b00      	cmp	r3, #0
 8106a38:	d104      	bne.n	8106a44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8106a3a:	68bb      	ldr	r3, [r7, #8]
 8106a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106a40:	2b00      	cmp	r3, #0
 8106a42:	d00c      	beq.n	8106a5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106a44:	68fb      	ldr	r3, [r7, #12]
 8106a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106a4a:	2b00      	cmp	r3, #0
 8106a4c:	d007      	beq.n	8106a5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	681b      	ldr	r3, [r3, #0]
 8106a52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8106a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106a58:	6878      	ldr	r0, [r7, #4]
 8106a5a:	f000 f90d 	bl	8106c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8106a5e:	68bb      	ldr	r3, [r7, #8]
 8106a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106a64:	2b00      	cmp	r3, #0
 8106a66:	d00c      	beq.n	8106a82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106a68:	68fb      	ldr	r3, [r7, #12]
 8106a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106a6e:	2b00      	cmp	r3, #0
 8106a70:	d007      	beq.n	8106a82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106a72:	687b      	ldr	r3, [r7, #4]
 8106a74:	681b      	ldr	r3, [r3, #0]
 8106a76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8106a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106a7c:	6878      	ldr	r0, [r7, #4]
 8106a7e:	f000 f905 	bl	8106c8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8106a82:	68bb      	ldr	r3, [r7, #8]
 8106a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106a88:	2b00      	cmp	r3, #0
 8106a8a:	d00c      	beq.n	8106aa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8106a8c:	68fb      	ldr	r3, [r7, #12]
 8106a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106a92:	2b00      	cmp	r3, #0
 8106a94:	d007      	beq.n	8106aa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8106a96:	687b      	ldr	r3, [r7, #4]
 8106a98:	681b      	ldr	r3, [r3, #0]
 8106a9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8106a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106aa0:	6878      	ldr	r0, [r7, #4]
 8106aa2:	f000 f834 	bl	8106b0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8106aa6:	68bb      	ldr	r3, [r7, #8]
 8106aa8:	f003 0320 	and.w	r3, r3, #32
 8106aac:	2b00      	cmp	r3, #0
 8106aae:	d00c      	beq.n	8106aca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8106ab0:	68fb      	ldr	r3, [r7, #12]
 8106ab2:	f003 0320 	and.w	r3, r3, #32
 8106ab6:	2b00      	cmp	r3, #0
 8106ab8:	d007      	beq.n	8106aca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	681b      	ldr	r3, [r3, #0]
 8106abe:	f06f 0220 	mvn.w	r2, #32
 8106ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106ac4:	6878      	ldr	r0, [r7, #4]
 8106ac6:	f000 f8cd 	bl	8106c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8106aca:	bf00      	nop
 8106acc:	3710      	adds	r7, #16
 8106ace:	46bd      	mov	sp, r7
 8106ad0:	bd80      	pop	{r7, pc}

08106ad2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106ad2:	b480      	push	{r7}
 8106ad4:	b083      	sub	sp, #12
 8106ad6:	af00      	add	r7, sp, #0
 8106ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106ada:	bf00      	nop
 8106adc:	370c      	adds	r7, #12
 8106ade:	46bd      	mov	sp, r7
 8106ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ae4:	4770      	bx	lr

08106ae6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8106ae6:	b480      	push	{r7}
 8106ae8:	b083      	sub	sp, #12
 8106aea:	af00      	add	r7, sp, #0
 8106aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106aee:	bf00      	nop
 8106af0:	370c      	adds	r7, #12
 8106af2:	46bd      	mov	sp, r7
 8106af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106af8:	4770      	bx	lr

08106afa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8106afa:	b480      	push	{r7}
 8106afc:	b083      	sub	sp, #12
 8106afe:	af00      	add	r7, sp, #0
 8106b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8106b02:	bf00      	nop
 8106b04:	370c      	adds	r7, #12
 8106b06:	46bd      	mov	sp, r7
 8106b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b0c:	4770      	bx	lr

08106b0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8106b0e:	b480      	push	{r7}
 8106b10:	b083      	sub	sp, #12
 8106b12:	af00      	add	r7, sp, #0
 8106b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8106b16:	bf00      	nop
 8106b18:	370c      	adds	r7, #12
 8106b1a:	46bd      	mov	sp, r7
 8106b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b20:	4770      	bx	lr
	...

08106b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106b24:	b480      	push	{r7}
 8106b26:	b085      	sub	sp, #20
 8106b28:	af00      	add	r7, sp, #0
 8106b2a:	6078      	str	r0, [r7, #4]
 8106b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106b2e:	687b      	ldr	r3, [r7, #4]
 8106b30:	681b      	ldr	r3, [r3, #0]
 8106b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	4a43      	ldr	r2, [pc, #268]	@ (8106c44 <TIM_Base_SetConfig+0x120>)
 8106b38:	4293      	cmp	r3, r2
 8106b3a:	d013      	beq.n	8106b64 <TIM_Base_SetConfig+0x40>
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b42:	d00f      	beq.n	8106b64 <TIM_Base_SetConfig+0x40>
 8106b44:	687b      	ldr	r3, [r7, #4]
 8106b46:	4a40      	ldr	r2, [pc, #256]	@ (8106c48 <TIM_Base_SetConfig+0x124>)
 8106b48:	4293      	cmp	r3, r2
 8106b4a:	d00b      	beq.n	8106b64 <TIM_Base_SetConfig+0x40>
 8106b4c:	687b      	ldr	r3, [r7, #4]
 8106b4e:	4a3f      	ldr	r2, [pc, #252]	@ (8106c4c <TIM_Base_SetConfig+0x128>)
 8106b50:	4293      	cmp	r3, r2
 8106b52:	d007      	beq.n	8106b64 <TIM_Base_SetConfig+0x40>
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	4a3e      	ldr	r2, [pc, #248]	@ (8106c50 <TIM_Base_SetConfig+0x12c>)
 8106b58:	4293      	cmp	r3, r2
 8106b5a:	d003      	beq.n	8106b64 <TIM_Base_SetConfig+0x40>
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	4a3d      	ldr	r2, [pc, #244]	@ (8106c54 <TIM_Base_SetConfig+0x130>)
 8106b60:	4293      	cmp	r3, r2
 8106b62:	d108      	bne.n	8106b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106b64:	68fb      	ldr	r3, [r7, #12]
 8106b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8106b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106b6c:	683b      	ldr	r3, [r7, #0]
 8106b6e:	685b      	ldr	r3, [r3, #4]
 8106b70:	68fa      	ldr	r2, [r7, #12]
 8106b72:	4313      	orrs	r3, r2
 8106b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106b76:	687b      	ldr	r3, [r7, #4]
 8106b78:	4a32      	ldr	r2, [pc, #200]	@ (8106c44 <TIM_Base_SetConfig+0x120>)
 8106b7a:	4293      	cmp	r3, r2
 8106b7c:	d01f      	beq.n	8106bbe <TIM_Base_SetConfig+0x9a>
 8106b7e:	687b      	ldr	r3, [r7, #4]
 8106b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b84:	d01b      	beq.n	8106bbe <TIM_Base_SetConfig+0x9a>
 8106b86:	687b      	ldr	r3, [r7, #4]
 8106b88:	4a2f      	ldr	r2, [pc, #188]	@ (8106c48 <TIM_Base_SetConfig+0x124>)
 8106b8a:	4293      	cmp	r3, r2
 8106b8c:	d017      	beq.n	8106bbe <TIM_Base_SetConfig+0x9a>
 8106b8e:	687b      	ldr	r3, [r7, #4]
 8106b90:	4a2e      	ldr	r2, [pc, #184]	@ (8106c4c <TIM_Base_SetConfig+0x128>)
 8106b92:	4293      	cmp	r3, r2
 8106b94:	d013      	beq.n	8106bbe <TIM_Base_SetConfig+0x9a>
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	4a2d      	ldr	r2, [pc, #180]	@ (8106c50 <TIM_Base_SetConfig+0x12c>)
 8106b9a:	4293      	cmp	r3, r2
 8106b9c:	d00f      	beq.n	8106bbe <TIM_Base_SetConfig+0x9a>
 8106b9e:	687b      	ldr	r3, [r7, #4]
 8106ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8106c54 <TIM_Base_SetConfig+0x130>)
 8106ba2:	4293      	cmp	r3, r2
 8106ba4:	d00b      	beq.n	8106bbe <TIM_Base_SetConfig+0x9a>
 8106ba6:	687b      	ldr	r3, [r7, #4]
 8106ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8106c58 <TIM_Base_SetConfig+0x134>)
 8106baa:	4293      	cmp	r3, r2
 8106bac:	d007      	beq.n	8106bbe <TIM_Base_SetConfig+0x9a>
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8106c5c <TIM_Base_SetConfig+0x138>)
 8106bb2:	4293      	cmp	r3, r2
 8106bb4:	d003      	beq.n	8106bbe <TIM_Base_SetConfig+0x9a>
 8106bb6:	687b      	ldr	r3, [r7, #4]
 8106bb8:	4a29      	ldr	r2, [pc, #164]	@ (8106c60 <TIM_Base_SetConfig+0x13c>)
 8106bba:	4293      	cmp	r3, r2
 8106bbc:	d108      	bne.n	8106bd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106bbe:	68fb      	ldr	r3, [r7, #12]
 8106bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106bc6:	683b      	ldr	r3, [r7, #0]
 8106bc8:	68db      	ldr	r3, [r3, #12]
 8106bca:	68fa      	ldr	r2, [r7, #12]
 8106bcc:	4313      	orrs	r3, r2
 8106bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106bd0:	68fb      	ldr	r3, [r7, #12]
 8106bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8106bd6:	683b      	ldr	r3, [r7, #0]
 8106bd8:	695b      	ldr	r3, [r3, #20]
 8106bda:	4313      	orrs	r3, r2
 8106bdc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106bde:	683b      	ldr	r3, [r7, #0]
 8106be0:	689a      	ldr	r2, [r3, #8]
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106be6:	683b      	ldr	r3, [r7, #0]
 8106be8:	681a      	ldr	r2, [r3, #0]
 8106bea:	687b      	ldr	r3, [r7, #4]
 8106bec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	4a14      	ldr	r2, [pc, #80]	@ (8106c44 <TIM_Base_SetConfig+0x120>)
 8106bf2:	4293      	cmp	r3, r2
 8106bf4:	d00f      	beq.n	8106c16 <TIM_Base_SetConfig+0xf2>
 8106bf6:	687b      	ldr	r3, [r7, #4]
 8106bf8:	4a16      	ldr	r2, [pc, #88]	@ (8106c54 <TIM_Base_SetConfig+0x130>)
 8106bfa:	4293      	cmp	r3, r2
 8106bfc:	d00b      	beq.n	8106c16 <TIM_Base_SetConfig+0xf2>
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	4a15      	ldr	r2, [pc, #84]	@ (8106c58 <TIM_Base_SetConfig+0x134>)
 8106c02:	4293      	cmp	r3, r2
 8106c04:	d007      	beq.n	8106c16 <TIM_Base_SetConfig+0xf2>
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	4a14      	ldr	r2, [pc, #80]	@ (8106c5c <TIM_Base_SetConfig+0x138>)
 8106c0a:	4293      	cmp	r3, r2
 8106c0c:	d003      	beq.n	8106c16 <TIM_Base_SetConfig+0xf2>
 8106c0e:	687b      	ldr	r3, [r7, #4]
 8106c10:	4a13      	ldr	r2, [pc, #76]	@ (8106c60 <TIM_Base_SetConfig+0x13c>)
 8106c12:	4293      	cmp	r3, r2
 8106c14:	d103      	bne.n	8106c1e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106c16:	683b      	ldr	r3, [r7, #0]
 8106c18:	691a      	ldr	r2, [r3, #16]
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8106c1e:	687b      	ldr	r3, [r7, #4]
 8106c20:	681b      	ldr	r3, [r3, #0]
 8106c22:	f043 0204 	orr.w	r2, r3, #4
 8106c26:	687b      	ldr	r3, [r7, #4]
 8106c28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	2201      	movs	r2, #1
 8106c2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	68fa      	ldr	r2, [r7, #12]
 8106c34:	601a      	str	r2, [r3, #0]
}
 8106c36:	bf00      	nop
 8106c38:	3714      	adds	r7, #20
 8106c3a:	46bd      	mov	sp, r7
 8106c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c40:	4770      	bx	lr
 8106c42:	bf00      	nop
 8106c44:	40010000 	.word	0x40010000
 8106c48:	40000400 	.word	0x40000400
 8106c4c:	40000800 	.word	0x40000800
 8106c50:	40000c00 	.word	0x40000c00
 8106c54:	40010400 	.word	0x40010400
 8106c58:	40014000 	.word	0x40014000
 8106c5c:	40014400 	.word	0x40014400
 8106c60:	40014800 	.word	0x40014800

08106c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106c64:	b480      	push	{r7}
 8106c66:	b083      	sub	sp, #12
 8106c68:	af00      	add	r7, sp, #0
 8106c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106c6c:	bf00      	nop
 8106c6e:	370c      	adds	r7, #12
 8106c70:	46bd      	mov	sp, r7
 8106c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c76:	4770      	bx	lr

08106c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106c78:	b480      	push	{r7}
 8106c7a:	b083      	sub	sp, #12
 8106c7c:	af00      	add	r7, sp, #0
 8106c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8106c80:	bf00      	nop
 8106c82:	370c      	adds	r7, #12
 8106c84:	46bd      	mov	sp, r7
 8106c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c8a:	4770      	bx	lr

08106c8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106c8c:	b480      	push	{r7}
 8106c8e:	b083      	sub	sp, #12
 8106c90:	af00      	add	r7, sp, #0
 8106c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106c94:	bf00      	nop
 8106c96:	370c      	adds	r7, #12
 8106c98:	46bd      	mov	sp, r7
 8106c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c9e:	4770      	bx	lr

08106ca0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106ca0:	b580      	push	{r7, lr}
 8106ca2:	b08a      	sub	sp, #40	@ 0x28
 8106ca4:	af02      	add	r7, sp, #8
 8106ca6:	60f8      	str	r0, [r7, #12]
 8106ca8:	60b9      	str	r1, [r7, #8]
 8106caa:	603b      	str	r3, [r7, #0]
 8106cac:	4613      	mov	r3, r2
 8106cae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8106cb0:	68fb      	ldr	r3, [r7, #12]
 8106cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106cb6:	2b20      	cmp	r3, #32
 8106cb8:	d17b      	bne.n	8106db2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8106cba:	68bb      	ldr	r3, [r7, #8]
 8106cbc:	2b00      	cmp	r3, #0
 8106cbe:	d002      	beq.n	8106cc6 <HAL_UART_Transmit+0x26>
 8106cc0:	88fb      	ldrh	r3, [r7, #6]
 8106cc2:	2b00      	cmp	r3, #0
 8106cc4:	d101      	bne.n	8106cca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8106cc6:	2301      	movs	r3, #1
 8106cc8:	e074      	b.n	8106db4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106cca:	68fb      	ldr	r3, [r7, #12]
 8106ccc:	2200      	movs	r2, #0
 8106cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106cd2:	68fb      	ldr	r3, [r7, #12]
 8106cd4:	2221      	movs	r2, #33	@ 0x21
 8106cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106cda:	f7fb f923 	bl	8101f24 <HAL_GetTick>
 8106cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8106ce0:	68fb      	ldr	r3, [r7, #12]
 8106ce2:	88fa      	ldrh	r2, [r7, #6]
 8106ce4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8106ce8:	68fb      	ldr	r3, [r7, #12]
 8106cea:	88fa      	ldrh	r2, [r7, #6]
 8106cec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106cf0:	68fb      	ldr	r3, [r7, #12]
 8106cf2:	689b      	ldr	r3, [r3, #8]
 8106cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106cf8:	d108      	bne.n	8106d0c <HAL_UART_Transmit+0x6c>
 8106cfa:	68fb      	ldr	r3, [r7, #12]
 8106cfc:	691b      	ldr	r3, [r3, #16]
 8106cfe:	2b00      	cmp	r3, #0
 8106d00:	d104      	bne.n	8106d0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8106d02:	2300      	movs	r3, #0
 8106d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8106d06:	68bb      	ldr	r3, [r7, #8]
 8106d08:	61bb      	str	r3, [r7, #24]
 8106d0a:	e003      	b.n	8106d14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8106d0c:	68bb      	ldr	r3, [r7, #8]
 8106d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106d10:	2300      	movs	r3, #0
 8106d12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8106d14:	e030      	b.n	8106d78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106d16:	683b      	ldr	r3, [r7, #0]
 8106d18:	9300      	str	r3, [sp, #0]
 8106d1a:	697b      	ldr	r3, [r7, #20]
 8106d1c:	2200      	movs	r2, #0
 8106d1e:	2180      	movs	r1, #128	@ 0x80
 8106d20:	68f8      	ldr	r0, [r7, #12]
 8106d22:	f000 f84b 	bl	8106dbc <UART_WaitOnFlagUntilTimeout>
 8106d26:	4603      	mov	r3, r0
 8106d28:	2b00      	cmp	r3, #0
 8106d2a:	d005      	beq.n	8106d38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8106d2c:	68fb      	ldr	r3, [r7, #12]
 8106d2e:	2220      	movs	r2, #32
 8106d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8106d34:	2303      	movs	r3, #3
 8106d36:	e03d      	b.n	8106db4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8106d38:	69fb      	ldr	r3, [r7, #28]
 8106d3a:	2b00      	cmp	r3, #0
 8106d3c:	d10b      	bne.n	8106d56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8106d3e:	69bb      	ldr	r3, [r7, #24]
 8106d40:	881b      	ldrh	r3, [r3, #0]
 8106d42:	461a      	mov	r2, r3
 8106d44:	68fb      	ldr	r3, [r7, #12]
 8106d46:	681b      	ldr	r3, [r3, #0]
 8106d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106d4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8106d4e:	69bb      	ldr	r3, [r7, #24]
 8106d50:	3302      	adds	r3, #2
 8106d52:	61bb      	str	r3, [r7, #24]
 8106d54:	e007      	b.n	8106d66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8106d56:	69fb      	ldr	r3, [r7, #28]
 8106d58:	781a      	ldrb	r2, [r3, #0]
 8106d5a:	68fb      	ldr	r3, [r7, #12]
 8106d5c:	681b      	ldr	r3, [r3, #0]
 8106d5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8106d60:	69fb      	ldr	r3, [r7, #28]
 8106d62:	3301      	adds	r3, #1
 8106d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8106d66:	68fb      	ldr	r3, [r7, #12]
 8106d68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8106d6c:	b29b      	uxth	r3, r3
 8106d6e:	3b01      	subs	r3, #1
 8106d70:	b29a      	uxth	r2, r3
 8106d72:	68fb      	ldr	r3, [r7, #12]
 8106d74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8106d78:	68fb      	ldr	r3, [r7, #12]
 8106d7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8106d7e:	b29b      	uxth	r3, r3
 8106d80:	2b00      	cmp	r3, #0
 8106d82:	d1c8      	bne.n	8106d16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8106d84:	683b      	ldr	r3, [r7, #0]
 8106d86:	9300      	str	r3, [sp, #0]
 8106d88:	697b      	ldr	r3, [r7, #20]
 8106d8a:	2200      	movs	r2, #0
 8106d8c:	2140      	movs	r1, #64	@ 0x40
 8106d8e:	68f8      	ldr	r0, [r7, #12]
 8106d90:	f000 f814 	bl	8106dbc <UART_WaitOnFlagUntilTimeout>
 8106d94:	4603      	mov	r3, r0
 8106d96:	2b00      	cmp	r3, #0
 8106d98:	d005      	beq.n	8106da6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8106d9a:	68fb      	ldr	r3, [r7, #12]
 8106d9c:	2220      	movs	r2, #32
 8106d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8106da2:	2303      	movs	r3, #3
 8106da4:	e006      	b.n	8106db4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106da6:	68fb      	ldr	r3, [r7, #12]
 8106da8:	2220      	movs	r2, #32
 8106daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8106dae:	2300      	movs	r3, #0
 8106db0:	e000      	b.n	8106db4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8106db2:	2302      	movs	r3, #2
  }
}
 8106db4:	4618      	mov	r0, r3
 8106db6:	3720      	adds	r7, #32
 8106db8:	46bd      	mov	sp, r7
 8106dba:	bd80      	pop	{r7, pc}

08106dbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106dbc:	b580      	push	{r7, lr}
 8106dbe:	b084      	sub	sp, #16
 8106dc0:	af00      	add	r7, sp, #0
 8106dc2:	60f8      	str	r0, [r7, #12]
 8106dc4:	60b9      	str	r1, [r7, #8]
 8106dc6:	603b      	str	r3, [r7, #0]
 8106dc8:	4613      	mov	r3, r2
 8106dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106dcc:	e04f      	b.n	8106e6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106dce:	69bb      	ldr	r3, [r7, #24]
 8106dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106dd4:	d04b      	beq.n	8106e6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106dd6:	f7fb f8a5 	bl	8101f24 <HAL_GetTick>
 8106dda:	4602      	mov	r2, r0
 8106ddc:	683b      	ldr	r3, [r7, #0]
 8106dde:	1ad3      	subs	r3, r2, r3
 8106de0:	69ba      	ldr	r2, [r7, #24]
 8106de2:	429a      	cmp	r2, r3
 8106de4:	d302      	bcc.n	8106dec <UART_WaitOnFlagUntilTimeout+0x30>
 8106de6:	69bb      	ldr	r3, [r7, #24]
 8106de8:	2b00      	cmp	r3, #0
 8106dea:	d101      	bne.n	8106df0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8106dec:	2303      	movs	r3, #3
 8106dee:	e04e      	b.n	8106e8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8106df0:	68fb      	ldr	r3, [r7, #12]
 8106df2:	681b      	ldr	r3, [r3, #0]
 8106df4:	681b      	ldr	r3, [r3, #0]
 8106df6:	f003 0304 	and.w	r3, r3, #4
 8106dfa:	2b00      	cmp	r3, #0
 8106dfc:	d037      	beq.n	8106e6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8106dfe:	68bb      	ldr	r3, [r7, #8]
 8106e00:	2b80      	cmp	r3, #128	@ 0x80
 8106e02:	d034      	beq.n	8106e6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8106e04:	68bb      	ldr	r3, [r7, #8]
 8106e06:	2b40      	cmp	r3, #64	@ 0x40
 8106e08:	d031      	beq.n	8106e6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8106e0a:	68fb      	ldr	r3, [r7, #12]
 8106e0c:	681b      	ldr	r3, [r3, #0]
 8106e0e:	69db      	ldr	r3, [r3, #28]
 8106e10:	f003 0308 	and.w	r3, r3, #8
 8106e14:	2b08      	cmp	r3, #8
 8106e16:	d110      	bne.n	8106e3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106e18:	68fb      	ldr	r3, [r7, #12]
 8106e1a:	681b      	ldr	r3, [r3, #0]
 8106e1c:	2208      	movs	r2, #8
 8106e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106e20:	68f8      	ldr	r0, [r7, #12]
 8106e22:	f000 f838 	bl	8106e96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8106e26:	68fb      	ldr	r3, [r7, #12]
 8106e28:	2208      	movs	r2, #8
 8106e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106e2e:	68fb      	ldr	r3, [r7, #12]
 8106e30:	2200      	movs	r2, #0
 8106e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8106e36:	2301      	movs	r3, #1
 8106e38:	e029      	b.n	8106e8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106e3a:	68fb      	ldr	r3, [r7, #12]
 8106e3c:	681b      	ldr	r3, [r3, #0]
 8106e3e:	69db      	ldr	r3, [r3, #28]
 8106e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8106e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106e48:	d111      	bne.n	8106e6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106e4a:	68fb      	ldr	r3, [r7, #12]
 8106e4c:	681b      	ldr	r3, [r3, #0]
 8106e4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8106e52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106e54:	68f8      	ldr	r0, [r7, #12]
 8106e56:	f000 f81e 	bl	8106e96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106e5a:	68fb      	ldr	r3, [r7, #12]
 8106e5c:	2220      	movs	r2, #32
 8106e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106e62:	68fb      	ldr	r3, [r7, #12]
 8106e64:	2200      	movs	r2, #0
 8106e66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8106e6a:	2303      	movs	r3, #3
 8106e6c:	e00f      	b.n	8106e8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106e6e:	68fb      	ldr	r3, [r7, #12]
 8106e70:	681b      	ldr	r3, [r3, #0]
 8106e72:	69da      	ldr	r2, [r3, #28]
 8106e74:	68bb      	ldr	r3, [r7, #8]
 8106e76:	4013      	ands	r3, r2
 8106e78:	68ba      	ldr	r2, [r7, #8]
 8106e7a:	429a      	cmp	r2, r3
 8106e7c:	bf0c      	ite	eq
 8106e7e:	2301      	moveq	r3, #1
 8106e80:	2300      	movne	r3, #0
 8106e82:	b2db      	uxtb	r3, r3
 8106e84:	461a      	mov	r2, r3
 8106e86:	79fb      	ldrb	r3, [r7, #7]
 8106e88:	429a      	cmp	r2, r3
 8106e8a:	d0a0      	beq.n	8106dce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106e8c:	2300      	movs	r3, #0
}
 8106e8e:	4618      	mov	r0, r3
 8106e90:	3710      	adds	r7, #16
 8106e92:	46bd      	mov	sp, r7
 8106e94:	bd80      	pop	{r7, pc}

08106e96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8106e96:	b480      	push	{r7}
 8106e98:	b095      	sub	sp, #84	@ 0x54
 8106e9a:	af00      	add	r7, sp, #0
 8106e9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106e9e:	687b      	ldr	r3, [r7, #4]
 8106ea0:	681b      	ldr	r3, [r3, #0]
 8106ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106ea6:	e853 3f00 	ldrex	r3, [r3]
 8106eaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8106eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106eae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8106eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106eb4:	687b      	ldr	r3, [r7, #4]
 8106eb6:	681b      	ldr	r3, [r3, #0]
 8106eb8:	461a      	mov	r2, r3
 8106eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8106ebc:	643b      	str	r3, [r7, #64]	@ 0x40
 8106ebe:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ec0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8106ec2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8106ec4:	e841 2300 	strex	r3, r2, [r1]
 8106ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8106eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106ecc:	2b00      	cmp	r3, #0
 8106ece:	d1e6      	bne.n	8106e9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	681b      	ldr	r3, [r3, #0]
 8106ed4:	3308      	adds	r3, #8
 8106ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106ed8:	6a3b      	ldr	r3, [r7, #32]
 8106eda:	e853 3f00 	ldrex	r3, [r3]
 8106ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8106ee0:	69fb      	ldr	r3, [r7, #28]
 8106ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8106ee6:	f023 0301 	bic.w	r3, r3, #1
 8106eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	681b      	ldr	r3, [r3, #0]
 8106ef0:	3308      	adds	r3, #8
 8106ef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106ef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8106ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ef8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106efc:	e841 2300 	strex	r3, r2, [r1]
 8106f00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8106f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106f04:	2b00      	cmp	r3, #0
 8106f06:	d1e3      	bne.n	8106ed0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106f0c:	2b01      	cmp	r3, #1
 8106f0e:	d118      	bne.n	8106f42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	681b      	ldr	r3, [r3, #0]
 8106f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106f16:	68fb      	ldr	r3, [r7, #12]
 8106f18:	e853 3f00 	ldrex	r3, [r3]
 8106f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8106f1e:	68bb      	ldr	r3, [r7, #8]
 8106f20:	f023 0310 	bic.w	r3, r3, #16
 8106f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	681b      	ldr	r3, [r3, #0]
 8106f2a:	461a      	mov	r2, r3
 8106f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8106f2e:	61bb      	str	r3, [r7, #24]
 8106f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106f32:	6979      	ldr	r1, [r7, #20]
 8106f34:	69ba      	ldr	r2, [r7, #24]
 8106f36:	e841 2300 	strex	r3, r2, [r1]
 8106f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8106f3c:	693b      	ldr	r3, [r7, #16]
 8106f3e:	2b00      	cmp	r3, #0
 8106f40:	d1e6      	bne.n	8106f10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8106f42:	687b      	ldr	r3, [r7, #4]
 8106f44:	2220      	movs	r2, #32
 8106f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	2200      	movs	r2, #0
 8106f4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8106f50:	687b      	ldr	r3, [r7, #4]
 8106f52:	2200      	movs	r2, #0
 8106f54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8106f56:	bf00      	nop
 8106f58:	3754      	adds	r7, #84	@ 0x54
 8106f5a:	46bd      	mov	sp, r7
 8106f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f60:	4770      	bx	lr

08106f62 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8106f62:	b084      	sub	sp, #16
 8106f64:	b580      	push	{r7, lr}
 8106f66:	b084      	sub	sp, #16
 8106f68:	af00      	add	r7, sp, #0
 8106f6a:	6078      	str	r0, [r7, #4]
 8106f6c:	f107 001c 	add.w	r0, r7, #28
 8106f70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8106f74:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8106f78:	2b01      	cmp	r3, #1
 8106f7a:	d123      	bne.n	8106fc4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8106f7c:	687b      	ldr	r3, [r7, #4]
 8106f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106f80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8106f88:	687b      	ldr	r3, [r7, #4]
 8106f8a:	68db      	ldr	r3, [r3, #12]
 8106f8c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8106f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8106f94:	687a      	ldr	r2, [r7, #4]
 8106f96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8106f98:	687b      	ldr	r3, [r7, #4]
 8106f9a:	68db      	ldr	r3, [r3, #12]
 8106f9c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8106fa0:	687b      	ldr	r3, [r7, #4]
 8106fa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8106fa4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8106fa8:	2b01      	cmp	r3, #1
 8106faa:	d105      	bne.n	8106fb8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	68db      	ldr	r3, [r3, #12]
 8106fb0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8106fb8:	6878      	ldr	r0, [r7, #4]
 8106fba:	f000 faa7 	bl	810750c <USB_CoreReset>
 8106fbe:	4603      	mov	r3, r0
 8106fc0:	73fb      	strb	r3, [r7, #15]
 8106fc2:	e01b      	b.n	8106ffc <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	68db      	ldr	r3, [r3, #12]
 8106fc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8106fd0:	6878      	ldr	r0, [r7, #4]
 8106fd2:	f000 fa9b 	bl	810750c <USB_CoreReset>
 8106fd6:	4603      	mov	r3, r0
 8106fd8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8106fda:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8106fde:	2b00      	cmp	r3, #0
 8106fe0:	d106      	bne.n	8106ff0 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8106fe2:	687b      	ldr	r3, [r7, #4]
 8106fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106fe6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8106fea:	687b      	ldr	r3, [r7, #4]
 8106fec:	639a      	str	r2, [r3, #56]	@ 0x38
 8106fee:	e005      	b.n	8106ffc <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8106ff0:	687b      	ldr	r3, [r7, #4]
 8106ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106ff4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8106ff8:	687b      	ldr	r3, [r7, #4]
 8106ffa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8106ffc:	7fbb      	ldrb	r3, [r7, #30]
 8106ffe:	2b01      	cmp	r3, #1
 8107000:	d118      	bne.n	8107034 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8107002:	687b      	ldr	r3, [r7, #4]
 8107004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107006:	b29a      	uxth	r2, r3
 8107008:	687b      	ldr	r3, [r7, #4]
 810700a:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107010:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 8107014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107018:	687a      	ldr	r2, [r7, #4]
 810701a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810701c:	687b      	ldr	r3, [r7, #4]
 810701e:	689b      	ldr	r3, [r3, #8]
 8107020:	f043 0206 	orr.w	r2, r3, #6
 8107024:	687b      	ldr	r3, [r7, #4]
 8107026:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	689b      	ldr	r3, [r3, #8]
 810702c:	f043 0220 	orr.w	r2, r3, #32
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8107034:	7bfb      	ldrb	r3, [r7, #15]
}
 8107036:	4618      	mov	r0, r3
 8107038:	3710      	adds	r7, #16
 810703a:	46bd      	mov	sp, r7
 810703c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8107040:	b004      	add	sp, #16
 8107042:	4770      	bx	lr

08107044 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8107044:	b480      	push	{r7}
 8107046:	b083      	sub	sp, #12
 8107048:	af00      	add	r7, sp, #0
 810704a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	689b      	ldr	r3, [r3, #8]
 8107050:	f023 0201 	bic.w	r2, r3, #1
 8107054:	687b      	ldr	r3, [r7, #4]
 8107056:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8107058:	2300      	movs	r3, #0
}
 810705a:	4618      	mov	r0, r3
 810705c:	370c      	adds	r7, #12
 810705e:	46bd      	mov	sp, r7
 8107060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107064:	4770      	bx	lr

08107066 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8107066:	b580      	push	{r7, lr}
 8107068:	b084      	sub	sp, #16
 810706a:	af00      	add	r7, sp, #0
 810706c:	6078      	str	r0, [r7, #4]
 810706e:	460b      	mov	r3, r1
 8107070:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8107072:	2300      	movs	r3, #0
 8107074:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	68db      	ldr	r3, [r3, #12]
 810707a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 810707e:	687b      	ldr	r3, [r7, #4]
 8107080:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8107082:	78fb      	ldrb	r3, [r7, #3]
 8107084:	2b01      	cmp	r3, #1
 8107086:	d115      	bne.n	81070b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8107088:	687b      	ldr	r3, [r7, #4]
 810708a:	68db      	ldr	r3, [r3, #12]
 810708c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8107090:	687b      	ldr	r3, [r7, #4]
 8107092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8107094:	200a      	movs	r0, #10
 8107096:	f7fa ff51 	bl	8101f3c <HAL_Delay>
      ms += 10U;
 810709a:	68fb      	ldr	r3, [r7, #12]
 810709c:	330a      	adds	r3, #10
 810709e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 81070a0:	6878      	ldr	r0, [r7, #4]
 81070a2:	f000 fa25 	bl	81074f0 <USB_GetMode>
 81070a6:	4603      	mov	r3, r0
 81070a8:	2b01      	cmp	r3, #1
 81070aa:	d01e      	beq.n	81070ea <USB_SetCurrentMode+0x84>
 81070ac:	68fb      	ldr	r3, [r7, #12]
 81070ae:	2bc7      	cmp	r3, #199	@ 0xc7
 81070b0:	d9f0      	bls.n	8107094 <USB_SetCurrentMode+0x2e>
 81070b2:	e01a      	b.n	81070ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 81070b4:	78fb      	ldrb	r3, [r7, #3]
 81070b6:	2b00      	cmp	r3, #0
 81070b8:	d115      	bne.n	81070e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 81070ba:	687b      	ldr	r3, [r7, #4]
 81070bc:	68db      	ldr	r3, [r3, #12]
 81070be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 81070c2:	687b      	ldr	r3, [r7, #4]
 81070c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 81070c6:	200a      	movs	r0, #10
 81070c8:	f7fa ff38 	bl	8101f3c <HAL_Delay>
      ms += 10U;
 81070cc:	68fb      	ldr	r3, [r7, #12]
 81070ce:	330a      	adds	r3, #10
 81070d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 81070d2:	6878      	ldr	r0, [r7, #4]
 81070d4:	f000 fa0c 	bl	81074f0 <USB_GetMode>
 81070d8:	4603      	mov	r3, r0
 81070da:	2b00      	cmp	r3, #0
 81070dc:	d005      	beq.n	81070ea <USB_SetCurrentMode+0x84>
 81070de:	68fb      	ldr	r3, [r7, #12]
 81070e0:	2bc7      	cmp	r3, #199	@ 0xc7
 81070e2:	d9f0      	bls.n	81070c6 <USB_SetCurrentMode+0x60>
 81070e4:	e001      	b.n	81070ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 81070e6:	2301      	movs	r3, #1
 81070e8:	e005      	b.n	81070f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 81070ea:	68fb      	ldr	r3, [r7, #12]
 81070ec:	2bc8      	cmp	r3, #200	@ 0xc8
 81070ee:	d101      	bne.n	81070f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 81070f0:	2301      	movs	r3, #1
 81070f2:	e000      	b.n	81070f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 81070f4:	2300      	movs	r3, #0
}
 81070f6:	4618      	mov	r0, r3
 81070f8:	3710      	adds	r7, #16
 81070fa:	46bd      	mov	sp, r7
 81070fc:	bd80      	pop	{r7, pc}
	...

08107100 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8107100:	b084      	sub	sp, #16
 8107102:	b580      	push	{r7, lr}
 8107104:	b086      	sub	sp, #24
 8107106:	af00      	add	r7, sp, #0
 8107108:	6078      	str	r0, [r7, #4]
 810710a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 810710e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8107112:	2300      	movs	r3, #0
 8107114:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810711a:	2300      	movs	r3, #0
 810711c:	613b      	str	r3, [r7, #16]
 810711e:	e009      	b.n	8107134 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8107120:	687a      	ldr	r2, [r7, #4]
 8107122:	693b      	ldr	r3, [r7, #16]
 8107124:	3340      	adds	r3, #64	@ 0x40
 8107126:	009b      	lsls	r3, r3, #2
 8107128:	4413      	add	r3, r2
 810712a:	2200      	movs	r2, #0
 810712c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810712e:	693b      	ldr	r3, [r7, #16]
 8107130:	3301      	adds	r3, #1
 8107132:	613b      	str	r3, [r7, #16]
 8107134:	693b      	ldr	r3, [r7, #16]
 8107136:	2b0e      	cmp	r3, #14
 8107138:	d9f2      	bls.n	8107120 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810713a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810713e:	2b00      	cmp	r3, #0
 8107140:	d11c      	bne.n	810717c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8107142:	68fb      	ldr	r3, [r7, #12]
 8107144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107148:	685b      	ldr	r3, [r3, #4]
 810714a:	68fa      	ldr	r2, [r7, #12]
 810714c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8107150:	f043 0302 	orr.w	r3, r3, #2
 8107154:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8107156:	687b      	ldr	r3, [r7, #4]
 8107158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810715a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8107162:	687b      	ldr	r3, [r7, #4]
 8107164:	681b      	ldr	r3, [r3, #0]
 8107166:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810716e:	687b      	ldr	r3, [r7, #4]
 8107170:	681b      	ldr	r3, [r3, #0]
 8107172:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	601a      	str	r2, [r3, #0]
 810717a:	e005      	b.n	8107188 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107180:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8107184:	687b      	ldr	r3, [r7, #4]
 8107186:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8107188:	68fb      	ldr	r3, [r7, #12]
 810718a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810718e:	461a      	mov	r2, r3
 8107190:	2300      	movs	r3, #0
 8107192:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8107194:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8107198:	2b01      	cmp	r3, #1
 810719a:	d10d      	bne.n	81071b8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810719c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81071a0:	2b00      	cmp	r3, #0
 81071a2:	d104      	bne.n	81071ae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 81071a4:	2100      	movs	r1, #0
 81071a6:	6878      	ldr	r0, [r7, #4]
 81071a8:	f000 f968 	bl	810747c <USB_SetDevSpeed>
 81071ac:	e008      	b.n	81071c0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 81071ae:	2101      	movs	r1, #1
 81071b0:	6878      	ldr	r0, [r7, #4]
 81071b2:	f000 f963 	bl	810747c <USB_SetDevSpeed>
 81071b6:	e003      	b.n	81071c0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 81071b8:	2103      	movs	r1, #3
 81071ba:	6878      	ldr	r0, [r7, #4]
 81071bc:	f000 f95e 	bl	810747c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 81071c0:	2110      	movs	r1, #16
 81071c2:	6878      	ldr	r0, [r7, #4]
 81071c4:	f000 f8fa 	bl	81073bc <USB_FlushTxFifo>
 81071c8:	4603      	mov	r3, r0
 81071ca:	2b00      	cmp	r3, #0
 81071cc:	d001      	beq.n	81071d2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 81071ce:	2301      	movs	r3, #1
 81071d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 81071d2:	6878      	ldr	r0, [r7, #4]
 81071d4:	f000 f924 	bl	8107420 <USB_FlushRxFifo>
 81071d8:	4603      	mov	r3, r0
 81071da:	2b00      	cmp	r3, #0
 81071dc:	d001      	beq.n	81071e2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 81071de:	2301      	movs	r3, #1
 81071e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 81071e2:	68fb      	ldr	r3, [r7, #12]
 81071e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81071e8:	461a      	mov	r2, r3
 81071ea:	2300      	movs	r3, #0
 81071ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 81071ee:	68fb      	ldr	r3, [r7, #12]
 81071f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81071f4:	461a      	mov	r2, r3
 81071f6:	2300      	movs	r3, #0
 81071f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 81071fa:	68fb      	ldr	r3, [r7, #12]
 81071fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107200:	461a      	mov	r2, r3
 8107202:	2300      	movs	r3, #0
 8107204:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107206:	2300      	movs	r3, #0
 8107208:	613b      	str	r3, [r7, #16]
 810720a:	e043      	b.n	8107294 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810720c:	693b      	ldr	r3, [r7, #16]
 810720e:	015a      	lsls	r2, r3, #5
 8107210:	68fb      	ldr	r3, [r7, #12]
 8107212:	4413      	add	r3, r2
 8107214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107218:	681b      	ldr	r3, [r3, #0]
 810721a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810721e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8107222:	d118      	bne.n	8107256 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8107224:	693b      	ldr	r3, [r7, #16]
 8107226:	2b00      	cmp	r3, #0
 8107228:	d10a      	bne.n	8107240 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810722a:	693b      	ldr	r3, [r7, #16]
 810722c:	015a      	lsls	r2, r3, #5
 810722e:	68fb      	ldr	r3, [r7, #12]
 8107230:	4413      	add	r3, r2
 8107232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107236:	461a      	mov	r2, r3
 8107238:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810723c:	6013      	str	r3, [r2, #0]
 810723e:	e013      	b.n	8107268 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8107240:	693b      	ldr	r3, [r7, #16]
 8107242:	015a      	lsls	r2, r3, #5
 8107244:	68fb      	ldr	r3, [r7, #12]
 8107246:	4413      	add	r3, r2
 8107248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810724c:	461a      	mov	r2, r3
 810724e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8107252:	6013      	str	r3, [r2, #0]
 8107254:	e008      	b.n	8107268 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8107256:	693b      	ldr	r3, [r7, #16]
 8107258:	015a      	lsls	r2, r3, #5
 810725a:	68fb      	ldr	r3, [r7, #12]
 810725c:	4413      	add	r3, r2
 810725e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107262:	461a      	mov	r2, r3
 8107264:	2300      	movs	r3, #0
 8107266:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8107268:	693b      	ldr	r3, [r7, #16]
 810726a:	015a      	lsls	r2, r3, #5
 810726c:	68fb      	ldr	r3, [r7, #12]
 810726e:	4413      	add	r3, r2
 8107270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107274:	461a      	mov	r2, r3
 8107276:	2300      	movs	r3, #0
 8107278:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810727a:	693b      	ldr	r3, [r7, #16]
 810727c:	015a      	lsls	r2, r3, #5
 810727e:	68fb      	ldr	r3, [r7, #12]
 8107280:	4413      	add	r3, r2
 8107282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107286:	461a      	mov	r2, r3
 8107288:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810728c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810728e:	693b      	ldr	r3, [r7, #16]
 8107290:	3301      	adds	r3, #1
 8107292:	613b      	str	r3, [r7, #16]
 8107294:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8107298:	461a      	mov	r2, r3
 810729a:	693b      	ldr	r3, [r7, #16]
 810729c:	4293      	cmp	r3, r2
 810729e:	d3b5      	bcc.n	810720c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 81072a0:	2300      	movs	r3, #0
 81072a2:	613b      	str	r3, [r7, #16]
 81072a4:	e043      	b.n	810732e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 81072a6:	693b      	ldr	r3, [r7, #16]
 81072a8:	015a      	lsls	r2, r3, #5
 81072aa:	68fb      	ldr	r3, [r7, #12]
 81072ac:	4413      	add	r3, r2
 81072ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81072b2:	681b      	ldr	r3, [r3, #0]
 81072b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 81072b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81072bc:	d118      	bne.n	81072f0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 81072be:	693b      	ldr	r3, [r7, #16]
 81072c0:	2b00      	cmp	r3, #0
 81072c2:	d10a      	bne.n	81072da <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 81072c4:	693b      	ldr	r3, [r7, #16]
 81072c6:	015a      	lsls	r2, r3, #5
 81072c8:	68fb      	ldr	r3, [r7, #12]
 81072ca:	4413      	add	r3, r2
 81072cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81072d0:	461a      	mov	r2, r3
 81072d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 81072d6:	6013      	str	r3, [r2, #0]
 81072d8:	e013      	b.n	8107302 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 81072da:	693b      	ldr	r3, [r7, #16]
 81072dc:	015a      	lsls	r2, r3, #5
 81072de:	68fb      	ldr	r3, [r7, #12]
 81072e0:	4413      	add	r3, r2
 81072e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81072e6:	461a      	mov	r2, r3
 81072e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 81072ec:	6013      	str	r3, [r2, #0]
 81072ee:	e008      	b.n	8107302 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 81072f0:	693b      	ldr	r3, [r7, #16]
 81072f2:	015a      	lsls	r2, r3, #5
 81072f4:	68fb      	ldr	r3, [r7, #12]
 81072f6:	4413      	add	r3, r2
 81072f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81072fc:	461a      	mov	r2, r3
 81072fe:	2300      	movs	r3, #0
 8107300:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8107302:	693b      	ldr	r3, [r7, #16]
 8107304:	015a      	lsls	r2, r3, #5
 8107306:	68fb      	ldr	r3, [r7, #12]
 8107308:	4413      	add	r3, r2
 810730a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810730e:	461a      	mov	r2, r3
 8107310:	2300      	movs	r3, #0
 8107312:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8107314:	693b      	ldr	r3, [r7, #16]
 8107316:	015a      	lsls	r2, r3, #5
 8107318:	68fb      	ldr	r3, [r7, #12]
 810731a:	4413      	add	r3, r2
 810731c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107320:	461a      	mov	r2, r3
 8107322:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8107326:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107328:	693b      	ldr	r3, [r7, #16]
 810732a:	3301      	adds	r3, #1
 810732c:	613b      	str	r3, [r7, #16]
 810732e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8107332:	461a      	mov	r2, r3
 8107334:	693b      	ldr	r3, [r7, #16]
 8107336:	4293      	cmp	r3, r2
 8107338:	d3b5      	bcc.n	81072a6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810733a:	68fb      	ldr	r3, [r7, #12]
 810733c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107340:	691b      	ldr	r3, [r3, #16]
 8107342:	68fa      	ldr	r2, [r7, #12]
 8107344:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8107348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810734c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810734e:	687b      	ldr	r3, [r7, #4]
 8107350:	2200      	movs	r2, #0
 8107352:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 810735a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810735c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8107360:	2b00      	cmp	r3, #0
 8107362:	d105      	bne.n	8107370 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8107364:	687b      	ldr	r3, [r7, #4]
 8107366:	699b      	ldr	r3, [r3, #24]
 8107368:	f043 0210 	orr.w	r2, r3, #16
 810736c:	687b      	ldr	r3, [r7, #4]
 810736e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8107370:	687b      	ldr	r3, [r7, #4]
 8107372:	699a      	ldr	r2, [r3, #24]
 8107374:	4b10      	ldr	r3, [pc, #64]	@ (81073b8 <USB_DevInit+0x2b8>)
 8107376:	4313      	orrs	r3, r2
 8107378:	687a      	ldr	r2, [r7, #4]
 810737a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810737c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8107380:	2b00      	cmp	r3, #0
 8107382:	d005      	beq.n	8107390 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8107384:	687b      	ldr	r3, [r7, #4]
 8107386:	699b      	ldr	r3, [r3, #24]
 8107388:	f043 0208 	orr.w	r2, r3, #8
 810738c:	687b      	ldr	r3, [r7, #4]
 810738e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8107390:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8107394:	2b01      	cmp	r3, #1
 8107396:	d107      	bne.n	81073a8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8107398:	687b      	ldr	r3, [r7, #4]
 810739a:	699b      	ldr	r3, [r3, #24]
 810739c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 81073a0:	f043 0304 	orr.w	r3, r3, #4
 81073a4:	687a      	ldr	r2, [r7, #4]
 81073a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 81073a8:	7dfb      	ldrb	r3, [r7, #23]
}
 81073aa:	4618      	mov	r0, r3
 81073ac:	3718      	adds	r7, #24
 81073ae:	46bd      	mov	sp, r7
 81073b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81073b4:	b004      	add	sp, #16
 81073b6:	4770      	bx	lr
 81073b8:	803c3800 	.word	0x803c3800

081073bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 81073bc:	b480      	push	{r7}
 81073be:	b085      	sub	sp, #20
 81073c0:	af00      	add	r7, sp, #0
 81073c2:	6078      	str	r0, [r7, #4]
 81073c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 81073c6:	2300      	movs	r3, #0
 81073c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81073ca:	68fb      	ldr	r3, [r7, #12]
 81073cc:	3301      	adds	r3, #1
 81073ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81073d0:	68fb      	ldr	r3, [r7, #12]
 81073d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81073d6:	d901      	bls.n	81073dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 81073d8:	2303      	movs	r3, #3
 81073da:	e01b      	b.n	8107414 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81073dc:	687b      	ldr	r3, [r7, #4]
 81073de:	691b      	ldr	r3, [r3, #16]
 81073e0:	2b00      	cmp	r3, #0
 81073e2:	daf2      	bge.n	81073ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 81073e4:	2300      	movs	r3, #0
 81073e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 81073e8:	683b      	ldr	r3, [r7, #0]
 81073ea:	019b      	lsls	r3, r3, #6
 81073ec:	f043 0220 	orr.w	r2, r3, #32
 81073f0:	687b      	ldr	r3, [r7, #4]
 81073f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81073f4:	68fb      	ldr	r3, [r7, #12]
 81073f6:	3301      	adds	r3, #1
 81073f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81073fa:	68fb      	ldr	r3, [r7, #12]
 81073fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107400:	d901      	bls.n	8107406 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8107402:	2303      	movs	r3, #3
 8107404:	e006      	b.n	8107414 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8107406:	687b      	ldr	r3, [r7, #4]
 8107408:	691b      	ldr	r3, [r3, #16]
 810740a:	f003 0320 	and.w	r3, r3, #32
 810740e:	2b20      	cmp	r3, #32
 8107410:	d0f0      	beq.n	81073f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8107412:	2300      	movs	r3, #0
}
 8107414:	4618      	mov	r0, r3
 8107416:	3714      	adds	r7, #20
 8107418:	46bd      	mov	sp, r7
 810741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810741e:	4770      	bx	lr

08107420 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8107420:	b480      	push	{r7}
 8107422:	b085      	sub	sp, #20
 8107424:	af00      	add	r7, sp, #0
 8107426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8107428:	2300      	movs	r3, #0
 810742a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810742c:	68fb      	ldr	r3, [r7, #12]
 810742e:	3301      	adds	r3, #1
 8107430:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107432:	68fb      	ldr	r3, [r7, #12]
 8107434:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107438:	d901      	bls.n	810743e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810743a:	2303      	movs	r3, #3
 810743c:	e018      	b.n	8107470 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810743e:	687b      	ldr	r3, [r7, #4]
 8107440:	691b      	ldr	r3, [r3, #16]
 8107442:	2b00      	cmp	r3, #0
 8107444:	daf2      	bge.n	810742c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8107446:	2300      	movs	r3, #0
 8107448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	2210      	movs	r2, #16
 810744e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8107450:	68fb      	ldr	r3, [r7, #12]
 8107452:	3301      	adds	r3, #1
 8107454:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107456:	68fb      	ldr	r3, [r7, #12]
 8107458:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810745c:	d901      	bls.n	8107462 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 810745e:	2303      	movs	r3, #3
 8107460:	e006      	b.n	8107470 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8107462:	687b      	ldr	r3, [r7, #4]
 8107464:	691b      	ldr	r3, [r3, #16]
 8107466:	f003 0310 	and.w	r3, r3, #16
 810746a:	2b10      	cmp	r3, #16
 810746c:	d0f0      	beq.n	8107450 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 810746e:	2300      	movs	r3, #0
}
 8107470:	4618      	mov	r0, r3
 8107472:	3714      	adds	r7, #20
 8107474:	46bd      	mov	sp, r7
 8107476:	f85d 7b04 	ldr.w	r7, [sp], #4
 810747a:	4770      	bx	lr

0810747c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810747c:	b480      	push	{r7}
 810747e:	b085      	sub	sp, #20
 8107480:	af00      	add	r7, sp, #0
 8107482:	6078      	str	r0, [r7, #4]
 8107484:	460b      	mov	r3, r1
 8107486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8107488:	687b      	ldr	r3, [r7, #4]
 810748a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810748c:	68fb      	ldr	r3, [r7, #12]
 810748e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107492:	681a      	ldr	r2, [r3, #0]
 8107494:	78fb      	ldrb	r3, [r7, #3]
 8107496:	68f9      	ldr	r1, [r7, #12]
 8107498:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810749c:	4313      	orrs	r3, r2
 810749e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 81074a0:	2300      	movs	r3, #0
}
 81074a2:	4618      	mov	r0, r3
 81074a4:	3714      	adds	r7, #20
 81074a6:	46bd      	mov	sp, r7
 81074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ac:	4770      	bx	lr

081074ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 81074ae:	b480      	push	{r7}
 81074b0:	b085      	sub	sp, #20
 81074b2:	af00      	add	r7, sp, #0
 81074b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81074b6:	687b      	ldr	r3, [r7, #4]
 81074b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 81074ba:	68fb      	ldr	r3, [r7, #12]
 81074bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 81074c0:	681b      	ldr	r3, [r3, #0]
 81074c2:	68fa      	ldr	r2, [r7, #12]
 81074c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 81074c8:	f023 0303 	bic.w	r3, r3, #3
 81074cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 81074ce:	68fb      	ldr	r3, [r7, #12]
 81074d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81074d4:	685b      	ldr	r3, [r3, #4]
 81074d6:	68fa      	ldr	r2, [r7, #12]
 81074d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81074dc:	f043 0302 	orr.w	r3, r3, #2
 81074e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 81074e2:	2300      	movs	r3, #0
}
 81074e4:	4618      	mov	r0, r3
 81074e6:	3714      	adds	r7, #20
 81074e8:	46bd      	mov	sp, r7
 81074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ee:	4770      	bx	lr

081074f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 81074f0:	b480      	push	{r7}
 81074f2:	b083      	sub	sp, #12
 81074f4:	af00      	add	r7, sp, #0
 81074f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 81074f8:	687b      	ldr	r3, [r7, #4]
 81074fa:	695b      	ldr	r3, [r3, #20]
 81074fc:	f003 0301 	and.w	r3, r3, #1
}
 8107500:	4618      	mov	r0, r3
 8107502:	370c      	adds	r7, #12
 8107504:	46bd      	mov	sp, r7
 8107506:	f85d 7b04 	ldr.w	r7, [sp], #4
 810750a:	4770      	bx	lr

0810750c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810750c:	b480      	push	{r7}
 810750e:	b085      	sub	sp, #20
 8107510:	af00      	add	r7, sp, #0
 8107512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8107514:	2300      	movs	r3, #0
 8107516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8107518:	68fb      	ldr	r3, [r7, #12]
 810751a:	3301      	adds	r3, #1
 810751c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810751e:	68fb      	ldr	r3, [r7, #12]
 8107520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107524:	d901      	bls.n	810752a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8107526:	2303      	movs	r3, #3
 8107528:	e01b      	b.n	8107562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810752a:	687b      	ldr	r3, [r7, #4]
 810752c:	691b      	ldr	r3, [r3, #16]
 810752e:	2b00      	cmp	r3, #0
 8107530:	daf2      	bge.n	8107518 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8107532:	2300      	movs	r3, #0
 8107534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8107536:	687b      	ldr	r3, [r7, #4]
 8107538:	691b      	ldr	r3, [r3, #16]
 810753a:	f043 0201 	orr.w	r2, r3, #1
 810753e:	687b      	ldr	r3, [r7, #4]
 8107540:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8107542:	68fb      	ldr	r3, [r7, #12]
 8107544:	3301      	adds	r3, #1
 8107546:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107548:	68fb      	ldr	r3, [r7, #12]
 810754a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810754e:	d901      	bls.n	8107554 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8107550:	2303      	movs	r3, #3
 8107552:	e006      	b.n	8107562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8107554:	687b      	ldr	r3, [r7, #4]
 8107556:	691b      	ldr	r3, [r3, #16]
 8107558:	f003 0301 	and.w	r3, r3, #1
 810755c:	2b01      	cmp	r3, #1
 810755e:	d0f0      	beq.n	8107542 <USB_CoreReset+0x36>

  return HAL_OK;
 8107560:	2300      	movs	r3, #0
}
 8107562:	4618      	mov	r0, r3
 8107564:	3714      	adds	r7, #20
 8107566:	46bd      	mov	sp, r7
 8107568:	f85d 7b04 	ldr.w	r7, [sp], #4
 810756c:	4770      	bx	lr
	...

08107570 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8107570:	b580      	push	{r7, lr}
 8107572:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8107574:	4b05      	ldr	r3, [pc, #20]	@ (810758c <SysTick_Handler+0x1c>)
 8107576:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8107578:	f000 fa00 	bl	810797c <xTaskGetSchedulerState>
 810757c:	4603      	mov	r3, r0
 810757e:	2b01      	cmp	r3, #1
 8107580:	d001      	beq.n	8107586 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8107582:	f000 f8a1 	bl	81076c8 <xPortSysTickHandler>
  }
}
 8107586:	bf00      	nop
 8107588:	bd80      	pop	{r7, pc}
 810758a:	bf00      	nop
 810758c:	e000e010 	.word	0xe000e010

08107590 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8107590:	b480      	push	{r7}
 8107592:	b085      	sub	sp, #20
 8107594:	af00      	add	r7, sp, #0
 8107596:	6078      	str	r0, [r7, #4]
 8107598:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	685b      	ldr	r3, [r3, #4]
 810759e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81075a0:	683b      	ldr	r3, [r7, #0]
 81075a2:	68fa      	ldr	r2, [r7, #12]
 81075a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81075a6:	68fb      	ldr	r3, [r7, #12]
 81075a8:	689a      	ldr	r2, [r3, #8]
 81075aa:	683b      	ldr	r3, [r7, #0]
 81075ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81075ae:	68fb      	ldr	r3, [r7, #12]
 81075b0:	689b      	ldr	r3, [r3, #8]
 81075b2:	683a      	ldr	r2, [r7, #0]
 81075b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81075b6:	68fb      	ldr	r3, [r7, #12]
 81075b8:	683a      	ldr	r2, [r7, #0]
 81075ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81075bc:	683b      	ldr	r3, [r7, #0]
 81075be:	687a      	ldr	r2, [r7, #4]
 81075c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	681b      	ldr	r3, [r3, #0]
 81075c6:	1c5a      	adds	r2, r3, #1
 81075c8:	687b      	ldr	r3, [r7, #4]
 81075ca:	601a      	str	r2, [r3, #0]
}
 81075cc:	bf00      	nop
 81075ce:	3714      	adds	r7, #20
 81075d0:	46bd      	mov	sp, r7
 81075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075d6:	4770      	bx	lr

081075d8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 81075d8:	b480      	push	{r7}
 81075da:	b085      	sub	sp, #20
 81075dc:	af00      	add	r7, sp, #0
 81075de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 81075e0:	687b      	ldr	r3, [r7, #4]
 81075e2:	691b      	ldr	r3, [r3, #16]
 81075e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 81075e6:	687b      	ldr	r3, [r7, #4]
 81075e8:	685b      	ldr	r3, [r3, #4]
 81075ea:	687a      	ldr	r2, [r7, #4]
 81075ec:	6892      	ldr	r2, [r2, #8]
 81075ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 81075f0:	687b      	ldr	r3, [r7, #4]
 81075f2:	689b      	ldr	r3, [r3, #8]
 81075f4:	687a      	ldr	r2, [r7, #4]
 81075f6:	6852      	ldr	r2, [r2, #4]
 81075f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81075fa:	68fb      	ldr	r3, [r7, #12]
 81075fc:	685b      	ldr	r3, [r3, #4]
 81075fe:	687a      	ldr	r2, [r7, #4]
 8107600:	429a      	cmp	r2, r3
 8107602:	d103      	bne.n	810760c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8107604:	687b      	ldr	r3, [r7, #4]
 8107606:	689a      	ldr	r2, [r3, #8]
 8107608:	68fb      	ldr	r3, [r7, #12]
 810760a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810760c:	687b      	ldr	r3, [r7, #4]
 810760e:	2200      	movs	r2, #0
 8107610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8107612:	68fb      	ldr	r3, [r7, #12]
 8107614:	681b      	ldr	r3, [r3, #0]
 8107616:	1e5a      	subs	r2, r3, #1
 8107618:	68fb      	ldr	r3, [r7, #12]
 810761a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810761c:	68fb      	ldr	r3, [r7, #12]
 810761e:	681b      	ldr	r3, [r3, #0]
}
 8107620:	4618      	mov	r0, r3
 8107622:	3714      	adds	r7, #20
 8107624:	46bd      	mov	sp, r7
 8107626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810762a:	4770      	bx	lr
 810762c:	0000      	movs	r0, r0
	...

08107630 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8107630:	4b07      	ldr	r3, [pc, #28]	@ (8107650 <pxCurrentTCBConst2>)
 8107632:	6819      	ldr	r1, [r3, #0]
 8107634:	6808      	ldr	r0, [r1, #0]
 8107636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810763a:	f380 8809 	msr	PSP, r0
 810763e:	f3bf 8f6f 	isb	sy
 8107642:	f04f 0000 	mov.w	r0, #0
 8107646:	f380 8811 	msr	BASEPRI, r0
 810764a:	4770      	bx	lr
 810764c:	f3af 8000 	nop.w

08107650 <pxCurrentTCBConst2>:
 8107650:	10000858 	.word	0x10000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8107654:	bf00      	nop
 8107656:	bf00      	nop
	...

08107660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8107660:	f3ef 8009 	mrs	r0, PSP
 8107664:	f3bf 8f6f 	isb	sy
 8107668:	4b15      	ldr	r3, [pc, #84]	@ (81076c0 <pxCurrentTCBConst>)
 810766a:	681a      	ldr	r2, [r3, #0]
 810766c:	f01e 0f10 	tst.w	lr, #16
 8107670:	bf08      	it	eq
 8107672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8107676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810767a:	6010      	str	r0, [r2, #0]
 810767c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8107680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8107684:	f380 8811 	msr	BASEPRI, r0
 8107688:	f3bf 8f4f 	dsb	sy
 810768c:	f3bf 8f6f 	isb	sy
 8107690:	f000 f8f6 	bl	8107880 <vTaskSwitchContext>
 8107694:	f04f 0000 	mov.w	r0, #0
 8107698:	f380 8811 	msr	BASEPRI, r0
 810769c:	bc09      	pop	{r0, r3}
 810769e:	6819      	ldr	r1, [r3, #0]
 81076a0:	6808      	ldr	r0, [r1, #0]
 81076a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81076a6:	f01e 0f10 	tst.w	lr, #16
 81076aa:	bf08      	it	eq
 81076ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81076b0:	f380 8809 	msr	PSP, r0
 81076b4:	f3bf 8f6f 	isb	sy
 81076b8:	4770      	bx	lr
 81076ba:	bf00      	nop
 81076bc:	f3af 8000 	nop.w

081076c0 <pxCurrentTCBConst>:
 81076c0:	10000858 	.word	0x10000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81076c4:	bf00      	nop
 81076c6:	bf00      	nop

081076c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81076c8:	b580      	push	{r7, lr}
 81076ca:	b082      	sub	sp, #8
 81076cc:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81076ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81076d2:	f383 8811 	msr	BASEPRI, r3
 81076d6:	f3bf 8f6f 	isb	sy
 81076da:	f3bf 8f4f 	dsb	sy
 81076de:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81076e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 81076e2:	f000 f813 	bl	810770c <xTaskIncrementTick>
 81076e6:	4603      	mov	r3, r0
 81076e8:	2b00      	cmp	r3, #0
 81076ea:	d003      	beq.n	81076f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 81076ec:	4b06      	ldr	r3, [pc, #24]	@ (8107708 <xPortSysTickHandler+0x40>)
 81076ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81076f2:	601a      	str	r2, [r3, #0]
 81076f4:	2300      	movs	r3, #0
 81076f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81076f8:	683b      	ldr	r3, [r7, #0]
 81076fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81076fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8107700:	bf00      	nop
 8107702:	3708      	adds	r7, #8
 8107704:	46bd      	mov	sp, r7
 8107706:	bd80      	pop	{r7, pc}
 8107708:	e000ed04 	.word	0xe000ed04

0810770c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810770c:	b580      	push	{r7, lr}
 810770e:	b086      	sub	sp, #24
 8107710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8107712:	2300      	movs	r3, #0
 8107714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107716:	4b4f      	ldr	r3, [pc, #316]	@ (8107854 <xTaskIncrementTick+0x148>)
 8107718:	681b      	ldr	r3, [r3, #0]
 810771a:	2b00      	cmp	r3, #0
 810771c:	f040 8090 	bne.w	8107840 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8107720:	4b4d      	ldr	r3, [pc, #308]	@ (8107858 <xTaskIncrementTick+0x14c>)
 8107722:	681b      	ldr	r3, [r3, #0]
 8107724:	3301      	adds	r3, #1
 8107726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8107728:	4a4b      	ldr	r2, [pc, #300]	@ (8107858 <xTaskIncrementTick+0x14c>)
 810772a:	693b      	ldr	r3, [r7, #16]
 810772c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810772e:	693b      	ldr	r3, [r7, #16]
 8107730:	2b00      	cmp	r3, #0
 8107732:	d121      	bne.n	8107778 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8107734:	4b49      	ldr	r3, [pc, #292]	@ (810785c <xTaskIncrementTick+0x150>)
 8107736:	681b      	ldr	r3, [r3, #0]
 8107738:	681b      	ldr	r3, [r3, #0]
 810773a:	2b00      	cmp	r3, #0
 810773c:	d00b      	beq.n	8107756 <xTaskIncrementTick+0x4a>
	__asm volatile
 810773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107742:	f383 8811 	msr	BASEPRI, r3
 8107746:	f3bf 8f6f 	isb	sy
 810774a:	f3bf 8f4f 	dsb	sy
 810774e:	603b      	str	r3, [r7, #0]
}
 8107750:	bf00      	nop
 8107752:	bf00      	nop
 8107754:	e7fd      	b.n	8107752 <xTaskIncrementTick+0x46>
 8107756:	4b41      	ldr	r3, [pc, #260]	@ (810785c <xTaskIncrementTick+0x150>)
 8107758:	681b      	ldr	r3, [r3, #0]
 810775a:	60fb      	str	r3, [r7, #12]
 810775c:	4b40      	ldr	r3, [pc, #256]	@ (8107860 <xTaskIncrementTick+0x154>)
 810775e:	681b      	ldr	r3, [r3, #0]
 8107760:	4a3e      	ldr	r2, [pc, #248]	@ (810785c <xTaskIncrementTick+0x150>)
 8107762:	6013      	str	r3, [r2, #0]
 8107764:	4a3e      	ldr	r2, [pc, #248]	@ (8107860 <xTaskIncrementTick+0x154>)
 8107766:	68fb      	ldr	r3, [r7, #12]
 8107768:	6013      	str	r3, [r2, #0]
 810776a:	4b3e      	ldr	r3, [pc, #248]	@ (8107864 <xTaskIncrementTick+0x158>)
 810776c:	681b      	ldr	r3, [r3, #0]
 810776e:	3301      	adds	r3, #1
 8107770:	4a3c      	ldr	r2, [pc, #240]	@ (8107864 <xTaskIncrementTick+0x158>)
 8107772:	6013      	str	r3, [r2, #0]
 8107774:	f000 f8e2 	bl	810793c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8107778:	4b3b      	ldr	r3, [pc, #236]	@ (8107868 <xTaskIncrementTick+0x15c>)
 810777a:	681b      	ldr	r3, [r3, #0]
 810777c:	693a      	ldr	r2, [r7, #16]
 810777e:	429a      	cmp	r2, r3
 8107780:	d349      	bcc.n	8107816 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107782:	4b36      	ldr	r3, [pc, #216]	@ (810785c <xTaskIncrementTick+0x150>)
 8107784:	681b      	ldr	r3, [r3, #0]
 8107786:	681b      	ldr	r3, [r3, #0]
 8107788:	2b00      	cmp	r3, #0
 810778a:	d104      	bne.n	8107796 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810778c:	4b36      	ldr	r3, [pc, #216]	@ (8107868 <xTaskIncrementTick+0x15c>)
 810778e:	f04f 32ff 	mov.w	r2, #4294967295
 8107792:	601a      	str	r2, [r3, #0]
					break;
 8107794:	e03f      	b.n	8107816 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107796:	4b31      	ldr	r3, [pc, #196]	@ (810785c <xTaskIncrementTick+0x150>)
 8107798:	681b      	ldr	r3, [r3, #0]
 810779a:	68db      	ldr	r3, [r3, #12]
 810779c:	68db      	ldr	r3, [r3, #12]
 810779e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 81077a0:	68bb      	ldr	r3, [r7, #8]
 81077a2:	685b      	ldr	r3, [r3, #4]
 81077a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 81077a6:	693a      	ldr	r2, [r7, #16]
 81077a8:	687b      	ldr	r3, [r7, #4]
 81077aa:	429a      	cmp	r2, r3
 81077ac:	d203      	bcs.n	81077b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 81077ae:	4a2e      	ldr	r2, [pc, #184]	@ (8107868 <xTaskIncrementTick+0x15c>)
 81077b0:	687b      	ldr	r3, [r7, #4]
 81077b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 81077b4:	e02f      	b.n	8107816 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81077b6:	68bb      	ldr	r3, [r7, #8]
 81077b8:	3304      	adds	r3, #4
 81077ba:	4618      	mov	r0, r3
 81077bc:	f7ff ff0c 	bl	81075d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 81077c0:	68bb      	ldr	r3, [r7, #8]
 81077c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81077c4:	2b00      	cmp	r3, #0
 81077c6:	d004      	beq.n	81077d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81077c8:	68bb      	ldr	r3, [r7, #8]
 81077ca:	3318      	adds	r3, #24
 81077cc:	4618      	mov	r0, r3
 81077ce:	f7ff ff03 	bl	81075d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 81077d2:	68bb      	ldr	r3, [r7, #8]
 81077d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81077d6:	4b25      	ldr	r3, [pc, #148]	@ (810786c <xTaskIncrementTick+0x160>)
 81077d8:	681b      	ldr	r3, [r3, #0]
 81077da:	429a      	cmp	r2, r3
 81077dc:	d903      	bls.n	81077e6 <xTaskIncrementTick+0xda>
 81077de:	68bb      	ldr	r3, [r7, #8]
 81077e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81077e2:	4a22      	ldr	r2, [pc, #136]	@ (810786c <xTaskIncrementTick+0x160>)
 81077e4:	6013      	str	r3, [r2, #0]
 81077e6:	68bb      	ldr	r3, [r7, #8]
 81077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81077ea:	4613      	mov	r3, r2
 81077ec:	009b      	lsls	r3, r3, #2
 81077ee:	4413      	add	r3, r2
 81077f0:	009b      	lsls	r3, r3, #2
 81077f2:	4a1f      	ldr	r2, [pc, #124]	@ (8107870 <xTaskIncrementTick+0x164>)
 81077f4:	441a      	add	r2, r3
 81077f6:	68bb      	ldr	r3, [r7, #8]
 81077f8:	3304      	adds	r3, #4
 81077fa:	4619      	mov	r1, r3
 81077fc:	4610      	mov	r0, r2
 81077fe:	f7ff fec7 	bl	8107590 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8107802:	68bb      	ldr	r3, [r7, #8]
 8107804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107806:	4b1b      	ldr	r3, [pc, #108]	@ (8107874 <xTaskIncrementTick+0x168>)
 8107808:	681b      	ldr	r3, [r3, #0]
 810780a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810780c:	429a      	cmp	r2, r3
 810780e:	d3b8      	bcc.n	8107782 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8107810:	2301      	movs	r3, #1
 8107812:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107814:	e7b5      	b.n	8107782 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8107816:	4b17      	ldr	r3, [pc, #92]	@ (8107874 <xTaskIncrementTick+0x168>)
 8107818:	681b      	ldr	r3, [r3, #0]
 810781a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810781c:	4914      	ldr	r1, [pc, #80]	@ (8107870 <xTaskIncrementTick+0x164>)
 810781e:	4613      	mov	r3, r2
 8107820:	009b      	lsls	r3, r3, #2
 8107822:	4413      	add	r3, r2
 8107824:	009b      	lsls	r3, r3, #2
 8107826:	440b      	add	r3, r1
 8107828:	681b      	ldr	r3, [r3, #0]
 810782a:	2b01      	cmp	r3, #1
 810782c:	d901      	bls.n	8107832 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810782e:	2301      	movs	r3, #1
 8107830:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8107832:	4b11      	ldr	r3, [pc, #68]	@ (8107878 <xTaskIncrementTick+0x16c>)
 8107834:	681b      	ldr	r3, [r3, #0]
 8107836:	2b00      	cmp	r3, #0
 8107838:	d007      	beq.n	810784a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810783a:	2301      	movs	r3, #1
 810783c:	617b      	str	r3, [r7, #20]
 810783e:	e004      	b.n	810784a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8107840:	4b0e      	ldr	r3, [pc, #56]	@ (810787c <xTaskIncrementTick+0x170>)
 8107842:	681b      	ldr	r3, [r3, #0]
 8107844:	3301      	adds	r3, #1
 8107846:	4a0d      	ldr	r2, [pc, #52]	@ (810787c <xTaskIncrementTick+0x170>)
 8107848:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810784a:	697b      	ldr	r3, [r7, #20]
}
 810784c:	4618      	mov	r0, r3
 810784e:	3718      	adds	r7, #24
 8107850:	46bd      	mov	sp, r7
 8107852:	bd80      	pop	{r7, pc}
 8107854:	10000ce0 	.word	0x10000ce0
 8107858:	10000cc4 	.word	0x10000cc4
 810785c:	10000cbc 	.word	0x10000cbc
 8107860:	10000cc0 	.word	0x10000cc0
 8107864:	10000cd8 	.word	0x10000cd8
 8107868:	10000cdc 	.word	0x10000cdc
 810786c:	10000cc8 	.word	0x10000cc8
 8107870:	1000085c 	.word	0x1000085c
 8107874:	10000858 	.word	0x10000858
 8107878:	10000cd4 	.word	0x10000cd4
 810787c:	10000cd0 	.word	0x10000cd0

08107880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8107880:	b480      	push	{r7}
 8107882:	b085      	sub	sp, #20
 8107884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8107886:	4b28      	ldr	r3, [pc, #160]	@ (8107928 <vTaskSwitchContext+0xa8>)
 8107888:	681b      	ldr	r3, [r3, #0]
 810788a:	2b00      	cmp	r3, #0
 810788c:	d003      	beq.n	8107896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810788e:	4b27      	ldr	r3, [pc, #156]	@ (810792c <vTaskSwitchContext+0xac>)
 8107890:	2201      	movs	r2, #1
 8107892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8107894:	e042      	b.n	810791c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8107896:	4b25      	ldr	r3, [pc, #148]	@ (810792c <vTaskSwitchContext+0xac>)
 8107898:	2200      	movs	r2, #0
 810789a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810789c:	4b24      	ldr	r3, [pc, #144]	@ (8107930 <vTaskSwitchContext+0xb0>)
 810789e:	681b      	ldr	r3, [r3, #0]
 81078a0:	60fb      	str	r3, [r7, #12]
 81078a2:	e011      	b.n	81078c8 <vTaskSwitchContext+0x48>
 81078a4:	68fb      	ldr	r3, [r7, #12]
 81078a6:	2b00      	cmp	r3, #0
 81078a8:	d10b      	bne.n	81078c2 <vTaskSwitchContext+0x42>
	__asm volatile
 81078aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81078ae:	f383 8811 	msr	BASEPRI, r3
 81078b2:	f3bf 8f6f 	isb	sy
 81078b6:	f3bf 8f4f 	dsb	sy
 81078ba:	607b      	str	r3, [r7, #4]
}
 81078bc:	bf00      	nop
 81078be:	bf00      	nop
 81078c0:	e7fd      	b.n	81078be <vTaskSwitchContext+0x3e>
 81078c2:	68fb      	ldr	r3, [r7, #12]
 81078c4:	3b01      	subs	r3, #1
 81078c6:	60fb      	str	r3, [r7, #12]
 81078c8:	491a      	ldr	r1, [pc, #104]	@ (8107934 <vTaskSwitchContext+0xb4>)
 81078ca:	68fa      	ldr	r2, [r7, #12]
 81078cc:	4613      	mov	r3, r2
 81078ce:	009b      	lsls	r3, r3, #2
 81078d0:	4413      	add	r3, r2
 81078d2:	009b      	lsls	r3, r3, #2
 81078d4:	440b      	add	r3, r1
 81078d6:	681b      	ldr	r3, [r3, #0]
 81078d8:	2b00      	cmp	r3, #0
 81078da:	d0e3      	beq.n	81078a4 <vTaskSwitchContext+0x24>
 81078dc:	68fa      	ldr	r2, [r7, #12]
 81078de:	4613      	mov	r3, r2
 81078e0:	009b      	lsls	r3, r3, #2
 81078e2:	4413      	add	r3, r2
 81078e4:	009b      	lsls	r3, r3, #2
 81078e6:	4a13      	ldr	r2, [pc, #76]	@ (8107934 <vTaskSwitchContext+0xb4>)
 81078e8:	4413      	add	r3, r2
 81078ea:	60bb      	str	r3, [r7, #8]
 81078ec:	68bb      	ldr	r3, [r7, #8]
 81078ee:	685b      	ldr	r3, [r3, #4]
 81078f0:	685a      	ldr	r2, [r3, #4]
 81078f2:	68bb      	ldr	r3, [r7, #8]
 81078f4:	605a      	str	r2, [r3, #4]
 81078f6:	68bb      	ldr	r3, [r7, #8]
 81078f8:	685a      	ldr	r2, [r3, #4]
 81078fa:	68bb      	ldr	r3, [r7, #8]
 81078fc:	3308      	adds	r3, #8
 81078fe:	429a      	cmp	r2, r3
 8107900:	d104      	bne.n	810790c <vTaskSwitchContext+0x8c>
 8107902:	68bb      	ldr	r3, [r7, #8]
 8107904:	685b      	ldr	r3, [r3, #4]
 8107906:	685a      	ldr	r2, [r3, #4]
 8107908:	68bb      	ldr	r3, [r7, #8]
 810790a:	605a      	str	r2, [r3, #4]
 810790c:	68bb      	ldr	r3, [r7, #8]
 810790e:	685b      	ldr	r3, [r3, #4]
 8107910:	68db      	ldr	r3, [r3, #12]
 8107912:	4a09      	ldr	r2, [pc, #36]	@ (8107938 <vTaskSwitchContext+0xb8>)
 8107914:	6013      	str	r3, [r2, #0]
 8107916:	4a06      	ldr	r2, [pc, #24]	@ (8107930 <vTaskSwitchContext+0xb0>)
 8107918:	68fb      	ldr	r3, [r7, #12]
 810791a:	6013      	str	r3, [r2, #0]
}
 810791c:	bf00      	nop
 810791e:	3714      	adds	r7, #20
 8107920:	46bd      	mov	sp, r7
 8107922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107926:	4770      	bx	lr
 8107928:	10000ce0 	.word	0x10000ce0
 810792c:	10000cd4 	.word	0x10000cd4
 8107930:	10000cc8 	.word	0x10000cc8
 8107934:	1000085c 	.word	0x1000085c
 8107938:	10000858 	.word	0x10000858

0810793c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810793c:	b480      	push	{r7}
 810793e:	b083      	sub	sp, #12
 8107940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107942:	4b0c      	ldr	r3, [pc, #48]	@ (8107974 <prvResetNextTaskUnblockTime+0x38>)
 8107944:	681b      	ldr	r3, [r3, #0]
 8107946:	681b      	ldr	r3, [r3, #0]
 8107948:	2b00      	cmp	r3, #0
 810794a:	d104      	bne.n	8107956 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810794c:	4b0a      	ldr	r3, [pc, #40]	@ (8107978 <prvResetNextTaskUnblockTime+0x3c>)
 810794e:	f04f 32ff 	mov.w	r2, #4294967295
 8107952:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8107954:	e008      	b.n	8107968 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107956:	4b07      	ldr	r3, [pc, #28]	@ (8107974 <prvResetNextTaskUnblockTime+0x38>)
 8107958:	681b      	ldr	r3, [r3, #0]
 810795a:	68db      	ldr	r3, [r3, #12]
 810795c:	68db      	ldr	r3, [r3, #12]
 810795e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8107960:	687b      	ldr	r3, [r7, #4]
 8107962:	685b      	ldr	r3, [r3, #4]
 8107964:	4a04      	ldr	r2, [pc, #16]	@ (8107978 <prvResetNextTaskUnblockTime+0x3c>)
 8107966:	6013      	str	r3, [r2, #0]
}
 8107968:	bf00      	nop
 810796a:	370c      	adds	r7, #12
 810796c:	46bd      	mov	sp, r7
 810796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107972:	4770      	bx	lr
 8107974:	10000cbc 	.word	0x10000cbc
 8107978:	10000cdc 	.word	0x10000cdc

0810797c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810797c:	b480      	push	{r7}
 810797e:	b083      	sub	sp, #12
 8107980:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8107982:	4b0b      	ldr	r3, [pc, #44]	@ (81079b0 <xTaskGetSchedulerState+0x34>)
 8107984:	681b      	ldr	r3, [r3, #0]
 8107986:	2b00      	cmp	r3, #0
 8107988:	d102      	bne.n	8107990 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810798a:	2301      	movs	r3, #1
 810798c:	607b      	str	r3, [r7, #4]
 810798e:	e008      	b.n	81079a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107990:	4b08      	ldr	r3, [pc, #32]	@ (81079b4 <xTaskGetSchedulerState+0x38>)
 8107992:	681b      	ldr	r3, [r3, #0]
 8107994:	2b00      	cmp	r3, #0
 8107996:	d102      	bne.n	810799e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8107998:	2302      	movs	r3, #2
 810799a:	607b      	str	r3, [r7, #4]
 810799c:	e001      	b.n	81079a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810799e:	2300      	movs	r3, #0
 81079a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81079a2:	687b      	ldr	r3, [r7, #4]
	}
 81079a4:	4618      	mov	r0, r3
 81079a6:	370c      	adds	r7, #12
 81079a8:	46bd      	mov	sp, r7
 81079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079ae:	4770      	bx	lr
 81079b0:	10000ccc 	.word	0x10000ccc
 81079b4:	10000ce0 	.word	0x10000ce0

081079b8 <std>:
 81079b8:	2300      	movs	r3, #0
 81079ba:	b510      	push	{r4, lr}
 81079bc:	4604      	mov	r4, r0
 81079be:	e9c0 3300 	strd	r3, r3, [r0]
 81079c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81079c6:	6083      	str	r3, [r0, #8]
 81079c8:	8181      	strh	r1, [r0, #12]
 81079ca:	6643      	str	r3, [r0, #100]	@ 0x64
 81079cc:	81c2      	strh	r2, [r0, #14]
 81079ce:	6183      	str	r3, [r0, #24]
 81079d0:	4619      	mov	r1, r3
 81079d2:	2208      	movs	r2, #8
 81079d4:	305c      	adds	r0, #92	@ 0x5c
 81079d6:	f000 f9f9 	bl	8107dcc <memset>
 81079da:	4b0d      	ldr	r3, [pc, #52]	@ (8107a10 <std+0x58>)
 81079dc:	6263      	str	r3, [r4, #36]	@ 0x24
 81079de:	4b0d      	ldr	r3, [pc, #52]	@ (8107a14 <std+0x5c>)
 81079e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 81079e2:	4b0d      	ldr	r3, [pc, #52]	@ (8107a18 <std+0x60>)
 81079e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 81079e6:	4b0d      	ldr	r3, [pc, #52]	@ (8107a1c <std+0x64>)
 81079e8:	6323      	str	r3, [r4, #48]	@ 0x30
 81079ea:	4b0d      	ldr	r3, [pc, #52]	@ (8107a20 <std+0x68>)
 81079ec:	6224      	str	r4, [r4, #32]
 81079ee:	429c      	cmp	r4, r3
 81079f0:	d006      	beq.n	8107a00 <std+0x48>
 81079f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 81079f6:	4294      	cmp	r4, r2
 81079f8:	d002      	beq.n	8107a00 <std+0x48>
 81079fa:	33d0      	adds	r3, #208	@ 0xd0
 81079fc:	429c      	cmp	r4, r3
 81079fe:	d105      	bne.n	8107a0c <std+0x54>
 8107a00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8107a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107a08:	f000 ba58 	b.w	8107ebc <__retarget_lock_init_recursive>
 8107a0c:	bd10      	pop	{r4, pc}
 8107a0e:	bf00      	nop
 8107a10:	08107c1d 	.word	0x08107c1d
 8107a14:	08107c3f 	.word	0x08107c3f
 8107a18:	08107c77 	.word	0x08107c77
 8107a1c:	08107c9b 	.word	0x08107c9b
 8107a20:	10000ce4 	.word	0x10000ce4

08107a24 <stdio_exit_handler>:
 8107a24:	4a02      	ldr	r2, [pc, #8]	@ (8107a30 <stdio_exit_handler+0xc>)
 8107a26:	4903      	ldr	r1, [pc, #12]	@ (8107a34 <stdio_exit_handler+0x10>)
 8107a28:	4803      	ldr	r0, [pc, #12]	@ (8107a38 <stdio_exit_handler+0x14>)
 8107a2a:	f000 b869 	b.w	8107b00 <_fwalk_sglue>
 8107a2e:	bf00      	nop
 8107a30:	10000010 	.word	0x10000010
 8107a34:	08108775 	.word	0x08108775
 8107a38:	10000020 	.word	0x10000020

08107a3c <cleanup_stdio>:
 8107a3c:	6841      	ldr	r1, [r0, #4]
 8107a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8107a70 <cleanup_stdio+0x34>)
 8107a40:	4299      	cmp	r1, r3
 8107a42:	b510      	push	{r4, lr}
 8107a44:	4604      	mov	r4, r0
 8107a46:	d001      	beq.n	8107a4c <cleanup_stdio+0x10>
 8107a48:	f000 fe94 	bl	8108774 <_fflush_r>
 8107a4c:	68a1      	ldr	r1, [r4, #8]
 8107a4e:	4b09      	ldr	r3, [pc, #36]	@ (8107a74 <cleanup_stdio+0x38>)
 8107a50:	4299      	cmp	r1, r3
 8107a52:	d002      	beq.n	8107a5a <cleanup_stdio+0x1e>
 8107a54:	4620      	mov	r0, r4
 8107a56:	f000 fe8d 	bl	8108774 <_fflush_r>
 8107a5a:	68e1      	ldr	r1, [r4, #12]
 8107a5c:	4b06      	ldr	r3, [pc, #24]	@ (8107a78 <cleanup_stdio+0x3c>)
 8107a5e:	4299      	cmp	r1, r3
 8107a60:	d004      	beq.n	8107a6c <cleanup_stdio+0x30>
 8107a62:	4620      	mov	r0, r4
 8107a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107a68:	f000 be84 	b.w	8108774 <_fflush_r>
 8107a6c:	bd10      	pop	{r4, pc}
 8107a6e:	bf00      	nop
 8107a70:	10000ce4 	.word	0x10000ce4
 8107a74:	10000d4c 	.word	0x10000d4c
 8107a78:	10000db4 	.word	0x10000db4

08107a7c <global_stdio_init.part.0>:
 8107a7c:	b510      	push	{r4, lr}
 8107a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8107aac <global_stdio_init.part.0+0x30>)
 8107a80:	4c0b      	ldr	r4, [pc, #44]	@ (8107ab0 <global_stdio_init.part.0+0x34>)
 8107a82:	4a0c      	ldr	r2, [pc, #48]	@ (8107ab4 <global_stdio_init.part.0+0x38>)
 8107a84:	601a      	str	r2, [r3, #0]
 8107a86:	4620      	mov	r0, r4
 8107a88:	2200      	movs	r2, #0
 8107a8a:	2104      	movs	r1, #4
 8107a8c:	f7ff ff94 	bl	81079b8 <std>
 8107a90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8107a94:	2201      	movs	r2, #1
 8107a96:	2109      	movs	r1, #9
 8107a98:	f7ff ff8e 	bl	81079b8 <std>
 8107a9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8107aa0:	2202      	movs	r2, #2
 8107aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107aa6:	2112      	movs	r1, #18
 8107aa8:	f7ff bf86 	b.w	81079b8 <std>
 8107aac:	10000e1c 	.word	0x10000e1c
 8107ab0:	10000ce4 	.word	0x10000ce4
 8107ab4:	08107a25 	.word	0x08107a25

08107ab8 <__sfp_lock_acquire>:
 8107ab8:	4801      	ldr	r0, [pc, #4]	@ (8107ac0 <__sfp_lock_acquire+0x8>)
 8107aba:	f000 ba00 	b.w	8107ebe <__retarget_lock_acquire_recursive>
 8107abe:	bf00      	nop
 8107ac0:	10000e25 	.word	0x10000e25

08107ac4 <__sfp_lock_release>:
 8107ac4:	4801      	ldr	r0, [pc, #4]	@ (8107acc <__sfp_lock_release+0x8>)
 8107ac6:	f000 b9fb 	b.w	8107ec0 <__retarget_lock_release_recursive>
 8107aca:	bf00      	nop
 8107acc:	10000e25 	.word	0x10000e25

08107ad0 <__sinit>:
 8107ad0:	b510      	push	{r4, lr}
 8107ad2:	4604      	mov	r4, r0
 8107ad4:	f7ff fff0 	bl	8107ab8 <__sfp_lock_acquire>
 8107ad8:	6a23      	ldr	r3, [r4, #32]
 8107ada:	b11b      	cbz	r3, 8107ae4 <__sinit+0x14>
 8107adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107ae0:	f7ff bff0 	b.w	8107ac4 <__sfp_lock_release>
 8107ae4:	4b04      	ldr	r3, [pc, #16]	@ (8107af8 <__sinit+0x28>)
 8107ae6:	6223      	str	r3, [r4, #32]
 8107ae8:	4b04      	ldr	r3, [pc, #16]	@ (8107afc <__sinit+0x2c>)
 8107aea:	681b      	ldr	r3, [r3, #0]
 8107aec:	2b00      	cmp	r3, #0
 8107aee:	d1f5      	bne.n	8107adc <__sinit+0xc>
 8107af0:	f7ff ffc4 	bl	8107a7c <global_stdio_init.part.0>
 8107af4:	e7f2      	b.n	8107adc <__sinit+0xc>
 8107af6:	bf00      	nop
 8107af8:	08107a3d 	.word	0x08107a3d
 8107afc:	10000e1c 	.word	0x10000e1c

08107b00 <_fwalk_sglue>:
 8107b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107b04:	4607      	mov	r7, r0
 8107b06:	4688      	mov	r8, r1
 8107b08:	4614      	mov	r4, r2
 8107b0a:	2600      	movs	r6, #0
 8107b0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8107b10:	f1b9 0901 	subs.w	r9, r9, #1
 8107b14:	d505      	bpl.n	8107b22 <_fwalk_sglue+0x22>
 8107b16:	6824      	ldr	r4, [r4, #0]
 8107b18:	2c00      	cmp	r4, #0
 8107b1a:	d1f7      	bne.n	8107b0c <_fwalk_sglue+0xc>
 8107b1c:	4630      	mov	r0, r6
 8107b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107b22:	89ab      	ldrh	r3, [r5, #12]
 8107b24:	2b01      	cmp	r3, #1
 8107b26:	d907      	bls.n	8107b38 <_fwalk_sglue+0x38>
 8107b28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8107b2c:	3301      	adds	r3, #1
 8107b2e:	d003      	beq.n	8107b38 <_fwalk_sglue+0x38>
 8107b30:	4629      	mov	r1, r5
 8107b32:	4638      	mov	r0, r7
 8107b34:	47c0      	blx	r8
 8107b36:	4306      	orrs	r6, r0
 8107b38:	3568      	adds	r5, #104	@ 0x68
 8107b3a:	e7e9      	b.n	8107b10 <_fwalk_sglue+0x10>

08107b3c <iprintf>:
 8107b3c:	b40f      	push	{r0, r1, r2, r3}
 8107b3e:	b507      	push	{r0, r1, r2, lr}
 8107b40:	4906      	ldr	r1, [pc, #24]	@ (8107b5c <iprintf+0x20>)
 8107b42:	ab04      	add	r3, sp, #16
 8107b44:	6808      	ldr	r0, [r1, #0]
 8107b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8107b4a:	6881      	ldr	r1, [r0, #8]
 8107b4c:	9301      	str	r3, [sp, #4]
 8107b4e:	f000 fae9 	bl	8108124 <_vfiprintf_r>
 8107b52:	b003      	add	sp, #12
 8107b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8107b58:	b004      	add	sp, #16
 8107b5a:	4770      	bx	lr
 8107b5c:	1000001c 	.word	0x1000001c

08107b60 <_puts_r>:
 8107b60:	6a03      	ldr	r3, [r0, #32]
 8107b62:	b570      	push	{r4, r5, r6, lr}
 8107b64:	6884      	ldr	r4, [r0, #8]
 8107b66:	4605      	mov	r5, r0
 8107b68:	460e      	mov	r6, r1
 8107b6a:	b90b      	cbnz	r3, 8107b70 <_puts_r+0x10>
 8107b6c:	f7ff ffb0 	bl	8107ad0 <__sinit>
 8107b70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8107b72:	07db      	lsls	r3, r3, #31
 8107b74:	d405      	bmi.n	8107b82 <_puts_r+0x22>
 8107b76:	89a3      	ldrh	r3, [r4, #12]
 8107b78:	0598      	lsls	r0, r3, #22
 8107b7a:	d402      	bmi.n	8107b82 <_puts_r+0x22>
 8107b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8107b7e:	f000 f99e 	bl	8107ebe <__retarget_lock_acquire_recursive>
 8107b82:	89a3      	ldrh	r3, [r4, #12]
 8107b84:	0719      	lsls	r1, r3, #28
 8107b86:	d502      	bpl.n	8107b8e <_puts_r+0x2e>
 8107b88:	6923      	ldr	r3, [r4, #16]
 8107b8a:	2b00      	cmp	r3, #0
 8107b8c:	d135      	bne.n	8107bfa <_puts_r+0x9a>
 8107b8e:	4621      	mov	r1, r4
 8107b90:	4628      	mov	r0, r5
 8107b92:	f000 f8c5 	bl	8107d20 <__swsetup_r>
 8107b96:	b380      	cbz	r0, 8107bfa <_puts_r+0x9a>
 8107b98:	f04f 35ff 	mov.w	r5, #4294967295
 8107b9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8107b9e:	07da      	lsls	r2, r3, #31
 8107ba0:	d405      	bmi.n	8107bae <_puts_r+0x4e>
 8107ba2:	89a3      	ldrh	r3, [r4, #12]
 8107ba4:	059b      	lsls	r3, r3, #22
 8107ba6:	d402      	bmi.n	8107bae <_puts_r+0x4e>
 8107ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8107baa:	f000 f989 	bl	8107ec0 <__retarget_lock_release_recursive>
 8107bae:	4628      	mov	r0, r5
 8107bb0:	bd70      	pop	{r4, r5, r6, pc}
 8107bb2:	2b00      	cmp	r3, #0
 8107bb4:	da04      	bge.n	8107bc0 <_puts_r+0x60>
 8107bb6:	69a2      	ldr	r2, [r4, #24]
 8107bb8:	429a      	cmp	r2, r3
 8107bba:	dc17      	bgt.n	8107bec <_puts_r+0x8c>
 8107bbc:	290a      	cmp	r1, #10
 8107bbe:	d015      	beq.n	8107bec <_puts_r+0x8c>
 8107bc0:	6823      	ldr	r3, [r4, #0]
 8107bc2:	1c5a      	adds	r2, r3, #1
 8107bc4:	6022      	str	r2, [r4, #0]
 8107bc6:	7019      	strb	r1, [r3, #0]
 8107bc8:	68a3      	ldr	r3, [r4, #8]
 8107bca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8107bce:	3b01      	subs	r3, #1
 8107bd0:	60a3      	str	r3, [r4, #8]
 8107bd2:	2900      	cmp	r1, #0
 8107bd4:	d1ed      	bne.n	8107bb2 <_puts_r+0x52>
 8107bd6:	2b00      	cmp	r3, #0
 8107bd8:	da11      	bge.n	8107bfe <_puts_r+0x9e>
 8107bda:	4622      	mov	r2, r4
 8107bdc:	210a      	movs	r1, #10
 8107bde:	4628      	mov	r0, r5
 8107be0:	f000 f85f 	bl	8107ca2 <__swbuf_r>
 8107be4:	3001      	adds	r0, #1
 8107be6:	d0d7      	beq.n	8107b98 <_puts_r+0x38>
 8107be8:	250a      	movs	r5, #10
 8107bea:	e7d7      	b.n	8107b9c <_puts_r+0x3c>
 8107bec:	4622      	mov	r2, r4
 8107bee:	4628      	mov	r0, r5
 8107bf0:	f000 f857 	bl	8107ca2 <__swbuf_r>
 8107bf4:	3001      	adds	r0, #1
 8107bf6:	d1e7      	bne.n	8107bc8 <_puts_r+0x68>
 8107bf8:	e7ce      	b.n	8107b98 <_puts_r+0x38>
 8107bfa:	3e01      	subs	r6, #1
 8107bfc:	e7e4      	b.n	8107bc8 <_puts_r+0x68>
 8107bfe:	6823      	ldr	r3, [r4, #0]
 8107c00:	1c5a      	adds	r2, r3, #1
 8107c02:	6022      	str	r2, [r4, #0]
 8107c04:	220a      	movs	r2, #10
 8107c06:	701a      	strb	r2, [r3, #0]
 8107c08:	e7ee      	b.n	8107be8 <_puts_r+0x88>
	...

08107c0c <puts>:
 8107c0c:	4b02      	ldr	r3, [pc, #8]	@ (8107c18 <puts+0xc>)
 8107c0e:	4601      	mov	r1, r0
 8107c10:	6818      	ldr	r0, [r3, #0]
 8107c12:	f7ff bfa5 	b.w	8107b60 <_puts_r>
 8107c16:	bf00      	nop
 8107c18:	1000001c 	.word	0x1000001c

08107c1c <__sread>:
 8107c1c:	b510      	push	{r4, lr}
 8107c1e:	460c      	mov	r4, r1
 8107c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107c24:	f000 f8fc 	bl	8107e20 <_read_r>
 8107c28:	2800      	cmp	r0, #0
 8107c2a:	bfab      	itete	ge
 8107c2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8107c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8107c30:	181b      	addge	r3, r3, r0
 8107c32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8107c36:	bfac      	ite	ge
 8107c38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8107c3a:	81a3      	strhlt	r3, [r4, #12]
 8107c3c:	bd10      	pop	{r4, pc}

08107c3e <__swrite>:
 8107c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107c42:	461f      	mov	r7, r3
 8107c44:	898b      	ldrh	r3, [r1, #12]
 8107c46:	05db      	lsls	r3, r3, #23
 8107c48:	4605      	mov	r5, r0
 8107c4a:	460c      	mov	r4, r1
 8107c4c:	4616      	mov	r6, r2
 8107c4e:	d505      	bpl.n	8107c5c <__swrite+0x1e>
 8107c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107c54:	2302      	movs	r3, #2
 8107c56:	2200      	movs	r2, #0
 8107c58:	f000 f8d0 	bl	8107dfc <_lseek_r>
 8107c5c:	89a3      	ldrh	r3, [r4, #12]
 8107c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107c62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8107c66:	81a3      	strh	r3, [r4, #12]
 8107c68:	4632      	mov	r2, r6
 8107c6a:	463b      	mov	r3, r7
 8107c6c:	4628      	mov	r0, r5
 8107c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107c72:	f000 b8e7 	b.w	8107e44 <_write_r>

08107c76 <__sseek>:
 8107c76:	b510      	push	{r4, lr}
 8107c78:	460c      	mov	r4, r1
 8107c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107c7e:	f000 f8bd 	bl	8107dfc <_lseek_r>
 8107c82:	1c43      	adds	r3, r0, #1
 8107c84:	89a3      	ldrh	r3, [r4, #12]
 8107c86:	bf15      	itete	ne
 8107c88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8107c8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8107c8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8107c92:	81a3      	strheq	r3, [r4, #12]
 8107c94:	bf18      	it	ne
 8107c96:	81a3      	strhne	r3, [r4, #12]
 8107c98:	bd10      	pop	{r4, pc}

08107c9a <__sclose>:
 8107c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107c9e:	f000 b89d 	b.w	8107ddc <_close_r>

08107ca2 <__swbuf_r>:
 8107ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107ca4:	460e      	mov	r6, r1
 8107ca6:	4614      	mov	r4, r2
 8107ca8:	4605      	mov	r5, r0
 8107caa:	b118      	cbz	r0, 8107cb4 <__swbuf_r+0x12>
 8107cac:	6a03      	ldr	r3, [r0, #32]
 8107cae:	b90b      	cbnz	r3, 8107cb4 <__swbuf_r+0x12>
 8107cb0:	f7ff ff0e 	bl	8107ad0 <__sinit>
 8107cb4:	69a3      	ldr	r3, [r4, #24]
 8107cb6:	60a3      	str	r3, [r4, #8]
 8107cb8:	89a3      	ldrh	r3, [r4, #12]
 8107cba:	071a      	lsls	r2, r3, #28
 8107cbc:	d501      	bpl.n	8107cc2 <__swbuf_r+0x20>
 8107cbe:	6923      	ldr	r3, [r4, #16]
 8107cc0:	b943      	cbnz	r3, 8107cd4 <__swbuf_r+0x32>
 8107cc2:	4621      	mov	r1, r4
 8107cc4:	4628      	mov	r0, r5
 8107cc6:	f000 f82b 	bl	8107d20 <__swsetup_r>
 8107cca:	b118      	cbz	r0, 8107cd4 <__swbuf_r+0x32>
 8107ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8107cd0:	4638      	mov	r0, r7
 8107cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107cd4:	6823      	ldr	r3, [r4, #0]
 8107cd6:	6922      	ldr	r2, [r4, #16]
 8107cd8:	1a98      	subs	r0, r3, r2
 8107cda:	6963      	ldr	r3, [r4, #20]
 8107cdc:	b2f6      	uxtb	r6, r6
 8107cde:	4283      	cmp	r3, r0
 8107ce0:	4637      	mov	r7, r6
 8107ce2:	dc05      	bgt.n	8107cf0 <__swbuf_r+0x4e>
 8107ce4:	4621      	mov	r1, r4
 8107ce6:	4628      	mov	r0, r5
 8107ce8:	f000 fd44 	bl	8108774 <_fflush_r>
 8107cec:	2800      	cmp	r0, #0
 8107cee:	d1ed      	bne.n	8107ccc <__swbuf_r+0x2a>
 8107cf0:	68a3      	ldr	r3, [r4, #8]
 8107cf2:	3b01      	subs	r3, #1
 8107cf4:	60a3      	str	r3, [r4, #8]
 8107cf6:	6823      	ldr	r3, [r4, #0]
 8107cf8:	1c5a      	adds	r2, r3, #1
 8107cfa:	6022      	str	r2, [r4, #0]
 8107cfc:	701e      	strb	r6, [r3, #0]
 8107cfe:	6962      	ldr	r2, [r4, #20]
 8107d00:	1c43      	adds	r3, r0, #1
 8107d02:	429a      	cmp	r2, r3
 8107d04:	d004      	beq.n	8107d10 <__swbuf_r+0x6e>
 8107d06:	89a3      	ldrh	r3, [r4, #12]
 8107d08:	07db      	lsls	r3, r3, #31
 8107d0a:	d5e1      	bpl.n	8107cd0 <__swbuf_r+0x2e>
 8107d0c:	2e0a      	cmp	r6, #10
 8107d0e:	d1df      	bne.n	8107cd0 <__swbuf_r+0x2e>
 8107d10:	4621      	mov	r1, r4
 8107d12:	4628      	mov	r0, r5
 8107d14:	f000 fd2e 	bl	8108774 <_fflush_r>
 8107d18:	2800      	cmp	r0, #0
 8107d1a:	d0d9      	beq.n	8107cd0 <__swbuf_r+0x2e>
 8107d1c:	e7d6      	b.n	8107ccc <__swbuf_r+0x2a>
	...

08107d20 <__swsetup_r>:
 8107d20:	b538      	push	{r3, r4, r5, lr}
 8107d22:	4b29      	ldr	r3, [pc, #164]	@ (8107dc8 <__swsetup_r+0xa8>)
 8107d24:	4605      	mov	r5, r0
 8107d26:	6818      	ldr	r0, [r3, #0]
 8107d28:	460c      	mov	r4, r1
 8107d2a:	b118      	cbz	r0, 8107d34 <__swsetup_r+0x14>
 8107d2c:	6a03      	ldr	r3, [r0, #32]
 8107d2e:	b90b      	cbnz	r3, 8107d34 <__swsetup_r+0x14>
 8107d30:	f7ff fece 	bl	8107ad0 <__sinit>
 8107d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107d38:	0719      	lsls	r1, r3, #28
 8107d3a:	d422      	bmi.n	8107d82 <__swsetup_r+0x62>
 8107d3c:	06da      	lsls	r2, r3, #27
 8107d3e:	d407      	bmi.n	8107d50 <__swsetup_r+0x30>
 8107d40:	2209      	movs	r2, #9
 8107d42:	602a      	str	r2, [r5, #0]
 8107d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8107d48:	81a3      	strh	r3, [r4, #12]
 8107d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8107d4e:	e033      	b.n	8107db8 <__swsetup_r+0x98>
 8107d50:	0758      	lsls	r0, r3, #29
 8107d52:	d512      	bpl.n	8107d7a <__swsetup_r+0x5a>
 8107d54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107d56:	b141      	cbz	r1, 8107d6a <__swsetup_r+0x4a>
 8107d58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8107d5c:	4299      	cmp	r1, r3
 8107d5e:	d002      	beq.n	8107d66 <__swsetup_r+0x46>
 8107d60:	4628      	mov	r0, r5
 8107d62:	f000 f8bd 	bl	8107ee0 <_free_r>
 8107d66:	2300      	movs	r3, #0
 8107d68:	6363      	str	r3, [r4, #52]	@ 0x34
 8107d6a:	89a3      	ldrh	r3, [r4, #12]
 8107d6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8107d70:	81a3      	strh	r3, [r4, #12]
 8107d72:	2300      	movs	r3, #0
 8107d74:	6063      	str	r3, [r4, #4]
 8107d76:	6923      	ldr	r3, [r4, #16]
 8107d78:	6023      	str	r3, [r4, #0]
 8107d7a:	89a3      	ldrh	r3, [r4, #12]
 8107d7c:	f043 0308 	orr.w	r3, r3, #8
 8107d80:	81a3      	strh	r3, [r4, #12]
 8107d82:	6923      	ldr	r3, [r4, #16]
 8107d84:	b94b      	cbnz	r3, 8107d9a <__swsetup_r+0x7a>
 8107d86:	89a3      	ldrh	r3, [r4, #12]
 8107d88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8107d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107d90:	d003      	beq.n	8107d9a <__swsetup_r+0x7a>
 8107d92:	4621      	mov	r1, r4
 8107d94:	4628      	mov	r0, r5
 8107d96:	f000 fd3b 	bl	8108810 <__smakebuf_r>
 8107d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107d9e:	f013 0201 	ands.w	r2, r3, #1
 8107da2:	d00a      	beq.n	8107dba <__swsetup_r+0x9a>
 8107da4:	2200      	movs	r2, #0
 8107da6:	60a2      	str	r2, [r4, #8]
 8107da8:	6962      	ldr	r2, [r4, #20]
 8107daa:	4252      	negs	r2, r2
 8107dac:	61a2      	str	r2, [r4, #24]
 8107dae:	6922      	ldr	r2, [r4, #16]
 8107db0:	b942      	cbnz	r2, 8107dc4 <__swsetup_r+0xa4>
 8107db2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8107db6:	d1c5      	bne.n	8107d44 <__swsetup_r+0x24>
 8107db8:	bd38      	pop	{r3, r4, r5, pc}
 8107dba:	0799      	lsls	r1, r3, #30
 8107dbc:	bf58      	it	pl
 8107dbe:	6962      	ldrpl	r2, [r4, #20]
 8107dc0:	60a2      	str	r2, [r4, #8]
 8107dc2:	e7f4      	b.n	8107dae <__swsetup_r+0x8e>
 8107dc4:	2000      	movs	r0, #0
 8107dc6:	e7f7      	b.n	8107db8 <__swsetup_r+0x98>
 8107dc8:	1000001c 	.word	0x1000001c

08107dcc <memset>:
 8107dcc:	4402      	add	r2, r0
 8107dce:	4603      	mov	r3, r0
 8107dd0:	4293      	cmp	r3, r2
 8107dd2:	d100      	bne.n	8107dd6 <memset+0xa>
 8107dd4:	4770      	bx	lr
 8107dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8107dda:	e7f9      	b.n	8107dd0 <memset+0x4>

08107ddc <_close_r>:
 8107ddc:	b538      	push	{r3, r4, r5, lr}
 8107dde:	4d06      	ldr	r5, [pc, #24]	@ (8107df8 <_close_r+0x1c>)
 8107de0:	2300      	movs	r3, #0
 8107de2:	4604      	mov	r4, r0
 8107de4:	4608      	mov	r0, r1
 8107de6:	602b      	str	r3, [r5, #0]
 8107de8:	f7f9 ff93 	bl	8101d12 <_close>
 8107dec:	1c43      	adds	r3, r0, #1
 8107dee:	d102      	bne.n	8107df6 <_close_r+0x1a>
 8107df0:	682b      	ldr	r3, [r5, #0]
 8107df2:	b103      	cbz	r3, 8107df6 <_close_r+0x1a>
 8107df4:	6023      	str	r3, [r4, #0]
 8107df6:	bd38      	pop	{r3, r4, r5, pc}
 8107df8:	10000e20 	.word	0x10000e20

08107dfc <_lseek_r>:
 8107dfc:	b538      	push	{r3, r4, r5, lr}
 8107dfe:	4d07      	ldr	r5, [pc, #28]	@ (8107e1c <_lseek_r+0x20>)
 8107e00:	4604      	mov	r4, r0
 8107e02:	4608      	mov	r0, r1
 8107e04:	4611      	mov	r1, r2
 8107e06:	2200      	movs	r2, #0
 8107e08:	602a      	str	r2, [r5, #0]
 8107e0a:	461a      	mov	r2, r3
 8107e0c:	f7f9 ffa8 	bl	8101d60 <_lseek>
 8107e10:	1c43      	adds	r3, r0, #1
 8107e12:	d102      	bne.n	8107e1a <_lseek_r+0x1e>
 8107e14:	682b      	ldr	r3, [r5, #0]
 8107e16:	b103      	cbz	r3, 8107e1a <_lseek_r+0x1e>
 8107e18:	6023      	str	r3, [r4, #0]
 8107e1a:	bd38      	pop	{r3, r4, r5, pc}
 8107e1c:	10000e20 	.word	0x10000e20

08107e20 <_read_r>:
 8107e20:	b538      	push	{r3, r4, r5, lr}
 8107e22:	4d07      	ldr	r5, [pc, #28]	@ (8107e40 <_read_r+0x20>)
 8107e24:	4604      	mov	r4, r0
 8107e26:	4608      	mov	r0, r1
 8107e28:	4611      	mov	r1, r2
 8107e2a:	2200      	movs	r2, #0
 8107e2c:	602a      	str	r2, [r5, #0]
 8107e2e:	461a      	mov	r2, r3
 8107e30:	f7f9 ff36 	bl	8101ca0 <_read>
 8107e34:	1c43      	adds	r3, r0, #1
 8107e36:	d102      	bne.n	8107e3e <_read_r+0x1e>
 8107e38:	682b      	ldr	r3, [r5, #0]
 8107e3a:	b103      	cbz	r3, 8107e3e <_read_r+0x1e>
 8107e3c:	6023      	str	r3, [r4, #0]
 8107e3e:	bd38      	pop	{r3, r4, r5, pc}
 8107e40:	10000e20 	.word	0x10000e20

08107e44 <_write_r>:
 8107e44:	b538      	push	{r3, r4, r5, lr}
 8107e46:	4d07      	ldr	r5, [pc, #28]	@ (8107e64 <_write_r+0x20>)
 8107e48:	4604      	mov	r4, r0
 8107e4a:	4608      	mov	r0, r1
 8107e4c:	4611      	mov	r1, r2
 8107e4e:	2200      	movs	r2, #0
 8107e50:	602a      	str	r2, [r5, #0]
 8107e52:	461a      	mov	r2, r3
 8107e54:	f7f9 ff41 	bl	8101cda <_write>
 8107e58:	1c43      	adds	r3, r0, #1
 8107e5a:	d102      	bne.n	8107e62 <_write_r+0x1e>
 8107e5c:	682b      	ldr	r3, [r5, #0]
 8107e5e:	b103      	cbz	r3, 8107e62 <_write_r+0x1e>
 8107e60:	6023      	str	r3, [r4, #0]
 8107e62:	bd38      	pop	{r3, r4, r5, pc}
 8107e64:	10000e20 	.word	0x10000e20

08107e68 <__errno>:
 8107e68:	4b01      	ldr	r3, [pc, #4]	@ (8107e70 <__errno+0x8>)
 8107e6a:	6818      	ldr	r0, [r3, #0]
 8107e6c:	4770      	bx	lr
 8107e6e:	bf00      	nop
 8107e70:	1000001c 	.word	0x1000001c

08107e74 <__libc_init_array>:
 8107e74:	b570      	push	{r4, r5, r6, lr}
 8107e76:	4d0d      	ldr	r5, [pc, #52]	@ (8107eac <__libc_init_array+0x38>)
 8107e78:	4c0d      	ldr	r4, [pc, #52]	@ (8107eb0 <__libc_init_array+0x3c>)
 8107e7a:	1b64      	subs	r4, r4, r5
 8107e7c:	10a4      	asrs	r4, r4, #2
 8107e7e:	2600      	movs	r6, #0
 8107e80:	42a6      	cmp	r6, r4
 8107e82:	d109      	bne.n	8107e98 <__libc_init_array+0x24>
 8107e84:	4d0b      	ldr	r5, [pc, #44]	@ (8107eb4 <__libc_init_array+0x40>)
 8107e86:	4c0c      	ldr	r4, [pc, #48]	@ (8107eb8 <__libc_init_array+0x44>)
 8107e88:	f000 fd30 	bl	81088ec <_init>
 8107e8c:	1b64      	subs	r4, r4, r5
 8107e8e:	10a4      	asrs	r4, r4, #2
 8107e90:	2600      	movs	r6, #0
 8107e92:	42a6      	cmp	r6, r4
 8107e94:	d105      	bne.n	8107ea2 <__libc_init_array+0x2e>
 8107e96:	bd70      	pop	{r4, r5, r6, pc}
 8107e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8107e9c:	4798      	blx	r3
 8107e9e:	3601      	adds	r6, #1
 8107ea0:	e7ee      	b.n	8107e80 <__libc_init_array+0xc>
 8107ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8107ea6:	4798      	blx	r3
 8107ea8:	3601      	adds	r6, #1
 8107eaa:	e7f2      	b.n	8107e92 <__libc_init_array+0x1e>
 8107eac:	0810898c 	.word	0x0810898c
 8107eb0:	0810898c 	.word	0x0810898c
 8107eb4:	0810898c 	.word	0x0810898c
 8107eb8:	08108990 	.word	0x08108990

08107ebc <__retarget_lock_init_recursive>:
 8107ebc:	4770      	bx	lr

08107ebe <__retarget_lock_acquire_recursive>:
 8107ebe:	4770      	bx	lr

08107ec0 <__retarget_lock_release_recursive>:
 8107ec0:	4770      	bx	lr

08107ec2 <memcpy>:
 8107ec2:	440a      	add	r2, r1
 8107ec4:	4291      	cmp	r1, r2
 8107ec6:	f100 33ff 	add.w	r3, r0, #4294967295
 8107eca:	d100      	bne.n	8107ece <memcpy+0xc>
 8107ecc:	4770      	bx	lr
 8107ece:	b510      	push	{r4, lr}
 8107ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107ed8:	4291      	cmp	r1, r2
 8107eda:	d1f9      	bne.n	8107ed0 <memcpy+0xe>
 8107edc:	bd10      	pop	{r4, pc}
	...

08107ee0 <_free_r>:
 8107ee0:	b538      	push	{r3, r4, r5, lr}
 8107ee2:	4605      	mov	r5, r0
 8107ee4:	2900      	cmp	r1, #0
 8107ee6:	d041      	beq.n	8107f6c <_free_r+0x8c>
 8107ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107eec:	1f0c      	subs	r4, r1, #4
 8107eee:	2b00      	cmp	r3, #0
 8107ef0:	bfb8      	it	lt
 8107ef2:	18e4      	addlt	r4, r4, r3
 8107ef4:	f000 f8e0 	bl	81080b8 <__malloc_lock>
 8107ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8107f70 <_free_r+0x90>)
 8107efa:	6813      	ldr	r3, [r2, #0]
 8107efc:	b933      	cbnz	r3, 8107f0c <_free_r+0x2c>
 8107efe:	6063      	str	r3, [r4, #4]
 8107f00:	6014      	str	r4, [r2, #0]
 8107f02:	4628      	mov	r0, r5
 8107f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107f08:	f000 b8dc 	b.w	81080c4 <__malloc_unlock>
 8107f0c:	42a3      	cmp	r3, r4
 8107f0e:	d908      	bls.n	8107f22 <_free_r+0x42>
 8107f10:	6820      	ldr	r0, [r4, #0]
 8107f12:	1821      	adds	r1, r4, r0
 8107f14:	428b      	cmp	r3, r1
 8107f16:	bf01      	itttt	eq
 8107f18:	6819      	ldreq	r1, [r3, #0]
 8107f1a:	685b      	ldreq	r3, [r3, #4]
 8107f1c:	1809      	addeq	r1, r1, r0
 8107f1e:	6021      	streq	r1, [r4, #0]
 8107f20:	e7ed      	b.n	8107efe <_free_r+0x1e>
 8107f22:	461a      	mov	r2, r3
 8107f24:	685b      	ldr	r3, [r3, #4]
 8107f26:	b10b      	cbz	r3, 8107f2c <_free_r+0x4c>
 8107f28:	42a3      	cmp	r3, r4
 8107f2a:	d9fa      	bls.n	8107f22 <_free_r+0x42>
 8107f2c:	6811      	ldr	r1, [r2, #0]
 8107f2e:	1850      	adds	r0, r2, r1
 8107f30:	42a0      	cmp	r0, r4
 8107f32:	d10b      	bne.n	8107f4c <_free_r+0x6c>
 8107f34:	6820      	ldr	r0, [r4, #0]
 8107f36:	4401      	add	r1, r0
 8107f38:	1850      	adds	r0, r2, r1
 8107f3a:	4283      	cmp	r3, r0
 8107f3c:	6011      	str	r1, [r2, #0]
 8107f3e:	d1e0      	bne.n	8107f02 <_free_r+0x22>
 8107f40:	6818      	ldr	r0, [r3, #0]
 8107f42:	685b      	ldr	r3, [r3, #4]
 8107f44:	6053      	str	r3, [r2, #4]
 8107f46:	4408      	add	r0, r1
 8107f48:	6010      	str	r0, [r2, #0]
 8107f4a:	e7da      	b.n	8107f02 <_free_r+0x22>
 8107f4c:	d902      	bls.n	8107f54 <_free_r+0x74>
 8107f4e:	230c      	movs	r3, #12
 8107f50:	602b      	str	r3, [r5, #0]
 8107f52:	e7d6      	b.n	8107f02 <_free_r+0x22>
 8107f54:	6820      	ldr	r0, [r4, #0]
 8107f56:	1821      	adds	r1, r4, r0
 8107f58:	428b      	cmp	r3, r1
 8107f5a:	bf04      	itt	eq
 8107f5c:	6819      	ldreq	r1, [r3, #0]
 8107f5e:	685b      	ldreq	r3, [r3, #4]
 8107f60:	6063      	str	r3, [r4, #4]
 8107f62:	bf04      	itt	eq
 8107f64:	1809      	addeq	r1, r1, r0
 8107f66:	6021      	streq	r1, [r4, #0]
 8107f68:	6054      	str	r4, [r2, #4]
 8107f6a:	e7ca      	b.n	8107f02 <_free_r+0x22>
 8107f6c:	bd38      	pop	{r3, r4, r5, pc}
 8107f6e:	bf00      	nop
 8107f70:	10000e2c 	.word	0x10000e2c

08107f74 <sbrk_aligned>:
 8107f74:	b570      	push	{r4, r5, r6, lr}
 8107f76:	4e0f      	ldr	r6, [pc, #60]	@ (8107fb4 <sbrk_aligned+0x40>)
 8107f78:	460c      	mov	r4, r1
 8107f7a:	6831      	ldr	r1, [r6, #0]
 8107f7c:	4605      	mov	r5, r0
 8107f7e:	b911      	cbnz	r1, 8107f86 <sbrk_aligned+0x12>
 8107f80:	f000 fca4 	bl	81088cc <_sbrk_r>
 8107f84:	6030      	str	r0, [r6, #0]
 8107f86:	4621      	mov	r1, r4
 8107f88:	4628      	mov	r0, r5
 8107f8a:	f000 fc9f 	bl	81088cc <_sbrk_r>
 8107f8e:	1c43      	adds	r3, r0, #1
 8107f90:	d103      	bne.n	8107f9a <sbrk_aligned+0x26>
 8107f92:	f04f 34ff 	mov.w	r4, #4294967295
 8107f96:	4620      	mov	r0, r4
 8107f98:	bd70      	pop	{r4, r5, r6, pc}
 8107f9a:	1cc4      	adds	r4, r0, #3
 8107f9c:	f024 0403 	bic.w	r4, r4, #3
 8107fa0:	42a0      	cmp	r0, r4
 8107fa2:	d0f8      	beq.n	8107f96 <sbrk_aligned+0x22>
 8107fa4:	1a21      	subs	r1, r4, r0
 8107fa6:	4628      	mov	r0, r5
 8107fa8:	f000 fc90 	bl	81088cc <_sbrk_r>
 8107fac:	3001      	adds	r0, #1
 8107fae:	d1f2      	bne.n	8107f96 <sbrk_aligned+0x22>
 8107fb0:	e7ef      	b.n	8107f92 <sbrk_aligned+0x1e>
 8107fb2:	bf00      	nop
 8107fb4:	10000e28 	.word	0x10000e28

08107fb8 <_malloc_r>:
 8107fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107fbc:	1ccd      	adds	r5, r1, #3
 8107fbe:	f025 0503 	bic.w	r5, r5, #3
 8107fc2:	3508      	adds	r5, #8
 8107fc4:	2d0c      	cmp	r5, #12
 8107fc6:	bf38      	it	cc
 8107fc8:	250c      	movcc	r5, #12
 8107fca:	2d00      	cmp	r5, #0
 8107fcc:	4606      	mov	r6, r0
 8107fce:	db01      	blt.n	8107fd4 <_malloc_r+0x1c>
 8107fd0:	42a9      	cmp	r1, r5
 8107fd2:	d904      	bls.n	8107fde <_malloc_r+0x26>
 8107fd4:	230c      	movs	r3, #12
 8107fd6:	6033      	str	r3, [r6, #0]
 8107fd8:	2000      	movs	r0, #0
 8107fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107fde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 81080b4 <_malloc_r+0xfc>
 8107fe2:	f000 f869 	bl	81080b8 <__malloc_lock>
 8107fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8107fea:	461c      	mov	r4, r3
 8107fec:	bb44      	cbnz	r4, 8108040 <_malloc_r+0x88>
 8107fee:	4629      	mov	r1, r5
 8107ff0:	4630      	mov	r0, r6
 8107ff2:	f7ff ffbf 	bl	8107f74 <sbrk_aligned>
 8107ff6:	1c43      	adds	r3, r0, #1
 8107ff8:	4604      	mov	r4, r0
 8107ffa:	d158      	bne.n	81080ae <_malloc_r+0xf6>
 8107ffc:	f8d8 4000 	ldr.w	r4, [r8]
 8108000:	4627      	mov	r7, r4
 8108002:	2f00      	cmp	r7, #0
 8108004:	d143      	bne.n	810808e <_malloc_r+0xd6>
 8108006:	2c00      	cmp	r4, #0
 8108008:	d04b      	beq.n	81080a2 <_malloc_r+0xea>
 810800a:	6823      	ldr	r3, [r4, #0]
 810800c:	4639      	mov	r1, r7
 810800e:	4630      	mov	r0, r6
 8108010:	eb04 0903 	add.w	r9, r4, r3
 8108014:	f000 fc5a 	bl	81088cc <_sbrk_r>
 8108018:	4581      	cmp	r9, r0
 810801a:	d142      	bne.n	81080a2 <_malloc_r+0xea>
 810801c:	6821      	ldr	r1, [r4, #0]
 810801e:	1a6d      	subs	r5, r5, r1
 8108020:	4629      	mov	r1, r5
 8108022:	4630      	mov	r0, r6
 8108024:	f7ff ffa6 	bl	8107f74 <sbrk_aligned>
 8108028:	3001      	adds	r0, #1
 810802a:	d03a      	beq.n	81080a2 <_malloc_r+0xea>
 810802c:	6823      	ldr	r3, [r4, #0]
 810802e:	442b      	add	r3, r5
 8108030:	6023      	str	r3, [r4, #0]
 8108032:	f8d8 3000 	ldr.w	r3, [r8]
 8108036:	685a      	ldr	r2, [r3, #4]
 8108038:	bb62      	cbnz	r2, 8108094 <_malloc_r+0xdc>
 810803a:	f8c8 7000 	str.w	r7, [r8]
 810803e:	e00f      	b.n	8108060 <_malloc_r+0xa8>
 8108040:	6822      	ldr	r2, [r4, #0]
 8108042:	1b52      	subs	r2, r2, r5
 8108044:	d420      	bmi.n	8108088 <_malloc_r+0xd0>
 8108046:	2a0b      	cmp	r2, #11
 8108048:	d917      	bls.n	810807a <_malloc_r+0xc2>
 810804a:	1961      	adds	r1, r4, r5
 810804c:	42a3      	cmp	r3, r4
 810804e:	6025      	str	r5, [r4, #0]
 8108050:	bf18      	it	ne
 8108052:	6059      	strne	r1, [r3, #4]
 8108054:	6863      	ldr	r3, [r4, #4]
 8108056:	bf08      	it	eq
 8108058:	f8c8 1000 	streq.w	r1, [r8]
 810805c:	5162      	str	r2, [r4, r5]
 810805e:	604b      	str	r3, [r1, #4]
 8108060:	4630      	mov	r0, r6
 8108062:	f000 f82f 	bl	81080c4 <__malloc_unlock>
 8108066:	f104 000b 	add.w	r0, r4, #11
 810806a:	1d23      	adds	r3, r4, #4
 810806c:	f020 0007 	bic.w	r0, r0, #7
 8108070:	1ac2      	subs	r2, r0, r3
 8108072:	bf1c      	itt	ne
 8108074:	1a1b      	subne	r3, r3, r0
 8108076:	50a3      	strne	r3, [r4, r2]
 8108078:	e7af      	b.n	8107fda <_malloc_r+0x22>
 810807a:	6862      	ldr	r2, [r4, #4]
 810807c:	42a3      	cmp	r3, r4
 810807e:	bf0c      	ite	eq
 8108080:	f8c8 2000 	streq.w	r2, [r8]
 8108084:	605a      	strne	r2, [r3, #4]
 8108086:	e7eb      	b.n	8108060 <_malloc_r+0xa8>
 8108088:	4623      	mov	r3, r4
 810808a:	6864      	ldr	r4, [r4, #4]
 810808c:	e7ae      	b.n	8107fec <_malloc_r+0x34>
 810808e:	463c      	mov	r4, r7
 8108090:	687f      	ldr	r7, [r7, #4]
 8108092:	e7b6      	b.n	8108002 <_malloc_r+0x4a>
 8108094:	461a      	mov	r2, r3
 8108096:	685b      	ldr	r3, [r3, #4]
 8108098:	42a3      	cmp	r3, r4
 810809a:	d1fb      	bne.n	8108094 <_malloc_r+0xdc>
 810809c:	2300      	movs	r3, #0
 810809e:	6053      	str	r3, [r2, #4]
 81080a0:	e7de      	b.n	8108060 <_malloc_r+0xa8>
 81080a2:	230c      	movs	r3, #12
 81080a4:	6033      	str	r3, [r6, #0]
 81080a6:	4630      	mov	r0, r6
 81080a8:	f000 f80c 	bl	81080c4 <__malloc_unlock>
 81080ac:	e794      	b.n	8107fd8 <_malloc_r+0x20>
 81080ae:	6005      	str	r5, [r0, #0]
 81080b0:	e7d6      	b.n	8108060 <_malloc_r+0xa8>
 81080b2:	bf00      	nop
 81080b4:	10000e2c 	.word	0x10000e2c

081080b8 <__malloc_lock>:
 81080b8:	4801      	ldr	r0, [pc, #4]	@ (81080c0 <__malloc_lock+0x8>)
 81080ba:	f7ff bf00 	b.w	8107ebe <__retarget_lock_acquire_recursive>
 81080be:	bf00      	nop
 81080c0:	10000e24 	.word	0x10000e24

081080c4 <__malloc_unlock>:
 81080c4:	4801      	ldr	r0, [pc, #4]	@ (81080cc <__malloc_unlock+0x8>)
 81080c6:	f7ff befb 	b.w	8107ec0 <__retarget_lock_release_recursive>
 81080ca:	bf00      	nop
 81080cc:	10000e24 	.word	0x10000e24

081080d0 <__sfputc_r>:
 81080d0:	6893      	ldr	r3, [r2, #8]
 81080d2:	3b01      	subs	r3, #1
 81080d4:	2b00      	cmp	r3, #0
 81080d6:	b410      	push	{r4}
 81080d8:	6093      	str	r3, [r2, #8]
 81080da:	da08      	bge.n	81080ee <__sfputc_r+0x1e>
 81080dc:	6994      	ldr	r4, [r2, #24]
 81080de:	42a3      	cmp	r3, r4
 81080e0:	db01      	blt.n	81080e6 <__sfputc_r+0x16>
 81080e2:	290a      	cmp	r1, #10
 81080e4:	d103      	bne.n	81080ee <__sfputc_r+0x1e>
 81080e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 81080ea:	f7ff bdda 	b.w	8107ca2 <__swbuf_r>
 81080ee:	6813      	ldr	r3, [r2, #0]
 81080f0:	1c58      	adds	r0, r3, #1
 81080f2:	6010      	str	r0, [r2, #0]
 81080f4:	7019      	strb	r1, [r3, #0]
 81080f6:	4608      	mov	r0, r1
 81080f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 81080fc:	4770      	bx	lr

081080fe <__sfputs_r>:
 81080fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108100:	4606      	mov	r6, r0
 8108102:	460f      	mov	r7, r1
 8108104:	4614      	mov	r4, r2
 8108106:	18d5      	adds	r5, r2, r3
 8108108:	42ac      	cmp	r4, r5
 810810a:	d101      	bne.n	8108110 <__sfputs_r+0x12>
 810810c:	2000      	movs	r0, #0
 810810e:	e007      	b.n	8108120 <__sfputs_r+0x22>
 8108110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108114:	463a      	mov	r2, r7
 8108116:	4630      	mov	r0, r6
 8108118:	f7ff ffda 	bl	81080d0 <__sfputc_r>
 810811c:	1c43      	adds	r3, r0, #1
 810811e:	d1f3      	bne.n	8108108 <__sfputs_r+0xa>
 8108120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08108124 <_vfiprintf_r>:
 8108124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108128:	460d      	mov	r5, r1
 810812a:	b09d      	sub	sp, #116	@ 0x74
 810812c:	4614      	mov	r4, r2
 810812e:	4698      	mov	r8, r3
 8108130:	4606      	mov	r6, r0
 8108132:	b118      	cbz	r0, 810813c <_vfiprintf_r+0x18>
 8108134:	6a03      	ldr	r3, [r0, #32]
 8108136:	b90b      	cbnz	r3, 810813c <_vfiprintf_r+0x18>
 8108138:	f7ff fcca 	bl	8107ad0 <__sinit>
 810813c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810813e:	07d9      	lsls	r1, r3, #31
 8108140:	d405      	bmi.n	810814e <_vfiprintf_r+0x2a>
 8108142:	89ab      	ldrh	r3, [r5, #12]
 8108144:	059a      	lsls	r2, r3, #22
 8108146:	d402      	bmi.n	810814e <_vfiprintf_r+0x2a>
 8108148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810814a:	f7ff feb8 	bl	8107ebe <__retarget_lock_acquire_recursive>
 810814e:	89ab      	ldrh	r3, [r5, #12]
 8108150:	071b      	lsls	r3, r3, #28
 8108152:	d501      	bpl.n	8108158 <_vfiprintf_r+0x34>
 8108154:	692b      	ldr	r3, [r5, #16]
 8108156:	b99b      	cbnz	r3, 8108180 <_vfiprintf_r+0x5c>
 8108158:	4629      	mov	r1, r5
 810815a:	4630      	mov	r0, r6
 810815c:	f7ff fde0 	bl	8107d20 <__swsetup_r>
 8108160:	b170      	cbz	r0, 8108180 <_vfiprintf_r+0x5c>
 8108162:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8108164:	07dc      	lsls	r4, r3, #31
 8108166:	d504      	bpl.n	8108172 <_vfiprintf_r+0x4e>
 8108168:	f04f 30ff 	mov.w	r0, #4294967295
 810816c:	b01d      	add	sp, #116	@ 0x74
 810816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108172:	89ab      	ldrh	r3, [r5, #12]
 8108174:	0598      	lsls	r0, r3, #22
 8108176:	d4f7      	bmi.n	8108168 <_vfiprintf_r+0x44>
 8108178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810817a:	f7ff fea1 	bl	8107ec0 <__retarget_lock_release_recursive>
 810817e:	e7f3      	b.n	8108168 <_vfiprintf_r+0x44>
 8108180:	2300      	movs	r3, #0
 8108182:	9309      	str	r3, [sp, #36]	@ 0x24
 8108184:	2320      	movs	r3, #32
 8108186:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810818a:	f8cd 800c 	str.w	r8, [sp, #12]
 810818e:	2330      	movs	r3, #48	@ 0x30
 8108190:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8108340 <_vfiprintf_r+0x21c>
 8108194:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8108198:	f04f 0901 	mov.w	r9, #1
 810819c:	4623      	mov	r3, r4
 810819e:	469a      	mov	sl, r3
 81081a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 81081a4:	b10a      	cbz	r2, 81081aa <_vfiprintf_r+0x86>
 81081a6:	2a25      	cmp	r2, #37	@ 0x25
 81081a8:	d1f9      	bne.n	810819e <_vfiprintf_r+0x7a>
 81081aa:	ebba 0b04 	subs.w	fp, sl, r4
 81081ae:	d00b      	beq.n	81081c8 <_vfiprintf_r+0xa4>
 81081b0:	465b      	mov	r3, fp
 81081b2:	4622      	mov	r2, r4
 81081b4:	4629      	mov	r1, r5
 81081b6:	4630      	mov	r0, r6
 81081b8:	f7ff ffa1 	bl	81080fe <__sfputs_r>
 81081bc:	3001      	adds	r0, #1
 81081be:	f000 80a7 	beq.w	8108310 <_vfiprintf_r+0x1ec>
 81081c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81081c4:	445a      	add	r2, fp
 81081c6:	9209      	str	r2, [sp, #36]	@ 0x24
 81081c8:	f89a 3000 	ldrb.w	r3, [sl]
 81081cc:	2b00      	cmp	r3, #0
 81081ce:	f000 809f 	beq.w	8108310 <_vfiprintf_r+0x1ec>
 81081d2:	2300      	movs	r3, #0
 81081d4:	f04f 32ff 	mov.w	r2, #4294967295
 81081d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81081dc:	f10a 0a01 	add.w	sl, sl, #1
 81081e0:	9304      	str	r3, [sp, #16]
 81081e2:	9307      	str	r3, [sp, #28]
 81081e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81081e8:	931a      	str	r3, [sp, #104]	@ 0x68
 81081ea:	4654      	mov	r4, sl
 81081ec:	2205      	movs	r2, #5
 81081ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 81081f2:	4853      	ldr	r0, [pc, #332]	@ (8108340 <_vfiprintf_r+0x21c>)
 81081f4:	f7f8 f874 	bl	81002e0 <memchr>
 81081f8:	9a04      	ldr	r2, [sp, #16]
 81081fa:	b9d8      	cbnz	r0, 8108234 <_vfiprintf_r+0x110>
 81081fc:	06d1      	lsls	r1, r2, #27
 81081fe:	bf44      	itt	mi
 8108200:	2320      	movmi	r3, #32
 8108202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8108206:	0713      	lsls	r3, r2, #28
 8108208:	bf44      	itt	mi
 810820a:	232b      	movmi	r3, #43	@ 0x2b
 810820c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8108210:	f89a 3000 	ldrb.w	r3, [sl]
 8108214:	2b2a      	cmp	r3, #42	@ 0x2a
 8108216:	d015      	beq.n	8108244 <_vfiprintf_r+0x120>
 8108218:	9a07      	ldr	r2, [sp, #28]
 810821a:	4654      	mov	r4, sl
 810821c:	2000      	movs	r0, #0
 810821e:	f04f 0c0a 	mov.w	ip, #10
 8108222:	4621      	mov	r1, r4
 8108224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8108228:	3b30      	subs	r3, #48	@ 0x30
 810822a:	2b09      	cmp	r3, #9
 810822c:	d94b      	bls.n	81082c6 <_vfiprintf_r+0x1a2>
 810822e:	b1b0      	cbz	r0, 810825e <_vfiprintf_r+0x13a>
 8108230:	9207      	str	r2, [sp, #28]
 8108232:	e014      	b.n	810825e <_vfiprintf_r+0x13a>
 8108234:	eba0 0308 	sub.w	r3, r0, r8
 8108238:	fa09 f303 	lsl.w	r3, r9, r3
 810823c:	4313      	orrs	r3, r2
 810823e:	9304      	str	r3, [sp, #16]
 8108240:	46a2      	mov	sl, r4
 8108242:	e7d2      	b.n	81081ea <_vfiprintf_r+0xc6>
 8108244:	9b03      	ldr	r3, [sp, #12]
 8108246:	1d19      	adds	r1, r3, #4
 8108248:	681b      	ldr	r3, [r3, #0]
 810824a:	9103      	str	r1, [sp, #12]
 810824c:	2b00      	cmp	r3, #0
 810824e:	bfbb      	ittet	lt
 8108250:	425b      	neglt	r3, r3
 8108252:	f042 0202 	orrlt.w	r2, r2, #2
 8108256:	9307      	strge	r3, [sp, #28]
 8108258:	9307      	strlt	r3, [sp, #28]
 810825a:	bfb8      	it	lt
 810825c:	9204      	strlt	r2, [sp, #16]
 810825e:	7823      	ldrb	r3, [r4, #0]
 8108260:	2b2e      	cmp	r3, #46	@ 0x2e
 8108262:	d10a      	bne.n	810827a <_vfiprintf_r+0x156>
 8108264:	7863      	ldrb	r3, [r4, #1]
 8108266:	2b2a      	cmp	r3, #42	@ 0x2a
 8108268:	d132      	bne.n	81082d0 <_vfiprintf_r+0x1ac>
 810826a:	9b03      	ldr	r3, [sp, #12]
 810826c:	1d1a      	adds	r2, r3, #4
 810826e:	681b      	ldr	r3, [r3, #0]
 8108270:	9203      	str	r2, [sp, #12]
 8108272:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8108276:	3402      	adds	r4, #2
 8108278:	9305      	str	r3, [sp, #20]
 810827a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8108350 <_vfiprintf_r+0x22c>
 810827e:	7821      	ldrb	r1, [r4, #0]
 8108280:	2203      	movs	r2, #3
 8108282:	4650      	mov	r0, sl
 8108284:	f7f8 f82c 	bl	81002e0 <memchr>
 8108288:	b138      	cbz	r0, 810829a <_vfiprintf_r+0x176>
 810828a:	9b04      	ldr	r3, [sp, #16]
 810828c:	eba0 000a 	sub.w	r0, r0, sl
 8108290:	2240      	movs	r2, #64	@ 0x40
 8108292:	4082      	lsls	r2, r0
 8108294:	4313      	orrs	r3, r2
 8108296:	3401      	adds	r4, #1
 8108298:	9304      	str	r3, [sp, #16]
 810829a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810829e:	4829      	ldr	r0, [pc, #164]	@ (8108344 <_vfiprintf_r+0x220>)
 81082a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 81082a4:	2206      	movs	r2, #6
 81082a6:	f7f8 f81b 	bl	81002e0 <memchr>
 81082aa:	2800      	cmp	r0, #0
 81082ac:	d03f      	beq.n	810832e <_vfiprintf_r+0x20a>
 81082ae:	4b26      	ldr	r3, [pc, #152]	@ (8108348 <_vfiprintf_r+0x224>)
 81082b0:	bb1b      	cbnz	r3, 81082fa <_vfiprintf_r+0x1d6>
 81082b2:	9b03      	ldr	r3, [sp, #12]
 81082b4:	3307      	adds	r3, #7
 81082b6:	f023 0307 	bic.w	r3, r3, #7
 81082ba:	3308      	adds	r3, #8
 81082bc:	9303      	str	r3, [sp, #12]
 81082be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81082c0:	443b      	add	r3, r7
 81082c2:	9309      	str	r3, [sp, #36]	@ 0x24
 81082c4:	e76a      	b.n	810819c <_vfiprintf_r+0x78>
 81082c6:	fb0c 3202 	mla	r2, ip, r2, r3
 81082ca:	460c      	mov	r4, r1
 81082cc:	2001      	movs	r0, #1
 81082ce:	e7a8      	b.n	8108222 <_vfiprintf_r+0xfe>
 81082d0:	2300      	movs	r3, #0
 81082d2:	3401      	adds	r4, #1
 81082d4:	9305      	str	r3, [sp, #20]
 81082d6:	4619      	mov	r1, r3
 81082d8:	f04f 0c0a 	mov.w	ip, #10
 81082dc:	4620      	mov	r0, r4
 81082de:	f810 2b01 	ldrb.w	r2, [r0], #1
 81082e2:	3a30      	subs	r2, #48	@ 0x30
 81082e4:	2a09      	cmp	r2, #9
 81082e6:	d903      	bls.n	81082f0 <_vfiprintf_r+0x1cc>
 81082e8:	2b00      	cmp	r3, #0
 81082ea:	d0c6      	beq.n	810827a <_vfiprintf_r+0x156>
 81082ec:	9105      	str	r1, [sp, #20]
 81082ee:	e7c4      	b.n	810827a <_vfiprintf_r+0x156>
 81082f0:	fb0c 2101 	mla	r1, ip, r1, r2
 81082f4:	4604      	mov	r4, r0
 81082f6:	2301      	movs	r3, #1
 81082f8:	e7f0      	b.n	81082dc <_vfiprintf_r+0x1b8>
 81082fa:	ab03      	add	r3, sp, #12
 81082fc:	9300      	str	r3, [sp, #0]
 81082fe:	462a      	mov	r2, r5
 8108300:	4b12      	ldr	r3, [pc, #72]	@ (810834c <_vfiprintf_r+0x228>)
 8108302:	a904      	add	r1, sp, #16
 8108304:	4630      	mov	r0, r6
 8108306:	f3af 8000 	nop.w
 810830a:	4607      	mov	r7, r0
 810830c:	1c78      	adds	r0, r7, #1
 810830e:	d1d6      	bne.n	81082be <_vfiprintf_r+0x19a>
 8108310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8108312:	07d9      	lsls	r1, r3, #31
 8108314:	d405      	bmi.n	8108322 <_vfiprintf_r+0x1fe>
 8108316:	89ab      	ldrh	r3, [r5, #12]
 8108318:	059a      	lsls	r2, r3, #22
 810831a:	d402      	bmi.n	8108322 <_vfiprintf_r+0x1fe>
 810831c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810831e:	f7ff fdcf 	bl	8107ec0 <__retarget_lock_release_recursive>
 8108322:	89ab      	ldrh	r3, [r5, #12]
 8108324:	065b      	lsls	r3, r3, #25
 8108326:	f53f af1f 	bmi.w	8108168 <_vfiprintf_r+0x44>
 810832a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810832c:	e71e      	b.n	810816c <_vfiprintf_r+0x48>
 810832e:	ab03      	add	r3, sp, #12
 8108330:	9300      	str	r3, [sp, #0]
 8108332:	462a      	mov	r2, r5
 8108334:	4b05      	ldr	r3, [pc, #20]	@ (810834c <_vfiprintf_r+0x228>)
 8108336:	a904      	add	r1, sp, #16
 8108338:	4630      	mov	r0, r6
 810833a:	f000 f879 	bl	8108430 <_printf_i>
 810833e:	e7e4      	b.n	810830a <_vfiprintf_r+0x1e6>
 8108340:	08108950 	.word	0x08108950
 8108344:	0810895a 	.word	0x0810895a
 8108348:	00000000 	.word	0x00000000
 810834c:	081080ff 	.word	0x081080ff
 8108350:	08108956 	.word	0x08108956

08108354 <_printf_common>:
 8108354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108358:	4616      	mov	r6, r2
 810835a:	4698      	mov	r8, r3
 810835c:	688a      	ldr	r2, [r1, #8]
 810835e:	690b      	ldr	r3, [r1, #16]
 8108360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8108364:	4293      	cmp	r3, r2
 8108366:	bfb8      	it	lt
 8108368:	4613      	movlt	r3, r2
 810836a:	6033      	str	r3, [r6, #0]
 810836c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8108370:	4607      	mov	r7, r0
 8108372:	460c      	mov	r4, r1
 8108374:	b10a      	cbz	r2, 810837a <_printf_common+0x26>
 8108376:	3301      	adds	r3, #1
 8108378:	6033      	str	r3, [r6, #0]
 810837a:	6823      	ldr	r3, [r4, #0]
 810837c:	0699      	lsls	r1, r3, #26
 810837e:	bf42      	ittt	mi
 8108380:	6833      	ldrmi	r3, [r6, #0]
 8108382:	3302      	addmi	r3, #2
 8108384:	6033      	strmi	r3, [r6, #0]
 8108386:	6825      	ldr	r5, [r4, #0]
 8108388:	f015 0506 	ands.w	r5, r5, #6
 810838c:	d106      	bne.n	810839c <_printf_common+0x48>
 810838e:	f104 0a19 	add.w	sl, r4, #25
 8108392:	68e3      	ldr	r3, [r4, #12]
 8108394:	6832      	ldr	r2, [r6, #0]
 8108396:	1a9b      	subs	r3, r3, r2
 8108398:	42ab      	cmp	r3, r5
 810839a:	dc26      	bgt.n	81083ea <_printf_common+0x96>
 810839c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 81083a0:	6822      	ldr	r2, [r4, #0]
 81083a2:	3b00      	subs	r3, #0
 81083a4:	bf18      	it	ne
 81083a6:	2301      	movne	r3, #1
 81083a8:	0692      	lsls	r2, r2, #26
 81083aa:	d42b      	bmi.n	8108404 <_printf_common+0xb0>
 81083ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 81083b0:	4641      	mov	r1, r8
 81083b2:	4638      	mov	r0, r7
 81083b4:	47c8      	blx	r9
 81083b6:	3001      	adds	r0, #1
 81083b8:	d01e      	beq.n	81083f8 <_printf_common+0xa4>
 81083ba:	6823      	ldr	r3, [r4, #0]
 81083bc:	6922      	ldr	r2, [r4, #16]
 81083be:	f003 0306 	and.w	r3, r3, #6
 81083c2:	2b04      	cmp	r3, #4
 81083c4:	bf02      	ittt	eq
 81083c6:	68e5      	ldreq	r5, [r4, #12]
 81083c8:	6833      	ldreq	r3, [r6, #0]
 81083ca:	1aed      	subeq	r5, r5, r3
 81083cc:	68a3      	ldr	r3, [r4, #8]
 81083ce:	bf0c      	ite	eq
 81083d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81083d4:	2500      	movne	r5, #0
 81083d6:	4293      	cmp	r3, r2
 81083d8:	bfc4      	itt	gt
 81083da:	1a9b      	subgt	r3, r3, r2
 81083dc:	18ed      	addgt	r5, r5, r3
 81083de:	2600      	movs	r6, #0
 81083e0:	341a      	adds	r4, #26
 81083e2:	42b5      	cmp	r5, r6
 81083e4:	d11a      	bne.n	810841c <_printf_common+0xc8>
 81083e6:	2000      	movs	r0, #0
 81083e8:	e008      	b.n	81083fc <_printf_common+0xa8>
 81083ea:	2301      	movs	r3, #1
 81083ec:	4652      	mov	r2, sl
 81083ee:	4641      	mov	r1, r8
 81083f0:	4638      	mov	r0, r7
 81083f2:	47c8      	blx	r9
 81083f4:	3001      	adds	r0, #1
 81083f6:	d103      	bne.n	8108400 <_printf_common+0xac>
 81083f8:	f04f 30ff 	mov.w	r0, #4294967295
 81083fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108400:	3501      	adds	r5, #1
 8108402:	e7c6      	b.n	8108392 <_printf_common+0x3e>
 8108404:	18e1      	adds	r1, r4, r3
 8108406:	1c5a      	adds	r2, r3, #1
 8108408:	2030      	movs	r0, #48	@ 0x30
 810840a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810840e:	4422      	add	r2, r4
 8108410:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8108414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8108418:	3302      	adds	r3, #2
 810841a:	e7c7      	b.n	81083ac <_printf_common+0x58>
 810841c:	2301      	movs	r3, #1
 810841e:	4622      	mov	r2, r4
 8108420:	4641      	mov	r1, r8
 8108422:	4638      	mov	r0, r7
 8108424:	47c8      	blx	r9
 8108426:	3001      	adds	r0, #1
 8108428:	d0e6      	beq.n	81083f8 <_printf_common+0xa4>
 810842a:	3601      	adds	r6, #1
 810842c:	e7d9      	b.n	81083e2 <_printf_common+0x8e>
	...

08108430 <_printf_i>:
 8108430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108434:	7e0f      	ldrb	r7, [r1, #24]
 8108436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8108438:	2f78      	cmp	r7, #120	@ 0x78
 810843a:	4691      	mov	r9, r2
 810843c:	4680      	mov	r8, r0
 810843e:	460c      	mov	r4, r1
 8108440:	469a      	mov	sl, r3
 8108442:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8108446:	d807      	bhi.n	8108458 <_printf_i+0x28>
 8108448:	2f62      	cmp	r7, #98	@ 0x62
 810844a:	d80a      	bhi.n	8108462 <_printf_i+0x32>
 810844c:	2f00      	cmp	r7, #0
 810844e:	f000 80d1 	beq.w	81085f4 <_printf_i+0x1c4>
 8108452:	2f58      	cmp	r7, #88	@ 0x58
 8108454:	f000 80b8 	beq.w	81085c8 <_printf_i+0x198>
 8108458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810845c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8108460:	e03a      	b.n	81084d8 <_printf_i+0xa8>
 8108462:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8108466:	2b15      	cmp	r3, #21
 8108468:	d8f6      	bhi.n	8108458 <_printf_i+0x28>
 810846a:	a101      	add	r1, pc, #4	@ (adr r1, 8108470 <_printf_i+0x40>)
 810846c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8108470:	081084c9 	.word	0x081084c9
 8108474:	081084dd 	.word	0x081084dd
 8108478:	08108459 	.word	0x08108459
 810847c:	08108459 	.word	0x08108459
 8108480:	08108459 	.word	0x08108459
 8108484:	08108459 	.word	0x08108459
 8108488:	081084dd 	.word	0x081084dd
 810848c:	08108459 	.word	0x08108459
 8108490:	08108459 	.word	0x08108459
 8108494:	08108459 	.word	0x08108459
 8108498:	08108459 	.word	0x08108459
 810849c:	081085db 	.word	0x081085db
 81084a0:	08108507 	.word	0x08108507
 81084a4:	08108595 	.word	0x08108595
 81084a8:	08108459 	.word	0x08108459
 81084ac:	08108459 	.word	0x08108459
 81084b0:	081085fd 	.word	0x081085fd
 81084b4:	08108459 	.word	0x08108459
 81084b8:	08108507 	.word	0x08108507
 81084bc:	08108459 	.word	0x08108459
 81084c0:	08108459 	.word	0x08108459
 81084c4:	0810859d 	.word	0x0810859d
 81084c8:	6833      	ldr	r3, [r6, #0]
 81084ca:	1d1a      	adds	r2, r3, #4
 81084cc:	681b      	ldr	r3, [r3, #0]
 81084ce:	6032      	str	r2, [r6, #0]
 81084d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81084d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 81084d8:	2301      	movs	r3, #1
 81084da:	e09c      	b.n	8108616 <_printf_i+0x1e6>
 81084dc:	6833      	ldr	r3, [r6, #0]
 81084de:	6820      	ldr	r0, [r4, #0]
 81084e0:	1d19      	adds	r1, r3, #4
 81084e2:	6031      	str	r1, [r6, #0]
 81084e4:	0606      	lsls	r6, r0, #24
 81084e6:	d501      	bpl.n	81084ec <_printf_i+0xbc>
 81084e8:	681d      	ldr	r5, [r3, #0]
 81084ea:	e003      	b.n	81084f4 <_printf_i+0xc4>
 81084ec:	0645      	lsls	r5, r0, #25
 81084ee:	d5fb      	bpl.n	81084e8 <_printf_i+0xb8>
 81084f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 81084f4:	2d00      	cmp	r5, #0
 81084f6:	da03      	bge.n	8108500 <_printf_i+0xd0>
 81084f8:	232d      	movs	r3, #45	@ 0x2d
 81084fa:	426d      	negs	r5, r5
 81084fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8108500:	4858      	ldr	r0, [pc, #352]	@ (8108664 <_printf_i+0x234>)
 8108502:	230a      	movs	r3, #10
 8108504:	e011      	b.n	810852a <_printf_i+0xfa>
 8108506:	6821      	ldr	r1, [r4, #0]
 8108508:	6833      	ldr	r3, [r6, #0]
 810850a:	0608      	lsls	r0, r1, #24
 810850c:	f853 5b04 	ldr.w	r5, [r3], #4
 8108510:	d402      	bmi.n	8108518 <_printf_i+0xe8>
 8108512:	0649      	lsls	r1, r1, #25
 8108514:	bf48      	it	mi
 8108516:	b2ad      	uxthmi	r5, r5
 8108518:	2f6f      	cmp	r7, #111	@ 0x6f
 810851a:	4852      	ldr	r0, [pc, #328]	@ (8108664 <_printf_i+0x234>)
 810851c:	6033      	str	r3, [r6, #0]
 810851e:	bf14      	ite	ne
 8108520:	230a      	movne	r3, #10
 8108522:	2308      	moveq	r3, #8
 8108524:	2100      	movs	r1, #0
 8108526:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810852a:	6866      	ldr	r6, [r4, #4]
 810852c:	60a6      	str	r6, [r4, #8]
 810852e:	2e00      	cmp	r6, #0
 8108530:	db05      	blt.n	810853e <_printf_i+0x10e>
 8108532:	6821      	ldr	r1, [r4, #0]
 8108534:	432e      	orrs	r6, r5
 8108536:	f021 0104 	bic.w	r1, r1, #4
 810853a:	6021      	str	r1, [r4, #0]
 810853c:	d04b      	beq.n	81085d6 <_printf_i+0x1a6>
 810853e:	4616      	mov	r6, r2
 8108540:	fbb5 f1f3 	udiv	r1, r5, r3
 8108544:	fb03 5711 	mls	r7, r3, r1, r5
 8108548:	5dc7      	ldrb	r7, [r0, r7]
 810854a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810854e:	462f      	mov	r7, r5
 8108550:	42bb      	cmp	r3, r7
 8108552:	460d      	mov	r5, r1
 8108554:	d9f4      	bls.n	8108540 <_printf_i+0x110>
 8108556:	2b08      	cmp	r3, #8
 8108558:	d10b      	bne.n	8108572 <_printf_i+0x142>
 810855a:	6823      	ldr	r3, [r4, #0]
 810855c:	07df      	lsls	r7, r3, #31
 810855e:	d508      	bpl.n	8108572 <_printf_i+0x142>
 8108560:	6923      	ldr	r3, [r4, #16]
 8108562:	6861      	ldr	r1, [r4, #4]
 8108564:	4299      	cmp	r1, r3
 8108566:	bfde      	ittt	le
 8108568:	2330      	movle	r3, #48	@ 0x30
 810856a:	f806 3c01 	strble.w	r3, [r6, #-1]
 810856e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8108572:	1b92      	subs	r2, r2, r6
 8108574:	6122      	str	r2, [r4, #16]
 8108576:	f8cd a000 	str.w	sl, [sp]
 810857a:	464b      	mov	r3, r9
 810857c:	aa03      	add	r2, sp, #12
 810857e:	4621      	mov	r1, r4
 8108580:	4640      	mov	r0, r8
 8108582:	f7ff fee7 	bl	8108354 <_printf_common>
 8108586:	3001      	adds	r0, #1
 8108588:	d14a      	bne.n	8108620 <_printf_i+0x1f0>
 810858a:	f04f 30ff 	mov.w	r0, #4294967295
 810858e:	b004      	add	sp, #16
 8108590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108594:	6823      	ldr	r3, [r4, #0]
 8108596:	f043 0320 	orr.w	r3, r3, #32
 810859a:	6023      	str	r3, [r4, #0]
 810859c:	4832      	ldr	r0, [pc, #200]	@ (8108668 <_printf_i+0x238>)
 810859e:	2778      	movs	r7, #120	@ 0x78
 81085a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 81085a4:	6823      	ldr	r3, [r4, #0]
 81085a6:	6831      	ldr	r1, [r6, #0]
 81085a8:	061f      	lsls	r7, r3, #24
 81085aa:	f851 5b04 	ldr.w	r5, [r1], #4
 81085ae:	d402      	bmi.n	81085b6 <_printf_i+0x186>
 81085b0:	065f      	lsls	r7, r3, #25
 81085b2:	bf48      	it	mi
 81085b4:	b2ad      	uxthmi	r5, r5
 81085b6:	6031      	str	r1, [r6, #0]
 81085b8:	07d9      	lsls	r1, r3, #31
 81085ba:	bf44      	itt	mi
 81085bc:	f043 0320 	orrmi.w	r3, r3, #32
 81085c0:	6023      	strmi	r3, [r4, #0]
 81085c2:	b11d      	cbz	r5, 81085cc <_printf_i+0x19c>
 81085c4:	2310      	movs	r3, #16
 81085c6:	e7ad      	b.n	8108524 <_printf_i+0xf4>
 81085c8:	4826      	ldr	r0, [pc, #152]	@ (8108664 <_printf_i+0x234>)
 81085ca:	e7e9      	b.n	81085a0 <_printf_i+0x170>
 81085cc:	6823      	ldr	r3, [r4, #0]
 81085ce:	f023 0320 	bic.w	r3, r3, #32
 81085d2:	6023      	str	r3, [r4, #0]
 81085d4:	e7f6      	b.n	81085c4 <_printf_i+0x194>
 81085d6:	4616      	mov	r6, r2
 81085d8:	e7bd      	b.n	8108556 <_printf_i+0x126>
 81085da:	6833      	ldr	r3, [r6, #0]
 81085dc:	6825      	ldr	r5, [r4, #0]
 81085de:	6961      	ldr	r1, [r4, #20]
 81085e0:	1d18      	adds	r0, r3, #4
 81085e2:	6030      	str	r0, [r6, #0]
 81085e4:	062e      	lsls	r6, r5, #24
 81085e6:	681b      	ldr	r3, [r3, #0]
 81085e8:	d501      	bpl.n	81085ee <_printf_i+0x1be>
 81085ea:	6019      	str	r1, [r3, #0]
 81085ec:	e002      	b.n	81085f4 <_printf_i+0x1c4>
 81085ee:	0668      	lsls	r0, r5, #25
 81085f0:	d5fb      	bpl.n	81085ea <_printf_i+0x1ba>
 81085f2:	8019      	strh	r1, [r3, #0]
 81085f4:	2300      	movs	r3, #0
 81085f6:	6123      	str	r3, [r4, #16]
 81085f8:	4616      	mov	r6, r2
 81085fa:	e7bc      	b.n	8108576 <_printf_i+0x146>
 81085fc:	6833      	ldr	r3, [r6, #0]
 81085fe:	1d1a      	adds	r2, r3, #4
 8108600:	6032      	str	r2, [r6, #0]
 8108602:	681e      	ldr	r6, [r3, #0]
 8108604:	6862      	ldr	r2, [r4, #4]
 8108606:	2100      	movs	r1, #0
 8108608:	4630      	mov	r0, r6
 810860a:	f7f7 fe69 	bl	81002e0 <memchr>
 810860e:	b108      	cbz	r0, 8108614 <_printf_i+0x1e4>
 8108610:	1b80      	subs	r0, r0, r6
 8108612:	6060      	str	r0, [r4, #4]
 8108614:	6863      	ldr	r3, [r4, #4]
 8108616:	6123      	str	r3, [r4, #16]
 8108618:	2300      	movs	r3, #0
 810861a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810861e:	e7aa      	b.n	8108576 <_printf_i+0x146>
 8108620:	6923      	ldr	r3, [r4, #16]
 8108622:	4632      	mov	r2, r6
 8108624:	4649      	mov	r1, r9
 8108626:	4640      	mov	r0, r8
 8108628:	47d0      	blx	sl
 810862a:	3001      	adds	r0, #1
 810862c:	d0ad      	beq.n	810858a <_printf_i+0x15a>
 810862e:	6823      	ldr	r3, [r4, #0]
 8108630:	079b      	lsls	r3, r3, #30
 8108632:	d413      	bmi.n	810865c <_printf_i+0x22c>
 8108634:	68e0      	ldr	r0, [r4, #12]
 8108636:	9b03      	ldr	r3, [sp, #12]
 8108638:	4298      	cmp	r0, r3
 810863a:	bfb8      	it	lt
 810863c:	4618      	movlt	r0, r3
 810863e:	e7a6      	b.n	810858e <_printf_i+0x15e>
 8108640:	2301      	movs	r3, #1
 8108642:	4632      	mov	r2, r6
 8108644:	4649      	mov	r1, r9
 8108646:	4640      	mov	r0, r8
 8108648:	47d0      	blx	sl
 810864a:	3001      	adds	r0, #1
 810864c:	d09d      	beq.n	810858a <_printf_i+0x15a>
 810864e:	3501      	adds	r5, #1
 8108650:	68e3      	ldr	r3, [r4, #12]
 8108652:	9903      	ldr	r1, [sp, #12]
 8108654:	1a5b      	subs	r3, r3, r1
 8108656:	42ab      	cmp	r3, r5
 8108658:	dcf2      	bgt.n	8108640 <_printf_i+0x210>
 810865a:	e7eb      	b.n	8108634 <_printf_i+0x204>
 810865c:	2500      	movs	r5, #0
 810865e:	f104 0619 	add.w	r6, r4, #25
 8108662:	e7f5      	b.n	8108650 <_printf_i+0x220>
 8108664:	08108961 	.word	0x08108961
 8108668:	08108972 	.word	0x08108972

0810866c <__sflush_r>:
 810866c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8108670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108674:	0716      	lsls	r6, r2, #28
 8108676:	4605      	mov	r5, r0
 8108678:	460c      	mov	r4, r1
 810867a:	d454      	bmi.n	8108726 <__sflush_r+0xba>
 810867c:	684b      	ldr	r3, [r1, #4]
 810867e:	2b00      	cmp	r3, #0
 8108680:	dc02      	bgt.n	8108688 <__sflush_r+0x1c>
 8108682:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8108684:	2b00      	cmp	r3, #0
 8108686:	dd48      	ble.n	810871a <__sflush_r+0xae>
 8108688:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810868a:	2e00      	cmp	r6, #0
 810868c:	d045      	beq.n	810871a <__sflush_r+0xae>
 810868e:	2300      	movs	r3, #0
 8108690:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8108694:	682f      	ldr	r7, [r5, #0]
 8108696:	6a21      	ldr	r1, [r4, #32]
 8108698:	602b      	str	r3, [r5, #0]
 810869a:	d030      	beq.n	81086fe <__sflush_r+0x92>
 810869c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810869e:	89a3      	ldrh	r3, [r4, #12]
 81086a0:	0759      	lsls	r1, r3, #29
 81086a2:	d505      	bpl.n	81086b0 <__sflush_r+0x44>
 81086a4:	6863      	ldr	r3, [r4, #4]
 81086a6:	1ad2      	subs	r2, r2, r3
 81086a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81086aa:	b10b      	cbz	r3, 81086b0 <__sflush_r+0x44>
 81086ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81086ae:	1ad2      	subs	r2, r2, r3
 81086b0:	2300      	movs	r3, #0
 81086b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81086b4:	6a21      	ldr	r1, [r4, #32]
 81086b6:	4628      	mov	r0, r5
 81086b8:	47b0      	blx	r6
 81086ba:	1c43      	adds	r3, r0, #1
 81086bc:	89a3      	ldrh	r3, [r4, #12]
 81086be:	d106      	bne.n	81086ce <__sflush_r+0x62>
 81086c0:	6829      	ldr	r1, [r5, #0]
 81086c2:	291d      	cmp	r1, #29
 81086c4:	d82b      	bhi.n	810871e <__sflush_r+0xb2>
 81086c6:	4a2a      	ldr	r2, [pc, #168]	@ (8108770 <__sflush_r+0x104>)
 81086c8:	40ca      	lsrs	r2, r1
 81086ca:	07d6      	lsls	r6, r2, #31
 81086cc:	d527      	bpl.n	810871e <__sflush_r+0xb2>
 81086ce:	2200      	movs	r2, #0
 81086d0:	6062      	str	r2, [r4, #4]
 81086d2:	04d9      	lsls	r1, r3, #19
 81086d4:	6922      	ldr	r2, [r4, #16]
 81086d6:	6022      	str	r2, [r4, #0]
 81086d8:	d504      	bpl.n	81086e4 <__sflush_r+0x78>
 81086da:	1c42      	adds	r2, r0, #1
 81086dc:	d101      	bne.n	81086e2 <__sflush_r+0x76>
 81086de:	682b      	ldr	r3, [r5, #0]
 81086e0:	b903      	cbnz	r3, 81086e4 <__sflush_r+0x78>
 81086e2:	6560      	str	r0, [r4, #84]	@ 0x54
 81086e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81086e6:	602f      	str	r7, [r5, #0]
 81086e8:	b1b9      	cbz	r1, 810871a <__sflush_r+0xae>
 81086ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81086ee:	4299      	cmp	r1, r3
 81086f0:	d002      	beq.n	81086f8 <__sflush_r+0x8c>
 81086f2:	4628      	mov	r0, r5
 81086f4:	f7ff fbf4 	bl	8107ee0 <_free_r>
 81086f8:	2300      	movs	r3, #0
 81086fa:	6363      	str	r3, [r4, #52]	@ 0x34
 81086fc:	e00d      	b.n	810871a <__sflush_r+0xae>
 81086fe:	2301      	movs	r3, #1
 8108700:	4628      	mov	r0, r5
 8108702:	47b0      	blx	r6
 8108704:	4602      	mov	r2, r0
 8108706:	1c50      	adds	r0, r2, #1
 8108708:	d1c9      	bne.n	810869e <__sflush_r+0x32>
 810870a:	682b      	ldr	r3, [r5, #0]
 810870c:	2b00      	cmp	r3, #0
 810870e:	d0c6      	beq.n	810869e <__sflush_r+0x32>
 8108710:	2b1d      	cmp	r3, #29
 8108712:	d001      	beq.n	8108718 <__sflush_r+0xac>
 8108714:	2b16      	cmp	r3, #22
 8108716:	d11e      	bne.n	8108756 <__sflush_r+0xea>
 8108718:	602f      	str	r7, [r5, #0]
 810871a:	2000      	movs	r0, #0
 810871c:	e022      	b.n	8108764 <__sflush_r+0xf8>
 810871e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108722:	b21b      	sxth	r3, r3
 8108724:	e01b      	b.n	810875e <__sflush_r+0xf2>
 8108726:	690f      	ldr	r7, [r1, #16]
 8108728:	2f00      	cmp	r7, #0
 810872a:	d0f6      	beq.n	810871a <__sflush_r+0xae>
 810872c:	0793      	lsls	r3, r2, #30
 810872e:	680e      	ldr	r6, [r1, #0]
 8108730:	bf08      	it	eq
 8108732:	694b      	ldreq	r3, [r1, #20]
 8108734:	600f      	str	r7, [r1, #0]
 8108736:	bf18      	it	ne
 8108738:	2300      	movne	r3, #0
 810873a:	eba6 0807 	sub.w	r8, r6, r7
 810873e:	608b      	str	r3, [r1, #8]
 8108740:	f1b8 0f00 	cmp.w	r8, #0
 8108744:	dde9      	ble.n	810871a <__sflush_r+0xae>
 8108746:	6a21      	ldr	r1, [r4, #32]
 8108748:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810874a:	4643      	mov	r3, r8
 810874c:	463a      	mov	r2, r7
 810874e:	4628      	mov	r0, r5
 8108750:	47b0      	blx	r6
 8108752:	2800      	cmp	r0, #0
 8108754:	dc08      	bgt.n	8108768 <__sflush_r+0xfc>
 8108756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810875a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810875e:	81a3      	strh	r3, [r4, #12]
 8108760:	f04f 30ff 	mov.w	r0, #4294967295
 8108764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108768:	4407      	add	r7, r0
 810876a:	eba8 0800 	sub.w	r8, r8, r0
 810876e:	e7e7      	b.n	8108740 <__sflush_r+0xd4>
 8108770:	20400001 	.word	0x20400001

08108774 <_fflush_r>:
 8108774:	b538      	push	{r3, r4, r5, lr}
 8108776:	690b      	ldr	r3, [r1, #16]
 8108778:	4605      	mov	r5, r0
 810877a:	460c      	mov	r4, r1
 810877c:	b913      	cbnz	r3, 8108784 <_fflush_r+0x10>
 810877e:	2500      	movs	r5, #0
 8108780:	4628      	mov	r0, r5
 8108782:	bd38      	pop	{r3, r4, r5, pc}
 8108784:	b118      	cbz	r0, 810878e <_fflush_r+0x1a>
 8108786:	6a03      	ldr	r3, [r0, #32]
 8108788:	b90b      	cbnz	r3, 810878e <_fflush_r+0x1a>
 810878a:	f7ff f9a1 	bl	8107ad0 <__sinit>
 810878e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108792:	2b00      	cmp	r3, #0
 8108794:	d0f3      	beq.n	810877e <_fflush_r+0xa>
 8108796:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8108798:	07d0      	lsls	r0, r2, #31
 810879a:	d404      	bmi.n	81087a6 <_fflush_r+0x32>
 810879c:	0599      	lsls	r1, r3, #22
 810879e:	d402      	bmi.n	81087a6 <_fflush_r+0x32>
 81087a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81087a2:	f7ff fb8c 	bl	8107ebe <__retarget_lock_acquire_recursive>
 81087a6:	4628      	mov	r0, r5
 81087a8:	4621      	mov	r1, r4
 81087aa:	f7ff ff5f 	bl	810866c <__sflush_r>
 81087ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81087b0:	07da      	lsls	r2, r3, #31
 81087b2:	4605      	mov	r5, r0
 81087b4:	d4e4      	bmi.n	8108780 <_fflush_r+0xc>
 81087b6:	89a3      	ldrh	r3, [r4, #12]
 81087b8:	059b      	lsls	r3, r3, #22
 81087ba:	d4e1      	bmi.n	8108780 <_fflush_r+0xc>
 81087bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81087be:	f7ff fb7f 	bl	8107ec0 <__retarget_lock_release_recursive>
 81087c2:	e7dd      	b.n	8108780 <_fflush_r+0xc>

081087c4 <__swhatbuf_r>:
 81087c4:	b570      	push	{r4, r5, r6, lr}
 81087c6:	460c      	mov	r4, r1
 81087c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81087cc:	2900      	cmp	r1, #0
 81087ce:	b096      	sub	sp, #88	@ 0x58
 81087d0:	4615      	mov	r5, r2
 81087d2:	461e      	mov	r6, r3
 81087d4:	da0d      	bge.n	81087f2 <__swhatbuf_r+0x2e>
 81087d6:	89a3      	ldrh	r3, [r4, #12]
 81087d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 81087dc:	f04f 0100 	mov.w	r1, #0
 81087e0:	bf14      	ite	ne
 81087e2:	2340      	movne	r3, #64	@ 0x40
 81087e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 81087e8:	2000      	movs	r0, #0
 81087ea:	6031      	str	r1, [r6, #0]
 81087ec:	602b      	str	r3, [r5, #0]
 81087ee:	b016      	add	sp, #88	@ 0x58
 81087f0:	bd70      	pop	{r4, r5, r6, pc}
 81087f2:	466a      	mov	r2, sp
 81087f4:	f000 f848 	bl	8108888 <_fstat_r>
 81087f8:	2800      	cmp	r0, #0
 81087fa:	dbec      	blt.n	81087d6 <__swhatbuf_r+0x12>
 81087fc:	9901      	ldr	r1, [sp, #4]
 81087fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8108802:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8108806:	4259      	negs	r1, r3
 8108808:	4159      	adcs	r1, r3
 810880a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810880e:	e7eb      	b.n	81087e8 <__swhatbuf_r+0x24>

08108810 <__smakebuf_r>:
 8108810:	898b      	ldrh	r3, [r1, #12]
 8108812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8108814:	079d      	lsls	r5, r3, #30
 8108816:	4606      	mov	r6, r0
 8108818:	460c      	mov	r4, r1
 810881a:	d507      	bpl.n	810882c <__smakebuf_r+0x1c>
 810881c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8108820:	6023      	str	r3, [r4, #0]
 8108822:	6123      	str	r3, [r4, #16]
 8108824:	2301      	movs	r3, #1
 8108826:	6163      	str	r3, [r4, #20]
 8108828:	b003      	add	sp, #12
 810882a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810882c:	ab01      	add	r3, sp, #4
 810882e:	466a      	mov	r2, sp
 8108830:	f7ff ffc8 	bl	81087c4 <__swhatbuf_r>
 8108834:	9f00      	ldr	r7, [sp, #0]
 8108836:	4605      	mov	r5, r0
 8108838:	4639      	mov	r1, r7
 810883a:	4630      	mov	r0, r6
 810883c:	f7ff fbbc 	bl	8107fb8 <_malloc_r>
 8108840:	b948      	cbnz	r0, 8108856 <__smakebuf_r+0x46>
 8108842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108846:	059a      	lsls	r2, r3, #22
 8108848:	d4ee      	bmi.n	8108828 <__smakebuf_r+0x18>
 810884a:	f023 0303 	bic.w	r3, r3, #3
 810884e:	f043 0302 	orr.w	r3, r3, #2
 8108852:	81a3      	strh	r3, [r4, #12]
 8108854:	e7e2      	b.n	810881c <__smakebuf_r+0xc>
 8108856:	89a3      	ldrh	r3, [r4, #12]
 8108858:	6020      	str	r0, [r4, #0]
 810885a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810885e:	81a3      	strh	r3, [r4, #12]
 8108860:	9b01      	ldr	r3, [sp, #4]
 8108862:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8108866:	b15b      	cbz	r3, 8108880 <__smakebuf_r+0x70>
 8108868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810886c:	4630      	mov	r0, r6
 810886e:	f000 f81d 	bl	81088ac <_isatty_r>
 8108872:	b128      	cbz	r0, 8108880 <__smakebuf_r+0x70>
 8108874:	89a3      	ldrh	r3, [r4, #12]
 8108876:	f023 0303 	bic.w	r3, r3, #3
 810887a:	f043 0301 	orr.w	r3, r3, #1
 810887e:	81a3      	strh	r3, [r4, #12]
 8108880:	89a3      	ldrh	r3, [r4, #12]
 8108882:	431d      	orrs	r5, r3
 8108884:	81a5      	strh	r5, [r4, #12]
 8108886:	e7cf      	b.n	8108828 <__smakebuf_r+0x18>

08108888 <_fstat_r>:
 8108888:	b538      	push	{r3, r4, r5, lr}
 810888a:	4d07      	ldr	r5, [pc, #28]	@ (81088a8 <_fstat_r+0x20>)
 810888c:	2300      	movs	r3, #0
 810888e:	4604      	mov	r4, r0
 8108890:	4608      	mov	r0, r1
 8108892:	4611      	mov	r1, r2
 8108894:	602b      	str	r3, [r5, #0]
 8108896:	f7f9 fa48 	bl	8101d2a <_fstat>
 810889a:	1c43      	adds	r3, r0, #1
 810889c:	d102      	bne.n	81088a4 <_fstat_r+0x1c>
 810889e:	682b      	ldr	r3, [r5, #0]
 81088a0:	b103      	cbz	r3, 81088a4 <_fstat_r+0x1c>
 81088a2:	6023      	str	r3, [r4, #0]
 81088a4:	bd38      	pop	{r3, r4, r5, pc}
 81088a6:	bf00      	nop
 81088a8:	10000e20 	.word	0x10000e20

081088ac <_isatty_r>:
 81088ac:	b538      	push	{r3, r4, r5, lr}
 81088ae:	4d06      	ldr	r5, [pc, #24]	@ (81088c8 <_isatty_r+0x1c>)
 81088b0:	2300      	movs	r3, #0
 81088b2:	4604      	mov	r4, r0
 81088b4:	4608      	mov	r0, r1
 81088b6:	602b      	str	r3, [r5, #0]
 81088b8:	f7f9 fa47 	bl	8101d4a <_isatty>
 81088bc:	1c43      	adds	r3, r0, #1
 81088be:	d102      	bne.n	81088c6 <_isatty_r+0x1a>
 81088c0:	682b      	ldr	r3, [r5, #0]
 81088c2:	b103      	cbz	r3, 81088c6 <_isatty_r+0x1a>
 81088c4:	6023      	str	r3, [r4, #0]
 81088c6:	bd38      	pop	{r3, r4, r5, pc}
 81088c8:	10000e20 	.word	0x10000e20

081088cc <_sbrk_r>:
 81088cc:	b538      	push	{r3, r4, r5, lr}
 81088ce:	4d06      	ldr	r5, [pc, #24]	@ (81088e8 <_sbrk_r+0x1c>)
 81088d0:	2300      	movs	r3, #0
 81088d2:	4604      	mov	r4, r0
 81088d4:	4608      	mov	r0, r1
 81088d6:	602b      	str	r3, [r5, #0]
 81088d8:	f7f9 fa50 	bl	8101d7c <_sbrk>
 81088dc:	1c43      	adds	r3, r0, #1
 81088de:	d102      	bne.n	81088e6 <_sbrk_r+0x1a>
 81088e0:	682b      	ldr	r3, [r5, #0]
 81088e2:	b103      	cbz	r3, 81088e6 <_sbrk_r+0x1a>
 81088e4:	6023      	str	r3, [r4, #0]
 81088e6:	bd38      	pop	{r3, r4, r5, pc}
 81088e8:	10000e20 	.word	0x10000e20

081088ec <_init>:
 81088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81088ee:	bf00      	nop
 81088f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81088f2:	bc08      	pop	{r3}
 81088f4:	469e      	mov	lr, r3
 81088f6:	4770      	bx	lr

081088f8 <_fini>:
 81088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81088fa:	bf00      	nop
 81088fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81088fe:	bc08      	pop	{r3}
 8108900:	469e      	mov	lr, r3
 8108902:	4770      	bx	lr
