
Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a4  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08108444  08108444  00009444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081084c0  081084c0  000094c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081084c8  081084c8  000094c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  081084cc  081084cc  000094cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  10000000  081084d0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc4  1000006c  0810853c  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000e30  0810853c  0000ae30  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028de0  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fac  00000000  00000000  00032e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021e8  00000000  00000000  00037e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a53  00000000  00000000  0003a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000079e0  00000000  00000000  0003ba63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ba03  00000000  00000000  00043443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001c07dc  00000000  00000000  0006ee46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022f622  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009890  00000000  00000000  0022f668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000050  00000000  00000000  00238ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000006c 	.word	0x1000006c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810842c 	.word	0x0810842c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000070 	.word	0x10000070
 81002dc:	0810842c 	.word	0x0810842c

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__io_putchar>:

static void SyncUARTTaskHandler(void);
static int8_t LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 8100380:	b580      	push	{r7, lr}
 8100382:	b084      	sub	sp, #16
 8100384:	af00      	add	r7, sp, #0
 8100386:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8100388:	f001 fdfc 	bl	8101f84 <HAL_GetCurrentCPUID>
 810038c:	4603      	mov	r3, r0
 810038e:	2b03      	cmp	r3, #3
 8100390:	d110      	bne.n	81003b4 <__io_putchar+0x34>
  {
    RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 8100392:	4b15      	ldr	r3, [pc, #84]	@ (81003e8 <__io_putchar+0x68>)
 8100394:	681b      	ldr	r3, [r3, #0]
 8100396:	1d39      	adds	r1, r7, #4
 8100398:	2201      	movs	r2, #1
 810039a:	4618      	mov	r0, r3
 810039c:	f000 f8fa 	bl	8100594 <RingBuffWrite>
    if((char)ch == '\n')
 81003a0:	687b      	ldr	r3, [r7, #4]
 81003a2:	b2db      	uxtb	r3, r3
 81003a4:	2b0a      	cmp	r3, #10
 81003a6:	d119      	bne.n	81003dc <__io_putchar+0x5c>
    {
      LoggerWriteToUART(pCM7RingBuf);
 81003a8:	4b0f      	ldr	r3, [pc, #60]	@ (81003e8 <__io_putchar+0x68>)
 81003aa:	681b      	ldr	r3, [r3, #0]
 81003ac:	4618      	mov	r0, r3
 81003ae:	f000 f859 	bl	8100464 <LoggerWriteToUART>
 81003b2:	e013      	b.n	81003dc <__io_putchar+0x5c>
    }
  }
  else 
  {
    RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 81003b4:	4b0d      	ldr	r3, [pc, #52]	@ (81003ec <__io_putchar+0x6c>)
 81003b6:	681b      	ldr	r3, [r3, #0]
 81003b8:	1d39      	adds	r1, r7, #4
 81003ba:	2201      	movs	r2, #1
 81003bc:	4618      	mov	r0, r3
 81003be:	f000 f8e9 	bl	8100594 <RingBuffWrite>
    if((char)ch == '\n')
 81003c2:	687b      	ldr	r3, [r7, #4]
 81003c4:	b2db      	uxtb	r3, r3
 81003c6:	2b0a      	cmp	r3, #10
 81003c8:	d108      	bne.n	81003dc <__io_putchar+0x5c>
    {
      /*
      * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
      */
      uint32_t taskID = SYNC_TASKID_UART_OUT;
 81003ca:	2300      	movs	r3, #0
 81003cc:	60fb      	str	r3, [r7, #12]
      SyncMailBoxWriteNotify(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 81003ce:	f107 030c 	add.w	r3, r7, #12
 81003d2:	2204      	movs	r2, #4
 81003d4:	4619      	mov	r1, r3
 81003d6:	2000      	movs	r0, #0
 81003d8:	f000 fadc 	bl	8100994 <SyncMailBoxWriteNotify>
    }
  }
  return ch;
 81003dc:	687b      	ldr	r3, [r7, #4]
}
 81003de:	4618      	mov	r0, r3
 81003e0:	3710      	adds	r7, #16
 81003e2:	46bd      	mov	sp, r7
 81003e4:	bd80      	pop	{r7, pc}
 81003e6:	bf00      	nop
 81003e8:	1000008c 	.word	0x1000008c
 81003ec:	10000088 	.word	0x10000088

081003f0 <LoggerInit>:

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 81003f0:	b580      	push	{r7, lr}
 81003f2:	b082      	sub	sp, #8
 81003f4:	af00      	add	r7, sp, #0
 81003f6:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 81003f8:	f001 fdc4 	bl	8101f84 <HAL_GetCurrentCPUID>
 81003fc:	4603      	mov	r3, r0
 81003fe:	2b03      	cmp	r3, #3
 8100400:	d102      	bne.n	8100408 <LoggerInit+0x18>
 8100402:	687b      	ldr	r3, [r7, #4]
 8100404:	2b00      	cmp	r3, #0
 8100406:	d105      	bne.n	8100414 <LoggerInit+0x24>
  {
    pUART = NULL;
 8100408:	4b10      	ldr	r3, [pc, #64]	@ (810044c <LoggerInit+0x5c>)
 810040a:	2200      	movs	r2, #0
 810040c:	601a      	str	r2, [r3, #0]
    return -1;
 810040e:	f04f 33ff 	mov.w	r3, #4294967295
 8100412:	e017      	b.n	8100444 <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8100414:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8100418:	480d      	ldr	r0, [pc, #52]	@ (8100450 <LoggerInit+0x60>)
 810041a:	f000 f88b 	bl	8100534 <RingBuffCreate>
 810041e:	4603      	mov	r3, r0
 8100420:	4a0c      	ldr	r2, [pc, #48]	@ (8100454 <LoggerInit+0x64>)
 8100422:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8100424:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8100428:	480b      	ldr	r0, [pc, #44]	@ (8100458 <LoggerInit+0x68>)
 810042a:	f000 f883 	bl	8100534 <RingBuffCreate>
 810042e:	4603      	mov	r3, r0
 8100430:	4a0a      	ldr	r2, [pc, #40]	@ (810045c <LoggerInit+0x6c>)
 8100432:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 8100434:	4a05      	ldr	r2, [pc, #20]	@ (810044c <LoggerInit+0x5c>)
 8100436:	687b      	ldr	r3, [r7, #4]
 8100438:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 810043a:	2100      	movs	r1, #0
 810043c:	4808      	ldr	r0, [pc, #32]	@ (8100460 <LoggerInit+0x70>)
 810043e:	f000 fb01 	bl	8100a44 <SyncRegisterHandler>

  return 0;
 8100442:	2300      	movs	r3, #0
}
 8100444:	4618      	mov	r0, r3
 8100446:	3708      	adds	r7, #8
 8100448:	46bd      	mov	sp, r7
 810044a:	bd80      	pop	{r7, pc}
 810044c:	10000090 	.word	0x10000090
 8100450:	38000008 	.word	0x38000008
 8100454:	10000088 	.word	0x10000088
 8100458:	38000128 	.word	0x38000128
 810045c:	1000008c 	.word	0x1000008c
 8100460:	081004b5 	.word	0x081004b5

08100464 <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 8100464:	b580      	push	{r7, lr}
 8100466:	b084      	sub	sp, #16
 8100468:	af00      	add	r7, sp, #0
 810046a:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 810046c:	2300      	movs	r3, #0
 810046e:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 8100470:	2300      	movs	r3, #0
 8100472:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 8100474:	6878      	ldr	r0, [r7, #4]
 8100476:	f000 f9c9 	bl	810080c <RingBuffGetLinearBlockReadLength>
 810047a:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 810047c:	68fb      	ldr	r3, [r7, #12]
 810047e:	2b00      	cmp	r3, #0
 8100480:	d011      	beq.n	81004a6 <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 8100482:	6878      	ldr	r0, [r7, #4]
 8100484:	f000 f998 	bl	81007b8 <RingBuffGetLinearBlockReadAddress>
 8100488:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 810048a:	4b09      	ldr	r3, [pc, #36]	@ (81004b0 <LoggerWriteToUART+0x4c>)
 810048c:	6818      	ldr	r0, [r3, #0]
 810048e:	68fb      	ldr	r3, [r7, #12]
 8100490:	b29a      	uxth	r2, r3
 8100492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100496:	68b9      	ldr	r1, [r7, #8]
 8100498:	f006 f9a2 	bl	81067e0 <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 810049c:	68f9      	ldr	r1, [r7, #12]
 810049e:	6878      	ldr	r0, [r7, #4]
 81004a0:	f000 f9f6 	bl	8100890 <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 81004a4:	e7e6      	b.n	8100474 <LoggerWriteToUART+0x10>
  }
  return 0;
 81004a6:	2300      	movs	r3, #0
}
 81004a8:	4618      	mov	r0, r3
 81004aa:	3710      	adds	r7, #16
 81004ac:	46bd      	mov	sp, r7
 81004ae:	bd80      	pop	{r7, pc}
 81004b0:	10000090 	.word	0x10000090

081004b4 <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 81004b4:	b580      	push	{r7, lr}
 81004b6:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 81004b8:	f001 fd64 	bl	8101f84 <HAL_GetCurrentCPUID>
 81004bc:	4603      	mov	r3, r0
 81004be:	2b03      	cmp	r3, #3
 81004c0:	d104      	bne.n	81004cc <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 81004c2:	4b03      	ldr	r3, [pc, #12]	@ (81004d0 <SyncUARTTaskHandler+0x1c>)
 81004c4:	681b      	ldr	r3, [r3, #0]
 81004c6:	4618      	mov	r0, r3
 81004c8:	f7ff ffcc 	bl	8100464 <LoggerWriteToUART>
  }
 81004cc:	bf00      	nop
 81004ce:	bd80      	pop	{r7, pc}
 81004d0:	10000088 	.word	0x10000088

081004d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81004d4:	b480      	push	{r7}
 81004d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81004d8:	4b09      	ldr	r3, [pc, #36]	@ (8100500 <SystemInit+0x2c>)
 81004da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81004de:	4a08      	ldr	r2, [pc, #32]	@ (8100500 <SystemInit+0x2c>)
 81004e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81004e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81004e8:	4b05      	ldr	r3, [pc, #20]	@ (8100500 <SystemInit+0x2c>)
 81004ea:	691b      	ldr	r3, [r3, #16]
 81004ec:	4a04      	ldr	r2, [pc, #16]	@ (8100500 <SystemInit+0x2c>)
 81004ee:	f043 0310 	orr.w	r3, r3, #16
 81004f2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81004f4:	bf00      	nop
 81004f6:	46bd      	mov	sp, r7
 81004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004fc:	4770      	bx	lr
 81004fe:	bf00      	nop
 8100500:	e000ed00 	.word	0xe000ed00

08100504 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100504:	b480      	push	{r7}
 8100506:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100508:	4b09      	ldr	r3, [pc, #36]	@ (8100530 <ExitRun0Mode+0x2c>)
 810050a:	68db      	ldr	r3, [r3, #12]
 810050c:	4a08      	ldr	r2, [pc, #32]	@ (8100530 <ExitRun0Mode+0x2c>)
 810050e:	f023 0302 	bic.w	r3, r3, #2
 8100512:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100514:	bf00      	nop
 8100516:	4b06      	ldr	r3, [pc, #24]	@ (8100530 <ExitRun0Mode+0x2c>)
 8100518:	685b      	ldr	r3, [r3, #4]
 810051a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810051e:	2b00      	cmp	r3, #0
 8100520:	d0f9      	beq.n	8100516 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100522:	bf00      	nop
 8100524:	bf00      	nop
 8100526:	46bd      	mov	sp, r7
 8100528:	f85d 7b04 	ldr.w	r7, [sp], #4
 810052c:	4770      	bx	lr
 810052e:	bf00      	nop
 8100530:	58024800 	.word	0x58024800

08100534 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8100534:	b580      	push	{r7, lr}
 8100536:	b084      	sub	sp, #16
 8100538:	af00      	add	r7, sp, #0
 810053a:	6078      	str	r0, [r7, #4]
 810053c:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 810053e:	687b      	ldr	r3, [r7, #4]
 8100540:	2b00      	cmp	r3, #0
 8100542:	d005      	beq.n	8100550 <RingBuffCreate+0x1c>
 8100544:	683b      	ldr	r3, [r7, #0]
 8100546:	2b00      	cmp	r3, #0
 8100548:	d002      	beq.n	8100550 <RingBuffCreate+0x1c>
 810054a:	683b      	ldr	r3, [r7, #0]
 810054c:	2b20      	cmp	r3, #32
 810054e:	d801      	bhi.n	8100554 <RingBuffCreate+0x20>
        return NULL;
 8100550:	2300      	movs	r3, #0
 8100552:	e017      	b.n	8100584 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 8100554:	687b      	ldr	r3, [r7, #4]
 8100556:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 8100558:	2220      	movs	r2, #32
 810055a:	2100      	movs	r1, #0
 810055c:	68f8      	ldr	r0, [r7, #12]
 810055e:	f007 f9d5 	bl	810790c <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 8100562:	683b      	ldr	r3, [r7, #0]
 8100564:	f1a3 0220 	sub.w	r2, r3, #32
 8100568:	68fb      	ldr	r3, [r7, #12]
 810056a:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 810056c:	687b      	ldr	r3, [r7, #4]
 810056e:	f103 0220 	add.w	r2, r3, #32
 8100572:	68fb      	ldr	r3, [r7, #12]
 8100574:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8100576:	68fb      	ldr	r3, [r7, #12]
 8100578:	4a04      	ldr	r2, [pc, #16]	@ (810058c <RingBuffCreate+0x58>)
 810057a:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 810057c:	68fb      	ldr	r3, [r7, #12]
 810057e:	4a04      	ldr	r2, [pc, #16]	@ (8100590 <RingBuffCreate+0x5c>)
 8100580:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8100582:	68fb      	ldr	r3, [r7, #12]
}
 8100584:	4618      	mov	r0, r3
 8100586:	3710      	adds	r7, #16
 8100588:	46bd      	mov	sp, r7
 810058a:	bd80      	pop	{r7, pc}
 810058c:	deadbeef 	.word	0xdeadbeef
 8100590:	21524110 	.word	0x21524110

08100594 <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 8100594:	b580      	push	{r7, lr}
 8100596:	b088      	sub	sp, #32
 8100598:	af00      	add	r7, sp, #0
 810059a:	60f8      	str	r0, [r7, #12]
 810059c:	60b9      	str	r1, [r7, #8]
 810059e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 81005a0:	68bb      	ldr	r3, [r7, #8]
 81005a2:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 81005a4:	68fb      	ldr	r3, [r7, #12]
 81005a6:	2b00      	cmp	r3, #0
 81005a8:	d017      	beq.n	81005da <RingBuffWrite+0x46>
 81005aa:	68fb      	ldr	r3, [r7, #12]
 81005ac:	681b      	ldr	r3, [r3, #0]
 81005ae:	4a3b      	ldr	r2, [pc, #236]	@ (810069c <RingBuffWrite+0x108>)
 81005b0:	4293      	cmp	r3, r2
 81005b2:	d112      	bne.n	81005da <RingBuffWrite+0x46>
 81005b4:	68fb      	ldr	r3, [r7, #12]
 81005b6:	699b      	ldr	r3, [r3, #24]
 81005b8:	4a39      	ldr	r2, [pc, #228]	@ (81006a0 <RingBuffWrite+0x10c>)
 81005ba:	4293      	cmp	r3, r2
 81005bc:	d10d      	bne.n	81005da <RingBuffWrite+0x46>
 81005be:	68fb      	ldr	r3, [r7, #12]
 81005c0:	685b      	ldr	r3, [r3, #4]
 81005c2:	2b00      	cmp	r3, #0
 81005c4:	d009      	beq.n	81005da <RingBuffWrite+0x46>
 81005c6:	68fb      	ldr	r3, [r7, #12]
 81005c8:	689b      	ldr	r3, [r3, #8]
 81005ca:	2b00      	cmp	r3, #0
 81005cc:	d005      	beq.n	81005da <RingBuffWrite+0x46>
 81005ce:	68bb      	ldr	r3, [r7, #8]
 81005d0:	2b00      	cmp	r3, #0
 81005d2:	d002      	beq.n	81005da <RingBuffWrite+0x46>
 81005d4:	687b      	ldr	r3, [r7, #4]
 81005d6:	2b00      	cmp	r3, #0
 81005d8:	d101      	bne.n	81005de <RingBuffWrite+0x4a>
        return 0;
 81005da:	2300      	movs	r3, #0
 81005dc:	e059      	b.n	8100692 <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 81005de:	68f8      	ldr	r0, [r7, #12]
 81005e0:	f000 f860 	bl	81006a4 <RingBuffGetFree>
 81005e4:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 81005e6:	687a      	ldr	r2, [r7, #4]
 81005e8:	69bb      	ldr	r3, [r7, #24]
 81005ea:	4293      	cmp	r3, r2
 81005ec:	bf28      	it	cs
 81005ee:	4613      	movcs	r3, r2
 81005f0:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 81005f2:	687b      	ldr	r3, [r7, #4]
 81005f4:	2b00      	cmp	r3, #0
 81005f6:	d101      	bne.n	81005fc <RingBuffWrite+0x68>
        return 0;
 81005f8:	2300      	movs	r3, #0
 81005fa:	e04a      	b.n	8100692 <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 81005fc:	68fb      	ldr	r3, [r7, #12]
 81005fe:	689a      	ldr	r2, [r3, #8]
 8100600:	68fb      	ldr	r3, [r7, #12]
 8100602:	691b      	ldr	r3, [r3, #16]
 8100604:	1ad3      	subs	r3, r2, r3
 8100606:	687a      	ldr	r2, [r7, #4]
 8100608:	429a      	cmp	r2, r3
 810060a:	d905      	bls.n	8100618 <RingBuffWrite+0x84>
 810060c:	68fb      	ldr	r3, [r7, #12]
 810060e:	689a      	ldr	r2, [r3, #8]
 8100610:	68fb      	ldr	r3, [r7, #12]
 8100612:	691b      	ldr	r3, [r3, #16]
 8100614:	1ad3      	subs	r3, r2, r3
 8100616:	e000      	b.n	810061a <RingBuffWrite+0x86>
 8100618:	687b      	ldr	r3, [r7, #4]
 810061a:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 810061c:	68fb      	ldr	r3, [r7, #12]
 810061e:	685a      	ldr	r2, [r3, #4]
 8100620:	68fb      	ldr	r3, [r7, #12]
 8100622:	691b      	ldr	r3, [r3, #16]
 8100624:	4413      	add	r3, r2
 8100626:	697a      	ldr	r2, [r7, #20]
 8100628:	69f9      	ldr	r1, [r7, #28]
 810062a:	4618      	mov	r0, r3
 810062c:	f007 f9e9 	bl	8107a02 <memcpy>
    buff->w += tocopy;
 8100630:	68fb      	ldr	r3, [r7, #12]
 8100632:	691a      	ldr	r2, [r3, #16]
 8100634:	697b      	ldr	r3, [r7, #20]
 8100636:	441a      	add	r2, r3
 8100638:	68fb      	ldr	r3, [r7, #12]
 810063a:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 810063c:	687a      	ldr	r2, [r7, #4]
 810063e:	697b      	ldr	r3, [r7, #20]
 8100640:	1ad3      	subs	r3, r2, r3
 8100642:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8100644:	687b      	ldr	r3, [r7, #4]
 8100646:	2b00      	cmp	r3, #0
 8100648:	d00b      	beq.n	8100662 <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 810064a:	68fb      	ldr	r3, [r7, #12]
 810064c:	6858      	ldr	r0, [r3, #4]
 810064e:	69fa      	ldr	r2, [r7, #28]
 8100650:	697b      	ldr	r3, [r7, #20]
 8100652:	4413      	add	r3, r2
 8100654:	687a      	ldr	r2, [r7, #4]
 8100656:	4619      	mov	r1, r3
 8100658:	f007 f9d3 	bl	8107a02 <memcpy>
        buff->w = btw;
 810065c:	68fb      	ldr	r3, [r7, #12]
 810065e:	687a      	ldr	r2, [r7, #4]
 8100660:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8100662:	68fb      	ldr	r3, [r7, #12]
 8100664:	691a      	ldr	r2, [r3, #16]
 8100666:	68fb      	ldr	r3, [r7, #12]
 8100668:	689b      	ldr	r3, [r3, #8]
 810066a:	429a      	cmp	r2, r3
 810066c:	d302      	bcc.n	8100674 <RingBuffWrite+0xe0>
        buff->w = 0;
 810066e:	68fb      	ldr	r3, [r7, #12]
 8100670:	2200      	movs	r2, #0
 8100672:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8100674:	68fb      	ldr	r3, [r7, #12]
 8100676:	695b      	ldr	r3, [r3, #20]
 8100678:	2b00      	cmp	r3, #0
 810067a:	d007      	beq.n	810068c <RingBuffWrite+0xf8>
 810067c:	68fb      	ldr	r3, [r7, #12]
 810067e:	695b      	ldr	r3, [r3, #20]
 8100680:	6979      	ldr	r1, [r7, #20]
 8100682:	687a      	ldr	r2, [r7, #4]
 8100684:	440a      	add	r2, r1
 8100686:	2101      	movs	r1, #1
 8100688:	68f8      	ldr	r0, [r7, #12]
 810068a:	4798      	blx	r3
    return tocopy + btw;
 810068c:	697a      	ldr	r2, [r7, #20]
 810068e:	687b      	ldr	r3, [r7, #4]
 8100690:	4413      	add	r3, r2
}
 8100692:	4618      	mov	r0, r3
 8100694:	3720      	adds	r7, #32
 8100696:	46bd      	mov	sp, r7
 8100698:	bd80      	pop	{r7, pc}
 810069a:	bf00      	nop
 810069c:	deadbeef 	.word	0xdeadbeef
 81006a0:	21524110 	.word	0x21524110

081006a4 <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 81006a4:	b480      	push	{r7}
 81006a6:	b087      	sub	sp, #28
 81006a8:	af00      	add	r7, sp, #0
 81006aa:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 81006ac:	687b      	ldr	r3, [r7, #4]
 81006ae:	2b00      	cmp	r3, #0
 81006b0:	d011      	beq.n	81006d6 <RingBuffGetFree+0x32>
 81006b2:	687b      	ldr	r3, [r7, #4]
 81006b4:	681b      	ldr	r3, [r3, #0]
 81006b6:	4a1c      	ldr	r2, [pc, #112]	@ (8100728 <RingBuffGetFree+0x84>)
 81006b8:	4293      	cmp	r3, r2
 81006ba:	d10c      	bne.n	81006d6 <RingBuffGetFree+0x32>
 81006bc:	687b      	ldr	r3, [r7, #4]
 81006be:	699b      	ldr	r3, [r3, #24]
 81006c0:	4a1a      	ldr	r2, [pc, #104]	@ (810072c <RingBuffGetFree+0x88>)
 81006c2:	4293      	cmp	r3, r2
 81006c4:	d107      	bne.n	81006d6 <RingBuffGetFree+0x32>
 81006c6:	687b      	ldr	r3, [r7, #4]
 81006c8:	685b      	ldr	r3, [r3, #4]
 81006ca:	2b00      	cmp	r3, #0
 81006cc:	d003      	beq.n	81006d6 <RingBuffGetFree+0x32>
 81006ce:	687b      	ldr	r3, [r7, #4]
 81006d0:	689b      	ldr	r3, [r3, #8]
 81006d2:	2b00      	cmp	r3, #0
 81006d4:	d101      	bne.n	81006da <RingBuffGetFree+0x36>
        return 0;
 81006d6:	2300      	movs	r3, #0
 81006d8:	e01f      	b.n	810071a <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 81006da:	687b      	ldr	r3, [r7, #4]
 81006dc:	691b      	ldr	r3, [r3, #16]
 81006de:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81006e0:	687b      	ldr	r3, [r7, #4]
 81006e2:	68db      	ldr	r3, [r3, #12]
 81006e4:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 81006e6:	693a      	ldr	r2, [r7, #16]
 81006e8:	68fb      	ldr	r3, [r7, #12]
 81006ea:	429a      	cmp	r2, r3
 81006ec:	d103      	bne.n	81006f6 <RingBuffGetFree+0x52>
        size = buff->size;
 81006ee:	687b      	ldr	r3, [r7, #4]
 81006f0:	689b      	ldr	r3, [r3, #8]
 81006f2:	617b      	str	r3, [r7, #20]
 81006f4:	e00f      	b.n	8100716 <RingBuffGetFree+0x72>
    } else if (r > w) {
 81006f6:	68fa      	ldr	r2, [r7, #12]
 81006f8:	693b      	ldr	r3, [r7, #16]
 81006fa:	429a      	cmp	r2, r3
 81006fc:	d904      	bls.n	8100708 <RingBuffGetFree+0x64>
        size = r - w;
 81006fe:	68fa      	ldr	r2, [r7, #12]
 8100700:	693b      	ldr	r3, [r7, #16]
 8100702:	1ad3      	subs	r3, r2, r3
 8100704:	617b      	str	r3, [r7, #20]
 8100706:	e006      	b.n	8100716 <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8100708:	687b      	ldr	r3, [r7, #4]
 810070a:	689a      	ldr	r2, [r3, #8]
 810070c:	68f9      	ldr	r1, [r7, #12]
 810070e:	693b      	ldr	r3, [r7, #16]
 8100710:	1acb      	subs	r3, r1, r3
 8100712:	4413      	add	r3, r2
 8100714:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8100716:	697b      	ldr	r3, [r7, #20]
 8100718:	3b01      	subs	r3, #1
}
 810071a:	4618      	mov	r0, r3
 810071c:	371c      	adds	r7, #28
 810071e:	46bd      	mov	sp, r7
 8100720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100724:	4770      	bx	lr
 8100726:	bf00      	nop
 8100728:	deadbeef 	.word	0xdeadbeef
 810072c:	21524110 	.word	0x21524110

08100730 <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8100730:	b480      	push	{r7}
 8100732:	b087      	sub	sp, #28
 8100734:	af00      	add	r7, sp, #0
 8100736:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8100738:	687b      	ldr	r3, [r7, #4]
 810073a:	2b00      	cmp	r3, #0
 810073c:	d011      	beq.n	8100762 <RingBuffGetFull+0x32>
 810073e:	687b      	ldr	r3, [r7, #4]
 8100740:	681b      	ldr	r3, [r3, #0]
 8100742:	4a1b      	ldr	r2, [pc, #108]	@ (81007b0 <RingBuffGetFull+0x80>)
 8100744:	4293      	cmp	r3, r2
 8100746:	d10c      	bne.n	8100762 <RingBuffGetFull+0x32>
 8100748:	687b      	ldr	r3, [r7, #4]
 810074a:	699b      	ldr	r3, [r3, #24]
 810074c:	4a19      	ldr	r2, [pc, #100]	@ (81007b4 <RingBuffGetFull+0x84>)
 810074e:	4293      	cmp	r3, r2
 8100750:	d107      	bne.n	8100762 <RingBuffGetFull+0x32>
 8100752:	687b      	ldr	r3, [r7, #4]
 8100754:	685b      	ldr	r3, [r3, #4]
 8100756:	2b00      	cmp	r3, #0
 8100758:	d003      	beq.n	8100762 <RingBuffGetFull+0x32>
 810075a:	687b      	ldr	r3, [r7, #4]
 810075c:	689b      	ldr	r3, [r3, #8]
 810075e:	2b00      	cmp	r3, #0
 8100760:	d101      	bne.n	8100766 <RingBuffGetFull+0x36>
        return 0;
 8100762:	2300      	movs	r3, #0
 8100764:	e01d      	b.n	81007a2 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8100766:	687b      	ldr	r3, [r7, #4]
 8100768:	691b      	ldr	r3, [r3, #16]
 810076a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 810076c:	687b      	ldr	r3, [r7, #4]
 810076e:	68db      	ldr	r3, [r3, #12]
 8100770:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8100772:	693a      	ldr	r2, [r7, #16]
 8100774:	68fb      	ldr	r3, [r7, #12]
 8100776:	429a      	cmp	r2, r3
 8100778:	d102      	bne.n	8100780 <RingBuffGetFull+0x50>
        size = 0;
 810077a:	2300      	movs	r3, #0
 810077c:	617b      	str	r3, [r7, #20]
 810077e:	e00f      	b.n	81007a0 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8100780:	693a      	ldr	r2, [r7, #16]
 8100782:	68fb      	ldr	r3, [r7, #12]
 8100784:	429a      	cmp	r2, r3
 8100786:	d904      	bls.n	8100792 <RingBuffGetFull+0x62>
        size = w - r;
 8100788:	693a      	ldr	r2, [r7, #16]
 810078a:	68fb      	ldr	r3, [r7, #12]
 810078c:	1ad3      	subs	r3, r2, r3
 810078e:	617b      	str	r3, [r7, #20]
 8100790:	e006      	b.n	81007a0 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8100792:	687b      	ldr	r3, [r7, #4]
 8100794:	689a      	ldr	r2, [r3, #8]
 8100796:	6939      	ldr	r1, [r7, #16]
 8100798:	68fb      	ldr	r3, [r7, #12]
 810079a:	1acb      	subs	r3, r1, r3
 810079c:	4413      	add	r3, r2
 810079e:	617b      	str	r3, [r7, #20]
    }
    return size;
 81007a0:	697b      	ldr	r3, [r7, #20]
}
 81007a2:	4618      	mov	r0, r3
 81007a4:	371c      	adds	r7, #28
 81007a6:	46bd      	mov	sp, r7
 81007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007ac:	4770      	bx	lr
 81007ae:	bf00      	nop
 81007b0:	deadbeef 	.word	0xdeadbeef
 81007b4:	21524110 	.word	0x21524110

081007b8 <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 81007b8:	b480      	push	{r7}
 81007ba:	b083      	sub	sp, #12
 81007bc:	af00      	add	r7, sp, #0
 81007be:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 81007c0:	687b      	ldr	r3, [r7, #4]
 81007c2:	2b00      	cmp	r3, #0
 81007c4:	d011      	beq.n	81007ea <RingBuffGetLinearBlockReadAddress+0x32>
 81007c6:	687b      	ldr	r3, [r7, #4]
 81007c8:	681b      	ldr	r3, [r3, #0]
 81007ca:	4a0e      	ldr	r2, [pc, #56]	@ (8100804 <RingBuffGetLinearBlockReadAddress+0x4c>)
 81007cc:	4293      	cmp	r3, r2
 81007ce:	d10c      	bne.n	81007ea <RingBuffGetLinearBlockReadAddress+0x32>
 81007d0:	687b      	ldr	r3, [r7, #4]
 81007d2:	699b      	ldr	r3, [r3, #24]
 81007d4:	4a0c      	ldr	r2, [pc, #48]	@ (8100808 <RingBuffGetLinearBlockReadAddress+0x50>)
 81007d6:	4293      	cmp	r3, r2
 81007d8:	d107      	bne.n	81007ea <RingBuffGetLinearBlockReadAddress+0x32>
 81007da:	687b      	ldr	r3, [r7, #4]
 81007dc:	685b      	ldr	r3, [r3, #4]
 81007de:	2b00      	cmp	r3, #0
 81007e0:	d003      	beq.n	81007ea <RingBuffGetLinearBlockReadAddress+0x32>
 81007e2:	687b      	ldr	r3, [r7, #4]
 81007e4:	689b      	ldr	r3, [r3, #8]
 81007e6:	2b00      	cmp	r3, #0
 81007e8:	d101      	bne.n	81007ee <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 81007ea:	2300      	movs	r3, #0
 81007ec:	e004      	b.n	81007f8 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 81007ee:	687b      	ldr	r3, [r7, #4]
 81007f0:	685a      	ldr	r2, [r3, #4]
 81007f2:	687b      	ldr	r3, [r7, #4]
 81007f4:	68db      	ldr	r3, [r3, #12]
 81007f6:	4413      	add	r3, r2
}
 81007f8:	4618      	mov	r0, r3
 81007fa:	370c      	adds	r7, #12
 81007fc:	46bd      	mov	sp, r7
 81007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100802:	4770      	bx	lr
 8100804:	deadbeef 	.word	0xdeadbeef
 8100808:	21524110 	.word	0x21524110

0810080c <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 810080c:	b480      	push	{r7}
 810080e:	b087      	sub	sp, #28
 8100810:	af00      	add	r7, sp, #0
 8100812:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8100814:	687b      	ldr	r3, [r7, #4]
 8100816:	2b00      	cmp	r3, #0
 8100818:	d011      	beq.n	810083e <RingBuffGetLinearBlockReadLength+0x32>
 810081a:	687b      	ldr	r3, [r7, #4]
 810081c:	681b      	ldr	r3, [r3, #0]
 810081e:	4a1a      	ldr	r2, [pc, #104]	@ (8100888 <RingBuffGetLinearBlockReadLength+0x7c>)
 8100820:	4293      	cmp	r3, r2
 8100822:	d10c      	bne.n	810083e <RingBuffGetLinearBlockReadLength+0x32>
 8100824:	687b      	ldr	r3, [r7, #4]
 8100826:	699b      	ldr	r3, [r3, #24]
 8100828:	4a18      	ldr	r2, [pc, #96]	@ (810088c <RingBuffGetLinearBlockReadLength+0x80>)
 810082a:	4293      	cmp	r3, r2
 810082c:	d107      	bne.n	810083e <RingBuffGetLinearBlockReadLength+0x32>
 810082e:	687b      	ldr	r3, [r7, #4]
 8100830:	685b      	ldr	r3, [r3, #4]
 8100832:	2b00      	cmp	r3, #0
 8100834:	d003      	beq.n	810083e <RingBuffGetLinearBlockReadLength+0x32>
 8100836:	687b      	ldr	r3, [r7, #4]
 8100838:	689b      	ldr	r3, [r3, #8]
 810083a:	2b00      	cmp	r3, #0
 810083c:	d101      	bne.n	8100842 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 810083e:	2300      	movs	r3, #0
 8100840:	e01b      	b.n	810087a <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8100842:	687b      	ldr	r3, [r7, #4]
 8100844:	691b      	ldr	r3, [r3, #16]
 8100846:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100848:	687b      	ldr	r3, [r7, #4]
 810084a:	68db      	ldr	r3, [r3, #12]
 810084c:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 810084e:	693a      	ldr	r2, [r7, #16]
 8100850:	68fb      	ldr	r3, [r7, #12]
 8100852:	429a      	cmp	r2, r3
 8100854:	d904      	bls.n	8100860 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8100856:	693a      	ldr	r2, [r7, #16]
 8100858:	68fb      	ldr	r3, [r7, #12]
 810085a:	1ad3      	subs	r3, r2, r3
 810085c:	617b      	str	r3, [r7, #20]
 810085e:	e00b      	b.n	8100878 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8100860:	68fa      	ldr	r2, [r7, #12]
 8100862:	693b      	ldr	r3, [r7, #16]
 8100864:	429a      	cmp	r2, r3
 8100866:	d905      	bls.n	8100874 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8100868:	687b      	ldr	r3, [r7, #4]
 810086a:	689a      	ldr	r2, [r3, #8]
 810086c:	68fb      	ldr	r3, [r7, #12]
 810086e:	1ad3      	subs	r3, r2, r3
 8100870:	617b      	str	r3, [r7, #20]
 8100872:	e001      	b.n	8100878 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8100874:	2300      	movs	r3, #0
 8100876:	617b      	str	r3, [r7, #20]
    }
    return len;
 8100878:	697b      	ldr	r3, [r7, #20]
}
 810087a:	4618      	mov	r0, r3
 810087c:	371c      	adds	r7, #28
 810087e:	46bd      	mov	sp, r7
 8100880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100884:	4770      	bx	lr
 8100886:	bf00      	nop
 8100888:	deadbeef 	.word	0xdeadbeef
 810088c:	21524110 	.word	0x21524110

08100890 <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8100890:	b580      	push	{r7, lr}
 8100892:	b084      	sub	sp, #16
 8100894:	af00      	add	r7, sp, #0
 8100896:	6078      	str	r0, [r7, #4]
 8100898:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 810089a:	687b      	ldr	r3, [r7, #4]
 810089c:	2b00      	cmp	r3, #0
 810089e:	d014      	beq.n	81008ca <RingBuffSkip+0x3a>
 81008a0:	687b      	ldr	r3, [r7, #4]
 81008a2:	681b      	ldr	r3, [r3, #0]
 81008a4:	4a20      	ldr	r2, [pc, #128]	@ (8100928 <RingBuffSkip+0x98>)
 81008a6:	4293      	cmp	r3, r2
 81008a8:	d10f      	bne.n	81008ca <RingBuffSkip+0x3a>
 81008aa:	687b      	ldr	r3, [r7, #4]
 81008ac:	699b      	ldr	r3, [r3, #24]
 81008ae:	4a1f      	ldr	r2, [pc, #124]	@ (810092c <RingBuffSkip+0x9c>)
 81008b0:	4293      	cmp	r3, r2
 81008b2:	d10a      	bne.n	81008ca <RingBuffSkip+0x3a>
 81008b4:	687b      	ldr	r3, [r7, #4]
 81008b6:	685b      	ldr	r3, [r3, #4]
 81008b8:	2b00      	cmp	r3, #0
 81008ba:	d006      	beq.n	81008ca <RingBuffSkip+0x3a>
 81008bc:	687b      	ldr	r3, [r7, #4]
 81008be:	689b      	ldr	r3, [r3, #8]
 81008c0:	2b00      	cmp	r3, #0
 81008c2:	d002      	beq.n	81008ca <RingBuffSkip+0x3a>
 81008c4:	683b      	ldr	r3, [r7, #0]
 81008c6:	2b00      	cmp	r3, #0
 81008c8:	d101      	bne.n	81008ce <RingBuffSkip+0x3e>
        return 0;
 81008ca:	2300      	movs	r3, #0
 81008cc:	e027      	b.n	810091e <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 81008ce:	6878      	ldr	r0, [r7, #4]
 81008d0:	f7ff ff2e 	bl	8100730 <RingBuffGetFull>
 81008d4:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 81008d6:	683a      	ldr	r2, [r7, #0]
 81008d8:	68fb      	ldr	r3, [r7, #12]
 81008da:	4293      	cmp	r3, r2
 81008dc:	bf28      	it	cs
 81008de:	4613      	movcs	r3, r2
 81008e0:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 81008e2:	687b      	ldr	r3, [r7, #4]
 81008e4:	68da      	ldr	r2, [r3, #12]
 81008e6:	683b      	ldr	r3, [r7, #0]
 81008e8:	441a      	add	r2, r3
 81008ea:	687b      	ldr	r3, [r7, #4]
 81008ec:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 81008ee:	687b      	ldr	r3, [r7, #4]
 81008f0:	68da      	ldr	r2, [r3, #12]
 81008f2:	687b      	ldr	r3, [r7, #4]
 81008f4:	689b      	ldr	r3, [r3, #8]
 81008f6:	429a      	cmp	r2, r3
 81008f8:	d306      	bcc.n	8100908 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 81008fa:	687b      	ldr	r3, [r7, #4]
 81008fc:	689b      	ldr	r3, [r3, #8]
 81008fe:	687a      	ldr	r2, [r7, #4]
 8100900:	68d2      	ldr	r2, [r2, #12]
 8100902:	1ad2      	subs	r2, r2, r3
 8100904:	687b      	ldr	r3, [r7, #4]
 8100906:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8100908:	687b      	ldr	r3, [r7, #4]
 810090a:	695b      	ldr	r3, [r3, #20]
 810090c:	2b00      	cmp	r3, #0
 810090e:	d005      	beq.n	810091c <RingBuffSkip+0x8c>
 8100910:	687b      	ldr	r3, [r7, #4]
 8100912:	695b      	ldr	r3, [r3, #20]
 8100914:	683a      	ldr	r2, [r7, #0]
 8100916:	2100      	movs	r1, #0
 8100918:	6878      	ldr	r0, [r7, #4]
 810091a:	4798      	blx	r3
    return len;
 810091c:	683b      	ldr	r3, [r7, #0]
}
 810091e:	4618      	mov	r0, r3
 8100920:	3710      	adds	r7, #16
 8100922:	46bd      	mov	sp, r7
 8100924:	bd80      	pop	{r7, pc}
 8100926:	bf00      	nop
 8100928:	deadbeef 	.word	0xdeadbeef
 810092c:	21524110 	.word	0x21524110

08100930 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8100930:	b480      	push	{r7}
 8100932:	b085      	sub	sp, #20
 8100934:	af00      	add	r7, sp, #0
 8100936:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8100938:	2300      	movs	r3, #0
 810093a:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 810093c:	687b      	ldr	r3, [r7, #4]
 810093e:	2b01      	cmp	r3, #1
 8100940:	d103      	bne.n	810094a <SyncMailBoxGet+0x1a>
 8100942:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8100946:	60fb      	str	r3, [r7, #12]
 8100948:	e001      	b.n	810094e <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 810094a:	4b04      	ldr	r3, [pc, #16]	@ (810095c <SyncMailBoxGet+0x2c>)
 810094c:	60fb      	str	r3, [r7, #12]
    return pMB;
 810094e:	68fb      	ldr	r3, [r7, #12]
}
 8100950:	4618      	mov	r0, r3
 8100952:	3714      	adds	r7, #20
 8100954:	46bd      	mov	sp, r7
 8100956:	f85d 7b04 	ldr.w	r7, [sp], #4
 810095a:	4770      	bx	lr
 810095c:	38000004 	.word	0x38000004

08100960 <SyncMailBoxWrite>:

int8_t SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8100960:	b580      	push	{r7, lr}
 8100962:	b086      	sub	sp, #24
 8100964:	af00      	add	r7, sp, #0
 8100966:	60f8      	str	r0, [r7, #12]
 8100968:	60b9      	str	r1, [r7, #8]
 810096a:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 810096c:	687b      	ldr	r3, [r7, #4]
 810096e:	2b04      	cmp	r3, #4
 8100970:	d902      	bls.n	8100978 <SyncMailBoxWrite+0x18>
 8100972:	f04f 33ff 	mov.w	r3, #4294967295
 8100976:	e009      	b.n	810098c <SyncMailBoxWrite+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8100978:	68f8      	ldr	r0, [r7, #12]
 810097a:	f7ff ffd9 	bl	8100930 <SyncMailBoxGet>
 810097e:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 8100980:	687a      	ldr	r2, [r7, #4]
 8100982:	68b9      	ldr	r1, [r7, #8]
 8100984:	6978      	ldr	r0, [r7, #20]
 8100986:	f007 f83c 	bl	8107a02 <memcpy>
    return 0;
 810098a:	2300      	movs	r3, #0
}
 810098c:	4618      	mov	r0, r3
 810098e:	3718      	adds	r7, #24
 8100990:	46bd      	mov	sp, r7
 8100992:	bd80      	pop	{r7, pc}

08100994 <SyncMailBoxWriteNotify>:

int8_t SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8100994:	b580      	push	{r7, lr}
 8100996:	b086      	sub	sp, #24
 8100998:	af00      	add	r7, sp, #0
 810099a:	60f8      	str	r0, [r7, #12]
 810099c:	60b9      	str	r1, [r7, #8]
 810099e:	607a      	str	r2, [r7, #4]
    int8_t status = SyncMailBoxWrite(mbID, pBuffer, len);
 81009a0:	687a      	ldr	r2, [r7, #4]
 81009a2:	68b9      	ldr	r1, [r7, #8]
 81009a4:	68f8      	ldr	r0, [r7, #12]
 81009a6:	f7ff ffdb 	bl	8100960 <SyncMailBoxWrite>
 81009aa:	4603      	mov	r3, r0
 81009ac:	75fb      	strb	r3, [r7, #23]
    if(status < 0) return status;
 81009ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 81009b2:	2b00      	cmp	r3, #0
 81009b4:	da02      	bge.n	81009bc <SyncMailBoxWriteNotify+0x28>
 81009b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 81009ba:	e003      	b.n	81009c4 <SyncMailBoxWriteNotify+0x30>
    asm volatile ("dsb");
 81009bc:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 81009c0:	bf40      	sev
    return 0;
 81009c2:	2300      	movs	r3, #0
}
 81009c4:	4618      	mov	r0, r3
 81009c6:	3718      	adds	r7, #24
 81009c8:	46bd      	mov	sp, r7
 81009ca:	bd80      	pop	{r7, pc}

081009cc <SyncMailBoxRead>:

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 81009cc:	b580      	push	{r7, lr}
 81009ce:	b086      	sub	sp, #24
 81009d0:	af00      	add	r7, sp, #0
 81009d2:	60f8      	str	r0, [r7, #12]
 81009d4:	60b9      	str	r1, [r7, #8]
 81009d6:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 81009d8:	687b      	ldr	r3, [r7, #4]
 81009da:	2b04      	cmp	r3, #4
 81009dc:	d902      	bls.n	81009e4 <SyncMailBoxRead+0x18>
 81009de:	f04f 33ff 	mov.w	r3, #4294967295
 81009e2:	e009      	b.n	81009f8 <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 81009e4:	68f8      	ldr	r0, [r7, #12]
 81009e6:	f7ff ffa3 	bl	8100930 <SyncMailBoxGet>
 81009ea:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 81009ec:	687a      	ldr	r2, [r7, #4]
 81009ee:	6979      	ldr	r1, [r7, #20]
 81009f0:	68b8      	ldr	r0, [r7, #8]
 81009f2:	f007 f806 	bl	8107a02 <memcpy>
    return 0;
 81009f6:	2300      	movs	r3, #0
}
 81009f8:	4618      	mov	r0, r3
 81009fa:	3718      	adds	r7, #24
 81009fc:	46bd      	mov	sp, r7
 81009fe:	bd80      	pop	{r7, pc}

08100a00 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8100a00:	b480      	push	{r7}
 8100a02:	b083      	sub	sp, #12
 8100a04:	af00      	add	r7, sp, #0
 8100a06:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8100a08:	687b      	ldr	r3, [r7, #4]
 8100a0a:	2b02      	cmp	r3, #2
 8100a0c:	d901      	bls.n	8100a12 <SyncGetTaskHandler+0x12>
 8100a0e:	2300      	movs	r3, #0
 8100a10:	e003      	b.n	8100a1a <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8100a12:	4a05      	ldr	r2, [pc, #20]	@ (8100a28 <SyncGetTaskHandler+0x28>)
 8100a14:	687b      	ldr	r3, [r7, #4]
 8100a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8100a1a:	4618      	mov	r0, r3
 8100a1c:	370c      	adds	r7, #12
 8100a1e:	46bd      	mov	sp, r7
 8100a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a24:	4770      	bx	lr
 8100a26:	bf00      	nop
 8100a28:	10000094 	.word	0x10000094

08100a2c <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8100a2c:	b580      	push	{r7, lr}
 8100a2e:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8100a30:	2208      	movs	r2, #8
 8100a32:	2100      	movs	r1, #0
 8100a34:	4802      	ldr	r0, [pc, #8]	@ (8100a40 <SyncInit+0x14>)
 8100a36:	f006 ff69 	bl	810790c <memset>
    return 0;
 8100a3a:	2300      	movs	r3, #0
}
 8100a3c:	4618      	mov	r0, r3
 8100a3e:	bd80      	pop	{r7, pc}
 8100a40:	10000094 	.word	0x10000094

08100a44 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8100a44:	b480      	push	{r7}
 8100a46:	b083      	sub	sp, #12
 8100a48:	af00      	add	r7, sp, #0
 8100a4a:	6078      	str	r0, [r7, #4]
 8100a4c:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8100a4e:	683b      	ldr	r3, [r7, #0]
 8100a50:	2b02      	cmp	r3, #2
 8100a52:	d902      	bls.n	8100a5a <SyncRegisterHandler+0x16>
 8100a54:	f04f 33ff 	mov.w	r3, #4294967295
 8100a58:	e005      	b.n	8100a66 <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 8100a5a:	4906      	ldr	r1, [pc, #24]	@ (8100a74 <SyncRegisterHandler+0x30>)
 8100a5c:	683b      	ldr	r3, [r7, #0]
 8100a5e:	687a      	ldr	r2, [r7, #4]
 8100a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 8100a64:	2300      	movs	r3, #0
}
 8100a66:	4618      	mov	r0, r3
 8100a68:	370c      	adds	r7, #12
 8100a6a:	46bd      	mov	sp, r7
 8100a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a70:	4770      	bx	lr
 8100a72:	bf00      	nop
 8100a74:	10000094 	.word	0x10000094

08100a78 <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 8100a78:	b580      	push	{r7, lr}
 8100a7a:	b082      	sub	sp, #8
 8100a7c:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8100a7e:	2300      	movs	r3, #0
 8100a80:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8100a82:	463b      	mov	r3, r7
 8100a84:	2204      	movs	r2, #4
 8100a86:	4619      	mov	r1, r3
 8100a88:	2000      	movs	r0, #0
 8100a8a:	f7ff ff9f 	bl	81009cc <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8100a8e:	683b      	ldr	r3, [r7, #0]
 8100a90:	4618      	mov	r0, r3
 8100a92:	f7ff ffb5 	bl	8100a00 <SyncGetTaskHandler>
 8100a96:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8100a98:	687b      	ldr	r3, [r7, #4]
 8100a9a:	2b00      	cmp	r3, #0
 8100a9c:	d001      	beq.n	8100aa2 <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 8100a9e:	687b      	ldr	r3, [r7, #4]
 8100aa0:	4798      	blx	r3
    }
}
 8100aa2:	bf00      	nop
 8100aa4:	3708      	adds	r7, #8
 8100aa6:	46bd      	mov	sp, r7
 8100aa8:	bd80      	pop	{r7, pc}

08100aaa <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 8100aaa:	b580      	push	{r7, lr}
 8100aac:	b082      	sub	sp, #8
 8100aae:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 8100ab0:	2300      	movs	r3, #0
 8100ab2:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8100ab4:	463b      	mov	r3, r7
 8100ab6:	2204      	movs	r2, #4
 8100ab8:	4619      	mov	r1, r3
 8100aba:	2001      	movs	r0, #1
 8100abc:	f7ff ff86 	bl	81009cc <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8100ac0:	683b      	ldr	r3, [r7, #0]
 8100ac2:	4618      	mov	r0, r3
 8100ac4:	f7ff ff9c 	bl	8100a00 <SyncGetTaskHandler>
 8100ac8:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8100aca:	687b      	ldr	r3, [r7, #4]
 8100acc:	2b00      	cmp	r3, #0
 8100ace:	d001      	beq.n	8100ad4 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 8100ad0:	687b      	ldr	r3, [r7, #4]
 8100ad2:	4798      	blx	r3
    }
 8100ad4:	bf00      	nop
 8100ad6:	3708      	adds	r7, #8
 8100ad8:	46bd      	mov	sp, r7
 8100ada:	bd80      	pop	{r7, pc}

08100adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100adc:	b580      	push	{r7, lr}
 8100ade:	b082      	sub	sp, #8
 8100ae0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8100b94 <main+0xb8>)
 8100ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8100b94 <main+0xb8>)
 8100aea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100af2:	4b28      	ldr	r3, [pc, #160]	@ (8100b94 <main+0xb8>)
 8100af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100afc:	607b      	str	r3, [r7, #4]
 8100afe:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b00:	2001      	movs	r0, #1
 8100b02:	f001 fc01 	bl	8102308 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100b06:	f001 fdbb 	bl	8102680 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100b0a:	2201      	movs	r2, #1
 8100b0c:	2102      	movs	r1, #2
 8100b0e:	2000      	movs	r0, #0
 8100b10:	f001 fd3c 	bl	810258c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b14:	4b20      	ldr	r3, [pc, #128]	@ (8100b98 <main+0xbc>)
 8100b16:	681b      	ldr	r3, [r3, #0]
 8100b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100b1c:	2b70      	cmp	r3, #112	@ 0x70
 8100b1e:	d108      	bne.n	8100b32 <main+0x56>
 8100b20:	4b1e      	ldr	r3, [pc, #120]	@ (8100b9c <main+0xc0>)
 8100b22:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100b26:	4a1d      	ldr	r2, [pc, #116]	@ (8100b9c <main+0xc0>)
 8100b28:	f043 0301 	orr.w	r3, r3, #1
 8100b2c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100b30:	e007      	b.n	8100b42 <main+0x66>
 8100b32:	4b1a      	ldr	r3, [pc, #104]	@ (8100b9c <main+0xc0>)
 8100b34:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100b38:	4a18      	ldr	r2, [pc, #96]	@ (8100b9c <main+0xc0>)
 8100b3a:	f043 0301 	orr.w	r3, r3, #1
 8100b3e:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100b42:	f000 ff33 	bl	81019ac <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_HDMI_CEC_Init();
 8100b46:	f000 f835 	bl	8100bb4 <MX_HDMI_CEC_Init>
  MX_RTC_Init();
 8100b4a:	f000 f867 	bl	8100c1c <MX_RTC_Init>
  MX_SAI1_Init();
 8100b4e:	f000 f8b3 	bl	8100cb8 <MX_SAI1_Init>
  MX_SPDIFRX1_Init();
 8100b52:	f000 f953 	bl	8100dfc <MX_SPDIFRX1_Init>
  MX_SPI5_Init();
 8100b56:	f000 f989 	bl	8100e6c <MX_SPI5_Init>
  MX_USB_OTG_HS_PCD_Init();
 8100b5a:	f000 f9db 	bl	8100f14 <MX_USB_OTG_HS_PCD_Init>
//     (void*) NULL,                     /* Pointer to tasks arguments (parameter) */
//     tskIDLE_PRIORITY + 2UL,           /* Task priority*/
//     NULL                              /* Task handle */
// );

  LoggerInit(NULL);
 8100b5e:	2000      	movs	r0, #0
 8100b60:	f7ff fc46 	bl	81003f0 <LoggerInit>
  SyncInit();
 8100b64:	f7ff ff62 	bl	8100a2c <SyncInit>

  while (1)
  {
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	  HAL_Delay(1000);
 8100b68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100b6c:	f000 ff9c 	bl	8101aa8 <HAL_Delay>
	  LOG_INFO("Hello from CM4");
 8100b70:	480b      	ldr	r0, [pc, #44]	@ (8100ba0 <main+0xc4>)
 8100b72:	f006 fd83 	bl	810767c <iprintf>
 8100b76:	480b      	ldr	r0, [pc, #44]	@ (8100ba4 <main+0xc8>)
 8100b78:	f006 fd80 	bl	810767c <iprintf>
 8100b7c:	21a5      	movs	r1, #165	@ 0xa5
 8100b7e:	480a      	ldr	r0, [pc, #40]	@ (8100ba8 <main+0xcc>)
 8100b80:	f006 fd7c 	bl	810767c <iprintf>
 8100b84:	4809      	ldr	r0, [pc, #36]	@ (8100bac <main+0xd0>)
 8100b86:	f006 fd79 	bl	810767c <iprintf>
 8100b8a:	4809      	ldr	r0, [pc, #36]	@ (8100bb0 <main+0xd4>)
 8100b8c:	f006 fdde 	bl	810774c <puts>
	  HAL_Delay(1000);
 8100b90:	bf00      	nop
 8100b92:	e7e9      	b.n	8100b68 <main+0x8c>
 8100b94:	58024400 	.word	0x58024400
 8100b98:	e000ed00 	.word	0xe000ed00
 8100b9c:	58026400 	.word	0x58026400
 8100ba0:	08108444 	.word	0x08108444
 8100ba4:	08108450 	.word	0x08108450
 8100ba8:	08108464 	.word	0x08108464
 8100bac:	08108468 	.word	0x08108468
 8100bb0:	08108478 	.word	0x08108478

08100bb4 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100bb4:	b580      	push	{r7, lr}
 8100bb6:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100bb8:	4b15      	ldr	r3, [pc, #84]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bba:	4a16      	ldr	r2, [pc, #88]	@ (8100c14 <MX_HDMI_CEC_Init+0x60>)
 8100bbc:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100bbe:	4b14      	ldr	r3, [pc, #80]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bc0:	2200      	movs	r2, #0
 8100bc2:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100bc4:	4b12      	ldr	r3, [pc, #72]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bc6:	2200      	movs	r2, #0
 8100bc8:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100bca:	4b11      	ldr	r3, [pc, #68]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bcc:	2210      	movs	r2, #16
 8100bce:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bd2:	2200      	movs	r2, #0
 8100bd4:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bd8:	2200      	movs	r2, #0
 8100bda:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bde:	2200      	movs	r2, #0
 8100be0:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100be2:	4b0b      	ldr	r3, [pc, #44]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100be4:	2200      	movs	r2, #0
 8100be6:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100be8:	4b09      	ldr	r3, [pc, #36]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8100bee:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100bf0:	4b07      	ldr	r3, [pc, #28]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bf2:	2200      	movs	r2, #0
 8100bf4:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100bf6:	4b06      	ldr	r3, [pc, #24]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bf8:	4a07      	ldr	r2, [pc, #28]	@ (8100c18 <MX_HDMI_CEC_Init+0x64>)
 8100bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100bfc:	4804      	ldr	r0, [pc, #16]	@ (8100c10 <MX_HDMI_CEC_Init+0x5c>)
 8100bfe:	f000 ff83 	bl	8101b08 <HAL_CEC_Init>
 8100c02:	4603      	mov	r3, r0
 8100c04:	2b00      	cmp	r3, #0
 8100c06:	d001      	beq.n	8100c0c <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100c08:	f000 f9c8 	bl	8100f9c <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100c0c:	bf00      	nop
 8100c0e:	bd80      	pop	{r7, pc}
 8100c10:	1000009c 	.word	0x1000009c
 8100c14:	40006c00 	.word	0x40006c00
 8100c18:	100007f0 	.word	0x100007f0

08100c1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100c1c:	b580      	push	{r7, lr}
 8100c1e:	b08a      	sub	sp, #40	@ 0x28
 8100c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100c22:	463b      	mov	r3, r7
 8100c24:	2228      	movs	r2, #40	@ 0x28
 8100c26:	2100      	movs	r1, #0
 8100c28:	4618      	mov	r0, r3
 8100c2a:	f006 fe6f 	bl	810790c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100c2e:	4b20      	ldr	r3, [pc, #128]	@ (8100cb0 <MX_RTC_Init+0x94>)
 8100c30:	4a20      	ldr	r2, [pc, #128]	@ (8100cb4 <MX_RTC_Init+0x98>)
 8100c32:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100c34:	4b1e      	ldr	r3, [pc, #120]	@ (8100cb0 <MX_RTC_Init+0x94>)
 8100c36:	2200      	movs	r2, #0
 8100c38:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8100cb0 <MX_RTC_Init+0x94>)
 8100c3c:	227f      	movs	r2, #127	@ 0x7f
 8100c3e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100c40:	4b1b      	ldr	r3, [pc, #108]	@ (8100cb0 <MX_RTC_Init+0x94>)
 8100c42:	22ff      	movs	r2, #255	@ 0xff
 8100c44:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100c46:	4b1a      	ldr	r3, [pc, #104]	@ (8100cb0 <MX_RTC_Init+0x94>)
 8100c48:	2200      	movs	r2, #0
 8100c4a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100c4c:	4b18      	ldr	r3, [pc, #96]	@ (8100cb0 <MX_RTC_Init+0x94>)
 8100c4e:	2200      	movs	r2, #0
 8100c50:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100c52:	4b17      	ldr	r3, [pc, #92]	@ (8100cb0 <MX_RTC_Init+0x94>)
 8100c54:	2200      	movs	r2, #0
 8100c56:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100c58:	4b15      	ldr	r3, [pc, #84]	@ (8100cb0 <MX_RTC_Init+0x94>)
 8100c5a:	2200      	movs	r2, #0
 8100c5c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100c5e:	4814      	ldr	r0, [pc, #80]	@ (8100cb0 <MX_RTC_Init+0x94>)
 8100c60:	f004 fc6e 	bl	8105540 <HAL_RTC_Init>
 8100c64:	4603      	mov	r3, r0
 8100c66:	2b00      	cmp	r3, #0
 8100c68:	d001      	beq.n	8100c6e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100c6a:	f000 f997 	bl	8100f9c <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100c6e:	2301      	movs	r3, #1
 8100c70:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100c72:	2301      	movs	r3, #1
 8100c74:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100c76:	2300      	movs	r3, #0
 8100c78:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100c7a:	2300      	movs	r3, #0
 8100c7c:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100c7e:	2300      	movs	r3, #0
 8100c80:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100c82:	2300      	movs	r3, #0
 8100c84:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100c86:	2300      	movs	r3, #0
 8100c88:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100c8a:	2300      	movs	r3, #0
 8100c8c:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100c8e:	2380      	movs	r3, #128	@ 0x80
 8100c90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100c92:	463b      	mov	r3, r7
 8100c94:	4619      	mov	r1, r3
 8100c96:	4806      	ldr	r0, [pc, #24]	@ (8100cb0 <MX_RTC_Init+0x94>)
 8100c98:	f004 fd6a 	bl	8105770 <HAL_RTCEx_SetTamper>
 8100c9c:	4603      	mov	r3, r0
 8100c9e:	2b00      	cmp	r3, #0
 8100ca0:	d001      	beq.n	8100ca6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100ca2:	f000 f97b 	bl	8100f9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100ca6:	bf00      	nop
 8100ca8:	3728      	adds	r7, #40	@ 0x28
 8100caa:	46bd      	mov	sp, r7
 8100cac:	bd80      	pop	{r7, pc}
 8100cae:	bf00      	nop
 8100cb0:	100000e0 	.word	0x100000e0
 8100cb4:	58004000 	.word	0x58004000

08100cb8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100cb8:	b580      	push	{r7, lr}
 8100cba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100cbe:	4a4b      	ldr	r2, [pc, #300]	@ (8100dec <MX_SAI1_Init+0x134>)
 8100cc0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100cc2:	4b49      	ldr	r3, [pc, #292]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100cc4:	2200      	movs	r2, #0
 8100cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100cc8:	4b47      	ldr	r3, [pc, #284]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100cca:	2200      	movs	r2, #0
 8100ccc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100cce:	4b46      	ldr	r3, [pc, #280]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100cd0:	2240      	movs	r2, #64	@ 0x40
 8100cd2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100cd4:	4b44      	ldr	r3, [pc, #272]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100cd6:	2200      	movs	r2, #0
 8100cd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100cda:	4b43      	ldr	r3, [pc, #268]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100cdc:	2200      	movs	r2, #0
 8100cde:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100ce0:	4b41      	ldr	r3, [pc, #260]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100ce2:	2200      	movs	r2, #0
 8100ce4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100ce6:	4b40      	ldr	r3, [pc, #256]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100ce8:	2200      	movs	r2, #0
 8100cea:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100cec:	4b3e      	ldr	r3, [pc, #248]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100cee:	2200      	movs	r2, #0
 8100cf0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100cf4:	2200      	movs	r2, #0
 8100cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100cfa:	2200      	movs	r2, #0
 8100cfc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d00:	4a3b      	ldr	r2, [pc, #236]	@ (8100df0 <MX_SAI1_Init+0x138>)
 8100d02:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100d04:	4b38      	ldr	r3, [pc, #224]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d06:	2200      	movs	r2, #0
 8100d08:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100d0a:	4b37      	ldr	r3, [pc, #220]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d0c:	2200      	movs	r2, #0
 8100d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100d10:	4b35      	ldr	r3, [pc, #212]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d12:	2200      	movs	r2, #0
 8100d14:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100d16:	4b34      	ldr	r3, [pc, #208]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d18:	2200      	movs	r2, #0
 8100d1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100d1c:	4b32      	ldr	r3, [pc, #200]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d1e:	2200      	movs	r2, #0
 8100d20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100d24:	4b30      	ldr	r3, [pc, #192]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d26:	2201      	movs	r2, #1
 8100d28:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100d32:	4b2d      	ldr	r3, [pc, #180]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d34:	2208      	movs	r2, #8
 8100d36:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100d38:	4b2b      	ldr	r3, [pc, #172]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d3a:	2201      	movs	r2, #1
 8100d3c:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d40:	2200      	movs	r2, #0
 8100d42:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100d44:	4b28      	ldr	r3, [pc, #160]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d46:	2200      	movs	r2, #0
 8100d48:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100d4a:	4b27      	ldr	r3, [pc, #156]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d4c:	2200      	movs	r2, #0
 8100d4e:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100d50:	4b25      	ldr	r3, [pc, #148]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d52:	2200      	movs	r2, #0
 8100d54:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100d56:	4b24      	ldr	r3, [pc, #144]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d58:	2200      	movs	r2, #0
 8100d5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100d5c:	4b22      	ldr	r3, [pc, #136]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d5e:	2201      	movs	r2, #1
 8100d60:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100d62:	4b21      	ldr	r3, [pc, #132]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d64:	2200      	movs	r2, #0
 8100d66:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100d68:	481f      	ldr	r0, [pc, #124]	@ (8100de8 <MX_SAI1_Init+0x130>)
 8100d6a:	f004 fde1 	bl	8105930 <HAL_SAI_Init>
 8100d6e:	4603      	mov	r3, r0
 8100d70:	2b00      	cmp	r3, #0
 8100d72:	d001      	beq.n	8100d78 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8100d74:	f000 f912 	bl	8100f9c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100d78:	4b1e      	ldr	r3, [pc, #120]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8100df8 <MX_SAI1_Init+0x140>)
 8100d7c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100d80:	2204      	movs	r2, #4
 8100d82:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100d84:	4b1b      	ldr	r3, [pc, #108]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100d86:	2200      	movs	r2, #0
 8100d88:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100d8c:	2200      	movs	r2, #0
 8100d8e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100d90:	4b18      	ldr	r3, [pc, #96]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100d92:	2200      	movs	r2, #0
 8100d94:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100d96:	4b17      	ldr	r3, [pc, #92]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100d98:	2200      	movs	r2, #0
 8100d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100d9c:	4b15      	ldr	r3, [pc, #84]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100d9e:	2200      	movs	r2, #0
 8100da0:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100da2:	4b14      	ldr	r3, [pc, #80]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100da4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100da8:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100daa:	4b12      	ldr	r3, [pc, #72]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100dac:	2200      	movs	r2, #0
 8100dae:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100db0:	4b10      	ldr	r3, [pc, #64]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100db2:	2200      	movs	r2, #0
 8100db4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100db6:	4b0f      	ldr	r3, [pc, #60]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100db8:	2200      	movs	r2, #0
 8100dba:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100dbe:	2200      	movs	r2, #0
 8100dc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100dc6:	2201      	movs	r2, #1
 8100dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100dca:	4b0a      	ldr	r3, [pc, #40]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100dcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100dd0:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100dd2:	4808      	ldr	r0, [pc, #32]	@ (8100df4 <MX_SAI1_Init+0x13c>)
 8100dd4:	f004 fdac 	bl	8105930 <HAL_SAI_Init>
 8100dd8:	4603      	mov	r3, r0
 8100dda:	2b00      	cmp	r3, #0
 8100ddc:	d001      	beq.n	8100de2 <MX_SAI1_Init+0x12a>
  {
    Error_Handler();
 8100dde:	f000 f8dd 	bl	8100f9c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100de2:	bf00      	nop
 8100de4:	bd80      	pop	{r7, pc}
 8100de6:	bf00      	nop
 8100de8:	10000104 	.word	0x10000104
 8100dec:	40015804 	.word	0x40015804
 8100df0:	0002ee00 	.word	0x0002ee00
 8100df4:	1000019c 	.word	0x1000019c
 8100df8:	40015824 	.word	0x40015824

08100dfc <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100dfc:	b580      	push	{r7, lr}
 8100dfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100e00:	4b19      	ldr	r3, [pc, #100]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e02:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100e06:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100e08:	4b17      	ldr	r3, [pc, #92]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e0a:	2200      	movs	r2, #0
 8100e0c:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100e0e:	4b16      	ldr	r3, [pc, #88]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e10:	2200      	movs	r2, #0
 8100e12:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100e14:	4b14      	ldr	r3, [pc, #80]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e16:	2200      	movs	r2, #0
 8100e18:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100e1a:	4b13      	ldr	r3, [pc, #76]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e1c:	2200      	movs	r2, #0
 8100e1e:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100e20:	4b11      	ldr	r3, [pc, #68]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e22:	2200      	movs	r2, #0
 8100e24:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100e26:	4b10      	ldr	r3, [pc, #64]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e28:	2200      	movs	r2, #0
 8100e2a:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e2e:	2200      	movs	r2, #0
 8100e30:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100e32:	4b0d      	ldr	r3, [pc, #52]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e34:	2200      	movs	r2, #0
 8100e36:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100e38:	4b0b      	ldr	r3, [pc, #44]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e3a:	2200      	movs	r2, #0
 8100e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e40:	2200      	movs	r2, #0
 8100e42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100e44:	4b08      	ldr	r3, [pc, #32]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e46:	2200      	movs	r2, #0
 8100e48:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100e4c:	4b06      	ldr	r3, [pc, #24]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e4e:	2200      	movs	r2, #0
 8100e50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100e54:	4804      	ldr	r0, [pc, #16]	@ (8100e68 <MX_SPDIFRX1_Init+0x6c>)
 8100e56:	f005 f84f 	bl	8105ef8 <HAL_SPDIFRX_Init>
 8100e5a:	4603      	mov	r3, r0
 8100e5c:	2b00      	cmp	r3, #0
 8100e5e:	d001      	beq.n	8100e64 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100e60:	f000 f89c 	bl	8100f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100e64:	bf00      	nop
 8100e66:	bd80      	pop	{r7, pc}
 8100e68:	10000234 	.word	0x10000234

08100e6c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100e6c:	b580      	push	{r7, lr}
 8100e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100e70:	4b26      	ldr	r3, [pc, #152]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100e72:	4a27      	ldr	r2, [pc, #156]	@ (8100f10 <MX_SPI5_Init+0xa4>)
 8100e74:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100e76:	4b25      	ldr	r3, [pc, #148]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100e78:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100e7c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100e7e:	4b23      	ldr	r3, [pc, #140]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100e80:	2200      	movs	r2, #0
 8100e82:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100e84:	4b21      	ldr	r3, [pc, #132]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100e86:	2203      	movs	r2, #3
 8100e88:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100e8a:	4b20      	ldr	r3, [pc, #128]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100e8c:	2200      	movs	r2, #0
 8100e8e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100e90:	4b1e      	ldr	r3, [pc, #120]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100e92:	2200      	movs	r2, #0
 8100e94:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100e96:	4b1d      	ldr	r3, [pc, #116]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100e98:	2200      	movs	r2, #0
 8100e9a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100e9e:	2200      	movs	r2, #0
 8100ea0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100ea4:	2200      	movs	r2, #0
 8100ea6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100ea8:	4b18      	ldr	r3, [pc, #96]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100eaa:	2200      	movs	r2, #0
 8100eac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100eae:	4b17      	ldr	r3, [pc, #92]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100eb0:	2200      	movs	r2, #0
 8100eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100eb4:	4b15      	ldr	r3, [pc, #84]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100eb6:	2200      	movs	r2, #0
 8100eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100eba:	4b14      	ldr	r3, [pc, #80]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100ebc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100ec0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100ec2:	4b12      	ldr	r3, [pc, #72]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100ec4:	2200      	movs	r2, #0
 8100ec6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100ec8:	4b10      	ldr	r3, [pc, #64]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100eca:	2200      	movs	r2, #0
 8100ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100ece:	4b0f      	ldr	r3, [pc, #60]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100ed0:	2200      	movs	r2, #0
 8100ed2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100ed6:	2200      	movs	r2, #0
 8100ed8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100eda:	4b0c      	ldr	r3, [pc, #48]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100edc:	2200      	movs	r2, #0
 8100ede:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100ee2:	2200      	movs	r2, #0
 8100ee4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100ee6:	4b09      	ldr	r3, [pc, #36]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100ee8:	2200      	movs	r2, #0
 8100eea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100eec:	4b07      	ldr	r3, [pc, #28]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100eee:	2200      	movs	r2, #0
 8100ef0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100ef2:	4b06      	ldr	r3, [pc, #24]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100ef4:	2200      	movs	r2, #0
 8100ef6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100ef8:	4804      	ldr	r0, [pc, #16]	@ (8100f0c <MX_SPI5_Init+0xa0>)
 8100efa:	f005 f86b 	bl	8105fd4 <HAL_SPI_Init>
 8100efe:	4603      	mov	r3, r0
 8100f00:	2b00      	cmp	r3, #0
 8100f02:	d001      	beq.n	8100f08 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100f04:	f000 f84a 	bl	8100f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100f08:	bf00      	nop
 8100f0a:	bd80      	pop	{r7, pc}
 8100f0c:	10000284 	.word	0x10000284
 8100f10:	40015000 	.word	0x40015000

08100f14 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8100f14:	b580      	push	{r7, lr}
 8100f16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8100f18:	4b15      	ldr	r3, [pc, #84]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f1a:	4a16      	ldr	r2, [pc, #88]	@ (8100f74 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8100f1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8100f1e:	4b14      	ldr	r3, [pc, #80]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f20:	2209      	movs	r2, #9
 8100f22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8100f24:	4b12      	ldr	r3, [pc, #72]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f26:	2200      	movs	r2, #0
 8100f28:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8100f2a:	4b11      	ldr	r3, [pc, #68]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f2c:	2200      	movs	r2, #0
 8100f2e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8100f30:	4b0f      	ldr	r3, [pc, #60]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f32:	2201      	movs	r2, #1
 8100f34:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8100f36:	4b0e      	ldr	r3, [pc, #56]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f38:	2200      	movs	r2, #0
 8100f3a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8100f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f3e:	2200      	movs	r2, #0
 8100f40:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8100f42:	4b0b      	ldr	r3, [pc, #44]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f44:	2200      	movs	r2, #0
 8100f46:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8100f48:	4b09      	ldr	r3, [pc, #36]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f4a:	2200      	movs	r2, #0
 8100f4c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8100f4e:	4b08      	ldr	r3, [pc, #32]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f50:	2200      	movs	r2, #0
 8100f52:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8100f54:	4b06      	ldr	r3, [pc, #24]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f56:	2200      	movs	r2, #0
 8100f58:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8100f5a:	4805      	ldr	r0, [pc, #20]	@ (8100f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f5c:	f001 f9e6 	bl	810232c <HAL_PCD_Init>
 8100f60:	4603      	mov	r3, r0
 8100f62:	2b00      	cmp	r3, #0
 8100f64:	d001      	beq.n	8100f6a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8100f66:	f000 f819 	bl	8100f9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8100f6a:	bf00      	nop
 8100f6c:	bd80      	pop	{r7, pc}
 8100f6e:	bf00      	nop
 8100f70:	1000030c 	.word	0x1000030c
 8100f74:	40040000 	.word	0x40040000

08100f78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100f78:	b580      	push	{r7, lr}
 8100f7a:	b082      	sub	sp, #8
 8100f7c:	af00      	add	r7, sp, #0
 8100f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8100f80:	687b      	ldr	r3, [r7, #4]
 8100f82:	681b      	ldr	r3, [r3, #0]
 8100f84:	4a04      	ldr	r2, [pc, #16]	@ (8100f98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100f86:	4293      	cmp	r3, r2
 8100f88:	d101      	bne.n	8100f8e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8100f8a:	f000 fd6d 	bl	8101a68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100f8e:	bf00      	nop
 8100f90:	3708      	adds	r7, #8
 8100f92:	46bd      	mov	sp, r7
 8100f94:	bd80      	pop	{r7, pc}
 8100f96:	bf00      	nop
 8100f98:	40000400 	.word	0x40000400

08100f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100f9c:	b480      	push	{r7}
 8100f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100fa0:	b672      	cpsid	i
}
 8100fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100fa4:	bf00      	nop
 8100fa6:	e7fd      	b.n	8100fa4 <Error_Handler+0x8>

08100fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100fa8:	b580      	push	{r7, lr}
 8100faa:	b082      	sub	sp, #8
 8100fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100fae:	4b10      	ldr	r3, [pc, #64]	@ (8100ff0 <HAL_MspInit+0x48>)
 8100fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8100ff0 <HAL_MspInit+0x48>)
 8100fb6:	f043 0302 	orr.w	r3, r3, #2
 8100fba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8100ff0 <HAL_MspInit+0x48>)
 8100fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100fc4:	f003 0302 	and.w	r3, r3, #2
 8100fc8:	607b      	str	r3, [r7, #4]
 8100fca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100fcc:	2200      	movs	r2, #0
 8100fce:	210f      	movs	r1, #15
 8100fd0:	f06f 0001 	mvn.w	r0, #1
 8100fd4:	f000 ffae 	bl	8101f34 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 8100fd8:	2200      	movs	r2, #0
 8100fda:	2105      	movs	r1, #5
 8100fdc:	2040      	movs	r0, #64	@ 0x40
 8100fde:	f000 ffa9 	bl	8101f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8100fe2:	2040      	movs	r0, #64	@ 0x40
 8100fe4:	f000 ffc0 	bl	8101f68 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100fe8:	bf00      	nop
 8100fea:	3708      	adds	r7, #8
 8100fec:	46bd      	mov	sp, r7
 8100fee:	bd80      	pop	{r7, pc}
 8100ff0:	58024400 	.word	0x58024400

08100ff4 <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8100ff4:	b580      	push	{r7, lr}
 8100ff6:	b0bc      	sub	sp, #240	@ 0xf0
 8100ff8:	af00      	add	r7, sp, #0
 8100ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ffc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101000:	2200      	movs	r2, #0
 8101002:	601a      	str	r2, [r3, #0]
 8101004:	605a      	str	r2, [r3, #4]
 8101006:	609a      	str	r2, [r3, #8]
 8101008:	60da      	str	r2, [r3, #12]
 810100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810100c:	f107 0310 	add.w	r3, r7, #16
 8101010:	22c8      	movs	r2, #200	@ 0xc8
 8101012:	2100      	movs	r1, #0
 8101014:	4618      	mov	r0, r3
 8101016:	f006 fc79 	bl	810790c <memset>
  if(hcec->Instance==CEC)
 810101a:	687b      	ldr	r3, [r7, #4]
 810101c:	681b      	ldr	r3, [r3, #0]
 810101e:	4a2b      	ldr	r2, [pc, #172]	@ (81010cc <HAL_CEC_MspInit+0xd8>)
 8101020:	4293      	cmp	r3, r2
 8101022:	d14e      	bne.n	81010c2 <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8101024:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8101028:	f04f 0300 	mov.w	r3, #0
 810102c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8101030:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8101034:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101038:	f107 0310 	add.w	r3, r7, #16
 810103c:	4618      	mov	r0, r3
 810103e:	f001 fd41 	bl	8102ac4 <HAL_RCCEx_PeriphCLKConfig>
 8101042:	4603      	mov	r3, r0
 8101044:	2b00      	cmp	r3, #0
 8101046:	d001      	beq.n	810104c <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 8101048:	f7ff ffa8 	bl	8100f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 810104c:	4b20      	ldr	r3, [pc, #128]	@ (81010d0 <HAL_CEC_MspInit+0xdc>)
 810104e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101052:	4a1f      	ldr	r2, [pc, #124]	@ (81010d0 <HAL_CEC_MspInit+0xdc>)
 8101054:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8101058:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810105c:	4b1c      	ldr	r3, [pc, #112]	@ (81010d0 <HAL_CEC_MspInit+0xdc>)
 810105e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101062:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8101066:	60fb      	str	r3, [r7, #12]
 8101068:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810106a:	4b19      	ldr	r3, [pc, #100]	@ (81010d0 <HAL_CEC_MspInit+0xdc>)
 810106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101070:	4a17      	ldr	r2, [pc, #92]	@ (81010d0 <HAL_CEC_MspInit+0xdc>)
 8101072:	f043 0302 	orr.w	r3, r3, #2
 8101076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810107a:	4b15      	ldr	r3, [pc, #84]	@ (81010d0 <HAL_CEC_MspInit+0xdc>)
 810107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101080:	f003 0302 	and.w	r3, r3, #2
 8101084:	60bb      	str	r3, [r7, #8]
 8101086:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8101088:	2340      	movs	r3, #64	@ 0x40
 810108a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810108e:	2312      	movs	r3, #18
 8101090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101094:	2300      	movs	r3, #0
 8101096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810109a:	2300      	movs	r3, #0
 810109c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 81010a0:	2305      	movs	r3, #5
 81010a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 81010a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81010aa:	4619      	mov	r1, r3
 81010ac:	4809      	ldr	r0, [pc, #36]	@ (81010d4 <HAL_CEC_MspInit+0xe0>)
 81010ae:	f000 ff7b 	bl	8101fa8 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 81010b2:	2200      	movs	r2, #0
 81010b4:	2105      	movs	r1, #5
 81010b6:	205e      	movs	r0, #94	@ 0x5e
 81010b8:	f000 ff3c 	bl	8101f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 81010bc:	205e      	movs	r0, #94	@ 0x5e
 81010be:	f000 ff53 	bl	8101f68 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 81010c2:	bf00      	nop
 81010c4:	37f0      	adds	r7, #240	@ 0xf0
 81010c6:	46bd      	mov	sp, r7
 81010c8:	bd80      	pop	{r7, pc}
 81010ca:	bf00      	nop
 81010cc:	40006c00 	.word	0x40006c00
 81010d0:	58024400 	.word	0x58024400
 81010d4:	58020400 	.word	0x58020400

081010d8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 81010d8:	b580      	push	{r7, lr}
 81010da:	b0b4      	sub	sp, #208	@ 0xd0
 81010dc:	af00      	add	r7, sp, #0
 81010de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81010e0:	f107 0308 	add.w	r3, r7, #8
 81010e4:	22c8      	movs	r2, #200	@ 0xc8
 81010e6:	2100      	movs	r1, #0
 81010e8:	4618      	mov	r0, r3
 81010ea:	f006 fc0f 	bl	810790c <memset>
  if(hrtc->Instance==RTC)
 81010ee:	687b      	ldr	r3, [r7, #4]
 81010f0:	681b      	ldr	r3, [r3, #0]
 81010f2:	4a10      	ldr	r2, [pc, #64]	@ (8101134 <HAL_RTC_MspInit+0x5c>)
 81010f4:	4293      	cmp	r3, r2
 81010f6:	d119      	bne.n	810112c <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 81010f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 81010fc:	f04f 0300 	mov.w	r3, #0
 8101100:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8101104:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810110c:	f107 0308 	add.w	r3, r7, #8
 8101110:	4618      	mov	r0, r3
 8101112:	f001 fcd7 	bl	8102ac4 <HAL_RCCEx_PeriphCLKConfig>
 8101116:	4603      	mov	r3, r0
 8101118:	2b00      	cmp	r3, #0
 810111a:	d001      	beq.n	8101120 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 810111c:	f7ff ff3e 	bl	8100f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101120:	4b05      	ldr	r3, [pc, #20]	@ (8101138 <HAL_RTC_MspInit+0x60>)
 8101122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101124:	4a04      	ldr	r2, [pc, #16]	@ (8101138 <HAL_RTC_MspInit+0x60>)
 8101126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810112a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 810112c:	bf00      	nop
 810112e:	37d0      	adds	r7, #208	@ 0xd0
 8101130:	46bd      	mov	sp, r7
 8101132:	bd80      	pop	{r7, pc}
 8101134:	58004000 	.word	0x58004000
 8101138:	58024400 	.word	0x58024400

0810113c <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 810113c:	b580      	push	{r7, lr}
 810113e:	b0bc      	sub	sp, #240	@ 0xf0
 8101140:	af00      	add	r7, sp, #0
 8101142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101144:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101148:	2200      	movs	r2, #0
 810114a:	601a      	str	r2, [r3, #0]
 810114c:	605a      	str	r2, [r3, #4]
 810114e:	609a      	str	r2, [r3, #8]
 8101150:	60da      	str	r2, [r3, #12]
 8101152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101154:	f107 0310 	add.w	r3, r7, #16
 8101158:	22c8      	movs	r2, #200	@ 0xc8
 810115a:	2100      	movs	r1, #0
 810115c:	4618      	mov	r0, r3
 810115e:	f006 fbd5 	bl	810790c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101162:	687b      	ldr	r3, [r7, #4]
 8101164:	681b      	ldr	r3, [r3, #0]
 8101166:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 810116a:	d144      	bne.n	81011f6 <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 810116c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8101170:	f04f 0300 	mov.w	r3, #0
 8101174:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8101178:	2300      	movs	r3, #0
 810117a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810117c:	f107 0310 	add.w	r3, r7, #16
 8101180:	4618      	mov	r0, r3
 8101182:	f001 fc9f 	bl	8102ac4 <HAL_RCCEx_PeriphCLKConfig>
 8101186:	4603      	mov	r3, r0
 8101188:	2b00      	cmp	r3, #0
 810118a:	d001      	beq.n	8101190 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 810118c:	f7ff ff06 	bl	8100f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101190:	4b1b      	ldr	r3, [pc, #108]	@ (8101200 <HAL_SPDIFRX_MspInit+0xc4>)
 8101192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101196:	4a1a      	ldr	r2, [pc, #104]	@ (8101200 <HAL_SPDIFRX_MspInit+0xc4>)
 8101198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810119c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81011a0:	4b17      	ldr	r3, [pc, #92]	@ (8101200 <HAL_SPDIFRX_MspInit+0xc4>)
 81011a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81011a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81011aa:	60fb      	str	r3, [r7, #12]
 81011ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81011ae:	4b14      	ldr	r3, [pc, #80]	@ (8101200 <HAL_SPDIFRX_MspInit+0xc4>)
 81011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011b4:	4a12      	ldr	r2, [pc, #72]	@ (8101200 <HAL_SPDIFRX_MspInit+0xc4>)
 81011b6:	f043 0308 	orr.w	r3, r3, #8
 81011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011be:	4b10      	ldr	r3, [pc, #64]	@ (8101200 <HAL_SPDIFRX_MspInit+0xc4>)
 81011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011c4:	f003 0308 	and.w	r3, r3, #8
 81011c8:	60bb      	str	r3, [r7, #8]
 81011ca:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 81011cc:	2380      	movs	r3, #128	@ 0x80
 81011ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011d2:	2302      	movs	r3, #2
 81011d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011d8:	2300      	movs	r3, #0
 81011da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011de:	2300      	movs	r3, #0
 81011e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 81011e4:	2309      	movs	r3, #9
 81011e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 81011ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81011ee:	4619      	mov	r1, r3
 81011f0:	4804      	ldr	r0, [pc, #16]	@ (8101204 <HAL_SPDIFRX_MspInit+0xc8>)
 81011f2:	f000 fed9 	bl	8101fa8 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 81011f6:	bf00      	nop
 81011f8:	37f0      	adds	r7, #240	@ 0xf0
 81011fa:	46bd      	mov	sp, r7
 81011fc:	bd80      	pop	{r7, pc}
 81011fe:	bf00      	nop
 8101200:	58024400 	.word	0x58024400
 8101204:	58020c00 	.word	0x58020c00

08101208 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101208:	b580      	push	{r7, lr}
 810120a:	b0be      	sub	sp, #248	@ 0xf8
 810120c:	af00      	add	r7, sp, #0
 810120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101210:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101214:	2200      	movs	r2, #0
 8101216:	601a      	str	r2, [r3, #0]
 8101218:	605a      	str	r2, [r3, #4]
 810121a:	609a      	str	r2, [r3, #8]
 810121c:	60da      	str	r2, [r3, #12]
 810121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101220:	f107 0318 	add.w	r3, r7, #24
 8101224:	22c8      	movs	r2, #200	@ 0xc8
 8101226:	2100      	movs	r1, #0
 8101228:	4618      	mov	r0, r3
 810122a:	f006 fb6f 	bl	810790c <memset>
  if(hspi->Instance==SPI5)
 810122e:	687b      	ldr	r3, [r7, #4]
 8101230:	681b      	ldr	r3, [r3, #0]
 8101232:	4a39      	ldr	r2, [pc, #228]	@ (8101318 <HAL_SPI_MspInit+0x110>)
 8101234:	4293      	cmp	r3, r2
 8101236:	d16a      	bne.n	810130e <HAL_SPI_MspInit+0x106>

    /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101238:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 810123c:	f04f 0300 	mov.w	r3, #0
 8101240:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101244:	2300      	movs	r3, #0
 8101246:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810124a:	f107 0318 	add.w	r3, r7, #24
 810124e:	4618      	mov	r0, r3
 8101250:	f001 fc38 	bl	8102ac4 <HAL_RCCEx_PeriphCLKConfig>
 8101254:	4603      	mov	r3, r0
 8101256:	2b00      	cmp	r3, #0
 8101258:	d001      	beq.n	810125e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 810125a:	f7ff fe9f 	bl	8100f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 810125e:	4b2f      	ldr	r3, [pc, #188]	@ (810131c <HAL_SPI_MspInit+0x114>)
 8101260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101264:	4a2d      	ldr	r2, [pc, #180]	@ (810131c <HAL_SPI_MspInit+0x114>)
 8101266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810126a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810126e:	4b2b      	ldr	r3, [pc, #172]	@ (810131c <HAL_SPI_MspInit+0x114>)
 8101270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101274:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101278:	617b      	str	r3, [r7, #20]
 810127a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 810127c:	4b27      	ldr	r3, [pc, #156]	@ (810131c <HAL_SPI_MspInit+0x114>)
 810127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101282:	4a26      	ldr	r2, [pc, #152]	@ (810131c <HAL_SPI_MspInit+0x114>)
 8101284:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101288:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810128c:	4b23      	ldr	r3, [pc, #140]	@ (810131c <HAL_SPI_MspInit+0x114>)
 810128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101296:	613b      	str	r3, [r7, #16]
 8101298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 810129a:	4b20      	ldr	r3, [pc, #128]	@ (810131c <HAL_SPI_MspInit+0x114>)
 810129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012a0:	4a1e      	ldr	r2, [pc, #120]	@ (810131c <HAL_SPI_MspInit+0x114>)
 81012a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012aa:	4b1c      	ldr	r3, [pc, #112]	@ (810131c <HAL_SPI_MspInit+0x114>)
 81012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81012b4:	60fb      	str	r3, [r7, #12]
 81012b6:	68fb      	ldr	r3, [r7, #12]
    PK0     ------> SPI5_SCK
    PK1     ------> SPI5_NSS
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 81012b8:	2303      	movs	r3, #3
 81012ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012be:	2302      	movs	r3, #2
 81012c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012c4:	2300      	movs	r3, #0
 81012c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012ca:	2300      	movs	r3, #0
 81012cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 81012d0:	2305      	movs	r3, #5
 81012d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 81012d6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81012da:	4619      	mov	r1, r3
 81012dc:	4810      	ldr	r0, [pc, #64]	@ (8101320 <HAL_SPI_MspInit+0x118>)
 81012de:	f000 fe63 	bl	8101fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 81012e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 81012e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012ea:	2302      	movs	r3, #2
 81012ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012f0:	2300      	movs	r3, #0
 81012f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012f6:	2300      	movs	r3, #0
 81012f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 81012fc:	2305      	movs	r3, #5
 81012fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101302:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101306:	4619      	mov	r1, r3
 8101308:	4806      	ldr	r0, [pc, #24]	@ (8101324 <HAL_SPI_MspInit+0x11c>)
 810130a:	f000 fe4d 	bl	8101fa8 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 810130e:	bf00      	nop
 8101310:	37f8      	adds	r7, #248	@ 0xf8
 8101312:	46bd      	mov	sp, r7
 8101314:	bd80      	pop	{r7, pc}
 8101316:	bf00      	nop
 8101318:	40015000 	.word	0x40015000
 810131c:	58024400 	.word	0x58024400
 8101320:	58022800 	.word	0x58022800
 8101324:	58022400 	.word	0x58022400

08101328 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8101328:	b580      	push	{r7, lr}
 810132a:	b0c2      	sub	sp, #264	@ 0x108
 810132c:	af00      	add	r7, sp, #0
 810132e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8101336:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101338:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810133c:	2200      	movs	r2, #0
 810133e:	601a      	str	r2, [r3, #0]
 8101340:	605a      	str	r2, [r3, #4]
 8101342:	609a      	str	r2, [r3, #8]
 8101344:	60da      	str	r2, [r3, #12]
 8101346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101348:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810134c:	22c8      	movs	r2, #200	@ 0xc8
 810134e:	2100      	movs	r1, #0
 8101350:	4618      	mov	r0, r3
 8101352:	f006 fadb 	bl	810790c <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8101356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 810135a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 810135e:	681b      	ldr	r3, [r3, #0]
 8101360:	681b      	ldr	r3, [r3, #0]
 8101362:	4a79      	ldr	r2, [pc, #484]	@ (8101548 <HAL_PCD_MspInit+0x220>)
 8101364:	4293      	cmp	r3, r2
 8101366:	f040 80ea 	bne.w	810153e <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 810136a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 810136e:	f04f 0300 	mov.w	r3, #0
 8101372:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8101376:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810137a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810137e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101382:	4618      	mov	r0, r3
 8101384:	f001 fb9e 	bl	8102ac4 <HAL_RCCEx_PeriphCLKConfig>
 8101388:	4603      	mov	r3, r0
 810138a:	2b00      	cmp	r3, #0
 810138c:	d001      	beq.n	8101392 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 810138e:	f7ff fe05 	bl	8100f9c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8101392:	f001 f983 	bl	810269c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101396:	4b6d      	ldr	r3, [pc, #436]	@ (810154c <HAL_PCD_MspInit+0x224>)
 8101398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810139c:	4a6b      	ldr	r2, [pc, #428]	@ (810154c <HAL_PCD_MspInit+0x224>)
 810139e:	f043 0302 	orr.w	r3, r3, #2
 81013a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013a6:	4b69      	ldr	r3, [pc, #420]	@ (810154c <HAL_PCD_MspInit+0x224>)
 81013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013ac:	f003 0302 	and.w	r3, r3, #2
 81013b0:	627b      	str	r3, [r7, #36]	@ 0x24
 81013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 81013b4:	4b65      	ldr	r3, [pc, #404]	@ (810154c <HAL_PCD_MspInit+0x224>)
 81013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013ba:	4a64      	ldr	r2, [pc, #400]	@ (810154c <HAL_PCD_MspInit+0x224>)
 81013bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013c4:	4b61      	ldr	r3, [pc, #388]	@ (810154c <HAL_PCD_MspInit+0x224>)
 81013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81013ce:	623b      	str	r3, [r7, #32]
 81013d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81013d2:	4b5e      	ldr	r3, [pc, #376]	@ (810154c <HAL_PCD_MspInit+0x224>)
 81013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013d8:	4a5c      	ldr	r2, [pc, #368]	@ (810154c <HAL_PCD_MspInit+0x224>)
 81013da:	f043 0304 	orr.w	r3, r3, #4
 81013de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013e2:	4b5a      	ldr	r3, [pc, #360]	@ (810154c <HAL_PCD_MspInit+0x224>)
 81013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013e8:	f003 0304 	and.w	r3, r3, #4
 81013ec:	61fb      	str	r3, [r7, #28]
 81013ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81013f0:	4b56      	ldr	r3, [pc, #344]	@ (810154c <HAL_PCD_MspInit+0x224>)
 81013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013f6:	4a55      	ldr	r2, [pc, #340]	@ (810154c <HAL_PCD_MspInit+0x224>)
 81013f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101400:	4b52      	ldr	r3, [pc, #328]	@ (810154c <HAL_PCD_MspInit+0x224>)
 8101402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810140a:	61bb      	str	r3, [r7, #24]
 810140c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810140e:	4b4f      	ldr	r3, [pc, #316]	@ (810154c <HAL_PCD_MspInit+0x224>)
 8101410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101414:	4a4d      	ldr	r2, [pc, #308]	@ (810154c <HAL_PCD_MspInit+0x224>)
 8101416:	f043 0301 	orr.w	r3, r3, #1
 810141a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810141e:	4b4b      	ldr	r3, [pc, #300]	@ (810154c <HAL_PCD_MspInit+0x224>)
 8101420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101424:	f003 0301 	and.w	r3, r3, #1
 8101428:	617b      	str	r3, [r7, #20]
 810142a:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 810142c:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8101430:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101434:	2302      	movs	r3, #2
 8101436:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810143a:	2300      	movs	r3, #0
 810143c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101440:	2302      	movs	r3, #2
 8101442:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101446:	230a      	movs	r3, #10
 8101448:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810144c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101450:	4619      	mov	r1, r3
 8101452:	483f      	ldr	r0, [pc, #252]	@ (8101550 <HAL_PCD_MspInit+0x228>)
 8101454:	f000 fda8 	bl	8101fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8101458:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810145c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101460:	2302      	movs	r3, #2
 8101462:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101466:	2300      	movs	r3, #0
 8101468:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810146c:	2302      	movs	r3, #2
 810146e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101472:	230a      	movs	r3, #10
 8101474:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8101478:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810147c:	4619      	mov	r1, r3
 810147e:	4835      	ldr	r0, [pc, #212]	@ (8101554 <HAL_PCD_MspInit+0x22c>)
 8101480:	f000 fd92 	bl	8101fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8101484:	2301      	movs	r3, #1
 8101486:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810148a:	2302      	movs	r3, #2
 810148c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101490:	2300      	movs	r3, #0
 8101492:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101496:	2302      	movs	r3, #2
 8101498:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810149c:	230a      	movs	r3, #10
 810149e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 81014a2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81014a6:	4619      	mov	r1, r3
 81014a8:	482b      	ldr	r0, [pc, #172]	@ (8101558 <HAL_PCD_MspInit+0x230>)
 81014aa:	f000 fd7d 	bl	8101fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 81014ae:	2310      	movs	r3, #16
 81014b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014b4:	2302      	movs	r3, #2
 81014b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ba:	2300      	movs	r3, #0
 81014bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81014c0:	2302      	movs	r3, #2
 81014c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81014c6:	230a      	movs	r3, #10
 81014c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 81014cc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81014d0:	4619      	mov	r1, r3
 81014d2:	4822      	ldr	r0, [pc, #136]	@ (810155c <HAL_PCD_MspInit+0x234>)
 81014d4:	f000 fd68 	bl	8101fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 81014d8:	2328      	movs	r3, #40	@ 0x28
 81014da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014de:	2302      	movs	r3, #2
 81014e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014e4:	2300      	movs	r3, #0
 81014e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81014ea:	2302      	movs	r3, #2
 81014ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81014f0:	230a      	movs	r3, #10
 81014f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81014f6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81014fa:	4619      	mov	r1, r3
 81014fc:	4818      	ldr	r0, [pc, #96]	@ (8101560 <HAL_PCD_MspInit+0x238>)
 81014fe:	f000 fd53 	bl	8101fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8101502:	4b12      	ldr	r3, [pc, #72]	@ (810154c <HAL_PCD_MspInit+0x224>)
 8101504:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101508:	4a10      	ldr	r2, [pc, #64]	@ (810154c <HAL_PCD_MspInit+0x224>)
 810150a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810150e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101512:	4b0e      	ldr	r3, [pc, #56]	@ (810154c <HAL_PCD_MspInit+0x224>)
 8101514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810151c:	613b      	str	r3, [r7, #16]
 810151e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8101520:	4b0a      	ldr	r3, [pc, #40]	@ (810154c <HAL_PCD_MspInit+0x224>)
 8101522:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101526:	4a09      	ldr	r2, [pc, #36]	@ (810154c <HAL_PCD_MspInit+0x224>)
 8101528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810152c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101530:	4b06      	ldr	r3, [pc, #24]	@ (810154c <HAL_PCD_MspInit+0x224>)
 8101532:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101536:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810153a:	60fb      	str	r3, [r7, #12]
 810153c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 810153e:	bf00      	nop
 8101540:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8101544:	46bd      	mov	sp, r7
 8101546:	bd80      	pop	{r7, pc}
 8101548:	40040000 	.word	0x40040000
 810154c:	58024400 	.word	0x58024400
 8101550:	58020400 	.word	0x58020400
 8101554:	58022000 	.word	0x58022000
 8101558:	58020800 	.word	0x58020800
 810155c:	58021c00 	.word	0x58021c00
 8101560:	58020000 	.word	0x58020000

08101564 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8101564:	b580      	push	{r7, lr}
 8101566:	b0bc      	sub	sp, #240	@ 0xf0
 8101568:	af00      	add	r7, sp, #0
 810156a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810156c:	f107 0310 	add.w	r3, r7, #16
 8101570:	22c8      	movs	r2, #200	@ 0xc8
 8101572:	2100      	movs	r1, #0
 8101574:	4618      	mov	r0, r3
 8101576:	f006 f9c9 	bl	810790c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	681b      	ldr	r3, [r3, #0]
 810157e:	4a4f      	ldr	r2, [pc, #316]	@ (81016bc <HAL_SAI_MspInit+0x158>)
 8101580:	4293      	cmp	r3, r2
 8101582:	d153      	bne.n	810162c <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8101584:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101588:	f04f 0300 	mov.w	r3, #0
 810158c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101590:	2300      	movs	r3, #0
 8101592:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101594:	f107 0310 	add.w	r3, r7, #16
 8101598:	4618      	mov	r0, r3
 810159a:	f001 fa93 	bl	8102ac4 <HAL_RCCEx_PeriphCLKConfig>
 810159e:	4603      	mov	r3, r0
 81015a0:	2b00      	cmp	r3, #0
 81015a2:	d001      	beq.n	81015a8 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 81015a4:	f7ff fcfa 	bl	8100f9c <Error_Handler>
    }

    if (SAI1_client == 0)
 81015a8:	4b45      	ldr	r3, [pc, #276]	@ (81016c0 <HAL_SAI_MspInit+0x15c>)
 81015aa:	681b      	ldr	r3, [r3, #0]
 81015ac:	2b00      	cmp	r3, #0
 81015ae:	d10e      	bne.n	81015ce <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81015b0:	4b44      	ldr	r3, [pc, #272]	@ (81016c4 <HAL_SAI_MspInit+0x160>)
 81015b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81015b6:	4a43      	ldr	r2, [pc, #268]	@ (81016c4 <HAL_SAI_MspInit+0x160>)
 81015b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81015bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81015c0:	4b40      	ldr	r3, [pc, #256]	@ (81016c4 <HAL_SAI_MspInit+0x160>)
 81015c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81015c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81015ca:	60fb      	str	r3, [r7, #12]
 81015cc:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 81015ce:	4b3c      	ldr	r3, [pc, #240]	@ (81016c0 <HAL_SAI_MspInit+0x15c>)
 81015d0:	681b      	ldr	r3, [r3, #0]
 81015d2:	3301      	adds	r3, #1
 81015d4:	4a3a      	ldr	r2, [pc, #232]	@ (81016c0 <HAL_SAI_MspInit+0x15c>)
 81015d6:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 81015d8:	2370      	movs	r3, #112	@ 0x70
 81015da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015de:	2302      	movs	r3, #2
 81015e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015e4:	2300      	movs	r3, #0
 81015e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015ea:	2300      	movs	r3, #0
 81015ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81015f0:	2306      	movs	r3, #6
 81015f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81015f6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81015fa:	4619      	mov	r1, r3
 81015fc:	4832      	ldr	r0, [pc, #200]	@ (81016c8 <HAL_SAI_MspInit+0x164>)
 81015fe:	f000 fcd3 	bl	8101fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8101602:	2380      	movs	r3, #128	@ 0x80
 8101604:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101608:	2302      	movs	r3, #2
 810160a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810160e:	2300      	movs	r3, #0
 8101610:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101614:	2300      	movs	r3, #0
 8101616:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810161a:	2306      	movs	r3, #6
 810161c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 8101620:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101624:	4619      	mov	r1, r3
 8101626:	4829      	ldr	r0, [pc, #164]	@ (81016cc <HAL_SAI_MspInit+0x168>)
 8101628:	f000 fcbe 	bl	8101fa8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 810162c:	687b      	ldr	r3, [r7, #4]
 810162e:	681b      	ldr	r3, [r3, #0]
 8101630:	4a27      	ldr	r2, [pc, #156]	@ (81016d0 <HAL_SAI_MspInit+0x16c>)
 8101632:	4293      	cmp	r3, r2
 8101634:	d13e      	bne.n	81016b4 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8101636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810163a:	f04f 0300 	mov.w	r3, #0
 810163e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101642:	2300      	movs	r3, #0
 8101644:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101646:	f107 0310 	add.w	r3, r7, #16
 810164a:	4618      	mov	r0, r3
 810164c:	f001 fa3a 	bl	8102ac4 <HAL_RCCEx_PeriphCLKConfig>
 8101650:	4603      	mov	r3, r0
 8101652:	2b00      	cmp	r3, #0
 8101654:	d001      	beq.n	810165a <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 8101656:	f7ff fca1 	bl	8100f9c <Error_Handler>
    }

      if (SAI1_client == 0)
 810165a:	4b19      	ldr	r3, [pc, #100]	@ (81016c0 <HAL_SAI_MspInit+0x15c>)
 810165c:	681b      	ldr	r3, [r3, #0]
 810165e:	2b00      	cmp	r3, #0
 8101660:	d10e      	bne.n	8101680 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101662:	4b18      	ldr	r3, [pc, #96]	@ (81016c4 <HAL_SAI_MspInit+0x160>)
 8101664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101668:	4a16      	ldr	r2, [pc, #88]	@ (81016c4 <HAL_SAI_MspInit+0x160>)
 810166a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810166e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101672:	4b14      	ldr	r3, [pc, #80]	@ (81016c4 <HAL_SAI_MspInit+0x160>)
 8101674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810167c:	60bb      	str	r3, [r7, #8]
 810167e:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8101680:	4b0f      	ldr	r3, [pc, #60]	@ (81016c0 <HAL_SAI_MspInit+0x15c>)
 8101682:	681b      	ldr	r3, [r3, #0]
 8101684:	3301      	adds	r3, #1
 8101686:	4a0e      	ldr	r2, [pc, #56]	@ (81016c0 <HAL_SAI_MspInit+0x15c>)
 8101688:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 810168a:	2308      	movs	r3, #8
 810168c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101690:	2302      	movs	r3, #2
 8101692:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101696:	2300      	movs	r3, #0
 8101698:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810169c:	2300      	movs	r3, #0
 810169e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81016a2:	2306      	movs	r3, #6
 81016a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 81016a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81016ac:	4619      	mov	r1, r3
 81016ae:	4806      	ldr	r0, [pc, #24]	@ (81016c8 <HAL_SAI_MspInit+0x164>)
 81016b0:	f000 fc7a 	bl	8101fa8 <HAL_GPIO_Init>

    }
}
 81016b4:	bf00      	nop
 81016b6:	37f0      	adds	r7, #240	@ 0xf0
 81016b8:	46bd      	mov	sp, r7
 81016ba:	bd80      	pop	{r7, pc}
 81016bc:	40015804 	.word	0x40015804
 81016c0:	10000800 	.word	0x10000800
 81016c4:	58024400 	.word	0x58024400
 81016c8:	58021000 	.word	0x58021000
 81016cc:	58021800 	.word	0x58021800
 81016d0:	40015824 	.word	0x40015824

081016d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81016d4:	b580      	push	{r7, lr}
 81016d6:	b090      	sub	sp, #64	@ 0x40
 81016d8:	af00      	add	r7, sp, #0
 81016da:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81016dc:	687b      	ldr	r3, [r7, #4]
 81016de:	2b0f      	cmp	r3, #15
 81016e0:	d827      	bhi.n	8101732 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 81016e2:	2200      	movs	r2, #0
 81016e4:	6879      	ldr	r1, [r7, #4]
 81016e6:	201d      	movs	r0, #29
 81016e8:	f000 fc24 	bl	8101f34 <HAL_NVIC_SetPriority>

     /* Enable the TIM3 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 81016ec:	201d      	movs	r0, #29
 81016ee:	f000 fc3b 	bl	8101f68 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 81016f2:	4a29      	ldr	r2, [pc, #164]	@ (8101798 <HAL_InitTick+0xc4>)
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 81016f8:	4b28      	ldr	r3, [pc, #160]	@ (810179c <HAL_InitTick+0xc8>)
 81016fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016fe:	4a27      	ldr	r2, [pc, #156]	@ (810179c <HAL_InitTick+0xc8>)
 8101700:	f043 0302 	orr.w	r3, r3, #2
 8101704:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101708:	4b24      	ldr	r3, [pc, #144]	@ (810179c <HAL_InitTick+0xc8>)
 810170a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810170e:	f003 0302 	and.w	r3, r3, #2
 8101712:	60fb      	str	r3, [r7, #12]
 8101714:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101716:	f107 0210 	add.w	r2, r7, #16
 810171a:	f107 0314 	add.w	r3, r7, #20
 810171e:	4611      	mov	r1, r2
 8101720:	4618      	mov	r0, r3
 8101722:	f001 f98d 	bl	8102a40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8101726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101728:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810172a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810172c:	2b00      	cmp	r3, #0
 810172e:	d106      	bne.n	810173e <HAL_InitTick+0x6a>
 8101730:	e001      	b.n	8101736 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8101732:	2301      	movs	r3, #1
 8101734:	e02b      	b.n	810178e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8101736:	f001 f96d 	bl	8102a14 <HAL_RCC_GetPCLK1Freq>
 810173a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 810173c:	e004      	b.n	8101748 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 810173e:	f001 f969 	bl	8102a14 <HAL_RCC_GetPCLK1Freq>
 8101742:	4603      	mov	r3, r0
 8101744:	005b      	lsls	r3, r3, #1
 8101746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810174a:	4a15      	ldr	r2, [pc, #84]	@ (81017a0 <HAL_InitTick+0xcc>)
 810174c:	fba2 2303 	umull	r2, r3, r2, r3
 8101750:	0c9b      	lsrs	r3, r3, #18
 8101752:	3b01      	subs	r3, #1
 8101754:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8101756:	4b13      	ldr	r3, [pc, #76]	@ (81017a4 <HAL_InitTick+0xd0>)
 8101758:	4a13      	ldr	r2, [pc, #76]	@ (81017a8 <HAL_InitTick+0xd4>)
 810175a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 810175c:	4b11      	ldr	r3, [pc, #68]	@ (81017a4 <HAL_InitTick+0xd0>)
 810175e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8101762:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8101764:	4a0f      	ldr	r2, [pc, #60]	@ (81017a4 <HAL_InitTick+0xd0>)
 8101766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101768:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 810176a:	4b0e      	ldr	r3, [pc, #56]	@ (81017a4 <HAL_InitTick+0xd0>)
 810176c:	2200      	movs	r2, #0
 810176e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101770:	4b0c      	ldr	r3, [pc, #48]	@ (81017a4 <HAL_InitTick+0xd0>)
 8101772:	2200      	movs	r2, #0
 8101774:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8101776:	480b      	ldr	r0, [pc, #44]	@ (81017a4 <HAL_InitTick+0xd0>)
 8101778:	f004 fd6b 	bl	8106252 <HAL_TIM_Base_Init>
 810177c:	4603      	mov	r3, r0
 810177e:	2b00      	cmp	r3, #0
 8101780:	d104      	bne.n	810178c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8101782:	4808      	ldr	r0, [pc, #32]	@ (81017a4 <HAL_InitTick+0xd0>)
 8101784:	f004 fdc6 	bl	8106314 <HAL_TIM_Base_Start_IT>
 8101788:	4603      	mov	r3, r0
 810178a:	e000      	b.n	810178e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 810178c:	2301      	movs	r3, #1
}
 810178e:	4618      	mov	r0, r3
 8101790:	3740      	adds	r7, #64	@ 0x40
 8101792:	46bd      	mov	sp, r7
 8101794:	bd80      	pop	{r7, pc}
 8101796:	bf00      	nop
 8101798:	10000008 	.word	0x10000008
 810179c:	58024400 	.word	0x58024400
 81017a0:	431bde83 	.word	0x431bde83
 81017a4:	10000804 	.word	0x10000804
 81017a8:	40000400 	.word	0x40000400

081017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81017ac:	b480      	push	{r7}
 81017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81017b0:	bf00      	nop
 81017b2:	e7fd      	b.n	81017b0 <NMI_Handler+0x4>

081017b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81017b4:	b480      	push	{r7}
 81017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81017b8:	bf00      	nop
 81017ba:	e7fd      	b.n	81017b8 <HardFault_Handler+0x4>

081017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81017bc:	b480      	push	{r7}
 81017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81017c0:	bf00      	nop
 81017c2:	e7fd      	b.n	81017c0 <MemManage_Handler+0x4>

081017c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81017c4:	b480      	push	{r7}
 81017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81017c8:	bf00      	nop
 81017ca:	e7fd      	b.n	81017c8 <BusFault_Handler+0x4>

081017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81017cc:	b480      	push	{r7}
 81017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81017d0:	bf00      	nop
 81017d2:	e7fd      	b.n	81017d0 <UsageFault_Handler+0x4>

081017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81017d4:	b480      	push	{r7}
 81017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81017d8:	bf00      	nop
 81017da:	46bd      	mov	sp, r7
 81017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e0:	4770      	bx	lr
	...

081017e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 81017e4:	b580      	push	{r7, lr}
 81017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 81017e8:	4802      	ldr	r0, [pc, #8]	@ (81017f4 <TIM3_IRQHandler+0x10>)
 81017ea:	f004 fe0b 	bl	8106404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 81017ee:	bf00      	nop
 81017f0:	bd80      	pop	{r7, pc}
 81017f2:	bf00      	nop
 81017f4:	10000804 	.word	0x10000804

081017f8 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 81017f8:	b580      	push	{r7, lr}
 81017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 81017fc:	4802      	ldr	r0, [pc, #8]	@ (8101808 <CEC_IRQHandler+0x10>)
 81017fe:	f000 f9e5 	bl	8101bcc <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8101802:	bf00      	nop
 8101804:	bd80      	pop	{r7, pc}
 8101806:	bf00      	nop
 8101808:	1000009c 	.word	0x1000009c

0810180c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810180c:	b580      	push	{r7, lr}
 810180e:	b086      	sub	sp, #24
 8101810:	af00      	add	r7, sp, #0
 8101812:	60f8      	str	r0, [r7, #12]
 8101814:	60b9      	str	r1, [r7, #8]
 8101816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101818:	2300      	movs	r3, #0
 810181a:	617b      	str	r3, [r7, #20]
 810181c:	e00a      	b.n	8101834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 810181e:	f3af 8000 	nop.w
 8101822:	4601      	mov	r1, r0
 8101824:	68bb      	ldr	r3, [r7, #8]
 8101826:	1c5a      	adds	r2, r3, #1
 8101828:	60ba      	str	r2, [r7, #8]
 810182a:	b2ca      	uxtb	r2, r1
 810182c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810182e:	697b      	ldr	r3, [r7, #20]
 8101830:	3301      	adds	r3, #1
 8101832:	617b      	str	r3, [r7, #20]
 8101834:	697a      	ldr	r2, [r7, #20]
 8101836:	687b      	ldr	r3, [r7, #4]
 8101838:	429a      	cmp	r2, r3
 810183a:	dbf0      	blt.n	810181e <_read+0x12>
  }

  return len;
 810183c:	687b      	ldr	r3, [r7, #4]
}
 810183e:	4618      	mov	r0, r3
 8101840:	3718      	adds	r7, #24
 8101842:	46bd      	mov	sp, r7
 8101844:	bd80      	pop	{r7, pc}

08101846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101846:	b580      	push	{r7, lr}
 8101848:	b086      	sub	sp, #24
 810184a:	af00      	add	r7, sp, #0
 810184c:	60f8      	str	r0, [r7, #12]
 810184e:	60b9      	str	r1, [r7, #8]
 8101850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101852:	2300      	movs	r3, #0
 8101854:	617b      	str	r3, [r7, #20]
 8101856:	e009      	b.n	810186c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101858:	68bb      	ldr	r3, [r7, #8]
 810185a:	1c5a      	adds	r2, r3, #1
 810185c:	60ba      	str	r2, [r7, #8]
 810185e:	781b      	ldrb	r3, [r3, #0]
 8101860:	4618      	mov	r0, r3
 8101862:	f7fe fd8d 	bl	8100380 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101866:	697b      	ldr	r3, [r7, #20]
 8101868:	3301      	adds	r3, #1
 810186a:	617b      	str	r3, [r7, #20]
 810186c:	697a      	ldr	r2, [r7, #20]
 810186e:	687b      	ldr	r3, [r7, #4]
 8101870:	429a      	cmp	r2, r3
 8101872:	dbf1      	blt.n	8101858 <_write+0x12>
  }
  return len;
 8101874:	687b      	ldr	r3, [r7, #4]
}
 8101876:	4618      	mov	r0, r3
 8101878:	3718      	adds	r7, #24
 810187a:	46bd      	mov	sp, r7
 810187c:	bd80      	pop	{r7, pc}

0810187e <_close>:

int _close(int file)
{
 810187e:	b480      	push	{r7}
 8101880:	b083      	sub	sp, #12
 8101882:	af00      	add	r7, sp, #0
 8101884:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101886:	f04f 33ff 	mov.w	r3, #4294967295
}
 810188a:	4618      	mov	r0, r3
 810188c:	370c      	adds	r7, #12
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr

08101896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101896:	b480      	push	{r7}
 8101898:	b083      	sub	sp, #12
 810189a:	af00      	add	r7, sp, #0
 810189c:	6078      	str	r0, [r7, #4]
 810189e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81018a0:	683b      	ldr	r3, [r7, #0]
 81018a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81018a6:	605a      	str	r2, [r3, #4]
  return 0;
 81018a8:	2300      	movs	r3, #0
}
 81018aa:	4618      	mov	r0, r3
 81018ac:	370c      	adds	r7, #12
 81018ae:	46bd      	mov	sp, r7
 81018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b4:	4770      	bx	lr

081018b6 <_isatty>:

int _isatty(int file)
{
 81018b6:	b480      	push	{r7}
 81018b8:	b083      	sub	sp, #12
 81018ba:	af00      	add	r7, sp, #0
 81018bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81018be:	2301      	movs	r3, #1
}
 81018c0:	4618      	mov	r0, r3
 81018c2:	370c      	adds	r7, #12
 81018c4:	46bd      	mov	sp, r7
 81018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018ca:	4770      	bx	lr

081018cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81018cc:	b480      	push	{r7}
 81018ce:	b085      	sub	sp, #20
 81018d0:	af00      	add	r7, sp, #0
 81018d2:	60f8      	str	r0, [r7, #12]
 81018d4:	60b9      	str	r1, [r7, #8]
 81018d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81018d8:	2300      	movs	r3, #0
}
 81018da:	4618      	mov	r0, r3
 81018dc:	3714      	adds	r7, #20
 81018de:	46bd      	mov	sp, r7
 81018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018e4:	4770      	bx	lr
	...

081018e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81018e8:	b580      	push	{r7, lr}
 81018ea:	b086      	sub	sp, #24
 81018ec:	af00      	add	r7, sp, #0
 81018ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81018f0:	4a14      	ldr	r2, [pc, #80]	@ (8101944 <_sbrk+0x5c>)
 81018f2:	4b15      	ldr	r3, [pc, #84]	@ (8101948 <_sbrk+0x60>)
 81018f4:	1ad3      	subs	r3, r2, r3
 81018f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81018f8:	697b      	ldr	r3, [r7, #20]
 81018fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81018fc:	4b13      	ldr	r3, [pc, #76]	@ (810194c <_sbrk+0x64>)
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	2b00      	cmp	r3, #0
 8101902:	d102      	bne.n	810190a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101904:	4b11      	ldr	r3, [pc, #68]	@ (810194c <_sbrk+0x64>)
 8101906:	4a12      	ldr	r2, [pc, #72]	@ (8101950 <_sbrk+0x68>)
 8101908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810190a:	4b10      	ldr	r3, [pc, #64]	@ (810194c <_sbrk+0x64>)
 810190c:	681a      	ldr	r2, [r3, #0]
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	4413      	add	r3, r2
 8101912:	693a      	ldr	r2, [r7, #16]
 8101914:	429a      	cmp	r2, r3
 8101916:	d207      	bcs.n	8101928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101918:	f006 f846 	bl	81079a8 <__errno>
 810191c:	4603      	mov	r3, r0
 810191e:	220c      	movs	r2, #12
 8101920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101922:	f04f 33ff 	mov.w	r3, #4294967295
 8101926:	e009      	b.n	810193c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101928:	4b08      	ldr	r3, [pc, #32]	@ (810194c <_sbrk+0x64>)
 810192a:	681b      	ldr	r3, [r3, #0]
 810192c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810192e:	4b07      	ldr	r3, [pc, #28]	@ (810194c <_sbrk+0x64>)
 8101930:	681a      	ldr	r2, [r3, #0]
 8101932:	687b      	ldr	r3, [r7, #4]
 8101934:	4413      	add	r3, r2
 8101936:	4a05      	ldr	r2, [pc, #20]	@ (810194c <_sbrk+0x64>)
 8101938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810193a:	68fb      	ldr	r3, [r7, #12]
}
 810193c:	4618      	mov	r0, r3
 810193e:	3718      	adds	r7, #24
 8101940:	46bd      	mov	sp, r7
 8101942:	bd80      	pop	{r7, pc}
 8101944:	10048000 	.word	0x10048000
 8101948:	00000400 	.word	0x00000400
 810194c:	10000850 	.word	0x10000850
 8101950:	10000e30 	.word	0x10000e30

08101954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101954:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8101990 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8101958:	f7fe fdd4 	bl	8100504 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 810195c:	f7fe fdba 	bl	81004d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101960:	480c      	ldr	r0, [pc, #48]	@ (8101994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101962:	490d      	ldr	r1, [pc, #52]	@ (8101998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101964:	4a0d      	ldr	r2, [pc, #52]	@ (810199c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101968:	e002      	b.n	8101970 <LoopCopyDataInit>

0810196a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810196a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810196c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810196e:	3304      	adds	r3, #4

08101970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101974:	d3f9      	bcc.n	810196a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101976:	4a0a      	ldr	r2, [pc, #40]	@ (81019a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101978:	4c0a      	ldr	r4, [pc, #40]	@ (81019a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810197a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810197c:	e001      	b.n	8101982 <LoopFillZerobss>

0810197e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810197e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101980:	3204      	adds	r2, #4

08101982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101984:	d3fb      	bcc.n	810197e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101986:	f006 f815 	bl	81079b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810198a:	f7ff f8a7 	bl	8100adc <main>
  bx  lr
 810198e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101990:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101994:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101998:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 810199c:	081084d0 	.word	0x081084d0
  ldr r2, =_sbss
 81019a0:	1000006c 	.word	0x1000006c
  ldr r4, =_ebss
 81019a4:	10000e30 	.word	0x10000e30

081019a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81019a8:	e7fe      	b.n	81019a8 <ADC3_IRQHandler>
	...

081019ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81019ac:	b580      	push	{r7, lr}
 81019ae:	b082      	sub	sp, #8
 81019b0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81019b2:	4b28      	ldr	r3, [pc, #160]	@ (8101a54 <HAL_Init+0xa8>)
 81019b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81019b8:	4a26      	ldr	r2, [pc, #152]	@ (8101a54 <HAL_Init+0xa8>)
 81019ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81019be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81019c2:	4b24      	ldr	r3, [pc, #144]	@ (8101a54 <HAL_Init+0xa8>)
 81019c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81019c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81019cc:	603b      	str	r3, [r7, #0]
 81019ce:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81019d0:	4b21      	ldr	r3, [pc, #132]	@ (8101a58 <HAL_Init+0xac>)
 81019d2:	681b      	ldr	r3, [r3, #0]
 81019d4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81019d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81019dc:	4a1e      	ldr	r2, [pc, #120]	@ (8101a58 <HAL_Init+0xac>)
 81019de:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81019e2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81019e4:	4b1c      	ldr	r3, [pc, #112]	@ (8101a58 <HAL_Init+0xac>)
 81019e6:	681b      	ldr	r3, [r3, #0]
 81019e8:	4a1b      	ldr	r2, [pc, #108]	@ (8101a58 <HAL_Init+0xac>)
 81019ea:	f043 0301 	orr.w	r3, r3, #1
 81019ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81019f0:	2003      	movs	r0, #3
 81019f2:	f000 fa94 	bl	8101f1e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81019f6:	f000 fe61 	bl	81026bc <HAL_RCC_GetSysClockFreq>
 81019fa:	4602      	mov	r2, r0
 81019fc:	4b15      	ldr	r3, [pc, #84]	@ (8101a54 <HAL_Init+0xa8>)
 81019fe:	699b      	ldr	r3, [r3, #24]
 8101a00:	0a1b      	lsrs	r3, r3, #8
 8101a02:	f003 030f 	and.w	r3, r3, #15
 8101a06:	4915      	ldr	r1, [pc, #84]	@ (8101a5c <HAL_Init+0xb0>)
 8101a08:	5ccb      	ldrb	r3, [r1, r3]
 8101a0a:	f003 031f 	and.w	r3, r3, #31
 8101a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8101a12:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101a14:	4b0f      	ldr	r3, [pc, #60]	@ (8101a54 <HAL_Init+0xa8>)
 8101a16:	699b      	ldr	r3, [r3, #24]
 8101a18:	f003 030f 	and.w	r3, r3, #15
 8101a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8101a5c <HAL_Init+0xb0>)
 8101a1e:	5cd3      	ldrb	r3, [r2, r3]
 8101a20:	f003 031f 	and.w	r3, r3, #31
 8101a24:	687a      	ldr	r2, [r7, #4]
 8101a26:	fa22 f303 	lsr.w	r3, r2, r3
 8101a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8101a60 <HAL_Init+0xb4>)
 8101a2c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8101a60 <HAL_Init+0xb4>)
 8101a30:	681b      	ldr	r3, [r3, #0]
 8101a32:	4a0c      	ldr	r2, [pc, #48]	@ (8101a64 <HAL_Init+0xb8>)
 8101a34:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101a36:	200f      	movs	r0, #15
 8101a38:	f7ff fe4c 	bl	81016d4 <HAL_InitTick>
 8101a3c:	4603      	mov	r3, r0
 8101a3e:	2b00      	cmp	r3, #0
 8101a40:	d001      	beq.n	8101a46 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101a42:	2301      	movs	r3, #1
 8101a44:	e002      	b.n	8101a4c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101a46:	f7ff faaf 	bl	8100fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101a4a:	2300      	movs	r3, #0
}
 8101a4c:	4618      	mov	r0, r3
 8101a4e:	3708      	adds	r7, #8
 8101a50:	46bd      	mov	sp, r7
 8101a52:	bd80      	pop	{r7, pc}
 8101a54:	58024400 	.word	0x58024400
 8101a58:	40024400 	.word	0x40024400
 8101a5c:	0810847c 	.word	0x0810847c
 8101a60:	10000004 	.word	0x10000004
 8101a64:	10000000 	.word	0x10000000

08101a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101a68:	b480      	push	{r7}
 8101a6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101a6c:	4b06      	ldr	r3, [pc, #24]	@ (8101a88 <HAL_IncTick+0x20>)
 8101a6e:	781b      	ldrb	r3, [r3, #0]
 8101a70:	461a      	mov	r2, r3
 8101a72:	4b06      	ldr	r3, [pc, #24]	@ (8101a8c <HAL_IncTick+0x24>)
 8101a74:	681b      	ldr	r3, [r3, #0]
 8101a76:	4413      	add	r3, r2
 8101a78:	4a04      	ldr	r2, [pc, #16]	@ (8101a8c <HAL_IncTick+0x24>)
 8101a7a:	6013      	str	r3, [r2, #0]
}
 8101a7c:	bf00      	nop
 8101a7e:	46bd      	mov	sp, r7
 8101a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a84:	4770      	bx	lr
 8101a86:	bf00      	nop
 8101a88:	1000000c 	.word	0x1000000c
 8101a8c:	10000854 	.word	0x10000854

08101a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101a90:	b480      	push	{r7}
 8101a92:	af00      	add	r7, sp, #0
  return uwTick;
 8101a94:	4b03      	ldr	r3, [pc, #12]	@ (8101aa4 <HAL_GetTick+0x14>)
 8101a96:	681b      	ldr	r3, [r3, #0]
}
 8101a98:	4618      	mov	r0, r3
 8101a9a:	46bd      	mov	sp, r7
 8101a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa0:	4770      	bx	lr
 8101aa2:	bf00      	nop
 8101aa4:	10000854 	.word	0x10000854

08101aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101aa8:	b580      	push	{r7, lr}
 8101aaa:	b084      	sub	sp, #16
 8101aac:	af00      	add	r7, sp, #0
 8101aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101ab0:	f7ff ffee 	bl	8101a90 <HAL_GetTick>
 8101ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101ab6:	687b      	ldr	r3, [r7, #4]
 8101ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101aba:	68fb      	ldr	r3, [r7, #12]
 8101abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101ac0:	d005      	beq.n	8101ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8101aec <HAL_Delay+0x44>)
 8101ac4:	781b      	ldrb	r3, [r3, #0]
 8101ac6:	461a      	mov	r2, r3
 8101ac8:	68fb      	ldr	r3, [r7, #12]
 8101aca:	4413      	add	r3, r2
 8101acc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101ace:	bf00      	nop
 8101ad0:	f7ff ffde 	bl	8101a90 <HAL_GetTick>
 8101ad4:	4602      	mov	r2, r0
 8101ad6:	68bb      	ldr	r3, [r7, #8]
 8101ad8:	1ad3      	subs	r3, r2, r3
 8101ada:	68fa      	ldr	r2, [r7, #12]
 8101adc:	429a      	cmp	r2, r3
 8101ade:	d8f7      	bhi.n	8101ad0 <HAL_Delay+0x28>
  {
  }
}
 8101ae0:	bf00      	nop
 8101ae2:	bf00      	nop
 8101ae4:	3710      	adds	r7, #16
 8101ae6:	46bd      	mov	sp, r7
 8101ae8:	bd80      	pop	{r7, pc}
 8101aea:	bf00      	nop
 8101aec:	1000000c 	.word	0x1000000c

08101af0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101af0:	b480      	push	{r7}
 8101af2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101af4:	4b03      	ldr	r3, [pc, #12]	@ (8101b04 <HAL_GetREVID+0x14>)
 8101af6:	681b      	ldr	r3, [r3, #0]
 8101af8:	0c1b      	lsrs	r3, r3, #16
}
 8101afa:	4618      	mov	r0, r3
 8101afc:	46bd      	mov	sp, r7
 8101afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b02:	4770      	bx	lr
 8101b04:	5c001000 	.word	0x5c001000

08101b08 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8101b08:	b580      	push	{r7, lr}
 8101b0a:	b082      	sub	sp, #8
 8101b0c:	af00      	add	r7, sp, #0
 8101b0e:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	2b00      	cmp	r3, #0
 8101b14:	d003      	beq.n	8101b1e <HAL_CEC_Init+0x16>
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101b1a:	2b00      	cmp	r3, #0
 8101b1c:	d101      	bne.n	8101b22 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8101b1e:	2301      	movs	r3, #1
 8101b20:	e050      	b.n	8101bc4 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8101b22:	687b      	ldr	r3, [r7, #4]
 8101b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101b26:	2b00      	cmp	r3, #0
 8101b28:	d106      	bne.n	8101b38 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	2200      	movs	r2, #0
 8101b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8101b32:	6878      	ldr	r0, [r7, #4]
 8101b34:	f7ff fa5e 	bl	8100ff4 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8101b38:	687b      	ldr	r3, [r7, #4]
 8101b3a:	2224      	movs	r2, #36	@ 0x24
 8101b3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8101b3e:	687b      	ldr	r3, [r7, #4]
 8101b40:	681b      	ldr	r3, [r3, #0]
 8101b42:	681a      	ldr	r2, [r3, #0]
 8101b44:	687b      	ldr	r3, [r7, #4]
 8101b46:	681b      	ldr	r3, [r3, #0]
 8101b48:	f022 0201 	bic.w	r2, r2, #1
 8101b4c:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8101b4e:	687b      	ldr	r3, [r7, #4]
 8101b50:	685a      	ldr	r2, [r3, #4]
 8101b52:	687b      	ldr	r3, [r7, #4]
 8101b54:	689b      	ldr	r3, [r3, #8]
 8101b56:	431a      	orrs	r2, r3
 8101b58:	687b      	ldr	r3, [r7, #4]
 8101b5a:	68db      	ldr	r3, [r3, #12]
 8101b5c:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8101b5e:	687b      	ldr	r3, [r7, #4]
 8101b60:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8101b62:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	695b      	ldr	r3, [r3, #20]
 8101b68:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8101b6e:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8101b74:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8101b76:	687b      	ldr	r3, [r7, #4]
 8101b78:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8101b7a:	041b      	lsls	r3, r3, #16
 8101b7c:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8101b84:	687b      	ldr	r3, [r7, #4]
 8101b86:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8101b88:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8101b8a:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8101b8c:	687b      	ldr	r3, [r7, #4]
 8101b8e:	681b      	ldr	r3, [r3, #0]
 8101b90:	695b      	ldr	r3, [r3, #20]
 8101b92:	687a      	ldr	r2, [r7, #4]
 8101b94:	6812      	ldr	r2, [r2, #0]
 8101b96:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8101b9a:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8101b9e:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	681b      	ldr	r3, [r3, #0]
 8101ba4:	681a      	ldr	r2, [r3, #0]
 8101ba6:	687b      	ldr	r3, [r7, #4]
 8101ba8:	681b      	ldr	r3, [r3, #0]
 8101baa:	f042 0201 	orr.w	r2, r2, #1
 8101bae:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8101bb0:	687b      	ldr	r3, [r7, #4]
 8101bb2:	2200      	movs	r2, #0
 8101bb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8101bb6:	687b      	ldr	r3, [r7, #4]
 8101bb8:	2220      	movs	r2, #32
 8101bba:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	2220      	movs	r2, #32
 8101bc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8101bc2:	2300      	movs	r3, #0
}
 8101bc4:	4618      	mov	r0, r3
 8101bc6:	3708      	adds	r7, #8
 8101bc8:	46bd      	mov	sp, r7
 8101bca:	bd80      	pop	{r7, pc}

08101bcc <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8101bcc:	b580      	push	{r7, lr}
 8101bce:	b084      	sub	sp, #16
 8101bd0:	af00      	add	r7, sp, #0
 8101bd2:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8101bd4:	687b      	ldr	r3, [r7, #4]
 8101bd6:	681b      	ldr	r3, [r3, #0]
 8101bd8:	691b      	ldr	r3, [r3, #16]
 8101bda:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8101bdc:	68fb      	ldr	r3, [r7, #12]
 8101bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101be2:	2b00      	cmp	r3, #0
 8101be4:	d00a      	beq.n	8101bfc <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8101be6:	687b      	ldr	r3, [r7, #4]
 8101be8:	2280      	movs	r2, #128	@ 0x80
 8101bea:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	691a      	ldr	r2, [r3, #16]
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8101bfa:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8101bfc:	68fb      	ldr	r3, [r7, #12]
 8101bfe:	f003 0301 	and.w	r3, r3, #1
 8101c02:	2b00      	cmp	r3, #0
 8101c04:	d01c      	beq.n	8101c40 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	2222      	movs	r2, #34	@ 0x22
 8101c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 8101c0c:	687b      	ldr	r3, [r7, #4]
 8101c0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8101c10:	3301      	adds	r3, #1
 8101c12:	b29a      	uxth	r2, r3
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	681b      	ldr	r3, [r3, #0]
 8101c1c:	68da      	ldr	r2, [r3, #12]
 8101c1e:	687b      	ldr	r3, [r7, #4]
 8101c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101c22:	b2d2      	uxtb	r2, r2
 8101c24:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101c2a:	1c5a      	adds	r2, r3, #1
 8101c2c:	687b      	ldr	r3, [r7, #4]
 8101c2e:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	681b      	ldr	r3, [r3, #0]
 8101c34:	691a      	ldr	r2, [r3, #16]
 8101c36:	687b      	ldr	r3, [r7, #4]
 8101c38:	681b      	ldr	r3, [r3, #0]
 8101c3a:	f042 0201 	orr.w	r2, r2, #1
 8101c3e:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8101c40:	68fb      	ldr	r3, [r7, #12]
 8101c42:	f003 0302 	and.w	r3, r3, #2
 8101c46:	2b00      	cmp	r3, #0
 8101c48:	d01e      	beq.n	8101c88 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8101c4a:	687b      	ldr	r3, [r7, #4]
 8101c4c:	681b      	ldr	r3, [r3, #0]
 8101c4e:	691a      	ldr	r2, [r3, #16]
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	681b      	ldr	r3, [r3, #0]
 8101c54:	f042 0202 	orr.w	r2, r2, #2
 8101c58:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8101c5a:	687b      	ldr	r3, [r7, #4]
 8101c5c:	2220      	movs	r2, #32
 8101c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8101c60:	687b      	ldr	r3, [r7, #4]
 8101c62:	2200      	movs	r2, #0
 8101c64:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8101c66:	687b      	ldr	r3, [r7, #4]
 8101c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8101c6a:	687b      	ldr	r3, [r7, #4]
 8101c6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8101c6e:	425b      	negs	r3, r3
 8101c70:	441a      	add	r2, r3
 8101c72:	687b      	ldr	r3, [r7, #4]
 8101c74:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8101c7a:	4619      	mov	r1, r3
 8101c7c:	6878      	ldr	r0, [r7, #4]
 8101c7e:	f000 f88c 	bl	8101d9a <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8101c82:	687b      	ldr	r3, [r7, #4]
 8101c84:	2200      	movs	r2, #0
 8101c86:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8101c88:	68fb      	ldr	r3, [r7, #12]
 8101c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101c8e:	2b00      	cmp	r3, #0
 8101c90:	d024      	beq.n	8101cdc <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8101c96:	3b01      	subs	r3, #1
 8101c98:	b29a      	uxth	r2, r3
 8101c9a:	687b      	ldr	r3, [r7, #4]
 8101c9c:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8101ca2:	2b00      	cmp	r3, #0
 8101ca4:	d107      	bne.n	8101cb6 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	681b      	ldr	r3, [r3, #0]
 8101caa:	681a      	ldr	r2, [r3, #0]
 8101cac:	687b      	ldr	r3, [r7, #4]
 8101cae:	681b      	ldr	r3, [r3, #0]
 8101cb0:	f042 0204 	orr.w	r2, r2, #4
 8101cb4:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8101cb6:	687b      	ldr	r3, [r7, #4]
 8101cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101cba:	781a      	ldrb	r2, [r3, #0]
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	681b      	ldr	r3, [r3, #0]
 8101cc0:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8101cc2:	687b      	ldr	r3, [r7, #4]
 8101cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101cc6:	1c5a      	adds	r2, r3, #1
 8101cc8:	687b      	ldr	r3, [r7, #4]
 8101cca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	681b      	ldr	r3, [r3, #0]
 8101cd0:	691a      	ldr	r2, [r3, #16]
 8101cd2:	687b      	ldr	r3, [r7, #4]
 8101cd4:	681b      	ldr	r3, [r3, #0]
 8101cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8101cda:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8101cdc:	68fb      	ldr	r3, [r7, #12]
 8101cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101ce2:	2b00      	cmp	r3, #0
 8101ce4:	d014      	beq.n	8101d10 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	681b      	ldr	r3, [r3, #0]
 8101cea:	691a      	ldr	r2, [r3, #16]
 8101cec:	687b      	ldr	r3, [r7, #4]
 8101cee:	681b      	ldr	r3, [r3, #0]
 8101cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8101cf4:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8101cf6:	687b      	ldr	r3, [r7, #4]
 8101cf8:	2220      	movs	r2, #32
 8101cfa:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8101cfc:	687b      	ldr	r3, [r7, #4]
 8101cfe:	2200      	movs	r2, #0
 8101d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	2200      	movs	r2, #0
 8101d08:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8101d0a:	6878      	ldr	r0, [r7, #4]
 8101d0c:	f000 f83b 	bl	8101d86 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8101d10:	68fa      	ldr	r2, [r7, #12]
 8101d12:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8101d16:	4013      	ands	r3, r2
 8101d18:	2b00      	cmp	r3, #0
 8101d1a:	d030      	beq.n	8101d7e <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8101d1c:	687b      	ldr	r3, [r7, #4]
 8101d1e:	68fa      	ldr	r2, [r7, #12]
 8101d20:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	691b      	ldr	r3, [r3, #16]
 8101d28:	687a      	ldr	r2, [r7, #4]
 8101d2a:	6812      	ldr	r2, [r2, #0]
 8101d2c:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 8101d30:	f043 031c 	orr.w	r3, r3, #28
 8101d34:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8101d36:	68fb      	ldr	r3, [r7, #12]
 8101d38:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8101d3c:	2b00      	cmp	r3, #0
 8101d3e:	d00e      	beq.n	8101d5e <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8101d40:	687b      	ldr	r3, [r7, #4]
 8101d42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8101d44:	687b      	ldr	r3, [r7, #4]
 8101d46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8101d48:	425b      	negs	r3, r3
 8101d4a:	441a      	add	r2, r3
 8101d4c:	687b      	ldr	r3, [r7, #4]
 8101d4e:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 8101d50:	687b      	ldr	r3, [r7, #4]
 8101d52:	2200      	movs	r2, #0
 8101d54:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	2220      	movs	r2, #32
 8101d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8101d5c:	e00c      	b.n	8101d78 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8101d5e:	68fb      	ldr	r3, [r7, #12]
 8101d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101d64:	2b00      	cmp	r3, #0
 8101d66:	d107      	bne.n	8101d78 <HAL_CEC_IRQHandler+0x1ac>
 8101d68:	68fb      	ldr	r3, [r7, #12]
 8101d6a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8101d6e:	2b00      	cmp	r3, #0
 8101d70:	d002      	beq.n	8101d78 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	2220      	movs	r2, #32
 8101d76:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8101d78:	6878      	ldr	r0, [r7, #4]
 8101d7a:	f000 f819 	bl	8101db0 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8101d7e:	bf00      	nop
 8101d80:	3710      	adds	r7, #16
 8101d82:	46bd      	mov	sp, r7
 8101d84:	bd80      	pop	{r7, pc}

08101d86 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8101d86:	b480      	push	{r7}
 8101d88:	b083      	sub	sp, #12
 8101d8a:	af00      	add	r7, sp, #0
 8101d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8101d8e:	bf00      	nop
 8101d90:	370c      	adds	r7, #12
 8101d92:	46bd      	mov	sp, r7
 8101d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d98:	4770      	bx	lr

08101d9a <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8101d9a:	b480      	push	{r7}
 8101d9c:	b083      	sub	sp, #12
 8101d9e:	af00      	add	r7, sp, #0
 8101da0:	6078      	str	r0, [r7, #4]
 8101da2:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8101da4:	bf00      	nop
 8101da6:	370c      	adds	r7, #12
 8101da8:	46bd      	mov	sp, r7
 8101daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dae:	4770      	bx	lr

08101db0 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8101db0:	b480      	push	{r7}
 8101db2:	b083      	sub	sp, #12
 8101db4:	af00      	add	r7, sp, #0
 8101db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8101db8:	bf00      	nop
 8101dba:	370c      	adds	r7, #12
 8101dbc:	46bd      	mov	sp, r7
 8101dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dc2:	4770      	bx	lr

08101dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101dc4:	b480      	push	{r7}
 8101dc6:	b085      	sub	sp, #20
 8101dc8:	af00      	add	r7, sp, #0
 8101dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101dcc:	687b      	ldr	r3, [r7, #4]
 8101dce:	f003 0307 	and.w	r3, r3, #7
 8101dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8101e08 <__NVIC_SetPriorityGrouping+0x44>)
 8101dd6:	68db      	ldr	r3, [r3, #12]
 8101dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101dda:	68ba      	ldr	r2, [r7, #8]
 8101ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101de0:	4013      	ands	r3, r2
 8101de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101de4:	68fb      	ldr	r3, [r7, #12]
 8101de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101de8:	68bb      	ldr	r3, [r7, #8]
 8101dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101df6:	4a04      	ldr	r2, [pc, #16]	@ (8101e08 <__NVIC_SetPriorityGrouping+0x44>)
 8101df8:	68bb      	ldr	r3, [r7, #8]
 8101dfa:	60d3      	str	r3, [r2, #12]
}
 8101dfc:	bf00      	nop
 8101dfe:	3714      	adds	r7, #20
 8101e00:	46bd      	mov	sp, r7
 8101e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e06:	4770      	bx	lr
 8101e08:	e000ed00 	.word	0xe000ed00

08101e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101e0c:	b480      	push	{r7}
 8101e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101e10:	4b04      	ldr	r3, [pc, #16]	@ (8101e24 <__NVIC_GetPriorityGrouping+0x18>)
 8101e12:	68db      	ldr	r3, [r3, #12]
 8101e14:	0a1b      	lsrs	r3, r3, #8
 8101e16:	f003 0307 	and.w	r3, r3, #7
}
 8101e1a:	4618      	mov	r0, r3
 8101e1c:	46bd      	mov	sp, r7
 8101e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e22:	4770      	bx	lr
 8101e24:	e000ed00 	.word	0xe000ed00

08101e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101e28:	b480      	push	{r7}
 8101e2a:	b083      	sub	sp, #12
 8101e2c:	af00      	add	r7, sp, #0
 8101e2e:	4603      	mov	r3, r0
 8101e30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e36:	2b00      	cmp	r3, #0
 8101e38:	db0b      	blt.n	8101e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101e3a:	88fb      	ldrh	r3, [r7, #6]
 8101e3c:	f003 021f 	and.w	r2, r3, #31
 8101e40:	4907      	ldr	r1, [pc, #28]	@ (8101e60 <__NVIC_EnableIRQ+0x38>)
 8101e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e46:	095b      	lsrs	r3, r3, #5
 8101e48:	2001      	movs	r0, #1
 8101e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8101e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101e52:	bf00      	nop
 8101e54:	370c      	adds	r7, #12
 8101e56:	46bd      	mov	sp, r7
 8101e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e5c:	4770      	bx	lr
 8101e5e:	bf00      	nop
 8101e60:	e000e100 	.word	0xe000e100

08101e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101e64:	b480      	push	{r7}
 8101e66:	b083      	sub	sp, #12
 8101e68:	af00      	add	r7, sp, #0
 8101e6a:	4603      	mov	r3, r0
 8101e6c:	6039      	str	r1, [r7, #0]
 8101e6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e74:	2b00      	cmp	r3, #0
 8101e76:	db0a      	blt.n	8101e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101e78:	683b      	ldr	r3, [r7, #0]
 8101e7a:	b2da      	uxtb	r2, r3
 8101e7c:	490c      	ldr	r1, [pc, #48]	@ (8101eb0 <__NVIC_SetPriority+0x4c>)
 8101e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e82:	0112      	lsls	r2, r2, #4
 8101e84:	b2d2      	uxtb	r2, r2
 8101e86:	440b      	add	r3, r1
 8101e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101e8c:	e00a      	b.n	8101ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101e8e:	683b      	ldr	r3, [r7, #0]
 8101e90:	b2da      	uxtb	r2, r3
 8101e92:	4908      	ldr	r1, [pc, #32]	@ (8101eb4 <__NVIC_SetPriority+0x50>)
 8101e94:	88fb      	ldrh	r3, [r7, #6]
 8101e96:	f003 030f 	and.w	r3, r3, #15
 8101e9a:	3b04      	subs	r3, #4
 8101e9c:	0112      	lsls	r2, r2, #4
 8101e9e:	b2d2      	uxtb	r2, r2
 8101ea0:	440b      	add	r3, r1
 8101ea2:	761a      	strb	r2, [r3, #24]
}
 8101ea4:	bf00      	nop
 8101ea6:	370c      	adds	r7, #12
 8101ea8:	46bd      	mov	sp, r7
 8101eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eae:	4770      	bx	lr
 8101eb0:	e000e100 	.word	0xe000e100
 8101eb4:	e000ed00 	.word	0xe000ed00

08101eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101eb8:	b480      	push	{r7}
 8101eba:	b089      	sub	sp, #36	@ 0x24
 8101ebc:	af00      	add	r7, sp, #0
 8101ebe:	60f8      	str	r0, [r7, #12]
 8101ec0:	60b9      	str	r1, [r7, #8]
 8101ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101ec4:	68fb      	ldr	r3, [r7, #12]
 8101ec6:	f003 0307 	and.w	r3, r3, #7
 8101eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101ecc:	69fb      	ldr	r3, [r7, #28]
 8101ece:	f1c3 0307 	rsb	r3, r3, #7
 8101ed2:	2b04      	cmp	r3, #4
 8101ed4:	bf28      	it	cs
 8101ed6:	2304      	movcs	r3, #4
 8101ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101eda:	69fb      	ldr	r3, [r7, #28]
 8101edc:	3304      	adds	r3, #4
 8101ede:	2b06      	cmp	r3, #6
 8101ee0:	d902      	bls.n	8101ee8 <NVIC_EncodePriority+0x30>
 8101ee2:	69fb      	ldr	r3, [r7, #28]
 8101ee4:	3b03      	subs	r3, #3
 8101ee6:	e000      	b.n	8101eea <NVIC_EncodePriority+0x32>
 8101ee8:	2300      	movs	r3, #0
 8101eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101eec:	f04f 32ff 	mov.w	r2, #4294967295
 8101ef0:	69bb      	ldr	r3, [r7, #24]
 8101ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8101ef6:	43da      	mvns	r2, r3
 8101ef8:	68bb      	ldr	r3, [r7, #8]
 8101efa:	401a      	ands	r2, r3
 8101efc:	697b      	ldr	r3, [r7, #20]
 8101efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101f00:	f04f 31ff 	mov.w	r1, #4294967295
 8101f04:	697b      	ldr	r3, [r7, #20]
 8101f06:	fa01 f303 	lsl.w	r3, r1, r3
 8101f0a:	43d9      	mvns	r1, r3
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101f10:	4313      	orrs	r3, r2
         );
}
 8101f12:	4618      	mov	r0, r3
 8101f14:	3724      	adds	r7, #36	@ 0x24
 8101f16:	46bd      	mov	sp, r7
 8101f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f1c:	4770      	bx	lr

08101f1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101f1e:	b580      	push	{r7, lr}
 8101f20:	b082      	sub	sp, #8
 8101f22:	af00      	add	r7, sp, #0
 8101f24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101f26:	6878      	ldr	r0, [r7, #4]
 8101f28:	f7ff ff4c 	bl	8101dc4 <__NVIC_SetPriorityGrouping>
}
 8101f2c:	bf00      	nop
 8101f2e:	3708      	adds	r7, #8
 8101f30:	46bd      	mov	sp, r7
 8101f32:	bd80      	pop	{r7, pc}

08101f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101f34:	b580      	push	{r7, lr}
 8101f36:	b086      	sub	sp, #24
 8101f38:	af00      	add	r7, sp, #0
 8101f3a:	4603      	mov	r3, r0
 8101f3c:	60b9      	str	r1, [r7, #8]
 8101f3e:	607a      	str	r2, [r7, #4]
 8101f40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101f42:	f7ff ff63 	bl	8101e0c <__NVIC_GetPriorityGrouping>
 8101f46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101f48:	687a      	ldr	r2, [r7, #4]
 8101f4a:	68b9      	ldr	r1, [r7, #8]
 8101f4c:	6978      	ldr	r0, [r7, #20]
 8101f4e:	f7ff ffb3 	bl	8101eb8 <NVIC_EncodePriority>
 8101f52:	4602      	mov	r2, r0
 8101f54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101f58:	4611      	mov	r1, r2
 8101f5a:	4618      	mov	r0, r3
 8101f5c:	f7ff ff82 	bl	8101e64 <__NVIC_SetPriority>
}
 8101f60:	bf00      	nop
 8101f62:	3718      	adds	r7, #24
 8101f64:	46bd      	mov	sp, r7
 8101f66:	bd80      	pop	{r7, pc}

08101f68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101f68:	b580      	push	{r7, lr}
 8101f6a:	b082      	sub	sp, #8
 8101f6c:	af00      	add	r7, sp, #0
 8101f6e:	4603      	mov	r3, r0
 8101f70:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f76:	4618      	mov	r0, r3
 8101f78:	f7ff ff56 	bl	8101e28 <__NVIC_EnableIRQ>
}
 8101f7c:	bf00      	nop
 8101f7e:	3708      	adds	r7, #8
 8101f80:	46bd      	mov	sp, r7
 8101f82:	bd80      	pop	{r7, pc}

08101f84 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101f84:	b480      	push	{r7}
 8101f86:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101f88:	4b06      	ldr	r3, [pc, #24]	@ (8101fa4 <HAL_GetCurrentCPUID+0x20>)
 8101f8a:	681b      	ldr	r3, [r3, #0]
 8101f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8101f90:	2b70      	cmp	r3, #112	@ 0x70
 8101f92:	d101      	bne.n	8101f98 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8101f94:	2303      	movs	r3, #3
 8101f96:	e000      	b.n	8101f9a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8101f98:	2301      	movs	r3, #1
  }
}
 8101f9a:	4618      	mov	r0, r3
 8101f9c:	46bd      	mov	sp, r7
 8101f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fa2:	4770      	bx	lr
 8101fa4:	e000ed00 	.word	0xe000ed00

08101fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8101fa8:	b480      	push	{r7}
 8101faa:	b089      	sub	sp, #36	@ 0x24
 8101fac:	af00      	add	r7, sp, #0
 8101fae:	6078      	str	r0, [r7, #4]
 8101fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101fb2:	2300      	movs	r3, #0
 8101fb4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101fb6:	4b89      	ldr	r3, [pc, #548]	@ (81021dc <HAL_GPIO_Init+0x234>)
 8101fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101fba:	e194      	b.n	81022e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101fbc:	683b      	ldr	r3, [r7, #0]
 8101fbe:	681a      	ldr	r2, [r3, #0]
 8101fc0:	2101      	movs	r1, #1
 8101fc2:	69fb      	ldr	r3, [r7, #28]
 8101fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8101fc8:	4013      	ands	r3, r2
 8101fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101fcc:	693b      	ldr	r3, [r7, #16]
 8101fce:	2b00      	cmp	r3, #0
 8101fd0:	f000 8186 	beq.w	81022e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101fd4:	683b      	ldr	r3, [r7, #0]
 8101fd6:	685b      	ldr	r3, [r3, #4]
 8101fd8:	f003 0303 	and.w	r3, r3, #3
 8101fdc:	2b01      	cmp	r3, #1
 8101fde:	d005      	beq.n	8101fec <HAL_GPIO_Init+0x44>
 8101fe0:	683b      	ldr	r3, [r7, #0]
 8101fe2:	685b      	ldr	r3, [r3, #4]
 8101fe4:	f003 0303 	and.w	r3, r3, #3
 8101fe8:	2b02      	cmp	r3, #2
 8101fea:	d130      	bne.n	810204e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	689b      	ldr	r3, [r3, #8]
 8101ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101ff2:	69fb      	ldr	r3, [r7, #28]
 8101ff4:	005b      	lsls	r3, r3, #1
 8101ff6:	2203      	movs	r2, #3
 8101ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8101ffc:	43db      	mvns	r3, r3
 8101ffe:	69ba      	ldr	r2, [r7, #24]
 8102000:	4013      	ands	r3, r2
 8102002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102004:	683b      	ldr	r3, [r7, #0]
 8102006:	68da      	ldr	r2, [r3, #12]
 8102008:	69fb      	ldr	r3, [r7, #28]
 810200a:	005b      	lsls	r3, r3, #1
 810200c:	fa02 f303 	lsl.w	r3, r2, r3
 8102010:	69ba      	ldr	r2, [r7, #24]
 8102012:	4313      	orrs	r3, r2
 8102014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	69ba      	ldr	r2, [r7, #24]
 810201a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	685b      	ldr	r3, [r3, #4]
 8102020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102022:	2201      	movs	r2, #1
 8102024:	69fb      	ldr	r3, [r7, #28]
 8102026:	fa02 f303 	lsl.w	r3, r2, r3
 810202a:	43db      	mvns	r3, r3
 810202c:	69ba      	ldr	r2, [r7, #24]
 810202e:	4013      	ands	r3, r2
 8102030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102032:	683b      	ldr	r3, [r7, #0]
 8102034:	685b      	ldr	r3, [r3, #4]
 8102036:	091b      	lsrs	r3, r3, #4
 8102038:	f003 0201 	and.w	r2, r3, #1
 810203c:	69fb      	ldr	r3, [r7, #28]
 810203e:	fa02 f303 	lsl.w	r3, r2, r3
 8102042:	69ba      	ldr	r2, [r7, #24]
 8102044:	4313      	orrs	r3, r2
 8102046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102048:	687b      	ldr	r3, [r7, #4]
 810204a:	69ba      	ldr	r2, [r7, #24]
 810204c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810204e:	683b      	ldr	r3, [r7, #0]
 8102050:	685b      	ldr	r3, [r3, #4]
 8102052:	f003 0303 	and.w	r3, r3, #3
 8102056:	2b03      	cmp	r3, #3
 8102058:	d017      	beq.n	810208a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	68db      	ldr	r3, [r3, #12]
 810205e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102060:	69fb      	ldr	r3, [r7, #28]
 8102062:	005b      	lsls	r3, r3, #1
 8102064:	2203      	movs	r2, #3
 8102066:	fa02 f303 	lsl.w	r3, r2, r3
 810206a:	43db      	mvns	r3, r3
 810206c:	69ba      	ldr	r2, [r7, #24]
 810206e:	4013      	ands	r3, r2
 8102070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102072:	683b      	ldr	r3, [r7, #0]
 8102074:	689a      	ldr	r2, [r3, #8]
 8102076:	69fb      	ldr	r3, [r7, #28]
 8102078:	005b      	lsls	r3, r3, #1
 810207a:	fa02 f303 	lsl.w	r3, r2, r3
 810207e:	69ba      	ldr	r2, [r7, #24]
 8102080:	4313      	orrs	r3, r2
 8102082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102084:	687b      	ldr	r3, [r7, #4]
 8102086:	69ba      	ldr	r2, [r7, #24]
 8102088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810208a:	683b      	ldr	r3, [r7, #0]
 810208c:	685b      	ldr	r3, [r3, #4]
 810208e:	f003 0303 	and.w	r3, r3, #3
 8102092:	2b02      	cmp	r3, #2
 8102094:	d123      	bne.n	81020de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102096:	69fb      	ldr	r3, [r7, #28]
 8102098:	08da      	lsrs	r2, r3, #3
 810209a:	687b      	ldr	r3, [r7, #4]
 810209c:	3208      	adds	r2, #8
 810209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81020a4:	69fb      	ldr	r3, [r7, #28]
 81020a6:	f003 0307 	and.w	r3, r3, #7
 81020aa:	009b      	lsls	r3, r3, #2
 81020ac:	220f      	movs	r2, #15
 81020ae:	fa02 f303 	lsl.w	r3, r2, r3
 81020b2:	43db      	mvns	r3, r3
 81020b4:	69ba      	ldr	r2, [r7, #24]
 81020b6:	4013      	ands	r3, r2
 81020b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81020ba:	683b      	ldr	r3, [r7, #0]
 81020bc:	691a      	ldr	r2, [r3, #16]
 81020be:	69fb      	ldr	r3, [r7, #28]
 81020c0:	f003 0307 	and.w	r3, r3, #7
 81020c4:	009b      	lsls	r3, r3, #2
 81020c6:	fa02 f303 	lsl.w	r3, r2, r3
 81020ca:	69ba      	ldr	r2, [r7, #24]
 81020cc:	4313      	orrs	r3, r2
 81020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81020d0:	69fb      	ldr	r3, [r7, #28]
 81020d2:	08da      	lsrs	r2, r3, #3
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	3208      	adds	r2, #8
 81020d8:	69b9      	ldr	r1, [r7, #24]
 81020da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81020de:	687b      	ldr	r3, [r7, #4]
 81020e0:	681b      	ldr	r3, [r3, #0]
 81020e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81020e4:	69fb      	ldr	r3, [r7, #28]
 81020e6:	005b      	lsls	r3, r3, #1
 81020e8:	2203      	movs	r2, #3
 81020ea:	fa02 f303 	lsl.w	r3, r2, r3
 81020ee:	43db      	mvns	r3, r3
 81020f0:	69ba      	ldr	r2, [r7, #24]
 81020f2:	4013      	ands	r3, r2
 81020f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81020f6:	683b      	ldr	r3, [r7, #0]
 81020f8:	685b      	ldr	r3, [r3, #4]
 81020fa:	f003 0203 	and.w	r2, r3, #3
 81020fe:	69fb      	ldr	r3, [r7, #28]
 8102100:	005b      	lsls	r3, r3, #1
 8102102:	fa02 f303 	lsl.w	r3, r2, r3
 8102106:	69ba      	ldr	r2, [r7, #24]
 8102108:	4313      	orrs	r3, r2
 810210a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	69ba      	ldr	r2, [r7, #24]
 8102110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102112:	683b      	ldr	r3, [r7, #0]
 8102114:	685b      	ldr	r3, [r3, #4]
 8102116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810211a:	2b00      	cmp	r3, #0
 810211c:	f000 80e0 	beq.w	81022e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102120:	4b2f      	ldr	r3, [pc, #188]	@ (81021e0 <HAL_GPIO_Init+0x238>)
 8102122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102126:	4a2e      	ldr	r2, [pc, #184]	@ (81021e0 <HAL_GPIO_Init+0x238>)
 8102128:	f043 0302 	orr.w	r3, r3, #2
 810212c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102130:	4b2b      	ldr	r3, [pc, #172]	@ (81021e0 <HAL_GPIO_Init+0x238>)
 8102132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102136:	f003 0302 	and.w	r3, r3, #2
 810213a:	60fb      	str	r3, [r7, #12]
 810213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810213e:	4a29      	ldr	r2, [pc, #164]	@ (81021e4 <HAL_GPIO_Init+0x23c>)
 8102140:	69fb      	ldr	r3, [r7, #28]
 8102142:	089b      	lsrs	r3, r3, #2
 8102144:	3302      	adds	r3, #2
 8102146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810214c:	69fb      	ldr	r3, [r7, #28]
 810214e:	f003 0303 	and.w	r3, r3, #3
 8102152:	009b      	lsls	r3, r3, #2
 8102154:	220f      	movs	r2, #15
 8102156:	fa02 f303 	lsl.w	r3, r2, r3
 810215a:	43db      	mvns	r3, r3
 810215c:	69ba      	ldr	r2, [r7, #24]
 810215e:	4013      	ands	r3, r2
 8102160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	4a20      	ldr	r2, [pc, #128]	@ (81021e8 <HAL_GPIO_Init+0x240>)
 8102166:	4293      	cmp	r3, r2
 8102168:	d052      	beq.n	8102210 <HAL_GPIO_Init+0x268>
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	4a1f      	ldr	r2, [pc, #124]	@ (81021ec <HAL_GPIO_Init+0x244>)
 810216e:	4293      	cmp	r3, r2
 8102170:	d031      	beq.n	81021d6 <HAL_GPIO_Init+0x22e>
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	4a1e      	ldr	r2, [pc, #120]	@ (81021f0 <HAL_GPIO_Init+0x248>)
 8102176:	4293      	cmp	r3, r2
 8102178:	d02b      	beq.n	81021d2 <HAL_GPIO_Init+0x22a>
 810217a:	687b      	ldr	r3, [r7, #4]
 810217c:	4a1d      	ldr	r2, [pc, #116]	@ (81021f4 <HAL_GPIO_Init+0x24c>)
 810217e:	4293      	cmp	r3, r2
 8102180:	d025      	beq.n	81021ce <HAL_GPIO_Init+0x226>
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	4a1c      	ldr	r2, [pc, #112]	@ (81021f8 <HAL_GPIO_Init+0x250>)
 8102186:	4293      	cmp	r3, r2
 8102188:	d01f      	beq.n	81021ca <HAL_GPIO_Init+0x222>
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	4a1b      	ldr	r2, [pc, #108]	@ (81021fc <HAL_GPIO_Init+0x254>)
 810218e:	4293      	cmp	r3, r2
 8102190:	d019      	beq.n	81021c6 <HAL_GPIO_Init+0x21e>
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	4a1a      	ldr	r2, [pc, #104]	@ (8102200 <HAL_GPIO_Init+0x258>)
 8102196:	4293      	cmp	r3, r2
 8102198:	d013      	beq.n	81021c2 <HAL_GPIO_Init+0x21a>
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	4a19      	ldr	r2, [pc, #100]	@ (8102204 <HAL_GPIO_Init+0x25c>)
 810219e:	4293      	cmp	r3, r2
 81021a0:	d00d      	beq.n	81021be <HAL_GPIO_Init+0x216>
 81021a2:	687b      	ldr	r3, [r7, #4]
 81021a4:	4a18      	ldr	r2, [pc, #96]	@ (8102208 <HAL_GPIO_Init+0x260>)
 81021a6:	4293      	cmp	r3, r2
 81021a8:	d007      	beq.n	81021ba <HAL_GPIO_Init+0x212>
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	4a17      	ldr	r2, [pc, #92]	@ (810220c <HAL_GPIO_Init+0x264>)
 81021ae:	4293      	cmp	r3, r2
 81021b0:	d101      	bne.n	81021b6 <HAL_GPIO_Init+0x20e>
 81021b2:	2309      	movs	r3, #9
 81021b4:	e02d      	b.n	8102212 <HAL_GPIO_Init+0x26a>
 81021b6:	230a      	movs	r3, #10
 81021b8:	e02b      	b.n	8102212 <HAL_GPIO_Init+0x26a>
 81021ba:	2308      	movs	r3, #8
 81021bc:	e029      	b.n	8102212 <HAL_GPIO_Init+0x26a>
 81021be:	2307      	movs	r3, #7
 81021c0:	e027      	b.n	8102212 <HAL_GPIO_Init+0x26a>
 81021c2:	2306      	movs	r3, #6
 81021c4:	e025      	b.n	8102212 <HAL_GPIO_Init+0x26a>
 81021c6:	2305      	movs	r3, #5
 81021c8:	e023      	b.n	8102212 <HAL_GPIO_Init+0x26a>
 81021ca:	2304      	movs	r3, #4
 81021cc:	e021      	b.n	8102212 <HAL_GPIO_Init+0x26a>
 81021ce:	2303      	movs	r3, #3
 81021d0:	e01f      	b.n	8102212 <HAL_GPIO_Init+0x26a>
 81021d2:	2302      	movs	r3, #2
 81021d4:	e01d      	b.n	8102212 <HAL_GPIO_Init+0x26a>
 81021d6:	2301      	movs	r3, #1
 81021d8:	e01b      	b.n	8102212 <HAL_GPIO_Init+0x26a>
 81021da:	bf00      	nop
 81021dc:	580000c0 	.word	0x580000c0
 81021e0:	58024400 	.word	0x58024400
 81021e4:	58000400 	.word	0x58000400
 81021e8:	58020000 	.word	0x58020000
 81021ec:	58020400 	.word	0x58020400
 81021f0:	58020800 	.word	0x58020800
 81021f4:	58020c00 	.word	0x58020c00
 81021f8:	58021000 	.word	0x58021000
 81021fc:	58021400 	.word	0x58021400
 8102200:	58021800 	.word	0x58021800
 8102204:	58021c00 	.word	0x58021c00
 8102208:	58022000 	.word	0x58022000
 810220c:	58022400 	.word	0x58022400
 8102210:	2300      	movs	r3, #0
 8102212:	69fa      	ldr	r2, [r7, #28]
 8102214:	f002 0203 	and.w	r2, r2, #3
 8102218:	0092      	lsls	r2, r2, #2
 810221a:	4093      	lsls	r3, r2
 810221c:	69ba      	ldr	r2, [r7, #24]
 810221e:	4313      	orrs	r3, r2
 8102220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102222:	4938      	ldr	r1, [pc, #224]	@ (8102304 <HAL_GPIO_Init+0x35c>)
 8102224:	69fb      	ldr	r3, [r7, #28]
 8102226:	089b      	lsrs	r3, r3, #2
 8102228:	3302      	adds	r3, #2
 810222a:	69ba      	ldr	r2, [r7, #24]
 810222c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102238:	693b      	ldr	r3, [r7, #16]
 810223a:	43db      	mvns	r3, r3
 810223c:	69ba      	ldr	r2, [r7, #24]
 810223e:	4013      	ands	r3, r2
 8102240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102242:	683b      	ldr	r3, [r7, #0]
 8102244:	685b      	ldr	r3, [r3, #4]
 8102246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810224a:	2b00      	cmp	r3, #0
 810224c:	d003      	beq.n	8102256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810224e:	69ba      	ldr	r2, [r7, #24]
 8102250:	693b      	ldr	r3, [r7, #16]
 8102252:	4313      	orrs	r3, r2
 8102254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810225a:	69bb      	ldr	r3, [r7, #24]
 810225c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810225e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102262:	685b      	ldr	r3, [r3, #4]
 8102264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102266:	693b      	ldr	r3, [r7, #16]
 8102268:	43db      	mvns	r3, r3
 810226a:	69ba      	ldr	r2, [r7, #24]
 810226c:	4013      	ands	r3, r2
 810226e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102270:	683b      	ldr	r3, [r7, #0]
 8102272:	685b      	ldr	r3, [r3, #4]
 8102274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102278:	2b00      	cmp	r3, #0
 810227a:	d003      	beq.n	8102284 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810227c:	69ba      	ldr	r2, [r7, #24]
 810227e:	693b      	ldr	r3, [r7, #16]
 8102280:	4313      	orrs	r3, r2
 8102282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102288:	69bb      	ldr	r3, [r7, #24]
 810228a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810228c:	697b      	ldr	r3, [r7, #20]
 810228e:	685b      	ldr	r3, [r3, #4]
 8102290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102292:	693b      	ldr	r3, [r7, #16]
 8102294:	43db      	mvns	r3, r3
 8102296:	69ba      	ldr	r2, [r7, #24]
 8102298:	4013      	ands	r3, r2
 810229a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810229c:	683b      	ldr	r3, [r7, #0]
 810229e:	685b      	ldr	r3, [r3, #4]
 81022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81022a4:	2b00      	cmp	r3, #0
 81022a6:	d003      	beq.n	81022b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81022a8:	69ba      	ldr	r2, [r7, #24]
 81022aa:	693b      	ldr	r3, [r7, #16]
 81022ac:	4313      	orrs	r3, r2
 81022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81022b0:	697b      	ldr	r3, [r7, #20]
 81022b2:	69ba      	ldr	r2, [r7, #24]
 81022b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81022b6:	697b      	ldr	r3, [r7, #20]
 81022b8:	681b      	ldr	r3, [r3, #0]
 81022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81022bc:	693b      	ldr	r3, [r7, #16]
 81022be:	43db      	mvns	r3, r3
 81022c0:	69ba      	ldr	r2, [r7, #24]
 81022c2:	4013      	ands	r3, r2
 81022c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81022c6:	683b      	ldr	r3, [r7, #0]
 81022c8:	685b      	ldr	r3, [r3, #4]
 81022ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81022ce:	2b00      	cmp	r3, #0
 81022d0:	d003      	beq.n	81022da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81022d2:	69ba      	ldr	r2, [r7, #24]
 81022d4:	693b      	ldr	r3, [r7, #16]
 81022d6:	4313      	orrs	r3, r2
 81022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81022da:	697b      	ldr	r3, [r7, #20]
 81022dc:	69ba      	ldr	r2, [r7, #24]
 81022de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81022e0:	69fb      	ldr	r3, [r7, #28]
 81022e2:	3301      	adds	r3, #1
 81022e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81022e6:	683b      	ldr	r3, [r7, #0]
 81022e8:	681a      	ldr	r2, [r3, #0]
 81022ea:	69fb      	ldr	r3, [r7, #28]
 81022ec:	fa22 f303 	lsr.w	r3, r2, r3
 81022f0:	2b00      	cmp	r3, #0
 81022f2:	f47f ae63 	bne.w	8101fbc <HAL_GPIO_Init+0x14>
  }
}
 81022f6:	bf00      	nop
 81022f8:	bf00      	nop
 81022fa:	3724      	adds	r7, #36	@ 0x24
 81022fc:	46bd      	mov	sp, r7
 81022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102302:	4770      	bx	lr
 8102304:	58000400 	.word	0x58000400

08102308 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102308:	b480      	push	{r7}
 810230a:	b083      	sub	sp, #12
 810230c:	af00      	add	r7, sp, #0
 810230e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102310:	4b05      	ldr	r3, [pc, #20]	@ (8102328 <HAL_HSEM_ActivateNotification+0x20>)
 8102312:	681a      	ldr	r2, [r3, #0]
 8102314:	4904      	ldr	r1, [pc, #16]	@ (8102328 <HAL_HSEM_ActivateNotification+0x20>)
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	4313      	orrs	r3, r2
 810231a:	600b      	str	r3, [r1, #0]
#endif
}
 810231c:	bf00      	nop
 810231e:	370c      	adds	r7, #12
 8102320:	46bd      	mov	sp, r7
 8102322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102326:	4770      	bx	lr
 8102328:	58026510 	.word	0x58026510

0810232c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 810232c:	b580      	push	{r7, lr}
 810232e:	b086      	sub	sp, #24
 8102330:	af02      	add	r7, sp, #8
 8102332:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8102334:	687b      	ldr	r3, [r7, #4]
 8102336:	2b00      	cmp	r3, #0
 8102338:	d101      	bne.n	810233e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 810233a:	2301      	movs	r3, #1
 810233c:	e0fe      	b.n	810253c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8102344:	b2db      	uxtb	r3, r3
 8102346:	2b00      	cmp	r3, #0
 8102348:	d106      	bne.n	8102358 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	2200      	movs	r2, #0
 810234e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8102352:	6878      	ldr	r0, [r7, #4]
 8102354:	f7fe ffe8 	bl	8101328 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	2203      	movs	r2, #3
 810235c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	4618      	mov	r0, r3
 8102366:	f004 fc0d 	bl	8106b84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810236a:	687b      	ldr	r3, [r7, #4]
 810236c:	6818      	ldr	r0, [r3, #0]
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	7c1a      	ldrb	r2, [r3, #16]
 8102372:	f88d 2000 	strb.w	r2, [sp]
 8102376:	3304      	adds	r3, #4
 8102378:	cb0e      	ldmia	r3, {r1, r2, r3}
 810237a:	f004 fb92 	bl	8106aa2 <USB_CoreInit>
 810237e:	4603      	mov	r3, r0
 8102380:	2b00      	cmp	r3, #0
 8102382:	d005      	beq.n	8102390 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102384:	687b      	ldr	r3, [r7, #4]
 8102386:	2202      	movs	r2, #2
 8102388:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810238c:	2301      	movs	r3, #1
 810238e:	e0d5      	b.n	810253c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	681b      	ldr	r3, [r3, #0]
 8102394:	2100      	movs	r1, #0
 8102396:	4618      	mov	r0, r3
 8102398:	f004 fc05 	bl	8106ba6 <USB_SetCurrentMode>
 810239c:	4603      	mov	r3, r0
 810239e:	2b00      	cmp	r3, #0
 81023a0:	d005      	beq.n	81023ae <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	2202      	movs	r2, #2
 81023a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81023aa:	2301      	movs	r3, #1
 81023ac:	e0c6      	b.n	810253c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81023ae:	2300      	movs	r3, #0
 81023b0:	73fb      	strb	r3, [r7, #15]
 81023b2:	e04a      	b.n	810244a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 81023b4:	7bfa      	ldrb	r2, [r7, #15]
 81023b6:	6879      	ldr	r1, [r7, #4]
 81023b8:	4613      	mov	r3, r2
 81023ba:	00db      	lsls	r3, r3, #3
 81023bc:	4413      	add	r3, r2
 81023be:	009b      	lsls	r3, r3, #2
 81023c0:	440b      	add	r3, r1
 81023c2:	3315      	adds	r3, #21
 81023c4:	2201      	movs	r2, #1
 81023c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 81023c8:	7bfa      	ldrb	r2, [r7, #15]
 81023ca:	6879      	ldr	r1, [r7, #4]
 81023cc:	4613      	mov	r3, r2
 81023ce:	00db      	lsls	r3, r3, #3
 81023d0:	4413      	add	r3, r2
 81023d2:	009b      	lsls	r3, r3, #2
 81023d4:	440b      	add	r3, r1
 81023d6:	3314      	adds	r3, #20
 81023d8:	7bfa      	ldrb	r2, [r7, #15]
 81023da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 81023dc:	7bfa      	ldrb	r2, [r7, #15]
 81023de:	7bfb      	ldrb	r3, [r7, #15]
 81023e0:	b298      	uxth	r0, r3
 81023e2:	6879      	ldr	r1, [r7, #4]
 81023e4:	4613      	mov	r3, r2
 81023e6:	00db      	lsls	r3, r3, #3
 81023e8:	4413      	add	r3, r2
 81023ea:	009b      	lsls	r3, r3, #2
 81023ec:	440b      	add	r3, r1
 81023ee:	332e      	adds	r3, #46	@ 0x2e
 81023f0:	4602      	mov	r2, r0
 81023f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81023f4:	7bfa      	ldrb	r2, [r7, #15]
 81023f6:	6879      	ldr	r1, [r7, #4]
 81023f8:	4613      	mov	r3, r2
 81023fa:	00db      	lsls	r3, r3, #3
 81023fc:	4413      	add	r3, r2
 81023fe:	009b      	lsls	r3, r3, #2
 8102400:	440b      	add	r3, r1
 8102402:	3318      	adds	r3, #24
 8102404:	2200      	movs	r2, #0
 8102406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8102408:	7bfa      	ldrb	r2, [r7, #15]
 810240a:	6879      	ldr	r1, [r7, #4]
 810240c:	4613      	mov	r3, r2
 810240e:	00db      	lsls	r3, r3, #3
 8102410:	4413      	add	r3, r2
 8102412:	009b      	lsls	r3, r3, #2
 8102414:	440b      	add	r3, r1
 8102416:	331c      	adds	r3, #28
 8102418:	2200      	movs	r2, #0
 810241a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 810241c:	7bfa      	ldrb	r2, [r7, #15]
 810241e:	6879      	ldr	r1, [r7, #4]
 8102420:	4613      	mov	r3, r2
 8102422:	00db      	lsls	r3, r3, #3
 8102424:	4413      	add	r3, r2
 8102426:	009b      	lsls	r3, r3, #2
 8102428:	440b      	add	r3, r1
 810242a:	3320      	adds	r3, #32
 810242c:	2200      	movs	r2, #0
 810242e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8102430:	7bfa      	ldrb	r2, [r7, #15]
 8102432:	6879      	ldr	r1, [r7, #4]
 8102434:	4613      	mov	r3, r2
 8102436:	00db      	lsls	r3, r3, #3
 8102438:	4413      	add	r3, r2
 810243a:	009b      	lsls	r3, r3, #2
 810243c:	440b      	add	r3, r1
 810243e:	3324      	adds	r3, #36	@ 0x24
 8102440:	2200      	movs	r2, #0
 8102442:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102444:	7bfb      	ldrb	r3, [r7, #15]
 8102446:	3301      	adds	r3, #1
 8102448:	73fb      	strb	r3, [r7, #15]
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	791b      	ldrb	r3, [r3, #4]
 810244e:	7bfa      	ldrb	r2, [r7, #15]
 8102450:	429a      	cmp	r2, r3
 8102452:	d3af      	bcc.n	81023b4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102454:	2300      	movs	r3, #0
 8102456:	73fb      	strb	r3, [r7, #15]
 8102458:	e044      	b.n	81024e4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 810245a:	7bfa      	ldrb	r2, [r7, #15]
 810245c:	6879      	ldr	r1, [r7, #4]
 810245e:	4613      	mov	r3, r2
 8102460:	00db      	lsls	r3, r3, #3
 8102462:	4413      	add	r3, r2
 8102464:	009b      	lsls	r3, r3, #2
 8102466:	440b      	add	r3, r1
 8102468:	f203 2355 	addw	r3, r3, #597	@ 0x255
 810246c:	2200      	movs	r2, #0
 810246e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8102470:	7bfa      	ldrb	r2, [r7, #15]
 8102472:	6879      	ldr	r1, [r7, #4]
 8102474:	4613      	mov	r3, r2
 8102476:	00db      	lsls	r3, r3, #3
 8102478:	4413      	add	r3, r2
 810247a:	009b      	lsls	r3, r3, #2
 810247c:	440b      	add	r3, r1
 810247e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8102482:	7bfa      	ldrb	r2, [r7, #15]
 8102484:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8102486:	7bfa      	ldrb	r2, [r7, #15]
 8102488:	6879      	ldr	r1, [r7, #4]
 810248a:	4613      	mov	r3, r2
 810248c:	00db      	lsls	r3, r3, #3
 810248e:	4413      	add	r3, r2
 8102490:	009b      	lsls	r3, r3, #2
 8102492:	440b      	add	r3, r1
 8102494:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8102498:	2200      	movs	r2, #0
 810249a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 810249c:	7bfa      	ldrb	r2, [r7, #15]
 810249e:	6879      	ldr	r1, [r7, #4]
 81024a0:	4613      	mov	r3, r2
 81024a2:	00db      	lsls	r3, r3, #3
 81024a4:	4413      	add	r3, r2
 81024a6:	009b      	lsls	r3, r3, #2
 81024a8:	440b      	add	r3, r1
 81024aa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 81024ae:	2200      	movs	r2, #0
 81024b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 81024b2:	7bfa      	ldrb	r2, [r7, #15]
 81024b4:	6879      	ldr	r1, [r7, #4]
 81024b6:	4613      	mov	r3, r2
 81024b8:	00db      	lsls	r3, r3, #3
 81024ba:	4413      	add	r3, r2
 81024bc:	009b      	lsls	r3, r3, #2
 81024be:	440b      	add	r3, r1
 81024c0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 81024c4:	2200      	movs	r2, #0
 81024c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 81024c8:	7bfa      	ldrb	r2, [r7, #15]
 81024ca:	6879      	ldr	r1, [r7, #4]
 81024cc:	4613      	mov	r3, r2
 81024ce:	00db      	lsls	r3, r3, #3
 81024d0:	4413      	add	r3, r2
 81024d2:	009b      	lsls	r3, r3, #2
 81024d4:	440b      	add	r3, r1
 81024d6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 81024da:	2200      	movs	r2, #0
 81024dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81024de:	7bfb      	ldrb	r3, [r7, #15]
 81024e0:	3301      	adds	r3, #1
 81024e2:	73fb      	strb	r3, [r7, #15]
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	791b      	ldrb	r3, [r3, #4]
 81024e8:	7bfa      	ldrb	r2, [r7, #15]
 81024ea:	429a      	cmp	r2, r3
 81024ec:	d3b5      	bcc.n	810245a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	6818      	ldr	r0, [r3, #0]
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	7c1a      	ldrb	r2, [r3, #16]
 81024f6:	f88d 2000 	strb.w	r2, [sp]
 81024fa:	3304      	adds	r3, #4
 81024fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 81024fe:	f004 fb9f 	bl	8106c40 <USB_DevInit>
 8102502:	4603      	mov	r3, r0
 8102504:	2b00      	cmp	r3, #0
 8102506:	d005      	beq.n	8102514 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	2202      	movs	r2, #2
 810250c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8102510:	2301      	movs	r3, #1
 8102512:	e013      	b.n	810253c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8102514:	687b      	ldr	r3, [r7, #4]
 8102516:	2200      	movs	r2, #0
 8102518:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 810251a:	687b      	ldr	r3, [r7, #4]
 810251c:	2201      	movs	r2, #1
 810251e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	7b1b      	ldrb	r3, [r3, #12]
 8102526:	2b01      	cmp	r3, #1
 8102528:	d102      	bne.n	8102530 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810252a:	6878      	ldr	r0, [r7, #4]
 810252c:	f000 f80a 	bl	8102544 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	681b      	ldr	r3, [r3, #0]
 8102534:	4618      	mov	r0, r3
 8102536:	f004 fd5a 	bl	8106fee <USB_DevDisconnect>

  return HAL_OK;
 810253a:	2300      	movs	r3, #0
}
 810253c:	4618      	mov	r0, r3
 810253e:	3710      	adds	r7, #16
 8102540:	46bd      	mov	sp, r7
 8102542:	bd80      	pop	{r7, pc}

08102544 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8102544:	b480      	push	{r7}
 8102546:	b085      	sub	sp, #20
 8102548:	af00      	add	r7, sp, #0
 810254a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810254c:	687b      	ldr	r3, [r7, #4]
 810254e:	681b      	ldr	r3, [r3, #0]
 8102550:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	2201      	movs	r2, #1
 8102556:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	2200      	movs	r2, #0
 810255e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8102562:	68fb      	ldr	r3, [r7, #12]
 8102564:	699b      	ldr	r3, [r3, #24]
 8102566:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 810256a:	68fb      	ldr	r3, [r7, #12]
 810256c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 810256e:	68fb      	ldr	r3, [r7, #12]
 8102570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8102576:	f043 0303 	orr.w	r3, r3, #3
 810257a:	68fa      	ldr	r2, [r7, #12]
 810257c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 810257e:	2300      	movs	r3, #0
}
 8102580:	4618      	mov	r0, r3
 8102582:	3714      	adds	r7, #20
 8102584:	46bd      	mov	sp, r7
 8102586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810258a:	4770      	bx	lr

0810258c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810258c:	b580      	push	{r7, lr}
 810258e:	b084      	sub	sp, #16
 8102590:	af00      	add	r7, sp, #0
 8102592:	60f8      	str	r0, [r7, #12]
 8102594:	460b      	mov	r3, r1
 8102596:	607a      	str	r2, [r7, #4]
 8102598:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810259a:	4b37      	ldr	r3, [pc, #220]	@ (8102678 <HAL_PWREx_EnterSTOPMode+0xec>)
 810259c:	681b      	ldr	r3, [r3, #0]
 810259e:	f023 0201 	bic.w	r2, r3, #1
 81025a2:	4935      	ldr	r1, [pc, #212]	@ (8102678 <HAL_PWREx_EnterSTOPMode+0xec>)
 81025a4:	68fb      	ldr	r3, [r7, #12]
 81025a6:	4313      	orrs	r3, r2
 81025a8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	2b00      	cmp	r3, #0
 81025ae:	d123      	bne.n	81025f8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81025b0:	f7ff fce8 	bl	8101f84 <HAL_GetCurrentCPUID>
 81025b4:	4603      	mov	r3, r0
 81025b6:	2b03      	cmp	r3, #3
 81025b8:	d158      	bne.n	810266c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81025ba:	4b2f      	ldr	r3, [pc, #188]	@ (8102678 <HAL_PWREx_EnterSTOPMode+0xec>)
 81025bc:	691b      	ldr	r3, [r3, #16]
 81025be:	4a2e      	ldr	r2, [pc, #184]	@ (8102678 <HAL_PWREx_EnterSTOPMode+0xec>)
 81025c0:	f023 0301 	bic.w	r3, r3, #1
 81025c4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81025c6:	4b2d      	ldr	r3, [pc, #180]	@ (810267c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81025c8:	691b      	ldr	r3, [r3, #16]
 81025ca:	4a2c      	ldr	r2, [pc, #176]	@ (810267c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81025cc:	f043 0304 	orr.w	r3, r3, #4
 81025d0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81025d2:	f3bf 8f4f 	dsb	sy
}
 81025d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81025d8:	f3bf 8f6f 	isb	sy
}
 81025dc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81025de:	7afb      	ldrb	r3, [r7, #11]
 81025e0:	2b01      	cmp	r3, #1
 81025e2:	d101      	bne.n	81025e8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81025e4:	bf30      	wfi
 81025e6:	e000      	b.n	81025ea <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81025e8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81025ea:	4b24      	ldr	r3, [pc, #144]	@ (810267c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81025ec:	691b      	ldr	r3, [r3, #16]
 81025ee:	4a23      	ldr	r2, [pc, #140]	@ (810267c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81025f0:	f023 0304 	bic.w	r3, r3, #4
 81025f4:	6113      	str	r3, [r2, #16]
 81025f6:	e03c      	b.n	8102672 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	2b01      	cmp	r3, #1
 81025fc:	d123      	bne.n	8102646 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81025fe:	f7ff fcc1 	bl	8101f84 <HAL_GetCurrentCPUID>
 8102602:	4603      	mov	r3, r0
 8102604:	2b01      	cmp	r3, #1
 8102606:	d133      	bne.n	8102670 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102608:	4b1b      	ldr	r3, [pc, #108]	@ (8102678 <HAL_PWREx_EnterSTOPMode+0xec>)
 810260a:	695b      	ldr	r3, [r3, #20]
 810260c:	4a1a      	ldr	r2, [pc, #104]	@ (8102678 <HAL_PWREx_EnterSTOPMode+0xec>)
 810260e:	f023 0302 	bic.w	r3, r3, #2
 8102612:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102614:	4b19      	ldr	r3, [pc, #100]	@ (810267c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102616:	691b      	ldr	r3, [r3, #16]
 8102618:	4a18      	ldr	r2, [pc, #96]	@ (810267c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810261a:	f043 0304 	orr.w	r3, r3, #4
 810261e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102620:	f3bf 8f4f 	dsb	sy
}
 8102624:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102626:	f3bf 8f6f 	isb	sy
}
 810262a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810262c:	7afb      	ldrb	r3, [r7, #11]
 810262e:	2b01      	cmp	r3, #1
 8102630:	d101      	bne.n	8102636 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102632:	bf30      	wfi
 8102634:	e000      	b.n	8102638 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102636:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102638:	4b10      	ldr	r3, [pc, #64]	@ (810267c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810263a:	691b      	ldr	r3, [r3, #16]
 810263c:	4a0f      	ldr	r2, [pc, #60]	@ (810267c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810263e:	f023 0304 	bic.w	r3, r3, #4
 8102642:	6113      	str	r3, [r2, #16]
 8102644:	e015      	b.n	8102672 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102646:	f7ff fc9d 	bl	8101f84 <HAL_GetCurrentCPUID>
 810264a:	4603      	mov	r3, r0
 810264c:	2b03      	cmp	r3, #3
 810264e:	d106      	bne.n	810265e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102650:	4b09      	ldr	r3, [pc, #36]	@ (8102678 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102652:	691b      	ldr	r3, [r3, #16]
 8102654:	4a08      	ldr	r2, [pc, #32]	@ (8102678 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102656:	f023 0304 	bic.w	r3, r3, #4
 810265a:	6113      	str	r3, [r2, #16]
 810265c:	e009      	b.n	8102672 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810265e:	4b06      	ldr	r3, [pc, #24]	@ (8102678 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102660:	695b      	ldr	r3, [r3, #20]
 8102662:	4a05      	ldr	r2, [pc, #20]	@ (8102678 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102664:	f023 0304 	bic.w	r3, r3, #4
 8102668:	6153      	str	r3, [r2, #20]
 810266a:	e002      	b.n	8102672 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810266c:	bf00      	nop
 810266e:	e000      	b.n	8102672 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102670:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102672:	3710      	adds	r7, #16
 8102674:	46bd      	mov	sp, r7
 8102676:	bd80      	pop	{r7, pc}
 8102678:	58024800 	.word	0x58024800
 810267c:	e000ed00 	.word	0xe000ed00

08102680 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102680:	b580      	push	{r7, lr}
 8102682:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102684:	f7ff fc7e 	bl	8101f84 <HAL_GetCurrentCPUID>
 8102688:	4603      	mov	r3, r0
 810268a:	2b03      	cmp	r3, #3
 810268c:	d101      	bne.n	8102692 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810268e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102690:	e001      	b.n	8102696 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102692:	bf40      	sev
    __WFE ();
 8102694:	bf20      	wfe
}
 8102696:	bf00      	nop
 8102698:	bd80      	pop	{r7, pc}
	...

0810269c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 810269c:	b480      	push	{r7}
 810269e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 81026a0:	4b05      	ldr	r3, [pc, #20]	@ (81026b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81026a2:	68db      	ldr	r3, [r3, #12]
 81026a4:	4a04      	ldr	r2, [pc, #16]	@ (81026b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81026a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81026aa:	60d3      	str	r3, [r2, #12]
}
 81026ac:	bf00      	nop
 81026ae:	46bd      	mov	sp, r7
 81026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026b4:	4770      	bx	lr
 81026b6:	bf00      	nop
 81026b8:	58024800 	.word	0x58024800

081026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81026bc:	b480      	push	{r7}
 81026be:	b089      	sub	sp, #36	@ 0x24
 81026c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81026c2:	4bb3      	ldr	r3, [pc, #716]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81026c4:	691b      	ldr	r3, [r3, #16]
 81026c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81026ca:	2b18      	cmp	r3, #24
 81026cc:	f200 8155 	bhi.w	810297a <HAL_RCC_GetSysClockFreq+0x2be>
 81026d0:	a201      	add	r2, pc, #4	@ (adr r2, 81026d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81026d6:	bf00      	nop
 81026d8:	0810273d 	.word	0x0810273d
 81026dc:	0810297b 	.word	0x0810297b
 81026e0:	0810297b 	.word	0x0810297b
 81026e4:	0810297b 	.word	0x0810297b
 81026e8:	0810297b 	.word	0x0810297b
 81026ec:	0810297b 	.word	0x0810297b
 81026f0:	0810297b 	.word	0x0810297b
 81026f4:	0810297b 	.word	0x0810297b
 81026f8:	08102763 	.word	0x08102763
 81026fc:	0810297b 	.word	0x0810297b
 8102700:	0810297b 	.word	0x0810297b
 8102704:	0810297b 	.word	0x0810297b
 8102708:	0810297b 	.word	0x0810297b
 810270c:	0810297b 	.word	0x0810297b
 8102710:	0810297b 	.word	0x0810297b
 8102714:	0810297b 	.word	0x0810297b
 8102718:	08102769 	.word	0x08102769
 810271c:	0810297b 	.word	0x0810297b
 8102720:	0810297b 	.word	0x0810297b
 8102724:	0810297b 	.word	0x0810297b
 8102728:	0810297b 	.word	0x0810297b
 810272c:	0810297b 	.word	0x0810297b
 8102730:	0810297b 	.word	0x0810297b
 8102734:	0810297b 	.word	0x0810297b
 8102738:	0810276f 	.word	0x0810276f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810273c:	4b94      	ldr	r3, [pc, #592]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	f003 0320 	and.w	r3, r3, #32
 8102744:	2b00      	cmp	r3, #0
 8102746:	d009      	beq.n	810275c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102748:	4b91      	ldr	r3, [pc, #580]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810274a:	681b      	ldr	r3, [r3, #0]
 810274c:	08db      	lsrs	r3, r3, #3
 810274e:	f003 0303 	and.w	r3, r3, #3
 8102752:	4a90      	ldr	r2, [pc, #576]	@ (8102994 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102754:	fa22 f303 	lsr.w	r3, r2, r3
 8102758:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810275a:	e111      	b.n	8102980 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810275c:	4b8d      	ldr	r3, [pc, #564]	@ (8102994 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810275e:	61bb      	str	r3, [r7, #24]
      break;
 8102760:	e10e      	b.n	8102980 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102762:	4b8d      	ldr	r3, [pc, #564]	@ (8102998 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102764:	61bb      	str	r3, [r7, #24]
      break;
 8102766:	e10b      	b.n	8102980 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102768:	4b8c      	ldr	r3, [pc, #560]	@ (810299c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810276a:	61bb      	str	r3, [r7, #24]
      break;
 810276c:	e108      	b.n	8102980 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810276e:	4b88      	ldr	r3, [pc, #544]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102772:	f003 0303 	and.w	r3, r3, #3
 8102776:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102778:	4b85      	ldr	r3, [pc, #532]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810277c:	091b      	lsrs	r3, r3, #4
 810277e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102782:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102784:	4b82      	ldr	r3, [pc, #520]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102788:	f003 0301 	and.w	r3, r3, #1
 810278c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810278e:	4b80      	ldr	r3, [pc, #512]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102792:	08db      	lsrs	r3, r3, #3
 8102794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102798:	68fa      	ldr	r2, [r7, #12]
 810279a:	fb02 f303 	mul.w	r3, r2, r3
 810279e:	ee07 3a90 	vmov	s15, r3
 81027a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81027a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81027aa:	693b      	ldr	r3, [r7, #16]
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	f000 80e1 	beq.w	8102974 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 81027b2:	697b      	ldr	r3, [r7, #20]
 81027b4:	2b02      	cmp	r3, #2
 81027b6:	f000 8083 	beq.w	81028c0 <HAL_RCC_GetSysClockFreq+0x204>
 81027ba:	697b      	ldr	r3, [r7, #20]
 81027bc:	2b02      	cmp	r3, #2
 81027be:	f200 80a1 	bhi.w	8102904 <HAL_RCC_GetSysClockFreq+0x248>
 81027c2:	697b      	ldr	r3, [r7, #20]
 81027c4:	2b00      	cmp	r3, #0
 81027c6:	d003      	beq.n	81027d0 <HAL_RCC_GetSysClockFreq+0x114>
 81027c8:	697b      	ldr	r3, [r7, #20]
 81027ca:	2b01      	cmp	r3, #1
 81027cc:	d056      	beq.n	810287c <HAL_RCC_GetSysClockFreq+0x1c0>
 81027ce:	e099      	b.n	8102904 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81027d0:	4b6f      	ldr	r3, [pc, #444]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	f003 0320 	and.w	r3, r3, #32
 81027d8:	2b00      	cmp	r3, #0
 81027da:	d02d      	beq.n	8102838 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81027dc:	4b6c      	ldr	r3, [pc, #432]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027de:	681b      	ldr	r3, [r3, #0]
 81027e0:	08db      	lsrs	r3, r3, #3
 81027e2:	f003 0303 	and.w	r3, r3, #3
 81027e6:	4a6b      	ldr	r2, [pc, #428]	@ (8102994 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81027e8:	fa22 f303 	lsr.w	r3, r2, r3
 81027ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	ee07 3a90 	vmov	s15, r3
 81027f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81027f8:	693b      	ldr	r3, [r7, #16]
 81027fa:	ee07 3a90 	vmov	s15, r3
 81027fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102806:	4b62      	ldr	r3, [pc, #392]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810280a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810280e:	ee07 3a90 	vmov	s15, r3
 8102812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102816:	ed97 6a02 	vldr	s12, [r7, #8]
 810281a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81029a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810281e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810282a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810282e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102832:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8102836:	e087      	b.n	8102948 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102838:	693b      	ldr	r3, [r7, #16]
 810283a:	ee07 3a90 	vmov	s15, r3
 810283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102842:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81029a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810284a:	4b51      	ldr	r3, [pc, #324]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810284e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102852:	ee07 3a90 	vmov	s15, r3
 8102856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810285a:	ed97 6a02 	vldr	s12, [r7, #8]
 810285e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81029a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810286a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810286e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810287a:	e065      	b.n	8102948 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810287c:	693b      	ldr	r3, [r7, #16]
 810287e:	ee07 3a90 	vmov	s15, r3
 8102882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102886:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81029a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 810288a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810288e:	4b40      	ldr	r3, [pc, #256]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102896:	ee07 3a90 	vmov	s15, r3
 810289a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810289e:	ed97 6a02 	vldr	s12, [r7, #8]
 81028a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81029a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81028b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81028be:	e043      	b.n	8102948 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81028c0:	693b      	ldr	r3, [r7, #16]
 81028c2:	ee07 3a90 	vmov	s15, r3
 81028c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81029ac <HAL_RCC_GetSysClockFreq+0x2f0>
 81028ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028d2:	4b2f      	ldr	r3, [pc, #188]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81028d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028da:	ee07 3a90 	vmov	s15, r3
 81028de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028e2:	ed97 6a02 	vldr	s12, [r7, #8]
 81028e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81029a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81028f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102902:	e021      	b.n	8102948 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102904:	693b      	ldr	r3, [r7, #16]
 8102906:	ee07 3a90 	vmov	s15, r3
 810290a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810290e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81029a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102916:	4b1e      	ldr	r3, [pc, #120]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810291a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810291e:	ee07 3a90 	vmov	s15, r3
 8102922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102926:	ed97 6a02 	vldr	s12, [r7, #8]
 810292a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81029a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810292e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810293a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102942:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102946:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102948:	4b11      	ldr	r3, [pc, #68]	@ (8102990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810294c:	0a5b      	lsrs	r3, r3, #9
 810294e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102952:	3301      	adds	r3, #1
 8102954:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8102956:	683b      	ldr	r3, [r7, #0]
 8102958:	ee07 3a90 	vmov	s15, r3
 810295c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102960:	edd7 6a07 	vldr	s13, [r7, #28]
 8102964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810296c:	ee17 3a90 	vmov	r3, s15
 8102970:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102972:	e005      	b.n	8102980 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102974:	2300      	movs	r3, #0
 8102976:	61bb      	str	r3, [r7, #24]
      break;
 8102978:	e002      	b.n	8102980 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810297a:	4b07      	ldr	r3, [pc, #28]	@ (8102998 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810297c:	61bb      	str	r3, [r7, #24]
      break;
 810297e:	bf00      	nop
  }

  return sysclockfreq;
 8102980:	69bb      	ldr	r3, [r7, #24]
}
 8102982:	4618      	mov	r0, r3
 8102984:	3724      	adds	r7, #36	@ 0x24
 8102986:	46bd      	mov	sp, r7
 8102988:	f85d 7b04 	ldr.w	r7, [sp], #4
 810298c:	4770      	bx	lr
 810298e:	bf00      	nop
 8102990:	58024400 	.word	0x58024400
 8102994:	03d09000 	.word	0x03d09000
 8102998:	003d0900 	.word	0x003d0900
 810299c:	017d7840 	.word	0x017d7840
 81029a0:	46000000 	.word	0x46000000
 81029a4:	4c742400 	.word	0x4c742400
 81029a8:	4a742400 	.word	0x4a742400
 81029ac:	4bbebc20 	.word	0x4bbebc20

081029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81029b0:	b580      	push	{r7, lr}
 81029b2:	b082      	sub	sp, #8
 81029b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81029b6:	f7ff fe81 	bl	81026bc <HAL_RCC_GetSysClockFreq>
 81029ba:	4602      	mov	r2, r0
 81029bc:	4b11      	ldr	r3, [pc, #68]	@ (8102a04 <HAL_RCC_GetHCLKFreq+0x54>)
 81029be:	699b      	ldr	r3, [r3, #24]
 81029c0:	0a1b      	lsrs	r3, r3, #8
 81029c2:	f003 030f 	and.w	r3, r3, #15
 81029c6:	4910      	ldr	r1, [pc, #64]	@ (8102a08 <HAL_RCC_GetHCLKFreq+0x58>)
 81029c8:	5ccb      	ldrb	r3, [r1, r3]
 81029ca:	f003 031f 	and.w	r3, r3, #31
 81029ce:	fa22 f303 	lsr.w	r3, r2, r3
 81029d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8102a04 <HAL_RCC_GetHCLKFreq+0x54>)
 81029d6:	699b      	ldr	r3, [r3, #24]
 81029d8:	f003 030f 	and.w	r3, r3, #15
 81029dc:	4a0a      	ldr	r2, [pc, #40]	@ (8102a08 <HAL_RCC_GetHCLKFreq+0x58>)
 81029de:	5cd3      	ldrb	r3, [r2, r3]
 81029e0:	f003 031f 	and.w	r3, r3, #31
 81029e4:	687a      	ldr	r2, [r7, #4]
 81029e6:	fa22 f303 	lsr.w	r3, r2, r3
 81029ea:	4a08      	ldr	r2, [pc, #32]	@ (8102a0c <HAL_RCC_GetHCLKFreq+0x5c>)
 81029ec:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81029ee:	4b07      	ldr	r3, [pc, #28]	@ (8102a0c <HAL_RCC_GetHCLKFreq+0x5c>)
 81029f0:	681b      	ldr	r3, [r3, #0]
 81029f2:	4a07      	ldr	r2, [pc, #28]	@ (8102a10 <HAL_RCC_GetHCLKFreq+0x60>)
 81029f4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81029f6:	4b05      	ldr	r3, [pc, #20]	@ (8102a0c <HAL_RCC_GetHCLKFreq+0x5c>)
 81029f8:	681b      	ldr	r3, [r3, #0]
}
 81029fa:	4618      	mov	r0, r3
 81029fc:	3708      	adds	r7, #8
 81029fe:	46bd      	mov	sp, r7
 8102a00:	bd80      	pop	{r7, pc}
 8102a02:	bf00      	nop
 8102a04:	58024400 	.word	0x58024400
 8102a08:	0810847c 	.word	0x0810847c
 8102a0c:	10000004 	.word	0x10000004
 8102a10:	10000000 	.word	0x10000000

08102a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102a14:	b580      	push	{r7, lr}
 8102a16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102a18:	f7ff ffca 	bl	81029b0 <HAL_RCC_GetHCLKFreq>
 8102a1c:	4602      	mov	r2, r0
 8102a1e:	4b06      	ldr	r3, [pc, #24]	@ (8102a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102a20:	69db      	ldr	r3, [r3, #28]
 8102a22:	091b      	lsrs	r3, r3, #4
 8102a24:	f003 0307 	and.w	r3, r3, #7
 8102a28:	4904      	ldr	r1, [pc, #16]	@ (8102a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8102a2a:	5ccb      	ldrb	r3, [r1, r3]
 8102a2c:	f003 031f 	and.w	r3, r3, #31
 8102a30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102a34:	4618      	mov	r0, r3
 8102a36:	bd80      	pop	{r7, pc}
 8102a38:	58024400 	.word	0x58024400
 8102a3c:	0810847c 	.word	0x0810847c

08102a40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8102a40:	b480      	push	{r7}
 8102a42:	b083      	sub	sp, #12
 8102a44:	af00      	add	r7, sp, #0
 8102a46:	6078      	str	r0, [r7, #4]
 8102a48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	223f      	movs	r2, #63	@ 0x3f
 8102a4e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8102a50:	4b1a      	ldr	r3, [pc, #104]	@ (8102abc <HAL_RCC_GetClockConfig+0x7c>)
 8102a52:	691b      	ldr	r3, [r3, #16]
 8102a54:	f003 0207 	and.w	r2, r3, #7
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8102a5c:	4b17      	ldr	r3, [pc, #92]	@ (8102abc <HAL_RCC_GetClockConfig+0x7c>)
 8102a5e:	699b      	ldr	r3, [r3, #24]
 8102a60:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8102a68:	4b14      	ldr	r3, [pc, #80]	@ (8102abc <HAL_RCC_GetClockConfig+0x7c>)
 8102a6a:	699b      	ldr	r3, [r3, #24]
 8102a6c:	f003 020f 	and.w	r2, r3, #15
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8102a74:	4b11      	ldr	r3, [pc, #68]	@ (8102abc <HAL_RCC_GetClockConfig+0x7c>)
 8102a76:	699b      	ldr	r3, [r3, #24]
 8102a78:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8102a80:	4b0e      	ldr	r3, [pc, #56]	@ (8102abc <HAL_RCC_GetClockConfig+0x7c>)
 8102a82:	69db      	ldr	r3, [r3, #28]
 8102a84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8102a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8102abc <HAL_RCC_GetClockConfig+0x7c>)
 8102a8e:	69db      	ldr	r3, [r3, #28]
 8102a90:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8102a98:	4b08      	ldr	r3, [pc, #32]	@ (8102abc <HAL_RCC_GetClockConfig+0x7c>)
 8102a9a:	6a1b      	ldr	r3, [r3, #32]
 8102a9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102aa0:	687b      	ldr	r3, [r7, #4]
 8102aa2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8102aa4:	4b06      	ldr	r3, [pc, #24]	@ (8102ac0 <HAL_RCC_GetClockConfig+0x80>)
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	f003 020f 	and.w	r2, r3, #15
 8102aac:	683b      	ldr	r3, [r7, #0]
 8102aae:	601a      	str	r2, [r3, #0]
}
 8102ab0:	bf00      	nop
 8102ab2:	370c      	adds	r7, #12
 8102ab4:	46bd      	mov	sp, r7
 8102ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aba:	4770      	bx	lr
 8102abc:	58024400 	.word	0x58024400
 8102ac0:	52002000 	.word	0x52002000

08102ac4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102ac8:	b0cc      	sub	sp, #304	@ 0x130
 8102aca:	af00      	add	r7, sp, #0
 8102acc:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102ad0:	2300      	movs	r3, #0
 8102ad2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102ad6:	2300      	movs	r3, #0
 8102ad8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ae4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102ae8:	2500      	movs	r5, #0
 8102aea:	ea54 0305 	orrs.w	r3, r4, r5
 8102aee:	d049      	beq.n	8102b84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102af6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102afa:	d02f      	beq.n	8102b5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102afc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102b00:	d828      	bhi.n	8102b54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102b02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102b06:	d01a      	beq.n	8102b3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102b08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102b0c:	d822      	bhi.n	8102b54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102b0e:	2b00      	cmp	r3, #0
 8102b10:	d003      	beq.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8102b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102b16:	d007      	beq.n	8102b28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102b18:	e01c      	b.n	8102b54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b1a:	4bb8      	ldr	r3, [pc, #736]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b1e:	4ab7      	ldr	r2, [pc, #732]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102b26:	e01a      	b.n	8102b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b2c:	3308      	adds	r3, #8
 8102b2e:	2102      	movs	r1, #2
 8102b30:	4618      	mov	r0, r3
 8102b32:	f002 fba1 	bl	8105278 <RCCEx_PLL2_Config>
 8102b36:	4603      	mov	r3, r0
 8102b38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102b3c:	e00f      	b.n	8102b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b42:	3328      	adds	r3, #40	@ 0x28
 8102b44:	2102      	movs	r1, #2
 8102b46:	4618      	mov	r0, r3
 8102b48:	f002 fc48 	bl	81053dc <RCCEx_PLL3_Config>
 8102b4c:	4603      	mov	r3, r0
 8102b4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102b52:	e004      	b.n	8102b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b54:	2301      	movs	r3, #1
 8102b56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102b5a:	e000      	b.n	8102b5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102b62:	2b00      	cmp	r3, #0
 8102b64:	d10a      	bne.n	8102b7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102b66:	4ba5      	ldr	r3, [pc, #660]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102b74:	4aa1      	ldr	r2, [pc, #644]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b76:	430b      	orrs	r3, r1
 8102b78:	6513      	str	r3, [r2, #80]	@ 0x50
 8102b7a:	e003      	b.n	8102b84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102b80:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b8c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8102b90:	f04f 0900 	mov.w	r9, #0
 8102b94:	ea58 0309 	orrs.w	r3, r8, r9
 8102b98:	d047      	beq.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8102b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102ba0:	2b04      	cmp	r3, #4
 8102ba2:	d82a      	bhi.n	8102bfa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8102ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8102bac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8102ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102baa:	bf00      	nop
 8102bac:	08102bc1 	.word	0x08102bc1
 8102bb0:	08102bcf 	.word	0x08102bcf
 8102bb4:	08102be5 	.word	0x08102be5
 8102bb8:	08102c03 	.word	0x08102c03
 8102bbc:	08102c03 	.word	0x08102c03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102bc0:	4b8e      	ldr	r3, [pc, #568]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102bc4:	4a8d      	ldr	r2, [pc, #564]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102bcc:	e01a      	b.n	8102c04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102bd2:	3308      	adds	r3, #8
 8102bd4:	2100      	movs	r1, #0
 8102bd6:	4618      	mov	r0, r3
 8102bd8:	f002 fb4e 	bl	8105278 <RCCEx_PLL2_Config>
 8102bdc:	4603      	mov	r3, r0
 8102bde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102be2:	e00f      	b.n	8102c04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102be8:	3328      	adds	r3, #40	@ 0x28
 8102bea:	2100      	movs	r1, #0
 8102bec:	4618      	mov	r0, r3
 8102bee:	f002 fbf5 	bl	81053dc <RCCEx_PLL3_Config>
 8102bf2:	4603      	mov	r3, r0
 8102bf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102bf8:	e004      	b.n	8102c04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102bfa:	2301      	movs	r3, #1
 8102bfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102c00:	e000      	b.n	8102c04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8102c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102c08:	2b00      	cmp	r3, #0
 8102c0a:	d10a      	bne.n	8102c22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102c0c:	4b7b      	ldr	r3, [pc, #492]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102c10:	f023 0107 	bic.w	r1, r3, #7
 8102c14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102c1a:	4a78      	ldr	r2, [pc, #480]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c1c:	430b      	orrs	r3, r1
 8102c1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8102c20:	e003      	b.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102c26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c32:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8102c36:	f04f 0b00 	mov.w	fp, #0
 8102c3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8102c3e:	d04c      	beq.n	8102cda <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8102c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102c4a:	d030      	beq.n	8102cae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102c50:	d829      	bhi.n	8102ca6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102c52:	2bc0      	cmp	r3, #192	@ 0xc0
 8102c54:	d02d      	beq.n	8102cb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8102c56:	2bc0      	cmp	r3, #192	@ 0xc0
 8102c58:	d825      	bhi.n	8102ca6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102c5a:	2b80      	cmp	r3, #128	@ 0x80
 8102c5c:	d018      	beq.n	8102c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8102c5e:	2b80      	cmp	r3, #128	@ 0x80
 8102c60:	d821      	bhi.n	8102ca6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102c62:	2b00      	cmp	r3, #0
 8102c64:	d002      	beq.n	8102c6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8102c66:	2b40      	cmp	r3, #64	@ 0x40
 8102c68:	d007      	beq.n	8102c7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8102c6a:	e01c      	b.n	8102ca6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c6c:	4b63      	ldr	r3, [pc, #396]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c70:	4a62      	ldr	r2, [pc, #392]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102c78:	e01c      	b.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c7e:	3308      	adds	r3, #8
 8102c80:	2100      	movs	r1, #0
 8102c82:	4618      	mov	r0, r3
 8102c84:	f002 faf8 	bl	8105278 <RCCEx_PLL2_Config>
 8102c88:	4603      	mov	r3, r0
 8102c8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102c8e:	e011      	b.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102c90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c94:	3328      	adds	r3, #40	@ 0x28
 8102c96:	2100      	movs	r1, #0
 8102c98:	4618      	mov	r0, r3
 8102c9a:	f002 fb9f 	bl	81053dc <RCCEx_PLL3_Config>
 8102c9e:	4603      	mov	r3, r0
 8102ca0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102ca4:	e006      	b.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102ca6:	2301      	movs	r3, #1
 8102ca8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102cac:	e002      	b.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102cae:	bf00      	nop
 8102cb0:	e000      	b.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102cb4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102cb8:	2b00      	cmp	r3, #0
 8102cba:	d10a      	bne.n	8102cd2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102cbc:	4b4f      	ldr	r3, [pc, #316]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102cc0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8102cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102cca:	4a4c      	ldr	r2, [pc, #304]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102ccc:	430b      	orrs	r3, r1
 8102cce:	6513      	str	r3, [r2, #80]	@ 0x50
 8102cd0:	e003      	b.n	8102cda <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102cd6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ce2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8102ce6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8102cea:	2300      	movs	r3, #0
 8102cec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8102cf0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8102cf4:	460b      	mov	r3, r1
 8102cf6:	4313      	orrs	r3, r2
 8102cf8:	d053      	beq.n	8102da2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8102cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102cfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102d02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102d06:	d035      	beq.n	8102d74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102d08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102d0c:	d82e      	bhi.n	8102d6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102d0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102d12:	d031      	beq.n	8102d78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8102d14:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102d18:	d828      	bhi.n	8102d6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102d1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102d1e:	d01a      	beq.n	8102d56 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8102d20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102d24:	d822      	bhi.n	8102d6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102d26:	2b00      	cmp	r3, #0
 8102d28:	d003      	beq.n	8102d32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8102d2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102d2e:	d007      	beq.n	8102d40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8102d30:	e01c      	b.n	8102d6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d32:	4b32      	ldr	r3, [pc, #200]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d36:	4a31      	ldr	r2, [pc, #196]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102d3e:	e01c      	b.n	8102d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d44:	3308      	adds	r3, #8
 8102d46:	2100      	movs	r1, #0
 8102d48:	4618      	mov	r0, r3
 8102d4a:	f002 fa95 	bl	8105278 <RCCEx_PLL2_Config>
 8102d4e:	4603      	mov	r3, r0
 8102d50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102d54:	e011      	b.n	8102d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d5a:	3328      	adds	r3, #40	@ 0x28
 8102d5c:	2100      	movs	r1, #0
 8102d5e:	4618      	mov	r0, r3
 8102d60:	f002 fb3c 	bl	81053dc <RCCEx_PLL3_Config>
 8102d64:	4603      	mov	r3, r0
 8102d66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102d6a:	e006      	b.n	8102d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102d6c:	2301      	movs	r3, #1
 8102d6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102d72:	e002      	b.n	8102d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102d74:	bf00      	nop
 8102d76:	e000      	b.n	8102d7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102d7e:	2b00      	cmp	r3, #0
 8102d80:	d10b      	bne.n	8102d9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102d82:	4b1e      	ldr	r3, [pc, #120]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102d86:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8102d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102d92:	4a1a      	ldr	r2, [pc, #104]	@ (8102dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102d94:	430b      	orrs	r3, r1
 8102d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8102d98:	e003      	b.n	8102da2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102d9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102daa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8102dae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8102db2:	2300      	movs	r3, #0
 8102db4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8102db8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8102dbc:	460b      	mov	r3, r1
 8102dbe:	4313      	orrs	r3, r2
 8102dc0:	d056      	beq.n	8102e70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8102dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102dc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102dca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102dce:	d038      	beq.n	8102e42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8102dd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102dd4:	d831      	bhi.n	8102e3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102dd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102dda:	d034      	beq.n	8102e46 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8102ddc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102de0:	d82b      	bhi.n	8102e3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102de2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102de6:	d01d      	beq.n	8102e24 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102de8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102dec:	d825      	bhi.n	8102e3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102dee:	2b00      	cmp	r3, #0
 8102df0:	d006      	beq.n	8102e00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8102df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102df6:	d00a      	beq.n	8102e0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102df8:	e01f      	b.n	8102e3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102dfa:	bf00      	nop
 8102dfc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e00:	4ba2      	ldr	r3, [pc, #648]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102e04:	4aa1      	ldr	r2, [pc, #644]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102e0c:	e01c      	b.n	8102e48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e12:	3308      	adds	r3, #8
 8102e14:	2100      	movs	r1, #0
 8102e16:	4618      	mov	r0, r3
 8102e18:	f002 fa2e 	bl	8105278 <RCCEx_PLL2_Config>
 8102e1c:	4603      	mov	r3, r0
 8102e1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102e22:	e011      	b.n	8102e48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e28:	3328      	adds	r3, #40	@ 0x28
 8102e2a:	2100      	movs	r1, #0
 8102e2c:	4618      	mov	r0, r3
 8102e2e:	f002 fad5 	bl	81053dc <RCCEx_PLL3_Config>
 8102e32:	4603      	mov	r3, r0
 8102e34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102e38:	e006      	b.n	8102e48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102e3a:	2301      	movs	r3, #1
 8102e3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102e40:	e002      	b.n	8102e48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102e42:	bf00      	nop
 8102e44:	e000      	b.n	8102e48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e48:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102e4c:	2b00      	cmp	r3, #0
 8102e4e:	d10b      	bne.n	8102e68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102e50:	4b8e      	ldr	r3, [pc, #568]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102e54:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8102e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102e60:	4a8a      	ldr	r2, [pc, #552]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e62:	430b      	orrs	r3, r1
 8102e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8102e66:	e003      	b.n	8102e70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102e6c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e78:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8102e7c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8102e80:	2300      	movs	r3, #0
 8102e82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8102e86:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8102e8a:	460b      	mov	r3, r1
 8102e8c:	4313      	orrs	r3, r2
 8102e8e:	d03a      	beq.n	8102f06 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8102e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102e96:	2b30      	cmp	r3, #48	@ 0x30
 8102e98:	d01f      	beq.n	8102eda <HAL_RCCEx_PeriphCLKConfig+0x416>
 8102e9a:	2b30      	cmp	r3, #48	@ 0x30
 8102e9c:	d819      	bhi.n	8102ed2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102e9e:	2b20      	cmp	r3, #32
 8102ea0:	d00c      	beq.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8102ea2:	2b20      	cmp	r3, #32
 8102ea4:	d815      	bhi.n	8102ed2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102ea6:	2b00      	cmp	r3, #0
 8102ea8:	d019      	beq.n	8102ede <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8102eaa:	2b10      	cmp	r3, #16
 8102eac:	d111      	bne.n	8102ed2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102eae:	4b77      	ldr	r3, [pc, #476]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102eb2:	4a76      	ldr	r2, [pc, #472]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102eba:	e011      	b.n	8102ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102ebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ec0:	3308      	adds	r3, #8
 8102ec2:	2102      	movs	r1, #2
 8102ec4:	4618      	mov	r0, r3
 8102ec6:	f002 f9d7 	bl	8105278 <RCCEx_PLL2_Config>
 8102eca:	4603      	mov	r3, r0
 8102ecc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102ed0:	e006      	b.n	8102ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102ed2:	2301      	movs	r3, #1
 8102ed4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102ed8:	e002      	b.n	8102ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102eda:	bf00      	nop
 8102edc:	e000      	b.n	8102ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ee0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d10a      	bne.n	8102efe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102ee8:	4b68      	ldr	r3, [pc, #416]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102eec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8102ef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102ef6:	4a65      	ldr	r2, [pc, #404]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102ef8:	430b      	orrs	r3, r1
 8102efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102efc:	e003      	b.n	8102f06 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102efe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102f02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102f06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f0e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8102f12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8102f16:	2300      	movs	r3, #0
 8102f18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8102f1c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8102f20:	460b      	mov	r3, r1
 8102f22:	4313      	orrs	r3, r2
 8102f24:	d051      	beq.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8102f26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102f30:	d035      	beq.n	8102f9e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8102f32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102f36:	d82e      	bhi.n	8102f96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102f38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102f3c:	d031      	beq.n	8102fa2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8102f3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102f42:	d828      	bhi.n	8102f96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102f48:	d01a      	beq.n	8102f80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8102f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102f4e:	d822      	bhi.n	8102f96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	d003      	beq.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8102f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102f58:	d007      	beq.n	8102f6a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8102f5a:	e01c      	b.n	8102f96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f5c:	4b4b      	ldr	r3, [pc, #300]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f60:	4a4a      	ldr	r2, [pc, #296]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102f68:	e01c      	b.n	8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f6e:	3308      	adds	r3, #8
 8102f70:	2100      	movs	r1, #0
 8102f72:	4618      	mov	r0, r3
 8102f74:	f002 f980 	bl	8105278 <RCCEx_PLL2_Config>
 8102f78:	4603      	mov	r3, r0
 8102f7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102f7e:	e011      	b.n	8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f84:	3328      	adds	r3, #40	@ 0x28
 8102f86:	2100      	movs	r1, #0
 8102f88:	4618      	mov	r0, r3
 8102f8a:	f002 fa27 	bl	81053dc <RCCEx_PLL3_Config>
 8102f8e:	4603      	mov	r3, r0
 8102f90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102f94:	e006      	b.n	8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102f96:	2301      	movs	r3, #1
 8102f98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102f9c:	e002      	b.n	8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102f9e:	bf00      	nop
 8102fa0:	e000      	b.n	8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102fa4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102fa8:	2b00      	cmp	r3, #0
 8102faa:	d10a      	bne.n	8102fc2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102fac:	4b37      	ldr	r3, [pc, #220]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102fb0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8102fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102fba:	4a34      	ldr	r2, [pc, #208]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102fbc:	430b      	orrs	r3, r1
 8102fbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8102fc0:	e003      	b.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102fc6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fd2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8102fd6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8102fda:	2300      	movs	r3, #0
 8102fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8102fe0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8102fe4:	460b      	mov	r3, r1
 8102fe6:	4313      	orrs	r3, r2
 8102fe8:	d056      	beq.n	8103098 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8102fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102ff4:	d033      	beq.n	810305e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102ff6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102ffa:	d82c      	bhi.n	8103056 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102ffc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103000:	d02f      	beq.n	8103062 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103002:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103006:	d826      	bhi.n	8103056 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103008:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810300c:	d02b      	beq.n	8103066 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810300e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103012:	d820      	bhi.n	8103056 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103018:	d012      	beq.n	8103040 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810301a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810301e:	d81a      	bhi.n	8103056 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103020:	2b00      	cmp	r3, #0
 8103022:	d022      	beq.n	810306a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103028:	d115      	bne.n	8103056 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810302a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810302e:	3308      	adds	r3, #8
 8103030:	2101      	movs	r1, #1
 8103032:	4618      	mov	r0, r3
 8103034:	f002 f920 	bl	8105278 <RCCEx_PLL2_Config>
 8103038:	4603      	mov	r3, r0
 810303a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810303e:	e015      	b.n	810306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103044:	3328      	adds	r3, #40	@ 0x28
 8103046:	2101      	movs	r1, #1
 8103048:	4618      	mov	r0, r3
 810304a:	f002 f9c7 	bl	81053dc <RCCEx_PLL3_Config>
 810304e:	4603      	mov	r3, r0
 8103050:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103054:	e00a      	b.n	810306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103056:	2301      	movs	r3, #1
 8103058:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810305c:	e006      	b.n	810306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810305e:	bf00      	nop
 8103060:	e004      	b.n	810306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103062:	bf00      	nop
 8103064:	e002      	b.n	810306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103066:	bf00      	nop
 8103068:	e000      	b.n	810306c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810306a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810306c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103070:	2b00      	cmp	r3, #0
 8103072:	d10d      	bne.n	8103090 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103074:	4b05      	ldr	r3, [pc, #20]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103078:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810307c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103080:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103082:	4a02      	ldr	r2, [pc, #8]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103084:	430b      	orrs	r3, r1
 8103086:	6513      	str	r3, [r2, #80]	@ 0x50
 8103088:	e006      	b.n	8103098 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810308a:	bf00      	nop
 810308c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103090:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103094:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103098:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81030a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 81030a8:	2300      	movs	r3, #0
 81030aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 81030ae:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 81030b2:	460b      	mov	r3, r1
 81030b4:	4313      	orrs	r3, r2
 81030b6:	d055      	beq.n	8103164 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81030b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81030c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81030c4:	d033      	beq.n	810312e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81030c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81030ca:	d82c      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81030d0:	d02f      	beq.n	8103132 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81030d6:	d826      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81030d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81030dc:	d02b      	beq.n	8103136 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81030de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81030e2:	d820      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81030e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81030e8:	d012      	beq.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81030ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81030ee:	d81a      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81030f0:	2b00      	cmp	r3, #0
 81030f2:	d022      	beq.n	810313a <HAL_RCCEx_PeriphCLKConfig+0x676>
 81030f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81030f8:	d115      	bne.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81030fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030fe:	3308      	adds	r3, #8
 8103100:	2101      	movs	r1, #1
 8103102:	4618      	mov	r0, r3
 8103104:	f002 f8b8 	bl	8105278 <RCCEx_PLL2_Config>
 8103108:	4603      	mov	r3, r0
 810310a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810310e:	e015      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103114:	3328      	adds	r3, #40	@ 0x28
 8103116:	2101      	movs	r1, #1
 8103118:	4618      	mov	r0, r3
 810311a:	f002 f95f 	bl	81053dc <RCCEx_PLL3_Config>
 810311e:	4603      	mov	r3, r0
 8103120:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103124:	e00a      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103126:	2301      	movs	r3, #1
 8103128:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810312c:	e006      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810312e:	bf00      	nop
 8103130:	e004      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103132:	bf00      	nop
 8103134:	e002      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103136:	bf00      	nop
 8103138:	e000      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810313a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810313c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103140:	2b00      	cmp	r3, #0
 8103142:	d10b      	bne.n	810315c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103144:	4bb7      	ldr	r3, [pc, #732]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103148:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810314c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103150:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103154:	4ab3      	ldr	r2, [pc, #716]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103156:	430b      	orrs	r3, r1
 8103158:	6593      	str	r3, [r2, #88]	@ 0x58
 810315a:	e003      	b.n	8103164 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810315c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103160:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8103164:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103168:	e9d3 2300 	ldrd	r2, r3, [r3]
 810316c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8103170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8103174:	2300      	movs	r3, #0
 8103176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810317a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810317e:	460b      	mov	r3, r1
 8103180:	4313      	orrs	r3, r2
 8103182:	d02a      	beq.n	81031da <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8103184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810318a:	2b00      	cmp	r3, #0
 810318c:	d011      	beq.n	81031b2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810318e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103192:	d10a      	bne.n	81031aa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103194:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103198:	3308      	adds	r3, #8
 810319a:	2101      	movs	r1, #1
 810319c:	4618      	mov	r0, r3
 810319e:	f002 f86b 	bl	8105278 <RCCEx_PLL2_Config>
 81031a2:	4603      	mov	r3, r0
 81031a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 81031a8:	e004      	b.n	81031b4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81031aa:	2301      	movs	r3, #1
 81031ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81031b0:	e000      	b.n	81031b4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 81031b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81031b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81031b8:	2b00      	cmp	r3, #0
 81031ba:	d10a      	bne.n	81031d2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 81031bc:	4b99      	ldr	r3, [pc, #612]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81031be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81031c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81031c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81031ca:	4a96      	ldr	r2, [pc, #600]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81031cc:	430b      	orrs	r3, r1
 81031ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81031d0:	e003      	b.n	81031da <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81031d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81031da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031e2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81031e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81031ea:	2300      	movs	r3, #0
 81031ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81031f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81031f4:	460b      	mov	r3, r1
 81031f6:	4313      	orrs	r3, r2
 81031f8:	d037      	beq.n	810326a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81031fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103204:	d00e      	beq.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8103206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810320a:	d816      	bhi.n	810323a <HAL_RCCEx_PeriphCLKConfig+0x776>
 810320c:	2b00      	cmp	r3, #0
 810320e:	d018      	beq.n	8103242 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8103210:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103214:	d111      	bne.n	810323a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103216:	4b83      	ldr	r3, [pc, #524]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810321a:	4a82      	ldr	r2, [pc, #520]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810321c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103222:	e00f      	b.n	8103244 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103224:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103228:	3308      	adds	r3, #8
 810322a:	2101      	movs	r1, #1
 810322c:	4618      	mov	r0, r3
 810322e:	f002 f823 	bl	8105278 <RCCEx_PLL2_Config>
 8103232:	4603      	mov	r3, r0
 8103234:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103238:	e004      	b.n	8103244 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810323a:	2301      	movs	r3, #1
 810323c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103240:	e000      	b.n	8103244 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8103242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103244:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103248:	2b00      	cmp	r3, #0
 810324a:	d10a      	bne.n	8103262 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810324c:	4b75      	ldr	r3, [pc, #468]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810324e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103250:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103254:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810325a:	4a72      	ldr	r2, [pc, #456]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810325c:	430b      	orrs	r3, r1
 810325e:	6513      	str	r3, [r2, #80]	@ 0x50
 8103260:	e003      	b.n	810326a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103262:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103266:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810326a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103272:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8103276:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810327a:	2300      	movs	r3, #0
 810327c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103280:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8103284:	460b      	mov	r3, r1
 8103286:	4313      	orrs	r3, r2
 8103288:	d03a      	beq.n	8103300 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810328a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810328e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103290:	2b03      	cmp	r3, #3
 8103292:	d81d      	bhi.n	81032d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8103294:	a201      	add	r2, pc, #4	@ (adr r2, 810329c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8103296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810329a:	bf00      	nop
 810329c:	081032d9 	.word	0x081032d9
 81032a0:	081032ad 	.word	0x081032ad
 81032a4:	081032bb 	.word	0x081032bb
 81032a8:	081032d9 	.word	0x081032d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032ac:	4b5d      	ldr	r3, [pc, #372]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81032b0:	4a5c      	ldr	r2, [pc, #368]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81032b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81032b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81032b8:	e00f      	b.n	81032da <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81032ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032be:	3308      	adds	r3, #8
 81032c0:	2102      	movs	r1, #2
 81032c2:	4618      	mov	r0, r3
 81032c4:	f001 ffd8 	bl	8105278 <RCCEx_PLL2_Config>
 81032c8:	4603      	mov	r3, r0
 81032ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 81032ce:	e004      	b.n	81032da <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81032d0:	2301      	movs	r3, #1
 81032d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81032d6:	e000      	b.n	81032da <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 81032d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81032da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81032de:	2b00      	cmp	r3, #0
 81032e0:	d10a      	bne.n	81032f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81032e2:	4b50      	ldr	r3, [pc, #320]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81032e6:	f023 0103 	bic.w	r1, r3, #3
 81032ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81032f0:	4a4c      	ldr	r2, [pc, #304]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81032f2:	430b      	orrs	r3, r1
 81032f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81032f6:	e003      	b.n	8103300 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81032fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103308:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810330c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8103310:	2300      	movs	r3, #0
 8103312:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8103316:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810331a:	460b      	mov	r3, r1
 810331c:	4313      	orrs	r3, r2
 810331e:	f000 80a0 	beq.w	8103462 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103322:	4b41      	ldr	r3, [pc, #260]	@ (8103428 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103324:	681b      	ldr	r3, [r3, #0]
 8103326:	4a40      	ldr	r2, [pc, #256]	@ (8103428 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810332c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810332e:	f7fe fbaf 	bl	8101a90 <HAL_GetTick>
 8103332:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103336:	e00b      	b.n	8103350 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103338:	f7fe fbaa 	bl	8101a90 <HAL_GetTick>
 810333c:	4602      	mov	r2, r0
 810333e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8103342:	1ad3      	subs	r3, r2, r3
 8103344:	2b64      	cmp	r3, #100	@ 0x64
 8103346:	d903      	bls.n	8103350 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8103348:	2303      	movs	r3, #3
 810334a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810334e:	e005      	b.n	810335c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103350:	4b35      	ldr	r3, [pc, #212]	@ (8103428 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103352:	681b      	ldr	r3, [r3, #0]
 8103354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103358:	2b00      	cmp	r3, #0
 810335a:	d0ed      	beq.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 810335c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103360:	2b00      	cmp	r3, #0
 8103362:	d17a      	bne.n	810345a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103364:	4b2f      	ldr	r3, [pc, #188]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103366:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8103368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810336c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103370:	4053      	eors	r3, r2
 8103372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103376:	2b00      	cmp	r3, #0
 8103378:	d015      	beq.n	81033a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810337a:	4b2a      	ldr	r3, [pc, #168]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810337c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810337e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103382:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103386:	4b27      	ldr	r3, [pc, #156]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810338a:	4a26      	ldr	r2, [pc, #152]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810338c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103390:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103392:	4b24      	ldr	r3, [pc, #144]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103396:	4a23      	ldr	r2, [pc, #140]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810339c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810339e:	4a21      	ldr	r2, [pc, #132]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81033a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 81033a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81033a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81033ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81033b2:	d118      	bne.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81033b4:	f7fe fb6c 	bl	8101a90 <HAL_GetTick>
 81033b8:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81033bc:	e00d      	b.n	81033da <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81033be:	f7fe fb67 	bl	8101a90 <HAL_GetTick>
 81033c2:	4602      	mov	r2, r0
 81033c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 81033c8:	1ad2      	subs	r2, r2, r3
 81033ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 81033ce:	429a      	cmp	r2, r3
 81033d0:	d903      	bls.n	81033da <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 81033d2:	2303      	movs	r3, #3
 81033d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 81033d8:	e005      	b.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81033da:	4b12      	ldr	r3, [pc, #72]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81033de:	f003 0302 	and.w	r3, r3, #2
 81033e2:	2b00      	cmp	r3, #0
 81033e4:	d0eb      	beq.n	81033be <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 81033e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033ea:	2b00      	cmp	r3, #0
 81033ec:	d130      	bne.n	8103450 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81033ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81033f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81033fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81033fe:	d115      	bne.n	810342c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8103400:	4b08      	ldr	r3, [pc, #32]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103402:	691b      	ldr	r3, [r3, #16]
 8103404:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8103408:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810340c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103410:	091b      	lsrs	r3, r3, #4
 8103412:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8103416:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810341a:	4a02      	ldr	r2, [pc, #8]	@ (8103424 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810341c:	430b      	orrs	r3, r1
 810341e:	6113      	str	r3, [r2, #16]
 8103420:	e00a      	b.n	8103438 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8103422:	bf00      	nop
 8103424:	58024400 	.word	0x58024400
 8103428:	58024800 	.word	0x58024800
 810342c:	4bd4      	ldr	r3, [pc, #848]	@ (8103780 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810342e:	691b      	ldr	r3, [r3, #16]
 8103430:	4ad3      	ldr	r2, [pc, #844]	@ (8103780 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103432:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8103436:	6113      	str	r3, [r2, #16]
 8103438:	4bd1      	ldr	r3, [pc, #836]	@ (8103780 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810343a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810343c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103440:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103448:	4acd      	ldr	r2, [pc, #820]	@ (8103780 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810344a:	430b      	orrs	r3, r1
 810344c:	6713      	str	r3, [r2, #112]	@ 0x70
 810344e:	e008      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103450:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103454:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8103458:	e003      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810345a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810345e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103466:	e9d3 2300 	ldrd	r2, r3, [r3]
 810346a:	f002 0301 	and.w	r3, r2, #1
 810346e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8103472:	2300      	movs	r3, #0
 8103474:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8103478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810347c:	460b      	mov	r3, r1
 810347e:	4313      	orrs	r3, r2
 8103480:	f000 808b 	beq.w	810359a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103484:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810348c:	2b28      	cmp	r3, #40	@ 0x28
 810348e:	d86b      	bhi.n	8103568 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8103490:	a201      	add	r2, pc, #4	@ (adr r2, 8103498 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8103492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103496:	bf00      	nop
 8103498:	08103571 	.word	0x08103571
 810349c:	08103569 	.word	0x08103569
 81034a0:	08103569 	.word	0x08103569
 81034a4:	08103569 	.word	0x08103569
 81034a8:	08103569 	.word	0x08103569
 81034ac:	08103569 	.word	0x08103569
 81034b0:	08103569 	.word	0x08103569
 81034b4:	08103569 	.word	0x08103569
 81034b8:	0810353d 	.word	0x0810353d
 81034bc:	08103569 	.word	0x08103569
 81034c0:	08103569 	.word	0x08103569
 81034c4:	08103569 	.word	0x08103569
 81034c8:	08103569 	.word	0x08103569
 81034cc:	08103569 	.word	0x08103569
 81034d0:	08103569 	.word	0x08103569
 81034d4:	08103569 	.word	0x08103569
 81034d8:	08103553 	.word	0x08103553
 81034dc:	08103569 	.word	0x08103569
 81034e0:	08103569 	.word	0x08103569
 81034e4:	08103569 	.word	0x08103569
 81034e8:	08103569 	.word	0x08103569
 81034ec:	08103569 	.word	0x08103569
 81034f0:	08103569 	.word	0x08103569
 81034f4:	08103569 	.word	0x08103569
 81034f8:	08103571 	.word	0x08103571
 81034fc:	08103569 	.word	0x08103569
 8103500:	08103569 	.word	0x08103569
 8103504:	08103569 	.word	0x08103569
 8103508:	08103569 	.word	0x08103569
 810350c:	08103569 	.word	0x08103569
 8103510:	08103569 	.word	0x08103569
 8103514:	08103569 	.word	0x08103569
 8103518:	08103571 	.word	0x08103571
 810351c:	08103569 	.word	0x08103569
 8103520:	08103569 	.word	0x08103569
 8103524:	08103569 	.word	0x08103569
 8103528:	08103569 	.word	0x08103569
 810352c:	08103569 	.word	0x08103569
 8103530:	08103569 	.word	0x08103569
 8103534:	08103569 	.word	0x08103569
 8103538:	08103571 	.word	0x08103571
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810353c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103540:	3308      	adds	r3, #8
 8103542:	2101      	movs	r1, #1
 8103544:	4618      	mov	r0, r3
 8103546:	f001 fe97 	bl	8105278 <RCCEx_PLL2_Config>
 810354a:	4603      	mov	r3, r0
 810354c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103550:	e00f      	b.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103556:	3328      	adds	r3, #40	@ 0x28
 8103558:	2101      	movs	r1, #1
 810355a:	4618      	mov	r0, r3
 810355c:	f001 ff3e 	bl	81053dc <RCCEx_PLL3_Config>
 8103560:	4603      	mov	r3, r0
 8103562:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103566:	e004      	b.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103568:	2301      	movs	r3, #1
 810356a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810356e:	e000      	b.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8103570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103572:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103576:	2b00      	cmp	r3, #0
 8103578:	d10b      	bne.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810357a:	4b81      	ldr	r3, [pc, #516]	@ (8103780 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810357c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810357e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8103582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810358a:	4a7d      	ldr	r2, [pc, #500]	@ (8103780 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810358c:	430b      	orrs	r3, r1
 810358e:	6553      	str	r3, [r2, #84]	@ 0x54
 8103590:	e003      	b.n	810359a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103592:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103596:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810359a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035a2:	f002 0302 	and.w	r3, r2, #2
 81035a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81035aa:	2300      	movs	r3, #0
 81035ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81035b0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81035b4:	460b      	mov	r3, r1
 81035b6:	4313      	orrs	r3, r2
 81035b8:	d042      	beq.n	8103640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81035ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81035c0:	2b05      	cmp	r3, #5
 81035c2:	d825      	bhi.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 81035c4:	a201      	add	r2, pc, #4	@ (adr r2, 81035cc <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 81035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035ca:	bf00      	nop
 81035cc:	08103619 	.word	0x08103619
 81035d0:	081035e5 	.word	0x081035e5
 81035d4:	081035fb 	.word	0x081035fb
 81035d8:	08103619 	.word	0x08103619
 81035dc:	08103619 	.word	0x08103619
 81035e0:	08103619 	.word	0x08103619
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81035e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035e8:	3308      	adds	r3, #8
 81035ea:	2101      	movs	r1, #1
 81035ec:	4618      	mov	r0, r3
 81035ee:	f001 fe43 	bl	8105278 <RCCEx_PLL2_Config>
 81035f2:	4603      	mov	r3, r0
 81035f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81035f8:	e00f      	b.n	810361a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81035fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035fe:	3328      	adds	r3, #40	@ 0x28
 8103600:	2101      	movs	r1, #1
 8103602:	4618      	mov	r0, r3
 8103604:	f001 feea 	bl	81053dc <RCCEx_PLL3_Config>
 8103608:	4603      	mov	r3, r0
 810360a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810360e:	e004      	b.n	810361a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103610:	2301      	movs	r3, #1
 8103612:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103616:	e000      	b.n	810361a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8103618:	bf00      	nop
    }

    if (ret == HAL_OK)
 810361a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810361e:	2b00      	cmp	r3, #0
 8103620:	d10a      	bne.n	8103638 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103622:	4b57      	ldr	r3, [pc, #348]	@ (8103780 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103626:	f023 0107 	bic.w	r1, r3, #7
 810362a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810362e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103630:	4a53      	ldr	r2, [pc, #332]	@ (8103780 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103632:	430b      	orrs	r3, r1
 8103634:	6553      	str	r3, [r2, #84]	@ 0x54
 8103636:	e003      	b.n	8103640 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103638:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810363c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103648:	f002 0304 	and.w	r3, r2, #4
 810364c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8103650:	2300      	movs	r3, #0
 8103652:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8103656:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810365a:	460b      	mov	r3, r1
 810365c:	4313      	orrs	r3, r2
 810365e:	d044      	beq.n	81036ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103664:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103668:	2b05      	cmp	r3, #5
 810366a:	d825      	bhi.n	81036b8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 810366c:	a201      	add	r2, pc, #4	@ (adr r2, 8103674 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103672:	bf00      	nop
 8103674:	081036c1 	.word	0x081036c1
 8103678:	0810368d 	.word	0x0810368d
 810367c:	081036a3 	.word	0x081036a3
 8103680:	081036c1 	.word	0x081036c1
 8103684:	081036c1 	.word	0x081036c1
 8103688:	081036c1 	.word	0x081036c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810368c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103690:	3308      	adds	r3, #8
 8103692:	2101      	movs	r1, #1
 8103694:	4618      	mov	r0, r3
 8103696:	f001 fdef 	bl	8105278 <RCCEx_PLL2_Config>
 810369a:	4603      	mov	r3, r0
 810369c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81036a0:	e00f      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81036a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036a6:	3328      	adds	r3, #40	@ 0x28
 81036a8:	2101      	movs	r1, #1
 81036aa:	4618      	mov	r0, r3
 81036ac:	f001 fe96 	bl	81053dc <RCCEx_PLL3_Config>
 81036b0:	4603      	mov	r3, r0
 81036b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81036b6:	e004      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036b8:	2301      	movs	r3, #1
 81036ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81036be:	e000      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 81036c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81036c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81036c6:	2b00      	cmp	r3, #0
 81036c8:	d10b      	bne.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81036ca:	4b2d      	ldr	r3, [pc, #180]	@ (8103780 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81036ce:	f023 0107 	bic.w	r1, r3, #7
 81036d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81036da:	4a29      	ldr	r2, [pc, #164]	@ (8103780 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81036dc:	430b      	orrs	r3, r1
 81036de:	6593      	str	r3, [r2, #88]	@ 0x58
 81036e0:	e003      	b.n	81036ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81036e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81036ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036f2:	f002 0320 	and.w	r3, r2, #32
 81036f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81036fa:	2300      	movs	r3, #0
 81036fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8103700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8103704:	460b      	mov	r3, r1
 8103706:	4313      	orrs	r3, r2
 8103708:	d057      	beq.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810370a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103716:	d035      	beq.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8103718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810371c:	d82c      	bhi.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810371e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103722:	d031      	beq.n	8103788 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8103724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103728:	d826      	bhi.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810372a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810372e:	d02d      	beq.n	810378c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8103730:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103734:	d820      	bhi.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810373a:	d012      	beq.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 810373c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103740:	d81a      	bhi.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103742:	2b00      	cmp	r3, #0
 8103744:	d024      	beq.n	8103790 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8103746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810374a:	d115      	bne.n	8103778 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810374c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103750:	3308      	adds	r3, #8
 8103752:	2100      	movs	r1, #0
 8103754:	4618      	mov	r0, r3
 8103756:	f001 fd8f 	bl	8105278 <RCCEx_PLL2_Config>
 810375a:	4603      	mov	r3, r0
 810375c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103760:	e017      	b.n	8103792 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103766:	3328      	adds	r3, #40	@ 0x28
 8103768:	2102      	movs	r1, #2
 810376a:	4618      	mov	r0, r3
 810376c:	f001 fe36 	bl	81053dc <RCCEx_PLL3_Config>
 8103770:	4603      	mov	r3, r0
 8103772:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103776:	e00c      	b.n	8103792 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103778:	2301      	movs	r3, #1
 810377a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810377e:	e008      	b.n	8103792 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8103780:	58024400 	.word	0x58024400
        break;
 8103784:	bf00      	nop
 8103786:	e004      	b.n	8103792 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103788:	bf00      	nop
 810378a:	e002      	b.n	8103792 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810378c:	bf00      	nop
 810378e:	e000      	b.n	8103792 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103792:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103796:	2b00      	cmp	r3, #0
 8103798:	d10b      	bne.n	81037b2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810379a:	4bc2      	ldr	r3, [pc, #776]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810379c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810379e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81037a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81037aa:	4abe      	ldr	r2, [pc, #760]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81037ac:	430b      	orrs	r3, r1
 81037ae:	6553      	str	r3, [r2, #84]	@ 0x54
 81037b0:	e003      	b.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81037b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81037ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81037c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81037ca:	2300      	movs	r3, #0
 81037cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81037d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81037d4:	460b      	mov	r3, r1
 81037d6:	4313      	orrs	r3, r2
 81037d8:	d055      	beq.n	8103886 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81037da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81037e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81037e6:	d033      	beq.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 81037e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81037ec:	d82c      	bhi.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81037ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81037f2:	d02f      	beq.n	8103854 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 81037f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81037f8:	d826      	bhi.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81037fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81037fe:	d02b      	beq.n	8103858 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8103800:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103804:	d820      	bhi.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103806:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810380a:	d012      	beq.n	8103832 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 810380c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103810:	d81a      	bhi.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103812:	2b00      	cmp	r3, #0
 8103814:	d022      	beq.n	810385c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8103816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810381a:	d115      	bne.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810381c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103820:	3308      	adds	r3, #8
 8103822:	2100      	movs	r1, #0
 8103824:	4618      	mov	r0, r3
 8103826:	f001 fd27 	bl	8105278 <RCCEx_PLL2_Config>
 810382a:	4603      	mov	r3, r0
 810382c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103830:	e015      	b.n	810385e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103832:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103836:	3328      	adds	r3, #40	@ 0x28
 8103838:	2102      	movs	r1, #2
 810383a:	4618      	mov	r0, r3
 810383c:	f001 fdce 	bl	81053dc <RCCEx_PLL3_Config>
 8103840:	4603      	mov	r3, r0
 8103842:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103846:	e00a      	b.n	810385e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103848:	2301      	movs	r3, #1
 810384a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810384e:	e006      	b.n	810385e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103850:	bf00      	nop
 8103852:	e004      	b.n	810385e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103854:	bf00      	nop
 8103856:	e002      	b.n	810385e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103858:	bf00      	nop
 810385a:	e000      	b.n	810385e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810385c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810385e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103862:	2b00      	cmp	r3, #0
 8103864:	d10b      	bne.n	810387e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103866:	4b8f      	ldr	r3, [pc, #572]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810386a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810386e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103872:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103876:	4a8b      	ldr	r2, [pc, #556]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103878:	430b      	orrs	r3, r1
 810387a:	6593      	str	r3, [r2, #88]	@ 0x58
 810387c:	e003      	b.n	8103886 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810387e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103882:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103886:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810388e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8103892:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8103896:	2300      	movs	r3, #0
 8103898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810389c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81038a0:	460b      	mov	r3, r1
 81038a2:	4313      	orrs	r3, r2
 81038a4:	d055      	beq.n	8103952 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81038a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81038ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81038b2:	d033      	beq.n	810391c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 81038b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81038b8:	d82c      	bhi.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81038ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81038be:	d02f      	beq.n	8103920 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 81038c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81038c4:	d826      	bhi.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81038c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81038ca:	d02b      	beq.n	8103924 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 81038cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81038d0:	d820      	bhi.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81038d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81038d6:	d012      	beq.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 81038d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81038dc:	d81a      	bhi.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81038de:	2b00      	cmp	r3, #0
 81038e0:	d022      	beq.n	8103928 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 81038e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81038e6:	d115      	bne.n	8103914 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81038e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038ec:	3308      	adds	r3, #8
 81038ee:	2100      	movs	r1, #0
 81038f0:	4618      	mov	r0, r3
 81038f2:	f001 fcc1 	bl	8105278 <RCCEx_PLL2_Config>
 81038f6:	4603      	mov	r3, r0
 81038f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81038fc:	e015      	b.n	810392a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81038fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103902:	3328      	adds	r3, #40	@ 0x28
 8103904:	2102      	movs	r1, #2
 8103906:	4618      	mov	r0, r3
 8103908:	f001 fd68 	bl	81053dc <RCCEx_PLL3_Config>
 810390c:	4603      	mov	r3, r0
 810390e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103912:	e00a      	b.n	810392a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103914:	2301      	movs	r3, #1
 8103916:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810391a:	e006      	b.n	810392a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810391c:	bf00      	nop
 810391e:	e004      	b.n	810392a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103920:	bf00      	nop
 8103922:	e002      	b.n	810392a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103924:	bf00      	nop
 8103926:	e000      	b.n	810392a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103928:	bf00      	nop
    }

    if (ret == HAL_OK)
 810392a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810392e:	2b00      	cmp	r3, #0
 8103930:	d10b      	bne.n	810394a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103932:	4b5c      	ldr	r3, [pc, #368]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103936:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810393a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810393e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103942:	4a58      	ldr	r2, [pc, #352]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103944:	430b      	orrs	r3, r1
 8103946:	6593      	str	r3, [r2, #88]	@ 0x58
 8103948:	e003      	b.n	8103952 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810394a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810394e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103952:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103956:	e9d3 2300 	ldrd	r2, r3, [r3]
 810395a:	f002 0308 	and.w	r3, r2, #8
 810395e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103962:	2300      	movs	r3, #0
 8103964:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8103968:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810396c:	460b      	mov	r3, r1
 810396e:	4313      	orrs	r3, r2
 8103970:	d01e      	beq.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810397a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810397e:	d10c      	bne.n	810399a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103980:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103984:	3328      	adds	r3, #40	@ 0x28
 8103986:	2102      	movs	r1, #2
 8103988:	4618      	mov	r0, r3
 810398a:	f001 fd27 	bl	81053dc <RCCEx_PLL3_Config>
 810398e:	4603      	mov	r3, r0
 8103990:	2b00      	cmp	r3, #0
 8103992:	d002      	beq.n	810399a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8103994:	2301      	movs	r3, #1
 8103996:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810399a:	4b42      	ldr	r3, [pc, #264]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810399c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810399e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81039a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81039aa:	4a3e      	ldr	r2, [pc, #248]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81039ac:	430b      	orrs	r3, r1
 81039ae:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81039b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039b8:	f002 0310 	and.w	r3, r2, #16
 81039bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81039c0:	2300      	movs	r3, #0
 81039c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81039c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81039ca:	460b      	mov	r3, r1
 81039cc:	4313      	orrs	r3, r2
 81039ce:	d01e      	beq.n	8103a0e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81039d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81039d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81039dc:	d10c      	bne.n	81039f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81039de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039e2:	3328      	adds	r3, #40	@ 0x28
 81039e4:	2102      	movs	r1, #2
 81039e6:	4618      	mov	r0, r3
 81039e8:	f001 fcf8 	bl	81053dc <RCCEx_PLL3_Config>
 81039ec:	4603      	mov	r3, r0
 81039ee:	2b00      	cmp	r3, #0
 81039f0:	d002      	beq.n	81039f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 81039f2:	2301      	movs	r3, #1
 81039f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81039f8:	4b2a      	ldr	r3, [pc, #168]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81039fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81039fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103a08:	4a26      	ldr	r2, [pc, #152]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103a0a:	430b      	orrs	r3, r1
 8103a0c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103a0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a16:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8103a1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103a1e:	2300      	movs	r3, #0
 8103a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8103a24:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8103a28:	460b      	mov	r3, r1
 8103a2a:	4313      	orrs	r3, r2
 8103a2c:	d040      	beq.n	8103ab0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103a2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103a3a:	d022      	beq.n	8103a82 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8103a3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103a40:	d81b      	bhi.n	8103a7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103a42:	2b00      	cmp	r3, #0
 8103a44:	d003      	beq.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8103a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103a4a:	d00b      	beq.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8103a4c:	e015      	b.n	8103a7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a52:	3308      	adds	r3, #8
 8103a54:	2100      	movs	r1, #0
 8103a56:	4618      	mov	r0, r3
 8103a58:	f001 fc0e 	bl	8105278 <RCCEx_PLL2_Config>
 8103a5c:	4603      	mov	r3, r0
 8103a5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103a62:	e00f      	b.n	8103a84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a68:	3328      	adds	r3, #40	@ 0x28
 8103a6a:	2102      	movs	r1, #2
 8103a6c:	4618      	mov	r0, r3
 8103a6e:	f001 fcb5 	bl	81053dc <RCCEx_PLL3_Config>
 8103a72:	4603      	mov	r3, r0
 8103a74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103a78:	e004      	b.n	8103a84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a7a:	2301      	movs	r3, #1
 8103a7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103a80:	e000      	b.n	8103a84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8103a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a88:	2b00      	cmp	r3, #0
 8103a8a:	d10d      	bne.n	8103aa8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103a8c:	4b05      	ldr	r3, [pc, #20]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103a90:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8103a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103a9c:	4a01      	ldr	r2, [pc, #4]	@ (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103a9e:	430b      	orrs	r3, r1
 8103aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8103aa2:	e005      	b.n	8103ab0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8103aa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103aa8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103aac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ab8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8103abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8103abe:	2300      	movs	r3, #0
 8103ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8103ac2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8103ac6:	460b      	mov	r3, r1
 8103ac8:	4313      	orrs	r3, r2
 8103aca:	d03b      	beq.n	8103b44 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103ad4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103ad8:	d01f      	beq.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8103ada:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103ade:	d818      	bhi.n	8103b12 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8103ae0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103ae4:	d003      	beq.n	8103aee <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8103ae6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103aea:	d007      	beq.n	8103afc <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8103aec:	e011      	b.n	8103b12 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103aee:	4b64      	ldr	r3, [pc, #400]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103af2:	4a63      	ldr	r2, [pc, #396]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103afa:	e00f      	b.n	8103b1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b00:	3328      	adds	r3, #40	@ 0x28
 8103b02:	2101      	movs	r1, #1
 8103b04:	4618      	mov	r0, r3
 8103b06:	f001 fc69 	bl	81053dc <RCCEx_PLL3_Config>
 8103b0a:	4603      	mov	r3, r0
 8103b0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8103b10:	e004      	b.n	8103b1c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b12:	2301      	movs	r3, #1
 8103b14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103b18:	e000      	b.n	8103b1c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8103b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b20:	2b00      	cmp	r3, #0
 8103b22:	d10b      	bne.n	8103b3c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103b24:	4b56      	ldr	r3, [pc, #344]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b28:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103b34:	4a52      	ldr	r2, [pc, #328]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103b36:	430b      	orrs	r3, r1
 8103b38:	6553      	str	r3, [r2, #84]	@ 0x54
 8103b3a:	e003      	b.n	8103b44 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b40:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b4c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8103b50:	673b      	str	r3, [r7, #112]	@ 0x70
 8103b52:	2300      	movs	r3, #0
 8103b54:	677b      	str	r3, [r7, #116]	@ 0x74
 8103b56:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8103b5a:	460b      	mov	r3, r1
 8103b5c:	4313      	orrs	r3, r2
 8103b5e:	d031      	beq.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8103b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b66:	2b00      	cmp	r3, #0
 8103b68:	d003      	beq.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8103b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103b6e:	d007      	beq.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8103b70:	e011      	b.n	8103b96 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b72:	4b43      	ldr	r3, [pc, #268]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103b76:	4a42      	ldr	r2, [pc, #264]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103b7e:	e00e      	b.n	8103b9e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b84:	3308      	adds	r3, #8
 8103b86:	2102      	movs	r1, #2
 8103b88:	4618      	mov	r0, r3
 8103b8a:	f001 fb75 	bl	8105278 <RCCEx_PLL2_Config>
 8103b8e:	4603      	mov	r3, r0
 8103b90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103b94:	e003      	b.n	8103b9e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8103b96:	2301      	movs	r3, #1
 8103b98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ba2:	2b00      	cmp	r3, #0
 8103ba4:	d10a      	bne.n	8103bbc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103ba6:	4b36      	ldr	r3, [pc, #216]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103baa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103bae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103bb4:	4a32      	ldr	r2, [pc, #200]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103bb6:	430b      	orrs	r3, r1
 8103bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103bba:	e003      	b.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bbc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103bc0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bcc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8103bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8103bd2:	2300      	movs	r3, #0
 8103bd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8103bd6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8103bda:	460b      	mov	r3, r1
 8103bdc:	4313      	orrs	r3, r2
 8103bde:	d00c      	beq.n	8103bfa <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103be4:	3328      	adds	r3, #40	@ 0x28
 8103be6:	2102      	movs	r1, #2
 8103be8:	4618      	mov	r0, r3
 8103bea:	f001 fbf7 	bl	81053dc <RCCEx_PLL3_Config>
 8103bee:	4603      	mov	r3, r0
 8103bf0:	2b00      	cmp	r3, #0
 8103bf2:	d002      	beq.n	8103bfa <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8103bf4:	2301      	movs	r3, #1
 8103bf6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c02:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8103c06:	663b      	str	r3, [r7, #96]	@ 0x60
 8103c08:	2300      	movs	r3, #0
 8103c0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8103c0c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8103c10:	460b      	mov	r3, r1
 8103c12:	4313      	orrs	r3, r2
 8103c14:	d03a      	beq.n	8103c8c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8103c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103c1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103c22:	d018      	beq.n	8103c56 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8103c24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103c28:	d811      	bhi.n	8103c4e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8103c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103c2e:	d014      	beq.n	8103c5a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8103c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103c34:	d80b      	bhi.n	8103c4e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8103c36:	2b00      	cmp	r3, #0
 8103c38:	d011      	beq.n	8103c5e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8103c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103c3e:	d106      	bne.n	8103c4e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c40:	4b0f      	ldr	r3, [pc, #60]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103c44:	4a0e      	ldr	r2, [pc, #56]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103c4c:	e008      	b.n	8103c60 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c4e:	2301      	movs	r3, #1
 8103c50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103c54:	e004      	b.n	8103c60 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103c56:	bf00      	nop
 8103c58:	e002      	b.n	8103c60 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103c5a:	bf00      	nop
 8103c5c:	e000      	b.n	8103c60 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c64:	2b00      	cmp	r3, #0
 8103c66:	d10d      	bne.n	8103c84 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103c68:	4b05      	ldr	r3, [pc, #20]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c6c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103c78:	4a01      	ldr	r2, [pc, #4]	@ (8103c80 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103c7a:	430b      	orrs	r3, r1
 8103c7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8103c7e:	e005      	b.n	8103c8c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8103c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c88:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103c8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8103c98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8103c9a:	2300      	movs	r3, #0
 8103c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8103c9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8103ca2:	460b      	mov	r3, r1
 8103ca4:	4313      	orrs	r3, r2
 8103ca6:	d009      	beq.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103ca8:	4baa      	ldr	r3, [pc, #680]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103cac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8103cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8103cb6:	4aa7      	ldr	r2, [pc, #668]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103cb8:	430b      	orrs	r3, r1
 8103cba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cc4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8103cc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8103cca:	2300      	movs	r3, #0
 8103ccc:	657b      	str	r3, [r7, #84]	@ 0x54
 8103cce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8103cd2:	460b      	mov	r3, r1
 8103cd4:	4313      	orrs	r3, r2
 8103cd6:	d00a      	beq.n	8103cee <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103cd8:	4b9e      	ldr	r3, [pc, #632]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103cda:	691b      	ldr	r3, [r3, #16]
 8103cdc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8103ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ce4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8103ce8:	4a9a      	ldr	r2, [pc, #616]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103cea:	430b      	orrs	r3, r1
 8103cec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cf6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8103cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103cfc:	2300      	movs	r3, #0
 8103cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103d00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8103d04:	460b      	mov	r3, r1
 8103d06:	4313      	orrs	r3, r2
 8103d08:	d009      	beq.n	8103d1e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103d0a:	4b92      	ldr	r3, [pc, #584]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103d0e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8103d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103d18:	4a8e      	ldr	r2, [pc, #568]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103d1a:	430b      	orrs	r3, r1
 8103d1c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8103d2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8103d2c:	2300      	movs	r3, #0
 8103d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8103d30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8103d34:	460b      	mov	r3, r1
 8103d36:	4313      	orrs	r3, r2
 8103d38:	d00e      	beq.n	8103d58 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103d3a:	4b86      	ldr	r3, [pc, #536]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103d3c:	691b      	ldr	r3, [r3, #16]
 8103d3e:	4a85      	ldr	r2, [pc, #532]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103d40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8103d44:	6113      	str	r3, [r2, #16]
 8103d46:	4b83      	ldr	r3, [pc, #524]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103d48:	6919      	ldr	r1, [r3, #16]
 8103d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8103d52:	4a80      	ldr	r2, [pc, #512]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103d54:	430b      	orrs	r3, r1
 8103d56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103d58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d60:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8103d64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8103d66:	2300      	movs	r3, #0
 8103d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103d6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8103d6e:	460b      	mov	r3, r1
 8103d70:	4313      	orrs	r3, r2
 8103d72:	d009      	beq.n	8103d88 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103d74:	4b77      	ldr	r3, [pc, #476]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103d78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103d7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103d82:	4a74      	ldr	r2, [pc, #464]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103d84:	430b      	orrs	r3, r1
 8103d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8103d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8103d96:	2300      	movs	r3, #0
 8103d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8103d9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8103d9e:	460b      	mov	r3, r1
 8103da0:	4313      	orrs	r3, r2
 8103da2:	d00a      	beq.n	8103dba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103da4:	4b6b      	ldr	r3, [pc, #428]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103da8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8103dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103db4:	4a67      	ldr	r2, [pc, #412]	@ (8103f54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103db6:	430b      	orrs	r3, r1
 8103db8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8103dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103dc2:	2100      	movs	r1, #0
 8103dc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8103dc6:	f003 0301 	and.w	r3, r3, #1
 8103dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103dcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8103dd0:	460b      	mov	r3, r1
 8103dd2:	4313      	orrs	r3, r2
 8103dd4:	d011      	beq.n	8103dfa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103dd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dda:	3308      	adds	r3, #8
 8103ddc:	2100      	movs	r1, #0
 8103dde:	4618      	mov	r0, r3
 8103de0:	f001 fa4a 	bl	8105278 <RCCEx_PLL2_Config>
 8103de4:	4603      	mov	r3, r0
 8103de6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103dea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103dee:	2b00      	cmp	r3, #0
 8103df0:	d003      	beq.n	8103dfa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103df2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103df6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8103dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e02:	2100      	movs	r1, #0
 8103e04:	6239      	str	r1, [r7, #32]
 8103e06:	f003 0302 	and.w	r3, r3, #2
 8103e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8103e0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8103e10:	460b      	mov	r3, r1
 8103e12:	4313      	orrs	r3, r2
 8103e14:	d011      	beq.n	8103e3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e1a:	3308      	adds	r3, #8
 8103e1c:	2101      	movs	r1, #1
 8103e1e:	4618      	mov	r0, r3
 8103e20:	f001 fa2a 	bl	8105278 <RCCEx_PLL2_Config>
 8103e24:	4603      	mov	r3, r0
 8103e26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103e2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e2e:	2b00      	cmp	r3, #0
 8103e30:	d003      	beq.n	8103e3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8103e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e42:	2100      	movs	r1, #0
 8103e44:	61b9      	str	r1, [r7, #24]
 8103e46:	f003 0304 	and.w	r3, r3, #4
 8103e4a:	61fb      	str	r3, [r7, #28]
 8103e4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8103e50:	460b      	mov	r3, r1
 8103e52:	4313      	orrs	r3, r2
 8103e54:	d011      	beq.n	8103e7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e5a:	3308      	adds	r3, #8
 8103e5c:	2102      	movs	r1, #2
 8103e5e:	4618      	mov	r0, r3
 8103e60:	f001 fa0a 	bl	8105278 <RCCEx_PLL2_Config>
 8103e64:	4603      	mov	r3, r0
 8103e66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103e6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e6e:	2b00      	cmp	r3, #0
 8103e70:	d003      	beq.n	8103e7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8103e7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e82:	2100      	movs	r1, #0
 8103e84:	6139      	str	r1, [r7, #16]
 8103e86:	f003 0308 	and.w	r3, r3, #8
 8103e8a:	617b      	str	r3, [r7, #20]
 8103e8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8103e90:	460b      	mov	r3, r1
 8103e92:	4313      	orrs	r3, r2
 8103e94:	d011      	beq.n	8103eba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103e96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e9a:	3328      	adds	r3, #40	@ 0x28
 8103e9c:	2100      	movs	r1, #0
 8103e9e:	4618      	mov	r0, r3
 8103ea0:	f001 fa9c 	bl	81053dc <RCCEx_PLL3_Config>
 8103ea4:	4603      	mov	r3, r0
 8103ea6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8103eaa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103eae:	2b00      	cmp	r3, #0
 8103eb0:	d003      	beq.n	8103eba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103eb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103eb6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8103eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ec2:	2100      	movs	r1, #0
 8103ec4:	60b9      	str	r1, [r7, #8]
 8103ec6:	f003 0310 	and.w	r3, r3, #16
 8103eca:	60fb      	str	r3, [r7, #12]
 8103ecc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8103ed0:	460b      	mov	r3, r1
 8103ed2:	4313      	orrs	r3, r2
 8103ed4:	d011      	beq.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103ed6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103eda:	3328      	adds	r3, #40	@ 0x28
 8103edc:	2101      	movs	r1, #1
 8103ede:	4618      	mov	r0, r3
 8103ee0:	f001 fa7c 	bl	81053dc <RCCEx_PLL3_Config>
 8103ee4:	4603      	mov	r3, r0
 8103ee6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103eea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103eee:	2b00      	cmp	r3, #0
 8103ef0:	d003      	beq.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ef2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ef6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8103efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f02:	2100      	movs	r1, #0
 8103f04:	6039      	str	r1, [r7, #0]
 8103f06:	f003 0320 	and.w	r3, r3, #32
 8103f0a:	607b      	str	r3, [r7, #4]
 8103f0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8103f10:	460b      	mov	r3, r1
 8103f12:	4313      	orrs	r3, r2
 8103f14:	d011      	beq.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f1a:	3328      	adds	r3, #40	@ 0x28
 8103f1c:	2102      	movs	r1, #2
 8103f1e:	4618      	mov	r0, r3
 8103f20:	f001 fa5c 	bl	81053dc <RCCEx_PLL3_Config>
 8103f24:	4603      	mov	r3, r0
 8103f26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103f2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f2e:	2b00      	cmp	r3, #0
 8103f30:	d003      	beq.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8103f3a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8103f3e:	2b00      	cmp	r3, #0
 8103f40:	d101      	bne.n	8103f46 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8103f42:	2300      	movs	r3, #0
 8103f44:	e000      	b.n	8103f48 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8103f46:	2301      	movs	r3, #1
}
 8103f48:	4618      	mov	r0, r3
 8103f4a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8103f4e:	46bd      	mov	sp, r7
 8103f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103f54:	58024400 	.word	0x58024400

08103f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8103f58:	b580      	push	{r7, lr}
 8103f5a:	b090      	sub	sp, #64	@ 0x40
 8103f5c:	af00      	add	r7, sp, #0
 8103f5e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8103f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103f66:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8103f6a:	430b      	orrs	r3, r1
 8103f6c:	f040 8094 	bne.w	8104098 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8103f70:	4b9e      	ldr	r3, [pc, #632]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f74:	f003 0307 	and.w	r3, r3, #7
 8103f78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8103f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103f7c:	2b04      	cmp	r3, #4
 8103f7e:	f200 8087 	bhi.w	8104090 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8103f82:	a201      	add	r2, pc, #4	@ (adr r2, 8103f88 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8103f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f88:	08103f9d 	.word	0x08103f9d
 8103f8c:	08103fc5 	.word	0x08103fc5
 8103f90:	08103fed 	.word	0x08103fed
 8103f94:	08104089 	.word	0x08104089
 8103f98:	08104015 	.word	0x08104015
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8103f9c:	4b93      	ldr	r3, [pc, #588]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103f9e:	681b      	ldr	r3, [r3, #0]
 8103fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103fa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103fa8:	d108      	bne.n	8103fbc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103faa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103fae:	4618      	mov	r0, r3
 8103fb0:	f001 f810 	bl	8104fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103fb8:	f000 bd45 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103fbc:	2300      	movs	r3, #0
 8103fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103fc0:	f000 bd41 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103fc4:	4b89      	ldr	r3, [pc, #548]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103fc6:	681b      	ldr	r3, [r3, #0]
 8103fc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103fcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103fd0:	d108      	bne.n	8103fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103fd2:	f107 0318 	add.w	r3, r7, #24
 8103fd6:	4618      	mov	r0, r3
 8103fd8:	f000 fd54 	bl	8104a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8103fdc:	69bb      	ldr	r3, [r7, #24]
 8103fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103fe0:	f000 bd31 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103fe4:	2300      	movs	r3, #0
 8103fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103fe8:	f000 bd2d 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103fec:	4b7f      	ldr	r3, [pc, #508]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103ff8:	d108      	bne.n	810400c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103ffa:	f107 030c 	add.w	r3, r7, #12
 8103ffe:	4618      	mov	r0, r3
 8104000:	f000 fe94 	bl	8104d2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104004:	68fb      	ldr	r3, [r7, #12]
 8104006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104008:	f000 bd1d 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810400c:	2300      	movs	r3, #0
 810400e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104010:	f000 bd19 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104014:	4b75      	ldr	r3, [pc, #468]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104018:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810401c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810401e:	4b73      	ldr	r3, [pc, #460]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104020:	681b      	ldr	r3, [r3, #0]
 8104022:	f003 0304 	and.w	r3, r3, #4
 8104026:	2b04      	cmp	r3, #4
 8104028:	d10c      	bne.n	8104044 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810402a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810402c:	2b00      	cmp	r3, #0
 810402e:	d109      	bne.n	8104044 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104030:	4b6e      	ldr	r3, [pc, #440]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	08db      	lsrs	r3, r3, #3
 8104036:	f003 0303 	and.w	r3, r3, #3
 810403a:	4a6d      	ldr	r2, [pc, #436]	@ (81041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810403c:	fa22 f303 	lsr.w	r3, r2, r3
 8104040:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104042:	e01f      	b.n	8104084 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104044:	4b69      	ldr	r3, [pc, #420]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104046:	681b      	ldr	r3, [r3, #0]
 8104048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810404c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104050:	d106      	bne.n	8104060 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8104052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104058:	d102      	bne.n	8104060 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810405a:	4b66      	ldr	r3, [pc, #408]	@ (81041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810405c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810405e:	e011      	b.n	8104084 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104060:	4b62      	ldr	r3, [pc, #392]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104068:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810406c:	d106      	bne.n	810407c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810406e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104074:	d102      	bne.n	810407c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104076:	4b60      	ldr	r3, [pc, #384]	@ (81041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810407a:	e003      	b.n	8104084 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810407c:	2300      	movs	r3, #0
 810407e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104080:	f000 bce1 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104084:	f000 bcdf 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104088:	4b5c      	ldr	r3, [pc, #368]	@ (81041fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810408a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810408c:	f000 bcdb 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104090:	2300      	movs	r3, #0
 8104092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104094:	f000 bcd7 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104098:	e9d7 2300 	ldrd	r2, r3, [r7]
 810409c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 81040a0:	430b      	orrs	r3, r1
 81040a2:	f040 80ad 	bne.w	8104200 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81040a6:	4b51      	ldr	r3, [pc, #324]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81040a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81040aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 81040ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81040b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81040b6:	d056      	beq.n	8104166 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 81040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81040ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81040be:	f200 8090 	bhi.w	81041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81040c4:	2bc0      	cmp	r3, #192	@ 0xc0
 81040c6:	f000 8088 	beq.w	81041da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81040cc:	2bc0      	cmp	r3, #192	@ 0xc0
 81040ce:	f200 8088 	bhi.w	81041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81040d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81040d4:	2b80      	cmp	r3, #128	@ 0x80
 81040d6:	d032      	beq.n	810413e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81040d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81040da:	2b80      	cmp	r3, #128	@ 0x80
 81040dc:	f200 8081 	bhi.w	81041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81040e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81040e2:	2b00      	cmp	r3, #0
 81040e4:	d003      	beq.n	81040ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 81040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81040e8:	2b40      	cmp	r3, #64	@ 0x40
 81040ea:	d014      	beq.n	8104116 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81040ec:	e079      	b.n	81041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81040ee:	4b3f      	ldr	r3, [pc, #252]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81040f0:	681b      	ldr	r3, [r3, #0]
 81040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81040f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81040fa:	d108      	bne.n	810410e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81040fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104100:	4618      	mov	r0, r3
 8104102:	f000 ff67 	bl	8104fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810410a:	f000 bc9c 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810410e:	2300      	movs	r3, #0
 8104110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104112:	f000 bc98 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104116:	4b35      	ldr	r3, [pc, #212]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104118:	681b      	ldr	r3, [r3, #0]
 810411a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810411e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104122:	d108      	bne.n	8104136 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104124:	f107 0318 	add.w	r3, r7, #24
 8104128:	4618      	mov	r0, r3
 810412a:	f000 fcab 	bl	8104a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810412e:	69bb      	ldr	r3, [r7, #24]
 8104130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104132:	f000 bc88 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104136:	2300      	movs	r3, #0
 8104138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810413a:	f000 bc84 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810413e:	4b2b      	ldr	r3, [pc, #172]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104140:	681b      	ldr	r3, [r3, #0]
 8104142:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810414a:	d108      	bne.n	810415e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810414c:	f107 030c 	add.w	r3, r7, #12
 8104150:	4618      	mov	r0, r3
 8104152:	f000 fdeb 	bl	8104d2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104156:	68fb      	ldr	r3, [r7, #12]
 8104158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810415a:	f000 bc74 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810415e:	2300      	movs	r3, #0
 8104160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104162:	f000 bc70 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104166:	4b21      	ldr	r3, [pc, #132]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810416a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810416e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104170:	4b1e      	ldr	r3, [pc, #120]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	f003 0304 	and.w	r3, r3, #4
 8104178:	2b04      	cmp	r3, #4
 810417a:	d10c      	bne.n	8104196 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810417c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810417e:	2b00      	cmp	r3, #0
 8104180:	d109      	bne.n	8104196 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104182:	4b1a      	ldr	r3, [pc, #104]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	08db      	lsrs	r3, r3, #3
 8104188:	f003 0303 	and.w	r3, r3, #3
 810418c:	4a18      	ldr	r2, [pc, #96]	@ (81041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810418e:	fa22 f303 	lsr.w	r3, r2, r3
 8104192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104194:	e01f      	b.n	81041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104196:	4b15      	ldr	r3, [pc, #84]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104198:	681b      	ldr	r3, [r3, #0]
 810419a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810419e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81041a2:	d106      	bne.n	81041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81041a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81041aa:	d102      	bne.n	81041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81041ac:	4b11      	ldr	r3, [pc, #68]	@ (81041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81041ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81041b0:	e011      	b.n	81041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81041b2:	4b0e      	ldr	r3, [pc, #56]	@ (81041ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81041b4:	681b      	ldr	r3, [r3, #0]
 81041b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81041ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81041be:	d106      	bne.n	81041ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81041c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81041c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81041c6:	d102      	bne.n	81041ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81041c8:	4b0b      	ldr	r3, [pc, #44]	@ (81041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81041ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81041cc:	e003      	b.n	81041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81041ce:	2300      	movs	r3, #0
 81041d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81041d2:	f000 bc38 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81041d6:	f000 bc36 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81041da:	4b08      	ldr	r3, [pc, #32]	@ (81041fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81041dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81041de:	f000 bc32 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81041e2:	2300      	movs	r3, #0
 81041e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81041e6:	f000 bc2e 	b.w	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81041ea:	bf00      	nop
 81041ec:	58024400 	.word	0x58024400
 81041f0:	03d09000 	.word	0x03d09000
 81041f4:	003d0900 	.word	0x003d0900
 81041f8:	017d7840 	.word	0x017d7840
 81041fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104204:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8104208:	430b      	orrs	r3, r1
 810420a:	f040 809c 	bne.w	8104346 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810420e:	4b9e      	ldr	r3, [pc, #632]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104212:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8104216:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810421a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810421e:	d054      	beq.n	81042ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8104220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104222:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104226:	f200 808b 	bhi.w	8104340 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810422c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104230:	f000 8083 	beq.w	810433a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8104234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104236:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810423a:	f200 8081 	bhi.w	8104340 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104244:	d02f      	beq.n	81042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8104246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104248:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810424c:	d878      	bhi.n	8104340 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810424e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104250:	2b00      	cmp	r3, #0
 8104252:	d004      	beq.n	810425e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8104254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104256:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810425a:	d012      	beq.n	8104282 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810425c:	e070      	b.n	8104340 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810425e:	4b8a      	ldr	r3, [pc, #552]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104260:	681b      	ldr	r3, [r3, #0]
 8104262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810426a:	d107      	bne.n	810427c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810426c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104270:	4618      	mov	r0, r3
 8104272:	f000 feaf 	bl	8104fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810427a:	e3e4      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810427c:	2300      	movs	r3, #0
 810427e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104280:	e3e1      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104282:	4b81      	ldr	r3, [pc, #516]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104284:	681b      	ldr	r3, [r3, #0]
 8104286:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810428a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810428e:	d107      	bne.n	81042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104290:	f107 0318 	add.w	r3, r7, #24
 8104294:	4618      	mov	r0, r3
 8104296:	f000 fbf5 	bl	8104a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810429a:	69bb      	ldr	r3, [r7, #24]
 810429c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810429e:	e3d2      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81042a0:	2300      	movs	r3, #0
 81042a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81042a4:	e3cf      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81042a6:	4b78      	ldr	r3, [pc, #480]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81042ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81042b2:	d107      	bne.n	81042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81042b4:	f107 030c 	add.w	r3, r7, #12
 81042b8:	4618      	mov	r0, r3
 81042ba:	f000 fd37 	bl	8104d2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81042be:	68fb      	ldr	r3, [r7, #12]
 81042c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81042c2:	e3c0      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81042c4:	2300      	movs	r3, #0
 81042c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81042c8:	e3bd      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81042ca:	4b6f      	ldr	r3, [pc, #444]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81042cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81042ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81042d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81042d4:	4b6c      	ldr	r3, [pc, #432]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	f003 0304 	and.w	r3, r3, #4
 81042dc:	2b04      	cmp	r3, #4
 81042de:	d10c      	bne.n	81042fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81042e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81042e2:	2b00      	cmp	r3, #0
 81042e4:	d109      	bne.n	81042fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81042e6:	4b68      	ldr	r3, [pc, #416]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	08db      	lsrs	r3, r3, #3
 81042ec:	f003 0303 	and.w	r3, r3, #3
 81042f0:	4a66      	ldr	r2, [pc, #408]	@ (810448c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81042f2:	fa22 f303 	lsr.w	r3, r2, r3
 81042f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81042f8:	e01e      	b.n	8104338 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81042fa:	4b63      	ldr	r3, [pc, #396]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104306:	d106      	bne.n	8104316 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8104308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810430a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810430e:	d102      	bne.n	8104316 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104310:	4b5f      	ldr	r3, [pc, #380]	@ (8104490 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104314:	e010      	b.n	8104338 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104316:	4b5c      	ldr	r3, [pc, #368]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104318:	681b      	ldr	r3, [r3, #0]
 810431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810431e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104322:	d106      	bne.n	8104332 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8104324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810432a:	d102      	bne.n	8104332 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810432c:	4b59      	ldr	r3, [pc, #356]	@ (8104494 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810432e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104330:	e002      	b.n	8104338 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104332:	2300      	movs	r3, #0
 8104334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104336:	e386      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104338:	e385      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810433a:	4b57      	ldr	r3, [pc, #348]	@ (8104498 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810433c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810433e:	e382      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104340:	2300      	movs	r3, #0
 8104342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104344:	e37f      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104346:	e9d7 2300 	ldrd	r2, r3, [r7]
 810434a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810434e:	430b      	orrs	r3, r1
 8104350:	f040 80a7 	bne.w	81044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8104354:	4b4c      	ldr	r3, [pc, #304]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104358:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810435c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104360:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104364:	d055      	beq.n	8104412 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8104366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104368:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810436c:	f200 8096 	bhi.w	810449c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104372:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104376:	f000 8084 	beq.w	8104482 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810437c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104380:	f200 808c 	bhi.w	810449c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104386:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810438a:	d030      	beq.n	81043ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810438c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810438e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104392:	f200 8083 	bhi.w	810449c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104398:	2b00      	cmp	r3, #0
 810439a:	d004      	beq.n	81043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810439c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810439e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81043a2:	d012      	beq.n	81043ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81043a4:	e07a      	b.n	810449c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81043a6:	4b38      	ldr	r3, [pc, #224]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81043a8:	681b      	ldr	r3, [r3, #0]
 81043aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81043ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81043b2:	d107      	bne.n	81043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81043b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81043b8:	4618      	mov	r0, r3
 81043ba:	f000 fe0b 	bl	8104fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81043c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81043c2:	e340      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81043c4:	2300      	movs	r3, #0
 81043c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81043c8:	e33d      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81043ca:	4b2f      	ldr	r3, [pc, #188]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81043d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81043d6:	d107      	bne.n	81043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81043d8:	f107 0318 	add.w	r3, r7, #24
 81043dc:	4618      	mov	r0, r3
 81043de:	f000 fb51 	bl	8104a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81043e2:	69bb      	ldr	r3, [r7, #24]
 81043e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81043e6:	e32e      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81043e8:	2300      	movs	r3, #0
 81043ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81043ec:	e32b      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81043ee:	4b26      	ldr	r3, [pc, #152]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81043f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81043fa:	d107      	bne.n	810440c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81043fc:	f107 030c 	add.w	r3, r7, #12
 8104400:	4618      	mov	r0, r3
 8104402:	f000 fc93 	bl	8104d2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104406:	68fb      	ldr	r3, [r7, #12]
 8104408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810440a:	e31c      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810440c:	2300      	movs	r3, #0
 810440e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104410:	e319      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104412:	4b1d      	ldr	r3, [pc, #116]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104416:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810441a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810441c:	4b1a      	ldr	r3, [pc, #104]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	f003 0304 	and.w	r3, r3, #4
 8104424:	2b04      	cmp	r3, #4
 8104426:	d10c      	bne.n	8104442 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8104428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810442a:	2b00      	cmp	r3, #0
 810442c:	d109      	bne.n	8104442 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810442e:	4b16      	ldr	r3, [pc, #88]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104430:	681b      	ldr	r3, [r3, #0]
 8104432:	08db      	lsrs	r3, r3, #3
 8104434:	f003 0303 	and.w	r3, r3, #3
 8104438:	4a14      	ldr	r2, [pc, #80]	@ (810448c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810443a:	fa22 f303 	lsr.w	r3, r2, r3
 810443e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104440:	e01e      	b.n	8104480 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104442:	4b11      	ldr	r3, [pc, #68]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810444a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810444e:	d106      	bne.n	810445e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8104450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104456:	d102      	bne.n	810445e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104458:	4b0d      	ldr	r3, [pc, #52]	@ (8104490 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810445a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810445c:	e010      	b.n	8104480 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810445e:	4b0a      	ldr	r3, [pc, #40]	@ (8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104460:	681b      	ldr	r3, [r3, #0]
 8104462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810446a:	d106      	bne.n	810447a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810446c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810446e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104472:	d102      	bne.n	810447a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104474:	4b07      	ldr	r3, [pc, #28]	@ (8104494 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104478:	e002      	b.n	8104480 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810447a:	2300      	movs	r3, #0
 810447c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810447e:	e2e2      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104480:	e2e1      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104482:	4b05      	ldr	r3, [pc, #20]	@ (8104498 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104486:	e2de      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104488:	58024400 	.word	0x58024400
 810448c:	03d09000 	.word	0x03d09000
 8104490:	003d0900 	.word	0x003d0900
 8104494:	017d7840 	.word	0x017d7840
 8104498:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810449c:	2300      	movs	r3, #0
 810449e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81044a0:	e2d1      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81044a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81044a6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 81044aa:	430b      	orrs	r3, r1
 81044ac:	f040 809c 	bne.w	81045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81044b0:	4b93      	ldr	r3, [pc, #588]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81044b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81044b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 81044b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81044ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81044c0:	d054      	beq.n	810456c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81044c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81044c8:	f200 808b 	bhi.w	81045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81044cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81044d2:	f000 8083 	beq.w	81045dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81044d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81044dc:	f200 8081 	bhi.w	81045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81044e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81044e6:	d02f      	beq.n	8104548 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81044e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81044ee:	d878      	bhi.n	81045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81044f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044f2:	2b00      	cmp	r3, #0
 81044f4:	d004      	beq.n	8104500 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81044f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81044f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81044fc:	d012      	beq.n	8104524 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81044fe:	e070      	b.n	81045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104500:	4b7f      	ldr	r3, [pc, #508]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104508:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810450c:	d107      	bne.n	810451e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810450e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104512:	4618      	mov	r0, r3
 8104514:	f000 fd5e 	bl	8104fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810451a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810451c:	e293      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810451e:	2300      	movs	r3, #0
 8104520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104522:	e290      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104524:	4b76      	ldr	r3, [pc, #472]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810452c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104530:	d107      	bne.n	8104542 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104532:	f107 0318 	add.w	r3, r7, #24
 8104536:	4618      	mov	r0, r3
 8104538:	f000 faa4 	bl	8104a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810453c:	69bb      	ldr	r3, [r7, #24]
 810453e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104540:	e281      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104542:	2300      	movs	r3, #0
 8104544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104546:	e27e      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104548:	4b6d      	ldr	r3, [pc, #436]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104554:	d107      	bne.n	8104566 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104556:	f107 030c 	add.w	r3, r7, #12
 810455a:	4618      	mov	r0, r3
 810455c:	f000 fbe6 	bl	8104d2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104560:	68fb      	ldr	r3, [r7, #12]
 8104562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104564:	e26f      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104566:	2300      	movs	r3, #0
 8104568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810456a:	e26c      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810456c:	4b64      	ldr	r3, [pc, #400]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810456e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104570:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104574:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104576:	4b62      	ldr	r3, [pc, #392]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	f003 0304 	and.w	r3, r3, #4
 810457e:	2b04      	cmp	r3, #4
 8104580:	d10c      	bne.n	810459c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8104582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104584:	2b00      	cmp	r3, #0
 8104586:	d109      	bne.n	810459c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104588:	4b5d      	ldr	r3, [pc, #372]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810458a:	681b      	ldr	r3, [r3, #0]
 810458c:	08db      	lsrs	r3, r3, #3
 810458e:	f003 0303 	and.w	r3, r3, #3
 8104592:	4a5c      	ldr	r2, [pc, #368]	@ (8104704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104594:	fa22 f303 	lsr.w	r3, r2, r3
 8104598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810459a:	e01e      	b.n	81045da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810459c:	4b58      	ldr	r3, [pc, #352]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810459e:	681b      	ldr	r3, [r3, #0]
 81045a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81045a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81045a8:	d106      	bne.n	81045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 81045aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81045ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81045b0:	d102      	bne.n	81045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81045b2:	4b55      	ldr	r3, [pc, #340]	@ (8104708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81045b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81045b6:	e010      	b.n	81045da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81045b8:	4b51      	ldr	r3, [pc, #324]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81045ba:	681b      	ldr	r3, [r3, #0]
 81045bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81045c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81045c4:	d106      	bne.n	81045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81045c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81045c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81045cc:	d102      	bne.n	81045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81045ce:	4b4f      	ldr	r3, [pc, #316]	@ (810470c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81045d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81045d2:	e002      	b.n	81045da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81045d4:	2300      	movs	r3, #0
 81045d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81045d8:	e235      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81045da:	e234      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81045dc:	4b4c      	ldr	r3, [pc, #304]	@ (8104710 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81045de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045e0:	e231      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81045e2:	2300      	movs	r3, #0
 81045e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045e6:	e22e      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81045e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81045ec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 81045f0:	430b      	orrs	r3, r1
 81045f2:	f040 808f 	bne.w	8104714 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81045f6:	4b42      	ldr	r3, [pc, #264]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81045f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81045fa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81045fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8104600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104602:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104606:	d06b      	beq.n	81046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8104608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810460a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810460e:	d874      	bhi.n	81046fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104612:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104616:	d056      	beq.n	81046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8104618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810461a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810461e:	d86c      	bhi.n	81046fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104622:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104626:	d03b      	beq.n	81046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8104628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810462a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810462e:	d864      	bhi.n	81046fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104636:	d021      	beq.n	810467c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8104638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810463a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810463e:	d85c      	bhi.n	81046fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104642:	2b00      	cmp	r3, #0
 8104644:	d004      	beq.n	8104650 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8104646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810464c:	d004      	beq.n	8104658 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810464e:	e054      	b.n	81046fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8104650:	f7fe f9e0 	bl	8102a14 <HAL_RCC_GetPCLK1Freq>
 8104654:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104656:	e1f6      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104658:	4b29      	ldr	r3, [pc, #164]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810465a:	681b      	ldr	r3, [r3, #0]
 810465c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104660:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104664:	d107      	bne.n	8104676 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104666:	f107 0318 	add.w	r3, r7, #24
 810466a:	4618      	mov	r0, r3
 810466c:	f000 fa0a 	bl	8104a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104670:	69fb      	ldr	r3, [r7, #28]
 8104672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104674:	e1e7      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104676:	2300      	movs	r3, #0
 8104678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810467a:	e1e4      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810467c:	4b20      	ldr	r3, [pc, #128]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810467e:	681b      	ldr	r3, [r3, #0]
 8104680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104688:	d107      	bne.n	810469a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810468a:	f107 030c 	add.w	r3, r7, #12
 810468e:	4618      	mov	r0, r3
 8104690:	f000 fb4c 	bl	8104d2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104694:	693b      	ldr	r3, [r7, #16]
 8104696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104698:	e1d5      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810469a:	2300      	movs	r3, #0
 810469c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810469e:	e1d2      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81046a0:	4b17      	ldr	r3, [pc, #92]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81046a2:	681b      	ldr	r3, [r3, #0]
 81046a4:	f003 0304 	and.w	r3, r3, #4
 81046a8:	2b04      	cmp	r3, #4
 81046aa:	d109      	bne.n	81046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81046ac:	4b14      	ldr	r3, [pc, #80]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	08db      	lsrs	r3, r3, #3
 81046b2:	f003 0303 	and.w	r3, r3, #3
 81046b6:	4a13      	ldr	r2, [pc, #76]	@ (8104704 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81046b8:	fa22 f303 	lsr.w	r3, r2, r3
 81046bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046be:	e1c2      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046c0:	2300      	movs	r3, #0
 81046c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81046c4:	e1bf      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81046c6:	4b0e      	ldr	r3, [pc, #56]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81046c8:	681b      	ldr	r3, [r3, #0]
 81046ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81046ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81046d2:	d102      	bne.n	81046da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81046d4:	4b0c      	ldr	r3, [pc, #48]	@ (8104708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81046d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046d8:	e1b5      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046da:	2300      	movs	r3, #0
 81046dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81046de:	e1b2      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81046e0:	4b07      	ldr	r3, [pc, #28]	@ (8104700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81046e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81046ec:	d102      	bne.n	81046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81046ee:	4b07      	ldr	r3, [pc, #28]	@ (810470c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81046f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046f2:	e1a8      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046f4:	2300      	movs	r3, #0
 81046f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81046f8:	e1a5      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81046fa:	2300      	movs	r3, #0
 81046fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81046fe:	e1a2      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104700:	58024400 	.word	0x58024400
 8104704:	03d09000 	.word	0x03d09000
 8104708:	003d0900 	.word	0x003d0900
 810470c:	017d7840 	.word	0x017d7840
 8104710:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8104714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104718:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810471c:	430b      	orrs	r3, r1
 810471e:	d173      	bne.n	8104808 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8104720:	4b9c      	ldr	r3, [pc, #624]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104724:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104728:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810472a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810472c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104730:	d02f      	beq.n	8104792 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8104732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104738:	d863      	bhi.n	8104802 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810473c:	2b00      	cmp	r3, #0
 810473e:	d004      	beq.n	810474a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8104740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104746:	d012      	beq.n	810476e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8104748:	e05b      	b.n	8104802 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810474a:	4b92      	ldr	r3, [pc, #584]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104756:	d107      	bne.n	8104768 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104758:	f107 0318 	add.w	r3, r7, #24
 810475c:	4618      	mov	r0, r3
 810475e:	f000 f991 	bl	8104a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104762:	69bb      	ldr	r3, [r7, #24]
 8104764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104766:	e16e      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104768:	2300      	movs	r3, #0
 810476a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810476c:	e16b      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810476e:	4b89      	ldr	r3, [pc, #548]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810477a:	d107      	bne.n	810478c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810477c:	f107 030c 	add.w	r3, r7, #12
 8104780:	4618      	mov	r0, r3
 8104782:	f000 fad3 	bl	8104d2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8104786:	697b      	ldr	r3, [r7, #20]
 8104788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810478a:	e15c      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810478c:	2300      	movs	r3, #0
 810478e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104790:	e159      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104792:	4b80      	ldr	r3, [pc, #512]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104796:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810479a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810479c:	4b7d      	ldr	r3, [pc, #500]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810479e:	681b      	ldr	r3, [r3, #0]
 81047a0:	f003 0304 	and.w	r3, r3, #4
 81047a4:	2b04      	cmp	r3, #4
 81047a6:	d10c      	bne.n	81047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81047a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81047aa:	2b00      	cmp	r3, #0
 81047ac:	d109      	bne.n	81047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81047ae:	4b79      	ldr	r3, [pc, #484]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81047b0:	681b      	ldr	r3, [r3, #0]
 81047b2:	08db      	lsrs	r3, r3, #3
 81047b4:	f003 0303 	and.w	r3, r3, #3
 81047b8:	4a77      	ldr	r2, [pc, #476]	@ (8104998 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81047ba:	fa22 f303 	lsr.w	r3, r2, r3
 81047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81047c0:	e01e      	b.n	8104800 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81047c2:	4b74      	ldr	r3, [pc, #464]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81047c4:	681b      	ldr	r3, [r3, #0]
 81047c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81047ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81047ce:	d106      	bne.n	81047de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81047d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81047d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81047d6:	d102      	bne.n	81047de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81047d8:	4b70      	ldr	r3, [pc, #448]	@ (810499c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81047da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81047dc:	e010      	b.n	8104800 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81047de:	4b6d      	ldr	r3, [pc, #436]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81047e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81047ea:	d106      	bne.n	81047fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 81047ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81047ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81047f2:	d102      	bne.n	81047fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81047f4:	4b6a      	ldr	r3, [pc, #424]	@ (81049a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81047f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81047f8:	e002      	b.n	8104800 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81047fa:	2300      	movs	r3, #0
 81047fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81047fe:	e122      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104800:	e121      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104802:	2300      	movs	r3, #0
 8104804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104806:	e11e      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8104808:	e9d7 2300 	ldrd	r2, r3, [r7]
 810480c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8104810:	430b      	orrs	r3, r1
 8104812:	d133      	bne.n	810487c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8104814:	4b5f      	ldr	r3, [pc, #380]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810481c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104820:	2b00      	cmp	r3, #0
 8104822:	d004      	beq.n	810482e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8104824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810482a:	d012      	beq.n	8104852 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 810482c:	e023      	b.n	8104876 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810482e:	4b59      	ldr	r3, [pc, #356]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810483a:	d107      	bne.n	810484c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810483c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104840:	4618      	mov	r0, r3
 8104842:	f000 fbc7 	bl	8104fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810484a:	e0fc      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810484c:	2300      	movs	r3, #0
 810484e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104850:	e0f9      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104852:	4b50      	ldr	r3, [pc, #320]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104854:	681b      	ldr	r3, [r3, #0]
 8104856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810485a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810485e:	d107      	bne.n	8104870 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104860:	f107 0318 	add.w	r3, r7, #24
 8104864:	4618      	mov	r0, r3
 8104866:	f000 f90d 	bl	8104a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810486a:	6a3b      	ldr	r3, [r7, #32]
 810486c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810486e:	e0ea      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104870:	2300      	movs	r3, #0
 8104872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104874:	e0e7      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104876:	2300      	movs	r3, #0
 8104878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810487a:	e0e4      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810487c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104880:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8104884:	430b      	orrs	r3, r1
 8104886:	f040 808d 	bne.w	81049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810488a:	4b42      	ldr	r3, [pc, #264]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810488c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810488e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8104892:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104896:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810489a:	d06b      	beq.n	8104974 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810489c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810489e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81048a2:	d874      	bhi.n	810498e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81048a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81048aa:	d056      	beq.n	810495a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 81048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81048b2:	d86c      	bhi.n	810498e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81048b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81048ba:	d03b      	beq.n	8104934 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 81048bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81048c2:	d864      	bhi.n	810498e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81048c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81048ca:	d021      	beq.n	8104910 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81048cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81048d2:	d85c      	bhi.n	810498e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81048d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048d6:	2b00      	cmp	r3, #0
 81048d8:	d004      	beq.n	81048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 81048da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81048e0:	d004      	beq.n	81048ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 81048e2:	e054      	b.n	810498e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81048e4:	f000 f8b8 	bl	8104a58 <HAL_RCCEx_GetD3PCLK1Freq>
 81048e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81048ea:	e0ac      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81048ec:	4b29      	ldr	r3, [pc, #164]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81048f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81048f8:	d107      	bne.n	810490a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81048fa:	f107 0318 	add.w	r3, r7, #24
 81048fe:	4618      	mov	r0, r3
 8104900:	f000 f8c0 	bl	8104a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104904:	69fb      	ldr	r3, [r7, #28]
 8104906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104908:	e09d      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810490a:	2300      	movs	r3, #0
 810490c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810490e:	e09a      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104910:	4b20      	ldr	r3, [pc, #128]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810491c:	d107      	bne.n	810492e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810491e:	f107 030c 	add.w	r3, r7, #12
 8104922:	4618      	mov	r0, r3
 8104924:	f000 fa02 	bl	8104d2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104928:	693b      	ldr	r3, [r7, #16]
 810492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810492c:	e08b      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810492e:	2300      	movs	r3, #0
 8104930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104932:	e088      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104934:	4b17      	ldr	r3, [pc, #92]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	f003 0304 	and.w	r3, r3, #4
 810493c:	2b04      	cmp	r3, #4
 810493e:	d109      	bne.n	8104954 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104940:	4b14      	ldr	r3, [pc, #80]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	08db      	lsrs	r3, r3, #3
 8104946:	f003 0303 	and.w	r3, r3, #3
 810494a:	4a13      	ldr	r2, [pc, #76]	@ (8104998 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810494c:	fa22 f303 	lsr.w	r3, r2, r3
 8104950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104952:	e078      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104954:	2300      	movs	r3, #0
 8104956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104958:	e075      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810495a:	4b0e      	ldr	r3, [pc, #56]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810495c:	681b      	ldr	r3, [r3, #0]
 810495e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104966:	d102      	bne.n	810496e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8104968:	4b0c      	ldr	r3, [pc, #48]	@ (810499c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810496a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810496c:	e06b      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810496e:	2300      	movs	r3, #0
 8104970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104972:	e068      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104974:	4b07      	ldr	r3, [pc, #28]	@ (8104994 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104976:	681b      	ldr	r3, [r3, #0]
 8104978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810497c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104980:	d102      	bne.n	8104988 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8104982:	4b07      	ldr	r3, [pc, #28]	@ (81049a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104986:	e05e      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104988:	2300      	movs	r3, #0
 810498a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810498c:	e05b      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810498e:	2300      	movs	r3, #0
 8104990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104992:	e058      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104994:	58024400 	.word	0x58024400
 8104998:	03d09000 	.word	0x03d09000
 810499c:	003d0900 	.word	0x003d0900
 81049a0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81049a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81049a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 81049ac:	430b      	orrs	r3, r1
 81049ae:	d148      	bne.n	8104a42 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81049b0:	4b27      	ldr	r3, [pc, #156]	@ (8104a50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81049b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81049b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81049b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81049ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81049c0:	d02a      	beq.n	8104a18 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81049c8:	d838      	bhi.n	8104a3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 81049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049cc:	2b00      	cmp	r3, #0
 81049ce:	d004      	beq.n	81049da <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 81049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81049d6:	d00d      	beq.n	81049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 81049d8:	e030      	b.n	8104a3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81049da:	4b1d      	ldr	r3, [pc, #116]	@ (8104a50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81049dc:	681b      	ldr	r3, [r3, #0]
 81049de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81049e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81049e6:	d102      	bne.n	81049ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 81049e8:	4b1a      	ldr	r3, [pc, #104]	@ (8104a54 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 81049ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049ec:	e02b      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049ee:	2300      	movs	r3, #0
 81049f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81049f2:	e028      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81049f4:	4b16      	ldr	r3, [pc, #88]	@ (8104a50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81049f6:	681b      	ldr	r3, [r3, #0]
 81049f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81049fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104a00:	d107      	bne.n	8104a12 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104a06:	4618      	mov	r0, r3
 8104a08:	f000 fae4 	bl	8104fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a10:	e019      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a12:	2300      	movs	r3, #0
 8104a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a16:	e016      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104a18:	4b0d      	ldr	r3, [pc, #52]	@ (8104a50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104a24:	d107      	bne.n	8104a36 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104a26:	f107 0318 	add.w	r3, r7, #24
 8104a2a:	4618      	mov	r0, r3
 8104a2c:	f000 f82a 	bl	8104a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104a30:	69fb      	ldr	r3, [r7, #28]
 8104a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a34:	e007      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a36:	2300      	movs	r3, #0
 8104a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a3a:	e004      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104a3c:	2300      	movs	r3, #0
 8104a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a40:	e001      	b.n	8104a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8104a42:	2300      	movs	r3, #0
 8104a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8104a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8104a48:	4618      	mov	r0, r3
 8104a4a:	3740      	adds	r7, #64	@ 0x40
 8104a4c:	46bd      	mov	sp, r7
 8104a4e:	bd80      	pop	{r7, pc}
 8104a50:	58024400 	.word	0x58024400
 8104a54:	017d7840 	.word	0x017d7840

08104a58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104a58:	b580      	push	{r7, lr}
 8104a5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104a5c:	f7fd ffa8 	bl	81029b0 <HAL_RCC_GetHCLKFreq>
 8104a60:	4602      	mov	r2, r0
 8104a62:	4b06      	ldr	r3, [pc, #24]	@ (8104a7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104a64:	6a1b      	ldr	r3, [r3, #32]
 8104a66:	091b      	lsrs	r3, r3, #4
 8104a68:	f003 0307 	and.w	r3, r3, #7
 8104a6c:	4904      	ldr	r1, [pc, #16]	@ (8104a80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104a6e:	5ccb      	ldrb	r3, [r1, r3]
 8104a70:	f003 031f 	and.w	r3, r3, #31
 8104a74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104a78:	4618      	mov	r0, r3
 8104a7a:	bd80      	pop	{r7, pc}
 8104a7c:	58024400 	.word	0x58024400
 8104a80:	0810847c 	.word	0x0810847c

08104a84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8104a84:	b480      	push	{r7}
 8104a86:	b089      	sub	sp, #36	@ 0x24
 8104a88:	af00      	add	r7, sp, #0
 8104a8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104a8c:	4ba1      	ldr	r3, [pc, #644]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a90:	f003 0303 	and.w	r3, r3, #3
 8104a94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8104a96:	4b9f      	ldr	r3, [pc, #636]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a9a:	0b1b      	lsrs	r3, r3, #12
 8104a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104aa0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104aa2:	4b9c      	ldr	r3, [pc, #624]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104aa6:	091b      	lsrs	r3, r3, #4
 8104aa8:	f003 0301 	and.w	r3, r3, #1
 8104aac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8104aae:	4b99      	ldr	r3, [pc, #612]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104ab2:	08db      	lsrs	r3, r3, #3
 8104ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104ab8:	693a      	ldr	r2, [r7, #16]
 8104aba:	fb02 f303 	mul.w	r3, r2, r3
 8104abe:	ee07 3a90 	vmov	s15, r3
 8104ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ac6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104aca:	697b      	ldr	r3, [r7, #20]
 8104acc:	2b00      	cmp	r3, #0
 8104ace:	f000 8111 	beq.w	8104cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104ad2:	69bb      	ldr	r3, [r7, #24]
 8104ad4:	2b02      	cmp	r3, #2
 8104ad6:	f000 8083 	beq.w	8104be0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104ada:	69bb      	ldr	r3, [r7, #24]
 8104adc:	2b02      	cmp	r3, #2
 8104ade:	f200 80a1 	bhi.w	8104c24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104ae2:	69bb      	ldr	r3, [r7, #24]
 8104ae4:	2b00      	cmp	r3, #0
 8104ae6:	d003      	beq.n	8104af0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104ae8:	69bb      	ldr	r3, [r7, #24]
 8104aea:	2b01      	cmp	r3, #1
 8104aec:	d056      	beq.n	8104b9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104aee:	e099      	b.n	8104c24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104af0:	4b88      	ldr	r3, [pc, #544]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104af2:	681b      	ldr	r3, [r3, #0]
 8104af4:	f003 0320 	and.w	r3, r3, #32
 8104af8:	2b00      	cmp	r3, #0
 8104afa:	d02d      	beq.n	8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104afc:	4b85      	ldr	r3, [pc, #532]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104afe:	681b      	ldr	r3, [r3, #0]
 8104b00:	08db      	lsrs	r3, r3, #3
 8104b02:	f003 0303 	and.w	r3, r3, #3
 8104b06:	4a84      	ldr	r2, [pc, #528]	@ (8104d18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104b08:	fa22 f303 	lsr.w	r3, r2, r3
 8104b0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104b0e:	68bb      	ldr	r3, [r7, #8]
 8104b10:	ee07 3a90 	vmov	s15, r3
 8104b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b18:	697b      	ldr	r3, [r7, #20]
 8104b1a:	ee07 3a90 	vmov	s15, r3
 8104b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b26:	4b7b      	ldr	r3, [pc, #492]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b2e:	ee07 3a90 	vmov	s15, r3
 8104b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104b56:	e087      	b.n	8104c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104b58:	697b      	ldr	r3, [r7, #20]
 8104b5a:	ee07 3a90 	vmov	s15, r3
 8104b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8104d20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b72:	ee07 3a90 	vmov	s15, r3
 8104b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104b9a:	e065      	b.n	8104c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104b9c:	697b      	ldr	r3, [r7, #20]
 8104b9e:	ee07 3a90 	vmov	s15, r3
 8104ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ba6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bae:	4b59      	ldr	r3, [pc, #356]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104bb6:	ee07 3a90 	vmov	s15, r3
 8104bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8104bc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104bde:	e043      	b.n	8104c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104be0:	697b      	ldr	r3, [r7, #20]
 8104be2:	ee07 3a90 	vmov	s15, r3
 8104be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8104d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bf2:	4b48      	ldr	r3, [pc, #288]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104bfa:	ee07 3a90 	vmov	s15, r3
 8104bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104c22:	e021      	b.n	8104c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104c24:	697b      	ldr	r3, [r7, #20]
 8104c26:	ee07 3a90 	vmov	s15, r3
 8104c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c36:	4b37      	ldr	r3, [pc, #220]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c3e:	ee07 3a90 	vmov	s15, r3
 8104c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104c66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8104c68:	4b2a      	ldr	r3, [pc, #168]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104c6c:	0a5b      	lsrs	r3, r3, #9
 8104c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104c72:	ee07 3a90 	vmov	s15, r3
 8104c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104c82:	edd7 6a07 	vldr	s13, [r7, #28]
 8104c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104c8e:	ee17 2a90 	vmov	r2, s15
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8104c96:	4b1f      	ldr	r3, [pc, #124]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104c9a:	0c1b      	lsrs	r3, r3, #16
 8104c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104ca0:	ee07 3a90 	vmov	s15, r3
 8104ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ca8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104cac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104cb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8104cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104cbc:	ee17 2a90 	vmov	r2, s15
 8104cc0:	687b      	ldr	r3, [r7, #4]
 8104cc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8104cc4:	4b13      	ldr	r3, [pc, #76]	@ (8104d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104cc8:	0e1b      	lsrs	r3, r3, #24
 8104cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104cce:	ee07 3a90 	vmov	s15, r3
 8104cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104cda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8104ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104cea:	ee17 2a90 	vmov	r2, s15
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104cf2:	e008      	b.n	8104d06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104cf4:	687b      	ldr	r3, [r7, #4]
 8104cf6:	2200      	movs	r2, #0
 8104cf8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	2200      	movs	r2, #0
 8104cfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104d00:	687b      	ldr	r3, [r7, #4]
 8104d02:	2200      	movs	r2, #0
 8104d04:	609a      	str	r2, [r3, #8]
}
 8104d06:	bf00      	nop
 8104d08:	3724      	adds	r7, #36	@ 0x24
 8104d0a:	46bd      	mov	sp, r7
 8104d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d10:	4770      	bx	lr
 8104d12:	bf00      	nop
 8104d14:	58024400 	.word	0x58024400
 8104d18:	03d09000 	.word	0x03d09000
 8104d1c:	46000000 	.word	0x46000000
 8104d20:	4c742400 	.word	0x4c742400
 8104d24:	4a742400 	.word	0x4a742400
 8104d28:	4bbebc20 	.word	0x4bbebc20

08104d2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8104d2c:	b480      	push	{r7}
 8104d2e:	b089      	sub	sp, #36	@ 0x24
 8104d30:	af00      	add	r7, sp, #0
 8104d32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104d34:	4ba1      	ldr	r3, [pc, #644]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104d38:	f003 0303 	and.w	r3, r3, #3
 8104d3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8104d3e:	4b9f      	ldr	r3, [pc, #636]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104d42:	0d1b      	lsrs	r3, r3, #20
 8104d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104d48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104d4a:	4b9c      	ldr	r3, [pc, #624]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d4e:	0a1b      	lsrs	r3, r3, #8
 8104d50:	f003 0301 	and.w	r3, r3, #1
 8104d54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8104d56:	4b99      	ldr	r3, [pc, #612]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104d5a:	08db      	lsrs	r3, r3, #3
 8104d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104d60:	693a      	ldr	r2, [r7, #16]
 8104d62:	fb02 f303 	mul.w	r3, r2, r3
 8104d66:	ee07 3a90 	vmov	s15, r3
 8104d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104d72:	697b      	ldr	r3, [r7, #20]
 8104d74:	2b00      	cmp	r3, #0
 8104d76:	f000 8111 	beq.w	8104f9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104d7a:	69bb      	ldr	r3, [r7, #24]
 8104d7c:	2b02      	cmp	r3, #2
 8104d7e:	f000 8083 	beq.w	8104e88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104d82:	69bb      	ldr	r3, [r7, #24]
 8104d84:	2b02      	cmp	r3, #2
 8104d86:	f200 80a1 	bhi.w	8104ecc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104d8a:	69bb      	ldr	r3, [r7, #24]
 8104d8c:	2b00      	cmp	r3, #0
 8104d8e:	d003      	beq.n	8104d98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104d90:	69bb      	ldr	r3, [r7, #24]
 8104d92:	2b01      	cmp	r3, #1
 8104d94:	d056      	beq.n	8104e44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104d96:	e099      	b.n	8104ecc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104d98:	4b88      	ldr	r3, [pc, #544]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d9a:	681b      	ldr	r3, [r3, #0]
 8104d9c:	f003 0320 	and.w	r3, r3, #32
 8104da0:	2b00      	cmp	r3, #0
 8104da2:	d02d      	beq.n	8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104da4:	4b85      	ldr	r3, [pc, #532]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104da6:	681b      	ldr	r3, [r3, #0]
 8104da8:	08db      	lsrs	r3, r3, #3
 8104daa:	f003 0303 	and.w	r3, r3, #3
 8104dae:	4a84      	ldr	r2, [pc, #528]	@ (8104fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104db0:	fa22 f303 	lsr.w	r3, r2, r3
 8104db4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104db6:	68bb      	ldr	r3, [r7, #8]
 8104db8:	ee07 3a90 	vmov	s15, r3
 8104dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104dc0:	697b      	ldr	r3, [r7, #20]
 8104dc2:	ee07 3a90 	vmov	s15, r3
 8104dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104dce:	4b7b      	ldr	r3, [pc, #492]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104dd6:	ee07 3a90 	vmov	s15, r3
 8104dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8104de2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104dfe:	e087      	b.n	8104f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104e00:	697b      	ldr	r3, [r7, #20]
 8104e02:	ee07 3a90 	vmov	s15, r3
 8104e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8104fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e12:	4b6a      	ldr	r3, [pc, #424]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e1a:	ee07 3a90 	vmov	s15, r3
 8104e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104e42:	e065      	b.n	8104f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104e44:	697b      	ldr	r3, [r7, #20]
 8104e46:	ee07 3a90 	vmov	s15, r3
 8104e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e56:	4b59      	ldr	r3, [pc, #356]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e5e:	ee07 3a90 	vmov	s15, r3
 8104e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104e86:	e043      	b.n	8104f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104e88:	697b      	ldr	r3, [r7, #20]
 8104e8a:	ee07 3a90 	vmov	s15, r3
 8104e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8104fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e9a:	4b48      	ldr	r3, [pc, #288]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ea2:	ee07 3a90 	vmov	s15, r3
 8104ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8104eae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104eca:	e021      	b.n	8104f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104ecc:	697b      	ldr	r3, [r7, #20]
 8104ece:	ee07 3a90 	vmov	s15, r3
 8104ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ed6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ede:	4b37      	ldr	r3, [pc, #220]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ee6:	ee07 3a90 	vmov	s15, r3
 8104eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ef2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104f0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8104f10:	4b2a      	ldr	r3, [pc, #168]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104f14:	0a5b      	lsrs	r3, r3, #9
 8104f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104f1a:	ee07 3a90 	vmov	s15, r3
 8104f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104f26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f36:	ee17 2a90 	vmov	r2, s15
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8104f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104f42:	0c1b      	lsrs	r3, r3, #16
 8104f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104f48:	ee07 3a90 	vmov	s15, r3
 8104f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104f54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f58:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f64:	ee17 2a90 	vmov	r2, s15
 8104f68:	687b      	ldr	r3, [r7, #4]
 8104f6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8104f6c:	4b13      	ldr	r3, [pc, #76]	@ (8104fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104f70:	0e1b      	lsrs	r3, r3, #24
 8104f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104f76:	ee07 3a90 	vmov	s15, r3
 8104f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104f82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f86:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f92:	ee17 2a90 	vmov	r2, s15
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104f9a:	e008      	b.n	8104fae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104f9c:	687b      	ldr	r3, [r7, #4]
 8104f9e:	2200      	movs	r2, #0
 8104fa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	2200      	movs	r2, #0
 8104fa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	2200      	movs	r2, #0
 8104fac:	609a      	str	r2, [r3, #8]
}
 8104fae:	bf00      	nop
 8104fb0:	3724      	adds	r7, #36	@ 0x24
 8104fb2:	46bd      	mov	sp, r7
 8104fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fb8:	4770      	bx	lr
 8104fba:	bf00      	nop
 8104fbc:	58024400 	.word	0x58024400
 8104fc0:	03d09000 	.word	0x03d09000
 8104fc4:	46000000 	.word	0x46000000
 8104fc8:	4c742400 	.word	0x4c742400
 8104fcc:	4a742400 	.word	0x4a742400
 8104fd0:	4bbebc20 	.word	0x4bbebc20

08104fd4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8104fd4:	b480      	push	{r7}
 8104fd6:	b089      	sub	sp, #36	@ 0x24
 8104fd8:	af00      	add	r7, sp, #0
 8104fda:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104fdc:	4ba0      	ldr	r3, [pc, #640]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104fe0:	f003 0303 	and.w	r3, r3, #3
 8104fe4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8104fe6:	4b9e      	ldr	r3, [pc, #632]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104fea:	091b      	lsrs	r3, r3, #4
 8104fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104ff0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8104ff2:	4b9b      	ldr	r3, [pc, #620]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104ff6:	f003 0301 	and.w	r3, r3, #1
 8104ffa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104ffc:	4b98      	ldr	r3, [pc, #608]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105000:	08db      	lsrs	r3, r3, #3
 8105002:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105006:	693a      	ldr	r2, [r7, #16]
 8105008:	fb02 f303 	mul.w	r3, r2, r3
 810500c:	ee07 3a90 	vmov	s15, r3
 8105010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105014:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105018:	697b      	ldr	r3, [r7, #20]
 810501a:	2b00      	cmp	r3, #0
 810501c:	f000 8111 	beq.w	8105242 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105020:	69bb      	ldr	r3, [r7, #24]
 8105022:	2b02      	cmp	r3, #2
 8105024:	f000 8083 	beq.w	810512e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105028:	69bb      	ldr	r3, [r7, #24]
 810502a:	2b02      	cmp	r3, #2
 810502c:	f200 80a1 	bhi.w	8105172 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105030:	69bb      	ldr	r3, [r7, #24]
 8105032:	2b00      	cmp	r3, #0
 8105034:	d003      	beq.n	810503e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8105036:	69bb      	ldr	r3, [r7, #24]
 8105038:	2b01      	cmp	r3, #1
 810503a:	d056      	beq.n	81050ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810503c:	e099      	b.n	8105172 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810503e:	4b88      	ldr	r3, [pc, #544]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105040:	681b      	ldr	r3, [r3, #0]
 8105042:	f003 0320 	and.w	r3, r3, #32
 8105046:	2b00      	cmp	r3, #0
 8105048:	d02d      	beq.n	81050a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810504a:	4b85      	ldr	r3, [pc, #532]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810504c:	681b      	ldr	r3, [r3, #0]
 810504e:	08db      	lsrs	r3, r3, #3
 8105050:	f003 0303 	and.w	r3, r3, #3
 8105054:	4a83      	ldr	r2, [pc, #524]	@ (8105264 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105056:	fa22 f303 	lsr.w	r3, r2, r3
 810505a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810505c:	68bb      	ldr	r3, [r7, #8]
 810505e:	ee07 3a90 	vmov	s15, r3
 8105062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105066:	697b      	ldr	r3, [r7, #20]
 8105068:	ee07 3a90 	vmov	s15, r3
 810506c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105074:	4b7a      	ldr	r3, [pc, #488]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810507c:	ee07 3a90 	vmov	s15, r3
 8105080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105084:	ed97 6a03 	vldr	s12, [r7, #12]
 8105088:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8105268 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810508c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105094:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810509c:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81050a4:	e087      	b.n	81051b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81050a6:	697b      	ldr	r3, [r7, #20]
 81050a8:	ee07 3a90 	vmov	s15, r3
 81050ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050b0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810526c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81050b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050b8:	4b69      	ldr	r3, [pc, #420]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81050ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81050bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050c0:	ee07 3a90 	vmov	s15, r3
 81050c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050c8:	ed97 6a03 	vldr	s12, [r7, #12]
 81050cc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8105268 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81050d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81050dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81050e8:	e065      	b.n	81051b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81050ea:	697b      	ldr	r3, [r7, #20]
 81050ec:	ee07 3a90 	vmov	s15, r3
 81050f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050f4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8105270 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81050f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050fc:	4b58      	ldr	r3, [pc, #352]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81050fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105104:	ee07 3a90 	vmov	s15, r3
 8105108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810510c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105110:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8105268 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810511c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105128:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810512c:	e043      	b.n	81051b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810512e:	697b      	ldr	r3, [r7, #20]
 8105130:	ee07 3a90 	vmov	s15, r3
 8105134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105138:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8105274 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810513c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105140:	4b47      	ldr	r3, [pc, #284]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105148:	ee07 3a90 	vmov	s15, r3
 810514c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105150:	ed97 6a03 	vldr	s12, [r7, #12]
 8105154:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8105268 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810515c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105160:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105168:	ee67 7a27 	vmul.f32	s15, s14, s15
 810516c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105170:	e021      	b.n	81051b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105172:	697b      	ldr	r3, [r7, #20]
 8105174:	ee07 3a90 	vmov	s15, r3
 8105178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810517c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810526c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105184:	4b36      	ldr	r3, [pc, #216]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810518c:	ee07 3a90 	vmov	s15, r3
 8105190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105194:	ed97 6a03 	vldr	s12, [r7, #12]
 8105198:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8105268 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810519c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81051a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81051b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81051b6:	4b2a      	ldr	r3, [pc, #168]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81051b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81051ba:	0a5b      	lsrs	r3, r3, #9
 81051bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81051c0:	ee07 3a90 	vmov	s15, r3
 81051c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81051cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81051d0:	edd7 6a07 	vldr	s13, [r7, #28]
 81051d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81051d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81051dc:	ee17 2a90 	vmov	r2, s15
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 81051e4:	4b1e      	ldr	r3, [pc, #120]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81051e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81051e8:	0c1b      	lsrs	r3, r3, #16
 81051ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81051ee:	ee07 3a90 	vmov	s15, r3
 81051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81051fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 81051fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8105202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810520a:	ee17 2a90 	vmov	r2, s15
 810520e:	687b      	ldr	r3, [r7, #4]
 8105210:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8105212:	4b13      	ldr	r3, [pc, #76]	@ (8105260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105216:	0e1b      	lsrs	r3, r3, #24
 8105218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810521c:	ee07 3a90 	vmov	s15, r3
 8105220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105224:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105228:	ee37 7a87 	vadd.f32	s14, s15, s14
 810522c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105238:	ee17 2a90 	vmov	r2, s15
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105240:	e008      	b.n	8105254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	2200      	movs	r2, #0
 8105246:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	2200      	movs	r2, #0
 810524c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	2200      	movs	r2, #0
 8105252:	609a      	str	r2, [r3, #8]
}
 8105254:	bf00      	nop
 8105256:	3724      	adds	r7, #36	@ 0x24
 8105258:	46bd      	mov	sp, r7
 810525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810525e:	4770      	bx	lr
 8105260:	58024400 	.word	0x58024400
 8105264:	03d09000 	.word	0x03d09000
 8105268:	46000000 	.word	0x46000000
 810526c:	4c742400 	.word	0x4c742400
 8105270:	4a742400 	.word	0x4a742400
 8105274:	4bbebc20 	.word	0x4bbebc20

08105278 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105278:	b580      	push	{r7, lr}
 810527a:	b084      	sub	sp, #16
 810527c:	af00      	add	r7, sp, #0
 810527e:	6078      	str	r0, [r7, #4]
 8105280:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105282:	2300      	movs	r3, #0
 8105284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105286:	4b54      	ldr	r3, [pc, #336]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810528a:	f003 0303 	and.w	r3, r3, #3
 810528e:	2b03      	cmp	r3, #3
 8105290:	d101      	bne.n	8105296 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105292:	2301      	movs	r3, #1
 8105294:	e09b      	b.n	81053ce <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105296:	4b50      	ldr	r3, [pc, #320]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105298:	681b      	ldr	r3, [r3, #0]
 810529a:	4a4f      	ldr	r2, [pc, #316]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 810529c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81052a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81052a2:	f7fc fbf5 	bl	8101a90 <HAL_GetTick>
 81052a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81052a8:	e008      	b.n	81052bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81052aa:	f7fc fbf1 	bl	8101a90 <HAL_GetTick>
 81052ae:	4602      	mov	r2, r0
 81052b0:	68bb      	ldr	r3, [r7, #8]
 81052b2:	1ad3      	subs	r3, r2, r3
 81052b4:	2b02      	cmp	r3, #2
 81052b6:	d901      	bls.n	81052bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81052b8:	2303      	movs	r3, #3
 81052ba:	e088      	b.n	81053ce <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81052bc:	4b46      	ldr	r3, [pc, #280]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 81052be:	681b      	ldr	r3, [r3, #0]
 81052c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81052c4:	2b00      	cmp	r3, #0
 81052c6:	d1f0      	bne.n	81052aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81052c8:	4b43      	ldr	r3, [pc, #268]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 81052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81052cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81052d0:	687b      	ldr	r3, [r7, #4]
 81052d2:	681b      	ldr	r3, [r3, #0]
 81052d4:	031b      	lsls	r3, r3, #12
 81052d6:	4940      	ldr	r1, [pc, #256]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 81052d8:	4313      	orrs	r3, r2
 81052da:	628b      	str	r3, [r1, #40]	@ 0x28
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	685b      	ldr	r3, [r3, #4]
 81052e0:	3b01      	subs	r3, #1
 81052e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81052e6:	687b      	ldr	r3, [r7, #4]
 81052e8:	689b      	ldr	r3, [r3, #8]
 81052ea:	3b01      	subs	r3, #1
 81052ec:	025b      	lsls	r3, r3, #9
 81052ee:	b29b      	uxth	r3, r3
 81052f0:	431a      	orrs	r2, r3
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	68db      	ldr	r3, [r3, #12]
 81052f6:	3b01      	subs	r3, #1
 81052f8:	041b      	lsls	r3, r3, #16
 81052fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81052fe:	431a      	orrs	r2, r3
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	691b      	ldr	r3, [r3, #16]
 8105304:	3b01      	subs	r3, #1
 8105306:	061b      	lsls	r3, r3, #24
 8105308:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810530c:	4932      	ldr	r1, [pc, #200]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 810530e:	4313      	orrs	r3, r2
 8105310:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105312:	4b31      	ldr	r3, [pc, #196]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105316:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	695b      	ldr	r3, [r3, #20]
 810531e:	492e      	ldr	r1, [pc, #184]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105320:	4313      	orrs	r3, r2
 8105322:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105324:	4b2c      	ldr	r3, [pc, #176]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105328:	f023 0220 	bic.w	r2, r3, #32
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	699b      	ldr	r3, [r3, #24]
 8105330:	4929      	ldr	r1, [pc, #164]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105332:	4313      	orrs	r3, r2
 8105334:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105336:	4b28      	ldr	r3, [pc, #160]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810533a:	4a27      	ldr	r2, [pc, #156]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 810533c:	f023 0310 	bic.w	r3, r3, #16
 8105340:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105342:	4b25      	ldr	r3, [pc, #148]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810534a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810534e:	687a      	ldr	r2, [r7, #4]
 8105350:	69d2      	ldr	r2, [r2, #28]
 8105352:	00d2      	lsls	r2, r2, #3
 8105354:	4920      	ldr	r1, [pc, #128]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105356:	4313      	orrs	r3, r2
 8105358:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810535a:	4b1f      	ldr	r3, [pc, #124]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 810535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810535e:	4a1e      	ldr	r2, [pc, #120]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105360:	f043 0310 	orr.w	r3, r3, #16
 8105364:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105366:	683b      	ldr	r3, [r7, #0]
 8105368:	2b00      	cmp	r3, #0
 810536a:	d106      	bne.n	810537a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810536c:	4b1a      	ldr	r3, [pc, #104]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 810536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105370:	4a19      	ldr	r2, [pc, #100]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105372:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8105376:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105378:	e00f      	b.n	810539a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810537a:	683b      	ldr	r3, [r7, #0]
 810537c:	2b01      	cmp	r3, #1
 810537e:	d106      	bne.n	810538e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105380:	4b15      	ldr	r3, [pc, #84]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105384:	4a14      	ldr	r2, [pc, #80]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810538a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810538c:	e005      	b.n	810539a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810538e:	4b12      	ldr	r3, [pc, #72]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105392:	4a11      	ldr	r2, [pc, #68]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 8105394:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105398:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810539a:	4b0f      	ldr	r3, [pc, #60]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 810539c:	681b      	ldr	r3, [r3, #0]
 810539e:	4a0e      	ldr	r2, [pc, #56]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 81053a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81053a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81053a6:	f7fc fb73 	bl	8101a90 <HAL_GetTick>
 81053aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81053ac:	e008      	b.n	81053c0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81053ae:	f7fc fb6f 	bl	8101a90 <HAL_GetTick>
 81053b2:	4602      	mov	r2, r0
 81053b4:	68bb      	ldr	r3, [r7, #8]
 81053b6:	1ad3      	subs	r3, r2, r3
 81053b8:	2b02      	cmp	r3, #2
 81053ba:	d901      	bls.n	81053c0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81053bc:	2303      	movs	r3, #3
 81053be:	e006      	b.n	81053ce <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81053c0:	4b05      	ldr	r3, [pc, #20]	@ (81053d8 <RCCEx_PLL2_Config+0x160>)
 81053c2:	681b      	ldr	r3, [r3, #0]
 81053c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81053c8:	2b00      	cmp	r3, #0
 81053ca:	d0f0      	beq.n	81053ae <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 81053ce:	4618      	mov	r0, r3
 81053d0:	3710      	adds	r7, #16
 81053d2:	46bd      	mov	sp, r7
 81053d4:	bd80      	pop	{r7, pc}
 81053d6:	bf00      	nop
 81053d8:	58024400 	.word	0x58024400

081053dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81053dc:	b580      	push	{r7, lr}
 81053de:	b084      	sub	sp, #16
 81053e0:	af00      	add	r7, sp, #0
 81053e2:	6078      	str	r0, [r7, #4]
 81053e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81053e6:	2300      	movs	r3, #0
 81053e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81053ea:	4b54      	ldr	r3, [pc, #336]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81053ee:	f003 0303 	and.w	r3, r3, #3
 81053f2:	2b03      	cmp	r3, #3
 81053f4:	d101      	bne.n	81053fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81053f6:	2301      	movs	r3, #1
 81053f8:	e09b      	b.n	8105532 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81053fa:	4b50      	ldr	r3, [pc, #320]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81053fc:	681b      	ldr	r3, [r3, #0]
 81053fe:	4a4f      	ldr	r2, [pc, #316]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 8105400:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8105404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105406:	f7fc fb43 	bl	8101a90 <HAL_GetTick>
 810540a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810540c:	e008      	b.n	8105420 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810540e:	f7fc fb3f 	bl	8101a90 <HAL_GetTick>
 8105412:	4602      	mov	r2, r0
 8105414:	68bb      	ldr	r3, [r7, #8]
 8105416:	1ad3      	subs	r3, r2, r3
 8105418:	2b02      	cmp	r3, #2
 810541a:	d901      	bls.n	8105420 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810541c:	2303      	movs	r3, #3
 810541e:	e088      	b.n	8105532 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105420:	4b46      	ldr	r3, [pc, #280]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 8105422:	681b      	ldr	r3, [r3, #0]
 8105424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105428:	2b00      	cmp	r3, #0
 810542a:	d1f0      	bne.n	810540e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810542c:	4b43      	ldr	r3, [pc, #268]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 810542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105430:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8105434:	687b      	ldr	r3, [r7, #4]
 8105436:	681b      	ldr	r3, [r3, #0]
 8105438:	051b      	lsls	r3, r3, #20
 810543a:	4940      	ldr	r1, [pc, #256]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 810543c:	4313      	orrs	r3, r2
 810543e:	628b      	str	r3, [r1, #40]	@ 0x28
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	685b      	ldr	r3, [r3, #4]
 8105444:	3b01      	subs	r3, #1
 8105446:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810544a:	687b      	ldr	r3, [r7, #4]
 810544c:	689b      	ldr	r3, [r3, #8]
 810544e:	3b01      	subs	r3, #1
 8105450:	025b      	lsls	r3, r3, #9
 8105452:	b29b      	uxth	r3, r3
 8105454:	431a      	orrs	r2, r3
 8105456:	687b      	ldr	r3, [r7, #4]
 8105458:	68db      	ldr	r3, [r3, #12]
 810545a:	3b01      	subs	r3, #1
 810545c:	041b      	lsls	r3, r3, #16
 810545e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8105462:	431a      	orrs	r2, r3
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	691b      	ldr	r3, [r3, #16]
 8105468:	3b01      	subs	r3, #1
 810546a:	061b      	lsls	r3, r3, #24
 810546c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8105470:	4932      	ldr	r1, [pc, #200]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 8105472:	4313      	orrs	r3, r2
 8105474:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105476:	4b31      	ldr	r3, [pc, #196]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 8105478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810547a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	695b      	ldr	r3, [r3, #20]
 8105482:	492e      	ldr	r1, [pc, #184]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 8105484:	4313      	orrs	r3, r2
 8105486:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105488:	4b2c      	ldr	r3, [pc, #176]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 810548a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810548c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	699b      	ldr	r3, [r3, #24]
 8105494:	4929      	ldr	r1, [pc, #164]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 8105496:	4313      	orrs	r3, r2
 8105498:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810549a:	4b28      	ldr	r3, [pc, #160]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 810549c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810549e:	4a27      	ldr	r2, [pc, #156]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81054a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81054a6:	4b25      	ldr	r3, [pc, #148]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81054aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81054ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81054b2:	687a      	ldr	r2, [r7, #4]
 81054b4:	69d2      	ldr	r2, [r2, #28]
 81054b6:	00d2      	lsls	r2, r2, #3
 81054b8:	4920      	ldr	r1, [pc, #128]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054ba:	4313      	orrs	r3, r2
 81054bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81054be:	4b1f      	ldr	r3, [pc, #124]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81054c2:	4a1e      	ldr	r2, [pc, #120]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81054c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81054ca:	683b      	ldr	r3, [r7, #0]
 81054cc:	2b00      	cmp	r3, #0
 81054ce:	d106      	bne.n	81054de <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81054d0:	4b1a      	ldr	r3, [pc, #104]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81054d4:	4a19      	ldr	r2, [pc, #100]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81054da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81054dc:	e00f      	b.n	81054fe <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81054de:	683b      	ldr	r3, [r7, #0]
 81054e0:	2b01      	cmp	r3, #1
 81054e2:	d106      	bne.n	81054f2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81054e4:	4b15      	ldr	r3, [pc, #84]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81054e8:	4a14      	ldr	r2, [pc, #80]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81054ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81054f0:	e005      	b.n	81054fe <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81054f2:	4b12      	ldr	r3, [pc, #72]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81054f6:	4a11      	ldr	r2, [pc, #68]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 81054f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81054fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81054fe:	4b0f      	ldr	r3, [pc, #60]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 8105500:	681b      	ldr	r3, [r3, #0]
 8105502:	4a0e      	ldr	r2, [pc, #56]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 8105504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8105508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810550a:	f7fc fac1 	bl	8101a90 <HAL_GetTick>
 810550e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105510:	e008      	b.n	8105524 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105512:	f7fc fabd 	bl	8101a90 <HAL_GetTick>
 8105516:	4602      	mov	r2, r0
 8105518:	68bb      	ldr	r3, [r7, #8]
 810551a:	1ad3      	subs	r3, r2, r3
 810551c:	2b02      	cmp	r3, #2
 810551e:	d901      	bls.n	8105524 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105520:	2303      	movs	r3, #3
 8105522:	e006      	b.n	8105532 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105524:	4b05      	ldr	r3, [pc, #20]	@ (810553c <RCCEx_PLL3_Config+0x160>)
 8105526:	681b      	ldr	r3, [r3, #0]
 8105528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810552c:	2b00      	cmp	r3, #0
 810552e:	d0f0      	beq.n	8105512 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105530:	7bfb      	ldrb	r3, [r7, #15]
}
 8105532:	4618      	mov	r0, r3
 8105534:	3710      	adds	r7, #16
 8105536:	46bd      	mov	sp, r7
 8105538:	bd80      	pop	{r7, pc}
 810553a:	bf00      	nop
 810553c:	58024400 	.word	0x58024400

08105540 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8105540:	b580      	push	{r7, lr}
 8105542:	b084      	sub	sp, #16
 8105544:	af00      	add	r7, sp, #0
 8105546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8105548:	2301      	movs	r3, #1
 810554a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	2b00      	cmp	r3, #0
 8105550:	d073      	beq.n	810563a <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8105552:	687b      	ldr	r3, [r7, #4]
 8105554:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8105558:	b2db      	uxtb	r3, r3
 810555a:	2b00      	cmp	r3, #0
 810555c:	d106      	bne.n	810556c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	2200      	movs	r2, #0
 8105562:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8105566:	6878      	ldr	r0, [r7, #4]
 8105568:	f7fb fdb6 	bl	81010d8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	2202      	movs	r2, #2
 8105570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8105574:	687b      	ldr	r3, [r7, #4]
 8105576:	681b      	ldr	r3, [r3, #0]
 8105578:	68db      	ldr	r3, [r3, #12]
 810557a:	f003 0310 	and.w	r3, r3, #16
 810557e:	2b10      	cmp	r3, #16
 8105580:	d052      	beq.n	8105628 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8105582:	687b      	ldr	r3, [r7, #4]
 8105584:	681b      	ldr	r3, [r3, #0]
 8105586:	22ca      	movs	r2, #202	@ 0xca
 8105588:	625a      	str	r2, [r3, #36]	@ 0x24
 810558a:	687b      	ldr	r3, [r7, #4]
 810558c:	681b      	ldr	r3, [r3, #0]
 810558e:	2253      	movs	r2, #83	@ 0x53
 8105590:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8105592:	6878      	ldr	r0, [r7, #4]
 8105594:	f000 f87a 	bl	810568c <RTC_EnterInitMode>
 8105598:	4603      	mov	r3, r0
 810559a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 810559c:	7bfb      	ldrb	r3, [r7, #15]
 810559e:	2b00      	cmp	r3, #0
 81055a0:	d126      	bne.n	81055f0 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	681b      	ldr	r3, [r3, #0]
 81055a6:	689b      	ldr	r3, [r3, #8]
 81055a8:	687a      	ldr	r2, [r7, #4]
 81055aa:	6812      	ldr	r2, [r2, #0]
 81055ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 81055b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 81055b4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	6899      	ldr	r1, [r3, #8]
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	685a      	ldr	r2, [r3, #4]
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	691b      	ldr	r3, [r3, #16]
 81055c4:	431a      	orrs	r2, r3
 81055c6:	687b      	ldr	r3, [r7, #4]
 81055c8:	699b      	ldr	r3, [r3, #24]
 81055ca:	431a      	orrs	r2, r3
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	681b      	ldr	r3, [r3, #0]
 81055d0:	430a      	orrs	r2, r1
 81055d2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 81055d4:	687b      	ldr	r3, [r7, #4]
 81055d6:	689b      	ldr	r3, [r3, #8]
 81055d8:	0419      	lsls	r1, r3, #16
 81055da:	687b      	ldr	r3, [r7, #4]
 81055dc:	68da      	ldr	r2, [r3, #12]
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	430a      	orrs	r2, r1
 81055e4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 81055e6:	6878      	ldr	r0, [r7, #4]
 81055e8:	f000 f884 	bl	81056f4 <RTC_ExitInitMode>
 81055ec:	4603      	mov	r3, r0
 81055ee:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 81055f0:	7bfb      	ldrb	r3, [r7, #15]
 81055f2:	2b00      	cmp	r3, #0
 81055f4:	d113      	bne.n	810561e <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 81055f6:	687b      	ldr	r3, [r7, #4]
 81055f8:	681b      	ldr	r3, [r3, #0]
 81055fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	681b      	ldr	r3, [r3, #0]
 8105600:	f022 0203 	bic.w	r2, r2, #3
 8105604:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	681b      	ldr	r3, [r3, #0]
 810560a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	69da      	ldr	r2, [r3, #28]
 8105610:	687b      	ldr	r3, [r7, #4]
 8105612:	695b      	ldr	r3, [r3, #20]
 8105614:	431a      	orrs	r2, r3
 8105616:	687b      	ldr	r3, [r7, #4]
 8105618:	681b      	ldr	r3, [r3, #0]
 810561a:	430a      	orrs	r2, r1
 810561c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810561e:	687b      	ldr	r3, [r7, #4]
 8105620:	681b      	ldr	r3, [r3, #0]
 8105622:	22ff      	movs	r2, #255	@ 0xff
 8105624:	625a      	str	r2, [r3, #36]	@ 0x24
 8105626:	e001      	b.n	810562c <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8105628:	2300      	movs	r3, #0
 810562a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 810562c:	7bfb      	ldrb	r3, [r7, #15]
 810562e:	2b00      	cmp	r3, #0
 8105630:	d103      	bne.n	810563a <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	2201      	movs	r2, #1
 8105636:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 810563a:	7bfb      	ldrb	r3, [r7, #15]
}
 810563c:	4618      	mov	r0, r3
 810563e:	3710      	adds	r7, #16
 8105640:	46bd      	mov	sp, r7
 8105642:	bd80      	pop	{r7, pc}

08105644 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8105644:	b580      	push	{r7, lr}
 8105646:	b084      	sub	sp, #16
 8105648:	af00      	add	r7, sp, #0
 810564a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	681b      	ldr	r3, [r3, #0]
 8105650:	4a0d      	ldr	r2, [pc, #52]	@ (8105688 <HAL_RTC_WaitForSynchro+0x44>)
 8105652:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8105654:	f7fc fa1c 	bl	8101a90 <HAL_GetTick>
 8105658:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 810565a:	e009      	b.n	8105670 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 810565c:	f7fc fa18 	bl	8101a90 <HAL_GetTick>
 8105660:	4602      	mov	r2, r0
 8105662:	68fb      	ldr	r3, [r7, #12]
 8105664:	1ad3      	subs	r3, r2, r3
 8105666:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810566a:	d901      	bls.n	8105670 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 810566c:	2303      	movs	r3, #3
 810566e:	e007      	b.n	8105680 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105670:	687b      	ldr	r3, [r7, #4]
 8105672:	681b      	ldr	r3, [r3, #0]
 8105674:	68db      	ldr	r3, [r3, #12]
 8105676:	f003 0320 	and.w	r3, r3, #32
 810567a:	2b00      	cmp	r3, #0
 810567c:	d0ee      	beq.n	810565c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 810567e:	2300      	movs	r3, #0
}
 8105680:	4618      	mov	r0, r3
 8105682:	3710      	adds	r7, #16
 8105684:	46bd      	mov	sp, r7
 8105686:	bd80      	pop	{r7, pc}
 8105688:	0003ff5f 	.word	0x0003ff5f

0810568c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 810568c:	b580      	push	{r7, lr}
 810568e:	b084      	sub	sp, #16
 8105690:	af00      	add	r7, sp, #0
 8105692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105694:	2300      	movs	r3, #0
 8105696:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105698:	687b      	ldr	r3, [r7, #4]
 810569a:	681b      	ldr	r3, [r3, #0]
 810569c:	68db      	ldr	r3, [r3, #12]
 810569e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81056a2:	2b00      	cmp	r3, #0
 81056a4:	d120      	bne.n	81056e8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 81056a6:	687b      	ldr	r3, [r7, #4]
 81056a8:	681b      	ldr	r3, [r3, #0]
 81056aa:	f04f 32ff 	mov.w	r2, #4294967295
 81056ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 81056b0:	f7fc f9ee 	bl	8101a90 <HAL_GetTick>
 81056b4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81056b6:	e00d      	b.n	81056d4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 81056b8:	f7fc f9ea 	bl	8101a90 <HAL_GetTick>
 81056bc:	4602      	mov	r2, r0
 81056be:	68bb      	ldr	r3, [r7, #8]
 81056c0:	1ad3      	subs	r3, r2, r3
 81056c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 81056c6:	d905      	bls.n	81056d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 81056c8:	2303      	movs	r3, #3
 81056ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81056cc:	687b      	ldr	r3, [r7, #4]
 81056ce:	2203      	movs	r2, #3
 81056d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81056d4:	687b      	ldr	r3, [r7, #4]
 81056d6:	681b      	ldr	r3, [r3, #0]
 81056d8:	68db      	ldr	r3, [r3, #12]
 81056da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81056de:	2b00      	cmp	r3, #0
 81056e0:	d102      	bne.n	81056e8 <RTC_EnterInitMode+0x5c>
 81056e2:	7bfb      	ldrb	r3, [r7, #15]
 81056e4:	2b03      	cmp	r3, #3
 81056e6:	d1e7      	bne.n	81056b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 81056e8:	7bfb      	ldrb	r3, [r7, #15]
}
 81056ea:	4618      	mov	r0, r3
 81056ec:	3710      	adds	r7, #16
 81056ee:	46bd      	mov	sp, r7
 81056f0:	bd80      	pop	{r7, pc}
	...

081056f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 81056f4:	b580      	push	{r7, lr}
 81056f6:	b084      	sub	sp, #16
 81056f8:	af00      	add	r7, sp, #0
 81056fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81056fc:	2300      	movs	r3, #0
 81056fe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8105700:	4b1a      	ldr	r3, [pc, #104]	@ (810576c <RTC_ExitInitMode+0x78>)
 8105702:	68db      	ldr	r3, [r3, #12]
 8105704:	4a19      	ldr	r2, [pc, #100]	@ (810576c <RTC_ExitInitMode+0x78>)
 8105706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810570a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 810570c:	4b17      	ldr	r3, [pc, #92]	@ (810576c <RTC_ExitInitMode+0x78>)
 810570e:	689b      	ldr	r3, [r3, #8]
 8105710:	f003 0320 	and.w	r3, r3, #32
 8105714:	2b00      	cmp	r3, #0
 8105716:	d10c      	bne.n	8105732 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105718:	6878      	ldr	r0, [r7, #4]
 810571a:	f7ff ff93 	bl	8105644 <HAL_RTC_WaitForSynchro>
 810571e:	4603      	mov	r3, r0
 8105720:	2b00      	cmp	r3, #0
 8105722:	d01e      	beq.n	8105762 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105724:	687b      	ldr	r3, [r7, #4]
 8105726:	2203      	movs	r2, #3
 8105728:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 810572c:	2303      	movs	r3, #3
 810572e:	73fb      	strb	r3, [r7, #15]
 8105730:	e017      	b.n	8105762 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105732:	4b0e      	ldr	r3, [pc, #56]	@ (810576c <RTC_ExitInitMode+0x78>)
 8105734:	689b      	ldr	r3, [r3, #8]
 8105736:	4a0d      	ldr	r2, [pc, #52]	@ (810576c <RTC_ExitInitMode+0x78>)
 8105738:	f023 0320 	bic.w	r3, r3, #32
 810573c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 810573e:	6878      	ldr	r0, [r7, #4]
 8105740:	f7ff ff80 	bl	8105644 <HAL_RTC_WaitForSynchro>
 8105744:	4603      	mov	r3, r0
 8105746:	2b00      	cmp	r3, #0
 8105748:	d005      	beq.n	8105756 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810574a:	687b      	ldr	r3, [r7, #4]
 810574c:	2203      	movs	r2, #3
 810574e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8105752:	2303      	movs	r3, #3
 8105754:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105756:	4b05      	ldr	r3, [pc, #20]	@ (810576c <RTC_ExitInitMode+0x78>)
 8105758:	689b      	ldr	r3, [r3, #8]
 810575a:	4a04      	ldr	r2, [pc, #16]	@ (810576c <RTC_ExitInitMode+0x78>)
 810575c:	f043 0320 	orr.w	r3, r3, #32
 8105760:	6093      	str	r3, [r2, #8]
  }

  return status;
 8105762:	7bfb      	ldrb	r3, [r7, #15]
}
 8105764:	4618      	mov	r0, r3
 8105766:	3710      	adds	r7, #16
 8105768:	46bd      	mov	sp, r7
 810576a:	bd80      	pop	{r7, pc}
 810576c:	58004000 	.word	0x58004000

08105770 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 8105770:	b480      	push	{r7}
 8105772:	b085      	sub	sp, #20
 8105774:	af00      	add	r7, sp, #0
 8105776:	6078      	str	r0, [r7, #4]
 8105778:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8105780:	2b01      	cmp	r3, #1
 8105782:	d101      	bne.n	8105788 <HAL_RTCEx_SetTamper+0x18>
 8105784:	2302      	movs	r3, #2
 8105786:	e0cc      	b.n	8105922 <HAL_RTCEx_SetTamper+0x1b2>
 8105788:	687b      	ldr	r3, [r7, #4]
 810578a:	2201      	movs	r2, #1
 810578c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8105790:	687b      	ldr	r3, [r7, #4]
 8105792:	2202      	movs	r2, #2
 8105794:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810579e:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 81057a0:	683b      	ldr	r3, [r7, #0]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	68fa      	ldr	r2, [r7, #12]
 81057a6:	4313      	orrs	r3, r2
 81057a8:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 81057aa:	683b      	ldr	r3, [r7, #0]
 81057ac:	689b      	ldr	r3, [r3, #8]
 81057ae:	2b08      	cmp	r3, #8
 81057b0:	d003      	beq.n	81057ba <HAL_RTCEx_SetTamper+0x4a>
 81057b2:	683b      	ldr	r3, [r7, #0]
 81057b4:	689b      	ldr	r3, [r3, #8]
 81057b6:	2b02      	cmp	r3, #2
 81057b8:	d106      	bne.n	81057c8 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 81057ba:	683b      	ldr	r3, [r7, #0]
 81057bc:	681b      	ldr	r3, [r3, #0]
 81057be:	005b      	lsls	r3, r3, #1
 81057c0:	68fa      	ldr	r2, [r7, #12]
 81057c2:	4313      	orrs	r3, r2
 81057c4:	60fb      	str	r3, [r7, #12]
 81057c6:	e006      	b.n	81057d6 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 81057c8:	683b      	ldr	r3, [r7, #0]
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	005b      	lsls	r3, r3, #1
 81057ce:	43db      	mvns	r3, r3
 81057d0:	68fa      	ldr	r2, [r7, #12]
 81057d2:	4013      	ands	r3, r2
 81057d4:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 81057d6:	683b      	ldr	r3, [r7, #0]
 81057d8:	68db      	ldr	r3, [r3, #12]
 81057da:	2b00      	cmp	r3, #0
 81057dc:	d01e      	beq.n	810581c <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81057de:	683b      	ldr	r3, [r7, #0]
 81057e0:	681b      	ldr	r3, [r3, #0]
 81057e2:	f003 0301 	and.w	r3, r3, #1
 81057e6:	2b00      	cmp	r3, #0
 81057e8:	d003      	beq.n	81057f2 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 81057ea:	68fb      	ldr	r3, [r7, #12]
 81057ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81057f0:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81057f2:	683b      	ldr	r3, [r7, #0]
 81057f4:	681b      	ldr	r3, [r3, #0]
 81057f6:	f003 0308 	and.w	r3, r3, #8
 81057fa:	2b00      	cmp	r3, #0
 81057fc:	d003      	beq.n	8105806 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 81057fe:	68fb      	ldr	r3, [r7, #12]
 8105800:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8105804:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105806:	683b      	ldr	r3, [r7, #0]
 8105808:	681b      	ldr	r3, [r3, #0]
 810580a:	f003 0320 	and.w	r3, r3, #32
 810580e:	2b00      	cmp	r3, #0
 8105810:	d022      	beq.n	8105858 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8105812:	68fb      	ldr	r3, [r7, #12]
 8105814:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105818:	60fb      	str	r3, [r7, #12]
 810581a:	e01d      	b.n	8105858 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810581c:	683b      	ldr	r3, [r7, #0]
 810581e:	681b      	ldr	r3, [r3, #0]
 8105820:	f003 0301 	and.w	r3, r3, #1
 8105824:	2b00      	cmp	r3, #0
 8105826:	d003      	beq.n	8105830 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8105828:	68fb      	ldr	r3, [r7, #12]
 810582a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810582e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105830:	683b      	ldr	r3, [r7, #0]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	f003 0308 	and.w	r3, r3, #8
 8105838:	2b00      	cmp	r3, #0
 810583a:	d003      	beq.n	8105844 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 810583c:	68fb      	ldr	r3, [r7, #12]
 810583e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8105842:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105844:	683b      	ldr	r3, [r7, #0]
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	f003 0320 	and.w	r3, r3, #32
 810584c:	2b00      	cmp	r3, #0
 810584e:	d003      	beq.n	8105858 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8105850:	68fb      	ldr	r3, [r7, #12]
 8105852:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8105856:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8105858:	683b      	ldr	r3, [r7, #0]
 810585a:	691b      	ldr	r3, [r3, #16]
 810585c:	2b00      	cmp	r3, #0
 810585e:	d01e      	beq.n	810589e <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105860:	683b      	ldr	r3, [r7, #0]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	f003 0301 	and.w	r3, r3, #1
 8105868:	2b00      	cmp	r3, #0
 810586a:	d003      	beq.n	8105874 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 810586c:	68fb      	ldr	r3, [r7, #12]
 810586e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8105872:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105874:	683b      	ldr	r3, [r7, #0]
 8105876:	681b      	ldr	r3, [r3, #0]
 8105878:	f003 0308 	and.w	r3, r3, #8
 810587c:	2b00      	cmp	r3, #0
 810587e:	d003      	beq.n	8105888 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8105880:	68fb      	ldr	r3, [r7, #12]
 8105882:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105886:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105888:	683b      	ldr	r3, [r7, #0]
 810588a:	681b      	ldr	r3, [r3, #0]
 810588c:	f003 0320 	and.w	r3, r3, #32
 8105890:	2b00      	cmp	r3, #0
 8105892:	d022      	beq.n	81058da <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8105894:	68fb      	ldr	r3, [r7, #12]
 8105896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810589a:	60fb      	str	r3, [r7, #12]
 810589c:	e01d      	b.n	81058da <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810589e:	683b      	ldr	r3, [r7, #0]
 81058a0:	681b      	ldr	r3, [r3, #0]
 81058a2:	f003 0301 	and.w	r3, r3, #1
 81058a6:	2b00      	cmp	r3, #0
 81058a8:	d003      	beq.n	81058b2 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 81058aa:	68fb      	ldr	r3, [r7, #12]
 81058ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 81058b0:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81058b2:	683b      	ldr	r3, [r7, #0]
 81058b4:	681b      	ldr	r3, [r3, #0]
 81058b6:	f003 0308 	and.w	r3, r3, #8
 81058ba:	2b00      	cmp	r3, #0
 81058bc:	d003      	beq.n	81058c6 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 81058be:	68fb      	ldr	r3, [r7, #12]
 81058c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 81058c4:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81058c6:	683b      	ldr	r3, [r7, #0]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	f003 0320 	and.w	r3, r3, #32
 81058ce:	2b00      	cmp	r3, #0
 81058d0:	d003      	beq.n	81058da <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 81058d2:	68fb      	ldr	r3, [r7, #12]
 81058d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 81058d8:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 81058da:	68fb      	ldr	r3, [r7, #12]
 81058dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81058e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81058e4:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81058e6:	683b      	ldr	r3, [r7, #0]
 81058e8:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 81058ea:	683b      	ldr	r3, [r7, #0]
 81058ec:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81058ee:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 81058f0:	683b      	ldr	r3, [r7, #0]
 81058f2:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 81058f4:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 81058f6:	683b      	ldr	r3, [r7, #0]
 81058f8:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 81058fa:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 81058fc:	683b      	ldr	r3, [r7, #0]
 81058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8105900:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105902:	68fa      	ldr	r2, [r7, #12]
 8105904:	4313      	orrs	r3, r2
 8105906:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	681b      	ldr	r3, [r3, #0]
 810590c:	68fa      	ldr	r2, [r7, #12]
 810590e:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	2201      	movs	r2, #1
 8105914:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8105918:	687b      	ldr	r3, [r7, #4]
 810591a:	2200      	movs	r2, #0
 810591c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8105920:	2300      	movs	r3, #0
}
 8105922:	4618      	mov	r0, r3
 8105924:	3714      	adds	r7, #20
 8105926:	46bd      	mov	sp, r7
 8105928:	f85d 7b04 	ldr.w	r7, [sp], #4
 810592c:	4770      	bx	lr
	...

08105930 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8105930:	b580      	push	{r7, lr}
 8105932:	b08a      	sub	sp, #40	@ 0x28
 8105934:	af00      	add	r7, sp, #0
 8105936:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	2b00      	cmp	r3, #0
 810593c:	d101      	bne.n	8105942 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 810593e:	2301      	movs	r3, #1
 8105940:	e290      	b.n	8105e64 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105942:	f7fc f8d5 	bl	8101af0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810594c:	2b01      	cmp	r3, #1
 810594e:	d113      	bne.n	8105978 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	681b      	ldr	r3, [r3, #0]
 8105954:	4a96      	ldr	r2, [pc, #600]	@ (8105bb0 <HAL_SAI_Init+0x280>)
 8105956:	4293      	cmp	r3, r2
 8105958:	d004      	beq.n	8105964 <HAL_SAI_Init+0x34>
 810595a:	687b      	ldr	r3, [r7, #4]
 810595c:	681b      	ldr	r3, [r3, #0]
 810595e:	4a95      	ldr	r2, [pc, #596]	@ (8105bb4 <HAL_SAI_Init+0x284>)
 8105960:	4293      	cmp	r3, r2
 8105962:	d107      	bne.n	8105974 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105968:	2b01      	cmp	r3, #1
 810596a:	d103      	bne.n	8105974 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105970:	2b00      	cmp	r3, #0
 8105972:	d001      	beq.n	8105978 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8105974:	2301      	movs	r3, #1
 8105976:	e275      	b.n	8105e64 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	4a8c      	ldr	r2, [pc, #560]	@ (8105bb0 <HAL_SAI_Init+0x280>)
 810597e:	4293      	cmp	r3, r2
 8105980:	d004      	beq.n	810598c <HAL_SAI_Init+0x5c>
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	681b      	ldr	r3, [r3, #0]
 8105986:	4a8c      	ldr	r2, [pc, #560]	@ (8105bb8 <HAL_SAI_Init+0x288>)
 8105988:	4293      	cmp	r3, r2
 810598a:	d102      	bne.n	8105992 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 810598c:	4b8b      	ldr	r3, [pc, #556]	@ (8105bbc <HAL_SAI_Init+0x28c>)
 810598e:	61bb      	str	r3, [r7, #24]
 8105990:	e028      	b.n	81059e4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105992:	687b      	ldr	r3, [r7, #4]
 8105994:	681b      	ldr	r3, [r3, #0]
 8105996:	4a8a      	ldr	r2, [pc, #552]	@ (8105bc0 <HAL_SAI_Init+0x290>)
 8105998:	4293      	cmp	r3, r2
 810599a:	d004      	beq.n	81059a6 <HAL_SAI_Init+0x76>
 810599c:	687b      	ldr	r3, [r7, #4]
 810599e:	681b      	ldr	r3, [r3, #0]
 81059a0:	4a88      	ldr	r2, [pc, #544]	@ (8105bc4 <HAL_SAI_Init+0x294>)
 81059a2:	4293      	cmp	r3, r2
 81059a4:	d102      	bne.n	81059ac <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 81059a6:	4b88      	ldr	r3, [pc, #544]	@ (8105bc8 <HAL_SAI_Init+0x298>)
 81059a8:	61bb      	str	r3, [r7, #24]
 81059aa:	e01b      	b.n	81059e4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	681b      	ldr	r3, [r3, #0]
 81059b0:	4a86      	ldr	r2, [pc, #536]	@ (8105bcc <HAL_SAI_Init+0x29c>)
 81059b2:	4293      	cmp	r3, r2
 81059b4:	d004      	beq.n	81059c0 <HAL_SAI_Init+0x90>
 81059b6:	687b      	ldr	r3, [r7, #4]
 81059b8:	681b      	ldr	r3, [r3, #0]
 81059ba:	4a85      	ldr	r2, [pc, #532]	@ (8105bd0 <HAL_SAI_Init+0x2a0>)
 81059bc:	4293      	cmp	r3, r2
 81059be:	d102      	bne.n	81059c6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 81059c0:	4b84      	ldr	r3, [pc, #528]	@ (8105bd4 <HAL_SAI_Init+0x2a4>)
 81059c2:	61bb      	str	r3, [r7, #24]
 81059c4:	e00e      	b.n	81059e4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 81059c6:	687b      	ldr	r3, [r7, #4]
 81059c8:	681b      	ldr	r3, [r3, #0]
 81059ca:	4a7a      	ldr	r2, [pc, #488]	@ (8105bb4 <HAL_SAI_Init+0x284>)
 81059cc:	4293      	cmp	r3, r2
 81059ce:	d004      	beq.n	81059da <HAL_SAI_Init+0xaa>
 81059d0:	687b      	ldr	r3, [r7, #4]
 81059d2:	681b      	ldr	r3, [r3, #0]
 81059d4:	4a80      	ldr	r2, [pc, #512]	@ (8105bd8 <HAL_SAI_Init+0x2a8>)
 81059d6:	4293      	cmp	r3, r2
 81059d8:	d102      	bne.n	81059e0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 81059da:	4b80      	ldr	r3, [pc, #512]	@ (8105bdc <HAL_SAI_Init+0x2ac>)
 81059dc:	61bb      	str	r3, [r7, #24]
 81059de:	e001      	b.n	81059e4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 81059e0:	2301      	movs	r3, #1
 81059e2:	e23f      	b.n	8105e64 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 81059ea:	b2db      	uxtb	r3, r3
 81059ec:	2b00      	cmp	r3, #0
 81059ee:	d106      	bne.n	81059fe <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	2200      	movs	r2, #0
 81059f4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 81059f8:	6878      	ldr	r0, [r7, #4]
 81059fa:	f7fb fdb3 	bl	8101564 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 81059fe:	6878      	ldr	r0, [r7, #4]
 8105a00:	f000 fa40 	bl	8105e84 <SAI_Disable>
 8105a04:	4603      	mov	r3, r0
 8105a06:	2b00      	cmp	r3, #0
 8105a08:	d001      	beq.n	8105a0e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8105a0a:	2301      	movs	r3, #1
 8105a0c:	e22a      	b.n	8105e64 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	2202      	movs	r2, #2
 8105a12:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8105a16:	687b      	ldr	r3, [r7, #4]
 8105a18:	68db      	ldr	r3, [r3, #12]
 8105a1a:	2b02      	cmp	r3, #2
 8105a1c:	d00c      	beq.n	8105a38 <HAL_SAI_Init+0x108>
 8105a1e:	2b02      	cmp	r3, #2
 8105a20:	d80d      	bhi.n	8105a3e <HAL_SAI_Init+0x10e>
 8105a22:	2b00      	cmp	r3, #0
 8105a24:	d002      	beq.n	8105a2c <HAL_SAI_Init+0xfc>
 8105a26:	2b01      	cmp	r3, #1
 8105a28:	d003      	beq.n	8105a32 <HAL_SAI_Init+0x102>
 8105a2a:	e008      	b.n	8105a3e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8105a2c:	2300      	movs	r3, #0
 8105a2e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105a30:	e008      	b.n	8105a44 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8105a32:	2310      	movs	r3, #16
 8105a34:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105a36:	e005      	b.n	8105a44 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8105a38:	2320      	movs	r3, #32
 8105a3a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105a3c:	e002      	b.n	8105a44 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8105a3e:	2300      	movs	r3, #0
 8105a40:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105a42:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	689b      	ldr	r3, [r3, #8]
 8105a48:	2b05      	cmp	r3, #5
 8105a4a:	d832      	bhi.n	8105ab2 <HAL_SAI_Init+0x182>
 8105a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8105a54 <HAL_SAI_Init+0x124>)
 8105a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a52:	bf00      	nop
 8105a54:	08105a6d 	.word	0x08105a6d
 8105a58:	08105a73 	.word	0x08105a73
 8105a5c:	08105a7b 	.word	0x08105a7b
 8105a60:	08105a83 	.word	0x08105a83
 8105a64:	08105a93 	.word	0x08105a93
 8105a68:	08105aa3 	.word	0x08105aa3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8105a6c:	2300      	movs	r3, #0
 8105a6e:	61fb      	str	r3, [r7, #28]
      break;
 8105a70:	e022      	b.n	8105ab8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8105a72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8105a76:	61fb      	str	r3, [r7, #28]
      break;
 8105a78:	e01e      	b.n	8105ab8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105a7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105a7e:	61fb      	str	r3, [r7, #28]
      break;
 8105a80:	e01a      	b.n	8105ab8 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105a82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105a86:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8105a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105a8a:	f043 0301 	orr.w	r3, r3, #1
 8105a8e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105a90:	e012      	b.n	8105ab8 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105a92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105a96:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8105a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105a9a:	f043 0302 	orr.w	r3, r3, #2
 8105a9e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105aa0:	e00a      	b.n	8105ab8 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105aa2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105aa6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8105aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105aaa:	f043 0303 	orr.w	r3, r3, #3
 8105aae:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105ab0:	e002      	b.n	8105ab8 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8105ab2:	2300      	movs	r3, #0
 8105ab4:	61fb      	str	r3, [r7, #28]
      break;
 8105ab6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8105ab8:	69bb      	ldr	r3, [r7, #24]
 8105aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105abc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8105abe:	687b      	ldr	r3, [r7, #4]
 8105ac0:	6a1b      	ldr	r3, [r3, #32]
 8105ac2:	2b00      	cmp	r3, #0
 8105ac4:	f000 80c5 	beq.w	8105c52 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8105ac8:	2300      	movs	r3, #0
 8105aca:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	681b      	ldr	r3, [r3, #0]
 8105ad0:	4a37      	ldr	r2, [pc, #220]	@ (8105bb0 <HAL_SAI_Init+0x280>)
 8105ad2:	4293      	cmp	r3, r2
 8105ad4:	d004      	beq.n	8105ae0 <HAL_SAI_Init+0x1b0>
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	4a37      	ldr	r2, [pc, #220]	@ (8105bb8 <HAL_SAI_Init+0x288>)
 8105adc:	4293      	cmp	r3, r2
 8105ade:	d106      	bne.n	8105aee <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8105ae0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8105ae4:	f04f 0100 	mov.w	r1, #0
 8105ae8:	f7fe fa36 	bl	8103f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8105aec:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105aee:	687b      	ldr	r3, [r7, #4]
 8105af0:	681b      	ldr	r3, [r3, #0]
 8105af2:	4a33      	ldr	r2, [pc, #204]	@ (8105bc0 <HAL_SAI_Init+0x290>)
 8105af4:	4293      	cmp	r3, r2
 8105af6:	d004      	beq.n	8105b02 <HAL_SAI_Init+0x1d2>
 8105af8:	687b      	ldr	r3, [r7, #4]
 8105afa:	681b      	ldr	r3, [r3, #0]
 8105afc:	4a31      	ldr	r2, [pc, #196]	@ (8105bc4 <HAL_SAI_Init+0x294>)
 8105afe:	4293      	cmp	r3, r2
 8105b00:	d106      	bne.n	8105b10 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8105b02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8105b06:	f04f 0100 	mov.w	r1, #0
 8105b0a:	f7fe fa25 	bl	8103f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8105b0e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	681b      	ldr	r3, [r3, #0]
 8105b14:	4a2d      	ldr	r2, [pc, #180]	@ (8105bcc <HAL_SAI_Init+0x29c>)
 8105b16:	4293      	cmp	r3, r2
 8105b18:	d004      	beq.n	8105b24 <HAL_SAI_Init+0x1f4>
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	681b      	ldr	r3, [r3, #0]
 8105b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8105bd0 <HAL_SAI_Init+0x2a0>)
 8105b20:	4293      	cmp	r3, r2
 8105b22:	d106      	bne.n	8105b32 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8105b24:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8105b28:	f04f 0100 	mov.w	r1, #0
 8105b2c:	f7fe fa14 	bl	8103f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8105b30:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	681b      	ldr	r3, [r3, #0]
 8105b36:	4a1f      	ldr	r2, [pc, #124]	@ (8105bb4 <HAL_SAI_Init+0x284>)
 8105b38:	4293      	cmp	r3, r2
 8105b3a:	d106      	bne.n	8105b4a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8105b3c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8105b40:	f04f 0100 	mov.w	r1, #0
 8105b44:	f7fe fa08 	bl	8103f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8105b48:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8105b4a:	687b      	ldr	r3, [r7, #4]
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	4a22      	ldr	r2, [pc, #136]	@ (8105bd8 <HAL_SAI_Init+0x2a8>)
 8105b50:	4293      	cmp	r3, r2
 8105b52:	d106      	bne.n	8105b62 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8105b54:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8105b58:	f04f 0100 	mov.w	r1, #0
 8105b5c:	f7fe f9fc 	bl	8103f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8105b60:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8105b62:	687b      	ldr	r3, [r7, #4]
 8105b64:	699b      	ldr	r3, [r3, #24]
 8105b66:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8105b6a:	d139      	bne.n	8105be0 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8105b6c:	687b      	ldr	r3, [r7, #4]
 8105b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105b70:	2b04      	cmp	r3, #4
 8105b72:	d102      	bne.n	8105b7a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8105b74:	2340      	movs	r3, #64	@ 0x40
 8105b76:	60fb      	str	r3, [r7, #12]
 8105b78:	e00a      	b.n	8105b90 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105b7e:	2b08      	cmp	r3, #8
 8105b80:	d103      	bne.n	8105b8a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8105b82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105b86:	60fb      	str	r3, [r7, #12]
 8105b88:	e002      	b.n	8105b90 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105b8e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8105b90:	697a      	ldr	r2, [r7, #20]
 8105b92:	4613      	mov	r3, r2
 8105b94:	009b      	lsls	r3, r3, #2
 8105b96:	4413      	add	r3, r2
 8105b98:	005b      	lsls	r3, r3, #1
 8105b9a:	4619      	mov	r1, r3
 8105b9c:	687b      	ldr	r3, [r7, #4]
 8105b9e:	6a1b      	ldr	r3, [r3, #32]
 8105ba0:	68fa      	ldr	r2, [r7, #12]
 8105ba2:	fb02 f303 	mul.w	r3, r2, r3
 8105ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8105baa:	613b      	str	r3, [r7, #16]
 8105bac:	e030      	b.n	8105c10 <HAL_SAI_Init+0x2e0>
 8105bae:	bf00      	nop
 8105bb0:	40015804 	.word	0x40015804
 8105bb4:	58005404 	.word	0x58005404
 8105bb8:	40015824 	.word	0x40015824
 8105bbc:	40015800 	.word	0x40015800
 8105bc0:	40015c04 	.word	0x40015c04
 8105bc4:	40015c24 	.word	0x40015c24
 8105bc8:	40015c00 	.word	0x40015c00
 8105bcc:	40016004 	.word	0x40016004
 8105bd0:	40016024 	.word	0x40016024
 8105bd4:	40016000 	.word	0x40016000
 8105bd8:	58005424 	.word	0x58005424
 8105bdc:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105be4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105be8:	d101      	bne.n	8105bee <HAL_SAI_Init+0x2be>
 8105bea:	2302      	movs	r3, #2
 8105bec:	e000      	b.n	8105bf0 <HAL_SAI_Init+0x2c0>
 8105bee:	2301      	movs	r3, #1
 8105bf0:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8105bf2:	697a      	ldr	r2, [r7, #20]
 8105bf4:	4613      	mov	r3, r2
 8105bf6:	009b      	lsls	r3, r3, #2
 8105bf8:	4413      	add	r3, r2
 8105bfa:	005b      	lsls	r3, r3, #1
 8105bfc:	4619      	mov	r1, r3
 8105bfe:	687b      	ldr	r3, [r7, #4]
 8105c00:	6a1b      	ldr	r3, [r3, #32]
 8105c02:	68ba      	ldr	r2, [r7, #8]
 8105c04:	fb02 f303 	mul.w	r3, r2, r3
 8105c08:	021b      	lsls	r3, r3, #8
 8105c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8105c0e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8105c10:	693b      	ldr	r3, [r7, #16]
 8105c12:	4a96      	ldr	r2, [pc, #600]	@ (8105e6c <HAL_SAI_Init+0x53c>)
 8105c14:	fba2 2303 	umull	r2, r3, r2, r3
 8105c18:	08da      	lsrs	r2, r3, #3
 8105c1a:	687b      	ldr	r3, [r7, #4]
 8105c1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8105c1e:	6939      	ldr	r1, [r7, #16]
 8105c20:	4b92      	ldr	r3, [pc, #584]	@ (8105e6c <HAL_SAI_Init+0x53c>)
 8105c22:	fba3 2301 	umull	r2, r3, r3, r1
 8105c26:	08da      	lsrs	r2, r3, #3
 8105c28:	4613      	mov	r3, r2
 8105c2a:	009b      	lsls	r3, r3, #2
 8105c2c:	4413      	add	r3, r2
 8105c2e:	005b      	lsls	r3, r3, #1
 8105c30:	1aca      	subs	r2, r1, r3
 8105c32:	2a08      	cmp	r2, #8
 8105c34:	d904      	bls.n	8105c40 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8105c36:	687b      	ldr	r3, [r7, #4]
 8105c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105c3a:	1c5a      	adds	r2, r3, #1
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105c44:	2b04      	cmp	r3, #4
 8105c46:	d104      	bne.n	8105c52 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8105c48:	687b      	ldr	r3, [r7, #4]
 8105c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105c4c:	085a      	lsrs	r2, r3, #1
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8105c52:	687b      	ldr	r3, [r7, #4]
 8105c54:	685b      	ldr	r3, [r3, #4]
 8105c56:	2b00      	cmp	r3, #0
 8105c58:	d003      	beq.n	8105c62 <HAL_SAI_Init+0x332>
 8105c5a:	687b      	ldr	r3, [r7, #4]
 8105c5c:	685b      	ldr	r3, [r3, #4]
 8105c5e:	2b02      	cmp	r3, #2
 8105c60:	d109      	bne.n	8105c76 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105c66:	2b01      	cmp	r3, #1
 8105c68:	d101      	bne.n	8105c6e <HAL_SAI_Init+0x33e>
 8105c6a:	2300      	movs	r3, #0
 8105c6c:	e001      	b.n	8105c72 <HAL_SAI_Init+0x342>
 8105c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8105c72:	623b      	str	r3, [r7, #32]
 8105c74:	e008      	b.n	8105c88 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8105c76:	687b      	ldr	r3, [r7, #4]
 8105c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105c7a:	2b01      	cmp	r3, #1
 8105c7c:	d102      	bne.n	8105c84 <HAL_SAI_Init+0x354>
 8105c7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8105c82:	e000      	b.n	8105c86 <HAL_SAI_Init+0x356>
 8105c84:	2300      	movs	r3, #0
 8105c86:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105c88:	f7fb ff32 	bl	8101af0 <HAL_GetREVID>
 8105c8c:	4603      	mov	r3, r0
 8105c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105c92:	d331      	bcc.n	8105cf8 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8105c94:	687b      	ldr	r3, [r7, #4]
 8105c96:	681b      	ldr	r3, [r3, #0]
 8105c98:	6819      	ldr	r1, [r3, #0]
 8105c9a:	687b      	ldr	r3, [r7, #4]
 8105c9c:	681a      	ldr	r2, [r3, #0]
 8105c9e:	4b74      	ldr	r3, [pc, #464]	@ (8105e70 <HAL_SAI_Init+0x540>)
 8105ca0:	400b      	ands	r3, r1
 8105ca2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	681b      	ldr	r3, [r3, #0]
 8105ca8:	6819      	ldr	r1, [r3, #0]
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	685a      	ldr	r2, [r3, #4]
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105cb2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105cb8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105cbe:	431a      	orrs	r2, r3
 8105cc0:	6a3b      	ldr	r3, [r7, #32]
 8105cc2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8105cc4:	69fb      	ldr	r3, [r7, #28]
 8105cc6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8105ccc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105cce:	687b      	ldr	r3, [r7, #4]
 8105cd0:	695b      	ldr	r3, [r3, #20]
 8105cd2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105cd8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105cda:	687b      	ldr	r3, [r7, #4]
 8105cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105cde:	051b      	lsls	r3, r3, #20
 8105ce0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8105ce2:	687b      	ldr	r3, [r7, #4]
 8105ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105ce6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	691b      	ldr	r3, [r3, #16]
 8105cec:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105cee:	687b      	ldr	r3, [r7, #4]
 8105cf0:	681b      	ldr	r3, [r3, #0]
 8105cf2:	430a      	orrs	r2, r1
 8105cf4:	601a      	str	r2, [r3, #0]
 8105cf6:	e02d      	b.n	8105d54 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	681b      	ldr	r3, [r3, #0]
 8105cfc:	6819      	ldr	r1, [r3, #0]
 8105cfe:	687b      	ldr	r3, [r7, #4]
 8105d00:	681a      	ldr	r2, [r3, #0]
 8105d02:	4b5c      	ldr	r3, [pc, #368]	@ (8105e74 <HAL_SAI_Init+0x544>)
 8105d04:	400b      	ands	r3, r1
 8105d06:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105d08:	687b      	ldr	r3, [r7, #4]
 8105d0a:	681b      	ldr	r3, [r3, #0]
 8105d0c:	6819      	ldr	r1, [r3, #0]
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	685a      	ldr	r2, [r3, #4]
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105d16:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105d18:	687b      	ldr	r3, [r7, #4]
 8105d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105d1c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105d1e:	687b      	ldr	r3, [r7, #4]
 8105d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105d22:	431a      	orrs	r2, r3
 8105d24:	6a3b      	ldr	r3, [r7, #32]
 8105d26:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8105d28:	69fb      	ldr	r3, [r7, #28]
 8105d2a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105d2c:	687b      	ldr	r3, [r7, #4]
 8105d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8105d30:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105d32:	687b      	ldr	r3, [r7, #4]
 8105d34:	695b      	ldr	r3, [r3, #20]
 8105d36:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105d38:	687b      	ldr	r3, [r7, #4]
 8105d3a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105d3c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105d3e:	687b      	ldr	r3, [r7, #4]
 8105d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105d42:	051b      	lsls	r3, r3, #20
 8105d44:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105d4a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105d4c:	687b      	ldr	r3, [r7, #4]
 8105d4e:	681b      	ldr	r3, [r3, #0]
 8105d50:	430a      	orrs	r2, r1
 8105d52:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	685b      	ldr	r3, [r3, #4]
 8105d5a:	687a      	ldr	r2, [r7, #4]
 8105d5c:	6812      	ldr	r2, [r2, #0]
 8105d5e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8105d62:	f023 030f 	bic.w	r3, r3, #15
 8105d66:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	681b      	ldr	r3, [r3, #0]
 8105d6c:	6859      	ldr	r1, [r3, #4]
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	69da      	ldr	r2, [r3, #28]
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105d76:	431a      	orrs	r2, r3
 8105d78:	687b      	ldr	r3, [r7, #4]
 8105d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105d7c:	431a      	orrs	r2, r3
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	681b      	ldr	r3, [r3, #0]
 8105d82:	430a      	orrs	r2, r1
 8105d84:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8105d86:	687b      	ldr	r3, [r7, #4]
 8105d88:	681b      	ldr	r3, [r3, #0]
 8105d8a:	6899      	ldr	r1, [r3, #8]
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	681a      	ldr	r2, [r3, #0]
 8105d90:	4b39      	ldr	r3, [pc, #228]	@ (8105e78 <HAL_SAI_Init+0x548>)
 8105d92:	400b      	ands	r3, r1
 8105d94:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8105d96:	687b      	ldr	r3, [r7, #4]
 8105d98:	681b      	ldr	r3, [r3, #0]
 8105d9a:	6899      	ldr	r1, [r3, #8]
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105da0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8105da2:	687b      	ldr	r3, [r7, #4]
 8105da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8105da6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8105da8:	687b      	ldr	r3, [r7, #4]
 8105daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8105dac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8105db2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105db8:	3b01      	subs	r3, #1
 8105dba:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8105dbc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	681b      	ldr	r3, [r3, #0]
 8105dc2:	430a      	orrs	r2, r1
 8105dc4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8105dc6:	687b      	ldr	r3, [r7, #4]
 8105dc8:	681b      	ldr	r3, [r3, #0]
 8105dca:	68d9      	ldr	r1, [r3, #12]
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	681a      	ldr	r2, [r3, #0]
 8105dd0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8105dd4:	400b      	ands	r3, r1
 8105dd6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	68d9      	ldr	r1, [r3, #12]
 8105dde:	687b      	ldr	r3, [r7, #4]
 8105de0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8105de2:	687b      	ldr	r3, [r7, #4]
 8105de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105de6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8105de8:	687b      	ldr	r3, [r7, #4]
 8105dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8105dec:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8105dee:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105df4:	3b01      	subs	r3, #1
 8105df6:	021b      	lsls	r3, r3, #8
 8105df8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	681b      	ldr	r3, [r3, #0]
 8105dfe:	430a      	orrs	r2, r1
 8105e00:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	681b      	ldr	r3, [r3, #0]
 8105e06:	4a1d      	ldr	r2, [pc, #116]	@ (8105e7c <HAL_SAI_Init+0x54c>)
 8105e08:	4293      	cmp	r3, r2
 8105e0a:	d004      	beq.n	8105e16 <HAL_SAI_Init+0x4e6>
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	681b      	ldr	r3, [r3, #0]
 8105e10:	4a1b      	ldr	r2, [pc, #108]	@ (8105e80 <HAL_SAI_Init+0x550>)
 8105e12:	4293      	cmp	r3, r2
 8105e14:	d119      	bne.n	8105e4a <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8105e16:	69bb      	ldr	r3, [r7, #24]
 8105e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105e1a:	f023 0201 	bic.w	r2, r3, #1
 8105e1e:	69bb      	ldr	r3, [r7, #24]
 8105e20:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8105e28:	2b01      	cmp	r3, #1
 8105e2a:	d10e      	bne.n	8105e4a <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8105e30:	687b      	ldr	r3, [r7, #4]
 8105e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105e34:	3b01      	subs	r3, #1
 8105e36:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8105e38:	431a      	orrs	r2, r3
 8105e3a:	69bb      	ldr	r3, [r7, #24]
 8105e3c:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8105e3e:	69bb      	ldr	r3, [r7, #24]
 8105e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105e42:	f043 0201 	orr.w	r2, r3, #1
 8105e46:	69bb      	ldr	r3, [r7, #24]
 8105e48:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8105e4a:	687b      	ldr	r3, [r7, #4]
 8105e4c:	2200      	movs	r2, #0
 8105e4e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8105e52:	687b      	ldr	r3, [r7, #4]
 8105e54:	2201      	movs	r2, #1
 8105e56:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	2200      	movs	r2, #0
 8105e5e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8105e62:	2300      	movs	r3, #0
}
 8105e64:	4618      	mov	r0, r3
 8105e66:	3728      	adds	r7, #40	@ 0x28
 8105e68:	46bd      	mov	sp, r7
 8105e6a:	bd80      	pop	{r7, pc}
 8105e6c:	cccccccd 	.word	0xcccccccd
 8105e70:	f005c010 	.word	0xf005c010
 8105e74:	f805c010 	.word	0xf805c010
 8105e78:	fff88000 	.word	0xfff88000
 8105e7c:	40015804 	.word	0x40015804
 8105e80:	58005404 	.word	0x58005404

08105e84 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8105e84:	b480      	push	{r7}
 8105e86:	b085      	sub	sp, #20
 8105e88:	af00      	add	r7, sp, #0
 8105e8a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8105e8c:	4b18      	ldr	r3, [pc, #96]	@ (8105ef0 <SAI_Disable+0x6c>)
 8105e8e:	681b      	ldr	r3, [r3, #0]
 8105e90:	4a18      	ldr	r2, [pc, #96]	@ (8105ef4 <SAI_Disable+0x70>)
 8105e92:	fba2 2303 	umull	r2, r3, r2, r3
 8105e96:	0b1b      	lsrs	r3, r3, #12
 8105e98:	009b      	lsls	r3, r3, #2
 8105e9a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8105e9c:	2300      	movs	r3, #0
 8105e9e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8105ea0:	687b      	ldr	r3, [r7, #4]
 8105ea2:	681b      	ldr	r3, [r3, #0]
 8105ea4:	681a      	ldr	r2, [r3, #0]
 8105ea6:	687b      	ldr	r3, [r7, #4]
 8105ea8:	681b      	ldr	r3, [r3, #0]
 8105eaa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8105eae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8105eb0:	68fb      	ldr	r3, [r7, #12]
 8105eb2:	2b00      	cmp	r3, #0
 8105eb4:	d10a      	bne.n	8105ecc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8105eb6:	687b      	ldr	r3, [r7, #4]
 8105eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8105ebc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8105ec6:	2303      	movs	r3, #3
 8105ec8:	72fb      	strb	r3, [r7, #11]
      break;
 8105eca:	e009      	b.n	8105ee0 <SAI_Disable+0x5c>
    }
    count--;
 8105ecc:	68fb      	ldr	r3, [r7, #12]
 8105ece:	3b01      	subs	r3, #1
 8105ed0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	681b      	ldr	r3, [r3, #0]
 8105ed6:	681b      	ldr	r3, [r3, #0]
 8105ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105edc:	2b00      	cmp	r3, #0
 8105ede:	d1e7      	bne.n	8105eb0 <SAI_Disable+0x2c>

  return status;
 8105ee0:	7afb      	ldrb	r3, [r7, #11]
}
 8105ee2:	4618      	mov	r0, r3
 8105ee4:	3714      	adds	r7, #20
 8105ee6:	46bd      	mov	sp, r7
 8105ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105eec:	4770      	bx	lr
 8105eee:	bf00      	nop
 8105ef0:	10000000 	.word	0x10000000
 8105ef4:	95cbec1b 	.word	0x95cbec1b

08105ef8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8105ef8:	b580      	push	{r7, lr}
 8105efa:	b084      	sub	sp, #16
 8105efc:	af00      	add	r7, sp, #0
 8105efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8105f00:	687b      	ldr	r3, [r7, #4]
 8105f02:	2b00      	cmp	r3, #0
 8105f04:	d101      	bne.n	8105f0a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8105f06:	2301      	movs	r3, #1
 8105f08:	e05e      	b.n	8105fc8 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8105f10:	b2db      	uxtb	r3, r3
 8105f12:	2b00      	cmp	r3, #0
 8105f14:	d106      	bne.n	8105f24 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8105f16:	687b      	ldr	r3, [r7, #4]
 8105f18:	2200      	movs	r2, #0
 8105f1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8105f1e:	6878      	ldr	r0, [r7, #4]
 8105f20:	f7fb f90c 	bl	810113c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	2202      	movs	r2, #2
 8105f28:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8105f2c:	687b      	ldr	r3, [r7, #4]
 8105f2e:	681b      	ldr	r3, [r3, #0]
 8105f30:	681a      	ldr	r2, [r3, #0]
 8105f32:	687b      	ldr	r3, [r7, #4]
 8105f34:	681b      	ldr	r3, [r3, #0]
 8105f36:	f022 0203 	bic.w	r2, r2, #3
 8105f3a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8105f3c:	687b      	ldr	r3, [r7, #4]
 8105f3e:	681b      	ldr	r3, [r3, #0]
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8105f44:	68fa      	ldr	r2, [r7, #12]
 8105f46:	4b22      	ldr	r3, [pc, #136]	@ (8105fd0 <HAL_SPDIFRX_Init+0xd8>)
 8105f48:	4013      	ands	r3, r2
 8105f4a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8105f50:	687b      	ldr	r3, [r7, #4]
 8105f52:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8105f54:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8105f5a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8105f60:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8105f66:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8105f68:	687b      	ldr	r3, [r7, #4]
 8105f6a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8105f6c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8105f72:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8105f78:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8105f7e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8105f84:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8105f86:	68fa      	ldr	r2, [r7, #12]
 8105f88:	4313      	orrs	r3, r2
 8105f8a:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8105f92:	2b01      	cmp	r3, #1
 8105f94:	d103      	bne.n	8105f9e <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8105f96:	68fb      	ldr	r3, [r7, #12]
 8105f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8105f9c:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8105f9e:	687b      	ldr	r3, [r7, #4]
 8105fa0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8105fa4:	2b01      	cmp	r3, #1
 8105fa6:	d103      	bne.n	8105fb0 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8105fa8:	68fb      	ldr	r3, [r7, #12]
 8105faa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105fae:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	681b      	ldr	r3, [r3, #0]
 8105fb4:	68fa      	ldr	r2, [r7, #12]
 8105fb6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8105fb8:	687b      	ldr	r3, [r7, #4]
 8105fba:	2200      	movs	r2, #0
 8105fbc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	2201      	movs	r2, #1
 8105fc2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8105fc6:	2300      	movs	r3, #0
}
 8105fc8:	4618      	mov	r0, r3
 8105fca:	3710      	adds	r7, #16
 8105fcc:	46bd      	mov	sp, r7
 8105fce:	bd80      	pop	{r7, pc}
 8105fd0:	ffc88407 	.word	0xffc88407

08105fd4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8105fd4:	b580      	push	{r7, lr}
 8105fd6:	b084      	sub	sp, #16
 8105fd8:	af00      	add	r7, sp, #0
 8105fda:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	2b00      	cmp	r3, #0
 8105fe0:	d101      	bne.n	8105fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8105fe2:	2301      	movs	r3, #1
 8105fe4:	e10f      	b.n	8106206 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	2200      	movs	r2, #0
 8105fea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	681b      	ldr	r3, [r3, #0]
 8105ff0:	4a87      	ldr	r2, [pc, #540]	@ (8106210 <HAL_SPI_Init+0x23c>)
 8105ff2:	4293      	cmp	r3, r2
 8105ff4:	d00f      	beq.n	8106016 <HAL_SPI_Init+0x42>
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	681b      	ldr	r3, [r3, #0]
 8105ffa:	4a86      	ldr	r2, [pc, #536]	@ (8106214 <HAL_SPI_Init+0x240>)
 8105ffc:	4293      	cmp	r3, r2
 8105ffe:	d00a      	beq.n	8106016 <HAL_SPI_Init+0x42>
 8106000:	687b      	ldr	r3, [r7, #4]
 8106002:	681b      	ldr	r3, [r3, #0]
 8106004:	4a84      	ldr	r2, [pc, #528]	@ (8106218 <HAL_SPI_Init+0x244>)
 8106006:	4293      	cmp	r3, r2
 8106008:	d005      	beq.n	8106016 <HAL_SPI_Init+0x42>
 810600a:	687b      	ldr	r3, [r7, #4]
 810600c:	68db      	ldr	r3, [r3, #12]
 810600e:	2b0f      	cmp	r3, #15
 8106010:	d901      	bls.n	8106016 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8106012:	2301      	movs	r3, #1
 8106014:	e0f7      	b.n	8106206 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8106016:	6878      	ldr	r0, [r7, #4]
 8106018:	f000 f900 	bl	810621c <SPI_GetPacketSize>
 810601c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	681b      	ldr	r3, [r3, #0]
 8106022:	4a7b      	ldr	r2, [pc, #492]	@ (8106210 <HAL_SPI_Init+0x23c>)
 8106024:	4293      	cmp	r3, r2
 8106026:	d00c      	beq.n	8106042 <HAL_SPI_Init+0x6e>
 8106028:	687b      	ldr	r3, [r7, #4]
 810602a:	681b      	ldr	r3, [r3, #0]
 810602c:	4a79      	ldr	r2, [pc, #484]	@ (8106214 <HAL_SPI_Init+0x240>)
 810602e:	4293      	cmp	r3, r2
 8106030:	d007      	beq.n	8106042 <HAL_SPI_Init+0x6e>
 8106032:	687b      	ldr	r3, [r7, #4]
 8106034:	681b      	ldr	r3, [r3, #0]
 8106036:	4a78      	ldr	r2, [pc, #480]	@ (8106218 <HAL_SPI_Init+0x244>)
 8106038:	4293      	cmp	r3, r2
 810603a:	d002      	beq.n	8106042 <HAL_SPI_Init+0x6e>
 810603c:	68fb      	ldr	r3, [r7, #12]
 810603e:	2b08      	cmp	r3, #8
 8106040:	d811      	bhi.n	8106066 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106042:	687b      	ldr	r3, [r7, #4]
 8106044:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106046:	4a72      	ldr	r2, [pc, #456]	@ (8106210 <HAL_SPI_Init+0x23c>)
 8106048:	4293      	cmp	r3, r2
 810604a:	d009      	beq.n	8106060 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	681b      	ldr	r3, [r3, #0]
 8106050:	4a70      	ldr	r2, [pc, #448]	@ (8106214 <HAL_SPI_Init+0x240>)
 8106052:	4293      	cmp	r3, r2
 8106054:	d004      	beq.n	8106060 <HAL_SPI_Init+0x8c>
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	681b      	ldr	r3, [r3, #0]
 810605a:	4a6f      	ldr	r2, [pc, #444]	@ (8106218 <HAL_SPI_Init+0x244>)
 810605c:	4293      	cmp	r3, r2
 810605e:	d104      	bne.n	810606a <HAL_SPI_Init+0x96>
 8106060:	68fb      	ldr	r3, [r7, #12]
 8106062:	2b10      	cmp	r3, #16
 8106064:	d901      	bls.n	810606a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8106066:	2301      	movs	r3, #1
 8106068:	e0cd      	b.n	8106206 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8106070:	b2db      	uxtb	r3, r3
 8106072:	2b00      	cmp	r3, #0
 8106074:	d106      	bne.n	8106084 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	2200      	movs	r2, #0
 810607a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810607e:	6878      	ldr	r0, [r7, #4]
 8106080:	f7fb f8c2 	bl	8101208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8106084:	687b      	ldr	r3, [r7, #4]
 8106086:	2202      	movs	r2, #2
 8106088:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810608c:	687b      	ldr	r3, [r7, #4]
 810608e:	681b      	ldr	r3, [r3, #0]
 8106090:	681a      	ldr	r2, [r3, #0]
 8106092:	687b      	ldr	r3, [r7, #4]
 8106094:	681b      	ldr	r3, [r3, #0]
 8106096:	f022 0201 	bic.w	r2, r2, #1
 810609a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810609c:	687b      	ldr	r3, [r7, #4]
 810609e:	681b      	ldr	r3, [r3, #0]
 81060a0:	689b      	ldr	r3, [r3, #8]
 81060a2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 81060a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	699b      	ldr	r3, [r3, #24]
 81060ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81060b0:	d119      	bne.n	81060e6 <HAL_SPI_Init+0x112>
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	685b      	ldr	r3, [r3, #4]
 81060b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81060ba:	d103      	bne.n	81060c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81060c0:	2b00      	cmp	r3, #0
 81060c2:	d008      	beq.n	81060d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81060c8:	2b00      	cmp	r3, #0
 81060ca:	d10c      	bne.n	81060e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81060d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81060d4:	d107      	bne.n	81060e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81060d6:	687b      	ldr	r3, [r7, #4]
 81060d8:	681b      	ldr	r3, [r3, #0]
 81060da:	681a      	ldr	r2, [r3, #0]
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	681b      	ldr	r3, [r3, #0]
 81060e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 81060e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	685b      	ldr	r3, [r3, #4]
 81060ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81060ee:	2b00      	cmp	r3, #0
 81060f0:	d00f      	beq.n	8106112 <HAL_SPI_Init+0x13e>
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	68db      	ldr	r3, [r3, #12]
 81060f6:	2b06      	cmp	r3, #6
 81060f8:	d90b      	bls.n	8106112 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 81060fa:	687b      	ldr	r3, [r7, #4]
 81060fc:	681b      	ldr	r3, [r3, #0]
 81060fe:	681b      	ldr	r3, [r3, #0]
 8106100:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	681b      	ldr	r3, [r3, #0]
 810610c:	430a      	orrs	r2, r1
 810610e:	601a      	str	r2, [r3, #0]
 8106110:	e007      	b.n	8106122 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	681b      	ldr	r3, [r3, #0]
 8106116:	681a      	ldr	r2, [r3, #0]
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	681b      	ldr	r3, [r3, #0]
 810611c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106120:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	69da      	ldr	r2, [r3, #28]
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810612a:	431a      	orrs	r2, r3
 810612c:	68bb      	ldr	r3, [r7, #8]
 810612e:	431a      	orrs	r2, r3
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106134:	ea42 0103 	orr.w	r1, r2, r3
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	68da      	ldr	r2, [r3, #12]
 810613c:	687b      	ldr	r3, [r7, #4]
 810613e:	681b      	ldr	r3, [r3, #0]
 8106140:	430a      	orrs	r2, r1
 8106142:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106148:	687b      	ldr	r3, [r7, #4]
 810614a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810614c:	431a      	orrs	r2, r3
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106152:	431a      	orrs	r2, r3
 8106154:	687b      	ldr	r3, [r7, #4]
 8106156:	699b      	ldr	r3, [r3, #24]
 8106158:	431a      	orrs	r2, r3
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	691b      	ldr	r3, [r3, #16]
 810615e:	431a      	orrs	r2, r3
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	695b      	ldr	r3, [r3, #20]
 8106164:	431a      	orrs	r2, r3
 8106166:	687b      	ldr	r3, [r7, #4]
 8106168:	6a1b      	ldr	r3, [r3, #32]
 810616a:	431a      	orrs	r2, r3
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	685b      	ldr	r3, [r3, #4]
 8106170:	431a      	orrs	r2, r3
 8106172:	687b      	ldr	r3, [r7, #4]
 8106174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106176:	431a      	orrs	r2, r3
 8106178:	687b      	ldr	r3, [r7, #4]
 810617a:	689b      	ldr	r3, [r3, #8]
 810617c:	431a      	orrs	r2, r3
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106182:	ea42 0103 	orr.w	r1, r2, r3
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	430a      	orrs	r2, r1
 8106190:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	685b      	ldr	r3, [r3, #4]
 8106196:	2b00      	cmp	r3, #0
 8106198:	d113      	bne.n	81061c2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	681b      	ldr	r3, [r3, #0]
 810619e:	689b      	ldr	r3, [r3, #8]
 81061a0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 81061a4:	687b      	ldr	r3, [r7, #4]
 81061a6:	681b      	ldr	r3, [r3, #0]
 81061a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81061ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81061ae:	687b      	ldr	r3, [r7, #4]
 81061b0:	681b      	ldr	r3, [r3, #0]
 81061b2:	689b      	ldr	r3, [r3, #8]
 81061b4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	681b      	ldr	r3, [r3, #0]
 81061bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 81061c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81061c2:	687b      	ldr	r3, [r7, #4]
 81061c4:	681b      	ldr	r3, [r3, #0]
 81061c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81061c8:	687b      	ldr	r3, [r7, #4]
 81061ca:	681b      	ldr	r3, [r3, #0]
 81061cc:	f022 0201 	bic.w	r2, r2, #1
 81061d0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81061d2:	687b      	ldr	r3, [r7, #4]
 81061d4:	685b      	ldr	r3, [r3, #4]
 81061d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81061da:	2b00      	cmp	r3, #0
 81061dc:	d00a      	beq.n	81061f4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81061de:	687b      	ldr	r3, [r7, #4]
 81061e0:	681b      	ldr	r3, [r3, #0]
 81061e2:	68db      	ldr	r3, [r3, #12]
 81061e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	681b      	ldr	r3, [r3, #0]
 81061f0:	430a      	orrs	r2, r1
 81061f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	2200      	movs	r2, #0
 81061f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	2201      	movs	r2, #1
 8106200:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8106204:	2300      	movs	r3, #0
}
 8106206:	4618      	mov	r0, r3
 8106208:	3710      	adds	r7, #16
 810620a:	46bd      	mov	sp, r7
 810620c:	bd80      	pop	{r7, pc}
 810620e:	bf00      	nop
 8106210:	40013000 	.word	0x40013000
 8106214:	40003800 	.word	0x40003800
 8106218:	40003c00 	.word	0x40003c00

0810621c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 810621c:	b480      	push	{r7}
 810621e:	b085      	sub	sp, #20
 8106220:	af00      	add	r7, sp, #0
 8106222:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8106224:	687b      	ldr	r3, [r7, #4]
 8106226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106228:	095b      	lsrs	r3, r3, #5
 810622a:	3301      	adds	r3, #1
 810622c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	68db      	ldr	r3, [r3, #12]
 8106232:	3301      	adds	r3, #1
 8106234:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8106236:	68bb      	ldr	r3, [r7, #8]
 8106238:	3307      	adds	r3, #7
 810623a:	08db      	lsrs	r3, r3, #3
 810623c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810623e:	68bb      	ldr	r3, [r7, #8]
 8106240:	68fa      	ldr	r2, [r7, #12]
 8106242:	fb02 f303 	mul.w	r3, r2, r3
}
 8106246:	4618      	mov	r0, r3
 8106248:	3714      	adds	r7, #20
 810624a:	46bd      	mov	sp, r7
 810624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106250:	4770      	bx	lr

08106252 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106252:	b580      	push	{r7, lr}
 8106254:	b082      	sub	sp, #8
 8106256:	af00      	add	r7, sp, #0
 8106258:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810625a:	687b      	ldr	r3, [r7, #4]
 810625c:	2b00      	cmp	r3, #0
 810625e:	d101      	bne.n	8106264 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106260:	2301      	movs	r3, #1
 8106262:	e049      	b.n	81062f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106264:	687b      	ldr	r3, [r7, #4]
 8106266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810626a:	b2db      	uxtb	r3, r3
 810626c:	2b00      	cmp	r3, #0
 810626e:	d106      	bne.n	810627e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	2200      	movs	r2, #0
 8106274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106278:	6878      	ldr	r0, [r7, #4]
 810627a:	f000 f841 	bl	8106300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810627e:	687b      	ldr	r3, [r7, #4]
 8106280:	2202      	movs	r2, #2
 8106282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106286:	687b      	ldr	r3, [r7, #4]
 8106288:	681a      	ldr	r2, [r3, #0]
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	3304      	adds	r3, #4
 810628e:	4619      	mov	r1, r3
 8106290:	4610      	mov	r0, r2
 8106292:	f000 f9e7 	bl	8106664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	2201      	movs	r2, #1
 810629a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810629e:	687b      	ldr	r3, [r7, #4]
 81062a0:	2201      	movs	r2, #1
 81062a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81062a6:	687b      	ldr	r3, [r7, #4]
 81062a8:	2201      	movs	r2, #1
 81062aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81062ae:	687b      	ldr	r3, [r7, #4]
 81062b0:	2201      	movs	r2, #1
 81062b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	2201      	movs	r2, #1
 81062ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81062be:	687b      	ldr	r3, [r7, #4]
 81062c0:	2201      	movs	r2, #1
 81062c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81062c6:	687b      	ldr	r3, [r7, #4]
 81062c8:	2201      	movs	r2, #1
 81062ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81062ce:	687b      	ldr	r3, [r7, #4]
 81062d0:	2201      	movs	r2, #1
 81062d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	2201      	movs	r2, #1
 81062da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	2201      	movs	r2, #1
 81062e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81062e6:	687b      	ldr	r3, [r7, #4]
 81062e8:	2201      	movs	r2, #1
 81062ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81062ee:	687b      	ldr	r3, [r7, #4]
 81062f0:	2201      	movs	r2, #1
 81062f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81062f6:	2300      	movs	r3, #0
}
 81062f8:	4618      	mov	r0, r3
 81062fa:	3708      	adds	r7, #8
 81062fc:	46bd      	mov	sp, r7
 81062fe:	bd80      	pop	{r7, pc}

08106300 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8106300:	b480      	push	{r7}
 8106302:	b083      	sub	sp, #12
 8106304:	af00      	add	r7, sp, #0
 8106306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8106308:	bf00      	nop
 810630a:	370c      	adds	r7, #12
 810630c:	46bd      	mov	sp, r7
 810630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106312:	4770      	bx	lr

08106314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106314:	b480      	push	{r7}
 8106316:	b085      	sub	sp, #20
 8106318:	af00      	add	r7, sp, #0
 810631a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106322:	b2db      	uxtb	r3, r3
 8106324:	2b01      	cmp	r3, #1
 8106326:	d001      	beq.n	810632c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8106328:	2301      	movs	r3, #1
 810632a:	e054      	b.n	81063d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	2202      	movs	r2, #2
 8106330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	681b      	ldr	r3, [r3, #0]
 8106338:	68da      	ldr	r2, [r3, #12]
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	681b      	ldr	r3, [r3, #0]
 810633e:	f042 0201 	orr.w	r2, r2, #1
 8106342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	4a26      	ldr	r2, [pc, #152]	@ (81063e4 <HAL_TIM_Base_Start_IT+0xd0>)
 810634a:	4293      	cmp	r3, r2
 810634c:	d022      	beq.n	8106394 <HAL_TIM_Base_Start_IT+0x80>
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	681b      	ldr	r3, [r3, #0]
 8106352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106356:	d01d      	beq.n	8106394 <HAL_TIM_Base_Start_IT+0x80>
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	681b      	ldr	r3, [r3, #0]
 810635c:	4a22      	ldr	r2, [pc, #136]	@ (81063e8 <HAL_TIM_Base_Start_IT+0xd4>)
 810635e:	4293      	cmp	r3, r2
 8106360:	d018      	beq.n	8106394 <HAL_TIM_Base_Start_IT+0x80>
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	4a21      	ldr	r2, [pc, #132]	@ (81063ec <HAL_TIM_Base_Start_IT+0xd8>)
 8106368:	4293      	cmp	r3, r2
 810636a:	d013      	beq.n	8106394 <HAL_TIM_Base_Start_IT+0x80>
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	681b      	ldr	r3, [r3, #0]
 8106370:	4a1f      	ldr	r2, [pc, #124]	@ (81063f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8106372:	4293      	cmp	r3, r2
 8106374:	d00e      	beq.n	8106394 <HAL_TIM_Base_Start_IT+0x80>
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	681b      	ldr	r3, [r3, #0]
 810637a:	4a1e      	ldr	r2, [pc, #120]	@ (81063f4 <HAL_TIM_Base_Start_IT+0xe0>)
 810637c:	4293      	cmp	r3, r2
 810637e:	d009      	beq.n	8106394 <HAL_TIM_Base_Start_IT+0x80>
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	4a1c      	ldr	r2, [pc, #112]	@ (81063f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8106386:	4293      	cmp	r3, r2
 8106388:	d004      	beq.n	8106394 <HAL_TIM_Base_Start_IT+0x80>
 810638a:	687b      	ldr	r3, [r7, #4]
 810638c:	681b      	ldr	r3, [r3, #0]
 810638e:	4a1b      	ldr	r2, [pc, #108]	@ (81063fc <HAL_TIM_Base_Start_IT+0xe8>)
 8106390:	4293      	cmp	r3, r2
 8106392:	d115      	bne.n	81063c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	681b      	ldr	r3, [r3, #0]
 8106398:	689a      	ldr	r2, [r3, #8]
 810639a:	4b19      	ldr	r3, [pc, #100]	@ (8106400 <HAL_TIM_Base_Start_IT+0xec>)
 810639c:	4013      	ands	r3, r2
 810639e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81063a0:	68fb      	ldr	r3, [r7, #12]
 81063a2:	2b06      	cmp	r3, #6
 81063a4:	d015      	beq.n	81063d2 <HAL_TIM_Base_Start_IT+0xbe>
 81063a6:	68fb      	ldr	r3, [r7, #12]
 81063a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81063ac:	d011      	beq.n	81063d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	681b      	ldr	r3, [r3, #0]
 81063b2:	681a      	ldr	r2, [r3, #0]
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	681b      	ldr	r3, [r3, #0]
 81063b8:	f042 0201 	orr.w	r2, r2, #1
 81063bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81063be:	e008      	b.n	81063d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	681b      	ldr	r3, [r3, #0]
 81063c4:	681a      	ldr	r2, [r3, #0]
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	681b      	ldr	r3, [r3, #0]
 81063ca:	f042 0201 	orr.w	r2, r2, #1
 81063ce:	601a      	str	r2, [r3, #0]
 81063d0:	e000      	b.n	81063d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81063d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81063d4:	2300      	movs	r3, #0
}
 81063d6:	4618      	mov	r0, r3
 81063d8:	3714      	adds	r7, #20
 81063da:	46bd      	mov	sp, r7
 81063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063e0:	4770      	bx	lr
 81063e2:	bf00      	nop
 81063e4:	40010000 	.word	0x40010000
 81063e8:	40000400 	.word	0x40000400
 81063ec:	40000800 	.word	0x40000800
 81063f0:	40000c00 	.word	0x40000c00
 81063f4:	40010400 	.word	0x40010400
 81063f8:	40001800 	.word	0x40001800
 81063fc:	40014000 	.word	0x40014000
 8106400:	00010007 	.word	0x00010007

08106404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106404:	b580      	push	{r7, lr}
 8106406:	b084      	sub	sp, #16
 8106408:	af00      	add	r7, sp, #0
 810640a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	681b      	ldr	r3, [r3, #0]
 8106410:	68db      	ldr	r3, [r3, #12]
 8106412:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	681b      	ldr	r3, [r3, #0]
 8106418:	691b      	ldr	r3, [r3, #16]
 810641a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810641c:	68bb      	ldr	r3, [r7, #8]
 810641e:	f003 0302 	and.w	r3, r3, #2
 8106422:	2b00      	cmp	r3, #0
 8106424:	d020      	beq.n	8106468 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8106426:	68fb      	ldr	r3, [r7, #12]
 8106428:	f003 0302 	and.w	r3, r3, #2
 810642c:	2b00      	cmp	r3, #0
 810642e:	d01b      	beq.n	8106468 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	681b      	ldr	r3, [r3, #0]
 8106434:	f06f 0202 	mvn.w	r2, #2
 8106438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	2201      	movs	r2, #1
 810643e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106440:	687b      	ldr	r3, [r7, #4]
 8106442:	681b      	ldr	r3, [r3, #0]
 8106444:	699b      	ldr	r3, [r3, #24]
 8106446:	f003 0303 	and.w	r3, r3, #3
 810644a:	2b00      	cmp	r3, #0
 810644c:	d003      	beq.n	8106456 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810644e:	6878      	ldr	r0, [r7, #4]
 8106450:	f000 f8e9 	bl	8106626 <HAL_TIM_IC_CaptureCallback>
 8106454:	e005      	b.n	8106462 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106456:	6878      	ldr	r0, [r7, #4]
 8106458:	f000 f8db 	bl	8106612 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810645c:	6878      	ldr	r0, [r7, #4]
 810645e:	f000 f8ec 	bl	810663a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106462:	687b      	ldr	r3, [r7, #4]
 8106464:	2200      	movs	r2, #0
 8106466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8106468:	68bb      	ldr	r3, [r7, #8]
 810646a:	f003 0304 	and.w	r3, r3, #4
 810646e:	2b00      	cmp	r3, #0
 8106470:	d020      	beq.n	81064b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8106472:	68fb      	ldr	r3, [r7, #12]
 8106474:	f003 0304 	and.w	r3, r3, #4
 8106478:	2b00      	cmp	r3, #0
 810647a:	d01b      	beq.n	81064b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	681b      	ldr	r3, [r3, #0]
 8106480:	f06f 0204 	mvn.w	r2, #4
 8106484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	2202      	movs	r2, #2
 810648a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	681b      	ldr	r3, [r3, #0]
 8106490:	699b      	ldr	r3, [r3, #24]
 8106492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106496:	2b00      	cmp	r3, #0
 8106498:	d003      	beq.n	81064a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810649a:	6878      	ldr	r0, [r7, #4]
 810649c:	f000 f8c3 	bl	8106626 <HAL_TIM_IC_CaptureCallback>
 81064a0:	e005      	b.n	81064ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81064a2:	6878      	ldr	r0, [r7, #4]
 81064a4:	f000 f8b5 	bl	8106612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81064a8:	6878      	ldr	r0, [r7, #4]
 81064aa:	f000 f8c6 	bl	810663a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	2200      	movs	r2, #0
 81064b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 81064b4:	68bb      	ldr	r3, [r7, #8]
 81064b6:	f003 0308 	and.w	r3, r3, #8
 81064ba:	2b00      	cmp	r3, #0
 81064bc:	d020      	beq.n	8106500 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 81064be:	68fb      	ldr	r3, [r7, #12]
 81064c0:	f003 0308 	and.w	r3, r3, #8
 81064c4:	2b00      	cmp	r3, #0
 81064c6:	d01b      	beq.n	8106500 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	681b      	ldr	r3, [r3, #0]
 81064cc:	f06f 0208 	mvn.w	r2, #8
 81064d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81064d2:	687b      	ldr	r3, [r7, #4]
 81064d4:	2204      	movs	r2, #4
 81064d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	681b      	ldr	r3, [r3, #0]
 81064dc:	69db      	ldr	r3, [r3, #28]
 81064de:	f003 0303 	and.w	r3, r3, #3
 81064e2:	2b00      	cmp	r3, #0
 81064e4:	d003      	beq.n	81064ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81064e6:	6878      	ldr	r0, [r7, #4]
 81064e8:	f000 f89d 	bl	8106626 <HAL_TIM_IC_CaptureCallback>
 81064ec:	e005      	b.n	81064fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81064ee:	6878      	ldr	r0, [r7, #4]
 81064f0:	f000 f88f 	bl	8106612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81064f4:	6878      	ldr	r0, [r7, #4]
 81064f6:	f000 f8a0 	bl	810663a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	2200      	movs	r2, #0
 81064fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8106500:	68bb      	ldr	r3, [r7, #8]
 8106502:	f003 0310 	and.w	r3, r3, #16
 8106506:	2b00      	cmp	r3, #0
 8106508:	d020      	beq.n	810654c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810650a:	68fb      	ldr	r3, [r7, #12]
 810650c:	f003 0310 	and.w	r3, r3, #16
 8106510:	2b00      	cmp	r3, #0
 8106512:	d01b      	beq.n	810654c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	f06f 0210 	mvn.w	r2, #16
 810651c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	2208      	movs	r2, #8
 8106522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	681b      	ldr	r3, [r3, #0]
 8106528:	69db      	ldr	r3, [r3, #28]
 810652a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810652e:	2b00      	cmp	r3, #0
 8106530:	d003      	beq.n	810653a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106532:	6878      	ldr	r0, [r7, #4]
 8106534:	f000 f877 	bl	8106626 <HAL_TIM_IC_CaptureCallback>
 8106538:	e005      	b.n	8106546 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810653a:	6878      	ldr	r0, [r7, #4]
 810653c:	f000 f869 	bl	8106612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106540:	6878      	ldr	r0, [r7, #4]
 8106542:	f000 f87a 	bl	810663a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106546:	687b      	ldr	r3, [r7, #4]
 8106548:	2200      	movs	r2, #0
 810654a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810654c:	68bb      	ldr	r3, [r7, #8]
 810654e:	f003 0301 	and.w	r3, r3, #1
 8106552:	2b00      	cmp	r3, #0
 8106554:	d00c      	beq.n	8106570 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8106556:	68fb      	ldr	r3, [r7, #12]
 8106558:	f003 0301 	and.w	r3, r3, #1
 810655c:	2b00      	cmp	r3, #0
 810655e:	d007      	beq.n	8106570 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8106560:	687b      	ldr	r3, [r7, #4]
 8106562:	681b      	ldr	r3, [r3, #0]
 8106564:	f06f 0201 	mvn.w	r2, #1
 8106568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810656a:	6878      	ldr	r0, [r7, #4]
 810656c:	f7fa fd04 	bl	8100f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106570:	68bb      	ldr	r3, [r7, #8]
 8106572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106576:	2b00      	cmp	r3, #0
 8106578:	d104      	bne.n	8106584 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810657a:	68bb      	ldr	r3, [r7, #8]
 810657c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106580:	2b00      	cmp	r3, #0
 8106582:	d00c      	beq.n	810659e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106584:	68fb      	ldr	r3, [r7, #12]
 8106586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810658a:	2b00      	cmp	r3, #0
 810658c:	d007      	beq.n	810659e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	681b      	ldr	r3, [r3, #0]
 8106592:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8106596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106598:	6878      	ldr	r0, [r7, #4]
 810659a:	f000 f90d 	bl	81067b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810659e:	68bb      	ldr	r3, [r7, #8]
 81065a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81065a4:	2b00      	cmp	r3, #0
 81065a6:	d00c      	beq.n	81065c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81065a8:	68fb      	ldr	r3, [r7, #12]
 81065aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81065ae:	2b00      	cmp	r3, #0
 81065b0:	d007      	beq.n	81065c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 81065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81065bc:	6878      	ldr	r0, [r7, #4]
 81065be:	f000 f905 	bl	81067cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 81065c2:	68bb      	ldr	r3, [r7, #8]
 81065c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81065c8:	2b00      	cmp	r3, #0
 81065ca:	d00c      	beq.n	81065e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 81065cc:	68fb      	ldr	r3, [r7, #12]
 81065ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81065d2:	2b00      	cmp	r3, #0
 81065d4:	d007      	beq.n	81065e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 81065d6:	687b      	ldr	r3, [r7, #4]
 81065d8:	681b      	ldr	r3, [r3, #0]
 81065da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 81065de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81065e0:	6878      	ldr	r0, [r7, #4]
 81065e2:	f000 f834 	bl	810664e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 81065e6:	68bb      	ldr	r3, [r7, #8]
 81065e8:	f003 0320 	and.w	r3, r3, #32
 81065ec:	2b00      	cmp	r3, #0
 81065ee:	d00c      	beq.n	810660a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 81065f0:	68fb      	ldr	r3, [r7, #12]
 81065f2:	f003 0320 	and.w	r3, r3, #32
 81065f6:	2b00      	cmp	r3, #0
 81065f8:	d007      	beq.n	810660a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 81065fa:	687b      	ldr	r3, [r7, #4]
 81065fc:	681b      	ldr	r3, [r3, #0]
 81065fe:	f06f 0220 	mvn.w	r2, #32
 8106602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106604:	6878      	ldr	r0, [r7, #4]
 8106606:	f000 f8cd 	bl	81067a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810660a:	bf00      	nop
 810660c:	3710      	adds	r7, #16
 810660e:	46bd      	mov	sp, r7
 8106610:	bd80      	pop	{r7, pc}

08106612 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106612:	b480      	push	{r7}
 8106614:	b083      	sub	sp, #12
 8106616:	af00      	add	r7, sp, #0
 8106618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810661a:	bf00      	nop
 810661c:	370c      	adds	r7, #12
 810661e:	46bd      	mov	sp, r7
 8106620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106624:	4770      	bx	lr

08106626 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8106626:	b480      	push	{r7}
 8106628:	b083      	sub	sp, #12
 810662a:	af00      	add	r7, sp, #0
 810662c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810662e:	bf00      	nop
 8106630:	370c      	adds	r7, #12
 8106632:	46bd      	mov	sp, r7
 8106634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106638:	4770      	bx	lr

0810663a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810663a:	b480      	push	{r7}
 810663c:	b083      	sub	sp, #12
 810663e:	af00      	add	r7, sp, #0
 8106640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8106642:	bf00      	nop
 8106644:	370c      	adds	r7, #12
 8106646:	46bd      	mov	sp, r7
 8106648:	f85d 7b04 	ldr.w	r7, [sp], #4
 810664c:	4770      	bx	lr

0810664e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810664e:	b480      	push	{r7}
 8106650:	b083      	sub	sp, #12
 8106652:	af00      	add	r7, sp, #0
 8106654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8106656:	bf00      	nop
 8106658:	370c      	adds	r7, #12
 810665a:	46bd      	mov	sp, r7
 810665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106660:	4770      	bx	lr
	...

08106664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106664:	b480      	push	{r7}
 8106666:	b085      	sub	sp, #20
 8106668:	af00      	add	r7, sp, #0
 810666a:	6078      	str	r0, [r7, #4]
 810666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810666e:	687b      	ldr	r3, [r7, #4]
 8106670:	681b      	ldr	r3, [r3, #0]
 8106672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106674:	687b      	ldr	r3, [r7, #4]
 8106676:	4a43      	ldr	r2, [pc, #268]	@ (8106784 <TIM_Base_SetConfig+0x120>)
 8106678:	4293      	cmp	r3, r2
 810667a:	d013      	beq.n	81066a4 <TIM_Base_SetConfig+0x40>
 810667c:	687b      	ldr	r3, [r7, #4]
 810667e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106682:	d00f      	beq.n	81066a4 <TIM_Base_SetConfig+0x40>
 8106684:	687b      	ldr	r3, [r7, #4]
 8106686:	4a40      	ldr	r2, [pc, #256]	@ (8106788 <TIM_Base_SetConfig+0x124>)
 8106688:	4293      	cmp	r3, r2
 810668a:	d00b      	beq.n	81066a4 <TIM_Base_SetConfig+0x40>
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	4a3f      	ldr	r2, [pc, #252]	@ (810678c <TIM_Base_SetConfig+0x128>)
 8106690:	4293      	cmp	r3, r2
 8106692:	d007      	beq.n	81066a4 <TIM_Base_SetConfig+0x40>
 8106694:	687b      	ldr	r3, [r7, #4]
 8106696:	4a3e      	ldr	r2, [pc, #248]	@ (8106790 <TIM_Base_SetConfig+0x12c>)
 8106698:	4293      	cmp	r3, r2
 810669a:	d003      	beq.n	81066a4 <TIM_Base_SetConfig+0x40>
 810669c:	687b      	ldr	r3, [r7, #4]
 810669e:	4a3d      	ldr	r2, [pc, #244]	@ (8106794 <TIM_Base_SetConfig+0x130>)
 81066a0:	4293      	cmp	r3, r2
 81066a2:	d108      	bne.n	81066b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81066a4:	68fb      	ldr	r3, [r7, #12]
 81066a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81066aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81066ac:	683b      	ldr	r3, [r7, #0]
 81066ae:	685b      	ldr	r3, [r3, #4]
 81066b0:	68fa      	ldr	r2, [r7, #12]
 81066b2:	4313      	orrs	r3, r2
 81066b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81066b6:	687b      	ldr	r3, [r7, #4]
 81066b8:	4a32      	ldr	r2, [pc, #200]	@ (8106784 <TIM_Base_SetConfig+0x120>)
 81066ba:	4293      	cmp	r3, r2
 81066bc:	d01f      	beq.n	81066fe <TIM_Base_SetConfig+0x9a>
 81066be:	687b      	ldr	r3, [r7, #4]
 81066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81066c4:	d01b      	beq.n	81066fe <TIM_Base_SetConfig+0x9a>
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	4a2f      	ldr	r2, [pc, #188]	@ (8106788 <TIM_Base_SetConfig+0x124>)
 81066ca:	4293      	cmp	r3, r2
 81066cc:	d017      	beq.n	81066fe <TIM_Base_SetConfig+0x9a>
 81066ce:	687b      	ldr	r3, [r7, #4]
 81066d0:	4a2e      	ldr	r2, [pc, #184]	@ (810678c <TIM_Base_SetConfig+0x128>)
 81066d2:	4293      	cmp	r3, r2
 81066d4:	d013      	beq.n	81066fe <TIM_Base_SetConfig+0x9a>
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	4a2d      	ldr	r2, [pc, #180]	@ (8106790 <TIM_Base_SetConfig+0x12c>)
 81066da:	4293      	cmp	r3, r2
 81066dc:	d00f      	beq.n	81066fe <TIM_Base_SetConfig+0x9a>
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	4a2c      	ldr	r2, [pc, #176]	@ (8106794 <TIM_Base_SetConfig+0x130>)
 81066e2:	4293      	cmp	r3, r2
 81066e4:	d00b      	beq.n	81066fe <TIM_Base_SetConfig+0x9a>
 81066e6:	687b      	ldr	r3, [r7, #4]
 81066e8:	4a2b      	ldr	r2, [pc, #172]	@ (8106798 <TIM_Base_SetConfig+0x134>)
 81066ea:	4293      	cmp	r3, r2
 81066ec:	d007      	beq.n	81066fe <TIM_Base_SetConfig+0x9a>
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	4a2a      	ldr	r2, [pc, #168]	@ (810679c <TIM_Base_SetConfig+0x138>)
 81066f2:	4293      	cmp	r3, r2
 81066f4:	d003      	beq.n	81066fe <TIM_Base_SetConfig+0x9a>
 81066f6:	687b      	ldr	r3, [r7, #4]
 81066f8:	4a29      	ldr	r2, [pc, #164]	@ (81067a0 <TIM_Base_SetConfig+0x13c>)
 81066fa:	4293      	cmp	r3, r2
 81066fc:	d108      	bne.n	8106710 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81066fe:	68fb      	ldr	r3, [r7, #12]
 8106700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106706:	683b      	ldr	r3, [r7, #0]
 8106708:	68db      	ldr	r3, [r3, #12]
 810670a:	68fa      	ldr	r2, [r7, #12]
 810670c:	4313      	orrs	r3, r2
 810670e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106710:	68fb      	ldr	r3, [r7, #12]
 8106712:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8106716:	683b      	ldr	r3, [r7, #0]
 8106718:	695b      	ldr	r3, [r3, #20]
 810671a:	4313      	orrs	r3, r2
 810671c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810671e:	683b      	ldr	r3, [r7, #0]
 8106720:	689a      	ldr	r2, [r3, #8]
 8106722:	687b      	ldr	r3, [r7, #4]
 8106724:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106726:	683b      	ldr	r3, [r7, #0]
 8106728:	681a      	ldr	r2, [r3, #0]
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810672e:	687b      	ldr	r3, [r7, #4]
 8106730:	4a14      	ldr	r2, [pc, #80]	@ (8106784 <TIM_Base_SetConfig+0x120>)
 8106732:	4293      	cmp	r3, r2
 8106734:	d00f      	beq.n	8106756 <TIM_Base_SetConfig+0xf2>
 8106736:	687b      	ldr	r3, [r7, #4]
 8106738:	4a16      	ldr	r2, [pc, #88]	@ (8106794 <TIM_Base_SetConfig+0x130>)
 810673a:	4293      	cmp	r3, r2
 810673c:	d00b      	beq.n	8106756 <TIM_Base_SetConfig+0xf2>
 810673e:	687b      	ldr	r3, [r7, #4]
 8106740:	4a15      	ldr	r2, [pc, #84]	@ (8106798 <TIM_Base_SetConfig+0x134>)
 8106742:	4293      	cmp	r3, r2
 8106744:	d007      	beq.n	8106756 <TIM_Base_SetConfig+0xf2>
 8106746:	687b      	ldr	r3, [r7, #4]
 8106748:	4a14      	ldr	r2, [pc, #80]	@ (810679c <TIM_Base_SetConfig+0x138>)
 810674a:	4293      	cmp	r3, r2
 810674c:	d003      	beq.n	8106756 <TIM_Base_SetConfig+0xf2>
 810674e:	687b      	ldr	r3, [r7, #4]
 8106750:	4a13      	ldr	r2, [pc, #76]	@ (81067a0 <TIM_Base_SetConfig+0x13c>)
 8106752:	4293      	cmp	r3, r2
 8106754:	d103      	bne.n	810675e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106756:	683b      	ldr	r3, [r7, #0]
 8106758:	691a      	ldr	r2, [r3, #16]
 810675a:	687b      	ldr	r3, [r7, #4]
 810675c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 810675e:	687b      	ldr	r3, [r7, #4]
 8106760:	681b      	ldr	r3, [r3, #0]
 8106762:	f043 0204 	orr.w	r2, r3, #4
 8106766:	687b      	ldr	r3, [r7, #4]
 8106768:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	2201      	movs	r2, #1
 810676e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	68fa      	ldr	r2, [r7, #12]
 8106774:	601a      	str	r2, [r3, #0]
}
 8106776:	bf00      	nop
 8106778:	3714      	adds	r7, #20
 810677a:	46bd      	mov	sp, r7
 810677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106780:	4770      	bx	lr
 8106782:	bf00      	nop
 8106784:	40010000 	.word	0x40010000
 8106788:	40000400 	.word	0x40000400
 810678c:	40000800 	.word	0x40000800
 8106790:	40000c00 	.word	0x40000c00
 8106794:	40010400 	.word	0x40010400
 8106798:	40014000 	.word	0x40014000
 810679c:	40014400 	.word	0x40014400
 81067a0:	40014800 	.word	0x40014800

081067a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81067a4:	b480      	push	{r7}
 81067a6:	b083      	sub	sp, #12
 81067a8:	af00      	add	r7, sp, #0
 81067aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81067ac:	bf00      	nop
 81067ae:	370c      	adds	r7, #12
 81067b0:	46bd      	mov	sp, r7
 81067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b6:	4770      	bx	lr

081067b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81067b8:	b480      	push	{r7}
 81067ba:	b083      	sub	sp, #12
 81067bc:	af00      	add	r7, sp, #0
 81067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81067c0:	bf00      	nop
 81067c2:	370c      	adds	r7, #12
 81067c4:	46bd      	mov	sp, r7
 81067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067ca:	4770      	bx	lr

081067cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81067cc:	b480      	push	{r7}
 81067ce:	b083      	sub	sp, #12
 81067d0:	af00      	add	r7, sp, #0
 81067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81067d4:	bf00      	nop
 81067d6:	370c      	adds	r7, #12
 81067d8:	46bd      	mov	sp, r7
 81067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067de:	4770      	bx	lr

081067e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81067e0:	b580      	push	{r7, lr}
 81067e2:	b08a      	sub	sp, #40	@ 0x28
 81067e4:	af02      	add	r7, sp, #8
 81067e6:	60f8      	str	r0, [r7, #12]
 81067e8:	60b9      	str	r1, [r7, #8]
 81067ea:	603b      	str	r3, [r7, #0]
 81067ec:	4613      	mov	r3, r2
 81067ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81067f0:	68fb      	ldr	r3, [r7, #12]
 81067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81067f6:	2b20      	cmp	r3, #32
 81067f8:	d17b      	bne.n	81068f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 81067fa:	68bb      	ldr	r3, [r7, #8]
 81067fc:	2b00      	cmp	r3, #0
 81067fe:	d002      	beq.n	8106806 <HAL_UART_Transmit+0x26>
 8106800:	88fb      	ldrh	r3, [r7, #6]
 8106802:	2b00      	cmp	r3, #0
 8106804:	d101      	bne.n	810680a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8106806:	2301      	movs	r3, #1
 8106808:	e074      	b.n	81068f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810680a:	68fb      	ldr	r3, [r7, #12]
 810680c:	2200      	movs	r2, #0
 810680e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106812:	68fb      	ldr	r3, [r7, #12]
 8106814:	2221      	movs	r2, #33	@ 0x21
 8106816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810681a:	f7fb f939 	bl	8101a90 <HAL_GetTick>
 810681e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8106820:	68fb      	ldr	r3, [r7, #12]
 8106822:	88fa      	ldrh	r2, [r7, #6]
 8106824:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8106828:	68fb      	ldr	r3, [r7, #12]
 810682a:	88fa      	ldrh	r2, [r7, #6]
 810682c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106830:	68fb      	ldr	r3, [r7, #12]
 8106832:	689b      	ldr	r3, [r3, #8]
 8106834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106838:	d108      	bne.n	810684c <HAL_UART_Transmit+0x6c>
 810683a:	68fb      	ldr	r3, [r7, #12]
 810683c:	691b      	ldr	r3, [r3, #16]
 810683e:	2b00      	cmp	r3, #0
 8106840:	d104      	bne.n	810684c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8106842:	2300      	movs	r3, #0
 8106844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8106846:	68bb      	ldr	r3, [r7, #8]
 8106848:	61bb      	str	r3, [r7, #24]
 810684a:	e003      	b.n	8106854 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810684c:	68bb      	ldr	r3, [r7, #8]
 810684e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106850:	2300      	movs	r3, #0
 8106852:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8106854:	e030      	b.n	81068b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106856:	683b      	ldr	r3, [r7, #0]
 8106858:	9300      	str	r3, [sp, #0]
 810685a:	697b      	ldr	r3, [r7, #20]
 810685c:	2200      	movs	r2, #0
 810685e:	2180      	movs	r1, #128	@ 0x80
 8106860:	68f8      	ldr	r0, [r7, #12]
 8106862:	f000 f84b 	bl	81068fc <UART_WaitOnFlagUntilTimeout>
 8106866:	4603      	mov	r3, r0
 8106868:	2b00      	cmp	r3, #0
 810686a:	d005      	beq.n	8106878 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810686c:	68fb      	ldr	r3, [r7, #12]
 810686e:	2220      	movs	r2, #32
 8106870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8106874:	2303      	movs	r3, #3
 8106876:	e03d      	b.n	81068f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8106878:	69fb      	ldr	r3, [r7, #28]
 810687a:	2b00      	cmp	r3, #0
 810687c:	d10b      	bne.n	8106896 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810687e:	69bb      	ldr	r3, [r7, #24]
 8106880:	881b      	ldrh	r3, [r3, #0]
 8106882:	461a      	mov	r2, r3
 8106884:	68fb      	ldr	r3, [r7, #12]
 8106886:	681b      	ldr	r3, [r3, #0]
 8106888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810688c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810688e:	69bb      	ldr	r3, [r7, #24]
 8106890:	3302      	adds	r3, #2
 8106892:	61bb      	str	r3, [r7, #24]
 8106894:	e007      	b.n	81068a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8106896:	69fb      	ldr	r3, [r7, #28]
 8106898:	781a      	ldrb	r2, [r3, #0]
 810689a:	68fb      	ldr	r3, [r7, #12]
 810689c:	681b      	ldr	r3, [r3, #0]
 810689e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81068a0:	69fb      	ldr	r3, [r7, #28]
 81068a2:	3301      	adds	r3, #1
 81068a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81068a6:	68fb      	ldr	r3, [r7, #12]
 81068a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81068ac:	b29b      	uxth	r3, r3
 81068ae:	3b01      	subs	r3, #1
 81068b0:	b29a      	uxth	r2, r3
 81068b2:	68fb      	ldr	r3, [r7, #12]
 81068b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81068b8:	68fb      	ldr	r3, [r7, #12]
 81068ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81068be:	b29b      	uxth	r3, r3
 81068c0:	2b00      	cmp	r3, #0
 81068c2:	d1c8      	bne.n	8106856 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81068c4:	683b      	ldr	r3, [r7, #0]
 81068c6:	9300      	str	r3, [sp, #0]
 81068c8:	697b      	ldr	r3, [r7, #20]
 81068ca:	2200      	movs	r2, #0
 81068cc:	2140      	movs	r1, #64	@ 0x40
 81068ce:	68f8      	ldr	r0, [r7, #12]
 81068d0:	f000 f814 	bl	81068fc <UART_WaitOnFlagUntilTimeout>
 81068d4:	4603      	mov	r3, r0
 81068d6:	2b00      	cmp	r3, #0
 81068d8:	d005      	beq.n	81068e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81068da:	68fb      	ldr	r3, [r7, #12]
 81068dc:	2220      	movs	r2, #32
 81068de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 81068e2:	2303      	movs	r3, #3
 81068e4:	e006      	b.n	81068f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81068e6:	68fb      	ldr	r3, [r7, #12]
 81068e8:	2220      	movs	r2, #32
 81068ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 81068ee:	2300      	movs	r3, #0
 81068f0:	e000      	b.n	81068f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 81068f2:	2302      	movs	r3, #2
  }
}
 81068f4:	4618      	mov	r0, r3
 81068f6:	3720      	adds	r7, #32
 81068f8:	46bd      	mov	sp, r7
 81068fa:	bd80      	pop	{r7, pc}

081068fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81068fc:	b580      	push	{r7, lr}
 81068fe:	b084      	sub	sp, #16
 8106900:	af00      	add	r7, sp, #0
 8106902:	60f8      	str	r0, [r7, #12]
 8106904:	60b9      	str	r1, [r7, #8]
 8106906:	603b      	str	r3, [r7, #0]
 8106908:	4613      	mov	r3, r2
 810690a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810690c:	e04f      	b.n	81069ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810690e:	69bb      	ldr	r3, [r7, #24]
 8106910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106914:	d04b      	beq.n	81069ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106916:	f7fb f8bb 	bl	8101a90 <HAL_GetTick>
 810691a:	4602      	mov	r2, r0
 810691c:	683b      	ldr	r3, [r7, #0]
 810691e:	1ad3      	subs	r3, r2, r3
 8106920:	69ba      	ldr	r2, [r7, #24]
 8106922:	429a      	cmp	r2, r3
 8106924:	d302      	bcc.n	810692c <UART_WaitOnFlagUntilTimeout+0x30>
 8106926:	69bb      	ldr	r3, [r7, #24]
 8106928:	2b00      	cmp	r3, #0
 810692a:	d101      	bne.n	8106930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810692c:	2303      	movs	r3, #3
 810692e:	e04e      	b.n	81069ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8106930:	68fb      	ldr	r3, [r7, #12]
 8106932:	681b      	ldr	r3, [r3, #0]
 8106934:	681b      	ldr	r3, [r3, #0]
 8106936:	f003 0304 	and.w	r3, r3, #4
 810693a:	2b00      	cmp	r3, #0
 810693c:	d037      	beq.n	81069ae <UART_WaitOnFlagUntilTimeout+0xb2>
 810693e:	68bb      	ldr	r3, [r7, #8]
 8106940:	2b80      	cmp	r3, #128	@ 0x80
 8106942:	d034      	beq.n	81069ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8106944:	68bb      	ldr	r3, [r7, #8]
 8106946:	2b40      	cmp	r3, #64	@ 0x40
 8106948:	d031      	beq.n	81069ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810694a:	68fb      	ldr	r3, [r7, #12]
 810694c:	681b      	ldr	r3, [r3, #0]
 810694e:	69db      	ldr	r3, [r3, #28]
 8106950:	f003 0308 	and.w	r3, r3, #8
 8106954:	2b08      	cmp	r3, #8
 8106956:	d110      	bne.n	810697a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106958:	68fb      	ldr	r3, [r7, #12]
 810695a:	681b      	ldr	r3, [r3, #0]
 810695c:	2208      	movs	r2, #8
 810695e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106960:	68f8      	ldr	r0, [r7, #12]
 8106962:	f000 f838 	bl	81069d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8106966:	68fb      	ldr	r3, [r7, #12]
 8106968:	2208      	movs	r2, #8
 810696a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810696e:	68fb      	ldr	r3, [r7, #12]
 8106970:	2200      	movs	r2, #0
 8106972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8106976:	2301      	movs	r3, #1
 8106978:	e029      	b.n	81069ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810697a:	68fb      	ldr	r3, [r7, #12]
 810697c:	681b      	ldr	r3, [r3, #0]
 810697e:	69db      	ldr	r3, [r3, #28]
 8106980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8106984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106988:	d111      	bne.n	81069ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810698a:	68fb      	ldr	r3, [r7, #12]
 810698c:	681b      	ldr	r3, [r3, #0]
 810698e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8106992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106994:	68f8      	ldr	r0, [r7, #12]
 8106996:	f000 f81e 	bl	81069d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810699a:	68fb      	ldr	r3, [r7, #12]
 810699c:	2220      	movs	r2, #32
 810699e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81069a2:	68fb      	ldr	r3, [r7, #12]
 81069a4:	2200      	movs	r2, #0
 81069a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81069aa:	2303      	movs	r3, #3
 81069ac:	e00f      	b.n	81069ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81069ae:	68fb      	ldr	r3, [r7, #12]
 81069b0:	681b      	ldr	r3, [r3, #0]
 81069b2:	69da      	ldr	r2, [r3, #28]
 81069b4:	68bb      	ldr	r3, [r7, #8]
 81069b6:	4013      	ands	r3, r2
 81069b8:	68ba      	ldr	r2, [r7, #8]
 81069ba:	429a      	cmp	r2, r3
 81069bc:	bf0c      	ite	eq
 81069be:	2301      	moveq	r3, #1
 81069c0:	2300      	movne	r3, #0
 81069c2:	b2db      	uxtb	r3, r3
 81069c4:	461a      	mov	r2, r3
 81069c6:	79fb      	ldrb	r3, [r7, #7]
 81069c8:	429a      	cmp	r2, r3
 81069ca:	d0a0      	beq.n	810690e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81069cc:	2300      	movs	r3, #0
}
 81069ce:	4618      	mov	r0, r3
 81069d0:	3710      	adds	r7, #16
 81069d2:	46bd      	mov	sp, r7
 81069d4:	bd80      	pop	{r7, pc}

081069d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81069d6:	b480      	push	{r7}
 81069d8:	b095      	sub	sp, #84	@ 0x54
 81069da:	af00      	add	r7, sp, #0
 81069dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81069de:	687b      	ldr	r3, [r7, #4]
 81069e0:	681b      	ldr	r3, [r3, #0]
 81069e2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81069e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81069e6:	e853 3f00 	ldrex	r3, [r3]
 81069ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81069ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81069f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	681b      	ldr	r3, [r3, #0]
 81069f8:	461a      	mov	r2, r3
 81069fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81069fc:	643b      	str	r3, [r7, #64]	@ 0x40
 81069fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8106a02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8106a04:	e841 2300 	strex	r3, r2, [r1]
 8106a08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8106a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a0c:	2b00      	cmp	r3, #0
 8106a0e:	d1e6      	bne.n	81069de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	681b      	ldr	r3, [r3, #0]
 8106a14:	3308      	adds	r3, #8
 8106a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a18:	6a3b      	ldr	r3, [r7, #32]
 8106a1a:	e853 3f00 	ldrex	r3, [r3]
 8106a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8106a20:	69fb      	ldr	r3, [r7, #28]
 8106a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8106a26:	f023 0301 	bic.w	r3, r3, #1
 8106a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106a2c:	687b      	ldr	r3, [r7, #4]
 8106a2e:	681b      	ldr	r3, [r3, #0]
 8106a30:	3308      	adds	r3, #8
 8106a32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8106a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106a3c:	e841 2300 	strex	r3, r2, [r1]
 8106a40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8106a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106a44:	2b00      	cmp	r3, #0
 8106a46:	d1e3      	bne.n	8106a10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106a4c:	2b01      	cmp	r3, #1
 8106a4e:	d118      	bne.n	8106a82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106a50:	687b      	ldr	r3, [r7, #4]
 8106a52:	681b      	ldr	r3, [r3, #0]
 8106a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a56:	68fb      	ldr	r3, [r7, #12]
 8106a58:	e853 3f00 	ldrex	r3, [r3]
 8106a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8106a5e:	68bb      	ldr	r3, [r7, #8]
 8106a60:	f023 0310 	bic.w	r3, r3, #16
 8106a64:	647b      	str	r3, [r7, #68]	@ 0x44
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	461a      	mov	r2, r3
 8106a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8106a6e:	61bb      	str	r3, [r7, #24]
 8106a70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a72:	6979      	ldr	r1, [r7, #20]
 8106a74:	69ba      	ldr	r2, [r7, #24]
 8106a76:	e841 2300 	strex	r3, r2, [r1]
 8106a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8106a7c:	693b      	ldr	r3, [r7, #16]
 8106a7e:	2b00      	cmp	r3, #0
 8106a80:	d1e6      	bne.n	8106a50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8106a82:	687b      	ldr	r3, [r7, #4]
 8106a84:	2220      	movs	r2, #32
 8106a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106a8a:	687b      	ldr	r3, [r7, #4]
 8106a8c:	2200      	movs	r2, #0
 8106a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8106a90:	687b      	ldr	r3, [r7, #4]
 8106a92:	2200      	movs	r2, #0
 8106a94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8106a96:	bf00      	nop
 8106a98:	3754      	adds	r7, #84	@ 0x54
 8106a9a:	46bd      	mov	sp, r7
 8106a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106aa0:	4770      	bx	lr

08106aa2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8106aa2:	b084      	sub	sp, #16
 8106aa4:	b580      	push	{r7, lr}
 8106aa6:	b084      	sub	sp, #16
 8106aa8:	af00      	add	r7, sp, #0
 8106aaa:	6078      	str	r0, [r7, #4]
 8106aac:	f107 001c 	add.w	r0, r7, #28
 8106ab0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8106ab4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8106ab8:	2b01      	cmp	r3, #1
 8106aba:	d123      	bne.n	8106b04 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8106abc:	687b      	ldr	r3, [r7, #4]
 8106abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106ac0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8106ac4:	687b      	ldr	r3, [r7, #4]
 8106ac6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8106ac8:	687b      	ldr	r3, [r7, #4]
 8106aca:	68db      	ldr	r3, [r3, #12]
 8106acc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8106ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8106ad4:	687a      	ldr	r2, [r7, #4]
 8106ad6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8106ad8:	687b      	ldr	r3, [r7, #4]
 8106ada:	68db      	ldr	r3, [r3, #12]
 8106adc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8106ae0:	687b      	ldr	r3, [r7, #4]
 8106ae2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8106ae4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8106ae8:	2b01      	cmp	r3, #1
 8106aea:	d105      	bne.n	8106af8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8106aec:	687b      	ldr	r3, [r7, #4]
 8106aee:	68db      	ldr	r3, [r3, #12]
 8106af0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8106af4:	687b      	ldr	r3, [r7, #4]
 8106af6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8106af8:	6878      	ldr	r0, [r7, #4]
 8106afa:	f000 faa7 	bl	810704c <USB_CoreReset>
 8106afe:	4603      	mov	r3, r0
 8106b00:	73fb      	strb	r3, [r7, #15]
 8106b02:	e01b      	b.n	8106b3c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8106b04:	687b      	ldr	r3, [r7, #4]
 8106b06:	68db      	ldr	r3, [r3, #12]
 8106b08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8106b0c:	687b      	ldr	r3, [r7, #4]
 8106b0e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8106b10:	6878      	ldr	r0, [r7, #4]
 8106b12:	f000 fa9b 	bl	810704c <USB_CoreReset>
 8106b16:	4603      	mov	r3, r0
 8106b18:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8106b1a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8106b1e:	2b00      	cmp	r3, #0
 8106b20:	d106      	bne.n	8106b30 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106b26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8106b2a:	687b      	ldr	r3, [r7, #4]
 8106b2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8106b2e:	e005      	b.n	8106b3c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8106b30:	687b      	ldr	r3, [r7, #4]
 8106b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106b34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8106b38:	687b      	ldr	r3, [r7, #4]
 8106b3a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8106b3c:	7fbb      	ldrb	r3, [r7, #30]
 8106b3e:	2b01      	cmp	r3, #1
 8106b40:	d118      	bne.n	8106b74 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8106b42:	687b      	ldr	r3, [r7, #4]
 8106b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106b46:	b29a      	uxth	r2, r3
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8106b4c:	687b      	ldr	r3, [r7, #4]
 8106b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106b50:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 8106b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106b58:	687a      	ldr	r2, [r7, #4]
 8106b5a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	689b      	ldr	r3, [r3, #8]
 8106b60:	f043 0206 	orr.w	r2, r3, #6
 8106b64:	687b      	ldr	r3, [r7, #4]
 8106b66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	689b      	ldr	r3, [r3, #8]
 8106b6c:	f043 0220 	orr.w	r2, r3, #32
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8106b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8106b76:	4618      	mov	r0, r3
 8106b78:	3710      	adds	r7, #16
 8106b7a:	46bd      	mov	sp, r7
 8106b7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8106b80:	b004      	add	sp, #16
 8106b82:	4770      	bx	lr

08106b84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8106b84:	b480      	push	{r7}
 8106b86:	b083      	sub	sp, #12
 8106b88:	af00      	add	r7, sp, #0
 8106b8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	689b      	ldr	r3, [r3, #8]
 8106b90:	f023 0201 	bic.w	r2, r3, #1
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8106b98:	2300      	movs	r3, #0
}
 8106b9a:	4618      	mov	r0, r3
 8106b9c:	370c      	adds	r7, #12
 8106b9e:	46bd      	mov	sp, r7
 8106ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ba4:	4770      	bx	lr

08106ba6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8106ba6:	b580      	push	{r7, lr}
 8106ba8:	b084      	sub	sp, #16
 8106baa:	af00      	add	r7, sp, #0
 8106bac:	6078      	str	r0, [r7, #4]
 8106bae:	460b      	mov	r3, r1
 8106bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8106bb2:	2300      	movs	r3, #0
 8106bb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8106bb6:	687b      	ldr	r3, [r7, #4]
 8106bb8:	68db      	ldr	r3, [r3, #12]
 8106bba:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8106bbe:	687b      	ldr	r3, [r7, #4]
 8106bc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8106bc2:	78fb      	ldrb	r3, [r7, #3]
 8106bc4:	2b01      	cmp	r3, #1
 8106bc6:	d115      	bne.n	8106bf4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	68db      	ldr	r3, [r3, #12]
 8106bcc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8106bd0:	687b      	ldr	r3, [r7, #4]
 8106bd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8106bd4:	200a      	movs	r0, #10
 8106bd6:	f7fa ff67 	bl	8101aa8 <HAL_Delay>
      ms += 10U;
 8106bda:	68fb      	ldr	r3, [r7, #12]
 8106bdc:	330a      	adds	r3, #10
 8106bde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8106be0:	6878      	ldr	r0, [r7, #4]
 8106be2:	f000 fa25 	bl	8107030 <USB_GetMode>
 8106be6:	4603      	mov	r3, r0
 8106be8:	2b01      	cmp	r3, #1
 8106bea:	d01e      	beq.n	8106c2a <USB_SetCurrentMode+0x84>
 8106bec:	68fb      	ldr	r3, [r7, #12]
 8106bee:	2bc7      	cmp	r3, #199	@ 0xc7
 8106bf0:	d9f0      	bls.n	8106bd4 <USB_SetCurrentMode+0x2e>
 8106bf2:	e01a      	b.n	8106c2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8106bf4:	78fb      	ldrb	r3, [r7, #3]
 8106bf6:	2b00      	cmp	r3, #0
 8106bf8:	d115      	bne.n	8106c26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8106bfa:	687b      	ldr	r3, [r7, #4]
 8106bfc:	68db      	ldr	r3, [r3, #12]
 8106bfe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8106c06:	200a      	movs	r0, #10
 8106c08:	f7fa ff4e 	bl	8101aa8 <HAL_Delay>
      ms += 10U;
 8106c0c:	68fb      	ldr	r3, [r7, #12]
 8106c0e:	330a      	adds	r3, #10
 8106c10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8106c12:	6878      	ldr	r0, [r7, #4]
 8106c14:	f000 fa0c 	bl	8107030 <USB_GetMode>
 8106c18:	4603      	mov	r3, r0
 8106c1a:	2b00      	cmp	r3, #0
 8106c1c:	d005      	beq.n	8106c2a <USB_SetCurrentMode+0x84>
 8106c1e:	68fb      	ldr	r3, [r7, #12]
 8106c20:	2bc7      	cmp	r3, #199	@ 0xc7
 8106c22:	d9f0      	bls.n	8106c06 <USB_SetCurrentMode+0x60>
 8106c24:	e001      	b.n	8106c2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8106c26:	2301      	movs	r3, #1
 8106c28:	e005      	b.n	8106c36 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8106c2a:	68fb      	ldr	r3, [r7, #12]
 8106c2c:	2bc8      	cmp	r3, #200	@ 0xc8
 8106c2e:	d101      	bne.n	8106c34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8106c30:	2301      	movs	r3, #1
 8106c32:	e000      	b.n	8106c36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8106c34:	2300      	movs	r3, #0
}
 8106c36:	4618      	mov	r0, r3
 8106c38:	3710      	adds	r7, #16
 8106c3a:	46bd      	mov	sp, r7
 8106c3c:	bd80      	pop	{r7, pc}
	...

08106c40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8106c40:	b084      	sub	sp, #16
 8106c42:	b580      	push	{r7, lr}
 8106c44:	b086      	sub	sp, #24
 8106c46:	af00      	add	r7, sp, #0
 8106c48:	6078      	str	r0, [r7, #4]
 8106c4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8106c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8106c52:	2300      	movs	r3, #0
 8106c54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8106c5a:	2300      	movs	r3, #0
 8106c5c:	613b      	str	r3, [r7, #16]
 8106c5e:	e009      	b.n	8106c74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8106c60:	687a      	ldr	r2, [r7, #4]
 8106c62:	693b      	ldr	r3, [r7, #16]
 8106c64:	3340      	adds	r3, #64	@ 0x40
 8106c66:	009b      	lsls	r3, r3, #2
 8106c68:	4413      	add	r3, r2
 8106c6a:	2200      	movs	r2, #0
 8106c6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8106c6e:	693b      	ldr	r3, [r7, #16]
 8106c70:	3301      	adds	r3, #1
 8106c72:	613b      	str	r3, [r7, #16]
 8106c74:	693b      	ldr	r3, [r7, #16]
 8106c76:	2b0e      	cmp	r3, #14
 8106c78:	d9f2      	bls.n	8106c60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8106c7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8106c7e:	2b00      	cmp	r3, #0
 8106c80:	d11c      	bne.n	8106cbc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8106c82:	68fb      	ldr	r3, [r7, #12]
 8106c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8106c88:	685b      	ldr	r3, [r3, #4]
 8106c8a:	68fa      	ldr	r2, [r7, #12]
 8106c8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8106c90:	f043 0302 	orr.w	r3, r3, #2
 8106c94:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106c9a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8106c9e:	687b      	ldr	r3, [r7, #4]
 8106ca0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8106ca2:	687b      	ldr	r3, [r7, #4]
 8106ca4:	681b      	ldr	r3, [r3, #0]
 8106ca6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8106cae:	687b      	ldr	r3, [r7, #4]
 8106cb0:	681b      	ldr	r3, [r3, #0]
 8106cb2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	601a      	str	r2, [r3, #0]
 8106cba:	e005      	b.n	8106cc8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106cc0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8106cc8:	68fb      	ldr	r3, [r7, #12]
 8106cca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8106cce:	461a      	mov	r2, r3
 8106cd0:	2300      	movs	r3, #0
 8106cd2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8106cd4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8106cd8:	2b01      	cmp	r3, #1
 8106cda:	d10d      	bne.n	8106cf8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8106cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8106ce0:	2b00      	cmp	r3, #0
 8106ce2:	d104      	bne.n	8106cee <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8106ce4:	2100      	movs	r1, #0
 8106ce6:	6878      	ldr	r0, [r7, #4]
 8106ce8:	f000 f968 	bl	8106fbc <USB_SetDevSpeed>
 8106cec:	e008      	b.n	8106d00 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8106cee:	2101      	movs	r1, #1
 8106cf0:	6878      	ldr	r0, [r7, #4]
 8106cf2:	f000 f963 	bl	8106fbc <USB_SetDevSpeed>
 8106cf6:	e003      	b.n	8106d00 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8106cf8:	2103      	movs	r1, #3
 8106cfa:	6878      	ldr	r0, [r7, #4]
 8106cfc:	f000 f95e 	bl	8106fbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8106d00:	2110      	movs	r1, #16
 8106d02:	6878      	ldr	r0, [r7, #4]
 8106d04:	f000 f8fa 	bl	8106efc <USB_FlushTxFifo>
 8106d08:	4603      	mov	r3, r0
 8106d0a:	2b00      	cmp	r3, #0
 8106d0c:	d001      	beq.n	8106d12 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8106d0e:	2301      	movs	r3, #1
 8106d10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8106d12:	6878      	ldr	r0, [r7, #4]
 8106d14:	f000 f924 	bl	8106f60 <USB_FlushRxFifo>
 8106d18:	4603      	mov	r3, r0
 8106d1a:	2b00      	cmp	r3, #0
 8106d1c:	d001      	beq.n	8106d22 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8106d1e:	2301      	movs	r3, #1
 8106d20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8106d22:	68fb      	ldr	r3, [r7, #12]
 8106d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8106d28:	461a      	mov	r2, r3
 8106d2a:	2300      	movs	r3, #0
 8106d2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8106d2e:	68fb      	ldr	r3, [r7, #12]
 8106d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8106d34:	461a      	mov	r2, r3
 8106d36:	2300      	movs	r3, #0
 8106d38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8106d3a:	68fb      	ldr	r3, [r7, #12]
 8106d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8106d40:	461a      	mov	r2, r3
 8106d42:	2300      	movs	r3, #0
 8106d44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8106d46:	2300      	movs	r3, #0
 8106d48:	613b      	str	r3, [r7, #16]
 8106d4a:	e043      	b.n	8106dd4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8106d4c:	693b      	ldr	r3, [r7, #16]
 8106d4e:	015a      	lsls	r2, r3, #5
 8106d50:	68fb      	ldr	r3, [r7, #12]
 8106d52:	4413      	add	r3, r2
 8106d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8106d58:	681b      	ldr	r3, [r3, #0]
 8106d5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8106d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8106d62:	d118      	bne.n	8106d96 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8106d64:	693b      	ldr	r3, [r7, #16]
 8106d66:	2b00      	cmp	r3, #0
 8106d68:	d10a      	bne.n	8106d80 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8106d6a:	693b      	ldr	r3, [r7, #16]
 8106d6c:	015a      	lsls	r2, r3, #5
 8106d6e:	68fb      	ldr	r3, [r7, #12]
 8106d70:	4413      	add	r3, r2
 8106d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8106d76:	461a      	mov	r2, r3
 8106d78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8106d7c:	6013      	str	r3, [r2, #0]
 8106d7e:	e013      	b.n	8106da8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8106d80:	693b      	ldr	r3, [r7, #16]
 8106d82:	015a      	lsls	r2, r3, #5
 8106d84:	68fb      	ldr	r3, [r7, #12]
 8106d86:	4413      	add	r3, r2
 8106d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8106d8c:	461a      	mov	r2, r3
 8106d8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8106d92:	6013      	str	r3, [r2, #0]
 8106d94:	e008      	b.n	8106da8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8106d96:	693b      	ldr	r3, [r7, #16]
 8106d98:	015a      	lsls	r2, r3, #5
 8106d9a:	68fb      	ldr	r3, [r7, #12]
 8106d9c:	4413      	add	r3, r2
 8106d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8106da2:	461a      	mov	r2, r3
 8106da4:	2300      	movs	r3, #0
 8106da6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8106da8:	693b      	ldr	r3, [r7, #16]
 8106daa:	015a      	lsls	r2, r3, #5
 8106dac:	68fb      	ldr	r3, [r7, #12]
 8106dae:	4413      	add	r3, r2
 8106db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8106db4:	461a      	mov	r2, r3
 8106db6:	2300      	movs	r3, #0
 8106db8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8106dba:	693b      	ldr	r3, [r7, #16]
 8106dbc:	015a      	lsls	r2, r3, #5
 8106dbe:	68fb      	ldr	r3, [r7, #12]
 8106dc0:	4413      	add	r3, r2
 8106dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8106dc6:	461a      	mov	r2, r3
 8106dc8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8106dcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8106dce:	693b      	ldr	r3, [r7, #16]
 8106dd0:	3301      	adds	r3, #1
 8106dd2:	613b      	str	r3, [r7, #16]
 8106dd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8106dd8:	461a      	mov	r2, r3
 8106dda:	693b      	ldr	r3, [r7, #16]
 8106ddc:	4293      	cmp	r3, r2
 8106dde:	d3b5      	bcc.n	8106d4c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8106de0:	2300      	movs	r3, #0
 8106de2:	613b      	str	r3, [r7, #16]
 8106de4:	e043      	b.n	8106e6e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8106de6:	693b      	ldr	r3, [r7, #16]
 8106de8:	015a      	lsls	r2, r3, #5
 8106dea:	68fb      	ldr	r3, [r7, #12]
 8106dec:	4413      	add	r3, r2
 8106dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8106df2:	681b      	ldr	r3, [r3, #0]
 8106df4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8106df8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8106dfc:	d118      	bne.n	8106e30 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8106dfe:	693b      	ldr	r3, [r7, #16]
 8106e00:	2b00      	cmp	r3, #0
 8106e02:	d10a      	bne.n	8106e1a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8106e04:	693b      	ldr	r3, [r7, #16]
 8106e06:	015a      	lsls	r2, r3, #5
 8106e08:	68fb      	ldr	r3, [r7, #12]
 8106e0a:	4413      	add	r3, r2
 8106e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8106e10:	461a      	mov	r2, r3
 8106e12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8106e16:	6013      	str	r3, [r2, #0]
 8106e18:	e013      	b.n	8106e42 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8106e1a:	693b      	ldr	r3, [r7, #16]
 8106e1c:	015a      	lsls	r2, r3, #5
 8106e1e:	68fb      	ldr	r3, [r7, #12]
 8106e20:	4413      	add	r3, r2
 8106e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8106e26:	461a      	mov	r2, r3
 8106e28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8106e2c:	6013      	str	r3, [r2, #0]
 8106e2e:	e008      	b.n	8106e42 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8106e30:	693b      	ldr	r3, [r7, #16]
 8106e32:	015a      	lsls	r2, r3, #5
 8106e34:	68fb      	ldr	r3, [r7, #12]
 8106e36:	4413      	add	r3, r2
 8106e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8106e3c:	461a      	mov	r2, r3
 8106e3e:	2300      	movs	r3, #0
 8106e40:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8106e42:	693b      	ldr	r3, [r7, #16]
 8106e44:	015a      	lsls	r2, r3, #5
 8106e46:	68fb      	ldr	r3, [r7, #12]
 8106e48:	4413      	add	r3, r2
 8106e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8106e4e:	461a      	mov	r2, r3
 8106e50:	2300      	movs	r3, #0
 8106e52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8106e54:	693b      	ldr	r3, [r7, #16]
 8106e56:	015a      	lsls	r2, r3, #5
 8106e58:	68fb      	ldr	r3, [r7, #12]
 8106e5a:	4413      	add	r3, r2
 8106e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8106e60:	461a      	mov	r2, r3
 8106e62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8106e66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8106e68:	693b      	ldr	r3, [r7, #16]
 8106e6a:	3301      	adds	r3, #1
 8106e6c:	613b      	str	r3, [r7, #16]
 8106e6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8106e72:	461a      	mov	r2, r3
 8106e74:	693b      	ldr	r3, [r7, #16]
 8106e76:	4293      	cmp	r3, r2
 8106e78:	d3b5      	bcc.n	8106de6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8106e7a:	68fb      	ldr	r3, [r7, #12]
 8106e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8106e80:	691b      	ldr	r3, [r3, #16]
 8106e82:	68fa      	ldr	r2, [r7, #12]
 8106e84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8106e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8106e8c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8106e8e:	687b      	ldr	r3, [r7, #4]
 8106e90:	2200      	movs	r2, #0
 8106e92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8106e94:	687b      	ldr	r3, [r7, #4]
 8106e96:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8106e9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8106e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8106ea0:	2b00      	cmp	r3, #0
 8106ea2:	d105      	bne.n	8106eb0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8106ea4:	687b      	ldr	r3, [r7, #4]
 8106ea6:	699b      	ldr	r3, [r3, #24]
 8106ea8:	f043 0210 	orr.w	r2, r3, #16
 8106eac:	687b      	ldr	r3, [r7, #4]
 8106eae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8106eb0:	687b      	ldr	r3, [r7, #4]
 8106eb2:	699a      	ldr	r2, [r3, #24]
 8106eb4:	4b10      	ldr	r3, [pc, #64]	@ (8106ef8 <USB_DevInit+0x2b8>)
 8106eb6:	4313      	orrs	r3, r2
 8106eb8:	687a      	ldr	r2, [r7, #4]
 8106eba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8106ebc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8106ec0:	2b00      	cmp	r3, #0
 8106ec2:	d005      	beq.n	8106ed0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8106ec4:	687b      	ldr	r3, [r7, #4]
 8106ec6:	699b      	ldr	r3, [r3, #24]
 8106ec8:	f043 0208 	orr.w	r2, r3, #8
 8106ecc:	687b      	ldr	r3, [r7, #4]
 8106ece:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8106ed0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8106ed4:	2b01      	cmp	r3, #1
 8106ed6:	d107      	bne.n	8106ee8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8106ed8:	687b      	ldr	r3, [r7, #4]
 8106eda:	699b      	ldr	r3, [r3, #24]
 8106edc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8106ee0:	f043 0304 	orr.w	r3, r3, #4
 8106ee4:	687a      	ldr	r2, [r7, #4]
 8106ee6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8106ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8106eea:	4618      	mov	r0, r3
 8106eec:	3718      	adds	r7, #24
 8106eee:	46bd      	mov	sp, r7
 8106ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8106ef4:	b004      	add	sp, #16
 8106ef6:	4770      	bx	lr
 8106ef8:	803c3800 	.word	0x803c3800

08106efc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8106efc:	b480      	push	{r7}
 8106efe:	b085      	sub	sp, #20
 8106f00:	af00      	add	r7, sp, #0
 8106f02:	6078      	str	r0, [r7, #4]
 8106f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8106f06:	2300      	movs	r3, #0
 8106f08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8106f0a:	68fb      	ldr	r3, [r7, #12]
 8106f0c:	3301      	adds	r3, #1
 8106f0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8106f10:	68fb      	ldr	r3, [r7, #12]
 8106f12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8106f16:	d901      	bls.n	8106f1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8106f18:	2303      	movs	r3, #3
 8106f1a:	e01b      	b.n	8106f54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8106f1c:	687b      	ldr	r3, [r7, #4]
 8106f1e:	691b      	ldr	r3, [r3, #16]
 8106f20:	2b00      	cmp	r3, #0
 8106f22:	daf2      	bge.n	8106f0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8106f24:	2300      	movs	r3, #0
 8106f26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8106f28:	683b      	ldr	r3, [r7, #0]
 8106f2a:	019b      	lsls	r3, r3, #6
 8106f2c:	f043 0220 	orr.w	r2, r3, #32
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8106f34:	68fb      	ldr	r3, [r7, #12]
 8106f36:	3301      	adds	r3, #1
 8106f38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8106f3a:	68fb      	ldr	r3, [r7, #12]
 8106f3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8106f40:	d901      	bls.n	8106f46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8106f42:	2303      	movs	r3, #3
 8106f44:	e006      	b.n	8106f54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8106f46:	687b      	ldr	r3, [r7, #4]
 8106f48:	691b      	ldr	r3, [r3, #16]
 8106f4a:	f003 0320 	and.w	r3, r3, #32
 8106f4e:	2b20      	cmp	r3, #32
 8106f50:	d0f0      	beq.n	8106f34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8106f52:	2300      	movs	r3, #0
}
 8106f54:	4618      	mov	r0, r3
 8106f56:	3714      	adds	r7, #20
 8106f58:	46bd      	mov	sp, r7
 8106f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f5e:	4770      	bx	lr

08106f60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8106f60:	b480      	push	{r7}
 8106f62:	b085      	sub	sp, #20
 8106f64:	af00      	add	r7, sp, #0
 8106f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8106f68:	2300      	movs	r3, #0
 8106f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8106f6c:	68fb      	ldr	r3, [r7, #12]
 8106f6e:	3301      	adds	r3, #1
 8106f70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8106f72:	68fb      	ldr	r3, [r7, #12]
 8106f74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8106f78:	d901      	bls.n	8106f7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8106f7a:	2303      	movs	r3, #3
 8106f7c:	e018      	b.n	8106fb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	691b      	ldr	r3, [r3, #16]
 8106f82:	2b00      	cmp	r3, #0
 8106f84:	daf2      	bge.n	8106f6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8106f86:	2300      	movs	r3, #0
 8106f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	2210      	movs	r2, #16
 8106f8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8106f90:	68fb      	ldr	r3, [r7, #12]
 8106f92:	3301      	adds	r3, #1
 8106f94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8106f96:	68fb      	ldr	r3, [r7, #12]
 8106f98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8106f9c:	d901      	bls.n	8106fa2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8106f9e:	2303      	movs	r3, #3
 8106fa0:	e006      	b.n	8106fb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8106fa2:	687b      	ldr	r3, [r7, #4]
 8106fa4:	691b      	ldr	r3, [r3, #16]
 8106fa6:	f003 0310 	and.w	r3, r3, #16
 8106faa:	2b10      	cmp	r3, #16
 8106fac:	d0f0      	beq.n	8106f90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8106fae:	2300      	movs	r3, #0
}
 8106fb0:	4618      	mov	r0, r3
 8106fb2:	3714      	adds	r7, #20
 8106fb4:	46bd      	mov	sp, r7
 8106fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fba:	4770      	bx	lr

08106fbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8106fbc:	b480      	push	{r7}
 8106fbe:	b085      	sub	sp, #20
 8106fc0:	af00      	add	r7, sp, #0
 8106fc2:	6078      	str	r0, [r7, #4]
 8106fc4:	460b      	mov	r3, r1
 8106fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8106fc8:	687b      	ldr	r3, [r7, #4]
 8106fca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8106fcc:	68fb      	ldr	r3, [r7, #12]
 8106fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8106fd2:	681a      	ldr	r2, [r3, #0]
 8106fd4:	78fb      	ldrb	r3, [r7, #3]
 8106fd6:	68f9      	ldr	r1, [r7, #12]
 8106fd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8106fdc:	4313      	orrs	r3, r2
 8106fde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8106fe0:	2300      	movs	r3, #0
}
 8106fe2:	4618      	mov	r0, r3
 8106fe4:	3714      	adds	r7, #20
 8106fe6:	46bd      	mov	sp, r7
 8106fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fec:	4770      	bx	lr

08106fee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8106fee:	b480      	push	{r7}
 8106ff0:	b085      	sub	sp, #20
 8106ff2:	af00      	add	r7, sp, #0
 8106ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8106ffa:	68fb      	ldr	r3, [r7, #12]
 8106ffc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8107000:	681b      	ldr	r3, [r3, #0]
 8107002:	68fa      	ldr	r2, [r7, #12]
 8107004:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8107008:	f023 0303 	bic.w	r3, r3, #3
 810700c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810700e:	68fb      	ldr	r3, [r7, #12]
 8107010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107014:	685b      	ldr	r3, [r3, #4]
 8107016:	68fa      	ldr	r2, [r7, #12]
 8107018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810701c:	f043 0302 	orr.w	r3, r3, #2
 8107020:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8107022:	2300      	movs	r3, #0
}
 8107024:	4618      	mov	r0, r3
 8107026:	3714      	adds	r7, #20
 8107028:	46bd      	mov	sp, r7
 810702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810702e:	4770      	bx	lr

08107030 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8107030:	b480      	push	{r7}
 8107032:	b083      	sub	sp, #12
 8107034:	af00      	add	r7, sp, #0
 8107036:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8107038:	687b      	ldr	r3, [r7, #4]
 810703a:	695b      	ldr	r3, [r3, #20]
 810703c:	f003 0301 	and.w	r3, r3, #1
}
 8107040:	4618      	mov	r0, r3
 8107042:	370c      	adds	r7, #12
 8107044:	46bd      	mov	sp, r7
 8107046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810704a:	4770      	bx	lr

0810704c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810704c:	b480      	push	{r7}
 810704e:	b085      	sub	sp, #20
 8107050:	af00      	add	r7, sp, #0
 8107052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8107054:	2300      	movs	r3, #0
 8107056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8107058:	68fb      	ldr	r3, [r7, #12]
 810705a:	3301      	adds	r3, #1
 810705c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810705e:	68fb      	ldr	r3, [r7, #12]
 8107060:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107064:	d901      	bls.n	810706a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8107066:	2303      	movs	r3, #3
 8107068:	e01b      	b.n	81070a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810706a:	687b      	ldr	r3, [r7, #4]
 810706c:	691b      	ldr	r3, [r3, #16]
 810706e:	2b00      	cmp	r3, #0
 8107070:	daf2      	bge.n	8107058 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8107072:	2300      	movs	r3, #0
 8107074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	691b      	ldr	r3, [r3, #16]
 810707a:	f043 0201 	orr.w	r2, r3, #1
 810707e:	687b      	ldr	r3, [r7, #4]
 8107080:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8107082:	68fb      	ldr	r3, [r7, #12]
 8107084:	3301      	adds	r3, #1
 8107086:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107088:	68fb      	ldr	r3, [r7, #12]
 810708a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810708e:	d901      	bls.n	8107094 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8107090:	2303      	movs	r3, #3
 8107092:	e006      	b.n	81070a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8107094:	687b      	ldr	r3, [r7, #4]
 8107096:	691b      	ldr	r3, [r3, #16]
 8107098:	f003 0301 	and.w	r3, r3, #1
 810709c:	2b01      	cmp	r3, #1
 810709e:	d0f0      	beq.n	8107082 <USB_CoreReset+0x36>

  return HAL_OK;
 81070a0:	2300      	movs	r3, #0
}
 81070a2:	4618      	mov	r0, r3
 81070a4:	3714      	adds	r7, #20
 81070a6:	46bd      	mov	sp, r7
 81070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070ac:	4770      	bx	lr
	...

081070b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81070b0:	b580      	push	{r7, lr}
 81070b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81070b4:	4b05      	ldr	r3, [pc, #20]	@ (81070cc <SysTick_Handler+0x1c>)
 81070b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81070b8:	f000 fa00 	bl	81074bc <xTaskGetSchedulerState>
 81070bc:	4603      	mov	r3, r0
 81070be:	2b01      	cmp	r3, #1
 81070c0:	d001      	beq.n	81070c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 81070c2:	f000 f8a1 	bl	8107208 <xPortSysTickHandler>
  }
}
 81070c6:	bf00      	nop
 81070c8:	bd80      	pop	{r7, pc}
 81070ca:	bf00      	nop
 81070cc:	e000e010 	.word	0xe000e010

081070d0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81070d0:	b480      	push	{r7}
 81070d2:	b085      	sub	sp, #20
 81070d4:	af00      	add	r7, sp, #0
 81070d6:	6078      	str	r0, [r7, #4]
 81070d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	685b      	ldr	r3, [r3, #4]
 81070de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81070e0:	683b      	ldr	r3, [r7, #0]
 81070e2:	68fa      	ldr	r2, [r7, #12]
 81070e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81070e6:	68fb      	ldr	r3, [r7, #12]
 81070e8:	689a      	ldr	r2, [r3, #8]
 81070ea:	683b      	ldr	r3, [r7, #0]
 81070ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81070ee:	68fb      	ldr	r3, [r7, #12]
 81070f0:	689b      	ldr	r3, [r3, #8]
 81070f2:	683a      	ldr	r2, [r7, #0]
 81070f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81070f6:	68fb      	ldr	r3, [r7, #12]
 81070f8:	683a      	ldr	r2, [r7, #0]
 81070fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81070fc:	683b      	ldr	r3, [r7, #0]
 81070fe:	687a      	ldr	r2, [r7, #4]
 8107100:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8107102:	687b      	ldr	r3, [r7, #4]
 8107104:	681b      	ldr	r3, [r3, #0]
 8107106:	1c5a      	adds	r2, r3, #1
 8107108:	687b      	ldr	r3, [r7, #4]
 810710a:	601a      	str	r2, [r3, #0]
}
 810710c:	bf00      	nop
 810710e:	3714      	adds	r7, #20
 8107110:	46bd      	mov	sp, r7
 8107112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107116:	4770      	bx	lr

08107118 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8107118:	b480      	push	{r7}
 810711a:	b085      	sub	sp, #20
 810711c:	af00      	add	r7, sp, #0
 810711e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	691b      	ldr	r3, [r3, #16]
 8107124:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8107126:	687b      	ldr	r3, [r7, #4]
 8107128:	685b      	ldr	r3, [r3, #4]
 810712a:	687a      	ldr	r2, [r7, #4]
 810712c:	6892      	ldr	r2, [r2, #8]
 810712e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8107130:	687b      	ldr	r3, [r7, #4]
 8107132:	689b      	ldr	r3, [r3, #8]
 8107134:	687a      	ldr	r2, [r7, #4]
 8107136:	6852      	ldr	r2, [r2, #4]
 8107138:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810713a:	68fb      	ldr	r3, [r7, #12]
 810713c:	685b      	ldr	r3, [r3, #4]
 810713e:	687a      	ldr	r2, [r7, #4]
 8107140:	429a      	cmp	r2, r3
 8107142:	d103      	bne.n	810714c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	689a      	ldr	r2, [r3, #8]
 8107148:	68fb      	ldr	r3, [r7, #12]
 810714a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810714c:	687b      	ldr	r3, [r7, #4]
 810714e:	2200      	movs	r2, #0
 8107150:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8107152:	68fb      	ldr	r3, [r7, #12]
 8107154:	681b      	ldr	r3, [r3, #0]
 8107156:	1e5a      	subs	r2, r3, #1
 8107158:	68fb      	ldr	r3, [r7, #12]
 810715a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810715c:	68fb      	ldr	r3, [r7, #12]
 810715e:	681b      	ldr	r3, [r3, #0]
}
 8107160:	4618      	mov	r0, r3
 8107162:	3714      	adds	r7, #20
 8107164:	46bd      	mov	sp, r7
 8107166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810716a:	4770      	bx	lr
 810716c:	0000      	movs	r0, r0
	...

08107170 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8107170:	4b07      	ldr	r3, [pc, #28]	@ (8107190 <pxCurrentTCBConst2>)
 8107172:	6819      	ldr	r1, [r3, #0]
 8107174:	6808      	ldr	r0, [r1, #0]
 8107176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810717a:	f380 8809 	msr	PSP, r0
 810717e:	f3bf 8f6f 	isb	sy
 8107182:	f04f 0000 	mov.w	r0, #0
 8107186:	f380 8811 	msr	BASEPRI, r0
 810718a:	4770      	bx	lr
 810718c:	f3af 8000 	nop.w

08107190 <pxCurrentTCBConst2>:
 8107190:	10000858 	.word	0x10000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8107194:	bf00      	nop
 8107196:	bf00      	nop
	...

081071a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81071a0:	f3ef 8009 	mrs	r0, PSP
 81071a4:	f3bf 8f6f 	isb	sy
 81071a8:	4b15      	ldr	r3, [pc, #84]	@ (8107200 <pxCurrentTCBConst>)
 81071aa:	681a      	ldr	r2, [r3, #0]
 81071ac:	f01e 0f10 	tst.w	lr, #16
 81071b0:	bf08      	it	eq
 81071b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81071b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81071ba:	6010      	str	r0, [r2, #0]
 81071bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 81071c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81071c4:	f380 8811 	msr	BASEPRI, r0
 81071c8:	f3bf 8f4f 	dsb	sy
 81071cc:	f3bf 8f6f 	isb	sy
 81071d0:	f000 f8f6 	bl	81073c0 <vTaskSwitchContext>
 81071d4:	f04f 0000 	mov.w	r0, #0
 81071d8:	f380 8811 	msr	BASEPRI, r0
 81071dc:	bc09      	pop	{r0, r3}
 81071de:	6819      	ldr	r1, [r3, #0]
 81071e0:	6808      	ldr	r0, [r1, #0]
 81071e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81071e6:	f01e 0f10 	tst.w	lr, #16
 81071ea:	bf08      	it	eq
 81071ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81071f0:	f380 8809 	msr	PSP, r0
 81071f4:	f3bf 8f6f 	isb	sy
 81071f8:	4770      	bx	lr
 81071fa:	bf00      	nop
 81071fc:	f3af 8000 	nop.w

08107200 <pxCurrentTCBConst>:
 8107200:	10000858 	.word	0x10000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8107204:	bf00      	nop
 8107206:	bf00      	nop

08107208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8107208:	b580      	push	{r7, lr}
 810720a:	b082      	sub	sp, #8
 810720c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107212:	f383 8811 	msr	BASEPRI, r3
 8107216:	f3bf 8f6f 	isb	sy
 810721a:	f3bf 8f4f 	dsb	sy
 810721e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8107220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8107222:	f000 f813 	bl	810724c <xTaskIncrementTick>
 8107226:	4603      	mov	r3, r0
 8107228:	2b00      	cmp	r3, #0
 810722a:	d003      	beq.n	8107234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810722c:	4b06      	ldr	r3, [pc, #24]	@ (8107248 <xPortSysTickHandler+0x40>)
 810722e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107232:	601a      	str	r2, [r3, #0]
 8107234:	2300      	movs	r3, #0
 8107236:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8107238:	683b      	ldr	r3, [r7, #0]
 810723a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810723e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8107240:	bf00      	nop
 8107242:	3708      	adds	r7, #8
 8107244:	46bd      	mov	sp, r7
 8107246:	bd80      	pop	{r7, pc}
 8107248:	e000ed04 	.word	0xe000ed04

0810724c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810724c:	b580      	push	{r7, lr}
 810724e:	b086      	sub	sp, #24
 8107250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8107252:	2300      	movs	r3, #0
 8107254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107256:	4b4f      	ldr	r3, [pc, #316]	@ (8107394 <xTaskIncrementTick+0x148>)
 8107258:	681b      	ldr	r3, [r3, #0]
 810725a:	2b00      	cmp	r3, #0
 810725c:	f040 8090 	bne.w	8107380 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8107260:	4b4d      	ldr	r3, [pc, #308]	@ (8107398 <xTaskIncrementTick+0x14c>)
 8107262:	681b      	ldr	r3, [r3, #0]
 8107264:	3301      	adds	r3, #1
 8107266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8107268:	4a4b      	ldr	r2, [pc, #300]	@ (8107398 <xTaskIncrementTick+0x14c>)
 810726a:	693b      	ldr	r3, [r7, #16]
 810726c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810726e:	693b      	ldr	r3, [r7, #16]
 8107270:	2b00      	cmp	r3, #0
 8107272:	d121      	bne.n	81072b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8107274:	4b49      	ldr	r3, [pc, #292]	@ (810739c <xTaskIncrementTick+0x150>)
 8107276:	681b      	ldr	r3, [r3, #0]
 8107278:	681b      	ldr	r3, [r3, #0]
 810727a:	2b00      	cmp	r3, #0
 810727c:	d00b      	beq.n	8107296 <xTaskIncrementTick+0x4a>
	__asm volatile
 810727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107282:	f383 8811 	msr	BASEPRI, r3
 8107286:	f3bf 8f6f 	isb	sy
 810728a:	f3bf 8f4f 	dsb	sy
 810728e:	603b      	str	r3, [r7, #0]
}
 8107290:	bf00      	nop
 8107292:	bf00      	nop
 8107294:	e7fd      	b.n	8107292 <xTaskIncrementTick+0x46>
 8107296:	4b41      	ldr	r3, [pc, #260]	@ (810739c <xTaskIncrementTick+0x150>)
 8107298:	681b      	ldr	r3, [r3, #0]
 810729a:	60fb      	str	r3, [r7, #12]
 810729c:	4b40      	ldr	r3, [pc, #256]	@ (81073a0 <xTaskIncrementTick+0x154>)
 810729e:	681b      	ldr	r3, [r3, #0]
 81072a0:	4a3e      	ldr	r2, [pc, #248]	@ (810739c <xTaskIncrementTick+0x150>)
 81072a2:	6013      	str	r3, [r2, #0]
 81072a4:	4a3e      	ldr	r2, [pc, #248]	@ (81073a0 <xTaskIncrementTick+0x154>)
 81072a6:	68fb      	ldr	r3, [r7, #12]
 81072a8:	6013      	str	r3, [r2, #0]
 81072aa:	4b3e      	ldr	r3, [pc, #248]	@ (81073a4 <xTaskIncrementTick+0x158>)
 81072ac:	681b      	ldr	r3, [r3, #0]
 81072ae:	3301      	adds	r3, #1
 81072b0:	4a3c      	ldr	r2, [pc, #240]	@ (81073a4 <xTaskIncrementTick+0x158>)
 81072b2:	6013      	str	r3, [r2, #0]
 81072b4:	f000 f8e2 	bl	810747c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81072b8:	4b3b      	ldr	r3, [pc, #236]	@ (81073a8 <xTaskIncrementTick+0x15c>)
 81072ba:	681b      	ldr	r3, [r3, #0]
 81072bc:	693a      	ldr	r2, [r7, #16]
 81072be:	429a      	cmp	r2, r3
 81072c0:	d349      	bcc.n	8107356 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81072c2:	4b36      	ldr	r3, [pc, #216]	@ (810739c <xTaskIncrementTick+0x150>)
 81072c4:	681b      	ldr	r3, [r3, #0]
 81072c6:	681b      	ldr	r3, [r3, #0]
 81072c8:	2b00      	cmp	r3, #0
 81072ca:	d104      	bne.n	81072d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81072cc:	4b36      	ldr	r3, [pc, #216]	@ (81073a8 <xTaskIncrementTick+0x15c>)
 81072ce:	f04f 32ff 	mov.w	r2, #4294967295
 81072d2:	601a      	str	r2, [r3, #0]
					break;
 81072d4:	e03f      	b.n	8107356 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81072d6:	4b31      	ldr	r3, [pc, #196]	@ (810739c <xTaskIncrementTick+0x150>)
 81072d8:	681b      	ldr	r3, [r3, #0]
 81072da:	68db      	ldr	r3, [r3, #12]
 81072dc:	68db      	ldr	r3, [r3, #12]
 81072de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 81072e0:	68bb      	ldr	r3, [r7, #8]
 81072e2:	685b      	ldr	r3, [r3, #4]
 81072e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 81072e6:	693a      	ldr	r2, [r7, #16]
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	429a      	cmp	r2, r3
 81072ec:	d203      	bcs.n	81072f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 81072ee:	4a2e      	ldr	r2, [pc, #184]	@ (81073a8 <xTaskIncrementTick+0x15c>)
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 81072f4:	e02f      	b.n	8107356 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81072f6:	68bb      	ldr	r3, [r7, #8]
 81072f8:	3304      	adds	r3, #4
 81072fa:	4618      	mov	r0, r3
 81072fc:	f7ff ff0c 	bl	8107118 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8107300:	68bb      	ldr	r3, [r7, #8]
 8107302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107304:	2b00      	cmp	r3, #0
 8107306:	d004      	beq.n	8107312 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107308:	68bb      	ldr	r3, [r7, #8]
 810730a:	3318      	adds	r3, #24
 810730c:	4618      	mov	r0, r3
 810730e:	f7ff ff03 	bl	8107118 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8107312:	68bb      	ldr	r3, [r7, #8]
 8107314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107316:	4b25      	ldr	r3, [pc, #148]	@ (81073ac <xTaskIncrementTick+0x160>)
 8107318:	681b      	ldr	r3, [r3, #0]
 810731a:	429a      	cmp	r2, r3
 810731c:	d903      	bls.n	8107326 <xTaskIncrementTick+0xda>
 810731e:	68bb      	ldr	r3, [r7, #8]
 8107320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107322:	4a22      	ldr	r2, [pc, #136]	@ (81073ac <xTaskIncrementTick+0x160>)
 8107324:	6013      	str	r3, [r2, #0]
 8107326:	68bb      	ldr	r3, [r7, #8]
 8107328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810732a:	4613      	mov	r3, r2
 810732c:	009b      	lsls	r3, r3, #2
 810732e:	4413      	add	r3, r2
 8107330:	009b      	lsls	r3, r3, #2
 8107332:	4a1f      	ldr	r2, [pc, #124]	@ (81073b0 <xTaskIncrementTick+0x164>)
 8107334:	441a      	add	r2, r3
 8107336:	68bb      	ldr	r3, [r7, #8]
 8107338:	3304      	adds	r3, #4
 810733a:	4619      	mov	r1, r3
 810733c:	4610      	mov	r0, r2
 810733e:	f7ff fec7 	bl	81070d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8107342:	68bb      	ldr	r3, [r7, #8]
 8107344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107346:	4b1b      	ldr	r3, [pc, #108]	@ (81073b4 <xTaskIncrementTick+0x168>)
 8107348:	681b      	ldr	r3, [r3, #0]
 810734a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810734c:	429a      	cmp	r2, r3
 810734e:	d3b8      	bcc.n	81072c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8107350:	2301      	movs	r3, #1
 8107352:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107354:	e7b5      	b.n	81072c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8107356:	4b17      	ldr	r3, [pc, #92]	@ (81073b4 <xTaskIncrementTick+0x168>)
 8107358:	681b      	ldr	r3, [r3, #0]
 810735a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810735c:	4914      	ldr	r1, [pc, #80]	@ (81073b0 <xTaskIncrementTick+0x164>)
 810735e:	4613      	mov	r3, r2
 8107360:	009b      	lsls	r3, r3, #2
 8107362:	4413      	add	r3, r2
 8107364:	009b      	lsls	r3, r3, #2
 8107366:	440b      	add	r3, r1
 8107368:	681b      	ldr	r3, [r3, #0]
 810736a:	2b01      	cmp	r3, #1
 810736c:	d901      	bls.n	8107372 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810736e:	2301      	movs	r3, #1
 8107370:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8107372:	4b11      	ldr	r3, [pc, #68]	@ (81073b8 <xTaskIncrementTick+0x16c>)
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	2b00      	cmp	r3, #0
 8107378:	d007      	beq.n	810738a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810737a:	2301      	movs	r3, #1
 810737c:	617b      	str	r3, [r7, #20]
 810737e:	e004      	b.n	810738a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8107380:	4b0e      	ldr	r3, [pc, #56]	@ (81073bc <xTaskIncrementTick+0x170>)
 8107382:	681b      	ldr	r3, [r3, #0]
 8107384:	3301      	adds	r3, #1
 8107386:	4a0d      	ldr	r2, [pc, #52]	@ (81073bc <xTaskIncrementTick+0x170>)
 8107388:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810738a:	697b      	ldr	r3, [r7, #20]
}
 810738c:	4618      	mov	r0, r3
 810738e:	3718      	adds	r7, #24
 8107390:	46bd      	mov	sp, r7
 8107392:	bd80      	pop	{r7, pc}
 8107394:	10000ce0 	.word	0x10000ce0
 8107398:	10000cc4 	.word	0x10000cc4
 810739c:	10000cbc 	.word	0x10000cbc
 81073a0:	10000cc0 	.word	0x10000cc0
 81073a4:	10000cd8 	.word	0x10000cd8
 81073a8:	10000cdc 	.word	0x10000cdc
 81073ac:	10000cc8 	.word	0x10000cc8
 81073b0:	1000085c 	.word	0x1000085c
 81073b4:	10000858 	.word	0x10000858
 81073b8:	10000cd4 	.word	0x10000cd4
 81073bc:	10000cd0 	.word	0x10000cd0

081073c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81073c0:	b480      	push	{r7}
 81073c2:	b085      	sub	sp, #20
 81073c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81073c6:	4b28      	ldr	r3, [pc, #160]	@ (8107468 <vTaskSwitchContext+0xa8>)
 81073c8:	681b      	ldr	r3, [r3, #0]
 81073ca:	2b00      	cmp	r3, #0
 81073cc:	d003      	beq.n	81073d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81073ce:	4b27      	ldr	r3, [pc, #156]	@ (810746c <vTaskSwitchContext+0xac>)
 81073d0:	2201      	movs	r2, #1
 81073d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81073d4:	e042      	b.n	810745c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 81073d6:	4b25      	ldr	r3, [pc, #148]	@ (810746c <vTaskSwitchContext+0xac>)
 81073d8:	2200      	movs	r2, #0
 81073da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81073dc:	4b24      	ldr	r3, [pc, #144]	@ (8107470 <vTaskSwitchContext+0xb0>)
 81073de:	681b      	ldr	r3, [r3, #0]
 81073e0:	60fb      	str	r3, [r7, #12]
 81073e2:	e011      	b.n	8107408 <vTaskSwitchContext+0x48>
 81073e4:	68fb      	ldr	r3, [r7, #12]
 81073e6:	2b00      	cmp	r3, #0
 81073e8:	d10b      	bne.n	8107402 <vTaskSwitchContext+0x42>
	__asm volatile
 81073ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81073ee:	f383 8811 	msr	BASEPRI, r3
 81073f2:	f3bf 8f6f 	isb	sy
 81073f6:	f3bf 8f4f 	dsb	sy
 81073fa:	607b      	str	r3, [r7, #4]
}
 81073fc:	bf00      	nop
 81073fe:	bf00      	nop
 8107400:	e7fd      	b.n	81073fe <vTaskSwitchContext+0x3e>
 8107402:	68fb      	ldr	r3, [r7, #12]
 8107404:	3b01      	subs	r3, #1
 8107406:	60fb      	str	r3, [r7, #12]
 8107408:	491a      	ldr	r1, [pc, #104]	@ (8107474 <vTaskSwitchContext+0xb4>)
 810740a:	68fa      	ldr	r2, [r7, #12]
 810740c:	4613      	mov	r3, r2
 810740e:	009b      	lsls	r3, r3, #2
 8107410:	4413      	add	r3, r2
 8107412:	009b      	lsls	r3, r3, #2
 8107414:	440b      	add	r3, r1
 8107416:	681b      	ldr	r3, [r3, #0]
 8107418:	2b00      	cmp	r3, #0
 810741a:	d0e3      	beq.n	81073e4 <vTaskSwitchContext+0x24>
 810741c:	68fa      	ldr	r2, [r7, #12]
 810741e:	4613      	mov	r3, r2
 8107420:	009b      	lsls	r3, r3, #2
 8107422:	4413      	add	r3, r2
 8107424:	009b      	lsls	r3, r3, #2
 8107426:	4a13      	ldr	r2, [pc, #76]	@ (8107474 <vTaskSwitchContext+0xb4>)
 8107428:	4413      	add	r3, r2
 810742a:	60bb      	str	r3, [r7, #8]
 810742c:	68bb      	ldr	r3, [r7, #8]
 810742e:	685b      	ldr	r3, [r3, #4]
 8107430:	685a      	ldr	r2, [r3, #4]
 8107432:	68bb      	ldr	r3, [r7, #8]
 8107434:	605a      	str	r2, [r3, #4]
 8107436:	68bb      	ldr	r3, [r7, #8]
 8107438:	685a      	ldr	r2, [r3, #4]
 810743a:	68bb      	ldr	r3, [r7, #8]
 810743c:	3308      	adds	r3, #8
 810743e:	429a      	cmp	r2, r3
 8107440:	d104      	bne.n	810744c <vTaskSwitchContext+0x8c>
 8107442:	68bb      	ldr	r3, [r7, #8]
 8107444:	685b      	ldr	r3, [r3, #4]
 8107446:	685a      	ldr	r2, [r3, #4]
 8107448:	68bb      	ldr	r3, [r7, #8]
 810744a:	605a      	str	r2, [r3, #4]
 810744c:	68bb      	ldr	r3, [r7, #8]
 810744e:	685b      	ldr	r3, [r3, #4]
 8107450:	68db      	ldr	r3, [r3, #12]
 8107452:	4a09      	ldr	r2, [pc, #36]	@ (8107478 <vTaskSwitchContext+0xb8>)
 8107454:	6013      	str	r3, [r2, #0]
 8107456:	4a06      	ldr	r2, [pc, #24]	@ (8107470 <vTaskSwitchContext+0xb0>)
 8107458:	68fb      	ldr	r3, [r7, #12]
 810745a:	6013      	str	r3, [r2, #0]
}
 810745c:	bf00      	nop
 810745e:	3714      	adds	r7, #20
 8107460:	46bd      	mov	sp, r7
 8107462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107466:	4770      	bx	lr
 8107468:	10000ce0 	.word	0x10000ce0
 810746c:	10000cd4 	.word	0x10000cd4
 8107470:	10000cc8 	.word	0x10000cc8
 8107474:	1000085c 	.word	0x1000085c
 8107478:	10000858 	.word	0x10000858

0810747c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810747c:	b480      	push	{r7}
 810747e:	b083      	sub	sp, #12
 8107480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107482:	4b0c      	ldr	r3, [pc, #48]	@ (81074b4 <prvResetNextTaskUnblockTime+0x38>)
 8107484:	681b      	ldr	r3, [r3, #0]
 8107486:	681b      	ldr	r3, [r3, #0]
 8107488:	2b00      	cmp	r3, #0
 810748a:	d104      	bne.n	8107496 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810748c:	4b0a      	ldr	r3, [pc, #40]	@ (81074b8 <prvResetNextTaskUnblockTime+0x3c>)
 810748e:	f04f 32ff 	mov.w	r2, #4294967295
 8107492:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8107494:	e008      	b.n	81074a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107496:	4b07      	ldr	r3, [pc, #28]	@ (81074b4 <prvResetNextTaskUnblockTime+0x38>)
 8107498:	681b      	ldr	r3, [r3, #0]
 810749a:	68db      	ldr	r3, [r3, #12]
 810749c:	68db      	ldr	r3, [r3, #12]
 810749e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	685b      	ldr	r3, [r3, #4]
 81074a4:	4a04      	ldr	r2, [pc, #16]	@ (81074b8 <prvResetNextTaskUnblockTime+0x3c>)
 81074a6:	6013      	str	r3, [r2, #0]
}
 81074a8:	bf00      	nop
 81074aa:	370c      	adds	r7, #12
 81074ac:	46bd      	mov	sp, r7
 81074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074b2:	4770      	bx	lr
 81074b4:	10000cbc 	.word	0x10000cbc
 81074b8:	10000cdc 	.word	0x10000cdc

081074bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81074bc:	b480      	push	{r7}
 81074be:	b083      	sub	sp, #12
 81074c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81074c2:	4b0b      	ldr	r3, [pc, #44]	@ (81074f0 <xTaskGetSchedulerState+0x34>)
 81074c4:	681b      	ldr	r3, [r3, #0]
 81074c6:	2b00      	cmp	r3, #0
 81074c8:	d102      	bne.n	81074d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81074ca:	2301      	movs	r3, #1
 81074cc:	607b      	str	r3, [r7, #4]
 81074ce:	e008      	b.n	81074e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81074d0:	4b08      	ldr	r3, [pc, #32]	@ (81074f4 <xTaskGetSchedulerState+0x38>)
 81074d2:	681b      	ldr	r3, [r3, #0]
 81074d4:	2b00      	cmp	r3, #0
 81074d6:	d102      	bne.n	81074de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81074d8:	2302      	movs	r3, #2
 81074da:	607b      	str	r3, [r7, #4]
 81074dc:	e001      	b.n	81074e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81074de:	2300      	movs	r3, #0
 81074e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81074e2:	687b      	ldr	r3, [r7, #4]
	}
 81074e4:	4618      	mov	r0, r3
 81074e6:	370c      	adds	r7, #12
 81074e8:	46bd      	mov	sp, r7
 81074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ee:	4770      	bx	lr
 81074f0:	10000ccc 	.word	0x10000ccc
 81074f4:	10000ce0 	.word	0x10000ce0

081074f8 <std>:
 81074f8:	2300      	movs	r3, #0
 81074fa:	b510      	push	{r4, lr}
 81074fc:	4604      	mov	r4, r0
 81074fe:	e9c0 3300 	strd	r3, r3, [r0]
 8107502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8107506:	6083      	str	r3, [r0, #8]
 8107508:	8181      	strh	r1, [r0, #12]
 810750a:	6643      	str	r3, [r0, #100]	@ 0x64
 810750c:	81c2      	strh	r2, [r0, #14]
 810750e:	6183      	str	r3, [r0, #24]
 8107510:	4619      	mov	r1, r3
 8107512:	2208      	movs	r2, #8
 8107514:	305c      	adds	r0, #92	@ 0x5c
 8107516:	f000 f9f9 	bl	810790c <memset>
 810751a:	4b0d      	ldr	r3, [pc, #52]	@ (8107550 <std+0x58>)
 810751c:	6263      	str	r3, [r4, #36]	@ 0x24
 810751e:	4b0d      	ldr	r3, [pc, #52]	@ (8107554 <std+0x5c>)
 8107520:	62a3      	str	r3, [r4, #40]	@ 0x28
 8107522:	4b0d      	ldr	r3, [pc, #52]	@ (8107558 <std+0x60>)
 8107524:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8107526:	4b0d      	ldr	r3, [pc, #52]	@ (810755c <std+0x64>)
 8107528:	6323      	str	r3, [r4, #48]	@ 0x30
 810752a:	4b0d      	ldr	r3, [pc, #52]	@ (8107560 <std+0x68>)
 810752c:	6224      	str	r4, [r4, #32]
 810752e:	429c      	cmp	r4, r3
 8107530:	d006      	beq.n	8107540 <std+0x48>
 8107532:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8107536:	4294      	cmp	r4, r2
 8107538:	d002      	beq.n	8107540 <std+0x48>
 810753a:	33d0      	adds	r3, #208	@ 0xd0
 810753c:	429c      	cmp	r4, r3
 810753e:	d105      	bne.n	810754c <std+0x54>
 8107540:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8107544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107548:	f000 ba58 	b.w	81079fc <__retarget_lock_init_recursive>
 810754c:	bd10      	pop	{r4, pc}
 810754e:	bf00      	nop
 8107550:	0810775d 	.word	0x0810775d
 8107554:	0810777f 	.word	0x0810777f
 8107558:	081077b7 	.word	0x081077b7
 810755c:	081077db 	.word	0x081077db
 8107560:	10000ce4 	.word	0x10000ce4

08107564 <stdio_exit_handler>:
 8107564:	4a02      	ldr	r2, [pc, #8]	@ (8107570 <stdio_exit_handler+0xc>)
 8107566:	4903      	ldr	r1, [pc, #12]	@ (8107574 <stdio_exit_handler+0x10>)
 8107568:	4803      	ldr	r0, [pc, #12]	@ (8107578 <stdio_exit_handler+0x14>)
 810756a:	f000 b869 	b.w	8107640 <_fwalk_sglue>
 810756e:	bf00      	nop
 8107570:	10000010 	.word	0x10000010
 8107574:	081082b5 	.word	0x081082b5
 8107578:	10000020 	.word	0x10000020

0810757c <cleanup_stdio>:
 810757c:	6841      	ldr	r1, [r0, #4]
 810757e:	4b0c      	ldr	r3, [pc, #48]	@ (81075b0 <cleanup_stdio+0x34>)
 8107580:	4299      	cmp	r1, r3
 8107582:	b510      	push	{r4, lr}
 8107584:	4604      	mov	r4, r0
 8107586:	d001      	beq.n	810758c <cleanup_stdio+0x10>
 8107588:	f000 fe94 	bl	81082b4 <_fflush_r>
 810758c:	68a1      	ldr	r1, [r4, #8]
 810758e:	4b09      	ldr	r3, [pc, #36]	@ (81075b4 <cleanup_stdio+0x38>)
 8107590:	4299      	cmp	r1, r3
 8107592:	d002      	beq.n	810759a <cleanup_stdio+0x1e>
 8107594:	4620      	mov	r0, r4
 8107596:	f000 fe8d 	bl	81082b4 <_fflush_r>
 810759a:	68e1      	ldr	r1, [r4, #12]
 810759c:	4b06      	ldr	r3, [pc, #24]	@ (81075b8 <cleanup_stdio+0x3c>)
 810759e:	4299      	cmp	r1, r3
 81075a0:	d004      	beq.n	81075ac <cleanup_stdio+0x30>
 81075a2:	4620      	mov	r0, r4
 81075a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81075a8:	f000 be84 	b.w	81082b4 <_fflush_r>
 81075ac:	bd10      	pop	{r4, pc}
 81075ae:	bf00      	nop
 81075b0:	10000ce4 	.word	0x10000ce4
 81075b4:	10000d4c 	.word	0x10000d4c
 81075b8:	10000db4 	.word	0x10000db4

081075bc <global_stdio_init.part.0>:
 81075bc:	b510      	push	{r4, lr}
 81075be:	4b0b      	ldr	r3, [pc, #44]	@ (81075ec <global_stdio_init.part.0+0x30>)
 81075c0:	4c0b      	ldr	r4, [pc, #44]	@ (81075f0 <global_stdio_init.part.0+0x34>)
 81075c2:	4a0c      	ldr	r2, [pc, #48]	@ (81075f4 <global_stdio_init.part.0+0x38>)
 81075c4:	601a      	str	r2, [r3, #0]
 81075c6:	4620      	mov	r0, r4
 81075c8:	2200      	movs	r2, #0
 81075ca:	2104      	movs	r1, #4
 81075cc:	f7ff ff94 	bl	81074f8 <std>
 81075d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 81075d4:	2201      	movs	r2, #1
 81075d6:	2109      	movs	r1, #9
 81075d8:	f7ff ff8e 	bl	81074f8 <std>
 81075dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 81075e0:	2202      	movs	r2, #2
 81075e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81075e6:	2112      	movs	r1, #18
 81075e8:	f7ff bf86 	b.w	81074f8 <std>
 81075ec:	10000e1c 	.word	0x10000e1c
 81075f0:	10000ce4 	.word	0x10000ce4
 81075f4:	08107565 	.word	0x08107565

081075f8 <__sfp_lock_acquire>:
 81075f8:	4801      	ldr	r0, [pc, #4]	@ (8107600 <__sfp_lock_acquire+0x8>)
 81075fa:	f000 ba00 	b.w	81079fe <__retarget_lock_acquire_recursive>
 81075fe:	bf00      	nop
 8107600:	10000e25 	.word	0x10000e25

08107604 <__sfp_lock_release>:
 8107604:	4801      	ldr	r0, [pc, #4]	@ (810760c <__sfp_lock_release+0x8>)
 8107606:	f000 b9fb 	b.w	8107a00 <__retarget_lock_release_recursive>
 810760a:	bf00      	nop
 810760c:	10000e25 	.word	0x10000e25

08107610 <__sinit>:
 8107610:	b510      	push	{r4, lr}
 8107612:	4604      	mov	r4, r0
 8107614:	f7ff fff0 	bl	81075f8 <__sfp_lock_acquire>
 8107618:	6a23      	ldr	r3, [r4, #32]
 810761a:	b11b      	cbz	r3, 8107624 <__sinit+0x14>
 810761c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107620:	f7ff bff0 	b.w	8107604 <__sfp_lock_release>
 8107624:	4b04      	ldr	r3, [pc, #16]	@ (8107638 <__sinit+0x28>)
 8107626:	6223      	str	r3, [r4, #32]
 8107628:	4b04      	ldr	r3, [pc, #16]	@ (810763c <__sinit+0x2c>)
 810762a:	681b      	ldr	r3, [r3, #0]
 810762c:	2b00      	cmp	r3, #0
 810762e:	d1f5      	bne.n	810761c <__sinit+0xc>
 8107630:	f7ff ffc4 	bl	81075bc <global_stdio_init.part.0>
 8107634:	e7f2      	b.n	810761c <__sinit+0xc>
 8107636:	bf00      	nop
 8107638:	0810757d 	.word	0x0810757d
 810763c:	10000e1c 	.word	0x10000e1c

08107640 <_fwalk_sglue>:
 8107640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107644:	4607      	mov	r7, r0
 8107646:	4688      	mov	r8, r1
 8107648:	4614      	mov	r4, r2
 810764a:	2600      	movs	r6, #0
 810764c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8107650:	f1b9 0901 	subs.w	r9, r9, #1
 8107654:	d505      	bpl.n	8107662 <_fwalk_sglue+0x22>
 8107656:	6824      	ldr	r4, [r4, #0]
 8107658:	2c00      	cmp	r4, #0
 810765a:	d1f7      	bne.n	810764c <_fwalk_sglue+0xc>
 810765c:	4630      	mov	r0, r6
 810765e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107662:	89ab      	ldrh	r3, [r5, #12]
 8107664:	2b01      	cmp	r3, #1
 8107666:	d907      	bls.n	8107678 <_fwalk_sglue+0x38>
 8107668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810766c:	3301      	adds	r3, #1
 810766e:	d003      	beq.n	8107678 <_fwalk_sglue+0x38>
 8107670:	4629      	mov	r1, r5
 8107672:	4638      	mov	r0, r7
 8107674:	47c0      	blx	r8
 8107676:	4306      	orrs	r6, r0
 8107678:	3568      	adds	r5, #104	@ 0x68
 810767a:	e7e9      	b.n	8107650 <_fwalk_sglue+0x10>

0810767c <iprintf>:
 810767c:	b40f      	push	{r0, r1, r2, r3}
 810767e:	b507      	push	{r0, r1, r2, lr}
 8107680:	4906      	ldr	r1, [pc, #24]	@ (810769c <iprintf+0x20>)
 8107682:	ab04      	add	r3, sp, #16
 8107684:	6808      	ldr	r0, [r1, #0]
 8107686:	f853 2b04 	ldr.w	r2, [r3], #4
 810768a:	6881      	ldr	r1, [r0, #8]
 810768c:	9301      	str	r3, [sp, #4]
 810768e:	f000 fae9 	bl	8107c64 <_vfiprintf_r>
 8107692:	b003      	add	sp, #12
 8107694:	f85d eb04 	ldr.w	lr, [sp], #4
 8107698:	b004      	add	sp, #16
 810769a:	4770      	bx	lr
 810769c:	1000001c 	.word	0x1000001c

081076a0 <_puts_r>:
 81076a0:	6a03      	ldr	r3, [r0, #32]
 81076a2:	b570      	push	{r4, r5, r6, lr}
 81076a4:	6884      	ldr	r4, [r0, #8]
 81076a6:	4605      	mov	r5, r0
 81076a8:	460e      	mov	r6, r1
 81076aa:	b90b      	cbnz	r3, 81076b0 <_puts_r+0x10>
 81076ac:	f7ff ffb0 	bl	8107610 <__sinit>
 81076b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81076b2:	07db      	lsls	r3, r3, #31
 81076b4:	d405      	bmi.n	81076c2 <_puts_r+0x22>
 81076b6:	89a3      	ldrh	r3, [r4, #12]
 81076b8:	0598      	lsls	r0, r3, #22
 81076ba:	d402      	bmi.n	81076c2 <_puts_r+0x22>
 81076bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81076be:	f000 f99e 	bl	81079fe <__retarget_lock_acquire_recursive>
 81076c2:	89a3      	ldrh	r3, [r4, #12]
 81076c4:	0719      	lsls	r1, r3, #28
 81076c6:	d502      	bpl.n	81076ce <_puts_r+0x2e>
 81076c8:	6923      	ldr	r3, [r4, #16]
 81076ca:	2b00      	cmp	r3, #0
 81076cc:	d135      	bne.n	810773a <_puts_r+0x9a>
 81076ce:	4621      	mov	r1, r4
 81076d0:	4628      	mov	r0, r5
 81076d2:	f000 f8c5 	bl	8107860 <__swsetup_r>
 81076d6:	b380      	cbz	r0, 810773a <_puts_r+0x9a>
 81076d8:	f04f 35ff 	mov.w	r5, #4294967295
 81076dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81076de:	07da      	lsls	r2, r3, #31
 81076e0:	d405      	bmi.n	81076ee <_puts_r+0x4e>
 81076e2:	89a3      	ldrh	r3, [r4, #12]
 81076e4:	059b      	lsls	r3, r3, #22
 81076e6:	d402      	bmi.n	81076ee <_puts_r+0x4e>
 81076e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81076ea:	f000 f989 	bl	8107a00 <__retarget_lock_release_recursive>
 81076ee:	4628      	mov	r0, r5
 81076f0:	bd70      	pop	{r4, r5, r6, pc}
 81076f2:	2b00      	cmp	r3, #0
 81076f4:	da04      	bge.n	8107700 <_puts_r+0x60>
 81076f6:	69a2      	ldr	r2, [r4, #24]
 81076f8:	429a      	cmp	r2, r3
 81076fa:	dc17      	bgt.n	810772c <_puts_r+0x8c>
 81076fc:	290a      	cmp	r1, #10
 81076fe:	d015      	beq.n	810772c <_puts_r+0x8c>
 8107700:	6823      	ldr	r3, [r4, #0]
 8107702:	1c5a      	adds	r2, r3, #1
 8107704:	6022      	str	r2, [r4, #0]
 8107706:	7019      	strb	r1, [r3, #0]
 8107708:	68a3      	ldr	r3, [r4, #8]
 810770a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810770e:	3b01      	subs	r3, #1
 8107710:	60a3      	str	r3, [r4, #8]
 8107712:	2900      	cmp	r1, #0
 8107714:	d1ed      	bne.n	81076f2 <_puts_r+0x52>
 8107716:	2b00      	cmp	r3, #0
 8107718:	da11      	bge.n	810773e <_puts_r+0x9e>
 810771a:	4622      	mov	r2, r4
 810771c:	210a      	movs	r1, #10
 810771e:	4628      	mov	r0, r5
 8107720:	f000 f85f 	bl	81077e2 <__swbuf_r>
 8107724:	3001      	adds	r0, #1
 8107726:	d0d7      	beq.n	81076d8 <_puts_r+0x38>
 8107728:	250a      	movs	r5, #10
 810772a:	e7d7      	b.n	81076dc <_puts_r+0x3c>
 810772c:	4622      	mov	r2, r4
 810772e:	4628      	mov	r0, r5
 8107730:	f000 f857 	bl	81077e2 <__swbuf_r>
 8107734:	3001      	adds	r0, #1
 8107736:	d1e7      	bne.n	8107708 <_puts_r+0x68>
 8107738:	e7ce      	b.n	81076d8 <_puts_r+0x38>
 810773a:	3e01      	subs	r6, #1
 810773c:	e7e4      	b.n	8107708 <_puts_r+0x68>
 810773e:	6823      	ldr	r3, [r4, #0]
 8107740:	1c5a      	adds	r2, r3, #1
 8107742:	6022      	str	r2, [r4, #0]
 8107744:	220a      	movs	r2, #10
 8107746:	701a      	strb	r2, [r3, #0]
 8107748:	e7ee      	b.n	8107728 <_puts_r+0x88>
	...

0810774c <puts>:
 810774c:	4b02      	ldr	r3, [pc, #8]	@ (8107758 <puts+0xc>)
 810774e:	4601      	mov	r1, r0
 8107750:	6818      	ldr	r0, [r3, #0]
 8107752:	f7ff bfa5 	b.w	81076a0 <_puts_r>
 8107756:	bf00      	nop
 8107758:	1000001c 	.word	0x1000001c

0810775c <__sread>:
 810775c:	b510      	push	{r4, lr}
 810775e:	460c      	mov	r4, r1
 8107760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107764:	f000 f8fc 	bl	8107960 <_read_r>
 8107768:	2800      	cmp	r0, #0
 810776a:	bfab      	itete	ge
 810776c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810776e:	89a3      	ldrhlt	r3, [r4, #12]
 8107770:	181b      	addge	r3, r3, r0
 8107772:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8107776:	bfac      	ite	ge
 8107778:	6563      	strge	r3, [r4, #84]	@ 0x54
 810777a:	81a3      	strhlt	r3, [r4, #12]
 810777c:	bd10      	pop	{r4, pc}

0810777e <__swrite>:
 810777e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107782:	461f      	mov	r7, r3
 8107784:	898b      	ldrh	r3, [r1, #12]
 8107786:	05db      	lsls	r3, r3, #23
 8107788:	4605      	mov	r5, r0
 810778a:	460c      	mov	r4, r1
 810778c:	4616      	mov	r6, r2
 810778e:	d505      	bpl.n	810779c <__swrite+0x1e>
 8107790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107794:	2302      	movs	r3, #2
 8107796:	2200      	movs	r2, #0
 8107798:	f000 f8d0 	bl	810793c <_lseek_r>
 810779c:	89a3      	ldrh	r3, [r4, #12]
 810779e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81077a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81077a6:	81a3      	strh	r3, [r4, #12]
 81077a8:	4632      	mov	r2, r6
 81077aa:	463b      	mov	r3, r7
 81077ac:	4628      	mov	r0, r5
 81077ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81077b2:	f000 b8e7 	b.w	8107984 <_write_r>

081077b6 <__sseek>:
 81077b6:	b510      	push	{r4, lr}
 81077b8:	460c      	mov	r4, r1
 81077ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81077be:	f000 f8bd 	bl	810793c <_lseek_r>
 81077c2:	1c43      	adds	r3, r0, #1
 81077c4:	89a3      	ldrh	r3, [r4, #12]
 81077c6:	bf15      	itete	ne
 81077c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 81077ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 81077ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 81077d2:	81a3      	strheq	r3, [r4, #12]
 81077d4:	bf18      	it	ne
 81077d6:	81a3      	strhne	r3, [r4, #12]
 81077d8:	bd10      	pop	{r4, pc}

081077da <__sclose>:
 81077da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81077de:	f000 b89d 	b.w	810791c <_close_r>

081077e2 <__swbuf_r>:
 81077e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81077e4:	460e      	mov	r6, r1
 81077e6:	4614      	mov	r4, r2
 81077e8:	4605      	mov	r5, r0
 81077ea:	b118      	cbz	r0, 81077f4 <__swbuf_r+0x12>
 81077ec:	6a03      	ldr	r3, [r0, #32]
 81077ee:	b90b      	cbnz	r3, 81077f4 <__swbuf_r+0x12>
 81077f0:	f7ff ff0e 	bl	8107610 <__sinit>
 81077f4:	69a3      	ldr	r3, [r4, #24]
 81077f6:	60a3      	str	r3, [r4, #8]
 81077f8:	89a3      	ldrh	r3, [r4, #12]
 81077fa:	071a      	lsls	r2, r3, #28
 81077fc:	d501      	bpl.n	8107802 <__swbuf_r+0x20>
 81077fe:	6923      	ldr	r3, [r4, #16]
 8107800:	b943      	cbnz	r3, 8107814 <__swbuf_r+0x32>
 8107802:	4621      	mov	r1, r4
 8107804:	4628      	mov	r0, r5
 8107806:	f000 f82b 	bl	8107860 <__swsetup_r>
 810780a:	b118      	cbz	r0, 8107814 <__swbuf_r+0x32>
 810780c:	f04f 37ff 	mov.w	r7, #4294967295
 8107810:	4638      	mov	r0, r7
 8107812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107814:	6823      	ldr	r3, [r4, #0]
 8107816:	6922      	ldr	r2, [r4, #16]
 8107818:	1a98      	subs	r0, r3, r2
 810781a:	6963      	ldr	r3, [r4, #20]
 810781c:	b2f6      	uxtb	r6, r6
 810781e:	4283      	cmp	r3, r0
 8107820:	4637      	mov	r7, r6
 8107822:	dc05      	bgt.n	8107830 <__swbuf_r+0x4e>
 8107824:	4621      	mov	r1, r4
 8107826:	4628      	mov	r0, r5
 8107828:	f000 fd44 	bl	81082b4 <_fflush_r>
 810782c:	2800      	cmp	r0, #0
 810782e:	d1ed      	bne.n	810780c <__swbuf_r+0x2a>
 8107830:	68a3      	ldr	r3, [r4, #8]
 8107832:	3b01      	subs	r3, #1
 8107834:	60a3      	str	r3, [r4, #8]
 8107836:	6823      	ldr	r3, [r4, #0]
 8107838:	1c5a      	adds	r2, r3, #1
 810783a:	6022      	str	r2, [r4, #0]
 810783c:	701e      	strb	r6, [r3, #0]
 810783e:	6962      	ldr	r2, [r4, #20]
 8107840:	1c43      	adds	r3, r0, #1
 8107842:	429a      	cmp	r2, r3
 8107844:	d004      	beq.n	8107850 <__swbuf_r+0x6e>
 8107846:	89a3      	ldrh	r3, [r4, #12]
 8107848:	07db      	lsls	r3, r3, #31
 810784a:	d5e1      	bpl.n	8107810 <__swbuf_r+0x2e>
 810784c:	2e0a      	cmp	r6, #10
 810784e:	d1df      	bne.n	8107810 <__swbuf_r+0x2e>
 8107850:	4621      	mov	r1, r4
 8107852:	4628      	mov	r0, r5
 8107854:	f000 fd2e 	bl	81082b4 <_fflush_r>
 8107858:	2800      	cmp	r0, #0
 810785a:	d0d9      	beq.n	8107810 <__swbuf_r+0x2e>
 810785c:	e7d6      	b.n	810780c <__swbuf_r+0x2a>
	...

08107860 <__swsetup_r>:
 8107860:	b538      	push	{r3, r4, r5, lr}
 8107862:	4b29      	ldr	r3, [pc, #164]	@ (8107908 <__swsetup_r+0xa8>)
 8107864:	4605      	mov	r5, r0
 8107866:	6818      	ldr	r0, [r3, #0]
 8107868:	460c      	mov	r4, r1
 810786a:	b118      	cbz	r0, 8107874 <__swsetup_r+0x14>
 810786c:	6a03      	ldr	r3, [r0, #32]
 810786e:	b90b      	cbnz	r3, 8107874 <__swsetup_r+0x14>
 8107870:	f7ff fece 	bl	8107610 <__sinit>
 8107874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107878:	0719      	lsls	r1, r3, #28
 810787a:	d422      	bmi.n	81078c2 <__swsetup_r+0x62>
 810787c:	06da      	lsls	r2, r3, #27
 810787e:	d407      	bmi.n	8107890 <__swsetup_r+0x30>
 8107880:	2209      	movs	r2, #9
 8107882:	602a      	str	r2, [r5, #0]
 8107884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8107888:	81a3      	strh	r3, [r4, #12]
 810788a:	f04f 30ff 	mov.w	r0, #4294967295
 810788e:	e033      	b.n	81078f8 <__swsetup_r+0x98>
 8107890:	0758      	lsls	r0, r3, #29
 8107892:	d512      	bpl.n	81078ba <__swsetup_r+0x5a>
 8107894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107896:	b141      	cbz	r1, 81078aa <__swsetup_r+0x4a>
 8107898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810789c:	4299      	cmp	r1, r3
 810789e:	d002      	beq.n	81078a6 <__swsetup_r+0x46>
 81078a0:	4628      	mov	r0, r5
 81078a2:	f000 f8bd 	bl	8107a20 <_free_r>
 81078a6:	2300      	movs	r3, #0
 81078a8:	6363      	str	r3, [r4, #52]	@ 0x34
 81078aa:	89a3      	ldrh	r3, [r4, #12]
 81078ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 81078b0:	81a3      	strh	r3, [r4, #12]
 81078b2:	2300      	movs	r3, #0
 81078b4:	6063      	str	r3, [r4, #4]
 81078b6:	6923      	ldr	r3, [r4, #16]
 81078b8:	6023      	str	r3, [r4, #0]
 81078ba:	89a3      	ldrh	r3, [r4, #12]
 81078bc:	f043 0308 	orr.w	r3, r3, #8
 81078c0:	81a3      	strh	r3, [r4, #12]
 81078c2:	6923      	ldr	r3, [r4, #16]
 81078c4:	b94b      	cbnz	r3, 81078da <__swsetup_r+0x7a>
 81078c6:	89a3      	ldrh	r3, [r4, #12]
 81078c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 81078cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81078d0:	d003      	beq.n	81078da <__swsetup_r+0x7a>
 81078d2:	4621      	mov	r1, r4
 81078d4:	4628      	mov	r0, r5
 81078d6:	f000 fd3b 	bl	8108350 <__smakebuf_r>
 81078da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81078de:	f013 0201 	ands.w	r2, r3, #1
 81078e2:	d00a      	beq.n	81078fa <__swsetup_r+0x9a>
 81078e4:	2200      	movs	r2, #0
 81078e6:	60a2      	str	r2, [r4, #8]
 81078e8:	6962      	ldr	r2, [r4, #20]
 81078ea:	4252      	negs	r2, r2
 81078ec:	61a2      	str	r2, [r4, #24]
 81078ee:	6922      	ldr	r2, [r4, #16]
 81078f0:	b942      	cbnz	r2, 8107904 <__swsetup_r+0xa4>
 81078f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 81078f6:	d1c5      	bne.n	8107884 <__swsetup_r+0x24>
 81078f8:	bd38      	pop	{r3, r4, r5, pc}
 81078fa:	0799      	lsls	r1, r3, #30
 81078fc:	bf58      	it	pl
 81078fe:	6962      	ldrpl	r2, [r4, #20]
 8107900:	60a2      	str	r2, [r4, #8]
 8107902:	e7f4      	b.n	81078ee <__swsetup_r+0x8e>
 8107904:	2000      	movs	r0, #0
 8107906:	e7f7      	b.n	81078f8 <__swsetup_r+0x98>
 8107908:	1000001c 	.word	0x1000001c

0810790c <memset>:
 810790c:	4402      	add	r2, r0
 810790e:	4603      	mov	r3, r0
 8107910:	4293      	cmp	r3, r2
 8107912:	d100      	bne.n	8107916 <memset+0xa>
 8107914:	4770      	bx	lr
 8107916:	f803 1b01 	strb.w	r1, [r3], #1
 810791a:	e7f9      	b.n	8107910 <memset+0x4>

0810791c <_close_r>:
 810791c:	b538      	push	{r3, r4, r5, lr}
 810791e:	4d06      	ldr	r5, [pc, #24]	@ (8107938 <_close_r+0x1c>)
 8107920:	2300      	movs	r3, #0
 8107922:	4604      	mov	r4, r0
 8107924:	4608      	mov	r0, r1
 8107926:	602b      	str	r3, [r5, #0]
 8107928:	f7f9 ffa9 	bl	810187e <_close>
 810792c:	1c43      	adds	r3, r0, #1
 810792e:	d102      	bne.n	8107936 <_close_r+0x1a>
 8107930:	682b      	ldr	r3, [r5, #0]
 8107932:	b103      	cbz	r3, 8107936 <_close_r+0x1a>
 8107934:	6023      	str	r3, [r4, #0]
 8107936:	bd38      	pop	{r3, r4, r5, pc}
 8107938:	10000e20 	.word	0x10000e20

0810793c <_lseek_r>:
 810793c:	b538      	push	{r3, r4, r5, lr}
 810793e:	4d07      	ldr	r5, [pc, #28]	@ (810795c <_lseek_r+0x20>)
 8107940:	4604      	mov	r4, r0
 8107942:	4608      	mov	r0, r1
 8107944:	4611      	mov	r1, r2
 8107946:	2200      	movs	r2, #0
 8107948:	602a      	str	r2, [r5, #0]
 810794a:	461a      	mov	r2, r3
 810794c:	f7f9 ffbe 	bl	81018cc <_lseek>
 8107950:	1c43      	adds	r3, r0, #1
 8107952:	d102      	bne.n	810795a <_lseek_r+0x1e>
 8107954:	682b      	ldr	r3, [r5, #0]
 8107956:	b103      	cbz	r3, 810795a <_lseek_r+0x1e>
 8107958:	6023      	str	r3, [r4, #0]
 810795a:	bd38      	pop	{r3, r4, r5, pc}
 810795c:	10000e20 	.word	0x10000e20

08107960 <_read_r>:
 8107960:	b538      	push	{r3, r4, r5, lr}
 8107962:	4d07      	ldr	r5, [pc, #28]	@ (8107980 <_read_r+0x20>)
 8107964:	4604      	mov	r4, r0
 8107966:	4608      	mov	r0, r1
 8107968:	4611      	mov	r1, r2
 810796a:	2200      	movs	r2, #0
 810796c:	602a      	str	r2, [r5, #0]
 810796e:	461a      	mov	r2, r3
 8107970:	f7f9 ff4c 	bl	810180c <_read>
 8107974:	1c43      	adds	r3, r0, #1
 8107976:	d102      	bne.n	810797e <_read_r+0x1e>
 8107978:	682b      	ldr	r3, [r5, #0]
 810797a:	b103      	cbz	r3, 810797e <_read_r+0x1e>
 810797c:	6023      	str	r3, [r4, #0]
 810797e:	bd38      	pop	{r3, r4, r5, pc}
 8107980:	10000e20 	.word	0x10000e20

08107984 <_write_r>:
 8107984:	b538      	push	{r3, r4, r5, lr}
 8107986:	4d07      	ldr	r5, [pc, #28]	@ (81079a4 <_write_r+0x20>)
 8107988:	4604      	mov	r4, r0
 810798a:	4608      	mov	r0, r1
 810798c:	4611      	mov	r1, r2
 810798e:	2200      	movs	r2, #0
 8107990:	602a      	str	r2, [r5, #0]
 8107992:	461a      	mov	r2, r3
 8107994:	f7f9 ff57 	bl	8101846 <_write>
 8107998:	1c43      	adds	r3, r0, #1
 810799a:	d102      	bne.n	81079a2 <_write_r+0x1e>
 810799c:	682b      	ldr	r3, [r5, #0]
 810799e:	b103      	cbz	r3, 81079a2 <_write_r+0x1e>
 81079a0:	6023      	str	r3, [r4, #0]
 81079a2:	bd38      	pop	{r3, r4, r5, pc}
 81079a4:	10000e20 	.word	0x10000e20

081079a8 <__errno>:
 81079a8:	4b01      	ldr	r3, [pc, #4]	@ (81079b0 <__errno+0x8>)
 81079aa:	6818      	ldr	r0, [r3, #0]
 81079ac:	4770      	bx	lr
 81079ae:	bf00      	nop
 81079b0:	1000001c 	.word	0x1000001c

081079b4 <__libc_init_array>:
 81079b4:	b570      	push	{r4, r5, r6, lr}
 81079b6:	4d0d      	ldr	r5, [pc, #52]	@ (81079ec <__libc_init_array+0x38>)
 81079b8:	4c0d      	ldr	r4, [pc, #52]	@ (81079f0 <__libc_init_array+0x3c>)
 81079ba:	1b64      	subs	r4, r4, r5
 81079bc:	10a4      	asrs	r4, r4, #2
 81079be:	2600      	movs	r6, #0
 81079c0:	42a6      	cmp	r6, r4
 81079c2:	d109      	bne.n	81079d8 <__libc_init_array+0x24>
 81079c4:	4d0b      	ldr	r5, [pc, #44]	@ (81079f4 <__libc_init_array+0x40>)
 81079c6:	4c0c      	ldr	r4, [pc, #48]	@ (81079f8 <__libc_init_array+0x44>)
 81079c8:	f000 fd30 	bl	810842c <_init>
 81079cc:	1b64      	subs	r4, r4, r5
 81079ce:	10a4      	asrs	r4, r4, #2
 81079d0:	2600      	movs	r6, #0
 81079d2:	42a6      	cmp	r6, r4
 81079d4:	d105      	bne.n	81079e2 <__libc_init_array+0x2e>
 81079d6:	bd70      	pop	{r4, r5, r6, pc}
 81079d8:	f855 3b04 	ldr.w	r3, [r5], #4
 81079dc:	4798      	blx	r3
 81079de:	3601      	adds	r6, #1
 81079e0:	e7ee      	b.n	81079c0 <__libc_init_array+0xc>
 81079e2:	f855 3b04 	ldr.w	r3, [r5], #4
 81079e6:	4798      	blx	r3
 81079e8:	3601      	adds	r6, #1
 81079ea:	e7f2      	b.n	81079d2 <__libc_init_array+0x1e>
 81079ec:	081084c8 	.word	0x081084c8
 81079f0:	081084c8 	.word	0x081084c8
 81079f4:	081084c8 	.word	0x081084c8
 81079f8:	081084cc 	.word	0x081084cc

081079fc <__retarget_lock_init_recursive>:
 81079fc:	4770      	bx	lr

081079fe <__retarget_lock_acquire_recursive>:
 81079fe:	4770      	bx	lr

08107a00 <__retarget_lock_release_recursive>:
 8107a00:	4770      	bx	lr

08107a02 <memcpy>:
 8107a02:	440a      	add	r2, r1
 8107a04:	4291      	cmp	r1, r2
 8107a06:	f100 33ff 	add.w	r3, r0, #4294967295
 8107a0a:	d100      	bne.n	8107a0e <memcpy+0xc>
 8107a0c:	4770      	bx	lr
 8107a0e:	b510      	push	{r4, lr}
 8107a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107a18:	4291      	cmp	r1, r2
 8107a1a:	d1f9      	bne.n	8107a10 <memcpy+0xe>
 8107a1c:	bd10      	pop	{r4, pc}
	...

08107a20 <_free_r>:
 8107a20:	b538      	push	{r3, r4, r5, lr}
 8107a22:	4605      	mov	r5, r0
 8107a24:	2900      	cmp	r1, #0
 8107a26:	d041      	beq.n	8107aac <_free_r+0x8c>
 8107a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107a2c:	1f0c      	subs	r4, r1, #4
 8107a2e:	2b00      	cmp	r3, #0
 8107a30:	bfb8      	it	lt
 8107a32:	18e4      	addlt	r4, r4, r3
 8107a34:	f000 f8e0 	bl	8107bf8 <__malloc_lock>
 8107a38:	4a1d      	ldr	r2, [pc, #116]	@ (8107ab0 <_free_r+0x90>)
 8107a3a:	6813      	ldr	r3, [r2, #0]
 8107a3c:	b933      	cbnz	r3, 8107a4c <_free_r+0x2c>
 8107a3e:	6063      	str	r3, [r4, #4]
 8107a40:	6014      	str	r4, [r2, #0]
 8107a42:	4628      	mov	r0, r5
 8107a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107a48:	f000 b8dc 	b.w	8107c04 <__malloc_unlock>
 8107a4c:	42a3      	cmp	r3, r4
 8107a4e:	d908      	bls.n	8107a62 <_free_r+0x42>
 8107a50:	6820      	ldr	r0, [r4, #0]
 8107a52:	1821      	adds	r1, r4, r0
 8107a54:	428b      	cmp	r3, r1
 8107a56:	bf01      	itttt	eq
 8107a58:	6819      	ldreq	r1, [r3, #0]
 8107a5a:	685b      	ldreq	r3, [r3, #4]
 8107a5c:	1809      	addeq	r1, r1, r0
 8107a5e:	6021      	streq	r1, [r4, #0]
 8107a60:	e7ed      	b.n	8107a3e <_free_r+0x1e>
 8107a62:	461a      	mov	r2, r3
 8107a64:	685b      	ldr	r3, [r3, #4]
 8107a66:	b10b      	cbz	r3, 8107a6c <_free_r+0x4c>
 8107a68:	42a3      	cmp	r3, r4
 8107a6a:	d9fa      	bls.n	8107a62 <_free_r+0x42>
 8107a6c:	6811      	ldr	r1, [r2, #0]
 8107a6e:	1850      	adds	r0, r2, r1
 8107a70:	42a0      	cmp	r0, r4
 8107a72:	d10b      	bne.n	8107a8c <_free_r+0x6c>
 8107a74:	6820      	ldr	r0, [r4, #0]
 8107a76:	4401      	add	r1, r0
 8107a78:	1850      	adds	r0, r2, r1
 8107a7a:	4283      	cmp	r3, r0
 8107a7c:	6011      	str	r1, [r2, #0]
 8107a7e:	d1e0      	bne.n	8107a42 <_free_r+0x22>
 8107a80:	6818      	ldr	r0, [r3, #0]
 8107a82:	685b      	ldr	r3, [r3, #4]
 8107a84:	6053      	str	r3, [r2, #4]
 8107a86:	4408      	add	r0, r1
 8107a88:	6010      	str	r0, [r2, #0]
 8107a8a:	e7da      	b.n	8107a42 <_free_r+0x22>
 8107a8c:	d902      	bls.n	8107a94 <_free_r+0x74>
 8107a8e:	230c      	movs	r3, #12
 8107a90:	602b      	str	r3, [r5, #0]
 8107a92:	e7d6      	b.n	8107a42 <_free_r+0x22>
 8107a94:	6820      	ldr	r0, [r4, #0]
 8107a96:	1821      	adds	r1, r4, r0
 8107a98:	428b      	cmp	r3, r1
 8107a9a:	bf04      	itt	eq
 8107a9c:	6819      	ldreq	r1, [r3, #0]
 8107a9e:	685b      	ldreq	r3, [r3, #4]
 8107aa0:	6063      	str	r3, [r4, #4]
 8107aa2:	bf04      	itt	eq
 8107aa4:	1809      	addeq	r1, r1, r0
 8107aa6:	6021      	streq	r1, [r4, #0]
 8107aa8:	6054      	str	r4, [r2, #4]
 8107aaa:	e7ca      	b.n	8107a42 <_free_r+0x22>
 8107aac:	bd38      	pop	{r3, r4, r5, pc}
 8107aae:	bf00      	nop
 8107ab0:	10000e2c 	.word	0x10000e2c

08107ab4 <sbrk_aligned>:
 8107ab4:	b570      	push	{r4, r5, r6, lr}
 8107ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8107af4 <sbrk_aligned+0x40>)
 8107ab8:	460c      	mov	r4, r1
 8107aba:	6831      	ldr	r1, [r6, #0]
 8107abc:	4605      	mov	r5, r0
 8107abe:	b911      	cbnz	r1, 8107ac6 <sbrk_aligned+0x12>
 8107ac0:	f000 fca4 	bl	810840c <_sbrk_r>
 8107ac4:	6030      	str	r0, [r6, #0]
 8107ac6:	4621      	mov	r1, r4
 8107ac8:	4628      	mov	r0, r5
 8107aca:	f000 fc9f 	bl	810840c <_sbrk_r>
 8107ace:	1c43      	adds	r3, r0, #1
 8107ad0:	d103      	bne.n	8107ada <sbrk_aligned+0x26>
 8107ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8107ad6:	4620      	mov	r0, r4
 8107ad8:	bd70      	pop	{r4, r5, r6, pc}
 8107ada:	1cc4      	adds	r4, r0, #3
 8107adc:	f024 0403 	bic.w	r4, r4, #3
 8107ae0:	42a0      	cmp	r0, r4
 8107ae2:	d0f8      	beq.n	8107ad6 <sbrk_aligned+0x22>
 8107ae4:	1a21      	subs	r1, r4, r0
 8107ae6:	4628      	mov	r0, r5
 8107ae8:	f000 fc90 	bl	810840c <_sbrk_r>
 8107aec:	3001      	adds	r0, #1
 8107aee:	d1f2      	bne.n	8107ad6 <sbrk_aligned+0x22>
 8107af0:	e7ef      	b.n	8107ad2 <sbrk_aligned+0x1e>
 8107af2:	bf00      	nop
 8107af4:	10000e28 	.word	0x10000e28

08107af8 <_malloc_r>:
 8107af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107afc:	1ccd      	adds	r5, r1, #3
 8107afe:	f025 0503 	bic.w	r5, r5, #3
 8107b02:	3508      	adds	r5, #8
 8107b04:	2d0c      	cmp	r5, #12
 8107b06:	bf38      	it	cc
 8107b08:	250c      	movcc	r5, #12
 8107b0a:	2d00      	cmp	r5, #0
 8107b0c:	4606      	mov	r6, r0
 8107b0e:	db01      	blt.n	8107b14 <_malloc_r+0x1c>
 8107b10:	42a9      	cmp	r1, r5
 8107b12:	d904      	bls.n	8107b1e <_malloc_r+0x26>
 8107b14:	230c      	movs	r3, #12
 8107b16:	6033      	str	r3, [r6, #0]
 8107b18:	2000      	movs	r0, #0
 8107b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8107bf4 <_malloc_r+0xfc>
 8107b22:	f000 f869 	bl	8107bf8 <__malloc_lock>
 8107b26:	f8d8 3000 	ldr.w	r3, [r8]
 8107b2a:	461c      	mov	r4, r3
 8107b2c:	bb44      	cbnz	r4, 8107b80 <_malloc_r+0x88>
 8107b2e:	4629      	mov	r1, r5
 8107b30:	4630      	mov	r0, r6
 8107b32:	f7ff ffbf 	bl	8107ab4 <sbrk_aligned>
 8107b36:	1c43      	adds	r3, r0, #1
 8107b38:	4604      	mov	r4, r0
 8107b3a:	d158      	bne.n	8107bee <_malloc_r+0xf6>
 8107b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8107b40:	4627      	mov	r7, r4
 8107b42:	2f00      	cmp	r7, #0
 8107b44:	d143      	bne.n	8107bce <_malloc_r+0xd6>
 8107b46:	2c00      	cmp	r4, #0
 8107b48:	d04b      	beq.n	8107be2 <_malloc_r+0xea>
 8107b4a:	6823      	ldr	r3, [r4, #0]
 8107b4c:	4639      	mov	r1, r7
 8107b4e:	4630      	mov	r0, r6
 8107b50:	eb04 0903 	add.w	r9, r4, r3
 8107b54:	f000 fc5a 	bl	810840c <_sbrk_r>
 8107b58:	4581      	cmp	r9, r0
 8107b5a:	d142      	bne.n	8107be2 <_malloc_r+0xea>
 8107b5c:	6821      	ldr	r1, [r4, #0]
 8107b5e:	1a6d      	subs	r5, r5, r1
 8107b60:	4629      	mov	r1, r5
 8107b62:	4630      	mov	r0, r6
 8107b64:	f7ff ffa6 	bl	8107ab4 <sbrk_aligned>
 8107b68:	3001      	adds	r0, #1
 8107b6a:	d03a      	beq.n	8107be2 <_malloc_r+0xea>
 8107b6c:	6823      	ldr	r3, [r4, #0]
 8107b6e:	442b      	add	r3, r5
 8107b70:	6023      	str	r3, [r4, #0]
 8107b72:	f8d8 3000 	ldr.w	r3, [r8]
 8107b76:	685a      	ldr	r2, [r3, #4]
 8107b78:	bb62      	cbnz	r2, 8107bd4 <_malloc_r+0xdc>
 8107b7a:	f8c8 7000 	str.w	r7, [r8]
 8107b7e:	e00f      	b.n	8107ba0 <_malloc_r+0xa8>
 8107b80:	6822      	ldr	r2, [r4, #0]
 8107b82:	1b52      	subs	r2, r2, r5
 8107b84:	d420      	bmi.n	8107bc8 <_malloc_r+0xd0>
 8107b86:	2a0b      	cmp	r2, #11
 8107b88:	d917      	bls.n	8107bba <_malloc_r+0xc2>
 8107b8a:	1961      	adds	r1, r4, r5
 8107b8c:	42a3      	cmp	r3, r4
 8107b8e:	6025      	str	r5, [r4, #0]
 8107b90:	bf18      	it	ne
 8107b92:	6059      	strne	r1, [r3, #4]
 8107b94:	6863      	ldr	r3, [r4, #4]
 8107b96:	bf08      	it	eq
 8107b98:	f8c8 1000 	streq.w	r1, [r8]
 8107b9c:	5162      	str	r2, [r4, r5]
 8107b9e:	604b      	str	r3, [r1, #4]
 8107ba0:	4630      	mov	r0, r6
 8107ba2:	f000 f82f 	bl	8107c04 <__malloc_unlock>
 8107ba6:	f104 000b 	add.w	r0, r4, #11
 8107baa:	1d23      	adds	r3, r4, #4
 8107bac:	f020 0007 	bic.w	r0, r0, #7
 8107bb0:	1ac2      	subs	r2, r0, r3
 8107bb2:	bf1c      	itt	ne
 8107bb4:	1a1b      	subne	r3, r3, r0
 8107bb6:	50a3      	strne	r3, [r4, r2]
 8107bb8:	e7af      	b.n	8107b1a <_malloc_r+0x22>
 8107bba:	6862      	ldr	r2, [r4, #4]
 8107bbc:	42a3      	cmp	r3, r4
 8107bbe:	bf0c      	ite	eq
 8107bc0:	f8c8 2000 	streq.w	r2, [r8]
 8107bc4:	605a      	strne	r2, [r3, #4]
 8107bc6:	e7eb      	b.n	8107ba0 <_malloc_r+0xa8>
 8107bc8:	4623      	mov	r3, r4
 8107bca:	6864      	ldr	r4, [r4, #4]
 8107bcc:	e7ae      	b.n	8107b2c <_malloc_r+0x34>
 8107bce:	463c      	mov	r4, r7
 8107bd0:	687f      	ldr	r7, [r7, #4]
 8107bd2:	e7b6      	b.n	8107b42 <_malloc_r+0x4a>
 8107bd4:	461a      	mov	r2, r3
 8107bd6:	685b      	ldr	r3, [r3, #4]
 8107bd8:	42a3      	cmp	r3, r4
 8107bda:	d1fb      	bne.n	8107bd4 <_malloc_r+0xdc>
 8107bdc:	2300      	movs	r3, #0
 8107bde:	6053      	str	r3, [r2, #4]
 8107be0:	e7de      	b.n	8107ba0 <_malloc_r+0xa8>
 8107be2:	230c      	movs	r3, #12
 8107be4:	6033      	str	r3, [r6, #0]
 8107be6:	4630      	mov	r0, r6
 8107be8:	f000 f80c 	bl	8107c04 <__malloc_unlock>
 8107bec:	e794      	b.n	8107b18 <_malloc_r+0x20>
 8107bee:	6005      	str	r5, [r0, #0]
 8107bf0:	e7d6      	b.n	8107ba0 <_malloc_r+0xa8>
 8107bf2:	bf00      	nop
 8107bf4:	10000e2c 	.word	0x10000e2c

08107bf8 <__malloc_lock>:
 8107bf8:	4801      	ldr	r0, [pc, #4]	@ (8107c00 <__malloc_lock+0x8>)
 8107bfa:	f7ff bf00 	b.w	81079fe <__retarget_lock_acquire_recursive>
 8107bfe:	bf00      	nop
 8107c00:	10000e24 	.word	0x10000e24

08107c04 <__malloc_unlock>:
 8107c04:	4801      	ldr	r0, [pc, #4]	@ (8107c0c <__malloc_unlock+0x8>)
 8107c06:	f7ff befb 	b.w	8107a00 <__retarget_lock_release_recursive>
 8107c0a:	bf00      	nop
 8107c0c:	10000e24 	.word	0x10000e24

08107c10 <__sfputc_r>:
 8107c10:	6893      	ldr	r3, [r2, #8]
 8107c12:	3b01      	subs	r3, #1
 8107c14:	2b00      	cmp	r3, #0
 8107c16:	b410      	push	{r4}
 8107c18:	6093      	str	r3, [r2, #8]
 8107c1a:	da08      	bge.n	8107c2e <__sfputc_r+0x1e>
 8107c1c:	6994      	ldr	r4, [r2, #24]
 8107c1e:	42a3      	cmp	r3, r4
 8107c20:	db01      	blt.n	8107c26 <__sfputc_r+0x16>
 8107c22:	290a      	cmp	r1, #10
 8107c24:	d103      	bne.n	8107c2e <__sfputc_r+0x1e>
 8107c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8107c2a:	f7ff bdda 	b.w	81077e2 <__swbuf_r>
 8107c2e:	6813      	ldr	r3, [r2, #0]
 8107c30:	1c58      	adds	r0, r3, #1
 8107c32:	6010      	str	r0, [r2, #0]
 8107c34:	7019      	strb	r1, [r3, #0]
 8107c36:	4608      	mov	r0, r1
 8107c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8107c3c:	4770      	bx	lr

08107c3e <__sfputs_r>:
 8107c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107c40:	4606      	mov	r6, r0
 8107c42:	460f      	mov	r7, r1
 8107c44:	4614      	mov	r4, r2
 8107c46:	18d5      	adds	r5, r2, r3
 8107c48:	42ac      	cmp	r4, r5
 8107c4a:	d101      	bne.n	8107c50 <__sfputs_r+0x12>
 8107c4c:	2000      	movs	r0, #0
 8107c4e:	e007      	b.n	8107c60 <__sfputs_r+0x22>
 8107c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107c54:	463a      	mov	r2, r7
 8107c56:	4630      	mov	r0, r6
 8107c58:	f7ff ffda 	bl	8107c10 <__sfputc_r>
 8107c5c:	1c43      	adds	r3, r0, #1
 8107c5e:	d1f3      	bne.n	8107c48 <__sfputs_r+0xa>
 8107c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08107c64 <_vfiprintf_r>:
 8107c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107c68:	460d      	mov	r5, r1
 8107c6a:	b09d      	sub	sp, #116	@ 0x74
 8107c6c:	4614      	mov	r4, r2
 8107c6e:	4698      	mov	r8, r3
 8107c70:	4606      	mov	r6, r0
 8107c72:	b118      	cbz	r0, 8107c7c <_vfiprintf_r+0x18>
 8107c74:	6a03      	ldr	r3, [r0, #32]
 8107c76:	b90b      	cbnz	r3, 8107c7c <_vfiprintf_r+0x18>
 8107c78:	f7ff fcca 	bl	8107610 <__sinit>
 8107c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8107c7e:	07d9      	lsls	r1, r3, #31
 8107c80:	d405      	bmi.n	8107c8e <_vfiprintf_r+0x2a>
 8107c82:	89ab      	ldrh	r3, [r5, #12]
 8107c84:	059a      	lsls	r2, r3, #22
 8107c86:	d402      	bmi.n	8107c8e <_vfiprintf_r+0x2a>
 8107c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8107c8a:	f7ff feb8 	bl	81079fe <__retarget_lock_acquire_recursive>
 8107c8e:	89ab      	ldrh	r3, [r5, #12]
 8107c90:	071b      	lsls	r3, r3, #28
 8107c92:	d501      	bpl.n	8107c98 <_vfiprintf_r+0x34>
 8107c94:	692b      	ldr	r3, [r5, #16]
 8107c96:	b99b      	cbnz	r3, 8107cc0 <_vfiprintf_r+0x5c>
 8107c98:	4629      	mov	r1, r5
 8107c9a:	4630      	mov	r0, r6
 8107c9c:	f7ff fde0 	bl	8107860 <__swsetup_r>
 8107ca0:	b170      	cbz	r0, 8107cc0 <_vfiprintf_r+0x5c>
 8107ca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8107ca4:	07dc      	lsls	r4, r3, #31
 8107ca6:	d504      	bpl.n	8107cb2 <_vfiprintf_r+0x4e>
 8107ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8107cac:	b01d      	add	sp, #116	@ 0x74
 8107cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107cb2:	89ab      	ldrh	r3, [r5, #12]
 8107cb4:	0598      	lsls	r0, r3, #22
 8107cb6:	d4f7      	bmi.n	8107ca8 <_vfiprintf_r+0x44>
 8107cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8107cba:	f7ff fea1 	bl	8107a00 <__retarget_lock_release_recursive>
 8107cbe:	e7f3      	b.n	8107ca8 <_vfiprintf_r+0x44>
 8107cc0:	2300      	movs	r3, #0
 8107cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8107cc4:	2320      	movs	r3, #32
 8107cc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8107cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8107cce:	2330      	movs	r3, #48	@ 0x30
 8107cd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8107e80 <_vfiprintf_r+0x21c>
 8107cd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8107cd8:	f04f 0901 	mov.w	r9, #1
 8107cdc:	4623      	mov	r3, r4
 8107cde:	469a      	mov	sl, r3
 8107ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8107ce4:	b10a      	cbz	r2, 8107cea <_vfiprintf_r+0x86>
 8107ce6:	2a25      	cmp	r2, #37	@ 0x25
 8107ce8:	d1f9      	bne.n	8107cde <_vfiprintf_r+0x7a>
 8107cea:	ebba 0b04 	subs.w	fp, sl, r4
 8107cee:	d00b      	beq.n	8107d08 <_vfiprintf_r+0xa4>
 8107cf0:	465b      	mov	r3, fp
 8107cf2:	4622      	mov	r2, r4
 8107cf4:	4629      	mov	r1, r5
 8107cf6:	4630      	mov	r0, r6
 8107cf8:	f7ff ffa1 	bl	8107c3e <__sfputs_r>
 8107cfc:	3001      	adds	r0, #1
 8107cfe:	f000 80a7 	beq.w	8107e50 <_vfiprintf_r+0x1ec>
 8107d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8107d04:	445a      	add	r2, fp
 8107d06:	9209      	str	r2, [sp, #36]	@ 0x24
 8107d08:	f89a 3000 	ldrb.w	r3, [sl]
 8107d0c:	2b00      	cmp	r3, #0
 8107d0e:	f000 809f 	beq.w	8107e50 <_vfiprintf_r+0x1ec>
 8107d12:	2300      	movs	r3, #0
 8107d14:	f04f 32ff 	mov.w	r2, #4294967295
 8107d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8107d1c:	f10a 0a01 	add.w	sl, sl, #1
 8107d20:	9304      	str	r3, [sp, #16]
 8107d22:	9307      	str	r3, [sp, #28]
 8107d24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8107d28:	931a      	str	r3, [sp, #104]	@ 0x68
 8107d2a:	4654      	mov	r4, sl
 8107d2c:	2205      	movs	r2, #5
 8107d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107d32:	4853      	ldr	r0, [pc, #332]	@ (8107e80 <_vfiprintf_r+0x21c>)
 8107d34:	f7f8 fad4 	bl	81002e0 <memchr>
 8107d38:	9a04      	ldr	r2, [sp, #16]
 8107d3a:	b9d8      	cbnz	r0, 8107d74 <_vfiprintf_r+0x110>
 8107d3c:	06d1      	lsls	r1, r2, #27
 8107d3e:	bf44      	itt	mi
 8107d40:	2320      	movmi	r3, #32
 8107d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8107d46:	0713      	lsls	r3, r2, #28
 8107d48:	bf44      	itt	mi
 8107d4a:	232b      	movmi	r3, #43	@ 0x2b
 8107d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8107d50:	f89a 3000 	ldrb.w	r3, [sl]
 8107d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8107d56:	d015      	beq.n	8107d84 <_vfiprintf_r+0x120>
 8107d58:	9a07      	ldr	r2, [sp, #28]
 8107d5a:	4654      	mov	r4, sl
 8107d5c:	2000      	movs	r0, #0
 8107d5e:	f04f 0c0a 	mov.w	ip, #10
 8107d62:	4621      	mov	r1, r4
 8107d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8107d68:	3b30      	subs	r3, #48	@ 0x30
 8107d6a:	2b09      	cmp	r3, #9
 8107d6c:	d94b      	bls.n	8107e06 <_vfiprintf_r+0x1a2>
 8107d6e:	b1b0      	cbz	r0, 8107d9e <_vfiprintf_r+0x13a>
 8107d70:	9207      	str	r2, [sp, #28]
 8107d72:	e014      	b.n	8107d9e <_vfiprintf_r+0x13a>
 8107d74:	eba0 0308 	sub.w	r3, r0, r8
 8107d78:	fa09 f303 	lsl.w	r3, r9, r3
 8107d7c:	4313      	orrs	r3, r2
 8107d7e:	9304      	str	r3, [sp, #16]
 8107d80:	46a2      	mov	sl, r4
 8107d82:	e7d2      	b.n	8107d2a <_vfiprintf_r+0xc6>
 8107d84:	9b03      	ldr	r3, [sp, #12]
 8107d86:	1d19      	adds	r1, r3, #4
 8107d88:	681b      	ldr	r3, [r3, #0]
 8107d8a:	9103      	str	r1, [sp, #12]
 8107d8c:	2b00      	cmp	r3, #0
 8107d8e:	bfbb      	ittet	lt
 8107d90:	425b      	neglt	r3, r3
 8107d92:	f042 0202 	orrlt.w	r2, r2, #2
 8107d96:	9307      	strge	r3, [sp, #28]
 8107d98:	9307      	strlt	r3, [sp, #28]
 8107d9a:	bfb8      	it	lt
 8107d9c:	9204      	strlt	r2, [sp, #16]
 8107d9e:	7823      	ldrb	r3, [r4, #0]
 8107da0:	2b2e      	cmp	r3, #46	@ 0x2e
 8107da2:	d10a      	bne.n	8107dba <_vfiprintf_r+0x156>
 8107da4:	7863      	ldrb	r3, [r4, #1]
 8107da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8107da8:	d132      	bne.n	8107e10 <_vfiprintf_r+0x1ac>
 8107daa:	9b03      	ldr	r3, [sp, #12]
 8107dac:	1d1a      	adds	r2, r3, #4
 8107dae:	681b      	ldr	r3, [r3, #0]
 8107db0:	9203      	str	r2, [sp, #12]
 8107db2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8107db6:	3402      	adds	r4, #2
 8107db8:	9305      	str	r3, [sp, #20]
 8107dba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8107e90 <_vfiprintf_r+0x22c>
 8107dbe:	7821      	ldrb	r1, [r4, #0]
 8107dc0:	2203      	movs	r2, #3
 8107dc2:	4650      	mov	r0, sl
 8107dc4:	f7f8 fa8c 	bl	81002e0 <memchr>
 8107dc8:	b138      	cbz	r0, 8107dda <_vfiprintf_r+0x176>
 8107dca:	9b04      	ldr	r3, [sp, #16]
 8107dcc:	eba0 000a 	sub.w	r0, r0, sl
 8107dd0:	2240      	movs	r2, #64	@ 0x40
 8107dd2:	4082      	lsls	r2, r0
 8107dd4:	4313      	orrs	r3, r2
 8107dd6:	3401      	adds	r4, #1
 8107dd8:	9304      	str	r3, [sp, #16]
 8107dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107dde:	4829      	ldr	r0, [pc, #164]	@ (8107e84 <_vfiprintf_r+0x220>)
 8107de0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8107de4:	2206      	movs	r2, #6
 8107de6:	f7f8 fa7b 	bl	81002e0 <memchr>
 8107dea:	2800      	cmp	r0, #0
 8107dec:	d03f      	beq.n	8107e6e <_vfiprintf_r+0x20a>
 8107dee:	4b26      	ldr	r3, [pc, #152]	@ (8107e88 <_vfiprintf_r+0x224>)
 8107df0:	bb1b      	cbnz	r3, 8107e3a <_vfiprintf_r+0x1d6>
 8107df2:	9b03      	ldr	r3, [sp, #12]
 8107df4:	3307      	adds	r3, #7
 8107df6:	f023 0307 	bic.w	r3, r3, #7
 8107dfa:	3308      	adds	r3, #8
 8107dfc:	9303      	str	r3, [sp, #12]
 8107dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107e00:	443b      	add	r3, r7
 8107e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8107e04:	e76a      	b.n	8107cdc <_vfiprintf_r+0x78>
 8107e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8107e0a:	460c      	mov	r4, r1
 8107e0c:	2001      	movs	r0, #1
 8107e0e:	e7a8      	b.n	8107d62 <_vfiprintf_r+0xfe>
 8107e10:	2300      	movs	r3, #0
 8107e12:	3401      	adds	r4, #1
 8107e14:	9305      	str	r3, [sp, #20]
 8107e16:	4619      	mov	r1, r3
 8107e18:	f04f 0c0a 	mov.w	ip, #10
 8107e1c:	4620      	mov	r0, r4
 8107e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8107e22:	3a30      	subs	r2, #48	@ 0x30
 8107e24:	2a09      	cmp	r2, #9
 8107e26:	d903      	bls.n	8107e30 <_vfiprintf_r+0x1cc>
 8107e28:	2b00      	cmp	r3, #0
 8107e2a:	d0c6      	beq.n	8107dba <_vfiprintf_r+0x156>
 8107e2c:	9105      	str	r1, [sp, #20]
 8107e2e:	e7c4      	b.n	8107dba <_vfiprintf_r+0x156>
 8107e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8107e34:	4604      	mov	r4, r0
 8107e36:	2301      	movs	r3, #1
 8107e38:	e7f0      	b.n	8107e1c <_vfiprintf_r+0x1b8>
 8107e3a:	ab03      	add	r3, sp, #12
 8107e3c:	9300      	str	r3, [sp, #0]
 8107e3e:	462a      	mov	r2, r5
 8107e40:	4b12      	ldr	r3, [pc, #72]	@ (8107e8c <_vfiprintf_r+0x228>)
 8107e42:	a904      	add	r1, sp, #16
 8107e44:	4630      	mov	r0, r6
 8107e46:	f3af 8000 	nop.w
 8107e4a:	4607      	mov	r7, r0
 8107e4c:	1c78      	adds	r0, r7, #1
 8107e4e:	d1d6      	bne.n	8107dfe <_vfiprintf_r+0x19a>
 8107e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8107e52:	07d9      	lsls	r1, r3, #31
 8107e54:	d405      	bmi.n	8107e62 <_vfiprintf_r+0x1fe>
 8107e56:	89ab      	ldrh	r3, [r5, #12]
 8107e58:	059a      	lsls	r2, r3, #22
 8107e5a:	d402      	bmi.n	8107e62 <_vfiprintf_r+0x1fe>
 8107e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8107e5e:	f7ff fdcf 	bl	8107a00 <__retarget_lock_release_recursive>
 8107e62:	89ab      	ldrh	r3, [r5, #12]
 8107e64:	065b      	lsls	r3, r3, #25
 8107e66:	f53f af1f 	bmi.w	8107ca8 <_vfiprintf_r+0x44>
 8107e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8107e6c:	e71e      	b.n	8107cac <_vfiprintf_r+0x48>
 8107e6e:	ab03      	add	r3, sp, #12
 8107e70:	9300      	str	r3, [sp, #0]
 8107e72:	462a      	mov	r2, r5
 8107e74:	4b05      	ldr	r3, [pc, #20]	@ (8107e8c <_vfiprintf_r+0x228>)
 8107e76:	a904      	add	r1, sp, #16
 8107e78:	4630      	mov	r0, r6
 8107e7a:	f000 f879 	bl	8107f70 <_printf_i>
 8107e7e:	e7e4      	b.n	8107e4a <_vfiprintf_r+0x1e6>
 8107e80:	0810848c 	.word	0x0810848c
 8107e84:	08108496 	.word	0x08108496
 8107e88:	00000000 	.word	0x00000000
 8107e8c:	08107c3f 	.word	0x08107c3f
 8107e90:	08108492 	.word	0x08108492

08107e94 <_printf_common>:
 8107e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107e98:	4616      	mov	r6, r2
 8107e9a:	4698      	mov	r8, r3
 8107e9c:	688a      	ldr	r2, [r1, #8]
 8107e9e:	690b      	ldr	r3, [r1, #16]
 8107ea0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8107ea4:	4293      	cmp	r3, r2
 8107ea6:	bfb8      	it	lt
 8107ea8:	4613      	movlt	r3, r2
 8107eaa:	6033      	str	r3, [r6, #0]
 8107eac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8107eb0:	4607      	mov	r7, r0
 8107eb2:	460c      	mov	r4, r1
 8107eb4:	b10a      	cbz	r2, 8107eba <_printf_common+0x26>
 8107eb6:	3301      	adds	r3, #1
 8107eb8:	6033      	str	r3, [r6, #0]
 8107eba:	6823      	ldr	r3, [r4, #0]
 8107ebc:	0699      	lsls	r1, r3, #26
 8107ebe:	bf42      	ittt	mi
 8107ec0:	6833      	ldrmi	r3, [r6, #0]
 8107ec2:	3302      	addmi	r3, #2
 8107ec4:	6033      	strmi	r3, [r6, #0]
 8107ec6:	6825      	ldr	r5, [r4, #0]
 8107ec8:	f015 0506 	ands.w	r5, r5, #6
 8107ecc:	d106      	bne.n	8107edc <_printf_common+0x48>
 8107ece:	f104 0a19 	add.w	sl, r4, #25
 8107ed2:	68e3      	ldr	r3, [r4, #12]
 8107ed4:	6832      	ldr	r2, [r6, #0]
 8107ed6:	1a9b      	subs	r3, r3, r2
 8107ed8:	42ab      	cmp	r3, r5
 8107eda:	dc26      	bgt.n	8107f2a <_printf_common+0x96>
 8107edc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8107ee0:	6822      	ldr	r2, [r4, #0]
 8107ee2:	3b00      	subs	r3, #0
 8107ee4:	bf18      	it	ne
 8107ee6:	2301      	movne	r3, #1
 8107ee8:	0692      	lsls	r2, r2, #26
 8107eea:	d42b      	bmi.n	8107f44 <_printf_common+0xb0>
 8107eec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8107ef0:	4641      	mov	r1, r8
 8107ef2:	4638      	mov	r0, r7
 8107ef4:	47c8      	blx	r9
 8107ef6:	3001      	adds	r0, #1
 8107ef8:	d01e      	beq.n	8107f38 <_printf_common+0xa4>
 8107efa:	6823      	ldr	r3, [r4, #0]
 8107efc:	6922      	ldr	r2, [r4, #16]
 8107efe:	f003 0306 	and.w	r3, r3, #6
 8107f02:	2b04      	cmp	r3, #4
 8107f04:	bf02      	ittt	eq
 8107f06:	68e5      	ldreq	r5, [r4, #12]
 8107f08:	6833      	ldreq	r3, [r6, #0]
 8107f0a:	1aed      	subeq	r5, r5, r3
 8107f0c:	68a3      	ldr	r3, [r4, #8]
 8107f0e:	bf0c      	ite	eq
 8107f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8107f14:	2500      	movne	r5, #0
 8107f16:	4293      	cmp	r3, r2
 8107f18:	bfc4      	itt	gt
 8107f1a:	1a9b      	subgt	r3, r3, r2
 8107f1c:	18ed      	addgt	r5, r5, r3
 8107f1e:	2600      	movs	r6, #0
 8107f20:	341a      	adds	r4, #26
 8107f22:	42b5      	cmp	r5, r6
 8107f24:	d11a      	bne.n	8107f5c <_printf_common+0xc8>
 8107f26:	2000      	movs	r0, #0
 8107f28:	e008      	b.n	8107f3c <_printf_common+0xa8>
 8107f2a:	2301      	movs	r3, #1
 8107f2c:	4652      	mov	r2, sl
 8107f2e:	4641      	mov	r1, r8
 8107f30:	4638      	mov	r0, r7
 8107f32:	47c8      	blx	r9
 8107f34:	3001      	adds	r0, #1
 8107f36:	d103      	bne.n	8107f40 <_printf_common+0xac>
 8107f38:	f04f 30ff 	mov.w	r0, #4294967295
 8107f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107f40:	3501      	adds	r5, #1
 8107f42:	e7c6      	b.n	8107ed2 <_printf_common+0x3e>
 8107f44:	18e1      	adds	r1, r4, r3
 8107f46:	1c5a      	adds	r2, r3, #1
 8107f48:	2030      	movs	r0, #48	@ 0x30
 8107f4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8107f4e:	4422      	add	r2, r4
 8107f50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8107f54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8107f58:	3302      	adds	r3, #2
 8107f5a:	e7c7      	b.n	8107eec <_printf_common+0x58>
 8107f5c:	2301      	movs	r3, #1
 8107f5e:	4622      	mov	r2, r4
 8107f60:	4641      	mov	r1, r8
 8107f62:	4638      	mov	r0, r7
 8107f64:	47c8      	blx	r9
 8107f66:	3001      	adds	r0, #1
 8107f68:	d0e6      	beq.n	8107f38 <_printf_common+0xa4>
 8107f6a:	3601      	adds	r6, #1
 8107f6c:	e7d9      	b.n	8107f22 <_printf_common+0x8e>
	...

08107f70 <_printf_i>:
 8107f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107f74:	7e0f      	ldrb	r7, [r1, #24]
 8107f76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8107f78:	2f78      	cmp	r7, #120	@ 0x78
 8107f7a:	4691      	mov	r9, r2
 8107f7c:	4680      	mov	r8, r0
 8107f7e:	460c      	mov	r4, r1
 8107f80:	469a      	mov	sl, r3
 8107f82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8107f86:	d807      	bhi.n	8107f98 <_printf_i+0x28>
 8107f88:	2f62      	cmp	r7, #98	@ 0x62
 8107f8a:	d80a      	bhi.n	8107fa2 <_printf_i+0x32>
 8107f8c:	2f00      	cmp	r7, #0
 8107f8e:	f000 80d1 	beq.w	8108134 <_printf_i+0x1c4>
 8107f92:	2f58      	cmp	r7, #88	@ 0x58
 8107f94:	f000 80b8 	beq.w	8108108 <_printf_i+0x198>
 8107f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8107f9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8107fa0:	e03a      	b.n	8108018 <_printf_i+0xa8>
 8107fa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8107fa6:	2b15      	cmp	r3, #21
 8107fa8:	d8f6      	bhi.n	8107f98 <_printf_i+0x28>
 8107faa:	a101      	add	r1, pc, #4	@ (adr r1, 8107fb0 <_printf_i+0x40>)
 8107fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8107fb0:	08108009 	.word	0x08108009
 8107fb4:	0810801d 	.word	0x0810801d
 8107fb8:	08107f99 	.word	0x08107f99
 8107fbc:	08107f99 	.word	0x08107f99
 8107fc0:	08107f99 	.word	0x08107f99
 8107fc4:	08107f99 	.word	0x08107f99
 8107fc8:	0810801d 	.word	0x0810801d
 8107fcc:	08107f99 	.word	0x08107f99
 8107fd0:	08107f99 	.word	0x08107f99
 8107fd4:	08107f99 	.word	0x08107f99
 8107fd8:	08107f99 	.word	0x08107f99
 8107fdc:	0810811b 	.word	0x0810811b
 8107fe0:	08108047 	.word	0x08108047
 8107fe4:	081080d5 	.word	0x081080d5
 8107fe8:	08107f99 	.word	0x08107f99
 8107fec:	08107f99 	.word	0x08107f99
 8107ff0:	0810813d 	.word	0x0810813d
 8107ff4:	08107f99 	.word	0x08107f99
 8107ff8:	08108047 	.word	0x08108047
 8107ffc:	08107f99 	.word	0x08107f99
 8108000:	08107f99 	.word	0x08107f99
 8108004:	081080dd 	.word	0x081080dd
 8108008:	6833      	ldr	r3, [r6, #0]
 810800a:	1d1a      	adds	r2, r3, #4
 810800c:	681b      	ldr	r3, [r3, #0]
 810800e:	6032      	str	r2, [r6, #0]
 8108010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8108014:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8108018:	2301      	movs	r3, #1
 810801a:	e09c      	b.n	8108156 <_printf_i+0x1e6>
 810801c:	6833      	ldr	r3, [r6, #0]
 810801e:	6820      	ldr	r0, [r4, #0]
 8108020:	1d19      	adds	r1, r3, #4
 8108022:	6031      	str	r1, [r6, #0]
 8108024:	0606      	lsls	r6, r0, #24
 8108026:	d501      	bpl.n	810802c <_printf_i+0xbc>
 8108028:	681d      	ldr	r5, [r3, #0]
 810802a:	e003      	b.n	8108034 <_printf_i+0xc4>
 810802c:	0645      	lsls	r5, r0, #25
 810802e:	d5fb      	bpl.n	8108028 <_printf_i+0xb8>
 8108030:	f9b3 5000 	ldrsh.w	r5, [r3]
 8108034:	2d00      	cmp	r5, #0
 8108036:	da03      	bge.n	8108040 <_printf_i+0xd0>
 8108038:	232d      	movs	r3, #45	@ 0x2d
 810803a:	426d      	negs	r5, r5
 810803c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8108040:	4858      	ldr	r0, [pc, #352]	@ (81081a4 <_printf_i+0x234>)
 8108042:	230a      	movs	r3, #10
 8108044:	e011      	b.n	810806a <_printf_i+0xfa>
 8108046:	6821      	ldr	r1, [r4, #0]
 8108048:	6833      	ldr	r3, [r6, #0]
 810804a:	0608      	lsls	r0, r1, #24
 810804c:	f853 5b04 	ldr.w	r5, [r3], #4
 8108050:	d402      	bmi.n	8108058 <_printf_i+0xe8>
 8108052:	0649      	lsls	r1, r1, #25
 8108054:	bf48      	it	mi
 8108056:	b2ad      	uxthmi	r5, r5
 8108058:	2f6f      	cmp	r7, #111	@ 0x6f
 810805a:	4852      	ldr	r0, [pc, #328]	@ (81081a4 <_printf_i+0x234>)
 810805c:	6033      	str	r3, [r6, #0]
 810805e:	bf14      	ite	ne
 8108060:	230a      	movne	r3, #10
 8108062:	2308      	moveq	r3, #8
 8108064:	2100      	movs	r1, #0
 8108066:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810806a:	6866      	ldr	r6, [r4, #4]
 810806c:	60a6      	str	r6, [r4, #8]
 810806e:	2e00      	cmp	r6, #0
 8108070:	db05      	blt.n	810807e <_printf_i+0x10e>
 8108072:	6821      	ldr	r1, [r4, #0]
 8108074:	432e      	orrs	r6, r5
 8108076:	f021 0104 	bic.w	r1, r1, #4
 810807a:	6021      	str	r1, [r4, #0]
 810807c:	d04b      	beq.n	8108116 <_printf_i+0x1a6>
 810807e:	4616      	mov	r6, r2
 8108080:	fbb5 f1f3 	udiv	r1, r5, r3
 8108084:	fb03 5711 	mls	r7, r3, r1, r5
 8108088:	5dc7      	ldrb	r7, [r0, r7]
 810808a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810808e:	462f      	mov	r7, r5
 8108090:	42bb      	cmp	r3, r7
 8108092:	460d      	mov	r5, r1
 8108094:	d9f4      	bls.n	8108080 <_printf_i+0x110>
 8108096:	2b08      	cmp	r3, #8
 8108098:	d10b      	bne.n	81080b2 <_printf_i+0x142>
 810809a:	6823      	ldr	r3, [r4, #0]
 810809c:	07df      	lsls	r7, r3, #31
 810809e:	d508      	bpl.n	81080b2 <_printf_i+0x142>
 81080a0:	6923      	ldr	r3, [r4, #16]
 81080a2:	6861      	ldr	r1, [r4, #4]
 81080a4:	4299      	cmp	r1, r3
 81080a6:	bfde      	ittt	le
 81080a8:	2330      	movle	r3, #48	@ 0x30
 81080aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 81080ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 81080b2:	1b92      	subs	r2, r2, r6
 81080b4:	6122      	str	r2, [r4, #16]
 81080b6:	f8cd a000 	str.w	sl, [sp]
 81080ba:	464b      	mov	r3, r9
 81080bc:	aa03      	add	r2, sp, #12
 81080be:	4621      	mov	r1, r4
 81080c0:	4640      	mov	r0, r8
 81080c2:	f7ff fee7 	bl	8107e94 <_printf_common>
 81080c6:	3001      	adds	r0, #1
 81080c8:	d14a      	bne.n	8108160 <_printf_i+0x1f0>
 81080ca:	f04f 30ff 	mov.w	r0, #4294967295
 81080ce:	b004      	add	sp, #16
 81080d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81080d4:	6823      	ldr	r3, [r4, #0]
 81080d6:	f043 0320 	orr.w	r3, r3, #32
 81080da:	6023      	str	r3, [r4, #0]
 81080dc:	4832      	ldr	r0, [pc, #200]	@ (81081a8 <_printf_i+0x238>)
 81080de:	2778      	movs	r7, #120	@ 0x78
 81080e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 81080e4:	6823      	ldr	r3, [r4, #0]
 81080e6:	6831      	ldr	r1, [r6, #0]
 81080e8:	061f      	lsls	r7, r3, #24
 81080ea:	f851 5b04 	ldr.w	r5, [r1], #4
 81080ee:	d402      	bmi.n	81080f6 <_printf_i+0x186>
 81080f0:	065f      	lsls	r7, r3, #25
 81080f2:	bf48      	it	mi
 81080f4:	b2ad      	uxthmi	r5, r5
 81080f6:	6031      	str	r1, [r6, #0]
 81080f8:	07d9      	lsls	r1, r3, #31
 81080fa:	bf44      	itt	mi
 81080fc:	f043 0320 	orrmi.w	r3, r3, #32
 8108100:	6023      	strmi	r3, [r4, #0]
 8108102:	b11d      	cbz	r5, 810810c <_printf_i+0x19c>
 8108104:	2310      	movs	r3, #16
 8108106:	e7ad      	b.n	8108064 <_printf_i+0xf4>
 8108108:	4826      	ldr	r0, [pc, #152]	@ (81081a4 <_printf_i+0x234>)
 810810a:	e7e9      	b.n	81080e0 <_printf_i+0x170>
 810810c:	6823      	ldr	r3, [r4, #0]
 810810e:	f023 0320 	bic.w	r3, r3, #32
 8108112:	6023      	str	r3, [r4, #0]
 8108114:	e7f6      	b.n	8108104 <_printf_i+0x194>
 8108116:	4616      	mov	r6, r2
 8108118:	e7bd      	b.n	8108096 <_printf_i+0x126>
 810811a:	6833      	ldr	r3, [r6, #0]
 810811c:	6825      	ldr	r5, [r4, #0]
 810811e:	6961      	ldr	r1, [r4, #20]
 8108120:	1d18      	adds	r0, r3, #4
 8108122:	6030      	str	r0, [r6, #0]
 8108124:	062e      	lsls	r6, r5, #24
 8108126:	681b      	ldr	r3, [r3, #0]
 8108128:	d501      	bpl.n	810812e <_printf_i+0x1be>
 810812a:	6019      	str	r1, [r3, #0]
 810812c:	e002      	b.n	8108134 <_printf_i+0x1c4>
 810812e:	0668      	lsls	r0, r5, #25
 8108130:	d5fb      	bpl.n	810812a <_printf_i+0x1ba>
 8108132:	8019      	strh	r1, [r3, #0]
 8108134:	2300      	movs	r3, #0
 8108136:	6123      	str	r3, [r4, #16]
 8108138:	4616      	mov	r6, r2
 810813a:	e7bc      	b.n	81080b6 <_printf_i+0x146>
 810813c:	6833      	ldr	r3, [r6, #0]
 810813e:	1d1a      	adds	r2, r3, #4
 8108140:	6032      	str	r2, [r6, #0]
 8108142:	681e      	ldr	r6, [r3, #0]
 8108144:	6862      	ldr	r2, [r4, #4]
 8108146:	2100      	movs	r1, #0
 8108148:	4630      	mov	r0, r6
 810814a:	f7f8 f8c9 	bl	81002e0 <memchr>
 810814e:	b108      	cbz	r0, 8108154 <_printf_i+0x1e4>
 8108150:	1b80      	subs	r0, r0, r6
 8108152:	6060      	str	r0, [r4, #4]
 8108154:	6863      	ldr	r3, [r4, #4]
 8108156:	6123      	str	r3, [r4, #16]
 8108158:	2300      	movs	r3, #0
 810815a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810815e:	e7aa      	b.n	81080b6 <_printf_i+0x146>
 8108160:	6923      	ldr	r3, [r4, #16]
 8108162:	4632      	mov	r2, r6
 8108164:	4649      	mov	r1, r9
 8108166:	4640      	mov	r0, r8
 8108168:	47d0      	blx	sl
 810816a:	3001      	adds	r0, #1
 810816c:	d0ad      	beq.n	81080ca <_printf_i+0x15a>
 810816e:	6823      	ldr	r3, [r4, #0]
 8108170:	079b      	lsls	r3, r3, #30
 8108172:	d413      	bmi.n	810819c <_printf_i+0x22c>
 8108174:	68e0      	ldr	r0, [r4, #12]
 8108176:	9b03      	ldr	r3, [sp, #12]
 8108178:	4298      	cmp	r0, r3
 810817a:	bfb8      	it	lt
 810817c:	4618      	movlt	r0, r3
 810817e:	e7a6      	b.n	81080ce <_printf_i+0x15e>
 8108180:	2301      	movs	r3, #1
 8108182:	4632      	mov	r2, r6
 8108184:	4649      	mov	r1, r9
 8108186:	4640      	mov	r0, r8
 8108188:	47d0      	blx	sl
 810818a:	3001      	adds	r0, #1
 810818c:	d09d      	beq.n	81080ca <_printf_i+0x15a>
 810818e:	3501      	adds	r5, #1
 8108190:	68e3      	ldr	r3, [r4, #12]
 8108192:	9903      	ldr	r1, [sp, #12]
 8108194:	1a5b      	subs	r3, r3, r1
 8108196:	42ab      	cmp	r3, r5
 8108198:	dcf2      	bgt.n	8108180 <_printf_i+0x210>
 810819a:	e7eb      	b.n	8108174 <_printf_i+0x204>
 810819c:	2500      	movs	r5, #0
 810819e:	f104 0619 	add.w	r6, r4, #25
 81081a2:	e7f5      	b.n	8108190 <_printf_i+0x220>
 81081a4:	0810849d 	.word	0x0810849d
 81081a8:	081084ae 	.word	0x081084ae

081081ac <__sflush_r>:
 81081ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81081b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81081b4:	0716      	lsls	r6, r2, #28
 81081b6:	4605      	mov	r5, r0
 81081b8:	460c      	mov	r4, r1
 81081ba:	d454      	bmi.n	8108266 <__sflush_r+0xba>
 81081bc:	684b      	ldr	r3, [r1, #4]
 81081be:	2b00      	cmp	r3, #0
 81081c0:	dc02      	bgt.n	81081c8 <__sflush_r+0x1c>
 81081c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 81081c4:	2b00      	cmp	r3, #0
 81081c6:	dd48      	ble.n	810825a <__sflush_r+0xae>
 81081c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81081ca:	2e00      	cmp	r6, #0
 81081cc:	d045      	beq.n	810825a <__sflush_r+0xae>
 81081ce:	2300      	movs	r3, #0
 81081d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 81081d4:	682f      	ldr	r7, [r5, #0]
 81081d6:	6a21      	ldr	r1, [r4, #32]
 81081d8:	602b      	str	r3, [r5, #0]
 81081da:	d030      	beq.n	810823e <__sflush_r+0x92>
 81081dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 81081de:	89a3      	ldrh	r3, [r4, #12]
 81081e0:	0759      	lsls	r1, r3, #29
 81081e2:	d505      	bpl.n	81081f0 <__sflush_r+0x44>
 81081e4:	6863      	ldr	r3, [r4, #4]
 81081e6:	1ad2      	subs	r2, r2, r3
 81081e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81081ea:	b10b      	cbz	r3, 81081f0 <__sflush_r+0x44>
 81081ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81081ee:	1ad2      	subs	r2, r2, r3
 81081f0:	2300      	movs	r3, #0
 81081f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81081f4:	6a21      	ldr	r1, [r4, #32]
 81081f6:	4628      	mov	r0, r5
 81081f8:	47b0      	blx	r6
 81081fa:	1c43      	adds	r3, r0, #1
 81081fc:	89a3      	ldrh	r3, [r4, #12]
 81081fe:	d106      	bne.n	810820e <__sflush_r+0x62>
 8108200:	6829      	ldr	r1, [r5, #0]
 8108202:	291d      	cmp	r1, #29
 8108204:	d82b      	bhi.n	810825e <__sflush_r+0xb2>
 8108206:	4a2a      	ldr	r2, [pc, #168]	@ (81082b0 <__sflush_r+0x104>)
 8108208:	40ca      	lsrs	r2, r1
 810820a:	07d6      	lsls	r6, r2, #31
 810820c:	d527      	bpl.n	810825e <__sflush_r+0xb2>
 810820e:	2200      	movs	r2, #0
 8108210:	6062      	str	r2, [r4, #4]
 8108212:	04d9      	lsls	r1, r3, #19
 8108214:	6922      	ldr	r2, [r4, #16]
 8108216:	6022      	str	r2, [r4, #0]
 8108218:	d504      	bpl.n	8108224 <__sflush_r+0x78>
 810821a:	1c42      	adds	r2, r0, #1
 810821c:	d101      	bne.n	8108222 <__sflush_r+0x76>
 810821e:	682b      	ldr	r3, [r5, #0]
 8108220:	b903      	cbnz	r3, 8108224 <__sflush_r+0x78>
 8108222:	6560      	str	r0, [r4, #84]	@ 0x54
 8108224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8108226:	602f      	str	r7, [r5, #0]
 8108228:	b1b9      	cbz	r1, 810825a <__sflush_r+0xae>
 810822a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810822e:	4299      	cmp	r1, r3
 8108230:	d002      	beq.n	8108238 <__sflush_r+0x8c>
 8108232:	4628      	mov	r0, r5
 8108234:	f7ff fbf4 	bl	8107a20 <_free_r>
 8108238:	2300      	movs	r3, #0
 810823a:	6363      	str	r3, [r4, #52]	@ 0x34
 810823c:	e00d      	b.n	810825a <__sflush_r+0xae>
 810823e:	2301      	movs	r3, #1
 8108240:	4628      	mov	r0, r5
 8108242:	47b0      	blx	r6
 8108244:	4602      	mov	r2, r0
 8108246:	1c50      	adds	r0, r2, #1
 8108248:	d1c9      	bne.n	81081de <__sflush_r+0x32>
 810824a:	682b      	ldr	r3, [r5, #0]
 810824c:	2b00      	cmp	r3, #0
 810824e:	d0c6      	beq.n	81081de <__sflush_r+0x32>
 8108250:	2b1d      	cmp	r3, #29
 8108252:	d001      	beq.n	8108258 <__sflush_r+0xac>
 8108254:	2b16      	cmp	r3, #22
 8108256:	d11e      	bne.n	8108296 <__sflush_r+0xea>
 8108258:	602f      	str	r7, [r5, #0]
 810825a:	2000      	movs	r0, #0
 810825c:	e022      	b.n	81082a4 <__sflush_r+0xf8>
 810825e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108262:	b21b      	sxth	r3, r3
 8108264:	e01b      	b.n	810829e <__sflush_r+0xf2>
 8108266:	690f      	ldr	r7, [r1, #16]
 8108268:	2f00      	cmp	r7, #0
 810826a:	d0f6      	beq.n	810825a <__sflush_r+0xae>
 810826c:	0793      	lsls	r3, r2, #30
 810826e:	680e      	ldr	r6, [r1, #0]
 8108270:	bf08      	it	eq
 8108272:	694b      	ldreq	r3, [r1, #20]
 8108274:	600f      	str	r7, [r1, #0]
 8108276:	bf18      	it	ne
 8108278:	2300      	movne	r3, #0
 810827a:	eba6 0807 	sub.w	r8, r6, r7
 810827e:	608b      	str	r3, [r1, #8]
 8108280:	f1b8 0f00 	cmp.w	r8, #0
 8108284:	dde9      	ble.n	810825a <__sflush_r+0xae>
 8108286:	6a21      	ldr	r1, [r4, #32]
 8108288:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810828a:	4643      	mov	r3, r8
 810828c:	463a      	mov	r2, r7
 810828e:	4628      	mov	r0, r5
 8108290:	47b0      	blx	r6
 8108292:	2800      	cmp	r0, #0
 8108294:	dc08      	bgt.n	81082a8 <__sflush_r+0xfc>
 8108296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810829a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810829e:	81a3      	strh	r3, [r4, #12]
 81082a0:	f04f 30ff 	mov.w	r0, #4294967295
 81082a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81082a8:	4407      	add	r7, r0
 81082aa:	eba8 0800 	sub.w	r8, r8, r0
 81082ae:	e7e7      	b.n	8108280 <__sflush_r+0xd4>
 81082b0:	20400001 	.word	0x20400001

081082b4 <_fflush_r>:
 81082b4:	b538      	push	{r3, r4, r5, lr}
 81082b6:	690b      	ldr	r3, [r1, #16]
 81082b8:	4605      	mov	r5, r0
 81082ba:	460c      	mov	r4, r1
 81082bc:	b913      	cbnz	r3, 81082c4 <_fflush_r+0x10>
 81082be:	2500      	movs	r5, #0
 81082c0:	4628      	mov	r0, r5
 81082c2:	bd38      	pop	{r3, r4, r5, pc}
 81082c4:	b118      	cbz	r0, 81082ce <_fflush_r+0x1a>
 81082c6:	6a03      	ldr	r3, [r0, #32]
 81082c8:	b90b      	cbnz	r3, 81082ce <_fflush_r+0x1a>
 81082ca:	f7ff f9a1 	bl	8107610 <__sinit>
 81082ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81082d2:	2b00      	cmp	r3, #0
 81082d4:	d0f3      	beq.n	81082be <_fflush_r+0xa>
 81082d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 81082d8:	07d0      	lsls	r0, r2, #31
 81082da:	d404      	bmi.n	81082e6 <_fflush_r+0x32>
 81082dc:	0599      	lsls	r1, r3, #22
 81082de:	d402      	bmi.n	81082e6 <_fflush_r+0x32>
 81082e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81082e2:	f7ff fb8c 	bl	81079fe <__retarget_lock_acquire_recursive>
 81082e6:	4628      	mov	r0, r5
 81082e8:	4621      	mov	r1, r4
 81082ea:	f7ff ff5f 	bl	81081ac <__sflush_r>
 81082ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81082f0:	07da      	lsls	r2, r3, #31
 81082f2:	4605      	mov	r5, r0
 81082f4:	d4e4      	bmi.n	81082c0 <_fflush_r+0xc>
 81082f6:	89a3      	ldrh	r3, [r4, #12]
 81082f8:	059b      	lsls	r3, r3, #22
 81082fa:	d4e1      	bmi.n	81082c0 <_fflush_r+0xc>
 81082fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81082fe:	f7ff fb7f 	bl	8107a00 <__retarget_lock_release_recursive>
 8108302:	e7dd      	b.n	81082c0 <_fflush_r+0xc>

08108304 <__swhatbuf_r>:
 8108304:	b570      	push	{r4, r5, r6, lr}
 8108306:	460c      	mov	r4, r1
 8108308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810830c:	2900      	cmp	r1, #0
 810830e:	b096      	sub	sp, #88	@ 0x58
 8108310:	4615      	mov	r5, r2
 8108312:	461e      	mov	r6, r3
 8108314:	da0d      	bge.n	8108332 <__swhatbuf_r+0x2e>
 8108316:	89a3      	ldrh	r3, [r4, #12]
 8108318:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810831c:	f04f 0100 	mov.w	r1, #0
 8108320:	bf14      	ite	ne
 8108322:	2340      	movne	r3, #64	@ 0x40
 8108324:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8108328:	2000      	movs	r0, #0
 810832a:	6031      	str	r1, [r6, #0]
 810832c:	602b      	str	r3, [r5, #0]
 810832e:	b016      	add	sp, #88	@ 0x58
 8108330:	bd70      	pop	{r4, r5, r6, pc}
 8108332:	466a      	mov	r2, sp
 8108334:	f000 f848 	bl	81083c8 <_fstat_r>
 8108338:	2800      	cmp	r0, #0
 810833a:	dbec      	blt.n	8108316 <__swhatbuf_r+0x12>
 810833c:	9901      	ldr	r1, [sp, #4]
 810833e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8108342:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8108346:	4259      	negs	r1, r3
 8108348:	4159      	adcs	r1, r3
 810834a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810834e:	e7eb      	b.n	8108328 <__swhatbuf_r+0x24>

08108350 <__smakebuf_r>:
 8108350:	898b      	ldrh	r3, [r1, #12]
 8108352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8108354:	079d      	lsls	r5, r3, #30
 8108356:	4606      	mov	r6, r0
 8108358:	460c      	mov	r4, r1
 810835a:	d507      	bpl.n	810836c <__smakebuf_r+0x1c>
 810835c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8108360:	6023      	str	r3, [r4, #0]
 8108362:	6123      	str	r3, [r4, #16]
 8108364:	2301      	movs	r3, #1
 8108366:	6163      	str	r3, [r4, #20]
 8108368:	b003      	add	sp, #12
 810836a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810836c:	ab01      	add	r3, sp, #4
 810836e:	466a      	mov	r2, sp
 8108370:	f7ff ffc8 	bl	8108304 <__swhatbuf_r>
 8108374:	9f00      	ldr	r7, [sp, #0]
 8108376:	4605      	mov	r5, r0
 8108378:	4639      	mov	r1, r7
 810837a:	4630      	mov	r0, r6
 810837c:	f7ff fbbc 	bl	8107af8 <_malloc_r>
 8108380:	b948      	cbnz	r0, 8108396 <__smakebuf_r+0x46>
 8108382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108386:	059a      	lsls	r2, r3, #22
 8108388:	d4ee      	bmi.n	8108368 <__smakebuf_r+0x18>
 810838a:	f023 0303 	bic.w	r3, r3, #3
 810838e:	f043 0302 	orr.w	r3, r3, #2
 8108392:	81a3      	strh	r3, [r4, #12]
 8108394:	e7e2      	b.n	810835c <__smakebuf_r+0xc>
 8108396:	89a3      	ldrh	r3, [r4, #12]
 8108398:	6020      	str	r0, [r4, #0]
 810839a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810839e:	81a3      	strh	r3, [r4, #12]
 81083a0:	9b01      	ldr	r3, [sp, #4]
 81083a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 81083a6:	b15b      	cbz	r3, 81083c0 <__smakebuf_r+0x70>
 81083a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81083ac:	4630      	mov	r0, r6
 81083ae:	f000 f81d 	bl	81083ec <_isatty_r>
 81083b2:	b128      	cbz	r0, 81083c0 <__smakebuf_r+0x70>
 81083b4:	89a3      	ldrh	r3, [r4, #12]
 81083b6:	f023 0303 	bic.w	r3, r3, #3
 81083ba:	f043 0301 	orr.w	r3, r3, #1
 81083be:	81a3      	strh	r3, [r4, #12]
 81083c0:	89a3      	ldrh	r3, [r4, #12]
 81083c2:	431d      	orrs	r5, r3
 81083c4:	81a5      	strh	r5, [r4, #12]
 81083c6:	e7cf      	b.n	8108368 <__smakebuf_r+0x18>

081083c8 <_fstat_r>:
 81083c8:	b538      	push	{r3, r4, r5, lr}
 81083ca:	4d07      	ldr	r5, [pc, #28]	@ (81083e8 <_fstat_r+0x20>)
 81083cc:	2300      	movs	r3, #0
 81083ce:	4604      	mov	r4, r0
 81083d0:	4608      	mov	r0, r1
 81083d2:	4611      	mov	r1, r2
 81083d4:	602b      	str	r3, [r5, #0]
 81083d6:	f7f9 fa5e 	bl	8101896 <_fstat>
 81083da:	1c43      	adds	r3, r0, #1
 81083dc:	d102      	bne.n	81083e4 <_fstat_r+0x1c>
 81083de:	682b      	ldr	r3, [r5, #0]
 81083e0:	b103      	cbz	r3, 81083e4 <_fstat_r+0x1c>
 81083e2:	6023      	str	r3, [r4, #0]
 81083e4:	bd38      	pop	{r3, r4, r5, pc}
 81083e6:	bf00      	nop
 81083e8:	10000e20 	.word	0x10000e20

081083ec <_isatty_r>:
 81083ec:	b538      	push	{r3, r4, r5, lr}
 81083ee:	4d06      	ldr	r5, [pc, #24]	@ (8108408 <_isatty_r+0x1c>)
 81083f0:	2300      	movs	r3, #0
 81083f2:	4604      	mov	r4, r0
 81083f4:	4608      	mov	r0, r1
 81083f6:	602b      	str	r3, [r5, #0]
 81083f8:	f7f9 fa5d 	bl	81018b6 <_isatty>
 81083fc:	1c43      	adds	r3, r0, #1
 81083fe:	d102      	bne.n	8108406 <_isatty_r+0x1a>
 8108400:	682b      	ldr	r3, [r5, #0]
 8108402:	b103      	cbz	r3, 8108406 <_isatty_r+0x1a>
 8108404:	6023      	str	r3, [r4, #0]
 8108406:	bd38      	pop	{r3, r4, r5, pc}
 8108408:	10000e20 	.word	0x10000e20

0810840c <_sbrk_r>:
 810840c:	b538      	push	{r3, r4, r5, lr}
 810840e:	4d06      	ldr	r5, [pc, #24]	@ (8108428 <_sbrk_r+0x1c>)
 8108410:	2300      	movs	r3, #0
 8108412:	4604      	mov	r4, r0
 8108414:	4608      	mov	r0, r1
 8108416:	602b      	str	r3, [r5, #0]
 8108418:	f7f9 fa66 	bl	81018e8 <_sbrk>
 810841c:	1c43      	adds	r3, r0, #1
 810841e:	d102      	bne.n	8108426 <_sbrk_r+0x1a>
 8108420:	682b      	ldr	r3, [r5, #0]
 8108422:	b103      	cbz	r3, 8108426 <_sbrk_r+0x1a>
 8108424:	6023      	str	r3, [r4, #0]
 8108426:	bd38      	pop	{r3, r4, r5, pc}
 8108428:	10000e20 	.word	0x10000e20

0810842c <_init>:
 810842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810842e:	bf00      	nop
 8108430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108432:	bc08      	pop	{r3}
 8108434:	469e      	mov	lr, r3
 8108436:	4770      	bx	lr

08108438 <_fini>:
 8108438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810843a:	bf00      	nop
 810843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810843e:	bc08      	pop	{r3}
 8108440:	469e      	mov	lr, r3
 8108442:	4770      	bx	lr
