
Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9f8  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0810fc98  0810fc98  00010c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810fd18  0810fd18  00010d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810fd20  0810fd20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810fd24  0810fd24  00010d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  10000000  0810fd28  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  10000014  0810fd3c  00011014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  10000074  0810fd9c  00011074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005594  100000d4  0810fdfc  000110d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  10005668  0810fdfc  00011668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000110d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d039  00000000  00000000  00011104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000663b  00000000  00000000  0004e13d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003048  00000000  00000000  00054778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000259e  00000000  00000000  000577c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000965c  00000000  00000000  00059d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003bcbd  00000000  00000000  000633ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001e7d5b  00000000  00000000  0009f077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00286dd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d3ac  00000000  00000000  00286e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  002941c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100000d4 	.word	0x100000d4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810fc80 	.word	0x0810fc80

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100000d8 	.word	0x100000d8
 81002dc:	0810fc80 	.word	0x0810fc80

081002e0 <__aeabi_uldivmod>:
 81002e0:	b953      	cbnz	r3, 81002f8 <__aeabi_uldivmod+0x18>
 81002e2:	b94a      	cbnz	r2, 81002f8 <__aeabi_uldivmod+0x18>
 81002e4:	2900      	cmp	r1, #0
 81002e6:	bf08      	it	eq
 81002e8:	2800      	cmpeq	r0, #0
 81002ea:	bf1c      	itt	ne
 81002ec:	f04f 31ff 	movne.w	r1, #4294967295
 81002f0:	f04f 30ff 	movne.w	r0, #4294967295
 81002f4:	f000 b988 	b.w	8100608 <__aeabi_idiv0>
 81002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 81002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100300:	f000 f806 	bl	8100310 <__udivmoddi4>
 8100304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810030c:	b004      	add	sp, #16
 810030e:	4770      	bx	lr

08100310 <__udivmoddi4>:
 8100310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100314:	9d08      	ldr	r5, [sp, #32]
 8100316:	468e      	mov	lr, r1
 8100318:	4604      	mov	r4, r0
 810031a:	4688      	mov	r8, r1
 810031c:	2b00      	cmp	r3, #0
 810031e:	d14a      	bne.n	81003b6 <__udivmoddi4+0xa6>
 8100320:	428a      	cmp	r2, r1
 8100322:	4617      	mov	r7, r2
 8100324:	d962      	bls.n	81003ec <__udivmoddi4+0xdc>
 8100326:	fab2 f682 	clz	r6, r2
 810032a:	b14e      	cbz	r6, 8100340 <__udivmoddi4+0x30>
 810032c:	f1c6 0320 	rsb	r3, r6, #32
 8100330:	fa01 f806 	lsl.w	r8, r1, r6
 8100334:	fa20 f303 	lsr.w	r3, r0, r3
 8100338:	40b7      	lsls	r7, r6
 810033a:	ea43 0808 	orr.w	r8, r3, r8
 810033e:	40b4      	lsls	r4, r6
 8100340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100344:	fa1f fc87 	uxth.w	ip, r7
 8100348:	fbb8 f1fe 	udiv	r1, r8, lr
 810034c:	0c23      	lsrs	r3, r4, #16
 810034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8100352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100356:	fb01 f20c 	mul.w	r2, r1, ip
 810035a:	429a      	cmp	r2, r3
 810035c:	d909      	bls.n	8100372 <__udivmoddi4+0x62>
 810035e:	18fb      	adds	r3, r7, r3
 8100360:	f101 30ff 	add.w	r0, r1, #4294967295
 8100364:	f080 80ea 	bcs.w	810053c <__udivmoddi4+0x22c>
 8100368:	429a      	cmp	r2, r3
 810036a:	f240 80e7 	bls.w	810053c <__udivmoddi4+0x22c>
 810036e:	3902      	subs	r1, #2
 8100370:	443b      	add	r3, r7
 8100372:	1a9a      	subs	r2, r3, r2
 8100374:	b2a3      	uxth	r3, r4
 8100376:	fbb2 f0fe 	udiv	r0, r2, lr
 810037a:	fb0e 2210 	mls	r2, lr, r0, r2
 810037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100382:	fb00 fc0c 	mul.w	ip, r0, ip
 8100386:	459c      	cmp	ip, r3
 8100388:	d909      	bls.n	810039e <__udivmoddi4+0x8e>
 810038a:	18fb      	adds	r3, r7, r3
 810038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8100390:	f080 80d6 	bcs.w	8100540 <__udivmoddi4+0x230>
 8100394:	459c      	cmp	ip, r3
 8100396:	f240 80d3 	bls.w	8100540 <__udivmoddi4+0x230>
 810039a:	443b      	add	r3, r7
 810039c:	3802      	subs	r0, #2
 810039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 81003a2:	eba3 030c 	sub.w	r3, r3, ip
 81003a6:	2100      	movs	r1, #0
 81003a8:	b11d      	cbz	r5, 81003b2 <__udivmoddi4+0xa2>
 81003aa:	40f3      	lsrs	r3, r6
 81003ac:	2200      	movs	r2, #0
 81003ae:	e9c5 3200 	strd	r3, r2, [r5]
 81003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b6:	428b      	cmp	r3, r1
 81003b8:	d905      	bls.n	81003c6 <__udivmoddi4+0xb6>
 81003ba:	b10d      	cbz	r5, 81003c0 <__udivmoddi4+0xb0>
 81003bc:	e9c5 0100 	strd	r0, r1, [r5]
 81003c0:	2100      	movs	r1, #0
 81003c2:	4608      	mov	r0, r1
 81003c4:	e7f5      	b.n	81003b2 <__udivmoddi4+0xa2>
 81003c6:	fab3 f183 	clz	r1, r3
 81003ca:	2900      	cmp	r1, #0
 81003cc:	d146      	bne.n	810045c <__udivmoddi4+0x14c>
 81003ce:	4573      	cmp	r3, lr
 81003d0:	d302      	bcc.n	81003d8 <__udivmoddi4+0xc8>
 81003d2:	4282      	cmp	r2, r0
 81003d4:	f200 8105 	bhi.w	81005e2 <__udivmoddi4+0x2d2>
 81003d8:	1a84      	subs	r4, r0, r2
 81003da:	eb6e 0203 	sbc.w	r2, lr, r3
 81003de:	2001      	movs	r0, #1
 81003e0:	4690      	mov	r8, r2
 81003e2:	2d00      	cmp	r5, #0
 81003e4:	d0e5      	beq.n	81003b2 <__udivmoddi4+0xa2>
 81003e6:	e9c5 4800 	strd	r4, r8, [r5]
 81003ea:	e7e2      	b.n	81003b2 <__udivmoddi4+0xa2>
 81003ec:	2a00      	cmp	r2, #0
 81003ee:	f000 8090 	beq.w	8100512 <__udivmoddi4+0x202>
 81003f2:	fab2 f682 	clz	r6, r2
 81003f6:	2e00      	cmp	r6, #0
 81003f8:	f040 80a4 	bne.w	8100544 <__udivmoddi4+0x234>
 81003fc:	1a8a      	subs	r2, r1, r2
 81003fe:	0c03      	lsrs	r3, r0, #16
 8100400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100404:	b280      	uxth	r0, r0
 8100406:	b2bc      	uxth	r4, r7
 8100408:	2101      	movs	r1, #1
 810040a:	fbb2 fcfe 	udiv	ip, r2, lr
 810040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8100412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100416:	fb04 f20c 	mul.w	r2, r4, ip
 810041a:	429a      	cmp	r2, r3
 810041c:	d907      	bls.n	810042e <__udivmoddi4+0x11e>
 810041e:	18fb      	adds	r3, r7, r3
 8100420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8100424:	d202      	bcs.n	810042c <__udivmoddi4+0x11c>
 8100426:	429a      	cmp	r2, r3
 8100428:	f200 80e0 	bhi.w	81005ec <__udivmoddi4+0x2dc>
 810042c:	46c4      	mov	ip, r8
 810042e:	1a9b      	subs	r3, r3, r2
 8100430:	fbb3 f2fe 	udiv	r2, r3, lr
 8100434:	fb0e 3312 	mls	r3, lr, r2, r3
 8100438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 810043c:	fb02 f404 	mul.w	r4, r2, r4
 8100440:	429c      	cmp	r4, r3
 8100442:	d907      	bls.n	8100454 <__udivmoddi4+0x144>
 8100444:	18fb      	adds	r3, r7, r3
 8100446:	f102 30ff 	add.w	r0, r2, #4294967295
 810044a:	d202      	bcs.n	8100452 <__udivmoddi4+0x142>
 810044c:	429c      	cmp	r4, r3
 810044e:	f200 80ca 	bhi.w	81005e6 <__udivmoddi4+0x2d6>
 8100452:	4602      	mov	r2, r0
 8100454:	1b1b      	subs	r3, r3, r4
 8100456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 810045a:	e7a5      	b.n	81003a8 <__udivmoddi4+0x98>
 810045c:	f1c1 0620 	rsb	r6, r1, #32
 8100460:	408b      	lsls	r3, r1
 8100462:	fa22 f706 	lsr.w	r7, r2, r6
 8100466:	431f      	orrs	r7, r3
 8100468:	fa0e f401 	lsl.w	r4, lr, r1
 810046c:	fa20 f306 	lsr.w	r3, r0, r6
 8100470:	fa2e fe06 	lsr.w	lr, lr, r6
 8100474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100478:	4323      	orrs	r3, r4
 810047a:	fa00 f801 	lsl.w	r8, r0, r1
 810047e:	fa1f fc87 	uxth.w	ip, r7
 8100482:	fbbe f0f9 	udiv	r0, lr, r9
 8100486:	0c1c      	lsrs	r4, r3, #16
 8100488:	fb09 ee10 	mls	lr, r9, r0, lr
 810048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100490:	fb00 fe0c 	mul.w	lr, r0, ip
 8100494:	45a6      	cmp	lr, r4
 8100496:	fa02 f201 	lsl.w	r2, r2, r1
 810049a:	d909      	bls.n	81004b0 <__udivmoddi4+0x1a0>
 810049c:	193c      	adds	r4, r7, r4
 810049e:	f100 3aff 	add.w	sl, r0, #4294967295
 81004a2:	f080 809c 	bcs.w	81005de <__udivmoddi4+0x2ce>
 81004a6:	45a6      	cmp	lr, r4
 81004a8:	f240 8099 	bls.w	81005de <__udivmoddi4+0x2ce>
 81004ac:	3802      	subs	r0, #2
 81004ae:	443c      	add	r4, r7
 81004b0:	eba4 040e 	sub.w	r4, r4, lr
 81004b4:	fa1f fe83 	uxth.w	lr, r3
 81004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 81004bc:	fb09 4413 	mls	r4, r9, r3, r4
 81004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c8:	45a4      	cmp	ip, r4
 81004ca:	d908      	bls.n	81004de <__udivmoddi4+0x1ce>
 81004cc:	193c      	adds	r4, r7, r4
 81004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 81004d2:	f080 8082 	bcs.w	81005da <__udivmoddi4+0x2ca>
 81004d6:	45a4      	cmp	ip, r4
 81004d8:	d97f      	bls.n	81005da <__udivmoddi4+0x2ca>
 81004da:	3b02      	subs	r3, #2
 81004dc:	443c      	add	r4, r7
 81004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 81004e2:	eba4 040c 	sub.w	r4, r4, ip
 81004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 81004ea:	4564      	cmp	r4, ip
 81004ec:	4673      	mov	r3, lr
 81004ee:	46e1      	mov	r9, ip
 81004f0:	d362      	bcc.n	81005b8 <__udivmoddi4+0x2a8>
 81004f2:	d05f      	beq.n	81005b4 <__udivmoddi4+0x2a4>
 81004f4:	b15d      	cbz	r5, 810050e <__udivmoddi4+0x1fe>
 81004f6:	ebb8 0203 	subs.w	r2, r8, r3
 81004fa:	eb64 0409 	sbc.w	r4, r4, r9
 81004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8100502:	fa22 f301 	lsr.w	r3, r2, r1
 8100506:	431e      	orrs	r6, r3
 8100508:	40cc      	lsrs	r4, r1
 810050a:	e9c5 6400 	strd	r6, r4, [r5]
 810050e:	2100      	movs	r1, #0
 8100510:	e74f      	b.n	81003b2 <__udivmoddi4+0xa2>
 8100512:	fbb1 fcf2 	udiv	ip, r1, r2
 8100516:	0c01      	lsrs	r1, r0, #16
 8100518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 810051c:	b280      	uxth	r0, r0
 810051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8100522:	463b      	mov	r3, r7
 8100524:	4638      	mov	r0, r7
 8100526:	463c      	mov	r4, r7
 8100528:	46b8      	mov	r8, r7
 810052a:	46be      	mov	lr, r7
 810052c:	2620      	movs	r6, #32
 810052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8100532:	eba2 0208 	sub.w	r2, r2, r8
 8100536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 810053a:	e766      	b.n	810040a <__udivmoddi4+0xfa>
 810053c:	4601      	mov	r1, r0
 810053e:	e718      	b.n	8100372 <__udivmoddi4+0x62>
 8100540:	4610      	mov	r0, r2
 8100542:	e72c      	b.n	810039e <__udivmoddi4+0x8e>
 8100544:	f1c6 0220 	rsb	r2, r6, #32
 8100548:	fa2e f302 	lsr.w	r3, lr, r2
 810054c:	40b7      	lsls	r7, r6
 810054e:	40b1      	lsls	r1, r6
 8100550:	fa20 f202 	lsr.w	r2, r0, r2
 8100554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100558:	430a      	orrs	r2, r1
 810055a:	fbb3 f8fe 	udiv	r8, r3, lr
 810055e:	b2bc      	uxth	r4, r7
 8100560:	fb0e 3318 	mls	r3, lr, r8, r3
 8100564:	0c11      	lsrs	r1, r2, #16
 8100566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810056a:	fb08 f904 	mul.w	r9, r8, r4
 810056e:	40b0      	lsls	r0, r6
 8100570:	4589      	cmp	r9, r1
 8100572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8100576:	b280      	uxth	r0, r0
 8100578:	d93e      	bls.n	81005f8 <__udivmoddi4+0x2e8>
 810057a:	1879      	adds	r1, r7, r1
 810057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8100580:	d201      	bcs.n	8100586 <__udivmoddi4+0x276>
 8100582:	4589      	cmp	r9, r1
 8100584:	d81f      	bhi.n	81005c6 <__udivmoddi4+0x2b6>
 8100586:	eba1 0109 	sub.w	r1, r1, r9
 810058a:	fbb1 f9fe 	udiv	r9, r1, lr
 810058e:	fb09 f804 	mul.w	r8, r9, r4
 8100592:	fb0e 1119 	mls	r1, lr, r9, r1
 8100596:	b292      	uxth	r2, r2
 8100598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810059c:	4542      	cmp	r2, r8
 810059e:	d229      	bcs.n	81005f4 <__udivmoddi4+0x2e4>
 81005a0:	18ba      	adds	r2, r7, r2
 81005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 81005a6:	d2c4      	bcs.n	8100532 <__udivmoddi4+0x222>
 81005a8:	4542      	cmp	r2, r8
 81005aa:	d2c2      	bcs.n	8100532 <__udivmoddi4+0x222>
 81005ac:	f1a9 0102 	sub.w	r1, r9, #2
 81005b0:	443a      	add	r2, r7
 81005b2:	e7be      	b.n	8100532 <__udivmoddi4+0x222>
 81005b4:	45f0      	cmp	r8, lr
 81005b6:	d29d      	bcs.n	81004f4 <__udivmoddi4+0x1e4>
 81005b8:	ebbe 0302 	subs.w	r3, lr, r2
 81005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 81005c0:	3801      	subs	r0, #1
 81005c2:	46e1      	mov	r9, ip
 81005c4:	e796      	b.n	81004f4 <__udivmoddi4+0x1e4>
 81005c6:	eba7 0909 	sub.w	r9, r7, r9
 81005ca:	4449      	add	r1, r9
 81005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 81005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 81005d4:	fb09 f804 	mul.w	r8, r9, r4
 81005d8:	e7db      	b.n	8100592 <__udivmoddi4+0x282>
 81005da:	4673      	mov	r3, lr
 81005dc:	e77f      	b.n	81004de <__udivmoddi4+0x1ce>
 81005de:	4650      	mov	r0, sl
 81005e0:	e766      	b.n	81004b0 <__udivmoddi4+0x1a0>
 81005e2:	4608      	mov	r0, r1
 81005e4:	e6fd      	b.n	81003e2 <__udivmoddi4+0xd2>
 81005e6:	443b      	add	r3, r7
 81005e8:	3a02      	subs	r2, #2
 81005ea:	e733      	b.n	8100454 <__udivmoddi4+0x144>
 81005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 81005f0:	443b      	add	r3, r7
 81005f2:	e71c      	b.n	810042e <__udivmoddi4+0x11e>
 81005f4:	4649      	mov	r1, r9
 81005f6:	e79c      	b.n	8100532 <__udivmoddi4+0x222>
 81005f8:	eba1 0109 	sub.w	r1, r1, r9
 81005fc:	46c4      	mov	ip, r8
 81005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8100602:	fb09 f804 	mul.w	r8, r9, r4
 8100606:	e7c4      	b.n	8100592 <__udivmoddi4+0x282>

08100608 <__aeabi_idiv0>:
 8100608:	4770      	bx	lr
 810060a:	bf00      	nop

0810060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810060c:	b480      	push	{r7}
 810060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100610:	4b09      	ldr	r3, [pc, #36]	@ (8100638 <SystemInit+0x2c>)
 8100612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100616:	4a08      	ldr	r2, [pc, #32]	@ (8100638 <SystemInit+0x2c>)
 8100618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100620:	4b05      	ldr	r3, [pc, #20]	@ (8100638 <SystemInit+0x2c>)
 8100622:	691b      	ldr	r3, [r3, #16]
 8100624:	4a04      	ldr	r2, [pc, #16]	@ (8100638 <SystemInit+0x2c>)
 8100626:	f043 0310 	orr.w	r3, r3, #16
 810062a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810062c:	bf00      	nop
 810062e:	46bd      	mov	sp, r7
 8100630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100634:	4770      	bx	lr
 8100636:	bf00      	nop
 8100638:	e000ed00 	.word	0xe000ed00

0810063c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 810063c:	b480      	push	{r7}
 810063e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100640:	4b09      	ldr	r3, [pc, #36]	@ (8100668 <ExitRun0Mode+0x2c>)
 8100642:	68db      	ldr	r3, [r3, #12]
 8100644:	4a08      	ldr	r2, [pc, #32]	@ (8100668 <ExitRun0Mode+0x2c>)
 8100646:	f023 0302 	bic.w	r3, r3, #2
 810064a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 810064c:	bf00      	nop
 810064e:	4b06      	ldr	r3, [pc, #24]	@ (8100668 <ExitRun0Mode+0x2c>)
 8100650:	685b      	ldr	r3, [r3, #4]
 8100652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100656:	2b00      	cmp	r3, #0
 8100658:	d0f9      	beq.n	810064e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810065a:	bf00      	nop
 810065c:	bf00      	nop
 810065e:	46bd      	mov	sp, r7
 8100660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100664:	4770      	bx	lr
 8100666:	bf00      	nop
 8100668:	58024800 	.word	0x58024800

0810066c <HAL_GPIO_EXTI_Callback>:
}

// SPI_HandleTypeDef *const pIMUSPIRef = &hspi2;

void HAL_GPIO_EXTI_Callback(uint16_t gpioPin)
{
 810066c:	b480      	push	{r7}
 810066e:	b083      	sub	sp, #12
 8100670:	af00      	add	r7, sp, #0
 8100672:	4603      	mov	r3, r0
 8100674:	80fb      	strh	r3, [r7, #6]
	if(gpioPin == IMU_INT_Pin) {

	}
}
 8100676:	bf00      	nop
 8100678:	370c      	adds	r7, #12
 810067a:	46bd      	mov	sp, r7
 810067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100680:	4770      	bx	lr
	...

08100684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100684:	b580      	push	{r7, lr}
 8100686:	b082      	sub	sp, #8
 8100688:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810068a:	4b31      	ldr	r3, [pc, #196]	@ (8100750 <main+0xcc>)
 810068c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100690:	4a2f      	ldr	r2, [pc, #188]	@ (8100750 <main+0xcc>)
 8100692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810069a:	4b2d      	ldr	r3, [pc, #180]	@ (8100750 <main+0xcc>)
 810069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81006a4:	607b      	str	r3, [r7, #4]
 81006a6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006a8:	2001      	movs	r0, #1
 81006aa:	f004 fa31 	bl	8104b10 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81006ae:	f004 fbeb 	bl	8104e88 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006b2:	2201      	movs	r2, #1
 81006b4:	2102      	movs	r1, #2
 81006b6:	2000      	movs	r0, #0
 81006b8:	f004 fb6c 	bl	8104d94 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006bc:	4b25      	ldr	r3, [pc, #148]	@ (8100754 <main+0xd0>)
 81006be:	681b      	ldr	r3, [r3, #0]
 81006c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81006c4:	2b70      	cmp	r3, #112	@ 0x70
 81006c6:	d108      	bne.n	81006da <main+0x56>
 81006c8:	4b23      	ldr	r3, [pc, #140]	@ (8100758 <main+0xd4>)
 81006ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006ce:	4a22      	ldr	r2, [pc, #136]	@ (8100758 <main+0xd4>)
 81006d0:	f043 0301 	orr.w	r3, r3, #1
 81006d4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006d8:	e007      	b.n	81006ea <main+0x66>
 81006da:	4b1f      	ldr	r3, [pc, #124]	@ (8100758 <main+0xd4>)
 81006dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006e0:	4a1d      	ldr	r2, [pc, #116]	@ (8100758 <main+0xd4>)
 81006e2:	f043 0301 	orr.w	r3, r3, #1
 81006e6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006ea:	f002 f887 	bl	81027fc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006ee:	f000 fd63 	bl	81011b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 81006f2:	f000 f839 	bl	8100768 <MX_ADC1_Init>
  MX_ADC3_Init();
 81006f6:	f000 f8b3 	bl	8100860 <MX_ADC3_Init>
  MX_ETH_Init();
 81006fa:	f000 f915 	bl	8100928 <MX_ETH_Init>
  MX_FMC_Init();
 81006fe:	f000 fd0d 	bl	810111c <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 8100702:	f000 f95d 	bl	81009c0 <MX_HDMI_CEC_Init>
  MX_QUADSPI_Init();
 8100706:	f000 f98f 	bl	8100a28 <MX_QUADSPI_Init>
  MX_RTC_Init();
 810070a:	f000 f9b5 	bl	8100a78 <MX_RTC_Init>
  MX_SAI1_Init();
 810070e:	f000 fa01 	bl	8100b14 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8100712:	f000 faa1 	bl	8100c58 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX1_Init();
 8100716:	f000 fac3 	bl	8100ca0 <MX_SPDIFRX1_Init>
  MX_SPI2_Init();
 810071a:	f000 faf9 	bl	8100d10 <MX_SPI2_Init>
  MX_SPI5_Init();
 810071e:	f000 fb4d 	bl	8100dbc <MX_SPI5_Init>
  MX_TIM8_Init();
 8100722:	f000 fb9f 	bl	8100e64 <MX_TIM8_Init>
  MX_TIM13_Init();
 8100726:	f000 fc2d 	bl	8100f84 <MX_TIM13_Init>
  MX_UART8_Init();
 810072a:	f000 fc79 	bl	8101020 <MX_UART8_Init>
  MX_USB_OTG_HS_PCD_Init();
 810072e:	f000 fcc3 	bl	81010b8 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100732:	f00c fced 	bl	810d110 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8100736:	4a09      	ldr	r2, [pc, #36]	@ (810075c <main+0xd8>)
 8100738:	2100      	movs	r1, #0
 810073a:	4809      	ldr	r0, [pc, #36]	@ (8100760 <main+0xdc>)
 810073c:	f00c fd32 	bl	810d1a4 <osThreadNew>
 8100740:	4603      	mov	r3, r0
 8100742:	4a08      	ldr	r2, [pc, #32]	@ (8100764 <main+0xe0>)
 8100744:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100746:	f00c fd07 	bl	810d158 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810074a:	bf00      	nop
 810074c:	e7fd      	b.n	810074a <main+0xc6>
 810074e:	bf00      	nop
 8100750:	58024400 	.word	0x58024400
 8100754:	e000ed00 	.word	0xe000ed00
 8100758:	58026400 	.word	0x58026400
 810075c:	0810fccc 	.word	0x0810fccc
 8100760:	08101355 	.word	0x08101355
 8100764:	10000ca4 	.word	0x10000ca4

08100768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8100768:	b580      	push	{r7, lr}
 810076a:	b08a      	sub	sp, #40	@ 0x28
 810076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810076e:	f107 031c 	add.w	r3, r7, #28
 8100772:	2200      	movs	r2, #0
 8100774:	601a      	str	r2, [r3, #0]
 8100776:	605a      	str	r2, [r3, #4]
 8100778:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810077a:	463b      	mov	r3, r7
 810077c:	2200      	movs	r2, #0
 810077e:	601a      	str	r2, [r3, #0]
 8100780:	605a      	str	r2, [r3, #4]
 8100782:	609a      	str	r2, [r3, #8]
 8100784:	60da      	str	r2, [r3, #12]
 8100786:	611a      	str	r2, [r3, #16]
 8100788:	615a      	str	r2, [r3, #20]
 810078a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 810078c:	4b31      	ldr	r3, [pc, #196]	@ (8100854 <MX_ADC1_Init+0xec>)
 810078e:	4a32      	ldr	r2, [pc, #200]	@ (8100858 <MX_ADC1_Init+0xf0>)
 8100790:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8100792:	4b30      	ldr	r3, [pc, #192]	@ (8100854 <MX_ADC1_Init+0xec>)
 8100794:	2200      	movs	r2, #0
 8100796:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100798:	4b2e      	ldr	r3, [pc, #184]	@ (8100854 <MX_ADC1_Init+0xec>)
 810079a:	2200      	movs	r2, #0
 810079c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 810079e:	4b2d      	ldr	r3, [pc, #180]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007a0:	2200      	movs	r2, #0
 81007a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81007a4:	4b2b      	ldr	r3, [pc, #172]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007a6:	2204      	movs	r2, #4
 81007a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81007aa:	4b2a      	ldr	r3, [pc, #168]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007ac:	2200      	movs	r2, #0
 81007ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 81007b0:	4b28      	ldr	r3, [pc, #160]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007b2:	2200      	movs	r2, #0
 81007b4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81007b6:	4b27      	ldr	r3, [pc, #156]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007b8:	2201      	movs	r2, #1
 81007ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81007bc:	4b25      	ldr	r3, [pc, #148]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007be:	2200      	movs	r2, #0
 81007c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81007c2:	4b24      	ldr	r3, [pc, #144]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007c4:	2200      	movs	r2, #0
 81007c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81007c8:	4b22      	ldr	r3, [pc, #136]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007ca:	2200      	movs	r2, #0
 81007cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81007ce:	4b21      	ldr	r3, [pc, #132]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007d0:	2200      	movs	r2, #0
 81007d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81007d4:	4b1f      	ldr	r3, [pc, #124]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007d6:	2200      	movs	r2, #0
 81007d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81007da:	4b1e      	ldr	r3, [pc, #120]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007dc:	2200      	movs	r2, #0
 81007de:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81007e0:	4b1c      	ldr	r3, [pc, #112]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007e2:	2200      	movs	r2, #0
 81007e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 81007e8:	4b1a      	ldr	r3, [pc, #104]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007ea:	2201      	movs	r2, #1
 81007ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81007ee:	4819      	ldr	r0, [pc, #100]	@ (8100854 <MX_ADC1_Init+0xec>)
 81007f0:	f002 fa9a 	bl	8102d28 <HAL_ADC_Init>
 81007f4:	4603      	mov	r3, r0
 81007f6:	2b00      	cmp	r3, #0
 81007f8:	d001      	beq.n	81007fe <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 81007fa:	f000 fdc5 	bl	8101388 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81007fe:	2300      	movs	r3, #0
 8100800:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8100802:	f107 031c 	add.w	r3, r7, #28
 8100806:	4619      	mov	r1, r3
 8100808:	4812      	ldr	r0, [pc, #72]	@ (8100854 <MX_ADC1_Init+0xec>)
 810080a:	f003 f851 	bl	81038b0 <HAL_ADCEx_MultiModeConfigChannel>
 810080e:	4603      	mov	r3, r0
 8100810:	2b00      	cmp	r3, #0
 8100812:	d001      	beq.n	8100818 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8100814:	f000 fdb8 	bl	8101388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8100818:	4b10      	ldr	r3, [pc, #64]	@ (810085c <MX_ADC1_Init+0xf4>)
 810081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810081c:	2306      	movs	r3, #6
 810081e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100820:	2300      	movs	r3, #0
 8100822:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100824:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100828:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810082a:	2304      	movs	r3, #4
 810082c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 810082e:	2300      	movs	r3, #0
 8100830:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100832:	2300      	movs	r3, #0
 8100834:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100836:	463b      	mov	r3, r7
 8100838:	4619      	mov	r1, r3
 810083a:	4806      	ldr	r0, [pc, #24]	@ (8100854 <MX_ADC1_Init+0xec>)
 810083c:	f002 fc16 	bl	810306c <HAL_ADC_ConfigChannel>
 8100840:	4603      	mov	r3, r0
 8100842:	2b00      	cmp	r3, #0
 8100844:	d001      	beq.n	810084a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8100846:	f000 fd9f 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810084a:	bf00      	nop
 810084c:	3728      	adds	r7, #40	@ 0x28
 810084e:	46bd      	mov	sp, r7
 8100850:	bd80      	pop	{r7, pc}
 8100852:	bf00      	nop
 8100854:	10000128 	.word	0x10000128
 8100858:	40022000 	.word	0x40022000
 810085c:	04300002 	.word	0x04300002

08100860 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8100860:	b580      	push	{r7, lr}
 8100862:	b088      	sub	sp, #32
 8100864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8100866:	1d3b      	adds	r3, r7, #4
 8100868:	2200      	movs	r2, #0
 810086a:	601a      	str	r2, [r3, #0]
 810086c:	605a      	str	r2, [r3, #4]
 810086e:	609a      	str	r2, [r3, #8]
 8100870:	60da      	str	r2, [r3, #12]
 8100872:	611a      	str	r2, [r3, #16]
 8100874:	615a      	str	r2, [r3, #20]
 8100876:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8100878:	4b29      	ldr	r3, [pc, #164]	@ (8100920 <MX_ADC3_Init+0xc0>)
 810087a:	4a2a      	ldr	r2, [pc, #168]	@ (8100924 <MX_ADC3_Init+0xc4>)
 810087c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 810087e:	4b28      	ldr	r3, [pc, #160]	@ (8100920 <MX_ADC3_Init+0xc0>)
 8100880:	2200      	movs	r2, #0
 8100882:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100884:	4b26      	ldr	r3, [pc, #152]	@ (8100920 <MX_ADC3_Init+0xc0>)
 8100886:	2200      	movs	r2, #0
 8100888:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810088a:	4b25      	ldr	r3, [pc, #148]	@ (8100920 <MX_ADC3_Init+0xc0>)
 810088c:	2204      	movs	r2, #4
 810088e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8100890:	4b23      	ldr	r3, [pc, #140]	@ (8100920 <MX_ADC3_Init+0xc0>)
 8100892:	2200      	movs	r2, #0
 8100894:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8100896:	4b22      	ldr	r3, [pc, #136]	@ (8100920 <MX_ADC3_Init+0xc0>)
 8100898:	2200      	movs	r2, #0
 810089a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 810089c:	4b20      	ldr	r3, [pc, #128]	@ (8100920 <MX_ADC3_Init+0xc0>)
 810089e:	2201      	movs	r2, #1
 81008a0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 81008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8100920 <MX_ADC3_Init+0xc0>)
 81008a4:	2200      	movs	r2, #0
 81008a6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8100920 <MX_ADC3_Init+0xc0>)
 81008aa:	2200      	movs	r2, #0
 81008ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8100920 <MX_ADC3_Init+0xc0>)
 81008b0:	2200      	movs	r2, #0
 81008b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8100920 <MX_ADC3_Init+0xc0>)
 81008b6:	2200      	movs	r2, #0
 81008b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81008ba:	4b19      	ldr	r3, [pc, #100]	@ (8100920 <MX_ADC3_Init+0xc0>)
 81008bc:	2200      	movs	r2, #0
 81008be:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81008c0:	4b17      	ldr	r3, [pc, #92]	@ (8100920 <MX_ADC3_Init+0xc0>)
 81008c2:	2200      	movs	r2, #0
 81008c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 81008c6:	4b16      	ldr	r3, [pc, #88]	@ (8100920 <MX_ADC3_Init+0xc0>)
 81008c8:	2200      	movs	r2, #0
 81008ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 81008ce:	4b14      	ldr	r3, [pc, #80]	@ (8100920 <MX_ADC3_Init+0xc0>)
 81008d0:	2201      	movs	r2, #1
 81008d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 81008d4:	4812      	ldr	r0, [pc, #72]	@ (8100920 <MX_ADC3_Init+0xc0>)
 81008d6:	f002 fa27 	bl	8102d28 <HAL_ADC_Init>
 81008da:	4603      	mov	r3, r0
 81008dc:	2b00      	cmp	r3, #0
 81008de:	d001      	beq.n	81008e4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 81008e0:	f000 fd52 	bl	8101388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 81008e4:	2301      	movs	r3, #1
 81008e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81008e8:	2306      	movs	r3, #6
 81008ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81008ec:	2300      	movs	r3, #0
 81008ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81008f0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 81008f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81008f6:	2304      	movs	r3, #4
 81008f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 81008fa:	2300      	movs	r3, #0
 81008fc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 81008fe:	2300      	movs	r3, #0
 8100900:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8100902:	1d3b      	adds	r3, r7, #4
 8100904:	4619      	mov	r1, r3
 8100906:	4806      	ldr	r0, [pc, #24]	@ (8100920 <MX_ADC3_Init+0xc0>)
 8100908:	f002 fbb0 	bl	810306c <HAL_ADC_ConfigChannel>
 810090c:	4603      	mov	r3, r0
 810090e:	2b00      	cmp	r3, #0
 8100910:	d001      	beq.n	8100916 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8100912:	f000 fd39 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8100916:	bf00      	nop
 8100918:	3720      	adds	r7, #32
 810091a:	46bd      	mov	sp, r7
 810091c:	bd80      	pop	{r7, pc}
 810091e:	bf00      	nop
 8100920:	1000018c 	.word	0x1000018c
 8100924:	58026000 	.word	0x58026000

08100928 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8100928:	b580      	push	{r7, lr}
 810092a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 810092c:	4b1e      	ldr	r3, [pc, #120]	@ (81009a8 <MX_ETH_Init+0x80>)
 810092e:	4a1f      	ldr	r2, [pc, #124]	@ (81009ac <MX_ETH_Init+0x84>)
 8100930:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8100932:	4b1f      	ldr	r3, [pc, #124]	@ (81009b0 <MX_ETH_Init+0x88>)
 8100934:	2200      	movs	r2, #0
 8100936:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8100938:	4b1d      	ldr	r3, [pc, #116]	@ (81009b0 <MX_ETH_Init+0x88>)
 810093a:	2280      	movs	r2, #128	@ 0x80
 810093c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 810093e:	4b1c      	ldr	r3, [pc, #112]	@ (81009b0 <MX_ETH_Init+0x88>)
 8100940:	22e1      	movs	r2, #225	@ 0xe1
 8100942:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8100944:	4b1a      	ldr	r3, [pc, #104]	@ (81009b0 <MX_ETH_Init+0x88>)
 8100946:	2200      	movs	r2, #0
 8100948:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 810094a:	4b19      	ldr	r3, [pc, #100]	@ (81009b0 <MX_ETH_Init+0x88>)
 810094c:	2200      	movs	r2, #0
 810094e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8100950:	4b17      	ldr	r3, [pc, #92]	@ (81009b0 <MX_ETH_Init+0x88>)
 8100952:	2200      	movs	r2, #0
 8100954:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8100956:	4b14      	ldr	r3, [pc, #80]	@ (81009a8 <MX_ETH_Init+0x80>)
 8100958:	4a15      	ldr	r2, [pc, #84]	@ (81009b0 <MX_ETH_Init+0x88>)
 810095a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 810095c:	4b12      	ldr	r3, [pc, #72]	@ (81009a8 <MX_ETH_Init+0x80>)
 810095e:	2201      	movs	r2, #1
 8100960:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100962:	4b11      	ldr	r3, [pc, #68]	@ (81009a8 <MX_ETH_Init+0x80>)
 8100964:	4a13      	ldr	r2, [pc, #76]	@ (81009b4 <MX_ETH_Init+0x8c>)
 8100966:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100968:	4b0f      	ldr	r3, [pc, #60]	@ (81009a8 <MX_ETH_Init+0x80>)
 810096a:	4a13      	ldr	r2, [pc, #76]	@ (81009b8 <MX_ETH_Init+0x90>)
 810096c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 810096e:	4b0e      	ldr	r3, [pc, #56]	@ (81009a8 <MX_ETH_Init+0x80>)
 8100970:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8100974:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8100976:	480c      	ldr	r0, [pc, #48]	@ (81009a8 <MX_ETH_Init+0x80>)
 8100978:	f003 facc 	bl	8103f14 <HAL_ETH_Init>
 810097c:	4603      	mov	r3, r0
 810097e:	2b00      	cmp	r3, #0
 8100980:	d001      	beq.n	8100986 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8100982:	f000 fd01 	bl	8101388 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8100986:	2238      	movs	r2, #56	@ 0x38
 8100988:	2100      	movs	r1, #0
 810098a:	480c      	ldr	r0, [pc, #48]	@ (81009bc <MX_ETH_Init+0x94>)
 810098c:	f00f f93e 	bl	810fc0c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100990:	4b0a      	ldr	r3, [pc, #40]	@ (81009bc <MX_ETH_Init+0x94>)
 8100992:	2221      	movs	r2, #33	@ 0x21
 8100994:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8100996:	4b09      	ldr	r3, [pc, #36]	@ (81009bc <MX_ETH_Init+0x94>)
 8100998:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 810099c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 810099e:	4b07      	ldr	r3, [pc, #28]	@ (81009bc <MX_ETH_Init+0x94>)
 81009a0:	2200      	movs	r2, #0
 81009a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 81009a4:	bf00      	nop
 81009a6:	bd80      	pop	{r7, pc}
 81009a8:	100001f0 	.word	0x100001f0
 81009ac:	40028000 	.word	0x40028000
 81009b0:	10000cb8 	.word	0x10000cb8
 81009b4:	10000074 	.word	0x10000074
 81009b8:	10000014 	.word	0x10000014
 81009bc:	100000f0 	.word	0x100000f0

081009c0 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 81009c0:	b580      	push	{r7, lr}
 81009c2:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 81009c4:	4b15      	ldr	r3, [pc, #84]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 81009c6:	4a16      	ldr	r2, [pc, #88]	@ (8100a20 <MX_HDMI_CEC_Init+0x60>)
 81009c8:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 81009ca:	4b14      	ldr	r3, [pc, #80]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 81009cc:	2200      	movs	r2, #0
 81009ce:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 81009d0:	4b12      	ldr	r3, [pc, #72]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 81009d2:	2200      	movs	r2, #0
 81009d4:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 81009d6:	4b11      	ldr	r3, [pc, #68]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 81009d8:	2210      	movs	r2, #16
 81009da:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 81009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 81009de:	2200      	movs	r2, #0
 81009e0:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 81009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 81009e4:	2200      	movs	r2, #0
 81009e6:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 81009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 81009ea:	2200      	movs	r2, #0
 81009ec:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 81009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 81009f0:	2200      	movs	r2, #0
 81009f2:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 81009f4:	4b09      	ldr	r3, [pc, #36]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 81009f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 81009fa:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 81009fc:	4b07      	ldr	r3, [pc, #28]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 81009fe:	2200      	movs	r2, #0
 8100a00:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100a02:	4b06      	ldr	r3, [pc, #24]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 8100a04:	4a07      	ldr	r2, [pc, #28]	@ (8100a24 <MX_HDMI_CEC_Init+0x64>)
 8100a06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100a08:	4804      	ldr	r0, [pc, #16]	@ (8100a1c <MX_HDMI_CEC_Init+0x5c>)
 8100a0a:	f003 f833 	bl	8103a74 <HAL_CEC_Init>
 8100a0e:	4603      	mov	r3, r0
 8100a10:	2b00      	cmp	r3, #0
 8100a12:	d001      	beq.n	8100a18 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100a14:	f000 fcb8 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100a18:	bf00      	nop
 8100a1a:	bd80      	pop	{r7, pc}
 8100a1c:	100002a0 	.word	0x100002a0
 8100a20:	40006c00 	.word	0x40006c00
 8100a24:	10000ca8 	.word	0x10000ca8

08100a28 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8100a28:	b580      	push	{r7, lr}
 8100a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8100a2c:	4b10      	ldr	r3, [pc, #64]	@ (8100a70 <MX_QUADSPI_Init+0x48>)
 8100a2e:	4a11      	ldr	r2, [pc, #68]	@ (8100a74 <MX_QUADSPI_Init+0x4c>)
 8100a30:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8100a32:	4b0f      	ldr	r3, [pc, #60]	@ (8100a70 <MX_QUADSPI_Init+0x48>)
 8100a34:	22ff      	movs	r2, #255	@ 0xff
 8100a36:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8100a38:	4b0d      	ldr	r3, [pc, #52]	@ (8100a70 <MX_QUADSPI_Init+0x48>)
 8100a3a:	2201      	movs	r2, #1
 8100a3c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8100a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8100a70 <MX_QUADSPI_Init+0x48>)
 8100a40:	2200      	movs	r2, #0
 8100a42:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8100a44:	4b0a      	ldr	r3, [pc, #40]	@ (8100a70 <MX_QUADSPI_Init+0x48>)
 8100a46:	2201      	movs	r2, #1
 8100a48:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8100a4a:	4b09      	ldr	r3, [pc, #36]	@ (8100a70 <MX_QUADSPI_Init+0x48>)
 8100a4c:	2200      	movs	r2, #0
 8100a4e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8100a50:	4b07      	ldr	r3, [pc, #28]	@ (8100a70 <MX_QUADSPI_Init+0x48>)
 8100a52:	2200      	movs	r2, #0
 8100a54:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8100a56:	4b06      	ldr	r3, [pc, #24]	@ (8100a70 <MX_QUADSPI_Init+0x48>)
 8100a58:	2240      	movs	r2, #64	@ 0x40
 8100a5a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8100a5c:	4804      	ldr	r0, [pc, #16]	@ (8100a70 <MX_QUADSPI_Init+0x48>)
 8100a5e:	f004 fa31 	bl	8104ec4 <HAL_QSPI_Init>
 8100a62:	4603      	mov	r3, r0
 8100a64:	2b00      	cmp	r3, #0
 8100a66:	d001      	beq.n	8100a6c <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8100a68:	f000 fc8e 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8100a6c:	bf00      	nop
 8100a6e:	bd80      	pop	{r7, pc}
 8100a70:	100002e4 	.word	0x100002e4
 8100a74:	52005000 	.word	0x52005000

08100a78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100a78:	b580      	push	{r7, lr}
 8100a7a:	b08a      	sub	sp, #40	@ 0x28
 8100a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100a7e:	463b      	mov	r3, r7
 8100a80:	2228      	movs	r2, #40	@ 0x28
 8100a82:	2100      	movs	r1, #0
 8100a84:	4618      	mov	r0, r3
 8100a86:	f00f f8c1 	bl	810fc0c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100a8a:	4b20      	ldr	r3, [pc, #128]	@ (8100b0c <MX_RTC_Init+0x94>)
 8100a8c:	4a20      	ldr	r2, [pc, #128]	@ (8100b10 <MX_RTC_Init+0x98>)
 8100a8e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100a90:	4b1e      	ldr	r3, [pc, #120]	@ (8100b0c <MX_RTC_Init+0x94>)
 8100a92:	2200      	movs	r2, #0
 8100a94:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100a96:	4b1d      	ldr	r3, [pc, #116]	@ (8100b0c <MX_RTC_Init+0x94>)
 8100a98:	227f      	movs	r2, #127	@ 0x7f
 8100a9a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8100b0c <MX_RTC_Init+0x94>)
 8100a9e:	22ff      	movs	r2, #255	@ 0xff
 8100aa0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8100b0c <MX_RTC_Init+0x94>)
 8100aa4:	2200      	movs	r2, #0
 8100aa6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100aa8:	4b18      	ldr	r3, [pc, #96]	@ (8100b0c <MX_RTC_Init+0x94>)
 8100aaa:	2200      	movs	r2, #0
 8100aac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100aae:	4b17      	ldr	r3, [pc, #92]	@ (8100b0c <MX_RTC_Init+0x94>)
 8100ab0:	2200      	movs	r2, #0
 8100ab2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100ab4:	4b15      	ldr	r3, [pc, #84]	@ (8100b0c <MX_RTC_Init+0x94>)
 8100ab6:	2200      	movs	r2, #0
 8100ab8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100aba:	4814      	ldr	r0, [pc, #80]	@ (8100b0c <MX_RTC_Init+0x94>)
 8100abc:	f007 fa14 	bl	8107ee8 <HAL_RTC_Init>
 8100ac0:	4603      	mov	r3, r0
 8100ac2:	2b00      	cmp	r3, #0
 8100ac4:	d001      	beq.n	8100aca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100ac6:	f000 fc5f 	bl	8101388 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100aca:	2301      	movs	r3, #1
 8100acc:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100ace:	2301      	movs	r3, #1
 8100ad0:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100ad2:	2300      	movs	r3, #0
 8100ad4:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100ad6:	2300      	movs	r3, #0
 8100ad8:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100ada:	2300      	movs	r3, #0
 8100adc:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100ade:	2300      	movs	r3, #0
 8100ae0:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100ae2:	2300      	movs	r3, #0
 8100ae4:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100ae6:	2300      	movs	r3, #0
 8100ae8:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100aea:	2380      	movs	r3, #128	@ 0x80
 8100aec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100aee:	463b      	mov	r3, r7
 8100af0:	4619      	mov	r1, r3
 8100af2:	4806      	ldr	r0, [pc, #24]	@ (8100b0c <MX_RTC_Init+0x94>)
 8100af4:	f007 fb10 	bl	8108118 <HAL_RTCEx_SetTamper>
 8100af8:	4603      	mov	r3, r0
 8100afa:	2b00      	cmp	r3, #0
 8100afc:	d001      	beq.n	8100b02 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100afe:	f000 fc43 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100b02:	bf00      	nop
 8100b04:	3728      	adds	r7, #40	@ 0x28
 8100b06:	46bd      	mov	sp, r7
 8100b08:	bd80      	pop	{r7, pc}
 8100b0a:	bf00      	nop
 8100b0c:	10000330 	.word	0x10000330
 8100b10:	58004000 	.word	0x58004000

08100b14 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100b14:	b580      	push	{r7, lr}
 8100b16:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100b18:	4b4a      	ldr	r3, [pc, #296]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b1a:	4a4b      	ldr	r2, [pc, #300]	@ (8100c48 <MX_SAI1_Init+0x134>)
 8100b1c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100b1e:	4b49      	ldr	r3, [pc, #292]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b20:	2200      	movs	r2, #0
 8100b22:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100b24:	4b47      	ldr	r3, [pc, #284]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b26:	2200      	movs	r2, #0
 8100b28:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100b2a:	4b46      	ldr	r3, [pc, #280]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b2c:	2240      	movs	r2, #64	@ 0x40
 8100b2e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100b30:	4b44      	ldr	r3, [pc, #272]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b32:	2200      	movs	r2, #0
 8100b34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100b36:	4b43      	ldr	r3, [pc, #268]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b38:	2200      	movs	r2, #0
 8100b3a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100b3c:	4b41      	ldr	r3, [pc, #260]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b3e:	2200      	movs	r2, #0
 8100b40:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100b42:	4b40      	ldr	r3, [pc, #256]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b44:	2200      	movs	r2, #0
 8100b46:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100b48:	4b3e      	ldr	r3, [pc, #248]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b4a:	2200      	movs	r2, #0
 8100b4c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b50:	2200      	movs	r2, #0
 8100b52:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100b54:	4b3b      	ldr	r3, [pc, #236]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b56:	2200      	movs	r2, #0
 8100b58:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8100c4c <MX_SAI1_Init+0x138>)
 8100b5e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100b60:	4b38      	ldr	r3, [pc, #224]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b62:	2200      	movs	r2, #0
 8100b64:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100b66:	4b37      	ldr	r3, [pc, #220]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b68:	2200      	movs	r2, #0
 8100b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100b6c:	4b35      	ldr	r3, [pc, #212]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b6e:	2200      	movs	r2, #0
 8100b70:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100b72:	4b34      	ldr	r3, [pc, #208]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b74:	2200      	movs	r2, #0
 8100b76:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100b78:	4b32      	ldr	r3, [pc, #200]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b7a:	2200      	movs	r2, #0
 8100b7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100b80:	4b30      	ldr	r3, [pc, #192]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b82:	2201      	movs	r2, #1
 8100b84:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100b86:	4b2f      	ldr	r3, [pc, #188]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b90:	2208      	movs	r2, #8
 8100b92:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100b94:	4b2b      	ldr	r3, [pc, #172]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b96:	2201      	movs	r2, #1
 8100b98:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100b9c:	2200      	movs	r2, #0
 8100b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100ba0:	4b28      	ldr	r3, [pc, #160]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100ba2:	2200      	movs	r2, #0
 8100ba4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100ba6:	4b27      	ldr	r3, [pc, #156]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100ba8:	2200      	movs	r2, #0
 8100baa:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100bac:	4b25      	ldr	r3, [pc, #148]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100bae:	2200      	movs	r2, #0
 8100bb0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100bb2:	4b24      	ldr	r3, [pc, #144]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100bb4:	2200      	movs	r2, #0
 8100bb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100bb8:	4b22      	ldr	r3, [pc, #136]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100bba:	2201      	movs	r2, #1
 8100bbc:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100bbe:	4b21      	ldr	r3, [pc, #132]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100bc0:	2200      	movs	r2, #0
 8100bc2:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100bc4:	481f      	ldr	r0, [pc, #124]	@ (8100c44 <MX_SAI1_Init+0x130>)
 8100bc6:	f007 fb87 	bl	81082d8 <HAL_SAI_Init>
 8100bca:	4603      	mov	r3, r0
 8100bcc:	2b00      	cmp	r3, #0
 8100bce:	d001      	beq.n	8100bd4 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8100bd0:	f000 fbda 	bl	8101388 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8100c54 <MX_SAI1_Init+0x140>)
 8100bd8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100bda:	4b1d      	ldr	r3, [pc, #116]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100bdc:	2204      	movs	r2, #4
 8100bde:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100be0:	4b1b      	ldr	r3, [pc, #108]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100be2:	2200      	movs	r2, #0
 8100be4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100be6:	4b1a      	ldr	r3, [pc, #104]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100be8:	2200      	movs	r2, #0
 8100bea:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100bec:	4b18      	ldr	r3, [pc, #96]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100bee:	2200      	movs	r2, #0
 8100bf0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100bf2:	4b17      	ldr	r3, [pc, #92]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100bf4:	2200      	movs	r2, #0
 8100bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100bf8:	4b15      	ldr	r3, [pc, #84]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100bfa:	2200      	movs	r2, #0
 8100bfc:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100bfe:	4b14      	ldr	r3, [pc, #80]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100c00:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100c04:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100c06:	4b12      	ldr	r3, [pc, #72]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100c08:	2200      	movs	r2, #0
 8100c0a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100c0c:	4b10      	ldr	r3, [pc, #64]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100c0e:	2200      	movs	r2, #0
 8100c10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100c12:	4b0f      	ldr	r3, [pc, #60]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100c14:	2200      	movs	r2, #0
 8100c16:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100c18:	4b0d      	ldr	r3, [pc, #52]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100c1a:	2200      	movs	r2, #0
 8100c1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100c20:	4b0b      	ldr	r3, [pc, #44]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100c22:	2201      	movs	r2, #1
 8100c24:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100c26:	4b0a      	ldr	r3, [pc, #40]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100c2c:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100c2e:	4808      	ldr	r0, [pc, #32]	@ (8100c50 <MX_SAI1_Init+0x13c>)
 8100c30:	f007 fb52 	bl	81082d8 <HAL_SAI_Init>
 8100c34:	4603      	mov	r3, r0
 8100c36:	2b00      	cmp	r3, #0
 8100c38:	d001      	beq.n	8100c3e <MX_SAI1_Init+0x12a>
  {
    Error_Handler();
 8100c3a:	f000 fba5 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100c3e:	bf00      	nop
 8100c40:	bd80      	pop	{r7, pc}
 8100c42:	bf00      	nop
 8100c44:	10000354 	.word	0x10000354
 8100c48:	40015804 	.word	0x40015804
 8100c4c:	0002ee00 	.word	0x0002ee00
 8100c50:	100003ec 	.word	0x100003ec
 8100c54:	40015824 	.word	0x40015824

08100c58 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8100c58:	b580      	push	{r7, lr}
 8100c5a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8100c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8100c98 <MX_SDMMC1_SD_Init+0x40>)
 8100c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8100c9c <MX_SDMMC1_SD_Init+0x44>)
 8100c60:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100c62:	4b0d      	ldr	r3, [pc, #52]	@ (8100c98 <MX_SDMMC1_SD_Init+0x40>)
 8100c64:	2200      	movs	r2, #0
 8100c66:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100c68:	4b0b      	ldr	r3, [pc, #44]	@ (8100c98 <MX_SDMMC1_SD_Init+0x40>)
 8100c6a:	2200      	movs	r2, #0
 8100c6c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8100c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8100c98 <MX_SDMMC1_SD_Init+0x40>)
 8100c70:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8100c74:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100c76:	4b08      	ldr	r3, [pc, #32]	@ (8100c98 <MX_SDMMC1_SD_Init+0x40>)
 8100c78:	2200      	movs	r2, #0
 8100c7a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8100c7c:	4b06      	ldr	r3, [pc, #24]	@ (8100c98 <MX_SDMMC1_SD_Init+0x40>)
 8100c7e:	2200      	movs	r2, #0
 8100c80:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8100c82:	4805      	ldr	r0, [pc, #20]	@ (8100c98 <MX_SDMMC1_SD_Init+0x40>)
 8100c84:	f007 fe0c 	bl	81088a0 <HAL_SD_Init>
 8100c88:	4603      	mov	r3, r0
 8100c8a:	2b00      	cmp	r3, #0
 8100c8c:	d001      	beq.n	8100c92 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8100c8e:	f000 fb7b 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100c92:	bf00      	nop
 8100c94:	bd80      	pop	{r7, pc}
 8100c96:	bf00      	nop
 8100c98:	10000484 	.word	0x10000484
 8100c9c:	52007000 	.word	0x52007000

08100ca0 <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100ca0:	b580      	push	{r7, lr}
 8100ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100ca4:	4b19      	ldr	r3, [pc, #100]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100ca6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100caa:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100cac:	4b17      	ldr	r3, [pc, #92]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cae:	2200      	movs	r2, #0
 8100cb0:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100cb2:	4b16      	ldr	r3, [pc, #88]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cb4:	2200      	movs	r2, #0
 8100cb6:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100cb8:	4b14      	ldr	r3, [pc, #80]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cba:	2200      	movs	r2, #0
 8100cbc:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100cbe:	4b13      	ldr	r3, [pc, #76]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cc0:	2200      	movs	r2, #0
 8100cc2:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100cc4:	4b11      	ldr	r3, [pc, #68]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cc6:	2200      	movs	r2, #0
 8100cc8:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100cca:	4b10      	ldr	r3, [pc, #64]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100ccc:	2200      	movs	r2, #0
 8100cce:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cd2:	2200      	movs	r2, #0
 8100cd4:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cd8:	2200      	movs	r2, #0
 8100cda:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cde:	2200      	movs	r2, #0
 8100ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100ce4:	2200      	movs	r2, #0
 8100ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100ce8:	4b08      	ldr	r3, [pc, #32]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cea:	2200      	movs	r2, #0
 8100cec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100cf0:	4b06      	ldr	r3, [pc, #24]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cf2:	2200      	movs	r2, #0
 8100cf4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100cf8:	4804      	ldr	r0, [pc, #16]	@ (8100d0c <MX_SPDIFRX1_Init+0x6c>)
 8100cfa:	f008 fe7b 	bl	81099f4 <HAL_SPDIFRX_Init>
 8100cfe:	4603      	mov	r3, r0
 8100d00:	2b00      	cmp	r3, #0
 8100d02:	d001      	beq.n	8100d08 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100d04:	f000 fb40 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100d08:	bf00      	nop
 8100d0a:	bd80      	pop	{r7, pc}
 8100d0c:	10000500 	.word	0x10000500

08100d10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8100d10:	b580      	push	{r7, lr}
 8100d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8100d14:	4b27      	ldr	r3, [pc, #156]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d16:	4a28      	ldr	r2, [pc, #160]	@ (8100db8 <MX_SPI2_Init+0xa8>)
 8100d18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8100d1a:	4b26      	ldr	r3, [pc, #152]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d1c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100d20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8100d22:	4b24      	ldr	r3, [pc, #144]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d24:	2200      	movs	r2, #0
 8100d26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8100d28:	4b22      	ldr	r3, [pc, #136]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d2a:	2203      	movs	r2, #3
 8100d2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100d2e:	4b21      	ldr	r3, [pc, #132]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d30:	2200      	movs	r2, #0
 8100d32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100d34:	4b1f      	ldr	r3, [pc, #124]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d36:	2200      	movs	r2, #0
 8100d38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8100d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d3c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8100d40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100d42:	4b1c      	ldr	r3, [pc, #112]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d44:	2200      	movs	r2, #0
 8100d46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100d48:	4b1a      	ldr	r3, [pc, #104]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d4a:	2200      	movs	r2, #0
 8100d4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8100d4e:	4b19      	ldr	r3, [pc, #100]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d50:	2200      	movs	r2, #0
 8100d52:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100d54:	4b17      	ldr	r3, [pc, #92]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d56:	2200      	movs	r2, #0
 8100d58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100d5a:	4b16      	ldr	r3, [pc, #88]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d5c:	2200      	movs	r2, #0
 8100d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100d60:	4b14      	ldr	r3, [pc, #80]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100d66:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100d68:	4b12      	ldr	r3, [pc, #72]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d6a:	2200      	movs	r2, #0
 8100d6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100d6e:	4b11      	ldr	r3, [pc, #68]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d70:	2200      	movs	r2, #0
 8100d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100d74:	4b0f      	ldr	r3, [pc, #60]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d76:	2200      	movs	r2, #0
 8100d78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d7c:	2200      	movs	r2, #0
 8100d7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100d80:	4b0c      	ldr	r3, [pc, #48]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d82:	2200      	movs	r2, #0
 8100d84:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100d86:	4b0b      	ldr	r3, [pc, #44]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d88:	2200      	movs	r2, #0
 8100d8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100d8c:	4b09      	ldr	r3, [pc, #36]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d8e:	2200      	movs	r2, #0
 8100d90:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100d92:	4b08      	ldr	r3, [pc, #32]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d94:	2200      	movs	r2, #0
 8100d96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100d98:	4b06      	ldr	r3, [pc, #24]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100d9e:	4805      	ldr	r0, [pc, #20]	@ (8100db4 <MX_SPI2_Init+0xa4>)
 8100da0:	f008 fe96 	bl	8109ad0 <HAL_SPI_Init>
 8100da4:	4603      	mov	r3, r0
 8100da6:	2b00      	cmp	r3, #0
 8100da8:	d001      	beq.n	8100dae <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8100daa:	f000 faed 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100dae:	bf00      	nop
 8100db0:	bd80      	pop	{r7, pc}
 8100db2:	bf00      	nop
 8100db4:	10000550 	.word	0x10000550
 8100db8:	40003800 	.word	0x40003800

08100dbc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100dbc:	b580      	push	{r7, lr}
 8100dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100dc0:	4b26      	ldr	r3, [pc, #152]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100dc2:	4a27      	ldr	r2, [pc, #156]	@ (8100e60 <MX_SPI5_Init+0xa4>)
 8100dc4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100dc6:	4b25      	ldr	r3, [pc, #148]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100dc8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100dcc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100dce:	4b23      	ldr	r3, [pc, #140]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100dd0:	2200      	movs	r2, #0
 8100dd2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100dd4:	4b21      	ldr	r3, [pc, #132]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100dd6:	2203      	movs	r2, #3
 8100dd8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100dda:	4b20      	ldr	r3, [pc, #128]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100ddc:	2200      	movs	r2, #0
 8100dde:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100de0:	4b1e      	ldr	r3, [pc, #120]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100de2:	2200      	movs	r2, #0
 8100de4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100de6:	4b1d      	ldr	r3, [pc, #116]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100de8:	2200      	movs	r2, #0
 8100dea:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100dec:	4b1b      	ldr	r3, [pc, #108]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100dee:	2200      	movs	r2, #0
 8100df0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100df2:	4b1a      	ldr	r3, [pc, #104]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100df4:	2200      	movs	r2, #0
 8100df6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100df8:	4b18      	ldr	r3, [pc, #96]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100dfa:	2200      	movs	r2, #0
 8100dfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100dfe:	4b17      	ldr	r3, [pc, #92]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e00:	2200      	movs	r2, #0
 8100e02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100e04:	4b15      	ldr	r3, [pc, #84]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e06:	2200      	movs	r2, #0
 8100e08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100e0a:	4b14      	ldr	r3, [pc, #80]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100e10:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100e12:	4b12      	ldr	r3, [pc, #72]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e14:	2200      	movs	r2, #0
 8100e16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100e18:	4b10      	ldr	r3, [pc, #64]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e1a:	2200      	movs	r2, #0
 8100e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e20:	2200      	movs	r2, #0
 8100e22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e24:	4b0d      	ldr	r3, [pc, #52]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e26:	2200      	movs	r2, #0
 8100e28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e2c:	2200      	movs	r2, #0
 8100e2e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100e30:	4b0a      	ldr	r3, [pc, #40]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e32:	2200      	movs	r2, #0
 8100e34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100e36:	4b09      	ldr	r3, [pc, #36]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e38:	2200      	movs	r2, #0
 8100e3a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100e3c:	4b07      	ldr	r3, [pc, #28]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e3e:	2200      	movs	r2, #0
 8100e40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100e42:	4b06      	ldr	r3, [pc, #24]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e44:	2200      	movs	r2, #0
 8100e46:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100e48:	4804      	ldr	r0, [pc, #16]	@ (8100e5c <MX_SPI5_Init+0xa0>)
 8100e4a:	f008 fe41 	bl	8109ad0 <HAL_SPI_Init>
 8100e4e:	4603      	mov	r3, r0
 8100e50:	2b00      	cmp	r3, #0
 8100e52:	d001      	beq.n	8100e58 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100e54:	f000 fa98 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100e58:	bf00      	nop
 8100e5a:	bd80      	pop	{r7, pc}
 8100e5c:	100005d8 	.word	0x100005d8
 8100e60:	40015000 	.word	0x40015000

08100e64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100e64:	b580      	push	{r7, lr}
 8100e66:	b096      	sub	sp, #88	@ 0x58
 8100e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100e6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100e6e:	2200      	movs	r2, #0
 8100e70:	601a      	str	r2, [r3, #0]
 8100e72:	605a      	str	r2, [r3, #4]
 8100e74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100e76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100e7a:	2200      	movs	r2, #0
 8100e7c:	601a      	str	r2, [r3, #0]
 8100e7e:	605a      	str	r2, [r3, #4]
 8100e80:	609a      	str	r2, [r3, #8]
 8100e82:	60da      	str	r2, [r3, #12]
 8100e84:	611a      	str	r2, [r3, #16]
 8100e86:	615a      	str	r2, [r3, #20]
 8100e88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100e8a:	1d3b      	adds	r3, r7, #4
 8100e8c:	222c      	movs	r2, #44	@ 0x2c
 8100e8e:	2100      	movs	r1, #0
 8100e90:	4618      	mov	r0, r3
 8100e92:	f00e febb 	bl	810fc0c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100e96:	4b39      	ldr	r3, [pc, #228]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100e98:	4a39      	ldr	r2, [pc, #228]	@ (8100f80 <MX_TIM8_Init+0x11c>)
 8100e9a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100e9c:	4b37      	ldr	r3, [pc, #220]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100e9e:	2200      	movs	r2, #0
 8100ea0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100ea2:	4b36      	ldr	r3, [pc, #216]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100ea4:	2200      	movs	r2, #0
 8100ea6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100ea8:	4b34      	ldr	r3, [pc, #208]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100eae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100eb0:	4b32      	ldr	r3, [pc, #200]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100eb2:	2200      	movs	r2, #0
 8100eb4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100eb6:	4b31      	ldr	r3, [pc, #196]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100eb8:	2200      	movs	r2, #0
 8100eba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100ebe:	2200      	movs	r2, #0
 8100ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8100ec2:	482e      	ldr	r0, [pc, #184]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100ec4:	f009 f812 	bl	8109eec <HAL_TIM_PWM_Init>
 8100ec8:	4603      	mov	r3, r0
 8100eca:	2b00      	cmp	r3, #0
 8100ecc:	d001      	beq.n	8100ed2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8100ece:	f000 fa5b 	bl	8101388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100ed6:	2300      	movs	r3, #0
 8100ed8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100eda:	2300      	movs	r3, #0
 8100edc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100ede:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100ee2:	4619      	mov	r1, r3
 8100ee4:	4825      	ldr	r0, [pc, #148]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100ee6:	f009 fe11 	bl	810ab0c <HAL_TIMEx_MasterConfigSynchronization>
 8100eea:	4603      	mov	r3, r0
 8100eec:	2b00      	cmp	r3, #0
 8100eee:	d001      	beq.n	8100ef4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8100ef0:	f000 fa4a 	bl	8101388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100ef4:	2360      	movs	r3, #96	@ 0x60
 8100ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8100ef8:	2300      	movs	r3, #0
 8100efa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100efc:	2300      	movs	r3, #0
 8100efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100f00:	2300      	movs	r3, #0
 8100f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100f04:	2300      	movs	r3, #0
 8100f06:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100f08:	2300      	movs	r3, #0
 8100f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100f0c:	2300      	movs	r3, #0
 8100f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100f10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100f14:	2200      	movs	r2, #0
 8100f16:	4619      	mov	r1, r3
 8100f18:	4818      	ldr	r0, [pc, #96]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100f1a:	f009 f945 	bl	810a1a8 <HAL_TIM_PWM_ConfigChannel>
 8100f1e:	4603      	mov	r3, r0
 8100f20:	2b00      	cmp	r3, #0
 8100f22:	d001      	beq.n	8100f28 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8100f24:	f000 fa30 	bl	8101388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100f28:	2300      	movs	r3, #0
 8100f2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100f2c:	2300      	movs	r3, #0
 8100f2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100f30:	2300      	movs	r3, #0
 8100f32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100f34:	2300      	movs	r3, #0
 8100f36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100f38:	2300      	movs	r3, #0
 8100f3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100f3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8100f40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100f42:	2300      	movs	r3, #0
 8100f44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100f46:	2300      	movs	r3, #0
 8100f48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100f4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8100f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100f50:	2300      	movs	r3, #0
 8100f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100f54:	2300      	movs	r3, #0
 8100f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8100f58:	1d3b      	adds	r3, r7, #4
 8100f5a:	4619      	mov	r1, r3
 8100f5c:	4807      	ldr	r0, [pc, #28]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100f5e:	f009 fe63 	bl	810ac28 <HAL_TIMEx_ConfigBreakDeadTime>
 8100f62:	4603      	mov	r3, r0
 8100f64:	2b00      	cmp	r3, #0
 8100f66:	d001      	beq.n	8100f6c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8100f68:	f000 fa0e 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8100f6c:	4803      	ldr	r0, [pc, #12]	@ (8100f7c <MX_TIM8_Init+0x118>)
 8100f6e:	f000 ffa9 	bl	8101ec4 <HAL_TIM_MspPostInit>

}
 8100f72:	bf00      	nop
 8100f74:	3758      	adds	r7, #88	@ 0x58
 8100f76:	46bd      	mov	sp, r7
 8100f78:	bd80      	pop	{r7, pc}
 8100f7a:	bf00      	nop
 8100f7c:	10000660 	.word	0x10000660
 8100f80:	40010400 	.word	0x40010400

08100f84 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8100f84:	b580      	push	{r7, lr}
 8100f86:	b088      	sub	sp, #32
 8100f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8100f8a:	1d3b      	adds	r3, r7, #4
 8100f8c:	2200      	movs	r2, #0
 8100f8e:	601a      	str	r2, [r3, #0]
 8100f90:	605a      	str	r2, [r3, #4]
 8100f92:	609a      	str	r2, [r3, #8]
 8100f94:	60da      	str	r2, [r3, #12]
 8100f96:	611a      	str	r2, [r3, #16]
 8100f98:	615a      	str	r2, [r3, #20]
 8100f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8100f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8101018 <MX_TIM13_Init+0x94>)
 8100f9e:	4a1f      	ldr	r2, [pc, #124]	@ (810101c <MX_TIM13_Init+0x98>)
 8100fa0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8100fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8101018 <MX_TIM13_Init+0x94>)
 8100fa4:	2200      	movs	r2, #0
 8100fa6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8101018 <MX_TIM13_Init+0x94>)
 8100faa:	2200      	movs	r2, #0
 8100fac:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8100fae:	4b1a      	ldr	r3, [pc, #104]	@ (8101018 <MX_TIM13_Init+0x94>)
 8100fb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100fb4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100fb6:	4b18      	ldr	r3, [pc, #96]	@ (8101018 <MX_TIM13_Init+0x94>)
 8100fb8:	2200      	movs	r2, #0
 8100fba:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100fbc:	4b16      	ldr	r3, [pc, #88]	@ (8101018 <MX_TIM13_Init+0x94>)
 8100fbe:	2200      	movs	r2, #0
 8100fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8100fc2:	4815      	ldr	r0, [pc, #84]	@ (8101018 <MX_TIM13_Init+0x94>)
 8100fc4:	f008 fec3 	bl	8109d4e <HAL_TIM_Base_Init>
 8100fc8:	4603      	mov	r3, r0
 8100fca:	2b00      	cmp	r3, #0
 8100fcc:	d001      	beq.n	8100fd2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8100fce:	f000 f9db 	bl	8101388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8100fd2:	4811      	ldr	r0, [pc, #68]	@ (8101018 <MX_TIM13_Init+0x94>)
 8100fd4:	f008 ff8a 	bl	8109eec <HAL_TIM_PWM_Init>
 8100fd8:	4603      	mov	r3, r0
 8100fda:	2b00      	cmp	r3, #0
 8100fdc:	d001      	beq.n	8100fe2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8100fde:	f000 f9d3 	bl	8101388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100fe2:	2360      	movs	r3, #96	@ 0x60
 8100fe4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8100fe6:	2300      	movs	r3, #0
 8100fe8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100fea:	2300      	movs	r3, #0
 8100fec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100fee:	2300      	movs	r3, #0
 8100ff0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100ff2:	1d3b      	adds	r3, r7, #4
 8100ff4:	2200      	movs	r2, #0
 8100ff6:	4619      	mov	r1, r3
 8100ff8:	4807      	ldr	r0, [pc, #28]	@ (8101018 <MX_TIM13_Init+0x94>)
 8100ffa:	f009 f8d5 	bl	810a1a8 <HAL_TIM_PWM_ConfigChannel>
 8100ffe:	4603      	mov	r3, r0
 8101000:	2b00      	cmp	r3, #0
 8101002:	d001      	beq.n	8101008 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8101004:	f000 f9c0 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8101008:	4803      	ldr	r0, [pc, #12]	@ (8101018 <MX_TIM13_Init+0x94>)
 810100a:	f000 ff5b 	bl	8101ec4 <HAL_TIM_MspPostInit>

}
 810100e:	bf00      	nop
 8101010:	3720      	adds	r7, #32
 8101012:	46bd      	mov	sp, r7
 8101014:	bd80      	pop	{r7, pc}
 8101016:	bf00      	nop
 8101018:	100006ac 	.word	0x100006ac
 810101c:	40001c00 	.word	0x40001c00

08101020 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8101020:	b580      	push	{r7, lr}
 8101022:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8101024:	4b22      	ldr	r3, [pc, #136]	@ (81010b0 <MX_UART8_Init+0x90>)
 8101026:	4a23      	ldr	r2, [pc, #140]	@ (81010b4 <MX_UART8_Init+0x94>)
 8101028:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 810102a:	4b21      	ldr	r3, [pc, #132]	@ (81010b0 <MX_UART8_Init+0x90>)
 810102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101030:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8101032:	4b1f      	ldr	r3, [pc, #124]	@ (81010b0 <MX_UART8_Init+0x90>)
 8101034:	2200      	movs	r2, #0
 8101036:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8101038:	4b1d      	ldr	r3, [pc, #116]	@ (81010b0 <MX_UART8_Init+0x90>)
 810103a:	2200      	movs	r2, #0
 810103c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 810103e:	4b1c      	ldr	r3, [pc, #112]	@ (81010b0 <MX_UART8_Init+0x90>)
 8101040:	2200      	movs	r2, #0
 8101042:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8101044:	4b1a      	ldr	r3, [pc, #104]	@ (81010b0 <MX_UART8_Init+0x90>)
 8101046:	220c      	movs	r2, #12
 8101048:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810104a:	4b19      	ldr	r3, [pc, #100]	@ (81010b0 <MX_UART8_Init+0x90>)
 810104c:	2200      	movs	r2, #0
 810104e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8101050:	4b17      	ldr	r3, [pc, #92]	@ (81010b0 <MX_UART8_Init+0x90>)
 8101052:	2200      	movs	r2, #0
 8101054:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101056:	4b16      	ldr	r3, [pc, #88]	@ (81010b0 <MX_UART8_Init+0x90>)
 8101058:	2200      	movs	r2, #0
 810105a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810105c:	4b14      	ldr	r3, [pc, #80]	@ (81010b0 <MX_UART8_Init+0x90>)
 810105e:	2200      	movs	r2, #0
 8101060:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101062:	4b13      	ldr	r3, [pc, #76]	@ (81010b0 <MX_UART8_Init+0x90>)
 8101064:	2200      	movs	r2, #0
 8101066:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8101068:	4811      	ldr	r0, [pc, #68]	@ (81010b0 <MX_UART8_Init+0x90>)
 810106a:	f009 fe79 	bl	810ad60 <HAL_UART_Init>
 810106e:	4603      	mov	r3, r0
 8101070:	2b00      	cmp	r3, #0
 8101072:	d001      	beq.n	8101078 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8101074:	f000 f988 	bl	8101388 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101078:	2100      	movs	r1, #0
 810107a:	480d      	ldr	r0, [pc, #52]	@ (81010b0 <MX_UART8_Init+0x90>)
 810107c:	f00a fe80 	bl	810bd80 <HAL_UARTEx_SetTxFifoThreshold>
 8101080:	4603      	mov	r3, r0
 8101082:	2b00      	cmp	r3, #0
 8101084:	d001      	beq.n	810108a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8101086:	f000 f97f 	bl	8101388 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810108a:	2100      	movs	r1, #0
 810108c:	4808      	ldr	r0, [pc, #32]	@ (81010b0 <MX_UART8_Init+0x90>)
 810108e:	f00a feb5 	bl	810bdfc <HAL_UARTEx_SetRxFifoThreshold>
 8101092:	4603      	mov	r3, r0
 8101094:	2b00      	cmp	r3, #0
 8101096:	d001      	beq.n	810109c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8101098:	f000 f976 	bl	8101388 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 810109c:	4804      	ldr	r0, [pc, #16]	@ (81010b0 <MX_UART8_Init+0x90>)
 810109e:	f00a fe36 	bl	810bd0e <HAL_UARTEx_DisableFifoMode>
 81010a2:	4603      	mov	r3, r0
 81010a4:	2b00      	cmp	r3, #0
 81010a6:	d001      	beq.n	81010ac <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 81010a8:	f000 f96e 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 81010ac:	bf00      	nop
 81010ae:	bd80      	pop	{r7, pc}
 81010b0:	100006f8 	.word	0x100006f8
 81010b4:	40007c00 	.word	0x40007c00

081010b8 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 81010b8:	b580      	push	{r7, lr}
 81010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 81010bc:	4b15      	ldr	r3, [pc, #84]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010be:	4a16      	ldr	r2, [pc, #88]	@ (8101118 <MX_USB_OTG_HS_PCD_Init+0x60>)
 81010c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 81010c2:	4b14      	ldr	r3, [pc, #80]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010c4:	2209      	movs	r2, #9
 81010c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 81010c8:	4b12      	ldr	r3, [pc, #72]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010ca:	2200      	movs	r2, #0
 81010cc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 81010ce:	4b11      	ldr	r3, [pc, #68]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010d0:	2200      	movs	r2, #0
 81010d2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 81010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010d6:	2201      	movs	r2, #1
 81010d8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 81010da:	4b0e      	ldr	r3, [pc, #56]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010dc:	2200      	movs	r2, #0
 81010de:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 81010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010e2:	2200      	movs	r2, #0
 81010e4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 81010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010e8:	2200      	movs	r2, #0
 81010ea:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 81010ec:	4b09      	ldr	r3, [pc, #36]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010ee:	2200      	movs	r2, #0
 81010f0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 81010f2:	4b08      	ldr	r3, [pc, #32]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010f4:	2200      	movs	r2, #0
 81010f6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 81010f8:	4b06      	ldr	r3, [pc, #24]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81010fa:	2200      	movs	r2, #0
 81010fc:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 81010fe:	4805      	ldr	r0, [pc, #20]	@ (8101114 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101100:	f003 fd18 	bl	8104b34 <HAL_PCD_Init>
 8101104:	4603      	mov	r3, r0
 8101106:	2b00      	cmp	r3, #0
 8101108:	d001      	beq.n	810110e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 810110a:	f000 f93d 	bl	8101388 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 810110e:	bf00      	nop
 8101110:	bd80      	pop	{r7, pc}
 8101112:	bf00      	nop
 8101114:	1000078c 	.word	0x1000078c
 8101118:	40040000 	.word	0x40040000

0810111c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 810111c:	b580      	push	{r7, lr}
 810111e:	b088      	sub	sp, #32
 8101120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8101122:	1d3b      	adds	r3, r7, #4
 8101124:	2200      	movs	r2, #0
 8101126:	601a      	str	r2, [r3, #0]
 8101128:	605a      	str	r2, [r3, #4]
 810112a:	609a      	str	r2, [r3, #8]
 810112c:	60da      	str	r2, [r3, #12]
 810112e:	611a      	str	r2, [r3, #16]
 8101130:	615a      	str	r2, [r3, #20]
 8101132:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8101134:	4b1e      	ldr	r3, [pc, #120]	@ (81011b0 <MX_FMC_Init+0x94>)
 8101136:	4a1f      	ldr	r2, [pc, #124]	@ (81011b4 <MX_FMC_Init+0x98>)
 8101138:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 810113a:	4b1d      	ldr	r3, [pc, #116]	@ (81011b0 <MX_FMC_Init+0x94>)
 810113c:	2201      	movs	r2, #1
 810113e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8101140:	4b1b      	ldr	r3, [pc, #108]	@ (81011b0 <MX_FMC_Init+0x94>)
 8101142:	2200      	movs	r2, #0
 8101144:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8101146:	4b1a      	ldr	r3, [pc, #104]	@ (81011b0 <MX_FMC_Init+0x94>)
 8101148:	2208      	movs	r2, #8
 810114a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 810114c:	4b18      	ldr	r3, [pc, #96]	@ (81011b0 <MX_FMC_Init+0x94>)
 810114e:	2220      	movs	r2, #32
 8101150:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8101152:	4b17      	ldr	r3, [pc, #92]	@ (81011b0 <MX_FMC_Init+0x94>)
 8101154:	2200      	movs	r2, #0
 8101156:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8101158:	4b15      	ldr	r3, [pc, #84]	@ (81011b0 <MX_FMC_Init+0x94>)
 810115a:	2280      	movs	r2, #128	@ 0x80
 810115c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 810115e:	4b14      	ldr	r3, [pc, #80]	@ (81011b0 <MX_FMC_Init+0x94>)
 8101160:	2200      	movs	r2, #0
 8101162:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8101164:	4b12      	ldr	r3, [pc, #72]	@ (81011b0 <MX_FMC_Init+0x94>)
 8101166:	2200      	movs	r2, #0
 8101168:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 810116a:	4b11      	ldr	r3, [pc, #68]	@ (81011b0 <MX_FMC_Init+0x94>)
 810116c:	2200      	movs	r2, #0
 810116e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8101170:	4b0f      	ldr	r3, [pc, #60]	@ (81011b0 <MX_FMC_Init+0x94>)
 8101172:	2200      	movs	r2, #0
 8101174:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8101176:	2310      	movs	r3, #16
 8101178:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 810117a:	2310      	movs	r3, #16
 810117c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 810117e:	2310      	movs	r3, #16
 8101180:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8101182:	2310      	movs	r3, #16
 8101184:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8101186:	2310      	movs	r3, #16
 8101188:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 810118a:	2310      	movs	r3, #16
 810118c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 810118e:	2310      	movs	r3, #16
 8101190:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8101192:	1d3b      	adds	r3, r7, #4
 8101194:	4619      	mov	r1, r3
 8101196:	4806      	ldr	r0, [pc, #24]	@ (81011b0 <MX_FMC_Init+0x94>)
 8101198:	f008 fbf0 	bl	810997c <HAL_SDRAM_Init>
 810119c:	4603      	mov	r3, r0
 810119e:	2b00      	cmp	r3, #0
 81011a0:	d001      	beq.n	81011a6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 81011a2:	f000 f8f1 	bl	8101388 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 81011a6:	bf00      	nop
 81011a8:	3720      	adds	r7, #32
 81011aa:	46bd      	mov	sp, r7
 81011ac:	bd80      	pop	{r7, pc}
 81011ae:	bf00      	nop
 81011b0:	10000c70 	.word	0x10000c70
 81011b4:	52004140 	.word	0x52004140

081011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81011b8:	b580      	push	{r7, lr}
 81011ba:	b090      	sub	sp, #64	@ 0x40
 81011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81011c2:	2200      	movs	r2, #0
 81011c4:	601a      	str	r2, [r3, #0]
 81011c6:	605a      	str	r2, [r3, #4]
 81011c8:	609a      	str	r2, [r3, #8]
 81011ca:	60da      	str	r2, [r3, #12]
 81011cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 81011ce:	4b5f      	ldr	r3, [pc, #380]	@ (810134c <MX_GPIO_Init+0x194>)
 81011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011d4:	4a5d      	ldr	r2, [pc, #372]	@ (810134c <MX_GPIO_Init+0x194>)
 81011d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81011da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011de:	4b5b      	ldr	r3, [pc, #364]	@ (810134c <MX_GPIO_Init+0x194>)
 81011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 81011ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81011ec:	4b57      	ldr	r3, [pc, #348]	@ (810134c <MX_GPIO_Init+0x194>)
 81011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011f2:	4a56      	ldr	r2, [pc, #344]	@ (810134c <MX_GPIO_Init+0x194>)
 81011f4:	f043 0302 	orr.w	r3, r3, #2
 81011f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011fc:	4b53      	ldr	r3, [pc, #332]	@ (810134c <MX_GPIO_Init+0x194>)
 81011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101202:	f003 0302 	and.w	r3, r3, #2
 8101206:	627b      	str	r3, [r7, #36]	@ 0x24
 8101208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 810120a:	4b50      	ldr	r3, [pc, #320]	@ (810134c <MX_GPIO_Init+0x194>)
 810120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101210:	4a4e      	ldr	r2, [pc, #312]	@ (810134c <MX_GPIO_Init+0x194>)
 8101212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101216:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810121a:	4b4c      	ldr	r3, [pc, #304]	@ (810134c <MX_GPIO_Init+0x194>)
 810121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101224:	623b      	str	r3, [r7, #32]
 8101226:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101228:	4b48      	ldr	r3, [pc, #288]	@ (810134c <MX_GPIO_Init+0x194>)
 810122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810122e:	4a47      	ldr	r2, [pc, #284]	@ (810134c <MX_GPIO_Init+0x194>)
 8101230:	f043 0304 	orr.w	r3, r3, #4
 8101234:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101238:	4b44      	ldr	r3, [pc, #272]	@ (810134c <MX_GPIO_Init+0x194>)
 810123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810123e:	f003 0304 	and.w	r3, r3, #4
 8101242:	61fb      	str	r3, [r7, #28]
 8101244:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101246:	4b41      	ldr	r3, [pc, #260]	@ (810134c <MX_GPIO_Init+0x194>)
 8101248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810124c:	4a3f      	ldr	r2, [pc, #252]	@ (810134c <MX_GPIO_Init+0x194>)
 810124e:	f043 0310 	orr.w	r3, r3, #16
 8101252:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101256:	4b3d      	ldr	r3, [pc, #244]	@ (810134c <MX_GPIO_Init+0x194>)
 8101258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810125c:	f003 0310 	and.w	r3, r3, #16
 8101260:	61bb      	str	r3, [r7, #24]
 8101262:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8101264:	4b39      	ldr	r3, [pc, #228]	@ (810134c <MX_GPIO_Init+0x194>)
 8101266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810126a:	4a38      	ldr	r2, [pc, #224]	@ (810134c <MX_GPIO_Init+0x194>)
 810126c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101270:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101274:	4b35      	ldr	r3, [pc, #212]	@ (810134c <MX_GPIO_Init+0x194>)
 8101276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810127a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810127e:	617b      	str	r3, [r7, #20]
 8101280:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101282:	4b32      	ldr	r3, [pc, #200]	@ (810134c <MX_GPIO_Init+0x194>)
 8101284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101288:	4a30      	ldr	r2, [pc, #192]	@ (810134c <MX_GPIO_Init+0x194>)
 810128a:	f043 0308 	orr.w	r3, r3, #8
 810128e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101292:	4b2e      	ldr	r3, [pc, #184]	@ (810134c <MX_GPIO_Init+0x194>)
 8101294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101298:	f003 0308 	and.w	r3, r3, #8
 810129c:	613b      	str	r3, [r7, #16]
 810129e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81012a0:	4b2a      	ldr	r3, [pc, #168]	@ (810134c <MX_GPIO_Init+0x194>)
 81012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012a6:	4a29      	ldr	r2, [pc, #164]	@ (810134c <MX_GPIO_Init+0x194>)
 81012a8:	f043 0301 	orr.w	r3, r3, #1
 81012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012b0:	4b26      	ldr	r3, [pc, #152]	@ (810134c <MX_GPIO_Init+0x194>)
 81012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012b6:	f003 0301 	and.w	r3, r3, #1
 81012ba:	60fb      	str	r3, [r7, #12]
 81012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81012be:	4b23      	ldr	r3, [pc, #140]	@ (810134c <MX_GPIO_Init+0x194>)
 81012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012c4:	4a21      	ldr	r2, [pc, #132]	@ (810134c <MX_GPIO_Init+0x194>)
 81012c6:	f043 0320 	orr.w	r3, r3, #32
 81012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012ce:	4b1f      	ldr	r3, [pc, #124]	@ (810134c <MX_GPIO_Init+0x194>)
 81012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012d4:	f003 0320 	and.w	r3, r3, #32
 81012d8:	60bb      	str	r3, [r7, #8]
 81012da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 81012dc:	4b1b      	ldr	r3, [pc, #108]	@ (810134c <MX_GPIO_Init+0x194>)
 81012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012e2:	4a1a      	ldr	r2, [pc, #104]	@ (810134c <MX_GPIO_Init+0x194>)
 81012e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012ec:	4b17      	ldr	r3, [pc, #92]	@ (810134c <MX_GPIO_Init+0x194>)
 81012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81012f6:	607b      	str	r3, [r7, #4]
 81012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 81012fa:	4b14      	ldr	r3, [pc, #80]	@ (810134c <MX_GPIO_Init+0x194>)
 81012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101300:	4a12      	ldr	r2, [pc, #72]	@ (810134c <MX_GPIO_Init+0x194>)
 8101302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101306:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810130a:	4b10      	ldr	r3, [pc, #64]	@ (810134c <MX_GPIO_Init+0x194>)
 810130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101314:	603b      	str	r3, [r7, #0]
 8101316:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8101318:	2380      	movs	r3, #128	@ 0x80
 810131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 810131c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8101320:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101322:	2300      	movs	r3, #0
 8101324:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8101326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810132a:	4619      	mov	r1, r3
 810132c:	4808      	ldr	r0, [pc, #32]	@ (8101350 <MX_GPIO_Init+0x198>)
 810132e:	f003 fa25 	bl	810477c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8101332:	2200      	movs	r2, #0
 8101334:	2105      	movs	r1, #5
 8101336:	2017      	movs	r0, #23
 8101338:	f002 fdb2 	bl	8103ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 810133c:	2017      	movs	r0, #23
 810133e:	f002 fdc9 	bl	8103ed4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8101342:	bf00      	nop
 8101344:	3740      	adds	r7, #64	@ 0x40
 8101346:	46bd      	mov	sp, r7
 8101348:	bd80      	pop	{r7, pc}
 810134a:	bf00      	nop
 810134c:	58024400 	.word	0x58024400
 8101350:	58020800 	.word	0x58020800

08101354 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8101354:	b580      	push	{r7, lr}
 8101356:	b082      	sub	sp, #8
 8101358:	af00      	add	r7, sp, #0
 810135a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 810135c:	2001      	movs	r0, #1
 810135e:	f00b ffb3 	bl	810d2c8 <osDelay>
 8101362:	e7fb      	b.n	810135c <StartDefaultTask+0x8>

08101364 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101364:	b580      	push	{r7, lr}
 8101366:	b082      	sub	sp, #8
 8101368:	af00      	add	r7, sp, #0
 810136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 810136c:	687b      	ldr	r3, [r7, #4]
 810136e:	681b      	ldr	r3, [r3, #0]
 8101370:	4a04      	ldr	r2, [pc, #16]	@ (8101384 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101372:	4293      	cmp	r3, r2
 8101374:	d101      	bne.n	810137a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8101376:	f001 fa9f 	bl	81028b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810137a:	bf00      	nop
 810137c:	3708      	adds	r7, #8
 810137e:	46bd      	mov	sp, r7
 8101380:	bd80      	pop	{r7, pc}
 8101382:	bf00      	nop
 8101384:	40000400 	.word	0x40000400

08101388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101388:	b480      	push	{r7}
 810138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810138c:	b672      	cpsid	i
}
 810138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101390:	bf00      	nop
 8101392:	e7fd      	b.n	8101390 <Error_Handler+0x8>

08101394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101394:	b580      	push	{r7, lr}
 8101396:	b082      	sub	sp, #8
 8101398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810139a:	4b0c      	ldr	r3, [pc, #48]	@ (81013cc <HAL_MspInit+0x38>)
 810139c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81013a0:	4a0a      	ldr	r2, [pc, #40]	@ (81013cc <HAL_MspInit+0x38>)
 81013a2:	f043 0302 	orr.w	r3, r3, #2
 81013a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81013aa:	4b08      	ldr	r3, [pc, #32]	@ (81013cc <HAL_MspInit+0x38>)
 81013ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81013b0:	f003 0302 	and.w	r3, r3, #2
 81013b4:	607b      	str	r3, [r7, #4]
 81013b6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81013b8:	2200      	movs	r2, #0
 81013ba:	210f      	movs	r1, #15
 81013bc:	f06f 0001 	mvn.w	r0, #1
 81013c0:	f002 fd6e 	bl	8103ea0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81013c4:	bf00      	nop
 81013c6:	3708      	adds	r7, #8
 81013c8:	46bd      	mov	sp, r7
 81013ca:	bd80      	pop	{r7, pc}
 81013cc:	58024400 	.word	0x58024400

081013d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81013d0:	b580      	push	{r7, lr}
 81013d2:	b08c      	sub	sp, #48	@ 0x30
 81013d4:	af00      	add	r7, sp, #0
 81013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013d8:	f107 031c 	add.w	r3, r7, #28
 81013dc:	2200      	movs	r2, #0
 81013de:	601a      	str	r2, [r3, #0]
 81013e0:	605a      	str	r2, [r3, #4]
 81013e2:	609a      	str	r2, [r3, #8]
 81013e4:	60da      	str	r2, [r3, #12]
 81013e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 81013e8:	687b      	ldr	r3, [r7, #4]
 81013ea:	681b      	ldr	r3, [r3, #0]
 81013ec:	4a3e      	ldr	r2, [pc, #248]	@ (81014e8 <HAL_ADC_MspInit+0x118>)
 81013ee:	4293      	cmp	r3, r2
 81013f0:	d12a      	bne.n	8101448 <HAL_ADC_MspInit+0x78>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81013f2:	4b3e      	ldr	r3, [pc, #248]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 81013f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81013f8:	4a3c      	ldr	r2, [pc, #240]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 81013fa:	f043 0320 	orr.w	r3, r3, #32
 81013fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101402:	4b3a      	ldr	r3, [pc, #232]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101408:	f003 0320 	and.w	r3, r3, #32
 810140c:	61bb      	str	r3, [r7, #24]
 810140e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101410:	4b36      	ldr	r3, [pc, #216]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101416:	4a35      	ldr	r2, [pc, #212]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101418:	f043 0301 	orr.w	r3, r3, #1
 810141c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101420:	4b32      	ldr	r3, [pc, #200]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101426:	f003 0301 	and.w	r3, r3, #1
 810142a:	617b      	str	r3, [r7, #20]
 810142c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 810142e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8101432:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8101436:	f001 faa3 	bl	8102980 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 810143a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 810143e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8101442:	f001 fa9d 	bl	8102980 <HAL_SYSCFG_AnalogSwitchConfig>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8101446:	e04a      	b.n	81014de <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 8101448:	687b      	ldr	r3, [r7, #4]
 810144a:	681b      	ldr	r3, [r3, #0]
 810144c:	4a28      	ldr	r2, [pc, #160]	@ (81014f0 <HAL_ADC_MspInit+0x120>)
 810144e:	4293      	cmp	r3, r2
 8101450:	d145      	bne.n	81014de <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101452:	4b26      	ldr	r3, [pc, #152]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101458:	4a24      	ldr	r2, [pc, #144]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 810145a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810145e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101462:	4b22      	ldr	r3, [pc, #136]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101468:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810146c:	613b      	str	r3, [r7, #16]
 810146e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101470:	4b1e      	ldr	r3, [pc, #120]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101476:	4a1d      	ldr	r2, [pc, #116]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101478:	f043 0320 	orr.w	r3, r3, #32
 810147c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101480:	4b1a      	ldr	r3, [pc, #104]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101486:	f003 0320 	and.w	r3, r3, #32
 810148a:	60fb      	str	r3, [r7, #12]
 810148c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810148e:	4b17      	ldr	r3, [pc, #92]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101494:	4a15      	ldr	r2, [pc, #84]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 8101496:	f043 0304 	orr.w	r3, r3, #4
 810149a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810149e:	4b13      	ldr	r3, [pc, #76]	@ (81014ec <HAL_ADC_MspInit+0x11c>)
 81014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014a4:	f003 0304 	and.w	r3, r3, #4
 81014a8:	60bb      	str	r3, [r7, #8]
 81014aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 81014ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81014b2:	2303      	movs	r3, #3
 81014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014b6:	2300      	movs	r3, #0
 81014b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 81014ba:	f107 031c 	add.w	r3, r7, #28
 81014be:	4619      	mov	r1, r3
 81014c0:	480c      	ldr	r0, [pc, #48]	@ (81014f4 <HAL_ADC_MspInit+0x124>)
 81014c2:	f003 f95b 	bl	810477c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81014c6:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 81014ca:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 81014ce:	f001 fa57 	bl	8102980 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81014d2:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 81014d6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 81014da:	f001 fa51 	bl	8102980 <HAL_SYSCFG_AnalogSwitchConfig>
}
 81014de:	bf00      	nop
 81014e0:	3730      	adds	r7, #48	@ 0x30
 81014e2:	46bd      	mov	sp, r7
 81014e4:	bd80      	pop	{r7, pc}
 81014e6:	bf00      	nop
 81014e8:	40022000 	.word	0x40022000
 81014ec:	58024400 	.word	0x58024400
 81014f0:	58026000 	.word	0x58026000
 81014f4:	58021400 	.word	0x58021400

081014f8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 81014f8:	b580      	push	{r7, lr}
 81014fa:	b08e      	sub	sp, #56	@ 0x38
 81014fc:	af00      	add	r7, sp, #0
 81014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101504:	2200      	movs	r2, #0
 8101506:	601a      	str	r2, [r3, #0]
 8101508:	605a      	str	r2, [r3, #4]
 810150a:	609a      	str	r2, [r3, #8]
 810150c:	60da      	str	r2, [r3, #12]
 810150e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8101510:	687b      	ldr	r3, [r7, #4]
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	4a49      	ldr	r2, [pc, #292]	@ (810163c <HAL_ETH_MspInit+0x144>)
 8101516:	4293      	cmp	r3, r2
 8101518:	f040 808b 	bne.w	8101632 <HAL_ETH_MspInit+0x13a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 810151c:	4b48      	ldr	r3, [pc, #288]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 810151e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101522:	4a47      	ldr	r2, [pc, #284]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 8101524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101528:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810152c:	4b44      	ldr	r3, [pc, #272]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 810152e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8101536:	623b      	str	r3, [r7, #32]
 8101538:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 810153a:	4b41      	ldr	r3, [pc, #260]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 810153c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101540:	4a3f      	ldr	r2, [pc, #252]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 8101542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101546:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810154a:	4b3d      	ldr	r3, [pc, #244]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 810154c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101554:	61fb      	str	r3, [r7, #28]
 8101556:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8101558:	4b39      	ldr	r3, [pc, #228]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 810155a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810155e:	4a38      	ldr	r2, [pc, #224]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 8101560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101564:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101568:	4b35      	ldr	r3, [pc, #212]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 810156a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101572:	61bb      	str	r3, [r7, #24]
 8101574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8101576:	4b32      	ldr	r3, [pc, #200]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 8101578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810157c:	4a30      	ldr	r2, [pc, #192]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 810157e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101582:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101586:	4b2e      	ldr	r3, [pc, #184]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 8101588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810158c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101590:	617b      	str	r3, [r7, #20]
 8101592:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101594:	4b2a      	ldr	r3, [pc, #168]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 8101596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810159a:	4a29      	ldr	r2, [pc, #164]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 810159c:	f043 0304 	orr.w	r3, r3, #4
 81015a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015a4:	4b26      	ldr	r3, [pc, #152]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 81015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015aa:	f003 0304 	and.w	r3, r3, #4
 81015ae:	613b      	str	r3, [r7, #16]
 81015b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81015b2:	4b23      	ldr	r3, [pc, #140]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 81015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015b8:	4a21      	ldr	r2, [pc, #132]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 81015ba:	f043 0301 	orr.w	r3, r3, #1
 81015be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015c2:	4b1f      	ldr	r3, [pc, #124]	@ (8101640 <HAL_ETH_MspInit+0x148>)
 81015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015c8:	f003 0301 	and.w	r3, r3, #1
 81015cc:	60fb      	str	r3, [r7, #12]
 81015ce:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 81015d0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 81015d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015d6:	2302      	movs	r3, #2
 81015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015da:	2300      	movs	r3, #0
 81015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015de:	2300      	movs	r3, #0
 81015e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81015e2:	230b      	movs	r3, #11
 81015e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81015e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81015ea:	4619      	mov	r1, r3
 81015ec:	4815      	ldr	r0, [pc, #84]	@ (8101644 <HAL_ETH_MspInit+0x14c>)
 81015ee:	f003 f8c5 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 81015f2:	2332      	movs	r3, #50	@ 0x32
 81015f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015f6:	2302      	movs	r3, #2
 81015f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015fa:	2300      	movs	r3, #0
 81015fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015fe:	2300      	movs	r3, #0
 8101600:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101602:	230b      	movs	r3, #11
 8101604:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810160a:	4619      	mov	r1, r3
 810160c:	480e      	ldr	r0, [pc, #56]	@ (8101648 <HAL_ETH_MspInit+0x150>)
 810160e:	f003 f8b5 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 8101612:	2386      	movs	r3, #134	@ 0x86
 8101614:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101616:	2302      	movs	r3, #2
 8101618:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810161a:	2300      	movs	r3, #0
 810161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810161e:	2300      	movs	r3, #0
 8101620:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101622:	230b      	movs	r3, #11
 8101624:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810162a:	4619      	mov	r1, r3
 810162c:	4807      	ldr	r0, [pc, #28]	@ (810164c <HAL_ETH_MspInit+0x154>)
 810162e:	f003 f8a5 	bl	810477c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8101632:	bf00      	nop
 8101634:	3738      	adds	r7, #56	@ 0x38
 8101636:	46bd      	mov	sp, r7
 8101638:	bd80      	pop	{r7, pc}
 810163a:	bf00      	nop
 810163c:	40028000 	.word	0x40028000
 8101640:	58024400 	.word	0x58024400
 8101644:	58021800 	.word	0x58021800
 8101648:	58020800 	.word	0x58020800
 810164c:	58020000 	.word	0x58020000

08101650 <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101650:	b580      	push	{r7, lr}
 8101652:	b0bc      	sub	sp, #240	@ 0xf0
 8101654:	af00      	add	r7, sp, #0
 8101656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101658:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810165c:	2200      	movs	r2, #0
 810165e:	601a      	str	r2, [r3, #0]
 8101660:	605a      	str	r2, [r3, #4]
 8101662:	609a      	str	r2, [r3, #8]
 8101664:	60da      	str	r2, [r3, #12]
 8101666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101668:	f107 0310 	add.w	r3, r7, #16
 810166c:	22c8      	movs	r2, #200	@ 0xc8
 810166e:	2100      	movs	r1, #0
 8101670:	4618      	mov	r0, r3
 8101672:	f00e facb 	bl	810fc0c <memset>
  if(hcec->Instance==CEC)
 8101676:	687b      	ldr	r3, [r7, #4]
 8101678:	681b      	ldr	r3, [r3, #0]
 810167a:	4a2b      	ldr	r2, [pc, #172]	@ (8101728 <HAL_CEC_MspInit+0xd8>)
 810167c:	4293      	cmp	r3, r2
 810167e:	d14e      	bne.n	810171e <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8101680:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8101684:	f04f 0300 	mov.w	r3, #0
 8101688:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 810168c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8101690:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101694:	f107 0310 	add.w	r3, r7, #16
 8101698:	4618      	mov	r0, r3
 810169a:	f003 fee7 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 810169e:	4603      	mov	r3, r0
 81016a0:	2b00      	cmp	r3, #0
 81016a2:	d001      	beq.n	81016a8 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 81016a4:	f7ff fe70 	bl	8101388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 81016a8:	4b20      	ldr	r3, [pc, #128]	@ (810172c <HAL_CEC_MspInit+0xdc>)
 81016aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016ae:	4a1f      	ldr	r2, [pc, #124]	@ (810172c <HAL_CEC_MspInit+0xdc>)
 81016b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 81016b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81016b8:	4b1c      	ldr	r3, [pc, #112]	@ (810172c <HAL_CEC_MspInit+0xdc>)
 81016ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81016c2:	60fb      	str	r3, [r7, #12]
 81016c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81016c6:	4b19      	ldr	r3, [pc, #100]	@ (810172c <HAL_CEC_MspInit+0xdc>)
 81016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016cc:	4a17      	ldr	r2, [pc, #92]	@ (810172c <HAL_CEC_MspInit+0xdc>)
 81016ce:	f043 0302 	orr.w	r3, r3, #2
 81016d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016d6:	4b15      	ldr	r3, [pc, #84]	@ (810172c <HAL_CEC_MspInit+0xdc>)
 81016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016dc:	f003 0302 	and.w	r3, r3, #2
 81016e0:	60bb      	str	r3, [r7, #8]
 81016e2:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 81016e4:	2340      	movs	r3, #64	@ 0x40
 81016e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81016ea:	2312      	movs	r3, #18
 81016ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016f0:	2300      	movs	r3, #0
 81016f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016f6:	2300      	movs	r3, #0
 81016f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 81016fc:	2305      	movs	r3, #5
 81016fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 8101702:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101706:	4619      	mov	r1, r3
 8101708:	4809      	ldr	r0, [pc, #36]	@ (8101730 <HAL_CEC_MspInit+0xe0>)
 810170a:	f003 f837 	bl	810477c <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 810170e:	2200      	movs	r2, #0
 8101710:	2105      	movs	r1, #5
 8101712:	205e      	movs	r0, #94	@ 0x5e
 8101714:	f002 fbc4 	bl	8103ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8101718:	205e      	movs	r0, #94	@ 0x5e
 810171a:	f002 fbdb 	bl	8103ed4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 810171e:	bf00      	nop
 8101720:	37f0      	adds	r7, #240	@ 0xf0
 8101722:	46bd      	mov	sp, r7
 8101724:	bd80      	pop	{r7, pc}
 8101726:	bf00      	nop
 8101728:	40006c00 	.word	0x40006c00
 810172c:	58024400 	.word	0x58024400
 8101730:	58020400 	.word	0x58020400

08101734 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8101734:	b580      	push	{r7, lr}
 8101736:	b0c0      	sub	sp, #256	@ 0x100
 8101738:	af00      	add	r7, sp, #0
 810173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810173c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101740:	2200      	movs	r2, #0
 8101742:	601a      	str	r2, [r3, #0]
 8101744:	605a      	str	r2, [r3, #4]
 8101746:	609a      	str	r2, [r3, #8]
 8101748:	60da      	str	r2, [r3, #12]
 810174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810174c:	f107 0320 	add.w	r3, r7, #32
 8101750:	22c8      	movs	r2, #200	@ 0xc8
 8101752:	2100      	movs	r1, #0
 8101754:	4618      	mov	r0, r3
 8101756:	f00e fa59 	bl	810fc0c <memset>
  if(hqspi->Instance==QUADSPI)
 810175a:	687b      	ldr	r3, [r7, #4]
 810175c:	681b      	ldr	r3, [r3, #0]
 810175e:	4a85      	ldr	r2, [pc, #532]	@ (8101974 <HAL_QSPI_MspInit+0x240>)
 8101760:	4293      	cmp	r3, r2
 8101762:	f040 8102 	bne.w	810196a <HAL_QSPI_MspInit+0x236>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8101766:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 810176a:	f04f 0300 	mov.w	r3, #0
 810176e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8101772:	2300      	movs	r3, #0
 8101774:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101776:	f107 0320 	add.w	r3, r7, #32
 810177a:	4618      	mov	r0, r3
 810177c:	f003 fe76 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 8101780:	4603      	mov	r3, r0
 8101782:	2b00      	cmp	r3, #0
 8101784:	d001      	beq.n	810178a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8101786:	f7ff fdff 	bl	8101388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 810178a:	4b7b      	ldr	r3, [pc, #492]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 810178c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101790:	4a79      	ldr	r2, [pc, #484]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 8101792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101796:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 810179a:	4b77      	ldr	r3, [pc, #476]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 810179c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81017a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81017a4:	61fb      	str	r3, [r7, #28]
 81017a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 81017a8:	4b73      	ldr	r3, [pc, #460]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 81017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017ae:	4a72      	ldr	r2, [pc, #456]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 81017b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81017b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81017b8:	4b6f      	ldr	r3, [pc, #444]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 81017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81017c2:	61bb      	str	r3, [r7, #24]
 81017c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81017c6:	4b6c      	ldr	r3, [pc, #432]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 81017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017cc:	4a6a      	ldr	r2, [pc, #424]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 81017ce:	f043 0320 	orr.w	r3, r3, #32
 81017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81017d6:	4b68      	ldr	r3, [pc, #416]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 81017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017dc:	f003 0320 	and.w	r3, r3, #32
 81017e0:	617b      	str	r3, [r7, #20]
 81017e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81017e4:	4b64      	ldr	r3, [pc, #400]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 81017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017ea:	4a63      	ldr	r2, [pc, #396]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 81017ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81017f4:	4b60      	ldr	r3, [pc, #384]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 81017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81017fe:	613b      	str	r3, [r7, #16]
 8101800:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101802:	4b5d      	ldr	r3, [pc, #372]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 8101804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101808:	4a5b      	ldr	r2, [pc, #364]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 810180a:	f043 0302 	orr.w	r3, r3, #2
 810180e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101812:	4b59      	ldr	r3, [pc, #356]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 8101814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101818:	f003 0302 	and.w	r3, r3, #2
 810181c:	60fb      	str	r3, [r7, #12]
 810181e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101820:	4b55      	ldr	r3, [pc, #340]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 8101822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101826:	4a54      	ldr	r2, [pc, #336]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 8101828:	f043 0308 	orr.w	r3, r3, #8
 810182c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101830:	4b51      	ldr	r3, [pc, #324]	@ (8101978 <HAL_QSPI_MspInit+0x244>)
 8101832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101836:	f003 0308 	and.w	r3, r3, #8
 810183a:	60bb      	str	r3, [r7, #8]
 810183c:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 810183e:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8101842:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101846:	2302      	movs	r3, #2
 8101848:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810184c:	2300      	movs	r3, #0
 810184e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101852:	2300      	movs	r3, #0
 8101854:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101858:	2309      	movs	r3, #9
 810185a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810185e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101862:	4619      	mov	r1, r3
 8101864:	4845      	ldr	r0, [pc, #276]	@ (810197c <HAL_QSPI_MspInit+0x248>)
 8101866:	f002 ff89 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 810186a:	2340      	movs	r3, #64	@ 0x40
 810186c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101870:	2302      	movs	r3, #2
 8101872:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101876:	2300      	movs	r3, #0
 8101878:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810187c:	2300      	movs	r3, #0
 810187e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101882:	230a      	movs	r3, #10
 8101884:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8101888:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810188c:	4619      	mov	r1, r3
 810188e:	483b      	ldr	r0, [pc, #236]	@ (810197c <HAL_QSPI_MspInit+0x248>)
 8101890:	f002 ff74 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8101894:	23c0      	movs	r3, #192	@ 0xc0
 8101896:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810189a:	2302      	movs	r3, #2
 810189c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018a0:	2300      	movs	r3, #0
 81018a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018a6:	2300      	movs	r3, #0
 81018a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81018ac:	2309      	movs	r3, #9
 81018ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81018b2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81018b6:	4619      	mov	r1, r3
 81018b8:	4831      	ldr	r0, [pc, #196]	@ (8101980 <HAL_QSPI_MspInit+0x24c>)
 81018ba:	f002 ff5f 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 81018be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81018c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018c6:	2302      	movs	r3, #2
 81018c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018cc:	2300      	movs	r3, #0
 81018ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018d2:	2300      	movs	r3, #0
 81018d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81018d8:	230a      	movs	r3, #10
 81018da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 81018de:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81018e2:	4619      	mov	r1, r3
 81018e4:	4826      	ldr	r0, [pc, #152]	@ (8101980 <HAL_QSPI_MspInit+0x24c>)
 81018e6:	f002 ff49 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 81018ea:	230c      	movs	r3, #12
 81018ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018f0:	2302      	movs	r3, #2
 81018f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018f6:	2300      	movs	r3, #0
 81018f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018fc:	2300      	movs	r3, #0
 81018fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101902:	2309      	movs	r3, #9
 8101904:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101908:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810190c:	4619      	mov	r1, r3
 810190e:	481d      	ldr	r0, [pc, #116]	@ (8101984 <HAL_QSPI_MspInit+0x250>)
 8101910:	f002 ff34 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8101914:	2304      	movs	r3, #4
 8101916:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810191a:	2302      	movs	r3, #2
 810191c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101920:	2300      	movs	r3, #0
 8101922:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101926:	2300      	movs	r3, #0
 8101928:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810192c:	2309      	movs	r3, #9
 810192e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8101932:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101936:	4619      	mov	r1, r3
 8101938:	4813      	ldr	r0, [pc, #76]	@ (8101988 <HAL_QSPI_MspInit+0x254>)
 810193a:	f002 ff1f 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 810193e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101942:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101946:	2302      	movs	r3, #2
 8101948:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810194c:	2300      	movs	r3, #0
 810194e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101952:	2300      	movs	r3, #0
 8101954:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101958:	2309      	movs	r3, #9
 810195a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 810195e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101962:	4619      	mov	r1, r3
 8101964:	4809      	ldr	r0, [pc, #36]	@ (810198c <HAL_QSPI_MspInit+0x258>)
 8101966:	f002 ff09 	bl	810477c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 810196a:	bf00      	nop
 810196c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101970:	46bd      	mov	sp, r7
 8101972:	bd80      	pop	{r7, pc}
 8101974:	52005000 	.word	0x52005000
 8101978:	58024400 	.word	0x58024400
 810197c:	58021800 	.word	0x58021800
 8101980:	58021400 	.word	0x58021400
 8101984:	58021c00 	.word	0x58021c00
 8101988:	58020400 	.word	0x58020400
 810198c:	58020c00 	.word	0x58020c00

08101990 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101990:	b580      	push	{r7, lr}
 8101992:	b0b4      	sub	sp, #208	@ 0xd0
 8101994:	af00      	add	r7, sp, #0
 8101996:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101998:	f107 0308 	add.w	r3, r7, #8
 810199c:	22c8      	movs	r2, #200	@ 0xc8
 810199e:	2100      	movs	r1, #0
 81019a0:	4618      	mov	r0, r3
 81019a2:	f00e f933 	bl	810fc0c <memset>
  if(hrtc->Instance==RTC)
 81019a6:	687b      	ldr	r3, [r7, #4]
 81019a8:	681b      	ldr	r3, [r3, #0]
 81019aa:	4a10      	ldr	r2, [pc, #64]	@ (81019ec <HAL_RTC_MspInit+0x5c>)
 81019ac:	4293      	cmp	r3, r2
 81019ae:	d119      	bne.n	81019e4 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 81019b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 81019b4:	f04f 0300 	mov.w	r3, #0
 81019b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 81019bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81019c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81019c4:	f107 0308 	add.w	r3, r7, #8
 81019c8:	4618      	mov	r0, r3
 81019ca:	f003 fd4f 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 81019ce:	4603      	mov	r3, r0
 81019d0:	2b00      	cmp	r3, #0
 81019d2:	d001      	beq.n	81019d8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 81019d4:	f7ff fcd8 	bl	8101388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 81019d8:	4b05      	ldr	r3, [pc, #20]	@ (81019f0 <HAL_RTC_MspInit+0x60>)
 81019da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81019dc:	4a04      	ldr	r2, [pc, #16]	@ (81019f0 <HAL_RTC_MspInit+0x60>)
 81019de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81019e2:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 81019e4:	bf00      	nop
 81019e6:	37d0      	adds	r7, #208	@ 0xd0
 81019e8:	46bd      	mov	sp, r7
 81019ea:	bd80      	pop	{r7, pc}
 81019ec:	58004000 	.word	0x58004000
 81019f0:	58024400 	.word	0x58024400

081019f4 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 81019f4:	b580      	push	{r7, lr}
 81019f6:	b0be      	sub	sp, #248	@ 0xf8
 81019f8:	af00      	add	r7, sp, #0
 81019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019fc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101a00:	2200      	movs	r2, #0
 8101a02:	601a      	str	r2, [r3, #0]
 8101a04:	605a      	str	r2, [r3, #4]
 8101a06:	609a      	str	r2, [r3, #8]
 8101a08:	60da      	str	r2, [r3, #12]
 8101a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a0c:	f107 0318 	add.w	r3, r7, #24
 8101a10:	22c8      	movs	r2, #200	@ 0xc8
 8101a12:	2100      	movs	r1, #0
 8101a14:	4618      	mov	r0, r3
 8101a16:	f00e f8f9 	bl	810fc0c <memset>
  if(hsd->Instance==SDMMC1)
 8101a1a:	687b      	ldr	r3, [r7, #4]
 8101a1c:	681b      	ldr	r3, [r3, #0]
 8101a1e:	4a38      	ldr	r2, [pc, #224]	@ (8101b00 <HAL_SD_MspInit+0x10c>)
 8101a20:	4293      	cmp	r3, r2
 8101a22:	d169      	bne.n	8101af8 <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101a24:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8101a28:	f04f 0300 	mov.w	r3, #0
 8101a2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101a30:	2300      	movs	r3, #0
 8101a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a34:	f107 0318 	add.w	r3, r7, #24
 8101a38:	4618      	mov	r0, r3
 8101a3a:	f003 fd17 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 8101a3e:	4603      	mov	r3, r0
 8101a40:	2b00      	cmp	r3, #0
 8101a42:	d001      	beq.n	8101a48 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8101a44:	f7ff fca0 	bl	8101388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101a48:	4b2e      	ldr	r3, [pc, #184]	@ (8101b04 <HAL_SD_MspInit+0x110>)
 8101a4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8101b04 <HAL_SD_MspInit+0x110>)
 8101a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101a54:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101a58:	4b2a      	ldr	r3, [pc, #168]	@ (8101b04 <HAL_SD_MspInit+0x110>)
 8101a5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101a62:	617b      	str	r3, [r7, #20]
 8101a64:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101a66:	4b27      	ldr	r3, [pc, #156]	@ (8101b04 <HAL_SD_MspInit+0x110>)
 8101a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a6c:	4a25      	ldr	r2, [pc, #148]	@ (8101b04 <HAL_SD_MspInit+0x110>)
 8101a6e:	f043 0304 	orr.w	r3, r3, #4
 8101a72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101a76:	4b23      	ldr	r3, [pc, #140]	@ (8101b04 <HAL_SD_MspInit+0x110>)
 8101a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a7c:	f003 0304 	and.w	r3, r3, #4
 8101a80:	613b      	str	r3, [r7, #16]
 8101a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a84:	4b1f      	ldr	r3, [pc, #124]	@ (8101b04 <HAL_SD_MspInit+0x110>)
 8101a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8101b04 <HAL_SD_MspInit+0x110>)
 8101a8c:	f043 0308 	orr.w	r3, r3, #8
 8101a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101a94:	4b1b      	ldr	r3, [pc, #108]	@ (8101b04 <HAL_SD_MspInit+0x110>)
 8101a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a9a:	f003 0308 	and.w	r3, r3, #8
 8101a9e:	60fb      	str	r3, [r7, #12]
 8101aa0:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101aa2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8101aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101aaa:	2302      	movs	r3, #2
 8101aac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ab0:	2300      	movs	r3, #0
 8101ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101ab6:	2303      	movs	r3, #3
 8101ab8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101abc:	230c      	movs	r3, #12
 8101abe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101ac2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101ac6:	4619      	mov	r1, r3
 8101ac8:	480f      	ldr	r0, [pc, #60]	@ (8101b08 <HAL_SD_MspInit+0x114>)
 8101aca:	f002 fe57 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8101ace:	2304      	movs	r3, #4
 8101ad0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ad4:	2302      	movs	r3, #2
 8101ad6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ada:	2300      	movs	r3, #0
 8101adc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101ae0:	2303      	movs	r3, #3
 8101ae2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101ae6:	230c      	movs	r3, #12
 8101ae8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101aec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101af0:	4619      	mov	r1, r3
 8101af2:	4806      	ldr	r0, [pc, #24]	@ (8101b0c <HAL_SD_MspInit+0x118>)
 8101af4:	f002 fe42 	bl	810477c <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8101af8:	bf00      	nop
 8101afa:	37f8      	adds	r7, #248	@ 0xf8
 8101afc:	46bd      	mov	sp, r7
 8101afe:	bd80      	pop	{r7, pc}
 8101b00:	52007000 	.word	0x52007000
 8101b04:	58024400 	.word	0x58024400
 8101b08:	58020800 	.word	0x58020800
 8101b0c:	58020c00 	.word	0x58020c00

08101b10 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8101b10:	b580      	push	{r7, lr}
 8101b12:	b0bc      	sub	sp, #240	@ 0xf0
 8101b14:	af00      	add	r7, sp, #0
 8101b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b18:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101b1c:	2200      	movs	r2, #0
 8101b1e:	601a      	str	r2, [r3, #0]
 8101b20:	605a      	str	r2, [r3, #4]
 8101b22:	609a      	str	r2, [r3, #8]
 8101b24:	60da      	str	r2, [r3, #12]
 8101b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101b28:	f107 0310 	add.w	r3, r7, #16
 8101b2c:	22c8      	movs	r2, #200	@ 0xc8
 8101b2e:	2100      	movs	r1, #0
 8101b30:	4618      	mov	r0, r3
 8101b32:	f00e f86b 	bl	810fc0c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	681b      	ldr	r3, [r3, #0]
 8101b3a:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8101b3e:	d144      	bne.n	8101bca <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101b40:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8101b44:	f04f 0300 	mov.w	r3, #0
 8101b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8101b4c:	2300      	movs	r3, #0
 8101b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b50:	f107 0310 	add.w	r3, r7, #16
 8101b54:	4618      	mov	r0, r3
 8101b56:	f003 fc89 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 8101b5a:	4603      	mov	r3, r0
 8101b5c:	2b00      	cmp	r3, #0
 8101b5e:	d001      	beq.n	8101b64 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8101b60:	f7ff fc12 	bl	8101388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101b64:	4b1b      	ldr	r3, [pc, #108]	@ (8101bd4 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8101bd4 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101b70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101b74:	4b17      	ldr	r3, [pc, #92]	@ (8101bd4 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101b7e:	60fb      	str	r3, [r7, #12]
 8101b80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101b82:	4b14      	ldr	r3, [pc, #80]	@ (8101bd4 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b88:	4a12      	ldr	r2, [pc, #72]	@ (8101bd4 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b8a:	f043 0308 	orr.w	r3, r3, #8
 8101b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b92:	4b10      	ldr	r3, [pc, #64]	@ (8101bd4 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b98:	f003 0308 	and.w	r3, r3, #8
 8101b9c:	60bb      	str	r3, [r7, #8]
 8101b9e:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101ba0:	2380      	movs	r3, #128	@ 0x80
 8101ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ba6:	2302      	movs	r3, #2
 8101ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bac:	2300      	movs	r3, #0
 8101bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bb2:	2300      	movs	r3, #0
 8101bb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101bb8:	2309      	movs	r3, #9
 8101bba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101bbe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101bc2:	4619      	mov	r1, r3
 8101bc4:	4804      	ldr	r0, [pc, #16]	@ (8101bd8 <HAL_SPDIFRX_MspInit+0xc8>)
 8101bc6:	f002 fdd9 	bl	810477c <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8101bca:	bf00      	nop
 8101bcc:	37f0      	adds	r7, #240	@ 0xf0
 8101bce:	46bd      	mov	sp, r7
 8101bd0:	bd80      	pop	{r7, pc}
 8101bd2:	bf00      	nop
 8101bd4:	58024400 	.word	0x58024400
 8101bd8:	58020c00 	.word	0x58020c00

08101bdc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101bdc:	b580      	push	{r7, lr}
 8101bde:	b0c0      	sub	sp, #256	@ 0x100
 8101be0:	af00      	add	r7, sp, #0
 8101be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101be4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101be8:	2200      	movs	r2, #0
 8101bea:	601a      	str	r2, [r3, #0]
 8101bec:	605a      	str	r2, [r3, #4]
 8101bee:	609a      	str	r2, [r3, #8]
 8101bf0:	60da      	str	r2, [r3, #12]
 8101bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101bf4:	f107 0320 	add.w	r3, r7, #32
 8101bf8:	22c8      	movs	r2, #200	@ 0xc8
 8101bfa:	2100      	movs	r1, #0
 8101bfc:	4618      	mov	r0, r3
 8101bfe:	f00e f805 	bl	810fc0c <memset>
  if(hspi->Instance==SPI2)
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	681b      	ldr	r3, [r3, #0]
 8101c06:	4a72      	ldr	r2, [pc, #456]	@ (8101dd0 <HAL_SPI_MspInit+0x1f4>)
 8101c08:	4293      	cmp	r3, r2
 8101c0a:	d16b      	bne.n	8101ce4 <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8101c0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8101c10:	f04f 0300 	mov.w	r3, #0
 8101c14:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101c18:	2300      	movs	r3, #0
 8101c1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c1e:	f107 0320 	add.w	r3, r7, #32
 8101c22:	4618      	mov	r0, r3
 8101c24:	f003 fc22 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 8101c28:	4603      	mov	r3, r0
 8101c2a:	2b00      	cmp	r3, #0
 8101c2c:	d001      	beq.n	8101c32 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8101c2e:	f7ff fbab 	bl	8101388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8101c32:	4b68      	ldr	r3, [pc, #416]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101c38:	4a66      	ldr	r2, [pc, #408]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101c3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101c42:	4b64      	ldr	r3, [pc, #400]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101c48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101c4c:	61fb      	str	r3, [r7, #28]
 8101c4e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101c50:	4b60      	ldr	r3, [pc, #384]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c56:	4a5f      	ldr	r2, [pc, #380]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101c58:	f043 0301 	orr.w	r3, r3, #1
 8101c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c60:	4b5c      	ldr	r3, [pc, #368]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c66:	f003 0301 	and.w	r3, r3, #1
 8101c6a:	61bb      	str	r3, [r7, #24]
 8101c6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101c6e:	4b59      	ldr	r3, [pc, #356]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c74:	4a57      	ldr	r2, [pc, #348]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101c76:	f043 0304 	orr.w	r3, r3, #4
 8101c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c7e:	4b55      	ldr	r3, [pc, #340]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c84:	f003 0304 	and.w	r3, r3, #4
 8101c88:	617b      	str	r3, [r7, #20]
 8101c8a:	697b      	ldr	r3, [r7, #20]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 8101c8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8101c90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c94:	2302      	movs	r3, #2
 8101c96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c9a:	2300      	movs	r3, #0
 8101c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ca0:	2300      	movs	r3, #0
 8101ca2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101ca6:	2305      	movs	r3, #5
 8101ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101cac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101cb0:	4619      	mov	r1, r3
 8101cb2:	4849      	ldr	r0, [pc, #292]	@ (8101dd8 <HAL_SPI_MspInit+0x1fc>)
 8101cb4:	f002 fd62 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8101cb8:	230c      	movs	r3, #12
 8101cba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101cbe:	2302      	movs	r3, #2
 8101cc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cc4:	2300      	movs	r3, #0
 8101cc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cca:	2300      	movs	r3, #0
 8101ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101cd0:	2305      	movs	r3, #5
 8101cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101cd6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101cda:	4619      	mov	r1, r3
 8101cdc:	483f      	ldr	r0, [pc, #252]	@ (8101ddc <HAL_SPI_MspInit+0x200>)
 8101cde:	f002 fd4d 	bl	810477c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 8101ce2:	e06f      	b.n	8101dc4 <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI5)
 8101ce4:	687b      	ldr	r3, [r7, #4]
 8101ce6:	681b      	ldr	r3, [r3, #0]
 8101ce8:	4a3d      	ldr	r2, [pc, #244]	@ (8101de0 <HAL_SPI_MspInit+0x204>)
 8101cea:	4293      	cmp	r3, r2
 8101cec:	d16a      	bne.n	8101dc4 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101cee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101cf2:	f04f 0300 	mov.w	r3, #0
 8101cf6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101cfa:	2300      	movs	r3, #0
 8101cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d00:	f107 0320 	add.w	r3, r7, #32
 8101d04:	4618      	mov	r0, r3
 8101d06:	f003 fbb1 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 8101d0a:	4603      	mov	r3, r0
 8101d0c:	2b00      	cmp	r3, #0
 8101d0e:	d001      	beq.n	8101d14 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8101d10:	f7ff fb3a 	bl	8101388 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101d14:	4b2f      	ldr	r3, [pc, #188]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101d1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8101d20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101d24:	4b2b      	ldr	r3, [pc, #172]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101d2e:	613b      	str	r3, [r7, #16]
 8101d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101d32:	4b28      	ldr	r3, [pc, #160]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d38:	4a26      	ldr	r2, [pc, #152]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101d3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d42:	4b24      	ldr	r3, [pc, #144]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101d4c:	60fb      	str	r3, [r7, #12]
 8101d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101d50:	4b20      	ldr	r3, [pc, #128]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d56:	4a1f      	ldr	r2, [pc, #124]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101d58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d60:	4b1c      	ldr	r3, [pc, #112]	@ (8101dd4 <HAL_SPI_MspInit+0x1f8>)
 8101d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101d6a:	60bb      	str	r3, [r7, #8]
 8101d6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101d6e:	2303      	movs	r3, #3
 8101d70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d74:	2302      	movs	r3, #2
 8101d76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d7a:	2300      	movs	r3, #0
 8101d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d80:	2300      	movs	r3, #0
 8101d82:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101d86:	2305      	movs	r3, #5
 8101d88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8101d8c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101d90:	4619      	mov	r1, r3
 8101d92:	4814      	ldr	r0, [pc, #80]	@ (8101de4 <HAL_SPI_MspInit+0x208>)
 8101d94:	f002 fcf2 	bl	810477c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8101d98:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101d9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101da0:	2302      	movs	r3, #2
 8101da2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101da6:	2300      	movs	r3, #0
 8101da8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101dac:	2300      	movs	r3, #0
 8101dae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101db2:	2305      	movs	r3, #5
 8101db4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101db8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101dbc:	4619      	mov	r1, r3
 8101dbe:	480a      	ldr	r0, [pc, #40]	@ (8101de8 <HAL_SPI_MspInit+0x20c>)
 8101dc0:	f002 fcdc 	bl	810477c <HAL_GPIO_Init>
}
 8101dc4:	bf00      	nop
 8101dc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101dca:	46bd      	mov	sp, r7
 8101dcc:	bd80      	pop	{r7, pc}
 8101dce:	bf00      	nop
 8101dd0:	40003800 	.word	0x40003800
 8101dd4:	58024400 	.word	0x58024400
 8101dd8:	58020000 	.word	0x58020000
 8101ddc:	58020800 	.word	0x58020800
 8101de0:	40015000 	.word	0x40015000
 8101de4:	58022800 	.word	0x58022800
 8101de8:	58022400 	.word	0x58022400

08101dec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8101dec:	b580      	push	{r7, lr}
 8101dee:	b08a      	sub	sp, #40	@ 0x28
 8101df0:	af00      	add	r7, sp, #0
 8101df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101df4:	f107 0314 	add.w	r3, r7, #20
 8101df8:	2200      	movs	r2, #0
 8101dfa:	601a      	str	r2, [r3, #0]
 8101dfc:	605a      	str	r2, [r3, #4]
 8101dfe:	609a      	str	r2, [r3, #8]
 8101e00:	60da      	str	r2, [r3, #12]
 8101e02:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	4a1a      	ldr	r2, [pc, #104]	@ (8101e74 <HAL_TIM_PWM_MspInit+0x88>)
 8101e0a:	4293      	cmp	r3, r2
 8101e0c:	d12d      	bne.n	8101e6a <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8101e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8101e78 <HAL_TIM_PWM_MspInit+0x8c>)
 8101e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101e14:	4a18      	ldr	r2, [pc, #96]	@ (8101e78 <HAL_TIM_PWM_MspInit+0x8c>)
 8101e16:	f043 0302 	orr.w	r3, r3, #2
 8101e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101e1e:	4b16      	ldr	r3, [pc, #88]	@ (8101e78 <HAL_TIM_PWM_MspInit+0x8c>)
 8101e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101e24:	f003 0302 	and.w	r3, r3, #2
 8101e28:	613b      	str	r3, [r7, #16]
 8101e2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101e2c:	4b12      	ldr	r3, [pc, #72]	@ (8101e78 <HAL_TIM_PWM_MspInit+0x8c>)
 8101e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e32:	4a11      	ldr	r2, [pc, #68]	@ (8101e78 <HAL_TIM_PWM_MspInit+0x8c>)
 8101e34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8101e78 <HAL_TIM_PWM_MspInit+0x8c>)
 8101e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101e46:	60fb      	str	r3, [r7, #12]
 8101e48:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8101e4a:	2340      	movs	r3, #64	@ 0x40
 8101e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e4e:	2302      	movs	r3, #2
 8101e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e52:	2300      	movs	r3, #0
 8101e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e56:	2300      	movs	r3, #0
 8101e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101e5a:	2303      	movs	r3, #3
 8101e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8101e5e:	f107 0314 	add.w	r3, r7, #20
 8101e62:	4619      	mov	r1, r3
 8101e64:	4805      	ldr	r0, [pc, #20]	@ (8101e7c <HAL_TIM_PWM_MspInit+0x90>)
 8101e66:	f002 fc89 	bl	810477c <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8101e6a:	bf00      	nop
 8101e6c:	3728      	adds	r7, #40	@ 0x28
 8101e6e:	46bd      	mov	sp, r7
 8101e70:	bd80      	pop	{r7, pc}
 8101e72:	bf00      	nop
 8101e74:	40010400 	.word	0x40010400
 8101e78:	58024400 	.word	0x58024400
 8101e7c:	58022400 	.word	0x58022400

08101e80 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101e80:	b480      	push	{r7}
 8101e82:	b085      	sub	sp, #20
 8101e84:	af00      	add	r7, sp, #0
 8101e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	681b      	ldr	r3, [r3, #0]
 8101e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8101ebc <HAL_TIM_Base_MspInit+0x3c>)
 8101e8e:	4293      	cmp	r3, r2
 8101e90:	d10e      	bne.n	8101eb0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101e92:	4b0b      	ldr	r3, [pc, #44]	@ (8101ec0 <HAL_TIM_Base_MspInit+0x40>)
 8101e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101e98:	4a09      	ldr	r2, [pc, #36]	@ (8101ec0 <HAL_TIM_Base_MspInit+0x40>)
 8101e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101e9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101ea2:	4b07      	ldr	r3, [pc, #28]	@ (8101ec0 <HAL_TIM_Base_MspInit+0x40>)
 8101ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101eac:	60fb      	str	r3, [r7, #12]
 8101eae:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8101eb0:	bf00      	nop
 8101eb2:	3714      	adds	r7, #20
 8101eb4:	46bd      	mov	sp, r7
 8101eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eba:	4770      	bx	lr
 8101ebc:	40001c00 	.word	0x40001c00
 8101ec0:	58024400 	.word	0x58024400

08101ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101ec4:	b580      	push	{r7, lr}
 8101ec6:	b08a      	sub	sp, #40	@ 0x28
 8101ec8:	af00      	add	r7, sp, #0
 8101eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101ecc:	f107 0314 	add.w	r3, r7, #20
 8101ed0:	2200      	movs	r2, #0
 8101ed2:	601a      	str	r2, [r3, #0]
 8101ed4:	605a      	str	r2, [r3, #4]
 8101ed6:	609a      	str	r2, [r3, #8]
 8101ed8:	60da      	str	r2, [r3, #12]
 8101eda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8101edc:	687b      	ldr	r3, [r7, #4]
 8101ede:	681b      	ldr	r3, [r3, #0]
 8101ee0:	4a35      	ldr	r2, [pc, #212]	@ (8101fb8 <HAL_TIM_MspPostInit+0xf4>)
 8101ee2:	4293      	cmp	r3, r2
 8101ee4:	d13e      	bne.n	8101f64 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101ee6:	4b35      	ldr	r3, [pc, #212]	@ (8101fbc <HAL_TIM_MspPostInit+0xf8>)
 8101ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101eec:	4a33      	ldr	r2, [pc, #204]	@ (8101fbc <HAL_TIM_MspPostInit+0xf8>)
 8101eee:	f043 0304 	orr.w	r3, r3, #4
 8101ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101ef6:	4b31      	ldr	r3, [pc, #196]	@ (8101fbc <HAL_TIM_MspPostInit+0xf8>)
 8101ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101efc:	f003 0304 	and.w	r3, r3, #4
 8101f00:	613b      	str	r3, [r7, #16]
 8101f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101f04:	4b2d      	ldr	r3, [pc, #180]	@ (8101fbc <HAL_TIM_MspPostInit+0xf8>)
 8101f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8101fbc <HAL_TIM_MspPostInit+0xf8>)
 8101f0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101f14:	4b29      	ldr	r3, [pc, #164]	@ (8101fbc <HAL_TIM_MspPostInit+0xf8>)
 8101f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101f1e:	60fb      	str	r3, [r7, #12]
 8101f20:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101f22:	2340      	movs	r3, #64	@ 0x40
 8101f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f26:	2302      	movs	r3, #2
 8101f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f2a:	2300      	movs	r3, #0
 8101f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f2e:	2300      	movs	r3, #0
 8101f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101f32:	2303      	movs	r3, #3
 8101f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101f36:	f107 0314 	add.w	r3, r7, #20
 8101f3a:	4619      	mov	r1, r3
 8101f3c:	4820      	ldr	r0, [pc, #128]	@ (8101fc0 <HAL_TIM_MspPostInit+0xfc>)
 8101f3e:	f002 fc1d 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8101f42:	2380      	movs	r3, #128	@ 0x80
 8101f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f46:	2302      	movs	r3, #2
 8101f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f4a:	2300      	movs	r3, #0
 8101f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f4e:	2300      	movs	r3, #0
 8101f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101f52:	2303      	movs	r3, #3
 8101f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8101f56:	f107 0314 	add.w	r3, r7, #20
 8101f5a:	4619      	mov	r1, r3
 8101f5c:	4819      	ldr	r0, [pc, #100]	@ (8101fc4 <HAL_TIM_MspPostInit+0x100>)
 8101f5e:	f002 fc0d 	bl	810477c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8101f62:	e024      	b.n	8101fae <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	4a17      	ldr	r2, [pc, #92]	@ (8101fc8 <HAL_TIM_MspPostInit+0x104>)
 8101f6a:	4293      	cmp	r3, r2
 8101f6c:	d11f      	bne.n	8101fae <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101f6e:	4b13      	ldr	r3, [pc, #76]	@ (8101fbc <HAL_TIM_MspPostInit+0xf8>)
 8101f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f74:	4a11      	ldr	r2, [pc, #68]	@ (8101fbc <HAL_TIM_MspPostInit+0xf8>)
 8101f76:	f043 0320 	orr.w	r3, r3, #32
 8101f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8101fbc <HAL_TIM_MspPostInit+0xf8>)
 8101f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f84:	f003 0320 	and.w	r3, r3, #32
 8101f88:	60bb      	str	r3, [r7, #8]
 8101f8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8101f8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8101f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f92:	2302      	movs	r3, #2
 8101f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f96:	2300      	movs	r3, #0
 8101f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f9a:	2300      	movs	r3, #0
 8101f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8101f9e:	2309      	movs	r3, #9
 8101fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8101fa2:	f107 0314 	add.w	r3, r7, #20
 8101fa6:	4619      	mov	r1, r3
 8101fa8:	4808      	ldr	r0, [pc, #32]	@ (8101fcc <HAL_TIM_MspPostInit+0x108>)
 8101faa:	f002 fbe7 	bl	810477c <HAL_GPIO_Init>
}
 8101fae:	bf00      	nop
 8101fb0:	3728      	adds	r7, #40	@ 0x28
 8101fb2:	46bd      	mov	sp, r7
 8101fb4:	bd80      	pop	{r7, pc}
 8101fb6:	bf00      	nop
 8101fb8:	40010400 	.word	0x40010400
 8101fbc:	58024400 	.word	0x58024400
 8101fc0:	58020800 	.word	0x58020800
 8101fc4:	58022400 	.word	0x58022400
 8101fc8:	40001c00 	.word	0x40001c00
 8101fcc:	58021400 	.word	0x58021400

08101fd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101fd0:	b580      	push	{r7, lr}
 8101fd2:	b0be      	sub	sp, #248	@ 0xf8
 8101fd4:	af00      	add	r7, sp, #0
 8101fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101fd8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101fdc:	2200      	movs	r2, #0
 8101fde:	601a      	str	r2, [r3, #0]
 8101fe0:	605a      	str	r2, [r3, #4]
 8101fe2:	609a      	str	r2, [r3, #8]
 8101fe4:	60da      	str	r2, [r3, #12]
 8101fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101fe8:	f107 0318 	add.w	r3, r7, #24
 8101fec:	22c8      	movs	r2, #200	@ 0xc8
 8101fee:	2100      	movs	r1, #0
 8101ff0:	4618      	mov	r0, r3
 8101ff2:	f00d fe0b 	bl	810fc0c <memset>
  if(huart->Instance==UART8)
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	681b      	ldr	r3, [r3, #0]
 8101ffa:	4a3b      	ldr	r2, [pc, #236]	@ (81020e8 <HAL_UART_MspInit+0x118>)
 8101ffc:	4293      	cmp	r3, r2
 8101ffe:	d147      	bne.n	8102090 <HAL_UART_MspInit+0xc0>

    /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8102000:	f04f 0202 	mov.w	r2, #2
 8102004:	f04f 0300 	mov.w	r3, #0
 8102008:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810200c:	2300      	movs	r3, #0
 810200e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102012:	f107 0318 	add.w	r3, r7, #24
 8102016:	4618      	mov	r0, r3
 8102018:	f003 fa28 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 810201c:	4603      	mov	r3, r0
 810201e:	2b00      	cmp	r3, #0
 8102020:	d001      	beq.n	8102026 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8102022:	f7ff f9b1 	bl	8101388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8102026:	4b31      	ldr	r3, [pc, #196]	@ (81020ec <HAL_UART_MspInit+0x11c>)
 8102028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810202c:	4a2f      	ldr	r2, [pc, #188]	@ (81020ec <HAL_UART_MspInit+0x11c>)
 810202e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8102032:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102036:	4b2d      	ldr	r3, [pc, #180]	@ (81020ec <HAL_UART_MspInit+0x11c>)
 8102038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810203c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8102040:	617b      	str	r3, [r7, #20]
 8102042:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8102044:	4b29      	ldr	r3, [pc, #164]	@ (81020ec <HAL_UART_MspInit+0x11c>)
 8102046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810204a:	4a28      	ldr	r2, [pc, #160]	@ (81020ec <HAL_UART_MspInit+0x11c>)
 810204c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8102050:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102054:	4b25      	ldr	r3, [pc, #148]	@ (81020ec <HAL_UART_MspInit+0x11c>)
 8102056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810205a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810205e:	613b      	str	r3, [r7, #16]
 8102060:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8102062:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8102066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810206a:	2302      	movs	r3, #2
 810206c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102070:	2300      	movs	r3, #0
 8102072:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102076:	2300      	movs	r3, #0
 8102078:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 810207c:	2308      	movs	r3, #8
 810207e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8102082:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8102086:	4619      	mov	r1, r3
 8102088:	4819      	ldr	r0, [pc, #100]	@ (81020f0 <HAL_UART_MspInit+0x120>)
 810208a:	f002 fb77 	bl	810477c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 810208e:	e026      	b.n	81020de <HAL_UART_MspInit+0x10e>
  else if(huart->Instance==USART1)
 8102090:	687b      	ldr	r3, [r7, #4]
 8102092:	681b      	ldr	r3, [r3, #0]
 8102094:	4a17      	ldr	r2, [pc, #92]	@ (81020f4 <HAL_UART_MspInit+0x124>)
 8102096:	4293      	cmp	r3, r2
 8102098:	d121      	bne.n	81020de <HAL_UART_MspInit+0x10e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 810209a:	f04f 0201 	mov.w	r2, #1
 810209e:	f04f 0300 	mov.w	r3, #0
 81020a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 81020a6:	2300      	movs	r3, #0
 81020a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81020ac:	f107 0318 	add.w	r3, r7, #24
 81020b0:	4618      	mov	r0, r3
 81020b2:	f003 f9db 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 81020b6:	4603      	mov	r3, r0
 81020b8:	2b00      	cmp	r3, #0
 81020ba:	d001      	beq.n	81020c0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 81020bc:	f7ff f964 	bl	8101388 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 81020c0:	4b0a      	ldr	r3, [pc, #40]	@ (81020ec <HAL_UART_MspInit+0x11c>)
 81020c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81020c6:	4a09      	ldr	r2, [pc, #36]	@ (81020ec <HAL_UART_MspInit+0x11c>)
 81020c8:	f043 0310 	orr.w	r3, r3, #16
 81020cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81020d0:	4b06      	ldr	r3, [pc, #24]	@ (81020ec <HAL_UART_MspInit+0x11c>)
 81020d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81020d6:	f003 0310 	and.w	r3, r3, #16
 81020da:	60fb      	str	r3, [r7, #12]
 81020dc:	68fb      	ldr	r3, [r7, #12]
}
 81020de:	bf00      	nop
 81020e0:	37f8      	adds	r7, #248	@ 0xf8
 81020e2:	46bd      	mov	sp, r7
 81020e4:	bd80      	pop	{r7, pc}
 81020e6:	bf00      	nop
 81020e8:	40007c00 	.word	0x40007c00
 81020ec:	58024400 	.word	0x58024400
 81020f0:	58022400 	.word	0x58022400
 81020f4:	40011000 	.word	0x40011000

081020f8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 81020f8:	b580      	push	{r7, lr}
 81020fa:	b0c2      	sub	sp, #264	@ 0x108
 81020fc:	af00      	add	r7, sp, #0
 81020fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8102102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8102106:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102108:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810210c:	2200      	movs	r2, #0
 810210e:	601a      	str	r2, [r3, #0]
 8102110:	605a      	str	r2, [r3, #4]
 8102112:	609a      	str	r2, [r3, #8]
 8102114:	60da      	str	r2, [r3, #12]
 8102116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102118:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810211c:	22c8      	movs	r2, #200	@ 0xc8
 810211e:	2100      	movs	r1, #0
 8102120:	4618      	mov	r0, r3
 8102122:	f00d fd73 	bl	810fc0c <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8102126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 810212a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 810212e:	681b      	ldr	r3, [r3, #0]
 8102130:	681b      	ldr	r3, [r3, #0]
 8102132:	4a79      	ldr	r2, [pc, #484]	@ (8102318 <HAL_PCD_MspInit+0x220>)
 8102134:	4293      	cmp	r3, r2
 8102136:	f040 80ea 	bne.w	810230e <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 810213a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 810213e:	f04f 0300 	mov.w	r3, #0
 8102142:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8102146:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810214a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810214e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102152:	4618      	mov	r0, r3
 8102154:	f003 f98a 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 8102158:	4603      	mov	r3, r0
 810215a:	2b00      	cmp	r3, #0
 810215c:	d001      	beq.n	8102162 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 810215e:	f7ff f913 	bl	8101388 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8102162:	f002 fe9f 	bl	8104ea4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102166:	4b6d      	ldr	r3, [pc, #436]	@ (810231c <HAL_PCD_MspInit+0x224>)
 8102168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810216c:	4a6b      	ldr	r2, [pc, #428]	@ (810231c <HAL_PCD_MspInit+0x224>)
 810216e:	f043 0302 	orr.w	r3, r3, #2
 8102172:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102176:	4b69      	ldr	r3, [pc, #420]	@ (810231c <HAL_PCD_MspInit+0x224>)
 8102178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810217c:	f003 0302 	and.w	r3, r3, #2
 8102180:	627b      	str	r3, [r7, #36]	@ 0x24
 8102182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8102184:	4b65      	ldr	r3, [pc, #404]	@ (810231c <HAL_PCD_MspInit+0x224>)
 8102186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810218a:	4a64      	ldr	r2, [pc, #400]	@ (810231c <HAL_PCD_MspInit+0x224>)
 810218c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102190:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102194:	4b61      	ldr	r3, [pc, #388]	@ (810231c <HAL_PCD_MspInit+0x224>)
 8102196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810219e:	623b      	str	r3, [r7, #32]
 81021a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81021a2:	4b5e      	ldr	r3, [pc, #376]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81021a8:	4a5c      	ldr	r2, [pc, #368]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81021aa:	f043 0304 	orr.w	r3, r3, #4
 81021ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81021b2:	4b5a      	ldr	r3, [pc, #360]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81021b8:	f003 0304 	and.w	r3, r3, #4
 81021bc:	61fb      	str	r3, [r7, #28]
 81021be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81021c0:	4b56      	ldr	r3, [pc, #344]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81021c6:	4a55      	ldr	r2, [pc, #340]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81021c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81021cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81021d0:	4b52      	ldr	r3, [pc, #328]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81021d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81021d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81021da:	61bb      	str	r3, [r7, #24]
 81021dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81021de:	4b4f      	ldr	r3, [pc, #316]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81021e4:	4a4d      	ldr	r2, [pc, #308]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81021e6:	f043 0301 	orr.w	r3, r3, #1
 81021ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81021ee:	4b4b      	ldr	r3, [pc, #300]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81021f4:	f003 0301 	and.w	r3, r3, #1
 81021f8:	617b      	str	r3, [r7, #20]
 81021fa:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 81021fc:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8102200:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102204:	2302      	movs	r3, #2
 8102206:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810220a:	2300      	movs	r3, #0
 810220c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102210:	2302      	movs	r3, #2
 8102212:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102216:	230a      	movs	r3, #10
 8102218:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810221c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102220:	4619      	mov	r1, r3
 8102222:	483f      	ldr	r0, [pc, #252]	@ (8102320 <HAL_PCD_MspInit+0x228>)
 8102224:	f002 faaa 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8102228:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810222c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102230:	2302      	movs	r3, #2
 8102232:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102236:	2300      	movs	r3, #0
 8102238:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810223c:	2302      	movs	r3, #2
 810223e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102242:	230a      	movs	r3, #10
 8102244:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8102248:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810224c:	4619      	mov	r1, r3
 810224e:	4835      	ldr	r0, [pc, #212]	@ (8102324 <HAL_PCD_MspInit+0x22c>)
 8102250:	f002 fa94 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8102254:	2301      	movs	r3, #1
 8102256:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810225a:	2302      	movs	r3, #2
 810225c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102260:	2300      	movs	r3, #0
 8102262:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102266:	2302      	movs	r3, #2
 8102268:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810226c:	230a      	movs	r3, #10
 810226e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8102272:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102276:	4619      	mov	r1, r3
 8102278:	482b      	ldr	r0, [pc, #172]	@ (8102328 <HAL_PCD_MspInit+0x230>)
 810227a:	f002 fa7f 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 810227e:	2310      	movs	r3, #16
 8102280:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102284:	2302      	movs	r3, #2
 8102286:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810228a:	2300      	movs	r3, #0
 810228c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102290:	2302      	movs	r3, #2
 8102292:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102296:	230a      	movs	r3, #10
 8102298:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 810229c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81022a0:	4619      	mov	r1, r3
 81022a2:	4822      	ldr	r0, [pc, #136]	@ (810232c <HAL_PCD_MspInit+0x234>)
 81022a4:	f002 fa6a 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 81022a8:	2328      	movs	r3, #40	@ 0x28
 81022aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81022ae:	2302      	movs	r3, #2
 81022b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022b4:	2300      	movs	r3, #0
 81022b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81022ba:	2302      	movs	r3, #2
 81022bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81022c0:	230a      	movs	r3, #10
 81022c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81022c6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81022ca:	4619      	mov	r1, r3
 81022cc:	4818      	ldr	r0, [pc, #96]	@ (8102330 <HAL_PCD_MspInit+0x238>)
 81022ce:	f002 fa55 	bl	810477c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 81022d2:	4b12      	ldr	r3, [pc, #72]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81022d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81022d8:	4a10      	ldr	r2, [pc, #64]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81022da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81022de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81022e2:	4b0e      	ldr	r3, [pc, #56]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81022e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81022e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81022ec:	613b      	str	r3, [r7, #16]
 81022ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 81022f0:	4b0a      	ldr	r3, [pc, #40]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81022f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81022f6:	4a09      	ldr	r2, [pc, #36]	@ (810231c <HAL_PCD_MspInit+0x224>)
 81022f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81022fc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102300:	4b06      	ldr	r3, [pc, #24]	@ (810231c <HAL_PCD_MspInit+0x224>)
 8102302:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102306:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810230a:	60fb      	str	r3, [r7, #12]
 810230c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 810230e:	bf00      	nop
 8102310:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8102314:	46bd      	mov	sp, r7
 8102316:	bd80      	pop	{r7, pc}
 8102318:	40040000 	.word	0x40040000
 810231c:	58024400 	.word	0x58024400
 8102320:	58020400 	.word	0x58020400
 8102324:	58022000 	.word	0x58022000
 8102328:	58020800 	.word	0x58020800
 810232c:	58021c00 	.word	0x58021c00
 8102330:	58020000 	.word	0x58020000

08102334 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8102334:	b580      	push	{r7, lr}
 8102336:	b0ba      	sub	sp, #232	@ 0xe8
 8102338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 810233a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810233e:	2200      	movs	r2, #0
 8102340:	601a      	str	r2, [r3, #0]
 8102342:	605a      	str	r2, [r3, #4]
 8102344:	609a      	str	r2, [r3, #8]
 8102346:	60da      	str	r2, [r3, #12]
 8102348:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 810234a:	4b5c      	ldr	r3, [pc, #368]	@ (81024bc <HAL_FMC_MspInit+0x188>)
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	2b00      	cmp	r3, #0
 8102350:	f040 80b0 	bne.w	81024b4 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8102354:	4b59      	ldr	r3, [pc, #356]	@ (81024bc <HAL_FMC_MspInit+0x188>)
 8102356:	2201      	movs	r2, #1
 8102358:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810235a:	f107 0308 	add.w	r3, r7, #8
 810235e:	22c8      	movs	r2, #200	@ 0xc8
 8102360:	2100      	movs	r1, #0
 8102362:	4618      	mov	r0, r3
 8102364:	f00d fc52 	bl	810fc0c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8102368:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810236c:	f04f 0300 	mov.w	r3, #0
 8102370:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8102374:	2300      	movs	r3, #0
 8102376:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102378:	f107 0308 	add.w	r3, r7, #8
 810237c:	4618      	mov	r0, r3
 810237e:	f003 f875 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 8102382:	4603      	mov	r3, r0
 8102384:	2b00      	cmp	r3, #0
 8102386:	d001      	beq.n	810238c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8102388:	f7fe fffe 	bl	8101388 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 810238c:	4b4c      	ldr	r3, [pc, #304]	@ (81024c0 <HAL_FMC_MspInit+0x18c>)
 810238e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8102392:	4a4b      	ldr	r2, [pc, #300]	@ (81024c0 <HAL_FMC_MspInit+0x18c>)
 8102394:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8102398:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 810239c:	4b48      	ldr	r3, [pc, #288]	@ (81024c0 <HAL_FMC_MspInit+0x18c>)
 810239e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81023a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81023a6:	607b      	str	r3, [r7, #4]
 81023a8:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin
 81023aa:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 81023ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023b2:	2302      	movs	r3, #2
 81023b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023b8:	2300      	movs	r3, #0
 81023ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023be:	2303      	movs	r3, #3
 81023c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81023c4:	230c      	movs	r3, #12
 81023c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81023ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81023ce:	4619      	mov	r1, r3
 81023d0:	483c      	ldr	r0, [pc, #240]	@ (81024c4 <HAL_FMC_MspInit+0x190>)
 81023d2:	f002 f9d3 	bl	810477c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin
 81023d6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 81023da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023de:	2302      	movs	r3, #2
 81023e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023e4:	2300      	movs	r3, #0
 81023e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023ea:	2303      	movs	r3, #3
 81023ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81023f0:	230c      	movs	r3, #12
 81023f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81023f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81023fa:	4619      	mov	r1, r3
 81023fc:	4832      	ldr	r0, [pc, #200]	@ (81024c8 <HAL_FMC_MspInit+0x194>)
 81023fe:	f002 f9bd 	bl	810477c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin
 8102402:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8102406:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810240a:	2302      	movs	r3, #2
 810240c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102410:	2300      	movs	r3, #0
 8102412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102416:	2303      	movs	r3, #3
 8102418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810241c:	230c      	movs	r3, #12
 810241e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8102422:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102426:	4619      	mov	r1, r3
 8102428:	4828      	ldr	r0, [pc, #160]	@ (81024cc <HAL_FMC_MspInit+0x198>)
 810242a:	f002 f9a7 	bl	810477c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|FMC_BA0_Pin|FMC_A12_Pin
 810242e:	f248 1317 	movw	r3, #33047	@ 0x8117
 8102432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102436:	2302      	movs	r3, #2
 8102438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810243c:	2300      	movs	r3, #0
 810243e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102442:	2303      	movs	r3, #3
 8102444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102448:	230c      	movs	r3, #12
 810244a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810244e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102452:	4619      	mov	r1, r3
 8102454:	481e      	ldr	r0, [pc, #120]	@ (81024d0 <HAL_FMC_MspInit+0x19c>)
 8102456:	f002 f991 	bl	810477c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin
 810245a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 810245e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102462:	2302      	movs	r3, #2
 8102464:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102468:	2300      	movs	r3, #0
 810246a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810246e:	2303      	movs	r3, #3
 8102470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102474:	230c      	movs	r3, #12
 8102476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810247a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810247e:	4619      	mov	r1, r3
 8102480:	4814      	ldr	r0, [pc, #80]	@ (81024d4 <HAL_FMC_MspInit+0x1a0>)
 8102482:	f002 f97b 	bl	810477c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin
 8102486:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 810248a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810248e:	2302      	movs	r3, #2
 8102490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102494:	2300      	movs	r3, #0
 8102496:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810249a:	2303      	movs	r3, #3
 810249c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81024a0:	230c      	movs	r3, #12
 81024a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81024a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81024aa:	4619      	mov	r1, r3
 81024ac:	480a      	ldr	r0, [pc, #40]	@ (81024d8 <HAL_FMC_MspInit+0x1a4>)
 81024ae:	f002 f965 	bl	810477c <HAL_GPIO_Init>
 81024b2:	e000      	b.n	81024b6 <HAL_FMC_MspInit+0x182>
    return;
 81024b4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 81024b6:	37e8      	adds	r7, #232	@ 0xe8
 81024b8:	46bd      	mov	sp, r7
 81024ba:	bd80      	pop	{r7, pc}
 81024bc:	10000cc0 	.word	0x10000cc0
 81024c0:	58024400 	.word	0x58024400
 81024c4:	58022000 	.word	0x58022000
 81024c8:	58021000 	.word	0x58021000
 81024cc:	58021c00 	.word	0x58021c00
 81024d0:	58021800 	.word	0x58021800
 81024d4:	58020c00 	.word	0x58020c00
 81024d8:	58021400 	.word	0x58021400

081024dc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 81024dc:	b580      	push	{r7, lr}
 81024de:	b082      	sub	sp, #8
 81024e0:	af00      	add	r7, sp, #0
 81024e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 81024e4:	f7ff ff26 	bl	8102334 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 81024e8:	bf00      	nop
 81024ea:	3708      	adds	r7, #8
 81024ec:	46bd      	mov	sp, r7
 81024ee:	bd80      	pop	{r7, pc}

081024f0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 81024f0:	b580      	push	{r7, lr}
 81024f2:	b0bc      	sub	sp, #240	@ 0xf0
 81024f4:	af00      	add	r7, sp, #0
 81024f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81024f8:	f107 0310 	add.w	r3, r7, #16
 81024fc:	22c8      	movs	r2, #200	@ 0xc8
 81024fe:	2100      	movs	r1, #0
 8102500:	4618      	mov	r0, r3
 8102502:	f00d fb83 	bl	810fc0c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	681b      	ldr	r3, [r3, #0]
 810250a:	4a4f      	ldr	r2, [pc, #316]	@ (8102648 <HAL_SAI_MspInit+0x158>)
 810250c:	4293      	cmp	r3, r2
 810250e:	d153      	bne.n	81025b8 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8102510:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8102514:	f04f 0300 	mov.w	r3, #0
 8102518:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 810251c:	2300      	movs	r3, #0
 810251e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102520:	f107 0310 	add.w	r3, r7, #16
 8102524:	4618      	mov	r0, r3
 8102526:	f002 ffa1 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 810252a:	4603      	mov	r3, r0
 810252c:	2b00      	cmp	r3, #0
 810252e:	d001      	beq.n	8102534 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8102530:	f7fe ff2a 	bl	8101388 <Error_Handler>
    }

    if (SAI1_client == 0)
 8102534:	4b45      	ldr	r3, [pc, #276]	@ (810264c <HAL_SAI_MspInit+0x15c>)
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	2b00      	cmp	r3, #0
 810253a:	d10e      	bne.n	810255a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 810253c:	4b44      	ldr	r3, [pc, #272]	@ (8102650 <HAL_SAI_MspInit+0x160>)
 810253e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102542:	4a43      	ldr	r2, [pc, #268]	@ (8102650 <HAL_SAI_MspInit+0x160>)
 8102544:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8102548:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810254c:	4b40      	ldr	r3, [pc, #256]	@ (8102650 <HAL_SAI_MspInit+0x160>)
 810254e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8102556:	60fb      	str	r3, [r7, #12]
 8102558:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 810255a:	4b3c      	ldr	r3, [pc, #240]	@ (810264c <HAL_SAI_MspInit+0x15c>)
 810255c:	681b      	ldr	r3, [r3, #0]
 810255e:	3301      	adds	r3, #1
 8102560:	4a3a      	ldr	r2, [pc, #232]	@ (810264c <HAL_SAI_MspInit+0x15c>)
 8102562:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8102564:	2370      	movs	r3, #112	@ 0x70
 8102566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810256a:	2302      	movs	r3, #2
 810256c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102570:	2300      	movs	r3, #0
 8102572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102576:	2300      	movs	r3, #0
 8102578:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810257c:	2306      	movs	r3, #6
 810257e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102582:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8102586:	4619      	mov	r1, r3
 8102588:	4832      	ldr	r0, [pc, #200]	@ (8102654 <HAL_SAI_MspInit+0x164>)
 810258a:	f002 f8f7 	bl	810477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 810258e:	2380      	movs	r3, #128	@ 0x80
 8102590:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102594:	2302      	movs	r3, #2
 8102596:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810259a:	2300      	movs	r3, #0
 810259c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81025a0:	2300      	movs	r3, #0
 81025a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81025a6:	2306      	movs	r3, #6
 81025a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 81025ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81025b0:	4619      	mov	r1, r3
 81025b2:	4829      	ldr	r0, [pc, #164]	@ (8102658 <HAL_SAI_MspInit+0x168>)
 81025b4:	f002 f8e2 	bl	810477c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	4a27      	ldr	r2, [pc, #156]	@ (810265c <HAL_SAI_MspInit+0x16c>)
 81025be:	4293      	cmp	r3, r2
 81025c0:	d13e      	bne.n	8102640 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81025c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81025c6:	f04f 0300 	mov.w	r3, #0
 81025ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81025ce:	2300      	movs	r3, #0
 81025d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81025d2:	f107 0310 	add.w	r3, r7, #16
 81025d6:	4618      	mov	r0, r3
 81025d8:	f002 ff48 	bl	810546c <HAL_RCCEx_PeriphCLKConfig>
 81025dc:	4603      	mov	r3, r0
 81025de:	2b00      	cmp	r3, #0
 81025e0:	d001      	beq.n	81025e6 <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 81025e2:	f7fe fed1 	bl	8101388 <Error_Handler>
    }

      if (SAI1_client == 0)
 81025e6:	4b19      	ldr	r3, [pc, #100]	@ (810264c <HAL_SAI_MspInit+0x15c>)
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	2b00      	cmp	r3, #0
 81025ec:	d10e      	bne.n	810260c <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81025ee:	4b18      	ldr	r3, [pc, #96]	@ (8102650 <HAL_SAI_MspInit+0x160>)
 81025f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81025f4:	4a16      	ldr	r2, [pc, #88]	@ (8102650 <HAL_SAI_MspInit+0x160>)
 81025f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81025fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81025fe:	4b14      	ldr	r3, [pc, #80]	@ (8102650 <HAL_SAI_MspInit+0x160>)
 8102600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8102608:	60bb      	str	r3, [r7, #8]
 810260a:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 810260c:	4b0f      	ldr	r3, [pc, #60]	@ (810264c <HAL_SAI_MspInit+0x15c>)
 810260e:	681b      	ldr	r3, [r3, #0]
 8102610:	3301      	adds	r3, #1
 8102612:	4a0e      	ldr	r2, [pc, #56]	@ (810264c <HAL_SAI_MspInit+0x15c>)
 8102614:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8102616:	2308      	movs	r3, #8
 8102618:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810261c:	2302      	movs	r3, #2
 810261e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102622:	2300      	movs	r3, #0
 8102624:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102628:	2300      	movs	r3, #0
 810262a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810262e:	2306      	movs	r3, #6
 8102630:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8102634:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8102638:	4619      	mov	r1, r3
 810263a:	4806      	ldr	r0, [pc, #24]	@ (8102654 <HAL_SAI_MspInit+0x164>)
 810263c:	f002 f89e 	bl	810477c <HAL_GPIO_Init>

    }
}
 8102640:	bf00      	nop
 8102642:	37f0      	adds	r7, #240	@ 0xf0
 8102644:	46bd      	mov	sp, r7
 8102646:	bd80      	pop	{r7, pc}
 8102648:	40015804 	.word	0x40015804
 810264c:	10000cc4 	.word	0x10000cc4
 8102650:	58024400 	.word	0x58024400
 8102654:	58021000 	.word	0x58021000
 8102658:	58021800 	.word	0x58021800
 810265c:	40015824 	.word	0x40015824

08102660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102660:	b580      	push	{r7, lr}
 8102662:	b090      	sub	sp, #64	@ 0x40
 8102664:	af00      	add	r7, sp, #0
 8102666:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102668:	687b      	ldr	r3, [r7, #4]
 810266a:	2b0f      	cmp	r3, #15
 810266c:	d827      	bhi.n	81026be <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 810266e:	2200      	movs	r2, #0
 8102670:	6879      	ldr	r1, [r7, #4]
 8102672:	201d      	movs	r0, #29
 8102674:	f001 fc14 	bl	8103ea0 <HAL_NVIC_SetPriority>

     /* Enable the TIM3 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8102678:	201d      	movs	r0, #29
 810267a:	f001 fc2b 	bl	8103ed4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 810267e:	4a29      	ldr	r2, [pc, #164]	@ (8102724 <HAL_InitTick+0xc4>)
 8102680:	687b      	ldr	r3, [r7, #4]
 8102682:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8102684:	4b28      	ldr	r3, [pc, #160]	@ (8102728 <HAL_InitTick+0xc8>)
 8102686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810268a:	4a27      	ldr	r2, [pc, #156]	@ (8102728 <HAL_InitTick+0xc8>)
 810268c:	f043 0302 	orr.w	r3, r3, #2
 8102690:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102694:	4b24      	ldr	r3, [pc, #144]	@ (8102728 <HAL_InitTick+0xc8>)
 8102696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810269a:	f003 0302 	and.w	r3, r3, #2
 810269e:	60fb      	str	r3, [r7, #12]
 81026a0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81026a2:	f107 0210 	add.w	r2, r7, #16
 81026a6:	f107 0314 	add.w	r3, r7, #20
 81026aa:	4611      	mov	r1, r2
 81026ac:	4618      	mov	r0, r3
 81026ae:	f002 fe9b 	bl	81053e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81026b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81026b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81026b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81026b8:	2b00      	cmp	r3, #0
 81026ba:	d106      	bne.n	81026ca <HAL_InitTick+0x6a>
 81026bc:	e001      	b.n	81026c2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 81026be:	2301      	movs	r3, #1
 81026c0:	e02b      	b.n	810271a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81026c2:	f002 fe65 	bl	8105390 <HAL_RCC_GetPCLK1Freq>
 81026c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 81026c8:	e004      	b.n	81026d4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 81026ca:	f002 fe61 	bl	8105390 <HAL_RCC_GetPCLK1Freq>
 81026ce:	4603      	mov	r3, r0
 81026d0:	005b      	lsls	r3, r3, #1
 81026d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81026d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81026d6:	4a15      	ldr	r2, [pc, #84]	@ (810272c <HAL_InitTick+0xcc>)
 81026d8:	fba2 2303 	umull	r2, r3, r2, r3
 81026dc:	0c9b      	lsrs	r3, r3, #18
 81026de:	3b01      	subs	r3, #1
 81026e0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 81026e2:	4b13      	ldr	r3, [pc, #76]	@ (8102730 <HAL_InitTick+0xd0>)
 81026e4:	4a13      	ldr	r2, [pc, #76]	@ (8102734 <HAL_InitTick+0xd4>)
 81026e6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 81026e8:	4b11      	ldr	r3, [pc, #68]	@ (8102730 <HAL_InitTick+0xd0>)
 81026ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81026ee:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 81026f0:	4a0f      	ldr	r2, [pc, #60]	@ (8102730 <HAL_InitTick+0xd0>)
 81026f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81026f4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 81026f6:	4b0e      	ldr	r3, [pc, #56]	@ (8102730 <HAL_InitTick+0xd0>)
 81026f8:	2200      	movs	r2, #0
 81026fa:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8102730 <HAL_InitTick+0xd0>)
 81026fe:	2200      	movs	r2, #0
 8102700:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8102702:	480b      	ldr	r0, [pc, #44]	@ (8102730 <HAL_InitTick+0xd0>)
 8102704:	f007 fb23 	bl	8109d4e <HAL_TIM_Base_Init>
 8102708:	4603      	mov	r3, r0
 810270a:	2b00      	cmp	r3, #0
 810270c:	d104      	bne.n	8102718 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 810270e:	4808      	ldr	r0, [pc, #32]	@ (8102730 <HAL_InitTick+0xd0>)
 8102710:	f007 fb74 	bl	8109dfc <HAL_TIM_Base_Start_IT>
 8102714:	4603      	mov	r3, r0
 8102716:	e000      	b.n	810271a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8102718:	2301      	movs	r3, #1
}
 810271a:	4618      	mov	r0, r3
 810271c:	3740      	adds	r7, #64	@ 0x40
 810271e:	46bd      	mov	sp, r7
 8102720:	bd80      	pop	{r7, pc}
 8102722:	bf00      	nop
 8102724:	10000008 	.word	0x10000008
 8102728:	58024400 	.word	0x58024400
 810272c:	431bde83 	.word	0x431bde83
 8102730:	10000cc8 	.word	0x10000cc8
 8102734:	40000400 	.word	0x40000400

08102738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102738:	b480      	push	{r7}
 810273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 810273c:	bf00      	nop
 810273e:	e7fd      	b.n	810273c <NMI_Handler+0x4>

08102740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102740:	b480      	push	{r7}
 8102742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102744:	bf00      	nop
 8102746:	e7fd      	b.n	8102744 <HardFault_Handler+0x4>

08102748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102748:	b480      	push	{r7}
 810274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810274c:	bf00      	nop
 810274e:	e7fd      	b.n	810274c <MemManage_Handler+0x4>

08102750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102750:	b480      	push	{r7}
 8102752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102754:	bf00      	nop
 8102756:	e7fd      	b.n	8102754 <BusFault_Handler+0x4>

08102758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102758:	b480      	push	{r7}
 810275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810275c:	bf00      	nop
 810275e:	e7fd      	b.n	810275c <UsageFault_Handler+0x4>

08102760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102760:	b480      	push	{r7}
 8102762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102764:	bf00      	nop
 8102766:	46bd      	mov	sp, r7
 8102768:	f85d 7b04 	ldr.w	r7, [sp], #4
 810276c:	4770      	bx	lr

0810276e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 810276e:	b580      	push	{r7, lr}
 8102770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8102772:	2080      	movs	r0, #128	@ 0x80
 8102774:	f002 f9b2 	bl	8104adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8102778:	bf00      	nop
 810277a:	bd80      	pop	{r7, pc}

0810277c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 810277c:	b580      	push	{r7, lr}
 810277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8102780:	4802      	ldr	r0, [pc, #8]	@ (810278c <TIM3_IRQHandler+0x10>)
 8102782:	f007 fc0a 	bl	8109f9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8102786:	bf00      	nop
 8102788:	bd80      	pop	{r7, pc}
 810278a:	bf00      	nop
 810278c:	10000cc8 	.word	0x10000cc8

08102790 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8102790:	b580      	push	{r7, lr}
 8102792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8102794:	4802      	ldr	r0, [pc, #8]	@ (81027a0 <CEC_IRQHandler+0x10>)
 8102796:	f001 f9cf 	bl	8103b38 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 810279a:	bf00      	nop
 810279c:	bd80      	pop	{r7, pc}
 810279e:	bf00      	nop
 81027a0:	100002a0 	.word	0x100002a0

081027a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81027a4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81027e0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 81027a8:	f7fd ff48 	bl	810063c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81027ac:	f7fd ff2e 	bl	810060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81027b0:	480c      	ldr	r0, [pc, #48]	@ (81027e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81027b2:	490d      	ldr	r1, [pc, #52]	@ (81027e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81027b4:	4a0d      	ldr	r2, [pc, #52]	@ (81027ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 81027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81027b8:	e002      	b.n	81027c0 <LoopCopyDataInit>

081027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81027be:	3304      	adds	r3, #4

081027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81027c4:	d3f9      	bcc.n	81027ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81027c6:	4a0a      	ldr	r2, [pc, #40]	@ (81027f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81027c8:	4c0a      	ldr	r4, [pc, #40]	@ (81027f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 81027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 81027cc:	e001      	b.n	81027d2 <LoopFillZerobss>

081027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81027d0:	3204      	adds	r2, #4

081027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81027d4:	d3fb      	bcc.n	81027ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81027d6:	f00d fa21 	bl	810fc1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81027da:	f7fd ff53 	bl	8100684 <main>
  bx  lr
 81027de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81027e0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81027e4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81027e8:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 81027ec:	0810fd28 	.word	0x0810fd28
  ldr r2, =_sbss
 81027f0:	100000d4 	.word	0x100000d4
  ldr r4, =_ebss
 81027f4:	10005668 	.word	0x10005668

081027f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81027f8:	e7fe      	b.n	81027f8 <ADC3_IRQHandler>
	...

081027fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81027fc:	b580      	push	{r7, lr}
 81027fe:	b082      	sub	sp, #8
 8102800:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102802:	4b28      	ldr	r3, [pc, #160]	@ (81028a4 <HAL_Init+0xa8>)
 8102804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102808:	4a26      	ldr	r2, [pc, #152]	@ (81028a4 <HAL_Init+0xa8>)
 810280a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810280e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102812:	4b24      	ldr	r3, [pc, #144]	@ (81028a4 <HAL_Init+0xa8>)
 8102814:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810281c:	603b      	str	r3, [r7, #0]
 810281e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102820:	4b21      	ldr	r3, [pc, #132]	@ (81028a8 <HAL_Init+0xac>)
 8102822:	681b      	ldr	r3, [r3, #0]
 8102824:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8102828:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810282c:	4a1e      	ldr	r2, [pc, #120]	@ (81028a8 <HAL_Init+0xac>)
 810282e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8102832:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102834:	4b1c      	ldr	r3, [pc, #112]	@ (81028a8 <HAL_Init+0xac>)
 8102836:	681b      	ldr	r3, [r3, #0]
 8102838:	4a1b      	ldr	r2, [pc, #108]	@ (81028a8 <HAL_Init+0xac>)
 810283a:	f043 0301 	orr.w	r3, r3, #1
 810283e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102840:	2003      	movs	r0, #3
 8102842:	f001 fb22 	bl	8103e8a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102846:	f002 fbf7 	bl	8105038 <HAL_RCC_GetSysClockFreq>
 810284a:	4602      	mov	r2, r0
 810284c:	4b15      	ldr	r3, [pc, #84]	@ (81028a4 <HAL_Init+0xa8>)
 810284e:	699b      	ldr	r3, [r3, #24]
 8102850:	0a1b      	lsrs	r3, r3, #8
 8102852:	f003 030f 	and.w	r3, r3, #15
 8102856:	4915      	ldr	r1, [pc, #84]	@ (81028ac <HAL_Init+0xb0>)
 8102858:	5ccb      	ldrb	r3, [r1, r3]
 810285a:	f003 031f 	and.w	r3, r3, #31
 810285e:	fa22 f303 	lsr.w	r3, r2, r3
 8102862:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102864:	4b0f      	ldr	r3, [pc, #60]	@ (81028a4 <HAL_Init+0xa8>)
 8102866:	699b      	ldr	r3, [r3, #24]
 8102868:	f003 030f 	and.w	r3, r3, #15
 810286c:	4a0f      	ldr	r2, [pc, #60]	@ (81028ac <HAL_Init+0xb0>)
 810286e:	5cd3      	ldrb	r3, [r2, r3]
 8102870:	f003 031f 	and.w	r3, r3, #31
 8102874:	687a      	ldr	r2, [r7, #4]
 8102876:	fa22 f303 	lsr.w	r3, r2, r3
 810287a:	4a0d      	ldr	r2, [pc, #52]	@ (81028b0 <HAL_Init+0xb4>)
 810287c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810287e:	4b0c      	ldr	r3, [pc, #48]	@ (81028b0 <HAL_Init+0xb4>)
 8102880:	681b      	ldr	r3, [r3, #0]
 8102882:	4a0c      	ldr	r2, [pc, #48]	@ (81028b4 <HAL_Init+0xb8>)
 8102884:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102886:	200f      	movs	r0, #15
 8102888:	f7ff feea 	bl	8102660 <HAL_InitTick>
 810288c:	4603      	mov	r3, r0
 810288e:	2b00      	cmp	r3, #0
 8102890:	d001      	beq.n	8102896 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102892:	2301      	movs	r3, #1
 8102894:	e002      	b.n	810289c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102896:	f7fe fd7d 	bl	8101394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810289a:	2300      	movs	r3, #0
}
 810289c:	4618      	mov	r0, r3
 810289e:	3708      	adds	r7, #8
 81028a0:	46bd      	mov	sp, r7
 81028a2:	bd80      	pop	{r7, pc}
 81028a4:	58024400 	.word	0x58024400
 81028a8:	40024400 	.word	0x40024400
 81028ac:	0810fcbc 	.word	0x0810fcbc
 81028b0:	10000004 	.word	0x10000004
 81028b4:	10000000 	.word	0x10000000

081028b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81028b8:	b480      	push	{r7}
 81028ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81028bc:	4b06      	ldr	r3, [pc, #24]	@ (81028d8 <HAL_IncTick+0x20>)
 81028be:	781b      	ldrb	r3, [r3, #0]
 81028c0:	461a      	mov	r2, r3
 81028c2:	4b06      	ldr	r3, [pc, #24]	@ (81028dc <HAL_IncTick+0x24>)
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	4413      	add	r3, r2
 81028c8:	4a04      	ldr	r2, [pc, #16]	@ (81028dc <HAL_IncTick+0x24>)
 81028ca:	6013      	str	r3, [r2, #0]
}
 81028cc:	bf00      	nop
 81028ce:	46bd      	mov	sp, r7
 81028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028d4:	4770      	bx	lr
 81028d6:	bf00      	nop
 81028d8:	1000000c 	.word	0x1000000c
 81028dc:	10000d14 	.word	0x10000d14

081028e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81028e0:	b480      	push	{r7}
 81028e2:	af00      	add	r7, sp, #0
  return uwTick;
 81028e4:	4b03      	ldr	r3, [pc, #12]	@ (81028f4 <HAL_GetTick+0x14>)
 81028e6:	681b      	ldr	r3, [r3, #0]
}
 81028e8:	4618      	mov	r0, r3
 81028ea:	46bd      	mov	sp, r7
 81028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028f0:	4770      	bx	lr
 81028f2:	bf00      	nop
 81028f4:	10000d14 	.word	0x10000d14

081028f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81028f8:	b580      	push	{r7, lr}
 81028fa:	b084      	sub	sp, #16
 81028fc:	af00      	add	r7, sp, #0
 81028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102900:	f7ff ffee 	bl	81028e0 <HAL_GetTick>
 8102904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810290a:	68fb      	ldr	r3, [r7, #12]
 810290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102910:	d005      	beq.n	810291e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102912:	4b0a      	ldr	r3, [pc, #40]	@ (810293c <HAL_Delay+0x44>)
 8102914:	781b      	ldrb	r3, [r3, #0]
 8102916:	461a      	mov	r2, r3
 8102918:	68fb      	ldr	r3, [r7, #12]
 810291a:	4413      	add	r3, r2
 810291c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810291e:	bf00      	nop
 8102920:	f7ff ffde 	bl	81028e0 <HAL_GetTick>
 8102924:	4602      	mov	r2, r0
 8102926:	68bb      	ldr	r3, [r7, #8]
 8102928:	1ad3      	subs	r3, r2, r3
 810292a:	68fa      	ldr	r2, [r7, #12]
 810292c:	429a      	cmp	r2, r3
 810292e:	d8f7      	bhi.n	8102920 <HAL_Delay+0x28>
  {
  }
}
 8102930:	bf00      	nop
 8102932:	bf00      	nop
 8102934:	3710      	adds	r7, #16
 8102936:	46bd      	mov	sp, r7
 8102938:	bd80      	pop	{r7, pc}
 810293a:	bf00      	nop
 810293c:	1000000c 	.word	0x1000000c

08102940 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102940:	b480      	push	{r7}
 8102942:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102944:	4b03      	ldr	r3, [pc, #12]	@ (8102954 <HAL_GetREVID+0x14>)
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	0c1b      	lsrs	r3, r3, #16
}
 810294a:	4618      	mov	r0, r3
 810294c:	46bd      	mov	sp, r7
 810294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102952:	4770      	bx	lr
 8102954:	5c001000 	.word	0x5c001000

08102958 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8102958:	b480      	push	{r7}
 810295a:	b083      	sub	sp, #12
 810295c:	af00      	add	r7, sp, #0
 810295e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8102960:	4b06      	ldr	r3, [pc, #24]	@ (810297c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102962:	685b      	ldr	r3, [r3, #4]
 8102964:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8102968:	4904      	ldr	r1, [pc, #16]	@ (810297c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810296a:	687b      	ldr	r3, [r7, #4]
 810296c:	4313      	orrs	r3, r2
 810296e:	604b      	str	r3, [r1, #4]
}
 8102970:	bf00      	nop
 8102972:	370c      	adds	r7, #12
 8102974:	46bd      	mov	sp, r7
 8102976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810297a:	4770      	bx	lr
 810297c:	58000400 	.word	0x58000400

08102980 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8102980:	b480      	push	{r7}
 8102982:	b083      	sub	sp, #12
 8102984:	af00      	add	r7, sp, #0
 8102986:	6078      	str	r0, [r7, #4]
 8102988:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810298a:	4b07      	ldr	r3, [pc, #28]	@ (81029a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 810298c:	685a      	ldr	r2, [r3, #4]
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	43db      	mvns	r3, r3
 8102992:	401a      	ands	r2, r3
 8102994:	4904      	ldr	r1, [pc, #16]	@ (81029a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102996:	683b      	ldr	r3, [r7, #0]
 8102998:	4313      	orrs	r3, r2
 810299a:	604b      	str	r3, [r1, #4]
}
 810299c:	bf00      	nop
 810299e:	370c      	adds	r7, #12
 81029a0:	46bd      	mov	sp, r7
 81029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a6:	4770      	bx	lr
 81029a8:	58000400 	.word	0x58000400

081029ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81029ac:	b480      	push	{r7}
 81029ae:	b083      	sub	sp, #12
 81029b0:	af00      	add	r7, sp, #0
 81029b2:	6078      	str	r0, [r7, #4]
 81029b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	689b      	ldr	r3, [r3, #8]
 81029ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 81029be:	683b      	ldr	r3, [r7, #0]
 81029c0:	431a      	orrs	r2, r3
 81029c2:	687b      	ldr	r3, [r7, #4]
 81029c4:	609a      	str	r2, [r3, #8]
}
 81029c6:	bf00      	nop
 81029c8:	370c      	adds	r7, #12
 81029ca:	46bd      	mov	sp, r7
 81029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029d0:	4770      	bx	lr

081029d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81029d2:	b480      	push	{r7}
 81029d4:	b083      	sub	sp, #12
 81029d6:	af00      	add	r7, sp, #0
 81029d8:	6078      	str	r0, [r7, #4]
 81029da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	689b      	ldr	r3, [r3, #8]
 81029e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 81029e4:	683b      	ldr	r3, [r7, #0]
 81029e6:	431a      	orrs	r2, r3
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	609a      	str	r2, [r3, #8]
}
 81029ec:	bf00      	nop
 81029ee:	370c      	adds	r7, #12
 81029f0:	46bd      	mov	sp, r7
 81029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029f6:	4770      	bx	lr

081029f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 81029f8:	b480      	push	{r7}
 81029fa:	b083      	sub	sp, #12
 81029fc:	af00      	add	r7, sp, #0
 81029fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	689b      	ldr	r3, [r3, #8]
 8102a04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8102a08:	4618      	mov	r0, r3
 8102a0a:	370c      	adds	r7, #12
 8102a0c:	46bd      	mov	sp, r7
 8102a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a12:	4770      	bx	lr

08102a14 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8102a14:	b480      	push	{r7}
 8102a16:	b087      	sub	sp, #28
 8102a18:	af00      	add	r7, sp, #0
 8102a1a:	6078      	str	r0, [r7, #4]
 8102a1c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8102a1e:	683b      	ldr	r3, [r7, #0]
 8102a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102a24:	2b00      	cmp	r3, #0
 8102a26:	d107      	bne.n	8102a38 <LL_ADC_SetChannelPreselection+0x24>
 8102a28:	683b      	ldr	r3, [r7, #0]
 8102a2a:	0e9b      	lsrs	r3, r3, #26
 8102a2c:	f003 031f 	and.w	r3, r3, #31
 8102a30:	2201      	movs	r2, #1
 8102a32:	fa02 f303 	lsl.w	r3, r2, r3
 8102a36:	e015      	b.n	8102a64 <LL_ADC_SetChannelPreselection+0x50>
 8102a38:	683b      	ldr	r3, [r7, #0]
 8102a3a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102a3c:	693b      	ldr	r3, [r7, #16]
 8102a3e:	fa93 f3a3 	rbit	r3, r3
 8102a42:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102a44:	68fb      	ldr	r3, [r7, #12]
 8102a46:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102a48:	697b      	ldr	r3, [r7, #20]
 8102a4a:	2b00      	cmp	r3, #0
 8102a4c:	d101      	bne.n	8102a52 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8102a4e:	2320      	movs	r3, #32
 8102a50:	e003      	b.n	8102a5a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8102a52:	697b      	ldr	r3, [r7, #20]
 8102a54:	fab3 f383 	clz	r3, r3
 8102a58:	b2db      	uxtb	r3, r3
 8102a5a:	f003 031f 	and.w	r3, r3, #31
 8102a5e:	2201      	movs	r2, #1
 8102a60:	fa02 f303 	lsl.w	r3, r2, r3
 8102a64:	687a      	ldr	r2, [r7, #4]
 8102a66:	69d2      	ldr	r2, [r2, #28]
 8102a68:	431a      	orrs	r2, r3
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8102a6e:	bf00      	nop
 8102a70:	371c      	adds	r7, #28
 8102a72:	46bd      	mov	sp, r7
 8102a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a78:	4770      	bx	lr

08102a7a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102a7a:	b480      	push	{r7}
 8102a7c:	b087      	sub	sp, #28
 8102a7e:	af00      	add	r7, sp, #0
 8102a80:	60f8      	str	r0, [r7, #12]
 8102a82:	60b9      	str	r1, [r7, #8]
 8102a84:	607a      	str	r2, [r7, #4]
 8102a86:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102a88:	68fb      	ldr	r3, [r7, #12]
 8102a8a:	3360      	adds	r3, #96	@ 0x60
 8102a8c:	461a      	mov	r2, r3
 8102a8e:	68bb      	ldr	r3, [r7, #8]
 8102a90:	009b      	lsls	r3, r3, #2
 8102a92:	4413      	add	r3, r2
 8102a94:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102a96:	697b      	ldr	r3, [r7, #20]
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8102aa4:	683b      	ldr	r3, [r7, #0]
 8102aa6:	430b      	orrs	r3, r1
 8102aa8:	431a      	orrs	r2, r3
 8102aaa:	697b      	ldr	r3, [r7, #20]
 8102aac:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102aae:	bf00      	nop
 8102ab0:	371c      	adds	r7, #28
 8102ab2:	46bd      	mov	sp, r7
 8102ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ab8:	4770      	bx	lr

08102aba <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102aba:	b480      	push	{r7}
 8102abc:	b085      	sub	sp, #20
 8102abe:	af00      	add	r7, sp, #0
 8102ac0:	60f8      	str	r0, [r7, #12]
 8102ac2:	60b9      	str	r1, [r7, #8]
 8102ac4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102ac6:	68fb      	ldr	r3, [r7, #12]
 8102ac8:	691b      	ldr	r3, [r3, #16]
 8102aca:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8102ace:	68bb      	ldr	r3, [r7, #8]
 8102ad0:	f003 031f 	and.w	r3, r3, #31
 8102ad4:	6879      	ldr	r1, [r7, #4]
 8102ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8102ada:	431a      	orrs	r2, r3
 8102adc:	68fb      	ldr	r3, [r7, #12]
 8102ade:	611a      	str	r2, [r3, #16]
}
 8102ae0:	bf00      	nop
 8102ae2:	3714      	adds	r7, #20
 8102ae4:	46bd      	mov	sp, r7
 8102ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aea:	4770      	bx	lr

08102aec <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102aec:	b480      	push	{r7}
 8102aee:	b087      	sub	sp, #28
 8102af0:	af00      	add	r7, sp, #0
 8102af2:	60f8      	str	r0, [r7, #12]
 8102af4:	60b9      	str	r1, [r7, #8]
 8102af6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102af8:	68fb      	ldr	r3, [r7, #12]
 8102afa:	3360      	adds	r3, #96	@ 0x60
 8102afc:	461a      	mov	r2, r3
 8102afe:	68bb      	ldr	r3, [r7, #8]
 8102b00:	009b      	lsls	r3, r3, #2
 8102b02:	4413      	add	r3, r2
 8102b04:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102b06:	697b      	ldr	r3, [r7, #20]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	431a      	orrs	r2, r3
 8102b12:	697b      	ldr	r3, [r7, #20]
 8102b14:	601a      	str	r2, [r3, #0]
  }
}
 8102b16:	bf00      	nop
 8102b18:	371c      	adds	r7, #28
 8102b1a:	46bd      	mov	sp, r7
 8102b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b20:	4770      	bx	lr

08102b22 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102b22:	b480      	push	{r7}
 8102b24:	b087      	sub	sp, #28
 8102b26:	af00      	add	r7, sp, #0
 8102b28:	60f8      	str	r0, [r7, #12]
 8102b2a:	60b9      	str	r1, [r7, #8]
 8102b2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102b2e:	68fb      	ldr	r3, [r7, #12]
 8102b30:	3330      	adds	r3, #48	@ 0x30
 8102b32:	461a      	mov	r2, r3
 8102b34:	68bb      	ldr	r3, [r7, #8]
 8102b36:	0a1b      	lsrs	r3, r3, #8
 8102b38:	009b      	lsls	r3, r3, #2
 8102b3a:	f003 030c 	and.w	r3, r3, #12
 8102b3e:	4413      	add	r3, r2
 8102b40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102b42:	697b      	ldr	r3, [r7, #20]
 8102b44:	681a      	ldr	r2, [r3, #0]
 8102b46:	68bb      	ldr	r3, [r7, #8]
 8102b48:	f003 031f 	and.w	r3, r3, #31
 8102b4c:	211f      	movs	r1, #31
 8102b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8102b52:	43db      	mvns	r3, r3
 8102b54:	401a      	ands	r2, r3
 8102b56:	687b      	ldr	r3, [r7, #4]
 8102b58:	0e9b      	lsrs	r3, r3, #26
 8102b5a:	f003 011f 	and.w	r1, r3, #31
 8102b5e:	68bb      	ldr	r3, [r7, #8]
 8102b60:	f003 031f 	and.w	r3, r3, #31
 8102b64:	fa01 f303 	lsl.w	r3, r1, r3
 8102b68:	431a      	orrs	r2, r3
 8102b6a:	697b      	ldr	r3, [r7, #20]
 8102b6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102b6e:	bf00      	nop
 8102b70:	371c      	adds	r7, #28
 8102b72:	46bd      	mov	sp, r7
 8102b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b78:	4770      	bx	lr

08102b7a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102b7a:	b480      	push	{r7}
 8102b7c:	b087      	sub	sp, #28
 8102b7e:	af00      	add	r7, sp, #0
 8102b80:	60f8      	str	r0, [r7, #12]
 8102b82:	60b9      	str	r1, [r7, #8]
 8102b84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102b86:	68fb      	ldr	r3, [r7, #12]
 8102b88:	3314      	adds	r3, #20
 8102b8a:	461a      	mov	r2, r3
 8102b8c:	68bb      	ldr	r3, [r7, #8]
 8102b8e:	0e5b      	lsrs	r3, r3, #25
 8102b90:	009b      	lsls	r3, r3, #2
 8102b92:	f003 0304 	and.w	r3, r3, #4
 8102b96:	4413      	add	r3, r2
 8102b98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102b9a:	697b      	ldr	r3, [r7, #20]
 8102b9c:	681a      	ldr	r2, [r3, #0]
 8102b9e:	68bb      	ldr	r3, [r7, #8]
 8102ba0:	0d1b      	lsrs	r3, r3, #20
 8102ba2:	f003 031f 	and.w	r3, r3, #31
 8102ba6:	2107      	movs	r1, #7
 8102ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8102bac:	43db      	mvns	r3, r3
 8102bae:	401a      	ands	r2, r3
 8102bb0:	68bb      	ldr	r3, [r7, #8]
 8102bb2:	0d1b      	lsrs	r3, r3, #20
 8102bb4:	f003 031f 	and.w	r3, r3, #31
 8102bb8:	6879      	ldr	r1, [r7, #4]
 8102bba:	fa01 f303 	lsl.w	r3, r1, r3
 8102bbe:	431a      	orrs	r2, r3
 8102bc0:	697b      	ldr	r3, [r7, #20]
 8102bc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102bc4:	bf00      	nop
 8102bc6:	371c      	adds	r7, #28
 8102bc8:	46bd      	mov	sp, r7
 8102bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bce:	4770      	bx	lr

08102bd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102bd0:	b480      	push	{r7}
 8102bd2:	b085      	sub	sp, #20
 8102bd4:	af00      	add	r7, sp, #0
 8102bd6:	60f8      	str	r0, [r7, #12]
 8102bd8:	60b9      	str	r1, [r7, #8]
 8102bda:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102bdc:	68fb      	ldr	r3, [r7, #12]
 8102bde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8102be2:	68bb      	ldr	r3, [r7, #8]
 8102be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102be8:	43db      	mvns	r3, r3
 8102bea:	401a      	ands	r2, r3
 8102bec:	687b      	ldr	r3, [r7, #4]
 8102bee:	f003 0318 	and.w	r3, r3, #24
 8102bf2:	4908      	ldr	r1, [pc, #32]	@ (8102c14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102bf4:	40d9      	lsrs	r1, r3
 8102bf6:	68bb      	ldr	r3, [r7, #8]
 8102bf8:	400b      	ands	r3, r1
 8102bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102bfe:	431a      	orrs	r2, r3
 8102c00:	68fb      	ldr	r3, [r7, #12]
 8102c02:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8102c06:	bf00      	nop
 8102c08:	3714      	adds	r7, #20
 8102c0a:	46bd      	mov	sp, r7
 8102c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c10:	4770      	bx	lr
 8102c12:	bf00      	nop
 8102c14:	000fffff 	.word	0x000fffff

08102c18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102c18:	b480      	push	{r7}
 8102c1a:	b083      	sub	sp, #12
 8102c1c:	af00      	add	r7, sp, #0
 8102c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102c20:	687b      	ldr	r3, [r7, #4]
 8102c22:	689b      	ldr	r3, [r3, #8]
 8102c24:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8102c28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102c2c:	687a      	ldr	r2, [r7, #4]
 8102c2e:	6093      	str	r3, [r2, #8]
}
 8102c30:	bf00      	nop
 8102c32:	370c      	adds	r7, #12
 8102c34:	46bd      	mov	sp, r7
 8102c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c3a:	4770      	bx	lr

08102c3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8102c3c:	b480      	push	{r7}
 8102c3e:	b083      	sub	sp, #12
 8102c40:	af00      	add	r7, sp, #0
 8102c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	689b      	ldr	r3, [r3, #8]
 8102c48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102c50:	d101      	bne.n	8102c56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102c52:	2301      	movs	r3, #1
 8102c54:	e000      	b.n	8102c58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102c56:	2300      	movs	r3, #0
}
 8102c58:	4618      	mov	r0, r3
 8102c5a:	370c      	adds	r7, #12
 8102c5c:	46bd      	mov	sp, r7
 8102c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c62:	4770      	bx	lr

08102c64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102c64:	b480      	push	{r7}
 8102c66:	b083      	sub	sp, #12
 8102c68:	af00      	add	r7, sp, #0
 8102c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102c6c:	687b      	ldr	r3, [r7, #4]
 8102c6e:	689b      	ldr	r3, [r3, #8]
 8102c70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8102c74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102c78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102c80:	bf00      	nop
 8102c82:	370c      	adds	r7, #12
 8102c84:	46bd      	mov	sp, r7
 8102c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c8a:	4770      	bx	lr

08102c8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8102c8c:	b480      	push	{r7}
 8102c8e:	b083      	sub	sp, #12
 8102c90:	af00      	add	r7, sp, #0
 8102c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	689b      	ldr	r3, [r3, #8]
 8102c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8102c9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102ca0:	d101      	bne.n	8102ca6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102ca2:	2301      	movs	r3, #1
 8102ca4:	e000      	b.n	8102ca8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102ca6:	2300      	movs	r3, #0
}
 8102ca8:	4618      	mov	r0, r3
 8102caa:	370c      	adds	r7, #12
 8102cac:	46bd      	mov	sp, r7
 8102cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cb2:	4770      	bx	lr

08102cb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8102cb4:	b480      	push	{r7}
 8102cb6:	b083      	sub	sp, #12
 8102cb8:	af00      	add	r7, sp, #0
 8102cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	689b      	ldr	r3, [r3, #8]
 8102cc0:	f003 0301 	and.w	r3, r3, #1
 8102cc4:	2b01      	cmp	r3, #1
 8102cc6:	d101      	bne.n	8102ccc <LL_ADC_IsEnabled+0x18>
 8102cc8:	2301      	movs	r3, #1
 8102cca:	e000      	b.n	8102cce <LL_ADC_IsEnabled+0x1a>
 8102ccc:	2300      	movs	r3, #0
}
 8102cce:	4618      	mov	r0, r3
 8102cd0:	370c      	adds	r7, #12
 8102cd2:	46bd      	mov	sp, r7
 8102cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cd8:	4770      	bx	lr

08102cda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8102cda:	b480      	push	{r7}
 8102cdc:	b083      	sub	sp, #12
 8102cde:	af00      	add	r7, sp, #0
 8102ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	689b      	ldr	r3, [r3, #8]
 8102ce6:	f003 0304 	and.w	r3, r3, #4
 8102cea:	2b04      	cmp	r3, #4
 8102cec:	d101      	bne.n	8102cf2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102cee:	2301      	movs	r3, #1
 8102cf0:	e000      	b.n	8102cf4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102cf2:	2300      	movs	r3, #0
}
 8102cf4:	4618      	mov	r0, r3
 8102cf6:	370c      	adds	r7, #12
 8102cf8:	46bd      	mov	sp, r7
 8102cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cfe:	4770      	bx	lr

08102d00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8102d00:	b480      	push	{r7}
 8102d02:	b083      	sub	sp, #12
 8102d04:	af00      	add	r7, sp, #0
 8102d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102d08:	687b      	ldr	r3, [r7, #4]
 8102d0a:	689b      	ldr	r3, [r3, #8]
 8102d0c:	f003 0308 	and.w	r3, r3, #8
 8102d10:	2b08      	cmp	r3, #8
 8102d12:	d101      	bne.n	8102d18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102d14:	2301      	movs	r3, #1
 8102d16:	e000      	b.n	8102d1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102d18:	2300      	movs	r3, #0
}
 8102d1a:	4618      	mov	r0, r3
 8102d1c:	370c      	adds	r7, #12
 8102d1e:	46bd      	mov	sp, r7
 8102d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d24:	4770      	bx	lr
	...

08102d28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102d28:	b590      	push	{r4, r7, lr}
 8102d2a:	b089      	sub	sp, #36	@ 0x24
 8102d2c:	af00      	add	r7, sp, #0
 8102d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102d30:	2300      	movs	r3, #0
 8102d32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102d34:	2300      	movs	r3, #0
 8102d36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102d38:	687b      	ldr	r3, [r7, #4]
 8102d3a:	2b00      	cmp	r3, #0
 8102d3c:	d101      	bne.n	8102d42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8102d3e:	2301      	movs	r3, #1
 8102d40:	e18f      	b.n	8103062 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	68db      	ldr	r3, [r3, #12]
 8102d46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102d48:	687b      	ldr	r3, [r7, #4]
 8102d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d4c:	2b00      	cmp	r3, #0
 8102d4e:	d109      	bne.n	8102d64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102d50:	6878      	ldr	r0, [r7, #4]
 8102d52:	f7fe fb3d 	bl	81013d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	2200      	movs	r2, #0
 8102d5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	2200      	movs	r2, #0
 8102d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	681b      	ldr	r3, [r3, #0]
 8102d68:	4618      	mov	r0, r3
 8102d6a:	f7ff ff67 	bl	8102c3c <LL_ADC_IsDeepPowerDownEnabled>
 8102d6e:	4603      	mov	r3, r0
 8102d70:	2b00      	cmp	r3, #0
 8102d72:	d004      	beq.n	8102d7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	4618      	mov	r0, r3
 8102d7a:	f7ff ff4d 	bl	8102c18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	4618      	mov	r0, r3
 8102d84:	f7ff ff82 	bl	8102c8c <LL_ADC_IsInternalRegulatorEnabled>
 8102d88:	4603      	mov	r3, r0
 8102d8a:	2b00      	cmp	r3, #0
 8102d8c:	d114      	bne.n	8102db8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102d8e:	687b      	ldr	r3, [r7, #4]
 8102d90:	681b      	ldr	r3, [r3, #0]
 8102d92:	4618      	mov	r0, r3
 8102d94:	f7ff ff66 	bl	8102c64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102d98:	4b88      	ldr	r3, [pc, #544]	@ (8102fbc <HAL_ADC_Init+0x294>)
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	099b      	lsrs	r3, r3, #6
 8102d9e:	4a88      	ldr	r2, [pc, #544]	@ (8102fc0 <HAL_ADC_Init+0x298>)
 8102da0:	fba2 2303 	umull	r2, r3, r2, r3
 8102da4:	099b      	lsrs	r3, r3, #6
 8102da6:	3301      	adds	r3, #1
 8102da8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102daa:	e002      	b.n	8102db2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102dac:	68bb      	ldr	r3, [r7, #8]
 8102dae:	3b01      	subs	r3, #1
 8102db0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102db2:	68bb      	ldr	r3, [r7, #8]
 8102db4:	2b00      	cmp	r3, #0
 8102db6:	d1f9      	bne.n	8102dac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102db8:	687b      	ldr	r3, [r7, #4]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	4618      	mov	r0, r3
 8102dbe:	f7ff ff65 	bl	8102c8c <LL_ADC_IsInternalRegulatorEnabled>
 8102dc2:	4603      	mov	r3, r0
 8102dc4:	2b00      	cmp	r3, #0
 8102dc6:	d10d      	bne.n	8102de4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102dcc:	f043 0210 	orr.w	r2, r3, #16
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102dd4:	687b      	ldr	r3, [r7, #4]
 8102dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102dd8:	f043 0201 	orr.w	r2, r3, #1
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8102de0:	2301      	movs	r3, #1
 8102de2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102de4:	687b      	ldr	r3, [r7, #4]
 8102de6:	681b      	ldr	r3, [r3, #0]
 8102de8:	4618      	mov	r0, r3
 8102dea:	f7ff ff76 	bl	8102cda <LL_ADC_REG_IsConversionOngoing>
 8102dee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102df4:	f003 0310 	and.w	r3, r3, #16
 8102df8:	2b00      	cmp	r3, #0
 8102dfa:	f040 8129 	bne.w	8103050 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8102dfe:	697b      	ldr	r3, [r7, #20]
 8102e00:	2b00      	cmp	r3, #0
 8102e02:	f040 8125 	bne.w	8103050 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102e0a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8102e0e:	f043 0202 	orr.w	r2, r3, #2
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	4618      	mov	r0, r3
 8102e1c:	f7ff ff4a 	bl	8102cb4 <LL_ADC_IsEnabled>
 8102e20:	4603      	mov	r3, r0
 8102e22:	2b00      	cmp	r3, #0
 8102e24:	d136      	bne.n	8102e94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	4a66      	ldr	r2, [pc, #408]	@ (8102fc4 <HAL_ADC_Init+0x29c>)
 8102e2c:	4293      	cmp	r3, r2
 8102e2e:	d004      	beq.n	8102e3a <HAL_ADC_Init+0x112>
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	4a64      	ldr	r2, [pc, #400]	@ (8102fc8 <HAL_ADC_Init+0x2a0>)
 8102e36:	4293      	cmp	r3, r2
 8102e38:	d10e      	bne.n	8102e58 <HAL_ADC_Init+0x130>
 8102e3a:	4862      	ldr	r0, [pc, #392]	@ (8102fc4 <HAL_ADC_Init+0x29c>)
 8102e3c:	f7ff ff3a 	bl	8102cb4 <LL_ADC_IsEnabled>
 8102e40:	4604      	mov	r4, r0
 8102e42:	4861      	ldr	r0, [pc, #388]	@ (8102fc8 <HAL_ADC_Init+0x2a0>)
 8102e44:	f7ff ff36 	bl	8102cb4 <LL_ADC_IsEnabled>
 8102e48:	4603      	mov	r3, r0
 8102e4a:	4323      	orrs	r3, r4
 8102e4c:	2b00      	cmp	r3, #0
 8102e4e:	bf0c      	ite	eq
 8102e50:	2301      	moveq	r3, #1
 8102e52:	2300      	movne	r3, #0
 8102e54:	b2db      	uxtb	r3, r3
 8102e56:	e008      	b.n	8102e6a <HAL_ADC_Init+0x142>
 8102e58:	485c      	ldr	r0, [pc, #368]	@ (8102fcc <HAL_ADC_Init+0x2a4>)
 8102e5a:	f7ff ff2b 	bl	8102cb4 <LL_ADC_IsEnabled>
 8102e5e:	4603      	mov	r3, r0
 8102e60:	2b00      	cmp	r3, #0
 8102e62:	bf0c      	ite	eq
 8102e64:	2301      	moveq	r3, #1
 8102e66:	2300      	movne	r3, #0
 8102e68:	b2db      	uxtb	r3, r3
 8102e6a:	2b00      	cmp	r3, #0
 8102e6c:	d012      	beq.n	8102e94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102e6e:	687b      	ldr	r3, [r7, #4]
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	4a54      	ldr	r2, [pc, #336]	@ (8102fc4 <HAL_ADC_Init+0x29c>)
 8102e74:	4293      	cmp	r3, r2
 8102e76:	d004      	beq.n	8102e82 <HAL_ADC_Init+0x15a>
 8102e78:	687b      	ldr	r3, [r7, #4]
 8102e7a:	681b      	ldr	r3, [r3, #0]
 8102e7c:	4a52      	ldr	r2, [pc, #328]	@ (8102fc8 <HAL_ADC_Init+0x2a0>)
 8102e7e:	4293      	cmp	r3, r2
 8102e80:	d101      	bne.n	8102e86 <HAL_ADC_Init+0x15e>
 8102e82:	4a53      	ldr	r2, [pc, #332]	@ (8102fd0 <HAL_ADC_Init+0x2a8>)
 8102e84:	e000      	b.n	8102e88 <HAL_ADC_Init+0x160>
 8102e86:	4a53      	ldr	r2, [pc, #332]	@ (8102fd4 <HAL_ADC_Init+0x2ac>)
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	685b      	ldr	r3, [r3, #4]
 8102e8c:	4619      	mov	r1, r3
 8102e8e:	4610      	mov	r0, r2
 8102e90:	f7ff fd8c 	bl	81029ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102e94:	f7ff fd54 	bl	8102940 <HAL_GetREVID>
 8102e98:	4603      	mov	r3, r0
 8102e9a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d914      	bls.n	8102ecc <HAL_ADC_Init+0x1a4>
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	689b      	ldr	r3, [r3, #8]
 8102ea6:	2b10      	cmp	r3, #16
 8102ea8:	d110      	bne.n	8102ecc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	7d5b      	ldrb	r3, [r3, #21]
 8102eae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102eb4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102eba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	7f1b      	ldrb	r3, [r3, #28]
 8102ec0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102ec2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102ec4:	f043 030c 	orr.w	r3, r3, #12
 8102ec8:	61bb      	str	r3, [r7, #24]
 8102eca:	e00d      	b.n	8102ee8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	7d5b      	ldrb	r3, [r3, #21]
 8102ed0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102ed6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102edc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	7f1b      	ldrb	r3, [r3, #28]
 8102ee2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102ee4:	4313      	orrs	r3, r2
 8102ee6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	7f1b      	ldrb	r3, [r3, #28]
 8102eec:	2b01      	cmp	r3, #1
 8102eee:	d106      	bne.n	8102efe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102ef0:	687b      	ldr	r3, [r7, #4]
 8102ef2:	6a1b      	ldr	r3, [r3, #32]
 8102ef4:	3b01      	subs	r3, #1
 8102ef6:	045b      	lsls	r3, r3, #17
 8102ef8:	69ba      	ldr	r2, [r7, #24]
 8102efa:	4313      	orrs	r3, r2
 8102efc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102f02:	2b00      	cmp	r3, #0
 8102f04:	d009      	beq.n	8102f1a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102f0a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102f14:	69ba      	ldr	r2, [r7, #24]
 8102f16:	4313      	orrs	r3, r2
 8102f18:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	681b      	ldr	r3, [r3, #0]
 8102f1e:	68da      	ldr	r2, [r3, #12]
 8102f20:	4b2d      	ldr	r3, [pc, #180]	@ (8102fd8 <HAL_ADC_Init+0x2b0>)
 8102f22:	4013      	ands	r3, r2
 8102f24:	687a      	ldr	r2, [r7, #4]
 8102f26:	6812      	ldr	r2, [r2, #0]
 8102f28:	69b9      	ldr	r1, [r7, #24]
 8102f2a:	430b      	orrs	r3, r1
 8102f2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	4618      	mov	r0, r3
 8102f34:	f7ff fed1 	bl	8102cda <LL_ADC_REG_IsConversionOngoing>
 8102f38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	681b      	ldr	r3, [r3, #0]
 8102f3e:	4618      	mov	r0, r3
 8102f40:	f7ff fede 	bl	8102d00 <LL_ADC_INJ_IsConversionOngoing>
 8102f44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102f46:	693b      	ldr	r3, [r7, #16]
 8102f48:	2b00      	cmp	r3, #0
 8102f4a:	d15f      	bne.n	810300c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102f4c:	68fb      	ldr	r3, [r7, #12]
 8102f4e:	2b00      	cmp	r3, #0
 8102f50:	d15c      	bne.n	810300c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102f52:	687b      	ldr	r3, [r7, #4]
 8102f54:	7d1b      	ldrb	r3, [r3, #20]
 8102f56:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8102f5c:	4313      	orrs	r3, r2
 8102f5e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	68db      	ldr	r3, [r3, #12]
 8102f66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8102f6a:	f023 0303 	bic.w	r3, r3, #3
 8102f6e:	687a      	ldr	r2, [r7, #4]
 8102f70:	6812      	ldr	r2, [r2, #0]
 8102f72:	69b9      	ldr	r1, [r7, #24]
 8102f74:	430b      	orrs	r3, r1
 8102f76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8102f7e:	2b01      	cmp	r3, #1
 8102f80:	d12e      	bne.n	8102fe0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102f86:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	691a      	ldr	r2, [r3, #16]
 8102f8e:	4b13      	ldr	r3, [pc, #76]	@ (8102fdc <HAL_ADC_Init+0x2b4>)
 8102f90:	4013      	ands	r3, r2
 8102f92:	687a      	ldr	r2, [r7, #4]
 8102f94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8102f96:	3a01      	subs	r2, #1
 8102f98:	0411      	lsls	r1, r2, #16
 8102f9a:	687a      	ldr	r2, [r7, #4]
 8102f9c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8102f9e:	4311      	orrs	r1, r2
 8102fa0:	687a      	ldr	r2, [r7, #4]
 8102fa2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8102fa4:	4311      	orrs	r1, r2
 8102fa6:	687a      	ldr	r2, [r7, #4]
 8102fa8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8102faa:	430a      	orrs	r2, r1
 8102fac:	431a      	orrs	r2, r3
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	681b      	ldr	r3, [r3, #0]
 8102fb2:	f042 0201 	orr.w	r2, r2, #1
 8102fb6:	611a      	str	r2, [r3, #16]
 8102fb8:	e01a      	b.n	8102ff0 <HAL_ADC_Init+0x2c8>
 8102fba:	bf00      	nop
 8102fbc:	10000000 	.word	0x10000000
 8102fc0:	053e2d63 	.word	0x053e2d63
 8102fc4:	40022000 	.word	0x40022000
 8102fc8:	40022100 	.word	0x40022100
 8102fcc:	58026000 	.word	0x58026000
 8102fd0:	40022300 	.word	0x40022300
 8102fd4:	58026300 	.word	0x58026300
 8102fd8:	fff0c003 	.word	0xfff0c003
 8102fdc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	681b      	ldr	r3, [r3, #0]
 8102fe4:	691a      	ldr	r2, [r3, #16]
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	681b      	ldr	r3, [r3, #0]
 8102fea:	f022 0201 	bic.w	r2, r2, #1
 8102fee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	691b      	ldr	r3, [r3, #16]
 8102ff6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8102ffe:	687b      	ldr	r3, [r7, #4]
 8103000:	681b      	ldr	r3, [r3, #0]
 8103002:	430a      	orrs	r2, r1
 8103004:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8103006:	6878      	ldr	r0, [r7, #4]
 8103008:	f000 fb20 	bl	810364c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	68db      	ldr	r3, [r3, #12]
 8103010:	2b01      	cmp	r3, #1
 8103012:	d10c      	bne.n	810302e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810301a:	f023 010f 	bic.w	r1, r3, #15
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	699b      	ldr	r3, [r3, #24]
 8103022:	1e5a      	subs	r2, r3, #1
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	681b      	ldr	r3, [r3, #0]
 8103028:	430a      	orrs	r2, r1
 810302a:	631a      	str	r2, [r3, #48]	@ 0x30
 810302c:	e007      	b.n	810303e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 810302e:	687b      	ldr	r3, [r7, #4]
 8103030:	681b      	ldr	r3, [r3, #0]
 8103032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	f022 020f 	bic.w	r2, r2, #15
 810303c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103042:	f023 0303 	bic.w	r3, r3, #3
 8103046:	f043 0201 	orr.w	r2, r3, #1
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	655a      	str	r2, [r3, #84]	@ 0x54
 810304e:	e007      	b.n	8103060 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103054:	f043 0210 	orr.w	r2, r3, #16
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 810305c:	2301      	movs	r3, #1
 810305e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103060:	7ffb      	ldrb	r3, [r7, #31]
}
 8103062:	4618      	mov	r0, r3
 8103064:	3724      	adds	r7, #36	@ 0x24
 8103066:	46bd      	mov	sp, r7
 8103068:	bd90      	pop	{r4, r7, pc}
 810306a:	bf00      	nop

0810306c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 810306c:	b590      	push	{r4, r7, lr}
 810306e:	b08d      	sub	sp, #52	@ 0x34
 8103070:	af00      	add	r7, sp, #0
 8103072:	6078      	str	r0, [r7, #4]
 8103074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103076:	2300      	movs	r3, #0
 8103078:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810307c:	2300      	movs	r3, #0
 810307e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103080:	683b      	ldr	r3, [r7, #0]
 8103082:	68db      	ldr	r3, [r3, #12]
 8103084:	4a65      	ldr	r2, [pc, #404]	@ (810321c <HAL_ADC_ConfigChannel+0x1b0>)
 8103086:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103088:	687b      	ldr	r3, [r7, #4]
 810308a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810308e:	2b01      	cmp	r3, #1
 8103090:	d101      	bne.n	8103096 <HAL_ADC_ConfigChannel+0x2a>
 8103092:	2302      	movs	r3, #2
 8103094:	e2c7      	b.n	8103626 <HAL_ADC_ConfigChannel+0x5ba>
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	2201      	movs	r2, #1
 810309a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	681b      	ldr	r3, [r3, #0]
 81030a2:	4618      	mov	r0, r3
 81030a4:	f7ff fe19 	bl	8102cda <LL_ADC_REG_IsConversionOngoing>
 81030a8:	4603      	mov	r3, r0
 81030aa:	2b00      	cmp	r3, #0
 81030ac:	f040 82ac 	bne.w	8103608 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 81030b0:	683b      	ldr	r3, [r7, #0]
 81030b2:	681b      	ldr	r3, [r3, #0]
 81030b4:	2b00      	cmp	r3, #0
 81030b6:	db2c      	blt.n	8103112 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81030b8:	683b      	ldr	r3, [r7, #0]
 81030ba:	681b      	ldr	r3, [r3, #0]
 81030bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81030c0:	2b00      	cmp	r3, #0
 81030c2:	d108      	bne.n	81030d6 <HAL_ADC_ConfigChannel+0x6a>
 81030c4:	683b      	ldr	r3, [r7, #0]
 81030c6:	681b      	ldr	r3, [r3, #0]
 81030c8:	0e9b      	lsrs	r3, r3, #26
 81030ca:	f003 031f 	and.w	r3, r3, #31
 81030ce:	2201      	movs	r2, #1
 81030d0:	fa02 f303 	lsl.w	r3, r2, r3
 81030d4:	e016      	b.n	8103104 <HAL_ADC_ConfigChannel+0x98>
 81030d6:	683b      	ldr	r3, [r7, #0]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81030dc:	697b      	ldr	r3, [r7, #20]
 81030de:	fa93 f3a3 	rbit	r3, r3
 81030e2:	613b      	str	r3, [r7, #16]
  return result;
 81030e4:	693b      	ldr	r3, [r7, #16]
 81030e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 81030e8:	69bb      	ldr	r3, [r7, #24]
 81030ea:	2b00      	cmp	r3, #0
 81030ec:	d101      	bne.n	81030f2 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 81030ee:	2320      	movs	r3, #32
 81030f0:	e003      	b.n	81030fa <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 81030f2:	69bb      	ldr	r3, [r7, #24]
 81030f4:	fab3 f383 	clz	r3, r3
 81030f8:	b2db      	uxtb	r3, r3
 81030fa:	f003 031f 	and.w	r3, r3, #31
 81030fe:	2201      	movs	r2, #1
 8103100:	fa02 f303 	lsl.w	r3, r2, r3
 8103104:	687a      	ldr	r2, [r7, #4]
 8103106:	6812      	ldr	r2, [r2, #0]
 8103108:	69d1      	ldr	r1, [r2, #28]
 810310a:	687a      	ldr	r2, [r7, #4]
 810310c:	6812      	ldr	r2, [r2, #0]
 810310e:	430b      	orrs	r3, r1
 8103110:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	6818      	ldr	r0, [r3, #0]
 8103116:	683b      	ldr	r3, [r7, #0]
 8103118:	6859      	ldr	r1, [r3, #4]
 810311a:	683b      	ldr	r3, [r7, #0]
 810311c:	681b      	ldr	r3, [r3, #0]
 810311e:	461a      	mov	r2, r3
 8103120:	f7ff fcff 	bl	8102b22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	4618      	mov	r0, r3
 810312a:	f7ff fdd6 	bl	8102cda <LL_ADC_REG_IsConversionOngoing>
 810312e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	4618      	mov	r0, r3
 8103136:	f7ff fde3 	bl	8102d00 <LL_ADC_INJ_IsConversionOngoing>
 810313a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810313e:	2b00      	cmp	r3, #0
 8103140:	f040 80b8 	bne.w	81032b4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103146:	2b00      	cmp	r3, #0
 8103148:	f040 80b4 	bne.w	81032b4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	6818      	ldr	r0, [r3, #0]
 8103150:	683b      	ldr	r3, [r7, #0]
 8103152:	6819      	ldr	r1, [r3, #0]
 8103154:	683b      	ldr	r3, [r7, #0]
 8103156:	689b      	ldr	r3, [r3, #8]
 8103158:	461a      	mov	r2, r3
 810315a:	f7ff fd0e 	bl	8102b7a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810315e:	4b30      	ldr	r3, [pc, #192]	@ (8103220 <HAL_ADC_ConfigChannel+0x1b4>)
 8103160:	681b      	ldr	r3, [r3, #0]
 8103162:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8103166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810316a:	d10b      	bne.n	8103184 <HAL_ADC_ConfigChannel+0x118>
 810316c:	683b      	ldr	r3, [r7, #0]
 810316e:	695a      	ldr	r2, [r3, #20]
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	68db      	ldr	r3, [r3, #12]
 8103176:	089b      	lsrs	r3, r3, #2
 8103178:	f003 0307 	and.w	r3, r3, #7
 810317c:	005b      	lsls	r3, r3, #1
 810317e:	fa02 f303 	lsl.w	r3, r2, r3
 8103182:	e01d      	b.n	81031c0 <HAL_ADC_ConfigChannel+0x154>
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	68db      	ldr	r3, [r3, #12]
 810318a:	f003 0310 	and.w	r3, r3, #16
 810318e:	2b00      	cmp	r3, #0
 8103190:	d10b      	bne.n	81031aa <HAL_ADC_ConfigChannel+0x13e>
 8103192:	683b      	ldr	r3, [r7, #0]
 8103194:	695a      	ldr	r2, [r3, #20]
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	681b      	ldr	r3, [r3, #0]
 810319a:	68db      	ldr	r3, [r3, #12]
 810319c:	089b      	lsrs	r3, r3, #2
 810319e:	f003 0307 	and.w	r3, r3, #7
 81031a2:	005b      	lsls	r3, r3, #1
 81031a4:	fa02 f303 	lsl.w	r3, r2, r3
 81031a8:	e00a      	b.n	81031c0 <HAL_ADC_ConfigChannel+0x154>
 81031aa:	683b      	ldr	r3, [r7, #0]
 81031ac:	695a      	ldr	r2, [r3, #20]
 81031ae:	687b      	ldr	r3, [r7, #4]
 81031b0:	681b      	ldr	r3, [r3, #0]
 81031b2:	68db      	ldr	r3, [r3, #12]
 81031b4:	089b      	lsrs	r3, r3, #2
 81031b6:	f003 0304 	and.w	r3, r3, #4
 81031ba:	005b      	lsls	r3, r3, #1
 81031bc:	fa02 f303 	lsl.w	r3, r2, r3
 81031c0:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81031c2:	683b      	ldr	r3, [r7, #0]
 81031c4:	691b      	ldr	r3, [r3, #16]
 81031c6:	2b04      	cmp	r3, #4
 81031c8:	d02c      	beq.n	8103224 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	6818      	ldr	r0, [r3, #0]
 81031ce:	683b      	ldr	r3, [r7, #0]
 81031d0:	6919      	ldr	r1, [r3, #16]
 81031d2:	683b      	ldr	r3, [r7, #0]
 81031d4:	681a      	ldr	r2, [r3, #0]
 81031d6:	6a3b      	ldr	r3, [r7, #32]
 81031d8:	f7ff fc4f 	bl	8102a7a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	6818      	ldr	r0, [r3, #0]
 81031e0:	683b      	ldr	r3, [r7, #0]
 81031e2:	6919      	ldr	r1, [r3, #16]
 81031e4:	683b      	ldr	r3, [r7, #0]
 81031e6:	7e5b      	ldrb	r3, [r3, #25]
 81031e8:	2b01      	cmp	r3, #1
 81031ea:	d102      	bne.n	81031f2 <HAL_ADC_ConfigChannel+0x186>
 81031ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81031f0:	e000      	b.n	81031f4 <HAL_ADC_ConfigChannel+0x188>
 81031f2:	2300      	movs	r3, #0
 81031f4:	461a      	mov	r2, r3
 81031f6:	f7ff fc79 	bl	8102aec <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	6818      	ldr	r0, [r3, #0]
 81031fe:	683b      	ldr	r3, [r7, #0]
 8103200:	6919      	ldr	r1, [r3, #16]
 8103202:	683b      	ldr	r3, [r7, #0]
 8103204:	7e1b      	ldrb	r3, [r3, #24]
 8103206:	2b01      	cmp	r3, #1
 8103208:	d102      	bne.n	8103210 <HAL_ADC_ConfigChannel+0x1a4>
 810320a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810320e:	e000      	b.n	8103212 <HAL_ADC_ConfigChannel+0x1a6>
 8103210:	2300      	movs	r3, #0
 8103212:	461a      	mov	r2, r3
 8103214:	f7ff fc51 	bl	8102aba <LL_ADC_SetDataRightShift>
 8103218:	e04c      	b.n	81032b4 <HAL_ADC_ConfigChannel+0x248>
 810321a:	bf00      	nop
 810321c:	47ff0000 	.word	0x47ff0000
 8103220:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	681b      	ldr	r3, [r3, #0]
 8103228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810322a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810322e:	683b      	ldr	r3, [r7, #0]
 8103230:	681b      	ldr	r3, [r3, #0]
 8103232:	069b      	lsls	r3, r3, #26
 8103234:	429a      	cmp	r2, r3
 8103236:	d107      	bne.n	8103248 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	681b      	ldr	r3, [r3, #0]
 810323c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103246:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810324e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103252:	683b      	ldr	r3, [r7, #0]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	069b      	lsls	r3, r3, #26
 8103258:	429a      	cmp	r2, r3
 810325a:	d107      	bne.n	810326c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	681b      	ldr	r3, [r3, #0]
 8103266:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810326a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810326c:	687b      	ldr	r3, [r7, #4]
 810326e:	681b      	ldr	r3, [r3, #0]
 8103270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103272:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8103276:	683b      	ldr	r3, [r7, #0]
 8103278:	681b      	ldr	r3, [r3, #0]
 810327a:	069b      	lsls	r3, r3, #26
 810327c:	429a      	cmp	r2, r3
 810327e:	d107      	bne.n	8103290 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103280:	687b      	ldr	r3, [r7, #4]
 8103282:	681b      	ldr	r3, [r3, #0]
 8103284:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810328e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	681b      	ldr	r3, [r3, #0]
 8103294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103296:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810329a:	683b      	ldr	r3, [r7, #0]
 810329c:	681b      	ldr	r3, [r3, #0]
 810329e:	069b      	lsls	r3, r3, #26
 81032a0:	429a      	cmp	r2, r3
 81032a2:	d107      	bne.n	81032b4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	681b      	ldr	r3, [r3, #0]
 81032a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81032b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	4618      	mov	r0, r3
 81032ba:	f7ff fcfb 	bl	8102cb4 <LL_ADC_IsEnabled>
 81032be:	4603      	mov	r3, r0
 81032c0:	2b00      	cmp	r3, #0
 81032c2:	f040 81aa 	bne.w	810361a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	6818      	ldr	r0, [r3, #0]
 81032ca:	683b      	ldr	r3, [r7, #0]
 81032cc:	6819      	ldr	r1, [r3, #0]
 81032ce:	683b      	ldr	r3, [r7, #0]
 81032d0:	68db      	ldr	r3, [r3, #12]
 81032d2:	461a      	mov	r2, r3
 81032d4:	f7ff fc7c 	bl	8102bd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81032d8:	683b      	ldr	r3, [r7, #0]
 81032da:	68db      	ldr	r3, [r3, #12]
 81032dc:	4a87      	ldr	r2, [pc, #540]	@ (81034fc <HAL_ADC_ConfigChannel+0x490>)
 81032de:	4293      	cmp	r3, r2
 81032e0:	f040 809a 	bne.w	8103418 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	681a      	ldr	r2, [r3, #0]
 81032e8:	687b      	ldr	r3, [r7, #4]
 81032ea:	681b      	ldr	r3, [r3, #0]
 81032ec:	4984      	ldr	r1, [pc, #528]	@ (8103500 <HAL_ADC_ConfigChannel+0x494>)
 81032ee:	428b      	cmp	r3, r1
 81032f0:	d147      	bne.n	8103382 <HAL_ADC_ConfigChannel+0x316>
 81032f2:	683b      	ldr	r3, [r7, #0]
 81032f4:	681b      	ldr	r3, [r3, #0]
 81032f6:	4983      	ldr	r1, [pc, #524]	@ (8103504 <HAL_ADC_ConfigChannel+0x498>)
 81032f8:	428b      	cmp	r3, r1
 81032fa:	d040      	beq.n	810337e <HAL_ADC_ConfigChannel+0x312>
 81032fc:	683b      	ldr	r3, [r7, #0]
 81032fe:	681b      	ldr	r3, [r3, #0]
 8103300:	4981      	ldr	r1, [pc, #516]	@ (8103508 <HAL_ADC_ConfigChannel+0x49c>)
 8103302:	428b      	cmp	r3, r1
 8103304:	d039      	beq.n	810337a <HAL_ADC_ConfigChannel+0x30e>
 8103306:	683b      	ldr	r3, [r7, #0]
 8103308:	681b      	ldr	r3, [r3, #0]
 810330a:	4980      	ldr	r1, [pc, #512]	@ (810350c <HAL_ADC_ConfigChannel+0x4a0>)
 810330c:	428b      	cmp	r3, r1
 810330e:	d032      	beq.n	8103376 <HAL_ADC_ConfigChannel+0x30a>
 8103310:	683b      	ldr	r3, [r7, #0]
 8103312:	681b      	ldr	r3, [r3, #0]
 8103314:	497e      	ldr	r1, [pc, #504]	@ (8103510 <HAL_ADC_ConfigChannel+0x4a4>)
 8103316:	428b      	cmp	r3, r1
 8103318:	d02b      	beq.n	8103372 <HAL_ADC_ConfigChannel+0x306>
 810331a:	683b      	ldr	r3, [r7, #0]
 810331c:	681b      	ldr	r3, [r3, #0]
 810331e:	497d      	ldr	r1, [pc, #500]	@ (8103514 <HAL_ADC_ConfigChannel+0x4a8>)
 8103320:	428b      	cmp	r3, r1
 8103322:	d024      	beq.n	810336e <HAL_ADC_ConfigChannel+0x302>
 8103324:	683b      	ldr	r3, [r7, #0]
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	497b      	ldr	r1, [pc, #492]	@ (8103518 <HAL_ADC_ConfigChannel+0x4ac>)
 810332a:	428b      	cmp	r3, r1
 810332c:	d01d      	beq.n	810336a <HAL_ADC_ConfigChannel+0x2fe>
 810332e:	683b      	ldr	r3, [r7, #0]
 8103330:	681b      	ldr	r3, [r3, #0]
 8103332:	497a      	ldr	r1, [pc, #488]	@ (810351c <HAL_ADC_ConfigChannel+0x4b0>)
 8103334:	428b      	cmp	r3, r1
 8103336:	d016      	beq.n	8103366 <HAL_ADC_ConfigChannel+0x2fa>
 8103338:	683b      	ldr	r3, [r7, #0]
 810333a:	681b      	ldr	r3, [r3, #0]
 810333c:	4978      	ldr	r1, [pc, #480]	@ (8103520 <HAL_ADC_ConfigChannel+0x4b4>)
 810333e:	428b      	cmp	r3, r1
 8103340:	d00f      	beq.n	8103362 <HAL_ADC_ConfigChannel+0x2f6>
 8103342:	683b      	ldr	r3, [r7, #0]
 8103344:	681b      	ldr	r3, [r3, #0]
 8103346:	4977      	ldr	r1, [pc, #476]	@ (8103524 <HAL_ADC_ConfigChannel+0x4b8>)
 8103348:	428b      	cmp	r3, r1
 810334a:	d008      	beq.n	810335e <HAL_ADC_ConfigChannel+0x2f2>
 810334c:	683b      	ldr	r3, [r7, #0]
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	4975      	ldr	r1, [pc, #468]	@ (8103528 <HAL_ADC_ConfigChannel+0x4bc>)
 8103352:	428b      	cmp	r3, r1
 8103354:	d101      	bne.n	810335a <HAL_ADC_ConfigChannel+0x2ee>
 8103356:	4b75      	ldr	r3, [pc, #468]	@ (810352c <HAL_ADC_ConfigChannel+0x4c0>)
 8103358:	e05a      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 810335a:	2300      	movs	r3, #0
 810335c:	e058      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 810335e:	4b74      	ldr	r3, [pc, #464]	@ (8103530 <HAL_ADC_ConfigChannel+0x4c4>)
 8103360:	e056      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 8103362:	4b74      	ldr	r3, [pc, #464]	@ (8103534 <HAL_ADC_ConfigChannel+0x4c8>)
 8103364:	e054      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 8103366:	4b6e      	ldr	r3, [pc, #440]	@ (8103520 <HAL_ADC_ConfigChannel+0x4b4>)
 8103368:	e052      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 810336a:	4b6c      	ldr	r3, [pc, #432]	@ (810351c <HAL_ADC_ConfigChannel+0x4b0>)
 810336c:	e050      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 810336e:	4b72      	ldr	r3, [pc, #456]	@ (8103538 <HAL_ADC_ConfigChannel+0x4cc>)
 8103370:	e04e      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 8103372:	4b72      	ldr	r3, [pc, #456]	@ (810353c <HAL_ADC_ConfigChannel+0x4d0>)
 8103374:	e04c      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 8103376:	4b72      	ldr	r3, [pc, #456]	@ (8103540 <HAL_ADC_ConfigChannel+0x4d4>)
 8103378:	e04a      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 810337a:	4b72      	ldr	r3, [pc, #456]	@ (8103544 <HAL_ADC_ConfigChannel+0x4d8>)
 810337c:	e048      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 810337e:	2301      	movs	r3, #1
 8103380:	e046      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 8103382:	687b      	ldr	r3, [r7, #4]
 8103384:	681b      	ldr	r3, [r3, #0]
 8103386:	4970      	ldr	r1, [pc, #448]	@ (8103548 <HAL_ADC_ConfigChannel+0x4dc>)
 8103388:	428b      	cmp	r3, r1
 810338a:	d140      	bne.n	810340e <HAL_ADC_ConfigChannel+0x3a2>
 810338c:	683b      	ldr	r3, [r7, #0]
 810338e:	681b      	ldr	r3, [r3, #0]
 8103390:	495c      	ldr	r1, [pc, #368]	@ (8103504 <HAL_ADC_ConfigChannel+0x498>)
 8103392:	428b      	cmp	r3, r1
 8103394:	d039      	beq.n	810340a <HAL_ADC_ConfigChannel+0x39e>
 8103396:	683b      	ldr	r3, [r7, #0]
 8103398:	681b      	ldr	r3, [r3, #0]
 810339a:	495b      	ldr	r1, [pc, #364]	@ (8103508 <HAL_ADC_ConfigChannel+0x49c>)
 810339c:	428b      	cmp	r3, r1
 810339e:	d032      	beq.n	8103406 <HAL_ADC_ConfigChannel+0x39a>
 81033a0:	683b      	ldr	r3, [r7, #0]
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	4959      	ldr	r1, [pc, #356]	@ (810350c <HAL_ADC_ConfigChannel+0x4a0>)
 81033a6:	428b      	cmp	r3, r1
 81033a8:	d02b      	beq.n	8103402 <HAL_ADC_ConfigChannel+0x396>
 81033aa:	683b      	ldr	r3, [r7, #0]
 81033ac:	681b      	ldr	r3, [r3, #0]
 81033ae:	4958      	ldr	r1, [pc, #352]	@ (8103510 <HAL_ADC_ConfigChannel+0x4a4>)
 81033b0:	428b      	cmp	r3, r1
 81033b2:	d024      	beq.n	81033fe <HAL_ADC_ConfigChannel+0x392>
 81033b4:	683b      	ldr	r3, [r7, #0]
 81033b6:	681b      	ldr	r3, [r3, #0]
 81033b8:	4956      	ldr	r1, [pc, #344]	@ (8103514 <HAL_ADC_ConfigChannel+0x4a8>)
 81033ba:	428b      	cmp	r3, r1
 81033bc:	d01d      	beq.n	81033fa <HAL_ADC_ConfigChannel+0x38e>
 81033be:	683b      	ldr	r3, [r7, #0]
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	4955      	ldr	r1, [pc, #340]	@ (8103518 <HAL_ADC_ConfigChannel+0x4ac>)
 81033c4:	428b      	cmp	r3, r1
 81033c6:	d016      	beq.n	81033f6 <HAL_ADC_ConfigChannel+0x38a>
 81033c8:	683b      	ldr	r3, [r7, #0]
 81033ca:	681b      	ldr	r3, [r3, #0]
 81033cc:	4953      	ldr	r1, [pc, #332]	@ (810351c <HAL_ADC_ConfigChannel+0x4b0>)
 81033ce:	428b      	cmp	r3, r1
 81033d0:	d00f      	beq.n	81033f2 <HAL_ADC_ConfigChannel+0x386>
 81033d2:	683b      	ldr	r3, [r7, #0]
 81033d4:	681b      	ldr	r3, [r3, #0]
 81033d6:	4952      	ldr	r1, [pc, #328]	@ (8103520 <HAL_ADC_ConfigChannel+0x4b4>)
 81033d8:	428b      	cmp	r3, r1
 81033da:	d008      	beq.n	81033ee <HAL_ADC_ConfigChannel+0x382>
 81033dc:	683b      	ldr	r3, [r7, #0]
 81033de:	681b      	ldr	r3, [r3, #0]
 81033e0:	4951      	ldr	r1, [pc, #324]	@ (8103528 <HAL_ADC_ConfigChannel+0x4bc>)
 81033e2:	428b      	cmp	r3, r1
 81033e4:	d101      	bne.n	81033ea <HAL_ADC_ConfigChannel+0x37e>
 81033e6:	4b51      	ldr	r3, [pc, #324]	@ (810352c <HAL_ADC_ConfigChannel+0x4c0>)
 81033e8:	e012      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 81033ea:	2300      	movs	r3, #0
 81033ec:	e010      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 81033ee:	4b51      	ldr	r3, [pc, #324]	@ (8103534 <HAL_ADC_ConfigChannel+0x4c8>)
 81033f0:	e00e      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 81033f2:	4b4b      	ldr	r3, [pc, #300]	@ (8103520 <HAL_ADC_ConfigChannel+0x4b4>)
 81033f4:	e00c      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 81033f6:	4b49      	ldr	r3, [pc, #292]	@ (810351c <HAL_ADC_ConfigChannel+0x4b0>)
 81033f8:	e00a      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 81033fa:	4b4f      	ldr	r3, [pc, #316]	@ (8103538 <HAL_ADC_ConfigChannel+0x4cc>)
 81033fc:	e008      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 81033fe:	4b4f      	ldr	r3, [pc, #316]	@ (810353c <HAL_ADC_ConfigChannel+0x4d0>)
 8103400:	e006      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 8103402:	4b4f      	ldr	r3, [pc, #316]	@ (8103540 <HAL_ADC_ConfigChannel+0x4d4>)
 8103404:	e004      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 8103406:	4b4f      	ldr	r3, [pc, #316]	@ (8103544 <HAL_ADC_ConfigChannel+0x4d8>)
 8103408:	e002      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 810340a:	2301      	movs	r3, #1
 810340c:	e000      	b.n	8103410 <HAL_ADC_ConfigChannel+0x3a4>
 810340e:	2300      	movs	r3, #0
 8103410:	4619      	mov	r1, r3
 8103412:	4610      	mov	r0, r2
 8103414:	f7ff fafe 	bl	8102a14 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103418:	683b      	ldr	r3, [r7, #0]
 810341a:	681b      	ldr	r3, [r3, #0]
 810341c:	2b00      	cmp	r3, #0
 810341e:	f280 80fc 	bge.w	810361a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	681b      	ldr	r3, [r3, #0]
 8103426:	4a36      	ldr	r2, [pc, #216]	@ (8103500 <HAL_ADC_ConfigChannel+0x494>)
 8103428:	4293      	cmp	r3, r2
 810342a:	d004      	beq.n	8103436 <HAL_ADC_ConfigChannel+0x3ca>
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	4a45      	ldr	r2, [pc, #276]	@ (8103548 <HAL_ADC_ConfigChannel+0x4dc>)
 8103432:	4293      	cmp	r3, r2
 8103434:	d101      	bne.n	810343a <HAL_ADC_ConfigChannel+0x3ce>
 8103436:	4b45      	ldr	r3, [pc, #276]	@ (810354c <HAL_ADC_ConfigChannel+0x4e0>)
 8103438:	e000      	b.n	810343c <HAL_ADC_ConfigChannel+0x3d0>
 810343a:	4b45      	ldr	r3, [pc, #276]	@ (8103550 <HAL_ADC_ConfigChannel+0x4e4>)
 810343c:	4618      	mov	r0, r3
 810343e:	f7ff fadb 	bl	81029f8 <LL_ADC_GetCommonPathInternalCh>
 8103442:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	4a2d      	ldr	r2, [pc, #180]	@ (8103500 <HAL_ADC_ConfigChannel+0x494>)
 810344a:	4293      	cmp	r3, r2
 810344c:	d004      	beq.n	8103458 <HAL_ADC_ConfigChannel+0x3ec>
 810344e:	687b      	ldr	r3, [r7, #4]
 8103450:	681b      	ldr	r3, [r3, #0]
 8103452:	4a3d      	ldr	r2, [pc, #244]	@ (8103548 <HAL_ADC_ConfigChannel+0x4dc>)
 8103454:	4293      	cmp	r3, r2
 8103456:	d10e      	bne.n	8103476 <HAL_ADC_ConfigChannel+0x40a>
 8103458:	4829      	ldr	r0, [pc, #164]	@ (8103500 <HAL_ADC_ConfigChannel+0x494>)
 810345a:	f7ff fc2b 	bl	8102cb4 <LL_ADC_IsEnabled>
 810345e:	4604      	mov	r4, r0
 8103460:	4839      	ldr	r0, [pc, #228]	@ (8103548 <HAL_ADC_ConfigChannel+0x4dc>)
 8103462:	f7ff fc27 	bl	8102cb4 <LL_ADC_IsEnabled>
 8103466:	4603      	mov	r3, r0
 8103468:	4323      	orrs	r3, r4
 810346a:	2b00      	cmp	r3, #0
 810346c:	bf0c      	ite	eq
 810346e:	2301      	moveq	r3, #1
 8103470:	2300      	movne	r3, #0
 8103472:	b2db      	uxtb	r3, r3
 8103474:	e008      	b.n	8103488 <HAL_ADC_ConfigChannel+0x41c>
 8103476:	4837      	ldr	r0, [pc, #220]	@ (8103554 <HAL_ADC_ConfigChannel+0x4e8>)
 8103478:	f7ff fc1c 	bl	8102cb4 <LL_ADC_IsEnabled>
 810347c:	4603      	mov	r3, r0
 810347e:	2b00      	cmp	r3, #0
 8103480:	bf0c      	ite	eq
 8103482:	2301      	moveq	r3, #1
 8103484:	2300      	movne	r3, #0
 8103486:	b2db      	uxtb	r3, r3
 8103488:	2b00      	cmp	r3, #0
 810348a:	f000 80b3 	beq.w	81035f4 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 810348e:	683b      	ldr	r3, [r7, #0]
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	4a31      	ldr	r2, [pc, #196]	@ (8103558 <HAL_ADC_ConfigChannel+0x4ec>)
 8103494:	4293      	cmp	r3, r2
 8103496:	d165      	bne.n	8103564 <HAL_ADC_ConfigChannel+0x4f8>
 8103498:	69fb      	ldr	r3, [r7, #28]
 810349a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810349e:	2b00      	cmp	r3, #0
 81034a0:	d160      	bne.n	8103564 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	4a2b      	ldr	r2, [pc, #172]	@ (8103554 <HAL_ADC_ConfigChannel+0x4e8>)
 81034a8:	4293      	cmp	r3, r2
 81034aa:	f040 80b6 	bne.w	810361a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	4a13      	ldr	r2, [pc, #76]	@ (8103500 <HAL_ADC_ConfigChannel+0x494>)
 81034b4:	4293      	cmp	r3, r2
 81034b6:	d004      	beq.n	81034c2 <HAL_ADC_ConfigChannel+0x456>
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	681b      	ldr	r3, [r3, #0]
 81034bc:	4a22      	ldr	r2, [pc, #136]	@ (8103548 <HAL_ADC_ConfigChannel+0x4dc>)
 81034be:	4293      	cmp	r3, r2
 81034c0:	d101      	bne.n	81034c6 <HAL_ADC_ConfigChannel+0x45a>
 81034c2:	4a22      	ldr	r2, [pc, #136]	@ (810354c <HAL_ADC_ConfigChannel+0x4e0>)
 81034c4:	e000      	b.n	81034c8 <HAL_ADC_ConfigChannel+0x45c>
 81034c6:	4a22      	ldr	r2, [pc, #136]	@ (8103550 <HAL_ADC_ConfigChannel+0x4e4>)
 81034c8:	69fb      	ldr	r3, [r7, #28]
 81034ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81034ce:	4619      	mov	r1, r3
 81034d0:	4610      	mov	r0, r2
 81034d2:	f7ff fa7e 	bl	81029d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81034d6:	4b21      	ldr	r3, [pc, #132]	@ (810355c <HAL_ADC_ConfigChannel+0x4f0>)
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	099b      	lsrs	r3, r3, #6
 81034dc:	4a20      	ldr	r2, [pc, #128]	@ (8103560 <HAL_ADC_ConfigChannel+0x4f4>)
 81034de:	fba2 2303 	umull	r2, r3, r2, r3
 81034e2:	099b      	lsrs	r3, r3, #6
 81034e4:	3301      	adds	r3, #1
 81034e6:	005b      	lsls	r3, r3, #1
 81034e8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 81034ea:	e002      	b.n	81034f2 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 81034ec:	68fb      	ldr	r3, [r7, #12]
 81034ee:	3b01      	subs	r3, #1
 81034f0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 81034f2:	68fb      	ldr	r3, [r7, #12]
 81034f4:	2b00      	cmp	r3, #0
 81034f6:	d1f9      	bne.n	81034ec <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81034f8:	e08f      	b.n	810361a <HAL_ADC_ConfigChannel+0x5ae>
 81034fa:	bf00      	nop
 81034fc:	47ff0000 	.word	0x47ff0000
 8103500:	40022000 	.word	0x40022000
 8103504:	04300002 	.word	0x04300002
 8103508:	08600004 	.word	0x08600004
 810350c:	0c900008 	.word	0x0c900008
 8103510:	10c00010 	.word	0x10c00010
 8103514:	14f00020 	.word	0x14f00020
 8103518:	2a000400 	.word	0x2a000400
 810351c:	2e300800 	.word	0x2e300800
 8103520:	32601000 	.word	0x32601000
 8103524:	43210000 	.word	0x43210000
 8103528:	4b840000 	.word	0x4b840000
 810352c:	4fb80000 	.word	0x4fb80000
 8103530:	47520000 	.word	0x47520000
 8103534:	36902000 	.word	0x36902000
 8103538:	25b00200 	.word	0x25b00200
 810353c:	21800100 	.word	0x21800100
 8103540:	1d500080 	.word	0x1d500080
 8103544:	19200040 	.word	0x19200040
 8103548:	40022100 	.word	0x40022100
 810354c:	40022300 	.word	0x40022300
 8103550:	58026300 	.word	0x58026300
 8103554:	58026000 	.word	0x58026000
 8103558:	cb840000 	.word	0xcb840000
 810355c:	10000000 	.word	0x10000000
 8103560:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103564:	683b      	ldr	r3, [r7, #0]
 8103566:	681b      	ldr	r3, [r3, #0]
 8103568:	4a31      	ldr	r2, [pc, #196]	@ (8103630 <HAL_ADC_ConfigChannel+0x5c4>)
 810356a:	4293      	cmp	r3, r2
 810356c:	d11e      	bne.n	81035ac <HAL_ADC_ConfigChannel+0x540>
 810356e:	69fb      	ldr	r3, [r7, #28]
 8103570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8103574:	2b00      	cmp	r3, #0
 8103576:	d119      	bne.n	81035ac <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	681b      	ldr	r3, [r3, #0]
 810357c:	4a2d      	ldr	r2, [pc, #180]	@ (8103634 <HAL_ADC_ConfigChannel+0x5c8>)
 810357e:	4293      	cmp	r3, r2
 8103580:	d14b      	bne.n	810361a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	681b      	ldr	r3, [r3, #0]
 8103586:	4a2c      	ldr	r2, [pc, #176]	@ (8103638 <HAL_ADC_ConfigChannel+0x5cc>)
 8103588:	4293      	cmp	r3, r2
 810358a:	d004      	beq.n	8103596 <HAL_ADC_ConfigChannel+0x52a>
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	681b      	ldr	r3, [r3, #0]
 8103590:	4a2a      	ldr	r2, [pc, #168]	@ (810363c <HAL_ADC_ConfigChannel+0x5d0>)
 8103592:	4293      	cmp	r3, r2
 8103594:	d101      	bne.n	810359a <HAL_ADC_ConfigChannel+0x52e>
 8103596:	4a2a      	ldr	r2, [pc, #168]	@ (8103640 <HAL_ADC_ConfigChannel+0x5d4>)
 8103598:	e000      	b.n	810359c <HAL_ADC_ConfigChannel+0x530>
 810359a:	4a2a      	ldr	r2, [pc, #168]	@ (8103644 <HAL_ADC_ConfigChannel+0x5d8>)
 810359c:	69fb      	ldr	r3, [r7, #28]
 810359e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81035a2:	4619      	mov	r1, r3
 81035a4:	4610      	mov	r0, r2
 81035a6:	f7ff fa14 	bl	81029d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81035aa:	e036      	b.n	810361a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81035ac:	683b      	ldr	r3, [r7, #0]
 81035ae:	681b      	ldr	r3, [r3, #0]
 81035b0:	4a25      	ldr	r2, [pc, #148]	@ (8103648 <HAL_ADC_ConfigChannel+0x5dc>)
 81035b2:	4293      	cmp	r3, r2
 81035b4:	d131      	bne.n	810361a <HAL_ADC_ConfigChannel+0x5ae>
 81035b6:	69fb      	ldr	r3, [r7, #28]
 81035b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81035bc:	2b00      	cmp	r3, #0
 81035be:	d12c      	bne.n	810361a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 81035c0:	687b      	ldr	r3, [r7, #4]
 81035c2:	681b      	ldr	r3, [r3, #0]
 81035c4:	4a1b      	ldr	r2, [pc, #108]	@ (8103634 <HAL_ADC_ConfigChannel+0x5c8>)
 81035c6:	4293      	cmp	r3, r2
 81035c8:	d127      	bne.n	810361a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 81035ca:	687b      	ldr	r3, [r7, #4]
 81035cc:	681b      	ldr	r3, [r3, #0]
 81035ce:	4a1a      	ldr	r2, [pc, #104]	@ (8103638 <HAL_ADC_ConfigChannel+0x5cc>)
 81035d0:	4293      	cmp	r3, r2
 81035d2:	d004      	beq.n	81035de <HAL_ADC_ConfigChannel+0x572>
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	681b      	ldr	r3, [r3, #0]
 81035d8:	4a18      	ldr	r2, [pc, #96]	@ (810363c <HAL_ADC_ConfigChannel+0x5d0>)
 81035da:	4293      	cmp	r3, r2
 81035dc:	d101      	bne.n	81035e2 <HAL_ADC_ConfigChannel+0x576>
 81035de:	4a18      	ldr	r2, [pc, #96]	@ (8103640 <HAL_ADC_ConfigChannel+0x5d4>)
 81035e0:	e000      	b.n	81035e4 <HAL_ADC_ConfigChannel+0x578>
 81035e2:	4a18      	ldr	r2, [pc, #96]	@ (8103644 <HAL_ADC_ConfigChannel+0x5d8>)
 81035e4:	69fb      	ldr	r3, [r7, #28]
 81035e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81035ea:	4619      	mov	r1, r3
 81035ec:	4610      	mov	r0, r2
 81035ee:	f7ff f9f0 	bl	81029d2 <LL_ADC_SetCommonPathInternalCh>
 81035f2:	e012      	b.n	810361a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81035f8:	f043 0220 	orr.w	r2, r3, #32
 81035fc:	687b      	ldr	r3, [r7, #4]
 81035fe:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8103600:	2301      	movs	r3, #1
 8103602:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8103606:	e008      	b.n	810361a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810360c:	f043 0220 	orr.w	r2, r3, #32
 8103610:	687b      	ldr	r3, [r7, #4]
 8103612:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103614:	2301      	movs	r3, #1
 8103616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	2200      	movs	r2, #0
 810361e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8103626:	4618      	mov	r0, r3
 8103628:	3734      	adds	r7, #52	@ 0x34
 810362a:	46bd      	mov	sp, r7
 810362c:	bd90      	pop	{r4, r7, pc}
 810362e:	bf00      	nop
 8103630:	c7520000 	.word	0xc7520000
 8103634:	58026000 	.word	0x58026000
 8103638:	40022000 	.word	0x40022000
 810363c:	40022100 	.word	0x40022100
 8103640:	40022300 	.word	0x40022300
 8103644:	58026300 	.word	0x58026300
 8103648:	cfb80000 	.word	0xcfb80000

0810364c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 810364c:	b580      	push	{r7, lr}
 810364e:	b084      	sub	sp, #16
 8103650:	af00      	add	r7, sp, #0
 8103652:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103654:	687b      	ldr	r3, [r7, #4]
 8103656:	681b      	ldr	r3, [r3, #0]
 8103658:	4a7a      	ldr	r2, [pc, #488]	@ (8103844 <ADC_ConfigureBoostMode+0x1f8>)
 810365a:	4293      	cmp	r3, r2
 810365c:	d004      	beq.n	8103668 <ADC_ConfigureBoostMode+0x1c>
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	681b      	ldr	r3, [r3, #0]
 8103662:	4a79      	ldr	r2, [pc, #484]	@ (8103848 <ADC_ConfigureBoostMode+0x1fc>)
 8103664:	4293      	cmp	r3, r2
 8103666:	d109      	bne.n	810367c <ADC_ConfigureBoostMode+0x30>
 8103668:	4b78      	ldr	r3, [pc, #480]	@ (810384c <ADC_ConfigureBoostMode+0x200>)
 810366a:	689b      	ldr	r3, [r3, #8]
 810366c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103670:	2b00      	cmp	r3, #0
 8103672:	bf14      	ite	ne
 8103674:	2301      	movne	r3, #1
 8103676:	2300      	moveq	r3, #0
 8103678:	b2db      	uxtb	r3, r3
 810367a:	e008      	b.n	810368e <ADC_ConfigureBoostMode+0x42>
 810367c:	4b74      	ldr	r3, [pc, #464]	@ (8103850 <ADC_ConfigureBoostMode+0x204>)
 810367e:	689b      	ldr	r3, [r3, #8]
 8103680:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103684:	2b00      	cmp	r3, #0
 8103686:	bf14      	ite	ne
 8103688:	2301      	movne	r3, #1
 810368a:	2300      	moveq	r3, #0
 810368c:	b2db      	uxtb	r3, r3
 810368e:	2b00      	cmp	r3, #0
 8103690:	d01c      	beq.n	81036cc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103692:	f001 fe4b 	bl	810532c <HAL_RCC_GetHCLKFreq>
 8103696:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	685b      	ldr	r3, [r3, #4]
 810369c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81036a0:	d010      	beq.n	81036c4 <ADC_ConfigureBoostMode+0x78>
 81036a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81036a6:	d873      	bhi.n	8103790 <ADC_ConfigureBoostMode+0x144>
 81036a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81036ac:	d002      	beq.n	81036b4 <ADC_ConfigureBoostMode+0x68>
 81036ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81036b2:	d16d      	bne.n	8103790 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	685b      	ldr	r3, [r3, #4]
 81036b8:	0c1b      	lsrs	r3, r3, #16
 81036ba:	68fa      	ldr	r2, [r7, #12]
 81036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 81036c0:	60fb      	str	r3, [r7, #12]
        break;
 81036c2:	e068      	b.n	8103796 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81036c4:	68fb      	ldr	r3, [r7, #12]
 81036c6:	089b      	lsrs	r3, r3, #2
 81036c8:	60fb      	str	r3, [r7, #12]
        break;
 81036ca:	e064      	b.n	8103796 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81036cc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 81036d0:	f04f 0100 	mov.w	r1, #0
 81036d4:	f003 f914 	bl	8106900 <HAL_RCCEx_GetPeriphCLKFreq>
 81036d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81036da:	687b      	ldr	r3, [r7, #4]
 81036dc:	685b      	ldr	r3, [r3, #4]
 81036de:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81036e2:	d051      	beq.n	8103788 <ADC_ConfigureBoostMode+0x13c>
 81036e4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81036e8:	d854      	bhi.n	8103794 <ADC_ConfigureBoostMode+0x148>
 81036ea:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81036ee:	d047      	beq.n	8103780 <ADC_ConfigureBoostMode+0x134>
 81036f0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81036f4:	d84e      	bhi.n	8103794 <ADC_ConfigureBoostMode+0x148>
 81036f6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81036fa:	d03d      	beq.n	8103778 <ADC_ConfigureBoostMode+0x12c>
 81036fc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8103700:	d848      	bhi.n	8103794 <ADC_ConfigureBoostMode+0x148>
 8103702:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103706:	d033      	beq.n	8103770 <ADC_ConfigureBoostMode+0x124>
 8103708:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810370c:	d842      	bhi.n	8103794 <ADC_ConfigureBoostMode+0x148>
 810370e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8103712:	d029      	beq.n	8103768 <ADC_ConfigureBoostMode+0x11c>
 8103714:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8103718:	d83c      	bhi.n	8103794 <ADC_ConfigureBoostMode+0x148>
 810371a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 810371e:	d01a      	beq.n	8103756 <ADC_ConfigureBoostMode+0x10a>
 8103720:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8103724:	d836      	bhi.n	8103794 <ADC_ConfigureBoostMode+0x148>
 8103726:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 810372a:	d014      	beq.n	8103756 <ADC_ConfigureBoostMode+0x10a>
 810372c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8103730:	d830      	bhi.n	8103794 <ADC_ConfigureBoostMode+0x148>
 8103732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103736:	d00e      	beq.n	8103756 <ADC_ConfigureBoostMode+0x10a>
 8103738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810373c:	d82a      	bhi.n	8103794 <ADC_ConfigureBoostMode+0x148>
 810373e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8103742:	d008      	beq.n	8103756 <ADC_ConfigureBoostMode+0x10a>
 8103744:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8103748:	d824      	bhi.n	8103794 <ADC_ConfigureBoostMode+0x148>
 810374a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810374e:	d002      	beq.n	8103756 <ADC_ConfigureBoostMode+0x10a>
 8103750:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8103754:	d11e      	bne.n	8103794 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	685b      	ldr	r3, [r3, #4]
 810375a:	0c9b      	lsrs	r3, r3, #18
 810375c:	005b      	lsls	r3, r3, #1
 810375e:	68fa      	ldr	r2, [r7, #12]
 8103760:	fbb2 f3f3 	udiv	r3, r2, r3
 8103764:	60fb      	str	r3, [r7, #12]
        break;
 8103766:	e016      	b.n	8103796 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103768:	68fb      	ldr	r3, [r7, #12]
 810376a:	091b      	lsrs	r3, r3, #4
 810376c:	60fb      	str	r3, [r7, #12]
        break;
 810376e:	e012      	b.n	8103796 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103770:	68fb      	ldr	r3, [r7, #12]
 8103772:	095b      	lsrs	r3, r3, #5
 8103774:	60fb      	str	r3, [r7, #12]
        break;
 8103776:	e00e      	b.n	8103796 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103778:	68fb      	ldr	r3, [r7, #12]
 810377a:	099b      	lsrs	r3, r3, #6
 810377c:	60fb      	str	r3, [r7, #12]
        break;
 810377e:	e00a      	b.n	8103796 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103780:	68fb      	ldr	r3, [r7, #12]
 8103782:	09db      	lsrs	r3, r3, #7
 8103784:	60fb      	str	r3, [r7, #12]
        break;
 8103786:	e006      	b.n	8103796 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103788:	68fb      	ldr	r3, [r7, #12]
 810378a:	0a1b      	lsrs	r3, r3, #8
 810378c:	60fb      	str	r3, [r7, #12]
        break;
 810378e:	e002      	b.n	8103796 <ADC_ConfigureBoostMode+0x14a>
        break;
 8103790:	bf00      	nop
 8103792:	e000      	b.n	8103796 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103794:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103796:	f7ff f8d3 	bl	8102940 <HAL_GetREVID>
 810379a:	4603      	mov	r3, r0
 810379c:	f241 0203 	movw	r2, #4099	@ 0x1003
 81037a0:	4293      	cmp	r3, r2
 81037a2:	d815      	bhi.n	81037d0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 81037a4:	68fb      	ldr	r3, [r7, #12]
 81037a6:	4a2b      	ldr	r2, [pc, #172]	@ (8103854 <ADC_ConfigureBoostMode+0x208>)
 81037a8:	4293      	cmp	r3, r2
 81037aa:	d908      	bls.n	81037be <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	689a      	ldr	r2, [r3, #8]
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	681b      	ldr	r3, [r3, #0]
 81037b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81037ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81037bc:	e03e      	b.n	810383c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81037be:	687b      	ldr	r3, [r7, #4]
 81037c0:	681b      	ldr	r3, [r3, #0]
 81037c2:	689a      	ldr	r2, [r3, #8]
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	681b      	ldr	r3, [r3, #0]
 81037c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81037cc:	609a      	str	r2, [r3, #8]
}
 81037ce:	e035      	b.n	810383c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 81037d0:	68fb      	ldr	r3, [r7, #12]
 81037d2:	085b      	lsrs	r3, r3, #1
 81037d4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81037d6:	68fb      	ldr	r3, [r7, #12]
 81037d8:	4a1f      	ldr	r2, [pc, #124]	@ (8103858 <ADC_ConfigureBoostMode+0x20c>)
 81037da:	4293      	cmp	r3, r2
 81037dc:	d808      	bhi.n	81037f0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	681b      	ldr	r3, [r3, #0]
 81037e2:	689a      	ldr	r2, [r3, #8]
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	681b      	ldr	r3, [r3, #0]
 81037e8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 81037ec:	609a      	str	r2, [r3, #8]
}
 81037ee:	e025      	b.n	810383c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81037f0:	68fb      	ldr	r3, [r7, #12]
 81037f2:	4a1a      	ldr	r2, [pc, #104]	@ (810385c <ADC_ConfigureBoostMode+0x210>)
 81037f4:	4293      	cmp	r3, r2
 81037f6:	d80a      	bhi.n	810380e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81037f8:	687b      	ldr	r3, [r7, #4]
 81037fa:	681b      	ldr	r3, [r3, #0]
 81037fc:	689b      	ldr	r3, [r3, #8]
 81037fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	681b      	ldr	r3, [r3, #0]
 8103806:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810380a:	609a      	str	r2, [r3, #8]
}
 810380c:	e016      	b.n	810383c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 810380e:	68fb      	ldr	r3, [r7, #12]
 8103810:	4a13      	ldr	r2, [pc, #76]	@ (8103860 <ADC_ConfigureBoostMode+0x214>)
 8103812:	4293      	cmp	r3, r2
 8103814:	d80a      	bhi.n	810382c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	681b      	ldr	r3, [r3, #0]
 810381a:	689b      	ldr	r3, [r3, #8]
 810381c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	681b      	ldr	r3, [r3, #0]
 8103824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103828:	609a      	str	r2, [r3, #8]
}
 810382a:	e007      	b.n	810383c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	689a      	ldr	r2, [r3, #8]
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 810383a:	609a      	str	r2, [r3, #8]
}
 810383c:	bf00      	nop
 810383e:	3710      	adds	r7, #16
 8103840:	46bd      	mov	sp, r7
 8103842:	bd80      	pop	{r7, pc}
 8103844:	40022000 	.word	0x40022000
 8103848:	40022100 	.word	0x40022100
 810384c:	40022300 	.word	0x40022300
 8103850:	58026300 	.word	0x58026300
 8103854:	01312d00 	.word	0x01312d00
 8103858:	005f5e10 	.word	0x005f5e10
 810385c:	00bebc20 	.word	0x00bebc20
 8103860:	017d7840 	.word	0x017d7840

08103864 <LL_ADC_IsEnabled>:
{
 8103864:	b480      	push	{r7}
 8103866:	b083      	sub	sp, #12
 8103868:	af00      	add	r7, sp, #0
 810386a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	689b      	ldr	r3, [r3, #8]
 8103870:	f003 0301 	and.w	r3, r3, #1
 8103874:	2b01      	cmp	r3, #1
 8103876:	d101      	bne.n	810387c <LL_ADC_IsEnabled+0x18>
 8103878:	2301      	movs	r3, #1
 810387a:	e000      	b.n	810387e <LL_ADC_IsEnabled+0x1a>
 810387c:	2300      	movs	r3, #0
}
 810387e:	4618      	mov	r0, r3
 8103880:	370c      	adds	r7, #12
 8103882:	46bd      	mov	sp, r7
 8103884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103888:	4770      	bx	lr

0810388a <LL_ADC_REG_IsConversionOngoing>:
{
 810388a:	b480      	push	{r7}
 810388c:	b083      	sub	sp, #12
 810388e:	af00      	add	r7, sp, #0
 8103890:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	689b      	ldr	r3, [r3, #8]
 8103896:	f003 0304 	and.w	r3, r3, #4
 810389a:	2b04      	cmp	r3, #4
 810389c:	d101      	bne.n	81038a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 810389e:	2301      	movs	r3, #1
 81038a0:	e000      	b.n	81038a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81038a2:	2300      	movs	r3, #0
}
 81038a4:	4618      	mov	r0, r3
 81038a6:	370c      	adds	r7, #12
 81038a8:	46bd      	mov	sp, r7
 81038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038ae:	4770      	bx	lr

081038b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 81038b0:	b590      	push	{r4, r7, lr}
 81038b2:	b09f      	sub	sp, #124	@ 0x7c
 81038b4:	af00      	add	r7, sp, #0
 81038b6:	6078      	str	r0, [r7, #4]
 81038b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81038ba:	2300      	movs	r3, #0
 81038bc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81038c6:	2b01      	cmp	r3, #1
 81038c8:	d101      	bne.n	81038ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81038ca:	2302      	movs	r3, #2
 81038cc:	e0c4      	b.n	8103a58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81038ce:	687b      	ldr	r3, [r7, #4]
 81038d0:	2201      	movs	r2, #1
 81038d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81038d6:	2300      	movs	r3, #0
 81038d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81038da:	2300      	movs	r3, #0
 81038dc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	681b      	ldr	r3, [r3, #0]
 81038e2:	4a5f      	ldr	r2, [pc, #380]	@ (8103a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81038e4:	4293      	cmp	r3, r2
 81038e6:	d102      	bne.n	81038ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81038e8:	4b5e      	ldr	r3, [pc, #376]	@ (8103a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81038ea:	60bb      	str	r3, [r7, #8]
 81038ec:	e001      	b.n	81038f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81038ee:	2300      	movs	r3, #0
 81038f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81038f2:	68bb      	ldr	r3, [r7, #8]
 81038f4:	2b00      	cmp	r3, #0
 81038f6:	d10b      	bne.n	8103910 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81038fc:	f043 0220 	orr.w	r2, r3, #32
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	2200      	movs	r2, #0
 8103908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 810390c:	2301      	movs	r3, #1
 810390e:	e0a3      	b.n	8103a58 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103910:	68bb      	ldr	r3, [r7, #8]
 8103912:	4618      	mov	r0, r3
 8103914:	f7ff ffb9 	bl	810388a <LL_ADC_REG_IsConversionOngoing>
 8103918:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	681b      	ldr	r3, [r3, #0]
 810391e:	4618      	mov	r0, r3
 8103920:	f7ff ffb3 	bl	810388a <LL_ADC_REG_IsConversionOngoing>
 8103924:	4603      	mov	r3, r0
 8103926:	2b00      	cmp	r3, #0
 8103928:	f040 8085 	bne.w	8103a36 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 810392c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810392e:	2b00      	cmp	r3, #0
 8103930:	f040 8081 	bne.w	8103a36 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	681b      	ldr	r3, [r3, #0]
 8103938:	4a49      	ldr	r2, [pc, #292]	@ (8103a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810393a:	4293      	cmp	r3, r2
 810393c:	d004      	beq.n	8103948 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	4a48      	ldr	r2, [pc, #288]	@ (8103a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103944:	4293      	cmp	r3, r2
 8103946:	d101      	bne.n	810394c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103948:	4b47      	ldr	r3, [pc, #284]	@ (8103a68 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810394a:	e000      	b.n	810394e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 810394c:	4b47      	ldr	r3, [pc, #284]	@ (8103a6c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810394e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103950:	683b      	ldr	r3, [r7, #0]
 8103952:	681b      	ldr	r3, [r3, #0]
 8103954:	2b00      	cmp	r3, #0
 8103956:	d03b      	beq.n	81039d0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810395a:	689b      	ldr	r3, [r3, #8]
 810395c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103960:	683b      	ldr	r3, [r7, #0]
 8103962:	685b      	ldr	r3, [r3, #4]
 8103964:	431a      	orrs	r2, r3
 8103966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103968:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	4a3c      	ldr	r2, [pc, #240]	@ (8103a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103970:	4293      	cmp	r3, r2
 8103972:	d004      	beq.n	810397e <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103974:	687b      	ldr	r3, [r7, #4]
 8103976:	681b      	ldr	r3, [r3, #0]
 8103978:	4a3a      	ldr	r2, [pc, #232]	@ (8103a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810397a:	4293      	cmp	r3, r2
 810397c:	d10e      	bne.n	810399c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810397e:	4838      	ldr	r0, [pc, #224]	@ (8103a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103980:	f7ff ff70 	bl	8103864 <LL_ADC_IsEnabled>
 8103984:	4604      	mov	r4, r0
 8103986:	4837      	ldr	r0, [pc, #220]	@ (8103a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103988:	f7ff ff6c 	bl	8103864 <LL_ADC_IsEnabled>
 810398c:	4603      	mov	r3, r0
 810398e:	4323      	orrs	r3, r4
 8103990:	2b00      	cmp	r3, #0
 8103992:	bf0c      	ite	eq
 8103994:	2301      	moveq	r3, #1
 8103996:	2300      	movne	r3, #0
 8103998:	b2db      	uxtb	r3, r3
 810399a:	e008      	b.n	81039ae <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 810399c:	4834      	ldr	r0, [pc, #208]	@ (8103a70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810399e:	f7ff ff61 	bl	8103864 <LL_ADC_IsEnabled>
 81039a2:	4603      	mov	r3, r0
 81039a4:	2b00      	cmp	r3, #0
 81039a6:	bf0c      	ite	eq
 81039a8:	2301      	moveq	r3, #1
 81039aa:	2300      	movne	r3, #0
 81039ac:	b2db      	uxtb	r3, r3
 81039ae:	2b00      	cmp	r3, #0
 81039b0:	d04b      	beq.n	8103a4a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81039b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81039b4:	689b      	ldr	r3, [r3, #8]
 81039b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 81039ba:	f023 030f 	bic.w	r3, r3, #15
 81039be:	683a      	ldr	r2, [r7, #0]
 81039c0:	6811      	ldr	r1, [r2, #0]
 81039c2:	683a      	ldr	r2, [r7, #0]
 81039c4:	6892      	ldr	r2, [r2, #8]
 81039c6:	430a      	orrs	r2, r1
 81039c8:	431a      	orrs	r2, r3
 81039ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81039cc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81039ce:	e03c      	b.n	8103a4a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81039d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81039d2:	689b      	ldr	r3, [r3, #8]
 81039d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 81039d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81039da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	4a1f      	ldr	r2, [pc, #124]	@ (8103a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81039e2:	4293      	cmp	r3, r2
 81039e4:	d004      	beq.n	81039f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	681b      	ldr	r3, [r3, #0]
 81039ea:	4a1e      	ldr	r2, [pc, #120]	@ (8103a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81039ec:	4293      	cmp	r3, r2
 81039ee:	d10e      	bne.n	8103a0e <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81039f0:	481b      	ldr	r0, [pc, #108]	@ (8103a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81039f2:	f7ff ff37 	bl	8103864 <LL_ADC_IsEnabled>
 81039f6:	4604      	mov	r4, r0
 81039f8:	481a      	ldr	r0, [pc, #104]	@ (8103a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81039fa:	f7ff ff33 	bl	8103864 <LL_ADC_IsEnabled>
 81039fe:	4603      	mov	r3, r0
 8103a00:	4323      	orrs	r3, r4
 8103a02:	2b00      	cmp	r3, #0
 8103a04:	bf0c      	ite	eq
 8103a06:	2301      	moveq	r3, #1
 8103a08:	2300      	movne	r3, #0
 8103a0a:	b2db      	uxtb	r3, r3
 8103a0c:	e008      	b.n	8103a20 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8103a0e:	4818      	ldr	r0, [pc, #96]	@ (8103a70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103a10:	f7ff ff28 	bl	8103864 <LL_ADC_IsEnabled>
 8103a14:	4603      	mov	r3, r0
 8103a16:	2b00      	cmp	r3, #0
 8103a18:	bf0c      	ite	eq
 8103a1a:	2301      	moveq	r3, #1
 8103a1c:	2300      	movne	r3, #0
 8103a1e:	b2db      	uxtb	r3, r3
 8103a20:	2b00      	cmp	r3, #0
 8103a22:	d012      	beq.n	8103a4a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103a26:	689b      	ldr	r3, [r3, #8]
 8103a28:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103a2c:	f023 030f 	bic.w	r3, r3, #15
 8103a30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8103a32:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103a34:	e009      	b.n	8103a4a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a3a:	f043 0220 	orr.w	r2, r3, #32
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103a42:	2301      	movs	r3, #1
 8103a44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8103a48:	e000      	b.n	8103a4c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103a4a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	2200      	movs	r2, #0
 8103a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103a54:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8103a58:	4618      	mov	r0, r3
 8103a5a:	377c      	adds	r7, #124	@ 0x7c
 8103a5c:	46bd      	mov	sp, r7
 8103a5e:	bd90      	pop	{r4, r7, pc}
 8103a60:	40022000 	.word	0x40022000
 8103a64:	40022100 	.word	0x40022100
 8103a68:	40022300 	.word	0x40022300
 8103a6c:	58026300 	.word	0x58026300
 8103a70:	58026000 	.word	0x58026000

08103a74 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8103a74:	b580      	push	{r7, lr}
 8103a76:	b082      	sub	sp, #8
 8103a78:	af00      	add	r7, sp, #0
 8103a7a:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	2b00      	cmp	r3, #0
 8103a80:	d003      	beq.n	8103a8a <HAL_CEC_Init+0x16>
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103a86:	2b00      	cmp	r3, #0
 8103a88:	d101      	bne.n	8103a8e <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8103a8a:	2301      	movs	r3, #1
 8103a8c:	e050      	b.n	8103b30 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103a92:	2b00      	cmp	r3, #0
 8103a94:	d106      	bne.n	8103aa4 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	2200      	movs	r2, #0
 8103a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8103a9e:	6878      	ldr	r0, [r7, #4]
 8103aa0:	f7fd fdd6 	bl	8101650 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	2224      	movs	r2, #36	@ 0x24
 8103aa8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	681a      	ldr	r2, [r3, #0]
 8103ab0:	687b      	ldr	r3, [r7, #4]
 8103ab2:	681b      	ldr	r3, [r3, #0]
 8103ab4:	f022 0201 	bic.w	r2, r2, #1
 8103ab8:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	685a      	ldr	r2, [r3, #4]
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	689b      	ldr	r3, [r3, #8]
 8103ac2:	431a      	orrs	r2, r3
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	68db      	ldr	r3, [r3, #12]
 8103ac8:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103ace:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	695b      	ldr	r3, [r3, #20]
 8103ad4:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103ada:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103ae0:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8103ae6:	041b      	lsls	r3, r3, #16
 8103ae8:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8103aec:	687b      	ldr	r3, [r7, #4]
 8103aee:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103af4:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103af6:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	695b      	ldr	r3, [r3, #20]
 8103afe:	687a      	ldr	r2, [r7, #4]
 8103b00:	6812      	ldr	r2, [r2, #0]
 8103b02:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8103b06:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8103b0a:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	681b      	ldr	r3, [r3, #0]
 8103b10:	681a      	ldr	r2, [r3, #0]
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	681b      	ldr	r3, [r3, #0]
 8103b16:	f042 0201 	orr.w	r2, r2, #1
 8103b1a:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	2200      	movs	r2, #0
 8103b20:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	2220      	movs	r2, #32
 8103b26:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8103b28:	687b      	ldr	r3, [r7, #4]
 8103b2a:	2220      	movs	r2, #32
 8103b2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8103b2e:	2300      	movs	r3, #0
}
 8103b30:	4618      	mov	r0, r3
 8103b32:	3708      	adds	r7, #8
 8103b34:	46bd      	mov	sp, r7
 8103b36:	bd80      	pop	{r7, pc}

08103b38 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8103b38:	b580      	push	{r7, lr}
 8103b3a:	b084      	sub	sp, #16
 8103b3c:	af00      	add	r7, sp, #0
 8103b3e:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	691b      	ldr	r3, [r3, #16]
 8103b46:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8103b48:	68fb      	ldr	r3, [r7, #12]
 8103b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103b4e:	2b00      	cmp	r3, #0
 8103b50:	d00a      	beq.n	8103b68 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8103b52:	687b      	ldr	r3, [r7, #4]
 8103b54:	2280      	movs	r2, #128	@ 0x80
 8103b56:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	681b      	ldr	r3, [r3, #0]
 8103b5c:	691a      	ldr	r2, [r3, #16]
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	681b      	ldr	r3, [r3, #0]
 8103b62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8103b66:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8103b68:	68fb      	ldr	r3, [r7, #12]
 8103b6a:	f003 0301 	and.w	r3, r3, #1
 8103b6e:	2b00      	cmp	r3, #0
 8103b70:	d01c      	beq.n	8103bac <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	2222      	movs	r2, #34	@ 0x22
 8103b76:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103b7c:	3301      	adds	r3, #1
 8103b7e:	b29a      	uxth	r2, r3
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	681b      	ldr	r3, [r3, #0]
 8103b88:	68da      	ldr	r2, [r3, #12]
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103b8e:	b2d2      	uxtb	r2, r2
 8103b90:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103b96:	1c5a      	adds	r2, r3, #1
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	681b      	ldr	r3, [r3, #0]
 8103ba0:	691a      	ldr	r2, [r3, #16]
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	681b      	ldr	r3, [r3, #0]
 8103ba6:	f042 0201 	orr.w	r2, r2, #1
 8103baa:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8103bac:	68fb      	ldr	r3, [r7, #12]
 8103bae:	f003 0302 	and.w	r3, r3, #2
 8103bb2:	2b00      	cmp	r3, #0
 8103bb4:	d01e      	beq.n	8103bf4 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	681b      	ldr	r3, [r3, #0]
 8103bba:	691a      	ldr	r2, [r3, #16]
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	f042 0202 	orr.w	r2, r2, #2
 8103bc4:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	2220      	movs	r2, #32
 8103bca:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103bcc:	687b      	ldr	r3, [r7, #4]
 8103bce:	2200      	movs	r2, #0
 8103bd0:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103bd6:	687b      	ldr	r3, [r7, #4]
 8103bd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103bda:	425b      	negs	r3, r3
 8103bdc:	441a      	add	r2, r3
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103be6:	4619      	mov	r1, r3
 8103be8:	6878      	ldr	r0, [r7, #4]
 8103bea:	f000 f88c 	bl	8103d06 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	2200      	movs	r2, #0
 8103bf2:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8103bf4:	68fb      	ldr	r3, [r7, #12]
 8103bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103bfa:	2b00      	cmp	r3, #0
 8103bfc:	d024      	beq.n	8103c48 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8103bfe:	687b      	ldr	r3, [r7, #4]
 8103c00:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8103c02:	3b01      	subs	r3, #1
 8103c04:	b29a      	uxth	r2, r3
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8103c0e:	2b00      	cmp	r3, #0
 8103c10:	d107      	bne.n	8103c22 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	681b      	ldr	r3, [r3, #0]
 8103c16:	681a      	ldr	r2, [r3, #0]
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	f042 0204 	orr.w	r2, r2, #4
 8103c20:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103c26:	781a      	ldrb	r2, [r3, #0]
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103c32:	1c5a      	adds	r2, r3, #1
 8103c34:	687b      	ldr	r3, [r7, #4]
 8103c36:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	681b      	ldr	r3, [r3, #0]
 8103c3c:	691a      	ldr	r2, [r3, #16]
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	681b      	ldr	r3, [r3, #0]
 8103c42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103c46:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8103c48:	68fb      	ldr	r3, [r7, #12]
 8103c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8103c4e:	2b00      	cmp	r3, #0
 8103c50:	d014      	beq.n	8103c7c <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	691a      	ldr	r2, [r3, #16]
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103c60:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	2220      	movs	r2, #32
 8103c66:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	2200      	movs	r2, #0
 8103c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	2200      	movs	r2, #0
 8103c74:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8103c76:	6878      	ldr	r0, [r7, #4]
 8103c78:	f000 f83b 	bl	8103cf2 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8103c7c:	68fa      	ldr	r2, [r7, #12]
 8103c7e:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8103c82:	4013      	ands	r3, r2
 8103c84:	2b00      	cmp	r3, #0
 8103c86:	d030      	beq.n	8103cea <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	68fa      	ldr	r2, [r7, #12]
 8103c8c:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	681b      	ldr	r3, [r3, #0]
 8103c92:	691b      	ldr	r3, [r3, #16]
 8103c94:	687a      	ldr	r2, [r7, #4]
 8103c96:	6812      	ldr	r2, [r2, #0]
 8103c98:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 8103c9c:	f043 031c 	orr.w	r3, r3, #28
 8103ca0:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8103ca2:	68fb      	ldr	r3, [r7, #12]
 8103ca4:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8103ca8:	2b00      	cmp	r3, #0
 8103caa:	d00e      	beq.n	8103cca <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103cac:	687b      	ldr	r3, [r7, #4]
 8103cae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103cb4:	425b      	negs	r3, r3
 8103cb6:	441a      	add	r2, r3
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	2200      	movs	r2, #0
 8103cc0:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	2220      	movs	r2, #32
 8103cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8103cc8:	e00c      	b.n	8103ce4 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8103cca:	68fb      	ldr	r3, [r7, #12]
 8103ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103cd0:	2b00      	cmp	r3, #0
 8103cd2:	d107      	bne.n	8103ce4 <HAL_CEC_IRQHandler+0x1ac>
 8103cd4:	68fb      	ldr	r3, [r7, #12]
 8103cd6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	d002      	beq.n	8103ce4 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	2220      	movs	r2, #32
 8103ce2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8103ce4:	6878      	ldr	r0, [r7, #4]
 8103ce6:	f000 f819 	bl	8103d1c <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8103cea:	bf00      	nop
 8103cec:	3710      	adds	r7, #16
 8103cee:	46bd      	mov	sp, r7
 8103cf0:	bd80      	pop	{r7, pc}

08103cf2 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8103cf2:	b480      	push	{r7}
 8103cf4:	b083      	sub	sp, #12
 8103cf6:	af00      	add	r7, sp, #0
 8103cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8103cfa:	bf00      	nop
 8103cfc:	370c      	adds	r7, #12
 8103cfe:	46bd      	mov	sp, r7
 8103d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d04:	4770      	bx	lr

08103d06 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8103d06:	b480      	push	{r7}
 8103d08:	b083      	sub	sp, #12
 8103d0a:	af00      	add	r7, sp, #0
 8103d0c:	6078      	str	r0, [r7, #4]
 8103d0e:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8103d10:	bf00      	nop
 8103d12:	370c      	adds	r7, #12
 8103d14:	46bd      	mov	sp, r7
 8103d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d1a:	4770      	bx	lr

08103d1c <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8103d1c:	b480      	push	{r7}
 8103d1e:	b083      	sub	sp, #12
 8103d20:	af00      	add	r7, sp, #0
 8103d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8103d24:	bf00      	nop
 8103d26:	370c      	adds	r7, #12
 8103d28:	46bd      	mov	sp, r7
 8103d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d2e:	4770      	bx	lr

08103d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103d30:	b480      	push	{r7}
 8103d32:	b085      	sub	sp, #20
 8103d34:	af00      	add	r7, sp, #0
 8103d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	f003 0307 	and.w	r3, r3, #7
 8103d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103d40:	4b0c      	ldr	r3, [pc, #48]	@ (8103d74 <__NVIC_SetPriorityGrouping+0x44>)
 8103d42:	68db      	ldr	r3, [r3, #12]
 8103d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103d46:	68ba      	ldr	r2, [r7, #8]
 8103d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8103d4c:	4013      	ands	r3, r2
 8103d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103d50:	68fb      	ldr	r3, [r7, #12]
 8103d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103d54:	68bb      	ldr	r3, [r7, #8]
 8103d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8103d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103d62:	4a04      	ldr	r2, [pc, #16]	@ (8103d74 <__NVIC_SetPriorityGrouping+0x44>)
 8103d64:	68bb      	ldr	r3, [r7, #8]
 8103d66:	60d3      	str	r3, [r2, #12]
}
 8103d68:	bf00      	nop
 8103d6a:	3714      	adds	r7, #20
 8103d6c:	46bd      	mov	sp, r7
 8103d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d72:	4770      	bx	lr
 8103d74:	e000ed00 	.word	0xe000ed00

08103d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103d78:	b480      	push	{r7}
 8103d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103d7c:	4b04      	ldr	r3, [pc, #16]	@ (8103d90 <__NVIC_GetPriorityGrouping+0x18>)
 8103d7e:	68db      	ldr	r3, [r3, #12]
 8103d80:	0a1b      	lsrs	r3, r3, #8
 8103d82:	f003 0307 	and.w	r3, r3, #7
}
 8103d86:	4618      	mov	r0, r3
 8103d88:	46bd      	mov	sp, r7
 8103d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d8e:	4770      	bx	lr
 8103d90:	e000ed00 	.word	0xe000ed00

08103d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103d94:	b480      	push	{r7}
 8103d96:	b083      	sub	sp, #12
 8103d98:	af00      	add	r7, sp, #0
 8103d9a:	4603      	mov	r3, r0
 8103d9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103da2:	2b00      	cmp	r3, #0
 8103da4:	db0b      	blt.n	8103dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103da6:	88fb      	ldrh	r3, [r7, #6]
 8103da8:	f003 021f 	and.w	r2, r3, #31
 8103dac:	4907      	ldr	r1, [pc, #28]	@ (8103dcc <__NVIC_EnableIRQ+0x38>)
 8103dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103db2:	095b      	lsrs	r3, r3, #5
 8103db4:	2001      	movs	r0, #1
 8103db6:	fa00 f202 	lsl.w	r2, r0, r2
 8103dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103dbe:	bf00      	nop
 8103dc0:	370c      	adds	r7, #12
 8103dc2:	46bd      	mov	sp, r7
 8103dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dc8:	4770      	bx	lr
 8103dca:	bf00      	nop
 8103dcc:	e000e100 	.word	0xe000e100

08103dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103dd0:	b480      	push	{r7}
 8103dd2:	b083      	sub	sp, #12
 8103dd4:	af00      	add	r7, sp, #0
 8103dd6:	4603      	mov	r3, r0
 8103dd8:	6039      	str	r1, [r7, #0]
 8103dda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103de0:	2b00      	cmp	r3, #0
 8103de2:	db0a      	blt.n	8103dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103de4:	683b      	ldr	r3, [r7, #0]
 8103de6:	b2da      	uxtb	r2, r3
 8103de8:	490c      	ldr	r1, [pc, #48]	@ (8103e1c <__NVIC_SetPriority+0x4c>)
 8103dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103dee:	0112      	lsls	r2, r2, #4
 8103df0:	b2d2      	uxtb	r2, r2
 8103df2:	440b      	add	r3, r1
 8103df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103df8:	e00a      	b.n	8103e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103dfa:	683b      	ldr	r3, [r7, #0]
 8103dfc:	b2da      	uxtb	r2, r3
 8103dfe:	4908      	ldr	r1, [pc, #32]	@ (8103e20 <__NVIC_SetPriority+0x50>)
 8103e00:	88fb      	ldrh	r3, [r7, #6]
 8103e02:	f003 030f 	and.w	r3, r3, #15
 8103e06:	3b04      	subs	r3, #4
 8103e08:	0112      	lsls	r2, r2, #4
 8103e0a:	b2d2      	uxtb	r2, r2
 8103e0c:	440b      	add	r3, r1
 8103e0e:	761a      	strb	r2, [r3, #24]
}
 8103e10:	bf00      	nop
 8103e12:	370c      	adds	r7, #12
 8103e14:	46bd      	mov	sp, r7
 8103e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e1a:	4770      	bx	lr
 8103e1c:	e000e100 	.word	0xe000e100
 8103e20:	e000ed00 	.word	0xe000ed00

08103e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103e24:	b480      	push	{r7}
 8103e26:	b089      	sub	sp, #36	@ 0x24
 8103e28:	af00      	add	r7, sp, #0
 8103e2a:	60f8      	str	r0, [r7, #12]
 8103e2c:	60b9      	str	r1, [r7, #8]
 8103e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103e30:	68fb      	ldr	r3, [r7, #12]
 8103e32:	f003 0307 	and.w	r3, r3, #7
 8103e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103e38:	69fb      	ldr	r3, [r7, #28]
 8103e3a:	f1c3 0307 	rsb	r3, r3, #7
 8103e3e:	2b04      	cmp	r3, #4
 8103e40:	bf28      	it	cs
 8103e42:	2304      	movcs	r3, #4
 8103e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103e46:	69fb      	ldr	r3, [r7, #28]
 8103e48:	3304      	adds	r3, #4
 8103e4a:	2b06      	cmp	r3, #6
 8103e4c:	d902      	bls.n	8103e54 <NVIC_EncodePriority+0x30>
 8103e4e:	69fb      	ldr	r3, [r7, #28]
 8103e50:	3b03      	subs	r3, #3
 8103e52:	e000      	b.n	8103e56 <NVIC_EncodePriority+0x32>
 8103e54:	2300      	movs	r3, #0
 8103e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103e58:	f04f 32ff 	mov.w	r2, #4294967295
 8103e5c:	69bb      	ldr	r3, [r7, #24]
 8103e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8103e62:	43da      	mvns	r2, r3
 8103e64:	68bb      	ldr	r3, [r7, #8]
 8103e66:	401a      	ands	r2, r3
 8103e68:	697b      	ldr	r3, [r7, #20]
 8103e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8103e70:	697b      	ldr	r3, [r7, #20]
 8103e72:	fa01 f303 	lsl.w	r3, r1, r3
 8103e76:	43d9      	mvns	r1, r3
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103e7c:	4313      	orrs	r3, r2
         );
}
 8103e7e:	4618      	mov	r0, r3
 8103e80:	3724      	adds	r7, #36	@ 0x24
 8103e82:	46bd      	mov	sp, r7
 8103e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e88:	4770      	bx	lr

08103e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103e8a:	b580      	push	{r7, lr}
 8103e8c:	b082      	sub	sp, #8
 8103e8e:	af00      	add	r7, sp, #0
 8103e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103e92:	6878      	ldr	r0, [r7, #4]
 8103e94:	f7ff ff4c 	bl	8103d30 <__NVIC_SetPriorityGrouping>
}
 8103e98:	bf00      	nop
 8103e9a:	3708      	adds	r7, #8
 8103e9c:	46bd      	mov	sp, r7
 8103e9e:	bd80      	pop	{r7, pc}

08103ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103ea0:	b580      	push	{r7, lr}
 8103ea2:	b086      	sub	sp, #24
 8103ea4:	af00      	add	r7, sp, #0
 8103ea6:	4603      	mov	r3, r0
 8103ea8:	60b9      	str	r1, [r7, #8]
 8103eaa:	607a      	str	r2, [r7, #4]
 8103eac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103eae:	f7ff ff63 	bl	8103d78 <__NVIC_GetPriorityGrouping>
 8103eb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103eb4:	687a      	ldr	r2, [r7, #4]
 8103eb6:	68b9      	ldr	r1, [r7, #8]
 8103eb8:	6978      	ldr	r0, [r7, #20]
 8103eba:	f7ff ffb3 	bl	8103e24 <NVIC_EncodePriority>
 8103ebe:	4602      	mov	r2, r0
 8103ec0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103ec4:	4611      	mov	r1, r2
 8103ec6:	4618      	mov	r0, r3
 8103ec8:	f7ff ff82 	bl	8103dd0 <__NVIC_SetPriority>
}
 8103ecc:	bf00      	nop
 8103ece:	3718      	adds	r7, #24
 8103ed0:	46bd      	mov	sp, r7
 8103ed2:	bd80      	pop	{r7, pc}

08103ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103ed4:	b580      	push	{r7, lr}
 8103ed6:	b082      	sub	sp, #8
 8103ed8:	af00      	add	r7, sp, #0
 8103eda:	4603      	mov	r3, r0
 8103edc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103ee2:	4618      	mov	r0, r3
 8103ee4:	f7ff ff56 	bl	8103d94 <__NVIC_EnableIRQ>
}
 8103ee8:	bf00      	nop
 8103eea:	3708      	adds	r7, #8
 8103eec:	46bd      	mov	sp, r7
 8103eee:	bd80      	pop	{r7, pc}

08103ef0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103ef0:	b480      	push	{r7}
 8103ef2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103ef4:	4b06      	ldr	r3, [pc, #24]	@ (8103f10 <HAL_GetCurrentCPUID+0x20>)
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8103efc:	2b70      	cmp	r3, #112	@ 0x70
 8103efe:	d101      	bne.n	8103f04 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8103f00:	2303      	movs	r3, #3
 8103f02:	e000      	b.n	8103f06 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8103f04:	2301      	movs	r3, #1
  }
}
 8103f06:	4618      	mov	r0, r3
 8103f08:	46bd      	mov	sp, r7
 8103f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f0e:	4770      	bx	lr
 8103f10:	e000ed00 	.word	0xe000ed00

08103f14 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8103f14:	b580      	push	{r7, lr}
 8103f16:	b084      	sub	sp, #16
 8103f18:	af00      	add	r7, sp, #0
 8103f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	2b00      	cmp	r3, #0
 8103f20:	d101      	bne.n	8103f26 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8103f22:	2301      	movs	r3, #1
 8103f24:	e0e7      	b.n	81040f6 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103f2c:	2b00      	cmp	r3, #0
 8103f2e:	d106      	bne.n	8103f3e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	2220      	movs	r2, #32
 8103f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8103f38:	6878      	ldr	r0, [r7, #4]
 8103f3a:	f7fd fadd 	bl	81014f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103f3e:	4b70      	ldr	r3, [pc, #448]	@ (8104100 <HAL_ETH_Init+0x1ec>)
 8103f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103f44:	4a6e      	ldr	r2, [pc, #440]	@ (8104100 <HAL_ETH_Init+0x1ec>)
 8103f46:	f043 0302 	orr.w	r3, r3, #2
 8103f4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103f4e:	4b6c      	ldr	r3, [pc, #432]	@ (8104100 <HAL_ETH_Init+0x1ec>)
 8103f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103f54:	f003 0302 	and.w	r3, r3, #2
 8103f58:	60bb      	str	r3, [r7, #8]
 8103f5a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	7a1b      	ldrb	r3, [r3, #8]
 8103f60:	2b00      	cmp	r3, #0
 8103f62:	d103      	bne.n	8103f6c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8103f64:	2000      	movs	r0, #0
 8103f66:	f7fe fcf7 	bl	8102958 <HAL_SYSCFG_ETHInterfaceSelect>
 8103f6a:	e003      	b.n	8103f74 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8103f6c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8103f70:	f7fe fcf2 	bl	8102958 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8103f74:	4b63      	ldr	r3, [pc, #396]	@ (8104104 <HAL_ETH_Init+0x1f0>)
 8103f76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	687a      	ldr	r2, [r7, #4]
 8103f84:	6812      	ldr	r2, [r2, #0]
 8103f86:	f043 0301 	orr.w	r3, r3, #1
 8103f8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8103f8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8103f90:	f7fe fca6 	bl	81028e0 <HAL_GetTick>
 8103f94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8103f96:	e011      	b.n	8103fbc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8103f98:	f7fe fca2 	bl	81028e0 <HAL_GetTick>
 8103f9c:	4602      	mov	r2, r0
 8103f9e:	68fb      	ldr	r3, [r7, #12]
 8103fa0:	1ad3      	subs	r3, r2, r3
 8103fa2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8103fa6:	d909      	bls.n	8103fbc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	2204      	movs	r2, #4
 8103fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8103fb0:	687b      	ldr	r3, [r7, #4]
 8103fb2:	22e0      	movs	r2, #224	@ 0xe0
 8103fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8103fb8:	2301      	movs	r3, #1
 8103fba:	e09c      	b.n	81040f6 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	f003 0301 	and.w	r3, r3, #1
 8103fca:	2b00      	cmp	r3, #0
 8103fcc:	d1e4      	bne.n	8103f98 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8103fce:	6878      	ldr	r0, [r7, #4]
 8103fd0:	f000 f89e 	bl	8104110 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8103fd4:	f001 f9aa 	bl	810532c <HAL_RCC_GetHCLKFreq>
 8103fd8:	4603      	mov	r3, r0
 8103fda:	4a4b      	ldr	r2, [pc, #300]	@ (8104108 <HAL_ETH_Init+0x1f4>)
 8103fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8103fe0:	0c9a      	lsrs	r2, r3, #18
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	3a01      	subs	r2, #1
 8103fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8103fec:	6878      	ldr	r0, [r7, #4]
 8103fee:	f000 fa81 	bl	81044f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8103ffa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8103ffe:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8104002:	687a      	ldr	r2, [r7, #4]
 8104004:	6812      	ldr	r2, [r2, #0]
 8104006:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810400a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810400e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	695b      	ldr	r3, [r3, #20]
 8104016:	f003 0303 	and.w	r3, r3, #3
 810401a:	2b00      	cmp	r3, #0
 810401c:	d009      	beq.n	8104032 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	2201      	movs	r2, #1
 8104022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	22e0      	movs	r2, #224	@ 0xe0
 810402a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810402e:	2301      	movs	r3, #1
 8104030:	e061      	b.n	81040f6 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	681b      	ldr	r3, [r3, #0]
 8104036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810403a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810403e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8104042:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8104046:	687a      	ldr	r2, [r7, #4]
 8104048:	6952      	ldr	r2, [r2, #20]
 810404a:	0051      	lsls	r1, r2, #1
 810404c:	687a      	ldr	r2, [r7, #4]
 810404e:	6812      	ldr	r2, [r2, #0]
 8104050:	430b      	orrs	r3, r1
 8104052:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104056:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 810405a:	6878      	ldr	r0, [r7, #4]
 810405c:	f000 fae7 	bl	810462e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8104060:	6878      	ldr	r0, [r7, #4]
 8104062:	f000 fb2d 	bl	81046c0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8104066:	687b      	ldr	r3, [r7, #4]
 8104068:	685b      	ldr	r3, [r3, #4]
 810406a:	3305      	adds	r3, #5
 810406c:	781b      	ldrb	r3, [r3, #0]
 810406e:	021a      	lsls	r2, r3, #8
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	685b      	ldr	r3, [r3, #4]
 8104074:	3304      	adds	r3, #4
 8104076:	781b      	ldrb	r3, [r3, #0]
 8104078:	4619      	mov	r1, r3
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	681b      	ldr	r3, [r3, #0]
 810407e:	430a      	orrs	r2, r1
 8104080:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	685b      	ldr	r3, [r3, #4]
 8104088:	3303      	adds	r3, #3
 810408a:	781b      	ldrb	r3, [r3, #0]
 810408c:	061a      	lsls	r2, r3, #24
 810408e:	687b      	ldr	r3, [r7, #4]
 8104090:	685b      	ldr	r3, [r3, #4]
 8104092:	3302      	adds	r3, #2
 8104094:	781b      	ldrb	r3, [r3, #0]
 8104096:	041b      	lsls	r3, r3, #16
 8104098:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	685b      	ldr	r3, [r3, #4]
 810409e:	3301      	adds	r3, #1
 81040a0:	781b      	ldrb	r3, [r3, #0]
 81040a2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81040a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	685b      	ldr	r3, [r3, #4]
 81040aa:	781b      	ldrb	r3, [r3, #0]
 81040ac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81040b2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81040b4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	681b      	ldr	r3, [r3, #0]
 81040bc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	681a      	ldr	r2, [r3, #0]
 81040c4:	4b11      	ldr	r3, [pc, #68]	@ (810410c <HAL_ETH_Init+0x1f8>)
 81040c6:	430b      	orrs	r3, r1
 81040c8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 81040cc:	687b      	ldr	r3, [r7, #4]
 81040ce:	681b      	ldr	r3, [r3, #0]
 81040d0:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 81040d4:	687a      	ldr	r2, [r7, #4]
 81040d6:	6812      	ldr	r2, [r2, #0]
 81040d8:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 81040dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 81040e0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81040e4:	687b      	ldr	r3, [r7, #4]
 81040e6:	2200      	movs	r2, #0
 81040e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	2210      	movs	r2, #16
 81040f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81040f4:	2300      	movs	r3, #0
}
 81040f6:	4618      	mov	r0, r3
 81040f8:	3710      	adds	r7, #16
 81040fa:	46bd      	mov	sp, r7
 81040fc:	bd80      	pop	{r7, pc}
 81040fe:	bf00      	nop
 8104100:	58024400 	.word	0x58024400
 8104104:	58000400 	.word	0x58000400
 8104108:	431bde83 	.word	0x431bde83
 810410c:	0c020060 	.word	0x0c020060

08104110 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8104110:	b580      	push	{r7, lr}
 8104112:	b084      	sub	sp, #16
 8104114:	af00      	add	r7, sp, #0
 8104116:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	681b      	ldr	r3, [r3, #0]
 810411c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8104120:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8104122:	68fb      	ldr	r3, [r7, #12]
 8104124:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104128:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 810412a:	f001 f8ff 	bl	810532c <HAL_RCC_GetHCLKFreq>
 810412e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8104130:	68bb      	ldr	r3, [r7, #8]
 8104132:	4a1a      	ldr	r2, [pc, #104]	@ (810419c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8104134:	4293      	cmp	r3, r2
 8104136:	d804      	bhi.n	8104142 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8104138:	68fb      	ldr	r3, [r7, #12]
 810413a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810413e:	60fb      	str	r3, [r7, #12]
 8104140:	e022      	b.n	8104188 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8104142:	68bb      	ldr	r3, [r7, #8]
 8104144:	4a16      	ldr	r2, [pc, #88]	@ (81041a0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8104146:	4293      	cmp	r3, r2
 8104148:	d204      	bcs.n	8104154 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 810414a:	68fb      	ldr	r3, [r7, #12]
 810414c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8104150:	60fb      	str	r3, [r7, #12]
 8104152:	e019      	b.n	8104188 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8104154:	68bb      	ldr	r3, [r7, #8]
 8104156:	4a13      	ldr	r2, [pc, #76]	@ (81041a4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8104158:	4293      	cmp	r3, r2
 810415a:	d915      	bls.n	8104188 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 810415c:	68bb      	ldr	r3, [r7, #8]
 810415e:	4a12      	ldr	r2, [pc, #72]	@ (81041a8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8104160:	4293      	cmp	r3, r2
 8104162:	d804      	bhi.n	810416e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8104164:	68fb      	ldr	r3, [r7, #12]
 8104166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810416a:	60fb      	str	r3, [r7, #12]
 810416c:	e00c      	b.n	8104188 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 810416e:	68bb      	ldr	r3, [r7, #8]
 8104170:	4a0e      	ldr	r2, [pc, #56]	@ (81041ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8104172:	4293      	cmp	r3, r2
 8104174:	d804      	bhi.n	8104180 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8104176:	68fb      	ldr	r3, [r7, #12]
 8104178:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810417c:	60fb      	str	r3, [r7, #12]
 810417e:	e003      	b.n	8104188 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8104180:	68fb      	ldr	r3, [r7, #12]
 8104182:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8104186:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8104188:	687b      	ldr	r3, [r7, #4]
 810418a:	681b      	ldr	r3, [r3, #0]
 810418c:	68fa      	ldr	r2, [r7, #12]
 810418e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8104192:	bf00      	nop
 8104194:	3710      	adds	r7, #16
 8104196:	46bd      	mov	sp, r7
 8104198:	bd80      	pop	{r7, pc}
 810419a:	bf00      	nop
 810419c:	02160ebf 	.word	0x02160ebf
 81041a0:	03938700 	.word	0x03938700
 81041a4:	05f5e0ff 	.word	0x05f5e0ff
 81041a8:	08f0d17f 	.word	0x08f0d17f
 81041ac:	0ee6b27f 	.word	0x0ee6b27f

081041b0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 81041b0:	b480      	push	{r7}
 81041b2:	b085      	sub	sp, #20
 81041b4:	af00      	add	r7, sp, #0
 81041b6:	6078      	str	r0, [r7, #4]
 81041b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 81041ba:	683b      	ldr	r3, [r7, #0]
 81041bc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 81041be:	683b      	ldr	r3, [r7, #0]
 81041c0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 81041c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81041c4:	683b      	ldr	r3, [r7, #0]
 81041c6:	791b      	ldrb	r3, [r3, #4]
 81041c8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 81041ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81041cc:	683b      	ldr	r3, [r7, #0]
 81041ce:	7b1b      	ldrb	r3, [r3, #12]
 81041d0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81041d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81041d4:	683b      	ldr	r3, [r7, #0]
 81041d6:	7b5b      	ldrb	r3, [r3, #13]
 81041d8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81041da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81041dc:	683b      	ldr	r3, [r7, #0]
 81041de:	7b9b      	ldrb	r3, [r3, #14]
 81041e0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81041e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81041e4:	683b      	ldr	r3, [r7, #0]
 81041e6:	7bdb      	ldrb	r3, [r3, #15]
 81041e8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81041ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81041ec:	683a      	ldr	r2, [r7, #0]
 81041ee:	7c12      	ldrb	r2, [r2, #16]
 81041f0:	2a00      	cmp	r2, #0
 81041f2:	d102      	bne.n	81041fa <ETH_SetMACConfig+0x4a>
 81041f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 81041f8:	e000      	b.n	81041fc <ETH_SetMACConfig+0x4c>
 81041fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81041fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81041fe:	683a      	ldr	r2, [r7, #0]
 8104200:	7c52      	ldrb	r2, [r2, #17]
 8104202:	2a00      	cmp	r2, #0
 8104204:	d102      	bne.n	810420c <ETH_SetMACConfig+0x5c>
 8104206:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 810420a:	e000      	b.n	810420e <ETH_SetMACConfig+0x5e>
 810420c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810420e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8104210:	683b      	ldr	r3, [r7, #0]
 8104212:	7c9b      	ldrb	r3, [r3, #18]
 8104214:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8104216:	431a      	orrs	r2, r3
               macconf->Speed |
 8104218:	683b      	ldr	r3, [r7, #0]
 810421a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 810421c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810421e:	683b      	ldr	r3, [r7, #0]
 8104220:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8104222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8104224:	683b      	ldr	r3, [r7, #0]
 8104226:	7f1b      	ldrb	r3, [r3, #28]
 8104228:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 810422a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810422c:	683b      	ldr	r3, [r7, #0]
 810422e:	7f5b      	ldrb	r3, [r3, #29]
 8104230:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8104232:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8104234:	683a      	ldr	r2, [r7, #0]
 8104236:	7f92      	ldrb	r2, [r2, #30]
 8104238:	2a00      	cmp	r2, #0
 810423a:	d102      	bne.n	8104242 <ETH_SetMACConfig+0x92>
 810423c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8104240:	e000      	b.n	8104244 <ETH_SetMACConfig+0x94>
 8104242:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8104244:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8104246:	683b      	ldr	r3, [r7, #0]
 8104248:	7fdb      	ldrb	r3, [r3, #31]
 810424a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810424c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810424e:	683a      	ldr	r2, [r7, #0]
 8104250:	f892 2020 	ldrb.w	r2, [r2, #32]
 8104254:	2a00      	cmp	r2, #0
 8104256:	d102      	bne.n	810425e <ETH_SetMACConfig+0xae>
 8104258:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810425c:	e000      	b.n	8104260 <ETH_SetMACConfig+0xb0>
 810425e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8104260:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8104262:	683b      	ldr	r3, [r7, #0]
 8104264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8104266:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8104268:	683b      	ldr	r3, [r7, #0]
 810426a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810426e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8104270:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8104272:	683b      	ldr	r3, [r7, #0]
 8104274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8104276:	4313      	orrs	r3, r2
 8104278:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	681b      	ldr	r3, [r3, #0]
 810427e:	681a      	ldr	r2, [r3, #0]
 8104280:	4b57      	ldr	r3, [pc, #348]	@ (81043e0 <ETH_SetMACConfig+0x230>)
 8104282:	4013      	ands	r3, r2
 8104284:	687a      	ldr	r2, [r7, #4]
 8104286:	6812      	ldr	r2, [r2, #0]
 8104288:	68f9      	ldr	r1, [r7, #12]
 810428a:	430b      	orrs	r3, r1
 810428c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810428e:	683b      	ldr	r3, [r7, #0]
 8104290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104292:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8104294:	683b      	ldr	r3, [r7, #0]
 8104296:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810429a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810429c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810429e:	683b      	ldr	r3, [r7, #0]
 81042a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81042a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81042a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81042a8:	683b      	ldr	r3, [r7, #0]
 81042aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 81042ae:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81042b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 81042b2:	683a      	ldr	r2, [r7, #0]
 81042b4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 81042b8:	2a00      	cmp	r2, #0
 81042ba:	d102      	bne.n	81042c2 <ETH_SetMACConfig+0x112>
 81042bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 81042c0:	e000      	b.n	81042c4 <ETH_SetMACConfig+0x114>
 81042c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81042c4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 81042c6:	683b      	ldr	r3, [r7, #0]
 81042c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81042ca:	4313      	orrs	r3, r2
 81042cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	685a      	ldr	r2, [r3, #4]
 81042d4:	4b43      	ldr	r3, [pc, #268]	@ (81043e4 <ETH_SetMACConfig+0x234>)
 81042d6:	4013      	ands	r3, r2
 81042d8:	687a      	ldr	r2, [r7, #4]
 81042da:	6812      	ldr	r2, [r2, #0]
 81042dc:	68f9      	ldr	r1, [r7, #12]
 81042de:	430b      	orrs	r3, r1
 81042e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81042e2:	683b      	ldr	r3, [r7, #0]
 81042e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81042e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81042ea:	683b      	ldr	r3, [r7, #0]
 81042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81042ee:	4313      	orrs	r3, r2
 81042f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	68db      	ldr	r3, [r3, #12]
 81042f8:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 81042fc:	f023 0301 	bic.w	r3, r3, #1
 8104300:	687a      	ldr	r2, [r7, #4]
 8104302:	6812      	ldr	r2, [r2, #0]
 8104304:	68f9      	ldr	r1, [r7, #12]
 8104306:	430b      	orrs	r3, r1
 8104308:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810430a:	683b      	ldr	r3, [r7, #0]
 810430c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8104310:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8104312:	683b      	ldr	r3, [r7, #0]
 8104314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104316:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8104318:	683a      	ldr	r2, [r7, #0]
 810431a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 810431e:	2a00      	cmp	r2, #0
 8104320:	d101      	bne.n	8104326 <ETH_SetMACConfig+0x176>
 8104322:	2280      	movs	r2, #128	@ 0x80
 8104324:	e000      	b.n	8104328 <ETH_SetMACConfig+0x178>
 8104326:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8104328:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 810432a:	683b      	ldr	r3, [r7, #0]
 810432c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810432e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104330:	4313      	orrs	r3, r2
 8104332:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810433a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810433e:	4013      	ands	r3, r2
 8104340:	687a      	ldr	r2, [r7, #4]
 8104342:	6812      	ldr	r2, [r2, #0]
 8104344:	68f9      	ldr	r1, [r7, #12]
 8104346:	430b      	orrs	r3, r1
 8104348:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810434a:	683b      	ldr	r3, [r7, #0]
 810434c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8104350:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8104352:	683b      	ldr	r3, [r7, #0]
 8104354:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8104358:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810435a:	4313      	orrs	r3, r2
 810435c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104366:	f023 0103 	bic.w	r1, r3, #3
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	681b      	ldr	r3, [r3, #0]
 810436e:	68fa      	ldr	r2, [r7, #12]
 8104370:	430a      	orrs	r2, r1
 8104372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	681b      	ldr	r3, [r3, #0]
 810437a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810437e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8104382:	683b      	ldr	r3, [r7, #0]
 8104384:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	430a      	orrs	r2, r1
 810438c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8104390:	683b      	ldr	r3, [r7, #0]
 8104392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8104394:	683a      	ldr	r2, [r7, #0]
 8104396:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 810439a:	2a00      	cmp	r2, #0
 810439c:	d101      	bne.n	81043a2 <ETH_SetMACConfig+0x1f2>
 810439e:	2240      	movs	r2, #64	@ 0x40
 81043a0:	e000      	b.n	81043a4 <ETH_SetMACConfig+0x1f4>
 81043a2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 81043a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 81043a6:	683b      	ldr	r3, [r7, #0]
 81043a8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 81043ac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81043ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81043b0:	683b      	ldr	r3, [r7, #0]
 81043b2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 81043b6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 81043b8:	4313      	orrs	r3, r2
 81043ba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	681b      	ldr	r3, [r3, #0]
 81043c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81043c4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	681b      	ldr	r3, [r3, #0]
 81043cc:	68fa      	ldr	r2, [r7, #12]
 81043ce:	430a      	orrs	r2, r1
 81043d0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 81043d4:	bf00      	nop
 81043d6:	3714      	adds	r7, #20
 81043d8:	46bd      	mov	sp, r7
 81043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043de:	4770      	bx	lr
 81043e0:	00048083 	.word	0x00048083
 81043e4:	c0f88000 	.word	0xc0f88000

081043e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 81043e8:	b480      	push	{r7}
 81043ea:	b085      	sub	sp, #20
 81043ec:	af00      	add	r7, sp, #0
 81043ee:	6078      	str	r0, [r7, #4]
 81043f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81043fa:	681b      	ldr	r3, [r3, #0]
 81043fc:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8104400:	f023 0302 	bic.w	r3, r3, #2
 8104404:	683a      	ldr	r2, [r7, #0]
 8104406:	6811      	ldr	r1, [r2, #0]
 8104408:	687a      	ldr	r2, [r7, #4]
 810440a:	6812      	ldr	r2, [r2, #0]
 810440c:	430b      	orrs	r3, r1
 810440e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104412:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104414:	683b      	ldr	r3, [r7, #0]
 8104416:	791b      	ldrb	r3, [r3, #4]
 8104418:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 810441a:	683b      	ldr	r3, [r7, #0]
 810441c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810441e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8104420:	683b      	ldr	r3, [r7, #0]
 8104422:	7b1b      	ldrb	r3, [r3, #12]
 8104424:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104426:	4313      	orrs	r3, r2
 8104428:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104432:	685b      	ldr	r3, [r3, #4]
 8104434:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8104438:	f023 0301 	bic.w	r3, r3, #1
 810443c:	687a      	ldr	r2, [r7, #4]
 810443e:	6812      	ldr	r2, [r2, #0]
 8104440:	68f9      	ldr	r1, [r7, #12]
 8104442:	430b      	orrs	r3, r1
 8104444:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104448:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810444a:	683b      	ldr	r3, [r7, #0]
 810444c:	7b5b      	ldrb	r3, [r3, #13]
 810444e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8104450:	683b      	ldr	r3, [r7, #0]
 8104452:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8104454:	4313      	orrs	r3, r2
 8104456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104460:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8104464:	4b21      	ldr	r3, [pc, #132]	@ (81044ec <ETH_SetDMAConfig+0x104>)
 8104466:	4013      	ands	r3, r2
 8104468:	687a      	ldr	r2, [r7, #4]
 810446a:	6812      	ldr	r2, [r2, #0]
 810446c:	68f9      	ldr	r1, [r7, #12]
 810446e:	430b      	orrs	r3, r1
 8104470:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104474:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8104478:	683b      	ldr	r3, [r7, #0]
 810447a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 810447c:	683b      	ldr	r3, [r7, #0]
 810447e:	7d1b      	ldrb	r3, [r3, #20]
 8104480:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8104482:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8104484:	683b      	ldr	r3, [r7, #0]
 8104486:	7f5b      	ldrb	r3, [r3, #29]
 8104488:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 810448a:	4313      	orrs	r3, r2
 810448c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104496:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 810449a:	4b15      	ldr	r3, [pc, #84]	@ (81044f0 <ETH_SetDMAConfig+0x108>)
 810449c:	4013      	ands	r3, r2
 810449e:	687a      	ldr	r2, [r7, #4]
 81044a0:	6812      	ldr	r2, [r2, #0]
 81044a2:	68f9      	ldr	r1, [r7, #12]
 81044a4:	430b      	orrs	r3, r1
 81044a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81044aa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81044ae:	683b      	ldr	r3, [r7, #0]
 81044b0:	7f1b      	ldrb	r3, [r3, #28]
 81044b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 81044b4:	683b      	ldr	r3, [r7, #0]
 81044b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81044b8:	4313      	orrs	r3, r2
 81044ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81044c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 81044c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81044cc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 81044d0:	687a      	ldr	r2, [r7, #4]
 81044d2:	6812      	ldr	r2, [r2, #0]
 81044d4:	68f9      	ldr	r1, [r7, #12]
 81044d6:	430b      	orrs	r3, r1
 81044d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81044dc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 81044e0:	bf00      	nop
 81044e2:	3714      	adds	r7, #20
 81044e4:	46bd      	mov	sp, r7
 81044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ea:	4770      	bx	lr
 81044ec:	fffec000 	.word	0xfffec000
 81044f0:	ffc0efef 	.word	0xffc0efef

081044f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 81044f4:	b580      	push	{r7, lr}
 81044f6:	b0a4      	sub	sp, #144	@ 0x90
 81044f8:	af00      	add	r7, sp, #0
 81044fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 81044fc:	2301      	movs	r3, #1
 81044fe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8104502:	2300      	movs	r3, #0
 8104504:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8104506:	2300      	movs	r3, #0
 8104508:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 810450c:	2300      	movs	r3, #0
 810450e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8104512:	2301      	movs	r3, #1
 8104514:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8104518:	2301      	movs	r3, #1
 810451a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810451e:	2301      	movs	r3, #1
 8104520:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8104524:	2300      	movs	r3, #0
 8104526:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 810452a:	2301      	movs	r3, #1
 810452c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8104530:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104534:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8104536:	2300      	movs	r3, #0
 8104538:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 810453c:	2300      	movs	r3, #0
 810453e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8104540:	2300      	movs	r3, #0
 8104542:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8104546:	2300      	movs	r3, #0
 8104548:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 810454c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8104550:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8104552:	2300      	movs	r3, #0
 8104554:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8104558:	2300      	movs	r3, #0
 810455a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 810455c:	2301      	movs	r3, #1
 810455e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8104562:	2300      	movs	r3, #0
 8104564:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8104568:	2300      	movs	r3, #0
 810456a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810456e:	2300      	movs	r3, #0
 8104570:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8104572:	2300      	movs	r3, #0
 8104574:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8104576:	2300      	movs	r3, #0
 8104578:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810457a:	2300      	movs	r3, #0
 810457c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8104580:	2300      	movs	r3, #0
 8104582:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8104586:	2301      	movs	r3, #1
 8104588:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 810458c:	2320      	movs	r3, #32
 810458e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8104592:	2301      	movs	r3, #1
 8104594:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8104598:	2300      	movs	r3, #0
 810459a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810459e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 81045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81045a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81045a8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81045aa:	2300      	movs	r3, #0
 81045ac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81045b0:	2302      	movs	r3, #2
 81045b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 81045b6:	2300      	movs	r3, #0
 81045b8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 81045bc:	2300      	movs	r3, #0
 81045be:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81045c2:	2300      	movs	r3, #0
 81045c4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 81045c8:	2301      	movs	r3, #1
 81045ca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 81045ce:	2300      	movs	r3, #0
 81045d0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 81045d2:	2301      	movs	r3, #1
 81045d4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 81045d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81045dc:	4619      	mov	r1, r3
 81045de:	6878      	ldr	r0, [r7, #4]
 81045e0:	f7ff fde6 	bl	81041b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 81045e4:	2301      	movs	r3, #1
 81045e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 81045e8:	2301      	movs	r3, #1
 81045ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 81045ec:	2300      	movs	r3, #0
 81045ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 81045f0:	2300      	movs	r3, #0
 81045f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 81045f6:	2300      	movs	r3, #0
 81045f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 81045fa:	2300      	movs	r3, #0
 81045fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 81045fe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8104602:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8104604:	2300      	movs	r3, #0
 8104606:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8104608:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810460c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810460e:	2300      	movs	r3, #0
 8104610:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8104614:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8104618:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 810461a:	f107 0308 	add.w	r3, r7, #8
 810461e:	4619      	mov	r1, r3
 8104620:	6878      	ldr	r0, [r7, #4]
 8104622:	f7ff fee1 	bl	81043e8 <ETH_SetDMAConfig>
}
 8104626:	bf00      	nop
 8104628:	3790      	adds	r7, #144	@ 0x90
 810462a:	46bd      	mov	sp, r7
 810462c:	bd80      	pop	{r7, pc}

0810462e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810462e:	b480      	push	{r7}
 8104630:	b085      	sub	sp, #20
 8104632:	af00      	add	r7, sp, #0
 8104634:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104636:	2300      	movs	r3, #0
 8104638:	60fb      	str	r3, [r7, #12]
 810463a:	e01d      	b.n	8104678 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	68d9      	ldr	r1, [r3, #12]
 8104640:	68fa      	ldr	r2, [r7, #12]
 8104642:	4613      	mov	r3, r2
 8104644:	005b      	lsls	r3, r3, #1
 8104646:	4413      	add	r3, r2
 8104648:	00db      	lsls	r3, r3, #3
 810464a:	440b      	add	r3, r1
 810464c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 810464e:	68bb      	ldr	r3, [r7, #8]
 8104650:	2200      	movs	r2, #0
 8104652:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8104654:	68bb      	ldr	r3, [r7, #8]
 8104656:	2200      	movs	r2, #0
 8104658:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 810465a:	68bb      	ldr	r3, [r7, #8]
 810465c:	2200      	movs	r2, #0
 810465e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8104660:	68bb      	ldr	r3, [r7, #8]
 8104662:	2200      	movs	r2, #0
 8104664:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8104666:	68b9      	ldr	r1, [r7, #8]
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	68fa      	ldr	r2, [r7, #12]
 810466c:	3206      	adds	r2, #6
 810466e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104672:	68fb      	ldr	r3, [r7, #12]
 8104674:	3301      	adds	r3, #1
 8104676:	60fb      	str	r3, [r7, #12]
 8104678:	68fb      	ldr	r3, [r7, #12]
 810467a:	2b03      	cmp	r3, #3
 810467c:	d9de      	bls.n	810463c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	2200      	movs	r2, #0
 8104682:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8104684:	687b      	ldr	r3, [r7, #4]
 8104686:	681b      	ldr	r3, [r3, #0]
 8104688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810468c:	461a      	mov	r2, r3
 810468e:	2303      	movs	r3, #3
 8104690:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	68da      	ldr	r2, [r3, #12]
 8104698:	687b      	ldr	r3, [r7, #4]
 810469a:	681b      	ldr	r3, [r3, #0]
 810469c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81046a0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	68da      	ldr	r2, [r3, #12]
 81046a8:	687b      	ldr	r3, [r7, #4]
 81046aa:	681b      	ldr	r3, [r3, #0]
 81046ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81046b0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 81046b4:	bf00      	nop
 81046b6:	3714      	adds	r7, #20
 81046b8:	46bd      	mov	sp, r7
 81046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046be:	4770      	bx	lr

081046c0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81046c0:	b480      	push	{r7}
 81046c2:	b085      	sub	sp, #20
 81046c4:	af00      	add	r7, sp, #0
 81046c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81046c8:	2300      	movs	r3, #0
 81046ca:	60fb      	str	r3, [r7, #12]
 81046cc:	e023      	b.n	8104716 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	6919      	ldr	r1, [r3, #16]
 81046d2:	68fa      	ldr	r2, [r7, #12]
 81046d4:	4613      	mov	r3, r2
 81046d6:	005b      	lsls	r3, r3, #1
 81046d8:	4413      	add	r3, r2
 81046da:	00db      	lsls	r3, r3, #3
 81046dc:	440b      	add	r3, r1
 81046de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 81046e0:	68bb      	ldr	r3, [r7, #8]
 81046e2:	2200      	movs	r2, #0
 81046e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 81046e6:	68bb      	ldr	r3, [r7, #8]
 81046e8:	2200      	movs	r2, #0
 81046ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 81046ec:	68bb      	ldr	r3, [r7, #8]
 81046ee:	2200      	movs	r2, #0
 81046f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 81046f2:	68bb      	ldr	r3, [r7, #8]
 81046f4:	2200      	movs	r2, #0
 81046f6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 81046f8:	68bb      	ldr	r3, [r7, #8]
 81046fa:	2200      	movs	r2, #0
 81046fc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 81046fe:	68bb      	ldr	r3, [r7, #8]
 8104700:	2200      	movs	r2, #0
 8104702:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8104704:	68b9      	ldr	r1, [r7, #8]
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	68fa      	ldr	r2, [r7, #12]
 810470a:	3212      	adds	r2, #18
 810470c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8104710:	68fb      	ldr	r3, [r7, #12]
 8104712:	3301      	adds	r3, #1
 8104714:	60fb      	str	r3, [r7, #12]
 8104716:	68fb      	ldr	r3, [r7, #12]
 8104718:	2b03      	cmp	r3, #3
 810471a:	d9d8      	bls.n	81046ce <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	2200      	movs	r2, #0
 8104720:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	2200      	movs	r2, #0
 8104726:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8104728:	687b      	ldr	r3, [r7, #4]
 810472a:	2200      	movs	r2, #0
 810472c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	2200      	movs	r2, #0
 8104732:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8104734:	687b      	ldr	r3, [r7, #4]
 8104736:	2200      	movs	r2, #0
 8104738:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	681b      	ldr	r3, [r3, #0]
 810473e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104742:	461a      	mov	r2, r3
 8104744:	2303      	movs	r3, #3
 8104746:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	691a      	ldr	r2, [r3, #16]
 810474e:	687b      	ldr	r3, [r7, #4]
 8104750:	681b      	ldr	r3, [r3, #0]
 8104752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104756:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	691b      	ldr	r3, [r3, #16]
 810475e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8104762:	687b      	ldr	r3, [r7, #4]
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810476a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 810476e:	bf00      	nop
 8104770:	3714      	adds	r7, #20
 8104772:	46bd      	mov	sp, r7
 8104774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104778:	4770      	bx	lr
	...

0810477c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810477c:	b480      	push	{r7}
 810477e:	b089      	sub	sp, #36	@ 0x24
 8104780:	af00      	add	r7, sp, #0
 8104782:	6078      	str	r0, [r7, #4]
 8104784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104786:	2300      	movs	r3, #0
 8104788:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810478a:	4b89      	ldr	r3, [pc, #548]	@ (81049b0 <HAL_GPIO_Init+0x234>)
 810478c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810478e:	e194      	b.n	8104aba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104790:	683b      	ldr	r3, [r7, #0]
 8104792:	681a      	ldr	r2, [r3, #0]
 8104794:	2101      	movs	r1, #1
 8104796:	69fb      	ldr	r3, [r7, #28]
 8104798:	fa01 f303 	lsl.w	r3, r1, r3
 810479c:	4013      	ands	r3, r2
 810479e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81047a0:	693b      	ldr	r3, [r7, #16]
 81047a2:	2b00      	cmp	r3, #0
 81047a4:	f000 8186 	beq.w	8104ab4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81047a8:	683b      	ldr	r3, [r7, #0]
 81047aa:	685b      	ldr	r3, [r3, #4]
 81047ac:	f003 0303 	and.w	r3, r3, #3
 81047b0:	2b01      	cmp	r3, #1
 81047b2:	d005      	beq.n	81047c0 <HAL_GPIO_Init+0x44>
 81047b4:	683b      	ldr	r3, [r7, #0]
 81047b6:	685b      	ldr	r3, [r3, #4]
 81047b8:	f003 0303 	and.w	r3, r3, #3
 81047bc:	2b02      	cmp	r3, #2
 81047be:	d130      	bne.n	8104822 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81047c0:	687b      	ldr	r3, [r7, #4]
 81047c2:	689b      	ldr	r3, [r3, #8]
 81047c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81047c6:	69fb      	ldr	r3, [r7, #28]
 81047c8:	005b      	lsls	r3, r3, #1
 81047ca:	2203      	movs	r2, #3
 81047cc:	fa02 f303 	lsl.w	r3, r2, r3
 81047d0:	43db      	mvns	r3, r3
 81047d2:	69ba      	ldr	r2, [r7, #24]
 81047d4:	4013      	ands	r3, r2
 81047d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81047d8:	683b      	ldr	r3, [r7, #0]
 81047da:	68da      	ldr	r2, [r3, #12]
 81047dc:	69fb      	ldr	r3, [r7, #28]
 81047de:	005b      	lsls	r3, r3, #1
 81047e0:	fa02 f303 	lsl.w	r3, r2, r3
 81047e4:	69ba      	ldr	r2, [r7, #24]
 81047e6:	4313      	orrs	r3, r2
 81047e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	69ba      	ldr	r2, [r7, #24]
 81047ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	685b      	ldr	r3, [r3, #4]
 81047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81047f6:	2201      	movs	r2, #1
 81047f8:	69fb      	ldr	r3, [r7, #28]
 81047fa:	fa02 f303 	lsl.w	r3, r2, r3
 81047fe:	43db      	mvns	r3, r3
 8104800:	69ba      	ldr	r2, [r7, #24]
 8104802:	4013      	ands	r3, r2
 8104804:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104806:	683b      	ldr	r3, [r7, #0]
 8104808:	685b      	ldr	r3, [r3, #4]
 810480a:	091b      	lsrs	r3, r3, #4
 810480c:	f003 0201 	and.w	r2, r3, #1
 8104810:	69fb      	ldr	r3, [r7, #28]
 8104812:	fa02 f303 	lsl.w	r3, r2, r3
 8104816:	69ba      	ldr	r2, [r7, #24]
 8104818:	4313      	orrs	r3, r2
 810481a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	69ba      	ldr	r2, [r7, #24]
 8104820:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8104822:	683b      	ldr	r3, [r7, #0]
 8104824:	685b      	ldr	r3, [r3, #4]
 8104826:	f003 0303 	and.w	r3, r3, #3
 810482a:	2b03      	cmp	r3, #3
 810482c:	d017      	beq.n	810485e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	68db      	ldr	r3, [r3, #12]
 8104832:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104834:	69fb      	ldr	r3, [r7, #28]
 8104836:	005b      	lsls	r3, r3, #1
 8104838:	2203      	movs	r2, #3
 810483a:	fa02 f303 	lsl.w	r3, r2, r3
 810483e:	43db      	mvns	r3, r3
 8104840:	69ba      	ldr	r2, [r7, #24]
 8104842:	4013      	ands	r3, r2
 8104844:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104846:	683b      	ldr	r3, [r7, #0]
 8104848:	689a      	ldr	r2, [r3, #8]
 810484a:	69fb      	ldr	r3, [r7, #28]
 810484c:	005b      	lsls	r3, r3, #1
 810484e:	fa02 f303 	lsl.w	r3, r2, r3
 8104852:	69ba      	ldr	r2, [r7, #24]
 8104854:	4313      	orrs	r3, r2
 8104856:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	69ba      	ldr	r2, [r7, #24]
 810485c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810485e:	683b      	ldr	r3, [r7, #0]
 8104860:	685b      	ldr	r3, [r3, #4]
 8104862:	f003 0303 	and.w	r3, r3, #3
 8104866:	2b02      	cmp	r3, #2
 8104868:	d123      	bne.n	81048b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810486a:	69fb      	ldr	r3, [r7, #28]
 810486c:	08da      	lsrs	r2, r3, #3
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	3208      	adds	r2, #8
 8104872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104878:	69fb      	ldr	r3, [r7, #28]
 810487a:	f003 0307 	and.w	r3, r3, #7
 810487e:	009b      	lsls	r3, r3, #2
 8104880:	220f      	movs	r2, #15
 8104882:	fa02 f303 	lsl.w	r3, r2, r3
 8104886:	43db      	mvns	r3, r3
 8104888:	69ba      	ldr	r2, [r7, #24]
 810488a:	4013      	ands	r3, r2
 810488c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810488e:	683b      	ldr	r3, [r7, #0]
 8104890:	691a      	ldr	r2, [r3, #16]
 8104892:	69fb      	ldr	r3, [r7, #28]
 8104894:	f003 0307 	and.w	r3, r3, #7
 8104898:	009b      	lsls	r3, r3, #2
 810489a:	fa02 f303 	lsl.w	r3, r2, r3
 810489e:	69ba      	ldr	r2, [r7, #24]
 81048a0:	4313      	orrs	r3, r2
 81048a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81048a4:	69fb      	ldr	r3, [r7, #28]
 81048a6:	08da      	lsrs	r2, r3, #3
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	3208      	adds	r2, #8
 81048ac:	69b9      	ldr	r1, [r7, #24]
 81048ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	681b      	ldr	r3, [r3, #0]
 81048b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81048b8:	69fb      	ldr	r3, [r7, #28]
 81048ba:	005b      	lsls	r3, r3, #1
 81048bc:	2203      	movs	r2, #3
 81048be:	fa02 f303 	lsl.w	r3, r2, r3
 81048c2:	43db      	mvns	r3, r3
 81048c4:	69ba      	ldr	r2, [r7, #24]
 81048c6:	4013      	ands	r3, r2
 81048c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81048ca:	683b      	ldr	r3, [r7, #0]
 81048cc:	685b      	ldr	r3, [r3, #4]
 81048ce:	f003 0203 	and.w	r2, r3, #3
 81048d2:	69fb      	ldr	r3, [r7, #28]
 81048d4:	005b      	lsls	r3, r3, #1
 81048d6:	fa02 f303 	lsl.w	r3, r2, r3
 81048da:	69ba      	ldr	r2, [r7, #24]
 81048dc:	4313      	orrs	r3, r2
 81048de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	69ba      	ldr	r2, [r7, #24]
 81048e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81048e6:	683b      	ldr	r3, [r7, #0]
 81048e8:	685b      	ldr	r3, [r3, #4]
 81048ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81048ee:	2b00      	cmp	r3, #0
 81048f0:	f000 80e0 	beq.w	8104ab4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81048f4:	4b2f      	ldr	r3, [pc, #188]	@ (81049b4 <HAL_GPIO_Init+0x238>)
 81048f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81048fa:	4a2e      	ldr	r2, [pc, #184]	@ (81049b4 <HAL_GPIO_Init+0x238>)
 81048fc:	f043 0302 	orr.w	r3, r3, #2
 8104900:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8104904:	4b2b      	ldr	r3, [pc, #172]	@ (81049b4 <HAL_GPIO_Init+0x238>)
 8104906:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810490a:	f003 0302 	and.w	r3, r3, #2
 810490e:	60fb      	str	r3, [r7, #12]
 8104910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104912:	4a29      	ldr	r2, [pc, #164]	@ (81049b8 <HAL_GPIO_Init+0x23c>)
 8104914:	69fb      	ldr	r3, [r7, #28]
 8104916:	089b      	lsrs	r3, r3, #2
 8104918:	3302      	adds	r3, #2
 810491a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810491e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104920:	69fb      	ldr	r3, [r7, #28]
 8104922:	f003 0303 	and.w	r3, r3, #3
 8104926:	009b      	lsls	r3, r3, #2
 8104928:	220f      	movs	r2, #15
 810492a:	fa02 f303 	lsl.w	r3, r2, r3
 810492e:	43db      	mvns	r3, r3
 8104930:	69ba      	ldr	r2, [r7, #24]
 8104932:	4013      	ands	r3, r2
 8104934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	4a20      	ldr	r2, [pc, #128]	@ (81049bc <HAL_GPIO_Init+0x240>)
 810493a:	4293      	cmp	r3, r2
 810493c:	d052      	beq.n	81049e4 <HAL_GPIO_Init+0x268>
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	4a1f      	ldr	r2, [pc, #124]	@ (81049c0 <HAL_GPIO_Init+0x244>)
 8104942:	4293      	cmp	r3, r2
 8104944:	d031      	beq.n	81049aa <HAL_GPIO_Init+0x22e>
 8104946:	687b      	ldr	r3, [r7, #4]
 8104948:	4a1e      	ldr	r2, [pc, #120]	@ (81049c4 <HAL_GPIO_Init+0x248>)
 810494a:	4293      	cmp	r3, r2
 810494c:	d02b      	beq.n	81049a6 <HAL_GPIO_Init+0x22a>
 810494e:	687b      	ldr	r3, [r7, #4]
 8104950:	4a1d      	ldr	r2, [pc, #116]	@ (81049c8 <HAL_GPIO_Init+0x24c>)
 8104952:	4293      	cmp	r3, r2
 8104954:	d025      	beq.n	81049a2 <HAL_GPIO_Init+0x226>
 8104956:	687b      	ldr	r3, [r7, #4]
 8104958:	4a1c      	ldr	r2, [pc, #112]	@ (81049cc <HAL_GPIO_Init+0x250>)
 810495a:	4293      	cmp	r3, r2
 810495c:	d01f      	beq.n	810499e <HAL_GPIO_Init+0x222>
 810495e:	687b      	ldr	r3, [r7, #4]
 8104960:	4a1b      	ldr	r2, [pc, #108]	@ (81049d0 <HAL_GPIO_Init+0x254>)
 8104962:	4293      	cmp	r3, r2
 8104964:	d019      	beq.n	810499a <HAL_GPIO_Init+0x21e>
 8104966:	687b      	ldr	r3, [r7, #4]
 8104968:	4a1a      	ldr	r2, [pc, #104]	@ (81049d4 <HAL_GPIO_Init+0x258>)
 810496a:	4293      	cmp	r3, r2
 810496c:	d013      	beq.n	8104996 <HAL_GPIO_Init+0x21a>
 810496e:	687b      	ldr	r3, [r7, #4]
 8104970:	4a19      	ldr	r2, [pc, #100]	@ (81049d8 <HAL_GPIO_Init+0x25c>)
 8104972:	4293      	cmp	r3, r2
 8104974:	d00d      	beq.n	8104992 <HAL_GPIO_Init+0x216>
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	4a18      	ldr	r2, [pc, #96]	@ (81049dc <HAL_GPIO_Init+0x260>)
 810497a:	4293      	cmp	r3, r2
 810497c:	d007      	beq.n	810498e <HAL_GPIO_Init+0x212>
 810497e:	687b      	ldr	r3, [r7, #4]
 8104980:	4a17      	ldr	r2, [pc, #92]	@ (81049e0 <HAL_GPIO_Init+0x264>)
 8104982:	4293      	cmp	r3, r2
 8104984:	d101      	bne.n	810498a <HAL_GPIO_Init+0x20e>
 8104986:	2309      	movs	r3, #9
 8104988:	e02d      	b.n	81049e6 <HAL_GPIO_Init+0x26a>
 810498a:	230a      	movs	r3, #10
 810498c:	e02b      	b.n	81049e6 <HAL_GPIO_Init+0x26a>
 810498e:	2308      	movs	r3, #8
 8104990:	e029      	b.n	81049e6 <HAL_GPIO_Init+0x26a>
 8104992:	2307      	movs	r3, #7
 8104994:	e027      	b.n	81049e6 <HAL_GPIO_Init+0x26a>
 8104996:	2306      	movs	r3, #6
 8104998:	e025      	b.n	81049e6 <HAL_GPIO_Init+0x26a>
 810499a:	2305      	movs	r3, #5
 810499c:	e023      	b.n	81049e6 <HAL_GPIO_Init+0x26a>
 810499e:	2304      	movs	r3, #4
 81049a0:	e021      	b.n	81049e6 <HAL_GPIO_Init+0x26a>
 81049a2:	2303      	movs	r3, #3
 81049a4:	e01f      	b.n	81049e6 <HAL_GPIO_Init+0x26a>
 81049a6:	2302      	movs	r3, #2
 81049a8:	e01d      	b.n	81049e6 <HAL_GPIO_Init+0x26a>
 81049aa:	2301      	movs	r3, #1
 81049ac:	e01b      	b.n	81049e6 <HAL_GPIO_Init+0x26a>
 81049ae:	bf00      	nop
 81049b0:	580000c0 	.word	0x580000c0
 81049b4:	58024400 	.word	0x58024400
 81049b8:	58000400 	.word	0x58000400
 81049bc:	58020000 	.word	0x58020000
 81049c0:	58020400 	.word	0x58020400
 81049c4:	58020800 	.word	0x58020800
 81049c8:	58020c00 	.word	0x58020c00
 81049cc:	58021000 	.word	0x58021000
 81049d0:	58021400 	.word	0x58021400
 81049d4:	58021800 	.word	0x58021800
 81049d8:	58021c00 	.word	0x58021c00
 81049dc:	58022000 	.word	0x58022000
 81049e0:	58022400 	.word	0x58022400
 81049e4:	2300      	movs	r3, #0
 81049e6:	69fa      	ldr	r2, [r7, #28]
 81049e8:	f002 0203 	and.w	r2, r2, #3
 81049ec:	0092      	lsls	r2, r2, #2
 81049ee:	4093      	lsls	r3, r2
 81049f0:	69ba      	ldr	r2, [r7, #24]
 81049f2:	4313      	orrs	r3, r2
 81049f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81049f6:	4938      	ldr	r1, [pc, #224]	@ (8104ad8 <HAL_GPIO_Init+0x35c>)
 81049f8:	69fb      	ldr	r3, [r7, #28]
 81049fa:	089b      	lsrs	r3, r3, #2
 81049fc:	3302      	adds	r3, #2
 81049fe:	69ba      	ldr	r2, [r7, #24]
 8104a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104a08:	681b      	ldr	r3, [r3, #0]
 8104a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104a0c:	693b      	ldr	r3, [r7, #16]
 8104a0e:	43db      	mvns	r3, r3
 8104a10:	69ba      	ldr	r2, [r7, #24]
 8104a12:	4013      	ands	r3, r2
 8104a14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104a16:	683b      	ldr	r3, [r7, #0]
 8104a18:	685b      	ldr	r3, [r3, #4]
 8104a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8104a1e:	2b00      	cmp	r3, #0
 8104a20:	d003      	beq.n	8104a2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104a22:	69ba      	ldr	r2, [r7, #24]
 8104a24:	693b      	ldr	r3, [r7, #16]
 8104a26:	4313      	orrs	r3, r2
 8104a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104a2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8104a2e:	69bb      	ldr	r3, [r7, #24]
 8104a30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104a36:	685b      	ldr	r3, [r3, #4]
 8104a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104a3a:	693b      	ldr	r3, [r7, #16]
 8104a3c:	43db      	mvns	r3, r3
 8104a3e:	69ba      	ldr	r2, [r7, #24]
 8104a40:	4013      	ands	r3, r2
 8104a42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104a44:	683b      	ldr	r3, [r7, #0]
 8104a46:	685b      	ldr	r3, [r3, #4]
 8104a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8104a4c:	2b00      	cmp	r3, #0
 8104a4e:	d003      	beq.n	8104a58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104a50:	69ba      	ldr	r2, [r7, #24]
 8104a52:	693b      	ldr	r3, [r7, #16]
 8104a54:	4313      	orrs	r3, r2
 8104a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104a58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8104a5c:	69bb      	ldr	r3, [r7, #24]
 8104a5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104a60:	697b      	ldr	r3, [r7, #20]
 8104a62:	685b      	ldr	r3, [r3, #4]
 8104a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104a66:	693b      	ldr	r3, [r7, #16]
 8104a68:	43db      	mvns	r3, r3
 8104a6a:	69ba      	ldr	r2, [r7, #24]
 8104a6c:	4013      	ands	r3, r2
 8104a6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104a70:	683b      	ldr	r3, [r7, #0]
 8104a72:	685b      	ldr	r3, [r3, #4]
 8104a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104a78:	2b00      	cmp	r3, #0
 8104a7a:	d003      	beq.n	8104a84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104a7c:	69ba      	ldr	r2, [r7, #24]
 8104a7e:	693b      	ldr	r3, [r7, #16]
 8104a80:	4313      	orrs	r3, r2
 8104a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104a84:	697b      	ldr	r3, [r7, #20]
 8104a86:	69ba      	ldr	r2, [r7, #24]
 8104a88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104a8a:	697b      	ldr	r3, [r7, #20]
 8104a8c:	681b      	ldr	r3, [r3, #0]
 8104a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104a90:	693b      	ldr	r3, [r7, #16]
 8104a92:	43db      	mvns	r3, r3
 8104a94:	69ba      	ldr	r2, [r7, #24]
 8104a96:	4013      	ands	r3, r2
 8104a98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104a9a:	683b      	ldr	r3, [r7, #0]
 8104a9c:	685b      	ldr	r3, [r3, #4]
 8104a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104aa2:	2b00      	cmp	r3, #0
 8104aa4:	d003      	beq.n	8104aae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8104aa6:	69ba      	ldr	r2, [r7, #24]
 8104aa8:	693b      	ldr	r3, [r7, #16]
 8104aaa:	4313      	orrs	r3, r2
 8104aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104aae:	697b      	ldr	r3, [r7, #20]
 8104ab0:	69ba      	ldr	r2, [r7, #24]
 8104ab2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104ab4:	69fb      	ldr	r3, [r7, #28]
 8104ab6:	3301      	adds	r3, #1
 8104ab8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104aba:	683b      	ldr	r3, [r7, #0]
 8104abc:	681a      	ldr	r2, [r3, #0]
 8104abe:	69fb      	ldr	r3, [r7, #28]
 8104ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8104ac4:	2b00      	cmp	r3, #0
 8104ac6:	f47f ae63 	bne.w	8104790 <HAL_GPIO_Init+0x14>
  }
}
 8104aca:	bf00      	nop
 8104acc:	bf00      	nop
 8104ace:	3724      	adds	r7, #36	@ 0x24
 8104ad0:	46bd      	mov	sp, r7
 8104ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ad6:	4770      	bx	lr
 8104ad8:	58000400 	.word	0x58000400

08104adc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8104adc:	b580      	push	{r7, lr}
 8104ade:	b082      	sub	sp, #8
 8104ae0:	af00      	add	r7, sp, #0
 8104ae2:	4603      	mov	r3, r0
 8104ae4:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8104ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104aea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8104aee:	88fb      	ldrh	r3, [r7, #6]
 8104af0:	4013      	ands	r3, r2
 8104af2:	2b00      	cmp	r3, #0
 8104af4:	d008      	beq.n	8104b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8104af6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8104afa:	88fb      	ldrh	r3, [r7, #6]
 8104afc:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8104b00:	88fb      	ldrh	r3, [r7, #6]
 8104b02:	4618      	mov	r0, r3
 8104b04:	f7fb fdb2 	bl	810066c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8104b08:	bf00      	nop
 8104b0a:	3708      	adds	r7, #8
 8104b0c:	46bd      	mov	sp, r7
 8104b0e:	bd80      	pop	{r7, pc}

08104b10 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104b10:	b480      	push	{r7}
 8104b12:	b083      	sub	sp, #12
 8104b14:	af00      	add	r7, sp, #0
 8104b16:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104b18:	4b05      	ldr	r3, [pc, #20]	@ (8104b30 <HAL_HSEM_ActivateNotification+0x20>)
 8104b1a:	681a      	ldr	r2, [r3, #0]
 8104b1c:	4904      	ldr	r1, [pc, #16]	@ (8104b30 <HAL_HSEM_ActivateNotification+0x20>)
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	4313      	orrs	r3, r2
 8104b22:	600b      	str	r3, [r1, #0]
#endif
}
 8104b24:	bf00      	nop
 8104b26:	370c      	adds	r7, #12
 8104b28:	46bd      	mov	sp, r7
 8104b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b2e:	4770      	bx	lr
 8104b30:	58026510 	.word	0x58026510

08104b34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8104b34:	b580      	push	{r7, lr}
 8104b36:	b086      	sub	sp, #24
 8104b38:	af02      	add	r7, sp, #8
 8104b3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	2b00      	cmp	r3, #0
 8104b40:	d101      	bne.n	8104b46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8104b42:	2301      	movs	r3, #1
 8104b44:	e0fe      	b.n	8104d44 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8104b4c:	b2db      	uxtb	r3, r3
 8104b4e:	2b00      	cmp	r3, #0
 8104b50:	d106      	bne.n	8104b60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8104b52:	687b      	ldr	r3, [r7, #4]
 8104b54:	2200      	movs	r2, #0
 8104b56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8104b5a:	6878      	ldr	r0, [r7, #4]
 8104b5c:	f7fd facc 	bl	81020f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	2203      	movs	r2, #3
 8104b64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8104b68:	687b      	ldr	r3, [r7, #4]
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	4618      	mov	r0, r3
 8104b6e:	f007 fff6 	bl	810cb5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8104b72:	687b      	ldr	r3, [r7, #4]
 8104b74:	6818      	ldr	r0, [r3, #0]
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	7c1a      	ldrb	r2, [r3, #16]
 8104b7a:	f88d 2000 	strb.w	r2, [sp]
 8104b7e:	3304      	adds	r3, #4
 8104b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8104b82:	f007 ff7b 	bl	810ca7c <USB_CoreInit>
 8104b86:	4603      	mov	r3, r0
 8104b88:	2b00      	cmp	r3, #0
 8104b8a:	d005      	beq.n	8104b98 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	2202      	movs	r2, #2
 8104b90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8104b94:	2301      	movs	r3, #1
 8104b96:	e0d5      	b.n	8104d44 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8104b98:	687b      	ldr	r3, [r7, #4]
 8104b9a:	681b      	ldr	r3, [r3, #0]
 8104b9c:	2100      	movs	r1, #0
 8104b9e:	4618      	mov	r0, r3
 8104ba0:	f007 ffee 	bl	810cb80 <USB_SetCurrentMode>
 8104ba4:	4603      	mov	r3, r0
 8104ba6:	2b00      	cmp	r3, #0
 8104ba8:	d005      	beq.n	8104bb6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	2202      	movs	r2, #2
 8104bae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8104bb2:	2301      	movs	r3, #1
 8104bb4:	e0c6      	b.n	8104d44 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104bb6:	2300      	movs	r3, #0
 8104bb8:	73fb      	strb	r3, [r7, #15]
 8104bba:	e04a      	b.n	8104c52 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8104bbc:	7bfa      	ldrb	r2, [r7, #15]
 8104bbe:	6879      	ldr	r1, [r7, #4]
 8104bc0:	4613      	mov	r3, r2
 8104bc2:	00db      	lsls	r3, r3, #3
 8104bc4:	4413      	add	r3, r2
 8104bc6:	009b      	lsls	r3, r3, #2
 8104bc8:	440b      	add	r3, r1
 8104bca:	3315      	adds	r3, #21
 8104bcc:	2201      	movs	r2, #1
 8104bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8104bd0:	7bfa      	ldrb	r2, [r7, #15]
 8104bd2:	6879      	ldr	r1, [r7, #4]
 8104bd4:	4613      	mov	r3, r2
 8104bd6:	00db      	lsls	r3, r3, #3
 8104bd8:	4413      	add	r3, r2
 8104bda:	009b      	lsls	r3, r3, #2
 8104bdc:	440b      	add	r3, r1
 8104bde:	3314      	adds	r3, #20
 8104be0:	7bfa      	ldrb	r2, [r7, #15]
 8104be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8104be4:	7bfa      	ldrb	r2, [r7, #15]
 8104be6:	7bfb      	ldrb	r3, [r7, #15]
 8104be8:	b298      	uxth	r0, r3
 8104bea:	6879      	ldr	r1, [r7, #4]
 8104bec:	4613      	mov	r3, r2
 8104bee:	00db      	lsls	r3, r3, #3
 8104bf0:	4413      	add	r3, r2
 8104bf2:	009b      	lsls	r3, r3, #2
 8104bf4:	440b      	add	r3, r1
 8104bf6:	332e      	adds	r3, #46	@ 0x2e
 8104bf8:	4602      	mov	r2, r0
 8104bfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8104bfc:	7bfa      	ldrb	r2, [r7, #15]
 8104bfe:	6879      	ldr	r1, [r7, #4]
 8104c00:	4613      	mov	r3, r2
 8104c02:	00db      	lsls	r3, r3, #3
 8104c04:	4413      	add	r3, r2
 8104c06:	009b      	lsls	r3, r3, #2
 8104c08:	440b      	add	r3, r1
 8104c0a:	3318      	adds	r3, #24
 8104c0c:	2200      	movs	r2, #0
 8104c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8104c10:	7bfa      	ldrb	r2, [r7, #15]
 8104c12:	6879      	ldr	r1, [r7, #4]
 8104c14:	4613      	mov	r3, r2
 8104c16:	00db      	lsls	r3, r3, #3
 8104c18:	4413      	add	r3, r2
 8104c1a:	009b      	lsls	r3, r3, #2
 8104c1c:	440b      	add	r3, r1
 8104c1e:	331c      	adds	r3, #28
 8104c20:	2200      	movs	r2, #0
 8104c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8104c24:	7bfa      	ldrb	r2, [r7, #15]
 8104c26:	6879      	ldr	r1, [r7, #4]
 8104c28:	4613      	mov	r3, r2
 8104c2a:	00db      	lsls	r3, r3, #3
 8104c2c:	4413      	add	r3, r2
 8104c2e:	009b      	lsls	r3, r3, #2
 8104c30:	440b      	add	r3, r1
 8104c32:	3320      	adds	r3, #32
 8104c34:	2200      	movs	r2, #0
 8104c36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8104c38:	7bfa      	ldrb	r2, [r7, #15]
 8104c3a:	6879      	ldr	r1, [r7, #4]
 8104c3c:	4613      	mov	r3, r2
 8104c3e:	00db      	lsls	r3, r3, #3
 8104c40:	4413      	add	r3, r2
 8104c42:	009b      	lsls	r3, r3, #2
 8104c44:	440b      	add	r3, r1
 8104c46:	3324      	adds	r3, #36	@ 0x24
 8104c48:	2200      	movs	r2, #0
 8104c4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104c4c:	7bfb      	ldrb	r3, [r7, #15]
 8104c4e:	3301      	adds	r3, #1
 8104c50:	73fb      	strb	r3, [r7, #15]
 8104c52:	687b      	ldr	r3, [r7, #4]
 8104c54:	791b      	ldrb	r3, [r3, #4]
 8104c56:	7bfa      	ldrb	r2, [r7, #15]
 8104c58:	429a      	cmp	r2, r3
 8104c5a:	d3af      	bcc.n	8104bbc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104c5c:	2300      	movs	r3, #0
 8104c5e:	73fb      	strb	r3, [r7, #15]
 8104c60:	e044      	b.n	8104cec <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8104c62:	7bfa      	ldrb	r2, [r7, #15]
 8104c64:	6879      	ldr	r1, [r7, #4]
 8104c66:	4613      	mov	r3, r2
 8104c68:	00db      	lsls	r3, r3, #3
 8104c6a:	4413      	add	r3, r2
 8104c6c:	009b      	lsls	r3, r3, #2
 8104c6e:	440b      	add	r3, r1
 8104c70:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8104c74:	2200      	movs	r2, #0
 8104c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8104c78:	7bfa      	ldrb	r2, [r7, #15]
 8104c7a:	6879      	ldr	r1, [r7, #4]
 8104c7c:	4613      	mov	r3, r2
 8104c7e:	00db      	lsls	r3, r3, #3
 8104c80:	4413      	add	r3, r2
 8104c82:	009b      	lsls	r3, r3, #2
 8104c84:	440b      	add	r3, r1
 8104c86:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8104c8a:	7bfa      	ldrb	r2, [r7, #15]
 8104c8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8104c8e:	7bfa      	ldrb	r2, [r7, #15]
 8104c90:	6879      	ldr	r1, [r7, #4]
 8104c92:	4613      	mov	r3, r2
 8104c94:	00db      	lsls	r3, r3, #3
 8104c96:	4413      	add	r3, r2
 8104c98:	009b      	lsls	r3, r3, #2
 8104c9a:	440b      	add	r3, r1
 8104c9c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8104ca0:	2200      	movs	r2, #0
 8104ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8104ca4:	7bfa      	ldrb	r2, [r7, #15]
 8104ca6:	6879      	ldr	r1, [r7, #4]
 8104ca8:	4613      	mov	r3, r2
 8104caa:	00db      	lsls	r3, r3, #3
 8104cac:	4413      	add	r3, r2
 8104cae:	009b      	lsls	r3, r3, #2
 8104cb0:	440b      	add	r3, r1
 8104cb2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8104cb6:	2200      	movs	r2, #0
 8104cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8104cba:	7bfa      	ldrb	r2, [r7, #15]
 8104cbc:	6879      	ldr	r1, [r7, #4]
 8104cbe:	4613      	mov	r3, r2
 8104cc0:	00db      	lsls	r3, r3, #3
 8104cc2:	4413      	add	r3, r2
 8104cc4:	009b      	lsls	r3, r3, #2
 8104cc6:	440b      	add	r3, r1
 8104cc8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8104ccc:	2200      	movs	r2, #0
 8104cce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8104cd0:	7bfa      	ldrb	r2, [r7, #15]
 8104cd2:	6879      	ldr	r1, [r7, #4]
 8104cd4:	4613      	mov	r3, r2
 8104cd6:	00db      	lsls	r3, r3, #3
 8104cd8:	4413      	add	r3, r2
 8104cda:	009b      	lsls	r3, r3, #2
 8104cdc:	440b      	add	r3, r1
 8104cde:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8104ce2:	2200      	movs	r2, #0
 8104ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104ce6:	7bfb      	ldrb	r3, [r7, #15]
 8104ce8:	3301      	adds	r3, #1
 8104cea:	73fb      	strb	r3, [r7, #15]
 8104cec:	687b      	ldr	r3, [r7, #4]
 8104cee:	791b      	ldrb	r3, [r3, #4]
 8104cf0:	7bfa      	ldrb	r2, [r7, #15]
 8104cf2:	429a      	cmp	r2, r3
 8104cf4:	d3b5      	bcc.n	8104c62 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	6818      	ldr	r0, [r3, #0]
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	7c1a      	ldrb	r2, [r3, #16]
 8104cfe:	f88d 2000 	strb.w	r2, [sp]
 8104d02:	3304      	adds	r3, #4
 8104d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8104d06:	f007 ff87 	bl	810cc18 <USB_DevInit>
 8104d0a:	4603      	mov	r3, r0
 8104d0c:	2b00      	cmp	r3, #0
 8104d0e:	d005      	beq.n	8104d1c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104d10:	687b      	ldr	r3, [r7, #4]
 8104d12:	2202      	movs	r2, #2
 8104d14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8104d18:	2301      	movs	r3, #1
 8104d1a:	e013      	b.n	8104d44 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8104d1c:	687b      	ldr	r3, [r7, #4]
 8104d1e:	2200      	movs	r2, #0
 8104d20:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	2201      	movs	r2, #1
 8104d26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	7b1b      	ldrb	r3, [r3, #12]
 8104d2e:	2b01      	cmp	r3, #1
 8104d30:	d102      	bne.n	8104d38 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8104d32:	6878      	ldr	r0, [r7, #4]
 8104d34:	f000 f80a 	bl	8104d4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	681b      	ldr	r3, [r3, #0]
 8104d3c:	4618      	mov	r0, r3
 8104d3e:	f008 f942 	bl	810cfc6 <USB_DevDisconnect>

  return HAL_OK;
 8104d42:	2300      	movs	r3, #0
}
 8104d44:	4618      	mov	r0, r3
 8104d46:	3710      	adds	r7, #16
 8104d48:	46bd      	mov	sp, r7
 8104d4a:	bd80      	pop	{r7, pc}

08104d4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8104d4c:	b480      	push	{r7}
 8104d4e:	b085      	sub	sp, #20
 8104d50:	af00      	add	r7, sp, #0
 8104d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	681b      	ldr	r3, [r3, #0]
 8104d58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	2201      	movs	r2, #1
 8104d5e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8104d62:	687b      	ldr	r3, [r7, #4]
 8104d64:	2200      	movs	r2, #0
 8104d66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8104d6a:	68fb      	ldr	r3, [r7, #12]
 8104d6c:	699b      	ldr	r3, [r3, #24]
 8104d6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8104d72:	68fb      	ldr	r3, [r7, #12]
 8104d74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8104d76:	68fb      	ldr	r3, [r7, #12]
 8104d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8104d7e:	f043 0303 	orr.w	r3, r3, #3
 8104d82:	68fa      	ldr	r2, [r7, #12]
 8104d84:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8104d86:	2300      	movs	r3, #0
}
 8104d88:	4618      	mov	r0, r3
 8104d8a:	3714      	adds	r7, #20
 8104d8c:	46bd      	mov	sp, r7
 8104d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d92:	4770      	bx	lr

08104d94 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104d94:	b580      	push	{r7, lr}
 8104d96:	b084      	sub	sp, #16
 8104d98:	af00      	add	r7, sp, #0
 8104d9a:	60f8      	str	r0, [r7, #12]
 8104d9c:	460b      	mov	r3, r1
 8104d9e:	607a      	str	r2, [r7, #4]
 8104da0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104da2:	4b37      	ldr	r3, [pc, #220]	@ (8104e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	f023 0201 	bic.w	r2, r3, #1
 8104daa:	4935      	ldr	r1, [pc, #212]	@ (8104e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104dac:	68fb      	ldr	r3, [r7, #12]
 8104dae:	4313      	orrs	r3, r2
 8104db0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	2b00      	cmp	r3, #0
 8104db6:	d123      	bne.n	8104e00 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104db8:	f7ff f89a 	bl	8103ef0 <HAL_GetCurrentCPUID>
 8104dbc:	4603      	mov	r3, r0
 8104dbe:	2b03      	cmp	r3, #3
 8104dc0:	d158      	bne.n	8104e74 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8104e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104dc4:	691b      	ldr	r3, [r3, #16]
 8104dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8104e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104dc8:	f023 0301 	bic.w	r3, r3, #1
 8104dcc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104dce:	4b2d      	ldr	r3, [pc, #180]	@ (8104e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104dd0:	691b      	ldr	r3, [r3, #16]
 8104dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8104e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104dd4:	f043 0304 	orr.w	r3, r3, #4
 8104dd8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104dda:	f3bf 8f4f 	dsb	sy
}
 8104dde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104de0:	f3bf 8f6f 	isb	sy
}
 8104de4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104de6:	7afb      	ldrb	r3, [r7, #11]
 8104de8:	2b01      	cmp	r3, #1
 8104dea:	d101      	bne.n	8104df0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104dec:	bf30      	wfi
 8104dee:	e000      	b.n	8104df2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104df0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104df2:	4b24      	ldr	r3, [pc, #144]	@ (8104e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104df4:	691b      	ldr	r3, [r3, #16]
 8104df6:	4a23      	ldr	r2, [pc, #140]	@ (8104e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104df8:	f023 0304 	bic.w	r3, r3, #4
 8104dfc:	6113      	str	r3, [r2, #16]
 8104dfe:	e03c      	b.n	8104e7a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	2b01      	cmp	r3, #1
 8104e04:	d123      	bne.n	8104e4e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104e06:	f7ff f873 	bl	8103ef0 <HAL_GetCurrentCPUID>
 8104e0a:	4603      	mov	r3, r0
 8104e0c:	2b01      	cmp	r3, #1
 8104e0e:	d133      	bne.n	8104e78 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104e10:	4b1b      	ldr	r3, [pc, #108]	@ (8104e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104e12:	695b      	ldr	r3, [r3, #20]
 8104e14:	4a1a      	ldr	r2, [pc, #104]	@ (8104e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104e16:	f023 0302 	bic.w	r3, r3, #2
 8104e1a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104e1c:	4b19      	ldr	r3, [pc, #100]	@ (8104e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104e1e:	691b      	ldr	r3, [r3, #16]
 8104e20:	4a18      	ldr	r2, [pc, #96]	@ (8104e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104e22:	f043 0304 	orr.w	r3, r3, #4
 8104e26:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104e28:	f3bf 8f4f 	dsb	sy
}
 8104e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104e2e:	f3bf 8f6f 	isb	sy
}
 8104e32:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104e34:	7afb      	ldrb	r3, [r7, #11]
 8104e36:	2b01      	cmp	r3, #1
 8104e38:	d101      	bne.n	8104e3e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104e3a:	bf30      	wfi
 8104e3c:	e000      	b.n	8104e40 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104e3e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104e40:	4b10      	ldr	r3, [pc, #64]	@ (8104e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104e42:	691b      	ldr	r3, [r3, #16]
 8104e44:	4a0f      	ldr	r2, [pc, #60]	@ (8104e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104e46:	f023 0304 	bic.w	r3, r3, #4
 8104e4a:	6113      	str	r3, [r2, #16]
 8104e4c:	e015      	b.n	8104e7a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104e4e:	f7ff f84f 	bl	8103ef0 <HAL_GetCurrentCPUID>
 8104e52:	4603      	mov	r3, r0
 8104e54:	2b03      	cmp	r3, #3
 8104e56:	d106      	bne.n	8104e66 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104e58:	4b09      	ldr	r3, [pc, #36]	@ (8104e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104e5a:	691b      	ldr	r3, [r3, #16]
 8104e5c:	4a08      	ldr	r2, [pc, #32]	@ (8104e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104e5e:	f023 0304 	bic.w	r3, r3, #4
 8104e62:	6113      	str	r3, [r2, #16]
 8104e64:	e009      	b.n	8104e7a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104e66:	4b06      	ldr	r3, [pc, #24]	@ (8104e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104e68:	695b      	ldr	r3, [r3, #20]
 8104e6a:	4a05      	ldr	r2, [pc, #20]	@ (8104e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104e6c:	f023 0304 	bic.w	r3, r3, #4
 8104e70:	6153      	str	r3, [r2, #20]
 8104e72:	e002      	b.n	8104e7a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104e74:	bf00      	nop
 8104e76:	e000      	b.n	8104e7a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104e78:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104e7a:	3710      	adds	r7, #16
 8104e7c:	46bd      	mov	sp, r7
 8104e7e:	bd80      	pop	{r7, pc}
 8104e80:	58024800 	.word	0x58024800
 8104e84:	e000ed00 	.word	0xe000ed00

08104e88 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104e88:	b580      	push	{r7, lr}
 8104e8a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104e8c:	f7ff f830 	bl	8103ef0 <HAL_GetCurrentCPUID>
 8104e90:	4603      	mov	r3, r0
 8104e92:	2b03      	cmp	r3, #3
 8104e94:	d101      	bne.n	8104e9a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104e96:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104e98:	e001      	b.n	8104e9e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104e9a:	bf40      	sev
    __WFE ();
 8104e9c:	bf20      	wfe
}
 8104e9e:	bf00      	nop
 8104ea0:	bd80      	pop	{r7, pc}
	...

08104ea4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8104ea4:	b480      	push	{r7}
 8104ea6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8104ea8:	4b05      	ldr	r3, [pc, #20]	@ (8104ec0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8104eaa:	68db      	ldr	r3, [r3, #12]
 8104eac:	4a04      	ldr	r2, [pc, #16]	@ (8104ec0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8104eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104eb2:	60d3      	str	r3, [r2, #12]
}
 8104eb4:	bf00      	nop
 8104eb6:	46bd      	mov	sp, r7
 8104eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ebc:	4770      	bx	lr
 8104ebe:	bf00      	nop
 8104ec0:	58024800 	.word	0x58024800

08104ec4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8104ec4:	b580      	push	{r7, lr}
 8104ec6:	b086      	sub	sp, #24
 8104ec8:	af02      	add	r7, sp, #8
 8104eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8104ecc:	f7fd fd08 	bl	81028e0 <HAL_GetTick>
 8104ed0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8104ed2:	687b      	ldr	r3, [r7, #4]
 8104ed4:	2b00      	cmp	r3, #0
 8104ed6:	d101      	bne.n	8104edc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8104ed8:	2301      	movs	r3, #1
 8104eda:	e061      	b.n	8104fa0 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104ee2:	b2db      	uxtb	r3, r3
 8104ee4:	2b00      	cmp	r3, #0
 8104ee6:	d107      	bne.n	8104ef8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8104ee8:	6878      	ldr	r0, [r7, #4]
 8104eea:	f7fc fc23 	bl	8101734 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8104eee:	f241 3188 	movw	r1, #5000	@ 0x1388
 8104ef2:	6878      	ldr	r0, [r7, #4]
 8104ef4:	f000 f85a 	bl	8104fac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8104ef8:	687b      	ldr	r3, [r7, #4]
 8104efa:	681b      	ldr	r3, [r3, #0]
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	689b      	ldr	r3, [r3, #8]
 8104f06:	3b01      	subs	r3, #1
 8104f08:	021a      	lsls	r2, r3, #8
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	681b      	ldr	r3, [r3, #0]
 8104f0e:	430a      	orrs	r2, r1
 8104f10:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104f16:	9300      	str	r3, [sp, #0]
 8104f18:	68fb      	ldr	r3, [r7, #12]
 8104f1a:	2200      	movs	r2, #0
 8104f1c:	2120      	movs	r1, #32
 8104f1e:	6878      	ldr	r0, [r7, #4]
 8104f20:	f000 f852 	bl	8104fc8 <QSPI_WaitFlagStateUntilTimeout>
 8104f24:	4603      	mov	r3, r0
 8104f26:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8104f28:	7afb      	ldrb	r3, [r7, #11]
 8104f2a:	2b00      	cmp	r3, #0
 8104f2c:	d137      	bne.n	8104f9e <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8104f2e:	687b      	ldr	r3, [r7, #4]
 8104f30:	681b      	ldr	r3, [r3, #0]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8104f38:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8104f3c:	687a      	ldr	r2, [r7, #4]
 8104f3e:	6852      	ldr	r2, [r2, #4]
 8104f40:	0611      	lsls	r1, r2, #24
 8104f42:	687a      	ldr	r2, [r7, #4]
 8104f44:	68d2      	ldr	r2, [r2, #12]
 8104f46:	4311      	orrs	r1, r2
 8104f48:	687a      	ldr	r2, [r7, #4]
 8104f4a:	69d2      	ldr	r2, [r2, #28]
 8104f4c:	4311      	orrs	r1, r2
 8104f4e:	687a      	ldr	r2, [r7, #4]
 8104f50:	6a12      	ldr	r2, [r2, #32]
 8104f52:	4311      	orrs	r1, r2
 8104f54:	687a      	ldr	r2, [r7, #4]
 8104f56:	6812      	ldr	r2, [r2, #0]
 8104f58:	430b      	orrs	r3, r1
 8104f5a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	685a      	ldr	r2, [r3, #4]
 8104f62:	4b11      	ldr	r3, [pc, #68]	@ (8104fa8 <HAL_QSPI_Init+0xe4>)
 8104f64:	4013      	ands	r3, r2
 8104f66:	687a      	ldr	r2, [r7, #4]
 8104f68:	6912      	ldr	r2, [r2, #16]
 8104f6a:	0411      	lsls	r1, r2, #16
 8104f6c:	687a      	ldr	r2, [r7, #4]
 8104f6e:	6952      	ldr	r2, [r2, #20]
 8104f70:	4311      	orrs	r1, r2
 8104f72:	687a      	ldr	r2, [r7, #4]
 8104f74:	6992      	ldr	r2, [r2, #24]
 8104f76:	4311      	orrs	r1, r2
 8104f78:	687a      	ldr	r2, [r7, #4]
 8104f7a:	6812      	ldr	r2, [r2, #0]
 8104f7c:	430b      	orrs	r3, r1
 8104f7e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8104f80:	687b      	ldr	r3, [r7, #4]
 8104f82:	681b      	ldr	r3, [r3, #0]
 8104f84:	681a      	ldr	r2, [r3, #0]
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	681b      	ldr	r3, [r3, #0]
 8104f8a:	f042 0201 	orr.w	r2, r2, #1
 8104f8e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	2200      	movs	r2, #0
 8104f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	2201      	movs	r2, #1
 8104f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8104f9e:	7afb      	ldrb	r3, [r7, #11]
}
 8104fa0:	4618      	mov	r0, r3
 8104fa2:	3710      	adds	r7, #16
 8104fa4:	46bd      	mov	sp, r7
 8104fa6:	bd80      	pop	{r7, pc}
 8104fa8:	ffe0f8fe 	.word	0xffe0f8fe

08104fac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8104fac:	b480      	push	{r7}
 8104fae:	b083      	sub	sp, #12
 8104fb0:	af00      	add	r7, sp, #0
 8104fb2:	6078      	str	r0, [r7, #4]
 8104fb4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8104fb6:	687b      	ldr	r3, [r7, #4]
 8104fb8:	683a      	ldr	r2, [r7, #0]
 8104fba:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8104fbc:	bf00      	nop
 8104fbe:	370c      	adds	r7, #12
 8104fc0:	46bd      	mov	sp, r7
 8104fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fc6:	4770      	bx	lr

08104fc8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8104fc8:	b580      	push	{r7, lr}
 8104fca:	b084      	sub	sp, #16
 8104fcc:	af00      	add	r7, sp, #0
 8104fce:	60f8      	str	r0, [r7, #12]
 8104fd0:	60b9      	str	r1, [r7, #8]
 8104fd2:	603b      	str	r3, [r7, #0]
 8104fd4:	4613      	mov	r3, r2
 8104fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8104fd8:	e01a      	b.n	8105010 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104fda:	69bb      	ldr	r3, [r7, #24]
 8104fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104fe0:	d016      	beq.n	8105010 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104fe2:	f7fd fc7d 	bl	81028e0 <HAL_GetTick>
 8104fe6:	4602      	mov	r2, r0
 8104fe8:	683b      	ldr	r3, [r7, #0]
 8104fea:	1ad3      	subs	r3, r2, r3
 8104fec:	69ba      	ldr	r2, [r7, #24]
 8104fee:	429a      	cmp	r2, r3
 8104ff0:	d302      	bcc.n	8104ff8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8104ff2:	69bb      	ldr	r3, [r7, #24]
 8104ff4:	2b00      	cmp	r3, #0
 8104ff6:	d10b      	bne.n	8105010 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8104ff8:	68fb      	ldr	r3, [r7, #12]
 8104ffa:	2204      	movs	r2, #4
 8104ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8105000:	68fb      	ldr	r3, [r7, #12]
 8105002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105004:	f043 0201 	orr.w	r2, r3, #1
 8105008:	68fb      	ldr	r3, [r7, #12]
 810500a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 810500c:	2301      	movs	r3, #1
 810500e:	e00e      	b.n	810502e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8105010:	68fb      	ldr	r3, [r7, #12]
 8105012:	681b      	ldr	r3, [r3, #0]
 8105014:	689a      	ldr	r2, [r3, #8]
 8105016:	68bb      	ldr	r3, [r7, #8]
 8105018:	4013      	ands	r3, r2
 810501a:	2b00      	cmp	r3, #0
 810501c:	bf14      	ite	ne
 810501e:	2301      	movne	r3, #1
 8105020:	2300      	moveq	r3, #0
 8105022:	b2db      	uxtb	r3, r3
 8105024:	461a      	mov	r2, r3
 8105026:	79fb      	ldrb	r3, [r7, #7]
 8105028:	429a      	cmp	r2, r3
 810502a:	d1d6      	bne.n	8104fda <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810502c:	2300      	movs	r3, #0
}
 810502e:	4618      	mov	r0, r3
 8105030:	3710      	adds	r7, #16
 8105032:	46bd      	mov	sp, r7
 8105034:	bd80      	pop	{r7, pc}
	...

08105038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105038:	b480      	push	{r7}
 810503a:	b089      	sub	sp, #36	@ 0x24
 810503c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810503e:	4bb3      	ldr	r3, [pc, #716]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105040:	691b      	ldr	r3, [r3, #16]
 8105042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8105046:	2b18      	cmp	r3, #24
 8105048:	f200 8155 	bhi.w	81052f6 <HAL_RCC_GetSysClockFreq+0x2be>
 810504c:	a201      	add	r2, pc, #4	@ (adr r2, 8105054 <HAL_RCC_GetSysClockFreq+0x1c>)
 810504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105052:	bf00      	nop
 8105054:	081050b9 	.word	0x081050b9
 8105058:	081052f7 	.word	0x081052f7
 810505c:	081052f7 	.word	0x081052f7
 8105060:	081052f7 	.word	0x081052f7
 8105064:	081052f7 	.word	0x081052f7
 8105068:	081052f7 	.word	0x081052f7
 810506c:	081052f7 	.word	0x081052f7
 8105070:	081052f7 	.word	0x081052f7
 8105074:	081050df 	.word	0x081050df
 8105078:	081052f7 	.word	0x081052f7
 810507c:	081052f7 	.word	0x081052f7
 8105080:	081052f7 	.word	0x081052f7
 8105084:	081052f7 	.word	0x081052f7
 8105088:	081052f7 	.word	0x081052f7
 810508c:	081052f7 	.word	0x081052f7
 8105090:	081052f7 	.word	0x081052f7
 8105094:	081050e5 	.word	0x081050e5
 8105098:	081052f7 	.word	0x081052f7
 810509c:	081052f7 	.word	0x081052f7
 81050a0:	081052f7 	.word	0x081052f7
 81050a4:	081052f7 	.word	0x081052f7
 81050a8:	081052f7 	.word	0x081052f7
 81050ac:	081052f7 	.word	0x081052f7
 81050b0:	081052f7 	.word	0x081052f7
 81050b4:	081050eb 	.word	0x081050eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81050b8:	4b94      	ldr	r3, [pc, #592]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050ba:	681b      	ldr	r3, [r3, #0]
 81050bc:	f003 0320 	and.w	r3, r3, #32
 81050c0:	2b00      	cmp	r3, #0
 81050c2:	d009      	beq.n	81050d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81050c4:	4b91      	ldr	r3, [pc, #580]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050c6:	681b      	ldr	r3, [r3, #0]
 81050c8:	08db      	lsrs	r3, r3, #3
 81050ca:	f003 0303 	and.w	r3, r3, #3
 81050ce:	4a90      	ldr	r2, [pc, #576]	@ (8105310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81050d0:	fa22 f303 	lsr.w	r3, r2, r3
 81050d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81050d6:	e111      	b.n	81052fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81050d8:	4b8d      	ldr	r3, [pc, #564]	@ (8105310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81050da:	61bb      	str	r3, [r7, #24]
      break;
 81050dc:	e10e      	b.n	81052fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81050de:	4b8d      	ldr	r3, [pc, #564]	@ (8105314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81050e0:	61bb      	str	r3, [r7, #24]
      break;
 81050e2:	e10b      	b.n	81052fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81050e4:	4b8c      	ldr	r3, [pc, #560]	@ (8105318 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81050e6:	61bb      	str	r3, [r7, #24]
      break;
 81050e8:	e108      	b.n	81052fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81050ea:	4b88      	ldr	r3, [pc, #544]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81050ee:	f003 0303 	and.w	r3, r3, #3
 81050f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81050f4:	4b85      	ldr	r3, [pc, #532]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81050f8:	091b      	lsrs	r3, r3, #4
 81050fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81050fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105100:	4b82      	ldr	r3, [pc, #520]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105104:	f003 0301 	and.w	r3, r3, #1
 8105108:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810510a:	4b80      	ldr	r3, [pc, #512]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810510c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810510e:	08db      	lsrs	r3, r3, #3
 8105110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105114:	68fa      	ldr	r2, [r7, #12]
 8105116:	fb02 f303 	mul.w	r3, r2, r3
 810511a:	ee07 3a90 	vmov	s15, r3
 810511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105122:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8105126:	693b      	ldr	r3, [r7, #16]
 8105128:	2b00      	cmp	r3, #0
 810512a:	f000 80e1 	beq.w	81052f0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 810512e:	697b      	ldr	r3, [r7, #20]
 8105130:	2b02      	cmp	r3, #2
 8105132:	f000 8083 	beq.w	810523c <HAL_RCC_GetSysClockFreq+0x204>
 8105136:	697b      	ldr	r3, [r7, #20]
 8105138:	2b02      	cmp	r3, #2
 810513a:	f200 80a1 	bhi.w	8105280 <HAL_RCC_GetSysClockFreq+0x248>
 810513e:	697b      	ldr	r3, [r7, #20]
 8105140:	2b00      	cmp	r3, #0
 8105142:	d003      	beq.n	810514c <HAL_RCC_GetSysClockFreq+0x114>
 8105144:	697b      	ldr	r3, [r7, #20]
 8105146:	2b01      	cmp	r3, #1
 8105148:	d056      	beq.n	81051f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810514a:	e099      	b.n	8105280 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810514c:	4b6f      	ldr	r3, [pc, #444]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	f003 0320 	and.w	r3, r3, #32
 8105154:	2b00      	cmp	r3, #0
 8105156:	d02d      	beq.n	81051b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105158:	4b6c      	ldr	r3, [pc, #432]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810515a:	681b      	ldr	r3, [r3, #0]
 810515c:	08db      	lsrs	r3, r3, #3
 810515e:	f003 0303 	and.w	r3, r3, #3
 8105162:	4a6b      	ldr	r2, [pc, #428]	@ (8105310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105164:	fa22 f303 	lsr.w	r3, r2, r3
 8105168:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	ee07 3a90 	vmov	s15, r3
 8105170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105174:	693b      	ldr	r3, [r7, #16]
 8105176:	ee07 3a90 	vmov	s15, r3
 810517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810517e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105182:	4b62      	ldr	r3, [pc, #392]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810518a:	ee07 3a90 	vmov	s15, r3
 810518e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105192:	ed97 6a02 	vldr	s12, [r7, #8]
 8105196:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810531c <HAL_RCC_GetSysClockFreq+0x2e4>
 810519a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810519e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81051a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81051b2:	e087      	b.n	81052c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81051b4:	693b      	ldr	r3, [r7, #16]
 81051b6:	ee07 3a90 	vmov	s15, r3
 81051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8105320 <HAL_RCC_GetSysClockFreq+0x2e8>
 81051c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81051c6:	4b51      	ldr	r3, [pc, #324]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81051c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81051ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81051ce:	ee07 3a90 	vmov	s15, r3
 81051d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81051da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810531c <HAL_RCC_GetSysClockFreq+0x2e4>
 81051de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81051ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81051f6:	e065      	b.n	81052c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81051f8:	693b      	ldr	r3, [r7, #16]
 81051fa:	ee07 3a90 	vmov	s15, r3
 81051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105202:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8105324 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810520a:	4b40      	ldr	r3, [pc, #256]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810520e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105212:	ee07 3a90 	vmov	s15, r3
 8105216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810521a:	ed97 6a02 	vldr	s12, [r7, #8]
 810521e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810531c <HAL_RCC_GetSysClockFreq+0x2e4>
 8105222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810522a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810522e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810523a:	e043      	b.n	81052c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810523c:	693b      	ldr	r3, [r7, #16]
 810523e:	ee07 3a90 	vmov	s15, r3
 8105242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105246:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8105328 <HAL_RCC_GetSysClockFreq+0x2f0>
 810524a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810524e:	4b2f      	ldr	r3, [pc, #188]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105256:	ee07 3a90 	vmov	s15, r3
 810525a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810525e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105262:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810531c <HAL_RCC_GetSysClockFreq+0x2e4>
 8105266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810526a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810526e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105276:	ee67 7a27 	vmul.f32	s15, s14, s15
 810527a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810527e:	e021      	b.n	81052c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105280:	693b      	ldr	r3, [r7, #16]
 8105282:	ee07 3a90 	vmov	s15, r3
 8105286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810528a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8105324 <HAL_RCC_GetSysClockFreq+0x2ec>
 810528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105292:	4b1e      	ldr	r3, [pc, #120]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810529a:	ee07 3a90 	vmov	s15, r3
 810529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81052a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810531c <HAL_RCC_GetSysClockFreq+0x2e4>
 81052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81052c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81052c4:	4b11      	ldr	r3, [pc, #68]	@ (810530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81052c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81052c8:	0a5b      	lsrs	r3, r3, #9
 81052ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81052ce:	3301      	adds	r3, #1
 81052d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81052d2:	683b      	ldr	r3, [r7, #0]
 81052d4:	ee07 3a90 	vmov	s15, r3
 81052d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81052dc:	edd7 6a07 	vldr	s13, [r7, #28]
 81052e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81052e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81052e8:	ee17 3a90 	vmov	r3, s15
 81052ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81052ee:	e005      	b.n	81052fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81052f0:	2300      	movs	r3, #0
 81052f2:	61bb      	str	r3, [r7, #24]
      break;
 81052f4:	e002      	b.n	81052fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81052f6:	4b07      	ldr	r3, [pc, #28]	@ (8105314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81052f8:	61bb      	str	r3, [r7, #24]
      break;
 81052fa:	bf00      	nop
  }

  return sysclockfreq;
 81052fc:	69bb      	ldr	r3, [r7, #24]
}
 81052fe:	4618      	mov	r0, r3
 8105300:	3724      	adds	r7, #36	@ 0x24
 8105302:	46bd      	mov	sp, r7
 8105304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105308:	4770      	bx	lr
 810530a:	bf00      	nop
 810530c:	58024400 	.word	0x58024400
 8105310:	03d09000 	.word	0x03d09000
 8105314:	003d0900 	.word	0x003d0900
 8105318:	017d7840 	.word	0x017d7840
 810531c:	46000000 	.word	0x46000000
 8105320:	4c742400 	.word	0x4c742400
 8105324:	4a742400 	.word	0x4a742400
 8105328:	4bbebc20 	.word	0x4bbebc20

0810532c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810532c:	b580      	push	{r7, lr}
 810532e:	b082      	sub	sp, #8
 8105330:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105332:	f7ff fe81 	bl	8105038 <HAL_RCC_GetSysClockFreq>
 8105336:	4602      	mov	r2, r0
 8105338:	4b11      	ldr	r3, [pc, #68]	@ (8105380 <HAL_RCC_GetHCLKFreq+0x54>)
 810533a:	699b      	ldr	r3, [r3, #24]
 810533c:	0a1b      	lsrs	r3, r3, #8
 810533e:	f003 030f 	and.w	r3, r3, #15
 8105342:	4910      	ldr	r1, [pc, #64]	@ (8105384 <HAL_RCC_GetHCLKFreq+0x58>)
 8105344:	5ccb      	ldrb	r3, [r1, r3]
 8105346:	f003 031f 	and.w	r3, r3, #31
 810534a:	fa22 f303 	lsr.w	r3, r2, r3
 810534e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105350:	4b0b      	ldr	r3, [pc, #44]	@ (8105380 <HAL_RCC_GetHCLKFreq+0x54>)
 8105352:	699b      	ldr	r3, [r3, #24]
 8105354:	f003 030f 	and.w	r3, r3, #15
 8105358:	4a0a      	ldr	r2, [pc, #40]	@ (8105384 <HAL_RCC_GetHCLKFreq+0x58>)
 810535a:	5cd3      	ldrb	r3, [r2, r3]
 810535c:	f003 031f 	and.w	r3, r3, #31
 8105360:	687a      	ldr	r2, [r7, #4]
 8105362:	fa22 f303 	lsr.w	r3, r2, r3
 8105366:	4a08      	ldr	r2, [pc, #32]	@ (8105388 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105368:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810536a:	4b07      	ldr	r3, [pc, #28]	@ (8105388 <HAL_RCC_GetHCLKFreq+0x5c>)
 810536c:	681b      	ldr	r3, [r3, #0]
 810536e:	4a07      	ldr	r2, [pc, #28]	@ (810538c <HAL_RCC_GetHCLKFreq+0x60>)
 8105370:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105372:	4b05      	ldr	r3, [pc, #20]	@ (8105388 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105374:	681b      	ldr	r3, [r3, #0]
}
 8105376:	4618      	mov	r0, r3
 8105378:	3708      	adds	r7, #8
 810537a:	46bd      	mov	sp, r7
 810537c:	bd80      	pop	{r7, pc}
 810537e:	bf00      	nop
 8105380:	58024400 	.word	0x58024400
 8105384:	0810fcbc 	.word	0x0810fcbc
 8105388:	10000004 	.word	0x10000004
 810538c:	10000000 	.word	0x10000000

08105390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105390:	b580      	push	{r7, lr}
 8105392:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105394:	f7ff ffca 	bl	810532c <HAL_RCC_GetHCLKFreq>
 8105398:	4602      	mov	r2, r0
 810539a:	4b06      	ldr	r3, [pc, #24]	@ (81053b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 810539c:	69db      	ldr	r3, [r3, #28]
 810539e:	091b      	lsrs	r3, r3, #4
 81053a0:	f003 0307 	and.w	r3, r3, #7
 81053a4:	4904      	ldr	r1, [pc, #16]	@ (81053b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 81053a6:	5ccb      	ldrb	r3, [r1, r3]
 81053a8:	f003 031f 	and.w	r3, r3, #31
 81053ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81053b0:	4618      	mov	r0, r3
 81053b2:	bd80      	pop	{r7, pc}
 81053b4:	58024400 	.word	0x58024400
 81053b8:	0810fcbc 	.word	0x0810fcbc

081053bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81053bc:	b580      	push	{r7, lr}
 81053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81053c0:	f7ff ffb4 	bl	810532c <HAL_RCC_GetHCLKFreq>
 81053c4:	4602      	mov	r2, r0
 81053c6:	4b06      	ldr	r3, [pc, #24]	@ (81053e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 81053c8:	69db      	ldr	r3, [r3, #28]
 81053ca:	0a1b      	lsrs	r3, r3, #8
 81053cc:	f003 0307 	and.w	r3, r3, #7
 81053d0:	4904      	ldr	r1, [pc, #16]	@ (81053e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 81053d2:	5ccb      	ldrb	r3, [r1, r3]
 81053d4:	f003 031f 	and.w	r3, r3, #31
 81053d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81053dc:	4618      	mov	r0, r3
 81053de:	bd80      	pop	{r7, pc}
 81053e0:	58024400 	.word	0x58024400
 81053e4:	0810fcbc 	.word	0x0810fcbc

081053e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81053e8:	b480      	push	{r7}
 81053ea:	b083      	sub	sp, #12
 81053ec:	af00      	add	r7, sp, #0
 81053ee:	6078      	str	r0, [r7, #4]
 81053f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81053f2:	687b      	ldr	r3, [r7, #4]
 81053f4:	223f      	movs	r2, #63	@ 0x3f
 81053f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81053f8:	4b1a      	ldr	r3, [pc, #104]	@ (8105464 <HAL_RCC_GetClockConfig+0x7c>)
 81053fa:	691b      	ldr	r3, [r3, #16]
 81053fc:	f003 0207 	and.w	r2, r3, #7
 8105400:	687b      	ldr	r3, [r7, #4]
 8105402:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8105404:	4b17      	ldr	r3, [pc, #92]	@ (8105464 <HAL_RCC_GetClockConfig+0x7c>)
 8105406:	699b      	ldr	r3, [r3, #24]
 8105408:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 810540c:	687b      	ldr	r3, [r7, #4]
 810540e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8105410:	4b14      	ldr	r3, [pc, #80]	@ (8105464 <HAL_RCC_GetClockConfig+0x7c>)
 8105412:	699b      	ldr	r3, [r3, #24]
 8105414:	f003 020f 	and.w	r2, r3, #15
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810541c:	4b11      	ldr	r3, [pc, #68]	@ (8105464 <HAL_RCC_GetClockConfig+0x7c>)
 810541e:	699b      	ldr	r3, [r3, #24]
 8105420:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8105428:	4b0e      	ldr	r3, [pc, #56]	@ (8105464 <HAL_RCC_GetClockConfig+0x7c>)
 810542a:	69db      	ldr	r3, [r3, #28]
 810542c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8105434:	4b0b      	ldr	r3, [pc, #44]	@ (8105464 <HAL_RCC_GetClockConfig+0x7c>)
 8105436:	69db      	ldr	r3, [r3, #28]
 8105438:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8105440:	4b08      	ldr	r3, [pc, #32]	@ (8105464 <HAL_RCC_GetClockConfig+0x7c>)
 8105442:	6a1b      	ldr	r3, [r3, #32]
 8105444:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810544c:	4b06      	ldr	r3, [pc, #24]	@ (8105468 <HAL_RCC_GetClockConfig+0x80>)
 810544e:	681b      	ldr	r3, [r3, #0]
 8105450:	f003 020f 	and.w	r2, r3, #15
 8105454:	683b      	ldr	r3, [r7, #0]
 8105456:	601a      	str	r2, [r3, #0]
}
 8105458:	bf00      	nop
 810545a:	370c      	adds	r7, #12
 810545c:	46bd      	mov	sp, r7
 810545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105462:	4770      	bx	lr
 8105464:	58024400 	.word	0x58024400
 8105468:	52002000 	.word	0x52002000

0810546c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810546c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105470:	b0cc      	sub	sp, #304	@ 0x130
 8105472:	af00      	add	r7, sp, #0
 8105474:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105478:	2300      	movs	r3, #0
 810547a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810547e:	2300      	movs	r3, #0
 8105480:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105484:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105488:	e9d3 2300 	ldrd	r2, r3, [r3]
 810548c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8105490:	2500      	movs	r5, #0
 8105492:	ea54 0305 	orrs.w	r3, r4, r5
 8105496:	d049      	beq.n	810552c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8105498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810549c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810549e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81054a2:	d02f      	beq.n	8105504 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81054a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81054a8:	d828      	bhi.n	81054fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 81054aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81054ae:	d01a      	beq.n	81054e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81054b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81054b4:	d822      	bhi.n	81054fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 81054b6:	2b00      	cmp	r3, #0
 81054b8:	d003      	beq.n	81054c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81054ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81054be:	d007      	beq.n	81054d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81054c0:	e01c      	b.n	81054fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81054c2:	4bb8      	ldr	r3, [pc, #736]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81054c6:	4ab7      	ldr	r2, [pc, #732]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81054c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81054cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81054ce:	e01a      	b.n	8105506 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81054d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81054d4:	3308      	adds	r3, #8
 81054d6:	2102      	movs	r1, #2
 81054d8:	4618      	mov	r0, r3
 81054da:	f002 fba1 	bl	8107c20 <RCCEx_PLL2_Config>
 81054de:	4603      	mov	r3, r0
 81054e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81054e4:	e00f      	b.n	8105506 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81054e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81054ea:	3328      	adds	r3, #40	@ 0x28
 81054ec:	2102      	movs	r1, #2
 81054ee:	4618      	mov	r0, r3
 81054f0:	f002 fc48 	bl	8107d84 <RCCEx_PLL3_Config>
 81054f4:	4603      	mov	r3, r0
 81054f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81054fa:	e004      	b.n	8105506 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81054fc:	2301      	movs	r3, #1
 81054fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105502:	e000      	b.n	8105506 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8105504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105506:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810550a:	2b00      	cmp	r3, #0
 810550c:	d10a      	bne.n	8105524 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810550e:	4ba5      	ldr	r3, [pc, #660]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105512:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8105516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810551a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810551c:	4aa1      	ldr	r2, [pc, #644]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810551e:	430b      	orrs	r3, r1
 8105520:	6513      	str	r3, [r2, #80]	@ 0x50
 8105522:	e003      	b.n	810552c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105524:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105528:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810552c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105534:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8105538:	f04f 0900 	mov.w	r9, #0
 810553c:	ea58 0309 	orrs.w	r3, r8, r9
 8105540:	d047      	beq.n	81055d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8105542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105548:	2b04      	cmp	r3, #4
 810554a:	d82a      	bhi.n	81055a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810554c:	a201      	add	r2, pc, #4	@ (adr r2, 8105554 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105552:	bf00      	nop
 8105554:	08105569 	.word	0x08105569
 8105558:	08105577 	.word	0x08105577
 810555c:	0810558d 	.word	0x0810558d
 8105560:	081055ab 	.word	0x081055ab
 8105564:	081055ab 	.word	0x081055ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105568:	4b8e      	ldr	r3, [pc, #568]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810556c:	4a8d      	ldr	r2, [pc, #564]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810556e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105574:	e01a      	b.n	81055ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105576:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810557a:	3308      	adds	r3, #8
 810557c:	2100      	movs	r1, #0
 810557e:	4618      	mov	r0, r3
 8105580:	f002 fb4e 	bl	8107c20 <RCCEx_PLL2_Config>
 8105584:	4603      	mov	r3, r0
 8105586:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810558a:	e00f      	b.n	81055ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810558c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105590:	3328      	adds	r3, #40	@ 0x28
 8105592:	2100      	movs	r1, #0
 8105594:	4618      	mov	r0, r3
 8105596:	f002 fbf5 	bl	8107d84 <RCCEx_PLL3_Config>
 810559a:	4603      	mov	r3, r0
 810559c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81055a0:	e004      	b.n	81055ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81055a2:	2301      	movs	r3, #1
 81055a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81055a8:	e000      	b.n	81055ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81055aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81055ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81055b0:	2b00      	cmp	r3, #0
 81055b2:	d10a      	bne.n	81055ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81055b4:	4b7b      	ldr	r3, [pc, #492]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81055b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81055b8:	f023 0107 	bic.w	r1, r3, #7
 81055bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81055c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81055c2:	4a78      	ldr	r2, [pc, #480]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81055c4:	430b      	orrs	r3, r1
 81055c6:	6513      	str	r3, [r2, #80]	@ 0x50
 81055c8:	e003      	b.n	81055d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81055ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81055d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81055da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81055de:	f04f 0b00 	mov.w	fp, #0
 81055e2:	ea5a 030b 	orrs.w	r3, sl, fp
 81055e6:	d04c      	beq.n	8105682 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81055e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81055ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81055ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81055f2:	d030      	beq.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81055f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81055f8:	d829      	bhi.n	810564e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81055fa:	2bc0      	cmp	r3, #192	@ 0xc0
 81055fc:	d02d      	beq.n	810565a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81055fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8105600:	d825      	bhi.n	810564e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105602:	2b80      	cmp	r3, #128	@ 0x80
 8105604:	d018      	beq.n	8105638 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8105606:	2b80      	cmp	r3, #128	@ 0x80
 8105608:	d821      	bhi.n	810564e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810560a:	2b00      	cmp	r3, #0
 810560c:	d002      	beq.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810560e:	2b40      	cmp	r3, #64	@ 0x40
 8105610:	d007      	beq.n	8105622 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8105612:	e01c      	b.n	810564e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105614:	4b63      	ldr	r3, [pc, #396]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105618:	4a62      	ldr	r2, [pc, #392]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810561a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810561e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105620:	e01c      	b.n	810565c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105622:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105626:	3308      	adds	r3, #8
 8105628:	2100      	movs	r1, #0
 810562a:	4618      	mov	r0, r3
 810562c:	f002 faf8 	bl	8107c20 <RCCEx_PLL2_Config>
 8105630:	4603      	mov	r3, r0
 8105632:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105636:	e011      	b.n	810565c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105638:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810563c:	3328      	adds	r3, #40	@ 0x28
 810563e:	2100      	movs	r1, #0
 8105640:	4618      	mov	r0, r3
 8105642:	f002 fb9f 	bl	8107d84 <RCCEx_PLL3_Config>
 8105646:	4603      	mov	r3, r0
 8105648:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810564c:	e006      	b.n	810565c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810564e:	2301      	movs	r3, #1
 8105650:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105654:	e002      	b.n	810565c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105656:	bf00      	nop
 8105658:	e000      	b.n	810565c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810565a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810565c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105660:	2b00      	cmp	r3, #0
 8105662:	d10a      	bne.n	810567a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105664:	4b4f      	ldr	r3, [pc, #316]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105668:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810566c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105672:	4a4c      	ldr	r2, [pc, #304]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105674:	430b      	orrs	r3, r1
 8105676:	6513      	str	r3, [r2, #80]	@ 0x50
 8105678:	e003      	b.n	8105682 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810567a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810567e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105682:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105686:	e9d3 2300 	ldrd	r2, r3, [r3]
 810568a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810568e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8105692:	2300      	movs	r3, #0
 8105694:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8105698:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810569c:	460b      	mov	r3, r1
 810569e:	4313      	orrs	r3, r2
 81056a0:	d053      	beq.n	810574a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81056a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81056a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81056aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81056ae:	d035      	beq.n	810571c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81056b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81056b4:	d82e      	bhi.n	8105714 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81056b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81056ba:	d031      	beq.n	8105720 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81056bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81056c0:	d828      	bhi.n	8105714 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81056c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81056c6:	d01a      	beq.n	81056fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 81056c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81056cc:	d822      	bhi.n	8105714 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81056ce:	2b00      	cmp	r3, #0
 81056d0:	d003      	beq.n	81056da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81056d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81056d6:	d007      	beq.n	81056e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81056d8:	e01c      	b.n	8105714 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81056da:	4b32      	ldr	r3, [pc, #200]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81056de:	4a31      	ldr	r2, [pc, #196]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81056e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81056e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81056e6:	e01c      	b.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81056e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81056ec:	3308      	adds	r3, #8
 81056ee:	2100      	movs	r1, #0
 81056f0:	4618      	mov	r0, r3
 81056f2:	f002 fa95 	bl	8107c20 <RCCEx_PLL2_Config>
 81056f6:	4603      	mov	r3, r0
 81056f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81056fc:	e011      	b.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81056fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105702:	3328      	adds	r3, #40	@ 0x28
 8105704:	2100      	movs	r1, #0
 8105706:	4618      	mov	r0, r3
 8105708:	f002 fb3c 	bl	8107d84 <RCCEx_PLL3_Config>
 810570c:	4603      	mov	r3, r0
 810570e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105712:	e006      	b.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105714:	2301      	movs	r3, #1
 8105716:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810571a:	e002      	b.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810571c:	bf00      	nop
 810571e:	e000      	b.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105722:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105726:	2b00      	cmp	r3, #0
 8105728:	d10b      	bne.n	8105742 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810572a:	4b1e      	ldr	r3, [pc, #120]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810572c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810572e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8105732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105736:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810573a:	4a1a      	ldr	r2, [pc, #104]	@ (81057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810573c:	430b      	orrs	r3, r1
 810573e:	6593      	str	r3, [r2, #88]	@ 0x58
 8105740:	e003      	b.n	810574a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105742:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105746:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810574a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105752:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8105756:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810575a:	2300      	movs	r3, #0
 810575c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8105760:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8105764:	460b      	mov	r3, r1
 8105766:	4313      	orrs	r3, r2
 8105768:	d056      	beq.n	8105818 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810576a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810576e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8105772:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105776:	d038      	beq.n	81057ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8105778:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810577c:	d831      	bhi.n	81057e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810577e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105782:	d034      	beq.n	81057ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8105784:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105788:	d82b      	bhi.n	81057e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810578a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810578e:	d01d      	beq.n	81057cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105790:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105794:	d825      	bhi.n	81057e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105796:	2b00      	cmp	r3, #0
 8105798:	d006      	beq.n	81057a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810579a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810579e:	d00a      	beq.n	81057b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81057a0:	e01f      	b.n	81057e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81057a2:	bf00      	nop
 81057a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81057a8:	4ba2      	ldr	r3, [pc, #648]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057ac:	4aa1      	ldr	r2, [pc, #644]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81057ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81057b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81057b4:	e01c      	b.n	81057f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81057b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81057ba:	3308      	adds	r3, #8
 81057bc:	2100      	movs	r1, #0
 81057be:	4618      	mov	r0, r3
 81057c0:	f002 fa2e 	bl	8107c20 <RCCEx_PLL2_Config>
 81057c4:	4603      	mov	r3, r0
 81057c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81057ca:	e011      	b.n	81057f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81057cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81057d0:	3328      	adds	r3, #40	@ 0x28
 81057d2:	2100      	movs	r1, #0
 81057d4:	4618      	mov	r0, r3
 81057d6:	f002 fad5 	bl	8107d84 <RCCEx_PLL3_Config>
 81057da:	4603      	mov	r3, r0
 81057dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81057e0:	e006      	b.n	81057f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81057e2:	2301      	movs	r3, #1
 81057e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81057e8:	e002      	b.n	81057f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81057ea:	bf00      	nop
 81057ec:	e000      	b.n	81057f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81057ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 81057f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81057f4:	2b00      	cmp	r3, #0
 81057f6:	d10b      	bne.n	8105810 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81057f8:	4b8e      	ldr	r3, [pc, #568]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81057fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81057fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8105800:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105804:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8105808:	4a8a      	ldr	r2, [pc, #552]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810580a:	430b      	orrs	r3, r1
 810580c:	6593      	str	r3, [r2, #88]	@ 0x58
 810580e:	e003      	b.n	8105818 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105810:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105814:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105820:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8105824:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8105828:	2300      	movs	r3, #0
 810582a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810582e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8105832:	460b      	mov	r3, r1
 8105834:	4313      	orrs	r3, r2
 8105836:	d03a      	beq.n	81058ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8105838:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810583c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810583e:	2b30      	cmp	r3, #48	@ 0x30
 8105840:	d01f      	beq.n	8105882 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8105842:	2b30      	cmp	r3, #48	@ 0x30
 8105844:	d819      	bhi.n	810587a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105846:	2b20      	cmp	r3, #32
 8105848:	d00c      	beq.n	8105864 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810584a:	2b20      	cmp	r3, #32
 810584c:	d815      	bhi.n	810587a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810584e:	2b00      	cmp	r3, #0
 8105850:	d019      	beq.n	8105886 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8105852:	2b10      	cmp	r3, #16
 8105854:	d111      	bne.n	810587a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105856:	4b77      	ldr	r3, [pc, #476]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810585a:	4a76      	ldr	r2, [pc, #472]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810585c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105862:	e011      	b.n	8105888 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105868:	3308      	adds	r3, #8
 810586a:	2102      	movs	r1, #2
 810586c:	4618      	mov	r0, r3
 810586e:	f002 f9d7 	bl	8107c20 <RCCEx_PLL2_Config>
 8105872:	4603      	mov	r3, r0
 8105874:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105878:	e006      	b.n	8105888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810587a:	2301      	movs	r3, #1
 810587c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105880:	e002      	b.n	8105888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105882:	bf00      	nop
 8105884:	e000      	b.n	8105888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105888:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810588c:	2b00      	cmp	r3, #0
 810588e:	d10a      	bne.n	81058a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105890:	4b68      	ldr	r3, [pc, #416]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105894:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8105898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810589c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810589e:	4a65      	ldr	r2, [pc, #404]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81058a0:	430b      	orrs	r3, r1
 81058a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81058a4:	e003      	b.n	81058ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81058aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81058ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81058ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81058be:	2300      	movs	r3, #0
 81058c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81058c4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81058c8:	460b      	mov	r3, r1
 81058ca:	4313      	orrs	r3, r2
 81058cc:	d051      	beq.n	8105972 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81058ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81058d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81058d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81058d8:	d035      	beq.n	8105946 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81058da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81058de:	d82e      	bhi.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81058e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81058e4:	d031      	beq.n	810594a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81058e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81058ea:	d828      	bhi.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81058ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81058f0:	d01a      	beq.n	8105928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81058f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81058f6:	d822      	bhi.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81058f8:	2b00      	cmp	r3, #0
 81058fa:	d003      	beq.n	8105904 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81058fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105900:	d007      	beq.n	8105912 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8105902:	e01c      	b.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105904:	4b4b      	ldr	r3, [pc, #300]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105908:	4a4a      	ldr	r2, [pc, #296]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810590a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810590e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105910:	e01c      	b.n	810594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105916:	3308      	adds	r3, #8
 8105918:	2100      	movs	r1, #0
 810591a:	4618      	mov	r0, r3
 810591c:	f002 f980 	bl	8107c20 <RCCEx_PLL2_Config>
 8105920:	4603      	mov	r3, r0
 8105922:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105926:	e011      	b.n	810594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105928:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810592c:	3328      	adds	r3, #40	@ 0x28
 810592e:	2100      	movs	r1, #0
 8105930:	4618      	mov	r0, r3
 8105932:	f002 fa27 	bl	8107d84 <RCCEx_PLL3_Config>
 8105936:	4603      	mov	r3, r0
 8105938:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810593c:	e006      	b.n	810594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810593e:	2301      	movs	r3, #1
 8105940:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105944:	e002      	b.n	810594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105946:	bf00      	nop
 8105948:	e000      	b.n	810594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810594a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810594c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105950:	2b00      	cmp	r3, #0
 8105952:	d10a      	bne.n	810596a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105954:	4b37      	ldr	r3, [pc, #220]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105958:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810595c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105962:	4a34      	ldr	r2, [pc, #208]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105964:	430b      	orrs	r3, r1
 8105966:	6513      	str	r3, [r2, #80]	@ 0x50
 8105968:	e003      	b.n	8105972 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810596a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810596e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105976:	e9d3 2300 	ldrd	r2, r3, [r3]
 810597a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810597e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8105982:	2300      	movs	r3, #0
 8105984:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8105988:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810598c:	460b      	mov	r3, r1
 810598e:	4313      	orrs	r3, r2
 8105990:	d056      	beq.n	8105a40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8105992:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810599c:	d033      	beq.n	8105a06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810599e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81059a2:	d82c      	bhi.n	81059fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 81059a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81059a8:	d02f      	beq.n	8105a0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81059aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81059ae:	d826      	bhi.n	81059fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 81059b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81059b4:	d02b      	beq.n	8105a0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81059b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81059ba:	d820      	bhi.n	81059fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 81059bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81059c0:	d012      	beq.n	81059e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81059c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81059c6:	d81a      	bhi.n	81059fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 81059c8:	2b00      	cmp	r3, #0
 81059ca:	d022      	beq.n	8105a12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81059cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81059d0:	d115      	bne.n	81059fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81059d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81059d6:	3308      	adds	r3, #8
 81059d8:	2101      	movs	r1, #1
 81059da:	4618      	mov	r0, r3
 81059dc:	f002 f920 	bl	8107c20 <RCCEx_PLL2_Config>
 81059e0:	4603      	mov	r3, r0
 81059e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81059e6:	e015      	b.n	8105a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81059e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81059ec:	3328      	adds	r3, #40	@ 0x28
 81059ee:	2101      	movs	r1, #1
 81059f0:	4618      	mov	r0, r3
 81059f2:	f002 f9c7 	bl	8107d84 <RCCEx_PLL3_Config>
 81059f6:	4603      	mov	r3, r0
 81059f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81059fc:	e00a      	b.n	8105a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81059fe:	2301      	movs	r3, #1
 8105a00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105a04:	e006      	b.n	8105a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105a06:	bf00      	nop
 8105a08:	e004      	b.n	8105a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105a0a:	bf00      	nop
 8105a0c:	e002      	b.n	8105a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105a0e:	bf00      	nop
 8105a10:	e000      	b.n	8105a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105a14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105a18:	2b00      	cmp	r3, #0
 8105a1a:	d10d      	bne.n	8105a38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105a1c:	4b05      	ldr	r3, [pc, #20]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105a20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8105a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105a2a:	4a02      	ldr	r2, [pc, #8]	@ (8105a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105a2c:	430b      	orrs	r3, r1
 8105a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8105a30:	e006      	b.n	8105a40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8105a32:	bf00      	nop
 8105a34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105a3c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a48:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8105a4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8105a50:	2300      	movs	r3, #0
 8105a52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8105a56:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8105a5a:	460b      	mov	r3, r1
 8105a5c:	4313      	orrs	r3, r2
 8105a5e:	d055      	beq.n	8105b0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8105a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105a6c:	d033      	beq.n	8105ad6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8105a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105a72:	d82c      	bhi.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105a78:	d02f      	beq.n	8105ada <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8105a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105a7e:	d826      	bhi.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105a80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105a84:	d02b      	beq.n	8105ade <HAL_RCCEx_PeriphCLKConfig+0x672>
 8105a86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105a8a:	d820      	bhi.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105a90:	d012      	beq.n	8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8105a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105a96:	d81a      	bhi.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105a98:	2b00      	cmp	r3, #0
 8105a9a:	d022      	beq.n	8105ae2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8105a9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105aa0:	d115      	bne.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105aa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105aa6:	3308      	adds	r3, #8
 8105aa8:	2101      	movs	r1, #1
 8105aaa:	4618      	mov	r0, r3
 8105aac:	f002 f8b8 	bl	8107c20 <RCCEx_PLL2_Config>
 8105ab0:	4603      	mov	r3, r0
 8105ab2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8105ab6:	e015      	b.n	8105ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105abc:	3328      	adds	r3, #40	@ 0x28
 8105abe:	2101      	movs	r1, #1
 8105ac0:	4618      	mov	r0, r3
 8105ac2:	f002 f95f 	bl	8107d84 <RCCEx_PLL3_Config>
 8105ac6:	4603      	mov	r3, r0
 8105ac8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8105acc:	e00a      	b.n	8105ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8105ace:	2301      	movs	r3, #1
 8105ad0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105ad4:	e006      	b.n	8105ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105ad6:	bf00      	nop
 8105ad8:	e004      	b.n	8105ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105ada:	bf00      	nop
 8105adc:	e002      	b.n	8105ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105ade:	bf00      	nop
 8105ae0:	e000      	b.n	8105ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ae4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105ae8:	2b00      	cmp	r3, #0
 8105aea:	d10b      	bne.n	8105b04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105aec:	4bb7      	ldr	r3, [pc, #732]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105af0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8105af4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105af8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105afc:	4ab3      	ldr	r2, [pc, #716]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105afe:	430b      	orrs	r3, r1
 8105b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8105b02:	e003      	b.n	8105b0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105b08:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8105b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b14:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8105b18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8105b1c:	2300      	movs	r3, #0
 8105b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8105b22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8105b26:	460b      	mov	r3, r1
 8105b28:	4313      	orrs	r3, r2
 8105b2a:	d02a      	beq.n	8105b82 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8105b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105b32:	2b00      	cmp	r3, #0
 8105b34:	d011      	beq.n	8105b5a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8105b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105b3a:	d10a      	bne.n	8105b52 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b40:	3308      	adds	r3, #8
 8105b42:	2101      	movs	r1, #1
 8105b44:	4618      	mov	r0, r3
 8105b46:	f002 f86b 	bl	8107c20 <RCCEx_PLL2_Config>
 8105b4a:	4603      	mov	r3, r0
 8105b4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8105b50:	e004      	b.n	8105b5c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105b52:	2301      	movs	r3, #1
 8105b54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105b58:	e000      	b.n	8105b5c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8105b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105b60:	2b00      	cmp	r3, #0
 8105b62:	d10a      	bne.n	8105b7a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8105b64:	4b99      	ldr	r3, [pc, #612]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105b68:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8105b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105b72:	4a96      	ldr	r2, [pc, #600]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105b74:	430b      	orrs	r3, r1
 8105b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105b78:	e003      	b.n	8105b82 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105b7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b8a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8105b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8105b92:	2300      	movs	r3, #0
 8105b94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8105b98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8105b9c:	460b      	mov	r3, r1
 8105b9e:	4313      	orrs	r3, r2
 8105ba0:	d037      	beq.n	8105c12 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8105ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8105ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105bac:	d00e      	beq.n	8105bcc <HAL_RCCEx_PeriphCLKConfig+0x760>
 8105bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105bb2:	d816      	bhi.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8105bb4:	2b00      	cmp	r3, #0
 8105bb6:	d018      	beq.n	8105bea <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8105bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105bbc:	d111      	bne.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105bbe:	4b83      	ldr	r3, [pc, #524]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105bc2:	4a82      	ldr	r2, [pc, #520]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8105bca:	e00f      	b.n	8105bec <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105bd0:	3308      	adds	r3, #8
 8105bd2:	2101      	movs	r1, #1
 8105bd4:	4618      	mov	r0, r3
 8105bd6:	f002 f823 	bl	8107c20 <RCCEx_PLL2_Config>
 8105bda:	4603      	mov	r3, r0
 8105bdc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8105be0:	e004      	b.n	8105bec <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105be2:	2301      	movs	r3, #1
 8105be4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105be8:	e000      	b.n	8105bec <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8105bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105bec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105bf0:	2b00      	cmp	r3, #0
 8105bf2:	d10a      	bne.n	8105c0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105bf4:	4b75      	ldr	r3, [pc, #468]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105bf8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8105bfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8105c02:	4a72      	ldr	r2, [pc, #456]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105c04:	430b      	orrs	r3, r1
 8105c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8105c08:	e003      	b.n	8105c12 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105c0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105c12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c1a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8105c1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8105c22:	2300      	movs	r3, #0
 8105c24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8105c28:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8105c2c:	460b      	mov	r3, r1
 8105c2e:	4313      	orrs	r3, r2
 8105c30:	d03a      	beq.n	8105ca8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8105c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105c38:	2b03      	cmp	r3, #3
 8105c3a:	d81d      	bhi.n	8105c78 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8105c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8105c44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8105c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105c42:	bf00      	nop
 8105c44:	08105c81 	.word	0x08105c81
 8105c48:	08105c55 	.word	0x08105c55
 8105c4c:	08105c63 	.word	0x08105c63
 8105c50:	08105c81 	.word	0x08105c81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c54:	4b5d      	ldr	r3, [pc, #372]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105c58:	4a5c      	ldr	r2, [pc, #368]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105c60:	e00f      	b.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c66:	3308      	adds	r3, #8
 8105c68:	2102      	movs	r1, #2
 8105c6a:	4618      	mov	r0, r3
 8105c6c:	f001 ffd8 	bl	8107c20 <RCCEx_PLL2_Config>
 8105c70:	4603      	mov	r3, r0
 8105c72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105c76:	e004      	b.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105c78:	2301      	movs	r3, #1
 8105c7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105c7e:	e000      	b.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8105c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105c86:	2b00      	cmp	r3, #0
 8105c88:	d10a      	bne.n	8105ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105c8a:	4b50      	ldr	r3, [pc, #320]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105c8e:	f023 0103 	bic.w	r1, r3, #3
 8105c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105c98:	4a4c      	ldr	r2, [pc, #304]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105c9a:	430b      	orrs	r3, r1
 8105c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105c9e:	e003      	b.n	8105ca8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ca0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105ca4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105cb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8105cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8105cb8:	2300      	movs	r3, #0
 8105cba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8105cbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8105cc2:	460b      	mov	r3, r1
 8105cc4:	4313      	orrs	r3, r2
 8105cc6:	f000 80a0 	beq.w	8105e0a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105cca:	4b41      	ldr	r3, [pc, #260]	@ (8105dd0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105ccc:	681b      	ldr	r3, [r3, #0]
 8105cce:	4a40      	ldr	r2, [pc, #256]	@ (8105dd0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105cd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105cd6:	f7fc fe03 	bl	81028e0 <HAL_GetTick>
 8105cda:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105cde:	e00b      	b.n	8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105ce0:	f7fc fdfe 	bl	81028e0 <HAL_GetTick>
 8105ce4:	4602      	mov	r2, r0
 8105ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8105cea:	1ad3      	subs	r3, r2, r3
 8105cec:	2b64      	cmp	r3, #100	@ 0x64
 8105cee:	d903      	bls.n	8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8105cf0:	2303      	movs	r3, #3
 8105cf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105cf6:	e005      	b.n	8105d04 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105cf8:	4b35      	ldr	r3, [pc, #212]	@ (8105dd0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105cfa:	681b      	ldr	r3, [r3, #0]
 8105cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105d00:	2b00      	cmp	r3, #0
 8105d02:	d0ed      	beq.n	8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8105d04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105d08:	2b00      	cmp	r3, #0
 8105d0a:	d17a      	bne.n	8105e02 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105d0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8105d10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105d18:	4053      	eors	r3, r2
 8105d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105d1e:	2b00      	cmp	r3, #0
 8105d20:	d015      	beq.n	8105d4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105d22:	4b2a      	ldr	r3, [pc, #168]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105d2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105d2e:	4b27      	ldr	r3, [pc, #156]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105d32:	4a26      	ldr	r2, [pc, #152]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8105d38:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105d3a:	4b24      	ldr	r3, [pc, #144]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105d3e:	4a23      	ldr	r2, [pc, #140]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105d44:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105d46:	4a21      	ldr	r2, [pc, #132]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105d48:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8105d4c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105d5a:	d118      	bne.n	8105d8e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105d5c:	f7fc fdc0 	bl	81028e0 <HAL_GetTick>
 8105d60:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105d64:	e00d      	b.n	8105d82 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105d66:	f7fc fdbb 	bl	81028e0 <HAL_GetTick>
 8105d6a:	4602      	mov	r2, r0
 8105d6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8105d70:	1ad2      	subs	r2, r2, r3
 8105d72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8105d76:	429a      	cmp	r2, r3
 8105d78:	d903      	bls.n	8105d82 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8105d7a:	2303      	movs	r3, #3
 8105d7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8105d80:	e005      	b.n	8105d8e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105d82:	4b12      	ldr	r3, [pc, #72]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105d86:	f003 0302 	and.w	r3, r3, #2
 8105d8a:	2b00      	cmp	r3, #0
 8105d8c:	d0eb      	beq.n	8105d66 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8105d8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105d92:	2b00      	cmp	r3, #0
 8105d94:	d130      	bne.n	8105df8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d9a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105da2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105da6:	d115      	bne.n	8105dd4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8105da8:	4b08      	ldr	r3, [pc, #32]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105daa:	691b      	ldr	r3, [r3, #16]
 8105dac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8105db0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105db4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105db8:	091b      	lsrs	r3, r3, #4
 8105dba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8105dbe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8105dc2:	4a02      	ldr	r2, [pc, #8]	@ (8105dcc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105dc4:	430b      	orrs	r3, r1
 8105dc6:	6113      	str	r3, [r2, #16]
 8105dc8:	e00a      	b.n	8105de0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8105dca:	bf00      	nop
 8105dcc:	58024400 	.word	0x58024400
 8105dd0:	58024800 	.word	0x58024800
 8105dd4:	4bd4      	ldr	r3, [pc, #848]	@ (8106128 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8105dd6:	691b      	ldr	r3, [r3, #16]
 8105dd8:	4ad3      	ldr	r2, [pc, #844]	@ (8106128 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8105dda:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8105dde:	6113      	str	r3, [r2, #16]
 8105de0:	4bd1      	ldr	r3, [pc, #836]	@ (8106128 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8105de2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8105de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105de8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105df0:	4acd      	ldr	r2, [pc, #820]	@ (8106128 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8105df2:	430b      	orrs	r3, r1
 8105df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8105df6:	e008      	b.n	8105e0a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105df8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105dfc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8105e00:	e003      	b.n	8105e0a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105e06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e12:	f002 0301 	and.w	r3, r2, #1
 8105e16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8105e1a:	2300      	movs	r3, #0
 8105e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8105e20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8105e24:	460b      	mov	r3, r1
 8105e26:	4313      	orrs	r3, r2
 8105e28:	f000 808b 	beq.w	8105f42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8105e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8105e34:	2b28      	cmp	r3, #40	@ 0x28
 8105e36:	d86b      	bhi.n	8105f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8105e38:	a201      	add	r2, pc, #4	@ (adr r2, 8105e40 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8105e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e3e:	bf00      	nop
 8105e40:	08105f19 	.word	0x08105f19
 8105e44:	08105f11 	.word	0x08105f11
 8105e48:	08105f11 	.word	0x08105f11
 8105e4c:	08105f11 	.word	0x08105f11
 8105e50:	08105f11 	.word	0x08105f11
 8105e54:	08105f11 	.word	0x08105f11
 8105e58:	08105f11 	.word	0x08105f11
 8105e5c:	08105f11 	.word	0x08105f11
 8105e60:	08105ee5 	.word	0x08105ee5
 8105e64:	08105f11 	.word	0x08105f11
 8105e68:	08105f11 	.word	0x08105f11
 8105e6c:	08105f11 	.word	0x08105f11
 8105e70:	08105f11 	.word	0x08105f11
 8105e74:	08105f11 	.word	0x08105f11
 8105e78:	08105f11 	.word	0x08105f11
 8105e7c:	08105f11 	.word	0x08105f11
 8105e80:	08105efb 	.word	0x08105efb
 8105e84:	08105f11 	.word	0x08105f11
 8105e88:	08105f11 	.word	0x08105f11
 8105e8c:	08105f11 	.word	0x08105f11
 8105e90:	08105f11 	.word	0x08105f11
 8105e94:	08105f11 	.word	0x08105f11
 8105e98:	08105f11 	.word	0x08105f11
 8105e9c:	08105f11 	.word	0x08105f11
 8105ea0:	08105f19 	.word	0x08105f19
 8105ea4:	08105f11 	.word	0x08105f11
 8105ea8:	08105f11 	.word	0x08105f11
 8105eac:	08105f11 	.word	0x08105f11
 8105eb0:	08105f11 	.word	0x08105f11
 8105eb4:	08105f11 	.word	0x08105f11
 8105eb8:	08105f11 	.word	0x08105f11
 8105ebc:	08105f11 	.word	0x08105f11
 8105ec0:	08105f19 	.word	0x08105f19
 8105ec4:	08105f11 	.word	0x08105f11
 8105ec8:	08105f11 	.word	0x08105f11
 8105ecc:	08105f11 	.word	0x08105f11
 8105ed0:	08105f11 	.word	0x08105f11
 8105ed4:	08105f11 	.word	0x08105f11
 8105ed8:	08105f11 	.word	0x08105f11
 8105edc:	08105f11 	.word	0x08105f11
 8105ee0:	08105f19 	.word	0x08105f19
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ee8:	3308      	adds	r3, #8
 8105eea:	2101      	movs	r1, #1
 8105eec:	4618      	mov	r0, r3
 8105eee:	f001 fe97 	bl	8107c20 <RCCEx_PLL2_Config>
 8105ef2:	4603      	mov	r3, r0
 8105ef4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105ef8:	e00f      	b.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105efe:	3328      	adds	r3, #40	@ 0x28
 8105f00:	2101      	movs	r1, #1
 8105f02:	4618      	mov	r0, r3
 8105f04:	f001 ff3e 	bl	8107d84 <RCCEx_PLL3_Config>
 8105f08:	4603      	mov	r3, r0
 8105f0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105f0e:	e004      	b.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f10:	2301      	movs	r3, #1
 8105f12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105f16:	e000      	b.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8105f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105f1e:	2b00      	cmp	r3, #0
 8105f20:	d10b      	bne.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105f22:	4b81      	ldr	r3, [pc, #516]	@ (8106128 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8105f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105f26:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8105f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8105f32:	4a7d      	ldr	r2, [pc, #500]	@ (8106128 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8105f34:	430b      	orrs	r3, r1
 8105f36:	6553      	str	r3, [r2, #84]	@ 0x54
 8105f38:	e003      	b.n	8105f42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105f3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f4a:	f002 0302 	and.w	r3, r2, #2
 8105f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8105f52:	2300      	movs	r3, #0
 8105f54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8105f58:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8105f5c:	460b      	mov	r3, r1
 8105f5e:	4313      	orrs	r3, r2
 8105f60:	d042      	beq.n	8105fe8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8105f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8105f68:	2b05      	cmp	r3, #5
 8105f6a:	d825      	bhi.n	8105fb8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8105f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8105f74 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8105f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f72:	bf00      	nop
 8105f74:	08105fc1 	.word	0x08105fc1
 8105f78:	08105f8d 	.word	0x08105f8d
 8105f7c:	08105fa3 	.word	0x08105fa3
 8105f80:	08105fc1 	.word	0x08105fc1
 8105f84:	08105fc1 	.word	0x08105fc1
 8105f88:	08105fc1 	.word	0x08105fc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f90:	3308      	adds	r3, #8
 8105f92:	2101      	movs	r1, #1
 8105f94:	4618      	mov	r0, r3
 8105f96:	f001 fe43 	bl	8107c20 <RCCEx_PLL2_Config>
 8105f9a:	4603      	mov	r3, r0
 8105f9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105fa0:	e00f      	b.n	8105fc2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105fa6:	3328      	adds	r3, #40	@ 0x28
 8105fa8:	2101      	movs	r1, #1
 8105faa:	4618      	mov	r0, r3
 8105fac:	f001 feea 	bl	8107d84 <RCCEx_PLL3_Config>
 8105fb0:	4603      	mov	r3, r0
 8105fb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105fb6:	e004      	b.n	8105fc2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105fb8:	2301      	movs	r3, #1
 8105fba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105fbe:	e000      	b.n	8105fc2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8105fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105fc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105fc6:	2b00      	cmp	r3, #0
 8105fc8:	d10a      	bne.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8105fca:	4b57      	ldr	r3, [pc, #348]	@ (8106128 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8105fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105fce:	f023 0107 	bic.w	r1, r3, #7
 8105fd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8105fd8:	4a53      	ldr	r2, [pc, #332]	@ (8106128 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8105fda:	430b      	orrs	r3, r1
 8105fdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8105fde:	e003      	b.n	8105fe8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105fe0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105fe4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ff0:	f002 0304 	and.w	r3, r2, #4
 8105ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8105ff8:	2300      	movs	r3, #0
 8105ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8105ffe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8106002:	460b      	mov	r3, r1
 8106004:	4313      	orrs	r3, r2
 8106006:	d044      	beq.n	8106092 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810600c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106010:	2b05      	cmp	r3, #5
 8106012:	d825      	bhi.n	8106060 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8106014:	a201      	add	r2, pc, #4	@ (adr r2, 810601c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8106016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810601a:	bf00      	nop
 810601c:	08106069 	.word	0x08106069
 8106020:	08106035 	.word	0x08106035
 8106024:	0810604b 	.word	0x0810604b
 8106028:	08106069 	.word	0x08106069
 810602c:	08106069 	.word	0x08106069
 8106030:	08106069 	.word	0x08106069
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106034:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106038:	3308      	adds	r3, #8
 810603a:	2101      	movs	r1, #1
 810603c:	4618      	mov	r0, r3
 810603e:	f001 fdef 	bl	8107c20 <RCCEx_PLL2_Config>
 8106042:	4603      	mov	r3, r0
 8106044:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106048:	e00f      	b.n	810606a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810604a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810604e:	3328      	adds	r3, #40	@ 0x28
 8106050:	2101      	movs	r1, #1
 8106052:	4618      	mov	r0, r3
 8106054:	f001 fe96 	bl	8107d84 <RCCEx_PLL3_Config>
 8106058:	4603      	mov	r3, r0
 810605a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810605e:	e004      	b.n	810606a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106060:	2301      	movs	r3, #1
 8106062:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106066:	e000      	b.n	810606a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8106068:	bf00      	nop
    }

    if (ret == HAL_OK)
 810606a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810606e:	2b00      	cmp	r3, #0
 8106070:	d10b      	bne.n	810608a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106072:	4b2d      	ldr	r3, [pc, #180]	@ (8106128 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106076:	f023 0107 	bic.w	r1, r3, #7
 810607a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810607e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106082:	4a29      	ldr	r2, [pc, #164]	@ (8106128 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106084:	430b      	orrs	r3, r1
 8106086:	6593      	str	r3, [r2, #88]	@ 0x58
 8106088:	e003      	b.n	8106092 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810608a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810608e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106092:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106096:	e9d3 2300 	ldrd	r2, r3, [r3]
 810609a:	f002 0320 	and.w	r3, r2, #32
 810609e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81060a2:	2300      	movs	r3, #0
 81060a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81060a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81060ac:	460b      	mov	r3, r1
 81060ae:	4313      	orrs	r3, r2
 81060b0:	d057      	beq.n	8106162 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81060b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81060ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81060be:	d035      	beq.n	810612c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 81060c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81060c4:	d82c      	bhi.n	8106120 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81060c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81060ca:	d031      	beq.n	8106130 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 81060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81060d0:	d826      	bhi.n	8106120 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81060d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81060d6:	d02d      	beq.n	8106134 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 81060d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81060dc:	d820      	bhi.n	8106120 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81060de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81060e2:	d012      	beq.n	810610a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 81060e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81060e8:	d81a      	bhi.n	8106120 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81060ea:	2b00      	cmp	r3, #0
 81060ec:	d024      	beq.n	8106138 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 81060ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81060f2:	d115      	bne.n	8106120 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81060f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060f8:	3308      	adds	r3, #8
 81060fa:	2100      	movs	r1, #0
 81060fc:	4618      	mov	r0, r3
 81060fe:	f001 fd8f 	bl	8107c20 <RCCEx_PLL2_Config>
 8106102:	4603      	mov	r3, r0
 8106104:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106108:	e017      	b.n	810613a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810610a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810610e:	3328      	adds	r3, #40	@ 0x28
 8106110:	2102      	movs	r1, #2
 8106112:	4618      	mov	r0, r3
 8106114:	f001 fe36 	bl	8107d84 <RCCEx_PLL3_Config>
 8106118:	4603      	mov	r3, r0
 810611a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810611e:	e00c      	b.n	810613a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106120:	2301      	movs	r3, #1
 8106122:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106126:	e008      	b.n	810613a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8106128:	58024400 	.word	0x58024400
        break;
 810612c:	bf00      	nop
 810612e:	e004      	b.n	810613a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106130:	bf00      	nop
 8106132:	e002      	b.n	810613a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106134:	bf00      	nop
 8106136:	e000      	b.n	810613a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106138:	bf00      	nop
    }

    if (ret == HAL_OK)
 810613a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810613e:	2b00      	cmp	r3, #0
 8106140:	d10b      	bne.n	810615a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106142:	4bc2      	ldr	r3, [pc, #776]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106146:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810614a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810614e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106152:	4abe      	ldr	r2, [pc, #760]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106154:	430b      	orrs	r3, r1
 8106156:	6553      	str	r3, [r2, #84]	@ 0x54
 8106158:	e003      	b.n	8106162 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810615a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810615e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106162:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106166:	e9d3 2300 	ldrd	r2, r3, [r3]
 810616a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810616e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8106172:	2300      	movs	r3, #0
 8106174:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8106178:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810617c:	460b      	mov	r3, r1
 810617e:	4313      	orrs	r3, r2
 8106180:	d055      	beq.n	810622e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8106182:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106186:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810618a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810618e:	d033      	beq.n	81061f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8106190:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106194:	d82c      	bhi.n	81061f0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810619a:	d02f      	beq.n	81061fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 810619c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81061a0:	d826      	bhi.n	81061f0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81061a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81061a6:	d02b      	beq.n	8106200 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 81061a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81061ac:	d820      	bhi.n	81061f0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81061ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81061b2:	d012      	beq.n	81061da <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 81061b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81061b8:	d81a      	bhi.n	81061f0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81061ba:	2b00      	cmp	r3, #0
 81061bc:	d022      	beq.n	8106204 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 81061be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81061c2:	d115      	bne.n	81061f0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81061c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81061c8:	3308      	adds	r3, #8
 81061ca:	2100      	movs	r1, #0
 81061cc:	4618      	mov	r0, r3
 81061ce:	f001 fd27 	bl	8107c20 <RCCEx_PLL2_Config>
 81061d2:	4603      	mov	r3, r0
 81061d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81061d8:	e015      	b.n	8106206 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81061da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81061de:	3328      	adds	r3, #40	@ 0x28
 81061e0:	2102      	movs	r1, #2
 81061e2:	4618      	mov	r0, r3
 81061e4:	f001 fdce 	bl	8107d84 <RCCEx_PLL3_Config>
 81061e8:	4603      	mov	r3, r0
 81061ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81061ee:	e00a      	b.n	8106206 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81061f0:	2301      	movs	r3, #1
 81061f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81061f6:	e006      	b.n	8106206 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81061f8:	bf00      	nop
 81061fa:	e004      	b.n	8106206 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81061fc:	bf00      	nop
 81061fe:	e002      	b.n	8106206 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106200:	bf00      	nop
 8106202:	e000      	b.n	8106206 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106206:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810620a:	2b00      	cmp	r3, #0
 810620c:	d10b      	bne.n	8106226 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810620e:	4b8f      	ldr	r3, [pc, #572]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106212:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8106216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810621a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810621e:	4a8b      	ldr	r2, [pc, #556]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106220:	430b      	orrs	r3, r1
 8106222:	6593      	str	r3, [r2, #88]	@ 0x58
 8106224:	e003      	b.n	810622e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106226:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810622a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810622e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106236:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810623a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810623e:	2300      	movs	r3, #0
 8106240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8106244:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8106248:	460b      	mov	r3, r1
 810624a:	4313      	orrs	r3, r2
 810624c:	d055      	beq.n	81062fa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810624e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8106256:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810625a:	d033      	beq.n	81062c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 810625c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106260:	d82c      	bhi.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8106262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106266:	d02f      	beq.n	81062c8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8106268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810626c:	d826      	bhi.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810626e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106272:	d02b      	beq.n	81062cc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8106274:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106278:	d820      	bhi.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810627a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810627e:	d012      	beq.n	81062a6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8106280:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106284:	d81a      	bhi.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8106286:	2b00      	cmp	r3, #0
 8106288:	d022      	beq.n	81062d0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 810628a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810628e:	d115      	bne.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106290:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106294:	3308      	adds	r3, #8
 8106296:	2100      	movs	r1, #0
 8106298:	4618      	mov	r0, r3
 810629a:	f001 fcc1 	bl	8107c20 <RCCEx_PLL2_Config>
 810629e:	4603      	mov	r3, r0
 81062a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81062a4:	e015      	b.n	81062d2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81062a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062aa:	3328      	adds	r3, #40	@ 0x28
 81062ac:	2102      	movs	r1, #2
 81062ae:	4618      	mov	r0, r3
 81062b0:	f001 fd68 	bl	8107d84 <RCCEx_PLL3_Config>
 81062b4:	4603      	mov	r3, r0
 81062b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81062ba:	e00a      	b.n	81062d2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81062bc:	2301      	movs	r3, #1
 81062be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81062c2:	e006      	b.n	81062d2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81062c4:	bf00      	nop
 81062c6:	e004      	b.n	81062d2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81062c8:	bf00      	nop
 81062ca:	e002      	b.n	81062d2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81062cc:	bf00      	nop
 81062ce:	e000      	b.n	81062d2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81062d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81062d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81062d6:	2b00      	cmp	r3, #0
 81062d8:	d10b      	bne.n	81062f2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81062da:	4b5c      	ldr	r3, [pc, #368]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81062dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81062de:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81062e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81062ea:	4a58      	ldr	r2, [pc, #352]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81062ec:	430b      	orrs	r3, r1
 81062ee:	6593      	str	r3, [r2, #88]	@ 0x58
 81062f0:	e003      	b.n	81062fa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81062f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81062fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106302:	f002 0308 	and.w	r3, r2, #8
 8106306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810630a:	2300      	movs	r3, #0
 810630c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8106310:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8106314:	460b      	mov	r3, r1
 8106316:	4313      	orrs	r3, r2
 8106318:	d01e      	beq.n	8106358 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810631a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106326:	d10c      	bne.n	8106342 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810632c:	3328      	adds	r3, #40	@ 0x28
 810632e:	2102      	movs	r1, #2
 8106330:	4618      	mov	r0, r3
 8106332:	f001 fd27 	bl	8107d84 <RCCEx_PLL3_Config>
 8106336:	4603      	mov	r3, r0
 8106338:	2b00      	cmp	r3, #0
 810633a:	d002      	beq.n	8106342 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 810633c:	2301      	movs	r3, #1
 810633e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106342:	4b42      	ldr	r3, [pc, #264]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106346:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810634a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810634e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106352:	4a3e      	ldr	r2, [pc, #248]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106354:	430b      	orrs	r3, r1
 8106356:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106358:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106360:	f002 0310 	and.w	r3, r2, #16
 8106364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8106368:	2300      	movs	r3, #0
 810636a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810636e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8106372:	460b      	mov	r3, r1
 8106374:	4313      	orrs	r3, r2
 8106376:	d01e      	beq.n	81063b6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8106378:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810637c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8106380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106384:	d10c      	bne.n	81063a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106386:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810638a:	3328      	adds	r3, #40	@ 0x28
 810638c:	2102      	movs	r1, #2
 810638e:	4618      	mov	r0, r3
 8106390:	f001 fcf8 	bl	8107d84 <RCCEx_PLL3_Config>
 8106394:	4603      	mov	r3, r0
 8106396:	2b00      	cmp	r3, #0
 8106398:	d002      	beq.n	81063a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810639a:	2301      	movs	r3, #1
 810639c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81063a0:	4b2a      	ldr	r3, [pc, #168]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81063a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81063a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81063a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81063b0:	4a26      	ldr	r2, [pc, #152]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81063b2:	430b      	orrs	r3, r1
 81063b4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81063b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063be:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81063c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81063c6:	2300      	movs	r3, #0
 81063c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81063cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81063d0:	460b      	mov	r3, r1
 81063d2:	4313      	orrs	r3, r2
 81063d4:	d040      	beq.n	8106458 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81063d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81063de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81063e2:	d022      	beq.n	810642a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 81063e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81063e8:	d81b      	bhi.n	8106422 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81063ea:	2b00      	cmp	r3, #0
 81063ec:	d003      	beq.n	81063f6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 81063ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81063f2:	d00b      	beq.n	810640c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 81063f4:	e015      	b.n	8106422 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81063f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063fa:	3308      	adds	r3, #8
 81063fc:	2100      	movs	r1, #0
 81063fe:	4618      	mov	r0, r3
 8106400:	f001 fc0e 	bl	8107c20 <RCCEx_PLL2_Config>
 8106404:	4603      	mov	r3, r0
 8106406:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810640a:	e00f      	b.n	810642c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810640c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106410:	3328      	adds	r3, #40	@ 0x28
 8106412:	2102      	movs	r1, #2
 8106414:	4618      	mov	r0, r3
 8106416:	f001 fcb5 	bl	8107d84 <RCCEx_PLL3_Config>
 810641a:	4603      	mov	r3, r0
 810641c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106420:	e004      	b.n	810642c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106422:	2301      	movs	r3, #1
 8106424:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106428:	e000      	b.n	810642c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810642a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810642c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106430:	2b00      	cmp	r3, #0
 8106432:	d10d      	bne.n	8106450 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8106434:	4b05      	ldr	r3, [pc, #20]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106438:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810643c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106440:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8106444:	4a01      	ldr	r2, [pc, #4]	@ (810644c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106446:	430b      	orrs	r3, r1
 8106448:	6593      	str	r3, [r2, #88]	@ 0x58
 810644a:	e005      	b.n	8106458 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 810644c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106450:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106454:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106460:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8106464:	67bb      	str	r3, [r7, #120]	@ 0x78
 8106466:	2300      	movs	r3, #0
 8106468:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810646a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810646e:	460b      	mov	r3, r1
 8106470:	4313      	orrs	r3, r2
 8106472:	d03b      	beq.n	81064ec <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8106474:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810647c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106480:	d01f      	beq.n	81064c2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8106482:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106486:	d818      	bhi.n	81064ba <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8106488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810648c:	d003      	beq.n	8106496 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810648e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106492:	d007      	beq.n	81064a4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8106494:	e011      	b.n	81064ba <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106496:	4b64      	ldr	r3, [pc, #400]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810649a:	4a63      	ldr	r2, [pc, #396]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810649c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81064a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81064a2:	e00f      	b.n	81064c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81064a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064a8:	3328      	adds	r3, #40	@ 0x28
 81064aa:	2101      	movs	r1, #1
 81064ac:	4618      	mov	r0, r3
 81064ae:	f001 fc69 	bl	8107d84 <RCCEx_PLL3_Config>
 81064b2:	4603      	mov	r3, r0
 81064b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 81064b8:	e004      	b.n	81064c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81064ba:	2301      	movs	r3, #1
 81064bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81064c0:	e000      	b.n	81064c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 81064c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81064c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81064c8:	2b00      	cmp	r3, #0
 81064ca:	d10b      	bne.n	81064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81064cc:	4b56      	ldr	r3, [pc, #344]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81064ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81064d0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81064d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81064dc:	4a52      	ldr	r2, [pc, #328]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81064de:	430b      	orrs	r3, r1
 81064e0:	6553      	str	r3, [r2, #84]	@ 0x54
 81064e2:	e003      	b.n	81064ec <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81064e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81064ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064f4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81064f8:	673b      	str	r3, [r7, #112]	@ 0x70
 81064fa:	2300      	movs	r3, #0
 81064fc:	677b      	str	r3, [r7, #116]	@ 0x74
 81064fe:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8106502:	460b      	mov	r3, r1
 8106504:	4313      	orrs	r3, r2
 8106506:	d031      	beq.n	810656c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8106508:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810650e:	2b00      	cmp	r3, #0
 8106510:	d003      	beq.n	810651a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8106512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106516:	d007      	beq.n	8106528 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8106518:	e011      	b.n	810653e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810651a:	4b43      	ldr	r3, [pc, #268]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810651c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810651e:	4a42      	ldr	r2, [pc, #264]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106524:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106526:	e00e      	b.n	8106546 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810652c:	3308      	adds	r3, #8
 810652e:	2102      	movs	r1, #2
 8106530:	4618      	mov	r0, r3
 8106532:	f001 fb75 	bl	8107c20 <RCCEx_PLL2_Config>
 8106536:	4603      	mov	r3, r0
 8106538:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810653c:	e003      	b.n	8106546 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810653e:	2301      	movs	r3, #1
 8106540:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106546:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810654a:	2b00      	cmp	r3, #0
 810654c:	d10a      	bne.n	8106564 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810654e:	4b36      	ldr	r3, [pc, #216]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106552:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8106556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810655a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810655c:	4a32      	ldr	r2, [pc, #200]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810655e:	430b      	orrs	r3, r1
 8106560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106562:	e003      	b.n	810656c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106564:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106568:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810656c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106574:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8106578:	66bb      	str	r3, [r7, #104]	@ 0x68
 810657a:	2300      	movs	r3, #0
 810657c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810657e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8106582:	460b      	mov	r3, r1
 8106584:	4313      	orrs	r3, r2
 8106586:	d00c      	beq.n	81065a2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810658c:	3328      	adds	r3, #40	@ 0x28
 810658e:	2102      	movs	r1, #2
 8106590:	4618      	mov	r0, r3
 8106592:	f001 fbf7 	bl	8107d84 <RCCEx_PLL3_Config>
 8106596:	4603      	mov	r3, r0
 8106598:	2b00      	cmp	r3, #0
 810659a:	d002      	beq.n	81065a2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810659c:	2301      	movs	r3, #1
 810659e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81065a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81065ae:	663b      	str	r3, [r7, #96]	@ 0x60
 81065b0:	2300      	movs	r3, #0
 81065b2:	667b      	str	r3, [r7, #100]	@ 0x64
 81065b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81065b8:	460b      	mov	r3, r1
 81065ba:	4313      	orrs	r3, r2
 81065bc:	d03a      	beq.n	8106634 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 81065be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81065c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81065ca:	d018      	beq.n	81065fe <HAL_RCCEx_PeriphCLKConfig+0x1192>
 81065cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81065d0:	d811      	bhi.n	81065f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81065d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81065d6:	d014      	beq.n	8106602 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 81065d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81065dc:	d80b      	bhi.n	81065f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81065de:	2b00      	cmp	r3, #0
 81065e0:	d011      	beq.n	8106606 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 81065e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81065e6:	d106      	bne.n	81065f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065e8:	4b0f      	ldr	r3, [pc, #60]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065ec:	4a0e      	ldr	r2, [pc, #56]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81065ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81065f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81065f4:	e008      	b.n	8106608 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81065f6:	2301      	movs	r3, #1
 81065f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81065fc:	e004      	b.n	8106608 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81065fe:	bf00      	nop
 8106600:	e002      	b.n	8106608 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8106602:	bf00      	nop
 8106604:	e000      	b.n	8106608 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8106606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106608:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810660c:	2b00      	cmp	r3, #0
 810660e:	d10d      	bne.n	810662c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106610:	4b05      	ldr	r3, [pc, #20]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106614:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8106618:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810661c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106620:	4a01      	ldr	r2, [pc, #4]	@ (8106628 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106622:	430b      	orrs	r3, r1
 8106624:	6553      	str	r3, [r2, #84]	@ 0x54
 8106626:	e005      	b.n	8106634 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8106628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810662c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106630:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106634:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106638:	e9d3 2300 	ldrd	r2, r3, [r3]
 810663c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8106640:	65bb      	str	r3, [r7, #88]	@ 0x58
 8106642:	2300      	movs	r3, #0
 8106644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8106646:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810664a:	460b      	mov	r3, r1
 810664c:	4313      	orrs	r3, r2
 810664e:	d009      	beq.n	8106664 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106650:	4baa      	ldr	r3, [pc, #680]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106654:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8106658:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810665c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810665e:	4aa7      	ldr	r2, [pc, #668]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106660:	430b      	orrs	r3, r1
 8106662:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106664:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106668:	e9d3 2300 	ldrd	r2, r3, [r3]
 810666c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8106670:	653b      	str	r3, [r7, #80]	@ 0x50
 8106672:	2300      	movs	r3, #0
 8106674:	657b      	str	r3, [r7, #84]	@ 0x54
 8106676:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810667a:	460b      	mov	r3, r1
 810667c:	4313      	orrs	r3, r2
 810667e:	d00a      	beq.n	8106696 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106680:	4b9e      	ldr	r3, [pc, #632]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106682:	691b      	ldr	r3, [r3, #16]
 8106684:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8106688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810668c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8106690:	4a9a      	ldr	r2, [pc, #616]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106692:	430b      	orrs	r3, r1
 8106694:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810669e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81066a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 81066a4:	2300      	movs	r3, #0
 81066a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81066a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81066ac:	460b      	mov	r3, r1
 81066ae:	4313      	orrs	r3, r2
 81066b0:	d009      	beq.n	81066c6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81066b2:	4b92      	ldr	r3, [pc, #584]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81066b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81066b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81066ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81066c0:	4a8e      	ldr	r2, [pc, #568]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81066c2:	430b      	orrs	r3, r1
 81066c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81066c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81066d2:	643b      	str	r3, [r7, #64]	@ 0x40
 81066d4:	2300      	movs	r3, #0
 81066d6:	647b      	str	r3, [r7, #68]	@ 0x44
 81066d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81066dc:	460b      	mov	r3, r1
 81066de:	4313      	orrs	r3, r2
 81066e0:	d00e      	beq.n	8106700 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81066e2:	4b86      	ldr	r3, [pc, #536]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81066e4:	691b      	ldr	r3, [r3, #16]
 81066e6:	4a85      	ldr	r2, [pc, #532]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81066e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81066ec:	6113      	str	r3, [r2, #16]
 81066ee:	4b83      	ldr	r3, [pc, #524]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81066f0:	6919      	ldr	r1, [r3, #16]
 81066f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81066fa:	4a80      	ldr	r2, [pc, #512]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81066fc:	430b      	orrs	r3, r1
 81066fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106708:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810670c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810670e:	2300      	movs	r3, #0
 8106710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106712:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8106716:	460b      	mov	r3, r1
 8106718:	4313      	orrs	r3, r2
 810671a:	d009      	beq.n	8106730 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810671c:	4b77      	ldr	r3, [pc, #476]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810671e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106720:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106724:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810672a:	4a74      	ldr	r2, [pc, #464]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810672c:	430b      	orrs	r3, r1
 810672e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106730:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106738:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810673c:	633b      	str	r3, [r7, #48]	@ 0x30
 810673e:	2300      	movs	r3, #0
 8106740:	637b      	str	r3, [r7, #52]	@ 0x34
 8106742:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8106746:	460b      	mov	r3, r1
 8106748:	4313      	orrs	r3, r2
 810674a:	d00a      	beq.n	8106762 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810674c:	4b6b      	ldr	r3, [pc, #428]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810674e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106750:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8106754:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810675c:	4a67      	ldr	r2, [pc, #412]	@ (81068fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810675e:	430b      	orrs	r3, r1
 8106760:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8106762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106766:	e9d3 2300 	ldrd	r2, r3, [r3]
 810676a:	2100      	movs	r1, #0
 810676c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810676e:	f003 0301 	and.w	r3, r3, #1
 8106772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106774:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8106778:	460b      	mov	r3, r1
 810677a:	4313      	orrs	r3, r2
 810677c:	d011      	beq.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810677e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106782:	3308      	adds	r3, #8
 8106784:	2100      	movs	r1, #0
 8106786:	4618      	mov	r0, r3
 8106788:	f001 fa4a 	bl	8107c20 <RCCEx_PLL2_Config>
 810678c:	4603      	mov	r3, r0
 810678e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8106792:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106796:	2b00      	cmp	r3, #0
 8106798:	d003      	beq.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810679a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810679e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81067a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067aa:	2100      	movs	r1, #0
 81067ac:	6239      	str	r1, [r7, #32]
 81067ae:	f003 0302 	and.w	r3, r3, #2
 81067b2:	627b      	str	r3, [r7, #36]	@ 0x24
 81067b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81067b8:	460b      	mov	r3, r1
 81067ba:	4313      	orrs	r3, r2
 81067bc:	d011      	beq.n	81067e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81067be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067c2:	3308      	adds	r3, #8
 81067c4:	2101      	movs	r1, #1
 81067c6:	4618      	mov	r0, r3
 81067c8:	f001 fa2a 	bl	8107c20 <RCCEx_PLL2_Config>
 81067cc:	4603      	mov	r3, r0
 81067ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81067d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81067d6:	2b00      	cmp	r3, #0
 81067d8:	d003      	beq.n	81067e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81067de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81067e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067ea:	2100      	movs	r1, #0
 81067ec:	61b9      	str	r1, [r7, #24]
 81067ee:	f003 0304 	and.w	r3, r3, #4
 81067f2:	61fb      	str	r3, [r7, #28]
 81067f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81067f8:	460b      	mov	r3, r1
 81067fa:	4313      	orrs	r3, r2
 81067fc:	d011      	beq.n	8106822 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81067fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106802:	3308      	adds	r3, #8
 8106804:	2102      	movs	r1, #2
 8106806:	4618      	mov	r0, r3
 8106808:	f001 fa0a 	bl	8107c20 <RCCEx_PLL2_Config>
 810680c:	4603      	mov	r3, r0
 810680e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8106812:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106816:	2b00      	cmp	r3, #0
 8106818:	d003      	beq.n	8106822 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810681a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810681e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8106822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106826:	e9d3 2300 	ldrd	r2, r3, [r3]
 810682a:	2100      	movs	r1, #0
 810682c:	6139      	str	r1, [r7, #16]
 810682e:	f003 0308 	and.w	r3, r3, #8
 8106832:	617b      	str	r3, [r7, #20]
 8106834:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106838:	460b      	mov	r3, r1
 810683a:	4313      	orrs	r3, r2
 810683c:	d011      	beq.n	8106862 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810683e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106842:	3328      	adds	r3, #40	@ 0x28
 8106844:	2100      	movs	r1, #0
 8106846:	4618      	mov	r0, r3
 8106848:	f001 fa9c 	bl	8107d84 <RCCEx_PLL3_Config>
 810684c:	4603      	mov	r3, r0
 810684e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8106852:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106856:	2b00      	cmp	r3, #0
 8106858:	d003      	beq.n	8106862 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810685a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810685e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8106862:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106866:	e9d3 2300 	ldrd	r2, r3, [r3]
 810686a:	2100      	movs	r1, #0
 810686c:	60b9      	str	r1, [r7, #8]
 810686e:	f003 0310 	and.w	r3, r3, #16
 8106872:	60fb      	str	r3, [r7, #12]
 8106874:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106878:	460b      	mov	r3, r1
 810687a:	4313      	orrs	r3, r2
 810687c:	d011      	beq.n	81068a2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810687e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106882:	3328      	adds	r3, #40	@ 0x28
 8106884:	2101      	movs	r1, #1
 8106886:	4618      	mov	r0, r3
 8106888:	f001 fa7c 	bl	8107d84 <RCCEx_PLL3_Config>
 810688c:	4603      	mov	r3, r0
 810688e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8106892:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106896:	2b00      	cmp	r3, #0
 8106898:	d003      	beq.n	81068a2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810689a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810689e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81068a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068aa:	2100      	movs	r1, #0
 81068ac:	6039      	str	r1, [r7, #0]
 81068ae:	f003 0320 	and.w	r3, r3, #32
 81068b2:	607b      	str	r3, [r7, #4]
 81068b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 81068b8:	460b      	mov	r3, r1
 81068ba:	4313      	orrs	r3, r2
 81068bc:	d011      	beq.n	81068e2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81068be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068c2:	3328      	adds	r3, #40	@ 0x28
 81068c4:	2102      	movs	r1, #2
 81068c6:	4618      	mov	r0, r3
 81068c8:	f001 fa5c 	bl	8107d84 <RCCEx_PLL3_Config>
 81068cc:	4603      	mov	r3, r0
 81068ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81068d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81068d6:	2b00      	cmp	r3, #0
 81068d8:	d003      	beq.n	81068e2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81068da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81068de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 81068e2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 81068e6:	2b00      	cmp	r3, #0
 81068e8:	d101      	bne.n	81068ee <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 81068ea:	2300      	movs	r3, #0
 81068ec:	e000      	b.n	81068f0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81068ee:	2301      	movs	r3, #1
}
 81068f0:	4618      	mov	r0, r3
 81068f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 81068f6:	46bd      	mov	sp, r7
 81068f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81068fc:	58024400 	.word	0x58024400

08106900 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8106900:	b580      	push	{r7, lr}
 8106902:	b090      	sub	sp, #64	@ 0x40
 8106904:	af00      	add	r7, sp, #0
 8106906:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810690a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810690e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8106912:	430b      	orrs	r3, r1
 8106914:	f040 8094 	bne.w	8106a40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8106918:	4b9e      	ldr	r3, [pc, #632]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810691a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810691c:	f003 0307 	and.w	r3, r3, #7
 8106920:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106924:	2b04      	cmp	r3, #4
 8106926:	f200 8087 	bhi.w	8106a38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810692a:	a201      	add	r2, pc, #4	@ (adr r2, 8106930 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 810692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106930:	08106945 	.word	0x08106945
 8106934:	0810696d 	.word	0x0810696d
 8106938:	08106995 	.word	0x08106995
 810693c:	08106a31 	.word	0x08106a31
 8106940:	081069bd 	.word	0x081069bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106944:	4b93      	ldr	r3, [pc, #588]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106946:	681b      	ldr	r3, [r3, #0]
 8106948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810694c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106950:	d108      	bne.n	8106964 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106956:	4618      	mov	r0, r3
 8106958:	f001 f810 	bl	810797c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810695c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106960:	f000 bd45 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106964:	2300      	movs	r3, #0
 8106966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106968:	f000 bd41 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810696c:	4b89      	ldr	r3, [pc, #548]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810696e:	681b      	ldr	r3, [r3, #0]
 8106970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106978:	d108      	bne.n	810698c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810697a:	f107 0318 	add.w	r3, r7, #24
 810697e:	4618      	mov	r0, r3
 8106980:	f000 fd54 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106984:	69bb      	ldr	r3, [r7, #24]
 8106986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106988:	f000 bd31 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810698c:	2300      	movs	r3, #0
 810698e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106990:	f000 bd2d 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106994:	4b7f      	ldr	r3, [pc, #508]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106996:	681b      	ldr	r3, [r3, #0]
 8106998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810699c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81069a0:	d108      	bne.n	81069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81069a2:	f107 030c 	add.w	r3, r7, #12
 81069a6:	4618      	mov	r0, r3
 81069a8:	f000 fe94 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81069ac:	68fb      	ldr	r3, [r7, #12]
 81069ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81069b0:	f000 bd1d 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81069b4:	2300      	movs	r3, #0
 81069b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81069b8:	f000 bd19 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81069bc:	4b75      	ldr	r3, [pc, #468]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81069be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81069c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81069c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81069c6:	4b73      	ldr	r3, [pc, #460]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81069c8:	681b      	ldr	r3, [r3, #0]
 81069ca:	f003 0304 	and.w	r3, r3, #4
 81069ce:	2b04      	cmp	r3, #4
 81069d0:	d10c      	bne.n	81069ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81069d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81069d4:	2b00      	cmp	r3, #0
 81069d6:	d109      	bne.n	81069ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81069d8:	4b6e      	ldr	r3, [pc, #440]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81069da:	681b      	ldr	r3, [r3, #0]
 81069dc:	08db      	lsrs	r3, r3, #3
 81069de:	f003 0303 	and.w	r3, r3, #3
 81069e2:	4a6d      	ldr	r2, [pc, #436]	@ (8106b98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81069e4:	fa22 f303 	lsr.w	r3, r2, r3
 81069e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81069ea:	e01f      	b.n	8106a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81069ec:	4b69      	ldr	r3, [pc, #420]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81069ee:	681b      	ldr	r3, [r3, #0]
 81069f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81069f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81069f8:	d106      	bne.n	8106a08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81069fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81069fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106a00:	d102      	bne.n	8106a08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106a02:	4b66      	ldr	r3, [pc, #408]	@ (8106b9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8106a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106a06:	e011      	b.n	8106a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106a08:	4b62      	ldr	r3, [pc, #392]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106a14:	d106      	bne.n	8106a24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8106a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106a1c:	d102      	bne.n	8106a24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106a1e:	4b60      	ldr	r3, [pc, #384]	@ (8106ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8106a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106a22:	e003      	b.n	8106a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106a24:	2300      	movs	r3, #0
 8106a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106a28:	f000 bce1 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106a2c:	f000 bcdf 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106a30:	4b5c      	ldr	r3, [pc, #368]	@ (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8106a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106a34:	f000 bcdb 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106a38:	2300      	movs	r3, #0
 8106a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106a3c:	f000 bcd7 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106a44:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8106a48:	430b      	orrs	r3, r1
 8106a4a:	f040 80ad 	bne.w	8106ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8106a4e:	4b51      	ldr	r3, [pc, #324]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106a52:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8106a56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106a5e:	d056      	beq.n	8106b0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8106a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106a66:	f200 8090 	bhi.w	8106b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8106a6e:	f000 8088 	beq.w	8106b82 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8106a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a74:	2bc0      	cmp	r3, #192	@ 0xc0
 8106a76:	f200 8088 	bhi.w	8106b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a7c:	2b80      	cmp	r3, #128	@ 0x80
 8106a7e:	d032      	beq.n	8106ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8106a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a82:	2b80      	cmp	r3, #128	@ 0x80
 8106a84:	f200 8081 	bhi.w	8106b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a8a:	2b00      	cmp	r3, #0
 8106a8c:	d003      	beq.n	8106a96 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8106a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a90:	2b40      	cmp	r3, #64	@ 0x40
 8106a92:	d014      	beq.n	8106abe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8106a94:	e079      	b.n	8106b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106a96:	4b3f      	ldr	r3, [pc, #252]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106a98:	681b      	ldr	r3, [r3, #0]
 8106a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106a9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106aa2:	d108      	bne.n	8106ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106aa8:	4618      	mov	r0, r3
 8106aaa:	f000 ff67 	bl	810797c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106ab2:	f000 bc9c 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106ab6:	2300      	movs	r3, #0
 8106ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106aba:	f000 bc98 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106abe:	4b35      	ldr	r3, [pc, #212]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106ac0:	681b      	ldr	r3, [r3, #0]
 8106ac2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106aca:	d108      	bne.n	8106ade <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106acc:	f107 0318 	add.w	r3, r7, #24
 8106ad0:	4618      	mov	r0, r3
 8106ad2:	f000 fcab 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106ad6:	69bb      	ldr	r3, [r7, #24]
 8106ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106ada:	f000 bc88 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106ade:	2300      	movs	r3, #0
 8106ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106ae2:	f000 bc84 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106ae8:	681b      	ldr	r3, [r3, #0]
 8106aea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106af2:	d108      	bne.n	8106b06 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106af4:	f107 030c 	add.w	r3, r7, #12
 8106af8:	4618      	mov	r0, r3
 8106afa:	f000 fdeb 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106afe:	68fb      	ldr	r3, [r7, #12]
 8106b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106b02:	f000 bc74 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106b06:	2300      	movs	r3, #0
 8106b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b0a:	f000 bc70 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106b0e:	4b21      	ldr	r3, [pc, #132]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106b12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106b16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106b18:	4b1e      	ldr	r3, [pc, #120]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106b1a:	681b      	ldr	r3, [r3, #0]
 8106b1c:	f003 0304 	and.w	r3, r3, #4
 8106b20:	2b04      	cmp	r3, #4
 8106b22:	d10c      	bne.n	8106b3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8106b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106b26:	2b00      	cmp	r3, #0
 8106b28:	d109      	bne.n	8106b3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106b2c:	681b      	ldr	r3, [r3, #0]
 8106b2e:	08db      	lsrs	r3, r3, #3
 8106b30:	f003 0303 	and.w	r3, r3, #3
 8106b34:	4a18      	ldr	r2, [pc, #96]	@ (8106b98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8106b36:	fa22 f303 	lsr.w	r3, r2, r3
 8106b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106b3c:	e01f      	b.n	8106b7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106b3e:	4b15      	ldr	r3, [pc, #84]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106b40:	681b      	ldr	r3, [r3, #0]
 8106b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106b4a:	d106      	bne.n	8106b5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8106b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106b52:	d102      	bne.n	8106b5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106b54:	4b11      	ldr	r3, [pc, #68]	@ (8106b9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8106b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106b58:	e011      	b.n	8106b7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8106b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106b5c:	681b      	ldr	r3, [r3, #0]
 8106b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106b66:	d106      	bne.n	8106b76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8106b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106b6e:	d102      	bne.n	8106b76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106b70:	4b0b      	ldr	r3, [pc, #44]	@ (8106ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8106b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106b74:	e003      	b.n	8106b7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106b76:	2300      	movs	r3, #0
 8106b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106b7a:	f000 bc38 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106b7e:	f000 bc36 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106b82:	4b08      	ldr	r3, [pc, #32]	@ (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8106b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b86:	f000 bc32 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106b8a:	2300      	movs	r3, #0
 8106b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b8e:	f000 bc2e 	b.w	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106b92:	bf00      	nop
 8106b94:	58024400 	.word	0x58024400
 8106b98:	03d09000 	.word	0x03d09000
 8106b9c:	003d0900 	.word	0x003d0900
 8106ba0:	017d7840 	.word	0x017d7840
 8106ba4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106bac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8106bb0:	430b      	orrs	r3, r1
 8106bb2:	f040 809c 	bne.w	8106cee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8106bb6:	4b9e      	ldr	r3, [pc, #632]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106bba:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8106bbe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8106bc6:	d054      	beq.n	8106c72 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8106bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8106bce:	f200 808b 	bhi.w	8106ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8106bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bd4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106bd8:	f000 8083 	beq.w	8106ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8106bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bde:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106be2:	f200 8081 	bhi.w	8106ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8106be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106be8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106bec:	d02f      	beq.n	8106c4e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8106bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106bf4:	d878      	bhi.n	8106ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8106bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bf8:	2b00      	cmp	r3, #0
 8106bfa:	d004      	beq.n	8106c06 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8106bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106c02:	d012      	beq.n	8106c2a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8106c04:	e070      	b.n	8106ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106c06:	4b8a      	ldr	r3, [pc, #552]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106c08:	681b      	ldr	r3, [r3, #0]
 8106c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106c0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106c12:	d107      	bne.n	8106c24 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106c18:	4618      	mov	r0, r3
 8106c1a:	f000 feaf 	bl	810797c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106c22:	e3e4      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106c24:	2300      	movs	r3, #0
 8106c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106c28:	e3e1      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106c2a:	4b81      	ldr	r3, [pc, #516]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106c2c:	681b      	ldr	r3, [r3, #0]
 8106c2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106c32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106c36:	d107      	bne.n	8106c48 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106c38:	f107 0318 	add.w	r3, r7, #24
 8106c3c:	4618      	mov	r0, r3
 8106c3e:	f000 fbf5 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106c42:	69bb      	ldr	r3, [r7, #24]
 8106c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106c46:	e3d2      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106c48:	2300      	movs	r3, #0
 8106c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106c4c:	e3cf      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106c4e:	4b78      	ldr	r3, [pc, #480]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106c50:	681b      	ldr	r3, [r3, #0]
 8106c52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106c5a:	d107      	bne.n	8106c6c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106c5c:	f107 030c 	add.w	r3, r7, #12
 8106c60:	4618      	mov	r0, r3
 8106c62:	f000 fd37 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106c66:	68fb      	ldr	r3, [r7, #12]
 8106c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106c6a:	e3c0      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106c6c:	2300      	movs	r3, #0
 8106c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106c70:	e3bd      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106c72:	4b6f      	ldr	r3, [pc, #444]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106c76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106c7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106c7e:	681b      	ldr	r3, [r3, #0]
 8106c80:	f003 0304 	and.w	r3, r3, #4
 8106c84:	2b04      	cmp	r3, #4
 8106c86:	d10c      	bne.n	8106ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8106c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106c8a:	2b00      	cmp	r3, #0
 8106c8c:	d109      	bne.n	8106ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106c8e:	4b68      	ldr	r3, [pc, #416]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106c90:	681b      	ldr	r3, [r3, #0]
 8106c92:	08db      	lsrs	r3, r3, #3
 8106c94:	f003 0303 	and.w	r3, r3, #3
 8106c98:	4a66      	ldr	r2, [pc, #408]	@ (8106e34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8106c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8106c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106ca0:	e01e      	b.n	8106ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106ca2:	4b63      	ldr	r3, [pc, #396]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106ca4:	681b      	ldr	r3, [r3, #0]
 8106ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106cae:	d106      	bne.n	8106cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8106cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106cb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106cb6:	d102      	bne.n	8106cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8106e38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8106cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106cbc:	e010      	b.n	8106ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106cc0:	681b      	ldr	r3, [r3, #0]
 8106cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106cc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106cca:	d106      	bne.n	8106cda <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8106ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106cd2:	d102      	bne.n	8106cda <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106cd4:	4b59      	ldr	r3, [pc, #356]	@ (8106e3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8106cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106cd8:	e002      	b.n	8106ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106cda:	2300      	movs	r3, #0
 8106cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106cde:	e386      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106ce0:	e385      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106ce2:	4b57      	ldr	r3, [pc, #348]	@ (8106e40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8106ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106ce6:	e382      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8106ce8:	2300      	movs	r3, #0
 8106cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106cec:	e37f      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8106cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106cf2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8106cf6:	430b      	orrs	r3, r1
 8106cf8:	f040 80a7 	bne.w	8106e4a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8106cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106d00:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8106d04:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106d0c:	d055      	beq.n	8106dba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8106d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106d14:	f200 8096 	bhi.w	8106e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106d1e:	f000 8084 	beq.w	8106e2a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8106d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106d28:	f200 808c 	bhi.w	8106e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106d32:	d030      	beq.n	8106d96 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8106d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106d3a:	f200 8083 	bhi.w	8106e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d40:	2b00      	cmp	r3, #0
 8106d42:	d004      	beq.n	8106d4e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8106d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8106d4a:	d012      	beq.n	8106d72 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8106d4c:	e07a      	b.n	8106e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106d4e:	4b38      	ldr	r3, [pc, #224]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106d50:	681b      	ldr	r3, [r3, #0]
 8106d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106d56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106d5a:	d107      	bne.n	8106d6c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106d60:	4618      	mov	r0, r3
 8106d62:	f000 fe0b 	bl	810797c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106d6a:	e340      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106d6c:	2300      	movs	r3, #0
 8106d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106d70:	e33d      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106d72:	4b2f      	ldr	r3, [pc, #188]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106d74:	681b      	ldr	r3, [r3, #0]
 8106d76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106d7e:	d107      	bne.n	8106d90 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106d80:	f107 0318 	add.w	r3, r7, #24
 8106d84:	4618      	mov	r0, r3
 8106d86:	f000 fb51 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106d8a:	69bb      	ldr	r3, [r7, #24]
 8106d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106d8e:	e32e      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106d90:	2300      	movs	r3, #0
 8106d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106d94:	e32b      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106d96:	4b26      	ldr	r3, [pc, #152]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106d98:	681b      	ldr	r3, [r3, #0]
 8106d9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106da2:	d107      	bne.n	8106db4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106da4:	f107 030c 	add.w	r3, r7, #12
 8106da8:	4618      	mov	r0, r3
 8106daa:	f000 fc93 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106dae:	68fb      	ldr	r3, [r7, #12]
 8106db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106db2:	e31c      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106db4:	2300      	movs	r3, #0
 8106db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106db8:	e319      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106dba:	4b1d      	ldr	r3, [pc, #116]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106dbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106dc2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106dc6:	681b      	ldr	r3, [r3, #0]
 8106dc8:	f003 0304 	and.w	r3, r3, #4
 8106dcc:	2b04      	cmp	r3, #4
 8106dce:	d10c      	bne.n	8106dea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8106dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106dd2:	2b00      	cmp	r3, #0
 8106dd4:	d109      	bne.n	8106dea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106dd6:	4b16      	ldr	r3, [pc, #88]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106dd8:	681b      	ldr	r3, [r3, #0]
 8106dda:	08db      	lsrs	r3, r3, #3
 8106ddc:	f003 0303 	and.w	r3, r3, #3
 8106de0:	4a14      	ldr	r2, [pc, #80]	@ (8106e34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8106de2:	fa22 f303 	lsr.w	r3, r2, r3
 8106de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106de8:	e01e      	b.n	8106e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106dea:	4b11      	ldr	r3, [pc, #68]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106dec:	681b      	ldr	r3, [r3, #0]
 8106dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106df6:	d106      	bne.n	8106e06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8106df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106dfe:	d102      	bne.n	8106e06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106e00:	4b0d      	ldr	r3, [pc, #52]	@ (8106e38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8106e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106e04:	e010      	b.n	8106e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106e06:	4b0a      	ldr	r3, [pc, #40]	@ (8106e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106e08:	681b      	ldr	r3, [r3, #0]
 8106e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106e0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106e12:	d106      	bne.n	8106e22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8106e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106e1a:	d102      	bne.n	8106e22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106e1c:	4b07      	ldr	r3, [pc, #28]	@ (8106e3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8106e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106e20:	e002      	b.n	8106e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106e22:	2300      	movs	r3, #0
 8106e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106e26:	e2e2      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106e28:	e2e1      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106e2a:	4b05      	ldr	r3, [pc, #20]	@ (8106e40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8106e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106e2e:	e2de      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106e30:	58024400 	.word	0x58024400
 8106e34:	03d09000 	.word	0x03d09000
 8106e38:	003d0900 	.word	0x003d0900
 8106e3c:	017d7840 	.word	0x017d7840
 8106e40:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8106e44:	2300      	movs	r3, #0
 8106e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106e48:	e2d1      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8106e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106e4e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8106e52:	430b      	orrs	r3, r1
 8106e54:	f040 809c 	bne.w	8106f90 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8106e58:	4b93      	ldr	r3, [pc, #588]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106e5c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8106e60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8106e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106e68:	d054      	beq.n	8106f14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8106e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106e70:	f200 808b 	bhi.w	8106f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106e7a:	f000 8083 	beq.w	8106f84 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8106e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106e84:	f200 8081 	bhi.w	8106f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106e8e:	d02f      	beq.n	8106ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8106e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106e96:	d878      	bhi.n	8106f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e9a:	2b00      	cmp	r3, #0
 8106e9c:	d004      	beq.n	8106ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8106e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106ea4:	d012      	beq.n	8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8106ea6:	e070      	b.n	8106f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106ea8:	4b7f      	ldr	r3, [pc, #508]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106eaa:	681b      	ldr	r3, [r3, #0]
 8106eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106eb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106eb4:	d107      	bne.n	8106ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106eba:	4618      	mov	r0, r3
 8106ebc:	f000 fd5e 	bl	810797c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106ec4:	e293      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106ec6:	2300      	movs	r3, #0
 8106ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106eca:	e290      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106ecc:	4b76      	ldr	r3, [pc, #472]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106ece:	681b      	ldr	r3, [r3, #0]
 8106ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106ed4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106ed8:	d107      	bne.n	8106eea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106eda:	f107 0318 	add.w	r3, r7, #24
 8106ede:	4618      	mov	r0, r3
 8106ee0:	f000 faa4 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106ee4:	69bb      	ldr	r3, [r7, #24]
 8106ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106ee8:	e281      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106eea:	2300      	movs	r3, #0
 8106eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106eee:	e27e      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106ef0:	4b6d      	ldr	r3, [pc, #436]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106ef2:	681b      	ldr	r3, [r3, #0]
 8106ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106efc:	d107      	bne.n	8106f0e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106efe:	f107 030c 	add.w	r3, r7, #12
 8106f02:	4618      	mov	r0, r3
 8106f04:	f000 fbe6 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106f08:	68fb      	ldr	r3, [r7, #12]
 8106f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f0c:	e26f      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f0e:	2300      	movs	r3, #0
 8106f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f12:	e26c      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106f14:	4b64      	ldr	r3, [pc, #400]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106f18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106f1c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106f1e:	4b62      	ldr	r3, [pc, #392]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106f20:	681b      	ldr	r3, [r3, #0]
 8106f22:	f003 0304 	and.w	r3, r3, #4
 8106f26:	2b04      	cmp	r3, #4
 8106f28:	d10c      	bne.n	8106f44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8106f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106f2c:	2b00      	cmp	r3, #0
 8106f2e:	d109      	bne.n	8106f44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106f30:	4b5d      	ldr	r3, [pc, #372]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106f32:	681b      	ldr	r3, [r3, #0]
 8106f34:	08db      	lsrs	r3, r3, #3
 8106f36:	f003 0303 	and.w	r3, r3, #3
 8106f3a:	4a5c      	ldr	r2, [pc, #368]	@ (81070ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8106f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8106f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106f42:	e01e      	b.n	8106f82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106f44:	4b58      	ldr	r3, [pc, #352]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106f46:	681b      	ldr	r3, [r3, #0]
 8106f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106f50:	d106      	bne.n	8106f60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8106f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106f58:	d102      	bne.n	8106f60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106f5a:	4b55      	ldr	r3, [pc, #340]	@ (81070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8106f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106f5e:	e010      	b.n	8106f82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106f60:	4b51      	ldr	r3, [pc, #324]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106f62:	681b      	ldr	r3, [r3, #0]
 8106f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106f68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106f6c:	d106      	bne.n	8106f7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8106f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106f74:	d102      	bne.n	8106f7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106f76:	4b4f      	ldr	r3, [pc, #316]	@ (81070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8106f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106f7a:	e002      	b.n	8106f82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106f7c:	2300      	movs	r3, #0
 8106f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106f80:	e235      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106f82:	e234      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106f84:	4b4c      	ldr	r3, [pc, #304]	@ (81070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8106f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f88:	e231      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106f8a:	2300      	movs	r3, #0
 8106f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f8e:	e22e      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8106f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106f94:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8106f98:	430b      	orrs	r3, r1
 8106f9a:	f040 808f 	bne.w	81070bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8106f9e:	4b42      	ldr	r3, [pc, #264]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106fa2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8106fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8106fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106faa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106fae:	d06b      	beq.n	8107088 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8106fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106fb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106fb6:	d874      	bhi.n	81070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106fba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106fbe:	d056      	beq.n	810706e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8106fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106fc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106fc6:	d86c      	bhi.n	81070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106fca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106fce:	d03b      	beq.n	8107048 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8106fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106fd2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106fd6:	d864      	bhi.n	81070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106fda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106fde:	d021      	beq.n	8107024 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8106fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106fe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106fe6:	d85c      	bhi.n	81070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106fea:	2b00      	cmp	r3, #0
 8106fec:	d004      	beq.n	8106ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8106fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106ff4:	d004      	beq.n	8107000 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8106ff6:	e054      	b.n	81070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8106ff8:	f7fe f9ca 	bl	8105390 <HAL_RCC_GetPCLK1Freq>
 8106ffc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8106ffe:	e1f6      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107000:	4b29      	ldr	r3, [pc, #164]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107002:	681b      	ldr	r3, [r3, #0]
 8107004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107008:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810700c:	d107      	bne.n	810701e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810700e:	f107 0318 	add.w	r3, r7, #24
 8107012:	4618      	mov	r0, r3
 8107014:	f000 fa0a 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107018:	69fb      	ldr	r3, [r7, #28]
 810701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810701c:	e1e7      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810701e:	2300      	movs	r3, #0
 8107020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107022:	e1e4      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107024:	4b20      	ldr	r3, [pc, #128]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107026:	681b      	ldr	r3, [r3, #0]
 8107028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810702c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107030:	d107      	bne.n	8107042 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107032:	f107 030c 	add.w	r3, r7, #12
 8107036:	4618      	mov	r0, r3
 8107038:	f000 fb4c 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810703c:	693b      	ldr	r3, [r7, #16]
 810703e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107040:	e1d5      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107042:	2300      	movs	r3, #0
 8107044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107046:	e1d2      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107048:	4b17      	ldr	r3, [pc, #92]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	f003 0304 	and.w	r3, r3, #4
 8107050:	2b04      	cmp	r3, #4
 8107052:	d109      	bne.n	8107068 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107054:	4b14      	ldr	r3, [pc, #80]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107056:	681b      	ldr	r3, [r3, #0]
 8107058:	08db      	lsrs	r3, r3, #3
 810705a:	f003 0303 	and.w	r3, r3, #3
 810705e:	4a13      	ldr	r2, [pc, #76]	@ (81070ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107060:	fa22 f303 	lsr.w	r3, r2, r3
 8107064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107066:	e1c2      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107068:	2300      	movs	r3, #0
 810706a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810706c:	e1bf      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810706e:	4b0e      	ldr	r3, [pc, #56]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107070:	681b      	ldr	r3, [r3, #0]
 8107072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810707a:	d102      	bne.n	8107082 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 810707c:	4b0c      	ldr	r3, [pc, #48]	@ (81070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810707e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107080:	e1b5      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107082:	2300      	movs	r3, #0
 8107084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107086:	e1b2      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107088:	4b07      	ldr	r3, [pc, #28]	@ (81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810708a:	681b      	ldr	r3, [r3, #0]
 810708c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107094:	d102      	bne.n	810709c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8107096:	4b07      	ldr	r3, [pc, #28]	@ (81070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810709a:	e1a8      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810709c:	2300      	movs	r3, #0
 810709e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81070a0:	e1a5      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81070a2:	2300      	movs	r3, #0
 81070a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81070a6:	e1a2      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81070a8:	58024400 	.word	0x58024400
 81070ac:	03d09000 	.word	0x03d09000
 81070b0:	003d0900 	.word	0x003d0900
 81070b4:	017d7840 	.word	0x017d7840
 81070b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81070bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81070c0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 81070c4:	430b      	orrs	r3, r1
 81070c6:	d173      	bne.n	81071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 81070c8:	4b9c      	ldr	r3, [pc, #624]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81070ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81070cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81070d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81070d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81070d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81070d8:	d02f      	beq.n	810713a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81070da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81070dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81070e0:	d863      	bhi.n	81071aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 81070e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81070e4:	2b00      	cmp	r3, #0
 81070e6:	d004      	beq.n	81070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81070e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81070ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81070ee:	d012      	beq.n	8107116 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81070f0:	e05b      	b.n	81071aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81070f2:	4b92      	ldr	r3, [pc, #584]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81070f4:	681b      	ldr	r3, [r3, #0]
 81070f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81070fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81070fe:	d107      	bne.n	8107110 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107100:	f107 0318 	add.w	r3, r7, #24
 8107104:	4618      	mov	r0, r3
 8107106:	f000 f991 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810710a:	69bb      	ldr	r3, [r7, #24]
 810710c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810710e:	e16e      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107110:	2300      	movs	r3, #0
 8107112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107114:	e16b      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107116:	4b89      	ldr	r3, [pc, #548]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107118:	681b      	ldr	r3, [r3, #0]
 810711a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810711e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107122:	d107      	bne.n	8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107124:	f107 030c 	add.w	r3, r7, #12
 8107128:	4618      	mov	r0, r3
 810712a:	f000 fad3 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810712e:	697b      	ldr	r3, [r7, #20]
 8107130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107132:	e15c      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107134:	2300      	movs	r3, #0
 8107136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107138:	e159      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810713a:	4b80      	ldr	r3, [pc, #512]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810713c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810713e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107142:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107144:	4b7d      	ldr	r3, [pc, #500]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107146:	681b      	ldr	r3, [r3, #0]
 8107148:	f003 0304 	and.w	r3, r3, #4
 810714c:	2b04      	cmp	r3, #4
 810714e:	d10c      	bne.n	810716a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8107150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107152:	2b00      	cmp	r3, #0
 8107154:	d109      	bne.n	810716a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107156:	4b79      	ldr	r3, [pc, #484]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107158:	681b      	ldr	r3, [r3, #0]
 810715a:	08db      	lsrs	r3, r3, #3
 810715c:	f003 0303 	and.w	r3, r3, #3
 8107160:	4a77      	ldr	r2, [pc, #476]	@ (8107340 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8107162:	fa22 f303 	lsr.w	r3, r2, r3
 8107166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107168:	e01e      	b.n	81071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810716a:	4b74      	ldr	r3, [pc, #464]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810716c:	681b      	ldr	r3, [r3, #0]
 810716e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107176:	d106      	bne.n	8107186 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8107178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810717a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810717e:	d102      	bne.n	8107186 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107180:	4b70      	ldr	r3, [pc, #448]	@ (8107344 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8107182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107184:	e010      	b.n	81071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107186:	4b6d      	ldr	r3, [pc, #436]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810718e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107192:	d106      	bne.n	81071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8107194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810719a:	d102      	bne.n	81071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810719c:	4b6a      	ldr	r3, [pc, #424]	@ (8107348 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81071a0:	e002      	b.n	81071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81071a2:	2300      	movs	r3, #0
 81071a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81071a6:	e122      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81071a8:	e121      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81071aa:	2300      	movs	r3, #0
 81071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81071ae:	e11e      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81071b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81071b4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 81071b8:	430b      	orrs	r3, r1
 81071ba:	d133      	bne.n	8107224 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 81071bc:	4b5f      	ldr	r3, [pc, #380]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81071be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81071c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81071c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81071c8:	2b00      	cmp	r3, #0
 81071ca:	d004      	beq.n	81071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 81071cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81071ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81071d2:	d012      	beq.n	81071fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 81071d4:	e023      	b.n	810721e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81071d6:	4b59      	ldr	r3, [pc, #356]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81071d8:	681b      	ldr	r3, [r3, #0]
 81071da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81071de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81071e2:	d107      	bne.n	81071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81071e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81071e8:	4618      	mov	r0, r3
 81071ea:	f000 fbc7 	bl	810797c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81071f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071f2:	e0fc      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071f4:	2300      	movs	r3, #0
 81071f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81071f8:	e0f9      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81071fa:	4b50      	ldr	r3, [pc, #320]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81071fc:	681b      	ldr	r3, [r3, #0]
 81071fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107206:	d107      	bne.n	8107218 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107208:	f107 0318 	add.w	r3, r7, #24
 810720c:	4618      	mov	r0, r3
 810720e:	f000 f90d 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107212:	6a3b      	ldr	r3, [r7, #32]
 8107214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107216:	e0ea      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107218:	2300      	movs	r3, #0
 810721a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810721c:	e0e7      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810721e:	2300      	movs	r3, #0
 8107220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107222:	e0e4      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8107224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107228:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 810722c:	430b      	orrs	r3, r1
 810722e:	f040 808d 	bne.w	810734c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8107232:	4b42      	ldr	r3, [pc, #264]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107236:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 810723a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810723c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810723e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107242:	d06b      	beq.n	810731c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8107244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810724a:	d874      	bhi.n	8107336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810724e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107252:	d056      	beq.n	8107302 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8107254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810725a:	d86c      	bhi.n	8107336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810725c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810725e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107262:	d03b      	beq.n	81072dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8107264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107266:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810726a:	d864      	bhi.n	8107336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810726e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107272:	d021      	beq.n	81072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8107274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810727a:	d85c      	bhi.n	8107336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810727c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810727e:	2b00      	cmp	r3, #0
 8107280:	d004      	beq.n	810728c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8107282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107288:	d004      	beq.n	8107294 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810728a:	e054      	b.n	8107336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810728c:	f000 f8b8 	bl	8107400 <HAL_RCCEx_GetD3PCLK1Freq>
 8107290:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107292:	e0ac      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107294:	4b29      	ldr	r3, [pc, #164]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107296:	681b      	ldr	r3, [r3, #0]
 8107298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810729c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81072a0:	d107      	bne.n	81072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81072a2:	f107 0318 	add.w	r3, r7, #24
 81072a6:	4618      	mov	r0, r3
 81072a8:	f000 f8c0 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81072ac:	69fb      	ldr	r3, [r7, #28]
 81072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81072b0:	e09d      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81072b2:	2300      	movs	r3, #0
 81072b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81072b6:	e09a      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81072b8:	4b20      	ldr	r3, [pc, #128]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81072ba:	681b      	ldr	r3, [r3, #0]
 81072bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81072c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81072c4:	d107      	bne.n	81072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81072c6:	f107 030c 	add.w	r3, r7, #12
 81072ca:	4618      	mov	r0, r3
 81072cc:	f000 fa02 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81072d0:	693b      	ldr	r3, [r7, #16]
 81072d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81072d4:	e08b      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81072d6:	2300      	movs	r3, #0
 81072d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81072da:	e088      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81072dc:	4b17      	ldr	r3, [pc, #92]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81072de:	681b      	ldr	r3, [r3, #0]
 81072e0:	f003 0304 	and.w	r3, r3, #4
 81072e4:	2b04      	cmp	r3, #4
 81072e6:	d109      	bne.n	81072fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81072e8:	4b14      	ldr	r3, [pc, #80]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81072ea:	681b      	ldr	r3, [r3, #0]
 81072ec:	08db      	lsrs	r3, r3, #3
 81072ee:	f003 0303 	and.w	r3, r3, #3
 81072f2:	4a13      	ldr	r2, [pc, #76]	@ (8107340 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81072f4:	fa22 f303 	lsr.w	r3, r2, r3
 81072f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81072fa:	e078      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81072fc:	2300      	movs	r3, #0
 81072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107300:	e075      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8107302:	4b0e      	ldr	r3, [pc, #56]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107304:	681b      	ldr	r3, [r3, #0]
 8107306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810730a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810730e:	d102      	bne.n	8107316 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8107310:	4b0c      	ldr	r3, [pc, #48]	@ (8107344 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8107312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107314:	e06b      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107316:	2300      	movs	r3, #0
 8107318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810731a:	e068      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810731c:	4b07      	ldr	r3, [pc, #28]	@ (810733c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810731e:	681b      	ldr	r3, [r3, #0]
 8107320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107324:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107328:	d102      	bne.n	8107330 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810732a:	4b07      	ldr	r3, [pc, #28]	@ (8107348 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810732c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810732e:	e05e      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107330:	2300      	movs	r3, #0
 8107332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107334:	e05b      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8107336:	2300      	movs	r3, #0
 8107338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810733a:	e058      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810733c:	58024400 	.word	0x58024400
 8107340:	03d09000 	.word	0x03d09000
 8107344:	003d0900 	.word	0x003d0900
 8107348:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810734c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107350:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8107354:	430b      	orrs	r3, r1
 8107356:	d148      	bne.n	81073ea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8107358:	4b27      	ldr	r3, [pc, #156]	@ (81073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810735a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810735c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107360:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107368:	d02a      	beq.n	81073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810736a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810736c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107370:	d838      	bhi.n	81073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8107372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107374:	2b00      	cmp	r3, #0
 8107376:	d004      	beq.n	8107382 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8107378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810737a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810737e:	d00d      	beq.n	810739c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8107380:	e030      	b.n	81073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107382:	4b1d      	ldr	r3, [pc, #116]	@ (81073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107384:	681b      	ldr	r3, [r3, #0]
 8107386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810738a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810738e:	d102      	bne.n	8107396 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8107390:	4b1a      	ldr	r3, [pc, #104]	@ (81073fc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8107392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107394:	e02b      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107396:	2300      	movs	r3, #0
 8107398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810739a:	e028      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810739c:	4b16      	ldr	r3, [pc, #88]	@ (81073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810739e:	681b      	ldr	r3, [r3, #0]
 81073a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81073a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81073a8:	d107      	bne.n	81073ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81073aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81073ae:	4618      	mov	r0, r3
 81073b0:	f000 fae4 	bl	810797c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81073b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81073b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81073b8:	e019      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81073ba:	2300      	movs	r3, #0
 81073bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81073be:	e016      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81073c0:	4b0d      	ldr	r3, [pc, #52]	@ (81073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81073c2:	681b      	ldr	r3, [r3, #0]
 81073c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81073c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81073cc:	d107      	bne.n	81073de <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81073ce:	f107 0318 	add.w	r3, r7, #24
 81073d2:	4618      	mov	r0, r3
 81073d4:	f000 f82a 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81073d8:	69fb      	ldr	r3, [r7, #28]
 81073da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81073dc:	e007      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81073de:	2300      	movs	r3, #0
 81073e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81073e2:	e004      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81073e4:	2300      	movs	r3, #0
 81073e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81073e8:	e001      	b.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81073ea:	2300      	movs	r3, #0
 81073ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 81073ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81073f0:	4618      	mov	r0, r3
 81073f2:	3740      	adds	r7, #64	@ 0x40
 81073f4:	46bd      	mov	sp, r7
 81073f6:	bd80      	pop	{r7, pc}
 81073f8:	58024400 	.word	0x58024400
 81073fc:	017d7840 	.word	0x017d7840

08107400 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107400:	b580      	push	{r7, lr}
 8107402:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107404:	f7fd ff92 	bl	810532c <HAL_RCC_GetHCLKFreq>
 8107408:	4602      	mov	r2, r0
 810740a:	4b06      	ldr	r3, [pc, #24]	@ (8107424 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810740c:	6a1b      	ldr	r3, [r3, #32]
 810740e:	091b      	lsrs	r3, r3, #4
 8107410:	f003 0307 	and.w	r3, r3, #7
 8107414:	4904      	ldr	r1, [pc, #16]	@ (8107428 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8107416:	5ccb      	ldrb	r3, [r1, r3]
 8107418:	f003 031f 	and.w	r3, r3, #31
 810741c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107420:	4618      	mov	r0, r3
 8107422:	bd80      	pop	{r7, pc}
 8107424:	58024400 	.word	0x58024400
 8107428:	0810fcbc 	.word	0x0810fcbc

0810742c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810742c:	b480      	push	{r7}
 810742e:	b089      	sub	sp, #36	@ 0x24
 8107430:	af00      	add	r7, sp, #0
 8107432:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107434:	4ba1      	ldr	r3, [pc, #644]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107438:	f003 0303 	and.w	r3, r3, #3
 810743c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810743e:	4b9f      	ldr	r3, [pc, #636]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107442:	0b1b      	lsrs	r3, r3, #12
 8107444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107448:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810744a:	4b9c      	ldr	r3, [pc, #624]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810744c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810744e:	091b      	lsrs	r3, r3, #4
 8107450:	f003 0301 	and.w	r3, r3, #1
 8107454:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8107456:	4b99      	ldr	r3, [pc, #612]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810745a:	08db      	lsrs	r3, r3, #3
 810745c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107460:	693a      	ldr	r2, [r7, #16]
 8107462:	fb02 f303 	mul.w	r3, r2, r3
 8107466:	ee07 3a90 	vmov	s15, r3
 810746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810746e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8107472:	697b      	ldr	r3, [r7, #20]
 8107474:	2b00      	cmp	r3, #0
 8107476:	f000 8111 	beq.w	810769c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810747a:	69bb      	ldr	r3, [r7, #24]
 810747c:	2b02      	cmp	r3, #2
 810747e:	f000 8083 	beq.w	8107588 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8107482:	69bb      	ldr	r3, [r7, #24]
 8107484:	2b02      	cmp	r3, #2
 8107486:	f200 80a1 	bhi.w	81075cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810748a:	69bb      	ldr	r3, [r7, #24]
 810748c:	2b00      	cmp	r3, #0
 810748e:	d003      	beq.n	8107498 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107490:	69bb      	ldr	r3, [r7, #24]
 8107492:	2b01      	cmp	r3, #1
 8107494:	d056      	beq.n	8107544 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107496:	e099      	b.n	81075cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107498:	4b88      	ldr	r3, [pc, #544]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810749a:	681b      	ldr	r3, [r3, #0]
 810749c:	f003 0320 	and.w	r3, r3, #32
 81074a0:	2b00      	cmp	r3, #0
 81074a2:	d02d      	beq.n	8107500 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81074a4:	4b85      	ldr	r3, [pc, #532]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074a6:	681b      	ldr	r3, [r3, #0]
 81074a8:	08db      	lsrs	r3, r3, #3
 81074aa:	f003 0303 	and.w	r3, r3, #3
 81074ae:	4a84      	ldr	r2, [pc, #528]	@ (81076c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81074b0:	fa22 f303 	lsr.w	r3, r2, r3
 81074b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81074b6:	68bb      	ldr	r3, [r7, #8]
 81074b8:	ee07 3a90 	vmov	s15, r3
 81074bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074c0:	697b      	ldr	r3, [r7, #20]
 81074c2:	ee07 3a90 	vmov	s15, r3
 81074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81074ce:	4b7b      	ldr	r3, [pc, #492]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81074d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81074d6:	ee07 3a90 	vmov	s15, r3
 81074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074de:	ed97 6a03 	vldr	s12, [r7, #12]
 81074e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81074ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81074fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81074fe:	e087      	b.n	8107610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107500:	697b      	ldr	r3, [r7, #20]
 8107502:	ee07 3a90 	vmov	s15, r3
 8107506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810750a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107512:	4b6a      	ldr	r3, [pc, #424]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810751a:	ee07 3a90 	vmov	s15, r3
 810751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107522:	ed97 6a03 	vldr	s12, [r7, #12]
 8107526:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810753e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107542:	e065      	b.n	8107610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107544:	697b      	ldr	r3, [r7, #20]
 8107546:	ee07 3a90 	vmov	s15, r3
 810754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810754e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81076cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107556:	4b59      	ldr	r3, [pc, #356]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810755e:	ee07 3a90 	vmov	s15, r3
 8107562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107566:	ed97 6a03 	vldr	s12, [r7, #12]
 810756a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810756e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810757a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107586:	e043      	b.n	8107610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107588:	697b      	ldr	r3, [r7, #20]
 810758a:	ee07 3a90 	vmov	s15, r3
 810758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107592:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810759a:	4b48      	ldr	r3, [pc, #288]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810759c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81075a2:	ee07 3a90 	vmov	s15, r3
 81075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81075aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81075ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81075ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81075c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81075ca:	e021      	b.n	8107610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81075cc:	697b      	ldr	r3, [r7, #20]
 81075ce:	ee07 3a90 	vmov	s15, r3
 81075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81076cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81075de:	4b37      	ldr	r3, [pc, #220]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81075e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81075e6:	ee07 3a90 	vmov	s15, r3
 81075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81075ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81075f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81075f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81075fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81075fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107606:	ee67 7a27 	vmul.f32	s15, s14, s15
 810760a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810760e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107610:	4b2a      	ldr	r3, [pc, #168]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107614:	0a5b      	lsrs	r3, r3, #9
 8107616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810761a:	ee07 3a90 	vmov	s15, r3
 810761e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107626:	ee37 7a87 	vadd.f32	s14, s15, s14
 810762a:	edd7 6a07 	vldr	s13, [r7, #28]
 810762e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107636:	ee17 2a90 	vmov	r2, s15
 810763a:	687b      	ldr	r3, [r7, #4]
 810763c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810763e:	4b1f      	ldr	r3, [pc, #124]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107642:	0c1b      	lsrs	r3, r3, #16
 8107644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107648:	ee07 3a90 	vmov	s15, r3
 810764c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107658:	edd7 6a07 	vldr	s13, [r7, #28]
 810765c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107664:	ee17 2a90 	vmov	r2, s15
 8107668:	687b      	ldr	r3, [r7, #4]
 810766a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810766c:	4b13      	ldr	r3, [pc, #76]	@ (81076bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810766e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107670:	0e1b      	lsrs	r3, r3, #24
 8107672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107676:	ee07 3a90 	vmov	s15, r3
 810767a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810767e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107686:	edd7 6a07 	vldr	s13, [r7, #28]
 810768a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810768e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107692:	ee17 2a90 	vmov	r2, s15
 8107696:	687b      	ldr	r3, [r7, #4]
 8107698:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810769a:	e008      	b.n	81076ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810769c:	687b      	ldr	r3, [r7, #4]
 810769e:	2200      	movs	r2, #0
 81076a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81076a2:	687b      	ldr	r3, [r7, #4]
 81076a4:	2200      	movs	r2, #0
 81076a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81076a8:	687b      	ldr	r3, [r7, #4]
 81076aa:	2200      	movs	r2, #0
 81076ac:	609a      	str	r2, [r3, #8]
}
 81076ae:	bf00      	nop
 81076b0:	3724      	adds	r7, #36	@ 0x24
 81076b2:	46bd      	mov	sp, r7
 81076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076b8:	4770      	bx	lr
 81076ba:	bf00      	nop
 81076bc:	58024400 	.word	0x58024400
 81076c0:	03d09000 	.word	0x03d09000
 81076c4:	46000000 	.word	0x46000000
 81076c8:	4c742400 	.word	0x4c742400
 81076cc:	4a742400 	.word	0x4a742400
 81076d0:	4bbebc20 	.word	0x4bbebc20

081076d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81076d4:	b480      	push	{r7}
 81076d6:	b089      	sub	sp, #36	@ 0x24
 81076d8:	af00      	add	r7, sp, #0
 81076da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81076dc:	4ba1      	ldr	r3, [pc, #644]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81076e0:	f003 0303 	and.w	r3, r3, #3
 81076e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81076e6:	4b9f      	ldr	r3, [pc, #636]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81076ea:	0d1b      	lsrs	r3, r3, #20
 81076ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81076f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81076f2:	4b9c      	ldr	r3, [pc, #624]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81076f6:	0a1b      	lsrs	r3, r3, #8
 81076f8:	f003 0301 	and.w	r3, r3, #1
 81076fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81076fe:	4b99      	ldr	r3, [pc, #612]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107702:	08db      	lsrs	r3, r3, #3
 8107704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107708:	693a      	ldr	r2, [r7, #16]
 810770a:	fb02 f303 	mul.w	r3, r2, r3
 810770e:	ee07 3a90 	vmov	s15, r3
 8107712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107716:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810771a:	697b      	ldr	r3, [r7, #20]
 810771c:	2b00      	cmp	r3, #0
 810771e:	f000 8111 	beq.w	8107944 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107722:	69bb      	ldr	r3, [r7, #24]
 8107724:	2b02      	cmp	r3, #2
 8107726:	f000 8083 	beq.w	8107830 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810772a:	69bb      	ldr	r3, [r7, #24]
 810772c:	2b02      	cmp	r3, #2
 810772e:	f200 80a1 	bhi.w	8107874 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107732:	69bb      	ldr	r3, [r7, #24]
 8107734:	2b00      	cmp	r3, #0
 8107736:	d003      	beq.n	8107740 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107738:	69bb      	ldr	r3, [r7, #24]
 810773a:	2b01      	cmp	r3, #1
 810773c:	d056      	beq.n	81077ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810773e:	e099      	b.n	8107874 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107740:	4b88      	ldr	r3, [pc, #544]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107742:	681b      	ldr	r3, [r3, #0]
 8107744:	f003 0320 	and.w	r3, r3, #32
 8107748:	2b00      	cmp	r3, #0
 810774a:	d02d      	beq.n	81077a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810774c:	4b85      	ldr	r3, [pc, #532]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810774e:	681b      	ldr	r3, [r3, #0]
 8107750:	08db      	lsrs	r3, r3, #3
 8107752:	f003 0303 	and.w	r3, r3, #3
 8107756:	4a84      	ldr	r2, [pc, #528]	@ (8107968 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107758:	fa22 f303 	lsr.w	r3, r2, r3
 810775c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810775e:	68bb      	ldr	r3, [r7, #8]
 8107760:	ee07 3a90 	vmov	s15, r3
 8107764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107768:	697b      	ldr	r3, [r7, #20]
 810776a:	ee07 3a90 	vmov	s15, r3
 810776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107776:	4b7b      	ldr	r3, [pc, #492]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810777a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810777e:	ee07 3a90 	vmov	s15, r3
 8107782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107786:	ed97 6a03 	vldr	s12, [r7, #12]
 810778a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810796c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810778e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810779a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810779e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81077a6:	e087      	b.n	81078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81077a8:	697b      	ldr	r3, [r7, #20]
 81077aa:	ee07 3a90 	vmov	s15, r3
 81077ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107970 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81077b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077ba:	4b6a      	ldr	r3, [pc, #424]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81077be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077c2:	ee07 3a90 	vmov	s15, r3
 81077c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81077ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810796c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81077d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81077de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81077ea:	e065      	b.n	81078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81077ec:	697b      	ldr	r3, [r7, #20]
 81077ee:	ee07 3a90 	vmov	s15, r3
 81077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81077fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077fe:	4b59      	ldr	r3, [pc, #356]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107806:	ee07 3a90 	vmov	s15, r3
 810780a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810780e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107812:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810796c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810781a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810781e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107826:	ee67 7a27 	vmul.f32	s15, s14, s15
 810782a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810782e:	e043      	b.n	81078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107830:	697b      	ldr	r3, [r7, #20]
 8107832:	ee07 3a90 	vmov	s15, r3
 8107836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810783a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810783e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107842:	4b48      	ldr	r3, [pc, #288]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810784a:	ee07 3a90 	vmov	s15, r3
 810784e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107852:	ed97 6a03 	vldr	s12, [r7, #12]
 8107856:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810796c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810785a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810785e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810786a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810786e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107872:	e021      	b.n	81078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107874:	697b      	ldr	r3, [r7, #20]
 8107876:	ee07 3a90 	vmov	s15, r3
 810787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810787e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107886:	4b37      	ldr	r3, [pc, #220]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810788a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810788e:	ee07 3a90 	vmov	s15, r3
 8107892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107896:	ed97 6a03 	vldr	s12, [r7, #12]
 810789a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810796c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810789e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81078aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81078b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81078b8:	4b2a      	ldr	r3, [pc, #168]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81078ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81078bc:	0a5b      	lsrs	r3, r3, #9
 81078be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81078c2:	ee07 3a90 	vmov	s15, r3
 81078c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81078ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 81078d2:	edd7 6a07 	vldr	s13, [r7, #28]
 81078d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81078da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81078de:	ee17 2a90 	vmov	r2, s15
 81078e2:	687b      	ldr	r3, [r7, #4]
 81078e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81078e6:	4b1f      	ldr	r3, [pc, #124]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81078e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81078ea:	0c1b      	lsrs	r3, r3, #16
 81078ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81078f0:	ee07 3a90 	vmov	s15, r3
 81078f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81078fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107900:	edd7 6a07 	vldr	s13, [r7, #28]
 8107904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810790c:	ee17 2a90 	vmov	r2, s15
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8107914:	4b13      	ldr	r3, [pc, #76]	@ (8107964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107918:	0e1b      	lsrs	r3, r3, #24
 810791a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810791e:	ee07 3a90 	vmov	s15, r3
 8107922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107926:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810792a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810792e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810793a:	ee17 2a90 	vmov	r2, s15
 810793e:	687b      	ldr	r3, [r7, #4]
 8107940:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8107942:	e008      	b.n	8107956 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8107944:	687b      	ldr	r3, [r7, #4]
 8107946:	2200      	movs	r2, #0
 8107948:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810794a:	687b      	ldr	r3, [r7, #4]
 810794c:	2200      	movs	r2, #0
 810794e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	2200      	movs	r2, #0
 8107954:	609a      	str	r2, [r3, #8]
}
 8107956:	bf00      	nop
 8107958:	3724      	adds	r7, #36	@ 0x24
 810795a:	46bd      	mov	sp, r7
 810795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107960:	4770      	bx	lr
 8107962:	bf00      	nop
 8107964:	58024400 	.word	0x58024400
 8107968:	03d09000 	.word	0x03d09000
 810796c:	46000000 	.word	0x46000000
 8107970:	4c742400 	.word	0x4c742400
 8107974:	4a742400 	.word	0x4a742400
 8107978:	4bbebc20 	.word	0x4bbebc20

0810797c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810797c:	b480      	push	{r7}
 810797e:	b089      	sub	sp, #36	@ 0x24
 8107980:	af00      	add	r7, sp, #0
 8107982:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107984:	4ba0      	ldr	r3, [pc, #640]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107988:	f003 0303 	and.w	r3, r3, #3
 810798c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810798e:	4b9e      	ldr	r3, [pc, #632]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107992:	091b      	lsrs	r3, r3, #4
 8107994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107998:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810799a:	4b9b      	ldr	r3, [pc, #620]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810799c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810799e:	f003 0301 	and.w	r3, r3, #1
 81079a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81079a4:	4b98      	ldr	r3, [pc, #608]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81079a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81079a8:	08db      	lsrs	r3, r3, #3
 81079aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81079ae:	693a      	ldr	r2, [r7, #16]
 81079b0:	fb02 f303 	mul.w	r3, r2, r3
 81079b4:	ee07 3a90 	vmov	s15, r3
 81079b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81079c0:	697b      	ldr	r3, [r7, #20]
 81079c2:	2b00      	cmp	r3, #0
 81079c4:	f000 8111 	beq.w	8107bea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81079c8:	69bb      	ldr	r3, [r7, #24]
 81079ca:	2b02      	cmp	r3, #2
 81079cc:	f000 8083 	beq.w	8107ad6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81079d0:	69bb      	ldr	r3, [r7, #24]
 81079d2:	2b02      	cmp	r3, #2
 81079d4:	f200 80a1 	bhi.w	8107b1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81079d8:	69bb      	ldr	r3, [r7, #24]
 81079da:	2b00      	cmp	r3, #0
 81079dc:	d003      	beq.n	81079e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81079de:	69bb      	ldr	r3, [r7, #24]
 81079e0:	2b01      	cmp	r3, #1
 81079e2:	d056      	beq.n	8107a92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81079e4:	e099      	b.n	8107b1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81079e6:	4b88      	ldr	r3, [pc, #544]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81079e8:	681b      	ldr	r3, [r3, #0]
 81079ea:	f003 0320 	and.w	r3, r3, #32
 81079ee:	2b00      	cmp	r3, #0
 81079f0:	d02d      	beq.n	8107a4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81079f2:	4b85      	ldr	r3, [pc, #532]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81079f4:	681b      	ldr	r3, [r3, #0]
 81079f6:	08db      	lsrs	r3, r3, #3
 81079f8:	f003 0303 	and.w	r3, r3, #3
 81079fc:	4a83      	ldr	r2, [pc, #524]	@ (8107c0c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81079fe:	fa22 f303 	lsr.w	r3, r2, r3
 8107a02:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107a04:	68bb      	ldr	r3, [r7, #8]
 8107a06:	ee07 3a90 	vmov	s15, r3
 8107a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a0e:	697b      	ldr	r3, [r7, #20]
 8107a10:	ee07 3a90 	vmov	s15, r3
 8107a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a1c:	4b7a      	ldr	r3, [pc, #488]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a24:	ee07 3a90 	vmov	s15, r3
 8107a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a30:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8107c10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a48:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107a4c:	e087      	b.n	8107b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107a4e:	697b      	ldr	r3, [r7, #20]
 8107a50:	ee07 3a90 	vmov	s15, r3
 8107a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a58:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8107c14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a60:	4b69      	ldr	r3, [pc, #420]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a68:	ee07 3a90 	vmov	s15, r3
 8107a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a70:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a74:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8107c10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107a90:	e065      	b.n	8107b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107a92:	697b      	ldr	r3, [r7, #20]
 8107a94:	ee07 3a90 	vmov	s15, r3
 8107a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a9c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8107c18 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107aa4:	4b58      	ldr	r3, [pc, #352]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107aac:	ee07 3a90 	vmov	s15, r3
 8107ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ab4:	ed97 6a03 	vldr	s12, [r7, #12]
 8107ab8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8107c10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107ac4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ad0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107ad4:	e043      	b.n	8107b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107ad6:	697b      	ldr	r3, [r7, #20]
 8107ad8:	ee07 3a90 	vmov	s15, r3
 8107adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ae0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8107c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8107ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107ae8:	4b47      	ldr	r3, [pc, #284]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107af0:	ee07 3a90 	vmov	s15, r3
 8107af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107af8:	ed97 6a03 	vldr	s12, [r7, #12]
 8107afc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8107c10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b18:	e021      	b.n	8107b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107b1a:	697b      	ldr	r3, [r7, #20]
 8107b1c:	ee07 3a90 	vmov	s15, r3
 8107b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b24:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8107c14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107b2c:	4b36      	ldr	r3, [pc, #216]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107b34:	ee07 3a90 	vmov	s15, r3
 8107b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b40:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8107c10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b5c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8107b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107b62:	0a5b      	lsrs	r3, r3, #9
 8107b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107b68:	ee07 3a90 	vmov	s15, r3
 8107b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107b74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8107b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107b84:	ee17 2a90 	vmov	r2, s15
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8107b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107b90:	0c1b      	lsrs	r3, r3, #16
 8107b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107b96:	ee07 3a90 	vmov	s15, r3
 8107b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8107baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107bb2:	ee17 2a90 	vmov	r2, s15
 8107bb6:	687b      	ldr	r3, [r7, #4]
 8107bb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8107bba:	4b13      	ldr	r3, [pc, #76]	@ (8107c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107bbe:	0e1b      	lsrs	r3, r3, #24
 8107bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107bc4:	ee07 3a90 	vmov	s15, r3
 8107bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107bcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107bd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8107bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107be0:	ee17 2a90 	vmov	r2, s15
 8107be4:	687b      	ldr	r3, [r7, #4]
 8107be6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8107be8:	e008      	b.n	8107bfc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8107bea:	687b      	ldr	r3, [r7, #4]
 8107bec:	2200      	movs	r2, #0
 8107bee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8107bf0:	687b      	ldr	r3, [r7, #4]
 8107bf2:	2200      	movs	r2, #0
 8107bf4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8107bf6:	687b      	ldr	r3, [r7, #4]
 8107bf8:	2200      	movs	r2, #0
 8107bfa:	609a      	str	r2, [r3, #8]
}
 8107bfc:	bf00      	nop
 8107bfe:	3724      	adds	r7, #36	@ 0x24
 8107c00:	46bd      	mov	sp, r7
 8107c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c06:	4770      	bx	lr
 8107c08:	58024400 	.word	0x58024400
 8107c0c:	03d09000 	.word	0x03d09000
 8107c10:	46000000 	.word	0x46000000
 8107c14:	4c742400 	.word	0x4c742400
 8107c18:	4a742400 	.word	0x4a742400
 8107c1c:	4bbebc20 	.word	0x4bbebc20

08107c20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107c20:	b580      	push	{r7, lr}
 8107c22:	b084      	sub	sp, #16
 8107c24:	af00      	add	r7, sp, #0
 8107c26:	6078      	str	r0, [r7, #4]
 8107c28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107c2a:	2300      	movs	r3, #0
 8107c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107c2e:	4b54      	ldr	r3, [pc, #336]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c32:	f003 0303 	and.w	r3, r3, #3
 8107c36:	2b03      	cmp	r3, #3
 8107c38:	d101      	bne.n	8107c3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107c3a:	2301      	movs	r3, #1
 8107c3c:	e09b      	b.n	8107d76 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107c3e:	4b50      	ldr	r3, [pc, #320]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107c40:	681b      	ldr	r3, [r3, #0]
 8107c42:	4a4f      	ldr	r2, [pc, #316]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107c44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8107c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107c4a:	f7fa fe49 	bl	81028e0 <HAL_GetTick>
 8107c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107c50:	e008      	b.n	8107c64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8107c52:	f7fa fe45 	bl	81028e0 <HAL_GetTick>
 8107c56:	4602      	mov	r2, r0
 8107c58:	68bb      	ldr	r3, [r7, #8]
 8107c5a:	1ad3      	subs	r3, r2, r3
 8107c5c:	2b02      	cmp	r3, #2
 8107c5e:	d901      	bls.n	8107c64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107c60:	2303      	movs	r3, #3
 8107c62:	e088      	b.n	8107d76 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107c64:	4b46      	ldr	r3, [pc, #280]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107c66:	681b      	ldr	r3, [r3, #0]
 8107c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107c6c:	2b00      	cmp	r3, #0
 8107c6e:	d1f0      	bne.n	8107c52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107c70:	4b43      	ldr	r3, [pc, #268]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c74:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	681b      	ldr	r3, [r3, #0]
 8107c7c:	031b      	lsls	r3, r3, #12
 8107c7e:	4940      	ldr	r1, [pc, #256]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107c80:	4313      	orrs	r3, r2
 8107c82:	628b      	str	r3, [r1, #40]	@ 0x28
 8107c84:	687b      	ldr	r3, [r7, #4]
 8107c86:	685b      	ldr	r3, [r3, #4]
 8107c88:	3b01      	subs	r3, #1
 8107c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107c8e:	687b      	ldr	r3, [r7, #4]
 8107c90:	689b      	ldr	r3, [r3, #8]
 8107c92:	3b01      	subs	r3, #1
 8107c94:	025b      	lsls	r3, r3, #9
 8107c96:	b29b      	uxth	r3, r3
 8107c98:	431a      	orrs	r2, r3
 8107c9a:	687b      	ldr	r3, [r7, #4]
 8107c9c:	68db      	ldr	r3, [r3, #12]
 8107c9e:	3b01      	subs	r3, #1
 8107ca0:	041b      	lsls	r3, r3, #16
 8107ca2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8107ca6:	431a      	orrs	r2, r3
 8107ca8:	687b      	ldr	r3, [r7, #4]
 8107caa:	691b      	ldr	r3, [r3, #16]
 8107cac:	3b01      	subs	r3, #1
 8107cae:	061b      	lsls	r3, r3, #24
 8107cb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8107cb4:	4932      	ldr	r1, [pc, #200]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107cb6:	4313      	orrs	r3, r2
 8107cb8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107cba:	4b31      	ldr	r3, [pc, #196]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107cbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8107cc2:	687b      	ldr	r3, [r7, #4]
 8107cc4:	695b      	ldr	r3, [r3, #20]
 8107cc6:	492e      	ldr	r1, [pc, #184]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107cc8:	4313      	orrs	r3, r2
 8107cca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107cd0:	f023 0220 	bic.w	r2, r3, #32
 8107cd4:	687b      	ldr	r3, [r7, #4]
 8107cd6:	699b      	ldr	r3, [r3, #24]
 8107cd8:	4929      	ldr	r1, [pc, #164]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107cda:	4313      	orrs	r3, r2
 8107cdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107cde:	4b28      	ldr	r3, [pc, #160]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ce2:	4a27      	ldr	r2, [pc, #156]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107ce4:	f023 0310 	bic.w	r3, r3, #16
 8107ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107cea:	4b25      	ldr	r3, [pc, #148]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8107cf2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8107cf6:	687a      	ldr	r2, [r7, #4]
 8107cf8:	69d2      	ldr	r2, [r2, #28]
 8107cfa:	00d2      	lsls	r2, r2, #3
 8107cfc:	4920      	ldr	r1, [pc, #128]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107cfe:	4313      	orrs	r3, r2
 8107d00:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107d02:	4b1f      	ldr	r3, [pc, #124]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d06:	4a1e      	ldr	r2, [pc, #120]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d08:	f043 0310 	orr.w	r3, r3, #16
 8107d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107d0e:	683b      	ldr	r3, [r7, #0]
 8107d10:	2b00      	cmp	r3, #0
 8107d12:	d106      	bne.n	8107d22 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107d14:	4b1a      	ldr	r3, [pc, #104]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d18:	4a19      	ldr	r2, [pc, #100]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8107d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107d20:	e00f      	b.n	8107d42 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107d22:	683b      	ldr	r3, [r7, #0]
 8107d24:	2b01      	cmp	r3, #1
 8107d26:	d106      	bne.n	8107d36 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107d28:	4b15      	ldr	r3, [pc, #84]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d2c:	4a14      	ldr	r2, [pc, #80]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8107d32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107d34:	e005      	b.n	8107d42 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107d36:	4b12      	ldr	r3, [pc, #72]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d3a:	4a11      	ldr	r2, [pc, #68]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8107d40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107d42:	4b0f      	ldr	r3, [pc, #60]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	4a0e      	ldr	r2, [pc, #56]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8107d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107d4e:	f7fa fdc7 	bl	81028e0 <HAL_GetTick>
 8107d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107d54:	e008      	b.n	8107d68 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8107d56:	f7fa fdc3 	bl	81028e0 <HAL_GetTick>
 8107d5a:	4602      	mov	r2, r0
 8107d5c:	68bb      	ldr	r3, [r7, #8]
 8107d5e:	1ad3      	subs	r3, r2, r3
 8107d60:	2b02      	cmp	r3, #2
 8107d62:	d901      	bls.n	8107d68 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107d64:	2303      	movs	r3, #3
 8107d66:	e006      	b.n	8107d76 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107d68:	4b05      	ldr	r3, [pc, #20]	@ (8107d80 <RCCEx_PLL2_Config+0x160>)
 8107d6a:	681b      	ldr	r3, [r3, #0]
 8107d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107d70:	2b00      	cmp	r3, #0
 8107d72:	d0f0      	beq.n	8107d56 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8107d76:	4618      	mov	r0, r3
 8107d78:	3710      	adds	r7, #16
 8107d7a:	46bd      	mov	sp, r7
 8107d7c:	bd80      	pop	{r7, pc}
 8107d7e:	bf00      	nop
 8107d80:	58024400 	.word	0x58024400

08107d84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107d84:	b580      	push	{r7, lr}
 8107d86:	b084      	sub	sp, #16
 8107d88:	af00      	add	r7, sp, #0
 8107d8a:	6078      	str	r0, [r7, #4]
 8107d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107d8e:	2300      	movs	r3, #0
 8107d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107d92:	4b54      	ldr	r3, [pc, #336]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107d96:	f003 0303 	and.w	r3, r3, #3
 8107d9a:	2b03      	cmp	r3, #3
 8107d9c:	d101      	bne.n	8107da2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107d9e:	2301      	movs	r3, #1
 8107da0:	e09b      	b.n	8107eda <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107da2:	4b50      	ldr	r3, [pc, #320]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107da4:	681b      	ldr	r3, [r3, #0]
 8107da6:	4a4f      	ldr	r2, [pc, #316]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107da8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8107dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107dae:	f7fa fd97 	bl	81028e0 <HAL_GetTick>
 8107db2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107db4:	e008      	b.n	8107dc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107db6:	f7fa fd93 	bl	81028e0 <HAL_GetTick>
 8107dba:	4602      	mov	r2, r0
 8107dbc:	68bb      	ldr	r3, [r7, #8]
 8107dbe:	1ad3      	subs	r3, r2, r3
 8107dc0:	2b02      	cmp	r3, #2
 8107dc2:	d901      	bls.n	8107dc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107dc4:	2303      	movs	r3, #3
 8107dc6:	e088      	b.n	8107eda <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107dc8:	4b46      	ldr	r3, [pc, #280]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107dca:	681b      	ldr	r3, [r3, #0]
 8107dcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107dd0:	2b00      	cmp	r3, #0
 8107dd2:	d1f0      	bne.n	8107db6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107dd4:	4b43      	ldr	r3, [pc, #268]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107dd8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8107ddc:	687b      	ldr	r3, [r7, #4]
 8107dde:	681b      	ldr	r3, [r3, #0]
 8107de0:	051b      	lsls	r3, r3, #20
 8107de2:	4940      	ldr	r1, [pc, #256]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107de4:	4313      	orrs	r3, r2
 8107de6:	628b      	str	r3, [r1, #40]	@ 0x28
 8107de8:	687b      	ldr	r3, [r7, #4]
 8107dea:	685b      	ldr	r3, [r3, #4]
 8107dec:	3b01      	subs	r3, #1
 8107dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107df2:	687b      	ldr	r3, [r7, #4]
 8107df4:	689b      	ldr	r3, [r3, #8]
 8107df6:	3b01      	subs	r3, #1
 8107df8:	025b      	lsls	r3, r3, #9
 8107dfa:	b29b      	uxth	r3, r3
 8107dfc:	431a      	orrs	r2, r3
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	68db      	ldr	r3, [r3, #12]
 8107e02:	3b01      	subs	r3, #1
 8107e04:	041b      	lsls	r3, r3, #16
 8107e06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8107e0a:	431a      	orrs	r2, r3
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	691b      	ldr	r3, [r3, #16]
 8107e10:	3b01      	subs	r3, #1
 8107e12:	061b      	lsls	r3, r3, #24
 8107e14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8107e18:	4932      	ldr	r1, [pc, #200]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e1a:	4313      	orrs	r3, r2
 8107e1c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107e1e:	4b31      	ldr	r3, [pc, #196]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8107e26:	687b      	ldr	r3, [r7, #4]
 8107e28:	695b      	ldr	r3, [r3, #20]
 8107e2a:	492e      	ldr	r1, [pc, #184]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e2c:	4313      	orrs	r3, r2
 8107e2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107e30:	4b2c      	ldr	r3, [pc, #176]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e34:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8107e38:	687b      	ldr	r3, [r7, #4]
 8107e3a:	699b      	ldr	r3, [r3, #24]
 8107e3c:	4929      	ldr	r1, [pc, #164]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e3e:	4313      	orrs	r3, r2
 8107e40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107e42:	4b28      	ldr	r3, [pc, #160]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e46:	4a27      	ldr	r2, [pc, #156]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8107e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107e4e:	4b25      	ldr	r3, [pc, #148]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8107e56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8107e5a:	687a      	ldr	r2, [r7, #4]
 8107e5c:	69d2      	ldr	r2, [r2, #28]
 8107e5e:	00d2      	lsls	r2, r2, #3
 8107e60:	4920      	ldr	r1, [pc, #128]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e62:	4313      	orrs	r3, r2
 8107e64:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107e66:	4b1f      	ldr	r3, [pc, #124]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8107e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107e72:	683b      	ldr	r3, [r7, #0]
 8107e74:	2b00      	cmp	r3, #0
 8107e76:	d106      	bne.n	8107e86 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107e78:	4b1a      	ldr	r3, [pc, #104]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e7c:	4a19      	ldr	r2, [pc, #100]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8107e82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107e84:	e00f      	b.n	8107ea6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107e86:	683b      	ldr	r3, [r7, #0]
 8107e88:	2b01      	cmp	r3, #1
 8107e8a:	d106      	bne.n	8107e9a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107e8c:	4b15      	ldr	r3, [pc, #84]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e90:	4a14      	ldr	r2, [pc, #80]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8107e96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107e98:	e005      	b.n	8107ea6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107e9a:	4b12      	ldr	r3, [pc, #72]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e9e:	4a11      	ldr	r2, [pc, #68]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107ea0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8107ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107ea8:	681b      	ldr	r3, [r3, #0]
 8107eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8107eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107eb2:	f7fa fd15 	bl	81028e0 <HAL_GetTick>
 8107eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107eb8:	e008      	b.n	8107ecc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107eba:	f7fa fd11 	bl	81028e0 <HAL_GetTick>
 8107ebe:	4602      	mov	r2, r0
 8107ec0:	68bb      	ldr	r3, [r7, #8]
 8107ec2:	1ad3      	subs	r3, r2, r3
 8107ec4:	2b02      	cmp	r3, #2
 8107ec6:	d901      	bls.n	8107ecc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107ec8:	2303      	movs	r3, #3
 8107eca:	e006      	b.n	8107eda <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107ecc:	4b05      	ldr	r3, [pc, #20]	@ (8107ee4 <RCCEx_PLL3_Config+0x160>)
 8107ece:	681b      	ldr	r3, [r3, #0]
 8107ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107ed4:	2b00      	cmp	r3, #0
 8107ed6:	d0f0      	beq.n	8107eba <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8107eda:	4618      	mov	r0, r3
 8107edc:	3710      	adds	r7, #16
 8107ede:	46bd      	mov	sp, r7
 8107ee0:	bd80      	pop	{r7, pc}
 8107ee2:	bf00      	nop
 8107ee4:	58024400 	.word	0x58024400

08107ee8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8107ee8:	b580      	push	{r7, lr}
 8107eea:	b084      	sub	sp, #16
 8107eec:	af00      	add	r7, sp, #0
 8107eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8107ef0:	2301      	movs	r3, #1
 8107ef2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8107ef4:	687b      	ldr	r3, [r7, #4]
 8107ef6:	2b00      	cmp	r3, #0
 8107ef8:	d073      	beq.n	8107fe2 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8107efa:	687b      	ldr	r3, [r7, #4]
 8107efc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8107f00:	b2db      	uxtb	r3, r3
 8107f02:	2b00      	cmp	r3, #0
 8107f04:	d106      	bne.n	8107f14 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8107f06:	687b      	ldr	r3, [r7, #4]
 8107f08:	2200      	movs	r2, #0
 8107f0a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8107f0e:	6878      	ldr	r0, [r7, #4]
 8107f10:	f7f9 fd3e 	bl	8101990 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8107f14:	687b      	ldr	r3, [r7, #4]
 8107f16:	2202      	movs	r2, #2
 8107f18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8107f1c:	687b      	ldr	r3, [r7, #4]
 8107f1e:	681b      	ldr	r3, [r3, #0]
 8107f20:	68db      	ldr	r3, [r3, #12]
 8107f22:	f003 0310 	and.w	r3, r3, #16
 8107f26:	2b10      	cmp	r3, #16
 8107f28:	d052      	beq.n	8107fd0 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	681b      	ldr	r3, [r3, #0]
 8107f2e:	22ca      	movs	r2, #202	@ 0xca
 8107f30:	625a      	str	r2, [r3, #36]	@ 0x24
 8107f32:	687b      	ldr	r3, [r7, #4]
 8107f34:	681b      	ldr	r3, [r3, #0]
 8107f36:	2253      	movs	r2, #83	@ 0x53
 8107f38:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8107f3a:	6878      	ldr	r0, [r7, #4]
 8107f3c:	f000 f87a 	bl	8108034 <RTC_EnterInitMode>
 8107f40:	4603      	mov	r3, r0
 8107f42:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8107f44:	7bfb      	ldrb	r3, [r7, #15]
 8107f46:	2b00      	cmp	r3, #0
 8107f48:	d126      	bne.n	8107f98 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8107f4a:	687b      	ldr	r3, [r7, #4]
 8107f4c:	681b      	ldr	r3, [r3, #0]
 8107f4e:	689b      	ldr	r3, [r3, #8]
 8107f50:	687a      	ldr	r2, [r7, #4]
 8107f52:	6812      	ldr	r2, [r2, #0]
 8107f54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8107f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8107f5c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	6899      	ldr	r1, [r3, #8]
 8107f64:	687b      	ldr	r3, [r7, #4]
 8107f66:	685a      	ldr	r2, [r3, #4]
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	691b      	ldr	r3, [r3, #16]
 8107f6c:	431a      	orrs	r2, r3
 8107f6e:	687b      	ldr	r3, [r7, #4]
 8107f70:	699b      	ldr	r3, [r3, #24]
 8107f72:	431a      	orrs	r2, r3
 8107f74:	687b      	ldr	r3, [r7, #4]
 8107f76:	681b      	ldr	r3, [r3, #0]
 8107f78:	430a      	orrs	r2, r1
 8107f7a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8107f7c:	687b      	ldr	r3, [r7, #4]
 8107f7e:	689b      	ldr	r3, [r3, #8]
 8107f80:	0419      	lsls	r1, r3, #16
 8107f82:	687b      	ldr	r3, [r7, #4]
 8107f84:	68da      	ldr	r2, [r3, #12]
 8107f86:	687b      	ldr	r3, [r7, #4]
 8107f88:	681b      	ldr	r3, [r3, #0]
 8107f8a:	430a      	orrs	r2, r1
 8107f8c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8107f8e:	6878      	ldr	r0, [r7, #4]
 8107f90:	f000 f884 	bl	810809c <RTC_ExitInitMode>
 8107f94:	4603      	mov	r3, r0
 8107f96:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8107f98:	7bfb      	ldrb	r3, [r7, #15]
 8107f9a:	2b00      	cmp	r3, #0
 8107f9c:	d113      	bne.n	8107fc6 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8107f9e:	687b      	ldr	r3, [r7, #4]
 8107fa0:	681b      	ldr	r3, [r3, #0]
 8107fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8107fa4:	687b      	ldr	r3, [r7, #4]
 8107fa6:	681b      	ldr	r3, [r3, #0]
 8107fa8:	f022 0203 	bic.w	r2, r2, #3
 8107fac:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8107fae:	687b      	ldr	r3, [r7, #4]
 8107fb0:	681b      	ldr	r3, [r3, #0]
 8107fb2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8107fb4:	687b      	ldr	r3, [r7, #4]
 8107fb6:	69da      	ldr	r2, [r3, #28]
 8107fb8:	687b      	ldr	r3, [r7, #4]
 8107fba:	695b      	ldr	r3, [r3, #20]
 8107fbc:	431a      	orrs	r2, r3
 8107fbe:	687b      	ldr	r3, [r7, #4]
 8107fc0:	681b      	ldr	r3, [r3, #0]
 8107fc2:	430a      	orrs	r2, r1
 8107fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8107fc6:	687b      	ldr	r3, [r7, #4]
 8107fc8:	681b      	ldr	r3, [r3, #0]
 8107fca:	22ff      	movs	r2, #255	@ 0xff
 8107fcc:	625a      	str	r2, [r3, #36]	@ 0x24
 8107fce:	e001      	b.n	8107fd4 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8107fd0:	2300      	movs	r3, #0
 8107fd2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8107fd4:	7bfb      	ldrb	r3, [r7, #15]
 8107fd6:	2b00      	cmp	r3, #0
 8107fd8:	d103      	bne.n	8107fe2 <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8107fda:	687b      	ldr	r3, [r7, #4]
 8107fdc:	2201      	movs	r2, #1
 8107fde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8107fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8107fe4:	4618      	mov	r0, r3
 8107fe6:	3710      	adds	r7, #16
 8107fe8:	46bd      	mov	sp, r7
 8107fea:	bd80      	pop	{r7, pc}

08107fec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8107fec:	b580      	push	{r7, lr}
 8107fee:	b084      	sub	sp, #16
 8107ff0:	af00      	add	r7, sp, #0
 8107ff2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8107ff4:	687b      	ldr	r3, [r7, #4]
 8107ff6:	681b      	ldr	r3, [r3, #0]
 8107ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8108030 <HAL_RTC_WaitForSynchro+0x44>)
 8107ffa:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8107ffc:	f7fa fc70 	bl	81028e0 <HAL_GetTick>
 8108000:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8108002:	e009      	b.n	8108018 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8108004:	f7fa fc6c 	bl	81028e0 <HAL_GetTick>
 8108008:	4602      	mov	r2, r0
 810800a:	68fb      	ldr	r3, [r7, #12]
 810800c:	1ad3      	subs	r3, r2, r3
 810800e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8108012:	d901      	bls.n	8108018 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8108014:	2303      	movs	r3, #3
 8108016:	e007      	b.n	8108028 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8108018:	687b      	ldr	r3, [r7, #4]
 810801a:	681b      	ldr	r3, [r3, #0]
 810801c:	68db      	ldr	r3, [r3, #12]
 810801e:	f003 0320 	and.w	r3, r3, #32
 8108022:	2b00      	cmp	r3, #0
 8108024:	d0ee      	beq.n	8108004 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8108026:	2300      	movs	r3, #0
}
 8108028:	4618      	mov	r0, r3
 810802a:	3710      	adds	r7, #16
 810802c:	46bd      	mov	sp, r7
 810802e:	bd80      	pop	{r7, pc}
 8108030:	0003ff5f 	.word	0x0003ff5f

08108034 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8108034:	b580      	push	{r7, lr}
 8108036:	b084      	sub	sp, #16
 8108038:	af00      	add	r7, sp, #0
 810803a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810803c:	2300      	movs	r3, #0
 810803e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	681b      	ldr	r3, [r3, #0]
 8108044:	68db      	ldr	r3, [r3, #12]
 8108046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810804a:	2b00      	cmp	r3, #0
 810804c:	d120      	bne.n	8108090 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	681b      	ldr	r3, [r3, #0]
 8108052:	f04f 32ff 	mov.w	r2, #4294967295
 8108056:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8108058:	f7fa fc42 	bl	81028e0 <HAL_GetTick>
 810805c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810805e:	e00d      	b.n	810807c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8108060:	f7fa fc3e 	bl	81028e0 <HAL_GetTick>
 8108064:	4602      	mov	r2, r0
 8108066:	68bb      	ldr	r3, [r7, #8]
 8108068:	1ad3      	subs	r3, r2, r3
 810806a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810806e:	d905      	bls.n	810807c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8108070:	2303      	movs	r3, #3
 8108072:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108074:	687b      	ldr	r3, [r7, #4]
 8108076:	2203      	movs	r2, #3
 8108078:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	681b      	ldr	r3, [r3, #0]
 8108080:	68db      	ldr	r3, [r3, #12]
 8108082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108086:	2b00      	cmp	r3, #0
 8108088:	d102      	bne.n	8108090 <RTC_EnterInitMode+0x5c>
 810808a:	7bfb      	ldrb	r3, [r7, #15]
 810808c:	2b03      	cmp	r3, #3
 810808e:	d1e7      	bne.n	8108060 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8108090:	7bfb      	ldrb	r3, [r7, #15]
}
 8108092:	4618      	mov	r0, r3
 8108094:	3710      	adds	r7, #16
 8108096:	46bd      	mov	sp, r7
 8108098:	bd80      	pop	{r7, pc}
	...

0810809c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 810809c:	b580      	push	{r7, lr}
 810809e:	b084      	sub	sp, #16
 81080a0:	af00      	add	r7, sp, #0
 81080a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81080a4:	2300      	movs	r3, #0
 81080a6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 81080a8:	4b1a      	ldr	r3, [pc, #104]	@ (8108114 <RTC_ExitInitMode+0x78>)
 81080aa:	68db      	ldr	r3, [r3, #12]
 81080ac:	4a19      	ldr	r2, [pc, #100]	@ (8108114 <RTC_ExitInitMode+0x78>)
 81080ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81080b2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 81080b4:	4b17      	ldr	r3, [pc, #92]	@ (8108114 <RTC_ExitInitMode+0x78>)
 81080b6:	689b      	ldr	r3, [r3, #8]
 81080b8:	f003 0320 	and.w	r3, r3, #32
 81080bc:	2b00      	cmp	r3, #0
 81080be:	d10c      	bne.n	81080da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81080c0:	6878      	ldr	r0, [r7, #4]
 81080c2:	f7ff ff93 	bl	8107fec <HAL_RTC_WaitForSynchro>
 81080c6:	4603      	mov	r3, r0
 81080c8:	2b00      	cmp	r3, #0
 81080ca:	d01e      	beq.n	810810a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	2203      	movs	r2, #3
 81080d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 81080d4:	2303      	movs	r3, #3
 81080d6:	73fb      	strb	r3, [r7, #15]
 81080d8:	e017      	b.n	810810a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81080da:	4b0e      	ldr	r3, [pc, #56]	@ (8108114 <RTC_ExitInitMode+0x78>)
 81080dc:	689b      	ldr	r3, [r3, #8]
 81080de:	4a0d      	ldr	r2, [pc, #52]	@ (8108114 <RTC_ExitInitMode+0x78>)
 81080e0:	f023 0320 	bic.w	r3, r3, #32
 81080e4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81080e6:	6878      	ldr	r0, [r7, #4]
 81080e8:	f7ff ff80 	bl	8107fec <HAL_RTC_WaitForSynchro>
 81080ec:	4603      	mov	r3, r0
 81080ee:	2b00      	cmp	r3, #0
 81080f0:	d005      	beq.n	81080fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81080f2:	687b      	ldr	r3, [r7, #4]
 81080f4:	2203      	movs	r2, #3
 81080f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 81080fa:	2303      	movs	r3, #3
 81080fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81080fe:	4b05      	ldr	r3, [pc, #20]	@ (8108114 <RTC_ExitInitMode+0x78>)
 8108100:	689b      	ldr	r3, [r3, #8]
 8108102:	4a04      	ldr	r2, [pc, #16]	@ (8108114 <RTC_ExitInitMode+0x78>)
 8108104:	f043 0320 	orr.w	r3, r3, #32
 8108108:	6093      	str	r3, [r2, #8]
  }

  return status;
 810810a:	7bfb      	ldrb	r3, [r7, #15]
}
 810810c:	4618      	mov	r0, r3
 810810e:	3710      	adds	r7, #16
 8108110:	46bd      	mov	sp, r7
 8108112:	bd80      	pop	{r7, pc}
 8108114:	58004000 	.word	0x58004000

08108118 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 8108118:	b480      	push	{r7}
 810811a:	b085      	sub	sp, #20
 810811c:	af00      	add	r7, sp, #0
 810811e:	6078      	str	r0, [r7, #4]
 8108120:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8108122:	687b      	ldr	r3, [r7, #4]
 8108124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8108128:	2b01      	cmp	r3, #1
 810812a:	d101      	bne.n	8108130 <HAL_RTCEx_SetTamper+0x18>
 810812c:	2302      	movs	r3, #2
 810812e:	e0cc      	b.n	81082ca <HAL_RTCEx_SetTamper+0x1b2>
 8108130:	687b      	ldr	r3, [r7, #4]
 8108132:	2201      	movs	r2, #1
 8108134:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8108138:	687b      	ldr	r3, [r7, #4]
 810813a:	2202      	movs	r2, #2
 810813c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8108140:	687b      	ldr	r3, [r7, #4]
 8108142:	681b      	ldr	r3, [r3, #0]
 8108144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108146:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8108148:	683b      	ldr	r3, [r7, #0]
 810814a:	681b      	ldr	r3, [r3, #0]
 810814c:	68fa      	ldr	r2, [r7, #12]
 810814e:	4313      	orrs	r3, r2
 8108150:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8108152:	683b      	ldr	r3, [r7, #0]
 8108154:	689b      	ldr	r3, [r3, #8]
 8108156:	2b08      	cmp	r3, #8
 8108158:	d003      	beq.n	8108162 <HAL_RTCEx_SetTamper+0x4a>
 810815a:	683b      	ldr	r3, [r7, #0]
 810815c:	689b      	ldr	r3, [r3, #8]
 810815e:	2b02      	cmp	r3, #2
 8108160:	d106      	bne.n	8108170 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8108162:	683b      	ldr	r3, [r7, #0]
 8108164:	681b      	ldr	r3, [r3, #0]
 8108166:	005b      	lsls	r3, r3, #1
 8108168:	68fa      	ldr	r2, [r7, #12]
 810816a:	4313      	orrs	r3, r2
 810816c:	60fb      	str	r3, [r7, #12]
 810816e:	e006      	b.n	810817e <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8108170:	683b      	ldr	r3, [r7, #0]
 8108172:	681b      	ldr	r3, [r3, #0]
 8108174:	005b      	lsls	r3, r3, #1
 8108176:	43db      	mvns	r3, r3
 8108178:	68fa      	ldr	r2, [r7, #12]
 810817a:	4013      	ands	r3, r2
 810817c:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 810817e:	683b      	ldr	r3, [r7, #0]
 8108180:	68db      	ldr	r3, [r3, #12]
 8108182:	2b00      	cmp	r3, #0
 8108184:	d01e      	beq.n	81081c4 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8108186:	683b      	ldr	r3, [r7, #0]
 8108188:	681b      	ldr	r3, [r3, #0]
 810818a:	f003 0301 	and.w	r3, r3, #1
 810818e:	2b00      	cmp	r3, #0
 8108190:	d003      	beq.n	810819a <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8108192:	68fb      	ldr	r3, [r7, #12]
 8108194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108198:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810819a:	683b      	ldr	r3, [r7, #0]
 810819c:	681b      	ldr	r3, [r3, #0]
 810819e:	f003 0308 	and.w	r3, r3, #8
 81081a2:	2b00      	cmp	r3, #0
 81081a4:	d003      	beq.n	81081ae <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 81081a6:	68fb      	ldr	r3, [r7, #12]
 81081a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81081ac:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81081ae:	683b      	ldr	r3, [r7, #0]
 81081b0:	681b      	ldr	r3, [r3, #0]
 81081b2:	f003 0320 	and.w	r3, r3, #32
 81081b6:	2b00      	cmp	r3, #0
 81081b8:	d022      	beq.n	8108200 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 81081ba:	68fb      	ldr	r3, [r7, #12]
 81081bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81081c0:	60fb      	str	r3, [r7, #12]
 81081c2:	e01d      	b.n	8108200 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81081c4:	683b      	ldr	r3, [r7, #0]
 81081c6:	681b      	ldr	r3, [r3, #0]
 81081c8:	f003 0301 	and.w	r3, r3, #1
 81081cc:	2b00      	cmp	r3, #0
 81081ce:	d003      	beq.n	81081d8 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 81081d0:	68fb      	ldr	r3, [r7, #12]
 81081d2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 81081d6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81081d8:	683b      	ldr	r3, [r7, #0]
 81081da:	681b      	ldr	r3, [r3, #0]
 81081dc:	f003 0308 	and.w	r3, r3, #8
 81081e0:	2b00      	cmp	r3, #0
 81081e2:	d003      	beq.n	81081ec <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 81081e4:	68fb      	ldr	r3, [r7, #12]
 81081e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 81081ea:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81081ec:	683b      	ldr	r3, [r7, #0]
 81081ee:	681b      	ldr	r3, [r3, #0]
 81081f0:	f003 0320 	and.w	r3, r3, #32
 81081f4:	2b00      	cmp	r3, #0
 81081f6:	d003      	beq.n	8108200 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 81081f8:	68fb      	ldr	r3, [r7, #12]
 81081fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 81081fe:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8108200:	683b      	ldr	r3, [r7, #0]
 8108202:	691b      	ldr	r3, [r3, #16]
 8108204:	2b00      	cmp	r3, #0
 8108206:	d01e      	beq.n	8108246 <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8108208:	683b      	ldr	r3, [r7, #0]
 810820a:	681b      	ldr	r3, [r3, #0]
 810820c:	f003 0301 	and.w	r3, r3, #1
 8108210:	2b00      	cmp	r3, #0
 8108212:	d003      	beq.n	810821c <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8108214:	68fb      	ldr	r3, [r7, #12]
 8108216:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810821a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810821c:	683b      	ldr	r3, [r7, #0]
 810821e:	681b      	ldr	r3, [r3, #0]
 8108220:	f003 0308 	and.w	r3, r3, #8
 8108224:	2b00      	cmp	r3, #0
 8108226:	d003      	beq.n	8108230 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8108228:	68fb      	ldr	r3, [r7, #12]
 810822a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810822e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8108230:	683b      	ldr	r3, [r7, #0]
 8108232:	681b      	ldr	r3, [r3, #0]
 8108234:	f003 0320 	and.w	r3, r3, #32
 8108238:	2b00      	cmp	r3, #0
 810823a:	d022      	beq.n	8108282 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 810823c:	68fb      	ldr	r3, [r7, #12]
 810823e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108242:	60fb      	str	r3, [r7, #12]
 8108244:	e01d      	b.n	8108282 <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8108246:	683b      	ldr	r3, [r7, #0]
 8108248:	681b      	ldr	r3, [r3, #0]
 810824a:	f003 0301 	and.w	r3, r3, #1
 810824e:	2b00      	cmp	r3, #0
 8108250:	d003      	beq.n	810825a <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8108252:	68fb      	ldr	r3, [r7, #12]
 8108254:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8108258:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810825a:	683b      	ldr	r3, [r7, #0]
 810825c:	681b      	ldr	r3, [r3, #0]
 810825e:	f003 0308 	and.w	r3, r3, #8
 8108262:	2b00      	cmp	r3, #0
 8108264:	d003      	beq.n	810826e <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8108266:	68fb      	ldr	r3, [r7, #12]
 8108268:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810826c:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810826e:	683b      	ldr	r3, [r7, #0]
 8108270:	681b      	ldr	r3, [r3, #0]
 8108272:	f003 0320 	and.w	r3, r3, #32
 8108276:	2b00      	cmp	r3, #0
 8108278:	d003      	beq.n	8108282 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 810827a:	68fb      	ldr	r3, [r7, #12]
 810827c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8108280:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8108282:	68fb      	ldr	r3, [r7, #12]
 8108284:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108288:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810828c:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810828e:	683b      	ldr	r3, [r7, #0]
 8108290:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8108292:	683b      	ldr	r3, [r7, #0]
 8108294:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8108296:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8108298:	683b      	ldr	r3, [r7, #0]
 810829a:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 810829c:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 810829e:	683b      	ldr	r3, [r7, #0]
 81082a0:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 81082a2:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 81082a4:	683b      	ldr	r3, [r7, #0]
 81082a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 81082a8:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81082aa:	68fa      	ldr	r2, [r7, #12]
 81082ac:	4313      	orrs	r3, r2
 81082ae:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 81082b0:	687b      	ldr	r3, [r7, #4]
 81082b2:	681b      	ldr	r3, [r3, #0]
 81082b4:	68fa      	ldr	r2, [r7, #12]
 81082b6:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 81082b8:	687b      	ldr	r3, [r7, #4]
 81082ba:	2201      	movs	r2, #1
 81082bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 81082c0:	687b      	ldr	r3, [r7, #4]
 81082c2:	2200      	movs	r2, #0
 81082c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 81082c8:	2300      	movs	r3, #0
}
 81082ca:	4618      	mov	r0, r3
 81082cc:	3714      	adds	r7, #20
 81082ce:	46bd      	mov	sp, r7
 81082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082d4:	4770      	bx	lr
	...

081082d8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 81082d8:	b580      	push	{r7, lr}
 81082da:	b08a      	sub	sp, #40	@ 0x28
 81082dc:	af00      	add	r7, sp, #0
 81082de:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 81082e0:	687b      	ldr	r3, [r7, #4]
 81082e2:	2b00      	cmp	r3, #0
 81082e4:	d101      	bne.n	81082ea <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 81082e6:	2301      	movs	r3, #1
 81082e8:	e290      	b.n	810880c <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81082ea:	f7fa fb29 	bl	8102940 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 81082ee:	687b      	ldr	r3, [r7, #4]
 81082f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81082f4:	2b01      	cmp	r3, #1
 81082f6:	d113      	bne.n	8108320 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	681b      	ldr	r3, [r3, #0]
 81082fc:	4a96      	ldr	r2, [pc, #600]	@ (8108558 <HAL_SAI_Init+0x280>)
 81082fe:	4293      	cmp	r3, r2
 8108300:	d004      	beq.n	810830c <HAL_SAI_Init+0x34>
 8108302:	687b      	ldr	r3, [r7, #4]
 8108304:	681b      	ldr	r3, [r3, #0]
 8108306:	4a95      	ldr	r2, [pc, #596]	@ (810855c <HAL_SAI_Init+0x284>)
 8108308:	4293      	cmp	r3, r2
 810830a:	d107      	bne.n	810831c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8108310:	2b01      	cmp	r3, #1
 8108312:	d103      	bne.n	810831c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8108314:	687b      	ldr	r3, [r7, #4]
 8108316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8108318:	2b00      	cmp	r3, #0
 810831a:	d001      	beq.n	8108320 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 810831c:	2301      	movs	r3, #1
 810831e:	e275      	b.n	810880c <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8108320:	687b      	ldr	r3, [r7, #4]
 8108322:	681b      	ldr	r3, [r3, #0]
 8108324:	4a8c      	ldr	r2, [pc, #560]	@ (8108558 <HAL_SAI_Init+0x280>)
 8108326:	4293      	cmp	r3, r2
 8108328:	d004      	beq.n	8108334 <HAL_SAI_Init+0x5c>
 810832a:	687b      	ldr	r3, [r7, #4]
 810832c:	681b      	ldr	r3, [r3, #0]
 810832e:	4a8c      	ldr	r2, [pc, #560]	@ (8108560 <HAL_SAI_Init+0x288>)
 8108330:	4293      	cmp	r3, r2
 8108332:	d102      	bne.n	810833a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8108334:	4b8b      	ldr	r3, [pc, #556]	@ (8108564 <HAL_SAI_Init+0x28c>)
 8108336:	61bb      	str	r3, [r7, #24]
 8108338:	e028      	b.n	810838c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810833a:	687b      	ldr	r3, [r7, #4]
 810833c:	681b      	ldr	r3, [r3, #0]
 810833e:	4a8a      	ldr	r2, [pc, #552]	@ (8108568 <HAL_SAI_Init+0x290>)
 8108340:	4293      	cmp	r3, r2
 8108342:	d004      	beq.n	810834e <HAL_SAI_Init+0x76>
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	681b      	ldr	r3, [r3, #0]
 8108348:	4a88      	ldr	r2, [pc, #544]	@ (810856c <HAL_SAI_Init+0x294>)
 810834a:	4293      	cmp	r3, r2
 810834c:	d102      	bne.n	8108354 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 810834e:	4b88      	ldr	r3, [pc, #544]	@ (8108570 <HAL_SAI_Init+0x298>)
 8108350:	61bb      	str	r3, [r7, #24]
 8108352:	e01b      	b.n	810838c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8108354:	687b      	ldr	r3, [r7, #4]
 8108356:	681b      	ldr	r3, [r3, #0]
 8108358:	4a86      	ldr	r2, [pc, #536]	@ (8108574 <HAL_SAI_Init+0x29c>)
 810835a:	4293      	cmp	r3, r2
 810835c:	d004      	beq.n	8108368 <HAL_SAI_Init+0x90>
 810835e:	687b      	ldr	r3, [r7, #4]
 8108360:	681b      	ldr	r3, [r3, #0]
 8108362:	4a85      	ldr	r2, [pc, #532]	@ (8108578 <HAL_SAI_Init+0x2a0>)
 8108364:	4293      	cmp	r3, r2
 8108366:	d102      	bne.n	810836e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8108368:	4b84      	ldr	r3, [pc, #528]	@ (810857c <HAL_SAI_Init+0x2a4>)
 810836a:	61bb      	str	r3, [r7, #24]
 810836c:	e00e      	b.n	810838c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	681b      	ldr	r3, [r3, #0]
 8108372:	4a7a      	ldr	r2, [pc, #488]	@ (810855c <HAL_SAI_Init+0x284>)
 8108374:	4293      	cmp	r3, r2
 8108376:	d004      	beq.n	8108382 <HAL_SAI_Init+0xaa>
 8108378:	687b      	ldr	r3, [r7, #4]
 810837a:	681b      	ldr	r3, [r3, #0]
 810837c:	4a80      	ldr	r2, [pc, #512]	@ (8108580 <HAL_SAI_Init+0x2a8>)
 810837e:	4293      	cmp	r3, r2
 8108380:	d102      	bne.n	8108388 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8108382:	4b80      	ldr	r3, [pc, #512]	@ (8108584 <HAL_SAI_Init+0x2ac>)
 8108384:	61bb      	str	r3, [r7, #24]
 8108386:	e001      	b.n	810838c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8108388:	2301      	movs	r3, #1
 810838a:	e23f      	b.n	810880c <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8108392:	b2db      	uxtb	r3, r3
 8108394:	2b00      	cmp	r3, #0
 8108396:	d106      	bne.n	81083a6 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8108398:	687b      	ldr	r3, [r7, #4]
 810839a:	2200      	movs	r2, #0
 810839c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 81083a0:	6878      	ldr	r0, [r7, #4]
 81083a2:	f7fa f8a5 	bl	81024f0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 81083a6:	6878      	ldr	r0, [r7, #4]
 81083a8:	f000 fa40 	bl	810882c <SAI_Disable>
 81083ac:	4603      	mov	r3, r0
 81083ae:	2b00      	cmp	r3, #0
 81083b0:	d001      	beq.n	81083b6 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 81083b2:	2301      	movs	r3, #1
 81083b4:	e22a      	b.n	810880c <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	2202      	movs	r2, #2
 81083ba:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 81083be:	687b      	ldr	r3, [r7, #4]
 81083c0:	68db      	ldr	r3, [r3, #12]
 81083c2:	2b02      	cmp	r3, #2
 81083c4:	d00c      	beq.n	81083e0 <HAL_SAI_Init+0x108>
 81083c6:	2b02      	cmp	r3, #2
 81083c8:	d80d      	bhi.n	81083e6 <HAL_SAI_Init+0x10e>
 81083ca:	2b00      	cmp	r3, #0
 81083cc:	d002      	beq.n	81083d4 <HAL_SAI_Init+0xfc>
 81083ce:	2b01      	cmp	r3, #1
 81083d0:	d003      	beq.n	81083da <HAL_SAI_Init+0x102>
 81083d2:	e008      	b.n	81083e6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 81083d4:	2300      	movs	r3, #0
 81083d6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81083d8:	e008      	b.n	81083ec <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 81083da:	2310      	movs	r3, #16
 81083dc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81083de:	e005      	b.n	81083ec <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 81083e0:	2320      	movs	r3, #32
 81083e2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81083e4:	e002      	b.n	81083ec <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 81083e6:	2300      	movs	r3, #0
 81083e8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81083ea:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 81083ec:	687b      	ldr	r3, [r7, #4]
 81083ee:	689b      	ldr	r3, [r3, #8]
 81083f0:	2b05      	cmp	r3, #5
 81083f2:	d832      	bhi.n	810845a <HAL_SAI_Init+0x182>
 81083f4:	a201      	add	r2, pc, #4	@ (adr r2, 81083fc <HAL_SAI_Init+0x124>)
 81083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083fa:	bf00      	nop
 81083fc:	08108415 	.word	0x08108415
 8108400:	0810841b 	.word	0x0810841b
 8108404:	08108423 	.word	0x08108423
 8108408:	0810842b 	.word	0x0810842b
 810840c:	0810843b 	.word	0x0810843b
 8108410:	0810844b 	.word	0x0810844b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8108414:	2300      	movs	r3, #0
 8108416:	61fb      	str	r3, [r7, #28]
      break;
 8108418:	e022      	b.n	8108460 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 810841a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810841e:	61fb      	str	r3, [r7, #28]
      break;
 8108420:	e01e      	b.n	8108460 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8108422:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8108426:	61fb      	str	r3, [r7, #28]
      break;
 8108428:	e01a      	b.n	8108460 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810842a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810842e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8108430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108432:	f043 0301 	orr.w	r3, r3, #1
 8108436:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8108438:	e012      	b.n	8108460 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810843a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810843e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8108440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108442:	f043 0302 	orr.w	r3, r3, #2
 8108446:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8108448:	e00a      	b.n	8108460 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810844a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810844e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8108450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108452:	f043 0303 	orr.w	r3, r3, #3
 8108456:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8108458:	e002      	b.n	8108460 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 810845a:	2300      	movs	r3, #0
 810845c:	61fb      	str	r3, [r7, #28]
      break;
 810845e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8108460:	69bb      	ldr	r3, [r7, #24]
 8108462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108464:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8108466:	687b      	ldr	r3, [r7, #4]
 8108468:	6a1b      	ldr	r3, [r3, #32]
 810846a:	2b00      	cmp	r3, #0
 810846c:	f000 80c5 	beq.w	81085fa <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8108470:	2300      	movs	r3, #0
 8108472:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	681b      	ldr	r3, [r3, #0]
 8108478:	4a37      	ldr	r2, [pc, #220]	@ (8108558 <HAL_SAI_Init+0x280>)
 810847a:	4293      	cmp	r3, r2
 810847c:	d004      	beq.n	8108488 <HAL_SAI_Init+0x1b0>
 810847e:	687b      	ldr	r3, [r7, #4]
 8108480:	681b      	ldr	r3, [r3, #0]
 8108482:	4a37      	ldr	r2, [pc, #220]	@ (8108560 <HAL_SAI_Init+0x288>)
 8108484:	4293      	cmp	r3, r2
 8108486:	d106      	bne.n	8108496 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8108488:	f44f 7080 	mov.w	r0, #256	@ 0x100
 810848c:	f04f 0100 	mov.w	r1, #0
 8108490:	f7fe fa36 	bl	8106900 <HAL_RCCEx_GetPeriphCLKFreq>
 8108494:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	681b      	ldr	r3, [r3, #0]
 810849a:	4a33      	ldr	r2, [pc, #204]	@ (8108568 <HAL_SAI_Init+0x290>)
 810849c:	4293      	cmp	r3, r2
 810849e:	d004      	beq.n	81084aa <HAL_SAI_Init+0x1d2>
 81084a0:	687b      	ldr	r3, [r7, #4]
 81084a2:	681b      	ldr	r3, [r3, #0]
 81084a4:	4a31      	ldr	r2, [pc, #196]	@ (810856c <HAL_SAI_Init+0x294>)
 81084a6:	4293      	cmp	r3, r2
 81084a8:	d106      	bne.n	81084b8 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 81084aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 81084ae:	f04f 0100 	mov.w	r1, #0
 81084b2:	f7fe fa25 	bl	8106900 <HAL_RCCEx_GetPeriphCLKFreq>
 81084b6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81084b8:	687b      	ldr	r3, [r7, #4]
 81084ba:	681b      	ldr	r3, [r3, #0]
 81084bc:	4a2d      	ldr	r2, [pc, #180]	@ (8108574 <HAL_SAI_Init+0x29c>)
 81084be:	4293      	cmp	r3, r2
 81084c0:	d004      	beq.n	81084cc <HAL_SAI_Init+0x1f4>
 81084c2:	687b      	ldr	r3, [r7, #4]
 81084c4:	681b      	ldr	r3, [r3, #0]
 81084c6:	4a2c      	ldr	r2, [pc, #176]	@ (8108578 <HAL_SAI_Init+0x2a0>)
 81084c8:	4293      	cmp	r3, r2
 81084ca:	d106      	bne.n	81084da <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 81084cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 81084d0:	f04f 0100 	mov.w	r1, #0
 81084d4:	f7fe fa14 	bl	8106900 <HAL_RCCEx_GetPeriphCLKFreq>
 81084d8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 81084da:	687b      	ldr	r3, [r7, #4]
 81084dc:	681b      	ldr	r3, [r3, #0]
 81084de:	4a1f      	ldr	r2, [pc, #124]	@ (810855c <HAL_SAI_Init+0x284>)
 81084e0:	4293      	cmp	r3, r2
 81084e2:	d106      	bne.n	81084f2 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 81084e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 81084e8:	f04f 0100 	mov.w	r1, #0
 81084ec:	f7fe fa08 	bl	8106900 <HAL_RCCEx_GetPeriphCLKFreq>
 81084f0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 81084f2:	687b      	ldr	r3, [r7, #4]
 81084f4:	681b      	ldr	r3, [r3, #0]
 81084f6:	4a22      	ldr	r2, [pc, #136]	@ (8108580 <HAL_SAI_Init+0x2a8>)
 81084f8:	4293      	cmp	r3, r2
 81084fa:	d106      	bne.n	810850a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 81084fc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8108500:	f04f 0100 	mov.w	r1, #0
 8108504:	f7fe f9fc 	bl	8106900 <HAL_RCCEx_GetPeriphCLKFreq>
 8108508:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 810850a:	687b      	ldr	r3, [r7, #4]
 810850c:	699b      	ldr	r3, [r3, #24]
 810850e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8108512:	d139      	bne.n	8108588 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8108514:	687b      	ldr	r3, [r7, #4]
 8108516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108518:	2b04      	cmp	r3, #4
 810851a:	d102      	bne.n	8108522 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 810851c:	2340      	movs	r3, #64	@ 0x40
 810851e:	60fb      	str	r3, [r7, #12]
 8108520:	e00a      	b.n	8108538 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8108522:	687b      	ldr	r3, [r7, #4]
 8108524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108526:	2b08      	cmp	r3, #8
 8108528:	d103      	bne.n	8108532 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 810852a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810852e:	60fb      	str	r3, [r7, #12]
 8108530:	e002      	b.n	8108538 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8108532:	687b      	ldr	r3, [r7, #4]
 8108534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108536:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8108538:	697a      	ldr	r2, [r7, #20]
 810853a:	4613      	mov	r3, r2
 810853c:	009b      	lsls	r3, r3, #2
 810853e:	4413      	add	r3, r2
 8108540:	005b      	lsls	r3, r3, #1
 8108542:	4619      	mov	r1, r3
 8108544:	687b      	ldr	r3, [r7, #4]
 8108546:	6a1b      	ldr	r3, [r3, #32]
 8108548:	68fa      	ldr	r2, [r7, #12]
 810854a:	fb02 f303 	mul.w	r3, r2, r3
 810854e:	fbb1 f3f3 	udiv	r3, r1, r3
 8108552:	613b      	str	r3, [r7, #16]
 8108554:	e030      	b.n	81085b8 <HAL_SAI_Init+0x2e0>
 8108556:	bf00      	nop
 8108558:	40015804 	.word	0x40015804
 810855c:	58005404 	.word	0x58005404
 8108560:	40015824 	.word	0x40015824
 8108564:	40015800 	.word	0x40015800
 8108568:	40015c04 	.word	0x40015c04
 810856c:	40015c24 	.word	0x40015c24
 8108570:	40015c00 	.word	0x40015c00
 8108574:	40016004 	.word	0x40016004
 8108578:	40016024 	.word	0x40016024
 810857c:	40016000 	.word	0x40016000
 8108580:	58005424 	.word	0x58005424
 8108584:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8108588:	687b      	ldr	r3, [r7, #4]
 810858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810858c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108590:	d101      	bne.n	8108596 <HAL_SAI_Init+0x2be>
 8108592:	2302      	movs	r3, #2
 8108594:	e000      	b.n	8108598 <HAL_SAI_Init+0x2c0>
 8108596:	2301      	movs	r3, #1
 8108598:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 810859a:	697a      	ldr	r2, [r7, #20]
 810859c:	4613      	mov	r3, r2
 810859e:	009b      	lsls	r3, r3, #2
 81085a0:	4413      	add	r3, r2
 81085a2:	005b      	lsls	r3, r3, #1
 81085a4:	4619      	mov	r1, r3
 81085a6:	687b      	ldr	r3, [r7, #4]
 81085a8:	6a1b      	ldr	r3, [r3, #32]
 81085aa:	68ba      	ldr	r2, [r7, #8]
 81085ac:	fb02 f303 	mul.w	r3, r2, r3
 81085b0:	021b      	lsls	r3, r3, #8
 81085b2:	fbb1 f3f3 	udiv	r3, r1, r3
 81085b6:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 81085b8:	693b      	ldr	r3, [r7, #16]
 81085ba:	4a96      	ldr	r2, [pc, #600]	@ (8108814 <HAL_SAI_Init+0x53c>)
 81085bc:	fba2 2303 	umull	r2, r3, r2, r3
 81085c0:	08da      	lsrs	r2, r3, #3
 81085c2:	687b      	ldr	r3, [r7, #4]
 81085c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 81085c6:	6939      	ldr	r1, [r7, #16]
 81085c8:	4b92      	ldr	r3, [pc, #584]	@ (8108814 <HAL_SAI_Init+0x53c>)
 81085ca:	fba3 2301 	umull	r2, r3, r3, r1
 81085ce:	08da      	lsrs	r2, r3, #3
 81085d0:	4613      	mov	r3, r2
 81085d2:	009b      	lsls	r3, r3, #2
 81085d4:	4413      	add	r3, r2
 81085d6:	005b      	lsls	r3, r3, #1
 81085d8:	1aca      	subs	r2, r1, r3
 81085da:	2a08      	cmp	r2, #8
 81085dc:	d904      	bls.n	81085e8 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 81085de:	687b      	ldr	r3, [r7, #4]
 81085e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81085e2:	1c5a      	adds	r2, r3, #1
 81085e4:	687b      	ldr	r3, [r7, #4]
 81085e6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81085e8:	687b      	ldr	r3, [r7, #4]
 81085ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81085ec:	2b04      	cmp	r3, #4
 81085ee:	d104      	bne.n	81085fa <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 81085f0:	687b      	ldr	r3, [r7, #4]
 81085f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81085f4:	085a      	lsrs	r2, r3, #1
 81085f6:	687b      	ldr	r3, [r7, #4]
 81085f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81085fa:	687b      	ldr	r3, [r7, #4]
 81085fc:	685b      	ldr	r3, [r3, #4]
 81085fe:	2b00      	cmp	r3, #0
 8108600:	d003      	beq.n	810860a <HAL_SAI_Init+0x332>
 8108602:	687b      	ldr	r3, [r7, #4]
 8108604:	685b      	ldr	r3, [r3, #4]
 8108606:	2b02      	cmp	r3, #2
 8108608:	d109      	bne.n	810861e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 810860a:	687b      	ldr	r3, [r7, #4]
 810860c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810860e:	2b01      	cmp	r3, #1
 8108610:	d101      	bne.n	8108616 <HAL_SAI_Init+0x33e>
 8108612:	2300      	movs	r3, #0
 8108614:	e001      	b.n	810861a <HAL_SAI_Init+0x342>
 8108616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810861a:	623b      	str	r3, [r7, #32]
 810861c:	e008      	b.n	8108630 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 810861e:	687b      	ldr	r3, [r7, #4]
 8108620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108622:	2b01      	cmp	r3, #1
 8108624:	d102      	bne.n	810862c <HAL_SAI_Init+0x354>
 8108626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810862a:	e000      	b.n	810862e <HAL_SAI_Init+0x356>
 810862c:	2300      	movs	r3, #0
 810862e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8108630:	f7fa f986 	bl	8102940 <HAL_GetREVID>
 8108634:	4603      	mov	r3, r0
 8108636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810863a:	d331      	bcc.n	81086a0 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810863c:	687b      	ldr	r3, [r7, #4]
 810863e:	681b      	ldr	r3, [r3, #0]
 8108640:	6819      	ldr	r1, [r3, #0]
 8108642:	687b      	ldr	r3, [r7, #4]
 8108644:	681a      	ldr	r2, [r3, #0]
 8108646:	4b74      	ldr	r3, [pc, #464]	@ (8108818 <HAL_SAI_Init+0x540>)
 8108648:	400b      	ands	r3, r1
 810864a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810864c:	687b      	ldr	r3, [r7, #4]
 810864e:	681b      	ldr	r3, [r3, #0]
 8108650:	6819      	ldr	r1, [r3, #0]
 8108652:	687b      	ldr	r3, [r7, #4]
 8108654:	685a      	ldr	r2, [r3, #4]
 8108656:	687b      	ldr	r3, [r7, #4]
 8108658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810865a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108660:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108662:	687b      	ldr	r3, [r7, #4]
 8108664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108666:	431a      	orrs	r2, r3
 8108668:	6a3b      	ldr	r3, [r7, #32]
 810866a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 810866c:	69fb      	ldr	r3, [r7, #28]
 810866e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108670:	687b      	ldr	r3, [r7, #4]
 8108672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8108674:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108676:	687b      	ldr	r3, [r7, #4]
 8108678:	695b      	ldr	r3, [r3, #20]
 810867a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810867c:	687b      	ldr	r3, [r7, #4]
 810867e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108680:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108682:	687b      	ldr	r3, [r7, #4]
 8108684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108686:	051b      	lsls	r3, r3, #20
 8108688:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810868a:	687b      	ldr	r3, [r7, #4]
 810868c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810868e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8108690:	687b      	ldr	r3, [r7, #4]
 8108692:	691b      	ldr	r3, [r3, #16]
 8108694:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108696:	687b      	ldr	r3, [r7, #4]
 8108698:	681b      	ldr	r3, [r3, #0]
 810869a:	430a      	orrs	r2, r1
 810869c:	601a      	str	r2, [r3, #0]
 810869e:	e02d      	b.n	81086fc <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 81086a0:	687b      	ldr	r3, [r7, #4]
 81086a2:	681b      	ldr	r3, [r3, #0]
 81086a4:	6819      	ldr	r1, [r3, #0]
 81086a6:	687b      	ldr	r3, [r7, #4]
 81086a8:	681a      	ldr	r2, [r3, #0]
 81086aa:	4b5c      	ldr	r3, [pc, #368]	@ (810881c <HAL_SAI_Init+0x544>)
 81086ac:	400b      	ands	r3, r1
 81086ae:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81086b0:	687b      	ldr	r3, [r7, #4]
 81086b2:	681b      	ldr	r3, [r3, #0]
 81086b4:	6819      	ldr	r1, [r3, #0]
 81086b6:	687b      	ldr	r3, [r7, #4]
 81086b8:	685a      	ldr	r2, [r3, #4]
 81086ba:	687b      	ldr	r3, [r7, #4]
 81086bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81086be:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81086c0:	687b      	ldr	r3, [r7, #4]
 81086c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81086c4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81086c6:	687b      	ldr	r3, [r7, #4]
 81086c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81086ca:	431a      	orrs	r2, r3
 81086cc:	6a3b      	ldr	r3, [r7, #32]
 81086ce:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81086d0:	69fb      	ldr	r3, [r7, #28]
 81086d2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81086d4:	687b      	ldr	r3, [r7, #4]
 81086d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 81086d8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81086da:	687b      	ldr	r3, [r7, #4]
 81086dc:	695b      	ldr	r3, [r3, #20]
 81086de:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81086e0:	687b      	ldr	r3, [r7, #4]
 81086e2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81086e4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81086e6:	687b      	ldr	r3, [r7, #4]
 81086e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81086ea:	051b      	lsls	r3, r3, #20
 81086ec:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81086ee:	687b      	ldr	r3, [r7, #4]
 81086f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81086f2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81086f4:	687b      	ldr	r3, [r7, #4]
 81086f6:	681b      	ldr	r3, [r3, #0]
 81086f8:	430a      	orrs	r2, r1
 81086fa:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	681b      	ldr	r3, [r3, #0]
 8108700:	685b      	ldr	r3, [r3, #4]
 8108702:	687a      	ldr	r2, [r7, #4]
 8108704:	6812      	ldr	r2, [r2, #0]
 8108706:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 810870a:	f023 030f 	bic.w	r3, r3, #15
 810870e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8108710:	687b      	ldr	r3, [r7, #4]
 8108712:	681b      	ldr	r3, [r3, #0]
 8108714:	6859      	ldr	r1, [r3, #4]
 8108716:	687b      	ldr	r3, [r7, #4]
 8108718:	69da      	ldr	r2, [r3, #28]
 810871a:	687b      	ldr	r3, [r7, #4]
 810871c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810871e:	431a      	orrs	r2, r3
 8108720:	687b      	ldr	r3, [r7, #4]
 8108722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108724:	431a      	orrs	r2, r3
 8108726:	687b      	ldr	r3, [r7, #4]
 8108728:	681b      	ldr	r3, [r3, #0]
 810872a:	430a      	orrs	r2, r1
 810872c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	681b      	ldr	r3, [r3, #0]
 8108732:	6899      	ldr	r1, [r3, #8]
 8108734:	687b      	ldr	r3, [r7, #4]
 8108736:	681a      	ldr	r2, [r3, #0]
 8108738:	4b39      	ldr	r3, [pc, #228]	@ (8108820 <HAL_SAI_Init+0x548>)
 810873a:	400b      	ands	r3, r1
 810873c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810873e:	687b      	ldr	r3, [r7, #4]
 8108740:	681b      	ldr	r3, [r3, #0]
 8108742:	6899      	ldr	r1, [r3, #8]
 8108744:	687b      	ldr	r3, [r7, #4]
 8108746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108748:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 810874a:	687b      	ldr	r3, [r7, #4]
 810874c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810874e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8108750:	687b      	ldr	r3, [r7, #4]
 8108752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8108754:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8108756:	687b      	ldr	r3, [r7, #4]
 8108758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 810875a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 810875c:	687b      	ldr	r3, [r7, #4]
 810875e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108760:	3b01      	subs	r3, #1
 8108762:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8108764:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8108766:	687b      	ldr	r3, [r7, #4]
 8108768:	681b      	ldr	r3, [r3, #0]
 810876a:	430a      	orrs	r2, r1
 810876c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 810876e:	687b      	ldr	r3, [r7, #4]
 8108770:	681b      	ldr	r3, [r3, #0]
 8108772:	68d9      	ldr	r1, [r3, #12]
 8108774:	687b      	ldr	r3, [r7, #4]
 8108776:	681a      	ldr	r2, [r3, #0]
 8108778:	f24f 0320 	movw	r3, #61472	@ 0xf020
 810877c:	400b      	ands	r3, r1
 810877e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8108780:	687b      	ldr	r3, [r7, #4]
 8108782:	681b      	ldr	r3, [r3, #0]
 8108784:	68d9      	ldr	r1, [r3, #12]
 8108786:	687b      	ldr	r3, [r7, #4]
 8108788:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 810878a:	687b      	ldr	r3, [r7, #4]
 810878c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810878e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8108790:	687b      	ldr	r3, [r7, #4]
 8108792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8108794:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8108796:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8108798:	687b      	ldr	r3, [r7, #4]
 810879a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810879c:	3b01      	subs	r3, #1
 810879e:	021b      	lsls	r3, r3, #8
 81087a0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81087a2:	687b      	ldr	r3, [r7, #4]
 81087a4:	681b      	ldr	r3, [r3, #0]
 81087a6:	430a      	orrs	r2, r1
 81087a8:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 81087aa:	687b      	ldr	r3, [r7, #4]
 81087ac:	681b      	ldr	r3, [r3, #0]
 81087ae:	4a1d      	ldr	r2, [pc, #116]	@ (8108824 <HAL_SAI_Init+0x54c>)
 81087b0:	4293      	cmp	r3, r2
 81087b2:	d004      	beq.n	81087be <HAL_SAI_Init+0x4e6>
 81087b4:	687b      	ldr	r3, [r7, #4]
 81087b6:	681b      	ldr	r3, [r3, #0]
 81087b8:	4a1b      	ldr	r2, [pc, #108]	@ (8108828 <HAL_SAI_Init+0x550>)
 81087ba:	4293      	cmp	r3, r2
 81087bc:	d119      	bne.n	81087f2 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 81087be:	69bb      	ldr	r3, [r7, #24]
 81087c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81087c2:	f023 0201 	bic.w	r2, r3, #1
 81087c6:	69bb      	ldr	r3, [r7, #24]
 81087c8:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 81087ca:	687b      	ldr	r3, [r7, #4]
 81087cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81087d0:	2b01      	cmp	r3, #1
 81087d2:	d10e      	bne.n	81087f2 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81087d4:	687b      	ldr	r3, [r7, #4]
 81087d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81087d8:	687b      	ldr	r3, [r7, #4]
 81087da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81087dc:	3b01      	subs	r3, #1
 81087de:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81087e0:	431a      	orrs	r2, r3
 81087e2:	69bb      	ldr	r3, [r7, #24]
 81087e4:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81087e6:	69bb      	ldr	r3, [r7, #24]
 81087e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81087ea:	f043 0201 	orr.w	r2, r3, #1
 81087ee:	69bb      	ldr	r3, [r7, #24]
 81087f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81087f2:	687b      	ldr	r3, [r7, #4]
 81087f4:	2200      	movs	r2, #0
 81087f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81087fa:	687b      	ldr	r3, [r7, #4]
 81087fc:	2201      	movs	r2, #1
 81087fe:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8108802:	687b      	ldr	r3, [r7, #4]
 8108804:	2200      	movs	r2, #0
 8108806:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 810880a:	2300      	movs	r3, #0
}
 810880c:	4618      	mov	r0, r3
 810880e:	3728      	adds	r7, #40	@ 0x28
 8108810:	46bd      	mov	sp, r7
 8108812:	bd80      	pop	{r7, pc}
 8108814:	cccccccd 	.word	0xcccccccd
 8108818:	f005c010 	.word	0xf005c010
 810881c:	f805c010 	.word	0xf805c010
 8108820:	fff88000 	.word	0xfff88000
 8108824:	40015804 	.word	0x40015804
 8108828:	58005404 	.word	0x58005404

0810882c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 810882c:	b480      	push	{r7}
 810882e:	b085      	sub	sp, #20
 8108830:	af00      	add	r7, sp, #0
 8108832:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8108834:	4b18      	ldr	r3, [pc, #96]	@ (8108898 <SAI_Disable+0x6c>)
 8108836:	681b      	ldr	r3, [r3, #0]
 8108838:	4a18      	ldr	r2, [pc, #96]	@ (810889c <SAI_Disable+0x70>)
 810883a:	fba2 2303 	umull	r2, r3, r2, r3
 810883e:	0b1b      	lsrs	r3, r3, #12
 8108840:	009b      	lsls	r3, r3, #2
 8108842:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8108844:	2300      	movs	r3, #0
 8108846:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8108848:	687b      	ldr	r3, [r7, #4]
 810884a:	681b      	ldr	r3, [r3, #0]
 810884c:	681a      	ldr	r2, [r3, #0]
 810884e:	687b      	ldr	r3, [r7, #4]
 8108850:	681b      	ldr	r3, [r3, #0]
 8108852:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8108856:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8108858:	68fb      	ldr	r3, [r7, #12]
 810885a:	2b00      	cmp	r3, #0
 810885c:	d10a      	bne.n	8108874 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8108864:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8108868:	687b      	ldr	r3, [r7, #4]
 810886a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 810886e:	2303      	movs	r3, #3
 8108870:	72fb      	strb	r3, [r7, #11]
      break;
 8108872:	e009      	b.n	8108888 <SAI_Disable+0x5c>
    }
    count--;
 8108874:	68fb      	ldr	r3, [r7, #12]
 8108876:	3b01      	subs	r3, #1
 8108878:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 810887a:	687b      	ldr	r3, [r7, #4]
 810887c:	681b      	ldr	r3, [r3, #0]
 810887e:	681b      	ldr	r3, [r3, #0]
 8108880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108884:	2b00      	cmp	r3, #0
 8108886:	d1e7      	bne.n	8108858 <SAI_Disable+0x2c>

  return status;
 8108888:	7afb      	ldrb	r3, [r7, #11]
}
 810888a:	4618      	mov	r0, r3
 810888c:	3714      	adds	r7, #20
 810888e:	46bd      	mov	sp, r7
 8108890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108894:	4770      	bx	lr
 8108896:	bf00      	nop
 8108898:	10000000 	.word	0x10000000
 810889c:	95cbec1b 	.word	0x95cbec1b

081088a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 81088a0:	b580      	push	{r7, lr}
 81088a2:	b08a      	sub	sp, #40	@ 0x28
 81088a4:	af00      	add	r7, sp, #0
 81088a6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 81088a8:	687b      	ldr	r3, [r7, #4]
 81088aa:	2b00      	cmp	r3, #0
 81088ac:	d101      	bne.n	81088b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 81088ae:	2301      	movs	r3, #1
 81088b0:	e075      	b.n	810899e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 81088b2:	687b      	ldr	r3, [r7, #4]
 81088b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81088b8:	b2db      	uxtb	r3, r3
 81088ba:	2b00      	cmp	r3, #0
 81088bc:	d105      	bne.n	81088ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 81088be:	687b      	ldr	r3, [r7, #4]
 81088c0:	2200      	movs	r2, #0
 81088c2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 81088c4:	6878      	ldr	r0, [r7, #4]
 81088c6:	f7f9 f895 	bl	81019f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 81088ca:	687b      	ldr	r3, [r7, #4]
 81088cc:	2204      	movs	r2, #4
 81088ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 81088d2:	6878      	ldr	r0, [r7, #4]
 81088d4:	f000 f868 	bl	81089a8 <HAL_SD_InitCard>
 81088d8:	4603      	mov	r3, r0
 81088da:	2b00      	cmp	r3, #0
 81088dc:	d001      	beq.n	81088e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 81088de:	2301      	movs	r3, #1
 81088e0:	e05d      	b.n	810899e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 81088e2:	f107 0308 	add.w	r3, r7, #8
 81088e6:	4619      	mov	r1, r3
 81088e8:	6878      	ldr	r0, [r7, #4]
 81088ea:	f000 fa9d 	bl	8108e28 <HAL_SD_GetCardStatus>
 81088ee:	4603      	mov	r3, r0
 81088f0:	2b00      	cmp	r3, #0
 81088f2:	d001      	beq.n	81088f8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 81088f4:	2301      	movs	r3, #1
 81088f6:	e052      	b.n	810899e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 81088f8:	7e3b      	ldrb	r3, [r7, #24]
 81088fa:	b2db      	uxtb	r3, r3
 81088fc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 81088fe:	7e7b      	ldrb	r3, [r7, #25]
 8108900:	b2db      	uxtb	r3, r3
 8108902:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8108904:	687b      	ldr	r3, [r7, #4]
 8108906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108908:	2b01      	cmp	r3, #1
 810890a:	d10a      	bne.n	8108922 <HAL_SD_Init+0x82>
 810890c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810890e:	2b00      	cmp	r3, #0
 8108910:	d102      	bne.n	8108918 <HAL_SD_Init+0x78>
 8108912:	6a3b      	ldr	r3, [r7, #32]
 8108914:	2b00      	cmp	r3, #0
 8108916:	d004      	beq.n	8108922 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8108918:	687b      	ldr	r3, [r7, #4]
 810891a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810891e:	659a      	str	r2, [r3, #88]	@ 0x58
 8108920:	e00b      	b.n	810893a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8108922:	687b      	ldr	r3, [r7, #4]
 8108924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108926:	2b01      	cmp	r3, #1
 8108928:	d104      	bne.n	8108934 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 810892a:	687b      	ldr	r3, [r7, #4]
 810892c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8108930:	659a      	str	r2, [r3, #88]	@ 0x58
 8108932:	e002      	b.n	810893a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8108934:	687b      	ldr	r3, [r7, #4]
 8108936:	2200      	movs	r2, #0
 8108938:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 810893a:	687b      	ldr	r3, [r7, #4]
 810893c:	68db      	ldr	r3, [r3, #12]
 810893e:	4619      	mov	r1, r3
 8108940:	6878      	ldr	r0, [r7, #4]
 8108942:	f000 fb2f 	bl	8108fa4 <HAL_SD_ConfigWideBusOperation>
 8108946:	4603      	mov	r3, r0
 8108948:	2b00      	cmp	r3, #0
 810894a:	d001      	beq.n	8108950 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 810894c:	2301      	movs	r3, #1
 810894e:	e026      	b.n	810899e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8108950:	f7f9 ffc6 	bl	81028e0 <HAL_GetTick>
 8108954:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8108956:	e011      	b.n	810897c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8108958:	f7f9 ffc2 	bl	81028e0 <HAL_GetTick>
 810895c:	4602      	mov	r2, r0
 810895e:	69fb      	ldr	r3, [r7, #28]
 8108960:	1ad3      	subs	r3, r2, r3
 8108962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108966:	d109      	bne.n	810897c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8108968:	687b      	ldr	r3, [r7, #4]
 810896a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810896e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8108970:	687b      	ldr	r3, [r7, #4]
 8108972:	2201      	movs	r2, #1
 8108974:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8108978:	2303      	movs	r3, #3
 810897a:	e010      	b.n	810899e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810897c:	6878      	ldr	r0, [r7, #4]
 810897e:	f000 fc23 	bl	81091c8 <HAL_SD_GetCardState>
 8108982:	4603      	mov	r3, r0
 8108984:	2b04      	cmp	r3, #4
 8108986:	d1e7      	bne.n	8108958 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8108988:	687b      	ldr	r3, [r7, #4]
 810898a:	2200      	movs	r2, #0
 810898c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	2200      	movs	r2, #0
 8108992:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8108994:	687b      	ldr	r3, [r7, #4]
 8108996:	2201      	movs	r2, #1
 8108998:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 810899c:	2300      	movs	r3, #0
}
 810899e:	4618      	mov	r0, r3
 81089a0:	3728      	adds	r7, #40	@ 0x28
 81089a2:	46bd      	mov	sp, r7
 81089a4:	bd80      	pop	{r7, pc}
	...

081089a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 81089a8:	b590      	push	{r4, r7, lr}
 81089aa:	b08d      	sub	sp, #52	@ 0x34
 81089ac:	af02      	add	r7, sp, #8
 81089ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 81089b0:	2300      	movs	r3, #0
 81089b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 81089b4:	2300      	movs	r3, #0
 81089b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 81089b8:	2300      	movs	r3, #0
 81089ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 81089bc:	2300      	movs	r3, #0
 81089be:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 81089c0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 81089c4:	f04f 0100 	mov.w	r1, #0
 81089c8:	f7fd ff9a 	bl	8106900 <HAL_RCCEx_GetPeriphCLKFreq>
 81089cc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 81089ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81089d0:	2b00      	cmp	r3, #0
 81089d2:	d109      	bne.n	81089e8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 81089d4:	687b      	ldr	r3, [r7, #4]
 81089d6:	2201      	movs	r2, #1
 81089d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 81089dc:	687b      	ldr	r3, [r7, #4]
 81089de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 81089e2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81089e4:	2301      	movs	r3, #1
 81089e6:	e070      	b.n	8108aca <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 81089e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81089ea:	0a1b      	lsrs	r3, r3, #8
 81089ec:	4a39      	ldr	r2, [pc, #228]	@ (8108ad4 <HAL_SD_InitCard+0x12c>)
 81089ee:	fba2 2303 	umull	r2, r3, r2, r3
 81089f2:	091b      	lsrs	r3, r3, #4
 81089f4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 81089f6:	687b      	ldr	r3, [r7, #4]
 81089f8:	681c      	ldr	r4, [r3, #0]
 81089fa:	466a      	mov	r2, sp
 81089fc:	f107 0318 	add.w	r3, r7, #24
 8108a00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8108a04:	e882 0003 	stmia.w	r2, {r0, r1}
 8108a08:	f107 030c 	add.w	r3, r7, #12
 8108a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8108a0e:	4620      	mov	r0, r4
 8108a10:	f003 fb46 	bl	810c0a0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8108a14:	687b      	ldr	r3, [r7, #4]
 8108a16:	681b      	ldr	r3, [r3, #0]
 8108a18:	4618      	mov	r0, r3
 8108a1a:	f003 fb78 	bl	810c10e <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8108a1e:	69fb      	ldr	r3, [r7, #28]
 8108a20:	2b00      	cmp	r3, #0
 8108a22:	d005      	beq.n	8108a30 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8108a24:	69fb      	ldr	r3, [r7, #28]
 8108a26:	005b      	lsls	r3, r3, #1
 8108a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8108a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8108a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108a32:	2b00      	cmp	r3, #0
 8108a34:	d007      	beq.n	8108a46 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8108a36:	4a28      	ldr	r2, [pc, #160]	@ (8108ad8 <HAL_SD_InitCard+0x130>)
 8108a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8108a3e:	3301      	adds	r3, #1
 8108a40:	4618      	mov	r0, r3
 8108a42:	f7f9 ff59 	bl	81028f8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8108a46:	6878      	ldr	r0, [r7, #4]
 8108a48:	f000 fcac 	bl	81093a4 <SD_PowerON>
 8108a4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108a4e:	6a3b      	ldr	r3, [r7, #32]
 8108a50:	2b00      	cmp	r3, #0
 8108a52:	d00b      	beq.n	8108a6c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108a54:	687b      	ldr	r3, [r7, #4]
 8108a56:	2201      	movs	r2, #1
 8108a58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8108a5c:	687b      	ldr	r3, [r7, #4]
 8108a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108a60:	6a3b      	ldr	r3, [r7, #32]
 8108a62:	431a      	orrs	r2, r3
 8108a64:	687b      	ldr	r3, [r7, #4]
 8108a66:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8108a68:	2301      	movs	r3, #1
 8108a6a:	e02e      	b.n	8108aca <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8108a6c:	6878      	ldr	r0, [r7, #4]
 8108a6e:	f000 fbcb 	bl	8109208 <SD_InitCard>
 8108a72:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108a74:	6a3b      	ldr	r3, [r7, #32]
 8108a76:	2b00      	cmp	r3, #0
 8108a78:	d00b      	beq.n	8108a92 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108a7a:	687b      	ldr	r3, [r7, #4]
 8108a7c:	2201      	movs	r2, #1
 8108a7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8108a82:	687b      	ldr	r3, [r7, #4]
 8108a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108a86:	6a3b      	ldr	r3, [r7, #32]
 8108a88:	431a      	orrs	r2, r3
 8108a8a:	687b      	ldr	r3, [r7, #4]
 8108a8c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8108a8e:	2301      	movs	r3, #1
 8108a90:	e01b      	b.n	8108aca <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108a92:	687b      	ldr	r3, [r7, #4]
 8108a94:	681b      	ldr	r3, [r3, #0]
 8108a96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8108a9a:	4618      	mov	r0, r3
 8108a9c:	f003 fbcc 	bl	810c238 <SDMMC_CmdBlockLength>
 8108aa0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108aa2:	6a3b      	ldr	r3, [r7, #32]
 8108aa4:	2b00      	cmp	r3, #0
 8108aa6:	d00f      	beq.n	8108ac8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108aa8:	687b      	ldr	r3, [r7, #4]
 8108aaa:	681b      	ldr	r3, [r3, #0]
 8108aac:	4a0b      	ldr	r2, [pc, #44]	@ (8108adc <HAL_SD_InitCard+0x134>)
 8108aae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108ab4:	6a3b      	ldr	r3, [r7, #32]
 8108ab6:	431a      	orrs	r2, r3
 8108ab8:	687b      	ldr	r3, [r7, #4]
 8108aba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108abc:	687b      	ldr	r3, [r7, #4]
 8108abe:	2201      	movs	r2, #1
 8108ac0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8108ac4:	2301      	movs	r3, #1
 8108ac6:	e000      	b.n	8108aca <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8108ac8:	2300      	movs	r3, #0
}
 8108aca:	4618      	mov	r0, r3
 8108acc:	372c      	adds	r7, #44	@ 0x2c
 8108ace:	46bd      	mov	sp, r7
 8108ad0:	bd90      	pop	{r4, r7, pc}
 8108ad2:	bf00      	nop
 8108ad4:	014f8b59 	.word	0x014f8b59
 8108ad8:	00012110 	.word	0x00012110
 8108adc:	1fe00fff 	.word	0x1fe00fff

08108ae0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8108ae0:	b480      	push	{r7}
 8108ae2:	b083      	sub	sp, #12
 8108ae4:	af00      	add	r7, sp, #0
 8108ae6:	6078      	str	r0, [r7, #4]
 8108ae8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108aee:	0f9b      	lsrs	r3, r3, #30
 8108af0:	b2da      	uxtb	r2, r3
 8108af2:	683b      	ldr	r3, [r7, #0]
 8108af4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8108af6:	687b      	ldr	r3, [r7, #4]
 8108af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108afa:	0e9b      	lsrs	r3, r3, #26
 8108afc:	b2db      	uxtb	r3, r3
 8108afe:	f003 030f 	and.w	r3, r3, #15
 8108b02:	b2da      	uxtb	r2, r3
 8108b04:	683b      	ldr	r3, [r7, #0]
 8108b06:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8108b08:	687b      	ldr	r3, [r7, #4]
 8108b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108b0c:	0e1b      	lsrs	r3, r3, #24
 8108b0e:	b2db      	uxtb	r3, r3
 8108b10:	f003 0303 	and.w	r3, r3, #3
 8108b14:	b2da      	uxtb	r2, r3
 8108b16:	683b      	ldr	r3, [r7, #0]
 8108b18:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8108b1a:	687b      	ldr	r3, [r7, #4]
 8108b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108b1e:	0c1b      	lsrs	r3, r3, #16
 8108b20:	b2da      	uxtb	r2, r3
 8108b22:	683b      	ldr	r3, [r7, #0]
 8108b24:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8108b26:	687b      	ldr	r3, [r7, #4]
 8108b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108b2a:	0a1b      	lsrs	r3, r3, #8
 8108b2c:	b2da      	uxtb	r2, r3
 8108b2e:	683b      	ldr	r3, [r7, #0]
 8108b30:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108b36:	b2da      	uxtb	r2, r3
 8108b38:	683b      	ldr	r3, [r7, #0]
 8108b3a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8108b3c:	687b      	ldr	r3, [r7, #4]
 8108b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108b40:	0d1b      	lsrs	r3, r3, #20
 8108b42:	b29a      	uxth	r2, r3
 8108b44:	683b      	ldr	r3, [r7, #0]
 8108b46:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8108b48:	687b      	ldr	r3, [r7, #4]
 8108b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108b4c:	0c1b      	lsrs	r3, r3, #16
 8108b4e:	b2db      	uxtb	r3, r3
 8108b50:	f003 030f 	and.w	r3, r3, #15
 8108b54:	b2da      	uxtb	r2, r3
 8108b56:	683b      	ldr	r3, [r7, #0]
 8108b58:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8108b5a:	687b      	ldr	r3, [r7, #4]
 8108b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108b5e:	0bdb      	lsrs	r3, r3, #15
 8108b60:	b2db      	uxtb	r3, r3
 8108b62:	f003 0301 	and.w	r3, r3, #1
 8108b66:	b2da      	uxtb	r2, r3
 8108b68:	683b      	ldr	r3, [r7, #0]
 8108b6a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8108b6c:	687b      	ldr	r3, [r7, #4]
 8108b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108b70:	0b9b      	lsrs	r3, r3, #14
 8108b72:	b2db      	uxtb	r3, r3
 8108b74:	f003 0301 	and.w	r3, r3, #1
 8108b78:	b2da      	uxtb	r2, r3
 8108b7a:	683b      	ldr	r3, [r7, #0]
 8108b7c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8108b7e:	687b      	ldr	r3, [r7, #4]
 8108b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108b82:	0b5b      	lsrs	r3, r3, #13
 8108b84:	b2db      	uxtb	r3, r3
 8108b86:	f003 0301 	and.w	r3, r3, #1
 8108b8a:	b2da      	uxtb	r2, r3
 8108b8c:	683b      	ldr	r3, [r7, #0]
 8108b8e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8108b90:	687b      	ldr	r3, [r7, #4]
 8108b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108b94:	0b1b      	lsrs	r3, r3, #12
 8108b96:	b2db      	uxtb	r3, r3
 8108b98:	f003 0301 	and.w	r3, r3, #1
 8108b9c:	b2da      	uxtb	r2, r3
 8108b9e:	683b      	ldr	r3, [r7, #0]
 8108ba0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8108ba2:	683b      	ldr	r3, [r7, #0]
 8108ba4:	2200      	movs	r2, #0
 8108ba6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8108ba8:	687b      	ldr	r3, [r7, #4]
 8108baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108bac:	2b00      	cmp	r3, #0
 8108bae:	d163      	bne.n	8108c78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8108bb0:	687b      	ldr	r3, [r7, #4]
 8108bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108bb4:	009a      	lsls	r2, r3, #2
 8108bb6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8108bba:	4013      	ands	r3, r2
 8108bbc:	687a      	ldr	r2, [r7, #4]
 8108bbe:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8108bc0:	0f92      	lsrs	r2, r2, #30
 8108bc2:	431a      	orrs	r2, r3
 8108bc4:	683b      	ldr	r3, [r7, #0]
 8108bc6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8108bc8:	687b      	ldr	r3, [r7, #4]
 8108bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108bcc:	0edb      	lsrs	r3, r3, #27
 8108bce:	b2db      	uxtb	r3, r3
 8108bd0:	f003 0307 	and.w	r3, r3, #7
 8108bd4:	b2da      	uxtb	r2, r3
 8108bd6:	683b      	ldr	r3, [r7, #0]
 8108bd8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8108bda:	687b      	ldr	r3, [r7, #4]
 8108bdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108bde:	0e1b      	lsrs	r3, r3, #24
 8108be0:	b2db      	uxtb	r3, r3
 8108be2:	f003 0307 	and.w	r3, r3, #7
 8108be6:	b2da      	uxtb	r2, r3
 8108be8:	683b      	ldr	r3, [r7, #0]
 8108bea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8108bec:	687b      	ldr	r3, [r7, #4]
 8108bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108bf0:	0d5b      	lsrs	r3, r3, #21
 8108bf2:	b2db      	uxtb	r3, r3
 8108bf4:	f003 0307 	and.w	r3, r3, #7
 8108bf8:	b2da      	uxtb	r2, r3
 8108bfa:	683b      	ldr	r3, [r7, #0]
 8108bfc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8108bfe:	687b      	ldr	r3, [r7, #4]
 8108c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108c02:	0c9b      	lsrs	r3, r3, #18
 8108c04:	b2db      	uxtb	r3, r3
 8108c06:	f003 0307 	and.w	r3, r3, #7
 8108c0a:	b2da      	uxtb	r2, r3
 8108c0c:	683b      	ldr	r3, [r7, #0]
 8108c0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8108c10:	687b      	ldr	r3, [r7, #4]
 8108c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108c14:	0bdb      	lsrs	r3, r3, #15
 8108c16:	b2db      	uxtb	r3, r3
 8108c18:	f003 0307 	and.w	r3, r3, #7
 8108c1c:	b2da      	uxtb	r2, r3
 8108c1e:	683b      	ldr	r3, [r7, #0]
 8108c20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8108c22:	683b      	ldr	r3, [r7, #0]
 8108c24:	691b      	ldr	r3, [r3, #16]
 8108c26:	1c5a      	adds	r2, r3, #1
 8108c28:	687b      	ldr	r3, [r7, #4]
 8108c2a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8108c2c:	683b      	ldr	r3, [r7, #0]
 8108c2e:	7e1b      	ldrb	r3, [r3, #24]
 8108c30:	b2db      	uxtb	r3, r3
 8108c32:	f003 0307 	and.w	r3, r3, #7
 8108c36:	3302      	adds	r3, #2
 8108c38:	2201      	movs	r2, #1
 8108c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8108c3e:	687a      	ldr	r2, [r7, #4]
 8108c40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8108c42:	fb03 f202 	mul.w	r2, r3, r2
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8108c4a:	683b      	ldr	r3, [r7, #0]
 8108c4c:	7a1b      	ldrb	r3, [r3, #8]
 8108c4e:	b2db      	uxtb	r3, r3
 8108c50:	f003 030f 	and.w	r3, r3, #15
 8108c54:	2201      	movs	r2, #1
 8108c56:	409a      	lsls	r2, r3
 8108c58:	687b      	ldr	r3, [r7, #4]
 8108c5a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8108c5c:	687b      	ldr	r3, [r7, #4]
 8108c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108c60:	687a      	ldr	r2, [r7, #4]
 8108c62:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8108c64:	0a52      	lsrs	r2, r2, #9
 8108c66:	fb03 f202 	mul.w	r2, r3, r2
 8108c6a:	687b      	ldr	r3, [r7, #4]
 8108c6c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8108c74:	655a      	str	r2, [r3, #84]	@ 0x54
 8108c76:	e031      	b.n	8108cdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8108c78:	687b      	ldr	r3, [r7, #4]
 8108c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108c7c:	2b01      	cmp	r3, #1
 8108c7e:	d11d      	bne.n	8108cbc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8108c80:	687b      	ldr	r3, [r7, #4]
 8108c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108c84:	041b      	lsls	r3, r3, #16
 8108c86:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8108c8a:	687b      	ldr	r3, [r7, #4]
 8108c8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108c8e:	0c1b      	lsrs	r3, r3, #16
 8108c90:	431a      	orrs	r2, r3
 8108c92:	683b      	ldr	r3, [r7, #0]
 8108c94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8108c96:	683b      	ldr	r3, [r7, #0]
 8108c98:	691b      	ldr	r3, [r3, #16]
 8108c9a:	3301      	adds	r3, #1
 8108c9c:	029a      	lsls	r2, r3, #10
 8108c9e:	687b      	ldr	r3, [r7, #4]
 8108ca0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8108ca2:	687b      	ldr	r3, [r7, #4]
 8108ca4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8108ca6:	687b      	ldr	r3, [r7, #4]
 8108ca8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8108caa:	687b      	ldr	r3, [r7, #4]
 8108cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8108cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8108cb2:	687b      	ldr	r3, [r7, #4]
 8108cb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8108cb6:	687b      	ldr	r3, [r7, #4]
 8108cb8:	655a      	str	r2, [r3, #84]	@ 0x54
 8108cba:	e00f      	b.n	8108cdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108cbc:	687b      	ldr	r3, [r7, #4]
 8108cbe:	681b      	ldr	r3, [r3, #0]
 8108cc0:	4a58      	ldr	r2, [pc, #352]	@ (8108e24 <HAL_SD_GetCardCSD+0x344>)
 8108cc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108cc4:	687b      	ldr	r3, [r7, #4]
 8108cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108cc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8108ccc:	687b      	ldr	r3, [r7, #4]
 8108cce:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108cd0:	687b      	ldr	r3, [r7, #4]
 8108cd2:	2201      	movs	r2, #1
 8108cd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8108cd8:	2301      	movs	r3, #1
 8108cda:	e09d      	b.n	8108e18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8108cdc:	687b      	ldr	r3, [r7, #4]
 8108cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108ce0:	0b9b      	lsrs	r3, r3, #14
 8108ce2:	b2db      	uxtb	r3, r3
 8108ce4:	f003 0301 	and.w	r3, r3, #1
 8108ce8:	b2da      	uxtb	r2, r3
 8108cea:	683b      	ldr	r3, [r7, #0]
 8108cec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8108cee:	687b      	ldr	r3, [r7, #4]
 8108cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108cf2:	09db      	lsrs	r3, r3, #7
 8108cf4:	b2db      	uxtb	r3, r3
 8108cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108cfa:	b2da      	uxtb	r2, r3
 8108cfc:	683b      	ldr	r3, [r7, #0]
 8108cfe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8108d00:	687b      	ldr	r3, [r7, #4]
 8108d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108d04:	b2db      	uxtb	r3, r3
 8108d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108d0a:	b2da      	uxtb	r2, r3
 8108d0c:	683b      	ldr	r3, [r7, #0]
 8108d0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8108d10:	687b      	ldr	r3, [r7, #4]
 8108d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108d14:	0fdb      	lsrs	r3, r3, #31
 8108d16:	b2da      	uxtb	r2, r3
 8108d18:	683b      	ldr	r3, [r7, #0]
 8108d1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108d20:	0f5b      	lsrs	r3, r3, #29
 8108d22:	b2db      	uxtb	r3, r3
 8108d24:	f003 0303 	and.w	r3, r3, #3
 8108d28:	b2da      	uxtb	r2, r3
 8108d2a:	683b      	ldr	r3, [r7, #0]
 8108d2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8108d2e:	687b      	ldr	r3, [r7, #4]
 8108d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108d32:	0e9b      	lsrs	r3, r3, #26
 8108d34:	b2db      	uxtb	r3, r3
 8108d36:	f003 0307 	and.w	r3, r3, #7
 8108d3a:	b2da      	uxtb	r2, r3
 8108d3c:	683b      	ldr	r3, [r7, #0]
 8108d3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8108d40:	687b      	ldr	r3, [r7, #4]
 8108d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108d44:	0d9b      	lsrs	r3, r3, #22
 8108d46:	b2db      	uxtb	r3, r3
 8108d48:	f003 030f 	and.w	r3, r3, #15
 8108d4c:	b2da      	uxtb	r2, r3
 8108d4e:	683b      	ldr	r3, [r7, #0]
 8108d50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8108d52:	687b      	ldr	r3, [r7, #4]
 8108d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108d56:	0d5b      	lsrs	r3, r3, #21
 8108d58:	b2db      	uxtb	r3, r3
 8108d5a:	f003 0301 	and.w	r3, r3, #1
 8108d5e:	b2da      	uxtb	r2, r3
 8108d60:	683b      	ldr	r3, [r7, #0]
 8108d62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8108d66:	683b      	ldr	r3, [r7, #0]
 8108d68:	2200      	movs	r2, #0
 8108d6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8108d6e:	687b      	ldr	r3, [r7, #4]
 8108d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108d72:	0c1b      	lsrs	r3, r3, #16
 8108d74:	b2db      	uxtb	r3, r3
 8108d76:	f003 0301 	and.w	r3, r3, #1
 8108d7a:	b2da      	uxtb	r2, r3
 8108d7c:	683b      	ldr	r3, [r7, #0]
 8108d7e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8108d82:	687b      	ldr	r3, [r7, #4]
 8108d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108d86:	0bdb      	lsrs	r3, r3, #15
 8108d88:	b2db      	uxtb	r3, r3
 8108d8a:	f003 0301 	and.w	r3, r3, #1
 8108d8e:	b2da      	uxtb	r2, r3
 8108d90:	683b      	ldr	r3, [r7, #0]
 8108d92:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8108d96:	687b      	ldr	r3, [r7, #4]
 8108d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108d9a:	0b9b      	lsrs	r3, r3, #14
 8108d9c:	b2db      	uxtb	r3, r3
 8108d9e:	f003 0301 	and.w	r3, r3, #1
 8108da2:	b2da      	uxtb	r2, r3
 8108da4:	683b      	ldr	r3, [r7, #0]
 8108da6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8108daa:	687b      	ldr	r3, [r7, #4]
 8108dac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108dae:	0b5b      	lsrs	r3, r3, #13
 8108db0:	b2db      	uxtb	r3, r3
 8108db2:	f003 0301 	and.w	r3, r3, #1
 8108db6:	b2da      	uxtb	r2, r3
 8108db8:	683b      	ldr	r3, [r7, #0]
 8108dba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8108dbe:	687b      	ldr	r3, [r7, #4]
 8108dc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108dc2:	0b1b      	lsrs	r3, r3, #12
 8108dc4:	b2db      	uxtb	r3, r3
 8108dc6:	f003 0301 	and.w	r3, r3, #1
 8108dca:	b2da      	uxtb	r2, r3
 8108dcc:	683b      	ldr	r3, [r7, #0]
 8108dce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108dd6:	0a9b      	lsrs	r3, r3, #10
 8108dd8:	b2db      	uxtb	r3, r3
 8108dda:	f003 0303 	and.w	r3, r3, #3
 8108dde:	b2da      	uxtb	r2, r3
 8108de0:	683b      	ldr	r3, [r7, #0]
 8108de2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8108de6:	687b      	ldr	r3, [r7, #4]
 8108de8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108dea:	0a1b      	lsrs	r3, r3, #8
 8108dec:	b2db      	uxtb	r3, r3
 8108dee:	f003 0303 	and.w	r3, r3, #3
 8108df2:	b2da      	uxtb	r2, r3
 8108df4:	683b      	ldr	r3, [r7, #0]
 8108df6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108dfe:	085b      	lsrs	r3, r3, #1
 8108e00:	b2db      	uxtb	r3, r3
 8108e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108e06:	b2da      	uxtb	r2, r3
 8108e08:	683b      	ldr	r3, [r7, #0]
 8108e0a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8108e0e:	683b      	ldr	r3, [r7, #0]
 8108e10:	2201      	movs	r2, #1
 8108e12:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8108e16:	2300      	movs	r3, #0
}
 8108e18:	4618      	mov	r0, r3
 8108e1a:	370c      	adds	r7, #12
 8108e1c:	46bd      	mov	sp, r7
 8108e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e22:	4770      	bx	lr
 8108e24:	1fe00fff 	.word	0x1fe00fff

08108e28 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8108e28:	b580      	push	{r7, lr}
 8108e2a:	b094      	sub	sp, #80	@ 0x50
 8108e2c:	af00      	add	r7, sp, #0
 8108e2e:	6078      	str	r0, [r7, #4]
 8108e30:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8108e32:	2300      	movs	r3, #0
 8108e34:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8108e38:	687b      	ldr	r3, [r7, #4]
 8108e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8108e3e:	b2db      	uxtb	r3, r3
 8108e40:	2b03      	cmp	r3, #3
 8108e42:	d101      	bne.n	8108e48 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8108e44:	2301      	movs	r3, #1
 8108e46:	e0a7      	b.n	8108f98 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8108e48:	f107 0308 	add.w	r3, r7, #8
 8108e4c:	4619      	mov	r1, r3
 8108e4e:	6878      	ldr	r0, [r7, #4]
 8108e50:	f000 fb36 	bl	81094c0 <SD_SendSDStatus>
 8108e54:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8108e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8108e58:	2b00      	cmp	r3, #0
 8108e5a:	d011      	beq.n	8108e80 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	681b      	ldr	r3, [r3, #0]
 8108e60:	4a4f      	ldr	r2, [pc, #316]	@ (8108fa0 <HAL_SD_GetCardStatus+0x178>)
 8108e62:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8108e64:	687b      	ldr	r3, [r7, #4]
 8108e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108e68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8108e6a:	431a      	orrs	r2, r3
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108e70:	687b      	ldr	r3, [r7, #4]
 8108e72:	2201      	movs	r2, #1
 8108e74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8108e78:	2301      	movs	r3, #1
 8108e7a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8108e7e:	e070      	b.n	8108f62 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8108e80:	68bb      	ldr	r3, [r7, #8]
 8108e82:	099b      	lsrs	r3, r3, #6
 8108e84:	b2db      	uxtb	r3, r3
 8108e86:	f003 0303 	and.w	r3, r3, #3
 8108e8a:	b2da      	uxtb	r2, r3
 8108e8c:	683b      	ldr	r3, [r7, #0]
 8108e8e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8108e90:	68bb      	ldr	r3, [r7, #8]
 8108e92:	095b      	lsrs	r3, r3, #5
 8108e94:	b2db      	uxtb	r3, r3
 8108e96:	f003 0301 	and.w	r3, r3, #1
 8108e9a:	b2da      	uxtb	r2, r3
 8108e9c:	683b      	ldr	r3, [r7, #0]
 8108e9e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8108ea0:	68bb      	ldr	r3, [r7, #8]
 8108ea2:	0a1b      	lsrs	r3, r3, #8
 8108ea4:	b29b      	uxth	r3, r3
 8108ea6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8108eaa:	b29a      	uxth	r2, r3
 8108eac:	68bb      	ldr	r3, [r7, #8]
 8108eae:	0e1b      	lsrs	r3, r3, #24
 8108eb0:	b29b      	uxth	r3, r3
 8108eb2:	4313      	orrs	r3, r2
 8108eb4:	b29a      	uxth	r2, r3
 8108eb6:	683b      	ldr	r3, [r7, #0]
 8108eb8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108eba:	68fb      	ldr	r3, [r7, #12]
 8108ebc:	061a      	lsls	r2, r3, #24
 8108ebe:	68fb      	ldr	r3, [r7, #12]
 8108ec0:	021b      	lsls	r3, r3, #8
 8108ec2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8108ec6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108ec8:	68fb      	ldr	r3, [r7, #12]
 8108eca:	0a1b      	lsrs	r3, r3, #8
 8108ecc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108ed0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108ed2:	68fb      	ldr	r3, [r7, #12]
 8108ed4:	0e1b      	lsrs	r3, r3, #24
 8108ed6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108ed8:	683b      	ldr	r3, [r7, #0]
 8108eda:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8108edc:	693b      	ldr	r3, [r7, #16]
 8108ede:	b2da      	uxtb	r2, r3
 8108ee0:	683b      	ldr	r3, [r7, #0]
 8108ee2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8108ee4:	693b      	ldr	r3, [r7, #16]
 8108ee6:	0a1b      	lsrs	r3, r3, #8
 8108ee8:	b2da      	uxtb	r2, r3
 8108eea:	683b      	ldr	r3, [r7, #0]
 8108eec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8108eee:	693b      	ldr	r3, [r7, #16]
 8108ef0:	0d1b      	lsrs	r3, r3, #20
 8108ef2:	b2db      	uxtb	r3, r3
 8108ef4:	f003 030f 	and.w	r3, r3, #15
 8108ef8:	b2da      	uxtb	r2, r3
 8108efa:	683b      	ldr	r3, [r7, #0]
 8108efc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8108efe:	693b      	ldr	r3, [r7, #16]
 8108f00:	0c1b      	lsrs	r3, r3, #16
 8108f02:	b29b      	uxth	r3, r3
 8108f04:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8108f08:	b29a      	uxth	r2, r3
 8108f0a:	697b      	ldr	r3, [r7, #20]
 8108f0c:	b29b      	uxth	r3, r3
 8108f0e:	b2db      	uxtb	r3, r3
 8108f10:	b29b      	uxth	r3, r3
 8108f12:	4313      	orrs	r3, r2
 8108f14:	b29a      	uxth	r2, r3
 8108f16:	683b      	ldr	r3, [r7, #0]
 8108f18:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8108f1a:	697b      	ldr	r3, [r7, #20]
 8108f1c:	0a9b      	lsrs	r3, r3, #10
 8108f1e:	b2db      	uxtb	r3, r3
 8108f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108f24:	b2da      	uxtb	r2, r3
 8108f26:	683b      	ldr	r3, [r7, #0]
 8108f28:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8108f2a:	697b      	ldr	r3, [r7, #20]
 8108f2c:	0a1b      	lsrs	r3, r3, #8
 8108f2e:	b2db      	uxtb	r3, r3
 8108f30:	f003 0303 	and.w	r3, r3, #3
 8108f34:	b2da      	uxtb	r2, r3
 8108f36:	683b      	ldr	r3, [r7, #0]
 8108f38:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8108f3a:	697b      	ldr	r3, [r7, #20]
 8108f3c:	091b      	lsrs	r3, r3, #4
 8108f3e:	b2db      	uxtb	r3, r3
 8108f40:	f003 030f 	and.w	r3, r3, #15
 8108f44:	b2da      	uxtb	r2, r3
 8108f46:	683b      	ldr	r3, [r7, #0]
 8108f48:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8108f4a:	697b      	ldr	r3, [r7, #20]
 8108f4c:	b2db      	uxtb	r3, r3
 8108f4e:	f003 030f 	and.w	r3, r3, #15
 8108f52:	b2da      	uxtb	r2, r3
 8108f54:	683b      	ldr	r3, [r7, #0]
 8108f56:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8108f58:	69bb      	ldr	r3, [r7, #24]
 8108f5a:	0e1b      	lsrs	r3, r3, #24
 8108f5c:	b2da      	uxtb	r2, r3
 8108f5e:	683b      	ldr	r3, [r7, #0]
 8108f60:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108f62:	687b      	ldr	r3, [r7, #4]
 8108f64:	681b      	ldr	r3, [r3, #0]
 8108f66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8108f6a:	4618      	mov	r0, r3
 8108f6c:	f003 f964 	bl	810c238 <SDMMC_CmdBlockLength>
 8108f70:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8108f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8108f74:	2b00      	cmp	r3, #0
 8108f76:	d00d      	beq.n	8108f94 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108f78:	687b      	ldr	r3, [r7, #4]
 8108f7a:	681b      	ldr	r3, [r3, #0]
 8108f7c:	4a08      	ldr	r2, [pc, #32]	@ (8108fa0 <HAL_SD_GetCardStatus+0x178>)
 8108f7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8108f80:	687b      	ldr	r3, [r7, #4]
 8108f82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8108f84:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108f86:	687b      	ldr	r3, [r7, #4]
 8108f88:	2201      	movs	r2, #1
 8108f8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8108f8e:	2301      	movs	r3, #1
 8108f90:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8108f94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8108f98:	4618      	mov	r0, r3
 8108f9a:	3750      	adds	r7, #80	@ 0x50
 8108f9c:	46bd      	mov	sp, r7
 8108f9e:	bd80      	pop	{r7, pc}
 8108fa0:	1fe00fff 	.word	0x1fe00fff

08108fa4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8108fa4:	b590      	push	{r4, r7, lr}
 8108fa6:	b08d      	sub	sp, #52	@ 0x34
 8108fa8:	af02      	add	r7, sp, #8
 8108faa:	6078      	str	r0, [r7, #4]
 8108fac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8108fae:	2300      	movs	r3, #0
 8108fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8108fb4:	687b      	ldr	r3, [r7, #4]
 8108fb6:	2203      	movs	r2, #3
 8108fb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108fc0:	2b03      	cmp	r3, #3
 8108fc2:	d02e      	beq.n	8109022 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8108fc4:	683b      	ldr	r3, [r7, #0]
 8108fc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108fca:	d106      	bne.n	8108fda <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108fcc:	687b      	ldr	r3, [r7, #4]
 8108fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108fd0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8108fd4:	687b      	ldr	r3, [r7, #4]
 8108fd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8108fd8:	e029      	b.n	810902e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8108fda:	683b      	ldr	r3, [r7, #0]
 8108fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108fe0:	d10a      	bne.n	8108ff8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8108fe2:	6878      	ldr	r0, [r7, #4]
 8108fe4:	f000 fb64 	bl	81096b0 <SD_WideBus_Enable>
 8108fe8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8108fea:	687b      	ldr	r3, [r7, #4]
 8108fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108fee:	6a3b      	ldr	r3, [r7, #32]
 8108ff0:	431a      	orrs	r2, r3
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	635a      	str	r2, [r3, #52]	@ 0x34
 8108ff6:	e01a      	b.n	810902e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8108ff8:	683b      	ldr	r3, [r7, #0]
 8108ffa:	2b00      	cmp	r3, #0
 8108ffc:	d10a      	bne.n	8109014 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8108ffe:	6878      	ldr	r0, [r7, #4]
 8109000:	f000 fba1 	bl	8109746 <SD_WideBus_Disable>
 8109004:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8109006:	687b      	ldr	r3, [r7, #4]
 8109008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810900a:	6a3b      	ldr	r3, [r7, #32]
 810900c:	431a      	orrs	r2, r3
 810900e:	687b      	ldr	r3, [r7, #4]
 8109010:	635a      	str	r2, [r3, #52]	@ 0x34
 8109012:	e00c      	b.n	810902e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8109014:	687b      	ldr	r3, [r7, #4]
 8109016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109018:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 810901c:	687b      	ldr	r3, [r7, #4]
 810901e:	635a      	str	r2, [r3, #52]	@ 0x34
 8109020:	e005      	b.n	810902e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109022:	687b      	ldr	r3, [r7, #4]
 8109024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109026:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810902a:	687b      	ldr	r3, [r7, #4]
 810902c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 810902e:	687b      	ldr	r3, [r7, #4]
 8109030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109032:	2b00      	cmp	r3, #0
 8109034:	d007      	beq.n	8109046 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109036:	687b      	ldr	r3, [r7, #4]
 8109038:	681b      	ldr	r3, [r3, #0]
 810903a:	4a5f      	ldr	r2, [pc, #380]	@ (81091b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 810903c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 810903e:	2301      	movs	r3, #1
 8109040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8109044:	e096      	b.n	8109174 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8109046:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 810904a:	f04f 0100 	mov.w	r1, #0
 810904e:	f7fd fc57 	bl	8106900 <HAL_RCCEx_GetPeriphCLKFreq>
 8109052:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8109054:	69fb      	ldr	r3, [r7, #28]
 8109056:	2b00      	cmp	r3, #0
 8109058:	f000 8083 	beq.w	8109162 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 810905c:	687b      	ldr	r3, [r7, #4]
 810905e:	685b      	ldr	r3, [r3, #4]
 8109060:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8109062:	687b      	ldr	r3, [r7, #4]
 8109064:	689b      	ldr	r3, [r3, #8]
 8109066:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8109068:	683b      	ldr	r3, [r7, #0]
 810906a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 810906c:	687b      	ldr	r3, [r7, #4]
 810906e:	691b      	ldr	r3, [r3, #16]
 8109070:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8109072:	687b      	ldr	r3, [r7, #4]
 8109074:	695a      	ldr	r2, [r3, #20]
 8109076:	69fb      	ldr	r3, [r7, #28]
 8109078:	4950      	ldr	r1, [pc, #320]	@ (81091bc <HAL_SD_ConfigWideBusOperation+0x218>)
 810907a:	fba1 1303 	umull	r1, r3, r1, r3
 810907e:	0e1b      	lsrs	r3, r3, #24
 8109080:	429a      	cmp	r2, r3
 8109082:	d303      	bcc.n	810908c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8109084:	687b      	ldr	r3, [r7, #4]
 8109086:	695b      	ldr	r3, [r3, #20]
 8109088:	61bb      	str	r3, [r7, #24]
 810908a:	e05a      	b.n	8109142 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 810908c:	687b      	ldr	r3, [r7, #4]
 810908e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8109094:	d103      	bne.n	810909e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8109096:	687b      	ldr	r3, [r7, #4]
 8109098:	695b      	ldr	r3, [r3, #20]
 810909a:	61bb      	str	r3, [r7, #24]
 810909c:	e051      	b.n	8109142 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 810909e:	687b      	ldr	r3, [r7, #4]
 81090a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81090a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81090a6:	d126      	bne.n	81090f6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 81090a8:	687b      	ldr	r3, [r7, #4]
 81090aa:	695b      	ldr	r3, [r3, #20]
 81090ac:	2b00      	cmp	r3, #0
 81090ae:	d10e      	bne.n	81090ce <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 81090b0:	69fb      	ldr	r3, [r7, #28]
 81090b2:	4a43      	ldr	r2, [pc, #268]	@ (81091c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 81090b4:	4293      	cmp	r3, r2
 81090b6:	d906      	bls.n	81090c6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 81090b8:	69fb      	ldr	r3, [r7, #28]
 81090ba:	4a40      	ldr	r2, [pc, #256]	@ (81091bc <HAL_SD_ConfigWideBusOperation+0x218>)
 81090bc:	fba2 2303 	umull	r2, r3, r2, r3
 81090c0:	0e5b      	lsrs	r3, r3, #25
 81090c2:	61bb      	str	r3, [r7, #24]
 81090c4:	e03d      	b.n	8109142 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 81090c6:	687b      	ldr	r3, [r7, #4]
 81090c8:	695b      	ldr	r3, [r3, #20]
 81090ca:	61bb      	str	r3, [r7, #24]
 81090cc:	e039      	b.n	8109142 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 81090ce:	687b      	ldr	r3, [r7, #4]
 81090d0:	695b      	ldr	r3, [r3, #20]
 81090d2:	005b      	lsls	r3, r3, #1
 81090d4:	69fa      	ldr	r2, [r7, #28]
 81090d6:	fbb2 f3f3 	udiv	r3, r2, r3
 81090da:	4a39      	ldr	r2, [pc, #228]	@ (81091c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 81090dc:	4293      	cmp	r3, r2
 81090de:	d906      	bls.n	81090ee <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 81090e0:	69fb      	ldr	r3, [r7, #28]
 81090e2:	4a36      	ldr	r2, [pc, #216]	@ (81091bc <HAL_SD_ConfigWideBusOperation+0x218>)
 81090e4:	fba2 2303 	umull	r2, r3, r2, r3
 81090e8:	0e5b      	lsrs	r3, r3, #25
 81090ea:	61bb      	str	r3, [r7, #24]
 81090ec:	e029      	b.n	8109142 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 81090ee:	687b      	ldr	r3, [r7, #4]
 81090f0:	695b      	ldr	r3, [r3, #20]
 81090f2:	61bb      	str	r3, [r7, #24]
 81090f4:	e025      	b.n	8109142 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 81090f6:	687b      	ldr	r3, [r7, #4]
 81090f8:	695b      	ldr	r3, [r3, #20]
 81090fa:	2b00      	cmp	r3, #0
 81090fc:	d10e      	bne.n	810911c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 81090fe:	69fb      	ldr	r3, [r7, #28]
 8109100:	4a30      	ldr	r2, [pc, #192]	@ (81091c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8109102:	4293      	cmp	r3, r2
 8109104:	d906      	bls.n	8109114 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8109106:	69fb      	ldr	r3, [r7, #28]
 8109108:	4a2c      	ldr	r2, [pc, #176]	@ (81091bc <HAL_SD_ConfigWideBusOperation+0x218>)
 810910a:	fba2 2303 	umull	r2, r3, r2, r3
 810910e:	0e1b      	lsrs	r3, r3, #24
 8109110:	61bb      	str	r3, [r7, #24]
 8109112:	e016      	b.n	8109142 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109114:	687b      	ldr	r3, [r7, #4]
 8109116:	695b      	ldr	r3, [r3, #20]
 8109118:	61bb      	str	r3, [r7, #24]
 810911a:	e012      	b.n	8109142 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 810911c:	687b      	ldr	r3, [r7, #4]
 810911e:	695b      	ldr	r3, [r3, #20]
 8109120:	005b      	lsls	r3, r3, #1
 8109122:	69fa      	ldr	r2, [r7, #28]
 8109124:	fbb2 f3f3 	udiv	r3, r2, r3
 8109128:	4a26      	ldr	r2, [pc, #152]	@ (81091c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 810912a:	4293      	cmp	r3, r2
 810912c:	d906      	bls.n	810913c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 810912e:	69fb      	ldr	r3, [r7, #28]
 8109130:	4a22      	ldr	r2, [pc, #136]	@ (81091bc <HAL_SD_ConfigWideBusOperation+0x218>)
 8109132:	fba2 2303 	umull	r2, r3, r2, r3
 8109136:	0e1b      	lsrs	r3, r3, #24
 8109138:	61bb      	str	r3, [r7, #24]
 810913a:	e002      	b.n	8109142 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810913c:	687b      	ldr	r3, [r7, #4]
 810913e:	695b      	ldr	r3, [r3, #20]
 8109140:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8109142:	687b      	ldr	r3, [r7, #4]
 8109144:	681c      	ldr	r4, [r3, #0]
 8109146:	466a      	mov	r2, sp
 8109148:	f107 0314 	add.w	r3, r7, #20
 810914c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8109150:	e882 0003 	stmia.w	r2, {r0, r1}
 8109154:	f107 0308 	add.w	r3, r7, #8
 8109158:	cb0e      	ldmia	r3, {r1, r2, r3}
 810915a:	4620      	mov	r0, r4
 810915c:	f002 ffa0 	bl	810c0a0 <SDMMC_Init>
 8109160:	e008      	b.n	8109174 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8109162:	687b      	ldr	r3, [r7, #4]
 8109164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109166:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 810916a:	687b      	ldr	r3, [r7, #4]
 810916c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 810916e:	2301      	movs	r3, #1
 8109170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8109174:	687b      	ldr	r3, [r7, #4]
 8109176:	681b      	ldr	r3, [r3, #0]
 8109178:	f44f 7100 	mov.w	r1, #512	@ 0x200
 810917c:	4618      	mov	r0, r3
 810917e:	f003 f85b 	bl	810c238 <SDMMC_CmdBlockLength>
 8109182:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109184:	6a3b      	ldr	r3, [r7, #32]
 8109186:	2b00      	cmp	r3, #0
 8109188:	d00c      	beq.n	81091a4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810918a:	687b      	ldr	r3, [r7, #4]
 810918c:	681b      	ldr	r3, [r3, #0]
 810918e:	4a0a      	ldr	r2, [pc, #40]	@ (81091b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8109190:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8109192:	687b      	ldr	r3, [r7, #4]
 8109194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109196:	6a3b      	ldr	r3, [r7, #32]
 8109198:	431a      	orrs	r2, r3
 810919a:	687b      	ldr	r3, [r7, #4]
 810919c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 810919e:	2301      	movs	r3, #1
 81091a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	2201      	movs	r2, #1
 81091a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 81091ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 81091b0:	4618      	mov	r0, r3
 81091b2:	372c      	adds	r7, #44	@ 0x2c
 81091b4:	46bd      	mov	sp, r7
 81091b6:	bd90      	pop	{r4, r7, pc}
 81091b8:	1fe00fff 	.word	0x1fe00fff
 81091bc:	55e63b89 	.word	0x55e63b89
 81091c0:	02faf080 	.word	0x02faf080
 81091c4:	017d7840 	.word	0x017d7840

081091c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 81091c8:	b580      	push	{r7, lr}
 81091ca:	b086      	sub	sp, #24
 81091cc:	af00      	add	r7, sp, #0
 81091ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 81091d0:	2300      	movs	r3, #0
 81091d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 81091d4:	f107 030c 	add.w	r3, r7, #12
 81091d8:	4619      	mov	r1, r3
 81091da:	6878      	ldr	r0, [r7, #4]
 81091dc:	f000 fa40 	bl	8109660 <SD_SendStatus>
 81091e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 81091e2:	697b      	ldr	r3, [r7, #20]
 81091e4:	2b00      	cmp	r3, #0
 81091e6:	d005      	beq.n	81091f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 81091e8:	687b      	ldr	r3, [r7, #4]
 81091ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81091ec:	697b      	ldr	r3, [r7, #20]
 81091ee:	431a      	orrs	r2, r3
 81091f0:	687b      	ldr	r3, [r7, #4]
 81091f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 81091f4:	68fb      	ldr	r3, [r7, #12]
 81091f6:	0a5b      	lsrs	r3, r3, #9
 81091f8:	f003 030f 	and.w	r3, r3, #15
 81091fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 81091fe:	693b      	ldr	r3, [r7, #16]
}
 8109200:	4618      	mov	r0, r3
 8109202:	3718      	adds	r7, #24
 8109204:	46bd      	mov	sp, r7
 8109206:	bd80      	pop	{r7, pc}

08109208 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8109208:	b580      	push	{r7, lr}
 810920a:	b090      	sub	sp, #64	@ 0x40
 810920c:	af00      	add	r7, sp, #0
 810920e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8109210:	2300      	movs	r3, #0
 8109212:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8109214:	f7f9 fb64 	bl	81028e0 <HAL_GetTick>
 8109218:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 810921a:	687b      	ldr	r3, [r7, #4]
 810921c:	681b      	ldr	r3, [r3, #0]
 810921e:	4618      	mov	r0, r3
 8109220:	f002 ff86 	bl	810c130 <SDMMC_GetPowerState>
 8109224:	4603      	mov	r3, r0
 8109226:	2b00      	cmp	r3, #0
 8109228:	d102      	bne.n	8109230 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810922a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 810922e:	e0b5      	b.n	810939c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109230:	687b      	ldr	r3, [r7, #4]
 8109232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109234:	2b03      	cmp	r3, #3
 8109236:	d02e      	beq.n	8109296 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8109238:	687b      	ldr	r3, [r7, #4]
 810923a:	681b      	ldr	r3, [r3, #0]
 810923c:	4618      	mov	r0, r3
 810923e:	f003 f907 	bl	810c450 <SDMMC_CmdSendCID>
 8109242:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8109244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109246:	2b00      	cmp	r3, #0
 8109248:	d001      	beq.n	810924e <SD_InitCard+0x46>
    {
      return errorstate;
 810924a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810924c:	e0a6      	b.n	810939c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810924e:	687b      	ldr	r3, [r7, #4]
 8109250:	681b      	ldr	r3, [r3, #0]
 8109252:	2100      	movs	r1, #0
 8109254:	4618      	mov	r0, r3
 8109256:	f002 ffb0 	bl	810c1ba <SDMMC_GetResponse>
 810925a:	4602      	mov	r2, r0
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8109260:	687b      	ldr	r3, [r7, #4]
 8109262:	681b      	ldr	r3, [r3, #0]
 8109264:	2104      	movs	r1, #4
 8109266:	4618      	mov	r0, r3
 8109268:	f002 ffa7 	bl	810c1ba <SDMMC_GetResponse>
 810926c:	4602      	mov	r2, r0
 810926e:	687b      	ldr	r3, [r7, #4]
 8109270:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8109272:	687b      	ldr	r3, [r7, #4]
 8109274:	681b      	ldr	r3, [r3, #0]
 8109276:	2108      	movs	r1, #8
 8109278:	4618      	mov	r0, r3
 810927a:	f002 ff9e 	bl	810c1ba <SDMMC_GetResponse>
 810927e:	4602      	mov	r2, r0
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8109284:	687b      	ldr	r3, [r7, #4]
 8109286:	681b      	ldr	r3, [r3, #0]
 8109288:	210c      	movs	r1, #12
 810928a:	4618      	mov	r0, r3
 810928c:	f002 ff95 	bl	810c1ba <SDMMC_GetResponse>
 8109290:	4602      	mov	r2, r0
 8109292:	687b      	ldr	r3, [r7, #4]
 8109294:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109296:	687b      	ldr	r3, [r7, #4]
 8109298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810929a:	2b03      	cmp	r3, #3
 810929c:	d01d      	beq.n	81092da <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 810929e:	e019      	b.n	81092d4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 81092a0:	687b      	ldr	r3, [r7, #4]
 81092a2:	681b      	ldr	r3, [r3, #0]
 81092a4:	f107 020a 	add.w	r2, r7, #10
 81092a8:	4611      	mov	r1, r2
 81092aa:	4618      	mov	r0, r3
 81092ac:	f003 f90f 	bl	810c4ce <SDMMC_CmdSetRelAdd>
 81092b0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 81092b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81092b4:	2b00      	cmp	r3, #0
 81092b6:	d001      	beq.n	81092bc <SD_InitCard+0xb4>
      {
        return errorstate;
 81092b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81092ba:	e06f      	b.n	810939c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 81092bc:	f7f9 fb10 	bl	81028e0 <HAL_GetTick>
 81092c0:	4602      	mov	r2, r0
 81092c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81092c4:	1ad3      	subs	r3, r2, r3
 81092c6:	f241 3287 	movw	r2, #4999	@ 0x1387
 81092ca:	4293      	cmp	r3, r2
 81092cc:	d902      	bls.n	81092d4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 81092ce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81092d2:	e063      	b.n	810939c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 81092d4:	897b      	ldrh	r3, [r7, #10]
 81092d6:	2b00      	cmp	r3, #0
 81092d8:	d0e2      	beq.n	81092a0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 81092da:	687b      	ldr	r3, [r7, #4]
 81092dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81092de:	2b03      	cmp	r3, #3
 81092e0:	d036      	beq.n	8109350 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 81092e2:	897b      	ldrh	r3, [r7, #10]
 81092e4:	461a      	mov	r2, r3
 81092e6:	687b      	ldr	r3, [r7, #4]
 81092e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	681a      	ldr	r2, [r3, #0]
 81092ee:	687b      	ldr	r3, [r7, #4]
 81092f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81092f2:	041b      	lsls	r3, r3, #16
 81092f4:	4619      	mov	r1, r3
 81092f6:	4610      	mov	r0, r2
 81092f8:	f003 f8c9 	bl	810c48e <SDMMC_CmdSendCSD>
 81092fc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 81092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109300:	2b00      	cmp	r3, #0
 8109302:	d001      	beq.n	8109308 <SD_InitCard+0x100>
    {
      return errorstate;
 8109304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109306:	e049      	b.n	810939c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109308:	687b      	ldr	r3, [r7, #4]
 810930a:	681b      	ldr	r3, [r3, #0]
 810930c:	2100      	movs	r1, #0
 810930e:	4618      	mov	r0, r3
 8109310:	f002 ff53 	bl	810c1ba <SDMMC_GetResponse>
 8109314:	4602      	mov	r2, r0
 8109316:	687b      	ldr	r3, [r7, #4]
 8109318:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	681b      	ldr	r3, [r3, #0]
 810931e:	2104      	movs	r1, #4
 8109320:	4618      	mov	r0, r3
 8109322:	f002 ff4a 	bl	810c1ba <SDMMC_GetResponse>
 8109326:	4602      	mov	r2, r0
 8109328:	687b      	ldr	r3, [r7, #4]
 810932a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810932c:	687b      	ldr	r3, [r7, #4]
 810932e:	681b      	ldr	r3, [r3, #0]
 8109330:	2108      	movs	r1, #8
 8109332:	4618      	mov	r0, r3
 8109334:	f002 ff41 	bl	810c1ba <SDMMC_GetResponse>
 8109338:	4602      	mov	r2, r0
 810933a:	687b      	ldr	r3, [r7, #4]
 810933c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810933e:	687b      	ldr	r3, [r7, #4]
 8109340:	681b      	ldr	r3, [r3, #0]
 8109342:	210c      	movs	r1, #12
 8109344:	4618      	mov	r0, r3
 8109346:	f002 ff38 	bl	810c1ba <SDMMC_GetResponse>
 810934a:	4602      	mov	r2, r0
 810934c:	687b      	ldr	r3, [r7, #4]
 810934e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8109350:	687b      	ldr	r3, [r7, #4]
 8109352:	681b      	ldr	r3, [r3, #0]
 8109354:	2104      	movs	r1, #4
 8109356:	4618      	mov	r0, r3
 8109358:	f002 ff2f 	bl	810c1ba <SDMMC_GetResponse>
 810935c:	4603      	mov	r3, r0
 810935e:	0d1a      	lsrs	r2, r3, #20
 8109360:	687b      	ldr	r3, [r7, #4]
 8109362:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8109364:	f107 030c 	add.w	r3, r7, #12
 8109368:	4619      	mov	r1, r3
 810936a:	6878      	ldr	r0, [r7, #4]
 810936c:	f7ff fbb8 	bl	8108ae0 <HAL_SD_GetCardCSD>
 8109370:	4603      	mov	r3, r0
 8109372:	2b00      	cmp	r3, #0
 8109374:	d002      	beq.n	810937c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109376:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810937a:	e00f      	b.n	810939c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 810937c:	687b      	ldr	r3, [r7, #4]
 810937e:	681a      	ldr	r2, [r3, #0]
 8109380:	687b      	ldr	r3, [r7, #4]
 8109382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109384:	041b      	lsls	r3, r3, #16
 8109386:	4619      	mov	r1, r3
 8109388:	4610      	mov	r0, r2
 810938a:	f002 ff78 	bl	810c27e <SDMMC_CmdSelDesel>
 810938e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8109390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109392:	2b00      	cmp	r3, #0
 8109394:	d001      	beq.n	810939a <SD_InitCard+0x192>
  {
    return errorstate;
 8109396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109398:	e000      	b.n	810939c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 810939a:	2300      	movs	r3, #0
}
 810939c:	4618      	mov	r0, r3
 810939e:	3740      	adds	r7, #64	@ 0x40
 81093a0:	46bd      	mov	sp, r7
 81093a2:	bd80      	pop	{r7, pc}

081093a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 81093a4:	b580      	push	{r7, lr}
 81093a6:	b086      	sub	sp, #24
 81093a8:	af00      	add	r7, sp, #0
 81093aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81093ac:	2300      	movs	r3, #0
 81093ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 81093b0:	2300      	movs	r3, #0
 81093b2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 81093b4:	2300      	movs	r3, #0
 81093b6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	681b      	ldr	r3, [r3, #0]
 81093bc:	4618      	mov	r0, r3
 81093be:	f002 ff81 	bl	810c2c4 <SDMMC_CmdGoIdleState>
 81093c2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 81093c4:	68fb      	ldr	r3, [r7, #12]
 81093c6:	2b00      	cmp	r3, #0
 81093c8:	d001      	beq.n	81093ce <SD_PowerON+0x2a>
  {
    return errorstate;
 81093ca:	68fb      	ldr	r3, [r7, #12]
 81093cc:	e072      	b.n	81094b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 81093ce:	687b      	ldr	r3, [r7, #4]
 81093d0:	681b      	ldr	r3, [r3, #0]
 81093d2:	4618      	mov	r0, r3
 81093d4:	f002 ff94 	bl	810c300 <SDMMC_CmdOperCond>
 81093d8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 81093da:	68fb      	ldr	r3, [r7, #12]
 81093dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81093e0:	d10d      	bne.n	81093fe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 81093e2:	687b      	ldr	r3, [r7, #4]
 81093e4:	2200      	movs	r2, #0
 81093e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 81093e8:	687b      	ldr	r3, [r7, #4]
 81093ea:	681b      	ldr	r3, [r3, #0]
 81093ec:	4618      	mov	r0, r3
 81093ee:	f002 ff69 	bl	810c2c4 <SDMMC_CmdGoIdleState>
 81093f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 81093f4:	68fb      	ldr	r3, [r7, #12]
 81093f6:	2b00      	cmp	r3, #0
 81093f8:	d004      	beq.n	8109404 <SD_PowerON+0x60>
    {
      return errorstate;
 81093fa:	68fb      	ldr	r3, [r7, #12]
 81093fc:	e05a      	b.n	81094b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 81093fe:	687b      	ldr	r3, [r7, #4]
 8109400:	2201      	movs	r2, #1
 8109402:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8109404:	687b      	ldr	r3, [r7, #4]
 8109406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109408:	2b01      	cmp	r3, #1
 810940a:	d137      	bne.n	810947c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810940c:	687b      	ldr	r3, [r7, #4]
 810940e:	681b      	ldr	r3, [r3, #0]
 8109410:	2100      	movs	r1, #0
 8109412:	4618      	mov	r0, r3
 8109414:	f002 ff94 	bl	810c340 <SDMMC_CmdAppCommand>
 8109418:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810941a:	68fb      	ldr	r3, [r7, #12]
 810941c:	2b00      	cmp	r3, #0
 810941e:	d02d      	beq.n	810947c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109420:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8109424:	e046      	b.n	81094b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8109426:	687b      	ldr	r3, [r7, #4]
 8109428:	681b      	ldr	r3, [r3, #0]
 810942a:	2100      	movs	r1, #0
 810942c:	4618      	mov	r0, r3
 810942e:	f002 ff87 	bl	810c340 <SDMMC_CmdAppCommand>
 8109432:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109434:	68fb      	ldr	r3, [r7, #12]
 8109436:	2b00      	cmp	r3, #0
 8109438:	d001      	beq.n	810943e <SD_PowerON+0x9a>
    {
      return errorstate;
 810943a:	68fb      	ldr	r3, [r7, #12]
 810943c:	e03a      	b.n	81094b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 810943e:	687b      	ldr	r3, [r7, #4]
 8109440:	681b      	ldr	r3, [r3, #0]
 8109442:	491e      	ldr	r1, [pc, #120]	@ (81094bc <SD_PowerON+0x118>)
 8109444:	4618      	mov	r0, r3
 8109446:	f002 ff9e 	bl	810c386 <SDMMC_CmdAppOperCommand>
 810944a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 810944c:	68fb      	ldr	r3, [r7, #12]
 810944e:	2b00      	cmp	r3, #0
 8109450:	d002      	beq.n	8109458 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109452:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8109456:	e02d      	b.n	81094b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	681b      	ldr	r3, [r3, #0]
 810945c:	2100      	movs	r1, #0
 810945e:	4618      	mov	r0, r3
 8109460:	f002 feab 	bl	810c1ba <SDMMC_GetResponse>
 8109464:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8109466:	697b      	ldr	r3, [r7, #20]
 8109468:	0fdb      	lsrs	r3, r3, #31
 810946a:	2b01      	cmp	r3, #1
 810946c:	d101      	bne.n	8109472 <SD_PowerON+0xce>
 810946e:	2301      	movs	r3, #1
 8109470:	e000      	b.n	8109474 <SD_PowerON+0xd0>
 8109472:	2300      	movs	r3, #0
 8109474:	613b      	str	r3, [r7, #16]

    count++;
 8109476:	68bb      	ldr	r3, [r7, #8]
 8109478:	3301      	adds	r3, #1
 810947a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 810947c:	68bb      	ldr	r3, [r7, #8]
 810947e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8109482:	4293      	cmp	r3, r2
 8109484:	d802      	bhi.n	810948c <SD_PowerON+0xe8>
 8109486:	693b      	ldr	r3, [r7, #16]
 8109488:	2b00      	cmp	r3, #0
 810948a:	d0cc      	beq.n	8109426 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 810948c:	68bb      	ldr	r3, [r7, #8]
 810948e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8109492:	4293      	cmp	r3, r2
 8109494:	d902      	bls.n	810949c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8109496:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810949a:	e00b      	b.n	81094b4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 810949c:	687b      	ldr	r3, [r7, #4]
 810949e:	2200      	movs	r2, #0
 81094a0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 81094a2:	697b      	ldr	r3, [r7, #20]
 81094a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81094a8:	2b00      	cmp	r3, #0
 81094aa:	d002      	beq.n	81094b2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 81094ac:	687b      	ldr	r3, [r7, #4]
 81094ae:	2201      	movs	r2, #1
 81094b0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 81094b2:	2300      	movs	r3, #0
}
 81094b4:	4618      	mov	r0, r3
 81094b6:	3718      	adds	r7, #24
 81094b8:	46bd      	mov	sp, r7
 81094ba:	bd80      	pop	{r7, pc}
 81094bc:	c1100000 	.word	0xc1100000

081094c0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 81094c0:	b580      	push	{r7, lr}
 81094c2:	b08c      	sub	sp, #48	@ 0x30
 81094c4:	af00      	add	r7, sp, #0
 81094c6:	6078      	str	r0, [r7, #4]
 81094c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 81094ca:	f7f9 fa09 	bl	81028e0 <HAL_GetTick>
 81094ce:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 81094d0:	683b      	ldr	r3, [r7, #0]
 81094d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 81094d4:	687b      	ldr	r3, [r7, #4]
 81094d6:	681b      	ldr	r3, [r3, #0]
 81094d8:	2100      	movs	r1, #0
 81094da:	4618      	mov	r0, r3
 81094dc:	f002 fe6d 	bl	810c1ba <SDMMC_GetResponse>
 81094e0:	4603      	mov	r3, r0
 81094e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81094e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81094ea:	d102      	bne.n	81094f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 81094ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81094f0:	e0b0      	b.n	8109654 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 81094f2:	687b      	ldr	r3, [r7, #4]
 81094f4:	681b      	ldr	r3, [r3, #0]
 81094f6:	2140      	movs	r1, #64	@ 0x40
 81094f8:	4618      	mov	r0, r3
 81094fa:	f002 fe9d 	bl	810c238 <SDMMC_CmdBlockLength>
 81094fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109500:	6a3b      	ldr	r3, [r7, #32]
 8109502:	2b00      	cmp	r3, #0
 8109504:	d005      	beq.n	8109512 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109506:	687b      	ldr	r3, [r7, #4]
 8109508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810950a:	687b      	ldr	r3, [r7, #4]
 810950c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 810950e:	6a3b      	ldr	r3, [r7, #32]
 8109510:	e0a0      	b.n	8109654 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109512:	687b      	ldr	r3, [r7, #4]
 8109514:	681a      	ldr	r2, [r3, #0]
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810951a:	041b      	lsls	r3, r3, #16
 810951c:	4619      	mov	r1, r3
 810951e:	4610      	mov	r0, r2
 8109520:	f002 ff0e 	bl	810c340 <SDMMC_CmdAppCommand>
 8109524:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109526:	6a3b      	ldr	r3, [r7, #32]
 8109528:	2b00      	cmp	r3, #0
 810952a:	d005      	beq.n	8109538 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810952c:	687b      	ldr	r3, [r7, #4]
 810952e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109530:	687b      	ldr	r3, [r7, #4]
 8109532:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8109534:	6a3b      	ldr	r3, [r7, #32]
 8109536:	e08d      	b.n	8109654 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8109538:	f04f 33ff 	mov.w	r3, #4294967295
 810953c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 810953e:	2340      	movs	r3, #64	@ 0x40
 8109540:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8109542:	2360      	movs	r3, #96	@ 0x60
 8109544:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8109546:	2302      	movs	r3, #2
 8109548:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810954a:	2300      	movs	r3, #0
 810954c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810954e:	2301      	movs	r3, #1
 8109550:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	681b      	ldr	r3, [r3, #0]
 8109556:	f107 0208 	add.w	r2, r7, #8
 810955a:	4611      	mov	r1, r2
 810955c:	4618      	mov	r0, r3
 810955e:	f002 fe3f 	bl	810c1e0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	681b      	ldr	r3, [r3, #0]
 8109566:	4618      	mov	r0, r3
 8109568:	f002 fff6 	bl	810c558 <SDMMC_CmdStatusRegister>
 810956c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810956e:	6a3b      	ldr	r3, [r7, #32]
 8109570:	2b00      	cmp	r3, #0
 8109572:	d02b      	beq.n	81095cc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109574:	687b      	ldr	r3, [r7, #4]
 8109576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109578:	687b      	ldr	r3, [r7, #4]
 810957a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 810957c:	6a3b      	ldr	r3, [r7, #32]
 810957e:	e069      	b.n	8109654 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8109580:	687b      	ldr	r3, [r7, #4]
 8109582:	681b      	ldr	r3, [r3, #0]
 8109584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109586:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810958a:	2b00      	cmp	r3, #0
 810958c:	d013      	beq.n	81095b6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810958e:	2300      	movs	r3, #0
 8109590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8109592:	e00d      	b.n	81095b0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8109594:	687b      	ldr	r3, [r7, #4]
 8109596:	681b      	ldr	r3, [r3, #0]
 8109598:	4618      	mov	r0, r3
 810959a:	f002 fdab 	bl	810c0f4 <SDMMC_ReadFIFO>
 810959e:	4602      	mov	r2, r0
 81095a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81095a2:	601a      	str	r2, [r3, #0]
        pData++;
 81095a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81095a6:	3304      	adds	r3, #4
 81095a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 81095aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81095ac:	3301      	adds	r3, #1
 81095ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81095b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81095b2:	2b07      	cmp	r3, #7
 81095b4:	d9ee      	bls.n	8109594 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 81095b6:	f7f9 f993 	bl	81028e0 <HAL_GetTick>
 81095ba:	4602      	mov	r2, r0
 81095bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81095be:	1ad3      	subs	r3, r2, r3
 81095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81095c4:	d102      	bne.n	81095cc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 81095c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81095ca:	e043      	b.n	8109654 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	681b      	ldr	r3, [r3, #0]
 81095d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81095d2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 81095d6:	2b00      	cmp	r3, #0
 81095d8:	d0d2      	beq.n	8109580 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	681b      	ldr	r3, [r3, #0]
 81095de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81095e0:	f003 0308 	and.w	r3, r3, #8
 81095e4:	2b00      	cmp	r3, #0
 81095e6:	d001      	beq.n	81095ec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 81095e8:	2308      	movs	r3, #8
 81095ea:	e033      	b.n	8109654 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 81095ec:	687b      	ldr	r3, [r7, #4]
 81095ee:	681b      	ldr	r3, [r3, #0]
 81095f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81095f2:	f003 0302 	and.w	r3, r3, #2
 81095f6:	2b00      	cmp	r3, #0
 81095f8:	d001      	beq.n	81095fe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81095fa:	2302      	movs	r3, #2
 81095fc:	e02a      	b.n	8109654 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 81095fe:	687b      	ldr	r3, [r7, #4]
 8109600:	681b      	ldr	r3, [r3, #0]
 8109602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109604:	f003 0320 	and.w	r3, r3, #32
 8109608:	2b00      	cmp	r3, #0
 810960a:	d017      	beq.n	810963c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 810960c:	2320      	movs	r3, #32
 810960e:	e021      	b.n	8109654 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8109610:	687b      	ldr	r3, [r7, #4]
 8109612:	681b      	ldr	r3, [r3, #0]
 8109614:	4618      	mov	r0, r3
 8109616:	f002 fd6d 	bl	810c0f4 <SDMMC_ReadFIFO>
 810961a:	4602      	mov	r2, r0
 810961c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810961e:	601a      	str	r2, [r3, #0]
    pData++;
 8109620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109622:	3304      	adds	r3, #4
 8109624:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8109626:	f7f9 f95b 	bl	81028e0 <HAL_GetTick>
 810962a:	4602      	mov	r2, r0
 810962c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810962e:	1ad3      	subs	r3, r2, r3
 8109630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109634:	d102      	bne.n	810963c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109636:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810963a:	e00b      	b.n	8109654 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 810963c:	687b      	ldr	r3, [r7, #4]
 810963e:	681b      	ldr	r3, [r3, #0]
 8109640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8109646:	2b00      	cmp	r3, #0
 8109648:	d1e2      	bne.n	8109610 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810964a:	687b      	ldr	r3, [r7, #4]
 810964c:	681b      	ldr	r3, [r3, #0]
 810964e:	4a03      	ldr	r2, [pc, #12]	@ (810965c <SD_SendSDStatus+0x19c>)
 8109650:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8109652:	2300      	movs	r3, #0
}
 8109654:	4618      	mov	r0, r3
 8109656:	3730      	adds	r7, #48	@ 0x30
 8109658:	46bd      	mov	sp, r7
 810965a:	bd80      	pop	{r7, pc}
 810965c:	18000f3a 	.word	0x18000f3a

08109660 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8109660:	b580      	push	{r7, lr}
 8109662:	b084      	sub	sp, #16
 8109664:	af00      	add	r7, sp, #0
 8109666:	6078      	str	r0, [r7, #4]
 8109668:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 810966a:	683b      	ldr	r3, [r7, #0]
 810966c:	2b00      	cmp	r3, #0
 810966e:	d102      	bne.n	8109676 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8109670:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8109674:	e018      	b.n	81096a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109676:	687b      	ldr	r3, [r7, #4]
 8109678:	681a      	ldr	r2, [r3, #0]
 810967a:	687b      	ldr	r3, [r7, #4]
 810967c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810967e:	041b      	lsls	r3, r3, #16
 8109680:	4619      	mov	r1, r3
 8109682:	4610      	mov	r0, r2
 8109684:	f002 ff45 	bl	810c512 <SDMMC_CmdSendStatus>
 8109688:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810968a:	68fb      	ldr	r3, [r7, #12]
 810968c:	2b00      	cmp	r3, #0
 810968e:	d001      	beq.n	8109694 <SD_SendStatus+0x34>
  {
    return errorstate;
 8109690:	68fb      	ldr	r3, [r7, #12]
 8109692:	e009      	b.n	81096a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109694:	687b      	ldr	r3, [r7, #4]
 8109696:	681b      	ldr	r3, [r3, #0]
 8109698:	2100      	movs	r1, #0
 810969a:	4618      	mov	r0, r3
 810969c:	f002 fd8d 	bl	810c1ba <SDMMC_GetResponse>
 81096a0:	4602      	mov	r2, r0
 81096a2:	683b      	ldr	r3, [r7, #0]
 81096a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 81096a6:	2300      	movs	r3, #0
}
 81096a8:	4618      	mov	r0, r3
 81096aa:	3710      	adds	r7, #16
 81096ac:	46bd      	mov	sp, r7
 81096ae:	bd80      	pop	{r7, pc}

081096b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 81096b0:	b580      	push	{r7, lr}
 81096b2:	b086      	sub	sp, #24
 81096b4:	af00      	add	r7, sp, #0
 81096b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 81096b8:	2300      	movs	r3, #0
 81096ba:	60fb      	str	r3, [r7, #12]
 81096bc:	2300      	movs	r3, #0
 81096be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 81096c0:	687b      	ldr	r3, [r7, #4]
 81096c2:	681b      	ldr	r3, [r3, #0]
 81096c4:	2100      	movs	r1, #0
 81096c6:	4618      	mov	r0, r3
 81096c8:	f002 fd77 	bl	810c1ba <SDMMC_GetResponse>
 81096cc:	4603      	mov	r3, r0
 81096ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81096d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81096d6:	d102      	bne.n	81096de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 81096d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81096dc:	e02f      	b.n	810973e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 81096de:	f107 030c 	add.w	r3, r7, #12
 81096e2:	4619      	mov	r1, r3
 81096e4:	6878      	ldr	r0, [r7, #4]
 81096e6:	f000 f879 	bl	81097dc <SD_FindSCR>
 81096ea:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 81096ec:	697b      	ldr	r3, [r7, #20]
 81096ee:	2b00      	cmp	r3, #0
 81096f0:	d001      	beq.n	81096f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 81096f2:	697b      	ldr	r3, [r7, #20]
 81096f4:	e023      	b.n	810973e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 81096f6:	693b      	ldr	r3, [r7, #16]
 81096f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81096fc:	2b00      	cmp	r3, #0
 81096fe:	d01c      	beq.n	810973a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109700:	687b      	ldr	r3, [r7, #4]
 8109702:	681a      	ldr	r2, [r3, #0]
 8109704:	687b      	ldr	r3, [r7, #4]
 8109706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109708:	041b      	lsls	r3, r3, #16
 810970a:	4619      	mov	r1, r3
 810970c:	4610      	mov	r0, r2
 810970e:	f002 fe17 	bl	810c340 <SDMMC_CmdAppCommand>
 8109712:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109714:	697b      	ldr	r3, [r7, #20]
 8109716:	2b00      	cmp	r3, #0
 8109718:	d001      	beq.n	810971e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 810971a:	697b      	ldr	r3, [r7, #20]
 810971c:	e00f      	b.n	810973e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 810971e:	687b      	ldr	r3, [r7, #4]
 8109720:	681b      	ldr	r3, [r3, #0]
 8109722:	2102      	movs	r1, #2
 8109724:	4618      	mov	r0, r3
 8109726:	f002 fe4e 	bl	810c3c6 <SDMMC_CmdBusWidth>
 810972a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810972c:	697b      	ldr	r3, [r7, #20]
 810972e:	2b00      	cmp	r3, #0
 8109730:	d001      	beq.n	8109736 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8109732:	697b      	ldr	r3, [r7, #20]
 8109734:	e003      	b.n	810973e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8109736:	2300      	movs	r3, #0
 8109738:	e001      	b.n	810973e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810973a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 810973e:	4618      	mov	r0, r3
 8109740:	3718      	adds	r7, #24
 8109742:	46bd      	mov	sp, r7
 8109744:	bd80      	pop	{r7, pc}

08109746 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8109746:	b580      	push	{r7, lr}
 8109748:	b086      	sub	sp, #24
 810974a:	af00      	add	r7, sp, #0
 810974c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810974e:	2300      	movs	r3, #0
 8109750:	60fb      	str	r3, [r7, #12]
 8109752:	2300      	movs	r3, #0
 8109754:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109756:	687b      	ldr	r3, [r7, #4]
 8109758:	681b      	ldr	r3, [r3, #0]
 810975a:	2100      	movs	r1, #0
 810975c:	4618      	mov	r0, r3
 810975e:	f002 fd2c 	bl	810c1ba <SDMMC_GetResponse>
 8109762:	4603      	mov	r3, r0
 8109764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810976c:	d102      	bne.n	8109774 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810976e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8109772:	e02f      	b.n	81097d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8109774:	f107 030c 	add.w	r3, r7, #12
 8109778:	4619      	mov	r1, r3
 810977a:	6878      	ldr	r0, [r7, #4]
 810977c:	f000 f82e 	bl	81097dc <SD_FindSCR>
 8109780:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109782:	697b      	ldr	r3, [r7, #20]
 8109784:	2b00      	cmp	r3, #0
 8109786:	d001      	beq.n	810978c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8109788:	697b      	ldr	r3, [r7, #20]
 810978a:	e023      	b.n	81097d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810978c:	693b      	ldr	r3, [r7, #16]
 810978e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109792:	2b00      	cmp	r3, #0
 8109794:	d01c      	beq.n	81097d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109796:	687b      	ldr	r3, [r7, #4]
 8109798:	681a      	ldr	r2, [r3, #0]
 810979a:	687b      	ldr	r3, [r7, #4]
 810979c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810979e:	041b      	lsls	r3, r3, #16
 81097a0:	4619      	mov	r1, r3
 81097a2:	4610      	mov	r0, r2
 81097a4:	f002 fdcc 	bl	810c340 <SDMMC_CmdAppCommand>
 81097a8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81097aa:	697b      	ldr	r3, [r7, #20]
 81097ac:	2b00      	cmp	r3, #0
 81097ae:	d001      	beq.n	81097b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 81097b0:	697b      	ldr	r3, [r7, #20]
 81097b2:	e00f      	b.n	81097d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 81097b4:	687b      	ldr	r3, [r7, #4]
 81097b6:	681b      	ldr	r3, [r3, #0]
 81097b8:	2100      	movs	r1, #0
 81097ba:	4618      	mov	r0, r3
 81097bc:	f002 fe03 	bl	810c3c6 <SDMMC_CmdBusWidth>
 81097c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81097c2:	697b      	ldr	r3, [r7, #20]
 81097c4:	2b00      	cmp	r3, #0
 81097c6:	d001      	beq.n	81097cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 81097c8:	697b      	ldr	r3, [r7, #20]
 81097ca:	e003      	b.n	81097d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 81097cc:	2300      	movs	r3, #0
 81097ce:	e001      	b.n	81097d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 81097d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 81097d4:	4618      	mov	r0, r3
 81097d6:	3718      	adds	r7, #24
 81097d8:	46bd      	mov	sp, r7
 81097da:	bd80      	pop	{r7, pc}

081097dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 81097dc:	b580      	push	{r7, lr}
 81097de:	b08e      	sub	sp, #56	@ 0x38
 81097e0:	af00      	add	r7, sp, #0
 81097e2:	6078      	str	r0, [r7, #4]
 81097e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 81097e6:	f7f9 f87b 	bl	81028e0 <HAL_GetTick>
 81097ea:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 81097ec:	2300      	movs	r3, #0
 81097ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 81097f0:	2300      	movs	r3, #0
 81097f2:	60bb      	str	r3, [r7, #8]
 81097f4:	2300      	movs	r3, #0
 81097f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 81097f8:	683b      	ldr	r3, [r7, #0]
 81097fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 81097fc:	687b      	ldr	r3, [r7, #4]
 81097fe:	681b      	ldr	r3, [r3, #0]
 8109800:	2108      	movs	r1, #8
 8109802:	4618      	mov	r0, r3
 8109804:	f002 fd18 	bl	810c238 <SDMMC_CmdBlockLength>
 8109808:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810980a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810980c:	2b00      	cmp	r3, #0
 810980e:	d001      	beq.n	8109814 <SD_FindSCR+0x38>
  {
    return errorstate;
 8109810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109812:	e0ad      	b.n	8109970 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8109814:	687b      	ldr	r3, [r7, #4]
 8109816:	681a      	ldr	r2, [r3, #0]
 8109818:	687b      	ldr	r3, [r7, #4]
 810981a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810981c:	041b      	lsls	r3, r3, #16
 810981e:	4619      	mov	r1, r3
 8109820:	4610      	mov	r0, r2
 8109822:	f002 fd8d 	bl	810c340 <SDMMC_CmdAppCommand>
 8109826:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810982a:	2b00      	cmp	r3, #0
 810982c:	d001      	beq.n	8109832 <SD_FindSCR+0x56>
  {
    return errorstate;
 810982e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109830:	e09e      	b.n	8109970 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8109832:	f04f 33ff 	mov.w	r3, #4294967295
 8109836:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8109838:	2308      	movs	r3, #8
 810983a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 810983c:	2330      	movs	r3, #48	@ 0x30
 810983e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8109840:	2302      	movs	r3, #2
 8109842:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8109844:	2300      	movs	r3, #0
 8109846:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8109848:	2301      	movs	r3, #1
 810984a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810984c:	687b      	ldr	r3, [r7, #4]
 810984e:	681b      	ldr	r3, [r3, #0]
 8109850:	f107 0210 	add.w	r2, r7, #16
 8109854:	4611      	mov	r1, r2
 8109856:	4618      	mov	r0, r3
 8109858:	f002 fcc2 	bl	810c1e0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 810985c:	687b      	ldr	r3, [r7, #4]
 810985e:	681b      	ldr	r3, [r3, #0]
 8109860:	4618      	mov	r0, r3
 8109862:	f002 fdd3 	bl	810c40c <SDMMC_CmdSendSCR>
 8109866:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810986a:	2b00      	cmp	r3, #0
 810986c:	d027      	beq.n	81098be <SD_FindSCR+0xe2>
  {
    return errorstate;
 810986e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109870:	e07e      	b.n	8109970 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8109872:	687b      	ldr	r3, [r7, #4]
 8109874:	681b      	ldr	r3, [r3, #0]
 8109876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810987c:	2b00      	cmp	r3, #0
 810987e:	d113      	bne.n	81098a8 <SD_FindSCR+0xcc>
 8109880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109882:	2b00      	cmp	r3, #0
 8109884:	d110      	bne.n	81098a8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8109886:	687b      	ldr	r3, [r7, #4]
 8109888:	681b      	ldr	r3, [r3, #0]
 810988a:	4618      	mov	r0, r3
 810988c:	f002 fc32 	bl	810c0f4 <SDMMC_ReadFIFO>
 8109890:	4603      	mov	r3, r0
 8109892:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8109894:	687b      	ldr	r3, [r7, #4]
 8109896:	681b      	ldr	r3, [r3, #0]
 8109898:	4618      	mov	r0, r3
 810989a:	f002 fc2b 	bl	810c0f4 <SDMMC_ReadFIFO>
 810989e:	4603      	mov	r3, r0
 81098a0:	60fb      	str	r3, [r7, #12]
      index++;
 81098a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81098a4:	3301      	adds	r3, #1
 81098a6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 81098a8:	f7f9 f81a 	bl	81028e0 <HAL_GetTick>
 81098ac:	4602      	mov	r2, r0
 81098ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81098b0:	1ad3      	subs	r3, r2, r3
 81098b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81098b6:	d102      	bne.n	81098be <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 81098b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81098bc:	e058      	b.n	8109970 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 81098be:	687b      	ldr	r3, [r7, #4]
 81098c0:	681b      	ldr	r3, [r3, #0]
 81098c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81098c4:	f240 532a 	movw	r3, #1322	@ 0x52a
 81098c8:	4013      	ands	r3, r2
 81098ca:	2b00      	cmp	r3, #0
 81098cc:	d0d1      	beq.n	8109872 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 81098ce:	687b      	ldr	r3, [r7, #4]
 81098d0:	681b      	ldr	r3, [r3, #0]
 81098d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81098d4:	f003 0308 	and.w	r3, r3, #8
 81098d8:	2b00      	cmp	r3, #0
 81098da:	d005      	beq.n	81098e8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 81098dc:	687b      	ldr	r3, [r7, #4]
 81098de:	681b      	ldr	r3, [r3, #0]
 81098e0:	2208      	movs	r2, #8
 81098e2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 81098e4:	2308      	movs	r3, #8
 81098e6:	e043      	b.n	8109970 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 81098e8:	687b      	ldr	r3, [r7, #4]
 81098ea:	681b      	ldr	r3, [r3, #0]
 81098ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81098ee:	f003 0302 	and.w	r3, r3, #2
 81098f2:	2b00      	cmp	r3, #0
 81098f4:	d005      	beq.n	8109902 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 81098f6:	687b      	ldr	r3, [r7, #4]
 81098f8:	681b      	ldr	r3, [r3, #0]
 81098fa:	2202      	movs	r2, #2
 81098fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81098fe:	2302      	movs	r3, #2
 8109900:	e036      	b.n	8109970 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8109902:	687b      	ldr	r3, [r7, #4]
 8109904:	681b      	ldr	r3, [r3, #0]
 8109906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109908:	f003 0320 	and.w	r3, r3, #32
 810990c:	2b00      	cmp	r3, #0
 810990e:	d005      	beq.n	810991c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8109910:	687b      	ldr	r3, [r7, #4]
 8109912:	681b      	ldr	r3, [r3, #0]
 8109914:	2220      	movs	r2, #32
 8109916:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8109918:	2320      	movs	r3, #32
 810991a:	e029      	b.n	8109970 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810991c:	687b      	ldr	r3, [r7, #4]
 810991e:	681b      	ldr	r3, [r3, #0]
 8109920:	4a15      	ldr	r2, [pc, #84]	@ (8109978 <SD_FindSCR+0x19c>)
 8109922:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8109924:	68fb      	ldr	r3, [r7, #12]
 8109926:	061a      	lsls	r2, r3, #24
 8109928:	68fb      	ldr	r3, [r7, #12]
 810992a:	021b      	lsls	r3, r3, #8
 810992c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8109930:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8109932:	68fb      	ldr	r3, [r7, #12]
 8109934:	0a1b      	lsrs	r3, r3, #8
 8109936:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 810993a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 810993c:	68fb      	ldr	r3, [r7, #12]
 810993e:	0e1b      	lsrs	r3, r3, #24
 8109940:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8109942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109944:	601a      	str	r2, [r3, #0]
    scr++;
 8109946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109948:	3304      	adds	r3, #4
 810994a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 810994c:	68bb      	ldr	r3, [r7, #8]
 810994e:	061a      	lsls	r2, r3, #24
 8109950:	68bb      	ldr	r3, [r7, #8]
 8109952:	021b      	lsls	r3, r3, #8
 8109954:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8109958:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 810995a:	68bb      	ldr	r3, [r7, #8]
 810995c:	0a1b      	lsrs	r3, r3, #8
 810995e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8109962:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8109964:	68bb      	ldr	r3, [r7, #8]
 8109966:	0e1b      	lsrs	r3, r3, #24
 8109968:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 810996a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810996c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810996e:	2300      	movs	r3, #0
}
 8109970:	4618      	mov	r0, r3
 8109972:	3738      	adds	r7, #56	@ 0x38
 8109974:	46bd      	mov	sp, r7
 8109976:	bd80      	pop	{r7, pc}
 8109978:	18000f3a 	.word	0x18000f3a

0810997c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 810997c:	b580      	push	{r7, lr}
 810997e:	b082      	sub	sp, #8
 8109980:	af00      	add	r7, sp, #0
 8109982:	6078      	str	r0, [r7, #4]
 8109984:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8109986:	687b      	ldr	r3, [r7, #4]
 8109988:	2b00      	cmp	r3, #0
 810998a:	d101      	bne.n	8109990 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 810998c:	2301      	movs	r3, #1
 810998e:	e02b      	b.n	81099e8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8109990:	687b      	ldr	r3, [r7, #4]
 8109992:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8109996:	b2db      	uxtb	r3, r3
 8109998:	2b00      	cmp	r3, #0
 810999a:	d106      	bne.n	81099aa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 810999c:	687b      	ldr	r3, [r7, #4]
 810999e:	2200      	movs	r2, #0
 81099a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 81099a4:	6878      	ldr	r0, [r7, #4]
 81099a6:	f7f8 fd99 	bl	81024dc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 81099aa:	687b      	ldr	r3, [r7, #4]
 81099ac:	2202      	movs	r2, #2
 81099ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 81099b2:	687b      	ldr	r3, [r7, #4]
 81099b4:	681a      	ldr	r2, [r3, #0]
 81099b6:	687b      	ldr	r3, [r7, #4]
 81099b8:	3304      	adds	r3, #4
 81099ba:	4619      	mov	r1, r3
 81099bc:	4610      	mov	r0, r2
 81099be:	f002 faa9 	bl	810bf14 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 81099c2:	687b      	ldr	r3, [r7, #4]
 81099c4:	6818      	ldr	r0, [r3, #0]
 81099c6:	687b      	ldr	r3, [r7, #4]
 81099c8:	685b      	ldr	r3, [r3, #4]
 81099ca:	461a      	mov	r2, r3
 81099cc:	6839      	ldr	r1, [r7, #0]
 81099ce:	f002 fafe 	bl	810bfce <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 81099d2:	4b07      	ldr	r3, [pc, #28]	@ (81099f0 <HAL_SDRAM_Init+0x74>)
 81099d4:	681b      	ldr	r3, [r3, #0]
 81099d6:	4a06      	ldr	r2, [pc, #24]	@ (81099f0 <HAL_SDRAM_Init+0x74>)
 81099d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81099dc:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 81099de:	687b      	ldr	r3, [r7, #4]
 81099e0:	2201      	movs	r2, #1
 81099e2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 81099e6:	2300      	movs	r3, #0
}
 81099e8:	4618      	mov	r0, r3
 81099ea:	3708      	adds	r7, #8
 81099ec:	46bd      	mov	sp, r7
 81099ee:	bd80      	pop	{r7, pc}
 81099f0:	52004000 	.word	0x52004000

081099f4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 81099f4:	b580      	push	{r7, lr}
 81099f6:	b084      	sub	sp, #16
 81099f8:	af00      	add	r7, sp, #0
 81099fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 81099fc:	687b      	ldr	r3, [r7, #4]
 81099fe:	2b00      	cmp	r3, #0
 8109a00:	d101      	bne.n	8109a06 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8109a02:	2301      	movs	r3, #1
 8109a04:	e05e      	b.n	8109ac4 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8109a06:	687b      	ldr	r3, [r7, #4]
 8109a08:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8109a0c:	b2db      	uxtb	r3, r3
 8109a0e:	2b00      	cmp	r3, #0
 8109a10:	d106      	bne.n	8109a20 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8109a12:	687b      	ldr	r3, [r7, #4]
 8109a14:	2200      	movs	r2, #0
 8109a16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8109a1a:	6878      	ldr	r0, [r7, #4]
 8109a1c:	f7f8 f878 	bl	8101b10 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8109a20:	687b      	ldr	r3, [r7, #4]
 8109a22:	2202      	movs	r2, #2
 8109a24:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8109a28:	687b      	ldr	r3, [r7, #4]
 8109a2a:	681b      	ldr	r3, [r3, #0]
 8109a2c:	681a      	ldr	r2, [r3, #0]
 8109a2e:	687b      	ldr	r3, [r7, #4]
 8109a30:	681b      	ldr	r3, [r3, #0]
 8109a32:	f022 0203 	bic.w	r2, r2, #3
 8109a36:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8109a38:	687b      	ldr	r3, [r7, #4]
 8109a3a:	681b      	ldr	r3, [r3, #0]
 8109a3c:	681b      	ldr	r3, [r3, #0]
 8109a3e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8109a40:	68fa      	ldr	r2, [r7, #12]
 8109a42:	4b22      	ldr	r3, [pc, #136]	@ (8109acc <HAL_SPDIFRX_Init+0xd8>)
 8109a44:	4013      	ands	r3, r2
 8109a46:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8109a48:	687b      	ldr	r3, [r7, #4]
 8109a4a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8109a4c:	687b      	ldr	r3, [r7, #4]
 8109a4e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8109a50:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8109a52:	687b      	ldr	r3, [r7, #4]
 8109a54:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8109a56:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8109a58:	687b      	ldr	r3, [r7, #4]
 8109a5a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8109a5c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8109a5e:	687b      	ldr	r3, [r7, #4]
 8109a60:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8109a62:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8109a64:	687b      	ldr	r3, [r7, #4]
 8109a66:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8109a68:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8109a6a:	687b      	ldr	r3, [r7, #4]
 8109a6c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8109a6e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8109a70:	687b      	ldr	r3, [r7, #4]
 8109a72:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8109a74:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8109a76:	687b      	ldr	r3, [r7, #4]
 8109a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8109a7a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8109a7c:	687b      	ldr	r3, [r7, #4]
 8109a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8109a80:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8109a82:	68fa      	ldr	r2, [r7, #12]
 8109a84:	4313      	orrs	r3, r2
 8109a86:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8109a88:	687b      	ldr	r3, [r7, #4]
 8109a8a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8109a8e:	2b01      	cmp	r3, #1
 8109a90:	d103      	bne.n	8109a9a <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8109a92:	68fb      	ldr	r3, [r7, #12]
 8109a94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8109a98:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8109a9a:	687b      	ldr	r3, [r7, #4]
 8109a9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8109aa0:	2b01      	cmp	r3, #1
 8109aa2:	d103      	bne.n	8109aac <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8109aa4:	68fb      	ldr	r3, [r7, #12]
 8109aa6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8109aaa:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8109aac:	687b      	ldr	r3, [r7, #4]
 8109aae:	681b      	ldr	r3, [r3, #0]
 8109ab0:	68fa      	ldr	r2, [r7, #12]
 8109ab2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8109ab4:	687b      	ldr	r3, [r7, #4]
 8109ab6:	2200      	movs	r2, #0
 8109ab8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8109aba:	687b      	ldr	r3, [r7, #4]
 8109abc:	2201      	movs	r2, #1
 8109abe:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8109ac2:	2300      	movs	r3, #0
}
 8109ac4:	4618      	mov	r0, r3
 8109ac6:	3710      	adds	r7, #16
 8109ac8:	46bd      	mov	sp, r7
 8109aca:	bd80      	pop	{r7, pc}
 8109acc:	ffc88407 	.word	0xffc88407

08109ad0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8109ad0:	b580      	push	{r7, lr}
 8109ad2:	b084      	sub	sp, #16
 8109ad4:	af00      	add	r7, sp, #0
 8109ad6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8109ad8:	687b      	ldr	r3, [r7, #4]
 8109ada:	2b00      	cmp	r3, #0
 8109adc:	d101      	bne.n	8109ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8109ade:	2301      	movs	r3, #1
 8109ae0:	e10f      	b.n	8109d02 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8109ae2:	687b      	ldr	r3, [r7, #4]
 8109ae4:	2200      	movs	r2, #0
 8109ae6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8109ae8:	687b      	ldr	r3, [r7, #4]
 8109aea:	681b      	ldr	r3, [r3, #0]
 8109aec:	4a87      	ldr	r2, [pc, #540]	@ (8109d0c <HAL_SPI_Init+0x23c>)
 8109aee:	4293      	cmp	r3, r2
 8109af0:	d00f      	beq.n	8109b12 <HAL_SPI_Init+0x42>
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	681b      	ldr	r3, [r3, #0]
 8109af6:	4a86      	ldr	r2, [pc, #536]	@ (8109d10 <HAL_SPI_Init+0x240>)
 8109af8:	4293      	cmp	r3, r2
 8109afa:	d00a      	beq.n	8109b12 <HAL_SPI_Init+0x42>
 8109afc:	687b      	ldr	r3, [r7, #4]
 8109afe:	681b      	ldr	r3, [r3, #0]
 8109b00:	4a84      	ldr	r2, [pc, #528]	@ (8109d14 <HAL_SPI_Init+0x244>)
 8109b02:	4293      	cmp	r3, r2
 8109b04:	d005      	beq.n	8109b12 <HAL_SPI_Init+0x42>
 8109b06:	687b      	ldr	r3, [r7, #4]
 8109b08:	68db      	ldr	r3, [r3, #12]
 8109b0a:	2b0f      	cmp	r3, #15
 8109b0c:	d901      	bls.n	8109b12 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8109b0e:	2301      	movs	r3, #1
 8109b10:	e0f7      	b.n	8109d02 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8109b12:	6878      	ldr	r0, [r7, #4]
 8109b14:	f000 f900 	bl	8109d18 <SPI_GetPacketSize>
 8109b18:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109b1a:	687b      	ldr	r3, [r7, #4]
 8109b1c:	681b      	ldr	r3, [r3, #0]
 8109b1e:	4a7b      	ldr	r2, [pc, #492]	@ (8109d0c <HAL_SPI_Init+0x23c>)
 8109b20:	4293      	cmp	r3, r2
 8109b22:	d00c      	beq.n	8109b3e <HAL_SPI_Init+0x6e>
 8109b24:	687b      	ldr	r3, [r7, #4]
 8109b26:	681b      	ldr	r3, [r3, #0]
 8109b28:	4a79      	ldr	r2, [pc, #484]	@ (8109d10 <HAL_SPI_Init+0x240>)
 8109b2a:	4293      	cmp	r3, r2
 8109b2c:	d007      	beq.n	8109b3e <HAL_SPI_Init+0x6e>
 8109b2e:	687b      	ldr	r3, [r7, #4]
 8109b30:	681b      	ldr	r3, [r3, #0]
 8109b32:	4a78      	ldr	r2, [pc, #480]	@ (8109d14 <HAL_SPI_Init+0x244>)
 8109b34:	4293      	cmp	r3, r2
 8109b36:	d002      	beq.n	8109b3e <HAL_SPI_Init+0x6e>
 8109b38:	68fb      	ldr	r3, [r7, #12]
 8109b3a:	2b08      	cmp	r3, #8
 8109b3c:	d811      	bhi.n	8109b62 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109b3e:	687b      	ldr	r3, [r7, #4]
 8109b40:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109b42:	4a72      	ldr	r2, [pc, #456]	@ (8109d0c <HAL_SPI_Init+0x23c>)
 8109b44:	4293      	cmp	r3, r2
 8109b46:	d009      	beq.n	8109b5c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109b48:	687b      	ldr	r3, [r7, #4]
 8109b4a:	681b      	ldr	r3, [r3, #0]
 8109b4c:	4a70      	ldr	r2, [pc, #448]	@ (8109d10 <HAL_SPI_Init+0x240>)
 8109b4e:	4293      	cmp	r3, r2
 8109b50:	d004      	beq.n	8109b5c <HAL_SPI_Init+0x8c>
 8109b52:	687b      	ldr	r3, [r7, #4]
 8109b54:	681b      	ldr	r3, [r3, #0]
 8109b56:	4a6f      	ldr	r2, [pc, #444]	@ (8109d14 <HAL_SPI_Init+0x244>)
 8109b58:	4293      	cmp	r3, r2
 8109b5a:	d104      	bne.n	8109b66 <HAL_SPI_Init+0x96>
 8109b5c:	68fb      	ldr	r3, [r7, #12]
 8109b5e:	2b10      	cmp	r3, #16
 8109b60:	d901      	bls.n	8109b66 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8109b62:	2301      	movs	r3, #1
 8109b64:	e0cd      	b.n	8109d02 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8109b66:	687b      	ldr	r3, [r7, #4]
 8109b68:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8109b6c:	b2db      	uxtb	r3, r3
 8109b6e:	2b00      	cmp	r3, #0
 8109b70:	d106      	bne.n	8109b80 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8109b72:	687b      	ldr	r3, [r7, #4]
 8109b74:	2200      	movs	r2, #0
 8109b76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8109b7a:	6878      	ldr	r0, [r7, #4]
 8109b7c:	f7f8 f82e 	bl	8101bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8109b80:	687b      	ldr	r3, [r7, #4]
 8109b82:	2202      	movs	r2, #2
 8109b84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8109b88:	687b      	ldr	r3, [r7, #4]
 8109b8a:	681b      	ldr	r3, [r3, #0]
 8109b8c:	681a      	ldr	r2, [r3, #0]
 8109b8e:	687b      	ldr	r3, [r7, #4]
 8109b90:	681b      	ldr	r3, [r3, #0]
 8109b92:	f022 0201 	bic.w	r2, r2, #1
 8109b96:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8109b98:	687b      	ldr	r3, [r7, #4]
 8109b9a:	681b      	ldr	r3, [r3, #0]
 8109b9c:	689b      	ldr	r3, [r3, #8]
 8109b9e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8109ba2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8109ba4:	687b      	ldr	r3, [r7, #4]
 8109ba6:	699b      	ldr	r3, [r3, #24]
 8109ba8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109bac:	d119      	bne.n	8109be2 <HAL_SPI_Init+0x112>
 8109bae:	687b      	ldr	r3, [r7, #4]
 8109bb0:	685b      	ldr	r3, [r3, #4]
 8109bb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8109bb6:	d103      	bne.n	8109bc0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109bb8:	687b      	ldr	r3, [r7, #4]
 8109bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8109bbc:	2b00      	cmp	r3, #0
 8109bbe:	d008      	beq.n	8109bd2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8109bc0:	687b      	ldr	r3, [r7, #4]
 8109bc2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109bc4:	2b00      	cmp	r3, #0
 8109bc6:	d10c      	bne.n	8109be2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8109bc8:	687b      	ldr	r3, [r7, #4]
 8109bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8109bcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109bd0:	d107      	bne.n	8109be2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8109bd2:	687b      	ldr	r3, [r7, #4]
 8109bd4:	681b      	ldr	r3, [r3, #0]
 8109bd6:	681a      	ldr	r2, [r3, #0]
 8109bd8:	687b      	ldr	r3, [r7, #4]
 8109bda:	681b      	ldr	r3, [r3, #0]
 8109bdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8109be0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8109be2:	687b      	ldr	r3, [r7, #4]
 8109be4:	685b      	ldr	r3, [r3, #4]
 8109be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109bea:	2b00      	cmp	r3, #0
 8109bec:	d00f      	beq.n	8109c0e <HAL_SPI_Init+0x13e>
 8109bee:	687b      	ldr	r3, [r7, #4]
 8109bf0:	68db      	ldr	r3, [r3, #12]
 8109bf2:	2b06      	cmp	r3, #6
 8109bf4:	d90b      	bls.n	8109c0e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8109bf6:	687b      	ldr	r3, [r7, #4]
 8109bf8:	681b      	ldr	r3, [r3, #0]
 8109bfa:	681b      	ldr	r3, [r3, #0]
 8109bfc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8109c00:	687b      	ldr	r3, [r7, #4]
 8109c02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8109c04:	687b      	ldr	r3, [r7, #4]
 8109c06:	681b      	ldr	r3, [r3, #0]
 8109c08:	430a      	orrs	r2, r1
 8109c0a:	601a      	str	r2, [r3, #0]
 8109c0c:	e007      	b.n	8109c1e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8109c0e:	687b      	ldr	r3, [r7, #4]
 8109c10:	681b      	ldr	r3, [r3, #0]
 8109c12:	681a      	ldr	r2, [r3, #0]
 8109c14:	687b      	ldr	r3, [r7, #4]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8109c1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8109c1e:	687b      	ldr	r3, [r7, #4]
 8109c20:	69da      	ldr	r2, [r3, #28]
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109c26:	431a      	orrs	r2, r3
 8109c28:	68bb      	ldr	r3, [r7, #8]
 8109c2a:	431a      	orrs	r2, r3
 8109c2c:	687b      	ldr	r3, [r7, #4]
 8109c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109c30:	ea42 0103 	orr.w	r1, r2, r3
 8109c34:	687b      	ldr	r3, [r7, #4]
 8109c36:	68da      	ldr	r2, [r3, #12]
 8109c38:	687b      	ldr	r3, [r7, #4]
 8109c3a:	681b      	ldr	r3, [r3, #0]
 8109c3c:	430a      	orrs	r2, r1
 8109c3e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8109c40:	687b      	ldr	r3, [r7, #4]
 8109c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109c44:	687b      	ldr	r3, [r7, #4]
 8109c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109c48:	431a      	orrs	r2, r3
 8109c4a:	687b      	ldr	r3, [r7, #4]
 8109c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109c4e:	431a      	orrs	r2, r3
 8109c50:	687b      	ldr	r3, [r7, #4]
 8109c52:	699b      	ldr	r3, [r3, #24]
 8109c54:	431a      	orrs	r2, r3
 8109c56:	687b      	ldr	r3, [r7, #4]
 8109c58:	691b      	ldr	r3, [r3, #16]
 8109c5a:	431a      	orrs	r2, r3
 8109c5c:	687b      	ldr	r3, [r7, #4]
 8109c5e:	695b      	ldr	r3, [r3, #20]
 8109c60:	431a      	orrs	r2, r3
 8109c62:	687b      	ldr	r3, [r7, #4]
 8109c64:	6a1b      	ldr	r3, [r3, #32]
 8109c66:	431a      	orrs	r2, r3
 8109c68:	687b      	ldr	r3, [r7, #4]
 8109c6a:	685b      	ldr	r3, [r3, #4]
 8109c6c:	431a      	orrs	r2, r3
 8109c6e:	687b      	ldr	r3, [r7, #4]
 8109c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109c72:	431a      	orrs	r2, r3
 8109c74:	687b      	ldr	r3, [r7, #4]
 8109c76:	689b      	ldr	r3, [r3, #8]
 8109c78:	431a      	orrs	r2, r3
 8109c7a:	687b      	ldr	r3, [r7, #4]
 8109c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8109c7e:	ea42 0103 	orr.w	r1, r2, r3
 8109c82:	687b      	ldr	r3, [r7, #4]
 8109c84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8109c86:	687b      	ldr	r3, [r7, #4]
 8109c88:	681b      	ldr	r3, [r3, #0]
 8109c8a:	430a      	orrs	r2, r1
 8109c8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8109c8e:	687b      	ldr	r3, [r7, #4]
 8109c90:	685b      	ldr	r3, [r3, #4]
 8109c92:	2b00      	cmp	r3, #0
 8109c94:	d113      	bne.n	8109cbe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8109c96:	687b      	ldr	r3, [r7, #4]
 8109c98:	681b      	ldr	r3, [r3, #0]
 8109c9a:	689b      	ldr	r3, [r3, #8]
 8109c9c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8109ca0:	687b      	ldr	r3, [r7, #4]
 8109ca2:	681b      	ldr	r3, [r3, #0]
 8109ca4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8109ca8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8109caa:	687b      	ldr	r3, [r7, #4]
 8109cac:	681b      	ldr	r3, [r3, #0]
 8109cae:	689b      	ldr	r3, [r3, #8]
 8109cb0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8109cb4:	687b      	ldr	r3, [r7, #4]
 8109cb6:	681b      	ldr	r3, [r3, #0]
 8109cb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8109cbc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8109cbe:	687b      	ldr	r3, [r7, #4]
 8109cc0:	681b      	ldr	r3, [r3, #0]
 8109cc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8109cc4:	687b      	ldr	r3, [r7, #4]
 8109cc6:	681b      	ldr	r3, [r3, #0]
 8109cc8:	f022 0201 	bic.w	r2, r2, #1
 8109ccc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8109cce:	687b      	ldr	r3, [r7, #4]
 8109cd0:	685b      	ldr	r3, [r3, #4]
 8109cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109cd6:	2b00      	cmp	r3, #0
 8109cd8:	d00a      	beq.n	8109cf0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8109cda:	687b      	ldr	r3, [r7, #4]
 8109cdc:	681b      	ldr	r3, [r3, #0]
 8109cde:	68db      	ldr	r3, [r3, #12]
 8109ce0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8109ce4:	687b      	ldr	r3, [r7, #4]
 8109ce6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8109ce8:	687b      	ldr	r3, [r7, #4]
 8109cea:	681b      	ldr	r3, [r3, #0]
 8109cec:	430a      	orrs	r2, r1
 8109cee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8109cf0:	687b      	ldr	r3, [r7, #4]
 8109cf2:	2200      	movs	r2, #0
 8109cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8109cf8:	687b      	ldr	r3, [r7, #4]
 8109cfa:	2201      	movs	r2, #1
 8109cfc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8109d00:	2300      	movs	r3, #0
}
 8109d02:	4618      	mov	r0, r3
 8109d04:	3710      	adds	r7, #16
 8109d06:	46bd      	mov	sp, r7
 8109d08:	bd80      	pop	{r7, pc}
 8109d0a:	bf00      	nop
 8109d0c:	40013000 	.word	0x40013000
 8109d10:	40003800 	.word	0x40003800
 8109d14:	40003c00 	.word	0x40003c00

08109d18 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8109d18:	b480      	push	{r7}
 8109d1a:	b085      	sub	sp, #20
 8109d1c:	af00      	add	r7, sp, #0
 8109d1e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8109d20:	687b      	ldr	r3, [r7, #4]
 8109d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109d24:	095b      	lsrs	r3, r3, #5
 8109d26:	3301      	adds	r3, #1
 8109d28:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8109d2a:	687b      	ldr	r3, [r7, #4]
 8109d2c:	68db      	ldr	r3, [r3, #12]
 8109d2e:	3301      	adds	r3, #1
 8109d30:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8109d32:	68bb      	ldr	r3, [r7, #8]
 8109d34:	3307      	adds	r3, #7
 8109d36:	08db      	lsrs	r3, r3, #3
 8109d38:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8109d3a:	68bb      	ldr	r3, [r7, #8]
 8109d3c:	68fa      	ldr	r2, [r7, #12]
 8109d3e:	fb02 f303 	mul.w	r3, r2, r3
}
 8109d42:	4618      	mov	r0, r3
 8109d44:	3714      	adds	r7, #20
 8109d46:	46bd      	mov	sp, r7
 8109d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d4c:	4770      	bx	lr

08109d4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8109d4e:	b580      	push	{r7, lr}
 8109d50:	b082      	sub	sp, #8
 8109d52:	af00      	add	r7, sp, #0
 8109d54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109d56:	687b      	ldr	r3, [r7, #4]
 8109d58:	2b00      	cmp	r3, #0
 8109d5a:	d101      	bne.n	8109d60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8109d5c:	2301      	movs	r3, #1
 8109d5e:	e049      	b.n	8109df4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109d60:	687b      	ldr	r3, [r7, #4]
 8109d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109d66:	b2db      	uxtb	r3, r3
 8109d68:	2b00      	cmp	r3, #0
 8109d6a:	d106      	bne.n	8109d7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109d6c:	687b      	ldr	r3, [r7, #4]
 8109d6e:	2200      	movs	r2, #0
 8109d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8109d74:	6878      	ldr	r0, [r7, #4]
 8109d76:	f7f8 f883 	bl	8101e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109d7a:	687b      	ldr	r3, [r7, #4]
 8109d7c:	2202      	movs	r2, #2
 8109d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109d82:	687b      	ldr	r3, [r7, #4]
 8109d84:	681a      	ldr	r2, [r3, #0]
 8109d86:	687b      	ldr	r3, [r7, #4]
 8109d88:	3304      	adds	r3, #4
 8109d8a:	4619      	mov	r1, r3
 8109d8c:	4610      	mov	r0, r2
 8109d8e:	f000 fb47 	bl	810a420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109d92:	687b      	ldr	r3, [r7, #4]
 8109d94:	2201      	movs	r2, #1
 8109d96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109d9a:	687b      	ldr	r3, [r7, #4]
 8109d9c:	2201      	movs	r2, #1
 8109d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109da2:	687b      	ldr	r3, [r7, #4]
 8109da4:	2201      	movs	r2, #1
 8109da6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109daa:	687b      	ldr	r3, [r7, #4]
 8109dac:	2201      	movs	r2, #1
 8109dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8109db2:	687b      	ldr	r3, [r7, #4]
 8109db4:	2201      	movs	r2, #1
 8109db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8109dba:	687b      	ldr	r3, [r7, #4]
 8109dbc:	2201      	movs	r2, #1
 8109dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109dc2:	687b      	ldr	r3, [r7, #4]
 8109dc4:	2201      	movs	r2, #1
 8109dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109dca:	687b      	ldr	r3, [r7, #4]
 8109dcc:	2201      	movs	r2, #1
 8109dce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109dd2:	687b      	ldr	r3, [r7, #4]
 8109dd4:	2201      	movs	r2, #1
 8109dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8109dda:	687b      	ldr	r3, [r7, #4]
 8109ddc:	2201      	movs	r2, #1
 8109dde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8109de2:	687b      	ldr	r3, [r7, #4]
 8109de4:	2201      	movs	r2, #1
 8109de6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109dea:	687b      	ldr	r3, [r7, #4]
 8109dec:	2201      	movs	r2, #1
 8109dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109df2:	2300      	movs	r3, #0
}
 8109df4:	4618      	mov	r0, r3
 8109df6:	3708      	adds	r7, #8
 8109df8:	46bd      	mov	sp, r7
 8109dfa:	bd80      	pop	{r7, pc}

08109dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8109dfc:	b480      	push	{r7}
 8109dfe:	b085      	sub	sp, #20
 8109e00:	af00      	add	r7, sp, #0
 8109e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8109e04:	687b      	ldr	r3, [r7, #4]
 8109e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109e0a:	b2db      	uxtb	r3, r3
 8109e0c:	2b01      	cmp	r3, #1
 8109e0e:	d001      	beq.n	8109e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8109e10:	2301      	movs	r3, #1
 8109e12:	e054      	b.n	8109ebe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109e14:	687b      	ldr	r3, [r7, #4]
 8109e16:	2202      	movs	r2, #2
 8109e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8109e1c:	687b      	ldr	r3, [r7, #4]
 8109e1e:	681b      	ldr	r3, [r3, #0]
 8109e20:	68da      	ldr	r2, [r3, #12]
 8109e22:	687b      	ldr	r3, [r7, #4]
 8109e24:	681b      	ldr	r3, [r3, #0]
 8109e26:	f042 0201 	orr.w	r2, r2, #1
 8109e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109e2c:	687b      	ldr	r3, [r7, #4]
 8109e2e:	681b      	ldr	r3, [r3, #0]
 8109e30:	4a26      	ldr	r2, [pc, #152]	@ (8109ecc <HAL_TIM_Base_Start_IT+0xd0>)
 8109e32:	4293      	cmp	r3, r2
 8109e34:	d022      	beq.n	8109e7c <HAL_TIM_Base_Start_IT+0x80>
 8109e36:	687b      	ldr	r3, [r7, #4]
 8109e38:	681b      	ldr	r3, [r3, #0]
 8109e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109e3e:	d01d      	beq.n	8109e7c <HAL_TIM_Base_Start_IT+0x80>
 8109e40:	687b      	ldr	r3, [r7, #4]
 8109e42:	681b      	ldr	r3, [r3, #0]
 8109e44:	4a22      	ldr	r2, [pc, #136]	@ (8109ed0 <HAL_TIM_Base_Start_IT+0xd4>)
 8109e46:	4293      	cmp	r3, r2
 8109e48:	d018      	beq.n	8109e7c <HAL_TIM_Base_Start_IT+0x80>
 8109e4a:	687b      	ldr	r3, [r7, #4]
 8109e4c:	681b      	ldr	r3, [r3, #0]
 8109e4e:	4a21      	ldr	r2, [pc, #132]	@ (8109ed4 <HAL_TIM_Base_Start_IT+0xd8>)
 8109e50:	4293      	cmp	r3, r2
 8109e52:	d013      	beq.n	8109e7c <HAL_TIM_Base_Start_IT+0x80>
 8109e54:	687b      	ldr	r3, [r7, #4]
 8109e56:	681b      	ldr	r3, [r3, #0]
 8109e58:	4a1f      	ldr	r2, [pc, #124]	@ (8109ed8 <HAL_TIM_Base_Start_IT+0xdc>)
 8109e5a:	4293      	cmp	r3, r2
 8109e5c:	d00e      	beq.n	8109e7c <HAL_TIM_Base_Start_IT+0x80>
 8109e5e:	687b      	ldr	r3, [r7, #4]
 8109e60:	681b      	ldr	r3, [r3, #0]
 8109e62:	4a1e      	ldr	r2, [pc, #120]	@ (8109edc <HAL_TIM_Base_Start_IT+0xe0>)
 8109e64:	4293      	cmp	r3, r2
 8109e66:	d009      	beq.n	8109e7c <HAL_TIM_Base_Start_IT+0x80>
 8109e68:	687b      	ldr	r3, [r7, #4]
 8109e6a:	681b      	ldr	r3, [r3, #0]
 8109e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8109ee0 <HAL_TIM_Base_Start_IT+0xe4>)
 8109e6e:	4293      	cmp	r3, r2
 8109e70:	d004      	beq.n	8109e7c <HAL_TIM_Base_Start_IT+0x80>
 8109e72:	687b      	ldr	r3, [r7, #4]
 8109e74:	681b      	ldr	r3, [r3, #0]
 8109e76:	4a1b      	ldr	r2, [pc, #108]	@ (8109ee4 <HAL_TIM_Base_Start_IT+0xe8>)
 8109e78:	4293      	cmp	r3, r2
 8109e7a:	d115      	bne.n	8109ea8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8109e7c:	687b      	ldr	r3, [r7, #4]
 8109e7e:	681b      	ldr	r3, [r3, #0]
 8109e80:	689a      	ldr	r2, [r3, #8]
 8109e82:	4b19      	ldr	r3, [pc, #100]	@ (8109ee8 <HAL_TIM_Base_Start_IT+0xec>)
 8109e84:	4013      	ands	r3, r2
 8109e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109e88:	68fb      	ldr	r3, [r7, #12]
 8109e8a:	2b06      	cmp	r3, #6
 8109e8c:	d015      	beq.n	8109eba <HAL_TIM_Base_Start_IT+0xbe>
 8109e8e:	68fb      	ldr	r3, [r7, #12]
 8109e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109e94:	d011      	beq.n	8109eba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8109e96:	687b      	ldr	r3, [r7, #4]
 8109e98:	681b      	ldr	r3, [r3, #0]
 8109e9a:	681a      	ldr	r2, [r3, #0]
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	681b      	ldr	r3, [r3, #0]
 8109ea0:	f042 0201 	orr.w	r2, r2, #1
 8109ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109ea6:	e008      	b.n	8109eba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109ea8:	687b      	ldr	r3, [r7, #4]
 8109eaa:	681b      	ldr	r3, [r3, #0]
 8109eac:	681a      	ldr	r2, [r3, #0]
 8109eae:	687b      	ldr	r3, [r7, #4]
 8109eb0:	681b      	ldr	r3, [r3, #0]
 8109eb2:	f042 0201 	orr.w	r2, r2, #1
 8109eb6:	601a      	str	r2, [r3, #0]
 8109eb8:	e000      	b.n	8109ebc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8109ebc:	2300      	movs	r3, #0
}
 8109ebe:	4618      	mov	r0, r3
 8109ec0:	3714      	adds	r7, #20
 8109ec2:	46bd      	mov	sp, r7
 8109ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ec8:	4770      	bx	lr
 8109eca:	bf00      	nop
 8109ecc:	40010000 	.word	0x40010000
 8109ed0:	40000400 	.word	0x40000400
 8109ed4:	40000800 	.word	0x40000800
 8109ed8:	40000c00 	.word	0x40000c00
 8109edc:	40010400 	.word	0x40010400
 8109ee0:	40001800 	.word	0x40001800
 8109ee4:	40014000 	.word	0x40014000
 8109ee8:	00010007 	.word	0x00010007

08109eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8109eec:	b580      	push	{r7, lr}
 8109eee:	b082      	sub	sp, #8
 8109ef0:	af00      	add	r7, sp, #0
 8109ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109ef4:	687b      	ldr	r3, [r7, #4]
 8109ef6:	2b00      	cmp	r3, #0
 8109ef8:	d101      	bne.n	8109efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8109efa:	2301      	movs	r3, #1
 8109efc:	e049      	b.n	8109f92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109efe:	687b      	ldr	r3, [r7, #4]
 8109f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109f04:	b2db      	uxtb	r3, r3
 8109f06:	2b00      	cmp	r3, #0
 8109f08:	d106      	bne.n	8109f18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109f0a:	687b      	ldr	r3, [r7, #4]
 8109f0c:	2200      	movs	r2, #0
 8109f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8109f12:	6878      	ldr	r0, [r7, #4]
 8109f14:	f7f7 ff6a 	bl	8101dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109f18:	687b      	ldr	r3, [r7, #4]
 8109f1a:	2202      	movs	r2, #2
 8109f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109f20:	687b      	ldr	r3, [r7, #4]
 8109f22:	681a      	ldr	r2, [r3, #0]
 8109f24:	687b      	ldr	r3, [r7, #4]
 8109f26:	3304      	adds	r3, #4
 8109f28:	4619      	mov	r1, r3
 8109f2a:	4610      	mov	r0, r2
 8109f2c:	f000 fa78 	bl	810a420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109f30:	687b      	ldr	r3, [r7, #4]
 8109f32:	2201      	movs	r2, #1
 8109f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109f38:	687b      	ldr	r3, [r7, #4]
 8109f3a:	2201      	movs	r2, #1
 8109f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109f40:	687b      	ldr	r3, [r7, #4]
 8109f42:	2201      	movs	r2, #1
 8109f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109f48:	687b      	ldr	r3, [r7, #4]
 8109f4a:	2201      	movs	r2, #1
 8109f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8109f50:	687b      	ldr	r3, [r7, #4]
 8109f52:	2201      	movs	r2, #1
 8109f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8109f58:	687b      	ldr	r3, [r7, #4]
 8109f5a:	2201      	movs	r2, #1
 8109f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109f60:	687b      	ldr	r3, [r7, #4]
 8109f62:	2201      	movs	r2, #1
 8109f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109f68:	687b      	ldr	r3, [r7, #4]
 8109f6a:	2201      	movs	r2, #1
 8109f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109f70:	687b      	ldr	r3, [r7, #4]
 8109f72:	2201      	movs	r2, #1
 8109f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8109f78:	687b      	ldr	r3, [r7, #4]
 8109f7a:	2201      	movs	r2, #1
 8109f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8109f80:	687b      	ldr	r3, [r7, #4]
 8109f82:	2201      	movs	r2, #1
 8109f84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109f88:	687b      	ldr	r3, [r7, #4]
 8109f8a:	2201      	movs	r2, #1
 8109f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109f90:	2300      	movs	r3, #0
}
 8109f92:	4618      	mov	r0, r3
 8109f94:	3708      	adds	r7, #8
 8109f96:	46bd      	mov	sp, r7
 8109f98:	bd80      	pop	{r7, pc}

08109f9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8109f9a:	b580      	push	{r7, lr}
 8109f9c:	b084      	sub	sp, #16
 8109f9e:	af00      	add	r7, sp, #0
 8109fa0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8109fa2:	687b      	ldr	r3, [r7, #4]
 8109fa4:	681b      	ldr	r3, [r3, #0]
 8109fa6:	68db      	ldr	r3, [r3, #12]
 8109fa8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8109faa:	687b      	ldr	r3, [r7, #4]
 8109fac:	681b      	ldr	r3, [r3, #0]
 8109fae:	691b      	ldr	r3, [r3, #16]
 8109fb0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8109fb2:	68bb      	ldr	r3, [r7, #8]
 8109fb4:	f003 0302 	and.w	r3, r3, #2
 8109fb8:	2b00      	cmp	r3, #0
 8109fba:	d020      	beq.n	8109ffe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8109fbc:	68fb      	ldr	r3, [r7, #12]
 8109fbe:	f003 0302 	and.w	r3, r3, #2
 8109fc2:	2b00      	cmp	r3, #0
 8109fc4:	d01b      	beq.n	8109ffe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8109fc6:	687b      	ldr	r3, [r7, #4]
 8109fc8:	681b      	ldr	r3, [r3, #0]
 8109fca:	f06f 0202 	mvn.w	r2, #2
 8109fce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8109fd0:	687b      	ldr	r3, [r7, #4]
 8109fd2:	2201      	movs	r2, #1
 8109fd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8109fd6:	687b      	ldr	r3, [r7, #4]
 8109fd8:	681b      	ldr	r3, [r3, #0]
 8109fda:	699b      	ldr	r3, [r3, #24]
 8109fdc:	f003 0303 	and.w	r3, r3, #3
 8109fe0:	2b00      	cmp	r3, #0
 8109fe2:	d003      	beq.n	8109fec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8109fe4:	6878      	ldr	r0, [r7, #4]
 8109fe6:	f000 f9fd 	bl	810a3e4 <HAL_TIM_IC_CaptureCallback>
 8109fea:	e005      	b.n	8109ff8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8109fec:	6878      	ldr	r0, [r7, #4]
 8109fee:	f000 f9ef 	bl	810a3d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109ff2:	6878      	ldr	r0, [r7, #4]
 8109ff4:	f000 fa00 	bl	810a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109ff8:	687b      	ldr	r3, [r7, #4]
 8109ffa:	2200      	movs	r2, #0
 8109ffc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8109ffe:	68bb      	ldr	r3, [r7, #8]
 810a000:	f003 0304 	and.w	r3, r3, #4
 810a004:	2b00      	cmp	r3, #0
 810a006:	d020      	beq.n	810a04a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810a008:	68fb      	ldr	r3, [r7, #12]
 810a00a:	f003 0304 	and.w	r3, r3, #4
 810a00e:	2b00      	cmp	r3, #0
 810a010:	d01b      	beq.n	810a04a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810a012:	687b      	ldr	r3, [r7, #4]
 810a014:	681b      	ldr	r3, [r3, #0]
 810a016:	f06f 0204 	mvn.w	r2, #4
 810a01a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810a01c:	687b      	ldr	r3, [r7, #4]
 810a01e:	2202      	movs	r2, #2
 810a020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810a022:	687b      	ldr	r3, [r7, #4]
 810a024:	681b      	ldr	r3, [r3, #0]
 810a026:	699b      	ldr	r3, [r3, #24]
 810a028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810a02c:	2b00      	cmp	r3, #0
 810a02e:	d003      	beq.n	810a038 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810a030:	6878      	ldr	r0, [r7, #4]
 810a032:	f000 f9d7 	bl	810a3e4 <HAL_TIM_IC_CaptureCallback>
 810a036:	e005      	b.n	810a044 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810a038:	6878      	ldr	r0, [r7, #4]
 810a03a:	f000 f9c9 	bl	810a3d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810a03e:	6878      	ldr	r0, [r7, #4]
 810a040:	f000 f9da 	bl	810a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810a044:	687b      	ldr	r3, [r7, #4]
 810a046:	2200      	movs	r2, #0
 810a048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810a04a:	68bb      	ldr	r3, [r7, #8]
 810a04c:	f003 0308 	and.w	r3, r3, #8
 810a050:	2b00      	cmp	r3, #0
 810a052:	d020      	beq.n	810a096 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810a054:	68fb      	ldr	r3, [r7, #12]
 810a056:	f003 0308 	and.w	r3, r3, #8
 810a05a:	2b00      	cmp	r3, #0
 810a05c:	d01b      	beq.n	810a096 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810a05e:	687b      	ldr	r3, [r7, #4]
 810a060:	681b      	ldr	r3, [r3, #0]
 810a062:	f06f 0208 	mvn.w	r2, #8
 810a066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810a068:	687b      	ldr	r3, [r7, #4]
 810a06a:	2204      	movs	r2, #4
 810a06c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810a06e:	687b      	ldr	r3, [r7, #4]
 810a070:	681b      	ldr	r3, [r3, #0]
 810a072:	69db      	ldr	r3, [r3, #28]
 810a074:	f003 0303 	and.w	r3, r3, #3
 810a078:	2b00      	cmp	r3, #0
 810a07a:	d003      	beq.n	810a084 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810a07c:	6878      	ldr	r0, [r7, #4]
 810a07e:	f000 f9b1 	bl	810a3e4 <HAL_TIM_IC_CaptureCallback>
 810a082:	e005      	b.n	810a090 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810a084:	6878      	ldr	r0, [r7, #4]
 810a086:	f000 f9a3 	bl	810a3d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810a08a:	6878      	ldr	r0, [r7, #4]
 810a08c:	f000 f9b4 	bl	810a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810a090:	687b      	ldr	r3, [r7, #4]
 810a092:	2200      	movs	r2, #0
 810a094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810a096:	68bb      	ldr	r3, [r7, #8]
 810a098:	f003 0310 	and.w	r3, r3, #16
 810a09c:	2b00      	cmp	r3, #0
 810a09e:	d020      	beq.n	810a0e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810a0a0:	68fb      	ldr	r3, [r7, #12]
 810a0a2:	f003 0310 	and.w	r3, r3, #16
 810a0a6:	2b00      	cmp	r3, #0
 810a0a8:	d01b      	beq.n	810a0e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810a0aa:	687b      	ldr	r3, [r7, #4]
 810a0ac:	681b      	ldr	r3, [r3, #0]
 810a0ae:	f06f 0210 	mvn.w	r2, #16
 810a0b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810a0b4:	687b      	ldr	r3, [r7, #4]
 810a0b6:	2208      	movs	r2, #8
 810a0b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810a0ba:	687b      	ldr	r3, [r7, #4]
 810a0bc:	681b      	ldr	r3, [r3, #0]
 810a0be:	69db      	ldr	r3, [r3, #28]
 810a0c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810a0c4:	2b00      	cmp	r3, #0
 810a0c6:	d003      	beq.n	810a0d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810a0c8:	6878      	ldr	r0, [r7, #4]
 810a0ca:	f000 f98b 	bl	810a3e4 <HAL_TIM_IC_CaptureCallback>
 810a0ce:	e005      	b.n	810a0dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810a0d0:	6878      	ldr	r0, [r7, #4]
 810a0d2:	f000 f97d 	bl	810a3d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810a0d6:	6878      	ldr	r0, [r7, #4]
 810a0d8:	f000 f98e 	bl	810a3f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810a0dc:	687b      	ldr	r3, [r7, #4]
 810a0de:	2200      	movs	r2, #0
 810a0e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810a0e2:	68bb      	ldr	r3, [r7, #8]
 810a0e4:	f003 0301 	and.w	r3, r3, #1
 810a0e8:	2b00      	cmp	r3, #0
 810a0ea:	d00c      	beq.n	810a106 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810a0ec:	68fb      	ldr	r3, [r7, #12]
 810a0ee:	f003 0301 	and.w	r3, r3, #1
 810a0f2:	2b00      	cmp	r3, #0
 810a0f4:	d007      	beq.n	810a106 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810a0f6:	687b      	ldr	r3, [r7, #4]
 810a0f8:	681b      	ldr	r3, [r3, #0]
 810a0fa:	f06f 0201 	mvn.w	r2, #1
 810a0fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810a100:	6878      	ldr	r0, [r7, #4]
 810a102:	f7f7 f92f 	bl	8101364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810a106:	68bb      	ldr	r3, [r7, #8]
 810a108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a10c:	2b00      	cmp	r3, #0
 810a10e:	d104      	bne.n	810a11a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810a110:	68bb      	ldr	r3, [r7, #8]
 810a112:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810a116:	2b00      	cmp	r3, #0
 810a118:	d00c      	beq.n	810a134 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810a11a:	68fb      	ldr	r3, [r7, #12]
 810a11c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a120:	2b00      	cmp	r3, #0
 810a122:	d007      	beq.n	810a134 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810a124:	687b      	ldr	r3, [r7, #4]
 810a126:	681b      	ldr	r3, [r3, #0]
 810a128:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810a12c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810a12e:	6878      	ldr	r0, [r7, #4]
 810a130:	f000 fe02 	bl	810ad38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810a134:	68bb      	ldr	r3, [r7, #8]
 810a136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810a13a:	2b00      	cmp	r3, #0
 810a13c:	d00c      	beq.n	810a158 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810a13e:	68fb      	ldr	r3, [r7, #12]
 810a140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a144:	2b00      	cmp	r3, #0
 810a146:	d007      	beq.n	810a158 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810a148:	687b      	ldr	r3, [r7, #4]
 810a14a:	681b      	ldr	r3, [r3, #0]
 810a14c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810a150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810a152:	6878      	ldr	r0, [r7, #4]
 810a154:	f000 fdfa 	bl	810ad4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810a158:	68bb      	ldr	r3, [r7, #8]
 810a15a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a15e:	2b00      	cmp	r3, #0
 810a160:	d00c      	beq.n	810a17c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810a162:	68fb      	ldr	r3, [r7, #12]
 810a164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a168:	2b00      	cmp	r3, #0
 810a16a:	d007      	beq.n	810a17c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810a16c:	687b      	ldr	r3, [r7, #4]
 810a16e:	681b      	ldr	r3, [r3, #0]
 810a170:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810a174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810a176:	6878      	ldr	r0, [r7, #4]
 810a178:	f000 f948 	bl	810a40c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810a17c:	68bb      	ldr	r3, [r7, #8]
 810a17e:	f003 0320 	and.w	r3, r3, #32
 810a182:	2b00      	cmp	r3, #0
 810a184:	d00c      	beq.n	810a1a0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810a186:	68fb      	ldr	r3, [r7, #12]
 810a188:	f003 0320 	and.w	r3, r3, #32
 810a18c:	2b00      	cmp	r3, #0
 810a18e:	d007      	beq.n	810a1a0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810a190:	687b      	ldr	r3, [r7, #4]
 810a192:	681b      	ldr	r3, [r3, #0]
 810a194:	f06f 0220 	mvn.w	r2, #32
 810a198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810a19a:	6878      	ldr	r0, [r7, #4]
 810a19c:	f000 fdc2 	bl	810ad24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810a1a0:	bf00      	nop
 810a1a2:	3710      	adds	r7, #16
 810a1a4:	46bd      	mov	sp, r7
 810a1a6:	bd80      	pop	{r7, pc}

0810a1a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810a1a8:	b580      	push	{r7, lr}
 810a1aa:	b086      	sub	sp, #24
 810a1ac:	af00      	add	r7, sp, #0
 810a1ae:	60f8      	str	r0, [r7, #12]
 810a1b0:	60b9      	str	r1, [r7, #8]
 810a1b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810a1b4:	2300      	movs	r3, #0
 810a1b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810a1b8:	68fb      	ldr	r3, [r7, #12]
 810a1ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a1be:	2b01      	cmp	r3, #1
 810a1c0:	d101      	bne.n	810a1c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 810a1c2:	2302      	movs	r3, #2
 810a1c4:	e0ff      	b.n	810a3c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 810a1c6:	68fb      	ldr	r3, [r7, #12]
 810a1c8:	2201      	movs	r2, #1
 810a1ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810a1ce:	687b      	ldr	r3, [r7, #4]
 810a1d0:	2b14      	cmp	r3, #20
 810a1d2:	f200 80f0 	bhi.w	810a3b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 810a1d6:	a201      	add	r2, pc, #4	@ (adr r2, 810a1dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 810a1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a1dc:	0810a231 	.word	0x0810a231
 810a1e0:	0810a3b7 	.word	0x0810a3b7
 810a1e4:	0810a3b7 	.word	0x0810a3b7
 810a1e8:	0810a3b7 	.word	0x0810a3b7
 810a1ec:	0810a271 	.word	0x0810a271
 810a1f0:	0810a3b7 	.word	0x0810a3b7
 810a1f4:	0810a3b7 	.word	0x0810a3b7
 810a1f8:	0810a3b7 	.word	0x0810a3b7
 810a1fc:	0810a2b3 	.word	0x0810a2b3
 810a200:	0810a3b7 	.word	0x0810a3b7
 810a204:	0810a3b7 	.word	0x0810a3b7
 810a208:	0810a3b7 	.word	0x0810a3b7
 810a20c:	0810a2f3 	.word	0x0810a2f3
 810a210:	0810a3b7 	.word	0x0810a3b7
 810a214:	0810a3b7 	.word	0x0810a3b7
 810a218:	0810a3b7 	.word	0x0810a3b7
 810a21c:	0810a335 	.word	0x0810a335
 810a220:	0810a3b7 	.word	0x0810a3b7
 810a224:	0810a3b7 	.word	0x0810a3b7
 810a228:	0810a3b7 	.word	0x0810a3b7
 810a22c:	0810a375 	.word	0x0810a375
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810a230:	68fb      	ldr	r3, [r7, #12]
 810a232:	681b      	ldr	r3, [r3, #0]
 810a234:	68b9      	ldr	r1, [r7, #8]
 810a236:	4618      	mov	r0, r3
 810a238:	f000 f992 	bl	810a560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810a23c:	68fb      	ldr	r3, [r7, #12]
 810a23e:	681b      	ldr	r3, [r3, #0]
 810a240:	699a      	ldr	r2, [r3, #24]
 810a242:	68fb      	ldr	r3, [r7, #12]
 810a244:	681b      	ldr	r3, [r3, #0]
 810a246:	f042 0208 	orr.w	r2, r2, #8
 810a24a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810a24c:	68fb      	ldr	r3, [r7, #12]
 810a24e:	681b      	ldr	r3, [r3, #0]
 810a250:	699a      	ldr	r2, [r3, #24]
 810a252:	68fb      	ldr	r3, [r7, #12]
 810a254:	681b      	ldr	r3, [r3, #0]
 810a256:	f022 0204 	bic.w	r2, r2, #4
 810a25a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810a25c:	68fb      	ldr	r3, [r7, #12]
 810a25e:	681b      	ldr	r3, [r3, #0]
 810a260:	6999      	ldr	r1, [r3, #24]
 810a262:	68bb      	ldr	r3, [r7, #8]
 810a264:	691a      	ldr	r2, [r3, #16]
 810a266:	68fb      	ldr	r3, [r7, #12]
 810a268:	681b      	ldr	r3, [r3, #0]
 810a26a:	430a      	orrs	r2, r1
 810a26c:	619a      	str	r2, [r3, #24]
      break;
 810a26e:	e0a5      	b.n	810a3bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810a270:	68fb      	ldr	r3, [r7, #12]
 810a272:	681b      	ldr	r3, [r3, #0]
 810a274:	68b9      	ldr	r1, [r7, #8]
 810a276:	4618      	mov	r0, r3
 810a278:	f000 fa02 	bl	810a680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810a27c:	68fb      	ldr	r3, [r7, #12]
 810a27e:	681b      	ldr	r3, [r3, #0]
 810a280:	699a      	ldr	r2, [r3, #24]
 810a282:	68fb      	ldr	r3, [r7, #12]
 810a284:	681b      	ldr	r3, [r3, #0]
 810a286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a28a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810a28c:	68fb      	ldr	r3, [r7, #12]
 810a28e:	681b      	ldr	r3, [r3, #0]
 810a290:	699a      	ldr	r2, [r3, #24]
 810a292:	68fb      	ldr	r3, [r7, #12]
 810a294:	681b      	ldr	r3, [r3, #0]
 810a296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810a29a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810a29c:	68fb      	ldr	r3, [r7, #12]
 810a29e:	681b      	ldr	r3, [r3, #0]
 810a2a0:	6999      	ldr	r1, [r3, #24]
 810a2a2:	68bb      	ldr	r3, [r7, #8]
 810a2a4:	691b      	ldr	r3, [r3, #16]
 810a2a6:	021a      	lsls	r2, r3, #8
 810a2a8:	68fb      	ldr	r3, [r7, #12]
 810a2aa:	681b      	ldr	r3, [r3, #0]
 810a2ac:	430a      	orrs	r2, r1
 810a2ae:	619a      	str	r2, [r3, #24]
      break;
 810a2b0:	e084      	b.n	810a3bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810a2b2:	68fb      	ldr	r3, [r7, #12]
 810a2b4:	681b      	ldr	r3, [r3, #0]
 810a2b6:	68b9      	ldr	r1, [r7, #8]
 810a2b8:	4618      	mov	r0, r3
 810a2ba:	f000 fa6b 	bl	810a794 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810a2be:	68fb      	ldr	r3, [r7, #12]
 810a2c0:	681b      	ldr	r3, [r3, #0]
 810a2c2:	69da      	ldr	r2, [r3, #28]
 810a2c4:	68fb      	ldr	r3, [r7, #12]
 810a2c6:	681b      	ldr	r3, [r3, #0]
 810a2c8:	f042 0208 	orr.w	r2, r2, #8
 810a2cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810a2ce:	68fb      	ldr	r3, [r7, #12]
 810a2d0:	681b      	ldr	r3, [r3, #0]
 810a2d2:	69da      	ldr	r2, [r3, #28]
 810a2d4:	68fb      	ldr	r3, [r7, #12]
 810a2d6:	681b      	ldr	r3, [r3, #0]
 810a2d8:	f022 0204 	bic.w	r2, r2, #4
 810a2dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810a2de:	68fb      	ldr	r3, [r7, #12]
 810a2e0:	681b      	ldr	r3, [r3, #0]
 810a2e2:	69d9      	ldr	r1, [r3, #28]
 810a2e4:	68bb      	ldr	r3, [r7, #8]
 810a2e6:	691a      	ldr	r2, [r3, #16]
 810a2e8:	68fb      	ldr	r3, [r7, #12]
 810a2ea:	681b      	ldr	r3, [r3, #0]
 810a2ec:	430a      	orrs	r2, r1
 810a2ee:	61da      	str	r2, [r3, #28]
      break;
 810a2f0:	e064      	b.n	810a3bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810a2f2:	68fb      	ldr	r3, [r7, #12]
 810a2f4:	681b      	ldr	r3, [r3, #0]
 810a2f6:	68b9      	ldr	r1, [r7, #8]
 810a2f8:	4618      	mov	r0, r3
 810a2fa:	f000 fad3 	bl	810a8a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810a2fe:	68fb      	ldr	r3, [r7, #12]
 810a300:	681b      	ldr	r3, [r3, #0]
 810a302:	69da      	ldr	r2, [r3, #28]
 810a304:	68fb      	ldr	r3, [r7, #12]
 810a306:	681b      	ldr	r3, [r3, #0]
 810a308:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a30c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810a30e:	68fb      	ldr	r3, [r7, #12]
 810a310:	681b      	ldr	r3, [r3, #0]
 810a312:	69da      	ldr	r2, [r3, #28]
 810a314:	68fb      	ldr	r3, [r7, #12]
 810a316:	681b      	ldr	r3, [r3, #0]
 810a318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810a31c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810a31e:	68fb      	ldr	r3, [r7, #12]
 810a320:	681b      	ldr	r3, [r3, #0]
 810a322:	69d9      	ldr	r1, [r3, #28]
 810a324:	68bb      	ldr	r3, [r7, #8]
 810a326:	691b      	ldr	r3, [r3, #16]
 810a328:	021a      	lsls	r2, r3, #8
 810a32a:	68fb      	ldr	r3, [r7, #12]
 810a32c:	681b      	ldr	r3, [r3, #0]
 810a32e:	430a      	orrs	r2, r1
 810a330:	61da      	str	r2, [r3, #28]
      break;
 810a332:	e043      	b.n	810a3bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810a334:	68fb      	ldr	r3, [r7, #12]
 810a336:	681b      	ldr	r3, [r3, #0]
 810a338:	68b9      	ldr	r1, [r7, #8]
 810a33a:	4618      	mov	r0, r3
 810a33c:	f000 fb1c 	bl	810a978 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810a340:	68fb      	ldr	r3, [r7, #12]
 810a342:	681b      	ldr	r3, [r3, #0]
 810a344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a346:	68fb      	ldr	r3, [r7, #12]
 810a348:	681b      	ldr	r3, [r3, #0]
 810a34a:	f042 0208 	orr.w	r2, r2, #8
 810a34e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810a350:	68fb      	ldr	r3, [r7, #12]
 810a352:	681b      	ldr	r3, [r3, #0]
 810a354:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a356:	68fb      	ldr	r3, [r7, #12]
 810a358:	681b      	ldr	r3, [r3, #0]
 810a35a:	f022 0204 	bic.w	r2, r2, #4
 810a35e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810a360:	68fb      	ldr	r3, [r7, #12]
 810a362:	681b      	ldr	r3, [r3, #0]
 810a364:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810a366:	68bb      	ldr	r3, [r7, #8]
 810a368:	691a      	ldr	r2, [r3, #16]
 810a36a:	68fb      	ldr	r3, [r7, #12]
 810a36c:	681b      	ldr	r3, [r3, #0]
 810a36e:	430a      	orrs	r2, r1
 810a370:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810a372:	e023      	b.n	810a3bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810a374:	68fb      	ldr	r3, [r7, #12]
 810a376:	681b      	ldr	r3, [r3, #0]
 810a378:	68b9      	ldr	r1, [r7, #8]
 810a37a:	4618      	mov	r0, r3
 810a37c:	f000 fb60 	bl	810aa40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810a380:	68fb      	ldr	r3, [r7, #12]
 810a382:	681b      	ldr	r3, [r3, #0]
 810a384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a386:	68fb      	ldr	r3, [r7, #12]
 810a388:	681b      	ldr	r3, [r3, #0]
 810a38a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a38e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810a390:	68fb      	ldr	r3, [r7, #12]
 810a392:	681b      	ldr	r3, [r3, #0]
 810a394:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a396:	68fb      	ldr	r3, [r7, #12]
 810a398:	681b      	ldr	r3, [r3, #0]
 810a39a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810a39e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810a3a0:	68fb      	ldr	r3, [r7, #12]
 810a3a2:	681b      	ldr	r3, [r3, #0]
 810a3a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810a3a6:	68bb      	ldr	r3, [r7, #8]
 810a3a8:	691b      	ldr	r3, [r3, #16]
 810a3aa:	021a      	lsls	r2, r3, #8
 810a3ac:	68fb      	ldr	r3, [r7, #12]
 810a3ae:	681b      	ldr	r3, [r3, #0]
 810a3b0:	430a      	orrs	r2, r1
 810a3b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810a3b4:	e002      	b.n	810a3bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810a3b6:	2301      	movs	r3, #1
 810a3b8:	75fb      	strb	r3, [r7, #23]
      break;
 810a3ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810a3bc:	68fb      	ldr	r3, [r7, #12]
 810a3be:	2200      	movs	r2, #0
 810a3c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810a3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 810a3c6:	4618      	mov	r0, r3
 810a3c8:	3718      	adds	r7, #24
 810a3ca:	46bd      	mov	sp, r7
 810a3cc:	bd80      	pop	{r7, pc}
 810a3ce:	bf00      	nop

0810a3d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810a3d0:	b480      	push	{r7}
 810a3d2:	b083      	sub	sp, #12
 810a3d4:	af00      	add	r7, sp, #0
 810a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810a3d8:	bf00      	nop
 810a3da:	370c      	adds	r7, #12
 810a3dc:	46bd      	mov	sp, r7
 810a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3e2:	4770      	bx	lr

0810a3e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810a3e4:	b480      	push	{r7}
 810a3e6:	b083      	sub	sp, #12
 810a3e8:	af00      	add	r7, sp, #0
 810a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810a3ec:	bf00      	nop
 810a3ee:	370c      	adds	r7, #12
 810a3f0:	46bd      	mov	sp, r7
 810a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3f6:	4770      	bx	lr

0810a3f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810a3f8:	b480      	push	{r7}
 810a3fa:	b083      	sub	sp, #12
 810a3fc:	af00      	add	r7, sp, #0
 810a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810a400:	bf00      	nop
 810a402:	370c      	adds	r7, #12
 810a404:	46bd      	mov	sp, r7
 810a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a40a:	4770      	bx	lr

0810a40c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810a40c:	b480      	push	{r7}
 810a40e:	b083      	sub	sp, #12
 810a410:	af00      	add	r7, sp, #0
 810a412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810a414:	bf00      	nop
 810a416:	370c      	adds	r7, #12
 810a418:	46bd      	mov	sp, r7
 810a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a41e:	4770      	bx	lr

0810a420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810a420:	b480      	push	{r7}
 810a422:	b085      	sub	sp, #20
 810a424:	af00      	add	r7, sp, #0
 810a426:	6078      	str	r0, [r7, #4]
 810a428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810a42a:	687b      	ldr	r3, [r7, #4]
 810a42c:	681b      	ldr	r3, [r3, #0]
 810a42e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810a430:	687b      	ldr	r3, [r7, #4]
 810a432:	4a43      	ldr	r2, [pc, #268]	@ (810a540 <TIM_Base_SetConfig+0x120>)
 810a434:	4293      	cmp	r3, r2
 810a436:	d013      	beq.n	810a460 <TIM_Base_SetConfig+0x40>
 810a438:	687b      	ldr	r3, [r7, #4]
 810a43a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a43e:	d00f      	beq.n	810a460 <TIM_Base_SetConfig+0x40>
 810a440:	687b      	ldr	r3, [r7, #4]
 810a442:	4a40      	ldr	r2, [pc, #256]	@ (810a544 <TIM_Base_SetConfig+0x124>)
 810a444:	4293      	cmp	r3, r2
 810a446:	d00b      	beq.n	810a460 <TIM_Base_SetConfig+0x40>
 810a448:	687b      	ldr	r3, [r7, #4]
 810a44a:	4a3f      	ldr	r2, [pc, #252]	@ (810a548 <TIM_Base_SetConfig+0x128>)
 810a44c:	4293      	cmp	r3, r2
 810a44e:	d007      	beq.n	810a460 <TIM_Base_SetConfig+0x40>
 810a450:	687b      	ldr	r3, [r7, #4]
 810a452:	4a3e      	ldr	r2, [pc, #248]	@ (810a54c <TIM_Base_SetConfig+0x12c>)
 810a454:	4293      	cmp	r3, r2
 810a456:	d003      	beq.n	810a460 <TIM_Base_SetConfig+0x40>
 810a458:	687b      	ldr	r3, [r7, #4]
 810a45a:	4a3d      	ldr	r2, [pc, #244]	@ (810a550 <TIM_Base_SetConfig+0x130>)
 810a45c:	4293      	cmp	r3, r2
 810a45e:	d108      	bne.n	810a472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810a460:	68fb      	ldr	r3, [r7, #12]
 810a462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810a468:	683b      	ldr	r3, [r7, #0]
 810a46a:	685b      	ldr	r3, [r3, #4]
 810a46c:	68fa      	ldr	r2, [r7, #12]
 810a46e:	4313      	orrs	r3, r2
 810a470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810a472:	687b      	ldr	r3, [r7, #4]
 810a474:	4a32      	ldr	r2, [pc, #200]	@ (810a540 <TIM_Base_SetConfig+0x120>)
 810a476:	4293      	cmp	r3, r2
 810a478:	d01f      	beq.n	810a4ba <TIM_Base_SetConfig+0x9a>
 810a47a:	687b      	ldr	r3, [r7, #4]
 810a47c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a480:	d01b      	beq.n	810a4ba <TIM_Base_SetConfig+0x9a>
 810a482:	687b      	ldr	r3, [r7, #4]
 810a484:	4a2f      	ldr	r2, [pc, #188]	@ (810a544 <TIM_Base_SetConfig+0x124>)
 810a486:	4293      	cmp	r3, r2
 810a488:	d017      	beq.n	810a4ba <TIM_Base_SetConfig+0x9a>
 810a48a:	687b      	ldr	r3, [r7, #4]
 810a48c:	4a2e      	ldr	r2, [pc, #184]	@ (810a548 <TIM_Base_SetConfig+0x128>)
 810a48e:	4293      	cmp	r3, r2
 810a490:	d013      	beq.n	810a4ba <TIM_Base_SetConfig+0x9a>
 810a492:	687b      	ldr	r3, [r7, #4]
 810a494:	4a2d      	ldr	r2, [pc, #180]	@ (810a54c <TIM_Base_SetConfig+0x12c>)
 810a496:	4293      	cmp	r3, r2
 810a498:	d00f      	beq.n	810a4ba <TIM_Base_SetConfig+0x9a>
 810a49a:	687b      	ldr	r3, [r7, #4]
 810a49c:	4a2c      	ldr	r2, [pc, #176]	@ (810a550 <TIM_Base_SetConfig+0x130>)
 810a49e:	4293      	cmp	r3, r2
 810a4a0:	d00b      	beq.n	810a4ba <TIM_Base_SetConfig+0x9a>
 810a4a2:	687b      	ldr	r3, [r7, #4]
 810a4a4:	4a2b      	ldr	r2, [pc, #172]	@ (810a554 <TIM_Base_SetConfig+0x134>)
 810a4a6:	4293      	cmp	r3, r2
 810a4a8:	d007      	beq.n	810a4ba <TIM_Base_SetConfig+0x9a>
 810a4aa:	687b      	ldr	r3, [r7, #4]
 810a4ac:	4a2a      	ldr	r2, [pc, #168]	@ (810a558 <TIM_Base_SetConfig+0x138>)
 810a4ae:	4293      	cmp	r3, r2
 810a4b0:	d003      	beq.n	810a4ba <TIM_Base_SetConfig+0x9a>
 810a4b2:	687b      	ldr	r3, [r7, #4]
 810a4b4:	4a29      	ldr	r2, [pc, #164]	@ (810a55c <TIM_Base_SetConfig+0x13c>)
 810a4b6:	4293      	cmp	r3, r2
 810a4b8:	d108      	bne.n	810a4cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810a4ba:	68fb      	ldr	r3, [r7, #12]
 810a4bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a4c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810a4c2:	683b      	ldr	r3, [r7, #0]
 810a4c4:	68db      	ldr	r3, [r3, #12]
 810a4c6:	68fa      	ldr	r2, [r7, #12]
 810a4c8:	4313      	orrs	r3, r2
 810a4ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810a4cc:	68fb      	ldr	r3, [r7, #12]
 810a4ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810a4d2:	683b      	ldr	r3, [r7, #0]
 810a4d4:	695b      	ldr	r3, [r3, #20]
 810a4d6:	4313      	orrs	r3, r2
 810a4d8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810a4da:	683b      	ldr	r3, [r7, #0]
 810a4dc:	689a      	ldr	r2, [r3, #8]
 810a4de:	687b      	ldr	r3, [r7, #4]
 810a4e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810a4e2:	683b      	ldr	r3, [r7, #0]
 810a4e4:	681a      	ldr	r2, [r3, #0]
 810a4e6:	687b      	ldr	r3, [r7, #4]
 810a4e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810a4ea:	687b      	ldr	r3, [r7, #4]
 810a4ec:	4a14      	ldr	r2, [pc, #80]	@ (810a540 <TIM_Base_SetConfig+0x120>)
 810a4ee:	4293      	cmp	r3, r2
 810a4f0:	d00f      	beq.n	810a512 <TIM_Base_SetConfig+0xf2>
 810a4f2:	687b      	ldr	r3, [r7, #4]
 810a4f4:	4a16      	ldr	r2, [pc, #88]	@ (810a550 <TIM_Base_SetConfig+0x130>)
 810a4f6:	4293      	cmp	r3, r2
 810a4f8:	d00b      	beq.n	810a512 <TIM_Base_SetConfig+0xf2>
 810a4fa:	687b      	ldr	r3, [r7, #4]
 810a4fc:	4a15      	ldr	r2, [pc, #84]	@ (810a554 <TIM_Base_SetConfig+0x134>)
 810a4fe:	4293      	cmp	r3, r2
 810a500:	d007      	beq.n	810a512 <TIM_Base_SetConfig+0xf2>
 810a502:	687b      	ldr	r3, [r7, #4]
 810a504:	4a14      	ldr	r2, [pc, #80]	@ (810a558 <TIM_Base_SetConfig+0x138>)
 810a506:	4293      	cmp	r3, r2
 810a508:	d003      	beq.n	810a512 <TIM_Base_SetConfig+0xf2>
 810a50a:	687b      	ldr	r3, [r7, #4]
 810a50c:	4a13      	ldr	r2, [pc, #76]	@ (810a55c <TIM_Base_SetConfig+0x13c>)
 810a50e:	4293      	cmp	r3, r2
 810a510:	d103      	bne.n	810a51a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810a512:	683b      	ldr	r3, [r7, #0]
 810a514:	691a      	ldr	r2, [r3, #16]
 810a516:	687b      	ldr	r3, [r7, #4]
 810a518:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	681b      	ldr	r3, [r3, #0]
 810a51e:	f043 0204 	orr.w	r2, r3, #4
 810a522:	687b      	ldr	r3, [r7, #4]
 810a524:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810a526:	687b      	ldr	r3, [r7, #4]
 810a528:	2201      	movs	r2, #1
 810a52a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 810a52c:	687b      	ldr	r3, [r7, #4]
 810a52e:	68fa      	ldr	r2, [r7, #12]
 810a530:	601a      	str	r2, [r3, #0]
}
 810a532:	bf00      	nop
 810a534:	3714      	adds	r7, #20
 810a536:	46bd      	mov	sp, r7
 810a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a53c:	4770      	bx	lr
 810a53e:	bf00      	nop
 810a540:	40010000 	.word	0x40010000
 810a544:	40000400 	.word	0x40000400
 810a548:	40000800 	.word	0x40000800
 810a54c:	40000c00 	.word	0x40000c00
 810a550:	40010400 	.word	0x40010400
 810a554:	40014000 	.word	0x40014000
 810a558:	40014400 	.word	0x40014400
 810a55c:	40014800 	.word	0x40014800

0810a560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a560:	b480      	push	{r7}
 810a562:	b087      	sub	sp, #28
 810a564:	af00      	add	r7, sp, #0
 810a566:	6078      	str	r0, [r7, #4]
 810a568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a56a:	687b      	ldr	r3, [r7, #4]
 810a56c:	6a1b      	ldr	r3, [r3, #32]
 810a56e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810a570:	687b      	ldr	r3, [r7, #4]
 810a572:	6a1b      	ldr	r3, [r3, #32]
 810a574:	f023 0201 	bic.w	r2, r3, #1
 810a578:	687b      	ldr	r3, [r7, #4]
 810a57a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a57c:	687b      	ldr	r3, [r7, #4]
 810a57e:	685b      	ldr	r3, [r3, #4]
 810a580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a582:	687b      	ldr	r3, [r7, #4]
 810a584:	699b      	ldr	r3, [r3, #24]
 810a586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810a588:	68fb      	ldr	r3, [r7, #12]
 810a58a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a58e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810a594:	68fb      	ldr	r3, [r7, #12]
 810a596:	f023 0303 	bic.w	r3, r3, #3
 810a59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a59c:	683b      	ldr	r3, [r7, #0]
 810a59e:	681b      	ldr	r3, [r3, #0]
 810a5a0:	68fa      	ldr	r2, [r7, #12]
 810a5a2:	4313      	orrs	r3, r2
 810a5a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810a5a6:	697b      	ldr	r3, [r7, #20]
 810a5a8:	f023 0302 	bic.w	r3, r3, #2
 810a5ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810a5ae:	683b      	ldr	r3, [r7, #0]
 810a5b0:	689b      	ldr	r3, [r3, #8]
 810a5b2:	697a      	ldr	r2, [r7, #20]
 810a5b4:	4313      	orrs	r3, r2
 810a5b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810a5b8:	687b      	ldr	r3, [r7, #4]
 810a5ba:	4a2c      	ldr	r2, [pc, #176]	@ (810a66c <TIM_OC1_SetConfig+0x10c>)
 810a5bc:	4293      	cmp	r3, r2
 810a5be:	d00f      	beq.n	810a5e0 <TIM_OC1_SetConfig+0x80>
 810a5c0:	687b      	ldr	r3, [r7, #4]
 810a5c2:	4a2b      	ldr	r2, [pc, #172]	@ (810a670 <TIM_OC1_SetConfig+0x110>)
 810a5c4:	4293      	cmp	r3, r2
 810a5c6:	d00b      	beq.n	810a5e0 <TIM_OC1_SetConfig+0x80>
 810a5c8:	687b      	ldr	r3, [r7, #4]
 810a5ca:	4a2a      	ldr	r2, [pc, #168]	@ (810a674 <TIM_OC1_SetConfig+0x114>)
 810a5cc:	4293      	cmp	r3, r2
 810a5ce:	d007      	beq.n	810a5e0 <TIM_OC1_SetConfig+0x80>
 810a5d0:	687b      	ldr	r3, [r7, #4]
 810a5d2:	4a29      	ldr	r2, [pc, #164]	@ (810a678 <TIM_OC1_SetConfig+0x118>)
 810a5d4:	4293      	cmp	r3, r2
 810a5d6:	d003      	beq.n	810a5e0 <TIM_OC1_SetConfig+0x80>
 810a5d8:	687b      	ldr	r3, [r7, #4]
 810a5da:	4a28      	ldr	r2, [pc, #160]	@ (810a67c <TIM_OC1_SetConfig+0x11c>)
 810a5dc:	4293      	cmp	r3, r2
 810a5de:	d10c      	bne.n	810a5fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810a5e0:	697b      	ldr	r3, [r7, #20]
 810a5e2:	f023 0308 	bic.w	r3, r3, #8
 810a5e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810a5e8:	683b      	ldr	r3, [r7, #0]
 810a5ea:	68db      	ldr	r3, [r3, #12]
 810a5ec:	697a      	ldr	r2, [r7, #20]
 810a5ee:	4313      	orrs	r3, r2
 810a5f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810a5f2:	697b      	ldr	r3, [r7, #20]
 810a5f4:	f023 0304 	bic.w	r3, r3, #4
 810a5f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a5fa:	687b      	ldr	r3, [r7, #4]
 810a5fc:	4a1b      	ldr	r2, [pc, #108]	@ (810a66c <TIM_OC1_SetConfig+0x10c>)
 810a5fe:	4293      	cmp	r3, r2
 810a600:	d00f      	beq.n	810a622 <TIM_OC1_SetConfig+0xc2>
 810a602:	687b      	ldr	r3, [r7, #4]
 810a604:	4a1a      	ldr	r2, [pc, #104]	@ (810a670 <TIM_OC1_SetConfig+0x110>)
 810a606:	4293      	cmp	r3, r2
 810a608:	d00b      	beq.n	810a622 <TIM_OC1_SetConfig+0xc2>
 810a60a:	687b      	ldr	r3, [r7, #4]
 810a60c:	4a19      	ldr	r2, [pc, #100]	@ (810a674 <TIM_OC1_SetConfig+0x114>)
 810a60e:	4293      	cmp	r3, r2
 810a610:	d007      	beq.n	810a622 <TIM_OC1_SetConfig+0xc2>
 810a612:	687b      	ldr	r3, [r7, #4]
 810a614:	4a18      	ldr	r2, [pc, #96]	@ (810a678 <TIM_OC1_SetConfig+0x118>)
 810a616:	4293      	cmp	r3, r2
 810a618:	d003      	beq.n	810a622 <TIM_OC1_SetConfig+0xc2>
 810a61a:	687b      	ldr	r3, [r7, #4]
 810a61c:	4a17      	ldr	r2, [pc, #92]	@ (810a67c <TIM_OC1_SetConfig+0x11c>)
 810a61e:	4293      	cmp	r3, r2
 810a620:	d111      	bne.n	810a646 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810a622:	693b      	ldr	r3, [r7, #16]
 810a624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810a62a:	693b      	ldr	r3, [r7, #16]
 810a62c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810a630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810a632:	683b      	ldr	r3, [r7, #0]
 810a634:	695b      	ldr	r3, [r3, #20]
 810a636:	693a      	ldr	r2, [r7, #16]
 810a638:	4313      	orrs	r3, r2
 810a63a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810a63c:	683b      	ldr	r3, [r7, #0]
 810a63e:	699b      	ldr	r3, [r3, #24]
 810a640:	693a      	ldr	r2, [r7, #16]
 810a642:	4313      	orrs	r3, r2
 810a644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a646:	687b      	ldr	r3, [r7, #4]
 810a648:	693a      	ldr	r2, [r7, #16]
 810a64a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a64c:	687b      	ldr	r3, [r7, #4]
 810a64e:	68fa      	ldr	r2, [r7, #12]
 810a650:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810a652:	683b      	ldr	r3, [r7, #0]
 810a654:	685a      	ldr	r2, [r3, #4]
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a65a:	687b      	ldr	r3, [r7, #4]
 810a65c:	697a      	ldr	r2, [r7, #20]
 810a65e:	621a      	str	r2, [r3, #32]
}
 810a660:	bf00      	nop
 810a662:	371c      	adds	r7, #28
 810a664:	46bd      	mov	sp, r7
 810a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a66a:	4770      	bx	lr
 810a66c:	40010000 	.word	0x40010000
 810a670:	40010400 	.word	0x40010400
 810a674:	40014000 	.word	0x40014000
 810a678:	40014400 	.word	0x40014400
 810a67c:	40014800 	.word	0x40014800

0810a680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a680:	b480      	push	{r7}
 810a682:	b087      	sub	sp, #28
 810a684:	af00      	add	r7, sp, #0
 810a686:	6078      	str	r0, [r7, #4]
 810a688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a68a:	687b      	ldr	r3, [r7, #4]
 810a68c:	6a1b      	ldr	r3, [r3, #32]
 810a68e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a690:	687b      	ldr	r3, [r7, #4]
 810a692:	6a1b      	ldr	r3, [r3, #32]
 810a694:	f023 0210 	bic.w	r2, r3, #16
 810a698:	687b      	ldr	r3, [r7, #4]
 810a69a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a69c:	687b      	ldr	r3, [r7, #4]
 810a69e:	685b      	ldr	r3, [r3, #4]
 810a6a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a6a2:	687b      	ldr	r3, [r7, #4]
 810a6a4:	699b      	ldr	r3, [r3, #24]
 810a6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810a6a8:	68fb      	ldr	r3, [r7, #12]
 810a6aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a6ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a6b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810a6b4:	68fb      	ldr	r3, [r7, #12]
 810a6b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a6ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a6bc:	683b      	ldr	r3, [r7, #0]
 810a6be:	681b      	ldr	r3, [r3, #0]
 810a6c0:	021b      	lsls	r3, r3, #8
 810a6c2:	68fa      	ldr	r2, [r7, #12]
 810a6c4:	4313      	orrs	r3, r2
 810a6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810a6c8:	697b      	ldr	r3, [r7, #20]
 810a6ca:	f023 0320 	bic.w	r3, r3, #32
 810a6ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810a6d0:	683b      	ldr	r3, [r7, #0]
 810a6d2:	689b      	ldr	r3, [r3, #8]
 810a6d4:	011b      	lsls	r3, r3, #4
 810a6d6:	697a      	ldr	r2, [r7, #20]
 810a6d8:	4313      	orrs	r3, r2
 810a6da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810a6dc:	687b      	ldr	r3, [r7, #4]
 810a6de:	4a28      	ldr	r2, [pc, #160]	@ (810a780 <TIM_OC2_SetConfig+0x100>)
 810a6e0:	4293      	cmp	r3, r2
 810a6e2:	d003      	beq.n	810a6ec <TIM_OC2_SetConfig+0x6c>
 810a6e4:	687b      	ldr	r3, [r7, #4]
 810a6e6:	4a27      	ldr	r2, [pc, #156]	@ (810a784 <TIM_OC2_SetConfig+0x104>)
 810a6e8:	4293      	cmp	r3, r2
 810a6ea:	d10d      	bne.n	810a708 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810a6ec:	697b      	ldr	r3, [r7, #20]
 810a6ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a6f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810a6f4:	683b      	ldr	r3, [r7, #0]
 810a6f6:	68db      	ldr	r3, [r3, #12]
 810a6f8:	011b      	lsls	r3, r3, #4
 810a6fa:	697a      	ldr	r2, [r7, #20]
 810a6fc:	4313      	orrs	r3, r2
 810a6fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810a700:	697b      	ldr	r3, [r7, #20]
 810a702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810a706:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a708:	687b      	ldr	r3, [r7, #4]
 810a70a:	4a1d      	ldr	r2, [pc, #116]	@ (810a780 <TIM_OC2_SetConfig+0x100>)
 810a70c:	4293      	cmp	r3, r2
 810a70e:	d00f      	beq.n	810a730 <TIM_OC2_SetConfig+0xb0>
 810a710:	687b      	ldr	r3, [r7, #4]
 810a712:	4a1c      	ldr	r2, [pc, #112]	@ (810a784 <TIM_OC2_SetConfig+0x104>)
 810a714:	4293      	cmp	r3, r2
 810a716:	d00b      	beq.n	810a730 <TIM_OC2_SetConfig+0xb0>
 810a718:	687b      	ldr	r3, [r7, #4]
 810a71a:	4a1b      	ldr	r2, [pc, #108]	@ (810a788 <TIM_OC2_SetConfig+0x108>)
 810a71c:	4293      	cmp	r3, r2
 810a71e:	d007      	beq.n	810a730 <TIM_OC2_SetConfig+0xb0>
 810a720:	687b      	ldr	r3, [r7, #4]
 810a722:	4a1a      	ldr	r2, [pc, #104]	@ (810a78c <TIM_OC2_SetConfig+0x10c>)
 810a724:	4293      	cmp	r3, r2
 810a726:	d003      	beq.n	810a730 <TIM_OC2_SetConfig+0xb0>
 810a728:	687b      	ldr	r3, [r7, #4]
 810a72a:	4a19      	ldr	r2, [pc, #100]	@ (810a790 <TIM_OC2_SetConfig+0x110>)
 810a72c:	4293      	cmp	r3, r2
 810a72e:	d113      	bne.n	810a758 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810a730:	693b      	ldr	r3, [r7, #16]
 810a732:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810a736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810a738:	693b      	ldr	r3, [r7, #16]
 810a73a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810a73e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810a740:	683b      	ldr	r3, [r7, #0]
 810a742:	695b      	ldr	r3, [r3, #20]
 810a744:	009b      	lsls	r3, r3, #2
 810a746:	693a      	ldr	r2, [r7, #16]
 810a748:	4313      	orrs	r3, r2
 810a74a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810a74c:	683b      	ldr	r3, [r7, #0]
 810a74e:	699b      	ldr	r3, [r3, #24]
 810a750:	009b      	lsls	r3, r3, #2
 810a752:	693a      	ldr	r2, [r7, #16]
 810a754:	4313      	orrs	r3, r2
 810a756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a758:	687b      	ldr	r3, [r7, #4]
 810a75a:	693a      	ldr	r2, [r7, #16]
 810a75c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a75e:	687b      	ldr	r3, [r7, #4]
 810a760:	68fa      	ldr	r2, [r7, #12]
 810a762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810a764:	683b      	ldr	r3, [r7, #0]
 810a766:	685a      	ldr	r2, [r3, #4]
 810a768:	687b      	ldr	r3, [r7, #4]
 810a76a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a76c:	687b      	ldr	r3, [r7, #4]
 810a76e:	697a      	ldr	r2, [r7, #20]
 810a770:	621a      	str	r2, [r3, #32]
}
 810a772:	bf00      	nop
 810a774:	371c      	adds	r7, #28
 810a776:	46bd      	mov	sp, r7
 810a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a77c:	4770      	bx	lr
 810a77e:	bf00      	nop
 810a780:	40010000 	.word	0x40010000
 810a784:	40010400 	.word	0x40010400
 810a788:	40014000 	.word	0x40014000
 810a78c:	40014400 	.word	0x40014400
 810a790:	40014800 	.word	0x40014800

0810a794 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a794:	b480      	push	{r7}
 810a796:	b087      	sub	sp, #28
 810a798:	af00      	add	r7, sp, #0
 810a79a:	6078      	str	r0, [r7, #4]
 810a79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a79e:	687b      	ldr	r3, [r7, #4]
 810a7a0:	6a1b      	ldr	r3, [r3, #32]
 810a7a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810a7a4:	687b      	ldr	r3, [r7, #4]
 810a7a6:	6a1b      	ldr	r3, [r3, #32]
 810a7a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810a7ac:	687b      	ldr	r3, [r7, #4]
 810a7ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a7b0:	687b      	ldr	r3, [r7, #4]
 810a7b2:	685b      	ldr	r3, [r3, #4]
 810a7b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a7b6:	687b      	ldr	r3, [r7, #4]
 810a7b8:	69db      	ldr	r3, [r3, #28]
 810a7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810a7bc:	68fb      	ldr	r3, [r7, #12]
 810a7be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a7c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810a7c8:	68fb      	ldr	r3, [r7, #12]
 810a7ca:	f023 0303 	bic.w	r3, r3, #3
 810a7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a7d0:	683b      	ldr	r3, [r7, #0]
 810a7d2:	681b      	ldr	r3, [r3, #0]
 810a7d4:	68fa      	ldr	r2, [r7, #12]
 810a7d6:	4313      	orrs	r3, r2
 810a7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810a7da:	697b      	ldr	r3, [r7, #20]
 810a7dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810a7e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810a7e2:	683b      	ldr	r3, [r7, #0]
 810a7e4:	689b      	ldr	r3, [r3, #8]
 810a7e6:	021b      	lsls	r3, r3, #8
 810a7e8:	697a      	ldr	r2, [r7, #20]
 810a7ea:	4313      	orrs	r3, r2
 810a7ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810a7ee:	687b      	ldr	r3, [r7, #4]
 810a7f0:	4a27      	ldr	r2, [pc, #156]	@ (810a890 <TIM_OC3_SetConfig+0xfc>)
 810a7f2:	4293      	cmp	r3, r2
 810a7f4:	d003      	beq.n	810a7fe <TIM_OC3_SetConfig+0x6a>
 810a7f6:	687b      	ldr	r3, [r7, #4]
 810a7f8:	4a26      	ldr	r2, [pc, #152]	@ (810a894 <TIM_OC3_SetConfig+0x100>)
 810a7fa:	4293      	cmp	r3, r2
 810a7fc:	d10d      	bne.n	810a81a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810a7fe:	697b      	ldr	r3, [r7, #20]
 810a800:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810a804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810a806:	683b      	ldr	r3, [r7, #0]
 810a808:	68db      	ldr	r3, [r3, #12]
 810a80a:	021b      	lsls	r3, r3, #8
 810a80c:	697a      	ldr	r2, [r7, #20]
 810a80e:	4313      	orrs	r3, r2
 810a810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810a812:	697b      	ldr	r3, [r7, #20]
 810a814:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810a818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a81a:	687b      	ldr	r3, [r7, #4]
 810a81c:	4a1c      	ldr	r2, [pc, #112]	@ (810a890 <TIM_OC3_SetConfig+0xfc>)
 810a81e:	4293      	cmp	r3, r2
 810a820:	d00f      	beq.n	810a842 <TIM_OC3_SetConfig+0xae>
 810a822:	687b      	ldr	r3, [r7, #4]
 810a824:	4a1b      	ldr	r2, [pc, #108]	@ (810a894 <TIM_OC3_SetConfig+0x100>)
 810a826:	4293      	cmp	r3, r2
 810a828:	d00b      	beq.n	810a842 <TIM_OC3_SetConfig+0xae>
 810a82a:	687b      	ldr	r3, [r7, #4]
 810a82c:	4a1a      	ldr	r2, [pc, #104]	@ (810a898 <TIM_OC3_SetConfig+0x104>)
 810a82e:	4293      	cmp	r3, r2
 810a830:	d007      	beq.n	810a842 <TIM_OC3_SetConfig+0xae>
 810a832:	687b      	ldr	r3, [r7, #4]
 810a834:	4a19      	ldr	r2, [pc, #100]	@ (810a89c <TIM_OC3_SetConfig+0x108>)
 810a836:	4293      	cmp	r3, r2
 810a838:	d003      	beq.n	810a842 <TIM_OC3_SetConfig+0xae>
 810a83a:	687b      	ldr	r3, [r7, #4]
 810a83c:	4a18      	ldr	r2, [pc, #96]	@ (810a8a0 <TIM_OC3_SetConfig+0x10c>)
 810a83e:	4293      	cmp	r3, r2
 810a840:	d113      	bne.n	810a86a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810a842:	693b      	ldr	r3, [r7, #16]
 810a844:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810a848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810a84a:	693b      	ldr	r3, [r7, #16]
 810a84c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810a850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810a852:	683b      	ldr	r3, [r7, #0]
 810a854:	695b      	ldr	r3, [r3, #20]
 810a856:	011b      	lsls	r3, r3, #4
 810a858:	693a      	ldr	r2, [r7, #16]
 810a85a:	4313      	orrs	r3, r2
 810a85c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810a85e:	683b      	ldr	r3, [r7, #0]
 810a860:	699b      	ldr	r3, [r3, #24]
 810a862:	011b      	lsls	r3, r3, #4
 810a864:	693a      	ldr	r2, [r7, #16]
 810a866:	4313      	orrs	r3, r2
 810a868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a86a:	687b      	ldr	r3, [r7, #4]
 810a86c:	693a      	ldr	r2, [r7, #16]
 810a86e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a870:	687b      	ldr	r3, [r7, #4]
 810a872:	68fa      	ldr	r2, [r7, #12]
 810a874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810a876:	683b      	ldr	r3, [r7, #0]
 810a878:	685a      	ldr	r2, [r3, #4]
 810a87a:	687b      	ldr	r3, [r7, #4]
 810a87c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a87e:	687b      	ldr	r3, [r7, #4]
 810a880:	697a      	ldr	r2, [r7, #20]
 810a882:	621a      	str	r2, [r3, #32]
}
 810a884:	bf00      	nop
 810a886:	371c      	adds	r7, #28
 810a888:	46bd      	mov	sp, r7
 810a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a88e:	4770      	bx	lr
 810a890:	40010000 	.word	0x40010000
 810a894:	40010400 	.word	0x40010400
 810a898:	40014000 	.word	0x40014000
 810a89c:	40014400 	.word	0x40014400
 810a8a0:	40014800 	.word	0x40014800

0810a8a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a8a4:	b480      	push	{r7}
 810a8a6:	b087      	sub	sp, #28
 810a8a8:	af00      	add	r7, sp, #0
 810a8aa:	6078      	str	r0, [r7, #4]
 810a8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a8ae:	687b      	ldr	r3, [r7, #4]
 810a8b0:	6a1b      	ldr	r3, [r3, #32]
 810a8b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810a8b4:	687b      	ldr	r3, [r7, #4]
 810a8b6:	6a1b      	ldr	r3, [r3, #32]
 810a8b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810a8bc:	687b      	ldr	r3, [r7, #4]
 810a8be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a8c0:	687b      	ldr	r3, [r7, #4]
 810a8c2:	685b      	ldr	r3, [r3, #4]
 810a8c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a8c6:	687b      	ldr	r3, [r7, #4]
 810a8c8:	69db      	ldr	r3, [r3, #28]
 810a8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810a8cc:	68fb      	ldr	r3, [r7, #12]
 810a8ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a8d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a8d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810a8d8:	68fb      	ldr	r3, [r7, #12]
 810a8da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a8de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a8e0:	683b      	ldr	r3, [r7, #0]
 810a8e2:	681b      	ldr	r3, [r3, #0]
 810a8e4:	021b      	lsls	r3, r3, #8
 810a8e6:	68fa      	ldr	r2, [r7, #12]
 810a8e8:	4313      	orrs	r3, r2
 810a8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810a8ec:	693b      	ldr	r3, [r7, #16]
 810a8ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810a8f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810a8f4:	683b      	ldr	r3, [r7, #0]
 810a8f6:	689b      	ldr	r3, [r3, #8]
 810a8f8:	031b      	lsls	r3, r3, #12
 810a8fa:	693a      	ldr	r2, [r7, #16]
 810a8fc:	4313      	orrs	r3, r2
 810a8fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a900:	687b      	ldr	r3, [r7, #4]
 810a902:	4a18      	ldr	r2, [pc, #96]	@ (810a964 <TIM_OC4_SetConfig+0xc0>)
 810a904:	4293      	cmp	r3, r2
 810a906:	d00f      	beq.n	810a928 <TIM_OC4_SetConfig+0x84>
 810a908:	687b      	ldr	r3, [r7, #4]
 810a90a:	4a17      	ldr	r2, [pc, #92]	@ (810a968 <TIM_OC4_SetConfig+0xc4>)
 810a90c:	4293      	cmp	r3, r2
 810a90e:	d00b      	beq.n	810a928 <TIM_OC4_SetConfig+0x84>
 810a910:	687b      	ldr	r3, [r7, #4]
 810a912:	4a16      	ldr	r2, [pc, #88]	@ (810a96c <TIM_OC4_SetConfig+0xc8>)
 810a914:	4293      	cmp	r3, r2
 810a916:	d007      	beq.n	810a928 <TIM_OC4_SetConfig+0x84>
 810a918:	687b      	ldr	r3, [r7, #4]
 810a91a:	4a15      	ldr	r2, [pc, #84]	@ (810a970 <TIM_OC4_SetConfig+0xcc>)
 810a91c:	4293      	cmp	r3, r2
 810a91e:	d003      	beq.n	810a928 <TIM_OC4_SetConfig+0x84>
 810a920:	687b      	ldr	r3, [r7, #4]
 810a922:	4a14      	ldr	r2, [pc, #80]	@ (810a974 <TIM_OC4_SetConfig+0xd0>)
 810a924:	4293      	cmp	r3, r2
 810a926:	d109      	bne.n	810a93c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810a928:	697b      	ldr	r3, [r7, #20]
 810a92a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810a92e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810a930:	683b      	ldr	r3, [r7, #0]
 810a932:	695b      	ldr	r3, [r3, #20]
 810a934:	019b      	lsls	r3, r3, #6
 810a936:	697a      	ldr	r2, [r7, #20]
 810a938:	4313      	orrs	r3, r2
 810a93a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a93c:	687b      	ldr	r3, [r7, #4]
 810a93e:	697a      	ldr	r2, [r7, #20]
 810a940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a942:	687b      	ldr	r3, [r7, #4]
 810a944:	68fa      	ldr	r2, [r7, #12]
 810a946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810a948:	683b      	ldr	r3, [r7, #0]
 810a94a:	685a      	ldr	r2, [r3, #4]
 810a94c:	687b      	ldr	r3, [r7, #4]
 810a94e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a950:	687b      	ldr	r3, [r7, #4]
 810a952:	693a      	ldr	r2, [r7, #16]
 810a954:	621a      	str	r2, [r3, #32]
}
 810a956:	bf00      	nop
 810a958:	371c      	adds	r7, #28
 810a95a:	46bd      	mov	sp, r7
 810a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a960:	4770      	bx	lr
 810a962:	bf00      	nop
 810a964:	40010000 	.word	0x40010000
 810a968:	40010400 	.word	0x40010400
 810a96c:	40014000 	.word	0x40014000
 810a970:	40014400 	.word	0x40014400
 810a974:	40014800 	.word	0x40014800

0810a978 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810a978:	b480      	push	{r7}
 810a97a:	b087      	sub	sp, #28
 810a97c:	af00      	add	r7, sp, #0
 810a97e:	6078      	str	r0, [r7, #4]
 810a980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a982:	687b      	ldr	r3, [r7, #4]
 810a984:	6a1b      	ldr	r3, [r3, #32]
 810a986:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810a988:	687b      	ldr	r3, [r7, #4]
 810a98a:	6a1b      	ldr	r3, [r3, #32]
 810a98c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810a990:	687b      	ldr	r3, [r7, #4]
 810a992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a994:	687b      	ldr	r3, [r7, #4]
 810a996:	685b      	ldr	r3, [r3, #4]
 810a998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810a99a:	687b      	ldr	r3, [r7, #4]
 810a99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810a9a0:	68fb      	ldr	r3, [r7, #12]
 810a9a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a9a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a9aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a9ac:	683b      	ldr	r3, [r7, #0]
 810a9ae:	681b      	ldr	r3, [r3, #0]
 810a9b0:	68fa      	ldr	r2, [r7, #12]
 810a9b2:	4313      	orrs	r3, r2
 810a9b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810a9b6:	693b      	ldr	r3, [r7, #16]
 810a9b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810a9bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810a9be:	683b      	ldr	r3, [r7, #0]
 810a9c0:	689b      	ldr	r3, [r3, #8]
 810a9c2:	041b      	lsls	r3, r3, #16
 810a9c4:	693a      	ldr	r2, [r7, #16]
 810a9c6:	4313      	orrs	r3, r2
 810a9c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a9ca:	687b      	ldr	r3, [r7, #4]
 810a9cc:	4a17      	ldr	r2, [pc, #92]	@ (810aa2c <TIM_OC5_SetConfig+0xb4>)
 810a9ce:	4293      	cmp	r3, r2
 810a9d0:	d00f      	beq.n	810a9f2 <TIM_OC5_SetConfig+0x7a>
 810a9d2:	687b      	ldr	r3, [r7, #4]
 810a9d4:	4a16      	ldr	r2, [pc, #88]	@ (810aa30 <TIM_OC5_SetConfig+0xb8>)
 810a9d6:	4293      	cmp	r3, r2
 810a9d8:	d00b      	beq.n	810a9f2 <TIM_OC5_SetConfig+0x7a>
 810a9da:	687b      	ldr	r3, [r7, #4]
 810a9dc:	4a15      	ldr	r2, [pc, #84]	@ (810aa34 <TIM_OC5_SetConfig+0xbc>)
 810a9de:	4293      	cmp	r3, r2
 810a9e0:	d007      	beq.n	810a9f2 <TIM_OC5_SetConfig+0x7a>
 810a9e2:	687b      	ldr	r3, [r7, #4]
 810a9e4:	4a14      	ldr	r2, [pc, #80]	@ (810aa38 <TIM_OC5_SetConfig+0xc0>)
 810a9e6:	4293      	cmp	r3, r2
 810a9e8:	d003      	beq.n	810a9f2 <TIM_OC5_SetConfig+0x7a>
 810a9ea:	687b      	ldr	r3, [r7, #4]
 810a9ec:	4a13      	ldr	r2, [pc, #76]	@ (810aa3c <TIM_OC5_SetConfig+0xc4>)
 810a9ee:	4293      	cmp	r3, r2
 810a9f0:	d109      	bne.n	810aa06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810a9f2:	697b      	ldr	r3, [r7, #20]
 810a9f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a9f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810a9fa:	683b      	ldr	r3, [r7, #0]
 810a9fc:	695b      	ldr	r3, [r3, #20]
 810a9fe:	021b      	lsls	r3, r3, #8
 810aa00:	697a      	ldr	r2, [r7, #20]
 810aa02:	4313      	orrs	r3, r2
 810aa04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810aa06:	687b      	ldr	r3, [r7, #4]
 810aa08:	697a      	ldr	r2, [r7, #20]
 810aa0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810aa0c:	687b      	ldr	r3, [r7, #4]
 810aa0e:	68fa      	ldr	r2, [r7, #12]
 810aa10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810aa12:	683b      	ldr	r3, [r7, #0]
 810aa14:	685a      	ldr	r2, [r3, #4]
 810aa16:	687b      	ldr	r3, [r7, #4]
 810aa18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810aa1a:	687b      	ldr	r3, [r7, #4]
 810aa1c:	693a      	ldr	r2, [r7, #16]
 810aa1e:	621a      	str	r2, [r3, #32]
}
 810aa20:	bf00      	nop
 810aa22:	371c      	adds	r7, #28
 810aa24:	46bd      	mov	sp, r7
 810aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa2a:	4770      	bx	lr
 810aa2c:	40010000 	.word	0x40010000
 810aa30:	40010400 	.word	0x40010400
 810aa34:	40014000 	.word	0x40014000
 810aa38:	40014400 	.word	0x40014400
 810aa3c:	40014800 	.word	0x40014800

0810aa40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810aa40:	b480      	push	{r7}
 810aa42:	b087      	sub	sp, #28
 810aa44:	af00      	add	r7, sp, #0
 810aa46:	6078      	str	r0, [r7, #4]
 810aa48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810aa4a:	687b      	ldr	r3, [r7, #4]
 810aa4c:	6a1b      	ldr	r3, [r3, #32]
 810aa4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810aa50:	687b      	ldr	r3, [r7, #4]
 810aa52:	6a1b      	ldr	r3, [r3, #32]
 810aa54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810aa58:	687b      	ldr	r3, [r7, #4]
 810aa5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810aa5c:	687b      	ldr	r3, [r7, #4]
 810aa5e:	685b      	ldr	r3, [r3, #4]
 810aa60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810aa62:	687b      	ldr	r3, [r7, #4]
 810aa64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aa66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810aa68:	68fb      	ldr	r3, [r7, #12]
 810aa6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810aa6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810aa72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810aa74:	683b      	ldr	r3, [r7, #0]
 810aa76:	681b      	ldr	r3, [r3, #0]
 810aa78:	021b      	lsls	r3, r3, #8
 810aa7a:	68fa      	ldr	r2, [r7, #12]
 810aa7c:	4313      	orrs	r3, r2
 810aa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810aa80:	693b      	ldr	r3, [r7, #16]
 810aa82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810aa86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810aa88:	683b      	ldr	r3, [r7, #0]
 810aa8a:	689b      	ldr	r3, [r3, #8]
 810aa8c:	051b      	lsls	r3, r3, #20
 810aa8e:	693a      	ldr	r2, [r7, #16]
 810aa90:	4313      	orrs	r3, r2
 810aa92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810aa94:	687b      	ldr	r3, [r7, #4]
 810aa96:	4a18      	ldr	r2, [pc, #96]	@ (810aaf8 <TIM_OC6_SetConfig+0xb8>)
 810aa98:	4293      	cmp	r3, r2
 810aa9a:	d00f      	beq.n	810aabc <TIM_OC6_SetConfig+0x7c>
 810aa9c:	687b      	ldr	r3, [r7, #4]
 810aa9e:	4a17      	ldr	r2, [pc, #92]	@ (810aafc <TIM_OC6_SetConfig+0xbc>)
 810aaa0:	4293      	cmp	r3, r2
 810aaa2:	d00b      	beq.n	810aabc <TIM_OC6_SetConfig+0x7c>
 810aaa4:	687b      	ldr	r3, [r7, #4]
 810aaa6:	4a16      	ldr	r2, [pc, #88]	@ (810ab00 <TIM_OC6_SetConfig+0xc0>)
 810aaa8:	4293      	cmp	r3, r2
 810aaaa:	d007      	beq.n	810aabc <TIM_OC6_SetConfig+0x7c>
 810aaac:	687b      	ldr	r3, [r7, #4]
 810aaae:	4a15      	ldr	r2, [pc, #84]	@ (810ab04 <TIM_OC6_SetConfig+0xc4>)
 810aab0:	4293      	cmp	r3, r2
 810aab2:	d003      	beq.n	810aabc <TIM_OC6_SetConfig+0x7c>
 810aab4:	687b      	ldr	r3, [r7, #4]
 810aab6:	4a14      	ldr	r2, [pc, #80]	@ (810ab08 <TIM_OC6_SetConfig+0xc8>)
 810aab8:	4293      	cmp	r3, r2
 810aaba:	d109      	bne.n	810aad0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810aabc:	697b      	ldr	r3, [r7, #20]
 810aabe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810aac2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810aac4:	683b      	ldr	r3, [r7, #0]
 810aac6:	695b      	ldr	r3, [r3, #20]
 810aac8:	029b      	lsls	r3, r3, #10
 810aaca:	697a      	ldr	r2, [r7, #20]
 810aacc:	4313      	orrs	r3, r2
 810aace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810aad0:	687b      	ldr	r3, [r7, #4]
 810aad2:	697a      	ldr	r2, [r7, #20]
 810aad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810aad6:	687b      	ldr	r3, [r7, #4]
 810aad8:	68fa      	ldr	r2, [r7, #12]
 810aada:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810aadc:	683b      	ldr	r3, [r7, #0]
 810aade:	685a      	ldr	r2, [r3, #4]
 810aae0:	687b      	ldr	r3, [r7, #4]
 810aae2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810aae4:	687b      	ldr	r3, [r7, #4]
 810aae6:	693a      	ldr	r2, [r7, #16]
 810aae8:	621a      	str	r2, [r3, #32]
}
 810aaea:	bf00      	nop
 810aaec:	371c      	adds	r7, #28
 810aaee:	46bd      	mov	sp, r7
 810aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aaf4:	4770      	bx	lr
 810aaf6:	bf00      	nop
 810aaf8:	40010000 	.word	0x40010000
 810aafc:	40010400 	.word	0x40010400
 810ab00:	40014000 	.word	0x40014000
 810ab04:	40014400 	.word	0x40014400
 810ab08:	40014800 	.word	0x40014800

0810ab0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810ab0c:	b480      	push	{r7}
 810ab0e:	b085      	sub	sp, #20
 810ab10:	af00      	add	r7, sp, #0
 810ab12:	6078      	str	r0, [r7, #4]
 810ab14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810ab16:	687b      	ldr	r3, [r7, #4]
 810ab18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810ab1c:	2b01      	cmp	r3, #1
 810ab1e:	d101      	bne.n	810ab24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810ab20:	2302      	movs	r3, #2
 810ab22:	e06d      	b.n	810ac00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810ab24:	687b      	ldr	r3, [r7, #4]
 810ab26:	2201      	movs	r2, #1
 810ab28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ab2c:	687b      	ldr	r3, [r7, #4]
 810ab2e:	2202      	movs	r2, #2
 810ab30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810ab34:	687b      	ldr	r3, [r7, #4]
 810ab36:	681b      	ldr	r3, [r3, #0]
 810ab38:	685b      	ldr	r3, [r3, #4]
 810ab3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810ab3c:	687b      	ldr	r3, [r7, #4]
 810ab3e:	681b      	ldr	r3, [r3, #0]
 810ab40:	689b      	ldr	r3, [r3, #8]
 810ab42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810ab44:	687b      	ldr	r3, [r7, #4]
 810ab46:	681b      	ldr	r3, [r3, #0]
 810ab48:	4a30      	ldr	r2, [pc, #192]	@ (810ac0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810ab4a:	4293      	cmp	r3, r2
 810ab4c:	d004      	beq.n	810ab58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810ab4e:	687b      	ldr	r3, [r7, #4]
 810ab50:	681b      	ldr	r3, [r3, #0]
 810ab52:	4a2f      	ldr	r2, [pc, #188]	@ (810ac10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810ab54:	4293      	cmp	r3, r2
 810ab56:	d108      	bne.n	810ab6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810ab58:	68fb      	ldr	r3, [r7, #12]
 810ab5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810ab5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810ab60:	683b      	ldr	r3, [r7, #0]
 810ab62:	685b      	ldr	r3, [r3, #4]
 810ab64:	68fa      	ldr	r2, [r7, #12]
 810ab66:	4313      	orrs	r3, r2
 810ab68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810ab6a:	68fb      	ldr	r3, [r7, #12]
 810ab6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810ab70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810ab72:	683b      	ldr	r3, [r7, #0]
 810ab74:	681b      	ldr	r3, [r3, #0]
 810ab76:	68fa      	ldr	r2, [r7, #12]
 810ab78:	4313      	orrs	r3, r2
 810ab7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810ab7c:	687b      	ldr	r3, [r7, #4]
 810ab7e:	681b      	ldr	r3, [r3, #0]
 810ab80:	68fa      	ldr	r2, [r7, #12]
 810ab82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ab84:	687b      	ldr	r3, [r7, #4]
 810ab86:	681b      	ldr	r3, [r3, #0]
 810ab88:	4a20      	ldr	r2, [pc, #128]	@ (810ac0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810ab8a:	4293      	cmp	r3, r2
 810ab8c:	d022      	beq.n	810abd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ab8e:	687b      	ldr	r3, [r7, #4]
 810ab90:	681b      	ldr	r3, [r3, #0]
 810ab92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ab96:	d01d      	beq.n	810abd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810ab98:	687b      	ldr	r3, [r7, #4]
 810ab9a:	681b      	ldr	r3, [r3, #0]
 810ab9c:	4a1d      	ldr	r2, [pc, #116]	@ (810ac14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810ab9e:	4293      	cmp	r3, r2
 810aba0:	d018      	beq.n	810abd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810aba2:	687b      	ldr	r3, [r7, #4]
 810aba4:	681b      	ldr	r3, [r3, #0]
 810aba6:	4a1c      	ldr	r2, [pc, #112]	@ (810ac18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810aba8:	4293      	cmp	r3, r2
 810abaa:	d013      	beq.n	810abd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810abac:	687b      	ldr	r3, [r7, #4]
 810abae:	681b      	ldr	r3, [r3, #0]
 810abb0:	4a1a      	ldr	r2, [pc, #104]	@ (810ac1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810abb2:	4293      	cmp	r3, r2
 810abb4:	d00e      	beq.n	810abd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810abb6:	687b      	ldr	r3, [r7, #4]
 810abb8:	681b      	ldr	r3, [r3, #0]
 810abba:	4a15      	ldr	r2, [pc, #84]	@ (810ac10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810abbc:	4293      	cmp	r3, r2
 810abbe:	d009      	beq.n	810abd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810abc0:	687b      	ldr	r3, [r7, #4]
 810abc2:	681b      	ldr	r3, [r3, #0]
 810abc4:	4a16      	ldr	r2, [pc, #88]	@ (810ac20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810abc6:	4293      	cmp	r3, r2
 810abc8:	d004      	beq.n	810abd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810abca:	687b      	ldr	r3, [r7, #4]
 810abcc:	681b      	ldr	r3, [r3, #0]
 810abce:	4a15      	ldr	r2, [pc, #84]	@ (810ac24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810abd0:	4293      	cmp	r3, r2
 810abd2:	d10c      	bne.n	810abee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810abd4:	68bb      	ldr	r3, [r7, #8]
 810abd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810abda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810abdc:	683b      	ldr	r3, [r7, #0]
 810abde:	689b      	ldr	r3, [r3, #8]
 810abe0:	68ba      	ldr	r2, [r7, #8]
 810abe2:	4313      	orrs	r3, r2
 810abe4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810abe6:	687b      	ldr	r3, [r7, #4]
 810abe8:	681b      	ldr	r3, [r3, #0]
 810abea:	68ba      	ldr	r2, [r7, #8]
 810abec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810abee:	687b      	ldr	r3, [r7, #4]
 810abf0:	2201      	movs	r2, #1
 810abf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810abf6:	687b      	ldr	r3, [r7, #4]
 810abf8:	2200      	movs	r2, #0
 810abfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810abfe:	2300      	movs	r3, #0
}
 810ac00:	4618      	mov	r0, r3
 810ac02:	3714      	adds	r7, #20
 810ac04:	46bd      	mov	sp, r7
 810ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac0a:	4770      	bx	lr
 810ac0c:	40010000 	.word	0x40010000
 810ac10:	40010400 	.word	0x40010400
 810ac14:	40000400 	.word	0x40000400
 810ac18:	40000800 	.word	0x40000800
 810ac1c:	40000c00 	.word	0x40000c00
 810ac20:	40001800 	.word	0x40001800
 810ac24:	40014000 	.word	0x40014000

0810ac28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810ac28:	b480      	push	{r7}
 810ac2a:	b085      	sub	sp, #20
 810ac2c:	af00      	add	r7, sp, #0
 810ac2e:	6078      	str	r0, [r7, #4]
 810ac30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810ac32:	2300      	movs	r3, #0
 810ac34:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810ac36:	687b      	ldr	r3, [r7, #4]
 810ac38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810ac3c:	2b01      	cmp	r3, #1
 810ac3e:	d101      	bne.n	810ac44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810ac40:	2302      	movs	r3, #2
 810ac42:	e065      	b.n	810ad10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810ac44:	687b      	ldr	r3, [r7, #4]
 810ac46:	2201      	movs	r2, #1
 810ac48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810ac4c:	68fb      	ldr	r3, [r7, #12]
 810ac4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810ac52:	683b      	ldr	r3, [r7, #0]
 810ac54:	68db      	ldr	r3, [r3, #12]
 810ac56:	4313      	orrs	r3, r2
 810ac58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810ac5a:	68fb      	ldr	r3, [r7, #12]
 810ac5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810ac60:	683b      	ldr	r3, [r7, #0]
 810ac62:	689b      	ldr	r3, [r3, #8]
 810ac64:	4313      	orrs	r3, r2
 810ac66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810ac68:	68fb      	ldr	r3, [r7, #12]
 810ac6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810ac6e:	683b      	ldr	r3, [r7, #0]
 810ac70:	685b      	ldr	r3, [r3, #4]
 810ac72:	4313      	orrs	r3, r2
 810ac74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810ac76:	68fb      	ldr	r3, [r7, #12]
 810ac78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810ac7c:	683b      	ldr	r3, [r7, #0]
 810ac7e:	681b      	ldr	r3, [r3, #0]
 810ac80:	4313      	orrs	r3, r2
 810ac82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810ac84:	68fb      	ldr	r3, [r7, #12]
 810ac86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810ac8a:	683b      	ldr	r3, [r7, #0]
 810ac8c:	691b      	ldr	r3, [r3, #16]
 810ac8e:	4313      	orrs	r3, r2
 810ac90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810ac92:	68fb      	ldr	r3, [r7, #12]
 810ac94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810ac98:	683b      	ldr	r3, [r7, #0]
 810ac9a:	695b      	ldr	r3, [r3, #20]
 810ac9c:	4313      	orrs	r3, r2
 810ac9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810aca0:	68fb      	ldr	r3, [r7, #12]
 810aca2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810aca6:	683b      	ldr	r3, [r7, #0]
 810aca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810acaa:	4313      	orrs	r3, r2
 810acac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810acae:	68fb      	ldr	r3, [r7, #12]
 810acb0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810acb4:	683b      	ldr	r3, [r7, #0]
 810acb6:	699b      	ldr	r3, [r3, #24]
 810acb8:	041b      	lsls	r3, r3, #16
 810acba:	4313      	orrs	r3, r2
 810acbc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810acbe:	687b      	ldr	r3, [r7, #4]
 810acc0:	681b      	ldr	r3, [r3, #0]
 810acc2:	4a16      	ldr	r2, [pc, #88]	@ (810ad1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810acc4:	4293      	cmp	r3, r2
 810acc6:	d004      	beq.n	810acd2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810acc8:	687b      	ldr	r3, [r7, #4]
 810acca:	681b      	ldr	r3, [r3, #0]
 810accc:	4a14      	ldr	r2, [pc, #80]	@ (810ad20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810acce:	4293      	cmp	r3, r2
 810acd0:	d115      	bne.n	810acfe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810acd2:	68fb      	ldr	r3, [r7, #12]
 810acd4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810acd8:	683b      	ldr	r3, [r7, #0]
 810acda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810acdc:	051b      	lsls	r3, r3, #20
 810acde:	4313      	orrs	r3, r2
 810ace0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810ace2:	68fb      	ldr	r3, [r7, #12]
 810ace4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810ace8:	683b      	ldr	r3, [r7, #0]
 810acea:	69db      	ldr	r3, [r3, #28]
 810acec:	4313      	orrs	r3, r2
 810acee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810acf0:	68fb      	ldr	r3, [r7, #12]
 810acf2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810acf6:	683b      	ldr	r3, [r7, #0]
 810acf8:	6a1b      	ldr	r3, [r3, #32]
 810acfa:	4313      	orrs	r3, r2
 810acfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810acfe:	687b      	ldr	r3, [r7, #4]
 810ad00:	681b      	ldr	r3, [r3, #0]
 810ad02:	68fa      	ldr	r2, [r7, #12]
 810ad04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810ad06:	687b      	ldr	r3, [r7, #4]
 810ad08:	2200      	movs	r2, #0
 810ad0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810ad0e:	2300      	movs	r3, #0
}
 810ad10:	4618      	mov	r0, r3
 810ad12:	3714      	adds	r7, #20
 810ad14:	46bd      	mov	sp, r7
 810ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad1a:	4770      	bx	lr
 810ad1c:	40010000 	.word	0x40010000
 810ad20:	40010400 	.word	0x40010400

0810ad24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810ad24:	b480      	push	{r7}
 810ad26:	b083      	sub	sp, #12
 810ad28:	af00      	add	r7, sp, #0
 810ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810ad2c:	bf00      	nop
 810ad2e:	370c      	adds	r7, #12
 810ad30:	46bd      	mov	sp, r7
 810ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad36:	4770      	bx	lr

0810ad38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810ad38:	b480      	push	{r7}
 810ad3a:	b083      	sub	sp, #12
 810ad3c:	af00      	add	r7, sp, #0
 810ad3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810ad40:	bf00      	nop
 810ad42:	370c      	adds	r7, #12
 810ad44:	46bd      	mov	sp, r7
 810ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad4a:	4770      	bx	lr

0810ad4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810ad4c:	b480      	push	{r7}
 810ad4e:	b083      	sub	sp, #12
 810ad50:	af00      	add	r7, sp, #0
 810ad52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810ad54:	bf00      	nop
 810ad56:	370c      	adds	r7, #12
 810ad58:	46bd      	mov	sp, r7
 810ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad5e:	4770      	bx	lr

0810ad60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810ad60:	b580      	push	{r7, lr}
 810ad62:	b082      	sub	sp, #8
 810ad64:	af00      	add	r7, sp, #0
 810ad66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810ad68:	687b      	ldr	r3, [r7, #4]
 810ad6a:	2b00      	cmp	r3, #0
 810ad6c:	d101      	bne.n	810ad72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810ad6e:	2301      	movs	r3, #1
 810ad70:	e042      	b.n	810adf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810ad72:	687b      	ldr	r3, [r7, #4]
 810ad74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810ad78:	2b00      	cmp	r3, #0
 810ad7a:	d106      	bne.n	810ad8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810ad7c:	687b      	ldr	r3, [r7, #4]
 810ad7e:	2200      	movs	r2, #0
 810ad80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810ad84:	6878      	ldr	r0, [r7, #4]
 810ad86:	f7f7 f923 	bl	8101fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810ad8a:	687b      	ldr	r3, [r7, #4]
 810ad8c:	2224      	movs	r2, #36	@ 0x24
 810ad8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810ad92:	687b      	ldr	r3, [r7, #4]
 810ad94:	681b      	ldr	r3, [r3, #0]
 810ad96:	681a      	ldr	r2, [r3, #0]
 810ad98:	687b      	ldr	r3, [r7, #4]
 810ad9a:	681b      	ldr	r3, [r3, #0]
 810ad9c:	f022 0201 	bic.w	r2, r2, #1
 810ada0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810ada2:	687b      	ldr	r3, [r7, #4]
 810ada4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ada6:	2b00      	cmp	r3, #0
 810ada8:	d002      	beq.n	810adb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810adaa:	6878      	ldr	r0, [r7, #4]
 810adac:	f000 fd90 	bl	810b8d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810adb0:	6878      	ldr	r0, [r7, #4]
 810adb2:	f000 f825 	bl	810ae00 <UART_SetConfig>
 810adb6:	4603      	mov	r3, r0
 810adb8:	2b01      	cmp	r3, #1
 810adba:	d101      	bne.n	810adc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810adbc:	2301      	movs	r3, #1
 810adbe:	e01b      	b.n	810adf8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810adc0:	687b      	ldr	r3, [r7, #4]
 810adc2:	681b      	ldr	r3, [r3, #0]
 810adc4:	685a      	ldr	r2, [r3, #4]
 810adc6:	687b      	ldr	r3, [r7, #4]
 810adc8:	681b      	ldr	r3, [r3, #0]
 810adca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810adce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810add0:	687b      	ldr	r3, [r7, #4]
 810add2:	681b      	ldr	r3, [r3, #0]
 810add4:	689a      	ldr	r2, [r3, #8]
 810add6:	687b      	ldr	r3, [r7, #4]
 810add8:	681b      	ldr	r3, [r3, #0]
 810adda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810adde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810ade0:	687b      	ldr	r3, [r7, #4]
 810ade2:	681b      	ldr	r3, [r3, #0]
 810ade4:	681a      	ldr	r2, [r3, #0]
 810ade6:	687b      	ldr	r3, [r7, #4]
 810ade8:	681b      	ldr	r3, [r3, #0]
 810adea:	f042 0201 	orr.w	r2, r2, #1
 810adee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810adf0:	6878      	ldr	r0, [r7, #4]
 810adf2:	f000 fe0f 	bl	810ba14 <UART_CheckIdleState>
 810adf6:	4603      	mov	r3, r0
}
 810adf8:	4618      	mov	r0, r3
 810adfa:	3708      	adds	r7, #8
 810adfc:	46bd      	mov	sp, r7
 810adfe:	bd80      	pop	{r7, pc}

0810ae00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810ae00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810ae04:	b092      	sub	sp, #72	@ 0x48
 810ae06:	af00      	add	r7, sp, #0
 810ae08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810ae0a:	2300      	movs	r3, #0
 810ae0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810ae10:	697b      	ldr	r3, [r7, #20]
 810ae12:	689a      	ldr	r2, [r3, #8]
 810ae14:	697b      	ldr	r3, [r7, #20]
 810ae16:	691b      	ldr	r3, [r3, #16]
 810ae18:	431a      	orrs	r2, r3
 810ae1a:	697b      	ldr	r3, [r7, #20]
 810ae1c:	695b      	ldr	r3, [r3, #20]
 810ae1e:	431a      	orrs	r2, r3
 810ae20:	697b      	ldr	r3, [r7, #20]
 810ae22:	69db      	ldr	r3, [r3, #28]
 810ae24:	4313      	orrs	r3, r2
 810ae26:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810ae28:	697b      	ldr	r3, [r7, #20]
 810ae2a:	681b      	ldr	r3, [r3, #0]
 810ae2c:	681a      	ldr	r2, [r3, #0]
 810ae2e:	4bbd      	ldr	r3, [pc, #756]	@ (810b124 <UART_SetConfig+0x324>)
 810ae30:	4013      	ands	r3, r2
 810ae32:	697a      	ldr	r2, [r7, #20]
 810ae34:	6812      	ldr	r2, [r2, #0]
 810ae36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810ae38:	430b      	orrs	r3, r1
 810ae3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810ae3c:	697b      	ldr	r3, [r7, #20]
 810ae3e:	681b      	ldr	r3, [r3, #0]
 810ae40:	685b      	ldr	r3, [r3, #4]
 810ae42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810ae46:	697b      	ldr	r3, [r7, #20]
 810ae48:	68da      	ldr	r2, [r3, #12]
 810ae4a:	697b      	ldr	r3, [r7, #20]
 810ae4c:	681b      	ldr	r3, [r3, #0]
 810ae4e:	430a      	orrs	r2, r1
 810ae50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810ae52:	697b      	ldr	r3, [r7, #20]
 810ae54:	699b      	ldr	r3, [r3, #24]
 810ae56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810ae58:	697b      	ldr	r3, [r7, #20]
 810ae5a:	681b      	ldr	r3, [r3, #0]
 810ae5c:	4ab2      	ldr	r2, [pc, #712]	@ (810b128 <UART_SetConfig+0x328>)
 810ae5e:	4293      	cmp	r3, r2
 810ae60:	d004      	beq.n	810ae6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810ae62:	697b      	ldr	r3, [r7, #20]
 810ae64:	6a1b      	ldr	r3, [r3, #32]
 810ae66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ae68:	4313      	orrs	r3, r2
 810ae6a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810ae6c:	697b      	ldr	r3, [r7, #20]
 810ae6e:	681b      	ldr	r3, [r3, #0]
 810ae70:	689b      	ldr	r3, [r3, #8]
 810ae72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810ae76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810ae7a:	697a      	ldr	r2, [r7, #20]
 810ae7c:	6812      	ldr	r2, [r2, #0]
 810ae7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810ae80:	430b      	orrs	r3, r1
 810ae82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810ae84:	697b      	ldr	r3, [r7, #20]
 810ae86:	681b      	ldr	r3, [r3, #0]
 810ae88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ae8a:	f023 010f 	bic.w	r1, r3, #15
 810ae8e:	697b      	ldr	r3, [r7, #20]
 810ae90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810ae92:	697b      	ldr	r3, [r7, #20]
 810ae94:	681b      	ldr	r3, [r3, #0]
 810ae96:	430a      	orrs	r2, r1
 810ae98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810ae9a:	697b      	ldr	r3, [r7, #20]
 810ae9c:	681b      	ldr	r3, [r3, #0]
 810ae9e:	4aa3      	ldr	r2, [pc, #652]	@ (810b12c <UART_SetConfig+0x32c>)
 810aea0:	4293      	cmp	r3, r2
 810aea2:	d177      	bne.n	810af94 <UART_SetConfig+0x194>
 810aea4:	4ba2      	ldr	r3, [pc, #648]	@ (810b130 <UART_SetConfig+0x330>)
 810aea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aea8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810aeac:	2b28      	cmp	r3, #40	@ 0x28
 810aeae:	d86d      	bhi.n	810af8c <UART_SetConfig+0x18c>
 810aeb0:	a201      	add	r2, pc, #4	@ (adr r2, 810aeb8 <UART_SetConfig+0xb8>)
 810aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aeb6:	bf00      	nop
 810aeb8:	0810af5d 	.word	0x0810af5d
 810aebc:	0810af8d 	.word	0x0810af8d
 810aec0:	0810af8d 	.word	0x0810af8d
 810aec4:	0810af8d 	.word	0x0810af8d
 810aec8:	0810af8d 	.word	0x0810af8d
 810aecc:	0810af8d 	.word	0x0810af8d
 810aed0:	0810af8d 	.word	0x0810af8d
 810aed4:	0810af8d 	.word	0x0810af8d
 810aed8:	0810af65 	.word	0x0810af65
 810aedc:	0810af8d 	.word	0x0810af8d
 810aee0:	0810af8d 	.word	0x0810af8d
 810aee4:	0810af8d 	.word	0x0810af8d
 810aee8:	0810af8d 	.word	0x0810af8d
 810aeec:	0810af8d 	.word	0x0810af8d
 810aef0:	0810af8d 	.word	0x0810af8d
 810aef4:	0810af8d 	.word	0x0810af8d
 810aef8:	0810af6d 	.word	0x0810af6d
 810aefc:	0810af8d 	.word	0x0810af8d
 810af00:	0810af8d 	.word	0x0810af8d
 810af04:	0810af8d 	.word	0x0810af8d
 810af08:	0810af8d 	.word	0x0810af8d
 810af0c:	0810af8d 	.word	0x0810af8d
 810af10:	0810af8d 	.word	0x0810af8d
 810af14:	0810af8d 	.word	0x0810af8d
 810af18:	0810af75 	.word	0x0810af75
 810af1c:	0810af8d 	.word	0x0810af8d
 810af20:	0810af8d 	.word	0x0810af8d
 810af24:	0810af8d 	.word	0x0810af8d
 810af28:	0810af8d 	.word	0x0810af8d
 810af2c:	0810af8d 	.word	0x0810af8d
 810af30:	0810af8d 	.word	0x0810af8d
 810af34:	0810af8d 	.word	0x0810af8d
 810af38:	0810af7d 	.word	0x0810af7d
 810af3c:	0810af8d 	.word	0x0810af8d
 810af40:	0810af8d 	.word	0x0810af8d
 810af44:	0810af8d 	.word	0x0810af8d
 810af48:	0810af8d 	.word	0x0810af8d
 810af4c:	0810af8d 	.word	0x0810af8d
 810af50:	0810af8d 	.word	0x0810af8d
 810af54:	0810af8d 	.word	0x0810af8d
 810af58:	0810af85 	.word	0x0810af85
 810af5c:	2301      	movs	r3, #1
 810af5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af62:	e220      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810af64:	2304      	movs	r3, #4
 810af66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af6a:	e21c      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810af6c:	2308      	movs	r3, #8
 810af6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af72:	e218      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810af74:	2310      	movs	r3, #16
 810af76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af7a:	e214      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810af7c:	2320      	movs	r3, #32
 810af7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af82:	e210      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810af84:	2340      	movs	r3, #64	@ 0x40
 810af86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af8a:	e20c      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810af8c:	2380      	movs	r3, #128	@ 0x80
 810af8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af92:	e208      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810af94:	697b      	ldr	r3, [r7, #20]
 810af96:	681b      	ldr	r3, [r3, #0]
 810af98:	4a66      	ldr	r2, [pc, #408]	@ (810b134 <UART_SetConfig+0x334>)
 810af9a:	4293      	cmp	r3, r2
 810af9c:	d130      	bne.n	810b000 <UART_SetConfig+0x200>
 810af9e:	4b64      	ldr	r3, [pc, #400]	@ (810b130 <UART_SetConfig+0x330>)
 810afa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810afa2:	f003 0307 	and.w	r3, r3, #7
 810afa6:	2b05      	cmp	r3, #5
 810afa8:	d826      	bhi.n	810aff8 <UART_SetConfig+0x1f8>
 810afaa:	a201      	add	r2, pc, #4	@ (adr r2, 810afb0 <UART_SetConfig+0x1b0>)
 810afac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810afb0:	0810afc9 	.word	0x0810afc9
 810afb4:	0810afd1 	.word	0x0810afd1
 810afb8:	0810afd9 	.word	0x0810afd9
 810afbc:	0810afe1 	.word	0x0810afe1
 810afc0:	0810afe9 	.word	0x0810afe9
 810afc4:	0810aff1 	.word	0x0810aff1
 810afc8:	2300      	movs	r3, #0
 810afca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afce:	e1ea      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810afd0:	2304      	movs	r3, #4
 810afd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afd6:	e1e6      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810afd8:	2308      	movs	r3, #8
 810afda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afde:	e1e2      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810afe0:	2310      	movs	r3, #16
 810afe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afe6:	e1de      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810afe8:	2320      	movs	r3, #32
 810afea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afee:	e1da      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810aff0:	2340      	movs	r3, #64	@ 0x40
 810aff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aff6:	e1d6      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810aff8:	2380      	movs	r3, #128	@ 0x80
 810affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810affe:	e1d2      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b000:	697b      	ldr	r3, [r7, #20]
 810b002:	681b      	ldr	r3, [r3, #0]
 810b004:	4a4c      	ldr	r2, [pc, #304]	@ (810b138 <UART_SetConfig+0x338>)
 810b006:	4293      	cmp	r3, r2
 810b008:	d130      	bne.n	810b06c <UART_SetConfig+0x26c>
 810b00a:	4b49      	ldr	r3, [pc, #292]	@ (810b130 <UART_SetConfig+0x330>)
 810b00c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b00e:	f003 0307 	and.w	r3, r3, #7
 810b012:	2b05      	cmp	r3, #5
 810b014:	d826      	bhi.n	810b064 <UART_SetConfig+0x264>
 810b016:	a201      	add	r2, pc, #4	@ (adr r2, 810b01c <UART_SetConfig+0x21c>)
 810b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b01c:	0810b035 	.word	0x0810b035
 810b020:	0810b03d 	.word	0x0810b03d
 810b024:	0810b045 	.word	0x0810b045
 810b028:	0810b04d 	.word	0x0810b04d
 810b02c:	0810b055 	.word	0x0810b055
 810b030:	0810b05d 	.word	0x0810b05d
 810b034:	2300      	movs	r3, #0
 810b036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b03a:	e1b4      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b03c:	2304      	movs	r3, #4
 810b03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b042:	e1b0      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b044:	2308      	movs	r3, #8
 810b046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b04a:	e1ac      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b04c:	2310      	movs	r3, #16
 810b04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b052:	e1a8      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b054:	2320      	movs	r3, #32
 810b056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b05a:	e1a4      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b05c:	2340      	movs	r3, #64	@ 0x40
 810b05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b062:	e1a0      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b064:	2380      	movs	r3, #128	@ 0x80
 810b066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b06a:	e19c      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b06c:	697b      	ldr	r3, [r7, #20]
 810b06e:	681b      	ldr	r3, [r3, #0]
 810b070:	4a32      	ldr	r2, [pc, #200]	@ (810b13c <UART_SetConfig+0x33c>)
 810b072:	4293      	cmp	r3, r2
 810b074:	d130      	bne.n	810b0d8 <UART_SetConfig+0x2d8>
 810b076:	4b2e      	ldr	r3, [pc, #184]	@ (810b130 <UART_SetConfig+0x330>)
 810b078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b07a:	f003 0307 	and.w	r3, r3, #7
 810b07e:	2b05      	cmp	r3, #5
 810b080:	d826      	bhi.n	810b0d0 <UART_SetConfig+0x2d0>
 810b082:	a201      	add	r2, pc, #4	@ (adr r2, 810b088 <UART_SetConfig+0x288>)
 810b084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b088:	0810b0a1 	.word	0x0810b0a1
 810b08c:	0810b0a9 	.word	0x0810b0a9
 810b090:	0810b0b1 	.word	0x0810b0b1
 810b094:	0810b0b9 	.word	0x0810b0b9
 810b098:	0810b0c1 	.word	0x0810b0c1
 810b09c:	0810b0c9 	.word	0x0810b0c9
 810b0a0:	2300      	movs	r3, #0
 810b0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b0a6:	e17e      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b0a8:	2304      	movs	r3, #4
 810b0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b0ae:	e17a      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b0b0:	2308      	movs	r3, #8
 810b0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b0b6:	e176      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b0b8:	2310      	movs	r3, #16
 810b0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b0be:	e172      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b0c0:	2320      	movs	r3, #32
 810b0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b0c6:	e16e      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b0c8:	2340      	movs	r3, #64	@ 0x40
 810b0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b0ce:	e16a      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b0d0:	2380      	movs	r3, #128	@ 0x80
 810b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b0d6:	e166      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b0d8:	697b      	ldr	r3, [r7, #20]
 810b0da:	681b      	ldr	r3, [r3, #0]
 810b0dc:	4a18      	ldr	r2, [pc, #96]	@ (810b140 <UART_SetConfig+0x340>)
 810b0de:	4293      	cmp	r3, r2
 810b0e0:	d140      	bne.n	810b164 <UART_SetConfig+0x364>
 810b0e2:	4b13      	ldr	r3, [pc, #76]	@ (810b130 <UART_SetConfig+0x330>)
 810b0e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b0e6:	f003 0307 	and.w	r3, r3, #7
 810b0ea:	2b05      	cmp	r3, #5
 810b0ec:	d836      	bhi.n	810b15c <UART_SetConfig+0x35c>
 810b0ee:	a201      	add	r2, pc, #4	@ (adr r2, 810b0f4 <UART_SetConfig+0x2f4>)
 810b0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b0f4:	0810b10d 	.word	0x0810b10d
 810b0f8:	0810b115 	.word	0x0810b115
 810b0fc:	0810b11d 	.word	0x0810b11d
 810b100:	0810b145 	.word	0x0810b145
 810b104:	0810b14d 	.word	0x0810b14d
 810b108:	0810b155 	.word	0x0810b155
 810b10c:	2300      	movs	r3, #0
 810b10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b112:	e148      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b114:	2304      	movs	r3, #4
 810b116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b11a:	e144      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b11c:	2308      	movs	r3, #8
 810b11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b122:	e140      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b124:	cfff69f3 	.word	0xcfff69f3
 810b128:	58000c00 	.word	0x58000c00
 810b12c:	40011000 	.word	0x40011000
 810b130:	58024400 	.word	0x58024400
 810b134:	40004400 	.word	0x40004400
 810b138:	40004800 	.word	0x40004800
 810b13c:	40004c00 	.word	0x40004c00
 810b140:	40005000 	.word	0x40005000
 810b144:	2310      	movs	r3, #16
 810b146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b14a:	e12c      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b14c:	2320      	movs	r3, #32
 810b14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b152:	e128      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b154:	2340      	movs	r3, #64	@ 0x40
 810b156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b15a:	e124      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b15c:	2380      	movs	r3, #128	@ 0x80
 810b15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b162:	e120      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b164:	697b      	ldr	r3, [r7, #20]
 810b166:	681b      	ldr	r3, [r3, #0]
 810b168:	4acb      	ldr	r2, [pc, #812]	@ (810b498 <UART_SetConfig+0x698>)
 810b16a:	4293      	cmp	r3, r2
 810b16c:	d176      	bne.n	810b25c <UART_SetConfig+0x45c>
 810b16e:	4bcb      	ldr	r3, [pc, #812]	@ (810b49c <UART_SetConfig+0x69c>)
 810b170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b172:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810b176:	2b28      	cmp	r3, #40	@ 0x28
 810b178:	d86c      	bhi.n	810b254 <UART_SetConfig+0x454>
 810b17a:	a201      	add	r2, pc, #4	@ (adr r2, 810b180 <UART_SetConfig+0x380>)
 810b17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b180:	0810b225 	.word	0x0810b225
 810b184:	0810b255 	.word	0x0810b255
 810b188:	0810b255 	.word	0x0810b255
 810b18c:	0810b255 	.word	0x0810b255
 810b190:	0810b255 	.word	0x0810b255
 810b194:	0810b255 	.word	0x0810b255
 810b198:	0810b255 	.word	0x0810b255
 810b19c:	0810b255 	.word	0x0810b255
 810b1a0:	0810b22d 	.word	0x0810b22d
 810b1a4:	0810b255 	.word	0x0810b255
 810b1a8:	0810b255 	.word	0x0810b255
 810b1ac:	0810b255 	.word	0x0810b255
 810b1b0:	0810b255 	.word	0x0810b255
 810b1b4:	0810b255 	.word	0x0810b255
 810b1b8:	0810b255 	.word	0x0810b255
 810b1bc:	0810b255 	.word	0x0810b255
 810b1c0:	0810b235 	.word	0x0810b235
 810b1c4:	0810b255 	.word	0x0810b255
 810b1c8:	0810b255 	.word	0x0810b255
 810b1cc:	0810b255 	.word	0x0810b255
 810b1d0:	0810b255 	.word	0x0810b255
 810b1d4:	0810b255 	.word	0x0810b255
 810b1d8:	0810b255 	.word	0x0810b255
 810b1dc:	0810b255 	.word	0x0810b255
 810b1e0:	0810b23d 	.word	0x0810b23d
 810b1e4:	0810b255 	.word	0x0810b255
 810b1e8:	0810b255 	.word	0x0810b255
 810b1ec:	0810b255 	.word	0x0810b255
 810b1f0:	0810b255 	.word	0x0810b255
 810b1f4:	0810b255 	.word	0x0810b255
 810b1f8:	0810b255 	.word	0x0810b255
 810b1fc:	0810b255 	.word	0x0810b255
 810b200:	0810b245 	.word	0x0810b245
 810b204:	0810b255 	.word	0x0810b255
 810b208:	0810b255 	.word	0x0810b255
 810b20c:	0810b255 	.word	0x0810b255
 810b210:	0810b255 	.word	0x0810b255
 810b214:	0810b255 	.word	0x0810b255
 810b218:	0810b255 	.word	0x0810b255
 810b21c:	0810b255 	.word	0x0810b255
 810b220:	0810b24d 	.word	0x0810b24d
 810b224:	2301      	movs	r3, #1
 810b226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b22a:	e0bc      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b22c:	2304      	movs	r3, #4
 810b22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b232:	e0b8      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b234:	2308      	movs	r3, #8
 810b236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b23a:	e0b4      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b23c:	2310      	movs	r3, #16
 810b23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b242:	e0b0      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b244:	2320      	movs	r3, #32
 810b246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b24a:	e0ac      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b24c:	2340      	movs	r3, #64	@ 0x40
 810b24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b252:	e0a8      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b254:	2380      	movs	r3, #128	@ 0x80
 810b256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b25a:	e0a4      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b25c:	697b      	ldr	r3, [r7, #20]
 810b25e:	681b      	ldr	r3, [r3, #0]
 810b260:	4a8f      	ldr	r2, [pc, #572]	@ (810b4a0 <UART_SetConfig+0x6a0>)
 810b262:	4293      	cmp	r3, r2
 810b264:	d130      	bne.n	810b2c8 <UART_SetConfig+0x4c8>
 810b266:	4b8d      	ldr	r3, [pc, #564]	@ (810b49c <UART_SetConfig+0x69c>)
 810b268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b26a:	f003 0307 	and.w	r3, r3, #7
 810b26e:	2b05      	cmp	r3, #5
 810b270:	d826      	bhi.n	810b2c0 <UART_SetConfig+0x4c0>
 810b272:	a201      	add	r2, pc, #4	@ (adr r2, 810b278 <UART_SetConfig+0x478>)
 810b274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b278:	0810b291 	.word	0x0810b291
 810b27c:	0810b299 	.word	0x0810b299
 810b280:	0810b2a1 	.word	0x0810b2a1
 810b284:	0810b2a9 	.word	0x0810b2a9
 810b288:	0810b2b1 	.word	0x0810b2b1
 810b28c:	0810b2b9 	.word	0x0810b2b9
 810b290:	2300      	movs	r3, #0
 810b292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b296:	e086      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b298:	2304      	movs	r3, #4
 810b29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b29e:	e082      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b2a0:	2308      	movs	r3, #8
 810b2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b2a6:	e07e      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b2a8:	2310      	movs	r3, #16
 810b2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b2ae:	e07a      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b2b0:	2320      	movs	r3, #32
 810b2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b2b6:	e076      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b2b8:	2340      	movs	r3, #64	@ 0x40
 810b2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b2be:	e072      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b2c0:	2380      	movs	r3, #128	@ 0x80
 810b2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b2c6:	e06e      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b2c8:	697b      	ldr	r3, [r7, #20]
 810b2ca:	681b      	ldr	r3, [r3, #0]
 810b2cc:	4a75      	ldr	r2, [pc, #468]	@ (810b4a4 <UART_SetConfig+0x6a4>)
 810b2ce:	4293      	cmp	r3, r2
 810b2d0:	d130      	bne.n	810b334 <UART_SetConfig+0x534>
 810b2d2:	4b72      	ldr	r3, [pc, #456]	@ (810b49c <UART_SetConfig+0x69c>)
 810b2d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b2d6:	f003 0307 	and.w	r3, r3, #7
 810b2da:	2b05      	cmp	r3, #5
 810b2dc:	d826      	bhi.n	810b32c <UART_SetConfig+0x52c>
 810b2de:	a201      	add	r2, pc, #4	@ (adr r2, 810b2e4 <UART_SetConfig+0x4e4>)
 810b2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b2e4:	0810b2fd 	.word	0x0810b2fd
 810b2e8:	0810b305 	.word	0x0810b305
 810b2ec:	0810b30d 	.word	0x0810b30d
 810b2f0:	0810b315 	.word	0x0810b315
 810b2f4:	0810b31d 	.word	0x0810b31d
 810b2f8:	0810b325 	.word	0x0810b325
 810b2fc:	2300      	movs	r3, #0
 810b2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b302:	e050      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b304:	2304      	movs	r3, #4
 810b306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b30a:	e04c      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b30c:	2308      	movs	r3, #8
 810b30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b312:	e048      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b314:	2310      	movs	r3, #16
 810b316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b31a:	e044      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b31c:	2320      	movs	r3, #32
 810b31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b322:	e040      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b324:	2340      	movs	r3, #64	@ 0x40
 810b326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b32a:	e03c      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b32c:	2380      	movs	r3, #128	@ 0x80
 810b32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b332:	e038      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b334:	697b      	ldr	r3, [r7, #20]
 810b336:	681b      	ldr	r3, [r3, #0]
 810b338:	4a5b      	ldr	r2, [pc, #364]	@ (810b4a8 <UART_SetConfig+0x6a8>)
 810b33a:	4293      	cmp	r3, r2
 810b33c:	d130      	bne.n	810b3a0 <UART_SetConfig+0x5a0>
 810b33e:	4b57      	ldr	r3, [pc, #348]	@ (810b49c <UART_SetConfig+0x69c>)
 810b340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b342:	f003 0307 	and.w	r3, r3, #7
 810b346:	2b05      	cmp	r3, #5
 810b348:	d826      	bhi.n	810b398 <UART_SetConfig+0x598>
 810b34a:	a201      	add	r2, pc, #4	@ (adr r2, 810b350 <UART_SetConfig+0x550>)
 810b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b350:	0810b369 	.word	0x0810b369
 810b354:	0810b371 	.word	0x0810b371
 810b358:	0810b379 	.word	0x0810b379
 810b35c:	0810b381 	.word	0x0810b381
 810b360:	0810b389 	.word	0x0810b389
 810b364:	0810b391 	.word	0x0810b391
 810b368:	2302      	movs	r3, #2
 810b36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b36e:	e01a      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b370:	2304      	movs	r3, #4
 810b372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b376:	e016      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b378:	2308      	movs	r3, #8
 810b37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b37e:	e012      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b380:	2310      	movs	r3, #16
 810b382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b386:	e00e      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b388:	2320      	movs	r3, #32
 810b38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b38e:	e00a      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b390:	2340      	movs	r3, #64	@ 0x40
 810b392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b396:	e006      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b398:	2380      	movs	r3, #128	@ 0x80
 810b39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b39e:	e002      	b.n	810b3a6 <UART_SetConfig+0x5a6>
 810b3a0:	2380      	movs	r3, #128	@ 0x80
 810b3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810b3a6:	697b      	ldr	r3, [r7, #20]
 810b3a8:	681b      	ldr	r3, [r3, #0]
 810b3aa:	4a3f      	ldr	r2, [pc, #252]	@ (810b4a8 <UART_SetConfig+0x6a8>)
 810b3ac:	4293      	cmp	r3, r2
 810b3ae:	f040 80f8 	bne.w	810b5a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810b3b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b3b6:	2b20      	cmp	r3, #32
 810b3b8:	dc46      	bgt.n	810b448 <UART_SetConfig+0x648>
 810b3ba:	2b02      	cmp	r3, #2
 810b3bc:	f2c0 8082 	blt.w	810b4c4 <UART_SetConfig+0x6c4>
 810b3c0:	3b02      	subs	r3, #2
 810b3c2:	2b1e      	cmp	r3, #30
 810b3c4:	d87e      	bhi.n	810b4c4 <UART_SetConfig+0x6c4>
 810b3c6:	a201      	add	r2, pc, #4	@ (adr r2, 810b3cc <UART_SetConfig+0x5cc>)
 810b3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b3cc:	0810b44f 	.word	0x0810b44f
 810b3d0:	0810b4c5 	.word	0x0810b4c5
 810b3d4:	0810b457 	.word	0x0810b457
 810b3d8:	0810b4c5 	.word	0x0810b4c5
 810b3dc:	0810b4c5 	.word	0x0810b4c5
 810b3e0:	0810b4c5 	.word	0x0810b4c5
 810b3e4:	0810b467 	.word	0x0810b467
 810b3e8:	0810b4c5 	.word	0x0810b4c5
 810b3ec:	0810b4c5 	.word	0x0810b4c5
 810b3f0:	0810b4c5 	.word	0x0810b4c5
 810b3f4:	0810b4c5 	.word	0x0810b4c5
 810b3f8:	0810b4c5 	.word	0x0810b4c5
 810b3fc:	0810b4c5 	.word	0x0810b4c5
 810b400:	0810b4c5 	.word	0x0810b4c5
 810b404:	0810b477 	.word	0x0810b477
 810b408:	0810b4c5 	.word	0x0810b4c5
 810b40c:	0810b4c5 	.word	0x0810b4c5
 810b410:	0810b4c5 	.word	0x0810b4c5
 810b414:	0810b4c5 	.word	0x0810b4c5
 810b418:	0810b4c5 	.word	0x0810b4c5
 810b41c:	0810b4c5 	.word	0x0810b4c5
 810b420:	0810b4c5 	.word	0x0810b4c5
 810b424:	0810b4c5 	.word	0x0810b4c5
 810b428:	0810b4c5 	.word	0x0810b4c5
 810b42c:	0810b4c5 	.word	0x0810b4c5
 810b430:	0810b4c5 	.word	0x0810b4c5
 810b434:	0810b4c5 	.word	0x0810b4c5
 810b438:	0810b4c5 	.word	0x0810b4c5
 810b43c:	0810b4c5 	.word	0x0810b4c5
 810b440:	0810b4c5 	.word	0x0810b4c5
 810b444:	0810b4b7 	.word	0x0810b4b7
 810b448:	2b40      	cmp	r3, #64	@ 0x40
 810b44a:	d037      	beq.n	810b4bc <UART_SetConfig+0x6bc>
 810b44c:	e03a      	b.n	810b4c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b44e:	f7fb ffd7 	bl	8107400 <HAL_RCCEx_GetD3PCLK1Freq>
 810b452:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b454:	e03c      	b.n	810b4d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b45a:	4618      	mov	r0, r3
 810b45c:	f7fb ffe6 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b464:	e034      	b.n	810b4d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b466:	f107 0318 	add.w	r3, r7, #24
 810b46a:	4618      	mov	r0, r3
 810b46c:	f7fc f932 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b470:	69fb      	ldr	r3, [r7, #28]
 810b472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b474:	e02c      	b.n	810b4d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b476:	4b09      	ldr	r3, [pc, #36]	@ (810b49c <UART_SetConfig+0x69c>)
 810b478:	681b      	ldr	r3, [r3, #0]
 810b47a:	f003 0320 	and.w	r3, r3, #32
 810b47e:	2b00      	cmp	r3, #0
 810b480:	d016      	beq.n	810b4b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b482:	4b06      	ldr	r3, [pc, #24]	@ (810b49c <UART_SetConfig+0x69c>)
 810b484:	681b      	ldr	r3, [r3, #0]
 810b486:	08db      	lsrs	r3, r3, #3
 810b488:	f003 0303 	and.w	r3, r3, #3
 810b48c:	4a07      	ldr	r2, [pc, #28]	@ (810b4ac <UART_SetConfig+0x6ac>)
 810b48e:	fa22 f303 	lsr.w	r3, r2, r3
 810b492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b494:	e01c      	b.n	810b4d0 <UART_SetConfig+0x6d0>
 810b496:	bf00      	nop
 810b498:	40011400 	.word	0x40011400
 810b49c:	58024400 	.word	0x58024400
 810b4a0:	40007800 	.word	0x40007800
 810b4a4:	40007c00 	.word	0x40007c00
 810b4a8:	58000c00 	.word	0x58000c00
 810b4ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810b4b0:	4b9d      	ldr	r3, [pc, #628]	@ (810b728 <UART_SetConfig+0x928>)
 810b4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b4b4:	e00c      	b.n	810b4d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b4b6:	4b9d      	ldr	r3, [pc, #628]	@ (810b72c <UART_SetConfig+0x92c>)
 810b4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b4ba:	e009      	b.n	810b4d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b4bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b4c2:	e005      	b.n	810b4d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810b4c4:	2300      	movs	r3, #0
 810b4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b4c8:	2301      	movs	r3, #1
 810b4ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b4ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810b4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b4d2:	2b00      	cmp	r3, #0
 810b4d4:	f000 81de 	beq.w	810b894 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810b4d8:	697b      	ldr	r3, [r7, #20]
 810b4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b4dc:	4a94      	ldr	r2, [pc, #592]	@ (810b730 <UART_SetConfig+0x930>)
 810b4de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b4e2:	461a      	mov	r2, r3
 810b4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b4e6:	fbb3 f3f2 	udiv	r3, r3, r2
 810b4ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b4ec:	697b      	ldr	r3, [r7, #20]
 810b4ee:	685a      	ldr	r2, [r3, #4]
 810b4f0:	4613      	mov	r3, r2
 810b4f2:	005b      	lsls	r3, r3, #1
 810b4f4:	4413      	add	r3, r2
 810b4f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b4f8:	429a      	cmp	r2, r3
 810b4fa:	d305      	bcc.n	810b508 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810b4fc:	697b      	ldr	r3, [r7, #20]
 810b4fe:	685b      	ldr	r3, [r3, #4]
 810b500:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b504:	429a      	cmp	r2, r3
 810b506:	d903      	bls.n	810b510 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810b508:	2301      	movs	r3, #1
 810b50a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b50e:	e1c1      	b.n	810b894 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b512:	2200      	movs	r2, #0
 810b514:	60bb      	str	r3, [r7, #8]
 810b516:	60fa      	str	r2, [r7, #12]
 810b518:	697b      	ldr	r3, [r7, #20]
 810b51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b51c:	4a84      	ldr	r2, [pc, #528]	@ (810b730 <UART_SetConfig+0x930>)
 810b51e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b522:	b29b      	uxth	r3, r3
 810b524:	2200      	movs	r2, #0
 810b526:	603b      	str	r3, [r7, #0]
 810b528:	607a      	str	r2, [r7, #4]
 810b52a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b52e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810b532:	f7f4 fed5 	bl	81002e0 <__aeabi_uldivmod>
 810b536:	4602      	mov	r2, r0
 810b538:	460b      	mov	r3, r1
 810b53a:	4610      	mov	r0, r2
 810b53c:	4619      	mov	r1, r3
 810b53e:	f04f 0200 	mov.w	r2, #0
 810b542:	f04f 0300 	mov.w	r3, #0
 810b546:	020b      	lsls	r3, r1, #8
 810b548:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810b54c:	0202      	lsls	r2, r0, #8
 810b54e:	6979      	ldr	r1, [r7, #20]
 810b550:	6849      	ldr	r1, [r1, #4]
 810b552:	0849      	lsrs	r1, r1, #1
 810b554:	2000      	movs	r0, #0
 810b556:	460c      	mov	r4, r1
 810b558:	4605      	mov	r5, r0
 810b55a:	eb12 0804 	adds.w	r8, r2, r4
 810b55e:	eb43 0905 	adc.w	r9, r3, r5
 810b562:	697b      	ldr	r3, [r7, #20]
 810b564:	685b      	ldr	r3, [r3, #4]
 810b566:	2200      	movs	r2, #0
 810b568:	469a      	mov	sl, r3
 810b56a:	4693      	mov	fp, r2
 810b56c:	4652      	mov	r2, sl
 810b56e:	465b      	mov	r3, fp
 810b570:	4640      	mov	r0, r8
 810b572:	4649      	mov	r1, r9
 810b574:	f7f4 feb4 	bl	81002e0 <__aeabi_uldivmod>
 810b578:	4602      	mov	r2, r0
 810b57a:	460b      	mov	r3, r1
 810b57c:	4613      	mov	r3, r2
 810b57e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810b580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b582:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b586:	d308      	bcc.n	810b59a <UART_SetConfig+0x79a>
 810b588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b58a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b58e:	d204      	bcs.n	810b59a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810b590:	697b      	ldr	r3, [r7, #20]
 810b592:	681b      	ldr	r3, [r3, #0]
 810b594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810b596:	60da      	str	r2, [r3, #12]
 810b598:	e17c      	b.n	810b894 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810b59a:	2301      	movs	r3, #1
 810b59c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b5a0:	e178      	b.n	810b894 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810b5a2:	697b      	ldr	r3, [r7, #20]
 810b5a4:	69db      	ldr	r3, [r3, #28]
 810b5a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b5aa:	f040 80c5 	bne.w	810b738 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810b5ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b5b2:	2b20      	cmp	r3, #32
 810b5b4:	dc48      	bgt.n	810b648 <UART_SetConfig+0x848>
 810b5b6:	2b00      	cmp	r3, #0
 810b5b8:	db7b      	blt.n	810b6b2 <UART_SetConfig+0x8b2>
 810b5ba:	2b20      	cmp	r3, #32
 810b5bc:	d879      	bhi.n	810b6b2 <UART_SetConfig+0x8b2>
 810b5be:	a201      	add	r2, pc, #4	@ (adr r2, 810b5c4 <UART_SetConfig+0x7c4>)
 810b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b5c4:	0810b64f 	.word	0x0810b64f
 810b5c8:	0810b657 	.word	0x0810b657
 810b5cc:	0810b6b3 	.word	0x0810b6b3
 810b5d0:	0810b6b3 	.word	0x0810b6b3
 810b5d4:	0810b65f 	.word	0x0810b65f
 810b5d8:	0810b6b3 	.word	0x0810b6b3
 810b5dc:	0810b6b3 	.word	0x0810b6b3
 810b5e0:	0810b6b3 	.word	0x0810b6b3
 810b5e4:	0810b66f 	.word	0x0810b66f
 810b5e8:	0810b6b3 	.word	0x0810b6b3
 810b5ec:	0810b6b3 	.word	0x0810b6b3
 810b5f0:	0810b6b3 	.word	0x0810b6b3
 810b5f4:	0810b6b3 	.word	0x0810b6b3
 810b5f8:	0810b6b3 	.word	0x0810b6b3
 810b5fc:	0810b6b3 	.word	0x0810b6b3
 810b600:	0810b6b3 	.word	0x0810b6b3
 810b604:	0810b67f 	.word	0x0810b67f
 810b608:	0810b6b3 	.word	0x0810b6b3
 810b60c:	0810b6b3 	.word	0x0810b6b3
 810b610:	0810b6b3 	.word	0x0810b6b3
 810b614:	0810b6b3 	.word	0x0810b6b3
 810b618:	0810b6b3 	.word	0x0810b6b3
 810b61c:	0810b6b3 	.word	0x0810b6b3
 810b620:	0810b6b3 	.word	0x0810b6b3
 810b624:	0810b6b3 	.word	0x0810b6b3
 810b628:	0810b6b3 	.word	0x0810b6b3
 810b62c:	0810b6b3 	.word	0x0810b6b3
 810b630:	0810b6b3 	.word	0x0810b6b3
 810b634:	0810b6b3 	.word	0x0810b6b3
 810b638:	0810b6b3 	.word	0x0810b6b3
 810b63c:	0810b6b3 	.word	0x0810b6b3
 810b640:	0810b6b3 	.word	0x0810b6b3
 810b644:	0810b6a5 	.word	0x0810b6a5
 810b648:	2b40      	cmp	r3, #64	@ 0x40
 810b64a:	d02e      	beq.n	810b6aa <UART_SetConfig+0x8aa>
 810b64c:	e031      	b.n	810b6b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b64e:	f7f9 fe9f 	bl	8105390 <HAL_RCC_GetPCLK1Freq>
 810b652:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b654:	e033      	b.n	810b6be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b656:	f7f9 feb1 	bl	81053bc <HAL_RCC_GetPCLK2Freq>
 810b65a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b65c:	e02f      	b.n	810b6be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b65e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b662:	4618      	mov	r0, r3
 810b664:	f7fb fee2 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b66c:	e027      	b.n	810b6be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b66e:	f107 0318 	add.w	r3, r7, #24
 810b672:	4618      	mov	r0, r3
 810b674:	f7fc f82e 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b678:	69fb      	ldr	r3, [r7, #28]
 810b67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b67c:	e01f      	b.n	810b6be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b67e:	4b2d      	ldr	r3, [pc, #180]	@ (810b734 <UART_SetConfig+0x934>)
 810b680:	681b      	ldr	r3, [r3, #0]
 810b682:	f003 0320 	and.w	r3, r3, #32
 810b686:	2b00      	cmp	r3, #0
 810b688:	d009      	beq.n	810b69e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b68a:	4b2a      	ldr	r3, [pc, #168]	@ (810b734 <UART_SetConfig+0x934>)
 810b68c:	681b      	ldr	r3, [r3, #0]
 810b68e:	08db      	lsrs	r3, r3, #3
 810b690:	f003 0303 	and.w	r3, r3, #3
 810b694:	4a24      	ldr	r2, [pc, #144]	@ (810b728 <UART_SetConfig+0x928>)
 810b696:	fa22 f303 	lsr.w	r3, r2, r3
 810b69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b69c:	e00f      	b.n	810b6be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810b69e:	4b22      	ldr	r3, [pc, #136]	@ (810b728 <UART_SetConfig+0x928>)
 810b6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b6a2:	e00c      	b.n	810b6be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b6a4:	4b21      	ldr	r3, [pc, #132]	@ (810b72c <UART_SetConfig+0x92c>)
 810b6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b6a8:	e009      	b.n	810b6be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b6aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b6b0:	e005      	b.n	810b6be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810b6b2:	2300      	movs	r3, #0
 810b6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b6b6:	2301      	movs	r3, #1
 810b6b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b6bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810b6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b6c0:	2b00      	cmp	r3, #0
 810b6c2:	f000 80e7 	beq.w	810b894 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b6c6:	697b      	ldr	r3, [r7, #20]
 810b6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b6ca:	4a19      	ldr	r2, [pc, #100]	@ (810b730 <UART_SetConfig+0x930>)
 810b6cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b6d0:	461a      	mov	r2, r3
 810b6d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b6d4:	fbb3 f3f2 	udiv	r3, r3, r2
 810b6d8:	005a      	lsls	r2, r3, #1
 810b6da:	697b      	ldr	r3, [r7, #20]
 810b6dc:	685b      	ldr	r3, [r3, #4]
 810b6de:	085b      	lsrs	r3, r3, #1
 810b6e0:	441a      	add	r2, r3
 810b6e2:	697b      	ldr	r3, [r7, #20]
 810b6e4:	685b      	ldr	r3, [r3, #4]
 810b6e6:	fbb2 f3f3 	udiv	r3, r2, r3
 810b6ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b6ee:	2b0f      	cmp	r3, #15
 810b6f0:	d916      	bls.n	810b720 <UART_SetConfig+0x920>
 810b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b6f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b6f8:	d212      	bcs.n	810b720 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810b6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b6fc:	b29b      	uxth	r3, r3
 810b6fe:	f023 030f 	bic.w	r3, r3, #15
 810b702:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810b704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b706:	085b      	lsrs	r3, r3, #1
 810b708:	b29b      	uxth	r3, r3
 810b70a:	f003 0307 	and.w	r3, r3, #7
 810b70e:	b29a      	uxth	r2, r3
 810b710:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810b712:	4313      	orrs	r3, r2
 810b714:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810b716:	697b      	ldr	r3, [r7, #20]
 810b718:	681b      	ldr	r3, [r3, #0]
 810b71a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810b71c:	60da      	str	r2, [r3, #12]
 810b71e:	e0b9      	b.n	810b894 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810b720:	2301      	movs	r3, #1
 810b722:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b726:	e0b5      	b.n	810b894 <UART_SetConfig+0xa94>
 810b728:	03d09000 	.word	0x03d09000
 810b72c:	003d0900 	.word	0x003d0900
 810b730:	0810fcf0 	.word	0x0810fcf0
 810b734:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810b738:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b73c:	2b20      	cmp	r3, #32
 810b73e:	dc49      	bgt.n	810b7d4 <UART_SetConfig+0x9d4>
 810b740:	2b00      	cmp	r3, #0
 810b742:	db7c      	blt.n	810b83e <UART_SetConfig+0xa3e>
 810b744:	2b20      	cmp	r3, #32
 810b746:	d87a      	bhi.n	810b83e <UART_SetConfig+0xa3e>
 810b748:	a201      	add	r2, pc, #4	@ (adr r2, 810b750 <UART_SetConfig+0x950>)
 810b74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b74e:	bf00      	nop
 810b750:	0810b7db 	.word	0x0810b7db
 810b754:	0810b7e3 	.word	0x0810b7e3
 810b758:	0810b83f 	.word	0x0810b83f
 810b75c:	0810b83f 	.word	0x0810b83f
 810b760:	0810b7eb 	.word	0x0810b7eb
 810b764:	0810b83f 	.word	0x0810b83f
 810b768:	0810b83f 	.word	0x0810b83f
 810b76c:	0810b83f 	.word	0x0810b83f
 810b770:	0810b7fb 	.word	0x0810b7fb
 810b774:	0810b83f 	.word	0x0810b83f
 810b778:	0810b83f 	.word	0x0810b83f
 810b77c:	0810b83f 	.word	0x0810b83f
 810b780:	0810b83f 	.word	0x0810b83f
 810b784:	0810b83f 	.word	0x0810b83f
 810b788:	0810b83f 	.word	0x0810b83f
 810b78c:	0810b83f 	.word	0x0810b83f
 810b790:	0810b80b 	.word	0x0810b80b
 810b794:	0810b83f 	.word	0x0810b83f
 810b798:	0810b83f 	.word	0x0810b83f
 810b79c:	0810b83f 	.word	0x0810b83f
 810b7a0:	0810b83f 	.word	0x0810b83f
 810b7a4:	0810b83f 	.word	0x0810b83f
 810b7a8:	0810b83f 	.word	0x0810b83f
 810b7ac:	0810b83f 	.word	0x0810b83f
 810b7b0:	0810b83f 	.word	0x0810b83f
 810b7b4:	0810b83f 	.word	0x0810b83f
 810b7b8:	0810b83f 	.word	0x0810b83f
 810b7bc:	0810b83f 	.word	0x0810b83f
 810b7c0:	0810b83f 	.word	0x0810b83f
 810b7c4:	0810b83f 	.word	0x0810b83f
 810b7c8:	0810b83f 	.word	0x0810b83f
 810b7cc:	0810b83f 	.word	0x0810b83f
 810b7d0:	0810b831 	.word	0x0810b831
 810b7d4:	2b40      	cmp	r3, #64	@ 0x40
 810b7d6:	d02e      	beq.n	810b836 <UART_SetConfig+0xa36>
 810b7d8:	e031      	b.n	810b83e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b7da:	f7f9 fdd9 	bl	8105390 <HAL_RCC_GetPCLK1Freq>
 810b7de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b7e0:	e033      	b.n	810b84a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b7e2:	f7f9 fdeb 	bl	81053bc <HAL_RCC_GetPCLK2Freq>
 810b7e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b7e8:	e02f      	b.n	810b84a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b7ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b7ee:	4618      	mov	r0, r3
 810b7f0:	f7fb fe1c 	bl	810742c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b7f8:	e027      	b.n	810b84a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b7fa:	f107 0318 	add.w	r3, r7, #24
 810b7fe:	4618      	mov	r0, r3
 810b800:	f7fb ff68 	bl	81076d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b804:	69fb      	ldr	r3, [r7, #28]
 810b806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b808:	e01f      	b.n	810b84a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b80a:	4b2d      	ldr	r3, [pc, #180]	@ (810b8c0 <UART_SetConfig+0xac0>)
 810b80c:	681b      	ldr	r3, [r3, #0]
 810b80e:	f003 0320 	and.w	r3, r3, #32
 810b812:	2b00      	cmp	r3, #0
 810b814:	d009      	beq.n	810b82a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b816:	4b2a      	ldr	r3, [pc, #168]	@ (810b8c0 <UART_SetConfig+0xac0>)
 810b818:	681b      	ldr	r3, [r3, #0]
 810b81a:	08db      	lsrs	r3, r3, #3
 810b81c:	f003 0303 	and.w	r3, r3, #3
 810b820:	4a28      	ldr	r2, [pc, #160]	@ (810b8c4 <UART_SetConfig+0xac4>)
 810b822:	fa22 f303 	lsr.w	r3, r2, r3
 810b826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b828:	e00f      	b.n	810b84a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810b82a:	4b26      	ldr	r3, [pc, #152]	@ (810b8c4 <UART_SetConfig+0xac4>)
 810b82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b82e:	e00c      	b.n	810b84a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b830:	4b25      	ldr	r3, [pc, #148]	@ (810b8c8 <UART_SetConfig+0xac8>)
 810b832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b834:	e009      	b.n	810b84a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b83c:	e005      	b.n	810b84a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810b83e:	2300      	movs	r3, #0
 810b840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b842:	2301      	movs	r3, #1
 810b844:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b848:	bf00      	nop
    }

    if (pclk != 0U)
 810b84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b84c:	2b00      	cmp	r3, #0
 810b84e:	d021      	beq.n	810b894 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b850:	697b      	ldr	r3, [r7, #20]
 810b852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b854:	4a1d      	ldr	r2, [pc, #116]	@ (810b8cc <UART_SetConfig+0xacc>)
 810b856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b85a:	461a      	mov	r2, r3
 810b85c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b85e:	fbb3 f2f2 	udiv	r2, r3, r2
 810b862:	697b      	ldr	r3, [r7, #20]
 810b864:	685b      	ldr	r3, [r3, #4]
 810b866:	085b      	lsrs	r3, r3, #1
 810b868:	441a      	add	r2, r3
 810b86a:	697b      	ldr	r3, [r7, #20]
 810b86c:	685b      	ldr	r3, [r3, #4]
 810b86e:	fbb2 f3f3 	udiv	r3, r2, r3
 810b872:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b876:	2b0f      	cmp	r3, #15
 810b878:	d909      	bls.n	810b88e <UART_SetConfig+0xa8e>
 810b87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b87c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b880:	d205      	bcs.n	810b88e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810b882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b884:	b29a      	uxth	r2, r3
 810b886:	697b      	ldr	r3, [r7, #20]
 810b888:	681b      	ldr	r3, [r3, #0]
 810b88a:	60da      	str	r2, [r3, #12]
 810b88c:	e002      	b.n	810b894 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810b88e:	2301      	movs	r3, #1
 810b890:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810b894:	697b      	ldr	r3, [r7, #20]
 810b896:	2201      	movs	r2, #1
 810b898:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810b89c:	697b      	ldr	r3, [r7, #20]
 810b89e:	2201      	movs	r2, #1
 810b8a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810b8a4:	697b      	ldr	r3, [r7, #20]
 810b8a6:	2200      	movs	r2, #0
 810b8a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810b8aa:	697b      	ldr	r3, [r7, #20]
 810b8ac:	2200      	movs	r2, #0
 810b8ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810b8b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810b8b4:	4618      	mov	r0, r3
 810b8b6:	3748      	adds	r7, #72	@ 0x48
 810b8b8:	46bd      	mov	sp, r7
 810b8ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b8be:	bf00      	nop
 810b8c0:	58024400 	.word	0x58024400
 810b8c4:	03d09000 	.word	0x03d09000
 810b8c8:	003d0900 	.word	0x003d0900
 810b8cc:	0810fcf0 	.word	0x0810fcf0

0810b8d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810b8d0:	b480      	push	{r7}
 810b8d2:	b083      	sub	sp, #12
 810b8d4:	af00      	add	r7, sp, #0
 810b8d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810b8d8:	687b      	ldr	r3, [r7, #4]
 810b8da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b8dc:	f003 0308 	and.w	r3, r3, #8
 810b8e0:	2b00      	cmp	r3, #0
 810b8e2:	d00a      	beq.n	810b8fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810b8e4:	687b      	ldr	r3, [r7, #4]
 810b8e6:	681b      	ldr	r3, [r3, #0]
 810b8e8:	685b      	ldr	r3, [r3, #4]
 810b8ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810b8ee:	687b      	ldr	r3, [r7, #4]
 810b8f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810b8f2:	687b      	ldr	r3, [r7, #4]
 810b8f4:	681b      	ldr	r3, [r3, #0]
 810b8f6:	430a      	orrs	r2, r1
 810b8f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810b8fa:	687b      	ldr	r3, [r7, #4]
 810b8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b8fe:	f003 0301 	and.w	r3, r3, #1
 810b902:	2b00      	cmp	r3, #0
 810b904:	d00a      	beq.n	810b91c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810b906:	687b      	ldr	r3, [r7, #4]
 810b908:	681b      	ldr	r3, [r3, #0]
 810b90a:	685b      	ldr	r3, [r3, #4]
 810b90c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810b910:	687b      	ldr	r3, [r7, #4]
 810b912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b914:	687b      	ldr	r3, [r7, #4]
 810b916:	681b      	ldr	r3, [r3, #0]
 810b918:	430a      	orrs	r2, r1
 810b91a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810b91c:	687b      	ldr	r3, [r7, #4]
 810b91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b920:	f003 0302 	and.w	r3, r3, #2
 810b924:	2b00      	cmp	r3, #0
 810b926:	d00a      	beq.n	810b93e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810b928:	687b      	ldr	r3, [r7, #4]
 810b92a:	681b      	ldr	r3, [r3, #0]
 810b92c:	685b      	ldr	r3, [r3, #4]
 810b92e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810b932:	687b      	ldr	r3, [r7, #4]
 810b934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810b936:	687b      	ldr	r3, [r7, #4]
 810b938:	681b      	ldr	r3, [r3, #0]
 810b93a:	430a      	orrs	r2, r1
 810b93c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810b93e:	687b      	ldr	r3, [r7, #4]
 810b940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b942:	f003 0304 	and.w	r3, r3, #4
 810b946:	2b00      	cmp	r3, #0
 810b948:	d00a      	beq.n	810b960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810b94a:	687b      	ldr	r3, [r7, #4]
 810b94c:	681b      	ldr	r3, [r3, #0]
 810b94e:	685b      	ldr	r3, [r3, #4]
 810b950:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810b954:	687b      	ldr	r3, [r7, #4]
 810b956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810b958:	687b      	ldr	r3, [r7, #4]
 810b95a:	681b      	ldr	r3, [r3, #0]
 810b95c:	430a      	orrs	r2, r1
 810b95e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810b960:	687b      	ldr	r3, [r7, #4]
 810b962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b964:	f003 0310 	and.w	r3, r3, #16
 810b968:	2b00      	cmp	r3, #0
 810b96a:	d00a      	beq.n	810b982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810b96c:	687b      	ldr	r3, [r7, #4]
 810b96e:	681b      	ldr	r3, [r3, #0]
 810b970:	689b      	ldr	r3, [r3, #8]
 810b972:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810b976:	687b      	ldr	r3, [r7, #4]
 810b978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810b97a:	687b      	ldr	r3, [r7, #4]
 810b97c:	681b      	ldr	r3, [r3, #0]
 810b97e:	430a      	orrs	r2, r1
 810b980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810b982:	687b      	ldr	r3, [r7, #4]
 810b984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b986:	f003 0320 	and.w	r3, r3, #32
 810b98a:	2b00      	cmp	r3, #0
 810b98c:	d00a      	beq.n	810b9a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810b98e:	687b      	ldr	r3, [r7, #4]
 810b990:	681b      	ldr	r3, [r3, #0]
 810b992:	689b      	ldr	r3, [r3, #8]
 810b994:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810b998:	687b      	ldr	r3, [r7, #4]
 810b99a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810b99c:	687b      	ldr	r3, [r7, #4]
 810b99e:	681b      	ldr	r3, [r3, #0]
 810b9a0:	430a      	orrs	r2, r1
 810b9a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810b9a4:	687b      	ldr	r3, [r7, #4]
 810b9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b9ac:	2b00      	cmp	r3, #0
 810b9ae:	d01a      	beq.n	810b9e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810b9b0:	687b      	ldr	r3, [r7, #4]
 810b9b2:	681b      	ldr	r3, [r3, #0]
 810b9b4:	685b      	ldr	r3, [r3, #4]
 810b9b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810b9ba:	687b      	ldr	r3, [r7, #4]
 810b9bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810b9be:	687b      	ldr	r3, [r7, #4]
 810b9c0:	681b      	ldr	r3, [r3, #0]
 810b9c2:	430a      	orrs	r2, r1
 810b9c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810b9c6:	687b      	ldr	r3, [r7, #4]
 810b9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810b9ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b9ce:	d10a      	bne.n	810b9e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810b9d0:	687b      	ldr	r3, [r7, #4]
 810b9d2:	681b      	ldr	r3, [r3, #0]
 810b9d4:	685b      	ldr	r3, [r3, #4]
 810b9d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810b9da:	687b      	ldr	r3, [r7, #4]
 810b9dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810b9de:	687b      	ldr	r3, [r7, #4]
 810b9e0:	681b      	ldr	r3, [r3, #0]
 810b9e2:	430a      	orrs	r2, r1
 810b9e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810b9e6:	687b      	ldr	r3, [r7, #4]
 810b9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b9ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b9ee:	2b00      	cmp	r3, #0
 810b9f0:	d00a      	beq.n	810ba08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810b9f2:	687b      	ldr	r3, [r7, #4]
 810b9f4:	681b      	ldr	r3, [r3, #0]
 810b9f6:	685b      	ldr	r3, [r3, #4]
 810b9f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810b9fc:	687b      	ldr	r3, [r7, #4]
 810b9fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810ba00:	687b      	ldr	r3, [r7, #4]
 810ba02:	681b      	ldr	r3, [r3, #0]
 810ba04:	430a      	orrs	r2, r1
 810ba06:	605a      	str	r2, [r3, #4]
  }
}
 810ba08:	bf00      	nop
 810ba0a:	370c      	adds	r7, #12
 810ba0c:	46bd      	mov	sp, r7
 810ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba12:	4770      	bx	lr

0810ba14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810ba14:	b580      	push	{r7, lr}
 810ba16:	b098      	sub	sp, #96	@ 0x60
 810ba18:	af02      	add	r7, sp, #8
 810ba1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ba1c:	687b      	ldr	r3, [r7, #4]
 810ba1e:	2200      	movs	r2, #0
 810ba20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810ba24:	f7f6 ff5c 	bl	81028e0 <HAL_GetTick>
 810ba28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810ba2a:	687b      	ldr	r3, [r7, #4]
 810ba2c:	681b      	ldr	r3, [r3, #0]
 810ba2e:	681b      	ldr	r3, [r3, #0]
 810ba30:	f003 0308 	and.w	r3, r3, #8
 810ba34:	2b08      	cmp	r3, #8
 810ba36:	d12f      	bne.n	810ba98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810ba38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810ba3c:	9300      	str	r3, [sp, #0]
 810ba3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810ba40:	2200      	movs	r2, #0
 810ba42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810ba46:	6878      	ldr	r0, [r7, #4]
 810ba48:	f000 f88e 	bl	810bb68 <UART_WaitOnFlagUntilTimeout>
 810ba4c:	4603      	mov	r3, r0
 810ba4e:	2b00      	cmp	r3, #0
 810ba50:	d022      	beq.n	810ba98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810ba52:	687b      	ldr	r3, [r7, #4]
 810ba54:	681b      	ldr	r3, [r3, #0]
 810ba56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ba58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba5a:	e853 3f00 	ldrex	r3, [r3]
 810ba5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810ba60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810ba66:	653b      	str	r3, [r7, #80]	@ 0x50
 810ba68:	687b      	ldr	r3, [r7, #4]
 810ba6a:	681b      	ldr	r3, [r3, #0]
 810ba6c:	461a      	mov	r2, r3
 810ba6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ba70:	647b      	str	r3, [r7, #68]	@ 0x44
 810ba72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ba74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810ba76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ba78:	e841 2300 	strex	r3, r2, [r1]
 810ba7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810ba7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ba80:	2b00      	cmp	r3, #0
 810ba82:	d1e6      	bne.n	810ba52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810ba84:	687b      	ldr	r3, [r7, #4]
 810ba86:	2220      	movs	r2, #32
 810ba88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810ba8c:	687b      	ldr	r3, [r7, #4]
 810ba8e:	2200      	movs	r2, #0
 810ba90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810ba94:	2303      	movs	r3, #3
 810ba96:	e063      	b.n	810bb60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810ba98:	687b      	ldr	r3, [r7, #4]
 810ba9a:	681b      	ldr	r3, [r3, #0]
 810ba9c:	681b      	ldr	r3, [r3, #0]
 810ba9e:	f003 0304 	and.w	r3, r3, #4
 810baa2:	2b04      	cmp	r3, #4
 810baa4:	d149      	bne.n	810bb3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810baa6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810baaa:	9300      	str	r3, [sp, #0]
 810baac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810baae:	2200      	movs	r2, #0
 810bab0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810bab4:	6878      	ldr	r0, [r7, #4]
 810bab6:	f000 f857 	bl	810bb68 <UART_WaitOnFlagUntilTimeout>
 810baba:	4603      	mov	r3, r0
 810babc:	2b00      	cmp	r3, #0
 810babe:	d03c      	beq.n	810bb3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810bac0:	687b      	ldr	r3, [r7, #4]
 810bac2:	681b      	ldr	r3, [r3, #0]
 810bac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bac8:	e853 3f00 	ldrex	r3, [r3]
 810bacc:	623b      	str	r3, [r7, #32]
   return(result);
 810bace:	6a3b      	ldr	r3, [r7, #32]
 810bad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810bad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810bad6:	687b      	ldr	r3, [r7, #4]
 810bad8:	681b      	ldr	r3, [r3, #0]
 810bada:	461a      	mov	r2, r3
 810badc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810bade:	633b      	str	r3, [r7, #48]	@ 0x30
 810bae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810bae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810bae6:	e841 2300 	strex	r3, r2, [r1]
 810baea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810baec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810baee:	2b00      	cmp	r3, #0
 810baf0:	d1e6      	bne.n	810bac0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810baf2:	687b      	ldr	r3, [r7, #4]
 810baf4:	681b      	ldr	r3, [r3, #0]
 810baf6:	3308      	adds	r3, #8
 810baf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bafa:	693b      	ldr	r3, [r7, #16]
 810bafc:	e853 3f00 	ldrex	r3, [r3]
 810bb00:	60fb      	str	r3, [r7, #12]
   return(result);
 810bb02:	68fb      	ldr	r3, [r7, #12]
 810bb04:	f023 0301 	bic.w	r3, r3, #1
 810bb08:	64bb      	str	r3, [r7, #72]	@ 0x48
 810bb0a:	687b      	ldr	r3, [r7, #4]
 810bb0c:	681b      	ldr	r3, [r3, #0]
 810bb0e:	3308      	adds	r3, #8
 810bb10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810bb12:	61fa      	str	r2, [r7, #28]
 810bb14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bb16:	69b9      	ldr	r1, [r7, #24]
 810bb18:	69fa      	ldr	r2, [r7, #28]
 810bb1a:	e841 2300 	strex	r3, r2, [r1]
 810bb1e:	617b      	str	r3, [r7, #20]
   return(result);
 810bb20:	697b      	ldr	r3, [r7, #20]
 810bb22:	2b00      	cmp	r3, #0
 810bb24:	d1e5      	bne.n	810baf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810bb26:	687b      	ldr	r3, [r7, #4]
 810bb28:	2220      	movs	r2, #32
 810bb2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810bb2e:	687b      	ldr	r3, [r7, #4]
 810bb30:	2200      	movs	r2, #0
 810bb32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bb36:	2303      	movs	r3, #3
 810bb38:	e012      	b.n	810bb60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810bb3a:	687b      	ldr	r3, [r7, #4]
 810bb3c:	2220      	movs	r2, #32
 810bb3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810bb42:	687b      	ldr	r3, [r7, #4]
 810bb44:	2220      	movs	r2, #32
 810bb46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810bb4a:	687b      	ldr	r3, [r7, #4]
 810bb4c:	2200      	movs	r2, #0
 810bb4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810bb50:	687b      	ldr	r3, [r7, #4]
 810bb52:	2200      	movs	r2, #0
 810bb54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810bb56:	687b      	ldr	r3, [r7, #4]
 810bb58:	2200      	movs	r2, #0
 810bb5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810bb5e:	2300      	movs	r3, #0
}
 810bb60:	4618      	mov	r0, r3
 810bb62:	3758      	adds	r7, #88	@ 0x58
 810bb64:	46bd      	mov	sp, r7
 810bb66:	bd80      	pop	{r7, pc}

0810bb68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810bb68:	b580      	push	{r7, lr}
 810bb6a:	b084      	sub	sp, #16
 810bb6c:	af00      	add	r7, sp, #0
 810bb6e:	60f8      	str	r0, [r7, #12]
 810bb70:	60b9      	str	r1, [r7, #8]
 810bb72:	603b      	str	r3, [r7, #0]
 810bb74:	4613      	mov	r3, r2
 810bb76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810bb78:	e04f      	b.n	810bc1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810bb7a:	69bb      	ldr	r3, [r7, #24]
 810bb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bb80:	d04b      	beq.n	810bc1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810bb82:	f7f6 fead 	bl	81028e0 <HAL_GetTick>
 810bb86:	4602      	mov	r2, r0
 810bb88:	683b      	ldr	r3, [r7, #0]
 810bb8a:	1ad3      	subs	r3, r2, r3
 810bb8c:	69ba      	ldr	r2, [r7, #24]
 810bb8e:	429a      	cmp	r2, r3
 810bb90:	d302      	bcc.n	810bb98 <UART_WaitOnFlagUntilTimeout+0x30>
 810bb92:	69bb      	ldr	r3, [r7, #24]
 810bb94:	2b00      	cmp	r3, #0
 810bb96:	d101      	bne.n	810bb9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810bb98:	2303      	movs	r3, #3
 810bb9a:	e04e      	b.n	810bc3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810bb9c:	68fb      	ldr	r3, [r7, #12]
 810bb9e:	681b      	ldr	r3, [r3, #0]
 810bba0:	681b      	ldr	r3, [r3, #0]
 810bba2:	f003 0304 	and.w	r3, r3, #4
 810bba6:	2b00      	cmp	r3, #0
 810bba8:	d037      	beq.n	810bc1a <UART_WaitOnFlagUntilTimeout+0xb2>
 810bbaa:	68bb      	ldr	r3, [r7, #8]
 810bbac:	2b80      	cmp	r3, #128	@ 0x80
 810bbae:	d034      	beq.n	810bc1a <UART_WaitOnFlagUntilTimeout+0xb2>
 810bbb0:	68bb      	ldr	r3, [r7, #8]
 810bbb2:	2b40      	cmp	r3, #64	@ 0x40
 810bbb4:	d031      	beq.n	810bc1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810bbb6:	68fb      	ldr	r3, [r7, #12]
 810bbb8:	681b      	ldr	r3, [r3, #0]
 810bbba:	69db      	ldr	r3, [r3, #28]
 810bbbc:	f003 0308 	and.w	r3, r3, #8
 810bbc0:	2b08      	cmp	r3, #8
 810bbc2:	d110      	bne.n	810bbe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810bbc4:	68fb      	ldr	r3, [r7, #12]
 810bbc6:	681b      	ldr	r3, [r3, #0]
 810bbc8:	2208      	movs	r2, #8
 810bbca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810bbcc:	68f8      	ldr	r0, [r7, #12]
 810bbce:	f000 f838 	bl	810bc42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810bbd2:	68fb      	ldr	r3, [r7, #12]
 810bbd4:	2208      	movs	r2, #8
 810bbd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810bbda:	68fb      	ldr	r3, [r7, #12]
 810bbdc:	2200      	movs	r2, #0
 810bbde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810bbe2:	2301      	movs	r3, #1
 810bbe4:	e029      	b.n	810bc3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810bbe6:	68fb      	ldr	r3, [r7, #12]
 810bbe8:	681b      	ldr	r3, [r3, #0]
 810bbea:	69db      	ldr	r3, [r3, #28]
 810bbec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810bbf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810bbf4:	d111      	bne.n	810bc1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810bbf6:	68fb      	ldr	r3, [r7, #12]
 810bbf8:	681b      	ldr	r3, [r3, #0]
 810bbfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810bbfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810bc00:	68f8      	ldr	r0, [r7, #12]
 810bc02:	f000 f81e 	bl	810bc42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810bc06:	68fb      	ldr	r3, [r7, #12]
 810bc08:	2220      	movs	r2, #32
 810bc0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810bc0e:	68fb      	ldr	r3, [r7, #12]
 810bc10:	2200      	movs	r2, #0
 810bc12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810bc16:	2303      	movs	r3, #3
 810bc18:	e00f      	b.n	810bc3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810bc1a:	68fb      	ldr	r3, [r7, #12]
 810bc1c:	681b      	ldr	r3, [r3, #0]
 810bc1e:	69da      	ldr	r2, [r3, #28]
 810bc20:	68bb      	ldr	r3, [r7, #8]
 810bc22:	4013      	ands	r3, r2
 810bc24:	68ba      	ldr	r2, [r7, #8]
 810bc26:	429a      	cmp	r2, r3
 810bc28:	bf0c      	ite	eq
 810bc2a:	2301      	moveq	r3, #1
 810bc2c:	2300      	movne	r3, #0
 810bc2e:	b2db      	uxtb	r3, r3
 810bc30:	461a      	mov	r2, r3
 810bc32:	79fb      	ldrb	r3, [r7, #7]
 810bc34:	429a      	cmp	r2, r3
 810bc36:	d0a0      	beq.n	810bb7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810bc38:	2300      	movs	r3, #0
}
 810bc3a:	4618      	mov	r0, r3
 810bc3c:	3710      	adds	r7, #16
 810bc3e:	46bd      	mov	sp, r7
 810bc40:	bd80      	pop	{r7, pc}

0810bc42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810bc42:	b480      	push	{r7}
 810bc44:	b095      	sub	sp, #84	@ 0x54
 810bc46:	af00      	add	r7, sp, #0
 810bc48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810bc4a:	687b      	ldr	r3, [r7, #4]
 810bc4c:	681b      	ldr	r3, [r3, #0]
 810bc4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bc50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bc52:	e853 3f00 	ldrex	r3, [r3]
 810bc56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810bc58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bc5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810bc5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810bc60:	687b      	ldr	r3, [r7, #4]
 810bc62:	681b      	ldr	r3, [r3, #0]
 810bc64:	461a      	mov	r2, r3
 810bc66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810bc68:	643b      	str	r3, [r7, #64]	@ 0x40
 810bc6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bc6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810bc6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810bc70:	e841 2300 	strex	r3, r2, [r1]
 810bc74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810bc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc78:	2b00      	cmp	r3, #0
 810bc7a:	d1e6      	bne.n	810bc4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810bc7c:	687b      	ldr	r3, [r7, #4]
 810bc7e:	681b      	ldr	r3, [r3, #0]
 810bc80:	3308      	adds	r3, #8
 810bc82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bc84:	6a3b      	ldr	r3, [r7, #32]
 810bc86:	e853 3f00 	ldrex	r3, [r3]
 810bc8a:	61fb      	str	r3, [r7, #28]
   return(result);
 810bc8c:	69fb      	ldr	r3, [r7, #28]
 810bc8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810bc92:	f023 0301 	bic.w	r3, r3, #1
 810bc96:	64bb      	str	r3, [r7, #72]	@ 0x48
 810bc98:	687b      	ldr	r3, [r7, #4]
 810bc9a:	681b      	ldr	r3, [r3, #0]
 810bc9c:	3308      	adds	r3, #8
 810bc9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810bca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810bca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810bca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810bca8:	e841 2300 	strex	r3, r2, [r1]
 810bcac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810bcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bcb0:	2b00      	cmp	r3, #0
 810bcb2:	d1e3      	bne.n	810bc7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810bcb4:	687b      	ldr	r3, [r7, #4]
 810bcb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810bcb8:	2b01      	cmp	r3, #1
 810bcba:	d118      	bne.n	810bcee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810bcbc:	687b      	ldr	r3, [r7, #4]
 810bcbe:	681b      	ldr	r3, [r3, #0]
 810bcc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bcc2:	68fb      	ldr	r3, [r7, #12]
 810bcc4:	e853 3f00 	ldrex	r3, [r3]
 810bcc8:	60bb      	str	r3, [r7, #8]
   return(result);
 810bcca:	68bb      	ldr	r3, [r7, #8]
 810bccc:	f023 0310 	bic.w	r3, r3, #16
 810bcd0:	647b      	str	r3, [r7, #68]	@ 0x44
 810bcd2:	687b      	ldr	r3, [r7, #4]
 810bcd4:	681b      	ldr	r3, [r3, #0]
 810bcd6:	461a      	mov	r2, r3
 810bcd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bcda:	61bb      	str	r3, [r7, #24]
 810bcdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bcde:	6979      	ldr	r1, [r7, #20]
 810bce0:	69ba      	ldr	r2, [r7, #24]
 810bce2:	e841 2300 	strex	r3, r2, [r1]
 810bce6:	613b      	str	r3, [r7, #16]
   return(result);
 810bce8:	693b      	ldr	r3, [r7, #16]
 810bcea:	2b00      	cmp	r3, #0
 810bcec:	d1e6      	bne.n	810bcbc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810bcee:	687b      	ldr	r3, [r7, #4]
 810bcf0:	2220      	movs	r2, #32
 810bcf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810bcf6:	687b      	ldr	r3, [r7, #4]
 810bcf8:	2200      	movs	r2, #0
 810bcfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810bcfc:	687b      	ldr	r3, [r7, #4]
 810bcfe:	2200      	movs	r2, #0
 810bd00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810bd02:	bf00      	nop
 810bd04:	3754      	adds	r7, #84	@ 0x54
 810bd06:	46bd      	mov	sp, r7
 810bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd0c:	4770      	bx	lr

0810bd0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810bd0e:	b480      	push	{r7}
 810bd10:	b085      	sub	sp, #20
 810bd12:	af00      	add	r7, sp, #0
 810bd14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810bd16:	687b      	ldr	r3, [r7, #4]
 810bd18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810bd1c:	2b01      	cmp	r3, #1
 810bd1e:	d101      	bne.n	810bd24 <HAL_UARTEx_DisableFifoMode+0x16>
 810bd20:	2302      	movs	r3, #2
 810bd22:	e027      	b.n	810bd74 <HAL_UARTEx_DisableFifoMode+0x66>
 810bd24:	687b      	ldr	r3, [r7, #4]
 810bd26:	2201      	movs	r2, #1
 810bd28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810bd2c:	687b      	ldr	r3, [r7, #4]
 810bd2e:	2224      	movs	r2, #36	@ 0x24
 810bd30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810bd34:	687b      	ldr	r3, [r7, #4]
 810bd36:	681b      	ldr	r3, [r3, #0]
 810bd38:	681b      	ldr	r3, [r3, #0]
 810bd3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810bd3c:	687b      	ldr	r3, [r7, #4]
 810bd3e:	681b      	ldr	r3, [r3, #0]
 810bd40:	681a      	ldr	r2, [r3, #0]
 810bd42:	687b      	ldr	r3, [r7, #4]
 810bd44:	681b      	ldr	r3, [r3, #0]
 810bd46:	f022 0201 	bic.w	r2, r2, #1
 810bd4a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810bd4c:	68fb      	ldr	r3, [r7, #12]
 810bd4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810bd52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810bd54:	687b      	ldr	r3, [r7, #4]
 810bd56:	2200      	movs	r2, #0
 810bd58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810bd5a:	687b      	ldr	r3, [r7, #4]
 810bd5c:	681b      	ldr	r3, [r3, #0]
 810bd5e:	68fa      	ldr	r2, [r7, #12]
 810bd60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810bd62:	687b      	ldr	r3, [r7, #4]
 810bd64:	2220      	movs	r2, #32
 810bd66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810bd6a:	687b      	ldr	r3, [r7, #4]
 810bd6c:	2200      	movs	r2, #0
 810bd6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810bd72:	2300      	movs	r3, #0
}
 810bd74:	4618      	mov	r0, r3
 810bd76:	3714      	adds	r7, #20
 810bd78:	46bd      	mov	sp, r7
 810bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd7e:	4770      	bx	lr

0810bd80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810bd80:	b580      	push	{r7, lr}
 810bd82:	b084      	sub	sp, #16
 810bd84:	af00      	add	r7, sp, #0
 810bd86:	6078      	str	r0, [r7, #4]
 810bd88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810bd8a:	687b      	ldr	r3, [r7, #4]
 810bd8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810bd90:	2b01      	cmp	r3, #1
 810bd92:	d101      	bne.n	810bd98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810bd94:	2302      	movs	r3, #2
 810bd96:	e02d      	b.n	810bdf4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810bd98:	687b      	ldr	r3, [r7, #4]
 810bd9a:	2201      	movs	r2, #1
 810bd9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810bda0:	687b      	ldr	r3, [r7, #4]
 810bda2:	2224      	movs	r2, #36	@ 0x24
 810bda4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810bda8:	687b      	ldr	r3, [r7, #4]
 810bdaa:	681b      	ldr	r3, [r3, #0]
 810bdac:	681b      	ldr	r3, [r3, #0]
 810bdae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810bdb0:	687b      	ldr	r3, [r7, #4]
 810bdb2:	681b      	ldr	r3, [r3, #0]
 810bdb4:	681a      	ldr	r2, [r3, #0]
 810bdb6:	687b      	ldr	r3, [r7, #4]
 810bdb8:	681b      	ldr	r3, [r3, #0]
 810bdba:	f022 0201 	bic.w	r2, r2, #1
 810bdbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810bdc0:	687b      	ldr	r3, [r7, #4]
 810bdc2:	681b      	ldr	r3, [r3, #0]
 810bdc4:	689b      	ldr	r3, [r3, #8]
 810bdc6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810bdca:	687b      	ldr	r3, [r7, #4]
 810bdcc:	681b      	ldr	r3, [r3, #0]
 810bdce:	683a      	ldr	r2, [r7, #0]
 810bdd0:	430a      	orrs	r2, r1
 810bdd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810bdd4:	6878      	ldr	r0, [r7, #4]
 810bdd6:	f000 f84f 	bl	810be78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810bdda:	687b      	ldr	r3, [r7, #4]
 810bddc:	681b      	ldr	r3, [r3, #0]
 810bdde:	68fa      	ldr	r2, [r7, #12]
 810bde0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810bde2:	687b      	ldr	r3, [r7, #4]
 810bde4:	2220      	movs	r2, #32
 810bde6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810bdea:	687b      	ldr	r3, [r7, #4]
 810bdec:	2200      	movs	r2, #0
 810bdee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810bdf2:	2300      	movs	r3, #0
}
 810bdf4:	4618      	mov	r0, r3
 810bdf6:	3710      	adds	r7, #16
 810bdf8:	46bd      	mov	sp, r7
 810bdfa:	bd80      	pop	{r7, pc}

0810bdfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810bdfc:	b580      	push	{r7, lr}
 810bdfe:	b084      	sub	sp, #16
 810be00:	af00      	add	r7, sp, #0
 810be02:	6078      	str	r0, [r7, #4]
 810be04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810be06:	687b      	ldr	r3, [r7, #4]
 810be08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810be0c:	2b01      	cmp	r3, #1
 810be0e:	d101      	bne.n	810be14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810be10:	2302      	movs	r3, #2
 810be12:	e02d      	b.n	810be70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810be14:	687b      	ldr	r3, [r7, #4]
 810be16:	2201      	movs	r2, #1
 810be18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810be1c:	687b      	ldr	r3, [r7, #4]
 810be1e:	2224      	movs	r2, #36	@ 0x24
 810be20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810be24:	687b      	ldr	r3, [r7, #4]
 810be26:	681b      	ldr	r3, [r3, #0]
 810be28:	681b      	ldr	r3, [r3, #0]
 810be2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810be2c:	687b      	ldr	r3, [r7, #4]
 810be2e:	681b      	ldr	r3, [r3, #0]
 810be30:	681a      	ldr	r2, [r3, #0]
 810be32:	687b      	ldr	r3, [r7, #4]
 810be34:	681b      	ldr	r3, [r3, #0]
 810be36:	f022 0201 	bic.w	r2, r2, #1
 810be3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810be3c:	687b      	ldr	r3, [r7, #4]
 810be3e:	681b      	ldr	r3, [r3, #0]
 810be40:	689b      	ldr	r3, [r3, #8]
 810be42:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810be46:	687b      	ldr	r3, [r7, #4]
 810be48:	681b      	ldr	r3, [r3, #0]
 810be4a:	683a      	ldr	r2, [r7, #0]
 810be4c:	430a      	orrs	r2, r1
 810be4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810be50:	6878      	ldr	r0, [r7, #4]
 810be52:	f000 f811 	bl	810be78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810be56:	687b      	ldr	r3, [r7, #4]
 810be58:	681b      	ldr	r3, [r3, #0]
 810be5a:	68fa      	ldr	r2, [r7, #12]
 810be5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810be5e:	687b      	ldr	r3, [r7, #4]
 810be60:	2220      	movs	r2, #32
 810be62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810be66:	687b      	ldr	r3, [r7, #4]
 810be68:	2200      	movs	r2, #0
 810be6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810be6e:	2300      	movs	r3, #0
}
 810be70:	4618      	mov	r0, r3
 810be72:	3710      	adds	r7, #16
 810be74:	46bd      	mov	sp, r7
 810be76:	bd80      	pop	{r7, pc}

0810be78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810be78:	b480      	push	{r7}
 810be7a:	b085      	sub	sp, #20
 810be7c:	af00      	add	r7, sp, #0
 810be7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810be80:	687b      	ldr	r3, [r7, #4]
 810be82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810be84:	2b00      	cmp	r3, #0
 810be86:	d108      	bne.n	810be9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810be88:	687b      	ldr	r3, [r7, #4]
 810be8a:	2201      	movs	r2, #1
 810be8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810be90:	687b      	ldr	r3, [r7, #4]
 810be92:	2201      	movs	r2, #1
 810be94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810be98:	e031      	b.n	810befe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810be9a:	2310      	movs	r3, #16
 810be9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810be9e:	2310      	movs	r3, #16
 810bea0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810bea2:	687b      	ldr	r3, [r7, #4]
 810bea4:	681b      	ldr	r3, [r3, #0]
 810bea6:	689b      	ldr	r3, [r3, #8]
 810bea8:	0e5b      	lsrs	r3, r3, #25
 810beaa:	b2db      	uxtb	r3, r3
 810beac:	f003 0307 	and.w	r3, r3, #7
 810beb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810beb2:	687b      	ldr	r3, [r7, #4]
 810beb4:	681b      	ldr	r3, [r3, #0]
 810beb6:	689b      	ldr	r3, [r3, #8]
 810beb8:	0f5b      	lsrs	r3, r3, #29
 810beba:	b2db      	uxtb	r3, r3
 810bebc:	f003 0307 	and.w	r3, r3, #7
 810bec0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810bec2:	7bbb      	ldrb	r3, [r7, #14]
 810bec4:	7b3a      	ldrb	r2, [r7, #12]
 810bec6:	4911      	ldr	r1, [pc, #68]	@ (810bf0c <UARTEx_SetNbDataToProcess+0x94>)
 810bec8:	5c8a      	ldrb	r2, [r1, r2]
 810beca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810bece:	7b3a      	ldrb	r2, [r7, #12]
 810bed0:	490f      	ldr	r1, [pc, #60]	@ (810bf10 <UARTEx_SetNbDataToProcess+0x98>)
 810bed2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810bed4:	fb93 f3f2 	sdiv	r3, r3, r2
 810bed8:	b29a      	uxth	r2, r3
 810beda:	687b      	ldr	r3, [r7, #4]
 810bedc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810bee0:	7bfb      	ldrb	r3, [r7, #15]
 810bee2:	7b7a      	ldrb	r2, [r7, #13]
 810bee4:	4909      	ldr	r1, [pc, #36]	@ (810bf0c <UARTEx_SetNbDataToProcess+0x94>)
 810bee6:	5c8a      	ldrb	r2, [r1, r2]
 810bee8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810beec:	7b7a      	ldrb	r2, [r7, #13]
 810beee:	4908      	ldr	r1, [pc, #32]	@ (810bf10 <UARTEx_SetNbDataToProcess+0x98>)
 810bef0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810bef2:	fb93 f3f2 	sdiv	r3, r3, r2
 810bef6:	b29a      	uxth	r2, r3
 810bef8:	687b      	ldr	r3, [r7, #4]
 810befa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810befe:	bf00      	nop
 810bf00:	3714      	adds	r7, #20
 810bf02:	46bd      	mov	sp, r7
 810bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf08:	4770      	bx	lr
 810bf0a:	bf00      	nop
 810bf0c:	0810fd08 	.word	0x0810fd08
 810bf10:	0810fd10 	.word	0x0810fd10

0810bf14 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 810bf14:	b480      	push	{r7}
 810bf16:	b083      	sub	sp, #12
 810bf18:	af00      	add	r7, sp, #0
 810bf1a:	6078      	str	r0, [r7, #4]
 810bf1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810bf1e:	683b      	ldr	r3, [r7, #0]
 810bf20:	681b      	ldr	r3, [r3, #0]
 810bf22:	2b00      	cmp	r3, #0
 810bf24:	d123      	bne.n	810bf6e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810bf26:	687b      	ldr	r3, [r7, #4]
 810bf28:	681b      	ldr	r3, [r3, #0]
 810bf2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810bf2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810bf32:	683a      	ldr	r2, [r7, #0]
 810bf34:	6851      	ldr	r1, [r2, #4]
 810bf36:	683a      	ldr	r2, [r7, #0]
 810bf38:	6892      	ldr	r2, [r2, #8]
 810bf3a:	4311      	orrs	r1, r2
 810bf3c:	683a      	ldr	r2, [r7, #0]
 810bf3e:	68d2      	ldr	r2, [r2, #12]
 810bf40:	4311      	orrs	r1, r2
 810bf42:	683a      	ldr	r2, [r7, #0]
 810bf44:	6912      	ldr	r2, [r2, #16]
 810bf46:	4311      	orrs	r1, r2
 810bf48:	683a      	ldr	r2, [r7, #0]
 810bf4a:	6952      	ldr	r2, [r2, #20]
 810bf4c:	4311      	orrs	r1, r2
 810bf4e:	683a      	ldr	r2, [r7, #0]
 810bf50:	6992      	ldr	r2, [r2, #24]
 810bf52:	4311      	orrs	r1, r2
 810bf54:	683a      	ldr	r2, [r7, #0]
 810bf56:	69d2      	ldr	r2, [r2, #28]
 810bf58:	4311      	orrs	r1, r2
 810bf5a:	683a      	ldr	r2, [r7, #0]
 810bf5c:	6a12      	ldr	r2, [r2, #32]
 810bf5e:	4311      	orrs	r1, r2
 810bf60:	683a      	ldr	r2, [r7, #0]
 810bf62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 810bf64:	430a      	orrs	r2, r1
 810bf66:	431a      	orrs	r2, r3
 810bf68:	687b      	ldr	r3, [r7, #4]
 810bf6a:	601a      	str	r2, [r3, #0]
 810bf6c:	e028      	b.n	810bfc0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810bf6e:	687b      	ldr	r3, [r7, #4]
 810bf70:	681b      	ldr	r3, [r3, #0]
 810bf72:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 810bf76:	683b      	ldr	r3, [r7, #0]
 810bf78:	69d9      	ldr	r1, [r3, #28]
 810bf7a:	683b      	ldr	r3, [r7, #0]
 810bf7c:	6a1b      	ldr	r3, [r3, #32]
 810bf7e:	4319      	orrs	r1, r3
 810bf80:	683b      	ldr	r3, [r7, #0]
 810bf82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810bf84:	430b      	orrs	r3, r1
 810bf86:	431a      	orrs	r2, r3
 810bf88:	687b      	ldr	r3, [r7, #4]
 810bf8a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 810bf8c:	687b      	ldr	r3, [r7, #4]
 810bf8e:	685b      	ldr	r3, [r3, #4]
 810bf90:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810bf94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810bf98:	683a      	ldr	r2, [r7, #0]
 810bf9a:	6851      	ldr	r1, [r2, #4]
 810bf9c:	683a      	ldr	r2, [r7, #0]
 810bf9e:	6892      	ldr	r2, [r2, #8]
 810bfa0:	4311      	orrs	r1, r2
 810bfa2:	683a      	ldr	r2, [r7, #0]
 810bfa4:	68d2      	ldr	r2, [r2, #12]
 810bfa6:	4311      	orrs	r1, r2
 810bfa8:	683a      	ldr	r2, [r7, #0]
 810bfaa:	6912      	ldr	r2, [r2, #16]
 810bfac:	4311      	orrs	r1, r2
 810bfae:	683a      	ldr	r2, [r7, #0]
 810bfb0:	6952      	ldr	r2, [r2, #20]
 810bfb2:	4311      	orrs	r1, r2
 810bfb4:	683a      	ldr	r2, [r7, #0]
 810bfb6:	6992      	ldr	r2, [r2, #24]
 810bfb8:	430a      	orrs	r2, r1
 810bfba:	431a      	orrs	r2, r3
 810bfbc:	687b      	ldr	r3, [r7, #4]
 810bfbe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 810bfc0:	2300      	movs	r3, #0
}
 810bfc2:	4618      	mov	r0, r3
 810bfc4:	370c      	adds	r7, #12
 810bfc6:	46bd      	mov	sp, r7
 810bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfcc:	4770      	bx	lr

0810bfce <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810bfce:	b480      	push	{r7}
 810bfd0:	b085      	sub	sp, #20
 810bfd2:	af00      	add	r7, sp, #0
 810bfd4:	60f8      	str	r0, [r7, #12]
 810bfd6:	60b9      	str	r1, [r7, #8]
 810bfd8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810bfda:	687b      	ldr	r3, [r7, #4]
 810bfdc:	2b00      	cmp	r3, #0
 810bfde:	d128      	bne.n	810c032 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810bfe0:	68fb      	ldr	r3, [r7, #12]
 810bfe2:	689b      	ldr	r3, [r3, #8]
 810bfe4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810bfe8:	68bb      	ldr	r3, [r7, #8]
 810bfea:	681b      	ldr	r3, [r3, #0]
 810bfec:	1e59      	subs	r1, r3, #1
 810bfee:	68bb      	ldr	r3, [r7, #8]
 810bff0:	685b      	ldr	r3, [r3, #4]
 810bff2:	3b01      	subs	r3, #1
 810bff4:	011b      	lsls	r3, r3, #4
 810bff6:	4319      	orrs	r1, r3
 810bff8:	68bb      	ldr	r3, [r7, #8]
 810bffa:	689b      	ldr	r3, [r3, #8]
 810bffc:	3b01      	subs	r3, #1
 810bffe:	021b      	lsls	r3, r3, #8
 810c000:	4319      	orrs	r1, r3
 810c002:	68bb      	ldr	r3, [r7, #8]
 810c004:	68db      	ldr	r3, [r3, #12]
 810c006:	3b01      	subs	r3, #1
 810c008:	031b      	lsls	r3, r3, #12
 810c00a:	4319      	orrs	r1, r3
 810c00c:	68bb      	ldr	r3, [r7, #8]
 810c00e:	691b      	ldr	r3, [r3, #16]
 810c010:	3b01      	subs	r3, #1
 810c012:	041b      	lsls	r3, r3, #16
 810c014:	4319      	orrs	r1, r3
 810c016:	68bb      	ldr	r3, [r7, #8]
 810c018:	695b      	ldr	r3, [r3, #20]
 810c01a:	3b01      	subs	r3, #1
 810c01c:	051b      	lsls	r3, r3, #20
 810c01e:	4319      	orrs	r1, r3
 810c020:	68bb      	ldr	r3, [r7, #8]
 810c022:	699b      	ldr	r3, [r3, #24]
 810c024:	3b01      	subs	r3, #1
 810c026:	061b      	lsls	r3, r3, #24
 810c028:	430b      	orrs	r3, r1
 810c02a:	431a      	orrs	r2, r3
 810c02c:	68fb      	ldr	r3, [r7, #12]
 810c02e:	609a      	str	r2, [r3, #8]
 810c030:	e02f      	b.n	810c092 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810c032:	68fb      	ldr	r3, [r7, #12]
 810c034:	689b      	ldr	r3, [r3, #8]
 810c036:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810c03a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810c03e:	68ba      	ldr	r2, [r7, #8]
 810c040:	68d2      	ldr	r2, [r2, #12]
 810c042:	3a01      	subs	r2, #1
 810c044:	0311      	lsls	r1, r2, #12
 810c046:	68ba      	ldr	r2, [r7, #8]
 810c048:	6952      	ldr	r2, [r2, #20]
 810c04a:	3a01      	subs	r2, #1
 810c04c:	0512      	lsls	r2, r2, #20
 810c04e:	430a      	orrs	r2, r1
 810c050:	431a      	orrs	r2, r3
 810c052:	68fb      	ldr	r3, [r7, #12]
 810c054:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810c056:	68fb      	ldr	r3, [r7, #12]
 810c058:	68db      	ldr	r3, [r3, #12]
 810c05a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810c05e:	68bb      	ldr	r3, [r7, #8]
 810c060:	681b      	ldr	r3, [r3, #0]
 810c062:	1e59      	subs	r1, r3, #1
 810c064:	68bb      	ldr	r3, [r7, #8]
 810c066:	685b      	ldr	r3, [r3, #4]
 810c068:	3b01      	subs	r3, #1
 810c06a:	011b      	lsls	r3, r3, #4
 810c06c:	4319      	orrs	r1, r3
 810c06e:	68bb      	ldr	r3, [r7, #8]
 810c070:	689b      	ldr	r3, [r3, #8]
 810c072:	3b01      	subs	r3, #1
 810c074:	021b      	lsls	r3, r3, #8
 810c076:	4319      	orrs	r1, r3
 810c078:	68bb      	ldr	r3, [r7, #8]
 810c07a:	691b      	ldr	r3, [r3, #16]
 810c07c:	3b01      	subs	r3, #1
 810c07e:	041b      	lsls	r3, r3, #16
 810c080:	4319      	orrs	r1, r3
 810c082:	68bb      	ldr	r3, [r7, #8]
 810c084:	699b      	ldr	r3, [r3, #24]
 810c086:	3b01      	subs	r3, #1
 810c088:	061b      	lsls	r3, r3, #24
 810c08a:	430b      	orrs	r3, r1
 810c08c:	431a      	orrs	r2, r3
 810c08e:	68fb      	ldr	r3, [r7, #12]
 810c090:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 810c092:	2300      	movs	r3, #0
}
 810c094:	4618      	mov	r0, r3
 810c096:	3714      	adds	r7, #20
 810c098:	46bd      	mov	sp, r7
 810c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c09e:	4770      	bx	lr

0810c0a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810c0a0:	b084      	sub	sp, #16
 810c0a2:	b480      	push	{r7}
 810c0a4:	b085      	sub	sp, #20
 810c0a6:	af00      	add	r7, sp, #0
 810c0a8:	6078      	str	r0, [r7, #4]
 810c0aa:	f107 001c 	add.w	r0, r7, #28
 810c0ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810c0b2:	2300      	movs	r3, #0
 810c0b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 810c0b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 810c0b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 810c0ba:	431a      	orrs	r2, r3
             Init.BusWide             | \
 810c0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 810c0be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 810c0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 810c0c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 810c0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 810c0c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 810c0c8:	68fa      	ldr	r2, [r7, #12]
 810c0ca:	4313      	orrs	r3, r2
 810c0cc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810c0ce:	687b      	ldr	r3, [r7, #4]
 810c0d0:	685a      	ldr	r2, [r3, #4]
 810c0d2:	4b07      	ldr	r3, [pc, #28]	@ (810c0f0 <SDMMC_Init+0x50>)
 810c0d4:	4013      	ands	r3, r2
 810c0d6:	68fa      	ldr	r2, [r7, #12]
 810c0d8:	431a      	orrs	r2, r3
 810c0da:	687b      	ldr	r3, [r7, #4]
 810c0dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810c0de:	2300      	movs	r3, #0
}
 810c0e0:	4618      	mov	r0, r3
 810c0e2:	3714      	adds	r7, #20
 810c0e4:	46bd      	mov	sp, r7
 810c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0ea:	b004      	add	sp, #16
 810c0ec:	4770      	bx	lr
 810c0ee:	bf00      	nop
 810c0f0:	ffc02c00 	.word	0xffc02c00

0810c0f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 810c0f4:	b480      	push	{r7}
 810c0f6:	b083      	sub	sp, #12
 810c0f8:	af00      	add	r7, sp, #0
 810c0fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810c0fc:	687b      	ldr	r3, [r7, #4]
 810c0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 810c102:	4618      	mov	r0, r3
 810c104:	370c      	adds	r7, #12
 810c106:	46bd      	mov	sp, r7
 810c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c10c:	4770      	bx	lr

0810c10e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810c10e:	b480      	push	{r7}
 810c110:	b083      	sub	sp, #12
 810c112:	af00      	add	r7, sp, #0
 810c114:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810c116:	687b      	ldr	r3, [r7, #4]
 810c118:	681b      	ldr	r3, [r3, #0]
 810c11a:	f043 0203 	orr.w	r2, r3, #3
 810c11e:	687b      	ldr	r3, [r7, #4]
 810c120:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810c122:	2300      	movs	r3, #0
}
 810c124:	4618      	mov	r0, r3
 810c126:	370c      	adds	r7, #12
 810c128:	46bd      	mov	sp, r7
 810c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c12e:	4770      	bx	lr

0810c130 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 810c130:	b480      	push	{r7}
 810c132:	b083      	sub	sp, #12
 810c134:	af00      	add	r7, sp, #0
 810c136:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810c138:	687b      	ldr	r3, [r7, #4]
 810c13a:	681b      	ldr	r3, [r3, #0]
 810c13c:	f003 0303 	and.w	r3, r3, #3
}
 810c140:	4618      	mov	r0, r3
 810c142:	370c      	adds	r7, #12
 810c144:	46bd      	mov	sp, r7
 810c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c14a:	4770      	bx	lr

0810c14c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 810c14c:	b480      	push	{r7}
 810c14e:	b085      	sub	sp, #20
 810c150:	af00      	add	r7, sp, #0
 810c152:	6078      	str	r0, [r7, #4]
 810c154:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810c156:	2300      	movs	r3, #0
 810c158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810c15a:	683b      	ldr	r3, [r7, #0]
 810c15c:	681a      	ldr	r2, [r3, #0]
 810c15e:	687b      	ldr	r3, [r7, #4]
 810c160:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810c162:	683b      	ldr	r3, [r7, #0]
 810c164:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 810c166:	683b      	ldr	r3, [r7, #0]
 810c168:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810c16a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 810c16c:	683b      	ldr	r3, [r7, #0]
 810c16e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 810c170:	431a      	orrs	r2, r3
                       Command->CPSM);
 810c172:	683b      	ldr	r3, [r7, #0]
 810c174:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 810c176:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810c178:	68fa      	ldr	r2, [r7, #12]
 810c17a:	4313      	orrs	r3, r2
 810c17c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810c17e:	687b      	ldr	r3, [r7, #4]
 810c180:	68da      	ldr	r2, [r3, #12]
 810c182:	4b06      	ldr	r3, [pc, #24]	@ (810c19c <SDMMC_SendCommand+0x50>)
 810c184:	4013      	ands	r3, r2
 810c186:	68fa      	ldr	r2, [r7, #12]
 810c188:	431a      	orrs	r2, r3
 810c18a:	687b      	ldr	r3, [r7, #4]
 810c18c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810c18e:	2300      	movs	r3, #0
}
 810c190:	4618      	mov	r0, r3
 810c192:	3714      	adds	r7, #20
 810c194:	46bd      	mov	sp, r7
 810c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c19a:	4770      	bx	lr
 810c19c:	fffee0c0 	.word	0xfffee0c0

0810c1a0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 810c1a0:	b480      	push	{r7}
 810c1a2:	b083      	sub	sp, #12
 810c1a4:	af00      	add	r7, sp, #0
 810c1a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810c1a8:	687b      	ldr	r3, [r7, #4]
 810c1aa:	691b      	ldr	r3, [r3, #16]
 810c1ac:	b2db      	uxtb	r3, r3
}
 810c1ae:	4618      	mov	r0, r3
 810c1b0:	370c      	adds	r7, #12
 810c1b2:	46bd      	mov	sp, r7
 810c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1b8:	4770      	bx	lr

0810c1ba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810c1ba:	b480      	push	{r7}
 810c1bc:	b085      	sub	sp, #20
 810c1be:	af00      	add	r7, sp, #0
 810c1c0:	6078      	str	r0, [r7, #4]
 810c1c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810c1c4:	687b      	ldr	r3, [r7, #4]
 810c1c6:	3314      	adds	r3, #20
 810c1c8:	461a      	mov	r2, r3
 810c1ca:	683b      	ldr	r3, [r7, #0]
 810c1cc:	4413      	add	r3, r2
 810c1ce:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810c1d0:	68fb      	ldr	r3, [r7, #12]
 810c1d2:	681b      	ldr	r3, [r3, #0]
}
 810c1d4:	4618      	mov	r0, r3
 810c1d6:	3714      	adds	r7, #20
 810c1d8:	46bd      	mov	sp, r7
 810c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1de:	4770      	bx	lr

0810c1e0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 810c1e0:	b480      	push	{r7}
 810c1e2:	b085      	sub	sp, #20
 810c1e4:	af00      	add	r7, sp, #0
 810c1e6:	6078      	str	r0, [r7, #4]
 810c1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810c1ea:	2300      	movs	r3, #0
 810c1ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810c1ee:	683b      	ldr	r3, [r7, #0]
 810c1f0:	681a      	ldr	r2, [r3, #0]
 810c1f2:	687b      	ldr	r3, [r7, #4]
 810c1f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810c1f6:	683b      	ldr	r3, [r7, #0]
 810c1f8:	685a      	ldr	r2, [r3, #4]
 810c1fa:	687b      	ldr	r3, [r7, #4]
 810c1fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810c1fe:	683b      	ldr	r3, [r7, #0]
 810c200:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 810c202:	683b      	ldr	r3, [r7, #0]
 810c204:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810c206:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810c208:	683b      	ldr	r3, [r7, #0]
 810c20a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 810c20c:	431a      	orrs	r2, r3
                       Data->DPSM);
 810c20e:	683b      	ldr	r3, [r7, #0]
 810c210:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 810c212:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810c214:	68fa      	ldr	r2, [r7, #12]
 810c216:	4313      	orrs	r3, r2
 810c218:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810c21a:	687b      	ldr	r3, [r7, #4]
 810c21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c21e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810c222:	68fb      	ldr	r3, [r7, #12]
 810c224:	431a      	orrs	r2, r3
 810c226:	687b      	ldr	r3, [r7, #4]
 810c228:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810c22a:	2300      	movs	r3, #0

}
 810c22c:	4618      	mov	r0, r3
 810c22e:	3714      	adds	r7, #20
 810c230:	46bd      	mov	sp, r7
 810c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c236:	4770      	bx	lr

0810c238 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810c238:	b580      	push	{r7, lr}
 810c23a:	b088      	sub	sp, #32
 810c23c:	af00      	add	r7, sp, #0
 810c23e:	6078      	str	r0, [r7, #4]
 810c240:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810c242:	683b      	ldr	r3, [r7, #0]
 810c244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810c246:	2310      	movs	r3, #16
 810c248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c24a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c24e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c250:	2300      	movs	r3, #0
 810c252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c258:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c25a:	f107 0308 	add.w	r3, r7, #8
 810c25e:	4619      	mov	r1, r3
 810c260:	6878      	ldr	r0, [r7, #4]
 810c262:	f7ff ff73 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810c266:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c26a:	2110      	movs	r1, #16
 810c26c:	6878      	ldr	r0, [r7, #4]
 810c26e:	f000 f995 	bl	810c59c <SDMMC_GetCmdResp1>
 810c272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c274:	69fb      	ldr	r3, [r7, #28]
}
 810c276:	4618      	mov	r0, r3
 810c278:	3720      	adds	r7, #32
 810c27a:	46bd      	mov	sp, r7
 810c27c:	bd80      	pop	{r7, pc}

0810c27e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 810c27e:	b580      	push	{r7, lr}
 810c280:	b088      	sub	sp, #32
 810c282:	af00      	add	r7, sp, #0
 810c284:	6078      	str	r0, [r7, #4]
 810c286:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810c288:	683b      	ldr	r3, [r7, #0]
 810c28a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810c28c:	2307      	movs	r3, #7
 810c28e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c296:	2300      	movs	r3, #0
 810c298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c29a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c29e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c2a0:	f107 0308 	add.w	r3, r7, #8
 810c2a4:	4619      	mov	r1, r3
 810c2a6:	6878      	ldr	r0, [r7, #4]
 810c2a8:	f7ff ff50 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810c2ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c2b0:	2107      	movs	r1, #7
 810c2b2:	6878      	ldr	r0, [r7, #4]
 810c2b4:	f000 f972 	bl	810c59c <SDMMC_GetCmdResp1>
 810c2b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c2ba:	69fb      	ldr	r3, [r7, #28]
}
 810c2bc:	4618      	mov	r0, r3
 810c2be:	3720      	adds	r7, #32
 810c2c0:	46bd      	mov	sp, r7
 810c2c2:	bd80      	pop	{r7, pc}

0810c2c4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810c2c4:	b580      	push	{r7, lr}
 810c2c6:	b088      	sub	sp, #32
 810c2c8:	af00      	add	r7, sp, #0
 810c2ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810c2cc:	2300      	movs	r3, #0
 810c2ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810c2d0:	2300      	movs	r3, #0
 810c2d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810c2d4:	2300      	movs	r3, #0
 810c2d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c2d8:	2300      	movs	r3, #0
 810c2da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c2dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c2e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c2e2:	f107 0308 	add.w	r3, r7, #8
 810c2e6:	4619      	mov	r1, r3
 810c2e8:	6878      	ldr	r0, [r7, #4]
 810c2ea:	f7ff ff2f 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810c2ee:	6878      	ldr	r0, [r7, #4]
 810c2f0:	f000 fb96 	bl	810ca20 <SDMMC_GetCmdError>
 810c2f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c2f6:	69fb      	ldr	r3, [r7, #28]
}
 810c2f8:	4618      	mov	r0, r3
 810c2fa:	3720      	adds	r7, #32
 810c2fc:	46bd      	mov	sp, r7
 810c2fe:	bd80      	pop	{r7, pc}

0810c300 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810c300:	b580      	push	{r7, lr}
 810c302:	b088      	sub	sp, #32
 810c304:	af00      	add	r7, sp, #0
 810c306:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810c308:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 810c30c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810c30e:	2308      	movs	r3, #8
 810c310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c312:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c318:	2300      	movs	r3, #0
 810c31a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c31c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c320:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c322:	f107 0308 	add.w	r3, r7, #8
 810c326:	4619      	mov	r1, r3
 810c328:	6878      	ldr	r0, [r7, #4]
 810c32a:	f7ff ff0f 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810c32e:	6878      	ldr	r0, [r7, #4]
 810c330:	f000 fb28 	bl	810c984 <SDMMC_GetCmdResp7>
 810c334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c336:	69fb      	ldr	r3, [r7, #28]
}
 810c338:	4618      	mov	r0, r3
 810c33a:	3720      	adds	r7, #32
 810c33c:	46bd      	mov	sp, r7
 810c33e:	bd80      	pop	{r7, pc}

0810c340 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c340:	b580      	push	{r7, lr}
 810c342:	b088      	sub	sp, #32
 810c344:	af00      	add	r7, sp, #0
 810c346:	6078      	str	r0, [r7, #4]
 810c348:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810c34a:	683b      	ldr	r3, [r7, #0]
 810c34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810c34e:	2337      	movs	r3, #55	@ 0x37
 810c350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c352:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c358:	2300      	movs	r3, #0
 810c35a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c35c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c360:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c362:	f107 0308 	add.w	r3, r7, #8
 810c366:	4619      	mov	r1, r3
 810c368:	6878      	ldr	r0, [r7, #4]
 810c36a:	f7ff feef 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810c36e:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c372:	2137      	movs	r1, #55	@ 0x37
 810c374:	6878      	ldr	r0, [r7, #4]
 810c376:	f000 f911 	bl	810c59c <SDMMC_GetCmdResp1>
 810c37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c37c:	69fb      	ldr	r3, [r7, #28]
}
 810c37e:	4618      	mov	r0, r3
 810c380:	3720      	adds	r7, #32
 810c382:	46bd      	mov	sp, r7
 810c384:	bd80      	pop	{r7, pc}

0810c386 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c386:	b580      	push	{r7, lr}
 810c388:	b088      	sub	sp, #32
 810c38a:	af00      	add	r7, sp, #0
 810c38c:	6078      	str	r0, [r7, #4]
 810c38e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810c390:	683b      	ldr	r3, [r7, #0]
 810c392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810c394:	2329      	movs	r3, #41	@ 0x29
 810c396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c398:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c39c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c39e:	2300      	movs	r3, #0
 810c3a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c3a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c3a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c3a8:	f107 0308 	add.w	r3, r7, #8
 810c3ac:	4619      	mov	r1, r3
 810c3ae:	6878      	ldr	r0, [r7, #4]
 810c3b0:	f7ff fecc 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810c3b4:	6878      	ldr	r0, [r7, #4]
 810c3b6:	f000 fa2d 	bl	810c814 <SDMMC_GetCmdResp3>
 810c3ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c3bc:	69fb      	ldr	r3, [r7, #28]
}
 810c3be:	4618      	mov	r0, r3
 810c3c0:	3720      	adds	r7, #32
 810c3c2:	46bd      	mov	sp, r7
 810c3c4:	bd80      	pop	{r7, pc}

0810c3c6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810c3c6:	b580      	push	{r7, lr}
 810c3c8:	b088      	sub	sp, #32
 810c3ca:	af00      	add	r7, sp, #0
 810c3cc:	6078      	str	r0, [r7, #4]
 810c3ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810c3d0:	683b      	ldr	r3, [r7, #0]
 810c3d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810c3d4:	2306      	movs	r3, #6
 810c3d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c3d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c3dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c3de:	2300      	movs	r3, #0
 810c3e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c3e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c3e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c3e8:	f107 0308 	add.w	r3, r7, #8
 810c3ec:	4619      	mov	r1, r3
 810c3ee:	6878      	ldr	r0, [r7, #4]
 810c3f0:	f7ff feac 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810c3f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c3f8:	2106      	movs	r1, #6
 810c3fa:	6878      	ldr	r0, [r7, #4]
 810c3fc:	f000 f8ce 	bl	810c59c <SDMMC_GetCmdResp1>
 810c400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c402:	69fb      	ldr	r3, [r7, #28]
}
 810c404:	4618      	mov	r0, r3
 810c406:	3720      	adds	r7, #32
 810c408:	46bd      	mov	sp, r7
 810c40a:	bd80      	pop	{r7, pc}

0810c40c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810c40c:	b580      	push	{r7, lr}
 810c40e:	b088      	sub	sp, #32
 810c410:	af00      	add	r7, sp, #0
 810c412:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810c414:	2300      	movs	r3, #0
 810c416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810c418:	2333      	movs	r3, #51	@ 0x33
 810c41a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c41c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c422:	2300      	movs	r3, #0
 810c424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c42a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c42c:	f107 0308 	add.w	r3, r7, #8
 810c430:	4619      	mov	r1, r3
 810c432:	6878      	ldr	r0, [r7, #4]
 810c434:	f7ff fe8a 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810c438:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c43c:	2133      	movs	r1, #51	@ 0x33
 810c43e:	6878      	ldr	r0, [r7, #4]
 810c440:	f000 f8ac 	bl	810c59c <SDMMC_GetCmdResp1>
 810c444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c446:	69fb      	ldr	r3, [r7, #28]
}
 810c448:	4618      	mov	r0, r3
 810c44a:	3720      	adds	r7, #32
 810c44c:	46bd      	mov	sp, r7
 810c44e:	bd80      	pop	{r7, pc}

0810c450 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810c450:	b580      	push	{r7, lr}
 810c452:	b088      	sub	sp, #32
 810c454:	af00      	add	r7, sp, #0
 810c456:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810c458:	2300      	movs	r3, #0
 810c45a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810c45c:	2302      	movs	r3, #2
 810c45e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810c460:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810c464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c466:	2300      	movs	r3, #0
 810c468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c46a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c46e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c470:	f107 0308 	add.w	r3, r7, #8
 810c474:	4619      	mov	r1, r3
 810c476:	6878      	ldr	r0, [r7, #4]
 810c478:	f7ff fe68 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810c47c:	6878      	ldr	r0, [r7, #4]
 810c47e:	f000 f97f 	bl	810c780 <SDMMC_GetCmdResp2>
 810c482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c484:	69fb      	ldr	r3, [r7, #28]
}
 810c486:	4618      	mov	r0, r3
 810c488:	3720      	adds	r7, #32
 810c48a:	46bd      	mov	sp, r7
 810c48c:	bd80      	pop	{r7, pc}

0810c48e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c48e:	b580      	push	{r7, lr}
 810c490:	b088      	sub	sp, #32
 810c492:	af00      	add	r7, sp, #0
 810c494:	6078      	str	r0, [r7, #4]
 810c496:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810c498:	683b      	ldr	r3, [r7, #0]
 810c49a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810c49c:	2309      	movs	r3, #9
 810c49e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810c4a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810c4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c4a6:	2300      	movs	r3, #0
 810c4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c4aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c4ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c4b0:	f107 0308 	add.w	r3, r7, #8
 810c4b4:	4619      	mov	r1, r3
 810c4b6:	6878      	ldr	r0, [r7, #4]
 810c4b8:	f7ff fe48 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810c4bc:	6878      	ldr	r0, [r7, #4]
 810c4be:	f000 f95f 	bl	810c780 <SDMMC_GetCmdResp2>
 810c4c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c4c4:	69fb      	ldr	r3, [r7, #28]
}
 810c4c6:	4618      	mov	r0, r3
 810c4c8:	3720      	adds	r7, #32
 810c4ca:	46bd      	mov	sp, r7
 810c4cc:	bd80      	pop	{r7, pc}

0810c4ce <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810c4ce:	b580      	push	{r7, lr}
 810c4d0:	b088      	sub	sp, #32
 810c4d2:	af00      	add	r7, sp, #0
 810c4d4:	6078      	str	r0, [r7, #4]
 810c4d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810c4d8:	2300      	movs	r3, #0
 810c4da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810c4dc:	2303      	movs	r3, #3
 810c4de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c4e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c4e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c4e6:	2300      	movs	r3, #0
 810c4e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c4ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c4ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c4f0:	f107 0308 	add.w	r3, r7, #8
 810c4f4:	4619      	mov	r1, r3
 810c4f6:	6878      	ldr	r0, [r7, #4]
 810c4f8:	f7ff fe28 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810c4fc:	683a      	ldr	r2, [r7, #0]
 810c4fe:	2103      	movs	r1, #3
 810c500:	6878      	ldr	r0, [r7, #4]
 810c502:	f000 f9c7 	bl	810c894 <SDMMC_GetCmdResp6>
 810c506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c508:	69fb      	ldr	r3, [r7, #28]
}
 810c50a:	4618      	mov	r0, r3
 810c50c:	3720      	adds	r7, #32
 810c50e:	46bd      	mov	sp, r7
 810c510:	bd80      	pop	{r7, pc}

0810c512 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c512:	b580      	push	{r7, lr}
 810c514:	b088      	sub	sp, #32
 810c516:	af00      	add	r7, sp, #0
 810c518:	6078      	str	r0, [r7, #4]
 810c51a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810c51c:	683b      	ldr	r3, [r7, #0]
 810c51e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810c520:	230d      	movs	r3, #13
 810c522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c52a:	2300      	movs	r3, #0
 810c52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c52e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c532:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c534:	f107 0308 	add.w	r3, r7, #8
 810c538:	4619      	mov	r1, r3
 810c53a:	6878      	ldr	r0, [r7, #4]
 810c53c:	f7ff fe06 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810c540:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c544:	210d      	movs	r1, #13
 810c546:	6878      	ldr	r0, [r7, #4]
 810c548:	f000 f828 	bl	810c59c <SDMMC_GetCmdResp1>
 810c54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c54e:	69fb      	ldr	r3, [r7, #28]
}
 810c550:	4618      	mov	r0, r3
 810c552:	3720      	adds	r7, #32
 810c554:	46bd      	mov	sp, r7
 810c556:	bd80      	pop	{r7, pc}

0810c558 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810c558:	b580      	push	{r7, lr}
 810c55a:	b088      	sub	sp, #32
 810c55c:	af00      	add	r7, sp, #0
 810c55e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810c560:	2300      	movs	r3, #0
 810c562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810c564:	230d      	movs	r3, #13
 810c566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c56c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c56e:	2300      	movs	r3, #0
 810c570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c576:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c578:	f107 0308 	add.w	r3, r7, #8
 810c57c:	4619      	mov	r1, r3
 810c57e:	6878      	ldr	r0, [r7, #4]
 810c580:	f7ff fde4 	bl	810c14c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810c584:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c588:	210d      	movs	r1, #13
 810c58a:	6878      	ldr	r0, [r7, #4]
 810c58c:	f000 f806 	bl	810c59c <SDMMC_GetCmdResp1>
 810c590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c592:	69fb      	ldr	r3, [r7, #28]
}
 810c594:	4618      	mov	r0, r3
 810c596:	3720      	adds	r7, #32
 810c598:	46bd      	mov	sp, r7
 810c59a:	bd80      	pop	{r7, pc}

0810c59c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810c59c:	b580      	push	{r7, lr}
 810c59e:	b088      	sub	sp, #32
 810c5a0:	af00      	add	r7, sp, #0
 810c5a2:	60f8      	str	r0, [r7, #12]
 810c5a4:	460b      	mov	r3, r1
 810c5a6:	607a      	str	r2, [r7, #4]
 810c5a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810c5aa:	4b70      	ldr	r3, [pc, #448]	@ (810c76c <SDMMC_GetCmdResp1+0x1d0>)
 810c5ac:	681b      	ldr	r3, [r3, #0]
 810c5ae:	4a70      	ldr	r2, [pc, #448]	@ (810c770 <SDMMC_GetCmdResp1+0x1d4>)
 810c5b0:	fba2 2303 	umull	r2, r3, r2, r3
 810c5b4:	0a5a      	lsrs	r2, r3, #9
 810c5b6:	687b      	ldr	r3, [r7, #4]
 810c5b8:	fb02 f303 	mul.w	r3, r2, r3
 810c5bc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810c5be:	69fb      	ldr	r3, [r7, #28]
 810c5c0:	1e5a      	subs	r2, r3, #1
 810c5c2:	61fa      	str	r2, [r7, #28]
 810c5c4:	2b00      	cmp	r3, #0
 810c5c6:	d102      	bne.n	810c5ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c5c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810c5cc:	e0c9      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810c5ce:	68fb      	ldr	r3, [r7, #12]
 810c5d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c5d2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810c5d4:	69ba      	ldr	r2, [r7, #24]
 810c5d6:	4b67      	ldr	r3, [pc, #412]	@ (810c774 <SDMMC_GetCmdResp1+0x1d8>)
 810c5d8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c5da:	2b00      	cmp	r3, #0
 810c5dc:	d0ef      	beq.n	810c5be <SDMMC_GetCmdResp1+0x22>
 810c5de:	69bb      	ldr	r3, [r7, #24]
 810c5e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810c5e4:	2b00      	cmp	r3, #0
 810c5e6:	d1ea      	bne.n	810c5be <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c5e8:	68fb      	ldr	r3, [r7, #12]
 810c5ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c5ec:	f003 0304 	and.w	r3, r3, #4
 810c5f0:	2b00      	cmp	r3, #0
 810c5f2:	d004      	beq.n	810c5fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c5f4:	68fb      	ldr	r3, [r7, #12]
 810c5f6:	2204      	movs	r2, #4
 810c5f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c5fa:	2304      	movs	r3, #4
 810c5fc:	e0b1      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c5fe:	68fb      	ldr	r3, [r7, #12]
 810c600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c602:	f003 0301 	and.w	r3, r3, #1
 810c606:	2b00      	cmp	r3, #0
 810c608:	d004      	beq.n	810c614 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c60a:	68fb      	ldr	r3, [r7, #12]
 810c60c:	2201      	movs	r2, #1
 810c60e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c610:	2301      	movs	r3, #1
 810c612:	e0a6      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c614:	68fb      	ldr	r3, [r7, #12]
 810c616:	4a58      	ldr	r2, [pc, #352]	@ (810c778 <SDMMC_GetCmdResp1+0x1dc>)
 810c618:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810c61a:	68f8      	ldr	r0, [r7, #12]
 810c61c:	f7ff fdc0 	bl	810c1a0 <SDMMC_GetCommandResponse>
 810c620:	4603      	mov	r3, r0
 810c622:	461a      	mov	r2, r3
 810c624:	7afb      	ldrb	r3, [r7, #11]
 810c626:	4293      	cmp	r3, r2
 810c628:	d001      	beq.n	810c62e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c62a:	2301      	movs	r3, #1
 810c62c:	e099      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810c62e:	2100      	movs	r1, #0
 810c630:	68f8      	ldr	r0, [r7, #12]
 810c632:	f7ff fdc2 	bl	810c1ba <SDMMC_GetResponse>
 810c636:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810c638:	697a      	ldr	r2, [r7, #20]
 810c63a:	4b50      	ldr	r3, [pc, #320]	@ (810c77c <SDMMC_GetCmdResp1+0x1e0>)
 810c63c:	4013      	ands	r3, r2
 810c63e:	2b00      	cmp	r3, #0
 810c640:	d101      	bne.n	810c646 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810c642:	2300      	movs	r3, #0
 810c644:	e08d      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810c646:	697b      	ldr	r3, [r7, #20]
 810c648:	2b00      	cmp	r3, #0
 810c64a:	da02      	bge.n	810c652 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810c64c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810c650:	e087      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810c652:	697b      	ldr	r3, [r7, #20]
 810c654:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810c658:	2b00      	cmp	r3, #0
 810c65a:	d001      	beq.n	810c660 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810c65c:	2340      	movs	r3, #64	@ 0x40
 810c65e:	e080      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810c660:	697b      	ldr	r3, [r7, #20]
 810c662:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810c666:	2b00      	cmp	r3, #0
 810c668:	d001      	beq.n	810c66e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810c66a:	2380      	movs	r3, #128	@ 0x80
 810c66c:	e079      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810c66e:	697b      	ldr	r3, [r7, #20]
 810c670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810c674:	2b00      	cmp	r3, #0
 810c676:	d002      	beq.n	810c67e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810c678:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c67c:	e071      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810c67e:	697b      	ldr	r3, [r7, #20]
 810c680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810c684:	2b00      	cmp	r3, #0
 810c686:	d002      	beq.n	810c68e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810c688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810c68c:	e069      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810c68e:	697b      	ldr	r3, [r7, #20]
 810c690:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810c694:	2b00      	cmp	r3, #0
 810c696:	d002      	beq.n	810c69e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810c698:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810c69c:	e061      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810c69e:	697b      	ldr	r3, [r7, #20]
 810c6a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810c6a4:	2b00      	cmp	r3, #0
 810c6a6:	d002      	beq.n	810c6ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810c6a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810c6ac:	e059      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810c6ae:	697b      	ldr	r3, [r7, #20]
 810c6b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810c6b4:	2b00      	cmp	r3, #0
 810c6b6:	d002      	beq.n	810c6be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810c6b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c6bc:	e051      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810c6be:	697b      	ldr	r3, [r7, #20]
 810c6c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810c6c4:	2b00      	cmp	r3, #0
 810c6c6:	d002      	beq.n	810c6ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810c6c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810c6cc:	e049      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810c6ce:	697b      	ldr	r3, [r7, #20]
 810c6d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810c6d4:	2b00      	cmp	r3, #0
 810c6d6:	d002      	beq.n	810c6de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810c6d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810c6dc:	e041      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810c6de:	697b      	ldr	r3, [r7, #20]
 810c6e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810c6e4:	2b00      	cmp	r3, #0
 810c6e6:	d002      	beq.n	810c6ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810c6e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810c6ec:	e039      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810c6ee:	697b      	ldr	r3, [r7, #20]
 810c6f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810c6f4:	2b00      	cmp	r3, #0
 810c6f6:	d002      	beq.n	810c6fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810c6f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 810c6fc:	e031      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810c6fe:	697b      	ldr	r3, [r7, #20]
 810c700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810c704:	2b00      	cmp	r3, #0
 810c706:	d002      	beq.n	810c70e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810c708:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 810c70c:	e029      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810c70e:	697b      	ldr	r3, [r7, #20]
 810c710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810c714:	2b00      	cmp	r3, #0
 810c716:	d002      	beq.n	810c71e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810c718:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810c71c:	e021      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810c71e:	697b      	ldr	r3, [r7, #20]
 810c720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810c724:	2b00      	cmp	r3, #0
 810c726:	d002      	beq.n	810c72e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810c728:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810c72c:	e019      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810c72e:	697b      	ldr	r3, [r7, #20]
 810c730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810c734:	2b00      	cmp	r3, #0
 810c736:	d002      	beq.n	810c73e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810c738:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810c73c:	e011      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810c73e:	697b      	ldr	r3, [r7, #20]
 810c740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810c744:	2b00      	cmp	r3, #0
 810c746:	d002      	beq.n	810c74e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810c748:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 810c74c:	e009      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810c74e:	697b      	ldr	r3, [r7, #20]
 810c750:	f003 0308 	and.w	r3, r3, #8
 810c754:	2b00      	cmp	r3, #0
 810c756:	d002      	beq.n	810c75e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810c758:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 810c75c:	e001      	b.n	810c762 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810c75e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810c762:	4618      	mov	r0, r3
 810c764:	3720      	adds	r7, #32
 810c766:	46bd      	mov	sp, r7
 810c768:	bd80      	pop	{r7, pc}
 810c76a:	bf00      	nop
 810c76c:	10000000 	.word	0x10000000
 810c770:	10624dd3 	.word	0x10624dd3
 810c774:	00200045 	.word	0x00200045
 810c778:	002000c5 	.word	0x002000c5
 810c77c:	fdffe008 	.word	0xfdffe008

0810c780 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810c780:	b480      	push	{r7}
 810c782:	b085      	sub	sp, #20
 810c784:	af00      	add	r7, sp, #0
 810c786:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c788:	4b1f      	ldr	r3, [pc, #124]	@ (810c808 <SDMMC_GetCmdResp2+0x88>)
 810c78a:	681b      	ldr	r3, [r3, #0]
 810c78c:	4a1f      	ldr	r2, [pc, #124]	@ (810c80c <SDMMC_GetCmdResp2+0x8c>)
 810c78e:	fba2 2303 	umull	r2, r3, r2, r3
 810c792:	0a5b      	lsrs	r3, r3, #9
 810c794:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c798:	fb02 f303 	mul.w	r3, r2, r3
 810c79c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c79e:	68fb      	ldr	r3, [r7, #12]
 810c7a0:	1e5a      	subs	r2, r3, #1
 810c7a2:	60fa      	str	r2, [r7, #12]
 810c7a4:	2b00      	cmp	r3, #0
 810c7a6:	d102      	bne.n	810c7ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c7a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810c7ac:	e026      	b.n	810c7fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810c7ae:	687b      	ldr	r3, [r7, #4]
 810c7b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c7b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c7b4:	68bb      	ldr	r3, [r7, #8]
 810c7b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810c7ba:	2b00      	cmp	r3, #0
 810c7bc:	d0ef      	beq.n	810c79e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c7be:	68bb      	ldr	r3, [r7, #8]
 810c7c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c7c4:	2b00      	cmp	r3, #0
 810c7c6:	d1ea      	bne.n	810c79e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c7c8:	687b      	ldr	r3, [r7, #4]
 810c7ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c7cc:	f003 0304 	and.w	r3, r3, #4
 810c7d0:	2b00      	cmp	r3, #0
 810c7d2:	d004      	beq.n	810c7de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c7d4:	687b      	ldr	r3, [r7, #4]
 810c7d6:	2204      	movs	r2, #4
 810c7d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c7da:	2304      	movs	r3, #4
 810c7dc:	e00e      	b.n	810c7fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c7de:	687b      	ldr	r3, [r7, #4]
 810c7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c7e2:	f003 0301 	and.w	r3, r3, #1
 810c7e6:	2b00      	cmp	r3, #0
 810c7e8:	d004      	beq.n	810c7f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c7ea:	687b      	ldr	r3, [r7, #4]
 810c7ec:	2201      	movs	r2, #1
 810c7ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c7f0:	2301      	movs	r3, #1
 810c7f2:	e003      	b.n	810c7fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c7f4:	687b      	ldr	r3, [r7, #4]
 810c7f6:	4a06      	ldr	r2, [pc, #24]	@ (810c810 <SDMMC_GetCmdResp2+0x90>)
 810c7f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810c7fa:	2300      	movs	r3, #0
}
 810c7fc:	4618      	mov	r0, r3
 810c7fe:	3714      	adds	r7, #20
 810c800:	46bd      	mov	sp, r7
 810c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c806:	4770      	bx	lr
 810c808:	10000000 	.word	0x10000000
 810c80c:	10624dd3 	.word	0x10624dd3
 810c810:	002000c5 	.word	0x002000c5

0810c814 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810c814:	b480      	push	{r7}
 810c816:	b085      	sub	sp, #20
 810c818:	af00      	add	r7, sp, #0
 810c81a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c81c:	4b1a      	ldr	r3, [pc, #104]	@ (810c888 <SDMMC_GetCmdResp3+0x74>)
 810c81e:	681b      	ldr	r3, [r3, #0]
 810c820:	4a1a      	ldr	r2, [pc, #104]	@ (810c88c <SDMMC_GetCmdResp3+0x78>)
 810c822:	fba2 2303 	umull	r2, r3, r2, r3
 810c826:	0a5b      	lsrs	r3, r3, #9
 810c828:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c82c:	fb02 f303 	mul.w	r3, r2, r3
 810c830:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c832:	68fb      	ldr	r3, [r7, #12]
 810c834:	1e5a      	subs	r2, r3, #1
 810c836:	60fa      	str	r2, [r7, #12]
 810c838:	2b00      	cmp	r3, #0
 810c83a:	d102      	bne.n	810c842 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c83c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810c840:	e01b      	b.n	810c87a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810c842:	687b      	ldr	r3, [r7, #4]
 810c844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c846:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c848:	68bb      	ldr	r3, [r7, #8]
 810c84a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810c84e:	2b00      	cmp	r3, #0
 810c850:	d0ef      	beq.n	810c832 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c852:	68bb      	ldr	r3, [r7, #8]
 810c854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c858:	2b00      	cmp	r3, #0
 810c85a:	d1ea      	bne.n	810c832 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c85c:	687b      	ldr	r3, [r7, #4]
 810c85e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c860:	f003 0304 	and.w	r3, r3, #4
 810c864:	2b00      	cmp	r3, #0
 810c866:	d004      	beq.n	810c872 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c868:	687b      	ldr	r3, [r7, #4]
 810c86a:	2204      	movs	r2, #4
 810c86c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c86e:	2304      	movs	r3, #4
 810c870:	e003      	b.n	810c87a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c872:	687b      	ldr	r3, [r7, #4]
 810c874:	4a06      	ldr	r2, [pc, #24]	@ (810c890 <SDMMC_GetCmdResp3+0x7c>)
 810c876:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810c878:	2300      	movs	r3, #0
}
 810c87a:	4618      	mov	r0, r3
 810c87c:	3714      	adds	r7, #20
 810c87e:	46bd      	mov	sp, r7
 810c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c884:	4770      	bx	lr
 810c886:	bf00      	nop
 810c888:	10000000 	.word	0x10000000
 810c88c:	10624dd3 	.word	0x10624dd3
 810c890:	002000c5 	.word	0x002000c5

0810c894 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810c894:	b580      	push	{r7, lr}
 810c896:	b088      	sub	sp, #32
 810c898:	af00      	add	r7, sp, #0
 810c89a:	60f8      	str	r0, [r7, #12]
 810c89c:	460b      	mov	r3, r1
 810c89e:	607a      	str	r2, [r7, #4]
 810c8a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c8a2:	4b35      	ldr	r3, [pc, #212]	@ (810c978 <SDMMC_GetCmdResp6+0xe4>)
 810c8a4:	681b      	ldr	r3, [r3, #0]
 810c8a6:	4a35      	ldr	r2, [pc, #212]	@ (810c97c <SDMMC_GetCmdResp6+0xe8>)
 810c8a8:	fba2 2303 	umull	r2, r3, r2, r3
 810c8ac:	0a5b      	lsrs	r3, r3, #9
 810c8ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c8b2:	fb02 f303 	mul.w	r3, r2, r3
 810c8b6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810c8b8:	69fb      	ldr	r3, [r7, #28]
 810c8ba:	1e5a      	subs	r2, r3, #1
 810c8bc:	61fa      	str	r2, [r7, #28]
 810c8be:	2b00      	cmp	r3, #0
 810c8c0:	d102      	bne.n	810c8c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c8c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810c8c6:	e052      	b.n	810c96e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810c8c8:	68fb      	ldr	r3, [r7, #12]
 810c8ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c8cc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c8ce:	69bb      	ldr	r3, [r7, #24]
 810c8d0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810c8d4:	2b00      	cmp	r3, #0
 810c8d6:	d0ef      	beq.n	810c8b8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c8d8:	69bb      	ldr	r3, [r7, #24]
 810c8da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c8de:	2b00      	cmp	r3, #0
 810c8e0:	d1ea      	bne.n	810c8b8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c8e2:	68fb      	ldr	r3, [r7, #12]
 810c8e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c8e6:	f003 0304 	and.w	r3, r3, #4
 810c8ea:	2b00      	cmp	r3, #0
 810c8ec:	d004      	beq.n	810c8f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c8ee:	68fb      	ldr	r3, [r7, #12]
 810c8f0:	2204      	movs	r2, #4
 810c8f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c8f4:	2304      	movs	r3, #4
 810c8f6:	e03a      	b.n	810c96e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c8f8:	68fb      	ldr	r3, [r7, #12]
 810c8fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c8fc:	f003 0301 	and.w	r3, r3, #1
 810c900:	2b00      	cmp	r3, #0
 810c902:	d004      	beq.n	810c90e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c904:	68fb      	ldr	r3, [r7, #12]
 810c906:	2201      	movs	r2, #1
 810c908:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c90a:	2301      	movs	r3, #1
 810c90c:	e02f      	b.n	810c96e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810c90e:	68f8      	ldr	r0, [r7, #12]
 810c910:	f7ff fc46 	bl	810c1a0 <SDMMC_GetCommandResponse>
 810c914:	4603      	mov	r3, r0
 810c916:	461a      	mov	r2, r3
 810c918:	7afb      	ldrb	r3, [r7, #11]
 810c91a:	4293      	cmp	r3, r2
 810c91c:	d001      	beq.n	810c922 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c91e:	2301      	movs	r3, #1
 810c920:	e025      	b.n	810c96e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c922:	68fb      	ldr	r3, [r7, #12]
 810c924:	4a16      	ldr	r2, [pc, #88]	@ (810c980 <SDMMC_GetCmdResp6+0xec>)
 810c926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810c928:	2100      	movs	r1, #0
 810c92a:	68f8      	ldr	r0, [r7, #12]
 810c92c:	f7ff fc45 	bl	810c1ba <SDMMC_GetResponse>
 810c930:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810c932:	697b      	ldr	r3, [r7, #20]
 810c934:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 810c938:	2b00      	cmp	r3, #0
 810c93a:	d106      	bne.n	810c94a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 810c93c:	697b      	ldr	r3, [r7, #20]
 810c93e:	0c1b      	lsrs	r3, r3, #16
 810c940:	b29a      	uxth	r2, r3
 810c942:	687b      	ldr	r3, [r7, #4]
 810c944:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810c946:	2300      	movs	r3, #0
 810c948:	e011      	b.n	810c96e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810c94a:	697b      	ldr	r3, [r7, #20]
 810c94c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810c950:	2b00      	cmp	r3, #0
 810c952:	d002      	beq.n	810c95a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810c954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810c958:	e009      	b.n	810c96e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810c95a:	697b      	ldr	r3, [r7, #20]
 810c95c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810c960:	2b00      	cmp	r3, #0
 810c962:	d002      	beq.n	810c96a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810c964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c968:	e001      	b.n	810c96e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810c96a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810c96e:	4618      	mov	r0, r3
 810c970:	3720      	adds	r7, #32
 810c972:	46bd      	mov	sp, r7
 810c974:	bd80      	pop	{r7, pc}
 810c976:	bf00      	nop
 810c978:	10000000 	.word	0x10000000
 810c97c:	10624dd3 	.word	0x10624dd3
 810c980:	002000c5 	.word	0x002000c5

0810c984 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810c984:	b480      	push	{r7}
 810c986:	b085      	sub	sp, #20
 810c988:	af00      	add	r7, sp, #0
 810c98a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c98c:	4b22      	ldr	r3, [pc, #136]	@ (810ca18 <SDMMC_GetCmdResp7+0x94>)
 810c98e:	681b      	ldr	r3, [r3, #0]
 810c990:	4a22      	ldr	r2, [pc, #136]	@ (810ca1c <SDMMC_GetCmdResp7+0x98>)
 810c992:	fba2 2303 	umull	r2, r3, r2, r3
 810c996:	0a5b      	lsrs	r3, r3, #9
 810c998:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c99c:	fb02 f303 	mul.w	r3, r2, r3
 810c9a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c9a2:	68fb      	ldr	r3, [r7, #12]
 810c9a4:	1e5a      	subs	r2, r3, #1
 810c9a6:	60fa      	str	r2, [r7, #12]
 810c9a8:	2b00      	cmp	r3, #0
 810c9aa:	d102      	bne.n	810c9b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c9ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810c9b0:	e02c      	b.n	810ca0c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810c9b2:	687b      	ldr	r3, [r7, #4]
 810c9b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c9b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c9b8:	68bb      	ldr	r3, [r7, #8]
 810c9ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810c9be:	2b00      	cmp	r3, #0
 810c9c0:	d0ef      	beq.n	810c9a2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c9c2:	68bb      	ldr	r3, [r7, #8]
 810c9c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c9c8:	2b00      	cmp	r3, #0
 810c9ca:	d1ea      	bne.n	810c9a2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c9cc:	687b      	ldr	r3, [r7, #4]
 810c9ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c9d0:	f003 0304 	and.w	r3, r3, #4
 810c9d4:	2b00      	cmp	r3, #0
 810c9d6:	d004      	beq.n	810c9e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c9d8:	687b      	ldr	r3, [r7, #4]
 810c9da:	2204      	movs	r2, #4
 810c9dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c9de:	2304      	movs	r3, #4
 810c9e0:	e014      	b.n	810ca0c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c9e2:	687b      	ldr	r3, [r7, #4]
 810c9e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c9e6:	f003 0301 	and.w	r3, r3, #1
 810c9ea:	2b00      	cmp	r3, #0
 810c9ec:	d004      	beq.n	810c9f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c9ee:	687b      	ldr	r3, [r7, #4]
 810c9f0:	2201      	movs	r2, #1
 810c9f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c9f4:	2301      	movs	r3, #1
 810c9f6:	e009      	b.n	810ca0c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810c9f8:	687b      	ldr	r3, [r7, #4]
 810c9fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c9fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ca00:	2b00      	cmp	r3, #0
 810ca02:	d002      	beq.n	810ca0a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810ca04:	687b      	ldr	r3, [r7, #4]
 810ca06:	2240      	movs	r2, #64	@ 0x40
 810ca08:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810ca0a:	2300      	movs	r3, #0

}
 810ca0c:	4618      	mov	r0, r3
 810ca0e:	3714      	adds	r7, #20
 810ca10:	46bd      	mov	sp, r7
 810ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca16:	4770      	bx	lr
 810ca18:	10000000 	.word	0x10000000
 810ca1c:	10624dd3 	.word	0x10624dd3

0810ca20 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810ca20:	b480      	push	{r7}
 810ca22:	b085      	sub	sp, #20
 810ca24:	af00      	add	r7, sp, #0
 810ca26:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810ca28:	4b11      	ldr	r3, [pc, #68]	@ (810ca70 <SDMMC_GetCmdError+0x50>)
 810ca2a:	681b      	ldr	r3, [r3, #0]
 810ca2c:	4a11      	ldr	r2, [pc, #68]	@ (810ca74 <SDMMC_GetCmdError+0x54>)
 810ca2e:	fba2 2303 	umull	r2, r3, r2, r3
 810ca32:	0a5b      	lsrs	r3, r3, #9
 810ca34:	f241 3288 	movw	r2, #5000	@ 0x1388
 810ca38:	fb02 f303 	mul.w	r3, r2, r3
 810ca3c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810ca3e:	68fb      	ldr	r3, [r7, #12]
 810ca40:	1e5a      	subs	r2, r3, #1
 810ca42:	60fa      	str	r2, [r7, #12]
 810ca44:	2b00      	cmp	r3, #0
 810ca46:	d102      	bne.n	810ca4e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810ca48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810ca4c:	e009      	b.n	810ca62 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810ca4e:	687b      	ldr	r3, [r7, #4]
 810ca50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810ca52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810ca56:	2b00      	cmp	r3, #0
 810ca58:	d0f1      	beq.n	810ca3e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810ca5a:	687b      	ldr	r3, [r7, #4]
 810ca5c:	4a06      	ldr	r2, [pc, #24]	@ (810ca78 <SDMMC_GetCmdError+0x58>)
 810ca5e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 810ca60:	2300      	movs	r3, #0
}
 810ca62:	4618      	mov	r0, r3
 810ca64:	3714      	adds	r7, #20
 810ca66:	46bd      	mov	sp, r7
 810ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca6c:	4770      	bx	lr
 810ca6e:	bf00      	nop
 810ca70:	10000000 	.word	0x10000000
 810ca74:	10624dd3 	.word	0x10624dd3
 810ca78:	002000c5 	.word	0x002000c5

0810ca7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810ca7c:	b084      	sub	sp, #16
 810ca7e:	b580      	push	{r7, lr}
 810ca80:	b084      	sub	sp, #16
 810ca82:	af00      	add	r7, sp, #0
 810ca84:	6078      	str	r0, [r7, #4]
 810ca86:	f107 001c 	add.w	r0, r7, #28
 810ca8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810ca8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810ca92:	2b01      	cmp	r3, #1
 810ca94:	d123      	bne.n	810cade <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810ca96:	687b      	ldr	r3, [r7, #4]
 810ca98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ca9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810ca9e:	687b      	ldr	r3, [r7, #4]
 810caa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810caa2:	687b      	ldr	r3, [r7, #4]
 810caa4:	68db      	ldr	r3, [r3, #12]
 810caa6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 810caaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810caae:	687a      	ldr	r2, [r7, #4]
 810cab0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810cab2:	687b      	ldr	r3, [r7, #4]
 810cab4:	68db      	ldr	r3, [r3, #12]
 810cab6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 810caba:	687b      	ldr	r3, [r7, #4]
 810cabc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810cabe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 810cac2:	2b01      	cmp	r3, #1
 810cac4:	d105      	bne.n	810cad2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810cac6:	687b      	ldr	r3, [r7, #4]
 810cac8:	68db      	ldr	r3, [r3, #12]
 810caca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 810cace:	687b      	ldr	r3, [r7, #4]
 810cad0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810cad2:	6878      	ldr	r0, [r7, #4]
 810cad4:	f000 faa6 	bl	810d024 <USB_CoreReset>
 810cad8:	4603      	mov	r3, r0
 810cada:	73fb      	strb	r3, [r7, #15]
 810cadc:	e01b      	b.n	810cb16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810cade:	687b      	ldr	r3, [r7, #4]
 810cae0:	68db      	ldr	r3, [r3, #12]
 810cae2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810cae6:	687b      	ldr	r3, [r7, #4]
 810cae8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810caea:	6878      	ldr	r0, [r7, #4]
 810caec:	f000 fa9a 	bl	810d024 <USB_CoreReset>
 810caf0:	4603      	mov	r3, r0
 810caf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810caf4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 810caf8:	2b00      	cmp	r3, #0
 810cafa:	d106      	bne.n	810cb0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810cafc:	687b      	ldr	r3, [r7, #4]
 810cafe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cb00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810cb04:	687b      	ldr	r3, [r7, #4]
 810cb06:	639a      	str	r2, [r3, #56]	@ 0x38
 810cb08:	e005      	b.n	810cb16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810cb0a:	687b      	ldr	r3, [r7, #4]
 810cb0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cb0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810cb12:	687b      	ldr	r3, [r7, #4]
 810cb14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810cb16:	7fbb      	ldrb	r3, [r7, #30]
 810cb18:	2b01      	cmp	r3, #1
 810cb1a:	d118      	bne.n	810cb4e <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810cb1c:	687b      	ldr	r3, [r7, #4]
 810cb1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810cb20:	b29a      	uxth	r2, r3
 810cb22:	687b      	ldr	r3, [r7, #4]
 810cb24:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810cb26:	687b      	ldr	r3, [r7, #4]
 810cb28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810cb2a:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 810cb2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810cb32:	687a      	ldr	r2, [r7, #4]
 810cb34:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810cb36:	687b      	ldr	r3, [r7, #4]
 810cb38:	689b      	ldr	r3, [r3, #8]
 810cb3a:	f043 0206 	orr.w	r2, r3, #6
 810cb3e:	687b      	ldr	r3, [r7, #4]
 810cb40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810cb42:	687b      	ldr	r3, [r7, #4]
 810cb44:	689b      	ldr	r3, [r3, #8]
 810cb46:	f043 0220 	orr.w	r2, r3, #32
 810cb4a:	687b      	ldr	r3, [r7, #4]
 810cb4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810cb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 810cb50:	4618      	mov	r0, r3
 810cb52:	3710      	adds	r7, #16
 810cb54:	46bd      	mov	sp, r7
 810cb56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810cb5a:	b004      	add	sp, #16
 810cb5c:	4770      	bx	lr

0810cb5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810cb5e:	b480      	push	{r7}
 810cb60:	b083      	sub	sp, #12
 810cb62:	af00      	add	r7, sp, #0
 810cb64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810cb66:	687b      	ldr	r3, [r7, #4]
 810cb68:	689b      	ldr	r3, [r3, #8]
 810cb6a:	f023 0201 	bic.w	r2, r3, #1
 810cb6e:	687b      	ldr	r3, [r7, #4]
 810cb70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810cb72:	2300      	movs	r3, #0
}
 810cb74:	4618      	mov	r0, r3
 810cb76:	370c      	adds	r7, #12
 810cb78:	46bd      	mov	sp, r7
 810cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb7e:	4770      	bx	lr

0810cb80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810cb80:	b580      	push	{r7, lr}
 810cb82:	b084      	sub	sp, #16
 810cb84:	af00      	add	r7, sp, #0
 810cb86:	6078      	str	r0, [r7, #4]
 810cb88:	460b      	mov	r3, r1
 810cb8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810cb8c:	2300      	movs	r3, #0
 810cb8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810cb90:	687b      	ldr	r3, [r7, #4]
 810cb92:	68db      	ldr	r3, [r3, #12]
 810cb94:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 810cb98:	687b      	ldr	r3, [r7, #4]
 810cb9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810cb9c:	78fb      	ldrb	r3, [r7, #3]
 810cb9e:	2b01      	cmp	r3, #1
 810cba0:	d115      	bne.n	810cbce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810cba2:	687b      	ldr	r3, [r7, #4]
 810cba4:	68db      	ldr	r3, [r3, #12]
 810cba6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810cbaa:	687b      	ldr	r3, [r7, #4]
 810cbac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810cbae:	200a      	movs	r0, #10
 810cbb0:	f7f5 fea2 	bl	81028f8 <HAL_Delay>
      ms += 10U;
 810cbb4:	68fb      	ldr	r3, [r7, #12]
 810cbb6:	330a      	adds	r3, #10
 810cbb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810cbba:	6878      	ldr	r0, [r7, #4]
 810cbbc:	f000 fa24 	bl	810d008 <USB_GetMode>
 810cbc0:	4603      	mov	r3, r0
 810cbc2:	2b01      	cmp	r3, #1
 810cbc4:	d01e      	beq.n	810cc04 <USB_SetCurrentMode+0x84>
 810cbc6:	68fb      	ldr	r3, [r7, #12]
 810cbc8:	2bc7      	cmp	r3, #199	@ 0xc7
 810cbca:	d9f0      	bls.n	810cbae <USB_SetCurrentMode+0x2e>
 810cbcc:	e01a      	b.n	810cc04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810cbce:	78fb      	ldrb	r3, [r7, #3]
 810cbd0:	2b00      	cmp	r3, #0
 810cbd2:	d115      	bne.n	810cc00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810cbd4:	687b      	ldr	r3, [r7, #4]
 810cbd6:	68db      	ldr	r3, [r3, #12]
 810cbd8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810cbdc:	687b      	ldr	r3, [r7, #4]
 810cbde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810cbe0:	200a      	movs	r0, #10
 810cbe2:	f7f5 fe89 	bl	81028f8 <HAL_Delay>
      ms += 10U;
 810cbe6:	68fb      	ldr	r3, [r7, #12]
 810cbe8:	330a      	adds	r3, #10
 810cbea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810cbec:	6878      	ldr	r0, [r7, #4]
 810cbee:	f000 fa0b 	bl	810d008 <USB_GetMode>
 810cbf2:	4603      	mov	r3, r0
 810cbf4:	2b00      	cmp	r3, #0
 810cbf6:	d005      	beq.n	810cc04 <USB_SetCurrentMode+0x84>
 810cbf8:	68fb      	ldr	r3, [r7, #12]
 810cbfa:	2bc7      	cmp	r3, #199	@ 0xc7
 810cbfc:	d9f0      	bls.n	810cbe0 <USB_SetCurrentMode+0x60>
 810cbfe:	e001      	b.n	810cc04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810cc00:	2301      	movs	r3, #1
 810cc02:	e005      	b.n	810cc10 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 810cc04:	68fb      	ldr	r3, [r7, #12]
 810cc06:	2bc8      	cmp	r3, #200	@ 0xc8
 810cc08:	d101      	bne.n	810cc0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810cc0a:	2301      	movs	r3, #1
 810cc0c:	e000      	b.n	810cc10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810cc0e:	2300      	movs	r3, #0
}
 810cc10:	4618      	mov	r0, r3
 810cc12:	3710      	adds	r7, #16
 810cc14:	46bd      	mov	sp, r7
 810cc16:	bd80      	pop	{r7, pc}

0810cc18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810cc18:	b084      	sub	sp, #16
 810cc1a:	b580      	push	{r7, lr}
 810cc1c:	b086      	sub	sp, #24
 810cc1e:	af00      	add	r7, sp, #0
 810cc20:	6078      	str	r0, [r7, #4]
 810cc22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 810cc26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810cc2a:	2300      	movs	r3, #0
 810cc2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810cc2e:	687b      	ldr	r3, [r7, #4]
 810cc30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810cc32:	2300      	movs	r3, #0
 810cc34:	613b      	str	r3, [r7, #16]
 810cc36:	e009      	b.n	810cc4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810cc38:	687a      	ldr	r2, [r7, #4]
 810cc3a:	693b      	ldr	r3, [r7, #16]
 810cc3c:	3340      	adds	r3, #64	@ 0x40
 810cc3e:	009b      	lsls	r3, r3, #2
 810cc40:	4413      	add	r3, r2
 810cc42:	2200      	movs	r2, #0
 810cc44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810cc46:	693b      	ldr	r3, [r7, #16]
 810cc48:	3301      	adds	r3, #1
 810cc4a:	613b      	str	r3, [r7, #16]
 810cc4c:	693b      	ldr	r3, [r7, #16]
 810cc4e:	2b0e      	cmp	r3, #14
 810cc50:	d9f2      	bls.n	810cc38 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810cc52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810cc56:	2b00      	cmp	r3, #0
 810cc58:	d11c      	bne.n	810cc94 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810cc5a:	68fb      	ldr	r3, [r7, #12]
 810cc5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810cc60:	685b      	ldr	r3, [r3, #4]
 810cc62:	68fa      	ldr	r2, [r7, #12]
 810cc64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810cc68:	f043 0302 	orr.w	r3, r3, #2
 810cc6c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810cc6e:	687b      	ldr	r3, [r7, #4]
 810cc70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cc72:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 810cc76:	687b      	ldr	r3, [r7, #4]
 810cc78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810cc7a:	687b      	ldr	r3, [r7, #4]
 810cc7c:	681b      	ldr	r3, [r3, #0]
 810cc7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810cc82:	687b      	ldr	r3, [r7, #4]
 810cc84:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810cc86:	687b      	ldr	r3, [r7, #4]
 810cc88:	681b      	ldr	r3, [r3, #0]
 810cc8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810cc8e:	687b      	ldr	r3, [r7, #4]
 810cc90:	601a      	str	r2, [r3, #0]
 810cc92:	e005      	b.n	810cca0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810cc94:	687b      	ldr	r3, [r7, #4]
 810cc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cc98:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 810cc9c:	687b      	ldr	r3, [r7, #4]
 810cc9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810cca0:	68fb      	ldr	r3, [r7, #12]
 810cca2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810cca6:	461a      	mov	r2, r3
 810cca8:	2300      	movs	r3, #0
 810ccaa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810ccac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 810ccb0:	2b01      	cmp	r3, #1
 810ccb2:	d10d      	bne.n	810ccd0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810ccb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810ccb8:	2b00      	cmp	r3, #0
 810ccba:	d104      	bne.n	810ccc6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810ccbc:	2100      	movs	r1, #0
 810ccbe:	6878      	ldr	r0, [r7, #4]
 810ccc0:	f000 f968 	bl	810cf94 <USB_SetDevSpeed>
 810ccc4:	e008      	b.n	810ccd8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810ccc6:	2101      	movs	r1, #1
 810ccc8:	6878      	ldr	r0, [r7, #4]
 810ccca:	f000 f963 	bl	810cf94 <USB_SetDevSpeed>
 810ccce:	e003      	b.n	810ccd8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810ccd0:	2103      	movs	r1, #3
 810ccd2:	6878      	ldr	r0, [r7, #4]
 810ccd4:	f000 f95e 	bl	810cf94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810ccd8:	2110      	movs	r1, #16
 810ccda:	6878      	ldr	r0, [r7, #4]
 810ccdc:	f000 f8fa 	bl	810ced4 <USB_FlushTxFifo>
 810cce0:	4603      	mov	r3, r0
 810cce2:	2b00      	cmp	r3, #0
 810cce4:	d001      	beq.n	810ccea <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 810cce6:	2301      	movs	r3, #1
 810cce8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810ccea:	6878      	ldr	r0, [r7, #4]
 810ccec:	f000 f924 	bl	810cf38 <USB_FlushRxFifo>
 810ccf0:	4603      	mov	r3, r0
 810ccf2:	2b00      	cmp	r3, #0
 810ccf4:	d001      	beq.n	810ccfa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 810ccf6:	2301      	movs	r3, #1
 810ccf8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810ccfa:	68fb      	ldr	r3, [r7, #12]
 810ccfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810cd00:	461a      	mov	r2, r3
 810cd02:	2300      	movs	r3, #0
 810cd04:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810cd06:	68fb      	ldr	r3, [r7, #12]
 810cd08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810cd0c:	461a      	mov	r2, r3
 810cd0e:	2300      	movs	r3, #0
 810cd10:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810cd12:	68fb      	ldr	r3, [r7, #12]
 810cd14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810cd18:	461a      	mov	r2, r3
 810cd1a:	2300      	movs	r3, #0
 810cd1c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810cd1e:	2300      	movs	r3, #0
 810cd20:	613b      	str	r3, [r7, #16]
 810cd22:	e043      	b.n	810cdac <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810cd24:	693b      	ldr	r3, [r7, #16]
 810cd26:	015a      	lsls	r2, r3, #5
 810cd28:	68fb      	ldr	r3, [r7, #12]
 810cd2a:	4413      	add	r3, r2
 810cd2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810cd30:	681b      	ldr	r3, [r3, #0]
 810cd32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810cd36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810cd3a:	d118      	bne.n	810cd6e <USB_DevInit+0x156>
    {
      if (i == 0U)
 810cd3c:	693b      	ldr	r3, [r7, #16]
 810cd3e:	2b00      	cmp	r3, #0
 810cd40:	d10a      	bne.n	810cd58 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810cd42:	693b      	ldr	r3, [r7, #16]
 810cd44:	015a      	lsls	r2, r3, #5
 810cd46:	68fb      	ldr	r3, [r7, #12]
 810cd48:	4413      	add	r3, r2
 810cd4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810cd4e:	461a      	mov	r2, r3
 810cd50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810cd54:	6013      	str	r3, [r2, #0]
 810cd56:	e013      	b.n	810cd80 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810cd58:	693b      	ldr	r3, [r7, #16]
 810cd5a:	015a      	lsls	r2, r3, #5
 810cd5c:	68fb      	ldr	r3, [r7, #12]
 810cd5e:	4413      	add	r3, r2
 810cd60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810cd64:	461a      	mov	r2, r3
 810cd66:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810cd6a:	6013      	str	r3, [r2, #0]
 810cd6c:	e008      	b.n	810cd80 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810cd6e:	693b      	ldr	r3, [r7, #16]
 810cd70:	015a      	lsls	r2, r3, #5
 810cd72:	68fb      	ldr	r3, [r7, #12]
 810cd74:	4413      	add	r3, r2
 810cd76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810cd7a:	461a      	mov	r2, r3
 810cd7c:	2300      	movs	r3, #0
 810cd7e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810cd80:	693b      	ldr	r3, [r7, #16]
 810cd82:	015a      	lsls	r2, r3, #5
 810cd84:	68fb      	ldr	r3, [r7, #12]
 810cd86:	4413      	add	r3, r2
 810cd88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810cd8c:	461a      	mov	r2, r3
 810cd8e:	2300      	movs	r3, #0
 810cd90:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810cd92:	693b      	ldr	r3, [r7, #16]
 810cd94:	015a      	lsls	r2, r3, #5
 810cd96:	68fb      	ldr	r3, [r7, #12]
 810cd98:	4413      	add	r3, r2
 810cd9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810cd9e:	461a      	mov	r2, r3
 810cda0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810cda4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810cda6:	693b      	ldr	r3, [r7, #16]
 810cda8:	3301      	adds	r3, #1
 810cdaa:	613b      	str	r3, [r7, #16]
 810cdac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810cdb0:	461a      	mov	r2, r3
 810cdb2:	693b      	ldr	r3, [r7, #16]
 810cdb4:	4293      	cmp	r3, r2
 810cdb6:	d3b5      	bcc.n	810cd24 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810cdb8:	2300      	movs	r3, #0
 810cdba:	613b      	str	r3, [r7, #16]
 810cdbc:	e043      	b.n	810ce46 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810cdbe:	693b      	ldr	r3, [r7, #16]
 810cdc0:	015a      	lsls	r2, r3, #5
 810cdc2:	68fb      	ldr	r3, [r7, #12]
 810cdc4:	4413      	add	r3, r2
 810cdc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810cdca:	681b      	ldr	r3, [r3, #0]
 810cdcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810cdd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810cdd4:	d118      	bne.n	810ce08 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 810cdd6:	693b      	ldr	r3, [r7, #16]
 810cdd8:	2b00      	cmp	r3, #0
 810cdda:	d10a      	bne.n	810cdf2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810cddc:	693b      	ldr	r3, [r7, #16]
 810cdde:	015a      	lsls	r2, r3, #5
 810cde0:	68fb      	ldr	r3, [r7, #12]
 810cde2:	4413      	add	r3, r2
 810cde4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810cde8:	461a      	mov	r2, r3
 810cdea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810cdee:	6013      	str	r3, [r2, #0]
 810cdf0:	e013      	b.n	810ce1a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810cdf2:	693b      	ldr	r3, [r7, #16]
 810cdf4:	015a      	lsls	r2, r3, #5
 810cdf6:	68fb      	ldr	r3, [r7, #12]
 810cdf8:	4413      	add	r3, r2
 810cdfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810cdfe:	461a      	mov	r2, r3
 810ce00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810ce04:	6013      	str	r3, [r2, #0]
 810ce06:	e008      	b.n	810ce1a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810ce08:	693b      	ldr	r3, [r7, #16]
 810ce0a:	015a      	lsls	r2, r3, #5
 810ce0c:	68fb      	ldr	r3, [r7, #12]
 810ce0e:	4413      	add	r3, r2
 810ce10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ce14:	461a      	mov	r2, r3
 810ce16:	2300      	movs	r3, #0
 810ce18:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810ce1a:	693b      	ldr	r3, [r7, #16]
 810ce1c:	015a      	lsls	r2, r3, #5
 810ce1e:	68fb      	ldr	r3, [r7, #12]
 810ce20:	4413      	add	r3, r2
 810ce22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ce26:	461a      	mov	r2, r3
 810ce28:	2300      	movs	r3, #0
 810ce2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810ce2c:	693b      	ldr	r3, [r7, #16]
 810ce2e:	015a      	lsls	r2, r3, #5
 810ce30:	68fb      	ldr	r3, [r7, #12]
 810ce32:	4413      	add	r3, r2
 810ce34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ce38:	461a      	mov	r2, r3
 810ce3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810ce3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810ce40:	693b      	ldr	r3, [r7, #16]
 810ce42:	3301      	adds	r3, #1
 810ce44:	613b      	str	r3, [r7, #16]
 810ce46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810ce4a:	461a      	mov	r2, r3
 810ce4c:	693b      	ldr	r3, [r7, #16]
 810ce4e:	4293      	cmp	r3, r2
 810ce50:	d3b5      	bcc.n	810cdbe <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810ce52:	68fb      	ldr	r3, [r7, #12]
 810ce54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ce58:	691b      	ldr	r3, [r3, #16]
 810ce5a:	68fa      	ldr	r2, [r7, #12]
 810ce5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810ce60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810ce64:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810ce66:	687b      	ldr	r3, [r7, #4]
 810ce68:	2200      	movs	r2, #0
 810ce6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810ce6c:	687b      	ldr	r3, [r7, #4]
 810ce6e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 810ce72:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810ce74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 810ce78:	2b00      	cmp	r3, #0
 810ce7a:	d105      	bne.n	810ce88 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810ce7c:	687b      	ldr	r3, [r7, #4]
 810ce7e:	699b      	ldr	r3, [r3, #24]
 810ce80:	f043 0210 	orr.w	r2, r3, #16
 810ce84:	687b      	ldr	r3, [r7, #4]
 810ce86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810ce88:	687b      	ldr	r3, [r7, #4]
 810ce8a:	699a      	ldr	r2, [r3, #24]
 810ce8c:	4b10      	ldr	r3, [pc, #64]	@ (810ced0 <USB_DevInit+0x2b8>)
 810ce8e:	4313      	orrs	r3, r2
 810ce90:	687a      	ldr	r2, [r7, #4]
 810ce92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810ce94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 810ce98:	2b00      	cmp	r3, #0
 810ce9a:	d005      	beq.n	810cea8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810ce9c:	687b      	ldr	r3, [r7, #4]
 810ce9e:	699b      	ldr	r3, [r3, #24]
 810cea0:	f043 0208 	orr.w	r2, r3, #8
 810cea4:	687b      	ldr	r3, [r7, #4]
 810cea6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810cea8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810ceac:	2b01      	cmp	r3, #1
 810ceae:	d107      	bne.n	810cec0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810ceb0:	687b      	ldr	r3, [r7, #4]
 810ceb2:	699b      	ldr	r3, [r3, #24]
 810ceb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810ceb8:	f043 0304 	orr.w	r3, r3, #4
 810cebc:	687a      	ldr	r2, [r7, #4]
 810cebe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810cec0:	7dfb      	ldrb	r3, [r7, #23]
}
 810cec2:	4618      	mov	r0, r3
 810cec4:	3718      	adds	r7, #24
 810cec6:	46bd      	mov	sp, r7
 810cec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810cecc:	b004      	add	sp, #16
 810cece:	4770      	bx	lr
 810ced0:	803c3800 	.word	0x803c3800

0810ced4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810ced4:	b480      	push	{r7}
 810ced6:	b085      	sub	sp, #20
 810ced8:	af00      	add	r7, sp, #0
 810ceda:	6078      	str	r0, [r7, #4]
 810cedc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810cede:	2300      	movs	r3, #0
 810cee0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810cee2:	68fb      	ldr	r3, [r7, #12]
 810cee4:	3301      	adds	r3, #1
 810cee6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810cee8:	68fb      	ldr	r3, [r7, #12]
 810ceea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810ceee:	d901      	bls.n	810cef4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810cef0:	2303      	movs	r3, #3
 810cef2:	e01b      	b.n	810cf2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810cef4:	687b      	ldr	r3, [r7, #4]
 810cef6:	691b      	ldr	r3, [r3, #16]
 810cef8:	2b00      	cmp	r3, #0
 810cefa:	daf2      	bge.n	810cee2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 810cefc:	2300      	movs	r3, #0
 810cefe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810cf00:	683b      	ldr	r3, [r7, #0]
 810cf02:	019b      	lsls	r3, r3, #6
 810cf04:	f043 0220 	orr.w	r2, r3, #32
 810cf08:	687b      	ldr	r3, [r7, #4]
 810cf0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810cf0c:	68fb      	ldr	r3, [r7, #12]
 810cf0e:	3301      	adds	r3, #1
 810cf10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810cf12:	68fb      	ldr	r3, [r7, #12]
 810cf14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810cf18:	d901      	bls.n	810cf1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810cf1a:	2303      	movs	r3, #3
 810cf1c:	e006      	b.n	810cf2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810cf1e:	687b      	ldr	r3, [r7, #4]
 810cf20:	691b      	ldr	r3, [r3, #16]
 810cf22:	f003 0320 	and.w	r3, r3, #32
 810cf26:	2b20      	cmp	r3, #32
 810cf28:	d0f0      	beq.n	810cf0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810cf2a:	2300      	movs	r3, #0
}
 810cf2c:	4618      	mov	r0, r3
 810cf2e:	3714      	adds	r7, #20
 810cf30:	46bd      	mov	sp, r7
 810cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf36:	4770      	bx	lr

0810cf38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810cf38:	b480      	push	{r7}
 810cf3a:	b085      	sub	sp, #20
 810cf3c:	af00      	add	r7, sp, #0
 810cf3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810cf40:	2300      	movs	r3, #0
 810cf42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810cf44:	68fb      	ldr	r3, [r7, #12]
 810cf46:	3301      	adds	r3, #1
 810cf48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810cf4a:	68fb      	ldr	r3, [r7, #12]
 810cf4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810cf50:	d901      	bls.n	810cf56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810cf52:	2303      	movs	r3, #3
 810cf54:	e018      	b.n	810cf88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810cf56:	687b      	ldr	r3, [r7, #4]
 810cf58:	691b      	ldr	r3, [r3, #16]
 810cf5a:	2b00      	cmp	r3, #0
 810cf5c:	daf2      	bge.n	810cf44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810cf5e:	2300      	movs	r3, #0
 810cf60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810cf62:	687b      	ldr	r3, [r7, #4]
 810cf64:	2210      	movs	r2, #16
 810cf66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810cf68:	68fb      	ldr	r3, [r7, #12]
 810cf6a:	3301      	adds	r3, #1
 810cf6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810cf6e:	68fb      	ldr	r3, [r7, #12]
 810cf70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810cf74:	d901      	bls.n	810cf7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 810cf76:	2303      	movs	r3, #3
 810cf78:	e006      	b.n	810cf88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810cf7a:	687b      	ldr	r3, [r7, #4]
 810cf7c:	691b      	ldr	r3, [r3, #16]
 810cf7e:	f003 0310 	and.w	r3, r3, #16
 810cf82:	2b10      	cmp	r3, #16
 810cf84:	d0f0      	beq.n	810cf68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 810cf86:	2300      	movs	r3, #0
}
 810cf88:	4618      	mov	r0, r3
 810cf8a:	3714      	adds	r7, #20
 810cf8c:	46bd      	mov	sp, r7
 810cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf92:	4770      	bx	lr

0810cf94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810cf94:	b480      	push	{r7}
 810cf96:	b085      	sub	sp, #20
 810cf98:	af00      	add	r7, sp, #0
 810cf9a:	6078      	str	r0, [r7, #4]
 810cf9c:	460b      	mov	r3, r1
 810cf9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810cfa0:	687b      	ldr	r3, [r7, #4]
 810cfa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810cfa4:	68fb      	ldr	r3, [r7, #12]
 810cfa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810cfaa:	681a      	ldr	r2, [r3, #0]
 810cfac:	78fb      	ldrb	r3, [r7, #3]
 810cfae:	68f9      	ldr	r1, [r7, #12]
 810cfb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810cfb4:	4313      	orrs	r3, r2
 810cfb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810cfb8:	2300      	movs	r3, #0
}
 810cfba:	4618      	mov	r0, r3
 810cfbc:	3714      	adds	r7, #20
 810cfbe:	46bd      	mov	sp, r7
 810cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfc4:	4770      	bx	lr

0810cfc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 810cfc6:	b480      	push	{r7}
 810cfc8:	b085      	sub	sp, #20
 810cfca:	af00      	add	r7, sp, #0
 810cfcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810cfce:	687b      	ldr	r3, [r7, #4]
 810cfd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810cfd2:	68fb      	ldr	r3, [r7, #12]
 810cfd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810cfd8:	681b      	ldr	r3, [r3, #0]
 810cfda:	68fa      	ldr	r2, [r7, #12]
 810cfdc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810cfe0:	f023 0303 	bic.w	r3, r3, #3
 810cfe4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810cfe6:	68fb      	ldr	r3, [r7, #12]
 810cfe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810cfec:	685b      	ldr	r3, [r3, #4]
 810cfee:	68fa      	ldr	r2, [r7, #12]
 810cff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810cff4:	f043 0302 	orr.w	r3, r3, #2
 810cff8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810cffa:	2300      	movs	r3, #0
}
 810cffc:	4618      	mov	r0, r3
 810cffe:	3714      	adds	r7, #20
 810d000:	46bd      	mov	sp, r7
 810d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d006:	4770      	bx	lr

0810d008 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 810d008:	b480      	push	{r7}
 810d00a:	b083      	sub	sp, #12
 810d00c:	af00      	add	r7, sp, #0
 810d00e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810d010:	687b      	ldr	r3, [r7, #4]
 810d012:	695b      	ldr	r3, [r3, #20]
 810d014:	f003 0301 	and.w	r3, r3, #1
}
 810d018:	4618      	mov	r0, r3
 810d01a:	370c      	adds	r7, #12
 810d01c:	46bd      	mov	sp, r7
 810d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d022:	4770      	bx	lr

0810d024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810d024:	b480      	push	{r7}
 810d026:	b085      	sub	sp, #20
 810d028:	af00      	add	r7, sp, #0
 810d02a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810d02c:	2300      	movs	r3, #0
 810d02e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810d030:	68fb      	ldr	r3, [r7, #12]
 810d032:	3301      	adds	r3, #1
 810d034:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810d036:	68fb      	ldr	r3, [r7, #12]
 810d038:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810d03c:	d901      	bls.n	810d042 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810d03e:	2303      	movs	r3, #3
 810d040:	e01b      	b.n	810d07a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810d042:	687b      	ldr	r3, [r7, #4]
 810d044:	691b      	ldr	r3, [r3, #16]
 810d046:	2b00      	cmp	r3, #0
 810d048:	daf2      	bge.n	810d030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810d04a:	2300      	movs	r3, #0
 810d04c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810d04e:	687b      	ldr	r3, [r7, #4]
 810d050:	691b      	ldr	r3, [r3, #16]
 810d052:	f043 0201 	orr.w	r2, r3, #1
 810d056:	687b      	ldr	r3, [r7, #4]
 810d058:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810d05a:	68fb      	ldr	r3, [r7, #12]
 810d05c:	3301      	adds	r3, #1
 810d05e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810d060:	68fb      	ldr	r3, [r7, #12]
 810d062:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810d066:	d901      	bls.n	810d06c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810d068:	2303      	movs	r3, #3
 810d06a:	e006      	b.n	810d07a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810d06c:	687b      	ldr	r3, [r7, #4]
 810d06e:	691b      	ldr	r3, [r3, #16]
 810d070:	f003 0301 	and.w	r3, r3, #1
 810d074:	2b01      	cmp	r3, #1
 810d076:	d0f0      	beq.n	810d05a <USB_CoreReset+0x36>

  return HAL_OK;
 810d078:	2300      	movs	r3, #0
}
 810d07a:	4618      	mov	r0, r3
 810d07c:	3714      	adds	r7, #20
 810d07e:	46bd      	mov	sp, r7
 810d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d084:	4770      	bx	lr
	...

0810d088 <__NVIC_SetPriority>:
{
 810d088:	b480      	push	{r7}
 810d08a:	b083      	sub	sp, #12
 810d08c:	af00      	add	r7, sp, #0
 810d08e:	4603      	mov	r3, r0
 810d090:	6039      	str	r1, [r7, #0]
 810d092:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810d094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810d098:	2b00      	cmp	r3, #0
 810d09a:	db0a      	blt.n	810d0b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810d09c:	683b      	ldr	r3, [r7, #0]
 810d09e:	b2da      	uxtb	r2, r3
 810d0a0:	490c      	ldr	r1, [pc, #48]	@ (810d0d4 <__NVIC_SetPriority+0x4c>)
 810d0a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810d0a6:	0112      	lsls	r2, r2, #4
 810d0a8:	b2d2      	uxtb	r2, r2
 810d0aa:	440b      	add	r3, r1
 810d0ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810d0b0:	e00a      	b.n	810d0c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810d0b2:	683b      	ldr	r3, [r7, #0]
 810d0b4:	b2da      	uxtb	r2, r3
 810d0b6:	4908      	ldr	r1, [pc, #32]	@ (810d0d8 <__NVIC_SetPriority+0x50>)
 810d0b8:	88fb      	ldrh	r3, [r7, #6]
 810d0ba:	f003 030f 	and.w	r3, r3, #15
 810d0be:	3b04      	subs	r3, #4
 810d0c0:	0112      	lsls	r2, r2, #4
 810d0c2:	b2d2      	uxtb	r2, r2
 810d0c4:	440b      	add	r3, r1
 810d0c6:	761a      	strb	r2, [r3, #24]
}
 810d0c8:	bf00      	nop
 810d0ca:	370c      	adds	r7, #12
 810d0cc:	46bd      	mov	sp, r7
 810d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0d2:	4770      	bx	lr
 810d0d4:	e000e100 	.word	0xe000e100
 810d0d8:	e000ed00 	.word	0xe000ed00

0810d0dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810d0dc:	b580      	push	{r7, lr}
 810d0de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810d0e0:	4b05      	ldr	r3, [pc, #20]	@ (810d0f8 <SysTick_Handler+0x1c>)
 810d0e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810d0e4:	f002 f956 	bl	810f394 <xTaskGetSchedulerState>
 810d0e8:	4603      	mov	r3, r0
 810d0ea:	2b01      	cmp	r3, #1
 810d0ec:	d001      	beq.n	810d0f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810d0ee:	f000 fd9b 	bl	810dc28 <xPortSysTickHandler>
  }
}
 810d0f2:	bf00      	nop
 810d0f4:	bd80      	pop	{r7, pc}
 810d0f6:	bf00      	nop
 810d0f8:	e000e010 	.word	0xe000e010

0810d0fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810d0fc:	b580      	push	{r7, lr}
 810d0fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810d100:	2100      	movs	r1, #0
 810d102:	f06f 0004 	mvn.w	r0, #4
 810d106:	f7ff ffbf 	bl	810d088 <__NVIC_SetPriority>
#endif
}
 810d10a:	bf00      	nop
 810d10c:	bd80      	pop	{r7, pc}
	...

0810d110 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810d110:	b480      	push	{r7}
 810d112:	b083      	sub	sp, #12
 810d114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810d116:	f3ef 8305 	mrs	r3, IPSR
 810d11a:	603b      	str	r3, [r7, #0]
  return(result);
 810d11c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810d11e:	2b00      	cmp	r3, #0
 810d120:	d003      	beq.n	810d12a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810d122:	f06f 0305 	mvn.w	r3, #5
 810d126:	607b      	str	r3, [r7, #4]
 810d128:	e00c      	b.n	810d144 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810d12a:	4b0a      	ldr	r3, [pc, #40]	@ (810d154 <osKernelInitialize+0x44>)
 810d12c:	681b      	ldr	r3, [r3, #0]
 810d12e:	2b00      	cmp	r3, #0
 810d130:	d105      	bne.n	810d13e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810d132:	4b08      	ldr	r3, [pc, #32]	@ (810d154 <osKernelInitialize+0x44>)
 810d134:	2201      	movs	r2, #1
 810d136:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810d138:	2300      	movs	r3, #0
 810d13a:	607b      	str	r3, [r7, #4]
 810d13c:	e002      	b.n	810d144 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810d13e:	f04f 33ff 	mov.w	r3, #4294967295
 810d142:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810d144:	687b      	ldr	r3, [r7, #4]
}
 810d146:	4618      	mov	r0, r3
 810d148:	370c      	adds	r7, #12
 810d14a:	46bd      	mov	sp, r7
 810d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d150:	4770      	bx	lr
 810d152:	bf00      	nop
 810d154:	10000d18 	.word	0x10000d18

0810d158 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810d158:	b580      	push	{r7, lr}
 810d15a:	b082      	sub	sp, #8
 810d15c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810d15e:	f3ef 8305 	mrs	r3, IPSR
 810d162:	603b      	str	r3, [r7, #0]
  return(result);
 810d164:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810d166:	2b00      	cmp	r3, #0
 810d168:	d003      	beq.n	810d172 <osKernelStart+0x1a>
    stat = osErrorISR;
 810d16a:	f06f 0305 	mvn.w	r3, #5
 810d16e:	607b      	str	r3, [r7, #4]
 810d170:	e010      	b.n	810d194 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810d172:	4b0b      	ldr	r3, [pc, #44]	@ (810d1a0 <osKernelStart+0x48>)
 810d174:	681b      	ldr	r3, [r3, #0]
 810d176:	2b01      	cmp	r3, #1
 810d178:	d109      	bne.n	810d18e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810d17a:	f7ff ffbf 	bl	810d0fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810d17e:	4b08      	ldr	r3, [pc, #32]	@ (810d1a0 <osKernelStart+0x48>)
 810d180:	2202      	movs	r2, #2
 810d182:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810d184:	f001 fcb8 	bl	810eaf8 <vTaskStartScheduler>
      stat = osOK;
 810d188:	2300      	movs	r3, #0
 810d18a:	607b      	str	r3, [r7, #4]
 810d18c:	e002      	b.n	810d194 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810d18e:	f04f 33ff 	mov.w	r3, #4294967295
 810d192:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810d194:	687b      	ldr	r3, [r7, #4]
}
 810d196:	4618      	mov	r0, r3
 810d198:	3708      	adds	r7, #8
 810d19a:	46bd      	mov	sp, r7
 810d19c:	bd80      	pop	{r7, pc}
 810d19e:	bf00      	nop
 810d1a0:	10000d18 	.word	0x10000d18

0810d1a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810d1a4:	b580      	push	{r7, lr}
 810d1a6:	b08e      	sub	sp, #56	@ 0x38
 810d1a8:	af04      	add	r7, sp, #16
 810d1aa:	60f8      	str	r0, [r7, #12]
 810d1ac:	60b9      	str	r1, [r7, #8]
 810d1ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810d1b0:	2300      	movs	r3, #0
 810d1b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810d1b4:	f3ef 8305 	mrs	r3, IPSR
 810d1b8:	617b      	str	r3, [r7, #20]
  return(result);
 810d1ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810d1bc:	2b00      	cmp	r3, #0
 810d1be:	d17e      	bne.n	810d2be <osThreadNew+0x11a>
 810d1c0:	68fb      	ldr	r3, [r7, #12]
 810d1c2:	2b00      	cmp	r3, #0
 810d1c4:	d07b      	beq.n	810d2be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810d1c6:	2380      	movs	r3, #128	@ 0x80
 810d1c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810d1ca:	2318      	movs	r3, #24
 810d1cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810d1ce:	2300      	movs	r3, #0
 810d1d0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810d1d2:	f04f 33ff 	mov.w	r3, #4294967295
 810d1d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810d1d8:	687b      	ldr	r3, [r7, #4]
 810d1da:	2b00      	cmp	r3, #0
 810d1dc:	d045      	beq.n	810d26a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810d1de:	687b      	ldr	r3, [r7, #4]
 810d1e0:	681b      	ldr	r3, [r3, #0]
 810d1e2:	2b00      	cmp	r3, #0
 810d1e4:	d002      	beq.n	810d1ec <osThreadNew+0x48>
        name = attr->name;
 810d1e6:	687b      	ldr	r3, [r7, #4]
 810d1e8:	681b      	ldr	r3, [r3, #0]
 810d1ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810d1ec:	687b      	ldr	r3, [r7, #4]
 810d1ee:	699b      	ldr	r3, [r3, #24]
 810d1f0:	2b00      	cmp	r3, #0
 810d1f2:	d002      	beq.n	810d1fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810d1f4:	687b      	ldr	r3, [r7, #4]
 810d1f6:	699b      	ldr	r3, [r3, #24]
 810d1f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810d1fa:	69fb      	ldr	r3, [r7, #28]
 810d1fc:	2b00      	cmp	r3, #0
 810d1fe:	d008      	beq.n	810d212 <osThreadNew+0x6e>
 810d200:	69fb      	ldr	r3, [r7, #28]
 810d202:	2b38      	cmp	r3, #56	@ 0x38
 810d204:	d805      	bhi.n	810d212 <osThreadNew+0x6e>
 810d206:	687b      	ldr	r3, [r7, #4]
 810d208:	685b      	ldr	r3, [r3, #4]
 810d20a:	f003 0301 	and.w	r3, r3, #1
 810d20e:	2b00      	cmp	r3, #0
 810d210:	d001      	beq.n	810d216 <osThreadNew+0x72>
        return (NULL);
 810d212:	2300      	movs	r3, #0
 810d214:	e054      	b.n	810d2c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810d216:	687b      	ldr	r3, [r7, #4]
 810d218:	695b      	ldr	r3, [r3, #20]
 810d21a:	2b00      	cmp	r3, #0
 810d21c:	d003      	beq.n	810d226 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810d21e:	687b      	ldr	r3, [r7, #4]
 810d220:	695b      	ldr	r3, [r3, #20]
 810d222:	089b      	lsrs	r3, r3, #2
 810d224:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810d226:	687b      	ldr	r3, [r7, #4]
 810d228:	689b      	ldr	r3, [r3, #8]
 810d22a:	2b00      	cmp	r3, #0
 810d22c:	d00e      	beq.n	810d24c <osThreadNew+0xa8>
 810d22e:	687b      	ldr	r3, [r7, #4]
 810d230:	68db      	ldr	r3, [r3, #12]
 810d232:	2b5b      	cmp	r3, #91	@ 0x5b
 810d234:	d90a      	bls.n	810d24c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810d236:	687b      	ldr	r3, [r7, #4]
 810d238:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810d23a:	2b00      	cmp	r3, #0
 810d23c:	d006      	beq.n	810d24c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810d23e:	687b      	ldr	r3, [r7, #4]
 810d240:	695b      	ldr	r3, [r3, #20]
 810d242:	2b00      	cmp	r3, #0
 810d244:	d002      	beq.n	810d24c <osThreadNew+0xa8>
        mem = 1;
 810d246:	2301      	movs	r3, #1
 810d248:	61bb      	str	r3, [r7, #24]
 810d24a:	e010      	b.n	810d26e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810d24c:	687b      	ldr	r3, [r7, #4]
 810d24e:	689b      	ldr	r3, [r3, #8]
 810d250:	2b00      	cmp	r3, #0
 810d252:	d10c      	bne.n	810d26e <osThreadNew+0xca>
 810d254:	687b      	ldr	r3, [r7, #4]
 810d256:	68db      	ldr	r3, [r3, #12]
 810d258:	2b00      	cmp	r3, #0
 810d25a:	d108      	bne.n	810d26e <osThreadNew+0xca>
 810d25c:	687b      	ldr	r3, [r7, #4]
 810d25e:	691b      	ldr	r3, [r3, #16]
 810d260:	2b00      	cmp	r3, #0
 810d262:	d104      	bne.n	810d26e <osThreadNew+0xca>
          mem = 0;
 810d264:	2300      	movs	r3, #0
 810d266:	61bb      	str	r3, [r7, #24]
 810d268:	e001      	b.n	810d26e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810d26a:	2300      	movs	r3, #0
 810d26c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810d26e:	69bb      	ldr	r3, [r7, #24]
 810d270:	2b01      	cmp	r3, #1
 810d272:	d110      	bne.n	810d296 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810d274:	687b      	ldr	r3, [r7, #4]
 810d276:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810d278:	687a      	ldr	r2, [r7, #4]
 810d27a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810d27c:	9202      	str	r2, [sp, #8]
 810d27e:	9301      	str	r3, [sp, #4]
 810d280:	69fb      	ldr	r3, [r7, #28]
 810d282:	9300      	str	r3, [sp, #0]
 810d284:	68bb      	ldr	r3, [r7, #8]
 810d286:	6a3a      	ldr	r2, [r7, #32]
 810d288:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810d28a:	68f8      	ldr	r0, [r7, #12]
 810d28c:	f001 fa58 	bl	810e740 <xTaskCreateStatic>
 810d290:	4603      	mov	r3, r0
 810d292:	613b      	str	r3, [r7, #16]
 810d294:	e013      	b.n	810d2be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810d296:	69bb      	ldr	r3, [r7, #24]
 810d298:	2b00      	cmp	r3, #0
 810d29a:	d110      	bne.n	810d2be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810d29c:	6a3b      	ldr	r3, [r7, #32]
 810d29e:	b29a      	uxth	r2, r3
 810d2a0:	f107 0310 	add.w	r3, r7, #16
 810d2a4:	9301      	str	r3, [sp, #4]
 810d2a6:	69fb      	ldr	r3, [r7, #28]
 810d2a8:	9300      	str	r3, [sp, #0]
 810d2aa:	68bb      	ldr	r3, [r7, #8]
 810d2ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810d2ae:	68f8      	ldr	r0, [r7, #12]
 810d2b0:	f001 faa6 	bl	810e800 <xTaskCreate>
 810d2b4:	4603      	mov	r3, r0
 810d2b6:	2b01      	cmp	r3, #1
 810d2b8:	d001      	beq.n	810d2be <osThreadNew+0x11a>
            hTask = NULL;
 810d2ba:	2300      	movs	r3, #0
 810d2bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810d2be:	693b      	ldr	r3, [r7, #16]
}
 810d2c0:	4618      	mov	r0, r3
 810d2c2:	3728      	adds	r7, #40	@ 0x28
 810d2c4:	46bd      	mov	sp, r7
 810d2c6:	bd80      	pop	{r7, pc}

0810d2c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810d2c8:	b580      	push	{r7, lr}
 810d2ca:	b084      	sub	sp, #16
 810d2cc:	af00      	add	r7, sp, #0
 810d2ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810d2d0:	f3ef 8305 	mrs	r3, IPSR
 810d2d4:	60bb      	str	r3, [r7, #8]
  return(result);
 810d2d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810d2d8:	2b00      	cmp	r3, #0
 810d2da:	d003      	beq.n	810d2e4 <osDelay+0x1c>
    stat = osErrorISR;
 810d2dc:	f06f 0305 	mvn.w	r3, #5
 810d2e0:	60fb      	str	r3, [r7, #12]
 810d2e2:	e007      	b.n	810d2f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810d2e4:	2300      	movs	r3, #0
 810d2e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810d2e8:	687b      	ldr	r3, [r7, #4]
 810d2ea:	2b00      	cmp	r3, #0
 810d2ec:	d002      	beq.n	810d2f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 810d2ee:	6878      	ldr	r0, [r7, #4]
 810d2f0:	f001 fbcc 	bl	810ea8c <vTaskDelay>
    }
  }

  return (stat);
 810d2f4:	68fb      	ldr	r3, [r7, #12]
}
 810d2f6:	4618      	mov	r0, r3
 810d2f8:	3710      	adds	r7, #16
 810d2fa:	46bd      	mov	sp, r7
 810d2fc:	bd80      	pop	{r7, pc}
	...

0810d300 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810d300:	b480      	push	{r7}
 810d302:	b085      	sub	sp, #20
 810d304:	af00      	add	r7, sp, #0
 810d306:	60f8      	str	r0, [r7, #12]
 810d308:	60b9      	str	r1, [r7, #8]
 810d30a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810d30c:	68fb      	ldr	r3, [r7, #12]
 810d30e:	4a07      	ldr	r2, [pc, #28]	@ (810d32c <vApplicationGetIdleTaskMemory+0x2c>)
 810d310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810d312:	68bb      	ldr	r3, [r7, #8]
 810d314:	4a06      	ldr	r2, [pc, #24]	@ (810d330 <vApplicationGetIdleTaskMemory+0x30>)
 810d316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810d318:	687b      	ldr	r3, [r7, #4]
 810d31a:	2280      	movs	r2, #128	@ 0x80
 810d31c:	601a      	str	r2, [r3, #0]
}
 810d31e:	bf00      	nop
 810d320:	3714      	adds	r7, #20
 810d322:	46bd      	mov	sp, r7
 810d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d328:	4770      	bx	lr
 810d32a:	bf00      	nop
 810d32c:	10000d1c 	.word	0x10000d1c
 810d330:	10000d78 	.word	0x10000d78

0810d334 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810d334:	b480      	push	{r7}
 810d336:	b085      	sub	sp, #20
 810d338:	af00      	add	r7, sp, #0
 810d33a:	60f8      	str	r0, [r7, #12]
 810d33c:	60b9      	str	r1, [r7, #8]
 810d33e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810d340:	68fb      	ldr	r3, [r7, #12]
 810d342:	4a07      	ldr	r2, [pc, #28]	@ (810d360 <vApplicationGetTimerTaskMemory+0x2c>)
 810d344:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810d346:	68bb      	ldr	r3, [r7, #8]
 810d348:	4a06      	ldr	r2, [pc, #24]	@ (810d364 <vApplicationGetTimerTaskMemory+0x30>)
 810d34a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810d34c:	687b      	ldr	r3, [r7, #4]
 810d34e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810d352:	601a      	str	r2, [r3, #0]
}
 810d354:	bf00      	nop
 810d356:	3714      	adds	r7, #20
 810d358:	46bd      	mov	sp, r7
 810d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d35e:	4770      	bx	lr
 810d360:	10000f78 	.word	0x10000f78
 810d364:	10000fd4 	.word	0x10000fd4

0810d368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810d368:	b580      	push	{r7, lr}
 810d36a:	b08a      	sub	sp, #40	@ 0x28
 810d36c:	af00      	add	r7, sp, #0
 810d36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810d370:	2300      	movs	r3, #0
 810d372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810d374:	f001 fc28 	bl	810ebc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810d378:	4b5c      	ldr	r3, [pc, #368]	@ (810d4ec <pvPortMalloc+0x184>)
 810d37a:	681b      	ldr	r3, [r3, #0]
 810d37c:	2b00      	cmp	r3, #0
 810d37e:	d101      	bne.n	810d384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810d380:	f000 f924 	bl	810d5cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810d384:	4b5a      	ldr	r3, [pc, #360]	@ (810d4f0 <pvPortMalloc+0x188>)
 810d386:	681a      	ldr	r2, [r3, #0]
 810d388:	687b      	ldr	r3, [r7, #4]
 810d38a:	4013      	ands	r3, r2
 810d38c:	2b00      	cmp	r3, #0
 810d38e:	f040 8095 	bne.w	810d4bc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810d392:	687b      	ldr	r3, [r7, #4]
 810d394:	2b00      	cmp	r3, #0
 810d396:	d01e      	beq.n	810d3d6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810d398:	2208      	movs	r2, #8
 810d39a:	687b      	ldr	r3, [r7, #4]
 810d39c:	4413      	add	r3, r2
 810d39e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810d3a0:	687b      	ldr	r3, [r7, #4]
 810d3a2:	f003 0307 	and.w	r3, r3, #7
 810d3a6:	2b00      	cmp	r3, #0
 810d3a8:	d015      	beq.n	810d3d6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810d3aa:	687b      	ldr	r3, [r7, #4]
 810d3ac:	f023 0307 	bic.w	r3, r3, #7
 810d3b0:	3308      	adds	r3, #8
 810d3b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810d3b4:	687b      	ldr	r3, [r7, #4]
 810d3b6:	f003 0307 	and.w	r3, r3, #7
 810d3ba:	2b00      	cmp	r3, #0
 810d3bc:	d00b      	beq.n	810d3d6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810d3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d3c2:	f383 8811 	msr	BASEPRI, r3
 810d3c6:	f3bf 8f6f 	isb	sy
 810d3ca:	f3bf 8f4f 	dsb	sy
 810d3ce:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810d3d0:	bf00      	nop
 810d3d2:	bf00      	nop
 810d3d4:	e7fd      	b.n	810d3d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810d3d6:	687b      	ldr	r3, [r7, #4]
 810d3d8:	2b00      	cmp	r3, #0
 810d3da:	d06f      	beq.n	810d4bc <pvPortMalloc+0x154>
 810d3dc:	4b45      	ldr	r3, [pc, #276]	@ (810d4f4 <pvPortMalloc+0x18c>)
 810d3de:	681b      	ldr	r3, [r3, #0]
 810d3e0:	687a      	ldr	r2, [r7, #4]
 810d3e2:	429a      	cmp	r2, r3
 810d3e4:	d86a      	bhi.n	810d4bc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810d3e6:	4b44      	ldr	r3, [pc, #272]	@ (810d4f8 <pvPortMalloc+0x190>)
 810d3e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810d3ea:	4b43      	ldr	r3, [pc, #268]	@ (810d4f8 <pvPortMalloc+0x190>)
 810d3ec:	681b      	ldr	r3, [r3, #0]
 810d3ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810d3f0:	e004      	b.n	810d3fc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810d3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d3f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810d3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d3f8:	681b      	ldr	r3, [r3, #0]
 810d3fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810d3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d3fe:	685b      	ldr	r3, [r3, #4]
 810d400:	687a      	ldr	r2, [r7, #4]
 810d402:	429a      	cmp	r2, r3
 810d404:	d903      	bls.n	810d40e <pvPortMalloc+0xa6>
 810d406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d408:	681b      	ldr	r3, [r3, #0]
 810d40a:	2b00      	cmp	r3, #0
 810d40c:	d1f1      	bne.n	810d3f2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810d40e:	4b37      	ldr	r3, [pc, #220]	@ (810d4ec <pvPortMalloc+0x184>)
 810d410:	681b      	ldr	r3, [r3, #0]
 810d412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810d414:	429a      	cmp	r2, r3
 810d416:	d051      	beq.n	810d4bc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810d418:	6a3b      	ldr	r3, [r7, #32]
 810d41a:	681b      	ldr	r3, [r3, #0]
 810d41c:	2208      	movs	r2, #8
 810d41e:	4413      	add	r3, r2
 810d420:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d424:	681a      	ldr	r2, [r3, #0]
 810d426:	6a3b      	ldr	r3, [r7, #32]
 810d428:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810d42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d42c:	685a      	ldr	r2, [r3, #4]
 810d42e:	687b      	ldr	r3, [r7, #4]
 810d430:	1ad2      	subs	r2, r2, r3
 810d432:	2308      	movs	r3, #8
 810d434:	005b      	lsls	r3, r3, #1
 810d436:	429a      	cmp	r2, r3
 810d438:	d920      	bls.n	810d47c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810d43a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810d43c:	687b      	ldr	r3, [r7, #4]
 810d43e:	4413      	add	r3, r2
 810d440:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810d442:	69bb      	ldr	r3, [r7, #24]
 810d444:	f003 0307 	and.w	r3, r3, #7
 810d448:	2b00      	cmp	r3, #0
 810d44a:	d00b      	beq.n	810d464 <pvPortMalloc+0xfc>
	__asm volatile
 810d44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d450:	f383 8811 	msr	BASEPRI, r3
 810d454:	f3bf 8f6f 	isb	sy
 810d458:	f3bf 8f4f 	dsb	sy
 810d45c:	613b      	str	r3, [r7, #16]
}
 810d45e:	bf00      	nop
 810d460:	bf00      	nop
 810d462:	e7fd      	b.n	810d460 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810d464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d466:	685a      	ldr	r2, [r3, #4]
 810d468:	687b      	ldr	r3, [r7, #4]
 810d46a:	1ad2      	subs	r2, r2, r3
 810d46c:	69bb      	ldr	r3, [r7, #24]
 810d46e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810d470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d472:	687a      	ldr	r2, [r7, #4]
 810d474:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810d476:	69b8      	ldr	r0, [r7, #24]
 810d478:	f000 f90a 	bl	810d690 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810d47c:	4b1d      	ldr	r3, [pc, #116]	@ (810d4f4 <pvPortMalloc+0x18c>)
 810d47e:	681a      	ldr	r2, [r3, #0]
 810d480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d482:	685b      	ldr	r3, [r3, #4]
 810d484:	1ad3      	subs	r3, r2, r3
 810d486:	4a1b      	ldr	r2, [pc, #108]	@ (810d4f4 <pvPortMalloc+0x18c>)
 810d488:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810d48a:	4b1a      	ldr	r3, [pc, #104]	@ (810d4f4 <pvPortMalloc+0x18c>)
 810d48c:	681a      	ldr	r2, [r3, #0]
 810d48e:	4b1b      	ldr	r3, [pc, #108]	@ (810d4fc <pvPortMalloc+0x194>)
 810d490:	681b      	ldr	r3, [r3, #0]
 810d492:	429a      	cmp	r2, r3
 810d494:	d203      	bcs.n	810d49e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810d496:	4b17      	ldr	r3, [pc, #92]	@ (810d4f4 <pvPortMalloc+0x18c>)
 810d498:	681b      	ldr	r3, [r3, #0]
 810d49a:	4a18      	ldr	r2, [pc, #96]	@ (810d4fc <pvPortMalloc+0x194>)
 810d49c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810d49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d4a0:	685a      	ldr	r2, [r3, #4]
 810d4a2:	4b13      	ldr	r3, [pc, #76]	@ (810d4f0 <pvPortMalloc+0x188>)
 810d4a4:	681b      	ldr	r3, [r3, #0]
 810d4a6:	431a      	orrs	r2, r3
 810d4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d4aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810d4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d4ae:	2200      	movs	r2, #0
 810d4b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810d4b2:	4b13      	ldr	r3, [pc, #76]	@ (810d500 <pvPortMalloc+0x198>)
 810d4b4:	681b      	ldr	r3, [r3, #0]
 810d4b6:	3301      	adds	r3, #1
 810d4b8:	4a11      	ldr	r2, [pc, #68]	@ (810d500 <pvPortMalloc+0x198>)
 810d4ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810d4bc:	f001 fb92 	bl	810ebe4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810d4c0:	69fb      	ldr	r3, [r7, #28]
 810d4c2:	f003 0307 	and.w	r3, r3, #7
 810d4c6:	2b00      	cmp	r3, #0
 810d4c8:	d00b      	beq.n	810d4e2 <pvPortMalloc+0x17a>
	__asm volatile
 810d4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d4ce:	f383 8811 	msr	BASEPRI, r3
 810d4d2:	f3bf 8f6f 	isb	sy
 810d4d6:	f3bf 8f4f 	dsb	sy
 810d4da:	60fb      	str	r3, [r7, #12]
}
 810d4dc:	bf00      	nop
 810d4de:	bf00      	nop
 810d4e0:	e7fd      	b.n	810d4de <pvPortMalloc+0x176>
	return pvReturn;
 810d4e2:	69fb      	ldr	r3, [r7, #28]
}
 810d4e4:	4618      	mov	r0, r3
 810d4e6:	3728      	adds	r7, #40	@ 0x28
 810d4e8:	46bd      	mov	sp, r7
 810d4ea:	bd80      	pop	{r7, pc}
 810d4ec:	10004fdc 	.word	0x10004fdc
 810d4f0:	10004ff0 	.word	0x10004ff0
 810d4f4:	10004fe0 	.word	0x10004fe0
 810d4f8:	10004fd4 	.word	0x10004fd4
 810d4fc:	10004fe4 	.word	0x10004fe4
 810d500:	10004fe8 	.word	0x10004fe8

0810d504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810d504:	b580      	push	{r7, lr}
 810d506:	b086      	sub	sp, #24
 810d508:	af00      	add	r7, sp, #0
 810d50a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810d50c:	687b      	ldr	r3, [r7, #4]
 810d50e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810d510:	687b      	ldr	r3, [r7, #4]
 810d512:	2b00      	cmp	r3, #0
 810d514:	d04f      	beq.n	810d5b6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810d516:	2308      	movs	r3, #8
 810d518:	425b      	negs	r3, r3
 810d51a:	697a      	ldr	r2, [r7, #20]
 810d51c:	4413      	add	r3, r2
 810d51e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810d520:	697b      	ldr	r3, [r7, #20]
 810d522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810d524:	693b      	ldr	r3, [r7, #16]
 810d526:	685a      	ldr	r2, [r3, #4]
 810d528:	4b25      	ldr	r3, [pc, #148]	@ (810d5c0 <vPortFree+0xbc>)
 810d52a:	681b      	ldr	r3, [r3, #0]
 810d52c:	4013      	ands	r3, r2
 810d52e:	2b00      	cmp	r3, #0
 810d530:	d10b      	bne.n	810d54a <vPortFree+0x46>
	__asm volatile
 810d532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d536:	f383 8811 	msr	BASEPRI, r3
 810d53a:	f3bf 8f6f 	isb	sy
 810d53e:	f3bf 8f4f 	dsb	sy
 810d542:	60fb      	str	r3, [r7, #12]
}
 810d544:	bf00      	nop
 810d546:	bf00      	nop
 810d548:	e7fd      	b.n	810d546 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810d54a:	693b      	ldr	r3, [r7, #16]
 810d54c:	681b      	ldr	r3, [r3, #0]
 810d54e:	2b00      	cmp	r3, #0
 810d550:	d00b      	beq.n	810d56a <vPortFree+0x66>
	__asm volatile
 810d552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d556:	f383 8811 	msr	BASEPRI, r3
 810d55a:	f3bf 8f6f 	isb	sy
 810d55e:	f3bf 8f4f 	dsb	sy
 810d562:	60bb      	str	r3, [r7, #8]
}
 810d564:	bf00      	nop
 810d566:	bf00      	nop
 810d568:	e7fd      	b.n	810d566 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810d56a:	693b      	ldr	r3, [r7, #16]
 810d56c:	685a      	ldr	r2, [r3, #4]
 810d56e:	4b14      	ldr	r3, [pc, #80]	@ (810d5c0 <vPortFree+0xbc>)
 810d570:	681b      	ldr	r3, [r3, #0]
 810d572:	4013      	ands	r3, r2
 810d574:	2b00      	cmp	r3, #0
 810d576:	d01e      	beq.n	810d5b6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810d578:	693b      	ldr	r3, [r7, #16]
 810d57a:	681b      	ldr	r3, [r3, #0]
 810d57c:	2b00      	cmp	r3, #0
 810d57e:	d11a      	bne.n	810d5b6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810d580:	693b      	ldr	r3, [r7, #16]
 810d582:	685a      	ldr	r2, [r3, #4]
 810d584:	4b0e      	ldr	r3, [pc, #56]	@ (810d5c0 <vPortFree+0xbc>)
 810d586:	681b      	ldr	r3, [r3, #0]
 810d588:	43db      	mvns	r3, r3
 810d58a:	401a      	ands	r2, r3
 810d58c:	693b      	ldr	r3, [r7, #16]
 810d58e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810d590:	f001 fb1a 	bl	810ebc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810d594:	693b      	ldr	r3, [r7, #16]
 810d596:	685a      	ldr	r2, [r3, #4]
 810d598:	4b0a      	ldr	r3, [pc, #40]	@ (810d5c4 <vPortFree+0xc0>)
 810d59a:	681b      	ldr	r3, [r3, #0]
 810d59c:	4413      	add	r3, r2
 810d59e:	4a09      	ldr	r2, [pc, #36]	@ (810d5c4 <vPortFree+0xc0>)
 810d5a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810d5a2:	6938      	ldr	r0, [r7, #16]
 810d5a4:	f000 f874 	bl	810d690 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810d5a8:	4b07      	ldr	r3, [pc, #28]	@ (810d5c8 <vPortFree+0xc4>)
 810d5aa:	681b      	ldr	r3, [r3, #0]
 810d5ac:	3301      	adds	r3, #1
 810d5ae:	4a06      	ldr	r2, [pc, #24]	@ (810d5c8 <vPortFree+0xc4>)
 810d5b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810d5b2:	f001 fb17 	bl	810ebe4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810d5b6:	bf00      	nop
 810d5b8:	3718      	adds	r7, #24
 810d5ba:	46bd      	mov	sp, r7
 810d5bc:	bd80      	pop	{r7, pc}
 810d5be:	bf00      	nop
 810d5c0:	10004ff0 	.word	0x10004ff0
 810d5c4:	10004fe0 	.word	0x10004fe0
 810d5c8:	10004fec 	.word	0x10004fec

0810d5cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810d5cc:	b480      	push	{r7}
 810d5ce:	b085      	sub	sp, #20
 810d5d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810d5d2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810d5d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810d5d8:	4b27      	ldr	r3, [pc, #156]	@ (810d678 <prvHeapInit+0xac>)
 810d5da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810d5dc:	68fb      	ldr	r3, [r7, #12]
 810d5de:	f003 0307 	and.w	r3, r3, #7
 810d5e2:	2b00      	cmp	r3, #0
 810d5e4:	d00c      	beq.n	810d600 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810d5e6:	68fb      	ldr	r3, [r7, #12]
 810d5e8:	3307      	adds	r3, #7
 810d5ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810d5ec:	68fb      	ldr	r3, [r7, #12]
 810d5ee:	f023 0307 	bic.w	r3, r3, #7
 810d5f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810d5f4:	68ba      	ldr	r2, [r7, #8]
 810d5f6:	68fb      	ldr	r3, [r7, #12]
 810d5f8:	1ad3      	subs	r3, r2, r3
 810d5fa:	4a1f      	ldr	r2, [pc, #124]	@ (810d678 <prvHeapInit+0xac>)
 810d5fc:	4413      	add	r3, r2
 810d5fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810d600:	68fb      	ldr	r3, [r7, #12]
 810d602:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810d604:	4a1d      	ldr	r2, [pc, #116]	@ (810d67c <prvHeapInit+0xb0>)
 810d606:	687b      	ldr	r3, [r7, #4]
 810d608:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810d60a:	4b1c      	ldr	r3, [pc, #112]	@ (810d67c <prvHeapInit+0xb0>)
 810d60c:	2200      	movs	r2, #0
 810d60e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810d610:	687b      	ldr	r3, [r7, #4]
 810d612:	68ba      	ldr	r2, [r7, #8]
 810d614:	4413      	add	r3, r2
 810d616:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810d618:	2208      	movs	r2, #8
 810d61a:	68fb      	ldr	r3, [r7, #12]
 810d61c:	1a9b      	subs	r3, r3, r2
 810d61e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810d620:	68fb      	ldr	r3, [r7, #12]
 810d622:	f023 0307 	bic.w	r3, r3, #7
 810d626:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810d628:	68fb      	ldr	r3, [r7, #12]
 810d62a:	4a15      	ldr	r2, [pc, #84]	@ (810d680 <prvHeapInit+0xb4>)
 810d62c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810d62e:	4b14      	ldr	r3, [pc, #80]	@ (810d680 <prvHeapInit+0xb4>)
 810d630:	681b      	ldr	r3, [r3, #0]
 810d632:	2200      	movs	r2, #0
 810d634:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810d636:	4b12      	ldr	r3, [pc, #72]	@ (810d680 <prvHeapInit+0xb4>)
 810d638:	681b      	ldr	r3, [r3, #0]
 810d63a:	2200      	movs	r2, #0
 810d63c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810d63e:	687b      	ldr	r3, [r7, #4]
 810d640:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810d642:	683b      	ldr	r3, [r7, #0]
 810d644:	68fa      	ldr	r2, [r7, #12]
 810d646:	1ad2      	subs	r2, r2, r3
 810d648:	683b      	ldr	r3, [r7, #0]
 810d64a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810d64c:	4b0c      	ldr	r3, [pc, #48]	@ (810d680 <prvHeapInit+0xb4>)
 810d64e:	681a      	ldr	r2, [r3, #0]
 810d650:	683b      	ldr	r3, [r7, #0]
 810d652:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810d654:	683b      	ldr	r3, [r7, #0]
 810d656:	685b      	ldr	r3, [r3, #4]
 810d658:	4a0a      	ldr	r2, [pc, #40]	@ (810d684 <prvHeapInit+0xb8>)
 810d65a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810d65c:	683b      	ldr	r3, [r7, #0]
 810d65e:	685b      	ldr	r3, [r3, #4]
 810d660:	4a09      	ldr	r2, [pc, #36]	@ (810d688 <prvHeapInit+0xbc>)
 810d662:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810d664:	4b09      	ldr	r3, [pc, #36]	@ (810d68c <prvHeapInit+0xc0>)
 810d666:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810d66a:	601a      	str	r2, [r3, #0]
}
 810d66c:	bf00      	nop
 810d66e:	3714      	adds	r7, #20
 810d670:	46bd      	mov	sp, r7
 810d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d676:	4770      	bx	lr
 810d678:	100013d4 	.word	0x100013d4
 810d67c:	10004fd4 	.word	0x10004fd4
 810d680:	10004fdc 	.word	0x10004fdc
 810d684:	10004fe4 	.word	0x10004fe4
 810d688:	10004fe0 	.word	0x10004fe0
 810d68c:	10004ff0 	.word	0x10004ff0

0810d690 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810d690:	b480      	push	{r7}
 810d692:	b085      	sub	sp, #20
 810d694:	af00      	add	r7, sp, #0
 810d696:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810d698:	4b28      	ldr	r3, [pc, #160]	@ (810d73c <prvInsertBlockIntoFreeList+0xac>)
 810d69a:	60fb      	str	r3, [r7, #12]
 810d69c:	e002      	b.n	810d6a4 <prvInsertBlockIntoFreeList+0x14>
 810d69e:	68fb      	ldr	r3, [r7, #12]
 810d6a0:	681b      	ldr	r3, [r3, #0]
 810d6a2:	60fb      	str	r3, [r7, #12]
 810d6a4:	68fb      	ldr	r3, [r7, #12]
 810d6a6:	681b      	ldr	r3, [r3, #0]
 810d6a8:	687a      	ldr	r2, [r7, #4]
 810d6aa:	429a      	cmp	r2, r3
 810d6ac:	d8f7      	bhi.n	810d69e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810d6ae:	68fb      	ldr	r3, [r7, #12]
 810d6b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810d6b2:	68fb      	ldr	r3, [r7, #12]
 810d6b4:	685b      	ldr	r3, [r3, #4]
 810d6b6:	68ba      	ldr	r2, [r7, #8]
 810d6b8:	4413      	add	r3, r2
 810d6ba:	687a      	ldr	r2, [r7, #4]
 810d6bc:	429a      	cmp	r2, r3
 810d6be:	d108      	bne.n	810d6d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810d6c0:	68fb      	ldr	r3, [r7, #12]
 810d6c2:	685a      	ldr	r2, [r3, #4]
 810d6c4:	687b      	ldr	r3, [r7, #4]
 810d6c6:	685b      	ldr	r3, [r3, #4]
 810d6c8:	441a      	add	r2, r3
 810d6ca:	68fb      	ldr	r3, [r7, #12]
 810d6cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810d6ce:	68fb      	ldr	r3, [r7, #12]
 810d6d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810d6d2:	687b      	ldr	r3, [r7, #4]
 810d6d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810d6d6:	687b      	ldr	r3, [r7, #4]
 810d6d8:	685b      	ldr	r3, [r3, #4]
 810d6da:	68ba      	ldr	r2, [r7, #8]
 810d6dc:	441a      	add	r2, r3
 810d6de:	68fb      	ldr	r3, [r7, #12]
 810d6e0:	681b      	ldr	r3, [r3, #0]
 810d6e2:	429a      	cmp	r2, r3
 810d6e4:	d118      	bne.n	810d718 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810d6e6:	68fb      	ldr	r3, [r7, #12]
 810d6e8:	681a      	ldr	r2, [r3, #0]
 810d6ea:	4b15      	ldr	r3, [pc, #84]	@ (810d740 <prvInsertBlockIntoFreeList+0xb0>)
 810d6ec:	681b      	ldr	r3, [r3, #0]
 810d6ee:	429a      	cmp	r2, r3
 810d6f0:	d00d      	beq.n	810d70e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810d6f2:	687b      	ldr	r3, [r7, #4]
 810d6f4:	685a      	ldr	r2, [r3, #4]
 810d6f6:	68fb      	ldr	r3, [r7, #12]
 810d6f8:	681b      	ldr	r3, [r3, #0]
 810d6fa:	685b      	ldr	r3, [r3, #4]
 810d6fc:	441a      	add	r2, r3
 810d6fe:	687b      	ldr	r3, [r7, #4]
 810d700:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810d702:	68fb      	ldr	r3, [r7, #12]
 810d704:	681b      	ldr	r3, [r3, #0]
 810d706:	681a      	ldr	r2, [r3, #0]
 810d708:	687b      	ldr	r3, [r7, #4]
 810d70a:	601a      	str	r2, [r3, #0]
 810d70c:	e008      	b.n	810d720 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810d70e:	4b0c      	ldr	r3, [pc, #48]	@ (810d740 <prvInsertBlockIntoFreeList+0xb0>)
 810d710:	681a      	ldr	r2, [r3, #0]
 810d712:	687b      	ldr	r3, [r7, #4]
 810d714:	601a      	str	r2, [r3, #0]
 810d716:	e003      	b.n	810d720 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810d718:	68fb      	ldr	r3, [r7, #12]
 810d71a:	681a      	ldr	r2, [r3, #0]
 810d71c:	687b      	ldr	r3, [r7, #4]
 810d71e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810d720:	68fa      	ldr	r2, [r7, #12]
 810d722:	687b      	ldr	r3, [r7, #4]
 810d724:	429a      	cmp	r2, r3
 810d726:	d002      	beq.n	810d72e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810d728:	68fb      	ldr	r3, [r7, #12]
 810d72a:	687a      	ldr	r2, [r7, #4]
 810d72c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810d72e:	bf00      	nop
 810d730:	3714      	adds	r7, #20
 810d732:	46bd      	mov	sp, r7
 810d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d738:	4770      	bx	lr
 810d73a:	bf00      	nop
 810d73c:	10004fd4 	.word	0x10004fd4
 810d740:	10004fdc 	.word	0x10004fdc

0810d744 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810d744:	b480      	push	{r7}
 810d746:	b083      	sub	sp, #12
 810d748:	af00      	add	r7, sp, #0
 810d74a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810d74c:	687b      	ldr	r3, [r7, #4]
 810d74e:	f103 0208 	add.w	r2, r3, #8
 810d752:	687b      	ldr	r3, [r7, #4]
 810d754:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810d756:	687b      	ldr	r3, [r7, #4]
 810d758:	f04f 32ff 	mov.w	r2, #4294967295
 810d75c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810d75e:	687b      	ldr	r3, [r7, #4]
 810d760:	f103 0208 	add.w	r2, r3, #8
 810d764:	687b      	ldr	r3, [r7, #4]
 810d766:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810d768:	687b      	ldr	r3, [r7, #4]
 810d76a:	f103 0208 	add.w	r2, r3, #8
 810d76e:	687b      	ldr	r3, [r7, #4]
 810d770:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810d772:	687b      	ldr	r3, [r7, #4]
 810d774:	2200      	movs	r2, #0
 810d776:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810d778:	bf00      	nop
 810d77a:	370c      	adds	r7, #12
 810d77c:	46bd      	mov	sp, r7
 810d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d782:	4770      	bx	lr

0810d784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810d784:	b480      	push	{r7}
 810d786:	b083      	sub	sp, #12
 810d788:	af00      	add	r7, sp, #0
 810d78a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810d78c:	687b      	ldr	r3, [r7, #4]
 810d78e:	2200      	movs	r2, #0
 810d790:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810d792:	bf00      	nop
 810d794:	370c      	adds	r7, #12
 810d796:	46bd      	mov	sp, r7
 810d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d79c:	4770      	bx	lr

0810d79e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810d79e:	b480      	push	{r7}
 810d7a0:	b085      	sub	sp, #20
 810d7a2:	af00      	add	r7, sp, #0
 810d7a4:	6078      	str	r0, [r7, #4]
 810d7a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810d7a8:	687b      	ldr	r3, [r7, #4]
 810d7aa:	685b      	ldr	r3, [r3, #4]
 810d7ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810d7ae:	683b      	ldr	r3, [r7, #0]
 810d7b0:	68fa      	ldr	r2, [r7, #12]
 810d7b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810d7b4:	68fb      	ldr	r3, [r7, #12]
 810d7b6:	689a      	ldr	r2, [r3, #8]
 810d7b8:	683b      	ldr	r3, [r7, #0]
 810d7ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810d7bc:	68fb      	ldr	r3, [r7, #12]
 810d7be:	689b      	ldr	r3, [r3, #8]
 810d7c0:	683a      	ldr	r2, [r7, #0]
 810d7c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810d7c4:	68fb      	ldr	r3, [r7, #12]
 810d7c6:	683a      	ldr	r2, [r7, #0]
 810d7c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810d7ca:	683b      	ldr	r3, [r7, #0]
 810d7cc:	687a      	ldr	r2, [r7, #4]
 810d7ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810d7d0:	687b      	ldr	r3, [r7, #4]
 810d7d2:	681b      	ldr	r3, [r3, #0]
 810d7d4:	1c5a      	adds	r2, r3, #1
 810d7d6:	687b      	ldr	r3, [r7, #4]
 810d7d8:	601a      	str	r2, [r3, #0]
}
 810d7da:	bf00      	nop
 810d7dc:	3714      	adds	r7, #20
 810d7de:	46bd      	mov	sp, r7
 810d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d7e4:	4770      	bx	lr

0810d7e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810d7e6:	b480      	push	{r7}
 810d7e8:	b085      	sub	sp, #20
 810d7ea:	af00      	add	r7, sp, #0
 810d7ec:	6078      	str	r0, [r7, #4]
 810d7ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810d7f0:	683b      	ldr	r3, [r7, #0]
 810d7f2:	681b      	ldr	r3, [r3, #0]
 810d7f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810d7f6:	68bb      	ldr	r3, [r7, #8]
 810d7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d7fc:	d103      	bne.n	810d806 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810d7fe:	687b      	ldr	r3, [r7, #4]
 810d800:	691b      	ldr	r3, [r3, #16]
 810d802:	60fb      	str	r3, [r7, #12]
 810d804:	e00c      	b.n	810d820 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810d806:	687b      	ldr	r3, [r7, #4]
 810d808:	3308      	adds	r3, #8
 810d80a:	60fb      	str	r3, [r7, #12]
 810d80c:	e002      	b.n	810d814 <vListInsert+0x2e>
 810d80e:	68fb      	ldr	r3, [r7, #12]
 810d810:	685b      	ldr	r3, [r3, #4]
 810d812:	60fb      	str	r3, [r7, #12]
 810d814:	68fb      	ldr	r3, [r7, #12]
 810d816:	685b      	ldr	r3, [r3, #4]
 810d818:	681b      	ldr	r3, [r3, #0]
 810d81a:	68ba      	ldr	r2, [r7, #8]
 810d81c:	429a      	cmp	r2, r3
 810d81e:	d2f6      	bcs.n	810d80e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810d820:	68fb      	ldr	r3, [r7, #12]
 810d822:	685a      	ldr	r2, [r3, #4]
 810d824:	683b      	ldr	r3, [r7, #0]
 810d826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810d828:	683b      	ldr	r3, [r7, #0]
 810d82a:	685b      	ldr	r3, [r3, #4]
 810d82c:	683a      	ldr	r2, [r7, #0]
 810d82e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810d830:	683b      	ldr	r3, [r7, #0]
 810d832:	68fa      	ldr	r2, [r7, #12]
 810d834:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810d836:	68fb      	ldr	r3, [r7, #12]
 810d838:	683a      	ldr	r2, [r7, #0]
 810d83a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810d83c:	683b      	ldr	r3, [r7, #0]
 810d83e:	687a      	ldr	r2, [r7, #4]
 810d840:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810d842:	687b      	ldr	r3, [r7, #4]
 810d844:	681b      	ldr	r3, [r3, #0]
 810d846:	1c5a      	adds	r2, r3, #1
 810d848:	687b      	ldr	r3, [r7, #4]
 810d84a:	601a      	str	r2, [r3, #0]
}
 810d84c:	bf00      	nop
 810d84e:	3714      	adds	r7, #20
 810d850:	46bd      	mov	sp, r7
 810d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d856:	4770      	bx	lr

0810d858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810d858:	b480      	push	{r7}
 810d85a:	b085      	sub	sp, #20
 810d85c:	af00      	add	r7, sp, #0
 810d85e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810d860:	687b      	ldr	r3, [r7, #4]
 810d862:	691b      	ldr	r3, [r3, #16]
 810d864:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810d866:	687b      	ldr	r3, [r7, #4]
 810d868:	685b      	ldr	r3, [r3, #4]
 810d86a:	687a      	ldr	r2, [r7, #4]
 810d86c:	6892      	ldr	r2, [r2, #8]
 810d86e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810d870:	687b      	ldr	r3, [r7, #4]
 810d872:	689b      	ldr	r3, [r3, #8]
 810d874:	687a      	ldr	r2, [r7, #4]
 810d876:	6852      	ldr	r2, [r2, #4]
 810d878:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810d87a:	68fb      	ldr	r3, [r7, #12]
 810d87c:	685b      	ldr	r3, [r3, #4]
 810d87e:	687a      	ldr	r2, [r7, #4]
 810d880:	429a      	cmp	r2, r3
 810d882:	d103      	bne.n	810d88c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810d884:	687b      	ldr	r3, [r7, #4]
 810d886:	689a      	ldr	r2, [r3, #8]
 810d888:	68fb      	ldr	r3, [r7, #12]
 810d88a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810d88c:	687b      	ldr	r3, [r7, #4]
 810d88e:	2200      	movs	r2, #0
 810d890:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810d892:	68fb      	ldr	r3, [r7, #12]
 810d894:	681b      	ldr	r3, [r3, #0]
 810d896:	1e5a      	subs	r2, r3, #1
 810d898:	68fb      	ldr	r3, [r7, #12]
 810d89a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810d89c:	68fb      	ldr	r3, [r7, #12]
 810d89e:	681b      	ldr	r3, [r3, #0]
}
 810d8a0:	4618      	mov	r0, r3
 810d8a2:	3714      	adds	r7, #20
 810d8a4:	46bd      	mov	sp, r7
 810d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8aa:	4770      	bx	lr

0810d8ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810d8ac:	b480      	push	{r7}
 810d8ae:	b085      	sub	sp, #20
 810d8b0:	af00      	add	r7, sp, #0
 810d8b2:	60f8      	str	r0, [r7, #12]
 810d8b4:	60b9      	str	r1, [r7, #8]
 810d8b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810d8b8:	68fb      	ldr	r3, [r7, #12]
 810d8ba:	3b04      	subs	r3, #4
 810d8bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810d8be:	68fb      	ldr	r3, [r7, #12]
 810d8c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810d8c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810d8c6:	68fb      	ldr	r3, [r7, #12]
 810d8c8:	3b04      	subs	r3, #4
 810d8ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810d8cc:	68bb      	ldr	r3, [r7, #8]
 810d8ce:	f023 0201 	bic.w	r2, r3, #1
 810d8d2:	68fb      	ldr	r3, [r7, #12]
 810d8d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810d8d6:	68fb      	ldr	r3, [r7, #12]
 810d8d8:	3b04      	subs	r3, #4
 810d8da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810d8dc:	4a0c      	ldr	r2, [pc, #48]	@ (810d910 <pxPortInitialiseStack+0x64>)
 810d8de:	68fb      	ldr	r3, [r7, #12]
 810d8e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810d8e2:	68fb      	ldr	r3, [r7, #12]
 810d8e4:	3b14      	subs	r3, #20
 810d8e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810d8e8:	687a      	ldr	r2, [r7, #4]
 810d8ea:	68fb      	ldr	r3, [r7, #12]
 810d8ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810d8ee:	68fb      	ldr	r3, [r7, #12]
 810d8f0:	3b04      	subs	r3, #4
 810d8f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810d8f4:	68fb      	ldr	r3, [r7, #12]
 810d8f6:	f06f 0202 	mvn.w	r2, #2
 810d8fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810d8fc:	68fb      	ldr	r3, [r7, #12]
 810d8fe:	3b20      	subs	r3, #32
 810d900:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810d902:	68fb      	ldr	r3, [r7, #12]
}
 810d904:	4618      	mov	r0, r3
 810d906:	3714      	adds	r7, #20
 810d908:	46bd      	mov	sp, r7
 810d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d90e:	4770      	bx	lr
 810d910:	0810d915 	.word	0x0810d915

0810d914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810d914:	b480      	push	{r7}
 810d916:	b085      	sub	sp, #20
 810d918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810d91a:	2300      	movs	r3, #0
 810d91c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810d91e:	4b13      	ldr	r3, [pc, #76]	@ (810d96c <prvTaskExitError+0x58>)
 810d920:	681b      	ldr	r3, [r3, #0]
 810d922:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d926:	d00b      	beq.n	810d940 <prvTaskExitError+0x2c>
	__asm volatile
 810d928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d92c:	f383 8811 	msr	BASEPRI, r3
 810d930:	f3bf 8f6f 	isb	sy
 810d934:	f3bf 8f4f 	dsb	sy
 810d938:	60fb      	str	r3, [r7, #12]
}
 810d93a:	bf00      	nop
 810d93c:	bf00      	nop
 810d93e:	e7fd      	b.n	810d93c <prvTaskExitError+0x28>
	__asm volatile
 810d940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d944:	f383 8811 	msr	BASEPRI, r3
 810d948:	f3bf 8f6f 	isb	sy
 810d94c:	f3bf 8f4f 	dsb	sy
 810d950:	60bb      	str	r3, [r7, #8]
}
 810d952:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810d954:	bf00      	nop
 810d956:	687b      	ldr	r3, [r7, #4]
 810d958:	2b00      	cmp	r3, #0
 810d95a:	d0fc      	beq.n	810d956 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810d95c:	bf00      	nop
 810d95e:	bf00      	nop
 810d960:	3714      	adds	r7, #20
 810d962:	46bd      	mov	sp, r7
 810d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d968:	4770      	bx	lr
 810d96a:	bf00      	nop
 810d96c:	10000010 	.word	0x10000010

0810d970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810d970:	4b07      	ldr	r3, [pc, #28]	@ (810d990 <pxCurrentTCBConst2>)
 810d972:	6819      	ldr	r1, [r3, #0]
 810d974:	6808      	ldr	r0, [r1, #0]
 810d976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d97a:	f380 8809 	msr	PSP, r0
 810d97e:	f3bf 8f6f 	isb	sy
 810d982:	f04f 0000 	mov.w	r0, #0
 810d986:	f380 8811 	msr	BASEPRI, r0
 810d98a:	4770      	bx	lr
 810d98c:	f3af 8000 	nop.w

0810d990 <pxCurrentTCBConst2>:
 810d990:	1000503c 	.word	0x1000503c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810d994:	bf00      	nop
 810d996:	bf00      	nop

0810d998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810d998:	4808      	ldr	r0, [pc, #32]	@ (810d9bc <prvPortStartFirstTask+0x24>)
 810d99a:	6800      	ldr	r0, [r0, #0]
 810d99c:	6800      	ldr	r0, [r0, #0]
 810d99e:	f380 8808 	msr	MSP, r0
 810d9a2:	f04f 0000 	mov.w	r0, #0
 810d9a6:	f380 8814 	msr	CONTROL, r0
 810d9aa:	b662      	cpsie	i
 810d9ac:	b661      	cpsie	f
 810d9ae:	f3bf 8f4f 	dsb	sy
 810d9b2:	f3bf 8f6f 	isb	sy
 810d9b6:	df00      	svc	0
 810d9b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810d9ba:	bf00      	nop
 810d9bc:	e000ed08 	.word	0xe000ed08

0810d9c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810d9c0:	b580      	push	{r7, lr}
 810d9c2:	b086      	sub	sp, #24
 810d9c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810d9c6:	4b47      	ldr	r3, [pc, #284]	@ (810dae4 <xPortStartScheduler+0x124>)
 810d9c8:	681b      	ldr	r3, [r3, #0]
 810d9ca:	4a47      	ldr	r2, [pc, #284]	@ (810dae8 <xPortStartScheduler+0x128>)
 810d9cc:	4293      	cmp	r3, r2
 810d9ce:	d10b      	bne.n	810d9e8 <xPortStartScheduler+0x28>
	__asm volatile
 810d9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d9d4:	f383 8811 	msr	BASEPRI, r3
 810d9d8:	f3bf 8f6f 	isb	sy
 810d9dc:	f3bf 8f4f 	dsb	sy
 810d9e0:	60fb      	str	r3, [r7, #12]
}
 810d9e2:	bf00      	nop
 810d9e4:	bf00      	nop
 810d9e6:	e7fd      	b.n	810d9e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810d9e8:	4b3e      	ldr	r3, [pc, #248]	@ (810dae4 <xPortStartScheduler+0x124>)
 810d9ea:	681b      	ldr	r3, [r3, #0]
 810d9ec:	4a3f      	ldr	r2, [pc, #252]	@ (810daec <xPortStartScheduler+0x12c>)
 810d9ee:	4293      	cmp	r3, r2
 810d9f0:	d10b      	bne.n	810da0a <xPortStartScheduler+0x4a>
	__asm volatile
 810d9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d9f6:	f383 8811 	msr	BASEPRI, r3
 810d9fa:	f3bf 8f6f 	isb	sy
 810d9fe:	f3bf 8f4f 	dsb	sy
 810da02:	613b      	str	r3, [r7, #16]
}
 810da04:	bf00      	nop
 810da06:	bf00      	nop
 810da08:	e7fd      	b.n	810da06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810da0a:	4b39      	ldr	r3, [pc, #228]	@ (810daf0 <xPortStartScheduler+0x130>)
 810da0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810da0e:	697b      	ldr	r3, [r7, #20]
 810da10:	781b      	ldrb	r3, [r3, #0]
 810da12:	b2db      	uxtb	r3, r3
 810da14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810da16:	697b      	ldr	r3, [r7, #20]
 810da18:	22ff      	movs	r2, #255	@ 0xff
 810da1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810da1c:	697b      	ldr	r3, [r7, #20]
 810da1e:	781b      	ldrb	r3, [r3, #0]
 810da20:	b2db      	uxtb	r3, r3
 810da22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810da24:	78fb      	ldrb	r3, [r7, #3]
 810da26:	b2db      	uxtb	r3, r3
 810da28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810da2c:	b2da      	uxtb	r2, r3
 810da2e:	4b31      	ldr	r3, [pc, #196]	@ (810daf4 <xPortStartScheduler+0x134>)
 810da30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810da32:	4b31      	ldr	r3, [pc, #196]	@ (810daf8 <xPortStartScheduler+0x138>)
 810da34:	2207      	movs	r2, #7
 810da36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810da38:	e009      	b.n	810da4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810da3a:	4b2f      	ldr	r3, [pc, #188]	@ (810daf8 <xPortStartScheduler+0x138>)
 810da3c:	681b      	ldr	r3, [r3, #0]
 810da3e:	3b01      	subs	r3, #1
 810da40:	4a2d      	ldr	r2, [pc, #180]	@ (810daf8 <xPortStartScheduler+0x138>)
 810da42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810da44:	78fb      	ldrb	r3, [r7, #3]
 810da46:	b2db      	uxtb	r3, r3
 810da48:	005b      	lsls	r3, r3, #1
 810da4a:	b2db      	uxtb	r3, r3
 810da4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810da4e:	78fb      	ldrb	r3, [r7, #3]
 810da50:	b2db      	uxtb	r3, r3
 810da52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810da56:	2b80      	cmp	r3, #128	@ 0x80
 810da58:	d0ef      	beq.n	810da3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810da5a:	4b27      	ldr	r3, [pc, #156]	@ (810daf8 <xPortStartScheduler+0x138>)
 810da5c:	681b      	ldr	r3, [r3, #0]
 810da5e:	f1c3 0307 	rsb	r3, r3, #7
 810da62:	2b04      	cmp	r3, #4
 810da64:	d00b      	beq.n	810da7e <xPortStartScheduler+0xbe>
	__asm volatile
 810da66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da6a:	f383 8811 	msr	BASEPRI, r3
 810da6e:	f3bf 8f6f 	isb	sy
 810da72:	f3bf 8f4f 	dsb	sy
 810da76:	60bb      	str	r3, [r7, #8]
}
 810da78:	bf00      	nop
 810da7a:	bf00      	nop
 810da7c:	e7fd      	b.n	810da7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810da7e:	4b1e      	ldr	r3, [pc, #120]	@ (810daf8 <xPortStartScheduler+0x138>)
 810da80:	681b      	ldr	r3, [r3, #0]
 810da82:	021b      	lsls	r3, r3, #8
 810da84:	4a1c      	ldr	r2, [pc, #112]	@ (810daf8 <xPortStartScheduler+0x138>)
 810da86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810da88:	4b1b      	ldr	r3, [pc, #108]	@ (810daf8 <xPortStartScheduler+0x138>)
 810da8a:	681b      	ldr	r3, [r3, #0]
 810da8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810da90:	4a19      	ldr	r2, [pc, #100]	@ (810daf8 <xPortStartScheduler+0x138>)
 810da92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810da94:	687b      	ldr	r3, [r7, #4]
 810da96:	b2da      	uxtb	r2, r3
 810da98:	697b      	ldr	r3, [r7, #20]
 810da9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810da9c:	4b17      	ldr	r3, [pc, #92]	@ (810dafc <xPortStartScheduler+0x13c>)
 810da9e:	681b      	ldr	r3, [r3, #0]
 810daa0:	4a16      	ldr	r2, [pc, #88]	@ (810dafc <xPortStartScheduler+0x13c>)
 810daa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810daa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810daa8:	4b14      	ldr	r3, [pc, #80]	@ (810dafc <xPortStartScheduler+0x13c>)
 810daaa:	681b      	ldr	r3, [r3, #0]
 810daac:	4a13      	ldr	r2, [pc, #76]	@ (810dafc <xPortStartScheduler+0x13c>)
 810daae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810dab2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810dab4:	f000 f8da 	bl	810dc6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810dab8:	4b11      	ldr	r3, [pc, #68]	@ (810db00 <xPortStartScheduler+0x140>)
 810daba:	2200      	movs	r2, #0
 810dabc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810dabe:	f000 f8f9 	bl	810dcb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810dac2:	4b10      	ldr	r3, [pc, #64]	@ (810db04 <xPortStartScheduler+0x144>)
 810dac4:	681b      	ldr	r3, [r3, #0]
 810dac6:	4a0f      	ldr	r2, [pc, #60]	@ (810db04 <xPortStartScheduler+0x144>)
 810dac8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810dacc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810dace:	f7ff ff63 	bl	810d998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810dad2:	f001 f9ef 	bl	810eeb4 <vTaskSwitchContext>
	prvTaskExitError();
 810dad6:	f7ff ff1d 	bl	810d914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810dada:	2300      	movs	r3, #0
}
 810dadc:	4618      	mov	r0, r3
 810dade:	3718      	adds	r7, #24
 810dae0:	46bd      	mov	sp, r7
 810dae2:	bd80      	pop	{r7, pc}
 810dae4:	e000ed00 	.word	0xe000ed00
 810dae8:	410fc271 	.word	0x410fc271
 810daec:	410fc270 	.word	0x410fc270
 810daf0:	e000e400 	.word	0xe000e400
 810daf4:	10004ff4 	.word	0x10004ff4
 810daf8:	10004ff8 	.word	0x10004ff8
 810dafc:	e000ed20 	.word	0xe000ed20
 810db00:	10000010 	.word	0x10000010
 810db04:	e000ef34 	.word	0xe000ef34

0810db08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810db08:	b480      	push	{r7}
 810db0a:	b083      	sub	sp, #12
 810db0c:	af00      	add	r7, sp, #0
	__asm volatile
 810db0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810db12:	f383 8811 	msr	BASEPRI, r3
 810db16:	f3bf 8f6f 	isb	sy
 810db1a:	f3bf 8f4f 	dsb	sy
 810db1e:	607b      	str	r3, [r7, #4]
}
 810db20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810db22:	4b10      	ldr	r3, [pc, #64]	@ (810db64 <vPortEnterCritical+0x5c>)
 810db24:	681b      	ldr	r3, [r3, #0]
 810db26:	3301      	adds	r3, #1
 810db28:	4a0e      	ldr	r2, [pc, #56]	@ (810db64 <vPortEnterCritical+0x5c>)
 810db2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810db2c:	4b0d      	ldr	r3, [pc, #52]	@ (810db64 <vPortEnterCritical+0x5c>)
 810db2e:	681b      	ldr	r3, [r3, #0]
 810db30:	2b01      	cmp	r3, #1
 810db32:	d110      	bne.n	810db56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810db34:	4b0c      	ldr	r3, [pc, #48]	@ (810db68 <vPortEnterCritical+0x60>)
 810db36:	681b      	ldr	r3, [r3, #0]
 810db38:	b2db      	uxtb	r3, r3
 810db3a:	2b00      	cmp	r3, #0
 810db3c:	d00b      	beq.n	810db56 <vPortEnterCritical+0x4e>
	__asm volatile
 810db3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810db42:	f383 8811 	msr	BASEPRI, r3
 810db46:	f3bf 8f6f 	isb	sy
 810db4a:	f3bf 8f4f 	dsb	sy
 810db4e:	603b      	str	r3, [r7, #0]
}
 810db50:	bf00      	nop
 810db52:	bf00      	nop
 810db54:	e7fd      	b.n	810db52 <vPortEnterCritical+0x4a>
	}
}
 810db56:	bf00      	nop
 810db58:	370c      	adds	r7, #12
 810db5a:	46bd      	mov	sp, r7
 810db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810db60:	4770      	bx	lr
 810db62:	bf00      	nop
 810db64:	10000010 	.word	0x10000010
 810db68:	e000ed04 	.word	0xe000ed04

0810db6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810db6c:	b480      	push	{r7}
 810db6e:	b083      	sub	sp, #12
 810db70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810db72:	4b12      	ldr	r3, [pc, #72]	@ (810dbbc <vPortExitCritical+0x50>)
 810db74:	681b      	ldr	r3, [r3, #0]
 810db76:	2b00      	cmp	r3, #0
 810db78:	d10b      	bne.n	810db92 <vPortExitCritical+0x26>
	__asm volatile
 810db7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810db7e:	f383 8811 	msr	BASEPRI, r3
 810db82:	f3bf 8f6f 	isb	sy
 810db86:	f3bf 8f4f 	dsb	sy
 810db8a:	607b      	str	r3, [r7, #4]
}
 810db8c:	bf00      	nop
 810db8e:	bf00      	nop
 810db90:	e7fd      	b.n	810db8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810db92:	4b0a      	ldr	r3, [pc, #40]	@ (810dbbc <vPortExitCritical+0x50>)
 810db94:	681b      	ldr	r3, [r3, #0]
 810db96:	3b01      	subs	r3, #1
 810db98:	4a08      	ldr	r2, [pc, #32]	@ (810dbbc <vPortExitCritical+0x50>)
 810db9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810db9c:	4b07      	ldr	r3, [pc, #28]	@ (810dbbc <vPortExitCritical+0x50>)
 810db9e:	681b      	ldr	r3, [r3, #0]
 810dba0:	2b00      	cmp	r3, #0
 810dba2:	d105      	bne.n	810dbb0 <vPortExitCritical+0x44>
 810dba4:	2300      	movs	r3, #0
 810dba6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810dba8:	683b      	ldr	r3, [r7, #0]
 810dbaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810dbae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810dbb0:	bf00      	nop
 810dbb2:	370c      	adds	r7, #12
 810dbb4:	46bd      	mov	sp, r7
 810dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dbba:	4770      	bx	lr
 810dbbc:	10000010 	.word	0x10000010

0810dbc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810dbc0:	f3ef 8009 	mrs	r0, PSP
 810dbc4:	f3bf 8f6f 	isb	sy
 810dbc8:	4b15      	ldr	r3, [pc, #84]	@ (810dc20 <pxCurrentTCBConst>)
 810dbca:	681a      	ldr	r2, [r3, #0]
 810dbcc:	f01e 0f10 	tst.w	lr, #16
 810dbd0:	bf08      	it	eq
 810dbd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810dbd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dbda:	6010      	str	r0, [r2, #0]
 810dbdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 810dbe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810dbe4:	f380 8811 	msr	BASEPRI, r0
 810dbe8:	f3bf 8f4f 	dsb	sy
 810dbec:	f3bf 8f6f 	isb	sy
 810dbf0:	f001 f960 	bl	810eeb4 <vTaskSwitchContext>
 810dbf4:	f04f 0000 	mov.w	r0, #0
 810dbf8:	f380 8811 	msr	BASEPRI, r0
 810dbfc:	bc09      	pop	{r0, r3}
 810dbfe:	6819      	ldr	r1, [r3, #0]
 810dc00:	6808      	ldr	r0, [r1, #0]
 810dc02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dc06:	f01e 0f10 	tst.w	lr, #16
 810dc0a:	bf08      	it	eq
 810dc0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810dc10:	f380 8809 	msr	PSP, r0
 810dc14:	f3bf 8f6f 	isb	sy
 810dc18:	4770      	bx	lr
 810dc1a:	bf00      	nop
 810dc1c:	f3af 8000 	nop.w

0810dc20 <pxCurrentTCBConst>:
 810dc20:	1000503c 	.word	0x1000503c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810dc24:	bf00      	nop
 810dc26:	bf00      	nop

0810dc28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810dc28:	b580      	push	{r7, lr}
 810dc2a:	b082      	sub	sp, #8
 810dc2c:	af00      	add	r7, sp, #0
	__asm volatile
 810dc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc32:	f383 8811 	msr	BASEPRI, r3
 810dc36:	f3bf 8f6f 	isb	sy
 810dc3a:	f3bf 8f4f 	dsb	sy
 810dc3e:	607b      	str	r3, [r7, #4]
}
 810dc40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810dc42:	f001 f87d 	bl	810ed40 <xTaskIncrementTick>
 810dc46:	4603      	mov	r3, r0
 810dc48:	2b00      	cmp	r3, #0
 810dc4a:	d003      	beq.n	810dc54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810dc4c:	4b06      	ldr	r3, [pc, #24]	@ (810dc68 <xPortSysTickHandler+0x40>)
 810dc4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dc52:	601a      	str	r2, [r3, #0]
 810dc54:	2300      	movs	r3, #0
 810dc56:	603b      	str	r3, [r7, #0]
	__asm volatile
 810dc58:	683b      	ldr	r3, [r7, #0]
 810dc5a:	f383 8811 	msr	BASEPRI, r3
}
 810dc5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810dc60:	bf00      	nop
 810dc62:	3708      	adds	r7, #8
 810dc64:	46bd      	mov	sp, r7
 810dc66:	bd80      	pop	{r7, pc}
 810dc68:	e000ed04 	.word	0xe000ed04

0810dc6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810dc6c:	b480      	push	{r7}
 810dc6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810dc70:	4b0b      	ldr	r3, [pc, #44]	@ (810dca0 <vPortSetupTimerInterrupt+0x34>)
 810dc72:	2200      	movs	r2, #0
 810dc74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810dc76:	4b0b      	ldr	r3, [pc, #44]	@ (810dca4 <vPortSetupTimerInterrupt+0x38>)
 810dc78:	2200      	movs	r2, #0
 810dc7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810dc7c:	4b0a      	ldr	r3, [pc, #40]	@ (810dca8 <vPortSetupTimerInterrupt+0x3c>)
 810dc7e:	681b      	ldr	r3, [r3, #0]
 810dc80:	4a0a      	ldr	r2, [pc, #40]	@ (810dcac <vPortSetupTimerInterrupt+0x40>)
 810dc82:	fba2 2303 	umull	r2, r3, r2, r3
 810dc86:	099b      	lsrs	r3, r3, #6
 810dc88:	4a09      	ldr	r2, [pc, #36]	@ (810dcb0 <vPortSetupTimerInterrupt+0x44>)
 810dc8a:	3b01      	subs	r3, #1
 810dc8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810dc8e:	4b04      	ldr	r3, [pc, #16]	@ (810dca0 <vPortSetupTimerInterrupt+0x34>)
 810dc90:	2207      	movs	r2, #7
 810dc92:	601a      	str	r2, [r3, #0]
}
 810dc94:	bf00      	nop
 810dc96:	46bd      	mov	sp, r7
 810dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc9c:	4770      	bx	lr
 810dc9e:	bf00      	nop
 810dca0:	e000e010 	.word	0xe000e010
 810dca4:	e000e018 	.word	0xe000e018
 810dca8:	10000004 	.word	0x10000004
 810dcac:	10624dd3 	.word	0x10624dd3
 810dcb0:	e000e014 	.word	0xe000e014

0810dcb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810dcb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810dcc4 <vPortEnableVFP+0x10>
 810dcb8:	6801      	ldr	r1, [r0, #0]
 810dcba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810dcbe:	6001      	str	r1, [r0, #0]
 810dcc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810dcc2:	bf00      	nop
 810dcc4:	e000ed88 	.word	0xe000ed88

0810dcc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810dcc8:	b480      	push	{r7}
 810dcca:	b085      	sub	sp, #20
 810dccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810dcce:	f3ef 8305 	mrs	r3, IPSR
 810dcd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810dcd4:	68fb      	ldr	r3, [r7, #12]
 810dcd6:	2b0f      	cmp	r3, #15
 810dcd8:	d915      	bls.n	810dd06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810dcda:	4a18      	ldr	r2, [pc, #96]	@ (810dd3c <vPortValidateInterruptPriority+0x74>)
 810dcdc:	68fb      	ldr	r3, [r7, #12]
 810dcde:	4413      	add	r3, r2
 810dce0:	781b      	ldrb	r3, [r3, #0]
 810dce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810dce4:	4b16      	ldr	r3, [pc, #88]	@ (810dd40 <vPortValidateInterruptPriority+0x78>)
 810dce6:	781b      	ldrb	r3, [r3, #0]
 810dce8:	7afa      	ldrb	r2, [r7, #11]
 810dcea:	429a      	cmp	r2, r3
 810dcec:	d20b      	bcs.n	810dd06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810dcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dcf2:	f383 8811 	msr	BASEPRI, r3
 810dcf6:	f3bf 8f6f 	isb	sy
 810dcfa:	f3bf 8f4f 	dsb	sy
 810dcfe:	607b      	str	r3, [r7, #4]
}
 810dd00:	bf00      	nop
 810dd02:	bf00      	nop
 810dd04:	e7fd      	b.n	810dd02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810dd06:	4b0f      	ldr	r3, [pc, #60]	@ (810dd44 <vPortValidateInterruptPriority+0x7c>)
 810dd08:	681b      	ldr	r3, [r3, #0]
 810dd0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810dd0e:	4b0e      	ldr	r3, [pc, #56]	@ (810dd48 <vPortValidateInterruptPriority+0x80>)
 810dd10:	681b      	ldr	r3, [r3, #0]
 810dd12:	429a      	cmp	r2, r3
 810dd14:	d90b      	bls.n	810dd2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810dd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd1a:	f383 8811 	msr	BASEPRI, r3
 810dd1e:	f3bf 8f6f 	isb	sy
 810dd22:	f3bf 8f4f 	dsb	sy
 810dd26:	603b      	str	r3, [r7, #0]
}
 810dd28:	bf00      	nop
 810dd2a:	bf00      	nop
 810dd2c:	e7fd      	b.n	810dd2a <vPortValidateInterruptPriority+0x62>
	}
 810dd2e:	bf00      	nop
 810dd30:	3714      	adds	r7, #20
 810dd32:	46bd      	mov	sp, r7
 810dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd38:	4770      	bx	lr
 810dd3a:	bf00      	nop
 810dd3c:	e000e3f0 	.word	0xe000e3f0
 810dd40:	10004ff4 	.word	0x10004ff4
 810dd44:	e000ed0c 	.word	0xe000ed0c
 810dd48:	10004ff8 	.word	0x10004ff8

0810dd4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810dd4c:	b580      	push	{r7, lr}
 810dd4e:	b084      	sub	sp, #16
 810dd50:	af00      	add	r7, sp, #0
 810dd52:	6078      	str	r0, [r7, #4]
 810dd54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810dd56:	687b      	ldr	r3, [r7, #4]
 810dd58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810dd5a:	68fb      	ldr	r3, [r7, #12]
 810dd5c:	2b00      	cmp	r3, #0
 810dd5e:	d10b      	bne.n	810dd78 <xQueueGenericReset+0x2c>
	__asm volatile
 810dd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd64:	f383 8811 	msr	BASEPRI, r3
 810dd68:	f3bf 8f6f 	isb	sy
 810dd6c:	f3bf 8f4f 	dsb	sy
 810dd70:	60bb      	str	r3, [r7, #8]
}
 810dd72:	bf00      	nop
 810dd74:	bf00      	nop
 810dd76:	e7fd      	b.n	810dd74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810dd78:	f7ff fec6 	bl	810db08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810dd7c:	68fb      	ldr	r3, [r7, #12]
 810dd7e:	681a      	ldr	r2, [r3, #0]
 810dd80:	68fb      	ldr	r3, [r7, #12]
 810dd82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810dd84:	68f9      	ldr	r1, [r7, #12]
 810dd86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810dd88:	fb01 f303 	mul.w	r3, r1, r3
 810dd8c:	441a      	add	r2, r3
 810dd8e:	68fb      	ldr	r3, [r7, #12]
 810dd90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810dd92:	68fb      	ldr	r3, [r7, #12]
 810dd94:	2200      	movs	r2, #0
 810dd96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810dd98:	68fb      	ldr	r3, [r7, #12]
 810dd9a:	681a      	ldr	r2, [r3, #0]
 810dd9c:	68fb      	ldr	r3, [r7, #12]
 810dd9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810dda0:	68fb      	ldr	r3, [r7, #12]
 810dda2:	681a      	ldr	r2, [r3, #0]
 810dda4:	68fb      	ldr	r3, [r7, #12]
 810dda6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810dda8:	3b01      	subs	r3, #1
 810ddaa:	68f9      	ldr	r1, [r7, #12]
 810ddac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810ddae:	fb01 f303 	mul.w	r3, r1, r3
 810ddb2:	441a      	add	r2, r3
 810ddb4:	68fb      	ldr	r3, [r7, #12]
 810ddb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810ddb8:	68fb      	ldr	r3, [r7, #12]
 810ddba:	22ff      	movs	r2, #255	@ 0xff
 810ddbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810ddc0:	68fb      	ldr	r3, [r7, #12]
 810ddc2:	22ff      	movs	r2, #255	@ 0xff
 810ddc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810ddc8:	683b      	ldr	r3, [r7, #0]
 810ddca:	2b00      	cmp	r3, #0
 810ddcc:	d114      	bne.n	810ddf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810ddce:	68fb      	ldr	r3, [r7, #12]
 810ddd0:	691b      	ldr	r3, [r3, #16]
 810ddd2:	2b00      	cmp	r3, #0
 810ddd4:	d01a      	beq.n	810de0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810ddd6:	68fb      	ldr	r3, [r7, #12]
 810ddd8:	3310      	adds	r3, #16
 810ddda:	4618      	mov	r0, r3
 810dddc:	f001 f91a 	bl	810f014 <xTaskRemoveFromEventList>
 810dde0:	4603      	mov	r3, r0
 810dde2:	2b00      	cmp	r3, #0
 810dde4:	d012      	beq.n	810de0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810dde6:	4b0d      	ldr	r3, [pc, #52]	@ (810de1c <xQueueGenericReset+0xd0>)
 810dde8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ddec:	601a      	str	r2, [r3, #0]
 810ddee:	f3bf 8f4f 	dsb	sy
 810ddf2:	f3bf 8f6f 	isb	sy
 810ddf6:	e009      	b.n	810de0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810ddf8:	68fb      	ldr	r3, [r7, #12]
 810ddfa:	3310      	adds	r3, #16
 810ddfc:	4618      	mov	r0, r3
 810ddfe:	f7ff fca1 	bl	810d744 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810de02:	68fb      	ldr	r3, [r7, #12]
 810de04:	3324      	adds	r3, #36	@ 0x24
 810de06:	4618      	mov	r0, r3
 810de08:	f7ff fc9c 	bl	810d744 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810de0c:	f7ff feae 	bl	810db6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810de10:	2301      	movs	r3, #1
}
 810de12:	4618      	mov	r0, r3
 810de14:	3710      	adds	r7, #16
 810de16:	46bd      	mov	sp, r7
 810de18:	bd80      	pop	{r7, pc}
 810de1a:	bf00      	nop
 810de1c:	e000ed04 	.word	0xe000ed04

0810de20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810de20:	b580      	push	{r7, lr}
 810de22:	b08e      	sub	sp, #56	@ 0x38
 810de24:	af02      	add	r7, sp, #8
 810de26:	60f8      	str	r0, [r7, #12]
 810de28:	60b9      	str	r1, [r7, #8]
 810de2a:	607a      	str	r2, [r7, #4]
 810de2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810de2e:	68fb      	ldr	r3, [r7, #12]
 810de30:	2b00      	cmp	r3, #0
 810de32:	d10b      	bne.n	810de4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810de34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de38:	f383 8811 	msr	BASEPRI, r3
 810de3c:	f3bf 8f6f 	isb	sy
 810de40:	f3bf 8f4f 	dsb	sy
 810de44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810de46:	bf00      	nop
 810de48:	bf00      	nop
 810de4a:	e7fd      	b.n	810de48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810de4c:	683b      	ldr	r3, [r7, #0]
 810de4e:	2b00      	cmp	r3, #0
 810de50:	d10b      	bne.n	810de6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810de52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de56:	f383 8811 	msr	BASEPRI, r3
 810de5a:	f3bf 8f6f 	isb	sy
 810de5e:	f3bf 8f4f 	dsb	sy
 810de62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810de64:	bf00      	nop
 810de66:	bf00      	nop
 810de68:	e7fd      	b.n	810de66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810de6a:	687b      	ldr	r3, [r7, #4]
 810de6c:	2b00      	cmp	r3, #0
 810de6e:	d002      	beq.n	810de76 <xQueueGenericCreateStatic+0x56>
 810de70:	68bb      	ldr	r3, [r7, #8]
 810de72:	2b00      	cmp	r3, #0
 810de74:	d001      	beq.n	810de7a <xQueueGenericCreateStatic+0x5a>
 810de76:	2301      	movs	r3, #1
 810de78:	e000      	b.n	810de7c <xQueueGenericCreateStatic+0x5c>
 810de7a:	2300      	movs	r3, #0
 810de7c:	2b00      	cmp	r3, #0
 810de7e:	d10b      	bne.n	810de98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810de80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de84:	f383 8811 	msr	BASEPRI, r3
 810de88:	f3bf 8f6f 	isb	sy
 810de8c:	f3bf 8f4f 	dsb	sy
 810de90:	623b      	str	r3, [r7, #32]
}
 810de92:	bf00      	nop
 810de94:	bf00      	nop
 810de96:	e7fd      	b.n	810de94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810de98:	687b      	ldr	r3, [r7, #4]
 810de9a:	2b00      	cmp	r3, #0
 810de9c:	d102      	bne.n	810dea4 <xQueueGenericCreateStatic+0x84>
 810de9e:	68bb      	ldr	r3, [r7, #8]
 810dea0:	2b00      	cmp	r3, #0
 810dea2:	d101      	bne.n	810dea8 <xQueueGenericCreateStatic+0x88>
 810dea4:	2301      	movs	r3, #1
 810dea6:	e000      	b.n	810deaa <xQueueGenericCreateStatic+0x8a>
 810dea8:	2300      	movs	r3, #0
 810deaa:	2b00      	cmp	r3, #0
 810deac:	d10b      	bne.n	810dec6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810deae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810deb2:	f383 8811 	msr	BASEPRI, r3
 810deb6:	f3bf 8f6f 	isb	sy
 810deba:	f3bf 8f4f 	dsb	sy
 810debe:	61fb      	str	r3, [r7, #28]
}
 810dec0:	bf00      	nop
 810dec2:	bf00      	nop
 810dec4:	e7fd      	b.n	810dec2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810dec6:	2350      	movs	r3, #80	@ 0x50
 810dec8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810deca:	697b      	ldr	r3, [r7, #20]
 810decc:	2b50      	cmp	r3, #80	@ 0x50
 810dece:	d00b      	beq.n	810dee8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810ded0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ded4:	f383 8811 	msr	BASEPRI, r3
 810ded8:	f3bf 8f6f 	isb	sy
 810dedc:	f3bf 8f4f 	dsb	sy
 810dee0:	61bb      	str	r3, [r7, #24]
}
 810dee2:	bf00      	nop
 810dee4:	bf00      	nop
 810dee6:	e7fd      	b.n	810dee4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810dee8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810deea:	683b      	ldr	r3, [r7, #0]
 810deec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810deee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810def0:	2b00      	cmp	r3, #0
 810def2:	d00d      	beq.n	810df10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810def4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810def6:	2201      	movs	r2, #1
 810def8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810defc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810df00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810df02:	9300      	str	r3, [sp, #0]
 810df04:	4613      	mov	r3, r2
 810df06:	687a      	ldr	r2, [r7, #4]
 810df08:	68b9      	ldr	r1, [r7, #8]
 810df0a:	68f8      	ldr	r0, [r7, #12]
 810df0c:	f000 f805 	bl	810df1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810df10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810df12:	4618      	mov	r0, r3
 810df14:	3730      	adds	r7, #48	@ 0x30
 810df16:	46bd      	mov	sp, r7
 810df18:	bd80      	pop	{r7, pc}

0810df1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810df1a:	b580      	push	{r7, lr}
 810df1c:	b084      	sub	sp, #16
 810df1e:	af00      	add	r7, sp, #0
 810df20:	60f8      	str	r0, [r7, #12]
 810df22:	60b9      	str	r1, [r7, #8]
 810df24:	607a      	str	r2, [r7, #4]
 810df26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810df28:	68bb      	ldr	r3, [r7, #8]
 810df2a:	2b00      	cmp	r3, #0
 810df2c:	d103      	bne.n	810df36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810df2e:	69bb      	ldr	r3, [r7, #24]
 810df30:	69ba      	ldr	r2, [r7, #24]
 810df32:	601a      	str	r2, [r3, #0]
 810df34:	e002      	b.n	810df3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810df36:	69bb      	ldr	r3, [r7, #24]
 810df38:	687a      	ldr	r2, [r7, #4]
 810df3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810df3c:	69bb      	ldr	r3, [r7, #24]
 810df3e:	68fa      	ldr	r2, [r7, #12]
 810df40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810df42:	69bb      	ldr	r3, [r7, #24]
 810df44:	68ba      	ldr	r2, [r7, #8]
 810df46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810df48:	2101      	movs	r1, #1
 810df4a:	69b8      	ldr	r0, [r7, #24]
 810df4c:	f7ff fefe 	bl	810dd4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810df50:	69bb      	ldr	r3, [r7, #24]
 810df52:	78fa      	ldrb	r2, [r7, #3]
 810df54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810df58:	bf00      	nop
 810df5a:	3710      	adds	r7, #16
 810df5c:	46bd      	mov	sp, r7
 810df5e:	bd80      	pop	{r7, pc}

0810df60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810df60:	b580      	push	{r7, lr}
 810df62:	b08e      	sub	sp, #56	@ 0x38
 810df64:	af00      	add	r7, sp, #0
 810df66:	60f8      	str	r0, [r7, #12]
 810df68:	60b9      	str	r1, [r7, #8]
 810df6a:	607a      	str	r2, [r7, #4]
 810df6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810df6e:	2300      	movs	r3, #0
 810df70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810df72:	68fb      	ldr	r3, [r7, #12]
 810df74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810df76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810df78:	2b00      	cmp	r3, #0
 810df7a:	d10b      	bne.n	810df94 <xQueueGenericSend+0x34>
	__asm volatile
 810df7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810df80:	f383 8811 	msr	BASEPRI, r3
 810df84:	f3bf 8f6f 	isb	sy
 810df88:	f3bf 8f4f 	dsb	sy
 810df8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810df8e:	bf00      	nop
 810df90:	bf00      	nop
 810df92:	e7fd      	b.n	810df90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810df94:	68bb      	ldr	r3, [r7, #8]
 810df96:	2b00      	cmp	r3, #0
 810df98:	d103      	bne.n	810dfa2 <xQueueGenericSend+0x42>
 810df9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810df9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810df9e:	2b00      	cmp	r3, #0
 810dfa0:	d101      	bne.n	810dfa6 <xQueueGenericSend+0x46>
 810dfa2:	2301      	movs	r3, #1
 810dfa4:	e000      	b.n	810dfa8 <xQueueGenericSend+0x48>
 810dfa6:	2300      	movs	r3, #0
 810dfa8:	2b00      	cmp	r3, #0
 810dfaa:	d10b      	bne.n	810dfc4 <xQueueGenericSend+0x64>
	__asm volatile
 810dfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dfb0:	f383 8811 	msr	BASEPRI, r3
 810dfb4:	f3bf 8f6f 	isb	sy
 810dfb8:	f3bf 8f4f 	dsb	sy
 810dfbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810dfbe:	bf00      	nop
 810dfc0:	bf00      	nop
 810dfc2:	e7fd      	b.n	810dfc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810dfc4:	683b      	ldr	r3, [r7, #0]
 810dfc6:	2b02      	cmp	r3, #2
 810dfc8:	d103      	bne.n	810dfd2 <xQueueGenericSend+0x72>
 810dfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dfcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810dfce:	2b01      	cmp	r3, #1
 810dfd0:	d101      	bne.n	810dfd6 <xQueueGenericSend+0x76>
 810dfd2:	2301      	movs	r3, #1
 810dfd4:	e000      	b.n	810dfd8 <xQueueGenericSend+0x78>
 810dfd6:	2300      	movs	r3, #0
 810dfd8:	2b00      	cmp	r3, #0
 810dfda:	d10b      	bne.n	810dff4 <xQueueGenericSend+0x94>
	__asm volatile
 810dfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dfe0:	f383 8811 	msr	BASEPRI, r3
 810dfe4:	f3bf 8f6f 	isb	sy
 810dfe8:	f3bf 8f4f 	dsb	sy
 810dfec:	623b      	str	r3, [r7, #32]
}
 810dfee:	bf00      	nop
 810dff0:	bf00      	nop
 810dff2:	e7fd      	b.n	810dff0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810dff4:	f001 f9ce 	bl	810f394 <xTaskGetSchedulerState>
 810dff8:	4603      	mov	r3, r0
 810dffa:	2b00      	cmp	r3, #0
 810dffc:	d102      	bne.n	810e004 <xQueueGenericSend+0xa4>
 810dffe:	687b      	ldr	r3, [r7, #4]
 810e000:	2b00      	cmp	r3, #0
 810e002:	d101      	bne.n	810e008 <xQueueGenericSend+0xa8>
 810e004:	2301      	movs	r3, #1
 810e006:	e000      	b.n	810e00a <xQueueGenericSend+0xaa>
 810e008:	2300      	movs	r3, #0
 810e00a:	2b00      	cmp	r3, #0
 810e00c:	d10b      	bne.n	810e026 <xQueueGenericSend+0xc6>
	__asm volatile
 810e00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e012:	f383 8811 	msr	BASEPRI, r3
 810e016:	f3bf 8f6f 	isb	sy
 810e01a:	f3bf 8f4f 	dsb	sy
 810e01e:	61fb      	str	r3, [r7, #28]
}
 810e020:	bf00      	nop
 810e022:	bf00      	nop
 810e024:	e7fd      	b.n	810e022 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810e026:	f7ff fd6f 	bl	810db08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810e02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e02c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810e02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810e032:	429a      	cmp	r2, r3
 810e034:	d302      	bcc.n	810e03c <xQueueGenericSend+0xdc>
 810e036:	683b      	ldr	r3, [r7, #0]
 810e038:	2b02      	cmp	r3, #2
 810e03a:	d129      	bne.n	810e090 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810e03c:	683a      	ldr	r2, [r7, #0]
 810e03e:	68b9      	ldr	r1, [r7, #8]
 810e040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810e042:	f000 fa0f 	bl	810e464 <prvCopyDataToQueue>
 810e046:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810e048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e04c:	2b00      	cmp	r3, #0
 810e04e:	d010      	beq.n	810e072 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810e050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e052:	3324      	adds	r3, #36	@ 0x24
 810e054:	4618      	mov	r0, r3
 810e056:	f000 ffdd 	bl	810f014 <xTaskRemoveFromEventList>
 810e05a:	4603      	mov	r3, r0
 810e05c:	2b00      	cmp	r3, #0
 810e05e:	d013      	beq.n	810e088 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810e060:	4b3f      	ldr	r3, [pc, #252]	@ (810e160 <xQueueGenericSend+0x200>)
 810e062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e066:	601a      	str	r2, [r3, #0]
 810e068:	f3bf 8f4f 	dsb	sy
 810e06c:	f3bf 8f6f 	isb	sy
 810e070:	e00a      	b.n	810e088 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810e072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e074:	2b00      	cmp	r3, #0
 810e076:	d007      	beq.n	810e088 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810e078:	4b39      	ldr	r3, [pc, #228]	@ (810e160 <xQueueGenericSend+0x200>)
 810e07a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e07e:	601a      	str	r2, [r3, #0]
 810e080:	f3bf 8f4f 	dsb	sy
 810e084:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810e088:	f7ff fd70 	bl	810db6c <vPortExitCritical>
				return pdPASS;
 810e08c:	2301      	movs	r3, #1
 810e08e:	e063      	b.n	810e158 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810e090:	687b      	ldr	r3, [r7, #4]
 810e092:	2b00      	cmp	r3, #0
 810e094:	d103      	bne.n	810e09e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810e096:	f7ff fd69 	bl	810db6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810e09a:	2300      	movs	r3, #0
 810e09c:	e05c      	b.n	810e158 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810e09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e0a0:	2b00      	cmp	r3, #0
 810e0a2:	d106      	bne.n	810e0b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810e0a4:	f107 0314 	add.w	r3, r7, #20
 810e0a8:	4618      	mov	r0, r3
 810e0aa:	f001 f817 	bl	810f0dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810e0ae:	2301      	movs	r3, #1
 810e0b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810e0b2:	f7ff fd5b 	bl	810db6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810e0b6:	f000 fd87 	bl	810ebc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810e0ba:	f7ff fd25 	bl	810db08 <vPortEnterCritical>
 810e0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e0c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e0c4:	b25b      	sxtb	r3, r3
 810e0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e0ca:	d103      	bne.n	810e0d4 <xQueueGenericSend+0x174>
 810e0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e0ce:	2200      	movs	r2, #0
 810e0d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810e0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e0d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e0da:	b25b      	sxtb	r3, r3
 810e0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e0e0:	d103      	bne.n	810e0ea <xQueueGenericSend+0x18a>
 810e0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e0e4:	2200      	movs	r2, #0
 810e0e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810e0ea:	f7ff fd3f 	bl	810db6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810e0ee:	1d3a      	adds	r2, r7, #4
 810e0f0:	f107 0314 	add.w	r3, r7, #20
 810e0f4:	4611      	mov	r1, r2
 810e0f6:	4618      	mov	r0, r3
 810e0f8:	f001 f806 	bl	810f108 <xTaskCheckForTimeOut>
 810e0fc:	4603      	mov	r3, r0
 810e0fe:	2b00      	cmp	r3, #0
 810e100:	d124      	bne.n	810e14c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810e102:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810e104:	f000 faa6 	bl	810e654 <prvIsQueueFull>
 810e108:	4603      	mov	r3, r0
 810e10a:	2b00      	cmp	r3, #0
 810e10c:	d018      	beq.n	810e140 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810e10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e110:	3310      	adds	r3, #16
 810e112:	687a      	ldr	r2, [r7, #4]
 810e114:	4611      	mov	r1, r2
 810e116:	4618      	mov	r0, r3
 810e118:	f000 ff2a 	bl	810ef70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810e11c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810e11e:	f000 fa31 	bl	810e584 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810e122:	f000 fd5f 	bl	810ebe4 <xTaskResumeAll>
 810e126:	4603      	mov	r3, r0
 810e128:	2b00      	cmp	r3, #0
 810e12a:	f47f af7c 	bne.w	810e026 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810e12e:	4b0c      	ldr	r3, [pc, #48]	@ (810e160 <xQueueGenericSend+0x200>)
 810e130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e134:	601a      	str	r2, [r3, #0]
 810e136:	f3bf 8f4f 	dsb	sy
 810e13a:	f3bf 8f6f 	isb	sy
 810e13e:	e772      	b.n	810e026 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810e140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810e142:	f000 fa1f 	bl	810e584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810e146:	f000 fd4d 	bl	810ebe4 <xTaskResumeAll>
 810e14a:	e76c      	b.n	810e026 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810e14c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810e14e:	f000 fa19 	bl	810e584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810e152:	f000 fd47 	bl	810ebe4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810e156:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810e158:	4618      	mov	r0, r3
 810e15a:	3738      	adds	r7, #56	@ 0x38
 810e15c:	46bd      	mov	sp, r7
 810e15e:	bd80      	pop	{r7, pc}
 810e160:	e000ed04 	.word	0xe000ed04

0810e164 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810e164:	b580      	push	{r7, lr}
 810e166:	b090      	sub	sp, #64	@ 0x40
 810e168:	af00      	add	r7, sp, #0
 810e16a:	60f8      	str	r0, [r7, #12]
 810e16c:	60b9      	str	r1, [r7, #8]
 810e16e:	607a      	str	r2, [r7, #4]
 810e170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810e172:	68fb      	ldr	r3, [r7, #12]
 810e174:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810e176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e178:	2b00      	cmp	r3, #0
 810e17a:	d10b      	bne.n	810e194 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810e17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e180:	f383 8811 	msr	BASEPRI, r3
 810e184:	f3bf 8f6f 	isb	sy
 810e188:	f3bf 8f4f 	dsb	sy
 810e18c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810e18e:	bf00      	nop
 810e190:	bf00      	nop
 810e192:	e7fd      	b.n	810e190 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810e194:	68bb      	ldr	r3, [r7, #8]
 810e196:	2b00      	cmp	r3, #0
 810e198:	d103      	bne.n	810e1a2 <xQueueGenericSendFromISR+0x3e>
 810e19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e19e:	2b00      	cmp	r3, #0
 810e1a0:	d101      	bne.n	810e1a6 <xQueueGenericSendFromISR+0x42>
 810e1a2:	2301      	movs	r3, #1
 810e1a4:	e000      	b.n	810e1a8 <xQueueGenericSendFromISR+0x44>
 810e1a6:	2300      	movs	r3, #0
 810e1a8:	2b00      	cmp	r3, #0
 810e1aa:	d10b      	bne.n	810e1c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810e1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e1b0:	f383 8811 	msr	BASEPRI, r3
 810e1b4:	f3bf 8f6f 	isb	sy
 810e1b8:	f3bf 8f4f 	dsb	sy
 810e1bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810e1be:	bf00      	nop
 810e1c0:	bf00      	nop
 810e1c2:	e7fd      	b.n	810e1c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810e1c4:	683b      	ldr	r3, [r7, #0]
 810e1c6:	2b02      	cmp	r3, #2
 810e1c8:	d103      	bne.n	810e1d2 <xQueueGenericSendFromISR+0x6e>
 810e1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e1cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810e1ce:	2b01      	cmp	r3, #1
 810e1d0:	d101      	bne.n	810e1d6 <xQueueGenericSendFromISR+0x72>
 810e1d2:	2301      	movs	r3, #1
 810e1d4:	e000      	b.n	810e1d8 <xQueueGenericSendFromISR+0x74>
 810e1d6:	2300      	movs	r3, #0
 810e1d8:	2b00      	cmp	r3, #0
 810e1da:	d10b      	bne.n	810e1f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810e1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e1e0:	f383 8811 	msr	BASEPRI, r3
 810e1e4:	f3bf 8f6f 	isb	sy
 810e1e8:	f3bf 8f4f 	dsb	sy
 810e1ec:	623b      	str	r3, [r7, #32]
}
 810e1ee:	bf00      	nop
 810e1f0:	bf00      	nop
 810e1f2:	e7fd      	b.n	810e1f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810e1f4:	f7ff fd68 	bl	810dcc8 <vPortValidateInterruptPriority>
	__asm volatile
 810e1f8:	f3ef 8211 	mrs	r2, BASEPRI
 810e1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e200:	f383 8811 	msr	BASEPRI, r3
 810e204:	f3bf 8f6f 	isb	sy
 810e208:	f3bf 8f4f 	dsb	sy
 810e20c:	61fa      	str	r2, [r7, #28]
 810e20e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810e210:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810e212:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810e214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810e218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e21a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810e21c:	429a      	cmp	r2, r3
 810e21e:	d302      	bcc.n	810e226 <xQueueGenericSendFromISR+0xc2>
 810e220:	683b      	ldr	r3, [r7, #0]
 810e222:	2b02      	cmp	r3, #2
 810e224:	d12f      	bne.n	810e286 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810e226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e228:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e22c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810e230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e234:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810e236:	683a      	ldr	r2, [r7, #0]
 810e238:	68b9      	ldr	r1, [r7, #8]
 810e23a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810e23c:	f000 f912 	bl	810e464 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810e240:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810e244:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e248:	d112      	bne.n	810e270 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810e24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e24e:	2b00      	cmp	r3, #0
 810e250:	d016      	beq.n	810e280 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810e252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e254:	3324      	adds	r3, #36	@ 0x24
 810e256:	4618      	mov	r0, r3
 810e258:	f000 fedc 	bl	810f014 <xTaskRemoveFromEventList>
 810e25c:	4603      	mov	r3, r0
 810e25e:	2b00      	cmp	r3, #0
 810e260:	d00e      	beq.n	810e280 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810e262:	687b      	ldr	r3, [r7, #4]
 810e264:	2b00      	cmp	r3, #0
 810e266:	d00b      	beq.n	810e280 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810e268:	687b      	ldr	r3, [r7, #4]
 810e26a:	2201      	movs	r2, #1
 810e26c:	601a      	str	r2, [r3, #0]
 810e26e:	e007      	b.n	810e280 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810e270:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810e274:	3301      	adds	r3, #1
 810e276:	b2db      	uxtb	r3, r3
 810e278:	b25a      	sxtb	r2, r3
 810e27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e27c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810e280:	2301      	movs	r3, #1
 810e282:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810e284:	e001      	b.n	810e28a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810e286:	2300      	movs	r3, #0
 810e288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810e28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e28c:	617b      	str	r3, [r7, #20]
	__asm volatile
 810e28e:	697b      	ldr	r3, [r7, #20]
 810e290:	f383 8811 	msr	BASEPRI, r3
}
 810e294:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810e296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810e298:	4618      	mov	r0, r3
 810e29a:	3740      	adds	r7, #64	@ 0x40
 810e29c:	46bd      	mov	sp, r7
 810e29e:	bd80      	pop	{r7, pc}

0810e2a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810e2a0:	b580      	push	{r7, lr}
 810e2a2:	b08c      	sub	sp, #48	@ 0x30
 810e2a4:	af00      	add	r7, sp, #0
 810e2a6:	60f8      	str	r0, [r7, #12]
 810e2a8:	60b9      	str	r1, [r7, #8]
 810e2aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810e2ac:	2300      	movs	r3, #0
 810e2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810e2b0:	68fb      	ldr	r3, [r7, #12]
 810e2b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810e2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e2b6:	2b00      	cmp	r3, #0
 810e2b8:	d10b      	bne.n	810e2d2 <xQueueReceive+0x32>
	__asm volatile
 810e2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e2be:	f383 8811 	msr	BASEPRI, r3
 810e2c2:	f3bf 8f6f 	isb	sy
 810e2c6:	f3bf 8f4f 	dsb	sy
 810e2ca:	623b      	str	r3, [r7, #32]
}
 810e2cc:	bf00      	nop
 810e2ce:	bf00      	nop
 810e2d0:	e7fd      	b.n	810e2ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810e2d2:	68bb      	ldr	r3, [r7, #8]
 810e2d4:	2b00      	cmp	r3, #0
 810e2d6:	d103      	bne.n	810e2e0 <xQueueReceive+0x40>
 810e2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e2dc:	2b00      	cmp	r3, #0
 810e2de:	d101      	bne.n	810e2e4 <xQueueReceive+0x44>
 810e2e0:	2301      	movs	r3, #1
 810e2e2:	e000      	b.n	810e2e6 <xQueueReceive+0x46>
 810e2e4:	2300      	movs	r3, #0
 810e2e6:	2b00      	cmp	r3, #0
 810e2e8:	d10b      	bne.n	810e302 <xQueueReceive+0x62>
	__asm volatile
 810e2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e2ee:	f383 8811 	msr	BASEPRI, r3
 810e2f2:	f3bf 8f6f 	isb	sy
 810e2f6:	f3bf 8f4f 	dsb	sy
 810e2fa:	61fb      	str	r3, [r7, #28]
}
 810e2fc:	bf00      	nop
 810e2fe:	bf00      	nop
 810e300:	e7fd      	b.n	810e2fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810e302:	f001 f847 	bl	810f394 <xTaskGetSchedulerState>
 810e306:	4603      	mov	r3, r0
 810e308:	2b00      	cmp	r3, #0
 810e30a:	d102      	bne.n	810e312 <xQueueReceive+0x72>
 810e30c:	687b      	ldr	r3, [r7, #4]
 810e30e:	2b00      	cmp	r3, #0
 810e310:	d101      	bne.n	810e316 <xQueueReceive+0x76>
 810e312:	2301      	movs	r3, #1
 810e314:	e000      	b.n	810e318 <xQueueReceive+0x78>
 810e316:	2300      	movs	r3, #0
 810e318:	2b00      	cmp	r3, #0
 810e31a:	d10b      	bne.n	810e334 <xQueueReceive+0x94>
	__asm volatile
 810e31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e320:	f383 8811 	msr	BASEPRI, r3
 810e324:	f3bf 8f6f 	isb	sy
 810e328:	f3bf 8f4f 	dsb	sy
 810e32c:	61bb      	str	r3, [r7, #24]
}
 810e32e:	bf00      	nop
 810e330:	bf00      	nop
 810e332:	e7fd      	b.n	810e330 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810e334:	f7ff fbe8 	bl	810db08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810e338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e33a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e33c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810e33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e340:	2b00      	cmp	r3, #0
 810e342:	d01f      	beq.n	810e384 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810e344:	68b9      	ldr	r1, [r7, #8]
 810e346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e348:	f000 f8f6 	bl	810e538 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810e34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e34e:	1e5a      	subs	r2, r3, #1
 810e350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e352:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e356:	691b      	ldr	r3, [r3, #16]
 810e358:	2b00      	cmp	r3, #0
 810e35a:	d00f      	beq.n	810e37c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e35e:	3310      	adds	r3, #16
 810e360:	4618      	mov	r0, r3
 810e362:	f000 fe57 	bl	810f014 <xTaskRemoveFromEventList>
 810e366:	4603      	mov	r3, r0
 810e368:	2b00      	cmp	r3, #0
 810e36a:	d007      	beq.n	810e37c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810e36c:	4b3c      	ldr	r3, [pc, #240]	@ (810e460 <xQueueReceive+0x1c0>)
 810e36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e372:	601a      	str	r2, [r3, #0]
 810e374:	f3bf 8f4f 	dsb	sy
 810e378:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810e37c:	f7ff fbf6 	bl	810db6c <vPortExitCritical>
				return pdPASS;
 810e380:	2301      	movs	r3, #1
 810e382:	e069      	b.n	810e458 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810e384:	687b      	ldr	r3, [r7, #4]
 810e386:	2b00      	cmp	r3, #0
 810e388:	d103      	bne.n	810e392 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810e38a:	f7ff fbef 	bl	810db6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810e38e:	2300      	movs	r3, #0
 810e390:	e062      	b.n	810e458 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810e392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e394:	2b00      	cmp	r3, #0
 810e396:	d106      	bne.n	810e3a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810e398:	f107 0310 	add.w	r3, r7, #16
 810e39c:	4618      	mov	r0, r3
 810e39e:	f000 fe9d 	bl	810f0dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810e3a2:	2301      	movs	r3, #1
 810e3a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810e3a6:	f7ff fbe1 	bl	810db6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810e3aa:	f000 fc0d 	bl	810ebc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810e3ae:	f7ff fbab 	bl	810db08 <vPortEnterCritical>
 810e3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e3b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e3b8:	b25b      	sxtb	r3, r3
 810e3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e3be:	d103      	bne.n	810e3c8 <xQueueReceive+0x128>
 810e3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e3c2:	2200      	movs	r2, #0
 810e3c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810e3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e3ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e3ce:	b25b      	sxtb	r3, r3
 810e3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e3d4:	d103      	bne.n	810e3de <xQueueReceive+0x13e>
 810e3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e3d8:	2200      	movs	r2, #0
 810e3da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810e3de:	f7ff fbc5 	bl	810db6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810e3e2:	1d3a      	adds	r2, r7, #4
 810e3e4:	f107 0310 	add.w	r3, r7, #16
 810e3e8:	4611      	mov	r1, r2
 810e3ea:	4618      	mov	r0, r3
 810e3ec:	f000 fe8c 	bl	810f108 <xTaskCheckForTimeOut>
 810e3f0:	4603      	mov	r3, r0
 810e3f2:	2b00      	cmp	r3, #0
 810e3f4:	d123      	bne.n	810e43e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810e3f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e3f8:	f000 f916 	bl	810e628 <prvIsQueueEmpty>
 810e3fc:	4603      	mov	r3, r0
 810e3fe:	2b00      	cmp	r3, #0
 810e400:	d017      	beq.n	810e432 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810e402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e404:	3324      	adds	r3, #36	@ 0x24
 810e406:	687a      	ldr	r2, [r7, #4]
 810e408:	4611      	mov	r1, r2
 810e40a:	4618      	mov	r0, r3
 810e40c:	f000 fdb0 	bl	810ef70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810e410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e412:	f000 f8b7 	bl	810e584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810e416:	f000 fbe5 	bl	810ebe4 <xTaskResumeAll>
 810e41a:	4603      	mov	r3, r0
 810e41c:	2b00      	cmp	r3, #0
 810e41e:	d189      	bne.n	810e334 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810e420:	4b0f      	ldr	r3, [pc, #60]	@ (810e460 <xQueueReceive+0x1c0>)
 810e422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e426:	601a      	str	r2, [r3, #0]
 810e428:	f3bf 8f4f 	dsb	sy
 810e42c:	f3bf 8f6f 	isb	sy
 810e430:	e780      	b.n	810e334 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810e432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e434:	f000 f8a6 	bl	810e584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810e438:	f000 fbd4 	bl	810ebe4 <xTaskResumeAll>
 810e43c:	e77a      	b.n	810e334 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810e43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e440:	f000 f8a0 	bl	810e584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810e444:	f000 fbce 	bl	810ebe4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810e448:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e44a:	f000 f8ed 	bl	810e628 <prvIsQueueEmpty>
 810e44e:	4603      	mov	r3, r0
 810e450:	2b00      	cmp	r3, #0
 810e452:	f43f af6f 	beq.w	810e334 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810e456:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810e458:	4618      	mov	r0, r3
 810e45a:	3730      	adds	r7, #48	@ 0x30
 810e45c:	46bd      	mov	sp, r7
 810e45e:	bd80      	pop	{r7, pc}
 810e460:	e000ed04 	.word	0xe000ed04

0810e464 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810e464:	b580      	push	{r7, lr}
 810e466:	b086      	sub	sp, #24
 810e468:	af00      	add	r7, sp, #0
 810e46a:	60f8      	str	r0, [r7, #12]
 810e46c:	60b9      	str	r1, [r7, #8]
 810e46e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810e470:	2300      	movs	r3, #0
 810e472:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810e474:	68fb      	ldr	r3, [r7, #12]
 810e476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e478:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810e47a:	68fb      	ldr	r3, [r7, #12]
 810e47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e47e:	2b00      	cmp	r3, #0
 810e480:	d10d      	bne.n	810e49e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810e482:	68fb      	ldr	r3, [r7, #12]
 810e484:	681b      	ldr	r3, [r3, #0]
 810e486:	2b00      	cmp	r3, #0
 810e488:	d14d      	bne.n	810e526 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810e48a:	68fb      	ldr	r3, [r7, #12]
 810e48c:	689b      	ldr	r3, [r3, #8]
 810e48e:	4618      	mov	r0, r3
 810e490:	f000 ff9e 	bl	810f3d0 <xTaskPriorityDisinherit>
 810e494:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810e496:	68fb      	ldr	r3, [r7, #12]
 810e498:	2200      	movs	r2, #0
 810e49a:	609a      	str	r2, [r3, #8]
 810e49c:	e043      	b.n	810e526 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810e49e:	687b      	ldr	r3, [r7, #4]
 810e4a0:	2b00      	cmp	r3, #0
 810e4a2:	d119      	bne.n	810e4d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810e4a4:	68fb      	ldr	r3, [r7, #12]
 810e4a6:	6858      	ldr	r0, [r3, #4]
 810e4a8:	68fb      	ldr	r3, [r7, #12]
 810e4aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e4ac:	461a      	mov	r2, r3
 810e4ae:	68b9      	ldr	r1, [r7, #8]
 810e4b0:	f001 fbd8 	bl	810fc64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810e4b4:	68fb      	ldr	r3, [r7, #12]
 810e4b6:	685a      	ldr	r2, [r3, #4]
 810e4b8:	68fb      	ldr	r3, [r7, #12]
 810e4ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e4bc:	441a      	add	r2, r3
 810e4be:	68fb      	ldr	r3, [r7, #12]
 810e4c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810e4c2:	68fb      	ldr	r3, [r7, #12]
 810e4c4:	685a      	ldr	r2, [r3, #4]
 810e4c6:	68fb      	ldr	r3, [r7, #12]
 810e4c8:	689b      	ldr	r3, [r3, #8]
 810e4ca:	429a      	cmp	r2, r3
 810e4cc:	d32b      	bcc.n	810e526 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810e4ce:	68fb      	ldr	r3, [r7, #12]
 810e4d0:	681a      	ldr	r2, [r3, #0]
 810e4d2:	68fb      	ldr	r3, [r7, #12]
 810e4d4:	605a      	str	r2, [r3, #4]
 810e4d6:	e026      	b.n	810e526 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810e4d8:	68fb      	ldr	r3, [r7, #12]
 810e4da:	68d8      	ldr	r0, [r3, #12]
 810e4dc:	68fb      	ldr	r3, [r7, #12]
 810e4de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e4e0:	461a      	mov	r2, r3
 810e4e2:	68b9      	ldr	r1, [r7, #8]
 810e4e4:	f001 fbbe 	bl	810fc64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810e4e8:	68fb      	ldr	r3, [r7, #12]
 810e4ea:	68da      	ldr	r2, [r3, #12]
 810e4ec:	68fb      	ldr	r3, [r7, #12]
 810e4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e4f0:	425b      	negs	r3, r3
 810e4f2:	441a      	add	r2, r3
 810e4f4:	68fb      	ldr	r3, [r7, #12]
 810e4f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810e4f8:	68fb      	ldr	r3, [r7, #12]
 810e4fa:	68da      	ldr	r2, [r3, #12]
 810e4fc:	68fb      	ldr	r3, [r7, #12]
 810e4fe:	681b      	ldr	r3, [r3, #0]
 810e500:	429a      	cmp	r2, r3
 810e502:	d207      	bcs.n	810e514 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810e504:	68fb      	ldr	r3, [r7, #12]
 810e506:	689a      	ldr	r2, [r3, #8]
 810e508:	68fb      	ldr	r3, [r7, #12]
 810e50a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e50c:	425b      	negs	r3, r3
 810e50e:	441a      	add	r2, r3
 810e510:	68fb      	ldr	r3, [r7, #12]
 810e512:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810e514:	687b      	ldr	r3, [r7, #4]
 810e516:	2b02      	cmp	r3, #2
 810e518:	d105      	bne.n	810e526 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810e51a:	693b      	ldr	r3, [r7, #16]
 810e51c:	2b00      	cmp	r3, #0
 810e51e:	d002      	beq.n	810e526 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810e520:	693b      	ldr	r3, [r7, #16]
 810e522:	3b01      	subs	r3, #1
 810e524:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810e526:	693b      	ldr	r3, [r7, #16]
 810e528:	1c5a      	adds	r2, r3, #1
 810e52a:	68fb      	ldr	r3, [r7, #12]
 810e52c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810e52e:	697b      	ldr	r3, [r7, #20]
}
 810e530:	4618      	mov	r0, r3
 810e532:	3718      	adds	r7, #24
 810e534:	46bd      	mov	sp, r7
 810e536:	bd80      	pop	{r7, pc}

0810e538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810e538:	b580      	push	{r7, lr}
 810e53a:	b082      	sub	sp, #8
 810e53c:	af00      	add	r7, sp, #0
 810e53e:	6078      	str	r0, [r7, #4]
 810e540:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810e542:	687b      	ldr	r3, [r7, #4]
 810e544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e546:	2b00      	cmp	r3, #0
 810e548:	d018      	beq.n	810e57c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810e54a:	687b      	ldr	r3, [r7, #4]
 810e54c:	68da      	ldr	r2, [r3, #12]
 810e54e:	687b      	ldr	r3, [r7, #4]
 810e550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e552:	441a      	add	r2, r3
 810e554:	687b      	ldr	r3, [r7, #4]
 810e556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810e558:	687b      	ldr	r3, [r7, #4]
 810e55a:	68da      	ldr	r2, [r3, #12]
 810e55c:	687b      	ldr	r3, [r7, #4]
 810e55e:	689b      	ldr	r3, [r3, #8]
 810e560:	429a      	cmp	r2, r3
 810e562:	d303      	bcc.n	810e56c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810e564:	687b      	ldr	r3, [r7, #4]
 810e566:	681a      	ldr	r2, [r3, #0]
 810e568:	687b      	ldr	r3, [r7, #4]
 810e56a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810e56c:	687b      	ldr	r3, [r7, #4]
 810e56e:	68d9      	ldr	r1, [r3, #12]
 810e570:	687b      	ldr	r3, [r7, #4]
 810e572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e574:	461a      	mov	r2, r3
 810e576:	6838      	ldr	r0, [r7, #0]
 810e578:	f001 fb74 	bl	810fc64 <memcpy>
	}
}
 810e57c:	bf00      	nop
 810e57e:	3708      	adds	r7, #8
 810e580:	46bd      	mov	sp, r7
 810e582:	bd80      	pop	{r7, pc}

0810e584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810e584:	b580      	push	{r7, lr}
 810e586:	b084      	sub	sp, #16
 810e588:	af00      	add	r7, sp, #0
 810e58a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810e58c:	f7ff fabc 	bl	810db08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810e590:	687b      	ldr	r3, [r7, #4]
 810e592:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e596:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810e598:	e011      	b.n	810e5be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810e59a:	687b      	ldr	r3, [r7, #4]
 810e59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e59e:	2b00      	cmp	r3, #0
 810e5a0:	d012      	beq.n	810e5c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810e5a2:	687b      	ldr	r3, [r7, #4]
 810e5a4:	3324      	adds	r3, #36	@ 0x24
 810e5a6:	4618      	mov	r0, r3
 810e5a8:	f000 fd34 	bl	810f014 <xTaskRemoveFromEventList>
 810e5ac:	4603      	mov	r3, r0
 810e5ae:	2b00      	cmp	r3, #0
 810e5b0:	d001      	beq.n	810e5b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810e5b2:	f000 fe0d 	bl	810f1d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810e5b6:	7bfb      	ldrb	r3, [r7, #15]
 810e5b8:	3b01      	subs	r3, #1
 810e5ba:	b2db      	uxtb	r3, r3
 810e5bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810e5be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810e5c2:	2b00      	cmp	r3, #0
 810e5c4:	dce9      	bgt.n	810e59a <prvUnlockQueue+0x16>
 810e5c6:	e000      	b.n	810e5ca <prvUnlockQueue+0x46>
					break;
 810e5c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810e5ca:	687b      	ldr	r3, [r7, #4]
 810e5cc:	22ff      	movs	r2, #255	@ 0xff
 810e5ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810e5d2:	f7ff facb 	bl	810db6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810e5d6:	f7ff fa97 	bl	810db08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810e5da:	687b      	ldr	r3, [r7, #4]
 810e5dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e5e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810e5e2:	e011      	b.n	810e608 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e5e4:	687b      	ldr	r3, [r7, #4]
 810e5e6:	691b      	ldr	r3, [r3, #16]
 810e5e8:	2b00      	cmp	r3, #0
 810e5ea:	d012      	beq.n	810e612 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e5ec:	687b      	ldr	r3, [r7, #4]
 810e5ee:	3310      	adds	r3, #16
 810e5f0:	4618      	mov	r0, r3
 810e5f2:	f000 fd0f 	bl	810f014 <xTaskRemoveFromEventList>
 810e5f6:	4603      	mov	r3, r0
 810e5f8:	2b00      	cmp	r3, #0
 810e5fa:	d001      	beq.n	810e600 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810e5fc:	f000 fde8 	bl	810f1d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810e600:	7bbb      	ldrb	r3, [r7, #14]
 810e602:	3b01      	subs	r3, #1
 810e604:	b2db      	uxtb	r3, r3
 810e606:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810e608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810e60c:	2b00      	cmp	r3, #0
 810e60e:	dce9      	bgt.n	810e5e4 <prvUnlockQueue+0x60>
 810e610:	e000      	b.n	810e614 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810e612:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810e614:	687b      	ldr	r3, [r7, #4]
 810e616:	22ff      	movs	r2, #255	@ 0xff
 810e618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810e61c:	f7ff faa6 	bl	810db6c <vPortExitCritical>
}
 810e620:	bf00      	nop
 810e622:	3710      	adds	r7, #16
 810e624:	46bd      	mov	sp, r7
 810e626:	bd80      	pop	{r7, pc}

0810e628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810e628:	b580      	push	{r7, lr}
 810e62a:	b084      	sub	sp, #16
 810e62c:	af00      	add	r7, sp, #0
 810e62e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810e630:	f7ff fa6a 	bl	810db08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810e634:	687b      	ldr	r3, [r7, #4]
 810e636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e638:	2b00      	cmp	r3, #0
 810e63a:	d102      	bne.n	810e642 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810e63c:	2301      	movs	r3, #1
 810e63e:	60fb      	str	r3, [r7, #12]
 810e640:	e001      	b.n	810e646 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810e642:	2300      	movs	r3, #0
 810e644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810e646:	f7ff fa91 	bl	810db6c <vPortExitCritical>

	return xReturn;
 810e64a:	68fb      	ldr	r3, [r7, #12]
}
 810e64c:	4618      	mov	r0, r3
 810e64e:	3710      	adds	r7, #16
 810e650:	46bd      	mov	sp, r7
 810e652:	bd80      	pop	{r7, pc}

0810e654 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810e654:	b580      	push	{r7, lr}
 810e656:	b084      	sub	sp, #16
 810e658:	af00      	add	r7, sp, #0
 810e65a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810e65c:	f7ff fa54 	bl	810db08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810e660:	687b      	ldr	r3, [r7, #4]
 810e662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810e664:	687b      	ldr	r3, [r7, #4]
 810e666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810e668:	429a      	cmp	r2, r3
 810e66a:	d102      	bne.n	810e672 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810e66c:	2301      	movs	r3, #1
 810e66e:	60fb      	str	r3, [r7, #12]
 810e670:	e001      	b.n	810e676 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810e672:	2300      	movs	r3, #0
 810e674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810e676:	f7ff fa79 	bl	810db6c <vPortExitCritical>

	return xReturn;
 810e67a:	68fb      	ldr	r3, [r7, #12]
}
 810e67c:	4618      	mov	r0, r3
 810e67e:	3710      	adds	r7, #16
 810e680:	46bd      	mov	sp, r7
 810e682:	bd80      	pop	{r7, pc}

0810e684 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810e684:	b480      	push	{r7}
 810e686:	b085      	sub	sp, #20
 810e688:	af00      	add	r7, sp, #0
 810e68a:	6078      	str	r0, [r7, #4]
 810e68c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e68e:	2300      	movs	r3, #0
 810e690:	60fb      	str	r3, [r7, #12]
 810e692:	e014      	b.n	810e6be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810e694:	4a0f      	ldr	r2, [pc, #60]	@ (810e6d4 <vQueueAddToRegistry+0x50>)
 810e696:	68fb      	ldr	r3, [r7, #12]
 810e698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810e69c:	2b00      	cmp	r3, #0
 810e69e:	d10b      	bne.n	810e6b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810e6a0:	490c      	ldr	r1, [pc, #48]	@ (810e6d4 <vQueueAddToRegistry+0x50>)
 810e6a2:	68fb      	ldr	r3, [r7, #12]
 810e6a4:	683a      	ldr	r2, [r7, #0]
 810e6a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810e6aa:	4a0a      	ldr	r2, [pc, #40]	@ (810e6d4 <vQueueAddToRegistry+0x50>)
 810e6ac:	68fb      	ldr	r3, [r7, #12]
 810e6ae:	00db      	lsls	r3, r3, #3
 810e6b0:	4413      	add	r3, r2
 810e6b2:	687a      	ldr	r2, [r7, #4]
 810e6b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810e6b6:	e006      	b.n	810e6c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e6b8:	68fb      	ldr	r3, [r7, #12]
 810e6ba:	3301      	adds	r3, #1
 810e6bc:	60fb      	str	r3, [r7, #12]
 810e6be:	68fb      	ldr	r3, [r7, #12]
 810e6c0:	2b07      	cmp	r3, #7
 810e6c2:	d9e7      	bls.n	810e694 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810e6c4:	bf00      	nop
 810e6c6:	bf00      	nop
 810e6c8:	3714      	adds	r7, #20
 810e6ca:	46bd      	mov	sp, r7
 810e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e6d0:	4770      	bx	lr
 810e6d2:	bf00      	nop
 810e6d4:	10004ffc 	.word	0x10004ffc

0810e6d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810e6d8:	b580      	push	{r7, lr}
 810e6da:	b086      	sub	sp, #24
 810e6dc:	af00      	add	r7, sp, #0
 810e6de:	60f8      	str	r0, [r7, #12]
 810e6e0:	60b9      	str	r1, [r7, #8]
 810e6e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810e6e4:	68fb      	ldr	r3, [r7, #12]
 810e6e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810e6e8:	f7ff fa0e 	bl	810db08 <vPortEnterCritical>
 810e6ec:	697b      	ldr	r3, [r7, #20]
 810e6ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e6f2:	b25b      	sxtb	r3, r3
 810e6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e6f8:	d103      	bne.n	810e702 <vQueueWaitForMessageRestricted+0x2a>
 810e6fa:	697b      	ldr	r3, [r7, #20]
 810e6fc:	2200      	movs	r2, #0
 810e6fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810e702:	697b      	ldr	r3, [r7, #20]
 810e704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e708:	b25b      	sxtb	r3, r3
 810e70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e70e:	d103      	bne.n	810e718 <vQueueWaitForMessageRestricted+0x40>
 810e710:	697b      	ldr	r3, [r7, #20]
 810e712:	2200      	movs	r2, #0
 810e714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810e718:	f7ff fa28 	bl	810db6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810e71c:	697b      	ldr	r3, [r7, #20]
 810e71e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e720:	2b00      	cmp	r3, #0
 810e722:	d106      	bne.n	810e732 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810e724:	697b      	ldr	r3, [r7, #20]
 810e726:	3324      	adds	r3, #36	@ 0x24
 810e728:	687a      	ldr	r2, [r7, #4]
 810e72a:	68b9      	ldr	r1, [r7, #8]
 810e72c:	4618      	mov	r0, r3
 810e72e:	f000 fc45 	bl	810efbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810e732:	6978      	ldr	r0, [r7, #20]
 810e734:	f7ff ff26 	bl	810e584 <prvUnlockQueue>
	}
 810e738:	bf00      	nop
 810e73a:	3718      	adds	r7, #24
 810e73c:	46bd      	mov	sp, r7
 810e73e:	bd80      	pop	{r7, pc}

0810e740 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810e740:	b580      	push	{r7, lr}
 810e742:	b08e      	sub	sp, #56	@ 0x38
 810e744:	af04      	add	r7, sp, #16
 810e746:	60f8      	str	r0, [r7, #12]
 810e748:	60b9      	str	r1, [r7, #8]
 810e74a:	607a      	str	r2, [r7, #4]
 810e74c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810e74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e750:	2b00      	cmp	r3, #0
 810e752:	d10b      	bne.n	810e76c <xTaskCreateStatic+0x2c>
	__asm volatile
 810e754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e758:	f383 8811 	msr	BASEPRI, r3
 810e75c:	f3bf 8f6f 	isb	sy
 810e760:	f3bf 8f4f 	dsb	sy
 810e764:	623b      	str	r3, [r7, #32]
}
 810e766:	bf00      	nop
 810e768:	bf00      	nop
 810e76a:	e7fd      	b.n	810e768 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810e76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e76e:	2b00      	cmp	r3, #0
 810e770:	d10b      	bne.n	810e78a <xTaskCreateStatic+0x4a>
	__asm volatile
 810e772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e776:	f383 8811 	msr	BASEPRI, r3
 810e77a:	f3bf 8f6f 	isb	sy
 810e77e:	f3bf 8f4f 	dsb	sy
 810e782:	61fb      	str	r3, [r7, #28]
}
 810e784:	bf00      	nop
 810e786:	bf00      	nop
 810e788:	e7fd      	b.n	810e786 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810e78a:	235c      	movs	r3, #92	@ 0x5c
 810e78c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810e78e:	693b      	ldr	r3, [r7, #16]
 810e790:	2b5c      	cmp	r3, #92	@ 0x5c
 810e792:	d00b      	beq.n	810e7ac <xTaskCreateStatic+0x6c>
	__asm volatile
 810e794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e798:	f383 8811 	msr	BASEPRI, r3
 810e79c:	f3bf 8f6f 	isb	sy
 810e7a0:	f3bf 8f4f 	dsb	sy
 810e7a4:	61bb      	str	r3, [r7, #24]
}
 810e7a6:	bf00      	nop
 810e7a8:	bf00      	nop
 810e7aa:	e7fd      	b.n	810e7a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810e7ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810e7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e7b0:	2b00      	cmp	r3, #0
 810e7b2:	d01e      	beq.n	810e7f2 <xTaskCreateStatic+0xb2>
 810e7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e7b6:	2b00      	cmp	r3, #0
 810e7b8:	d01b      	beq.n	810e7f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810e7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e7bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810e7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810e7c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810e7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7c6:	2202      	movs	r2, #2
 810e7c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810e7cc:	2300      	movs	r3, #0
 810e7ce:	9303      	str	r3, [sp, #12]
 810e7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7d2:	9302      	str	r3, [sp, #8]
 810e7d4:	f107 0314 	add.w	r3, r7, #20
 810e7d8:	9301      	str	r3, [sp, #4]
 810e7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e7dc:	9300      	str	r3, [sp, #0]
 810e7de:	683b      	ldr	r3, [r7, #0]
 810e7e0:	687a      	ldr	r2, [r7, #4]
 810e7e2:	68b9      	ldr	r1, [r7, #8]
 810e7e4:	68f8      	ldr	r0, [r7, #12]
 810e7e6:	f000 f850 	bl	810e88a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810e7ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810e7ec:	f000 f8de 	bl	810e9ac <prvAddNewTaskToReadyList>
 810e7f0:	e001      	b.n	810e7f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810e7f2:	2300      	movs	r3, #0
 810e7f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810e7f6:	697b      	ldr	r3, [r7, #20]
	}
 810e7f8:	4618      	mov	r0, r3
 810e7fa:	3728      	adds	r7, #40	@ 0x28
 810e7fc:	46bd      	mov	sp, r7
 810e7fe:	bd80      	pop	{r7, pc}

0810e800 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810e800:	b580      	push	{r7, lr}
 810e802:	b08c      	sub	sp, #48	@ 0x30
 810e804:	af04      	add	r7, sp, #16
 810e806:	60f8      	str	r0, [r7, #12]
 810e808:	60b9      	str	r1, [r7, #8]
 810e80a:	603b      	str	r3, [r7, #0]
 810e80c:	4613      	mov	r3, r2
 810e80e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810e810:	88fb      	ldrh	r3, [r7, #6]
 810e812:	009b      	lsls	r3, r3, #2
 810e814:	4618      	mov	r0, r3
 810e816:	f7fe fda7 	bl	810d368 <pvPortMalloc>
 810e81a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810e81c:	697b      	ldr	r3, [r7, #20]
 810e81e:	2b00      	cmp	r3, #0
 810e820:	d00e      	beq.n	810e840 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810e822:	205c      	movs	r0, #92	@ 0x5c
 810e824:	f7fe fda0 	bl	810d368 <pvPortMalloc>
 810e828:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810e82a:	69fb      	ldr	r3, [r7, #28]
 810e82c:	2b00      	cmp	r3, #0
 810e82e:	d003      	beq.n	810e838 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810e830:	69fb      	ldr	r3, [r7, #28]
 810e832:	697a      	ldr	r2, [r7, #20]
 810e834:	631a      	str	r2, [r3, #48]	@ 0x30
 810e836:	e005      	b.n	810e844 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810e838:	6978      	ldr	r0, [r7, #20]
 810e83a:	f7fe fe63 	bl	810d504 <vPortFree>
 810e83e:	e001      	b.n	810e844 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810e840:	2300      	movs	r3, #0
 810e842:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810e844:	69fb      	ldr	r3, [r7, #28]
 810e846:	2b00      	cmp	r3, #0
 810e848:	d017      	beq.n	810e87a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810e84a:	69fb      	ldr	r3, [r7, #28]
 810e84c:	2200      	movs	r2, #0
 810e84e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810e852:	88fa      	ldrh	r2, [r7, #6]
 810e854:	2300      	movs	r3, #0
 810e856:	9303      	str	r3, [sp, #12]
 810e858:	69fb      	ldr	r3, [r7, #28]
 810e85a:	9302      	str	r3, [sp, #8]
 810e85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e85e:	9301      	str	r3, [sp, #4]
 810e860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e862:	9300      	str	r3, [sp, #0]
 810e864:	683b      	ldr	r3, [r7, #0]
 810e866:	68b9      	ldr	r1, [r7, #8]
 810e868:	68f8      	ldr	r0, [r7, #12]
 810e86a:	f000 f80e 	bl	810e88a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810e86e:	69f8      	ldr	r0, [r7, #28]
 810e870:	f000 f89c 	bl	810e9ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810e874:	2301      	movs	r3, #1
 810e876:	61bb      	str	r3, [r7, #24]
 810e878:	e002      	b.n	810e880 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810e87a:	f04f 33ff 	mov.w	r3, #4294967295
 810e87e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810e880:	69bb      	ldr	r3, [r7, #24]
	}
 810e882:	4618      	mov	r0, r3
 810e884:	3720      	adds	r7, #32
 810e886:	46bd      	mov	sp, r7
 810e888:	bd80      	pop	{r7, pc}

0810e88a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810e88a:	b580      	push	{r7, lr}
 810e88c:	b088      	sub	sp, #32
 810e88e:	af00      	add	r7, sp, #0
 810e890:	60f8      	str	r0, [r7, #12]
 810e892:	60b9      	str	r1, [r7, #8]
 810e894:	607a      	str	r2, [r7, #4]
 810e896:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810e898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e89a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810e89c:	687b      	ldr	r3, [r7, #4]
 810e89e:	009b      	lsls	r3, r3, #2
 810e8a0:	461a      	mov	r2, r3
 810e8a2:	21a5      	movs	r1, #165	@ 0xa5
 810e8a4:	f001 f9b2 	bl	810fc0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810e8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e8aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810e8ac:	687b      	ldr	r3, [r7, #4]
 810e8ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810e8b2:	3b01      	subs	r3, #1
 810e8b4:	009b      	lsls	r3, r3, #2
 810e8b6:	4413      	add	r3, r2
 810e8b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810e8ba:	69bb      	ldr	r3, [r7, #24]
 810e8bc:	f023 0307 	bic.w	r3, r3, #7
 810e8c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810e8c2:	69bb      	ldr	r3, [r7, #24]
 810e8c4:	f003 0307 	and.w	r3, r3, #7
 810e8c8:	2b00      	cmp	r3, #0
 810e8ca:	d00b      	beq.n	810e8e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810e8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e8d0:	f383 8811 	msr	BASEPRI, r3
 810e8d4:	f3bf 8f6f 	isb	sy
 810e8d8:	f3bf 8f4f 	dsb	sy
 810e8dc:	617b      	str	r3, [r7, #20]
}
 810e8de:	bf00      	nop
 810e8e0:	bf00      	nop
 810e8e2:	e7fd      	b.n	810e8e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810e8e4:	68bb      	ldr	r3, [r7, #8]
 810e8e6:	2b00      	cmp	r3, #0
 810e8e8:	d01f      	beq.n	810e92a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810e8ea:	2300      	movs	r3, #0
 810e8ec:	61fb      	str	r3, [r7, #28]
 810e8ee:	e012      	b.n	810e916 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810e8f0:	68ba      	ldr	r2, [r7, #8]
 810e8f2:	69fb      	ldr	r3, [r7, #28]
 810e8f4:	4413      	add	r3, r2
 810e8f6:	7819      	ldrb	r1, [r3, #0]
 810e8f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e8fa:	69fb      	ldr	r3, [r7, #28]
 810e8fc:	4413      	add	r3, r2
 810e8fe:	3334      	adds	r3, #52	@ 0x34
 810e900:	460a      	mov	r2, r1
 810e902:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810e904:	68ba      	ldr	r2, [r7, #8]
 810e906:	69fb      	ldr	r3, [r7, #28]
 810e908:	4413      	add	r3, r2
 810e90a:	781b      	ldrb	r3, [r3, #0]
 810e90c:	2b00      	cmp	r3, #0
 810e90e:	d006      	beq.n	810e91e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810e910:	69fb      	ldr	r3, [r7, #28]
 810e912:	3301      	adds	r3, #1
 810e914:	61fb      	str	r3, [r7, #28]
 810e916:	69fb      	ldr	r3, [r7, #28]
 810e918:	2b0f      	cmp	r3, #15
 810e91a:	d9e9      	bls.n	810e8f0 <prvInitialiseNewTask+0x66>
 810e91c:	e000      	b.n	810e920 <prvInitialiseNewTask+0x96>
			{
				break;
 810e91e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810e920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e922:	2200      	movs	r2, #0
 810e924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810e928:	e003      	b.n	810e932 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810e92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e92c:	2200      	movs	r2, #0
 810e92e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810e932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e934:	2b37      	cmp	r3, #55	@ 0x37
 810e936:	d901      	bls.n	810e93c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810e938:	2337      	movs	r3, #55	@ 0x37
 810e93a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810e93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e93e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810e940:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810e942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810e946:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810e948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e94a:	2200      	movs	r2, #0
 810e94c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810e94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e950:	3304      	adds	r3, #4
 810e952:	4618      	mov	r0, r3
 810e954:	f7fe ff16 	bl	810d784 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810e958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e95a:	3318      	adds	r3, #24
 810e95c:	4618      	mov	r0, r3
 810e95e:	f7fe ff11 	bl	810d784 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810e962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e966:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e96a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810e96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e970:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810e972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e976:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810e978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e97a:	2200      	movs	r2, #0
 810e97c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810e97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e980:	2200      	movs	r2, #0
 810e982:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810e986:	683a      	ldr	r2, [r7, #0]
 810e988:	68f9      	ldr	r1, [r7, #12]
 810e98a:	69b8      	ldr	r0, [r7, #24]
 810e98c:	f7fe ff8e 	bl	810d8ac <pxPortInitialiseStack>
 810e990:	4602      	mov	r2, r0
 810e992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e994:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810e996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e998:	2b00      	cmp	r3, #0
 810e99a:	d002      	beq.n	810e9a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810e99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e99e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e9a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810e9a2:	bf00      	nop
 810e9a4:	3720      	adds	r7, #32
 810e9a6:	46bd      	mov	sp, r7
 810e9a8:	bd80      	pop	{r7, pc}
	...

0810e9ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810e9ac:	b580      	push	{r7, lr}
 810e9ae:	b082      	sub	sp, #8
 810e9b0:	af00      	add	r7, sp, #0
 810e9b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810e9b4:	f7ff f8a8 	bl	810db08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810e9b8:	4b2d      	ldr	r3, [pc, #180]	@ (810ea70 <prvAddNewTaskToReadyList+0xc4>)
 810e9ba:	681b      	ldr	r3, [r3, #0]
 810e9bc:	3301      	adds	r3, #1
 810e9be:	4a2c      	ldr	r2, [pc, #176]	@ (810ea70 <prvAddNewTaskToReadyList+0xc4>)
 810e9c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810e9c2:	4b2c      	ldr	r3, [pc, #176]	@ (810ea74 <prvAddNewTaskToReadyList+0xc8>)
 810e9c4:	681b      	ldr	r3, [r3, #0]
 810e9c6:	2b00      	cmp	r3, #0
 810e9c8:	d109      	bne.n	810e9de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810e9ca:	4a2a      	ldr	r2, [pc, #168]	@ (810ea74 <prvAddNewTaskToReadyList+0xc8>)
 810e9cc:	687b      	ldr	r3, [r7, #4]
 810e9ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810e9d0:	4b27      	ldr	r3, [pc, #156]	@ (810ea70 <prvAddNewTaskToReadyList+0xc4>)
 810e9d2:	681b      	ldr	r3, [r3, #0]
 810e9d4:	2b01      	cmp	r3, #1
 810e9d6:	d110      	bne.n	810e9fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810e9d8:	f000 fc1e 	bl	810f218 <prvInitialiseTaskLists>
 810e9dc:	e00d      	b.n	810e9fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810e9de:	4b26      	ldr	r3, [pc, #152]	@ (810ea78 <prvAddNewTaskToReadyList+0xcc>)
 810e9e0:	681b      	ldr	r3, [r3, #0]
 810e9e2:	2b00      	cmp	r3, #0
 810e9e4:	d109      	bne.n	810e9fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810e9e6:	4b23      	ldr	r3, [pc, #140]	@ (810ea74 <prvAddNewTaskToReadyList+0xc8>)
 810e9e8:	681b      	ldr	r3, [r3, #0]
 810e9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e9ec:	687b      	ldr	r3, [r7, #4]
 810e9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e9f0:	429a      	cmp	r2, r3
 810e9f2:	d802      	bhi.n	810e9fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810e9f4:	4a1f      	ldr	r2, [pc, #124]	@ (810ea74 <prvAddNewTaskToReadyList+0xc8>)
 810e9f6:	687b      	ldr	r3, [r7, #4]
 810e9f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810e9fa:	4b20      	ldr	r3, [pc, #128]	@ (810ea7c <prvAddNewTaskToReadyList+0xd0>)
 810e9fc:	681b      	ldr	r3, [r3, #0]
 810e9fe:	3301      	adds	r3, #1
 810ea00:	4a1e      	ldr	r2, [pc, #120]	@ (810ea7c <prvAddNewTaskToReadyList+0xd0>)
 810ea02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810ea04:	4b1d      	ldr	r3, [pc, #116]	@ (810ea7c <prvAddNewTaskToReadyList+0xd0>)
 810ea06:	681a      	ldr	r2, [r3, #0]
 810ea08:	687b      	ldr	r3, [r7, #4]
 810ea0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810ea0c:	687b      	ldr	r3, [r7, #4]
 810ea0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ea10:	4b1b      	ldr	r3, [pc, #108]	@ (810ea80 <prvAddNewTaskToReadyList+0xd4>)
 810ea12:	681b      	ldr	r3, [r3, #0]
 810ea14:	429a      	cmp	r2, r3
 810ea16:	d903      	bls.n	810ea20 <prvAddNewTaskToReadyList+0x74>
 810ea18:	687b      	ldr	r3, [r7, #4]
 810ea1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ea1c:	4a18      	ldr	r2, [pc, #96]	@ (810ea80 <prvAddNewTaskToReadyList+0xd4>)
 810ea1e:	6013      	str	r3, [r2, #0]
 810ea20:	687b      	ldr	r3, [r7, #4]
 810ea22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ea24:	4613      	mov	r3, r2
 810ea26:	009b      	lsls	r3, r3, #2
 810ea28:	4413      	add	r3, r2
 810ea2a:	009b      	lsls	r3, r3, #2
 810ea2c:	4a15      	ldr	r2, [pc, #84]	@ (810ea84 <prvAddNewTaskToReadyList+0xd8>)
 810ea2e:	441a      	add	r2, r3
 810ea30:	687b      	ldr	r3, [r7, #4]
 810ea32:	3304      	adds	r3, #4
 810ea34:	4619      	mov	r1, r3
 810ea36:	4610      	mov	r0, r2
 810ea38:	f7fe feb1 	bl	810d79e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810ea3c:	f7ff f896 	bl	810db6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810ea40:	4b0d      	ldr	r3, [pc, #52]	@ (810ea78 <prvAddNewTaskToReadyList+0xcc>)
 810ea42:	681b      	ldr	r3, [r3, #0]
 810ea44:	2b00      	cmp	r3, #0
 810ea46:	d00e      	beq.n	810ea66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810ea48:	4b0a      	ldr	r3, [pc, #40]	@ (810ea74 <prvAddNewTaskToReadyList+0xc8>)
 810ea4a:	681b      	ldr	r3, [r3, #0]
 810ea4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ea4e:	687b      	ldr	r3, [r7, #4]
 810ea50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ea52:	429a      	cmp	r2, r3
 810ea54:	d207      	bcs.n	810ea66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810ea56:	4b0c      	ldr	r3, [pc, #48]	@ (810ea88 <prvAddNewTaskToReadyList+0xdc>)
 810ea58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ea5c:	601a      	str	r2, [r3, #0]
 810ea5e:	f3bf 8f4f 	dsb	sy
 810ea62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810ea66:	bf00      	nop
 810ea68:	3708      	adds	r7, #8
 810ea6a:	46bd      	mov	sp, r7
 810ea6c:	bd80      	pop	{r7, pc}
 810ea6e:	bf00      	nop
 810ea70:	10005510 	.word	0x10005510
 810ea74:	1000503c 	.word	0x1000503c
 810ea78:	1000551c 	.word	0x1000551c
 810ea7c:	1000552c 	.word	0x1000552c
 810ea80:	10005518 	.word	0x10005518
 810ea84:	10005040 	.word	0x10005040
 810ea88:	e000ed04 	.word	0xe000ed04

0810ea8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810ea8c:	b580      	push	{r7, lr}
 810ea8e:	b084      	sub	sp, #16
 810ea90:	af00      	add	r7, sp, #0
 810ea92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810ea94:	2300      	movs	r3, #0
 810ea96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810ea98:	687b      	ldr	r3, [r7, #4]
 810ea9a:	2b00      	cmp	r3, #0
 810ea9c:	d018      	beq.n	810ead0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810ea9e:	4b14      	ldr	r3, [pc, #80]	@ (810eaf0 <vTaskDelay+0x64>)
 810eaa0:	681b      	ldr	r3, [r3, #0]
 810eaa2:	2b00      	cmp	r3, #0
 810eaa4:	d00b      	beq.n	810eabe <vTaskDelay+0x32>
	__asm volatile
 810eaa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eaaa:	f383 8811 	msr	BASEPRI, r3
 810eaae:	f3bf 8f6f 	isb	sy
 810eab2:	f3bf 8f4f 	dsb	sy
 810eab6:	60bb      	str	r3, [r7, #8]
}
 810eab8:	bf00      	nop
 810eaba:	bf00      	nop
 810eabc:	e7fd      	b.n	810eaba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810eabe:	f000 f883 	bl	810ebc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810eac2:	2100      	movs	r1, #0
 810eac4:	6878      	ldr	r0, [r7, #4]
 810eac6:	f000 fcf3 	bl	810f4b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810eaca:	f000 f88b 	bl	810ebe4 <xTaskResumeAll>
 810eace:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810ead0:	68fb      	ldr	r3, [r7, #12]
 810ead2:	2b00      	cmp	r3, #0
 810ead4:	d107      	bne.n	810eae6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810ead6:	4b07      	ldr	r3, [pc, #28]	@ (810eaf4 <vTaskDelay+0x68>)
 810ead8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810eadc:	601a      	str	r2, [r3, #0]
 810eade:	f3bf 8f4f 	dsb	sy
 810eae2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810eae6:	bf00      	nop
 810eae8:	3710      	adds	r7, #16
 810eaea:	46bd      	mov	sp, r7
 810eaec:	bd80      	pop	{r7, pc}
 810eaee:	bf00      	nop
 810eaf0:	10005538 	.word	0x10005538
 810eaf4:	e000ed04 	.word	0xe000ed04

0810eaf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810eaf8:	b580      	push	{r7, lr}
 810eafa:	b08a      	sub	sp, #40	@ 0x28
 810eafc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810eafe:	2300      	movs	r3, #0
 810eb00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810eb02:	2300      	movs	r3, #0
 810eb04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810eb06:	463a      	mov	r2, r7
 810eb08:	1d39      	adds	r1, r7, #4
 810eb0a:	f107 0308 	add.w	r3, r7, #8
 810eb0e:	4618      	mov	r0, r3
 810eb10:	f7fe fbf6 	bl	810d300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810eb14:	6839      	ldr	r1, [r7, #0]
 810eb16:	687b      	ldr	r3, [r7, #4]
 810eb18:	68ba      	ldr	r2, [r7, #8]
 810eb1a:	9202      	str	r2, [sp, #8]
 810eb1c:	9301      	str	r3, [sp, #4]
 810eb1e:	2300      	movs	r3, #0
 810eb20:	9300      	str	r3, [sp, #0]
 810eb22:	2300      	movs	r3, #0
 810eb24:	460a      	mov	r2, r1
 810eb26:	4922      	ldr	r1, [pc, #136]	@ (810ebb0 <vTaskStartScheduler+0xb8>)
 810eb28:	4822      	ldr	r0, [pc, #136]	@ (810ebb4 <vTaskStartScheduler+0xbc>)
 810eb2a:	f7ff fe09 	bl	810e740 <xTaskCreateStatic>
 810eb2e:	4603      	mov	r3, r0
 810eb30:	4a21      	ldr	r2, [pc, #132]	@ (810ebb8 <vTaskStartScheduler+0xc0>)
 810eb32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810eb34:	4b20      	ldr	r3, [pc, #128]	@ (810ebb8 <vTaskStartScheduler+0xc0>)
 810eb36:	681b      	ldr	r3, [r3, #0]
 810eb38:	2b00      	cmp	r3, #0
 810eb3a:	d002      	beq.n	810eb42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810eb3c:	2301      	movs	r3, #1
 810eb3e:	617b      	str	r3, [r7, #20]
 810eb40:	e001      	b.n	810eb46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810eb42:	2300      	movs	r3, #0
 810eb44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810eb46:	697b      	ldr	r3, [r7, #20]
 810eb48:	2b01      	cmp	r3, #1
 810eb4a:	d102      	bne.n	810eb52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810eb4c:	f000 fd04 	bl	810f558 <xTimerCreateTimerTask>
 810eb50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810eb52:	697b      	ldr	r3, [r7, #20]
 810eb54:	2b01      	cmp	r3, #1
 810eb56:	d116      	bne.n	810eb86 <vTaskStartScheduler+0x8e>
	__asm volatile
 810eb58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb5c:	f383 8811 	msr	BASEPRI, r3
 810eb60:	f3bf 8f6f 	isb	sy
 810eb64:	f3bf 8f4f 	dsb	sy
 810eb68:	613b      	str	r3, [r7, #16]
}
 810eb6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810eb6c:	4b13      	ldr	r3, [pc, #76]	@ (810ebbc <vTaskStartScheduler+0xc4>)
 810eb6e:	f04f 32ff 	mov.w	r2, #4294967295
 810eb72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810eb74:	4b12      	ldr	r3, [pc, #72]	@ (810ebc0 <vTaskStartScheduler+0xc8>)
 810eb76:	2201      	movs	r2, #1
 810eb78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810eb7a:	4b12      	ldr	r3, [pc, #72]	@ (810ebc4 <vTaskStartScheduler+0xcc>)
 810eb7c:	2200      	movs	r2, #0
 810eb7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810eb80:	f7fe ff1e 	bl	810d9c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810eb84:	e00f      	b.n	810eba6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810eb86:	697b      	ldr	r3, [r7, #20]
 810eb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 810eb8c:	d10b      	bne.n	810eba6 <vTaskStartScheduler+0xae>
	__asm volatile
 810eb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb92:	f383 8811 	msr	BASEPRI, r3
 810eb96:	f3bf 8f6f 	isb	sy
 810eb9a:	f3bf 8f4f 	dsb	sy
 810eb9e:	60fb      	str	r3, [r7, #12]
}
 810eba0:	bf00      	nop
 810eba2:	bf00      	nop
 810eba4:	e7fd      	b.n	810eba2 <vTaskStartScheduler+0xaa>
}
 810eba6:	bf00      	nop
 810eba8:	3718      	adds	r7, #24
 810ebaa:	46bd      	mov	sp, r7
 810ebac:	bd80      	pop	{r7, pc}
 810ebae:	bf00      	nop
 810ebb0:	0810fca4 	.word	0x0810fca4
 810ebb4:	0810f1e9 	.word	0x0810f1e9
 810ebb8:	10005534 	.word	0x10005534
 810ebbc:	10005530 	.word	0x10005530
 810ebc0:	1000551c 	.word	0x1000551c
 810ebc4:	10005514 	.word	0x10005514

0810ebc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810ebc8:	b480      	push	{r7}
 810ebca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810ebcc:	4b04      	ldr	r3, [pc, #16]	@ (810ebe0 <vTaskSuspendAll+0x18>)
 810ebce:	681b      	ldr	r3, [r3, #0]
 810ebd0:	3301      	adds	r3, #1
 810ebd2:	4a03      	ldr	r2, [pc, #12]	@ (810ebe0 <vTaskSuspendAll+0x18>)
 810ebd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810ebd6:	bf00      	nop
 810ebd8:	46bd      	mov	sp, r7
 810ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ebde:	4770      	bx	lr
 810ebe0:	10005538 	.word	0x10005538

0810ebe4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810ebe4:	b580      	push	{r7, lr}
 810ebe6:	b084      	sub	sp, #16
 810ebe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810ebea:	2300      	movs	r3, #0
 810ebec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810ebee:	2300      	movs	r3, #0
 810ebf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810ebf2:	4b42      	ldr	r3, [pc, #264]	@ (810ecfc <xTaskResumeAll+0x118>)
 810ebf4:	681b      	ldr	r3, [r3, #0]
 810ebf6:	2b00      	cmp	r3, #0
 810ebf8:	d10b      	bne.n	810ec12 <xTaskResumeAll+0x2e>
	__asm volatile
 810ebfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ebfe:	f383 8811 	msr	BASEPRI, r3
 810ec02:	f3bf 8f6f 	isb	sy
 810ec06:	f3bf 8f4f 	dsb	sy
 810ec0a:	603b      	str	r3, [r7, #0]
}
 810ec0c:	bf00      	nop
 810ec0e:	bf00      	nop
 810ec10:	e7fd      	b.n	810ec0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810ec12:	f7fe ff79 	bl	810db08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810ec16:	4b39      	ldr	r3, [pc, #228]	@ (810ecfc <xTaskResumeAll+0x118>)
 810ec18:	681b      	ldr	r3, [r3, #0]
 810ec1a:	3b01      	subs	r3, #1
 810ec1c:	4a37      	ldr	r2, [pc, #220]	@ (810ecfc <xTaskResumeAll+0x118>)
 810ec1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ec20:	4b36      	ldr	r3, [pc, #216]	@ (810ecfc <xTaskResumeAll+0x118>)
 810ec22:	681b      	ldr	r3, [r3, #0]
 810ec24:	2b00      	cmp	r3, #0
 810ec26:	d162      	bne.n	810ecee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810ec28:	4b35      	ldr	r3, [pc, #212]	@ (810ed00 <xTaskResumeAll+0x11c>)
 810ec2a:	681b      	ldr	r3, [r3, #0]
 810ec2c:	2b00      	cmp	r3, #0
 810ec2e:	d05e      	beq.n	810ecee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810ec30:	e02f      	b.n	810ec92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ec32:	4b34      	ldr	r3, [pc, #208]	@ (810ed04 <xTaskResumeAll+0x120>)
 810ec34:	68db      	ldr	r3, [r3, #12]
 810ec36:	68db      	ldr	r3, [r3, #12]
 810ec38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810ec3a:	68fb      	ldr	r3, [r7, #12]
 810ec3c:	3318      	adds	r3, #24
 810ec3e:	4618      	mov	r0, r3
 810ec40:	f7fe fe0a 	bl	810d858 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ec44:	68fb      	ldr	r3, [r7, #12]
 810ec46:	3304      	adds	r3, #4
 810ec48:	4618      	mov	r0, r3
 810ec4a:	f7fe fe05 	bl	810d858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810ec4e:	68fb      	ldr	r3, [r7, #12]
 810ec50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ec52:	4b2d      	ldr	r3, [pc, #180]	@ (810ed08 <xTaskResumeAll+0x124>)
 810ec54:	681b      	ldr	r3, [r3, #0]
 810ec56:	429a      	cmp	r2, r3
 810ec58:	d903      	bls.n	810ec62 <xTaskResumeAll+0x7e>
 810ec5a:	68fb      	ldr	r3, [r7, #12]
 810ec5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ec5e:	4a2a      	ldr	r2, [pc, #168]	@ (810ed08 <xTaskResumeAll+0x124>)
 810ec60:	6013      	str	r3, [r2, #0]
 810ec62:	68fb      	ldr	r3, [r7, #12]
 810ec64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ec66:	4613      	mov	r3, r2
 810ec68:	009b      	lsls	r3, r3, #2
 810ec6a:	4413      	add	r3, r2
 810ec6c:	009b      	lsls	r3, r3, #2
 810ec6e:	4a27      	ldr	r2, [pc, #156]	@ (810ed0c <xTaskResumeAll+0x128>)
 810ec70:	441a      	add	r2, r3
 810ec72:	68fb      	ldr	r3, [r7, #12]
 810ec74:	3304      	adds	r3, #4
 810ec76:	4619      	mov	r1, r3
 810ec78:	4610      	mov	r0, r2
 810ec7a:	f7fe fd90 	bl	810d79e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810ec7e:	68fb      	ldr	r3, [r7, #12]
 810ec80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ec82:	4b23      	ldr	r3, [pc, #140]	@ (810ed10 <xTaskResumeAll+0x12c>)
 810ec84:	681b      	ldr	r3, [r3, #0]
 810ec86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ec88:	429a      	cmp	r2, r3
 810ec8a:	d302      	bcc.n	810ec92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810ec8c:	4b21      	ldr	r3, [pc, #132]	@ (810ed14 <xTaskResumeAll+0x130>)
 810ec8e:	2201      	movs	r2, #1
 810ec90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810ec92:	4b1c      	ldr	r3, [pc, #112]	@ (810ed04 <xTaskResumeAll+0x120>)
 810ec94:	681b      	ldr	r3, [r3, #0]
 810ec96:	2b00      	cmp	r3, #0
 810ec98:	d1cb      	bne.n	810ec32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810ec9a:	68fb      	ldr	r3, [r7, #12]
 810ec9c:	2b00      	cmp	r3, #0
 810ec9e:	d001      	beq.n	810eca4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810eca0:	f000 fb58 	bl	810f354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810eca4:	4b1c      	ldr	r3, [pc, #112]	@ (810ed18 <xTaskResumeAll+0x134>)
 810eca6:	681b      	ldr	r3, [r3, #0]
 810eca8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810ecaa:	687b      	ldr	r3, [r7, #4]
 810ecac:	2b00      	cmp	r3, #0
 810ecae:	d010      	beq.n	810ecd2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810ecb0:	f000 f846 	bl	810ed40 <xTaskIncrementTick>
 810ecb4:	4603      	mov	r3, r0
 810ecb6:	2b00      	cmp	r3, #0
 810ecb8:	d002      	beq.n	810ecc0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810ecba:	4b16      	ldr	r3, [pc, #88]	@ (810ed14 <xTaskResumeAll+0x130>)
 810ecbc:	2201      	movs	r2, #1
 810ecbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810ecc0:	687b      	ldr	r3, [r7, #4]
 810ecc2:	3b01      	subs	r3, #1
 810ecc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810ecc6:	687b      	ldr	r3, [r7, #4]
 810ecc8:	2b00      	cmp	r3, #0
 810ecca:	d1f1      	bne.n	810ecb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810eccc:	4b12      	ldr	r3, [pc, #72]	@ (810ed18 <xTaskResumeAll+0x134>)
 810ecce:	2200      	movs	r2, #0
 810ecd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810ecd2:	4b10      	ldr	r3, [pc, #64]	@ (810ed14 <xTaskResumeAll+0x130>)
 810ecd4:	681b      	ldr	r3, [r3, #0]
 810ecd6:	2b00      	cmp	r3, #0
 810ecd8:	d009      	beq.n	810ecee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810ecda:	2301      	movs	r3, #1
 810ecdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810ecde:	4b0f      	ldr	r3, [pc, #60]	@ (810ed1c <xTaskResumeAll+0x138>)
 810ece0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ece4:	601a      	str	r2, [r3, #0]
 810ece6:	f3bf 8f4f 	dsb	sy
 810ecea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810ecee:	f7fe ff3d 	bl	810db6c <vPortExitCritical>

	return xAlreadyYielded;
 810ecf2:	68bb      	ldr	r3, [r7, #8]
}
 810ecf4:	4618      	mov	r0, r3
 810ecf6:	3710      	adds	r7, #16
 810ecf8:	46bd      	mov	sp, r7
 810ecfa:	bd80      	pop	{r7, pc}
 810ecfc:	10005538 	.word	0x10005538
 810ed00:	10005510 	.word	0x10005510
 810ed04:	100054d0 	.word	0x100054d0
 810ed08:	10005518 	.word	0x10005518
 810ed0c:	10005040 	.word	0x10005040
 810ed10:	1000503c 	.word	0x1000503c
 810ed14:	10005524 	.word	0x10005524
 810ed18:	10005520 	.word	0x10005520
 810ed1c:	e000ed04 	.word	0xe000ed04

0810ed20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810ed20:	b480      	push	{r7}
 810ed22:	b083      	sub	sp, #12
 810ed24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810ed26:	4b05      	ldr	r3, [pc, #20]	@ (810ed3c <xTaskGetTickCount+0x1c>)
 810ed28:	681b      	ldr	r3, [r3, #0]
 810ed2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810ed2c:	687b      	ldr	r3, [r7, #4]
}
 810ed2e:	4618      	mov	r0, r3
 810ed30:	370c      	adds	r7, #12
 810ed32:	46bd      	mov	sp, r7
 810ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed38:	4770      	bx	lr
 810ed3a:	bf00      	nop
 810ed3c:	10005514 	.word	0x10005514

0810ed40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810ed40:	b580      	push	{r7, lr}
 810ed42:	b086      	sub	sp, #24
 810ed44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810ed46:	2300      	movs	r3, #0
 810ed48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ed4a:	4b4f      	ldr	r3, [pc, #316]	@ (810ee88 <xTaskIncrementTick+0x148>)
 810ed4c:	681b      	ldr	r3, [r3, #0]
 810ed4e:	2b00      	cmp	r3, #0
 810ed50:	f040 8090 	bne.w	810ee74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810ed54:	4b4d      	ldr	r3, [pc, #308]	@ (810ee8c <xTaskIncrementTick+0x14c>)
 810ed56:	681b      	ldr	r3, [r3, #0]
 810ed58:	3301      	adds	r3, #1
 810ed5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810ed5c:	4a4b      	ldr	r2, [pc, #300]	@ (810ee8c <xTaskIncrementTick+0x14c>)
 810ed5e:	693b      	ldr	r3, [r7, #16]
 810ed60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810ed62:	693b      	ldr	r3, [r7, #16]
 810ed64:	2b00      	cmp	r3, #0
 810ed66:	d121      	bne.n	810edac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810ed68:	4b49      	ldr	r3, [pc, #292]	@ (810ee90 <xTaskIncrementTick+0x150>)
 810ed6a:	681b      	ldr	r3, [r3, #0]
 810ed6c:	681b      	ldr	r3, [r3, #0]
 810ed6e:	2b00      	cmp	r3, #0
 810ed70:	d00b      	beq.n	810ed8a <xTaskIncrementTick+0x4a>
	__asm volatile
 810ed72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ed76:	f383 8811 	msr	BASEPRI, r3
 810ed7a:	f3bf 8f6f 	isb	sy
 810ed7e:	f3bf 8f4f 	dsb	sy
 810ed82:	603b      	str	r3, [r7, #0]
}
 810ed84:	bf00      	nop
 810ed86:	bf00      	nop
 810ed88:	e7fd      	b.n	810ed86 <xTaskIncrementTick+0x46>
 810ed8a:	4b41      	ldr	r3, [pc, #260]	@ (810ee90 <xTaskIncrementTick+0x150>)
 810ed8c:	681b      	ldr	r3, [r3, #0]
 810ed8e:	60fb      	str	r3, [r7, #12]
 810ed90:	4b40      	ldr	r3, [pc, #256]	@ (810ee94 <xTaskIncrementTick+0x154>)
 810ed92:	681b      	ldr	r3, [r3, #0]
 810ed94:	4a3e      	ldr	r2, [pc, #248]	@ (810ee90 <xTaskIncrementTick+0x150>)
 810ed96:	6013      	str	r3, [r2, #0]
 810ed98:	4a3e      	ldr	r2, [pc, #248]	@ (810ee94 <xTaskIncrementTick+0x154>)
 810ed9a:	68fb      	ldr	r3, [r7, #12]
 810ed9c:	6013      	str	r3, [r2, #0]
 810ed9e:	4b3e      	ldr	r3, [pc, #248]	@ (810ee98 <xTaskIncrementTick+0x158>)
 810eda0:	681b      	ldr	r3, [r3, #0]
 810eda2:	3301      	adds	r3, #1
 810eda4:	4a3c      	ldr	r2, [pc, #240]	@ (810ee98 <xTaskIncrementTick+0x158>)
 810eda6:	6013      	str	r3, [r2, #0]
 810eda8:	f000 fad4 	bl	810f354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810edac:	4b3b      	ldr	r3, [pc, #236]	@ (810ee9c <xTaskIncrementTick+0x15c>)
 810edae:	681b      	ldr	r3, [r3, #0]
 810edb0:	693a      	ldr	r2, [r7, #16]
 810edb2:	429a      	cmp	r2, r3
 810edb4:	d349      	bcc.n	810ee4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810edb6:	4b36      	ldr	r3, [pc, #216]	@ (810ee90 <xTaskIncrementTick+0x150>)
 810edb8:	681b      	ldr	r3, [r3, #0]
 810edba:	681b      	ldr	r3, [r3, #0]
 810edbc:	2b00      	cmp	r3, #0
 810edbe:	d104      	bne.n	810edca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810edc0:	4b36      	ldr	r3, [pc, #216]	@ (810ee9c <xTaskIncrementTick+0x15c>)
 810edc2:	f04f 32ff 	mov.w	r2, #4294967295
 810edc6:	601a      	str	r2, [r3, #0]
					break;
 810edc8:	e03f      	b.n	810ee4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810edca:	4b31      	ldr	r3, [pc, #196]	@ (810ee90 <xTaskIncrementTick+0x150>)
 810edcc:	681b      	ldr	r3, [r3, #0]
 810edce:	68db      	ldr	r3, [r3, #12]
 810edd0:	68db      	ldr	r3, [r3, #12]
 810edd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810edd4:	68bb      	ldr	r3, [r7, #8]
 810edd6:	685b      	ldr	r3, [r3, #4]
 810edd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810edda:	693a      	ldr	r2, [r7, #16]
 810eddc:	687b      	ldr	r3, [r7, #4]
 810edde:	429a      	cmp	r2, r3
 810ede0:	d203      	bcs.n	810edea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810ede2:	4a2e      	ldr	r2, [pc, #184]	@ (810ee9c <xTaskIncrementTick+0x15c>)
 810ede4:	687b      	ldr	r3, [r7, #4]
 810ede6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810ede8:	e02f      	b.n	810ee4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810edea:	68bb      	ldr	r3, [r7, #8]
 810edec:	3304      	adds	r3, #4
 810edee:	4618      	mov	r0, r3
 810edf0:	f7fe fd32 	bl	810d858 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810edf4:	68bb      	ldr	r3, [r7, #8]
 810edf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810edf8:	2b00      	cmp	r3, #0
 810edfa:	d004      	beq.n	810ee06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810edfc:	68bb      	ldr	r3, [r7, #8]
 810edfe:	3318      	adds	r3, #24
 810ee00:	4618      	mov	r0, r3
 810ee02:	f7fe fd29 	bl	810d858 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810ee06:	68bb      	ldr	r3, [r7, #8]
 810ee08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ee0a:	4b25      	ldr	r3, [pc, #148]	@ (810eea0 <xTaskIncrementTick+0x160>)
 810ee0c:	681b      	ldr	r3, [r3, #0]
 810ee0e:	429a      	cmp	r2, r3
 810ee10:	d903      	bls.n	810ee1a <xTaskIncrementTick+0xda>
 810ee12:	68bb      	ldr	r3, [r7, #8]
 810ee14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ee16:	4a22      	ldr	r2, [pc, #136]	@ (810eea0 <xTaskIncrementTick+0x160>)
 810ee18:	6013      	str	r3, [r2, #0]
 810ee1a:	68bb      	ldr	r3, [r7, #8]
 810ee1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ee1e:	4613      	mov	r3, r2
 810ee20:	009b      	lsls	r3, r3, #2
 810ee22:	4413      	add	r3, r2
 810ee24:	009b      	lsls	r3, r3, #2
 810ee26:	4a1f      	ldr	r2, [pc, #124]	@ (810eea4 <xTaskIncrementTick+0x164>)
 810ee28:	441a      	add	r2, r3
 810ee2a:	68bb      	ldr	r3, [r7, #8]
 810ee2c:	3304      	adds	r3, #4
 810ee2e:	4619      	mov	r1, r3
 810ee30:	4610      	mov	r0, r2
 810ee32:	f7fe fcb4 	bl	810d79e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810ee36:	68bb      	ldr	r3, [r7, #8]
 810ee38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ee3a:	4b1b      	ldr	r3, [pc, #108]	@ (810eea8 <xTaskIncrementTick+0x168>)
 810ee3c:	681b      	ldr	r3, [r3, #0]
 810ee3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ee40:	429a      	cmp	r2, r3
 810ee42:	d3b8      	bcc.n	810edb6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810ee44:	2301      	movs	r3, #1
 810ee46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810ee48:	e7b5      	b.n	810edb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810ee4a:	4b17      	ldr	r3, [pc, #92]	@ (810eea8 <xTaskIncrementTick+0x168>)
 810ee4c:	681b      	ldr	r3, [r3, #0]
 810ee4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ee50:	4914      	ldr	r1, [pc, #80]	@ (810eea4 <xTaskIncrementTick+0x164>)
 810ee52:	4613      	mov	r3, r2
 810ee54:	009b      	lsls	r3, r3, #2
 810ee56:	4413      	add	r3, r2
 810ee58:	009b      	lsls	r3, r3, #2
 810ee5a:	440b      	add	r3, r1
 810ee5c:	681b      	ldr	r3, [r3, #0]
 810ee5e:	2b01      	cmp	r3, #1
 810ee60:	d901      	bls.n	810ee66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810ee62:	2301      	movs	r3, #1
 810ee64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810ee66:	4b11      	ldr	r3, [pc, #68]	@ (810eeac <xTaskIncrementTick+0x16c>)
 810ee68:	681b      	ldr	r3, [r3, #0]
 810ee6a:	2b00      	cmp	r3, #0
 810ee6c:	d007      	beq.n	810ee7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810ee6e:	2301      	movs	r3, #1
 810ee70:	617b      	str	r3, [r7, #20]
 810ee72:	e004      	b.n	810ee7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810ee74:	4b0e      	ldr	r3, [pc, #56]	@ (810eeb0 <xTaskIncrementTick+0x170>)
 810ee76:	681b      	ldr	r3, [r3, #0]
 810ee78:	3301      	adds	r3, #1
 810ee7a:	4a0d      	ldr	r2, [pc, #52]	@ (810eeb0 <xTaskIncrementTick+0x170>)
 810ee7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810ee7e:	697b      	ldr	r3, [r7, #20]
}
 810ee80:	4618      	mov	r0, r3
 810ee82:	3718      	adds	r7, #24
 810ee84:	46bd      	mov	sp, r7
 810ee86:	bd80      	pop	{r7, pc}
 810ee88:	10005538 	.word	0x10005538
 810ee8c:	10005514 	.word	0x10005514
 810ee90:	100054c8 	.word	0x100054c8
 810ee94:	100054cc 	.word	0x100054cc
 810ee98:	10005528 	.word	0x10005528
 810ee9c:	10005530 	.word	0x10005530
 810eea0:	10005518 	.word	0x10005518
 810eea4:	10005040 	.word	0x10005040
 810eea8:	1000503c 	.word	0x1000503c
 810eeac:	10005524 	.word	0x10005524
 810eeb0:	10005520 	.word	0x10005520

0810eeb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810eeb4:	b480      	push	{r7}
 810eeb6:	b085      	sub	sp, #20
 810eeb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810eeba:	4b28      	ldr	r3, [pc, #160]	@ (810ef5c <vTaskSwitchContext+0xa8>)
 810eebc:	681b      	ldr	r3, [r3, #0]
 810eebe:	2b00      	cmp	r3, #0
 810eec0:	d003      	beq.n	810eeca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810eec2:	4b27      	ldr	r3, [pc, #156]	@ (810ef60 <vTaskSwitchContext+0xac>)
 810eec4:	2201      	movs	r2, #1
 810eec6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810eec8:	e042      	b.n	810ef50 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 810eeca:	4b25      	ldr	r3, [pc, #148]	@ (810ef60 <vTaskSwitchContext+0xac>)
 810eecc:	2200      	movs	r2, #0
 810eece:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810eed0:	4b24      	ldr	r3, [pc, #144]	@ (810ef64 <vTaskSwitchContext+0xb0>)
 810eed2:	681b      	ldr	r3, [r3, #0]
 810eed4:	60fb      	str	r3, [r7, #12]
 810eed6:	e011      	b.n	810eefc <vTaskSwitchContext+0x48>
 810eed8:	68fb      	ldr	r3, [r7, #12]
 810eeda:	2b00      	cmp	r3, #0
 810eedc:	d10b      	bne.n	810eef6 <vTaskSwitchContext+0x42>
	__asm volatile
 810eede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eee2:	f383 8811 	msr	BASEPRI, r3
 810eee6:	f3bf 8f6f 	isb	sy
 810eeea:	f3bf 8f4f 	dsb	sy
 810eeee:	607b      	str	r3, [r7, #4]
}
 810eef0:	bf00      	nop
 810eef2:	bf00      	nop
 810eef4:	e7fd      	b.n	810eef2 <vTaskSwitchContext+0x3e>
 810eef6:	68fb      	ldr	r3, [r7, #12]
 810eef8:	3b01      	subs	r3, #1
 810eefa:	60fb      	str	r3, [r7, #12]
 810eefc:	491a      	ldr	r1, [pc, #104]	@ (810ef68 <vTaskSwitchContext+0xb4>)
 810eefe:	68fa      	ldr	r2, [r7, #12]
 810ef00:	4613      	mov	r3, r2
 810ef02:	009b      	lsls	r3, r3, #2
 810ef04:	4413      	add	r3, r2
 810ef06:	009b      	lsls	r3, r3, #2
 810ef08:	440b      	add	r3, r1
 810ef0a:	681b      	ldr	r3, [r3, #0]
 810ef0c:	2b00      	cmp	r3, #0
 810ef0e:	d0e3      	beq.n	810eed8 <vTaskSwitchContext+0x24>
 810ef10:	68fa      	ldr	r2, [r7, #12]
 810ef12:	4613      	mov	r3, r2
 810ef14:	009b      	lsls	r3, r3, #2
 810ef16:	4413      	add	r3, r2
 810ef18:	009b      	lsls	r3, r3, #2
 810ef1a:	4a13      	ldr	r2, [pc, #76]	@ (810ef68 <vTaskSwitchContext+0xb4>)
 810ef1c:	4413      	add	r3, r2
 810ef1e:	60bb      	str	r3, [r7, #8]
 810ef20:	68bb      	ldr	r3, [r7, #8]
 810ef22:	685b      	ldr	r3, [r3, #4]
 810ef24:	685a      	ldr	r2, [r3, #4]
 810ef26:	68bb      	ldr	r3, [r7, #8]
 810ef28:	605a      	str	r2, [r3, #4]
 810ef2a:	68bb      	ldr	r3, [r7, #8]
 810ef2c:	685a      	ldr	r2, [r3, #4]
 810ef2e:	68bb      	ldr	r3, [r7, #8]
 810ef30:	3308      	adds	r3, #8
 810ef32:	429a      	cmp	r2, r3
 810ef34:	d104      	bne.n	810ef40 <vTaskSwitchContext+0x8c>
 810ef36:	68bb      	ldr	r3, [r7, #8]
 810ef38:	685b      	ldr	r3, [r3, #4]
 810ef3a:	685a      	ldr	r2, [r3, #4]
 810ef3c:	68bb      	ldr	r3, [r7, #8]
 810ef3e:	605a      	str	r2, [r3, #4]
 810ef40:	68bb      	ldr	r3, [r7, #8]
 810ef42:	685b      	ldr	r3, [r3, #4]
 810ef44:	68db      	ldr	r3, [r3, #12]
 810ef46:	4a09      	ldr	r2, [pc, #36]	@ (810ef6c <vTaskSwitchContext+0xb8>)
 810ef48:	6013      	str	r3, [r2, #0]
 810ef4a:	4a06      	ldr	r2, [pc, #24]	@ (810ef64 <vTaskSwitchContext+0xb0>)
 810ef4c:	68fb      	ldr	r3, [r7, #12]
 810ef4e:	6013      	str	r3, [r2, #0]
}
 810ef50:	bf00      	nop
 810ef52:	3714      	adds	r7, #20
 810ef54:	46bd      	mov	sp, r7
 810ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef5a:	4770      	bx	lr
 810ef5c:	10005538 	.word	0x10005538
 810ef60:	10005524 	.word	0x10005524
 810ef64:	10005518 	.word	0x10005518
 810ef68:	10005040 	.word	0x10005040
 810ef6c:	1000503c 	.word	0x1000503c

0810ef70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810ef70:	b580      	push	{r7, lr}
 810ef72:	b084      	sub	sp, #16
 810ef74:	af00      	add	r7, sp, #0
 810ef76:	6078      	str	r0, [r7, #4]
 810ef78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810ef7a:	687b      	ldr	r3, [r7, #4]
 810ef7c:	2b00      	cmp	r3, #0
 810ef7e:	d10b      	bne.n	810ef98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810ef80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef84:	f383 8811 	msr	BASEPRI, r3
 810ef88:	f3bf 8f6f 	isb	sy
 810ef8c:	f3bf 8f4f 	dsb	sy
 810ef90:	60fb      	str	r3, [r7, #12]
}
 810ef92:	bf00      	nop
 810ef94:	bf00      	nop
 810ef96:	e7fd      	b.n	810ef94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810ef98:	4b07      	ldr	r3, [pc, #28]	@ (810efb8 <vTaskPlaceOnEventList+0x48>)
 810ef9a:	681b      	ldr	r3, [r3, #0]
 810ef9c:	3318      	adds	r3, #24
 810ef9e:	4619      	mov	r1, r3
 810efa0:	6878      	ldr	r0, [r7, #4]
 810efa2:	f7fe fc20 	bl	810d7e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810efa6:	2101      	movs	r1, #1
 810efa8:	6838      	ldr	r0, [r7, #0]
 810efaa:	f000 fa81 	bl	810f4b0 <prvAddCurrentTaskToDelayedList>
}
 810efae:	bf00      	nop
 810efb0:	3710      	adds	r7, #16
 810efb2:	46bd      	mov	sp, r7
 810efb4:	bd80      	pop	{r7, pc}
 810efb6:	bf00      	nop
 810efb8:	1000503c 	.word	0x1000503c

0810efbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810efbc:	b580      	push	{r7, lr}
 810efbe:	b086      	sub	sp, #24
 810efc0:	af00      	add	r7, sp, #0
 810efc2:	60f8      	str	r0, [r7, #12]
 810efc4:	60b9      	str	r1, [r7, #8]
 810efc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810efc8:	68fb      	ldr	r3, [r7, #12]
 810efca:	2b00      	cmp	r3, #0
 810efcc:	d10b      	bne.n	810efe6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810efce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810efd2:	f383 8811 	msr	BASEPRI, r3
 810efd6:	f3bf 8f6f 	isb	sy
 810efda:	f3bf 8f4f 	dsb	sy
 810efde:	617b      	str	r3, [r7, #20]
}
 810efe0:	bf00      	nop
 810efe2:	bf00      	nop
 810efe4:	e7fd      	b.n	810efe2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810efe6:	4b0a      	ldr	r3, [pc, #40]	@ (810f010 <vTaskPlaceOnEventListRestricted+0x54>)
 810efe8:	681b      	ldr	r3, [r3, #0]
 810efea:	3318      	adds	r3, #24
 810efec:	4619      	mov	r1, r3
 810efee:	68f8      	ldr	r0, [r7, #12]
 810eff0:	f7fe fbd5 	bl	810d79e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810eff4:	687b      	ldr	r3, [r7, #4]
 810eff6:	2b00      	cmp	r3, #0
 810eff8:	d002      	beq.n	810f000 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810effa:	f04f 33ff 	mov.w	r3, #4294967295
 810effe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810f000:	6879      	ldr	r1, [r7, #4]
 810f002:	68b8      	ldr	r0, [r7, #8]
 810f004:	f000 fa54 	bl	810f4b0 <prvAddCurrentTaskToDelayedList>
	}
 810f008:	bf00      	nop
 810f00a:	3718      	adds	r7, #24
 810f00c:	46bd      	mov	sp, r7
 810f00e:	bd80      	pop	{r7, pc}
 810f010:	1000503c 	.word	0x1000503c

0810f014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810f014:	b580      	push	{r7, lr}
 810f016:	b086      	sub	sp, #24
 810f018:	af00      	add	r7, sp, #0
 810f01a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f01c:	687b      	ldr	r3, [r7, #4]
 810f01e:	68db      	ldr	r3, [r3, #12]
 810f020:	68db      	ldr	r3, [r3, #12]
 810f022:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810f024:	693b      	ldr	r3, [r7, #16]
 810f026:	2b00      	cmp	r3, #0
 810f028:	d10b      	bne.n	810f042 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810f02a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f02e:	f383 8811 	msr	BASEPRI, r3
 810f032:	f3bf 8f6f 	isb	sy
 810f036:	f3bf 8f4f 	dsb	sy
 810f03a:	60fb      	str	r3, [r7, #12]
}
 810f03c:	bf00      	nop
 810f03e:	bf00      	nop
 810f040:	e7fd      	b.n	810f03e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810f042:	693b      	ldr	r3, [r7, #16]
 810f044:	3318      	adds	r3, #24
 810f046:	4618      	mov	r0, r3
 810f048:	f7fe fc06 	bl	810d858 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810f04c:	4b1d      	ldr	r3, [pc, #116]	@ (810f0c4 <xTaskRemoveFromEventList+0xb0>)
 810f04e:	681b      	ldr	r3, [r3, #0]
 810f050:	2b00      	cmp	r3, #0
 810f052:	d11d      	bne.n	810f090 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810f054:	693b      	ldr	r3, [r7, #16]
 810f056:	3304      	adds	r3, #4
 810f058:	4618      	mov	r0, r3
 810f05a:	f7fe fbfd 	bl	810d858 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810f05e:	693b      	ldr	r3, [r7, #16]
 810f060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f062:	4b19      	ldr	r3, [pc, #100]	@ (810f0c8 <xTaskRemoveFromEventList+0xb4>)
 810f064:	681b      	ldr	r3, [r3, #0]
 810f066:	429a      	cmp	r2, r3
 810f068:	d903      	bls.n	810f072 <xTaskRemoveFromEventList+0x5e>
 810f06a:	693b      	ldr	r3, [r7, #16]
 810f06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f06e:	4a16      	ldr	r2, [pc, #88]	@ (810f0c8 <xTaskRemoveFromEventList+0xb4>)
 810f070:	6013      	str	r3, [r2, #0]
 810f072:	693b      	ldr	r3, [r7, #16]
 810f074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f076:	4613      	mov	r3, r2
 810f078:	009b      	lsls	r3, r3, #2
 810f07a:	4413      	add	r3, r2
 810f07c:	009b      	lsls	r3, r3, #2
 810f07e:	4a13      	ldr	r2, [pc, #76]	@ (810f0cc <xTaskRemoveFromEventList+0xb8>)
 810f080:	441a      	add	r2, r3
 810f082:	693b      	ldr	r3, [r7, #16]
 810f084:	3304      	adds	r3, #4
 810f086:	4619      	mov	r1, r3
 810f088:	4610      	mov	r0, r2
 810f08a:	f7fe fb88 	bl	810d79e <vListInsertEnd>
 810f08e:	e005      	b.n	810f09c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810f090:	693b      	ldr	r3, [r7, #16]
 810f092:	3318      	adds	r3, #24
 810f094:	4619      	mov	r1, r3
 810f096:	480e      	ldr	r0, [pc, #56]	@ (810f0d0 <xTaskRemoveFromEventList+0xbc>)
 810f098:	f7fe fb81 	bl	810d79e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810f09c:	693b      	ldr	r3, [r7, #16]
 810f09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f0a0:	4b0c      	ldr	r3, [pc, #48]	@ (810f0d4 <xTaskRemoveFromEventList+0xc0>)
 810f0a2:	681b      	ldr	r3, [r3, #0]
 810f0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f0a6:	429a      	cmp	r2, r3
 810f0a8:	d905      	bls.n	810f0b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810f0aa:	2301      	movs	r3, #1
 810f0ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810f0ae:	4b0a      	ldr	r3, [pc, #40]	@ (810f0d8 <xTaskRemoveFromEventList+0xc4>)
 810f0b0:	2201      	movs	r2, #1
 810f0b2:	601a      	str	r2, [r3, #0]
 810f0b4:	e001      	b.n	810f0ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810f0b6:	2300      	movs	r3, #0
 810f0b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810f0ba:	697b      	ldr	r3, [r7, #20]
}
 810f0bc:	4618      	mov	r0, r3
 810f0be:	3718      	adds	r7, #24
 810f0c0:	46bd      	mov	sp, r7
 810f0c2:	bd80      	pop	{r7, pc}
 810f0c4:	10005538 	.word	0x10005538
 810f0c8:	10005518 	.word	0x10005518
 810f0cc:	10005040 	.word	0x10005040
 810f0d0:	100054d0 	.word	0x100054d0
 810f0d4:	1000503c 	.word	0x1000503c
 810f0d8:	10005524 	.word	0x10005524

0810f0dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810f0dc:	b480      	push	{r7}
 810f0de:	b083      	sub	sp, #12
 810f0e0:	af00      	add	r7, sp, #0
 810f0e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810f0e4:	4b06      	ldr	r3, [pc, #24]	@ (810f100 <vTaskInternalSetTimeOutState+0x24>)
 810f0e6:	681a      	ldr	r2, [r3, #0]
 810f0e8:	687b      	ldr	r3, [r7, #4]
 810f0ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810f0ec:	4b05      	ldr	r3, [pc, #20]	@ (810f104 <vTaskInternalSetTimeOutState+0x28>)
 810f0ee:	681a      	ldr	r2, [r3, #0]
 810f0f0:	687b      	ldr	r3, [r7, #4]
 810f0f2:	605a      	str	r2, [r3, #4]
}
 810f0f4:	bf00      	nop
 810f0f6:	370c      	adds	r7, #12
 810f0f8:	46bd      	mov	sp, r7
 810f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f0fe:	4770      	bx	lr
 810f100:	10005528 	.word	0x10005528
 810f104:	10005514 	.word	0x10005514

0810f108 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810f108:	b580      	push	{r7, lr}
 810f10a:	b088      	sub	sp, #32
 810f10c:	af00      	add	r7, sp, #0
 810f10e:	6078      	str	r0, [r7, #4]
 810f110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810f112:	687b      	ldr	r3, [r7, #4]
 810f114:	2b00      	cmp	r3, #0
 810f116:	d10b      	bne.n	810f130 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810f118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f11c:	f383 8811 	msr	BASEPRI, r3
 810f120:	f3bf 8f6f 	isb	sy
 810f124:	f3bf 8f4f 	dsb	sy
 810f128:	613b      	str	r3, [r7, #16]
}
 810f12a:	bf00      	nop
 810f12c:	bf00      	nop
 810f12e:	e7fd      	b.n	810f12c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810f130:	683b      	ldr	r3, [r7, #0]
 810f132:	2b00      	cmp	r3, #0
 810f134:	d10b      	bne.n	810f14e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810f136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f13a:	f383 8811 	msr	BASEPRI, r3
 810f13e:	f3bf 8f6f 	isb	sy
 810f142:	f3bf 8f4f 	dsb	sy
 810f146:	60fb      	str	r3, [r7, #12]
}
 810f148:	bf00      	nop
 810f14a:	bf00      	nop
 810f14c:	e7fd      	b.n	810f14a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810f14e:	f7fe fcdb 	bl	810db08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810f152:	4b1d      	ldr	r3, [pc, #116]	@ (810f1c8 <xTaskCheckForTimeOut+0xc0>)
 810f154:	681b      	ldr	r3, [r3, #0]
 810f156:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810f158:	687b      	ldr	r3, [r7, #4]
 810f15a:	685b      	ldr	r3, [r3, #4]
 810f15c:	69ba      	ldr	r2, [r7, #24]
 810f15e:	1ad3      	subs	r3, r2, r3
 810f160:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810f162:	683b      	ldr	r3, [r7, #0]
 810f164:	681b      	ldr	r3, [r3, #0]
 810f166:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f16a:	d102      	bne.n	810f172 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810f16c:	2300      	movs	r3, #0
 810f16e:	61fb      	str	r3, [r7, #28]
 810f170:	e023      	b.n	810f1ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810f172:	687b      	ldr	r3, [r7, #4]
 810f174:	681a      	ldr	r2, [r3, #0]
 810f176:	4b15      	ldr	r3, [pc, #84]	@ (810f1cc <xTaskCheckForTimeOut+0xc4>)
 810f178:	681b      	ldr	r3, [r3, #0]
 810f17a:	429a      	cmp	r2, r3
 810f17c:	d007      	beq.n	810f18e <xTaskCheckForTimeOut+0x86>
 810f17e:	687b      	ldr	r3, [r7, #4]
 810f180:	685b      	ldr	r3, [r3, #4]
 810f182:	69ba      	ldr	r2, [r7, #24]
 810f184:	429a      	cmp	r2, r3
 810f186:	d302      	bcc.n	810f18e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810f188:	2301      	movs	r3, #1
 810f18a:	61fb      	str	r3, [r7, #28]
 810f18c:	e015      	b.n	810f1ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810f18e:	683b      	ldr	r3, [r7, #0]
 810f190:	681b      	ldr	r3, [r3, #0]
 810f192:	697a      	ldr	r2, [r7, #20]
 810f194:	429a      	cmp	r2, r3
 810f196:	d20b      	bcs.n	810f1b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810f198:	683b      	ldr	r3, [r7, #0]
 810f19a:	681a      	ldr	r2, [r3, #0]
 810f19c:	697b      	ldr	r3, [r7, #20]
 810f19e:	1ad2      	subs	r2, r2, r3
 810f1a0:	683b      	ldr	r3, [r7, #0]
 810f1a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810f1a4:	6878      	ldr	r0, [r7, #4]
 810f1a6:	f7ff ff99 	bl	810f0dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810f1aa:	2300      	movs	r3, #0
 810f1ac:	61fb      	str	r3, [r7, #28]
 810f1ae:	e004      	b.n	810f1ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810f1b0:	683b      	ldr	r3, [r7, #0]
 810f1b2:	2200      	movs	r2, #0
 810f1b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810f1b6:	2301      	movs	r3, #1
 810f1b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810f1ba:	f7fe fcd7 	bl	810db6c <vPortExitCritical>

	return xReturn;
 810f1be:	69fb      	ldr	r3, [r7, #28]
}
 810f1c0:	4618      	mov	r0, r3
 810f1c2:	3720      	adds	r7, #32
 810f1c4:	46bd      	mov	sp, r7
 810f1c6:	bd80      	pop	{r7, pc}
 810f1c8:	10005514 	.word	0x10005514
 810f1cc:	10005528 	.word	0x10005528

0810f1d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810f1d0:	b480      	push	{r7}
 810f1d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810f1d4:	4b03      	ldr	r3, [pc, #12]	@ (810f1e4 <vTaskMissedYield+0x14>)
 810f1d6:	2201      	movs	r2, #1
 810f1d8:	601a      	str	r2, [r3, #0]
}
 810f1da:	bf00      	nop
 810f1dc:	46bd      	mov	sp, r7
 810f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f1e2:	4770      	bx	lr
 810f1e4:	10005524 	.word	0x10005524

0810f1e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810f1e8:	b580      	push	{r7, lr}
 810f1ea:	b082      	sub	sp, #8
 810f1ec:	af00      	add	r7, sp, #0
 810f1ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810f1f0:	f000 f852 	bl	810f298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810f1f4:	4b06      	ldr	r3, [pc, #24]	@ (810f210 <prvIdleTask+0x28>)
 810f1f6:	681b      	ldr	r3, [r3, #0]
 810f1f8:	2b01      	cmp	r3, #1
 810f1fa:	d9f9      	bls.n	810f1f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 810f1fc:	4b05      	ldr	r3, [pc, #20]	@ (810f214 <prvIdleTask+0x2c>)
 810f1fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f202:	601a      	str	r2, [r3, #0]
 810f204:	f3bf 8f4f 	dsb	sy
 810f208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810f20c:	e7f0      	b.n	810f1f0 <prvIdleTask+0x8>
 810f20e:	bf00      	nop
 810f210:	10005040 	.word	0x10005040
 810f214:	e000ed04 	.word	0xe000ed04

0810f218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810f218:	b580      	push	{r7, lr}
 810f21a:	b082      	sub	sp, #8
 810f21c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810f21e:	2300      	movs	r3, #0
 810f220:	607b      	str	r3, [r7, #4]
 810f222:	e00c      	b.n	810f23e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810f224:	687a      	ldr	r2, [r7, #4]
 810f226:	4613      	mov	r3, r2
 810f228:	009b      	lsls	r3, r3, #2
 810f22a:	4413      	add	r3, r2
 810f22c:	009b      	lsls	r3, r3, #2
 810f22e:	4a12      	ldr	r2, [pc, #72]	@ (810f278 <prvInitialiseTaskLists+0x60>)
 810f230:	4413      	add	r3, r2
 810f232:	4618      	mov	r0, r3
 810f234:	f7fe fa86 	bl	810d744 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810f238:	687b      	ldr	r3, [r7, #4]
 810f23a:	3301      	adds	r3, #1
 810f23c:	607b      	str	r3, [r7, #4]
 810f23e:	687b      	ldr	r3, [r7, #4]
 810f240:	2b37      	cmp	r3, #55	@ 0x37
 810f242:	d9ef      	bls.n	810f224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810f244:	480d      	ldr	r0, [pc, #52]	@ (810f27c <prvInitialiseTaskLists+0x64>)
 810f246:	f7fe fa7d 	bl	810d744 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810f24a:	480d      	ldr	r0, [pc, #52]	@ (810f280 <prvInitialiseTaskLists+0x68>)
 810f24c:	f7fe fa7a 	bl	810d744 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810f250:	480c      	ldr	r0, [pc, #48]	@ (810f284 <prvInitialiseTaskLists+0x6c>)
 810f252:	f7fe fa77 	bl	810d744 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810f256:	480c      	ldr	r0, [pc, #48]	@ (810f288 <prvInitialiseTaskLists+0x70>)
 810f258:	f7fe fa74 	bl	810d744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810f25c:	480b      	ldr	r0, [pc, #44]	@ (810f28c <prvInitialiseTaskLists+0x74>)
 810f25e:	f7fe fa71 	bl	810d744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810f262:	4b0b      	ldr	r3, [pc, #44]	@ (810f290 <prvInitialiseTaskLists+0x78>)
 810f264:	4a05      	ldr	r2, [pc, #20]	@ (810f27c <prvInitialiseTaskLists+0x64>)
 810f266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810f268:	4b0a      	ldr	r3, [pc, #40]	@ (810f294 <prvInitialiseTaskLists+0x7c>)
 810f26a:	4a05      	ldr	r2, [pc, #20]	@ (810f280 <prvInitialiseTaskLists+0x68>)
 810f26c:	601a      	str	r2, [r3, #0]
}
 810f26e:	bf00      	nop
 810f270:	3708      	adds	r7, #8
 810f272:	46bd      	mov	sp, r7
 810f274:	bd80      	pop	{r7, pc}
 810f276:	bf00      	nop
 810f278:	10005040 	.word	0x10005040
 810f27c:	100054a0 	.word	0x100054a0
 810f280:	100054b4 	.word	0x100054b4
 810f284:	100054d0 	.word	0x100054d0
 810f288:	100054e4 	.word	0x100054e4
 810f28c:	100054fc 	.word	0x100054fc
 810f290:	100054c8 	.word	0x100054c8
 810f294:	100054cc 	.word	0x100054cc

0810f298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810f298:	b580      	push	{r7, lr}
 810f29a:	b082      	sub	sp, #8
 810f29c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810f29e:	e019      	b.n	810f2d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810f2a0:	f7fe fc32 	bl	810db08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f2a4:	4b10      	ldr	r3, [pc, #64]	@ (810f2e8 <prvCheckTasksWaitingTermination+0x50>)
 810f2a6:	68db      	ldr	r3, [r3, #12]
 810f2a8:	68db      	ldr	r3, [r3, #12]
 810f2aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810f2ac:	687b      	ldr	r3, [r7, #4]
 810f2ae:	3304      	adds	r3, #4
 810f2b0:	4618      	mov	r0, r3
 810f2b2:	f7fe fad1 	bl	810d858 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810f2b6:	4b0d      	ldr	r3, [pc, #52]	@ (810f2ec <prvCheckTasksWaitingTermination+0x54>)
 810f2b8:	681b      	ldr	r3, [r3, #0]
 810f2ba:	3b01      	subs	r3, #1
 810f2bc:	4a0b      	ldr	r2, [pc, #44]	@ (810f2ec <prvCheckTasksWaitingTermination+0x54>)
 810f2be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810f2c0:	4b0b      	ldr	r3, [pc, #44]	@ (810f2f0 <prvCheckTasksWaitingTermination+0x58>)
 810f2c2:	681b      	ldr	r3, [r3, #0]
 810f2c4:	3b01      	subs	r3, #1
 810f2c6:	4a0a      	ldr	r2, [pc, #40]	@ (810f2f0 <prvCheckTasksWaitingTermination+0x58>)
 810f2c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810f2ca:	f7fe fc4f 	bl	810db6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810f2ce:	6878      	ldr	r0, [r7, #4]
 810f2d0:	f000 f810 	bl	810f2f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810f2d4:	4b06      	ldr	r3, [pc, #24]	@ (810f2f0 <prvCheckTasksWaitingTermination+0x58>)
 810f2d6:	681b      	ldr	r3, [r3, #0]
 810f2d8:	2b00      	cmp	r3, #0
 810f2da:	d1e1      	bne.n	810f2a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810f2dc:	bf00      	nop
 810f2de:	bf00      	nop
 810f2e0:	3708      	adds	r7, #8
 810f2e2:	46bd      	mov	sp, r7
 810f2e4:	bd80      	pop	{r7, pc}
 810f2e6:	bf00      	nop
 810f2e8:	100054e4 	.word	0x100054e4
 810f2ec:	10005510 	.word	0x10005510
 810f2f0:	100054f8 	.word	0x100054f8

0810f2f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810f2f4:	b580      	push	{r7, lr}
 810f2f6:	b084      	sub	sp, #16
 810f2f8:	af00      	add	r7, sp, #0
 810f2fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810f2fc:	687b      	ldr	r3, [r7, #4]
 810f2fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810f302:	2b00      	cmp	r3, #0
 810f304:	d108      	bne.n	810f318 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810f306:	687b      	ldr	r3, [r7, #4]
 810f308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f30a:	4618      	mov	r0, r3
 810f30c:	f7fe f8fa 	bl	810d504 <vPortFree>
				vPortFree( pxTCB );
 810f310:	6878      	ldr	r0, [r7, #4]
 810f312:	f7fe f8f7 	bl	810d504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810f316:	e019      	b.n	810f34c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810f318:	687b      	ldr	r3, [r7, #4]
 810f31a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810f31e:	2b01      	cmp	r3, #1
 810f320:	d103      	bne.n	810f32a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810f322:	6878      	ldr	r0, [r7, #4]
 810f324:	f7fe f8ee 	bl	810d504 <vPortFree>
	}
 810f328:	e010      	b.n	810f34c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810f32a:	687b      	ldr	r3, [r7, #4]
 810f32c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810f330:	2b02      	cmp	r3, #2
 810f332:	d00b      	beq.n	810f34c <prvDeleteTCB+0x58>
	__asm volatile
 810f334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f338:	f383 8811 	msr	BASEPRI, r3
 810f33c:	f3bf 8f6f 	isb	sy
 810f340:	f3bf 8f4f 	dsb	sy
 810f344:	60fb      	str	r3, [r7, #12]
}
 810f346:	bf00      	nop
 810f348:	bf00      	nop
 810f34a:	e7fd      	b.n	810f348 <prvDeleteTCB+0x54>
	}
 810f34c:	bf00      	nop
 810f34e:	3710      	adds	r7, #16
 810f350:	46bd      	mov	sp, r7
 810f352:	bd80      	pop	{r7, pc}

0810f354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810f354:	b480      	push	{r7}
 810f356:	b083      	sub	sp, #12
 810f358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810f35a:	4b0c      	ldr	r3, [pc, #48]	@ (810f38c <prvResetNextTaskUnblockTime+0x38>)
 810f35c:	681b      	ldr	r3, [r3, #0]
 810f35e:	681b      	ldr	r3, [r3, #0]
 810f360:	2b00      	cmp	r3, #0
 810f362:	d104      	bne.n	810f36e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810f364:	4b0a      	ldr	r3, [pc, #40]	@ (810f390 <prvResetNextTaskUnblockTime+0x3c>)
 810f366:	f04f 32ff 	mov.w	r2, #4294967295
 810f36a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810f36c:	e008      	b.n	810f380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f36e:	4b07      	ldr	r3, [pc, #28]	@ (810f38c <prvResetNextTaskUnblockTime+0x38>)
 810f370:	681b      	ldr	r3, [r3, #0]
 810f372:	68db      	ldr	r3, [r3, #12]
 810f374:	68db      	ldr	r3, [r3, #12]
 810f376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810f378:	687b      	ldr	r3, [r7, #4]
 810f37a:	685b      	ldr	r3, [r3, #4]
 810f37c:	4a04      	ldr	r2, [pc, #16]	@ (810f390 <prvResetNextTaskUnblockTime+0x3c>)
 810f37e:	6013      	str	r3, [r2, #0]
}
 810f380:	bf00      	nop
 810f382:	370c      	adds	r7, #12
 810f384:	46bd      	mov	sp, r7
 810f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f38a:	4770      	bx	lr
 810f38c:	100054c8 	.word	0x100054c8
 810f390:	10005530 	.word	0x10005530

0810f394 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810f394:	b480      	push	{r7}
 810f396:	b083      	sub	sp, #12
 810f398:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810f39a:	4b0b      	ldr	r3, [pc, #44]	@ (810f3c8 <xTaskGetSchedulerState+0x34>)
 810f39c:	681b      	ldr	r3, [r3, #0]
 810f39e:	2b00      	cmp	r3, #0
 810f3a0:	d102      	bne.n	810f3a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810f3a2:	2301      	movs	r3, #1
 810f3a4:	607b      	str	r3, [r7, #4]
 810f3a6:	e008      	b.n	810f3ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810f3a8:	4b08      	ldr	r3, [pc, #32]	@ (810f3cc <xTaskGetSchedulerState+0x38>)
 810f3aa:	681b      	ldr	r3, [r3, #0]
 810f3ac:	2b00      	cmp	r3, #0
 810f3ae:	d102      	bne.n	810f3b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810f3b0:	2302      	movs	r3, #2
 810f3b2:	607b      	str	r3, [r7, #4]
 810f3b4:	e001      	b.n	810f3ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810f3b6:	2300      	movs	r3, #0
 810f3b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810f3ba:	687b      	ldr	r3, [r7, #4]
	}
 810f3bc:	4618      	mov	r0, r3
 810f3be:	370c      	adds	r7, #12
 810f3c0:	46bd      	mov	sp, r7
 810f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f3c6:	4770      	bx	lr
 810f3c8:	1000551c 	.word	0x1000551c
 810f3cc:	10005538 	.word	0x10005538

0810f3d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810f3d0:	b580      	push	{r7, lr}
 810f3d2:	b086      	sub	sp, #24
 810f3d4:	af00      	add	r7, sp, #0
 810f3d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810f3d8:	687b      	ldr	r3, [r7, #4]
 810f3da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810f3dc:	2300      	movs	r3, #0
 810f3de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810f3e0:	687b      	ldr	r3, [r7, #4]
 810f3e2:	2b00      	cmp	r3, #0
 810f3e4:	d058      	beq.n	810f498 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810f3e6:	4b2f      	ldr	r3, [pc, #188]	@ (810f4a4 <xTaskPriorityDisinherit+0xd4>)
 810f3e8:	681b      	ldr	r3, [r3, #0]
 810f3ea:	693a      	ldr	r2, [r7, #16]
 810f3ec:	429a      	cmp	r2, r3
 810f3ee:	d00b      	beq.n	810f408 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810f3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f3f4:	f383 8811 	msr	BASEPRI, r3
 810f3f8:	f3bf 8f6f 	isb	sy
 810f3fc:	f3bf 8f4f 	dsb	sy
 810f400:	60fb      	str	r3, [r7, #12]
}
 810f402:	bf00      	nop
 810f404:	bf00      	nop
 810f406:	e7fd      	b.n	810f404 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810f408:	693b      	ldr	r3, [r7, #16]
 810f40a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810f40c:	2b00      	cmp	r3, #0
 810f40e:	d10b      	bne.n	810f428 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810f410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f414:	f383 8811 	msr	BASEPRI, r3
 810f418:	f3bf 8f6f 	isb	sy
 810f41c:	f3bf 8f4f 	dsb	sy
 810f420:	60bb      	str	r3, [r7, #8]
}
 810f422:	bf00      	nop
 810f424:	bf00      	nop
 810f426:	e7fd      	b.n	810f424 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810f428:	693b      	ldr	r3, [r7, #16]
 810f42a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810f42c:	1e5a      	subs	r2, r3, #1
 810f42e:	693b      	ldr	r3, [r7, #16]
 810f430:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810f432:	693b      	ldr	r3, [r7, #16]
 810f434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f436:	693b      	ldr	r3, [r7, #16]
 810f438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810f43a:	429a      	cmp	r2, r3
 810f43c:	d02c      	beq.n	810f498 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810f43e:	693b      	ldr	r3, [r7, #16]
 810f440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810f442:	2b00      	cmp	r3, #0
 810f444:	d128      	bne.n	810f498 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810f446:	693b      	ldr	r3, [r7, #16]
 810f448:	3304      	adds	r3, #4
 810f44a:	4618      	mov	r0, r3
 810f44c:	f7fe fa04 	bl	810d858 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810f450:	693b      	ldr	r3, [r7, #16]
 810f452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810f454:	693b      	ldr	r3, [r7, #16]
 810f456:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f458:	693b      	ldr	r3, [r7, #16]
 810f45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f45c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810f460:	693b      	ldr	r3, [r7, #16]
 810f462:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810f464:	693b      	ldr	r3, [r7, #16]
 810f466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f468:	4b0f      	ldr	r3, [pc, #60]	@ (810f4a8 <xTaskPriorityDisinherit+0xd8>)
 810f46a:	681b      	ldr	r3, [r3, #0]
 810f46c:	429a      	cmp	r2, r3
 810f46e:	d903      	bls.n	810f478 <xTaskPriorityDisinherit+0xa8>
 810f470:	693b      	ldr	r3, [r7, #16]
 810f472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f474:	4a0c      	ldr	r2, [pc, #48]	@ (810f4a8 <xTaskPriorityDisinherit+0xd8>)
 810f476:	6013      	str	r3, [r2, #0]
 810f478:	693b      	ldr	r3, [r7, #16]
 810f47a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f47c:	4613      	mov	r3, r2
 810f47e:	009b      	lsls	r3, r3, #2
 810f480:	4413      	add	r3, r2
 810f482:	009b      	lsls	r3, r3, #2
 810f484:	4a09      	ldr	r2, [pc, #36]	@ (810f4ac <xTaskPriorityDisinherit+0xdc>)
 810f486:	441a      	add	r2, r3
 810f488:	693b      	ldr	r3, [r7, #16]
 810f48a:	3304      	adds	r3, #4
 810f48c:	4619      	mov	r1, r3
 810f48e:	4610      	mov	r0, r2
 810f490:	f7fe f985 	bl	810d79e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810f494:	2301      	movs	r3, #1
 810f496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810f498:	697b      	ldr	r3, [r7, #20]
	}
 810f49a:	4618      	mov	r0, r3
 810f49c:	3718      	adds	r7, #24
 810f49e:	46bd      	mov	sp, r7
 810f4a0:	bd80      	pop	{r7, pc}
 810f4a2:	bf00      	nop
 810f4a4:	1000503c 	.word	0x1000503c
 810f4a8:	10005518 	.word	0x10005518
 810f4ac:	10005040 	.word	0x10005040

0810f4b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810f4b0:	b580      	push	{r7, lr}
 810f4b2:	b084      	sub	sp, #16
 810f4b4:	af00      	add	r7, sp, #0
 810f4b6:	6078      	str	r0, [r7, #4]
 810f4b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810f4ba:	4b21      	ldr	r3, [pc, #132]	@ (810f540 <prvAddCurrentTaskToDelayedList+0x90>)
 810f4bc:	681b      	ldr	r3, [r3, #0]
 810f4be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810f4c0:	4b20      	ldr	r3, [pc, #128]	@ (810f544 <prvAddCurrentTaskToDelayedList+0x94>)
 810f4c2:	681b      	ldr	r3, [r3, #0]
 810f4c4:	3304      	adds	r3, #4
 810f4c6:	4618      	mov	r0, r3
 810f4c8:	f7fe f9c6 	bl	810d858 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810f4cc:	687b      	ldr	r3, [r7, #4]
 810f4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f4d2:	d10a      	bne.n	810f4ea <prvAddCurrentTaskToDelayedList+0x3a>
 810f4d4:	683b      	ldr	r3, [r7, #0]
 810f4d6:	2b00      	cmp	r3, #0
 810f4d8:	d007      	beq.n	810f4ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f4da:	4b1a      	ldr	r3, [pc, #104]	@ (810f544 <prvAddCurrentTaskToDelayedList+0x94>)
 810f4dc:	681b      	ldr	r3, [r3, #0]
 810f4de:	3304      	adds	r3, #4
 810f4e0:	4619      	mov	r1, r3
 810f4e2:	4819      	ldr	r0, [pc, #100]	@ (810f548 <prvAddCurrentTaskToDelayedList+0x98>)
 810f4e4:	f7fe f95b 	bl	810d79e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810f4e8:	e026      	b.n	810f538 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810f4ea:	68fa      	ldr	r2, [r7, #12]
 810f4ec:	687b      	ldr	r3, [r7, #4]
 810f4ee:	4413      	add	r3, r2
 810f4f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810f4f2:	4b14      	ldr	r3, [pc, #80]	@ (810f544 <prvAddCurrentTaskToDelayedList+0x94>)
 810f4f4:	681b      	ldr	r3, [r3, #0]
 810f4f6:	68ba      	ldr	r2, [r7, #8]
 810f4f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810f4fa:	68ba      	ldr	r2, [r7, #8]
 810f4fc:	68fb      	ldr	r3, [r7, #12]
 810f4fe:	429a      	cmp	r2, r3
 810f500:	d209      	bcs.n	810f516 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f502:	4b12      	ldr	r3, [pc, #72]	@ (810f54c <prvAddCurrentTaskToDelayedList+0x9c>)
 810f504:	681a      	ldr	r2, [r3, #0]
 810f506:	4b0f      	ldr	r3, [pc, #60]	@ (810f544 <prvAddCurrentTaskToDelayedList+0x94>)
 810f508:	681b      	ldr	r3, [r3, #0]
 810f50a:	3304      	adds	r3, #4
 810f50c:	4619      	mov	r1, r3
 810f50e:	4610      	mov	r0, r2
 810f510:	f7fe f969 	bl	810d7e6 <vListInsert>
}
 810f514:	e010      	b.n	810f538 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f516:	4b0e      	ldr	r3, [pc, #56]	@ (810f550 <prvAddCurrentTaskToDelayedList+0xa0>)
 810f518:	681a      	ldr	r2, [r3, #0]
 810f51a:	4b0a      	ldr	r3, [pc, #40]	@ (810f544 <prvAddCurrentTaskToDelayedList+0x94>)
 810f51c:	681b      	ldr	r3, [r3, #0]
 810f51e:	3304      	adds	r3, #4
 810f520:	4619      	mov	r1, r3
 810f522:	4610      	mov	r0, r2
 810f524:	f7fe f95f 	bl	810d7e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810f528:	4b0a      	ldr	r3, [pc, #40]	@ (810f554 <prvAddCurrentTaskToDelayedList+0xa4>)
 810f52a:	681b      	ldr	r3, [r3, #0]
 810f52c:	68ba      	ldr	r2, [r7, #8]
 810f52e:	429a      	cmp	r2, r3
 810f530:	d202      	bcs.n	810f538 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810f532:	4a08      	ldr	r2, [pc, #32]	@ (810f554 <prvAddCurrentTaskToDelayedList+0xa4>)
 810f534:	68bb      	ldr	r3, [r7, #8]
 810f536:	6013      	str	r3, [r2, #0]
}
 810f538:	bf00      	nop
 810f53a:	3710      	adds	r7, #16
 810f53c:	46bd      	mov	sp, r7
 810f53e:	bd80      	pop	{r7, pc}
 810f540:	10005514 	.word	0x10005514
 810f544:	1000503c 	.word	0x1000503c
 810f548:	100054fc 	.word	0x100054fc
 810f54c:	100054cc 	.word	0x100054cc
 810f550:	100054c8 	.word	0x100054c8
 810f554:	10005530 	.word	0x10005530

0810f558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810f558:	b580      	push	{r7, lr}
 810f55a:	b08a      	sub	sp, #40	@ 0x28
 810f55c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810f55e:	2300      	movs	r3, #0
 810f560:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810f562:	f000 fb13 	bl	810fb8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810f566:	4b1d      	ldr	r3, [pc, #116]	@ (810f5dc <xTimerCreateTimerTask+0x84>)
 810f568:	681b      	ldr	r3, [r3, #0]
 810f56a:	2b00      	cmp	r3, #0
 810f56c:	d021      	beq.n	810f5b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810f56e:	2300      	movs	r3, #0
 810f570:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810f572:	2300      	movs	r3, #0
 810f574:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810f576:	1d3a      	adds	r2, r7, #4
 810f578:	f107 0108 	add.w	r1, r7, #8
 810f57c:	f107 030c 	add.w	r3, r7, #12
 810f580:	4618      	mov	r0, r3
 810f582:	f7fd fed7 	bl	810d334 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810f586:	6879      	ldr	r1, [r7, #4]
 810f588:	68bb      	ldr	r3, [r7, #8]
 810f58a:	68fa      	ldr	r2, [r7, #12]
 810f58c:	9202      	str	r2, [sp, #8]
 810f58e:	9301      	str	r3, [sp, #4]
 810f590:	2302      	movs	r3, #2
 810f592:	9300      	str	r3, [sp, #0]
 810f594:	2300      	movs	r3, #0
 810f596:	460a      	mov	r2, r1
 810f598:	4911      	ldr	r1, [pc, #68]	@ (810f5e0 <xTimerCreateTimerTask+0x88>)
 810f59a:	4812      	ldr	r0, [pc, #72]	@ (810f5e4 <xTimerCreateTimerTask+0x8c>)
 810f59c:	f7ff f8d0 	bl	810e740 <xTaskCreateStatic>
 810f5a0:	4603      	mov	r3, r0
 810f5a2:	4a11      	ldr	r2, [pc, #68]	@ (810f5e8 <xTimerCreateTimerTask+0x90>)
 810f5a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810f5a6:	4b10      	ldr	r3, [pc, #64]	@ (810f5e8 <xTimerCreateTimerTask+0x90>)
 810f5a8:	681b      	ldr	r3, [r3, #0]
 810f5aa:	2b00      	cmp	r3, #0
 810f5ac:	d001      	beq.n	810f5b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810f5ae:	2301      	movs	r3, #1
 810f5b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810f5b2:	697b      	ldr	r3, [r7, #20]
 810f5b4:	2b00      	cmp	r3, #0
 810f5b6:	d10b      	bne.n	810f5d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 810f5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f5bc:	f383 8811 	msr	BASEPRI, r3
 810f5c0:	f3bf 8f6f 	isb	sy
 810f5c4:	f3bf 8f4f 	dsb	sy
 810f5c8:	613b      	str	r3, [r7, #16]
}
 810f5ca:	bf00      	nop
 810f5cc:	bf00      	nop
 810f5ce:	e7fd      	b.n	810f5cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 810f5d0:	697b      	ldr	r3, [r7, #20]
}
 810f5d2:	4618      	mov	r0, r3
 810f5d4:	3718      	adds	r7, #24
 810f5d6:	46bd      	mov	sp, r7
 810f5d8:	bd80      	pop	{r7, pc}
 810f5da:	bf00      	nop
 810f5dc:	1000556c 	.word	0x1000556c
 810f5e0:	0810fcac 	.word	0x0810fcac
 810f5e4:	0810f725 	.word	0x0810f725
 810f5e8:	10005570 	.word	0x10005570

0810f5ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810f5ec:	b580      	push	{r7, lr}
 810f5ee:	b08a      	sub	sp, #40	@ 0x28
 810f5f0:	af00      	add	r7, sp, #0
 810f5f2:	60f8      	str	r0, [r7, #12]
 810f5f4:	60b9      	str	r1, [r7, #8]
 810f5f6:	607a      	str	r2, [r7, #4]
 810f5f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810f5fa:	2300      	movs	r3, #0
 810f5fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810f5fe:	68fb      	ldr	r3, [r7, #12]
 810f600:	2b00      	cmp	r3, #0
 810f602:	d10b      	bne.n	810f61c <xTimerGenericCommand+0x30>
	__asm volatile
 810f604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f608:	f383 8811 	msr	BASEPRI, r3
 810f60c:	f3bf 8f6f 	isb	sy
 810f610:	f3bf 8f4f 	dsb	sy
 810f614:	623b      	str	r3, [r7, #32]
}
 810f616:	bf00      	nop
 810f618:	bf00      	nop
 810f61a:	e7fd      	b.n	810f618 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810f61c:	4b19      	ldr	r3, [pc, #100]	@ (810f684 <xTimerGenericCommand+0x98>)
 810f61e:	681b      	ldr	r3, [r3, #0]
 810f620:	2b00      	cmp	r3, #0
 810f622:	d02a      	beq.n	810f67a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810f624:	68bb      	ldr	r3, [r7, #8]
 810f626:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810f628:	687b      	ldr	r3, [r7, #4]
 810f62a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810f62c:	68fb      	ldr	r3, [r7, #12]
 810f62e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810f630:	68bb      	ldr	r3, [r7, #8]
 810f632:	2b05      	cmp	r3, #5
 810f634:	dc18      	bgt.n	810f668 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810f636:	f7ff fead 	bl	810f394 <xTaskGetSchedulerState>
 810f63a:	4603      	mov	r3, r0
 810f63c:	2b02      	cmp	r3, #2
 810f63e:	d109      	bne.n	810f654 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810f640:	4b10      	ldr	r3, [pc, #64]	@ (810f684 <xTimerGenericCommand+0x98>)
 810f642:	6818      	ldr	r0, [r3, #0]
 810f644:	f107 0110 	add.w	r1, r7, #16
 810f648:	2300      	movs	r3, #0
 810f64a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f64c:	f7fe fc88 	bl	810df60 <xQueueGenericSend>
 810f650:	6278      	str	r0, [r7, #36]	@ 0x24
 810f652:	e012      	b.n	810f67a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810f654:	4b0b      	ldr	r3, [pc, #44]	@ (810f684 <xTimerGenericCommand+0x98>)
 810f656:	6818      	ldr	r0, [r3, #0]
 810f658:	f107 0110 	add.w	r1, r7, #16
 810f65c:	2300      	movs	r3, #0
 810f65e:	2200      	movs	r2, #0
 810f660:	f7fe fc7e 	bl	810df60 <xQueueGenericSend>
 810f664:	6278      	str	r0, [r7, #36]	@ 0x24
 810f666:	e008      	b.n	810f67a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810f668:	4b06      	ldr	r3, [pc, #24]	@ (810f684 <xTimerGenericCommand+0x98>)
 810f66a:	6818      	ldr	r0, [r3, #0]
 810f66c:	f107 0110 	add.w	r1, r7, #16
 810f670:	2300      	movs	r3, #0
 810f672:	683a      	ldr	r2, [r7, #0]
 810f674:	f7fe fd76 	bl	810e164 <xQueueGenericSendFromISR>
 810f678:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810f67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810f67c:	4618      	mov	r0, r3
 810f67e:	3728      	adds	r7, #40	@ 0x28
 810f680:	46bd      	mov	sp, r7
 810f682:	bd80      	pop	{r7, pc}
 810f684:	1000556c 	.word	0x1000556c

0810f688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810f688:	b580      	push	{r7, lr}
 810f68a:	b088      	sub	sp, #32
 810f68c:	af02      	add	r7, sp, #8
 810f68e:	6078      	str	r0, [r7, #4]
 810f690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f692:	4b23      	ldr	r3, [pc, #140]	@ (810f720 <prvProcessExpiredTimer+0x98>)
 810f694:	681b      	ldr	r3, [r3, #0]
 810f696:	68db      	ldr	r3, [r3, #12]
 810f698:	68db      	ldr	r3, [r3, #12]
 810f69a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f69c:	697b      	ldr	r3, [r7, #20]
 810f69e:	3304      	adds	r3, #4
 810f6a0:	4618      	mov	r0, r3
 810f6a2:	f7fe f8d9 	bl	810d858 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f6a6:	697b      	ldr	r3, [r7, #20]
 810f6a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f6ac:	f003 0304 	and.w	r3, r3, #4
 810f6b0:	2b00      	cmp	r3, #0
 810f6b2:	d023      	beq.n	810f6fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810f6b4:	697b      	ldr	r3, [r7, #20]
 810f6b6:	699a      	ldr	r2, [r3, #24]
 810f6b8:	687b      	ldr	r3, [r7, #4]
 810f6ba:	18d1      	adds	r1, r2, r3
 810f6bc:	687b      	ldr	r3, [r7, #4]
 810f6be:	683a      	ldr	r2, [r7, #0]
 810f6c0:	6978      	ldr	r0, [r7, #20]
 810f6c2:	f000 f8d5 	bl	810f870 <prvInsertTimerInActiveList>
 810f6c6:	4603      	mov	r3, r0
 810f6c8:	2b00      	cmp	r3, #0
 810f6ca:	d020      	beq.n	810f70e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810f6cc:	2300      	movs	r3, #0
 810f6ce:	9300      	str	r3, [sp, #0]
 810f6d0:	2300      	movs	r3, #0
 810f6d2:	687a      	ldr	r2, [r7, #4]
 810f6d4:	2100      	movs	r1, #0
 810f6d6:	6978      	ldr	r0, [r7, #20]
 810f6d8:	f7ff ff88 	bl	810f5ec <xTimerGenericCommand>
 810f6dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810f6de:	693b      	ldr	r3, [r7, #16]
 810f6e0:	2b00      	cmp	r3, #0
 810f6e2:	d114      	bne.n	810f70e <prvProcessExpiredTimer+0x86>
	__asm volatile
 810f6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f6e8:	f383 8811 	msr	BASEPRI, r3
 810f6ec:	f3bf 8f6f 	isb	sy
 810f6f0:	f3bf 8f4f 	dsb	sy
 810f6f4:	60fb      	str	r3, [r7, #12]
}
 810f6f6:	bf00      	nop
 810f6f8:	bf00      	nop
 810f6fa:	e7fd      	b.n	810f6f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f6fc:	697b      	ldr	r3, [r7, #20]
 810f6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f702:	f023 0301 	bic.w	r3, r3, #1
 810f706:	b2da      	uxtb	r2, r3
 810f708:	697b      	ldr	r3, [r7, #20]
 810f70a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f70e:	697b      	ldr	r3, [r7, #20]
 810f710:	6a1b      	ldr	r3, [r3, #32]
 810f712:	6978      	ldr	r0, [r7, #20]
 810f714:	4798      	blx	r3
}
 810f716:	bf00      	nop
 810f718:	3718      	adds	r7, #24
 810f71a:	46bd      	mov	sp, r7
 810f71c:	bd80      	pop	{r7, pc}
 810f71e:	bf00      	nop
 810f720:	10005564 	.word	0x10005564

0810f724 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810f724:	b580      	push	{r7, lr}
 810f726:	b084      	sub	sp, #16
 810f728:	af00      	add	r7, sp, #0
 810f72a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810f72c:	f107 0308 	add.w	r3, r7, #8
 810f730:	4618      	mov	r0, r3
 810f732:	f000 f859 	bl	810f7e8 <prvGetNextExpireTime>
 810f736:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810f738:	68bb      	ldr	r3, [r7, #8]
 810f73a:	4619      	mov	r1, r3
 810f73c:	68f8      	ldr	r0, [r7, #12]
 810f73e:	f000 f805 	bl	810f74c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810f742:	f000 f8d7 	bl	810f8f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810f746:	bf00      	nop
 810f748:	e7f0      	b.n	810f72c <prvTimerTask+0x8>
	...

0810f74c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810f74c:	b580      	push	{r7, lr}
 810f74e:	b084      	sub	sp, #16
 810f750:	af00      	add	r7, sp, #0
 810f752:	6078      	str	r0, [r7, #4]
 810f754:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810f756:	f7ff fa37 	bl	810ebc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810f75a:	f107 0308 	add.w	r3, r7, #8
 810f75e:	4618      	mov	r0, r3
 810f760:	f000 f866 	bl	810f830 <prvSampleTimeNow>
 810f764:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810f766:	68bb      	ldr	r3, [r7, #8]
 810f768:	2b00      	cmp	r3, #0
 810f76a:	d130      	bne.n	810f7ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810f76c:	683b      	ldr	r3, [r7, #0]
 810f76e:	2b00      	cmp	r3, #0
 810f770:	d10a      	bne.n	810f788 <prvProcessTimerOrBlockTask+0x3c>
 810f772:	687a      	ldr	r2, [r7, #4]
 810f774:	68fb      	ldr	r3, [r7, #12]
 810f776:	429a      	cmp	r2, r3
 810f778:	d806      	bhi.n	810f788 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810f77a:	f7ff fa33 	bl	810ebe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810f77e:	68f9      	ldr	r1, [r7, #12]
 810f780:	6878      	ldr	r0, [r7, #4]
 810f782:	f7ff ff81 	bl	810f688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810f786:	e024      	b.n	810f7d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810f788:	683b      	ldr	r3, [r7, #0]
 810f78a:	2b00      	cmp	r3, #0
 810f78c:	d008      	beq.n	810f7a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810f78e:	4b13      	ldr	r3, [pc, #76]	@ (810f7dc <prvProcessTimerOrBlockTask+0x90>)
 810f790:	681b      	ldr	r3, [r3, #0]
 810f792:	681b      	ldr	r3, [r3, #0]
 810f794:	2b00      	cmp	r3, #0
 810f796:	d101      	bne.n	810f79c <prvProcessTimerOrBlockTask+0x50>
 810f798:	2301      	movs	r3, #1
 810f79a:	e000      	b.n	810f79e <prvProcessTimerOrBlockTask+0x52>
 810f79c:	2300      	movs	r3, #0
 810f79e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810f7a0:	4b0f      	ldr	r3, [pc, #60]	@ (810f7e0 <prvProcessTimerOrBlockTask+0x94>)
 810f7a2:	6818      	ldr	r0, [r3, #0]
 810f7a4:	687a      	ldr	r2, [r7, #4]
 810f7a6:	68fb      	ldr	r3, [r7, #12]
 810f7a8:	1ad3      	subs	r3, r2, r3
 810f7aa:	683a      	ldr	r2, [r7, #0]
 810f7ac:	4619      	mov	r1, r3
 810f7ae:	f7fe ff93 	bl	810e6d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810f7b2:	f7ff fa17 	bl	810ebe4 <xTaskResumeAll>
 810f7b6:	4603      	mov	r3, r0
 810f7b8:	2b00      	cmp	r3, #0
 810f7ba:	d10a      	bne.n	810f7d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810f7bc:	4b09      	ldr	r3, [pc, #36]	@ (810f7e4 <prvProcessTimerOrBlockTask+0x98>)
 810f7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f7c2:	601a      	str	r2, [r3, #0]
 810f7c4:	f3bf 8f4f 	dsb	sy
 810f7c8:	f3bf 8f6f 	isb	sy
}
 810f7cc:	e001      	b.n	810f7d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810f7ce:	f7ff fa09 	bl	810ebe4 <xTaskResumeAll>
}
 810f7d2:	bf00      	nop
 810f7d4:	3710      	adds	r7, #16
 810f7d6:	46bd      	mov	sp, r7
 810f7d8:	bd80      	pop	{r7, pc}
 810f7da:	bf00      	nop
 810f7dc:	10005568 	.word	0x10005568
 810f7e0:	1000556c 	.word	0x1000556c
 810f7e4:	e000ed04 	.word	0xe000ed04

0810f7e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810f7e8:	b480      	push	{r7}
 810f7ea:	b085      	sub	sp, #20
 810f7ec:	af00      	add	r7, sp, #0
 810f7ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810f7f0:	4b0e      	ldr	r3, [pc, #56]	@ (810f82c <prvGetNextExpireTime+0x44>)
 810f7f2:	681b      	ldr	r3, [r3, #0]
 810f7f4:	681b      	ldr	r3, [r3, #0]
 810f7f6:	2b00      	cmp	r3, #0
 810f7f8:	d101      	bne.n	810f7fe <prvGetNextExpireTime+0x16>
 810f7fa:	2201      	movs	r2, #1
 810f7fc:	e000      	b.n	810f800 <prvGetNextExpireTime+0x18>
 810f7fe:	2200      	movs	r2, #0
 810f800:	687b      	ldr	r3, [r7, #4]
 810f802:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810f804:	687b      	ldr	r3, [r7, #4]
 810f806:	681b      	ldr	r3, [r3, #0]
 810f808:	2b00      	cmp	r3, #0
 810f80a:	d105      	bne.n	810f818 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810f80c:	4b07      	ldr	r3, [pc, #28]	@ (810f82c <prvGetNextExpireTime+0x44>)
 810f80e:	681b      	ldr	r3, [r3, #0]
 810f810:	68db      	ldr	r3, [r3, #12]
 810f812:	681b      	ldr	r3, [r3, #0]
 810f814:	60fb      	str	r3, [r7, #12]
 810f816:	e001      	b.n	810f81c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810f818:	2300      	movs	r3, #0
 810f81a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810f81c:	68fb      	ldr	r3, [r7, #12]
}
 810f81e:	4618      	mov	r0, r3
 810f820:	3714      	adds	r7, #20
 810f822:	46bd      	mov	sp, r7
 810f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f828:	4770      	bx	lr
 810f82a:	bf00      	nop
 810f82c:	10005564 	.word	0x10005564

0810f830 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810f830:	b580      	push	{r7, lr}
 810f832:	b084      	sub	sp, #16
 810f834:	af00      	add	r7, sp, #0
 810f836:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810f838:	f7ff fa72 	bl	810ed20 <xTaskGetTickCount>
 810f83c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810f83e:	4b0b      	ldr	r3, [pc, #44]	@ (810f86c <prvSampleTimeNow+0x3c>)
 810f840:	681b      	ldr	r3, [r3, #0]
 810f842:	68fa      	ldr	r2, [r7, #12]
 810f844:	429a      	cmp	r2, r3
 810f846:	d205      	bcs.n	810f854 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810f848:	f000 f93a 	bl	810fac0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810f84c:	687b      	ldr	r3, [r7, #4]
 810f84e:	2201      	movs	r2, #1
 810f850:	601a      	str	r2, [r3, #0]
 810f852:	e002      	b.n	810f85a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810f854:	687b      	ldr	r3, [r7, #4]
 810f856:	2200      	movs	r2, #0
 810f858:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810f85a:	4a04      	ldr	r2, [pc, #16]	@ (810f86c <prvSampleTimeNow+0x3c>)
 810f85c:	68fb      	ldr	r3, [r7, #12]
 810f85e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810f860:	68fb      	ldr	r3, [r7, #12]
}
 810f862:	4618      	mov	r0, r3
 810f864:	3710      	adds	r7, #16
 810f866:	46bd      	mov	sp, r7
 810f868:	bd80      	pop	{r7, pc}
 810f86a:	bf00      	nop
 810f86c:	10005574 	.word	0x10005574

0810f870 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810f870:	b580      	push	{r7, lr}
 810f872:	b086      	sub	sp, #24
 810f874:	af00      	add	r7, sp, #0
 810f876:	60f8      	str	r0, [r7, #12]
 810f878:	60b9      	str	r1, [r7, #8]
 810f87a:	607a      	str	r2, [r7, #4]
 810f87c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810f87e:	2300      	movs	r3, #0
 810f880:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810f882:	68fb      	ldr	r3, [r7, #12]
 810f884:	68ba      	ldr	r2, [r7, #8]
 810f886:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810f888:	68fb      	ldr	r3, [r7, #12]
 810f88a:	68fa      	ldr	r2, [r7, #12]
 810f88c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810f88e:	68ba      	ldr	r2, [r7, #8]
 810f890:	687b      	ldr	r3, [r7, #4]
 810f892:	429a      	cmp	r2, r3
 810f894:	d812      	bhi.n	810f8bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f896:	687a      	ldr	r2, [r7, #4]
 810f898:	683b      	ldr	r3, [r7, #0]
 810f89a:	1ad2      	subs	r2, r2, r3
 810f89c:	68fb      	ldr	r3, [r7, #12]
 810f89e:	699b      	ldr	r3, [r3, #24]
 810f8a0:	429a      	cmp	r2, r3
 810f8a2:	d302      	bcc.n	810f8aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810f8a4:	2301      	movs	r3, #1
 810f8a6:	617b      	str	r3, [r7, #20]
 810f8a8:	e01b      	b.n	810f8e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810f8aa:	4b10      	ldr	r3, [pc, #64]	@ (810f8ec <prvInsertTimerInActiveList+0x7c>)
 810f8ac:	681a      	ldr	r2, [r3, #0]
 810f8ae:	68fb      	ldr	r3, [r7, #12]
 810f8b0:	3304      	adds	r3, #4
 810f8b2:	4619      	mov	r1, r3
 810f8b4:	4610      	mov	r0, r2
 810f8b6:	f7fd ff96 	bl	810d7e6 <vListInsert>
 810f8ba:	e012      	b.n	810f8e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810f8bc:	687a      	ldr	r2, [r7, #4]
 810f8be:	683b      	ldr	r3, [r7, #0]
 810f8c0:	429a      	cmp	r2, r3
 810f8c2:	d206      	bcs.n	810f8d2 <prvInsertTimerInActiveList+0x62>
 810f8c4:	68ba      	ldr	r2, [r7, #8]
 810f8c6:	683b      	ldr	r3, [r7, #0]
 810f8c8:	429a      	cmp	r2, r3
 810f8ca:	d302      	bcc.n	810f8d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810f8cc:	2301      	movs	r3, #1
 810f8ce:	617b      	str	r3, [r7, #20]
 810f8d0:	e007      	b.n	810f8e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810f8d2:	4b07      	ldr	r3, [pc, #28]	@ (810f8f0 <prvInsertTimerInActiveList+0x80>)
 810f8d4:	681a      	ldr	r2, [r3, #0]
 810f8d6:	68fb      	ldr	r3, [r7, #12]
 810f8d8:	3304      	adds	r3, #4
 810f8da:	4619      	mov	r1, r3
 810f8dc:	4610      	mov	r0, r2
 810f8de:	f7fd ff82 	bl	810d7e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 810f8e2:	697b      	ldr	r3, [r7, #20]
}
 810f8e4:	4618      	mov	r0, r3
 810f8e6:	3718      	adds	r7, #24
 810f8e8:	46bd      	mov	sp, r7
 810f8ea:	bd80      	pop	{r7, pc}
 810f8ec:	10005568 	.word	0x10005568
 810f8f0:	10005564 	.word	0x10005564

0810f8f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810f8f4:	b580      	push	{r7, lr}
 810f8f6:	b08e      	sub	sp, #56	@ 0x38
 810f8f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810f8fa:	e0ce      	b.n	810fa9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810f8fc:	687b      	ldr	r3, [r7, #4]
 810f8fe:	2b00      	cmp	r3, #0
 810f900:	da19      	bge.n	810f936 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810f902:	1d3b      	adds	r3, r7, #4
 810f904:	3304      	adds	r3, #4
 810f906:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810f908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f90a:	2b00      	cmp	r3, #0
 810f90c:	d10b      	bne.n	810f926 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810f90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f912:	f383 8811 	msr	BASEPRI, r3
 810f916:	f3bf 8f6f 	isb	sy
 810f91a:	f3bf 8f4f 	dsb	sy
 810f91e:	61fb      	str	r3, [r7, #28]
}
 810f920:	bf00      	nop
 810f922:	bf00      	nop
 810f924:	e7fd      	b.n	810f922 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810f926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f928:	681b      	ldr	r3, [r3, #0]
 810f92a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f92c:	6850      	ldr	r0, [r2, #4]
 810f92e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f930:	6892      	ldr	r2, [r2, #8]
 810f932:	4611      	mov	r1, r2
 810f934:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810f936:	687b      	ldr	r3, [r7, #4]
 810f938:	2b00      	cmp	r3, #0
 810f93a:	f2c0 80ae 	blt.w	810fa9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810f93e:	68fb      	ldr	r3, [r7, #12]
 810f940:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810f942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f944:	695b      	ldr	r3, [r3, #20]
 810f946:	2b00      	cmp	r3, #0
 810f948:	d004      	beq.n	810f954 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f94c:	3304      	adds	r3, #4
 810f94e:	4618      	mov	r0, r3
 810f950:	f7fd ff82 	bl	810d858 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810f954:	463b      	mov	r3, r7
 810f956:	4618      	mov	r0, r3
 810f958:	f7ff ff6a 	bl	810f830 <prvSampleTimeNow>
 810f95c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810f95e:	687b      	ldr	r3, [r7, #4]
 810f960:	2b09      	cmp	r3, #9
 810f962:	f200 8097 	bhi.w	810fa94 <prvProcessReceivedCommands+0x1a0>
 810f966:	a201      	add	r2, pc, #4	@ (adr r2, 810f96c <prvProcessReceivedCommands+0x78>)
 810f968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f96c:	0810f995 	.word	0x0810f995
 810f970:	0810f995 	.word	0x0810f995
 810f974:	0810f995 	.word	0x0810f995
 810f978:	0810fa0b 	.word	0x0810fa0b
 810f97c:	0810fa1f 	.word	0x0810fa1f
 810f980:	0810fa6b 	.word	0x0810fa6b
 810f984:	0810f995 	.word	0x0810f995
 810f988:	0810f995 	.word	0x0810f995
 810f98c:	0810fa0b 	.word	0x0810fa0b
 810f990:	0810fa1f 	.word	0x0810fa1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810f994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f99a:	f043 0301 	orr.w	r3, r3, #1
 810f99e:	b2da      	uxtb	r2, r3
 810f9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f9a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810f9a6:	68ba      	ldr	r2, [r7, #8]
 810f9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f9aa:	699b      	ldr	r3, [r3, #24]
 810f9ac:	18d1      	adds	r1, r2, r3
 810f9ae:	68bb      	ldr	r3, [r7, #8]
 810f9b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810f9b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f9b4:	f7ff ff5c 	bl	810f870 <prvInsertTimerInActiveList>
 810f9b8:	4603      	mov	r3, r0
 810f9ba:	2b00      	cmp	r3, #0
 810f9bc:	d06c      	beq.n	810fa98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f9c0:	6a1b      	ldr	r3, [r3, #32]
 810f9c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f9c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810f9cc:	f003 0304 	and.w	r3, r3, #4
 810f9d0:	2b00      	cmp	r3, #0
 810f9d2:	d061      	beq.n	810fa98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810f9d4:	68ba      	ldr	r2, [r7, #8]
 810f9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f9d8:	699b      	ldr	r3, [r3, #24]
 810f9da:	441a      	add	r2, r3
 810f9dc:	2300      	movs	r3, #0
 810f9de:	9300      	str	r3, [sp, #0]
 810f9e0:	2300      	movs	r3, #0
 810f9e2:	2100      	movs	r1, #0
 810f9e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f9e6:	f7ff fe01 	bl	810f5ec <xTimerGenericCommand>
 810f9ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810f9ec:	6a3b      	ldr	r3, [r7, #32]
 810f9ee:	2b00      	cmp	r3, #0
 810f9f0:	d152      	bne.n	810fa98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810f9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f9f6:	f383 8811 	msr	BASEPRI, r3
 810f9fa:	f3bf 8f6f 	isb	sy
 810f9fe:	f3bf 8f4f 	dsb	sy
 810fa02:	61bb      	str	r3, [r7, #24]
}
 810fa04:	bf00      	nop
 810fa06:	bf00      	nop
 810fa08:	e7fd      	b.n	810fa06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810fa0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810fa10:	f023 0301 	bic.w	r3, r3, #1
 810fa14:	b2da      	uxtb	r2, r3
 810fa16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810fa1c:	e03d      	b.n	810fa9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810fa1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810fa24:	f043 0301 	orr.w	r3, r3, #1
 810fa28:	b2da      	uxtb	r2, r3
 810fa2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810fa30:	68ba      	ldr	r2, [r7, #8]
 810fa32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810fa36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa38:	699b      	ldr	r3, [r3, #24]
 810fa3a:	2b00      	cmp	r3, #0
 810fa3c:	d10b      	bne.n	810fa56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810fa3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fa42:	f383 8811 	msr	BASEPRI, r3
 810fa46:	f3bf 8f6f 	isb	sy
 810fa4a:	f3bf 8f4f 	dsb	sy
 810fa4e:	617b      	str	r3, [r7, #20]
}
 810fa50:	bf00      	nop
 810fa52:	bf00      	nop
 810fa54:	e7fd      	b.n	810fa52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810fa56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa58:	699a      	ldr	r2, [r3, #24]
 810fa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fa5c:	18d1      	adds	r1, r2, r3
 810fa5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fa60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810fa62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810fa64:	f7ff ff04 	bl	810f870 <prvInsertTimerInActiveList>
					break;
 810fa68:	e017      	b.n	810fa9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810fa6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810fa70:	f003 0302 	and.w	r3, r3, #2
 810fa74:	2b00      	cmp	r3, #0
 810fa76:	d103      	bne.n	810fa80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810fa78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810fa7a:	f7fd fd43 	bl	810d504 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810fa7e:	e00c      	b.n	810fa9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810fa80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810fa86:	f023 0301 	bic.w	r3, r3, #1
 810fa8a:	b2da      	uxtb	r2, r3
 810fa8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810fa92:	e002      	b.n	810fa9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810fa94:	bf00      	nop
 810fa96:	e000      	b.n	810fa9a <prvProcessReceivedCommands+0x1a6>
					break;
 810fa98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810fa9a:	4b08      	ldr	r3, [pc, #32]	@ (810fabc <prvProcessReceivedCommands+0x1c8>)
 810fa9c:	681b      	ldr	r3, [r3, #0]
 810fa9e:	1d39      	adds	r1, r7, #4
 810faa0:	2200      	movs	r2, #0
 810faa2:	4618      	mov	r0, r3
 810faa4:	f7fe fbfc 	bl	810e2a0 <xQueueReceive>
 810faa8:	4603      	mov	r3, r0
 810faaa:	2b00      	cmp	r3, #0
 810faac:	f47f af26 	bne.w	810f8fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810fab0:	bf00      	nop
 810fab2:	bf00      	nop
 810fab4:	3730      	adds	r7, #48	@ 0x30
 810fab6:	46bd      	mov	sp, r7
 810fab8:	bd80      	pop	{r7, pc}
 810faba:	bf00      	nop
 810fabc:	1000556c 	.word	0x1000556c

0810fac0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810fac0:	b580      	push	{r7, lr}
 810fac2:	b088      	sub	sp, #32
 810fac4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810fac6:	e049      	b.n	810fb5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810fac8:	4b2e      	ldr	r3, [pc, #184]	@ (810fb84 <prvSwitchTimerLists+0xc4>)
 810faca:	681b      	ldr	r3, [r3, #0]
 810facc:	68db      	ldr	r3, [r3, #12]
 810face:	681b      	ldr	r3, [r3, #0]
 810fad0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810fad2:	4b2c      	ldr	r3, [pc, #176]	@ (810fb84 <prvSwitchTimerLists+0xc4>)
 810fad4:	681b      	ldr	r3, [r3, #0]
 810fad6:	68db      	ldr	r3, [r3, #12]
 810fad8:	68db      	ldr	r3, [r3, #12]
 810fada:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810fadc:	68fb      	ldr	r3, [r7, #12]
 810fade:	3304      	adds	r3, #4
 810fae0:	4618      	mov	r0, r3
 810fae2:	f7fd feb9 	bl	810d858 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810fae6:	68fb      	ldr	r3, [r7, #12]
 810fae8:	6a1b      	ldr	r3, [r3, #32]
 810faea:	68f8      	ldr	r0, [r7, #12]
 810faec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810faee:	68fb      	ldr	r3, [r7, #12]
 810faf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810faf4:	f003 0304 	and.w	r3, r3, #4
 810faf8:	2b00      	cmp	r3, #0
 810fafa:	d02f      	beq.n	810fb5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810fafc:	68fb      	ldr	r3, [r7, #12]
 810fafe:	699b      	ldr	r3, [r3, #24]
 810fb00:	693a      	ldr	r2, [r7, #16]
 810fb02:	4413      	add	r3, r2
 810fb04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810fb06:	68ba      	ldr	r2, [r7, #8]
 810fb08:	693b      	ldr	r3, [r7, #16]
 810fb0a:	429a      	cmp	r2, r3
 810fb0c:	d90e      	bls.n	810fb2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810fb0e:	68fb      	ldr	r3, [r7, #12]
 810fb10:	68ba      	ldr	r2, [r7, #8]
 810fb12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810fb14:	68fb      	ldr	r3, [r7, #12]
 810fb16:	68fa      	ldr	r2, [r7, #12]
 810fb18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810fb1a:	4b1a      	ldr	r3, [pc, #104]	@ (810fb84 <prvSwitchTimerLists+0xc4>)
 810fb1c:	681a      	ldr	r2, [r3, #0]
 810fb1e:	68fb      	ldr	r3, [r7, #12]
 810fb20:	3304      	adds	r3, #4
 810fb22:	4619      	mov	r1, r3
 810fb24:	4610      	mov	r0, r2
 810fb26:	f7fd fe5e 	bl	810d7e6 <vListInsert>
 810fb2a:	e017      	b.n	810fb5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810fb2c:	2300      	movs	r3, #0
 810fb2e:	9300      	str	r3, [sp, #0]
 810fb30:	2300      	movs	r3, #0
 810fb32:	693a      	ldr	r2, [r7, #16]
 810fb34:	2100      	movs	r1, #0
 810fb36:	68f8      	ldr	r0, [r7, #12]
 810fb38:	f7ff fd58 	bl	810f5ec <xTimerGenericCommand>
 810fb3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810fb3e:	687b      	ldr	r3, [r7, #4]
 810fb40:	2b00      	cmp	r3, #0
 810fb42:	d10b      	bne.n	810fb5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 810fb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fb48:	f383 8811 	msr	BASEPRI, r3
 810fb4c:	f3bf 8f6f 	isb	sy
 810fb50:	f3bf 8f4f 	dsb	sy
 810fb54:	603b      	str	r3, [r7, #0]
}
 810fb56:	bf00      	nop
 810fb58:	bf00      	nop
 810fb5a:	e7fd      	b.n	810fb58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810fb5c:	4b09      	ldr	r3, [pc, #36]	@ (810fb84 <prvSwitchTimerLists+0xc4>)
 810fb5e:	681b      	ldr	r3, [r3, #0]
 810fb60:	681b      	ldr	r3, [r3, #0]
 810fb62:	2b00      	cmp	r3, #0
 810fb64:	d1b0      	bne.n	810fac8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810fb66:	4b07      	ldr	r3, [pc, #28]	@ (810fb84 <prvSwitchTimerLists+0xc4>)
 810fb68:	681b      	ldr	r3, [r3, #0]
 810fb6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810fb6c:	4b06      	ldr	r3, [pc, #24]	@ (810fb88 <prvSwitchTimerLists+0xc8>)
 810fb6e:	681b      	ldr	r3, [r3, #0]
 810fb70:	4a04      	ldr	r2, [pc, #16]	@ (810fb84 <prvSwitchTimerLists+0xc4>)
 810fb72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810fb74:	4a04      	ldr	r2, [pc, #16]	@ (810fb88 <prvSwitchTimerLists+0xc8>)
 810fb76:	697b      	ldr	r3, [r7, #20]
 810fb78:	6013      	str	r3, [r2, #0]
}
 810fb7a:	bf00      	nop
 810fb7c:	3718      	adds	r7, #24
 810fb7e:	46bd      	mov	sp, r7
 810fb80:	bd80      	pop	{r7, pc}
 810fb82:	bf00      	nop
 810fb84:	10005564 	.word	0x10005564
 810fb88:	10005568 	.word	0x10005568

0810fb8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810fb8c:	b580      	push	{r7, lr}
 810fb8e:	b082      	sub	sp, #8
 810fb90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810fb92:	f7fd ffb9 	bl	810db08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810fb96:	4b15      	ldr	r3, [pc, #84]	@ (810fbec <prvCheckForValidListAndQueue+0x60>)
 810fb98:	681b      	ldr	r3, [r3, #0]
 810fb9a:	2b00      	cmp	r3, #0
 810fb9c:	d120      	bne.n	810fbe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810fb9e:	4814      	ldr	r0, [pc, #80]	@ (810fbf0 <prvCheckForValidListAndQueue+0x64>)
 810fba0:	f7fd fdd0 	bl	810d744 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810fba4:	4813      	ldr	r0, [pc, #76]	@ (810fbf4 <prvCheckForValidListAndQueue+0x68>)
 810fba6:	f7fd fdcd 	bl	810d744 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810fbaa:	4b13      	ldr	r3, [pc, #76]	@ (810fbf8 <prvCheckForValidListAndQueue+0x6c>)
 810fbac:	4a10      	ldr	r2, [pc, #64]	@ (810fbf0 <prvCheckForValidListAndQueue+0x64>)
 810fbae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810fbb0:	4b12      	ldr	r3, [pc, #72]	@ (810fbfc <prvCheckForValidListAndQueue+0x70>)
 810fbb2:	4a10      	ldr	r2, [pc, #64]	@ (810fbf4 <prvCheckForValidListAndQueue+0x68>)
 810fbb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810fbb6:	2300      	movs	r3, #0
 810fbb8:	9300      	str	r3, [sp, #0]
 810fbba:	4b11      	ldr	r3, [pc, #68]	@ (810fc00 <prvCheckForValidListAndQueue+0x74>)
 810fbbc:	4a11      	ldr	r2, [pc, #68]	@ (810fc04 <prvCheckForValidListAndQueue+0x78>)
 810fbbe:	2110      	movs	r1, #16
 810fbc0:	200a      	movs	r0, #10
 810fbc2:	f7fe f92d 	bl	810de20 <xQueueGenericCreateStatic>
 810fbc6:	4603      	mov	r3, r0
 810fbc8:	4a08      	ldr	r2, [pc, #32]	@ (810fbec <prvCheckForValidListAndQueue+0x60>)
 810fbca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810fbcc:	4b07      	ldr	r3, [pc, #28]	@ (810fbec <prvCheckForValidListAndQueue+0x60>)
 810fbce:	681b      	ldr	r3, [r3, #0]
 810fbd0:	2b00      	cmp	r3, #0
 810fbd2:	d005      	beq.n	810fbe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810fbd4:	4b05      	ldr	r3, [pc, #20]	@ (810fbec <prvCheckForValidListAndQueue+0x60>)
 810fbd6:	681b      	ldr	r3, [r3, #0]
 810fbd8:	490b      	ldr	r1, [pc, #44]	@ (810fc08 <prvCheckForValidListAndQueue+0x7c>)
 810fbda:	4618      	mov	r0, r3
 810fbdc:	f7fe fd52 	bl	810e684 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810fbe0:	f7fd ffc4 	bl	810db6c <vPortExitCritical>
}
 810fbe4:	bf00      	nop
 810fbe6:	46bd      	mov	sp, r7
 810fbe8:	bd80      	pop	{r7, pc}
 810fbea:	bf00      	nop
 810fbec:	1000556c 	.word	0x1000556c
 810fbf0:	1000553c 	.word	0x1000553c
 810fbf4:	10005550 	.word	0x10005550
 810fbf8:	10005564 	.word	0x10005564
 810fbfc:	10005568 	.word	0x10005568
 810fc00:	10005618 	.word	0x10005618
 810fc04:	10005578 	.word	0x10005578
 810fc08:	0810fcb4 	.word	0x0810fcb4

0810fc0c <memset>:
 810fc0c:	4402      	add	r2, r0
 810fc0e:	4603      	mov	r3, r0
 810fc10:	4293      	cmp	r3, r2
 810fc12:	d100      	bne.n	810fc16 <memset+0xa>
 810fc14:	4770      	bx	lr
 810fc16:	f803 1b01 	strb.w	r1, [r3], #1
 810fc1a:	e7f9      	b.n	810fc10 <memset+0x4>

0810fc1c <__libc_init_array>:
 810fc1c:	b570      	push	{r4, r5, r6, lr}
 810fc1e:	4d0d      	ldr	r5, [pc, #52]	@ (810fc54 <__libc_init_array+0x38>)
 810fc20:	4c0d      	ldr	r4, [pc, #52]	@ (810fc58 <__libc_init_array+0x3c>)
 810fc22:	1b64      	subs	r4, r4, r5
 810fc24:	10a4      	asrs	r4, r4, #2
 810fc26:	2600      	movs	r6, #0
 810fc28:	42a6      	cmp	r6, r4
 810fc2a:	d109      	bne.n	810fc40 <__libc_init_array+0x24>
 810fc2c:	4d0b      	ldr	r5, [pc, #44]	@ (810fc5c <__libc_init_array+0x40>)
 810fc2e:	4c0c      	ldr	r4, [pc, #48]	@ (810fc60 <__libc_init_array+0x44>)
 810fc30:	f000 f826 	bl	810fc80 <_init>
 810fc34:	1b64      	subs	r4, r4, r5
 810fc36:	10a4      	asrs	r4, r4, #2
 810fc38:	2600      	movs	r6, #0
 810fc3a:	42a6      	cmp	r6, r4
 810fc3c:	d105      	bne.n	810fc4a <__libc_init_array+0x2e>
 810fc3e:	bd70      	pop	{r4, r5, r6, pc}
 810fc40:	f855 3b04 	ldr.w	r3, [r5], #4
 810fc44:	4798      	blx	r3
 810fc46:	3601      	adds	r6, #1
 810fc48:	e7ee      	b.n	810fc28 <__libc_init_array+0xc>
 810fc4a:	f855 3b04 	ldr.w	r3, [r5], #4
 810fc4e:	4798      	blx	r3
 810fc50:	3601      	adds	r6, #1
 810fc52:	e7f2      	b.n	810fc3a <__libc_init_array+0x1e>
 810fc54:	0810fd20 	.word	0x0810fd20
 810fc58:	0810fd20 	.word	0x0810fd20
 810fc5c:	0810fd20 	.word	0x0810fd20
 810fc60:	0810fd24 	.word	0x0810fd24

0810fc64 <memcpy>:
 810fc64:	440a      	add	r2, r1
 810fc66:	4291      	cmp	r1, r2
 810fc68:	f100 33ff 	add.w	r3, r0, #4294967295
 810fc6c:	d100      	bne.n	810fc70 <memcpy+0xc>
 810fc6e:	4770      	bx	lr
 810fc70:	b510      	push	{r4, lr}
 810fc72:	f811 4b01 	ldrb.w	r4, [r1], #1
 810fc76:	f803 4f01 	strb.w	r4, [r3, #1]!
 810fc7a:	4291      	cmp	r1, r2
 810fc7c:	d1f9      	bne.n	810fc72 <memcpy+0xe>
 810fc7e:	bd10      	pop	{r4, pc}

0810fc80 <_init>:
 810fc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810fc82:	bf00      	nop
 810fc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810fc86:	bc08      	pop	{r3}
 810fc88:	469e      	mov	lr, r3
 810fc8a:	4770      	bx	lr

0810fc8c <_fini>:
 810fc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810fc8e:	bf00      	nop
 810fc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810fc92:	bc08      	pop	{r3}
 810fc94:	469e      	mov	lr, r3
 810fc96:	4770      	bx	lr
