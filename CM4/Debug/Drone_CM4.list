
Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008704  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  081089a4  081089a4  000099a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08108ad8  08108ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08108ae0  08108ae0  00009ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08108ae4  08108ae4  00009ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  10000000  08108ae8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc4  1000006c  08108b54  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000e30  08108b54  0000ae30  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029381  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005129  00000000  00000000  0003341d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002230  00000000  00000000  00038548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a86  00000000  00000000  0003a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004743f  00000000  00000000  0003c1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c5d6  00000000  00000000  0008363d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001c0cc2  00000000  00000000  000afc13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002708d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009970  00000000  00000000  00270918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0027a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000006c 	.word	0x1000006c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810898c 	.word	0x0810898c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000070 	.word	0x10000070
 81002dc:	0810898c 	.word	0x0810898c

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <CriticalErrorHandler>:
    if (fromMax == fromMin)
        return toMin;
    return toMin + ((v - fromMin) / (fromMax - fromMin)) * (toMax - toMin);
}

void CriticalErrorHandler (void) {
 8100380:	b480      	push	{r7}
 8100382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100384:	b672      	cpsid	i
}
 8100386:	bf00      	nop
    __disable_irq ();
    while (1)
 8100388:	bf00      	nop
 810038a:	e7fd      	b.n	8100388 <CriticalErrorHandler+0x8>

0810038c <__assert_func>:
        ;
}

void __assert_func (const char* file, int line, const char* func, const char* failedexpr) {
 810038c:	b580      	push	{r7, lr}
 810038e:	b084      	sub	sp, #16
 8100390:	af00      	add	r7, sp, #0
 8100392:	60f8      	str	r0, [r7, #12]
 8100394:	60b9      	str	r1, [r7, #8]
 8100396:	607a      	str	r2, [r7, #4]
 8100398:	603b      	str	r3, [r7, #0]
    __BKPT (1);
 810039a:	be01      	bkpt	0x0001
    // asm volatile ("bkpt 1");
    CriticalErrorHandler ();
 810039c:	f7ff fff0 	bl	8100380 <CriticalErrorHandler>
 81003a0:	bf00      	nop
 81003a2:	3710      	adds	r7, #16
 81003a4:	46bd      	mov	sp, r7
 81003a6:	bd80      	pop	{r7, pc}

081003a8 <__io_putchar>:
UART_HandleTypeDef* pUART;

static STATUS_TYPE LoggerSyncUARTTaskHandler (void);
static STATUS_TYPE LoggerWriteToUART (RingBuff volatile* pBuff);

PUTCHAR_PROTOTYPE {
 81003a8:	b580      	push	{r7, lr}
 81003aa:	b084      	sub	sp, #16
 81003ac:	af00      	add	r7, sp, #0
 81003ae:	6078      	str	r0, [r7, #4]
    if (HAL_GetCurrentCPUID () == CM7_CPUID) {
 81003b0:	f002 f89a 	bl	81024e8 <HAL_GetCurrentCPUID>
 81003b4:	4603      	mov	r3, r0
 81003b6:	2b03      	cmp	r3, #3
 81003b8:	d11e      	bne.n	81003f8 <__io_putchar+0x50>
        RingBuffWrite (pCM7RingBuf, (void*)&ch, 1);
 81003ba:	4b23      	ldr	r3, [pc, #140]	@ (8100448 <__io_putchar+0xa0>)
 81003bc:	681b      	ldr	r3, [r3, #0]
 81003be:	1d39      	adds	r1, r7, #4
 81003c0:	2201      	movs	r2, #1
 81003c2:	4618      	mov	r0, r3
 81003c4:	f000 f94a 	bl	810065c <RingBuffWrite>
        ASSERT (RingBuffIsValid (pCM7RingBuf) == 1);
 81003c8:	4b1f      	ldr	r3, [pc, #124]	@ (8100448 <__io_putchar+0xa0>)
 81003ca:	681b      	ldr	r3, [r3, #0]
 81003cc:	4618      	mov	r0, r3
 81003ce:	f000 f91d 	bl	810060c <RingBuffIsValid>
 81003d2:	4603      	mov	r3, r0
 81003d4:	2b01      	cmp	r3, #1
 81003d6:	d005      	beq.n	81003e4 <__io_putchar+0x3c>
 81003d8:	4b1c      	ldr	r3, [pc, #112]	@ (810044c <__io_putchar+0xa4>)
 81003da:	4a1d      	ldr	r2, [pc, #116]	@ (8100450 <__io_putchar+0xa8>)
 81003dc:	211a      	movs	r1, #26
 81003de:	481d      	ldr	r0, [pc, #116]	@ (8100454 <__io_putchar+0xac>)
 81003e0:	f7ff ffd4 	bl	810038c <__assert_func>
        if ((char)ch == '\n') {
 81003e4:	687b      	ldr	r3, [r7, #4]
 81003e6:	b2db      	uxtb	r3, r3
 81003e8:	2b0a      	cmp	r3, #10
 81003ea:	d127      	bne.n	810043c <__io_putchar+0x94>
            LoggerWriteToUART (pCM7RingBuf);
 81003ec:	4b16      	ldr	r3, [pc, #88]	@ (8100448 <__io_putchar+0xa0>)
 81003ee:	681b      	ldr	r3, [r3, #0]
 81003f0:	4618      	mov	r0, r3
 81003f2:	f000 f871 	bl	81004d8 <LoggerWriteToUART>
 81003f6:	e021      	b.n	810043c <__io_putchar+0x94>
        }
    } else {
        RingBuffWrite (pCM4RingBuf, (void*)&ch, 1);
 81003f8:	4b17      	ldr	r3, [pc, #92]	@ (8100458 <__io_putchar+0xb0>)
 81003fa:	681b      	ldr	r3, [r3, #0]
 81003fc:	1d39      	adds	r1, r7, #4
 81003fe:	2201      	movs	r2, #1
 8100400:	4618      	mov	r0, r3
 8100402:	f000 f92b 	bl	810065c <RingBuffWrite>
        ASSERT (RingBuffIsValid (pCM4RingBuf) == 1);
 8100406:	4b14      	ldr	r3, [pc, #80]	@ (8100458 <__io_putchar+0xb0>)
 8100408:	681b      	ldr	r3, [r3, #0]
 810040a:	4618      	mov	r0, r3
 810040c:	f000 f8fe 	bl	810060c <RingBuffIsValid>
 8100410:	4603      	mov	r3, r0
 8100412:	2b01      	cmp	r3, #1
 8100414:	d005      	beq.n	8100422 <__io_putchar+0x7a>
 8100416:	4b11      	ldr	r3, [pc, #68]	@ (810045c <__io_putchar+0xb4>)
 8100418:	4a0d      	ldr	r2, [pc, #52]	@ (8100450 <__io_putchar+0xa8>)
 810041a:	2120      	movs	r1, #32
 810041c:	480d      	ldr	r0, [pc, #52]	@ (8100454 <__io_putchar+0xac>)
 810041e:	f7ff ffb5 	bl	810038c <__assert_func>
        if ((char)ch == '\n') {
 8100422:	687b      	ldr	r3, [r7, #4]
 8100424:	b2db      	uxtb	r3, r3
 8100426:	2b0a      	cmp	r3, #10
 8100428:	d108      	bne.n	810043c <__io_putchar+0x94>
            /*
             * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
             */
            uint32_t taskID = SYNC_TASKID_UART_OUT;
 810042a:	2300      	movs	r3, #0
 810042c:	60fb      	str	r3, [r7, #12]
            SyncMailBoxWriteNotify (MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof (uint32_t));
 810042e:	f107 030c 	add.w	r3, r7, #12
 8100432:	2204      	movs	r2, #4
 8100434:	4619      	mov	r1, r3
 8100436:	2001      	movs	r0, #1
 8100438:	f000 fb0f 	bl	8100a5a <SyncMailBoxWriteNotify>
        }
    }
    return ch;
 810043c:	687b      	ldr	r3, [r7, #4]
}
 810043e:	4618      	mov	r0, r3
 8100440:	3710      	adds	r7, #16
 8100442:	46bd      	mov	sp, r7
 8100444:	bd80      	pop	{r7, pc}
 8100446:	bf00      	nop
 8100448:	1000008c 	.word	0x1000008c
 810044c:	081089a4 	.word	0x081089a4
 8100450:	08108a84 	.word	0x08108a84
 8100454:	081089cc 	.word	0x081089cc
 8100458:	10000088 	.word	0x10000088
 810045c:	08108a14 	.word	0x08108a14

08100460 <LoggerInit>:

STATUS_TYPE LoggerInit (UART_HandleTypeDef* pUART_) {
 8100460:	b580      	push	{r7, lr}
 8100462:	b082      	sub	sp, #8
 8100464:	af00      	add	r7, sp, #0
 8100466:	6078      	str	r0, [r7, #4]
    pUART = NULL;
 8100468:	4b15      	ldr	r3, [pc, #84]	@ (81004c0 <LoggerInit+0x60>)
 810046a:	2200      	movs	r2, #0
 810046c:	601a      	str	r2, [r3, #0]
    if (HAL_GetCurrentCPUID () == CM7_CPUID && pUART_ != NULL) {
 810046e:	f002 f83b 	bl	81024e8 <HAL_GetCurrentCPUID>
 8100472:	4603      	mov	r3, r0
 8100474:	2b03      	cmp	r3, #3
 8100476:	d105      	bne.n	8100484 <LoggerInit+0x24>
 8100478:	687b      	ldr	r3, [r7, #4]
 810047a:	2b00      	cmp	r3, #0
 810047c:	d002      	beq.n	8100484 <LoggerInit+0x24>
        pUART = pUART_;
 810047e:	4a10      	ldr	r2, [pc, #64]	@ (81004c0 <LoggerInit+0x60>)
 8100480:	687b      	ldr	r3, [r7, #4]
 8100482:	6013      	str	r3, [r2, #0]
    /*
     * Local variables are not shared among the cores.
     * So each ring buffer pointer needs to be inited for each core
     */
    pCM4RingBuf =
    RingBuffCreate ((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8100484:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8100488:	480e      	ldr	r0, [pc, #56]	@ (81004c4 <LoggerInit+0x64>)
 810048a:	f000 f88f 	bl	81005ac <RingBuffCreate>
 810048e:	4603      	mov	r3, r0
    pCM4RingBuf =
 8100490:	4a0d      	ldr	r2, [pc, #52]	@ (81004c8 <LoggerInit+0x68>)
 8100492:	6013      	str	r3, [r2, #0]
    pCM7RingBuf =
    RingBuffCreate ((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8100494:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8100498:	480c      	ldr	r0, [pc, #48]	@ (81004cc <LoggerInit+0x6c>)
 810049a:	f000 f887 	bl	81005ac <RingBuffCreate>
 810049e:	4603      	mov	r3, r0
    pCM7RingBuf =
 81004a0:	4a0b      	ldr	r2, [pc, #44]	@ (81004d0 <LoggerInit+0x70>)
 81004a2:	6013      	str	r3, [r2, #0]

    if (SyncRegisterHandler (LoggerSyncUARTTaskHandler, SYNC_TASKID_UART_OUT) != eSTATUS_SUCCESS) {
 81004a4:	2100      	movs	r1, #0
 81004a6:	480b      	ldr	r0, [pc, #44]	@ (81004d4 <LoggerInit+0x74>)
 81004a8:	f000 fb2c 	bl	8100b04 <SyncRegisterHandler>
 81004ac:	4603      	mov	r3, r0
 81004ae:	2b00      	cmp	r3, #0
 81004b0:	d001      	beq.n	81004b6 <LoggerInit+0x56>
        return eSTATUS_FAILURE;
 81004b2:	2301      	movs	r3, #1
 81004b4:	e000      	b.n	81004b8 <LoggerInit+0x58>
    }

    return eSTATUS_SUCCESS;
 81004b6:	2300      	movs	r3, #0
}
 81004b8:	4618      	mov	r0, r3
 81004ba:	3708      	adds	r7, #8
 81004bc:	46bd      	mov	sp, r7
 81004be:	bd80      	pop	{r7, pc}
 81004c0:	10000090 	.word	0x10000090
 81004c4:	38000008 	.word	0x38000008
 81004c8:	10000088 	.word	0x10000088
 81004cc:	38000128 	.word	0x38000128
 81004d0:	1000008c 	.word	0x1000008c
 81004d4:	08100529 	.word	0x08100529

081004d8 <LoggerWriteToUART>:

static STATUS_TYPE LoggerWriteToUART (RingBuff volatile* pRingBuf) {
 81004d8:	b580      	push	{r7, lr}
 81004da:	b084      	sub	sp, #16
 81004dc:	af00      	add	r7, sp, #0
 81004de:	6078      	str	r0, [r7, #4]
    uint32_t len         = 0;
 81004e0:	2300      	movs	r3, #0
 81004e2:	60fb      	str	r3, [r7, #12]
    void* pBufToTransmit = NULL;
 81004e4:	2300      	movs	r3, #0
 81004e6:	60bb      	str	r3, [r7, #8]

send:
    len = RingBuffGetLinearBlockReadLength (pRingBuf);
 81004e8:	6878      	ldr	r0, [r7, #4]
 81004ea:	f000 f9f3 	bl	81008d4 <RingBuffGetLinearBlockReadLength>
 81004ee:	60f8      	str	r0, [r7, #12]
    if (len > 0) {
 81004f0:	68fb      	ldr	r3, [r7, #12]
 81004f2:	2b00      	cmp	r3, #0
 81004f4:	d011      	beq.n	810051a <LoggerWriteToUART+0x42>
        pBufToTransmit = RingBuffGetLinearBlockReadAddress (pRingBuf);
 81004f6:	6878      	ldr	r0, [r7, #4]
 81004f8:	f000 f9c2 	bl	8100880 <RingBuffGetLinearBlockReadAddress>
 81004fc:	60b8      	str	r0, [r7, #8]
        HAL_UART_Transmit (pUART, pBufToTransmit, len, 1000);
 81004fe:	4b09      	ldr	r3, [pc, #36]	@ (8100524 <LoggerWriteToUART+0x4c>)
 8100500:	6818      	ldr	r0, [r3, #0]
 8100502:	68fb      	ldr	r3, [r7, #12]
 8100504:	b29a      	uxth	r2, r3
 8100506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810050a:	68b9      	ldr	r1, [r7, #8]
 810050c:	f006 fc1a 	bl	8106d44 <HAL_UART_Transmit>
        RingBuffSkip (pRingBuf, len);
 8100510:	68f9      	ldr	r1, [r7, #12]
 8100512:	6878      	ldr	r0, [r7, #4]
 8100514:	f000 fa20 	bl	8100958 <RingBuffSkip>
        /* Check for anything in the overflow buffer */
        goto send;
 8100518:	e7e6      	b.n	81004e8 <LoggerWriteToUART+0x10>
    }
    return eSTATUS_SUCCESS;
 810051a:	2300      	movs	r3, #0
}
 810051c:	4618      	mov	r0, r3
 810051e:	3710      	adds	r7, #16
 8100520:	46bd      	mov	sp, r7
 8100522:	bd80      	pop	{r7, pc}
 8100524:	10000090 	.word	0x10000090

08100528 <LoggerSyncUARTTaskHandler>:

static STATUS_TYPE LoggerSyncUARTTaskHandler (void) {
 8100528:	b580      	push	{r7, lr}
 810052a:	af00      	add	r7, sp, #0
    if (HAL_GetCurrentCPUID () == CM7_CPUID) {
 810052c:	f001 ffdc 	bl	81024e8 <HAL_GetCurrentCPUID>
 8100530:	4603      	mov	r3, r0
 8100532:	2b03      	cmp	r3, #3
 8100534:	d104      	bne.n	8100540 <LoggerSyncUARTTaskHandler+0x18>
        LoggerWriteToUART (pCM4RingBuf);
 8100536:	4b04      	ldr	r3, [pc, #16]	@ (8100548 <LoggerSyncUARTTaskHandler+0x20>)
 8100538:	681b      	ldr	r3, [r3, #0]
 810053a:	4618      	mov	r0, r3
 810053c:	f7ff ffcc 	bl	81004d8 <LoggerWriteToUART>
    }
    return eSTATUS_SUCCESS;
 8100540:	2300      	movs	r3, #0
}
 8100542:	4618      	mov	r0, r3
 8100544:	bd80      	pop	{r7, pc}
 8100546:	bf00      	nop
 8100548:	10000088 	.word	0x10000088

0810054c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit (void) {
 810054c:	b480      	push	{r7}
 810054e:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8100550:	4b09      	ldr	r3, [pc, #36]	@ (8100578 <SystemInit+0x2c>)
 8100552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100556:	4a08      	ldr	r2, [pc, #32]	@ (8100578 <SystemInit+0x2c>)
 8100558:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810055c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
    SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100560:	4b05      	ldr	r3, [pc, #20]	@ (8100578 <SystemInit+0x2c>)
 8100562:	691b      	ldr	r3, [r3, #16]
 8100564:	4a04      	ldr	r2, [pc, #16]	@ (8100578 <SystemInit+0x2c>)
 8100566:	f043 0310 	orr.w	r3, r3, #16
 810056a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810056c:	bf00      	nop
 810056e:	46bd      	mov	sp, r7
 8100570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100574:	4770      	bx	lr
 8100576:	bf00      	nop
 8100578:	e000ed00 	.word	0xe000ed00

0810057c <ExitRun0Mode>:
 *         that the power supply configuration is stable.
 *
 * @param  None
 * @retval None
 */
void ExitRun0Mode (void) {
 810057c:	b480      	push	{r7}
 810057e:	af00      	add	r7, sp, #0
    /* Wait till voltage level flag is set */
    while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
    }
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
    /* Exit Run* mode */
    PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100580:	4b09      	ldr	r3, [pc, #36]	@ (81005a8 <ExitRun0Mode+0x2c>)
 8100582:	68db      	ldr	r3, [r3, #12]
 8100584:	4a08      	ldr	r2, [pc, #32]	@ (81005a8 <ExitRun0Mode+0x2c>)
 8100586:	f023 0302 	bic.w	r3, r3, #2
 810058a:	60d3      	str	r3, [r2, #12]
    /* Wait till voltage level flag is set */
    while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
 810058c:	bf00      	nop
 810058e:	4b06      	ldr	r3, [pc, #24]	@ (81005a8 <ExitRun0Mode+0x2c>)
 8100590:	685b      	ldr	r3, [r3, #4]
 8100592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100596:	2b00      	cmp	r3, #0
 8100598:	d0f9      	beq.n	810058e <ExitRun0Mode+0x12>
    while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
    }
#else
    /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810059a:	bf00      	nop
 810059c:	bf00      	nop
 810059e:	46bd      	mov	sp, r7
 81005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005a4:	4770      	bx	lr
 81005a6:	bf00      	nop
 81005a8:	58024800 	.word	0x58024800

081005ac <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate (void* pBuff, size_t size) {
 81005ac:	b580      	push	{r7, lr}
 81005ae:	b084      	sub	sp, #16
 81005b0:	af00      	add	r7, sp, #0
 81005b2:	6078      	str	r0, [r7, #4]
 81005b4:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof (RingBuff) + 1)) {
 81005b6:	687b      	ldr	r3, [r7, #4]
 81005b8:	2b00      	cmp	r3, #0
 81005ba:	d005      	beq.n	81005c8 <RingBuffCreate+0x1c>
 81005bc:	683b      	ldr	r3, [r7, #0]
 81005be:	2b00      	cmp	r3, #0
 81005c0:	d002      	beq.n	81005c8 <RingBuffCreate+0x1c>
 81005c2:	683b      	ldr	r3, [r7, #0]
 81005c4:	2b20      	cmp	r3, #32
 81005c6:	d801      	bhi.n	81005cc <RingBuffCreate+0x20>
        return NULL;
 81005c8:	2300      	movs	r3, #0
 81005ca:	e017      	b.n	81005fc <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff* pRingBuf = (RingBuff*)pBuff;
 81005cc:	687b      	ldr	r3, [r7, #4]
 81005ce:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET ((void*)pRingBuf, 0x00, sizeof (RingBuff));
 81005d0:	2220      	movs	r2, #32
 81005d2:	2100      	movs	r1, #0
 81005d4:	68f8      	ldr	r0, [r7, #12]
 81005d6:	f007 fc49 	bl	8107e6c <memset>

    pRingBuf->size = size - sizeof (RingBuff);
 81005da:	683b      	ldr	r3, [r7, #0]
 81005dc:	f1a3 0220 	sub.w	r2, r3, #32
 81005e0:	68fb      	ldr	r3, [r7, #12]
 81005e2:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*)((uintptr_t)pBuff) + sizeof (RingBuff));
 81005e4:	687b      	ldr	r3, [r7, #4]
 81005e6:	f103 0220 	add.w	r2, r3, #32
 81005ea:	68fb      	ldr	r3, [r7, #12]
 81005ec:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 81005ee:	68fb      	ldr	r3, [r7, #12]
 81005f0:	4a04      	ldr	r2, [pc, #16]	@ (8100604 <RingBuffCreate+0x58>)
 81005f2:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 81005f4:	68fb      	ldr	r3, [r7, #12]
 81005f6:	4a04      	ldr	r2, [pc, #16]	@ (8100608 <RingBuffCreate+0x5c>)
 81005f8:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 81005fa:	68fb      	ldr	r3, [r7, #12]
}
 81005fc:	4618      	mov	r0, r3
 81005fe:	3710      	adds	r7, #16
 8100600:	46bd      	mov	sp, r7
 8100602:	bd80      	pop	{r7, pc}
 8100604:	deadbeef 	.word	0xdeadbeef
 8100608:	21524110 	.word	0x21524110

0810060c <RingBuffIsValid>:
/**
 * \brief           Check if ringbuff is initialized and ready to use
 * \param[in]       buff: Buffer handle
 * \return          `1` if ready, `0` otherwise
 */
STATUS_TYPE RingBuffIsValid (RINGBUFF_VOLATILE RingBuff* buff) {
 810060c:	b480      	push	{r7}
 810060e:	b083      	sub	sp, #12
 8100610:	af00      	add	r7, sp, #0
 8100612:	6078      	str	r0, [r7, #4]
    return BUF_IS_VALID (buff);
 8100614:	687b      	ldr	r3, [r7, #4]
 8100616:	2b00      	cmp	r3, #0
 8100618:	d013      	beq.n	8100642 <RingBuffIsValid+0x36>
 810061a:	687b      	ldr	r3, [r7, #4]
 810061c:	681b      	ldr	r3, [r3, #0]
 810061e:	4a0d      	ldr	r2, [pc, #52]	@ (8100654 <RingBuffIsValid+0x48>)
 8100620:	4293      	cmp	r3, r2
 8100622:	d10e      	bne.n	8100642 <RingBuffIsValid+0x36>
 8100624:	687b      	ldr	r3, [r7, #4]
 8100626:	699b      	ldr	r3, [r3, #24]
 8100628:	4a0b      	ldr	r2, [pc, #44]	@ (8100658 <RingBuffIsValid+0x4c>)
 810062a:	4293      	cmp	r3, r2
 810062c:	d109      	bne.n	8100642 <RingBuffIsValid+0x36>
 810062e:	687b      	ldr	r3, [r7, #4]
 8100630:	685b      	ldr	r3, [r3, #4]
 8100632:	2b00      	cmp	r3, #0
 8100634:	d005      	beq.n	8100642 <RingBuffIsValid+0x36>
 8100636:	687b      	ldr	r3, [r7, #4]
 8100638:	689b      	ldr	r3, [r3, #8]
 810063a:	2b00      	cmp	r3, #0
 810063c:	d001      	beq.n	8100642 <RingBuffIsValid+0x36>
 810063e:	2301      	movs	r3, #1
 8100640:	e000      	b.n	8100644 <RingBuffIsValid+0x38>
 8100642:	2300      	movs	r3, #0
 8100644:	b2db      	uxtb	r3, r3
}
 8100646:	4618      	mov	r0, r3
 8100648:	370c      	adds	r7, #12
 810064a:	46bd      	mov	sp, r7
 810064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100650:	4770      	bx	lr
 8100652:	bf00      	nop
 8100654:	deadbeef 	.word	0xdeadbeef
 8100658:	21524110 	.word	0x21524110

0810065c <RingBuffWrite>:
 * \param[in]       btw: Number of bytes to write
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was
 * no enough memory available to copy full data array
 */
size_t RingBuffWrite (RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 810065c:	b580      	push	{r7, lr}
 810065e:	b088      	sub	sp, #32
 8100660:	af00      	add	r7, sp, #0
 8100662:	60f8      	str	r0, [r7, #12]
 8100664:	60b9      	str	r1, [r7, #8]
 8100666:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8100668:	68bb      	ldr	r3, [r7, #8]
 810066a:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID (buff) || data == NULL || btw == 0) {
 810066c:	68fb      	ldr	r3, [r7, #12]
 810066e:	2b00      	cmp	r3, #0
 8100670:	d017      	beq.n	81006a2 <RingBuffWrite+0x46>
 8100672:	68fb      	ldr	r3, [r7, #12]
 8100674:	681b      	ldr	r3, [r3, #0]
 8100676:	4a3b      	ldr	r2, [pc, #236]	@ (8100764 <RingBuffWrite+0x108>)
 8100678:	4293      	cmp	r3, r2
 810067a:	d112      	bne.n	81006a2 <RingBuffWrite+0x46>
 810067c:	68fb      	ldr	r3, [r7, #12]
 810067e:	699b      	ldr	r3, [r3, #24]
 8100680:	4a39      	ldr	r2, [pc, #228]	@ (8100768 <RingBuffWrite+0x10c>)
 8100682:	4293      	cmp	r3, r2
 8100684:	d10d      	bne.n	81006a2 <RingBuffWrite+0x46>
 8100686:	68fb      	ldr	r3, [r7, #12]
 8100688:	685b      	ldr	r3, [r3, #4]
 810068a:	2b00      	cmp	r3, #0
 810068c:	d009      	beq.n	81006a2 <RingBuffWrite+0x46>
 810068e:	68fb      	ldr	r3, [r7, #12]
 8100690:	689b      	ldr	r3, [r3, #8]
 8100692:	2b00      	cmp	r3, #0
 8100694:	d005      	beq.n	81006a2 <RingBuffWrite+0x46>
 8100696:	68bb      	ldr	r3, [r7, #8]
 8100698:	2b00      	cmp	r3, #0
 810069a:	d002      	beq.n	81006a2 <RingBuffWrite+0x46>
 810069c:	687b      	ldr	r3, [r7, #4]
 810069e:	2b00      	cmp	r3, #0
 81006a0:	d101      	bne.n	81006a6 <RingBuffWrite+0x4a>
        return 0;
 81006a2:	2300      	movs	r3, #0
 81006a4:	e059      	b.n	810075a <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree (buff);
 81006a6:	68f8      	ldr	r0, [r7, #12]
 81006a8:	f000 f860 	bl	810076c <RingBuffGetFree>
 81006ac:	61b8      	str	r0, [r7, #24]
    btw  = BUF_MIN (free, btw);
 81006ae:	687a      	ldr	r2, [r7, #4]
 81006b0:	69bb      	ldr	r3, [r7, #24]
 81006b2:	4293      	cmp	r3, r2
 81006b4:	bf28      	it	cs
 81006b6:	4613      	movcs	r3, r2
 81006b8:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 81006ba:	687b      	ldr	r3, [r7, #4]
 81006bc:	2b00      	cmp	r3, #0
 81006be:	d101      	bne.n	81006c4 <RingBuffWrite+0x68>
        return 0;
 81006c0:	2300      	movs	r3, #0
 81006c2:	e04a      	b.n	810075a <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN (buff->size - buff->w, btw);
 81006c4:	68fb      	ldr	r3, [r7, #12]
 81006c6:	689a      	ldr	r2, [r3, #8]
 81006c8:	68fb      	ldr	r3, [r7, #12]
 81006ca:	691b      	ldr	r3, [r3, #16]
 81006cc:	1ad3      	subs	r3, r2, r3
 81006ce:	687a      	ldr	r2, [r7, #4]
 81006d0:	429a      	cmp	r2, r3
 81006d2:	d905      	bls.n	81006e0 <RingBuffWrite+0x84>
 81006d4:	68fb      	ldr	r3, [r7, #12]
 81006d6:	689a      	ldr	r2, [r3, #8]
 81006d8:	68fb      	ldr	r3, [r7, #12]
 81006da:	691b      	ldr	r3, [r3, #16]
 81006dc:	1ad3      	subs	r3, r2, r3
 81006de:	e000      	b.n	81006e2 <RingBuffWrite+0x86>
 81006e0:	687b      	ldr	r3, [r7, #4]
 81006e2:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY (&buff->buff[buff->w], d, tocopy);
 81006e4:	68fb      	ldr	r3, [r7, #12]
 81006e6:	685a      	ldr	r2, [r3, #4]
 81006e8:	68fb      	ldr	r3, [r7, #12]
 81006ea:	691b      	ldr	r3, [r3, #16]
 81006ec:	4413      	add	r3, r2
 81006ee:	697a      	ldr	r2, [r7, #20]
 81006f0:	69f9      	ldr	r1, [r7, #28]
 81006f2:	4618      	mov	r0, r3
 81006f4:	f007 fc35 	bl	8107f62 <memcpy>
    buff->w += tocopy;
 81006f8:	68fb      	ldr	r3, [r7, #12]
 81006fa:	691a      	ldr	r2, [r3, #16]
 81006fc:	697b      	ldr	r3, [r7, #20]
 81006fe:	441a      	add	r2, r3
 8100700:	68fb      	ldr	r3, [r7, #12]
 8100702:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8100704:	687a      	ldr	r2, [r7, #4]
 8100706:	697b      	ldr	r3, [r7, #20]
 8100708:	1ad3      	subs	r3, r2, r3
 810070a:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 810070c:	687b      	ldr	r3, [r7, #4]
 810070e:	2b00      	cmp	r3, #0
 8100710:	d00b      	beq.n	810072a <RingBuffWrite+0xce>
        BUF_MEMCPY (buff->buff, &d[tocopy], btw);
 8100712:	68fb      	ldr	r3, [r7, #12]
 8100714:	6858      	ldr	r0, [r3, #4]
 8100716:	69fa      	ldr	r2, [r7, #28]
 8100718:	697b      	ldr	r3, [r7, #20]
 810071a:	4413      	add	r3, r2
 810071c:	687a      	ldr	r2, [r7, #4]
 810071e:	4619      	mov	r1, r3
 8100720:	f007 fc1f 	bl	8107f62 <memcpy>
        buff->w = btw;
 8100724:	68fb      	ldr	r3, [r7, #12]
 8100726:	687a      	ldr	r2, [r7, #4]
 8100728:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 810072a:	68fb      	ldr	r3, [r7, #12]
 810072c:	691a      	ldr	r2, [r3, #16]
 810072e:	68fb      	ldr	r3, [r7, #12]
 8100730:	689b      	ldr	r3, [r3, #8]
 8100732:	429a      	cmp	r2, r3
 8100734:	d302      	bcc.n	810073c <RingBuffWrite+0xe0>
        buff->w = 0;
 8100736:	68fb      	ldr	r3, [r7, #12]
 8100738:	2200      	movs	r2, #0
 810073a:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT (buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 810073c:	68fb      	ldr	r3, [r7, #12]
 810073e:	695b      	ldr	r3, [r3, #20]
 8100740:	2b00      	cmp	r3, #0
 8100742:	d007      	beq.n	8100754 <RingBuffWrite+0xf8>
 8100744:	68fb      	ldr	r3, [r7, #12]
 8100746:	695b      	ldr	r3, [r3, #20]
 8100748:	6979      	ldr	r1, [r7, #20]
 810074a:	687a      	ldr	r2, [r7, #4]
 810074c:	440a      	add	r2, r1
 810074e:	2101      	movs	r1, #1
 8100750:	68f8      	ldr	r0, [r7, #12]
 8100752:	4798      	blx	r3
    return tocopy + btw;
 8100754:	697a      	ldr	r2, [r7, #20]
 8100756:	687b      	ldr	r3, [r7, #4]
 8100758:	4413      	add	r3, r2
}
 810075a:	4618      	mov	r0, r3
 810075c:	3720      	adds	r7, #32
 810075e:	46bd      	mov	sp, r7
 8100760:	bd80      	pop	{r7, pc}
 8100762:	bf00      	nop
 8100764:	deadbeef 	.word	0xdeadbeef
 8100768:	21524110 	.word	0x21524110

0810076c <RingBuffGetFree>:
/**
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t RingBuffGetFree (RINGBUFF_VOLATILE RingBuff* buff) {
 810076c:	b480      	push	{r7}
 810076e:	b087      	sub	sp, #28
 8100770:	af00      	add	r7, sp, #0
 8100772:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID (buff)) {
 8100774:	687b      	ldr	r3, [r7, #4]
 8100776:	2b00      	cmp	r3, #0
 8100778:	d011      	beq.n	810079e <RingBuffGetFree+0x32>
 810077a:	687b      	ldr	r3, [r7, #4]
 810077c:	681b      	ldr	r3, [r3, #0]
 810077e:	4a1c      	ldr	r2, [pc, #112]	@ (81007f0 <RingBuffGetFree+0x84>)
 8100780:	4293      	cmp	r3, r2
 8100782:	d10c      	bne.n	810079e <RingBuffGetFree+0x32>
 8100784:	687b      	ldr	r3, [r7, #4]
 8100786:	699b      	ldr	r3, [r3, #24]
 8100788:	4a1a      	ldr	r2, [pc, #104]	@ (81007f4 <RingBuffGetFree+0x88>)
 810078a:	4293      	cmp	r3, r2
 810078c:	d107      	bne.n	810079e <RingBuffGetFree+0x32>
 810078e:	687b      	ldr	r3, [r7, #4]
 8100790:	685b      	ldr	r3, [r3, #4]
 8100792:	2b00      	cmp	r3, #0
 8100794:	d003      	beq.n	810079e <RingBuffGetFree+0x32>
 8100796:	687b      	ldr	r3, [r7, #4]
 8100798:	689b      	ldr	r3, [r3, #8]
 810079a:	2b00      	cmp	r3, #0
 810079c:	d101      	bne.n	81007a2 <RingBuffGetFree+0x36>
        return 0;
 810079e:	2300      	movs	r3, #0
 81007a0:	e01f      	b.n	81007e2 <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 81007a2:	687b      	ldr	r3, [r7, #4]
 81007a4:	691b      	ldr	r3, [r3, #16]
 81007a6:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81007a8:	687b      	ldr	r3, [r7, #4]
 81007aa:	68db      	ldr	r3, [r3, #12]
 81007ac:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 81007ae:	693a      	ldr	r2, [r7, #16]
 81007b0:	68fb      	ldr	r3, [r7, #12]
 81007b2:	429a      	cmp	r2, r3
 81007b4:	d103      	bne.n	81007be <RingBuffGetFree+0x52>
        size = buff->size;
 81007b6:	687b      	ldr	r3, [r7, #4]
 81007b8:	689b      	ldr	r3, [r3, #8]
 81007ba:	617b      	str	r3, [r7, #20]
 81007bc:	e00f      	b.n	81007de <RingBuffGetFree+0x72>
    } else if (r > w) {
 81007be:	68fa      	ldr	r2, [r7, #12]
 81007c0:	693b      	ldr	r3, [r7, #16]
 81007c2:	429a      	cmp	r2, r3
 81007c4:	d904      	bls.n	81007d0 <RingBuffGetFree+0x64>
        size = r - w;
 81007c6:	68fa      	ldr	r2, [r7, #12]
 81007c8:	693b      	ldr	r3, [r7, #16]
 81007ca:	1ad3      	subs	r3, r2, r3
 81007cc:	617b      	str	r3, [r7, #20]
 81007ce:	e006      	b.n	81007de <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 81007d0:	687b      	ldr	r3, [r7, #4]
 81007d2:	689a      	ldr	r2, [r3, #8]
 81007d4:	68f9      	ldr	r1, [r7, #12]
 81007d6:	693b      	ldr	r3, [r7, #16]
 81007d8:	1acb      	subs	r3, r1, r3
 81007da:	4413      	add	r3, r2
 81007dc:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 81007de:	697b      	ldr	r3, [r7, #20]
 81007e0:	3b01      	subs	r3, #1
}
 81007e2:	4618      	mov	r0, r3
 81007e4:	371c      	adds	r7, #28
 81007e6:	46bd      	mov	sp, r7
 81007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007ec:	4770      	bx	lr
 81007ee:	bf00      	nop
 81007f0:	deadbeef 	.word	0xdeadbeef
 81007f4:	21524110 	.word	0x21524110

081007f8 <RingBuffGetFull>:
/**
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t RingBuffGetFull (RINGBUFF_VOLATILE RingBuff* buff) {
 81007f8:	b480      	push	{r7}
 81007fa:	b087      	sub	sp, #28
 81007fc:	af00      	add	r7, sp, #0
 81007fe:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID (buff)) {
 8100800:	687b      	ldr	r3, [r7, #4]
 8100802:	2b00      	cmp	r3, #0
 8100804:	d011      	beq.n	810082a <RingBuffGetFull+0x32>
 8100806:	687b      	ldr	r3, [r7, #4]
 8100808:	681b      	ldr	r3, [r3, #0]
 810080a:	4a1b      	ldr	r2, [pc, #108]	@ (8100878 <RingBuffGetFull+0x80>)
 810080c:	4293      	cmp	r3, r2
 810080e:	d10c      	bne.n	810082a <RingBuffGetFull+0x32>
 8100810:	687b      	ldr	r3, [r7, #4]
 8100812:	699b      	ldr	r3, [r3, #24]
 8100814:	4a19      	ldr	r2, [pc, #100]	@ (810087c <RingBuffGetFull+0x84>)
 8100816:	4293      	cmp	r3, r2
 8100818:	d107      	bne.n	810082a <RingBuffGetFull+0x32>
 810081a:	687b      	ldr	r3, [r7, #4]
 810081c:	685b      	ldr	r3, [r3, #4]
 810081e:	2b00      	cmp	r3, #0
 8100820:	d003      	beq.n	810082a <RingBuffGetFull+0x32>
 8100822:	687b      	ldr	r3, [r7, #4]
 8100824:	689b      	ldr	r3, [r3, #8]
 8100826:	2b00      	cmp	r3, #0
 8100828:	d101      	bne.n	810082e <RingBuffGetFull+0x36>
        return 0;
 810082a:	2300      	movs	r3, #0
 810082c:	e01d      	b.n	810086a <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 810082e:	687b      	ldr	r3, [r7, #4]
 8100830:	691b      	ldr	r3, [r3, #16]
 8100832:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100834:	687b      	ldr	r3, [r7, #4]
 8100836:	68db      	ldr	r3, [r3, #12]
 8100838:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 810083a:	693a      	ldr	r2, [r7, #16]
 810083c:	68fb      	ldr	r3, [r7, #12]
 810083e:	429a      	cmp	r2, r3
 8100840:	d102      	bne.n	8100848 <RingBuffGetFull+0x50>
        size = 0;
 8100842:	2300      	movs	r3, #0
 8100844:	617b      	str	r3, [r7, #20]
 8100846:	e00f      	b.n	8100868 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8100848:	693a      	ldr	r2, [r7, #16]
 810084a:	68fb      	ldr	r3, [r7, #12]
 810084c:	429a      	cmp	r2, r3
 810084e:	d904      	bls.n	810085a <RingBuffGetFull+0x62>
        size = w - r;
 8100850:	693a      	ldr	r2, [r7, #16]
 8100852:	68fb      	ldr	r3, [r7, #12]
 8100854:	1ad3      	subs	r3, r2, r3
 8100856:	617b      	str	r3, [r7, #20]
 8100858:	e006      	b.n	8100868 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 810085a:	687b      	ldr	r3, [r7, #4]
 810085c:	689a      	ldr	r2, [r3, #8]
 810085e:	6939      	ldr	r1, [r7, #16]
 8100860:	68fb      	ldr	r3, [r7, #12]
 8100862:	1acb      	subs	r3, r1, r3
 8100864:	4413      	add	r3, r2
 8100866:	617b      	str	r3, [r7, #20]
    }
    return size;
 8100868:	697b      	ldr	r3, [r7, #20]
}
 810086a:	4618      	mov	r0, r3
 810086c:	371c      	adds	r7, #28
 810086e:	46bd      	mov	sp, r7
 8100870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100874:	4770      	bx	lr
 8100876:	bf00      	nop
 8100878:	deadbeef 	.word	0xdeadbeef
 810087c:	21524110 	.word	0x21524110

08100880 <RingBuffGetLinearBlockReadAddress>:
/**
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void* RingBuffGetLinearBlockReadAddress (RINGBUFF_VOLATILE RingBuff* buff) {
 8100880:	b480      	push	{r7}
 8100882:	b083      	sub	sp, #12
 8100884:	af00      	add	r7, sp, #0
 8100886:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID (buff)) {
 8100888:	687b      	ldr	r3, [r7, #4]
 810088a:	2b00      	cmp	r3, #0
 810088c:	d011      	beq.n	81008b2 <RingBuffGetLinearBlockReadAddress+0x32>
 810088e:	687b      	ldr	r3, [r7, #4]
 8100890:	681b      	ldr	r3, [r3, #0]
 8100892:	4a0e      	ldr	r2, [pc, #56]	@ (81008cc <RingBuffGetLinearBlockReadAddress+0x4c>)
 8100894:	4293      	cmp	r3, r2
 8100896:	d10c      	bne.n	81008b2 <RingBuffGetLinearBlockReadAddress+0x32>
 8100898:	687b      	ldr	r3, [r7, #4]
 810089a:	699b      	ldr	r3, [r3, #24]
 810089c:	4a0c      	ldr	r2, [pc, #48]	@ (81008d0 <RingBuffGetLinearBlockReadAddress+0x50>)
 810089e:	4293      	cmp	r3, r2
 81008a0:	d107      	bne.n	81008b2 <RingBuffGetLinearBlockReadAddress+0x32>
 81008a2:	687b      	ldr	r3, [r7, #4]
 81008a4:	685b      	ldr	r3, [r3, #4]
 81008a6:	2b00      	cmp	r3, #0
 81008a8:	d003      	beq.n	81008b2 <RingBuffGetLinearBlockReadAddress+0x32>
 81008aa:	687b      	ldr	r3, [r7, #4]
 81008ac:	689b      	ldr	r3, [r3, #8]
 81008ae:	2b00      	cmp	r3, #0
 81008b0:	d101      	bne.n	81008b6 <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 81008b2:	2300      	movs	r3, #0
 81008b4:	e004      	b.n	81008c0 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 81008b6:	687b      	ldr	r3, [r7, #4]
 81008b8:	685a      	ldr	r2, [r3, #4]
 81008ba:	687b      	ldr	r3, [r7, #4]
 81008bc:	68db      	ldr	r3, [r3, #12]
 81008be:	4413      	add	r3, r2
}
 81008c0:	4618      	mov	r0, r3
 81008c2:	370c      	adds	r7, #12
 81008c4:	46bd      	mov	sp, r7
 81008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008ca:	4770      	bx	lr
 81008cc:	deadbeef 	.word	0xdeadbeef
 81008d0:	21524110 	.word	0x21524110

081008d4 <RingBuffGetLinearBlockReadLength>:
/**
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t RingBuffGetLinearBlockReadLength (RINGBUFF_VOLATILE RingBuff* buff) {
 81008d4:	b480      	push	{r7}
 81008d6:	b087      	sub	sp, #28
 81008d8:	af00      	add	r7, sp, #0
 81008da:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID (buff)) {
 81008dc:	687b      	ldr	r3, [r7, #4]
 81008de:	2b00      	cmp	r3, #0
 81008e0:	d011      	beq.n	8100906 <RingBuffGetLinearBlockReadLength+0x32>
 81008e2:	687b      	ldr	r3, [r7, #4]
 81008e4:	681b      	ldr	r3, [r3, #0]
 81008e6:	4a1a      	ldr	r2, [pc, #104]	@ (8100950 <RingBuffGetLinearBlockReadLength+0x7c>)
 81008e8:	4293      	cmp	r3, r2
 81008ea:	d10c      	bne.n	8100906 <RingBuffGetLinearBlockReadLength+0x32>
 81008ec:	687b      	ldr	r3, [r7, #4]
 81008ee:	699b      	ldr	r3, [r3, #24]
 81008f0:	4a18      	ldr	r2, [pc, #96]	@ (8100954 <RingBuffGetLinearBlockReadLength+0x80>)
 81008f2:	4293      	cmp	r3, r2
 81008f4:	d107      	bne.n	8100906 <RingBuffGetLinearBlockReadLength+0x32>
 81008f6:	687b      	ldr	r3, [r7, #4]
 81008f8:	685b      	ldr	r3, [r3, #4]
 81008fa:	2b00      	cmp	r3, #0
 81008fc:	d003      	beq.n	8100906 <RingBuffGetLinearBlockReadLength+0x32>
 81008fe:	687b      	ldr	r3, [r7, #4]
 8100900:	689b      	ldr	r3, [r3, #8]
 8100902:	2b00      	cmp	r3, #0
 8100904:	d101      	bne.n	810090a <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8100906:	2300      	movs	r3, #0
 8100908:	e01b      	b.n	8100942 <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 810090a:	687b      	ldr	r3, [r7, #4]
 810090c:	691b      	ldr	r3, [r3, #16]
 810090e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100910:	687b      	ldr	r3, [r7, #4]
 8100912:	68db      	ldr	r3, [r3, #12]
 8100914:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8100916:	693a      	ldr	r2, [r7, #16]
 8100918:	68fb      	ldr	r3, [r7, #12]
 810091a:	429a      	cmp	r2, r3
 810091c:	d904      	bls.n	8100928 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 810091e:	693a      	ldr	r2, [r7, #16]
 8100920:	68fb      	ldr	r3, [r7, #12]
 8100922:	1ad3      	subs	r3, r2, r3
 8100924:	617b      	str	r3, [r7, #20]
 8100926:	e00b      	b.n	8100940 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8100928:	68fa      	ldr	r2, [r7, #12]
 810092a:	693b      	ldr	r3, [r7, #16]
 810092c:	429a      	cmp	r2, r3
 810092e:	d905      	bls.n	810093c <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8100930:	687b      	ldr	r3, [r7, #4]
 8100932:	689a      	ldr	r2, [r3, #8]
 8100934:	68fb      	ldr	r3, [r7, #12]
 8100936:	1ad3      	subs	r3, r2, r3
 8100938:	617b      	str	r3, [r7, #20]
 810093a:	e001      	b.n	8100940 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 810093c:	2300      	movs	r3, #0
 810093e:	617b      	str	r3, [r7, #20]
    }
    return len;
 8100940:	697b      	ldr	r3, [r7, #20]
}
 8100942:	4618      	mov	r0, r3
 8100944:	371c      	adds	r7, #28
 8100946:	46bd      	mov	sp, r7
 8100948:	f85d 7b04 	ldr.w	r7, [sp], #4
 810094c:	4770      	bx	lr
 810094e:	bf00      	nop
 8100950:	deadbeef 	.word	0xdeadbeef
 8100954:	21524110 	.word	0x21524110

08100958 <RingBuffSkip>:
 * \note            Useful at the end of streaming transfer such as DMA
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t RingBuffSkip (RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8100958:	b580      	push	{r7, lr}
 810095a:	b084      	sub	sp, #16
 810095c:	af00      	add	r7, sp, #0
 810095e:	6078      	str	r0, [r7, #4]
 8100960:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID (buff) || len == 0) {
 8100962:	687b      	ldr	r3, [r7, #4]
 8100964:	2b00      	cmp	r3, #0
 8100966:	d014      	beq.n	8100992 <RingBuffSkip+0x3a>
 8100968:	687b      	ldr	r3, [r7, #4]
 810096a:	681b      	ldr	r3, [r3, #0]
 810096c:	4a20      	ldr	r2, [pc, #128]	@ (81009f0 <RingBuffSkip+0x98>)
 810096e:	4293      	cmp	r3, r2
 8100970:	d10f      	bne.n	8100992 <RingBuffSkip+0x3a>
 8100972:	687b      	ldr	r3, [r7, #4]
 8100974:	699b      	ldr	r3, [r3, #24]
 8100976:	4a1f      	ldr	r2, [pc, #124]	@ (81009f4 <RingBuffSkip+0x9c>)
 8100978:	4293      	cmp	r3, r2
 810097a:	d10a      	bne.n	8100992 <RingBuffSkip+0x3a>
 810097c:	687b      	ldr	r3, [r7, #4]
 810097e:	685b      	ldr	r3, [r3, #4]
 8100980:	2b00      	cmp	r3, #0
 8100982:	d006      	beq.n	8100992 <RingBuffSkip+0x3a>
 8100984:	687b      	ldr	r3, [r7, #4]
 8100986:	689b      	ldr	r3, [r3, #8]
 8100988:	2b00      	cmp	r3, #0
 810098a:	d002      	beq.n	8100992 <RingBuffSkip+0x3a>
 810098c:	683b      	ldr	r3, [r7, #0]
 810098e:	2b00      	cmp	r3, #0
 8100990:	d101      	bne.n	8100996 <RingBuffSkip+0x3e>
        return 0;
 8100992:	2300      	movs	r3, #0
 8100994:	e027      	b.n	81009e6 <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull (buff); /* Get buffer used length */
 8100996:	6878      	ldr	r0, [r7, #4]
 8100998:	f7ff ff2e 	bl	81007f8 <RingBuffGetFull>
 810099c:	60f8      	str	r0, [r7, #12]
    len  = BUF_MIN (len, full);    /* Calculate max skip */
 810099e:	683a      	ldr	r2, [r7, #0]
 81009a0:	68fb      	ldr	r3, [r7, #12]
 81009a2:	4293      	cmp	r3, r2
 81009a4:	bf28      	it	cs
 81009a6:	4613      	movcs	r3, r2
 81009a8:	603b      	str	r3, [r7, #0]
    buff->r += len;                /* Advance read pointer */
 81009aa:	687b      	ldr	r3, [r7, #4]
 81009ac:	68da      	ldr	r2, [r3, #12]
 81009ae:	683b      	ldr	r3, [r7, #0]
 81009b0:	441a      	add	r2, r3
 81009b2:	687b      	ldr	r3, [r7, #4]
 81009b4:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {   /* Subtract possible overflow */
 81009b6:	687b      	ldr	r3, [r7, #4]
 81009b8:	68da      	ldr	r2, [r3, #12]
 81009ba:	687b      	ldr	r3, [r7, #4]
 81009bc:	689b      	ldr	r3, [r3, #8]
 81009be:	429a      	cmp	r2, r3
 81009c0:	d306      	bcc.n	81009d0 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 81009c2:	687b      	ldr	r3, [r7, #4]
 81009c4:	689b      	ldr	r3, [r3, #8]
 81009c6:	687a      	ldr	r2, [r7, #4]
 81009c8:	68d2      	ldr	r2, [r2, #12]
 81009ca:	1ad2      	subs	r2, r2, r3
 81009cc:	687b      	ldr	r3, [r7, #4]
 81009ce:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT (buff, RINGBUFF_EVT_READ, len);
 81009d0:	687b      	ldr	r3, [r7, #4]
 81009d2:	695b      	ldr	r3, [r3, #20]
 81009d4:	2b00      	cmp	r3, #0
 81009d6:	d005      	beq.n	81009e4 <RingBuffSkip+0x8c>
 81009d8:	687b      	ldr	r3, [r7, #4]
 81009da:	695b      	ldr	r3, [r3, #20]
 81009dc:	683a      	ldr	r2, [r7, #0]
 81009de:	2100      	movs	r1, #0
 81009e0:	6878      	ldr	r0, [r7, #4]
 81009e2:	4798      	blx	r3
    return len;
 81009e4:	683b      	ldr	r3, [r7, #0]
}
 81009e6:	4618      	mov	r0, r3
 81009e8:	3710      	adds	r7, #16
 81009ea:	46bd      	mov	sp, r7
 81009ec:	bd80      	pop	{r7, pc}
 81009ee:	bf00      	nop
 81009f0:	deadbeef 	.word	0xdeadbeef
 81009f4:	21524110 	.word	0x21524110

081009f8 <SyncMailBoxGet>:
#include "mem/mem.h"
#include "sync/mailbox.h"

static uint8_t volatile* SyncMailBoxGet (uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet (uint32_t mbID) {
 81009f8:	b480      	push	{r7}
 81009fa:	b085      	sub	sp, #20
 81009fc:	af00      	add	r7, sp, #0
 81009fe:	6078      	str	r0, [r7, #4]
    uint8_t volatile* pMB = NULL;
 8100a00:	2300      	movs	r3, #0
 8100a02:	60fb      	str	r3, [r7, #12]
    if (mbID == MAILBOX_CM7_ID)
 8100a04:	687b      	ldr	r3, [r7, #4]
 8100a06:	2b01      	cmp	r3, #1
 8100a08:	d103      	bne.n	8100a12 <SyncMailBoxGet+0x1a>
        pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8100a0a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8100a0e:	60fb      	str	r3, [r7, #12]
 8100a10:	e001      	b.n	8100a16 <SyncMailBoxGet+0x1e>
    else
        pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8100a12:	4b04      	ldr	r3, [pc, #16]	@ (8100a24 <SyncMailBoxGet+0x2c>)
 8100a14:	60fb      	str	r3, [r7, #12]
    return pMB;
 8100a16:	68fb      	ldr	r3, [r7, #12]
}
 8100a18:	4618      	mov	r0, r3
 8100a1a:	3714      	adds	r7, #20
 8100a1c:	46bd      	mov	sp, r7
 8100a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a22:	4770      	bx	lr
 8100a24:	38000004 	.word	0x38000004

08100a28 <SyncMailBoxWrite>:

STATUS_TYPE SyncMailBoxWrite (uint32_t mbID, uint8_t* pBuffer, uint32_t len) {
 8100a28:	b580      	push	{r7, lr}
 8100a2a:	b086      	sub	sp, #24
 8100a2c:	af00      	add	r7, sp, #0
 8100a2e:	60f8      	str	r0, [r7, #12]
 8100a30:	60b9      	str	r1, [r7, #8]
 8100a32:	607a      	str	r2, [r7, #4]
    if (len > MEM_SHARED_MAILBOX_LEN)
 8100a34:	687b      	ldr	r3, [r7, #4]
 8100a36:	2b04      	cmp	r3, #4
 8100a38:	d901      	bls.n	8100a3e <SyncMailBoxWrite+0x16>
        return eSTATUS_FAILURE;
 8100a3a:	2301      	movs	r3, #1
 8100a3c:	e009      	b.n	8100a52 <SyncMailBoxWrite+0x2a>
    uint8_t volatile* pMB = SyncMailBoxGet (mbID);
 8100a3e:	68f8      	ldr	r0, [r7, #12]
 8100a40:	f7ff ffda 	bl	81009f8 <SyncMailBoxGet>
 8100a44:	6178      	str	r0, [r7, #20]
    memcpy ((void*)pMB, (void*)pBuffer, len);
 8100a46:	687a      	ldr	r2, [r7, #4]
 8100a48:	68b9      	ldr	r1, [r7, #8]
 8100a4a:	6978      	ldr	r0, [r7, #20]
 8100a4c:	f007 fa89 	bl	8107f62 <memcpy>
    return eSTATUS_SUCCESS;
 8100a50:	2300      	movs	r3, #0
}
 8100a52:	4618      	mov	r0, r3
 8100a54:	3718      	adds	r7, #24
 8100a56:	46bd      	mov	sp, r7
 8100a58:	bd80      	pop	{r7, pc}

08100a5a <SyncMailBoxWriteNotify>:

STATUS_TYPE SyncMailBoxWriteNotify (uint32_t mbID, uint8_t* pBuffer, uint32_t len) {
 8100a5a:	b580      	push	{r7, lr}
 8100a5c:	b086      	sub	sp, #24
 8100a5e:	af00      	add	r7, sp, #0
 8100a60:	60f8      	str	r0, [r7, #12]
 8100a62:	60b9      	str	r1, [r7, #8]
 8100a64:	607a      	str	r2, [r7, #4]
    STATUS_TYPE status = SyncMailBoxWrite (mbID, pBuffer, len);
 8100a66:	687a      	ldr	r2, [r7, #4]
 8100a68:	68b9      	ldr	r1, [r7, #8]
 8100a6a:	68f8      	ldr	r0, [r7, #12]
 8100a6c:	f7ff ffdc 	bl	8100a28 <SyncMailBoxWrite>
 8100a70:	4603      	mov	r3, r0
 8100a72:	75fb      	strb	r3, [r7, #23]
    if (status != eSTATUS_SUCCESS)
 8100a74:	7dfb      	ldrb	r3, [r7, #23]
 8100a76:	2b00      	cmp	r3, #0
 8100a78:	d001      	beq.n	8100a7e <SyncMailBoxWriteNotify+0x24>
        return eSTATUS_FAILURE;
 8100a7a:	2301      	movs	r3, #1
 8100a7c:	e003      	b.n	8100a86 <SyncMailBoxWriteNotify+0x2c>
    asm volatile("dsb");
 8100a7e:	f3bf 8f4f 	dsb	sy
    asm volatile("sev");
 8100a82:	bf40      	sev
    return eSTATUS_SUCCESS;
 8100a84:	2300      	movs	r3, #0
}
 8100a86:	4618      	mov	r0, r3
 8100a88:	3718      	adds	r7, #24
 8100a8a:	46bd      	mov	sp, r7
 8100a8c:	bd80      	pop	{r7, pc}

08100a8e <SyncMailBoxRead>:

STATUS_TYPE SyncMailBoxRead (uint32_t mbID, uint8_t* pBuffer, uint32_t len) {
 8100a8e:	b580      	push	{r7, lr}
 8100a90:	b086      	sub	sp, #24
 8100a92:	af00      	add	r7, sp, #0
 8100a94:	60f8      	str	r0, [r7, #12]
 8100a96:	60b9      	str	r1, [r7, #8]
 8100a98:	607a      	str	r2, [r7, #4]
    if (len > MEM_SHARED_MAILBOX_LEN)
 8100a9a:	687b      	ldr	r3, [r7, #4]
 8100a9c:	2b04      	cmp	r3, #4
 8100a9e:	d901      	bls.n	8100aa4 <SyncMailBoxRead+0x16>
        return eSTATUS_FAILURE;
 8100aa0:	2301      	movs	r3, #1
 8100aa2:	e009      	b.n	8100ab8 <SyncMailBoxRead+0x2a>
    uint8_t volatile* pMB = SyncMailBoxGet (mbID);
 8100aa4:	68f8      	ldr	r0, [r7, #12]
 8100aa6:	f7ff ffa7 	bl	81009f8 <SyncMailBoxGet>
 8100aaa:	6178      	str	r0, [r7, #20]
    memcpy ((void*)pBuffer, (void*)pMB, len);
 8100aac:	687a      	ldr	r2, [r7, #4]
 8100aae:	6979      	ldr	r1, [r7, #20]
 8100ab0:	68b8      	ldr	r0, [r7, #8]
 8100ab2:	f007 fa56 	bl	8107f62 <memcpy>
    return eSTATUS_SUCCESS;
 8100ab6:	2300      	movs	r3, #0
}
 8100ab8:	4618      	mov	r0, r3
 8100aba:	3718      	adds	r7, #24
 8100abc:	46bd      	mov	sp, r7
 8100abe:	bd80      	pop	{r7, pc}

08100ac0 <SyncGetTaskHandler>:

#define NUM_TASK_TYPES 2

task_handler_fn_t handlers[NUM_TASK_TYPES];

task_handler_fn_t SyncGetTaskHandler (uint32_t taskID) {
 8100ac0:	b480      	push	{r7}
 8100ac2:	b083      	sub	sp, #12
 8100ac4:	af00      	add	r7, sp, #0
 8100ac6:	6078      	str	r0, [r7, #4]
    if (taskID > NUM_TASK_TYPES)
 8100ac8:	687b      	ldr	r3, [r7, #4]
 8100aca:	2b02      	cmp	r3, #2
 8100acc:	d901      	bls.n	8100ad2 <SyncGetTaskHandler+0x12>
        return NULL;
 8100ace:	2300      	movs	r3, #0
 8100ad0:	e003      	b.n	8100ada <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8100ad2:	4a05      	ldr	r2, [pc, #20]	@ (8100ae8 <SyncGetTaskHandler+0x28>)
 8100ad4:	687b      	ldr	r3, [r7, #4]
 8100ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8100ada:	4618      	mov	r0, r3
 8100adc:	370c      	adds	r7, #12
 8100ade:	46bd      	mov	sp, r7
 8100ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ae4:	4770      	bx	lr
 8100ae6:	bf00      	nop
 8100ae8:	10000094 	.word	0x10000094

08100aec <SyncInit>:

/*
 * \brief Each core needs to call SyncInit
 */
STATUS_TYPE SyncInit (void) {
 8100aec:	b580      	push	{r7, lr}
 8100aee:	af00      	add	r7, sp, #0
    memset (handlers, 0, sizeof (handlers));
 8100af0:	2208      	movs	r2, #8
 8100af2:	2100      	movs	r1, #0
 8100af4:	4802      	ldr	r0, [pc, #8]	@ (8100b00 <SyncInit+0x14>)
 8100af6:	f007 f9b9 	bl	8107e6c <memset>
    return eSTATUS_SUCCESS;
 8100afa:	2300      	movs	r3, #0
}
 8100afc:	4618      	mov	r0, r3
 8100afe:	bd80      	pop	{r7, pc}
 8100b00:	10000094 	.word	0x10000094

08100b04 <SyncRegisterHandler>:

STATUS_TYPE SyncRegisterHandler (task_handler_fn_t fn, uint32_t taskID) {
 8100b04:	b480      	push	{r7}
 8100b06:	b083      	sub	sp, #12
 8100b08:	af00      	add	r7, sp, #0
 8100b0a:	6078      	str	r0, [r7, #4]
 8100b0c:	6039      	str	r1, [r7, #0]
    if (taskID > NUM_TASK_TYPES)
 8100b0e:	683b      	ldr	r3, [r7, #0]
 8100b10:	2b02      	cmp	r3, #2
 8100b12:	d901      	bls.n	8100b18 <SyncRegisterHandler+0x14>
        return eSTATUS_FAILURE;
 8100b14:	2301      	movs	r3, #1
 8100b16:	e005      	b.n	8100b24 <SyncRegisterHandler+0x20>
    handlers[taskID] = fn;
 8100b18:	4905      	ldr	r1, [pc, #20]	@ (8100b30 <SyncRegisterHandler+0x2c>)
 8100b1a:	683b      	ldr	r3, [r7, #0]
 8100b1c:	687a      	ldr	r2, [r7, #4]
 8100b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return eSTATUS_SUCCESS;
 8100b22:	2300      	movs	r3, #0
}
 8100b24:	4618      	mov	r0, r3
 8100b26:	370c      	adds	r7, #12
 8100b28:	46bd      	mov	sp, r7
 8100b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b2e:	4770      	bx	lr
 8100b30:	10000094 	.word	0x10000094

08100b34 <CM7_SEV_IRQHandler>:
 * \brief A SEV instruction was executed by CM7
 * and the SEV IRQ handler for CM4 was called.
 * This function was originally defined in CM4/Core/Src/stm32h7xx_it.c
 * by the code generator but I moved it here.
 */
void CM7_SEV_IRQHandler (void) {
 8100b34:	b580      	push	{r7, lr}
 8100b36:	b082      	sub	sp, #8
 8100b38:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8100b3a:	2300      	movs	r3, #0
 8100b3c:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead (MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof (uint32_t));
 8100b3e:	463b      	mov	r3, r7
 8100b40:	2204      	movs	r2, #4
 8100b42:	4619      	mov	r1, r3
 8100b44:	2000      	movs	r0, #0
 8100b46:	f7ff ffa2 	bl	8100a8e <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler (taskID);
 8100b4a:	683b      	ldr	r3, [r7, #0]
 8100b4c:	4618      	mov	r0, r3
 8100b4e:	f7ff ffb7 	bl	8100ac0 <SyncGetTaskHandler>
 8100b52:	6078      	str	r0, [r7, #4]
    if (fn != NULL) {
 8100b54:	687b      	ldr	r3, [r7, #4]
 8100b56:	2b00      	cmp	r3, #0
 8100b58:	d001      	beq.n	8100b5e <CM7_SEV_IRQHandler+0x2a>
        fn ();
 8100b5a:	687b      	ldr	r3, [r7, #4]
 8100b5c:	4798      	blx	r3
    }
}
 8100b5e:	bf00      	nop
 8100b60:	3708      	adds	r7, #8
 8100b62:	46bd      	mov	sp, r7
 8100b64:	bd80      	pop	{r7, pc}

08100b66 <CM4_SEV_IRQHandler>:
 * \brief A sev instruction was executed by CM4
 * and the SEV IRQ handler for CM7 was called.
 * This function was originally defined in CM7/Core/Src/stm32h7xx_it.c
 * by the code generator but I moved it here.
 */
void CM4_SEV_IRQHandler (void) {
 8100b66:	b580      	push	{r7, lr}
 8100b68:	b082      	sub	sp, #8
 8100b6a:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 8100b6c:	2300      	movs	r3, #0
 8100b6e:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead (MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof (uint32_t));
 8100b70:	463b      	mov	r3, r7
 8100b72:	2204      	movs	r2, #4
 8100b74:	4619      	mov	r1, r3
 8100b76:	2001      	movs	r0, #1
 8100b78:	f7ff ff89 	bl	8100a8e <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler (taskID);
 8100b7c:	683b      	ldr	r3, [r7, #0]
 8100b7e:	4618      	mov	r0, r3
 8100b80:	f7ff ff9e 	bl	8100ac0 <SyncGetTaskHandler>
 8100b84:	6078      	str	r0, [r7, #4]
    if (fn != NULL) {
 8100b86:	687b      	ldr	r3, [r7, #4]
 8100b88:	2b00      	cmp	r3, #0
 8100b8a:	d001      	beq.n	8100b90 <CM4_SEV_IRQHandler+0x2a>
        fn ();
 8100b8c:	687b      	ldr	r3, [r7, #4]
 8100b8e:	4798      	blx	r3
    }
 8100b90:	bf00      	nop
 8100b92:	3708      	adds	r7, #8
 8100b94:	46bd      	mov	sp, r7
 8100b96:	bd80      	pop	{r7, pc}

08100b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100b98:	b580      	push	{r7, lr}
 8100b9a:	b082      	sub	sp, #8
 8100b9c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100b9e:	4b31      	ldr	r3, [pc, #196]	@ (8100c64 <main+0xcc>)
 8100ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8100c64 <main+0xcc>)
 8100ba6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100baa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100bae:	4b2d      	ldr	r3, [pc, #180]	@ (8100c64 <main+0xcc>)
 8100bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100bb8:	607b      	str	r3, [r7, #4]
 8100bba:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100bbc:	2001      	movs	r0, #1
 8100bbe:	f001 fe55 	bl	810286c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100bc2:	f002 f80f 	bl	8102be4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100bc6:	2201      	movs	r2, #1
 8100bc8:	2102      	movs	r1, #2
 8100bca:	2000      	movs	r0, #0
 8100bcc:	f001 ff90 	bl	8102af0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100bd0:	4b25      	ldr	r3, [pc, #148]	@ (8100c68 <main+0xd0>)
 8100bd2:	681b      	ldr	r3, [r3, #0]
 8100bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100bd8:	2b70      	cmp	r3, #112	@ 0x70
 8100bda:	d108      	bne.n	8100bee <main+0x56>
 8100bdc:	4b23      	ldr	r3, [pc, #140]	@ (8100c6c <main+0xd4>)
 8100bde:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100be2:	4a22      	ldr	r2, [pc, #136]	@ (8100c6c <main+0xd4>)
 8100be4:	f043 0301 	orr.w	r3, r3, #1
 8100be8:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100bec:	e007      	b.n	8100bfe <main+0x66>
 8100bee:	4b1f      	ldr	r3, [pc, #124]	@ (8100c6c <main+0xd4>)
 8100bf0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8100c6c <main+0xd4>)
 8100bf6:	f043 0301 	orr.w	r3, r3, #1
 8100bfa:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100bfe:	f001 f971 	bl	8101ee4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100c02:	f000 fa21 	bl	8101048 <MX_GPIO_Init>
  MX_HDMI_CEC_Init();
 8100c06:	f000 f83d 	bl	8100c84 <MX_HDMI_CEC_Init>
  MX_RTC_Init();
 8100c0a:	f000 f86f 	bl	8100cec <MX_RTC_Init>
  MX_SAI1_Init();
 8100c0e:	f000 f8bb 	bl	8100d88 <MX_SAI1_Init>
  MX_SPDIFRX1_Init();
 8100c12:	f000 f95b 	bl	8100ecc <MX_SPDIFRX1_Init>
  MX_SPI5_Init();
 8100c16:	f000 f991 	bl	8100f3c <MX_SPI5_Init>
  MX_USB_OTG_HS_PCD_Init();
 8100c1a:	f000 f9e3 	bl	8100fe4 <MX_USB_OTG_HS_PCD_Init>
//     (void*) NULL,                     /* Pointer to tasks arguments (parameter) */
//     tskIDLE_PRIORITY + 2UL,           /* Task priority*/
//     NULL                              /* Task handle */
// );

    if(SyncInit() != eSTATUS_SUCCESS || LoggerInit(NULL) != eSTATUS_SUCCESS)
 8100c1e:	f7ff ff65 	bl	8100aec <SyncInit>
 8100c22:	4603      	mov	r3, r0
 8100c24:	2b00      	cmp	r3, #0
 8100c26:	d105      	bne.n	8100c34 <main+0x9c>
 8100c28:	2000      	movs	r0, #0
 8100c2a:	f7ff fc19 	bl	8100460 <LoggerInit>
 8100c2e:	4603      	mov	r3, r0
 8100c30:	2b00      	cmp	r3, #0
 8100c32:	d001      	beq.n	8100c38 <main+0xa0>
    {
      CriticalErrorHandler();
 8100c34:	f7ff fba4 	bl	8100380 <CriticalErrorHandler>

  while (1)
  {
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	  HAL_Delay(5000);
 8100c38:	f241 3088 	movw	r0, #5000	@ 0x1388
 8100c3c:	f001 f9d0 	bl	8101fe0 <HAL_Delay>
	  LOG_INFO("Hello from CM4");
 8100c40:	480b      	ldr	r0, [pc, #44]	@ (8100c70 <main+0xd8>)
 8100c42:	f006 ffcb 	bl	8107bdc <iprintf>
 8100c46:	480b      	ldr	r0, [pc, #44]	@ (8100c74 <main+0xdc>)
 8100c48:	f006 ffc8 	bl	8107bdc <iprintf>
 8100c4c:	21af      	movs	r1, #175	@ 0xaf
 8100c4e:	480a      	ldr	r0, [pc, #40]	@ (8100c78 <main+0xe0>)
 8100c50:	f006 ffc4 	bl	8107bdc <iprintf>
 8100c54:	4809      	ldr	r0, [pc, #36]	@ (8100c7c <main+0xe4>)
 8100c56:	f006 ffc1 	bl	8107bdc <iprintf>
 8100c5a:	4809      	ldr	r0, [pc, #36]	@ (8100c80 <main+0xe8>)
 8100c5c:	f007 f826 	bl	8107cac <puts>
	  HAL_Delay(5000);
 8100c60:	bf00      	nop
 8100c62:	e7e9      	b.n	8100c38 <main+0xa0>
 8100c64:	58024400 	.word	0x58024400
 8100c68:	e000ed00 	.word	0xe000ed00
 8100c6c:	58026400 	.word	0x58026400
 8100c70:	08108a48 	.word	0x08108a48
 8100c74:	08108a54 	.word	0x08108a54
 8100c78:	08108a68 	.word	0x08108a68
 8100c7c:	08108a70 	.word	0x08108a70
 8100c80:	08108a80 	.word	0x08108a80

08100c84 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100c84:	b580      	push	{r7, lr}
 8100c86:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100c88:	4b15      	ldr	r3, [pc, #84]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100c8a:	4a16      	ldr	r2, [pc, #88]	@ (8100ce4 <MX_HDMI_CEC_Init+0x60>)
 8100c8c:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100c8e:	4b14      	ldr	r3, [pc, #80]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100c90:	2200      	movs	r2, #0
 8100c92:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100c94:	4b12      	ldr	r3, [pc, #72]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100c96:	2200      	movs	r2, #0
 8100c98:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100c9a:	4b11      	ldr	r3, [pc, #68]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100c9c:	2210      	movs	r2, #16
 8100c9e:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100ca2:	2200      	movs	r2, #0
 8100ca4:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100ca8:	2200      	movs	r2, #0
 8100caa:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100cac:	4b0c      	ldr	r3, [pc, #48]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100cae:	2200      	movs	r2, #0
 8100cb0:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100cb4:	2200      	movs	r2, #0
 8100cb6:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100cb8:	4b09      	ldr	r3, [pc, #36]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100cba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8100cbe:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100cc0:	4b07      	ldr	r3, [pc, #28]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100cc2:	2200      	movs	r2, #0
 8100cc4:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100cc6:	4b06      	ldr	r3, [pc, #24]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100cc8:	4a07      	ldr	r2, [pc, #28]	@ (8100ce8 <MX_HDMI_CEC_Init+0x64>)
 8100cca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100ccc:	4804      	ldr	r0, [pc, #16]	@ (8100ce0 <MX_HDMI_CEC_Init+0x5c>)
 8100cce:	f001 f9cd 	bl	810206c <HAL_CEC_Init>
 8100cd2:	4603      	mov	r3, r0
 8100cd4:	2b00      	cmp	r3, #0
 8100cd6:	d001      	beq.n	8100cdc <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100cd8:	f000 fbfc 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100cdc:	bf00      	nop
 8100cde:	bd80      	pop	{r7, pc}
 8100ce0:	1000009c 	.word	0x1000009c
 8100ce4:	40006c00 	.word	0x40006c00
 8100ce8:	100007f0 	.word	0x100007f0

08100cec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100cec:	b580      	push	{r7, lr}
 8100cee:	b08a      	sub	sp, #40	@ 0x28
 8100cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100cf2:	463b      	mov	r3, r7
 8100cf4:	2228      	movs	r2, #40	@ 0x28
 8100cf6:	2100      	movs	r1, #0
 8100cf8:	4618      	mov	r0, r3
 8100cfa:	f007 f8b7 	bl	8107e6c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100cfe:	4b20      	ldr	r3, [pc, #128]	@ (8100d80 <MX_RTC_Init+0x94>)
 8100d00:	4a20      	ldr	r2, [pc, #128]	@ (8100d84 <MX_RTC_Init+0x98>)
 8100d02:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100d04:	4b1e      	ldr	r3, [pc, #120]	@ (8100d80 <MX_RTC_Init+0x94>)
 8100d06:	2200      	movs	r2, #0
 8100d08:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8100d80 <MX_RTC_Init+0x94>)
 8100d0c:	227f      	movs	r2, #127	@ 0x7f
 8100d0e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100d10:	4b1b      	ldr	r3, [pc, #108]	@ (8100d80 <MX_RTC_Init+0x94>)
 8100d12:	22ff      	movs	r2, #255	@ 0xff
 8100d14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100d16:	4b1a      	ldr	r3, [pc, #104]	@ (8100d80 <MX_RTC_Init+0x94>)
 8100d18:	2200      	movs	r2, #0
 8100d1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100d1c:	4b18      	ldr	r3, [pc, #96]	@ (8100d80 <MX_RTC_Init+0x94>)
 8100d1e:	2200      	movs	r2, #0
 8100d20:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100d22:	4b17      	ldr	r3, [pc, #92]	@ (8100d80 <MX_RTC_Init+0x94>)
 8100d24:	2200      	movs	r2, #0
 8100d26:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100d28:	4b15      	ldr	r3, [pc, #84]	@ (8100d80 <MX_RTC_Init+0x94>)
 8100d2a:	2200      	movs	r2, #0
 8100d2c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100d2e:	4814      	ldr	r0, [pc, #80]	@ (8100d80 <MX_RTC_Init+0x94>)
 8100d30:	f004 feb8 	bl	8105aa4 <HAL_RTC_Init>
 8100d34:	4603      	mov	r3, r0
 8100d36:	2b00      	cmp	r3, #0
 8100d38:	d001      	beq.n	8100d3e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100d3a:	f000 fbcb 	bl	81014d4 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100d3e:	2301      	movs	r3, #1
 8100d40:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100d42:	2301      	movs	r3, #1
 8100d44:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100d46:	2300      	movs	r3, #0
 8100d48:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100d4a:	2300      	movs	r3, #0
 8100d4c:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100d4e:	2300      	movs	r3, #0
 8100d50:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100d52:	2300      	movs	r3, #0
 8100d54:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100d56:	2300      	movs	r3, #0
 8100d58:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100d5a:	2300      	movs	r3, #0
 8100d5c:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100d5e:	2380      	movs	r3, #128	@ 0x80
 8100d60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100d62:	463b      	mov	r3, r7
 8100d64:	4619      	mov	r1, r3
 8100d66:	4806      	ldr	r0, [pc, #24]	@ (8100d80 <MX_RTC_Init+0x94>)
 8100d68:	f004 ffb4 	bl	8105cd4 <HAL_RTCEx_SetTamper>
 8100d6c:	4603      	mov	r3, r0
 8100d6e:	2b00      	cmp	r3, #0
 8100d70:	d001      	beq.n	8100d76 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100d72:	f000 fbaf 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100d76:	bf00      	nop
 8100d78:	3728      	adds	r7, #40	@ 0x28
 8100d7a:	46bd      	mov	sp, r7
 8100d7c:	bd80      	pop	{r7, pc}
 8100d7e:	bf00      	nop
 8100d80:	100000e0 	.word	0x100000e0
 8100d84:	58004000 	.word	0x58004000

08100d88 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100d88:	b580      	push	{r7, lr}
 8100d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100d8c:	4b4a      	ldr	r3, [pc, #296]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100d8e:	4a4b      	ldr	r2, [pc, #300]	@ (8100ebc <MX_SAI1_Init+0x134>)
 8100d90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100d92:	4b49      	ldr	r3, [pc, #292]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100d94:	2200      	movs	r2, #0
 8100d96:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100d98:	4b47      	ldr	r3, [pc, #284]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100d9e:	4b46      	ldr	r3, [pc, #280]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100da0:	2240      	movs	r2, #64	@ 0x40
 8100da2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100da4:	4b44      	ldr	r3, [pc, #272]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100da6:	2200      	movs	r2, #0
 8100da8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100daa:	4b43      	ldr	r3, [pc, #268]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100dac:	2200      	movs	r2, #0
 8100dae:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100db0:	4b41      	ldr	r3, [pc, #260]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100db2:	2200      	movs	r2, #0
 8100db4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100db6:	4b40      	ldr	r3, [pc, #256]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100db8:	2200      	movs	r2, #0
 8100dba:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100dbe:	2200      	movs	r2, #0
 8100dc0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100dc4:	2200      	movs	r2, #0
 8100dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100dca:	2200      	movs	r2, #0
 8100dcc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100dce:	4b3a      	ldr	r3, [pc, #232]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100dd0:	4a3b      	ldr	r2, [pc, #236]	@ (8100ec0 <MX_SAI1_Init+0x138>)
 8100dd2:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100dd4:	4b38      	ldr	r3, [pc, #224]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100dd6:	2200      	movs	r2, #0
 8100dd8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100dda:	4b37      	ldr	r3, [pc, #220]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100ddc:	2200      	movs	r2, #0
 8100dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100de0:	4b35      	ldr	r3, [pc, #212]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100de2:	2200      	movs	r2, #0
 8100de4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100de6:	4b34      	ldr	r3, [pc, #208]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100de8:	2200      	movs	r2, #0
 8100dea:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100dec:	4b32      	ldr	r3, [pc, #200]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100dee:	2200      	movs	r2, #0
 8100df0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100df4:	4b30      	ldr	r3, [pc, #192]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100df6:	2201      	movs	r2, #1
 8100df8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100e00:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100e02:	4b2d      	ldr	r3, [pc, #180]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100e04:	2208      	movs	r2, #8
 8100e06:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100e08:	4b2b      	ldr	r3, [pc, #172]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100e0a:	2201      	movs	r2, #1
 8100e0c:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100e10:	2200      	movs	r2, #0
 8100e12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100e14:	4b28      	ldr	r3, [pc, #160]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100e16:	2200      	movs	r2, #0
 8100e18:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100e1a:	4b27      	ldr	r3, [pc, #156]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100e1c:	2200      	movs	r2, #0
 8100e1e:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100e20:	4b25      	ldr	r3, [pc, #148]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100e22:	2200      	movs	r2, #0
 8100e24:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100e26:	4b24      	ldr	r3, [pc, #144]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100e28:	2200      	movs	r2, #0
 8100e2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100e2c:	4b22      	ldr	r3, [pc, #136]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100e2e:	2201      	movs	r2, #1
 8100e30:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100e32:	4b21      	ldr	r3, [pc, #132]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100e34:	2200      	movs	r2, #0
 8100e36:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100e38:	481f      	ldr	r0, [pc, #124]	@ (8100eb8 <MX_SAI1_Init+0x130>)
 8100e3a:	f005 f82b 	bl	8105e94 <HAL_SAI_Init>
 8100e3e:	4603      	mov	r3, r0
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d001      	beq.n	8100e48 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8100e44:	f000 fb46 	bl	81014d4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100e48:	4b1e      	ldr	r3, [pc, #120]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8100ec8 <MX_SAI1_Init+0x140>)
 8100e4c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e50:	2204      	movs	r2, #4
 8100e52:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100e54:	4b1b      	ldr	r3, [pc, #108]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e56:	2200      	movs	r2, #0
 8100e58:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e5c:	2200      	movs	r2, #0
 8100e5e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100e60:	4b18      	ldr	r3, [pc, #96]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e62:	2200      	movs	r2, #0
 8100e64:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100e66:	4b17      	ldr	r3, [pc, #92]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e68:	2200      	movs	r2, #0
 8100e6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100e6c:	4b15      	ldr	r3, [pc, #84]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e6e:	2200      	movs	r2, #0
 8100e70:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100e72:	4b14      	ldr	r3, [pc, #80]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e74:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100e78:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100e7a:	4b12      	ldr	r3, [pc, #72]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e7c:	2200      	movs	r2, #0
 8100e7e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100e80:	4b10      	ldr	r3, [pc, #64]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e82:	2200      	movs	r2, #0
 8100e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100e86:	4b0f      	ldr	r3, [pc, #60]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e88:	2200      	movs	r2, #0
 8100e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e8e:	2200      	movs	r2, #0
 8100e90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100e94:	4b0b      	ldr	r3, [pc, #44]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e96:	2201      	movs	r2, #1
 8100e98:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100ea0:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100ea2:	4808      	ldr	r0, [pc, #32]	@ (8100ec4 <MX_SAI1_Init+0x13c>)
 8100ea4:	f004 fff6 	bl	8105e94 <HAL_SAI_Init>
 8100ea8:	4603      	mov	r3, r0
 8100eaa:	2b00      	cmp	r3, #0
 8100eac:	d001      	beq.n	8100eb2 <MX_SAI1_Init+0x12a>
  {
    Error_Handler();
 8100eae:	f000 fb11 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100eb2:	bf00      	nop
 8100eb4:	bd80      	pop	{r7, pc}
 8100eb6:	bf00      	nop
 8100eb8:	10000104 	.word	0x10000104
 8100ebc:	40015804 	.word	0x40015804
 8100ec0:	0002ee00 	.word	0x0002ee00
 8100ec4:	1000019c 	.word	0x1000019c
 8100ec8:	40015824 	.word	0x40015824

08100ecc <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100ecc:	b580      	push	{r7, lr}
 8100ece:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100ed0:	4b19      	ldr	r3, [pc, #100]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100ed2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100ed6:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100ed8:	4b17      	ldr	r3, [pc, #92]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100eda:	2200      	movs	r2, #0
 8100edc:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100ede:	4b16      	ldr	r3, [pc, #88]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100ee0:	2200      	movs	r2, #0
 8100ee2:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100ee4:	4b14      	ldr	r3, [pc, #80]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100ee6:	2200      	movs	r2, #0
 8100ee8:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100eea:	4b13      	ldr	r3, [pc, #76]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100eec:	2200      	movs	r2, #0
 8100eee:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100ef0:	4b11      	ldr	r3, [pc, #68]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100ef2:	2200      	movs	r2, #0
 8100ef4:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100ef6:	4b10      	ldr	r3, [pc, #64]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100ef8:	2200      	movs	r2, #0
 8100efa:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100efc:	4b0e      	ldr	r3, [pc, #56]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100efe:	2200      	movs	r2, #0
 8100f00:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100f02:	4b0d      	ldr	r3, [pc, #52]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100f04:	2200      	movs	r2, #0
 8100f06:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100f08:	4b0b      	ldr	r3, [pc, #44]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100f0a:	2200      	movs	r2, #0
 8100f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100f10:	2200      	movs	r2, #0
 8100f12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100f14:	4b08      	ldr	r3, [pc, #32]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100f16:	2200      	movs	r2, #0
 8100f18:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100f1c:	4b06      	ldr	r3, [pc, #24]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100f1e:	2200      	movs	r2, #0
 8100f20:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100f24:	4804      	ldr	r0, [pc, #16]	@ (8100f38 <MX_SPDIFRX1_Init+0x6c>)
 8100f26:	f005 fa99 	bl	810645c <HAL_SPDIFRX_Init>
 8100f2a:	4603      	mov	r3, r0
 8100f2c:	2b00      	cmp	r3, #0
 8100f2e:	d001      	beq.n	8100f34 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100f30:	f000 fad0 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100f34:	bf00      	nop
 8100f36:	bd80      	pop	{r7, pc}
 8100f38:	10000234 	.word	0x10000234

08100f3c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100f3c:	b580      	push	{r7, lr}
 8100f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100f40:	4b26      	ldr	r3, [pc, #152]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f42:	4a27      	ldr	r2, [pc, #156]	@ (8100fe0 <MX_SPI5_Init+0xa4>)
 8100f44:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100f46:	4b25      	ldr	r3, [pc, #148]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f48:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100f4c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100f4e:	4b23      	ldr	r3, [pc, #140]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f50:	2200      	movs	r2, #0
 8100f52:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100f54:	4b21      	ldr	r3, [pc, #132]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f56:	2203      	movs	r2, #3
 8100f58:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100f5a:	4b20      	ldr	r3, [pc, #128]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f5c:	2200      	movs	r2, #0
 8100f5e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100f60:	4b1e      	ldr	r3, [pc, #120]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f62:	2200      	movs	r2, #0
 8100f64:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100f66:	4b1d      	ldr	r3, [pc, #116]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f68:	2200      	movs	r2, #0
 8100f6a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f6e:	2200      	movs	r2, #0
 8100f70:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100f72:	4b1a      	ldr	r3, [pc, #104]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f74:	2200      	movs	r2, #0
 8100f76:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100f78:	4b18      	ldr	r3, [pc, #96]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f7a:	2200      	movs	r2, #0
 8100f7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100f7e:	4b17      	ldr	r3, [pc, #92]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f80:	2200      	movs	r2, #0
 8100f82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100f84:	4b15      	ldr	r3, [pc, #84]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f86:	2200      	movs	r2, #0
 8100f88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100f8a:	4b14      	ldr	r3, [pc, #80]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100f90:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100f92:	4b12      	ldr	r3, [pc, #72]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f94:	2200      	movs	r2, #0
 8100f96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100f98:	4b10      	ldr	r3, [pc, #64]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100f9a:	2200      	movs	r2, #0
 8100f9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100fa0:	2200      	movs	r2, #0
 8100fa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100fa6:	2200      	movs	r2, #0
 8100fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100faa:	4b0c      	ldr	r3, [pc, #48]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100fac:	2200      	movs	r2, #0
 8100fae:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100fb2:	2200      	movs	r2, #0
 8100fb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100fb6:	4b09      	ldr	r3, [pc, #36]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100fb8:	2200      	movs	r2, #0
 8100fba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100fbc:	4b07      	ldr	r3, [pc, #28]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100fbe:	2200      	movs	r2, #0
 8100fc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100fc2:	4b06      	ldr	r3, [pc, #24]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100fc4:	2200      	movs	r2, #0
 8100fc6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100fc8:	4804      	ldr	r0, [pc, #16]	@ (8100fdc <MX_SPI5_Init+0xa0>)
 8100fca:	f005 fab5 	bl	8106538 <HAL_SPI_Init>
 8100fce:	4603      	mov	r3, r0
 8100fd0:	2b00      	cmp	r3, #0
 8100fd2:	d001      	beq.n	8100fd8 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100fd4:	f000 fa7e 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100fd8:	bf00      	nop
 8100fda:	bd80      	pop	{r7, pc}
 8100fdc:	10000284 	.word	0x10000284
 8100fe0:	40015000 	.word	0x40015000

08100fe4 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8100fe4:	b580      	push	{r7, lr}
 8100fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8100fe8:	4b15      	ldr	r3, [pc, #84]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100fea:	4a16      	ldr	r2, [pc, #88]	@ (8101044 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8100fec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8100fee:	4b14      	ldr	r3, [pc, #80]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100ff0:	2209      	movs	r2, #9
 8100ff2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8100ff4:	4b12      	ldr	r3, [pc, #72]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100ff6:	2200      	movs	r2, #0
 8100ff8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8100ffa:	4b11      	ldr	r3, [pc, #68]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8101000:	4b0f      	ldr	r3, [pc, #60]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101002:	2201      	movs	r2, #1
 8101004:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8101006:	4b0e      	ldr	r3, [pc, #56]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101008:	2200      	movs	r2, #0
 810100a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 810100c:	4b0c      	ldr	r3, [pc, #48]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810100e:	2200      	movs	r2, #0
 8101010:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8101012:	4b0b      	ldr	r3, [pc, #44]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101014:	2200      	movs	r2, #0
 8101016:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8101018:	4b09      	ldr	r3, [pc, #36]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810101a:	2200      	movs	r2, #0
 810101c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 810101e:	4b08      	ldr	r3, [pc, #32]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101020:	2200      	movs	r2, #0
 8101022:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8101024:	4b06      	ldr	r3, [pc, #24]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101026:	2200      	movs	r2, #0
 8101028:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 810102a:	4805      	ldr	r0, [pc, #20]	@ (8101040 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810102c:	f001 fc30 	bl	8102890 <HAL_PCD_Init>
 8101030:	4603      	mov	r3, r0
 8101032:	2b00      	cmp	r3, #0
 8101034:	d001      	beq.n	810103a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8101036:	f000 fa4d 	bl	81014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 810103a:	bf00      	nop
 810103c:	bd80      	pop	{r7, pc}
 810103e:	bf00      	nop
 8101040:	1000030c 	.word	0x1000030c
 8101044:	40040000 	.word	0x40040000

08101048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101048:	b580      	push	{r7, lr}
 810104a:	b090      	sub	sp, #64	@ 0x40
 810104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810104e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101052:	2200      	movs	r2, #0
 8101054:	601a      	str	r2, [r3, #0]
 8101056:	605a      	str	r2, [r3, #4]
 8101058:	609a      	str	r2, [r3, #8]
 810105a:	60da      	str	r2, [r3, #12]
 810105c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 810105e:	4bbc      	ldr	r3, [pc, #752]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101064:	4aba      	ldr	r2, [pc, #744]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810106a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810106e:	4bb8      	ldr	r3, [pc, #736]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101078:	62bb      	str	r3, [r7, #40]	@ 0x28
 810107a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810107c:	4bb4      	ldr	r3, [pc, #720]	@ (8101350 <MX_GPIO_Init+0x308>)
 810107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101082:	4ab3      	ldr	r2, [pc, #716]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101084:	f043 0302 	orr.w	r3, r3, #2
 8101088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810108c:	4bb0      	ldr	r3, [pc, #704]	@ (8101350 <MX_GPIO_Init+0x308>)
 810108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101092:	f003 0302 	and.w	r3, r3, #2
 8101096:	627b      	str	r3, [r7, #36]	@ 0x24
 8101098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 810109a:	4bad      	ldr	r3, [pc, #692]	@ (8101350 <MX_GPIO_Init+0x308>)
 810109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010a0:	4aab      	ldr	r2, [pc, #684]	@ (8101350 <MX_GPIO_Init+0x308>)
 81010a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010aa:	4ba9      	ldr	r3, [pc, #676]	@ (8101350 <MX_GPIO_Init+0x308>)
 81010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81010b4:	623b      	str	r3, [r7, #32]
 81010b6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81010b8:	4ba5      	ldr	r3, [pc, #660]	@ (8101350 <MX_GPIO_Init+0x308>)
 81010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010be:	4aa4      	ldr	r2, [pc, #656]	@ (8101350 <MX_GPIO_Init+0x308>)
 81010c0:	f043 0304 	orr.w	r3, r3, #4
 81010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010c8:	4ba1      	ldr	r3, [pc, #644]	@ (8101350 <MX_GPIO_Init+0x308>)
 81010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010ce:	f003 0304 	and.w	r3, r3, #4
 81010d2:	61fb      	str	r3, [r7, #28]
 81010d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81010d6:	4b9e      	ldr	r3, [pc, #632]	@ (8101350 <MX_GPIO_Init+0x308>)
 81010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010dc:	4a9c      	ldr	r2, [pc, #624]	@ (8101350 <MX_GPIO_Init+0x308>)
 81010de:	f043 0310 	orr.w	r3, r3, #16
 81010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010e6:	4b9a      	ldr	r3, [pc, #616]	@ (8101350 <MX_GPIO_Init+0x308>)
 81010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010ec:	f003 0310 	and.w	r3, r3, #16
 81010f0:	61bb      	str	r3, [r7, #24]
 81010f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81010f4:	4b96      	ldr	r3, [pc, #600]	@ (8101350 <MX_GPIO_Init+0x308>)
 81010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010fa:	4a95      	ldr	r2, [pc, #596]	@ (8101350 <MX_GPIO_Init+0x308>)
 81010fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101104:	4b92      	ldr	r3, [pc, #584]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810110e:	617b      	str	r3, [r7, #20]
 8101110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101112:	4b8f      	ldr	r3, [pc, #572]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101118:	4a8d      	ldr	r2, [pc, #564]	@ (8101350 <MX_GPIO_Init+0x308>)
 810111a:	f043 0308 	orr.w	r3, r3, #8
 810111e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101122:	4b8b      	ldr	r3, [pc, #556]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101128:	f003 0308 	and.w	r3, r3, #8
 810112c:	613b      	str	r3, [r7, #16]
 810112e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101130:	4b87      	ldr	r3, [pc, #540]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101136:	4a86      	ldr	r2, [pc, #536]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101138:	f043 0320 	orr.w	r3, r3, #32
 810113c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101140:	4b83      	ldr	r3, [pc, #524]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101146:	f003 0320 	and.w	r3, r3, #32
 810114a:	60fb      	str	r3, [r7, #12]
 810114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 810114e:	4b80      	ldr	r3, [pc, #512]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101154:	4a7e      	ldr	r2, [pc, #504]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810115a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810115e:	4b7c      	ldr	r3, [pc, #496]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101168:	60bb      	str	r3, [r7, #8]
 810116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 810116c:	4b78      	ldr	r3, [pc, #480]	@ (8101350 <MX_GPIO_Init+0x308>)
 810116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101172:	4a77      	ldr	r2, [pc, #476]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101174:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810117c:	4b74      	ldr	r3, [pc, #464]	@ (8101350 <MX_GPIO_Init+0x308>)
 810117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101186:	607b      	str	r3, [r7, #4]
 8101188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810118a:	4b71      	ldr	r3, [pc, #452]	@ (8101350 <MX_GPIO_Init+0x308>)
 810118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101190:	4a6f      	ldr	r2, [pc, #444]	@ (8101350 <MX_GPIO_Init+0x308>)
 8101192:	f043 0301 	orr.w	r3, r3, #1
 8101196:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810119a:	4b6d      	ldr	r3, [pc, #436]	@ (8101350 <MX_GPIO_Init+0x308>)
 810119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011a0:	f003 0301 	and.w	r3, r3, #1
 81011a4:	603b      	str	r3, [r7, #0]
 81011a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PI6 PI5 PI4 PI1
                           PI0 PI7 PI2 PI3
                           PI9 PI10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 81011a8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 81011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011ae:	2302      	movs	r3, #2
 81011b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011b2:	2300      	movs	r3, #0
 81011b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011b6:	2303      	movs	r3, #3
 81011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81011ba:	230c      	movs	r3, #12
 81011bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81011c2:	4619      	mov	r1, r3
 81011c4:	4863      	ldr	r0, [pc, #396]	@ (8101354 <MX_GPIO_Init+0x30c>)
 81011c6:	f001 f9a1 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 81011ca:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 81011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011d0:	2302      	movs	r3, #2
 81011d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011d4:	2300      	movs	r3, #0
 81011d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011d8:	2300      	movs	r3, #0
 81011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81011dc:	2309      	movs	r3, #9
 81011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81011e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81011e4:	4619      	mov	r1, r3
 81011e6:	485c      	ldr	r0, [pc, #368]	@ (8101358 <MX_GPIO_Init+0x310>)
 81011e8:	f001 f990 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_8;
 81011ec:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 81011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011f2:	2302      	movs	r3, #2
 81011f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011f6:	2300      	movs	r3, #0
 81011f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011fa:	2303      	movs	r3, #3
 81011fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81011fe:	230c      	movs	r3, #12
 8101200:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101202:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101206:	4619      	mov	r1, r3
 8101208:	4854      	ldr	r0, [pc, #336]	@ (810135c <MX_GPIO_Init+0x314>)
 810120a:	f001 f97f 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 810120e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8101212:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101214:	2302      	movs	r3, #2
 8101216:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101218:	2300      	movs	r3, #0
 810121a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810121c:	2303      	movs	r3, #3
 810121e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101220:	230c      	movs	r3, #12
 8101222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101224:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101228:	4619      	mov	r1, r3
 810122a:	484d      	ldr	r0, [pc, #308]	@ (8101360 <MX_GPIO_Init+0x318>)
 810122c:	f001 f96e 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8101230:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8101234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101236:	2302      	movs	r3, #2
 8101238:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810123a:	2300      	movs	r3, #0
 810123c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810123e:	2300      	movs	r3, #0
 8101240:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101242:	230b      	movs	r3, #11
 8101244:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101246:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810124a:	4619      	mov	r1, r3
 810124c:	4842      	ldr	r0, [pc, #264]	@ (8101358 <MX_GPIO_Init+0x310>)
 810124e:	f001 f95d 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH14 PH13 PH5
                           PH10 PH11 PH9 PH12
                           PH6 PH8 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_5
 8101252:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8101256:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_12
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101258:	2302      	movs	r3, #2
 810125a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810125c:	2300      	movs	r3, #0
 810125e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101260:	2303      	movs	r3, #3
 8101262:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101264:	230c      	movs	r3, #12
 8101266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101268:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810126c:	4619      	mov	r1, r3
 810126e:	483d      	ldr	r0, [pc, #244]	@ (8101364 <MX_GPIO_Init+0x31c>)
 8101270:	f001 f94c 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG4 PG2
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_2
 8101274:	f248 1317 	movw	r3, #33047	@ 0x8117
 8101278:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810127a:	2302      	movs	r3, #2
 810127c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810127e:	2300      	movs	r3, #0
 8101280:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101282:	2303      	movs	r3, #3
 8101284:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101286:	230c      	movs	r3, #12
 8101288:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810128a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810128e:	4619      	mov	r1, r3
 8101290:	4831      	ldr	r0, [pc, #196]	@ (8101358 <MX_GPIO_Init+0x310>)
 8101292:	f001 f93b 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101296:	2304      	movs	r3, #4
 8101298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810129a:	2302      	movs	r3, #2
 810129c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810129e:	2300      	movs	r3, #0
 81012a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81012a2:	2303      	movs	r3, #3
 81012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81012a6:	230c      	movs	r3, #12
 81012a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81012aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81012ae:	4619      	mov	r1, r3
 81012b0:	482d      	ldr	r0, [pc, #180]	@ (8101368 <MX_GPIO_Init+0x320>)
 81012b2:	f001 f92b 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 81012b6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 81012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012bc:	2302      	movs	r3, #2
 81012be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012c0:	2300      	movs	r3, #0
 81012c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81012c4:	2303      	movs	r3, #3
 81012c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81012c8:	230c      	movs	r3, #12
 81012ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81012cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81012d0:	4619      	mov	r1, r3
 81012d2:	4825      	ldr	r0, [pc, #148]	@ (8101368 <MX_GPIO_Init+0x320>)
 81012d4:	f001 f91a 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 81012d8:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 81012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012de:	2302      	movs	r3, #2
 81012e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012e2:	2300      	movs	r3, #0
 81012e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81012e6:	2303      	movs	r3, #3
 81012e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81012ea:	230c      	movs	r3, #12
 81012ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81012ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81012f2:	4619      	mov	r1, r3
 81012f4:	481d      	ldr	r0, [pc, #116]	@ (810136c <MX_GPIO_Init+0x324>)
 81012f6:	f001 f909 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 81012fa:	2340      	movs	r3, #64	@ 0x40
 81012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012fe:	2302      	movs	r3, #2
 8101300:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101302:	2300      	movs	r3, #0
 8101304:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101306:	2300      	movs	r3, #0
 8101308:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 810130a:	230a      	movs	r3, #10
 810130c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810130e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101312:	4619      	mov	r1, r3
 8101314:	4810      	ldr	r0, [pc, #64]	@ (8101358 <MX_GPIO_Init+0x310>)
 8101316:	f001 f8f9 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810131a:	23c0      	movs	r3, #192	@ 0xc0
 810131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810131e:	2302      	movs	r3, #2
 8101320:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101322:	2300      	movs	r3, #0
 8101324:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101326:	2300      	movs	r3, #0
 8101328:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810132a:	2309      	movs	r3, #9
 810132c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810132e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101332:	4619      	mov	r1, r3
 8101334:	480d      	ldr	r0, [pc, #52]	@ (810136c <MX_GPIO_Init+0x324>)
 8101336:	f001 f8e9 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 810133a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101340:	2303      	movs	r3, #3
 8101342:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101344:	2300      	movs	r3, #0
 8101346:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101348:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810134c:	4619      	mov	r1, r3
 810134e:	e00f      	b.n	8101370 <MX_GPIO_Init+0x328>
 8101350:	58024400 	.word	0x58024400
 8101354:	58022000 	.word	0x58022000
 8101358:	58021800 	.word	0x58021800
 810135c:	58020800 	.word	0x58020800
 8101360:	58021000 	.word	0x58021000
 8101364:	58021c00 	.word	0x58021c00
 8101368:	58020c00 	.word	0x58020c00
 810136c:	58021400 	.word	0x58021400
 8101370:	4848      	ldr	r0, [pc, #288]	@ (8101494 <MX_GPIO_Init+0x44c>)
 8101372:	f001 f8cb 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8101376:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810137c:	2302      	movs	r3, #2
 810137e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101380:	2300      	movs	r3, #0
 8101382:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101384:	2300      	movs	r3, #0
 8101386:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101388:	230a      	movs	r3, #10
 810138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810138c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101390:	4619      	mov	r1, r3
 8101392:	4840      	ldr	r0, [pc, #256]	@ (8101494 <MX_GPIO_Init+0x44c>)
 8101394:	f001 f8ba 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8101398:	2332      	movs	r3, #50	@ 0x32
 810139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810139c:	2302      	movs	r3, #2
 810139e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013a0:	2300      	movs	r3, #0
 81013a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013a4:	2300      	movs	r3, #0
 81013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81013a8:	230b      	movs	r3, #11
 81013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81013ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81013b0:	4619      	mov	r1, r3
 81013b2:	4839      	ldr	r0, [pc, #228]	@ (8101498 <MX_GPIO_Init+0x450>)
 81013b4:	f001 f8aa 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ9 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 81013b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013be:	2302      	movs	r3, #2
 81013c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013c2:	2300      	movs	r3, #0
 81013c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013c6:	2300      	movs	r3, #0
 81013c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 81013ca:	2308      	movs	r3, #8
 81013cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 81013ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81013d2:	4619      	mov	r1, r3
 81013d4:	4831      	ldr	r0, [pc, #196]	@ (810149c <MX_GPIO_Init+0x454>)
 81013d6:	f001 f899 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 81013da:	230c      	movs	r3, #12
 81013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013de:	2302      	movs	r3, #2
 81013e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013e2:	2300      	movs	r3, #0
 81013e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013e6:	2300      	movs	r3, #0
 81013e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81013ea:	2309      	movs	r3, #9
 81013ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81013ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81013f2:	4619      	mov	r1, r3
 81013f4:	482a      	ldr	r0, [pc, #168]	@ (81014a0 <MX_GPIO_Init+0x458>)
 81013f6:	f001 f889 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 81013fa:	2386      	movs	r3, #134	@ 0x86
 81013fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013fe:	2302      	movs	r3, #2
 8101400:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101402:	2300      	movs	r3, #0
 8101404:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101406:	2300      	movs	r3, #0
 8101408:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810140a:	230b      	movs	r3, #11
 810140c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810140e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101412:	4619      	mov	r1, r3
 8101414:	4823      	ldr	r0, [pc, #140]	@ (81014a4 <MX_GPIO_Init+0x45c>)
 8101416:	f001 f879 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 810141a:	2304      	movs	r3, #4
 810141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810141e:	2302      	movs	r3, #2
 8101420:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101422:	2300      	movs	r3, #0
 8101424:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101426:	2300      	movs	r3, #0
 8101428:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810142a:	2309      	movs	r3, #9
 810142c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810142e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101432:	4619      	mov	r1, r3
 8101434:	481c      	ldr	r0, [pc, #112]	@ (81014a8 <MX_GPIO_Init+0x460>)
 8101436:	f001 f869 	bl	810250c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 810143a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101440:	2302      	movs	r3, #2
 8101442:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101444:	2300      	movs	r3, #0
 8101446:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101448:	2300      	movs	r3, #0
 810144a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810144c:	2309      	movs	r3, #9
 810144e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101450:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101454:	4619      	mov	r1, r3
 8101456:	4815      	ldr	r0, [pc, #84]	@ (81014ac <MX_GPIO_Init+0x464>)
 8101458:	f001 f858 	bl	810250c <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 810145c:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8101460:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8101464:	f000 fdec 	bl	8102040 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8101468:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 810146c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8101470:	f000 fde6 	bl	8102040 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8101474:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8101478:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 810147c:	f000 fde0 	bl	8102040 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8101480:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8101484:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8101488:	f000 fdda 	bl	8102040 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 810148c:	bf00      	nop
 810148e:	3740      	adds	r7, #64	@ 0x40
 8101490:	46bd      	mov	sp, r7
 8101492:	bd80      	pop	{r7, pc}
 8101494:	58021400 	.word	0x58021400
 8101498:	58020800 	.word	0x58020800
 810149c:	58022400 	.word	0x58022400
 81014a0:	58021c00 	.word	0x58021c00
 81014a4:	58020000 	.word	0x58020000
 81014a8:	58020400 	.word	0x58020400
 81014ac:	58020c00 	.word	0x58020c00

081014b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81014b0:	b580      	push	{r7, lr}
 81014b2:	b082      	sub	sp, #8
 81014b4:	af00      	add	r7, sp, #0
 81014b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	681b      	ldr	r3, [r3, #0]
 81014bc:	4a04      	ldr	r2, [pc, #16]	@ (81014d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81014be:	4293      	cmp	r3, r2
 81014c0:	d101      	bne.n	81014c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 81014c2:	f000 fd6d 	bl	8101fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81014c6:	bf00      	nop
 81014c8:	3708      	adds	r7, #8
 81014ca:	46bd      	mov	sp, r7
 81014cc:	bd80      	pop	{r7, pc}
 81014ce:	bf00      	nop
 81014d0:	40000400 	.word	0x40000400

081014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81014d4:	b480      	push	{r7}
 81014d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 81014d8:	b672      	cpsid	i
}
 81014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81014dc:	bf00      	nop
 81014de:	e7fd      	b.n	81014dc <Error_Handler+0x8>

081014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81014e0:	b580      	push	{r7, lr}
 81014e2:	b082      	sub	sp, #8
 81014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81014e6:	4b10      	ldr	r3, [pc, #64]	@ (8101528 <HAL_MspInit+0x48>)
 81014e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81014ec:	4a0e      	ldr	r2, [pc, #56]	@ (8101528 <HAL_MspInit+0x48>)
 81014ee:	f043 0302 	orr.w	r3, r3, #2
 81014f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8101528 <HAL_MspInit+0x48>)
 81014f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81014fc:	f003 0302 	and.w	r3, r3, #2
 8101500:	607b      	str	r3, [r7, #4]
 8101502:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101504:	2200      	movs	r2, #0
 8101506:	210f      	movs	r1, #15
 8101508:	f06f 0001 	mvn.w	r0, #1
 810150c:	f000 ffc4 	bl	8102498 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 8101510:	2200      	movs	r2, #0
 8101512:	2105      	movs	r1, #5
 8101514:	2040      	movs	r0, #64	@ 0x40
 8101516:	f000 ffbf 	bl	8102498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 810151a:	2040      	movs	r0, #64	@ 0x40
 810151c:	f000 ffd6 	bl	81024cc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101520:	bf00      	nop
 8101522:	3708      	adds	r7, #8
 8101524:	46bd      	mov	sp, r7
 8101526:	bd80      	pop	{r7, pc}
 8101528:	58024400 	.word	0x58024400

0810152c <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 810152c:	b580      	push	{r7, lr}
 810152e:	b0bc      	sub	sp, #240	@ 0xf0
 8101530:	af00      	add	r7, sp, #0
 8101532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101534:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101538:	2200      	movs	r2, #0
 810153a:	601a      	str	r2, [r3, #0]
 810153c:	605a      	str	r2, [r3, #4]
 810153e:	609a      	str	r2, [r3, #8]
 8101540:	60da      	str	r2, [r3, #12]
 8101542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101544:	f107 0310 	add.w	r3, r7, #16
 8101548:	22c8      	movs	r2, #200	@ 0xc8
 810154a:	2100      	movs	r1, #0
 810154c:	4618      	mov	r0, r3
 810154e:	f006 fc8d 	bl	8107e6c <memset>
  if(hcec->Instance==CEC)
 8101552:	687b      	ldr	r3, [r7, #4]
 8101554:	681b      	ldr	r3, [r3, #0]
 8101556:	4a2b      	ldr	r2, [pc, #172]	@ (8101604 <HAL_CEC_MspInit+0xd8>)
 8101558:	4293      	cmp	r3, r2
 810155a:	d14e      	bne.n	81015fa <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 810155c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8101560:	f04f 0300 	mov.w	r3, #0
 8101564:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8101568:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 810156c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101570:	f107 0310 	add.w	r3, r7, #16
 8101574:	4618      	mov	r0, r3
 8101576:	f001 fd57 	bl	8103028 <HAL_RCCEx_PeriphCLKConfig>
 810157a:	4603      	mov	r3, r0
 810157c:	2b00      	cmp	r3, #0
 810157e:	d001      	beq.n	8101584 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 8101580:	f7ff ffa8 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8101584:	4b20      	ldr	r3, [pc, #128]	@ (8101608 <HAL_CEC_MspInit+0xdc>)
 8101586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810158a:	4a1f      	ldr	r2, [pc, #124]	@ (8101608 <HAL_CEC_MspInit+0xdc>)
 810158c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8101590:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101594:	4b1c      	ldr	r3, [pc, #112]	@ (8101608 <HAL_CEC_MspInit+0xdc>)
 8101596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810159a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810159e:	60fb      	str	r3, [r7, #12]
 81015a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81015a2:	4b19      	ldr	r3, [pc, #100]	@ (8101608 <HAL_CEC_MspInit+0xdc>)
 81015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015a8:	4a17      	ldr	r2, [pc, #92]	@ (8101608 <HAL_CEC_MspInit+0xdc>)
 81015aa:	f043 0302 	orr.w	r3, r3, #2
 81015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015b2:	4b15      	ldr	r3, [pc, #84]	@ (8101608 <HAL_CEC_MspInit+0xdc>)
 81015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015b8:	f003 0302 	and.w	r3, r3, #2
 81015bc:	60bb      	str	r3, [r7, #8]
 81015be:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 81015c0:	2340      	movs	r3, #64	@ 0x40
 81015c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015c6:	2312      	movs	r3, #18
 81015c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015cc:	2300      	movs	r3, #0
 81015ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015d2:	2300      	movs	r3, #0
 81015d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 81015d8:	2305      	movs	r3, #5
 81015da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 81015de:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81015e2:	4619      	mov	r1, r3
 81015e4:	4809      	ldr	r0, [pc, #36]	@ (810160c <HAL_CEC_MspInit+0xe0>)
 81015e6:	f000 ff91 	bl	810250c <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 81015ea:	2200      	movs	r2, #0
 81015ec:	2105      	movs	r1, #5
 81015ee:	205e      	movs	r0, #94	@ 0x5e
 81015f0:	f000 ff52 	bl	8102498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 81015f4:	205e      	movs	r0, #94	@ 0x5e
 81015f6:	f000 ff69 	bl	81024cc <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 81015fa:	bf00      	nop
 81015fc:	37f0      	adds	r7, #240	@ 0xf0
 81015fe:	46bd      	mov	sp, r7
 8101600:	bd80      	pop	{r7, pc}
 8101602:	bf00      	nop
 8101604:	40006c00 	.word	0x40006c00
 8101608:	58024400 	.word	0x58024400
 810160c:	58020400 	.word	0x58020400

08101610 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101610:	b580      	push	{r7, lr}
 8101612:	b0b4      	sub	sp, #208	@ 0xd0
 8101614:	af00      	add	r7, sp, #0
 8101616:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101618:	f107 0308 	add.w	r3, r7, #8
 810161c:	22c8      	movs	r2, #200	@ 0xc8
 810161e:	2100      	movs	r1, #0
 8101620:	4618      	mov	r0, r3
 8101622:	f006 fc23 	bl	8107e6c <memset>
  if(hrtc->Instance==RTC)
 8101626:	687b      	ldr	r3, [r7, #4]
 8101628:	681b      	ldr	r3, [r3, #0]
 810162a:	4a10      	ldr	r2, [pc, #64]	@ (810166c <HAL_RTC_MspInit+0x5c>)
 810162c:	4293      	cmp	r3, r2
 810162e:	d119      	bne.n	8101664 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101630:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101634:	f04f 0300 	mov.w	r3, #0
 8101638:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 810163c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101640:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101644:	f107 0308 	add.w	r3, r7, #8
 8101648:	4618      	mov	r0, r3
 810164a:	f001 fced 	bl	8103028 <HAL_RCCEx_PeriphCLKConfig>
 810164e:	4603      	mov	r3, r0
 8101650:	2b00      	cmp	r3, #0
 8101652:	d001      	beq.n	8101658 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8101654:	f7ff ff3e 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101658:	4b05      	ldr	r3, [pc, #20]	@ (8101670 <HAL_RTC_MspInit+0x60>)
 810165a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810165c:	4a04      	ldr	r2, [pc, #16]	@ (8101670 <HAL_RTC_MspInit+0x60>)
 810165e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101662:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8101664:	bf00      	nop
 8101666:	37d0      	adds	r7, #208	@ 0xd0
 8101668:	46bd      	mov	sp, r7
 810166a:	bd80      	pop	{r7, pc}
 810166c:	58004000 	.word	0x58004000
 8101670:	58024400 	.word	0x58024400

08101674 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8101674:	b580      	push	{r7, lr}
 8101676:	b0bc      	sub	sp, #240	@ 0xf0
 8101678:	af00      	add	r7, sp, #0
 810167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810167c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101680:	2200      	movs	r2, #0
 8101682:	601a      	str	r2, [r3, #0]
 8101684:	605a      	str	r2, [r3, #4]
 8101686:	609a      	str	r2, [r3, #8]
 8101688:	60da      	str	r2, [r3, #12]
 810168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810168c:	f107 0310 	add.w	r3, r7, #16
 8101690:	22c8      	movs	r2, #200	@ 0xc8
 8101692:	2100      	movs	r1, #0
 8101694:	4618      	mov	r0, r3
 8101696:	f006 fbe9 	bl	8107e6c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 810169a:	687b      	ldr	r3, [r7, #4]
 810169c:	681b      	ldr	r3, [r3, #0]
 810169e:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 81016a2:	d144      	bne.n	810172e <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 81016a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 81016a8:	f04f 0300 	mov.w	r3, #0
 81016ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 81016b0:	2300      	movs	r3, #0
 81016b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016b4:	f107 0310 	add.w	r3, r7, #16
 81016b8:	4618      	mov	r0, r3
 81016ba:	f001 fcb5 	bl	8103028 <HAL_RCCEx_PeriphCLKConfig>
 81016be:	4603      	mov	r3, r0
 81016c0:	2b00      	cmp	r3, #0
 81016c2:	d001      	beq.n	81016c8 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 81016c4:	f7ff ff06 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 81016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8101738 <HAL_SPDIFRX_MspInit+0xc4>)
 81016ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016ce:	4a1a      	ldr	r2, [pc, #104]	@ (8101738 <HAL_SPDIFRX_MspInit+0xc4>)
 81016d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81016d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81016d8:	4b17      	ldr	r3, [pc, #92]	@ (8101738 <HAL_SPDIFRX_MspInit+0xc4>)
 81016da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81016e2:	60fb      	str	r3, [r7, #12]
 81016e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81016e6:	4b14      	ldr	r3, [pc, #80]	@ (8101738 <HAL_SPDIFRX_MspInit+0xc4>)
 81016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016ec:	4a12      	ldr	r2, [pc, #72]	@ (8101738 <HAL_SPDIFRX_MspInit+0xc4>)
 81016ee:	f043 0308 	orr.w	r3, r3, #8
 81016f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016f6:	4b10      	ldr	r3, [pc, #64]	@ (8101738 <HAL_SPDIFRX_MspInit+0xc4>)
 81016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016fc:	f003 0308 	and.w	r3, r3, #8
 8101700:	60bb      	str	r3, [r7, #8]
 8101702:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101704:	2380      	movs	r3, #128	@ 0x80
 8101706:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810170a:	2302      	movs	r3, #2
 810170c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101710:	2300      	movs	r3, #0
 8101712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101716:	2300      	movs	r3, #0
 8101718:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 810171c:	2309      	movs	r3, #9
 810171e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101722:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101726:	4619      	mov	r1, r3
 8101728:	4804      	ldr	r0, [pc, #16]	@ (810173c <HAL_SPDIFRX_MspInit+0xc8>)
 810172a:	f000 feef 	bl	810250c <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 810172e:	bf00      	nop
 8101730:	37f0      	adds	r7, #240	@ 0xf0
 8101732:	46bd      	mov	sp, r7
 8101734:	bd80      	pop	{r7, pc}
 8101736:	bf00      	nop
 8101738:	58024400 	.word	0x58024400
 810173c:	58020c00 	.word	0x58020c00

08101740 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101740:	b580      	push	{r7, lr}
 8101742:	b0be      	sub	sp, #248	@ 0xf8
 8101744:	af00      	add	r7, sp, #0
 8101746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101748:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810174c:	2200      	movs	r2, #0
 810174e:	601a      	str	r2, [r3, #0]
 8101750:	605a      	str	r2, [r3, #4]
 8101752:	609a      	str	r2, [r3, #8]
 8101754:	60da      	str	r2, [r3, #12]
 8101756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101758:	f107 0318 	add.w	r3, r7, #24
 810175c:	22c8      	movs	r2, #200	@ 0xc8
 810175e:	2100      	movs	r1, #0
 8101760:	4618      	mov	r0, r3
 8101762:	f006 fb83 	bl	8107e6c <memset>
  if(hspi->Instance==SPI5)
 8101766:	687b      	ldr	r3, [r7, #4]
 8101768:	681b      	ldr	r3, [r3, #0]
 810176a:	4a39      	ldr	r2, [pc, #228]	@ (8101850 <HAL_SPI_MspInit+0x110>)
 810176c:	4293      	cmp	r3, r2
 810176e:	d16a      	bne.n	8101846 <HAL_SPI_MspInit+0x106>

    /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101770:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101774:	f04f 0300 	mov.w	r3, #0
 8101778:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 810177c:	2300      	movs	r3, #0
 810177e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101782:	f107 0318 	add.w	r3, r7, #24
 8101786:	4618      	mov	r0, r3
 8101788:	f001 fc4e 	bl	8103028 <HAL_RCCEx_PeriphCLKConfig>
 810178c:	4603      	mov	r3, r0
 810178e:	2b00      	cmp	r3, #0
 8101790:	d001      	beq.n	8101796 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8101792:	f7ff fe9f 	bl	81014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101796:	4b2f      	ldr	r3, [pc, #188]	@ (8101854 <HAL_SPI_MspInit+0x114>)
 8101798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810179c:	4a2d      	ldr	r2, [pc, #180]	@ (8101854 <HAL_SPI_MspInit+0x114>)
 810179e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81017a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81017a6:	4b2b      	ldr	r3, [pc, #172]	@ (8101854 <HAL_SPI_MspInit+0x114>)
 81017a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81017ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81017b0:	617b      	str	r3, [r7, #20]
 81017b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 81017b4:	4b27      	ldr	r3, [pc, #156]	@ (8101854 <HAL_SPI_MspInit+0x114>)
 81017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017ba:	4a26      	ldr	r2, [pc, #152]	@ (8101854 <HAL_SPI_MspInit+0x114>)
 81017bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81017c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81017c4:	4b23      	ldr	r3, [pc, #140]	@ (8101854 <HAL_SPI_MspInit+0x114>)
 81017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81017ce:	613b      	str	r3, [r7, #16]
 81017d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81017d2:	4b20      	ldr	r3, [pc, #128]	@ (8101854 <HAL_SPI_MspInit+0x114>)
 81017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017d8:	4a1e      	ldr	r2, [pc, #120]	@ (8101854 <HAL_SPI_MspInit+0x114>)
 81017da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81017de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81017e2:	4b1c      	ldr	r3, [pc, #112]	@ (8101854 <HAL_SPI_MspInit+0x114>)
 81017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81017e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81017ec:	60fb      	str	r3, [r7, #12]
 81017ee:	68fb      	ldr	r3, [r7, #12]
    PK0     ------> SPI5_SCK
    PK1     ------> SPI5_NSS
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 81017f0:	2303      	movs	r3, #3
 81017f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017f6:	2302      	movs	r3, #2
 81017f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017fc:	2300      	movs	r3, #0
 81017fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101802:	2300      	movs	r3, #0
 8101804:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101808:	2305      	movs	r3, #5
 810180a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 810180e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101812:	4619      	mov	r1, r3
 8101814:	4810      	ldr	r0, [pc, #64]	@ (8101858 <HAL_SPI_MspInit+0x118>)
 8101816:	f000 fe79 	bl	810250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 810181a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 810181e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101822:	2302      	movs	r3, #2
 8101824:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101828:	2300      	movs	r3, #0
 810182a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810182e:	2300      	movs	r3, #0
 8101830:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101834:	2305      	movs	r3, #5
 8101836:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 810183a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810183e:	4619      	mov	r1, r3
 8101840:	4806      	ldr	r0, [pc, #24]	@ (810185c <HAL_SPI_MspInit+0x11c>)
 8101842:	f000 fe63 	bl	810250c <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8101846:	bf00      	nop
 8101848:	37f8      	adds	r7, #248	@ 0xf8
 810184a:	46bd      	mov	sp, r7
 810184c:	bd80      	pop	{r7, pc}
 810184e:	bf00      	nop
 8101850:	40015000 	.word	0x40015000
 8101854:	58024400 	.word	0x58024400
 8101858:	58022800 	.word	0x58022800
 810185c:	58022400 	.word	0x58022400

08101860 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8101860:	b580      	push	{r7, lr}
 8101862:	b0c2      	sub	sp, #264	@ 0x108
 8101864:	af00      	add	r7, sp, #0
 8101866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 810186a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 810186e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101870:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101874:	2200      	movs	r2, #0
 8101876:	601a      	str	r2, [r3, #0]
 8101878:	605a      	str	r2, [r3, #4]
 810187a:	609a      	str	r2, [r3, #8]
 810187c:	60da      	str	r2, [r3, #12]
 810187e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101880:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101884:	22c8      	movs	r2, #200	@ 0xc8
 8101886:	2100      	movs	r1, #0
 8101888:	4618      	mov	r0, r3
 810188a:	f006 faef 	bl	8107e6c <memset>
  if(hpcd->Instance==USB_OTG_HS)
 810188e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8101896:	681b      	ldr	r3, [r3, #0]
 8101898:	681b      	ldr	r3, [r3, #0]
 810189a:	4a79      	ldr	r2, [pc, #484]	@ (8101a80 <HAL_PCD_MspInit+0x220>)
 810189c:	4293      	cmp	r3, r2
 810189e:	f040 80ea 	bne.w	8101a76 <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81018a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 81018a6:	f04f 0300 	mov.w	r3, #0
 81018aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 81018ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 81018b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81018b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81018ba:	4618      	mov	r0, r3
 81018bc:	f001 fbb4 	bl	8103028 <HAL_RCCEx_PeriphCLKConfig>
 81018c0:	4603      	mov	r3, r0
 81018c2:	2b00      	cmp	r3, #0
 81018c4:	d001      	beq.n	81018ca <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 81018c6:	f7ff fe05 	bl	81014d4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 81018ca:	f001 f999 	bl	8102c00 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81018ce:	4b6d      	ldr	r3, [pc, #436]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 81018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018d4:	4a6b      	ldr	r2, [pc, #428]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 81018d6:	f043 0302 	orr.w	r3, r3, #2
 81018da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018de:	4b69      	ldr	r3, [pc, #420]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 81018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018e4:	f003 0302 	and.w	r3, r3, #2
 81018e8:	627b      	str	r3, [r7, #36]	@ 0x24
 81018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 81018ec:	4b65      	ldr	r3, [pc, #404]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 81018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018f2:	4a64      	ldr	r2, [pc, #400]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 81018f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018fc:	4b61      	ldr	r3, [pc, #388]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 81018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101906:	623b      	str	r3, [r7, #32]
 8101908:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810190a:	4b5e      	ldr	r3, [pc, #376]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 810190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101910:	4a5c      	ldr	r2, [pc, #368]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 8101912:	f043 0304 	orr.w	r3, r3, #4
 8101916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810191a:	4b5a      	ldr	r3, [pc, #360]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 810191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101920:	f003 0304 	and.w	r3, r3, #4
 8101924:	61fb      	str	r3, [r7, #28]
 8101926:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101928:	4b56      	ldr	r3, [pc, #344]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 810192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810192e:	4a55      	ldr	r2, [pc, #340]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 8101930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101938:	4b52      	ldr	r3, [pc, #328]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 810193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810193e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101942:	61bb      	str	r3, [r7, #24]
 8101944:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101946:	4b4f      	ldr	r3, [pc, #316]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 8101948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810194c:	4a4d      	ldr	r2, [pc, #308]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 810194e:	f043 0301 	orr.w	r3, r3, #1
 8101952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101956:	4b4b      	ldr	r3, [pc, #300]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 8101958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810195c:	f003 0301 	and.w	r3, r3, #1
 8101960:	617b      	str	r3, [r7, #20]
 8101962:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8101964:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8101968:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810196c:	2302      	movs	r3, #2
 810196e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101972:	2300      	movs	r3, #0
 8101974:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101978:	2302      	movs	r3, #2
 810197a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810197e:	230a      	movs	r3, #10
 8101980:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101984:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101988:	4619      	mov	r1, r3
 810198a:	483f      	ldr	r0, [pc, #252]	@ (8101a88 <HAL_PCD_MspInit+0x228>)
 810198c:	f000 fdbe 	bl	810250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8101990:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101994:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101998:	2302      	movs	r3, #2
 810199a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810199e:	2300      	movs	r3, #0
 81019a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81019a4:	2302      	movs	r3, #2
 81019a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81019aa:	230a      	movs	r3, #10
 81019ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 81019b0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81019b4:	4619      	mov	r1, r3
 81019b6:	4835      	ldr	r0, [pc, #212]	@ (8101a8c <HAL_PCD_MspInit+0x22c>)
 81019b8:	f000 fda8 	bl	810250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 81019bc:	2301      	movs	r3, #1
 81019be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019c2:	2302      	movs	r3, #2
 81019c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019c8:	2300      	movs	r3, #0
 81019ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81019ce:	2302      	movs	r3, #2
 81019d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81019d4:	230a      	movs	r3, #10
 81019d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 81019da:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81019de:	4619      	mov	r1, r3
 81019e0:	482b      	ldr	r0, [pc, #172]	@ (8101a90 <HAL_PCD_MspInit+0x230>)
 81019e2:	f000 fd93 	bl	810250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 81019e6:	2310      	movs	r3, #16
 81019e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019ec:	2302      	movs	r3, #2
 81019ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019f2:	2300      	movs	r3, #0
 81019f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81019f8:	2302      	movs	r3, #2
 81019fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81019fe:	230a      	movs	r3, #10
 8101a00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8101a04:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101a08:	4619      	mov	r1, r3
 8101a0a:	4822      	ldr	r0, [pc, #136]	@ (8101a94 <HAL_PCD_MspInit+0x234>)
 8101a0c:	f000 fd7e 	bl	810250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8101a10:	2328      	movs	r3, #40	@ 0x28
 8101a12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a16:	2302      	movs	r3, #2
 8101a18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a1c:	2300      	movs	r3, #0
 8101a1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101a22:	2302      	movs	r3, #2
 8101a24:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101a28:	230a      	movs	r3, #10
 8101a2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101a2e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101a32:	4619      	mov	r1, r3
 8101a34:	4818      	ldr	r0, [pc, #96]	@ (8101a98 <HAL_PCD_MspInit+0x238>)
 8101a36:	f000 fd69 	bl	810250c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8101a3a:	4b12      	ldr	r3, [pc, #72]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 8101a3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101a40:	4a10      	ldr	r2, [pc, #64]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 8101a42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101a46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 8101a4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101a54:	613b      	str	r3, [r7, #16]
 8101a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8101a58:	4b0a      	ldr	r3, [pc, #40]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 8101a5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101a5e:	4a09      	ldr	r2, [pc, #36]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 8101a60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8101a64:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101a68:	4b06      	ldr	r3, [pc, #24]	@ (8101a84 <HAL_PCD_MspInit+0x224>)
 8101a6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101a6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8101a72:	60fb      	str	r3, [r7, #12]
 8101a74:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8101a76:	bf00      	nop
 8101a78:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8101a7c:	46bd      	mov	sp, r7
 8101a7e:	bd80      	pop	{r7, pc}
 8101a80:	40040000 	.word	0x40040000
 8101a84:	58024400 	.word	0x58024400
 8101a88:	58020400 	.word	0x58020400
 8101a8c:	58022000 	.word	0x58022000
 8101a90:	58020800 	.word	0x58020800
 8101a94:	58021c00 	.word	0x58021c00
 8101a98:	58020000 	.word	0x58020000

08101a9c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8101a9c:	b580      	push	{r7, lr}
 8101a9e:	b0bc      	sub	sp, #240	@ 0xf0
 8101aa0:	af00      	add	r7, sp, #0
 8101aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101aa4:	f107 0310 	add.w	r3, r7, #16
 8101aa8:	22c8      	movs	r2, #200	@ 0xc8
 8101aaa:	2100      	movs	r1, #0
 8101aac:	4618      	mov	r0, r3
 8101aae:	f006 f9dd 	bl	8107e6c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8101ab2:	687b      	ldr	r3, [r7, #4]
 8101ab4:	681b      	ldr	r3, [r3, #0]
 8101ab6:	4a4f      	ldr	r2, [pc, #316]	@ (8101bf4 <HAL_SAI_MspInit+0x158>)
 8101ab8:	4293      	cmp	r3, r2
 8101aba:	d153      	bne.n	8101b64 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8101abc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101ac0:	f04f 0300 	mov.w	r3, #0
 8101ac4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101ac8:	2300      	movs	r3, #0
 8101aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101acc:	f107 0310 	add.w	r3, r7, #16
 8101ad0:	4618      	mov	r0, r3
 8101ad2:	f001 faa9 	bl	8103028 <HAL_RCCEx_PeriphCLKConfig>
 8101ad6:	4603      	mov	r3, r0
 8101ad8:	2b00      	cmp	r3, #0
 8101ada:	d001      	beq.n	8101ae0 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8101adc:	f7ff fcfa 	bl	81014d4 <Error_Handler>
    }

    if (SAI1_client == 0)
 8101ae0:	4b45      	ldr	r3, [pc, #276]	@ (8101bf8 <HAL_SAI_MspInit+0x15c>)
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	2b00      	cmp	r3, #0
 8101ae6:	d10e      	bne.n	8101b06 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101ae8:	4b44      	ldr	r3, [pc, #272]	@ (8101bfc <HAL_SAI_MspInit+0x160>)
 8101aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101aee:	4a43      	ldr	r2, [pc, #268]	@ (8101bfc <HAL_SAI_MspInit+0x160>)
 8101af0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101af4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101af8:	4b40      	ldr	r3, [pc, #256]	@ (8101bfc <HAL_SAI_MspInit+0x160>)
 8101afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101b02:	60fb      	str	r3, [r7, #12]
 8101b04:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8101b06:	4b3c      	ldr	r3, [pc, #240]	@ (8101bf8 <HAL_SAI_MspInit+0x15c>)
 8101b08:	681b      	ldr	r3, [r3, #0]
 8101b0a:	3301      	adds	r3, #1
 8101b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8101bf8 <HAL_SAI_MspInit+0x15c>)
 8101b0e:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8101b10:	2370      	movs	r3, #112	@ 0x70
 8101b12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b16:	2302      	movs	r3, #2
 8101b18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b1c:	2300      	movs	r3, #0
 8101b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b22:	2300      	movs	r3, #0
 8101b24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101b28:	2306      	movs	r3, #6
 8101b2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101b2e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101b32:	4619      	mov	r1, r3
 8101b34:	4832      	ldr	r0, [pc, #200]	@ (8101c00 <HAL_SAI_MspInit+0x164>)
 8101b36:	f000 fce9 	bl	810250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8101b3a:	2380      	movs	r3, #128	@ 0x80
 8101b3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b40:	2302      	movs	r3, #2
 8101b42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b46:	2300      	movs	r3, #0
 8101b48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b4c:	2300      	movs	r3, #0
 8101b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101b52:	2306      	movs	r3, #6
 8101b54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 8101b58:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101b5c:	4619      	mov	r1, r3
 8101b5e:	4829      	ldr	r0, [pc, #164]	@ (8101c04 <HAL_SAI_MspInit+0x168>)
 8101b60:	f000 fcd4 	bl	810250c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	681b      	ldr	r3, [r3, #0]
 8101b68:	4a27      	ldr	r2, [pc, #156]	@ (8101c08 <HAL_SAI_MspInit+0x16c>)
 8101b6a:	4293      	cmp	r3, r2
 8101b6c:	d13e      	bne.n	8101bec <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8101b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101b72:	f04f 0300 	mov.w	r3, #0
 8101b76:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101b7a:	2300      	movs	r3, #0
 8101b7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b7e:	f107 0310 	add.w	r3, r7, #16
 8101b82:	4618      	mov	r0, r3
 8101b84:	f001 fa50 	bl	8103028 <HAL_RCCEx_PeriphCLKConfig>
 8101b88:	4603      	mov	r3, r0
 8101b8a:	2b00      	cmp	r3, #0
 8101b8c:	d001      	beq.n	8101b92 <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 8101b8e:	f7ff fca1 	bl	81014d4 <Error_Handler>
    }

      if (SAI1_client == 0)
 8101b92:	4b19      	ldr	r3, [pc, #100]	@ (8101bf8 <HAL_SAI_MspInit+0x15c>)
 8101b94:	681b      	ldr	r3, [r3, #0]
 8101b96:	2b00      	cmp	r3, #0
 8101b98:	d10e      	bne.n	8101bb8 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101b9a:	4b18      	ldr	r3, [pc, #96]	@ (8101bfc <HAL_SAI_MspInit+0x160>)
 8101b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101ba0:	4a16      	ldr	r2, [pc, #88]	@ (8101bfc <HAL_SAI_MspInit+0x160>)
 8101ba2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101ba6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101baa:	4b14      	ldr	r3, [pc, #80]	@ (8101bfc <HAL_SAI_MspInit+0x160>)
 8101bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101bb4:	60bb      	str	r3, [r7, #8]
 8101bb6:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8101bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8101bf8 <HAL_SAI_MspInit+0x15c>)
 8101bba:	681b      	ldr	r3, [r3, #0]
 8101bbc:	3301      	adds	r3, #1
 8101bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8101bf8 <HAL_SAI_MspInit+0x15c>)
 8101bc0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8101bc2:	2308      	movs	r3, #8
 8101bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bc8:	2302      	movs	r3, #2
 8101bca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bce:	2300      	movs	r3, #0
 8101bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bd4:	2300      	movs	r3, #0
 8101bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101bda:	2306      	movs	r3, #6
 8101bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8101be0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101be4:	4619      	mov	r1, r3
 8101be6:	4806      	ldr	r0, [pc, #24]	@ (8101c00 <HAL_SAI_MspInit+0x164>)
 8101be8:	f000 fc90 	bl	810250c <HAL_GPIO_Init>

    }
}
 8101bec:	bf00      	nop
 8101bee:	37f0      	adds	r7, #240	@ 0xf0
 8101bf0:	46bd      	mov	sp, r7
 8101bf2:	bd80      	pop	{r7, pc}
 8101bf4:	40015804 	.word	0x40015804
 8101bf8:	10000800 	.word	0x10000800
 8101bfc:	58024400 	.word	0x58024400
 8101c00:	58021000 	.word	0x58021000
 8101c04:	58021800 	.word	0x58021800
 8101c08:	40015824 	.word	0x40015824

08101c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101c0c:	b580      	push	{r7, lr}
 8101c0e:	b090      	sub	sp, #64	@ 0x40
 8101c10:	af00      	add	r7, sp, #0
 8101c12:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	2b0f      	cmp	r3, #15
 8101c18:	d827      	bhi.n	8101c6a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8101c1a:	2200      	movs	r2, #0
 8101c1c:	6879      	ldr	r1, [r7, #4]
 8101c1e:	201d      	movs	r0, #29
 8101c20:	f000 fc3a 	bl	8102498 <HAL_NVIC_SetPriority>

     /* Enable the TIM3 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8101c24:	201d      	movs	r0, #29
 8101c26:	f000 fc51 	bl	81024cc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8101c2a:	4a29      	ldr	r2, [pc, #164]	@ (8101cd0 <HAL_InitTick+0xc4>)
 8101c2c:	687b      	ldr	r3, [r7, #4]
 8101c2e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8101c30:	4b28      	ldr	r3, [pc, #160]	@ (8101cd4 <HAL_InitTick+0xc8>)
 8101c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101c36:	4a27      	ldr	r2, [pc, #156]	@ (8101cd4 <HAL_InitTick+0xc8>)
 8101c38:	f043 0302 	orr.w	r3, r3, #2
 8101c3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101c40:	4b24      	ldr	r3, [pc, #144]	@ (8101cd4 <HAL_InitTick+0xc8>)
 8101c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101c46:	f003 0302 	and.w	r3, r3, #2
 8101c4a:	60fb      	str	r3, [r7, #12]
 8101c4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101c4e:	f107 0210 	add.w	r2, r7, #16
 8101c52:	f107 0314 	add.w	r3, r7, #20
 8101c56:	4611      	mov	r1, r2
 8101c58:	4618      	mov	r0, r3
 8101c5a:	f001 f9a3 	bl	8102fa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8101c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8101c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101c64:	2b00      	cmp	r3, #0
 8101c66:	d106      	bne.n	8101c76 <HAL_InitTick+0x6a>
 8101c68:	e001      	b.n	8101c6e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8101c6a:	2301      	movs	r3, #1
 8101c6c:	e02b      	b.n	8101cc6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8101c6e:	f001 f983 	bl	8102f78 <HAL_RCC_GetPCLK1Freq>
 8101c72:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8101c74:	e004      	b.n	8101c80 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8101c76:	f001 f97f 	bl	8102f78 <HAL_RCC_GetPCLK1Freq>
 8101c7a:	4603      	mov	r3, r0
 8101c7c:	005b      	lsls	r3, r3, #1
 8101c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101c82:	4a15      	ldr	r2, [pc, #84]	@ (8101cd8 <HAL_InitTick+0xcc>)
 8101c84:	fba2 2303 	umull	r2, r3, r2, r3
 8101c88:	0c9b      	lsrs	r3, r3, #18
 8101c8a:	3b01      	subs	r3, #1
 8101c8c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8101c8e:	4b13      	ldr	r3, [pc, #76]	@ (8101cdc <HAL_InitTick+0xd0>)
 8101c90:	4a13      	ldr	r2, [pc, #76]	@ (8101ce0 <HAL_InitTick+0xd4>)
 8101c92:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8101c94:	4b11      	ldr	r3, [pc, #68]	@ (8101cdc <HAL_InitTick+0xd0>)
 8101c96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8101c9a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8101c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8101cdc <HAL_InitTick+0xd0>)
 8101c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101ca0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8101ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8101cdc <HAL_InitTick+0xd0>)
 8101ca4:	2200      	movs	r2, #0
 8101ca6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8101cdc <HAL_InitTick+0xd0>)
 8101caa:	2200      	movs	r2, #0
 8101cac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8101cae:	480b      	ldr	r0, [pc, #44]	@ (8101cdc <HAL_InitTick+0xd0>)
 8101cb0:	f004 fd81 	bl	81067b6 <HAL_TIM_Base_Init>
 8101cb4:	4603      	mov	r3, r0
 8101cb6:	2b00      	cmp	r3, #0
 8101cb8:	d104      	bne.n	8101cc4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8101cba:	4808      	ldr	r0, [pc, #32]	@ (8101cdc <HAL_InitTick+0xd0>)
 8101cbc:	f004 fddc 	bl	8106878 <HAL_TIM_Base_Start_IT>
 8101cc0:	4603      	mov	r3, r0
 8101cc2:	e000      	b.n	8101cc6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8101cc4:	2301      	movs	r3, #1
}
 8101cc6:	4618      	mov	r0, r3
 8101cc8:	3740      	adds	r7, #64	@ 0x40
 8101cca:	46bd      	mov	sp, r7
 8101ccc:	bd80      	pop	{r7, pc}
 8101cce:	bf00      	nop
 8101cd0:	10000008 	.word	0x10000008
 8101cd4:	58024400 	.word	0x58024400
 8101cd8:	431bde83 	.word	0x431bde83
 8101cdc:	10000804 	.word	0x10000804
 8101ce0:	40000400 	.word	0x40000400

08101ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101ce4:	b480      	push	{r7}
 8101ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101ce8:	bf00      	nop
 8101cea:	e7fd      	b.n	8101ce8 <NMI_Handler+0x4>

08101cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101cec:	b480      	push	{r7}
 8101cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101cf0:	bf00      	nop
 8101cf2:	e7fd      	b.n	8101cf0 <HardFault_Handler+0x4>

08101cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101cf4:	b480      	push	{r7}
 8101cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101cf8:	bf00      	nop
 8101cfa:	e7fd      	b.n	8101cf8 <MemManage_Handler+0x4>

08101cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101cfc:	b480      	push	{r7}
 8101cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101d00:	bf00      	nop
 8101d02:	e7fd      	b.n	8101d00 <BusFault_Handler+0x4>

08101d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101d04:	b480      	push	{r7}
 8101d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101d08:	bf00      	nop
 8101d0a:	e7fd      	b.n	8101d08 <UsageFault_Handler+0x4>

08101d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101d0c:	b480      	push	{r7}
 8101d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101d10:	bf00      	nop
 8101d12:	46bd      	mov	sp, r7
 8101d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d18:	4770      	bx	lr
	...

08101d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8101d1c:	b580      	push	{r7, lr}
 8101d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8101d20:	4802      	ldr	r0, [pc, #8]	@ (8101d2c <TIM3_IRQHandler+0x10>)
 8101d22:	f004 fe21 	bl	8106968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8101d26:	bf00      	nop
 8101d28:	bd80      	pop	{r7, pc}
 8101d2a:	bf00      	nop
 8101d2c:	10000804 	.word	0x10000804

08101d30 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8101d30:	b580      	push	{r7, lr}
 8101d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8101d34:	4802      	ldr	r0, [pc, #8]	@ (8101d40 <CEC_IRQHandler+0x10>)
 8101d36:	f000 f9fb 	bl	8102130 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8101d3a:	bf00      	nop
 8101d3c:	bd80      	pop	{r7, pc}
 8101d3e:	bf00      	nop
 8101d40:	1000009c 	.word	0x1000009c

08101d44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101d44:	b580      	push	{r7, lr}
 8101d46:	b086      	sub	sp, #24
 8101d48:	af00      	add	r7, sp, #0
 8101d4a:	60f8      	str	r0, [r7, #12]
 8101d4c:	60b9      	str	r1, [r7, #8]
 8101d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101d50:	2300      	movs	r3, #0
 8101d52:	617b      	str	r3, [r7, #20]
 8101d54:	e00a      	b.n	8101d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101d56:	f3af 8000 	nop.w
 8101d5a:	4601      	mov	r1, r0
 8101d5c:	68bb      	ldr	r3, [r7, #8]
 8101d5e:	1c5a      	adds	r2, r3, #1
 8101d60:	60ba      	str	r2, [r7, #8]
 8101d62:	b2ca      	uxtb	r2, r1
 8101d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101d66:	697b      	ldr	r3, [r7, #20]
 8101d68:	3301      	adds	r3, #1
 8101d6a:	617b      	str	r3, [r7, #20]
 8101d6c:	697a      	ldr	r2, [r7, #20]
 8101d6e:	687b      	ldr	r3, [r7, #4]
 8101d70:	429a      	cmp	r2, r3
 8101d72:	dbf0      	blt.n	8101d56 <_read+0x12>
  }

  return len;
 8101d74:	687b      	ldr	r3, [r7, #4]
}
 8101d76:	4618      	mov	r0, r3
 8101d78:	3718      	adds	r7, #24
 8101d7a:	46bd      	mov	sp, r7
 8101d7c:	bd80      	pop	{r7, pc}

08101d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101d7e:	b580      	push	{r7, lr}
 8101d80:	b086      	sub	sp, #24
 8101d82:	af00      	add	r7, sp, #0
 8101d84:	60f8      	str	r0, [r7, #12]
 8101d86:	60b9      	str	r1, [r7, #8]
 8101d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101d8a:	2300      	movs	r3, #0
 8101d8c:	617b      	str	r3, [r7, #20]
 8101d8e:	e009      	b.n	8101da4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101d90:	68bb      	ldr	r3, [r7, #8]
 8101d92:	1c5a      	adds	r2, r3, #1
 8101d94:	60ba      	str	r2, [r7, #8]
 8101d96:	781b      	ldrb	r3, [r3, #0]
 8101d98:	4618      	mov	r0, r3
 8101d9a:	f7fe fb05 	bl	81003a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101d9e:	697b      	ldr	r3, [r7, #20]
 8101da0:	3301      	adds	r3, #1
 8101da2:	617b      	str	r3, [r7, #20]
 8101da4:	697a      	ldr	r2, [r7, #20]
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	429a      	cmp	r2, r3
 8101daa:	dbf1      	blt.n	8101d90 <_write+0x12>
  }
  return len;
 8101dac:	687b      	ldr	r3, [r7, #4]
}
 8101dae:	4618      	mov	r0, r3
 8101db0:	3718      	adds	r7, #24
 8101db2:	46bd      	mov	sp, r7
 8101db4:	bd80      	pop	{r7, pc}

08101db6 <_close>:

int _close(int file)
{
 8101db6:	b480      	push	{r7}
 8101db8:	b083      	sub	sp, #12
 8101dba:	af00      	add	r7, sp, #0
 8101dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101dc2:	4618      	mov	r0, r3
 8101dc4:	370c      	adds	r7, #12
 8101dc6:	46bd      	mov	sp, r7
 8101dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dcc:	4770      	bx	lr

08101dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101dce:	b480      	push	{r7}
 8101dd0:	b083      	sub	sp, #12
 8101dd2:	af00      	add	r7, sp, #0
 8101dd4:	6078      	str	r0, [r7, #4]
 8101dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101dd8:	683b      	ldr	r3, [r7, #0]
 8101dda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101dde:	605a      	str	r2, [r3, #4]
  return 0;
 8101de0:	2300      	movs	r3, #0
}
 8101de2:	4618      	mov	r0, r3
 8101de4:	370c      	adds	r7, #12
 8101de6:	46bd      	mov	sp, r7
 8101de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dec:	4770      	bx	lr

08101dee <_isatty>:

int _isatty(int file)
{
 8101dee:	b480      	push	{r7}
 8101df0:	b083      	sub	sp, #12
 8101df2:	af00      	add	r7, sp, #0
 8101df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101df6:	2301      	movs	r3, #1
}
 8101df8:	4618      	mov	r0, r3
 8101dfa:	370c      	adds	r7, #12
 8101dfc:	46bd      	mov	sp, r7
 8101dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e02:	4770      	bx	lr

08101e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101e04:	b480      	push	{r7}
 8101e06:	b085      	sub	sp, #20
 8101e08:	af00      	add	r7, sp, #0
 8101e0a:	60f8      	str	r0, [r7, #12]
 8101e0c:	60b9      	str	r1, [r7, #8]
 8101e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101e10:	2300      	movs	r3, #0
}
 8101e12:	4618      	mov	r0, r3
 8101e14:	3714      	adds	r7, #20
 8101e16:	46bd      	mov	sp, r7
 8101e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e1c:	4770      	bx	lr
	...

08101e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101e20:	b580      	push	{r7, lr}
 8101e22:	b086      	sub	sp, #24
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101e28:	4a14      	ldr	r2, [pc, #80]	@ (8101e7c <_sbrk+0x5c>)
 8101e2a:	4b15      	ldr	r3, [pc, #84]	@ (8101e80 <_sbrk+0x60>)
 8101e2c:	1ad3      	subs	r3, r2, r3
 8101e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101e30:	697b      	ldr	r3, [r7, #20]
 8101e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101e34:	4b13      	ldr	r3, [pc, #76]	@ (8101e84 <_sbrk+0x64>)
 8101e36:	681b      	ldr	r3, [r3, #0]
 8101e38:	2b00      	cmp	r3, #0
 8101e3a:	d102      	bne.n	8101e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101e3c:	4b11      	ldr	r3, [pc, #68]	@ (8101e84 <_sbrk+0x64>)
 8101e3e:	4a12      	ldr	r2, [pc, #72]	@ (8101e88 <_sbrk+0x68>)
 8101e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101e42:	4b10      	ldr	r3, [pc, #64]	@ (8101e84 <_sbrk+0x64>)
 8101e44:	681a      	ldr	r2, [r3, #0]
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	4413      	add	r3, r2
 8101e4a:	693a      	ldr	r2, [r7, #16]
 8101e4c:	429a      	cmp	r2, r3
 8101e4e:	d207      	bcs.n	8101e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101e50:	f006 f85a 	bl	8107f08 <__errno>
 8101e54:	4603      	mov	r3, r0
 8101e56:	220c      	movs	r2, #12
 8101e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8101e5e:	e009      	b.n	8101e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101e60:	4b08      	ldr	r3, [pc, #32]	@ (8101e84 <_sbrk+0x64>)
 8101e62:	681b      	ldr	r3, [r3, #0]
 8101e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101e66:	4b07      	ldr	r3, [pc, #28]	@ (8101e84 <_sbrk+0x64>)
 8101e68:	681a      	ldr	r2, [r3, #0]
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	4413      	add	r3, r2
 8101e6e:	4a05      	ldr	r2, [pc, #20]	@ (8101e84 <_sbrk+0x64>)
 8101e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101e72:	68fb      	ldr	r3, [r7, #12]
}
 8101e74:	4618      	mov	r0, r3
 8101e76:	3718      	adds	r7, #24
 8101e78:	46bd      	mov	sp, r7
 8101e7a:	bd80      	pop	{r7, pc}
 8101e7c:	10048000 	.word	0x10048000
 8101e80:	00000400 	.word	0x00000400
 8101e84:	10000850 	.word	0x10000850
 8101e88:	10000e30 	.word	0x10000e30

08101e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101e8c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8101ec8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8101e90:	f7fe fb74 	bl	810057c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8101e94:	f7fe fb5a 	bl	810054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101e98:	480c      	ldr	r0, [pc, #48]	@ (8101ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101e9a:	490d      	ldr	r1, [pc, #52]	@ (8101ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8101ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101ea0:	e002      	b.n	8101ea8 <LoopCopyDataInit>

08101ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101ea6:	3304      	adds	r3, #4

08101ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101eac:	d3f9      	bcc.n	8101ea2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101eae:	4a0a      	ldr	r2, [pc, #40]	@ (8101ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8101edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8101eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101eb4:	e001      	b.n	8101eba <LoopFillZerobss>

08101eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101eb8:	3204      	adds	r2, #4

08101eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101ebc:	d3fb      	bcc.n	8101eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101ebe:	f006 f829 	bl	8107f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101ec2:	f7fe fe69 	bl	8100b98 <main>
  bx  lr
 8101ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101ec8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101ecc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101ed0:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 8101ed4:	08108ae8 	.word	0x08108ae8
  ldr r2, =_sbss
 8101ed8:	1000006c 	.word	0x1000006c
  ldr r4, =_ebss
 8101edc:	10000e30 	.word	0x10000e30

08101ee0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101ee0:	e7fe      	b.n	8101ee0 <ADC3_IRQHandler>
	...

08101ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101ee4:	b580      	push	{r7, lr}
 8101ee6:	b082      	sub	sp, #8
 8101ee8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101eea:	4b28      	ldr	r3, [pc, #160]	@ (8101f8c <HAL_Init+0xa8>)
 8101eec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101ef0:	4a26      	ldr	r2, [pc, #152]	@ (8101f8c <HAL_Init+0xa8>)
 8101ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101ef6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101efa:	4b24      	ldr	r3, [pc, #144]	@ (8101f8c <HAL_Init+0xa8>)
 8101efc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101f04:	603b      	str	r3, [r7, #0]
 8101f06:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101f08:	4b21      	ldr	r3, [pc, #132]	@ (8101f90 <HAL_Init+0xac>)
 8101f0a:	681b      	ldr	r3, [r3, #0]
 8101f0c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101f10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101f14:	4a1e      	ldr	r2, [pc, #120]	@ (8101f90 <HAL_Init+0xac>)
 8101f16:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8101f1a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8101f90 <HAL_Init+0xac>)
 8101f1e:	681b      	ldr	r3, [r3, #0]
 8101f20:	4a1b      	ldr	r2, [pc, #108]	@ (8101f90 <HAL_Init+0xac>)
 8101f22:	f043 0301 	orr.w	r3, r3, #1
 8101f26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101f28:	2003      	movs	r0, #3
 8101f2a:	f000 faaa 	bl	8102482 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101f2e:	f000 fe77 	bl	8102c20 <HAL_RCC_GetSysClockFreq>
 8101f32:	4602      	mov	r2, r0
 8101f34:	4b15      	ldr	r3, [pc, #84]	@ (8101f8c <HAL_Init+0xa8>)
 8101f36:	699b      	ldr	r3, [r3, #24]
 8101f38:	0a1b      	lsrs	r3, r3, #8
 8101f3a:	f003 030f 	and.w	r3, r3, #15
 8101f3e:	4915      	ldr	r1, [pc, #84]	@ (8101f94 <HAL_Init+0xb0>)
 8101f40:	5ccb      	ldrb	r3, [r1, r3]
 8101f42:	f003 031f 	and.w	r3, r3, #31
 8101f46:	fa22 f303 	lsr.w	r3, r2, r3
 8101f4a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8101f8c <HAL_Init+0xa8>)
 8101f4e:	699b      	ldr	r3, [r3, #24]
 8101f50:	f003 030f 	and.w	r3, r3, #15
 8101f54:	4a0f      	ldr	r2, [pc, #60]	@ (8101f94 <HAL_Init+0xb0>)
 8101f56:	5cd3      	ldrb	r3, [r2, r3]
 8101f58:	f003 031f 	and.w	r3, r3, #31
 8101f5c:	687a      	ldr	r2, [r7, #4]
 8101f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8101f62:	4a0d      	ldr	r2, [pc, #52]	@ (8101f98 <HAL_Init+0xb4>)
 8101f64:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101f66:	4b0c      	ldr	r3, [pc, #48]	@ (8101f98 <HAL_Init+0xb4>)
 8101f68:	681b      	ldr	r3, [r3, #0]
 8101f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8101f9c <HAL_Init+0xb8>)
 8101f6c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101f6e:	200f      	movs	r0, #15
 8101f70:	f7ff fe4c 	bl	8101c0c <HAL_InitTick>
 8101f74:	4603      	mov	r3, r0
 8101f76:	2b00      	cmp	r3, #0
 8101f78:	d001      	beq.n	8101f7e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101f7a:	2301      	movs	r3, #1
 8101f7c:	e002      	b.n	8101f84 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101f7e:	f7ff faaf 	bl	81014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101f82:	2300      	movs	r3, #0
}
 8101f84:	4618      	mov	r0, r3
 8101f86:	3708      	adds	r7, #8
 8101f88:	46bd      	mov	sp, r7
 8101f8a:	bd80      	pop	{r7, pc}
 8101f8c:	58024400 	.word	0x58024400
 8101f90:	40024400 	.word	0x40024400
 8101f94:	08108a94 	.word	0x08108a94
 8101f98:	10000004 	.word	0x10000004
 8101f9c:	10000000 	.word	0x10000000

08101fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101fa0:	b480      	push	{r7}
 8101fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101fa4:	4b06      	ldr	r3, [pc, #24]	@ (8101fc0 <HAL_IncTick+0x20>)
 8101fa6:	781b      	ldrb	r3, [r3, #0]
 8101fa8:	461a      	mov	r2, r3
 8101faa:	4b06      	ldr	r3, [pc, #24]	@ (8101fc4 <HAL_IncTick+0x24>)
 8101fac:	681b      	ldr	r3, [r3, #0]
 8101fae:	4413      	add	r3, r2
 8101fb0:	4a04      	ldr	r2, [pc, #16]	@ (8101fc4 <HAL_IncTick+0x24>)
 8101fb2:	6013      	str	r3, [r2, #0]
}
 8101fb4:	bf00      	nop
 8101fb6:	46bd      	mov	sp, r7
 8101fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fbc:	4770      	bx	lr
 8101fbe:	bf00      	nop
 8101fc0:	1000000c 	.word	0x1000000c
 8101fc4:	10000854 	.word	0x10000854

08101fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101fc8:	b480      	push	{r7}
 8101fca:	af00      	add	r7, sp, #0
  return uwTick;
 8101fcc:	4b03      	ldr	r3, [pc, #12]	@ (8101fdc <HAL_GetTick+0x14>)
 8101fce:	681b      	ldr	r3, [r3, #0]
}
 8101fd0:	4618      	mov	r0, r3
 8101fd2:	46bd      	mov	sp, r7
 8101fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fd8:	4770      	bx	lr
 8101fda:	bf00      	nop
 8101fdc:	10000854 	.word	0x10000854

08101fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101fe0:	b580      	push	{r7, lr}
 8101fe2:	b084      	sub	sp, #16
 8101fe4:	af00      	add	r7, sp, #0
 8101fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101fe8:	f7ff ffee 	bl	8101fc8 <HAL_GetTick>
 8101fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101fee:	687b      	ldr	r3, [r7, #4]
 8101ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101ff2:	68fb      	ldr	r3, [r7, #12]
 8101ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101ff8:	d005      	beq.n	8102006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8102024 <HAL_Delay+0x44>)
 8101ffc:	781b      	ldrb	r3, [r3, #0]
 8101ffe:	461a      	mov	r2, r3
 8102000:	68fb      	ldr	r3, [r7, #12]
 8102002:	4413      	add	r3, r2
 8102004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102006:	bf00      	nop
 8102008:	f7ff ffde 	bl	8101fc8 <HAL_GetTick>
 810200c:	4602      	mov	r2, r0
 810200e:	68bb      	ldr	r3, [r7, #8]
 8102010:	1ad3      	subs	r3, r2, r3
 8102012:	68fa      	ldr	r2, [r7, #12]
 8102014:	429a      	cmp	r2, r3
 8102016:	d8f7      	bhi.n	8102008 <HAL_Delay+0x28>
  {
  }
}
 8102018:	bf00      	nop
 810201a:	bf00      	nop
 810201c:	3710      	adds	r7, #16
 810201e:	46bd      	mov	sp, r7
 8102020:	bd80      	pop	{r7, pc}
 8102022:	bf00      	nop
 8102024:	1000000c 	.word	0x1000000c

08102028 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102028:	b480      	push	{r7}
 810202a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 810202c:	4b03      	ldr	r3, [pc, #12]	@ (810203c <HAL_GetREVID+0x14>)
 810202e:	681b      	ldr	r3, [r3, #0]
 8102030:	0c1b      	lsrs	r3, r3, #16
}
 8102032:	4618      	mov	r0, r3
 8102034:	46bd      	mov	sp, r7
 8102036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810203a:	4770      	bx	lr
 810203c:	5c001000 	.word	0x5c001000

08102040 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8102040:	b480      	push	{r7}
 8102042:	b083      	sub	sp, #12
 8102044:	af00      	add	r7, sp, #0
 8102046:	6078      	str	r0, [r7, #4]
 8102048:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810204a:	4b07      	ldr	r3, [pc, #28]	@ (8102068 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 810204c:	685a      	ldr	r2, [r3, #4]
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	43db      	mvns	r3, r3
 8102052:	401a      	ands	r2, r3
 8102054:	4904      	ldr	r1, [pc, #16]	@ (8102068 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102056:	683b      	ldr	r3, [r7, #0]
 8102058:	4313      	orrs	r3, r2
 810205a:	604b      	str	r3, [r1, #4]
}
 810205c:	bf00      	nop
 810205e:	370c      	adds	r7, #12
 8102060:	46bd      	mov	sp, r7
 8102062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102066:	4770      	bx	lr
 8102068:	58000400 	.word	0x58000400

0810206c <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 810206c:	b580      	push	{r7, lr}
 810206e:	b082      	sub	sp, #8
 8102070:	af00      	add	r7, sp, #0
 8102072:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	2b00      	cmp	r3, #0
 8102078:	d003      	beq.n	8102082 <HAL_CEC_Init+0x16>
 810207a:	687b      	ldr	r3, [r7, #4]
 810207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810207e:	2b00      	cmp	r3, #0
 8102080:	d101      	bne.n	8102086 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8102082:	2301      	movs	r3, #1
 8102084:	e050      	b.n	8102128 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810208a:	2b00      	cmp	r3, #0
 810208c:	d106      	bne.n	810209c <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	2200      	movs	r2, #0
 8102092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8102096:	6878      	ldr	r0, [r7, #4]
 8102098:	f7ff fa48 	bl	810152c <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 810209c:	687b      	ldr	r3, [r7, #4]
 810209e:	2224      	movs	r2, #36	@ 0x24
 81020a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 81020a2:	687b      	ldr	r3, [r7, #4]
 81020a4:	681b      	ldr	r3, [r3, #0]
 81020a6:	681a      	ldr	r2, [r3, #0]
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	f022 0201 	bic.w	r2, r2, #1
 81020b0:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	685a      	ldr	r2, [r3, #4]
 81020b6:	687b      	ldr	r3, [r7, #4]
 81020b8:	689b      	ldr	r3, [r3, #8]
 81020ba:	431a      	orrs	r2, r3
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	68db      	ldr	r3, [r3, #12]
 81020c0:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81020c2:	687b      	ldr	r3, [r7, #4]
 81020c4:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81020c6:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	695b      	ldr	r3, [r3, #20]
 81020cc:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 81020ce:	687b      	ldr	r3, [r7, #4]
 81020d0:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81020d2:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 81020d8:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 81020de:	041b      	lsls	r3, r3, #16
 81020e0:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81020ec:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81020ee:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	681b      	ldr	r3, [r3, #0]
 81020f4:	695b      	ldr	r3, [r3, #20]
 81020f6:	687a      	ldr	r2, [r7, #4]
 81020f8:	6812      	ldr	r2, [r2, #0]
 81020fa:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 81020fe:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8102102:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	681b      	ldr	r3, [r3, #0]
 8102108:	681a      	ldr	r2, [r3, #0]
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	681b      	ldr	r3, [r3, #0]
 810210e:	f042 0201 	orr.w	r2, r2, #1
 8102112:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	2200      	movs	r2, #0
 8102118:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	2220      	movs	r2, #32
 810211e:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	2220      	movs	r2, #32
 8102124:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8102126:	2300      	movs	r3, #0
}
 8102128:	4618      	mov	r0, r3
 810212a:	3708      	adds	r7, #8
 810212c:	46bd      	mov	sp, r7
 810212e:	bd80      	pop	{r7, pc}

08102130 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8102130:	b580      	push	{r7, lr}
 8102132:	b084      	sub	sp, #16
 8102134:	af00      	add	r7, sp, #0
 8102136:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	681b      	ldr	r3, [r3, #0]
 810213c:	691b      	ldr	r3, [r3, #16]
 810213e:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8102140:	68fb      	ldr	r3, [r7, #12]
 8102142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102146:	2b00      	cmp	r3, #0
 8102148:	d00a      	beq.n	8102160 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	2280      	movs	r2, #128	@ 0x80
 810214e:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8102150:	687b      	ldr	r3, [r7, #4]
 8102152:	681b      	ldr	r3, [r3, #0]
 8102154:	691a      	ldr	r2, [r3, #16]
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	681b      	ldr	r3, [r3, #0]
 810215a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 810215e:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8102160:	68fb      	ldr	r3, [r7, #12]
 8102162:	f003 0301 	and.w	r3, r3, #1
 8102166:	2b00      	cmp	r3, #0
 8102168:	d01c      	beq.n	81021a4 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	2222      	movs	r2, #34	@ 0x22
 810216e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 8102170:	687b      	ldr	r3, [r7, #4]
 8102172:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8102174:	3301      	adds	r3, #1
 8102176:	b29a      	uxth	r2, r3
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	681b      	ldr	r3, [r3, #0]
 8102180:	68da      	ldr	r2, [r3, #12]
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102186:	b2d2      	uxtb	r2, r2
 8102188:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810218e:	1c5a      	adds	r2, r3, #1
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	681b      	ldr	r3, [r3, #0]
 8102198:	691a      	ldr	r2, [r3, #16]
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	681b      	ldr	r3, [r3, #0]
 810219e:	f042 0201 	orr.w	r2, r2, #1
 81021a2:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 81021a4:	68fb      	ldr	r3, [r7, #12]
 81021a6:	f003 0302 	and.w	r3, r3, #2
 81021aa:	2b00      	cmp	r3, #0
 81021ac:	d01e      	beq.n	81021ec <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	681b      	ldr	r3, [r3, #0]
 81021b2:	691a      	ldr	r2, [r3, #16]
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	681b      	ldr	r3, [r3, #0]
 81021b8:	f042 0202 	orr.w	r2, r2, #2
 81021bc:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 81021be:	687b      	ldr	r3, [r7, #4]
 81021c0:	2220      	movs	r2, #32
 81021c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	2200      	movs	r2, #0
 81021c8:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 81021ca:	687b      	ldr	r3, [r7, #4]
 81021cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81021d2:	425b      	negs	r3, r3
 81021d4:	441a      	add	r2, r3
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 81021da:	687b      	ldr	r3, [r7, #4]
 81021dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81021de:	4619      	mov	r1, r3
 81021e0:	6878      	ldr	r0, [r7, #4]
 81021e2:	f000 f88c 	bl	81022fe <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 81021e6:	687b      	ldr	r3, [r7, #4]
 81021e8:	2200      	movs	r2, #0
 81021ea:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 81021ec:	68fb      	ldr	r3, [r7, #12]
 81021ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81021f2:	2b00      	cmp	r3, #0
 81021f4:	d024      	beq.n	8102240 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 81021f6:	687b      	ldr	r3, [r7, #4]
 81021f8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 81021fa:	3b01      	subs	r3, #1
 81021fc:	b29a      	uxth	r2, r3
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8102206:	2b00      	cmp	r3, #0
 8102208:	d107      	bne.n	810221a <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	681a      	ldr	r2, [r3, #0]
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	f042 0204 	orr.w	r2, r2, #4
 8102218:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810221e:	781a      	ldrb	r2, [r3, #0]
 8102220:	687b      	ldr	r3, [r7, #4]
 8102222:	681b      	ldr	r3, [r3, #0]
 8102224:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810222a:	1c5a      	adds	r2, r3, #1
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8102230:	687b      	ldr	r3, [r7, #4]
 8102232:	681b      	ldr	r3, [r3, #0]
 8102234:	691a      	ldr	r2, [r3, #16]
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810223e:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8102240:	68fb      	ldr	r3, [r7, #12]
 8102242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102246:	2b00      	cmp	r3, #0
 8102248:	d014      	beq.n	8102274 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 810224a:	687b      	ldr	r3, [r7, #4]
 810224c:	681b      	ldr	r3, [r3, #0]
 810224e:	691a      	ldr	r2, [r3, #16]
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	681b      	ldr	r3, [r3, #0]
 8102254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8102258:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	2220      	movs	r2, #32
 810225e:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	2200      	movs	r2, #0
 8102264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102268:	687b      	ldr	r3, [r7, #4]
 810226a:	2200      	movs	r2, #0
 810226c:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 810226e:	6878      	ldr	r0, [r7, #4]
 8102270:	f000 f83b 	bl	81022ea <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8102274:	68fa      	ldr	r2, [r7, #12]
 8102276:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 810227a:	4013      	ands	r3, r2
 810227c:	2b00      	cmp	r3, #0
 810227e:	d030      	beq.n	81022e2 <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	68fa      	ldr	r2, [r7, #12]
 8102284:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	681b      	ldr	r3, [r3, #0]
 810228a:	691b      	ldr	r3, [r3, #16]
 810228c:	687a      	ldr	r2, [r7, #4]
 810228e:	6812      	ldr	r2, [r2, #0]
 8102290:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 8102294:	f043 031c 	orr.w	r3, r3, #28
 8102298:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 810229a:	68fb      	ldr	r3, [r7, #12]
 810229c:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 81022a0:	2b00      	cmp	r3, #0
 81022a2:	d00e      	beq.n	81022c2 <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 81022a4:	687b      	ldr	r3, [r7, #4]
 81022a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 81022a8:	687b      	ldr	r3, [r7, #4]
 81022aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81022ac:	425b      	negs	r3, r3
 81022ae:	441a      	add	r2, r3
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	2200      	movs	r2, #0
 81022b8:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	2220      	movs	r2, #32
 81022be:	63da      	str	r2, [r3, #60]	@ 0x3c
 81022c0:	e00c      	b.n	81022dc <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 81022c2:	68fb      	ldr	r3, [r7, #12]
 81022c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81022c8:	2b00      	cmp	r3, #0
 81022ca:	d107      	bne.n	81022dc <HAL_CEC_IRQHandler+0x1ac>
 81022cc:	68fb      	ldr	r3, [r7, #12]
 81022ce:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 81022d2:	2b00      	cmp	r3, #0
 81022d4:	d002      	beq.n	81022dc <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	2220      	movs	r2, #32
 81022da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 81022dc:	6878      	ldr	r0, [r7, #4]
 81022de:	f000 f819 	bl	8102314 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 81022e2:	bf00      	nop
 81022e4:	3710      	adds	r7, #16
 81022e6:	46bd      	mov	sp, r7
 81022e8:	bd80      	pop	{r7, pc}

081022ea <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 81022ea:	b480      	push	{r7}
 81022ec:	b083      	sub	sp, #12
 81022ee:	af00      	add	r7, sp, #0
 81022f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 81022f2:	bf00      	nop
 81022f4:	370c      	adds	r7, #12
 81022f6:	46bd      	mov	sp, r7
 81022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022fc:	4770      	bx	lr

081022fe <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 81022fe:	b480      	push	{r7}
 8102300:	b083      	sub	sp, #12
 8102302:	af00      	add	r7, sp, #0
 8102304:	6078      	str	r0, [r7, #4]
 8102306:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8102308:	bf00      	nop
 810230a:	370c      	adds	r7, #12
 810230c:	46bd      	mov	sp, r7
 810230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102312:	4770      	bx	lr

08102314 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8102314:	b480      	push	{r7}
 8102316:	b083      	sub	sp, #12
 8102318:	af00      	add	r7, sp, #0
 810231a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 810231c:	bf00      	nop
 810231e:	370c      	adds	r7, #12
 8102320:	46bd      	mov	sp, r7
 8102322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102326:	4770      	bx	lr

08102328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102328:	b480      	push	{r7}
 810232a:	b085      	sub	sp, #20
 810232c:	af00      	add	r7, sp, #0
 810232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	f003 0307 	and.w	r3, r3, #7
 8102336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102338:	4b0c      	ldr	r3, [pc, #48]	@ (810236c <__NVIC_SetPriorityGrouping+0x44>)
 810233a:	68db      	ldr	r3, [r3, #12]
 810233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810233e:	68ba      	ldr	r2, [r7, #8]
 8102340:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102344:	4013      	ands	r3, r2
 8102346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102348:	68fb      	ldr	r3, [r7, #12]
 810234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810234c:	68bb      	ldr	r3, [r7, #8]
 810234e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102350:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810235a:	4a04      	ldr	r2, [pc, #16]	@ (810236c <__NVIC_SetPriorityGrouping+0x44>)
 810235c:	68bb      	ldr	r3, [r7, #8]
 810235e:	60d3      	str	r3, [r2, #12]
}
 8102360:	bf00      	nop
 8102362:	3714      	adds	r7, #20
 8102364:	46bd      	mov	sp, r7
 8102366:	f85d 7b04 	ldr.w	r7, [sp], #4
 810236a:	4770      	bx	lr
 810236c:	e000ed00 	.word	0xe000ed00

08102370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102370:	b480      	push	{r7}
 8102372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102374:	4b04      	ldr	r3, [pc, #16]	@ (8102388 <__NVIC_GetPriorityGrouping+0x18>)
 8102376:	68db      	ldr	r3, [r3, #12]
 8102378:	0a1b      	lsrs	r3, r3, #8
 810237a:	f003 0307 	and.w	r3, r3, #7
}
 810237e:	4618      	mov	r0, r3
 8102380:	46bd      	mov	sp, r7
 8102382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102386:	4770      	bx	lr
 8102388:	e000ed00 	.word	0xe000ed00

0810238c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810238c:	b480      	push	{r7}
 810238e:	b083      	sub	sp, #12
 8102390:	af00      	add	r7, sp, #0
 8102392:	4603      	mov	r3, r0
 8102394:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810239a:	2b00      	cmp	r3, #0
 810239c:	db0b      	blt.n	81023b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810239e:	88fb      	ldrh	r3, [r7, #6]
 81023a0:	f003 021f 	and.w	r2, r3, #31
 81023a4:	4907      	ldr	r1, [pc, #28]	@ (81023c4 <__NVIC_EnableIRQ+0x38>)
 81023a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023aa:	095b      	lsrs	r3, r3, #5
 81023ac:	2001      	movs	r0, #1
 81023ae:	fa00 f202 	lsl.w	r2, r0, r2
 81023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81023b6:	bf00      	nop
 81023b8:	370c      	adds	r7, #12
 81023ba:	46bd      	mov	sp, r7
 81023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c0:	4770      	bx	lr
 81023c2:	bf00      	nop
 81023c4:	e000e100 	.word	0xe000e100

081023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81023c8:	b480      	push	{r7}
 81023ca:	b083      	sub	sp, #12
 81023cc:	af00      	add	r7, sp, #0
 81023ce:	4603      	mov	r3, r0
 81023d0:	6039      	str	r1, [r7, #0]
 81023d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81023d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023d8:	2b00      	cmp	r3, #0
 81023da:	db0a      	blt.n	81023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81023dc:	683b      	ldr	r3, [r7, #0]
 81023de:	b2da      	uxtb	r2, r3
 81023e0:	490c      	ldr	r1, [pc, #48]	@ (8102414 <__NVIC_SetPriority+0x4c>)
 81023e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023e6:	0112      	lsls	r2, r2, #4
 81023e8:	b2d2      	uxtb	r2, r2
 81023ea:	440b      	add	r3, r1
 81023ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81023f0:	e00a      	b.n	8102408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81023f2:	683b      	ldr	r3, [r7, #0]
 81023f4:	b2da      	uxtb	r2, r3
 81023f6:	4908      	ldr	r1, [pc, #32]	@ (8102418 <__NVIC_SetPriority+0x50>)
 81023f8:	88fb      	ldrh	r3, [r7, #6]
 81023fa:	f003 030f 	and.w	r3, r3, #15
 81023fe:	3b04      	subs	r3, #4
 8102400:	0112      	lsls	r2, r2, #4
 8102402:	b2d2      	uxtb	r2, r2
 8102404:	440b      	add	r3, r1
 8102406:	761a      	strb	r2, [r3, #24]
}
 8102408:	bf00      	nop
 810240a:	370c      	adds	r7, #12
 810240c:	46bd      	mov	sp, r7
 810240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102412:	4770      	bx	lr
 8102414:	e000e100 	.word	0xe000e100
 8102418:	e000ed00 	.word	0xe000ed00

0810241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810241c:	b480      	push	{r7}
 810241e:	b089      	sub	sp, #36	@ 0x24
 8102420:	af00      	add	r7, sp, #0
 8102422:	60f8      	str	r0, [r7, #12]
 8102424:	60b9      	str	r1, [r7, #8]
 8102426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102428:	68fb      	ldr	r3, [r7, #12]
 810242a:	f003 0307 	and.w	r3, r3, #7
 810242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102430:	69fb      	ldr	r3, [r7, #28]
 8102432:	f1c3 0307 	rsb	r3, r3, #7
 8102436:	2b04      	cmp	r3, #4
 8102438:	bf28      	it	cs
 810243a:	2304      	movcs	r3, #4
 810243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810243e:	69fb      	ldr	r3, [r7, #28]
 8102440:	3304      	adds	r3, #4
 8102442:	2b06      	cmp	r3, #6
 8102444:	d902      	bls.n	810244c <NVIC_EncodePriority+0x30>
 8102446:	69fb      	ldr	r3, [r7, #28]
 8102448:	3b03      	subs	r3, #3
 810244a:	e000      	b.n	810244e <NVIC_EncodePriority+0x32>
 810244c:	2300      	movs	r3, #0
 810244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102450:	f04f 32ff 	mov.w	r2, #4294967295
 8102454:	69bb      	ldr	r3, [r7, #24]
 8102456:	fa02 f303 	lsl.w	r3, r2, r3
 810245a:	43da      	mvns	r2, r3
 810245c:	68bb      	ldr	r3, [r7, #8]
 810245e:	401a      	ands	r2, r3
 8102460:	697b      	ldr	r3, [r7, #20]
 8102462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102464:	f04f 31ff 	mov.w	r1, #4294967295
 8102468:	697b      	ldr	r3, [r7, #20]
 810246a:	fa01 f303 	lsl.w	r3, r1, r3
 810246e:	43d9      	mvns	r1, r3
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102474:	4313      	orrs	r3, r2
         );
}
 8102476:	4618      	mov	r0, r3
 8102478:	3724      	adds	r7, #36	@ 0x24
 810247a:	46bd      	mov	sp, r7
 810247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102480:	4770      	bx	lr

08102482 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102482:	b580      	push	{r7, lr}
 8102484:	b082      	sub	sp, #8
 8102486:	af00      	add	r7, sp, #0
 8102488:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810248a:	6878      	ldr	r0, [r7, #4]
 810248c:	f7ff ff4c 	bl	8102328 <__NVIC_SetPriorityGrouping>
}
 8102490:	bf00      	nop
 8102492:	3708      	adds	r7, #8
 8102494:	46bd      	mov	sp, r7
 8102496:	bd80      	pop	{r7, pc}

08102498 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102498:	b580      	push	{r7, lr}
 810249a:	b086      	sub	sp, #24
 810249c:	af00      	add	r7, sp, #0
 810249e:	4603      	mov	r3, r0
 81024a0:	60b9      	str	r1, [r7, #8]
 81024a2:	607a      	str	r2, [r7, #4]
 81024a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81024a6:	f7ff ff63 	bl	8102370 <__NVIC_GetPriorityGrouping>
 81024aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81024ac:	687a      	ldr	r2, [r7, #4]
 81024ae:	68b9      	ldr	r1, [r7, #8]
 81024b0:	6978      	ldr	r0, [r7, #20]
 81024b2:	f7ff ffb3 	bl	810241c <NVIC_EncodePriority>
 81024b6:	4602      	mov	r2, r0
 81024b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81024bc:	4611      	mov	r1, r2
 81024be:	4618      	mov	r0, r3
 81024c0:	f7ff ff82 	bl	81023c8 <__NVIC_SetPriority>
}
 81024c4:	bf00      	nop
 81024c6:	3718      	adds	r7, #24
 81024c8:	46bd      	mov	sp, r7
 81024ca:	bd80      	pop	{r7, pc}

081024cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81024cc:	b580      	push	{r7, lr}
 81024ce:	b082      	sub	sp, #8
 81024d0:	af00      	add	r7, sp, #0
 81024d2:	4603      	mov	r3, r0
 81024d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81024d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81024da:	4618      	mov	r0, r3
 81024dc:	f7ff ff56 	bl	810238c <__NVIC_EnableIRQ>
}
 81024e0:	bf00      	nop
 81024e2:	3708      	adds	r7, #8
 81024e4:	46bd      	mov	sp, r7
 81024e6:	bd80      	pop	{r7, pc}

081024e8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81024e8:	b480      	push	{r7}
 81024ea:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81024ec:	4b06      	ldr	r3, [pc, #24]	@ (8102508 <HAL_GetCurrentCPUID+0x20>)
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81024f4:	2b70      	cmp	r3, #112	@ 0x70
 81024f6:	d101      	bne.n	81024fc <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 81024f8:	2303      	movs	r3, #3
 81024fa:	e000      	b.n	81024fe <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 81024fc:	2301      	movs	r3, #1
  }
}
 81024fe:	4618      	mov	r0, r3
 8102500:	46bd      	mov	sp, r7
 8102502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102506:	4770      	bx	lr
 8102508:	e000ed00 	.word	0xe000ed00

0810250c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810250c:	b480      	push	{r7}
 810250e:	b089      	sub	sp, #36	@ 0x24
 8102510:	af00      	add	r7, sp, #0
 8102512:	6078      	str	r0, [r7, #4]
 8102514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102516:	2300      	movs	r3, #0
 8102518:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810251a:	4b89      	ldr	r3, [pc, #548]	@ (8102740 <HAL_GPIO_Init+0x234>)
 810251c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810251e:	e194      	b.n	810284a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102520:	683b      	ldr	r3, [r7, #0]
 8102522:	681a      	ldr	r2, [r3, #0]
 8102524:	2101      	movs	r1, #1
 8102526:	69fb      	ldr	r3, [r7, #28]
 8102528:	fa01 f303 	lsl.w	r3, r1, r3
 810252c:	4013      	ands	r3, r2
 810252e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102530:	693b      	ldr	r3, [r7, #16]
 8102532:	2b00      	cmp	r3, #0
 8102534:	f000 8186 	beq.w	8102844 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102538:	683b      	ldr	r3, [r7, #0]
 810253a:	685b      	ldr	r3, [r3, #4]
 810253c:	f003 0303 	and.w	r3, r3, #3
 8102540:	2b01      	cmp	r3, #1
 8102542:	d005      	beq.n	8102550 <HAL_GPIO_Init+0x44>
 8102544:	683b      	ldr	r3, [r7, #0]
 8102546:	685b      	ldr	r3, [r3, #4]
 8102548:	f003 0303 	and.w	r3, r3, #3
 810254c:	2b02      	cmp	r3, #2
 810254e:	d130      	bne.n	81025b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	689b      	ldr	r3, [r3, #8]
 8102554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102556:	69fb      	ldr	r3, [r7, #28]
 8102558:	005b      	lsls	r3, r3, #1
 810255a:	2203      	movs	r2, #3
 810255c:	fa02 f303 	lsl.w	r3, r2, r3
 8102560:	43db      	mvns	r3, r3
 8102562:	69ba      	ldr	r2, [r7, #24]
 8102564:	4013      	ands	r3, r2
 8102566:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102568:	683b      	ldr	r3, [r7, #0]
 810256a:	68da      	ldr	r2, [r3, #12]
 810256c:	69fb      	ldr	r3, [r7, #28]
 810256e:	005b      	lsls	r3, r3, #1
 8102570:	fa02 f303 	lsl.w	r3, r2, r3
 8102574:	69ba      	ldr	r2, [r7, #24]
 8102576:	4313      	orrs	r3, r2
 8102578:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	69ba      	ldr	r2, [r7, #24]
 810257e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	685b      	ldr	r3, [r3, #4]
 8102584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102586:	2201      	movs	r2, #1
 8102588:	69fb      	ldr	r3, [r7, #28]
 810258a:	fa02 f303 	lsl.w	r3, r2, r3
 810258e:	43db      	mvns	r3, r3
 8102590:	69ba      	ldr	r2, [r7, #24]
 8102592:	4013      	ands	r3, r2
 8102594:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102596:	683b      	ldr	r3, [r7, #0]
 8102598:	685b      	ldr	r3, [r3, #4]
 810259a:	091b      	lsrs	r3, r3, #4
 810259c:	f003 0201 	and.w	r2, r3, #1
 81025a0:	69fb      	ldr	r3, [r7, #28]
 81025a2:	fa02 f303 	lsl.w	r3, r2, r3
 81025a6:	69ba      	ldr	r2, [r7, #24]
 81025a8:	4313      	orrs	r3, r2
 81025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81025ac:	687b      	ldr	r3, [r7, #4]
 81025ae:	69ba      	ldr	r2, [r7, #24]
 81025b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81025b2:	683b      	ldr	r3, [r7, #0]
 81025b4:	685b      	ldr	r3, [r3, #4]
 81025b6:	f003 0303 	and.w	r3, r3, #3
 81025ba:	2b03      	cmp	r3, #3
 81025bc:	d017      	beq.n	81025ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	68db      	ldr	r3, [r3, #12]
 81025c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81025c4:	69fb      	ldr	r3, [r7, #28]
 81025c6:	005b      	lsls	r3, r3, #1
 81025c8:	2203      	movs	r2, #3
 81025ca:	fa02 f303 	lsl.w	r3, r2, r3
 81025ce:	43db      	mvns	r3, r3
 81025d0:	69ba      	ldr	r2, [r7, #24]
 81025d2:	4013      	ands	r3, r2
 81025d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81025d6:	683b      	ldr	r3, [r7, #0]
 81025d8:	689a      	ldr	r2, [r3, #8]
 81025da:	69fb      	ldr	r3, [r7, #28]
 81025dc:	005b      	lsls	r3, r3, #1
 81025de:	fa02 f303 	lsl.w	r3, r2, r3
 81025e2:	69ba      	ldr	r2, [r7, #24]
 81025e4:	4313      	orrs	r3, r2
 81025e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	69ba      	ldr	r2, [r7, #24]
 81025ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81025ee:	683b      	ldr	r3, [r7, #0]
 81025f0:	685b      	ldr	r3, [r3, #4]
 81025f2:	f003 0303 	and.w	r3, r3, #3
 81025f6:	2b02      	cmp	r3, #2
 81025f8:	d123      	bne.n	8102642 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81025fa:	69fb      	ldr	r3, [r7, #28]
 81025fc:	08da      	lsrs	r2, r3, #3
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	3208      	adds	r2, #8
 8102602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102608:	69fb      	ldr	r3, [r7, #28]
 810260a:	f003 0307 	and.w	r3, r3, #7
 810260e:	009b      	lsls	r3, r3, #2
 8102610:	220f      	movs	r2, #15
 8102612:	fa02 f303 	lsl.w	r3, r2, r3
 8102616:	43db      	mvns	r3, r3
 8102618:	69ba      	ldr	r2, [r7, #24]
 810261a:	4013      	ands	r3, r2
 810261c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810261e:	683b      	ldr	r3, [r7, #0]
 8102620:	691a      	ldr	r2, [r3, #16]
 8102622:	69fb      	ldr	r3, [r7, #28]
 8102624:	f003 0307 	and.w	r3, r3, #7
 8102628:	009b      	lsls	r3, r3, #2
 810262a:	fa02 f303 	lsl.w	r3, r2, r3
 810262e:	69ba      	ldr	r2, [r7, #24]
 8102630:	4313      	orrs	r3, r2
 8102632:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102634:	69fb      	ldr	r3, [r7, #28]
 8102636:	08da      	lsrs	r2, r3, #3
 8102638:	687b      	ldr	r3, [r7, #4]
 810263a:	3208      	adds	r2, #8
 810263c:	69b9      	ldr	r1, [r7, #24]
 810263e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102648:	69fb      	ldr	r3, [r7, #28]
 810264a:	005b      	lsls	r3, r3, #1
 810264c:	2203      	movs	r2, #3
 810264e:	fa02 f303 	lsl.w	r3, r2, r3
 8102652:	43db      	mvns	r3, r3
 8102654:	69ba      	ldr	r2, [r7, #24]
 8102656:	4013      	ands	r3, r2
 8102658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810265a:	683b      	ldr	r3, [r7, #0]
 810265c:	685b      	ldr	r3, [r3, #4]
 810265e:	f003 0203 	and.w	r2, r3, #3
 8102662:	69fb      	ldr	r3, [r7, #28]
 8102664:	005b      	lsls	r3, r3, #1
 8102666:	fa02 f303 	lsl.w	r3, r2, r3
 810266a:	69ba      	ldr	r2, [r7, #24]
 810266c:	4313      	orrs	r3, r2
 810266e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	69ba      	ldr	r2, [r7, #24]
 8102674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102676:	683b      	ldr	r3, [r7, #0]
 8102678:	685b      	ldr	r3, [r3, #4]
 810267a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810267e:	2b00      	cmp	r3, #0
 8102680:	f000 80e0 	beq.w	8102844 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102684:	4b2f      	ldr	r3, [pc, #188]	@ (8102744 <HAL_GPIO_Init+0x238>)
 8102686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810268a:	4a2e      	ldr	r2, [pc, #184]	@ (8102744 <HAL_GPIO_Init+0x238>)
 810268c:	f043 0302 	orr.w	r3, r3, #2
 8102690:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102694:	4b2b      	ldr	r3, [pc, #172]	@ (8102744 <HAL_GPIO_Init+0x238>)
 8102696:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810269a:	f003 0302 	and.w	r3, r3, #2
 810269e:	60fb      	str	r3, [r7, #12]
 81026a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81026a2:	4a29      	ldr	r2, [pc, #164]	@ (8102748 <HAL_GPIO_Init+0x23c>)
 81026a4:	69fb      	ldr	r3, [r7, #28]
 81026a6:	089b      	lsrs	r3, r3, #2
 81026a8:	3302      	adds	r3, #2
 81026aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81026b0:	69fb      	ldr	r3, [r7, #28]
 81026b2:	f003 0303 	and.w	r3, r3, #3
 81026b6:	009b      	lsls	r3, r3, #2
 81026b8:	220f      	movs	r2, #15
 81026ba:	fa02 f303 	lsl.w	r3, r2, r3
 81026be:	43db      	mvns	r3, r3
 81026c0:	69ba      	ldr	r2, [r7, #24]
 81026c2:	4013      	ands	r3, r2
 81026c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81026c6:	687b      	ldr	r3, [r7, #4]
 81026c8:	4a20      	ldr	r2, [pc, #128]	@ (810274c <HAL_GPIO_Init+0x240>)
 81026ca:	4293      	cmp	r3, r2
 81026cc:	d052      	beq.n	8102774 <HAL_GPIO_Init+0x268>
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	4a1f      	ldr	r2, [pc, #124]	@ (8102750 <HAL_GPIO_Init+0x244>)
 81026d2:	4293      	cmp	r3, r2
 81026d4:	d031      	beq.n	810273a <HAL_GPIO_Init+0x22e>
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	4a1e      	ldr	r2, [pc, #120]	@ (8102754 <HAL_GPIO_Init+0x248>)
 81026da:	4293      	cmp	r3, r2
 81026dc:	d02b      	beq.n	8102736 <HAL_GPIO_Init+0x22a>
 81026de:	687b      	ldr	r3, [r7, #4]
 81026e0:	4a1d      	ldr	r2, [pc, #116]	@ (8102758 <HAL_GPIO_Init+0x24c>)
 81026e2:	4293      	cmp	r3, r2
 81026e4:	d025      	beq.n	8102732 <HAL_GPIO_Init+0x226>
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	4a1c      	ldr	r2, [pc, #112]	@ (810275c <HAL_GPIO_Init+0x250>)
 81026ea:	4293      	cmp	r3, r2
 81026ec:	d01f      	beq.n	810272e <HAL_GPIO_Init+0x222>
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	4a1b      	ldr	r2, [pc, #108]	@ (8102760 <HAL_GPIO_Init+0x254>)
 81026f2:	4293      	cmp	r3, r2
 81026f4:	d019      	beq.n	810272a <HAL_GPIO_Init+0x21e>
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	4a1a      	ldr	r2, [pc, #104]	@ (8102764 <HAL_GPIO_Init+0x258>)
 81026fa:	4293      	cmp	r3, r2
 81026fc:	d013      	beq.n	8102726 <HAL_GPIO_Init+0x21a>
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	4a19      	ldr	r2, [pc, #100]	@ (8102768 <HAL_GPIO_Init+0x25c>)
 8102702:	4293      	cmp	r3, r2
 8102704:	d00d      	beq.n	8102722 <HAL_GPIO_Init+0x216>
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	4a18      	ldr	r2, [pc, #96]	@ (810276c <HAL_GPIO_Init+0x260>)
 810270a:	4293      	cmp	r3, r2
 810270c:	d007      	beq.n	810271e <HAL_GPIO_Init+0x212>
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	4a17      	ldr	r2, [pc, #92]	@ (8102770 <HAL_GPIO_Init+0x264>)
 8102712:	4293      	cmp	r3, r2
 8102714:	d101      	bne.n	810271a <HAL_GPIO_Init+0x20e>
 8102716:	2309      	movs	r3, #9
 8102718:	e02d      	b.n	8102776 <HAL_GPIO_Init+0x26a>
 810271a:	230a      	movs	r3, #10
 810271c:	e02b      	b.n	8102776 <HAL_GPIO_Init+0x26a>
 810271e:	2308      	movs	r3, #8
 8102720:	e029      	b.n	8102776 <HAL_GPIO_Init+0x26a>
 8102722:	2307      	movs	r3, #7
 8102724:	e027      	b.n	8102776 <HAL_GPIO_Init+0x26a>
 8102726:	2306      	movs	r3, #6
 8102728:	e025      	b.n	8102776 <HAL_GPIO_Init+0x26a>
 810272a:	2305      	movs	r3, #5
 810272c:	e023      	b.n	8102776 <HAL_GPIO_Init+0x26a>
 810272e:	2304      	movs	r3, #4
 8102730:	e021      	b.n	8102776 <HAL_GPIO_Init+0x26a>
 8102732:	2303      	movs	r3, #3
 8102734:	e01f      	b.n	8102776 <HAL_GPIO_Init+0x26a>
 8102736:	2302      	movs	r3, #2
 8102738:	e01d      	b.n	8102776 <HAL_GPIO_Init+0x26a>
 810273a:	2301      	movs	r3, #1
 810273c:	e01b      	b.n	8102776 <HAL_GPIO_Init+0x26a>
 810273e:	bf00      	nop
 8102740:	580000c0 	.word	0x580000c0
 8102744:	58024400 	.word	0x58024400
 8102748:	58000400 	.word	0x58000400
 810274c:	58020000 	.word	0x58020000
 8102750:	58020400 	.word	0x58020400
 8102754:	58020800 	.word	0x58020800
 8102758:	58020c00 	.word	0x58020c00
 810275c:	58021000 	.word	0x58021000
 8102760:	58021400 	.word	0x58021400
 8102764:	58021800 	.word	0x58021800
 8102768:	58021c00 	.word	0x58021c00
 810276c:	58022000 	.word	0x58022000
 8102770:	58022400 	.word	0x58022400
 8102774:	2300      	movs	r3, #0
 8102776:	69fa      	ldr	r2, [r7, #28]
 8102778:	f002 0203 	and.w	r2, r2, #3
 810277c:	0092      	lsls	r2, r2, #2
 810277e:	4093      	lsls	r3, r2
 8102780:	69ba      	ldr	r2, [r7, #24]
 8102782:	4313      	orrs	r3, r2
 8102784:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102786:	4938      	ldr	r1, [pc, #224]	@ (8102868 <HAL_GPIO_Init+0x35c>)
 8102788:	69fb      	ldr	r3, [r7, #28]
 810278a:	089b      	lsrs	r3, r3, #2
 810278c:	3302      	adds	r3, #2
 810278e:	69ba      	ldr	r2, [r7, #24]
 8102790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102798:	681b      	ldr	r3, [r3, #0]
 810279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810279c:	693b      	ldr	r3, [r7, #16]
 810279e:	43db      	mvns	r3, r3
 81027a0:	69ba      	ldr	r2, [r7, #24]
 81027a2:	4013      	ands	r3, r2
 81027a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81027a6:	683b      	ldr	r3, [r7, #0]
 81027a8:	685b      	ldr	r3, [r3, #4]
 81027aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81027ae:	2b00      	cmp	r3, #0
 81027b0:	d003      	beq.n	81027ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81027b2:	69ba      	ldr	r2, [r7, #24]
 81027b4:	693b      	ldr	r3, [r7, #16]
 81027b6:	4313      	orrs	r3, r2
 81027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81027ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81027be:	69bb      	ldr	r3, [r7, #24]
 81027c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81027c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81027c6:	685b      	ldr	r3, [r3, #4]
 81027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81027ca:	693b      	ldr	r3, [r7, #16]
 81027cc:	43db      	mvns	r3, r3
 81027ce:	69ba      	ldr	r2, [r7, #24]
 81027d0:	4013      	ands	r3, r2
 81027d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81027d4:	683b      	ldr	r3, [r7, #0]
 81027d6:	685b      	ldr	r3, [r3, #4]
 81027d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81027dc:	2b00      	cmp	r3, #0
 81027de:	d003      	beq.n	81027e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81027e0:	69ba      	ldr	r2, [r7, #24]
 81027e2:	693b      	ldr	r3, [r7, #16]
 81027e4:	4313      	orrs	r3, r2
 81027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81027e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81027ec:	69bb      	ldr	r3, [r7, #24]
 81027ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81027f0:	697b      	ldr	r3, [r7, #20]
 81027f2:	685b      	ldr	r3, [r3, #4]
 81027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81027f6:	693b      	ldr	r3, [r7, #16]
 81027f8:	43db      	mvns	r3, r3
 81027fa:	69ba      	ldr	r2, [r7, #24]
 81027fc:	4013      	ands	r3, r2
 81027fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102800:	683b      	ldr	r3, [r7, #0]
 8102802:	685b      	ldr	r3, [r3, #4]
 8102804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102808:	2b00      	cmp	r3, #0
 810280a:	d003      	beq.n	8102814 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810280c:	69ba      	ldr	r2, [r7, #24]
 810280e:	693b      	ldr	r3, [r7, #16]
 8102810:	4313      	orrs	r3, r2
 8102812:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102814:	697b      	ldr	r3, [r7, #20]
 8102816:	69ba      	ldr	r2, [r7, #24]
 8102818:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810281a:	697b      	ldr	r3, [r7, #20]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102820:	693b      	ldr	r3, [r7, #16]
 8102822:	43db      	mvns	r3, r3
 8102824:	69ba      	ldr	r2, [r7, #24]
 8102826:	4013      	ands	r3, r2
 8102828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810282a:	683b      	ldr	r3, [r7, #0]
 810282c:	685b      	ldr	r3, [r3, #4]
 810282e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102832:	2b00      	cmp	r3, #0
 8102834:	d003      	beq.n	810283e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102836:	69ba      	ldr	r2, [r7, #24]
 8102838:	693b      	ldr	r3, [r7, #16]
 810283a:	4313      	orrs	r3, r2
 810283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810283e:	697b      	ldr	r3, [r7, #20]
 8102840:	69ba      	ldr	r2, [r7, #24]
 8102842:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102844:	69fb      	ldr	r3, [r7, #28]
 8102846:	3301      	adds	r3, #1
 8102848:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810284a:	683b      	ldr	r3, [r7, #0]
 810284c:	681a      	ldr	r2, [r3, #0]
 810284e:	69fb      	ldr	r3, [r7, #28]
 8102850:	fa22 f303 	lsr.w	r3, r2, r3
 8102854:	2b00      	cmp	r3, #0
 8102856:	f47f ae63 	bne.w	8102520 <HAL_GPIO_Init+0x14>
  }
}
 810285a:	bf00      	nop
 810285c:	bf00      	nop
 810285e:	3724      	adds	r7, #36	@ 0x24
 8102860:	46bd      	mov	sp, r7
 8102862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102866:	4770      	bx	lr
 8102868:	58000400 	.word	0x58000400

0810286c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810286c:	b480      	push	{r7}
 810286e:	b083      	sub	sp, #12
 8102870:	af00      	add	r7, sp, #0
 8102872:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102874:	4b05      	ldr	r3, [pc, #20]	@ (810288c <HAL_HSEM_ActivateNotification+0x20>)
 8102876:	681a      	ldr	r2, [r3, #0]
 8102878:	4904      	ldr	r1, [pc, #16]	@ (810288c <HAL_HSEM_ActivateNotification+0x20>)
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	4313      	orrs	r3, r2
 810287e:	600b      	str	r3, [r1, #0]
#endif
}
 8102880:	bf00      	nop
 8102882:	370c      	adds	r7, #12
 8102884:	46bd      	mov	sp, r7
 8102886:	f85d 7b04 	ldr.w	r7, [sp], #4
 810288a:	4770      	bx	lr
 810288c:	58026510 	.word	0x58026510

08102890 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8102890:	b580      	push	{r7, lr}
 8102892:	b086      	sub	sp, #24
 8102894:	af02      	add	r7, sp, #8
 8102896:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	2b00      	cmp	r3, #0
 810289c:	d101      	bne.n	81028a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 810289e:	2301      	movs	r3, #1
 81028a0:	e0fe      	b.n	8102aa0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81028a2:	687b      	ldr	r3, [r7, #4]
 81028a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 81028a8:	b2db      	uxtb	r3, r3
 81028aa:	2b00      	cmp	r3, #0
 81028ac:	d106      	bne.n	81028bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 81028ae:	687b      	ldr	r3, [r7, #4]
 81028b0:	2200      	movs	r2, #0
 81028b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 81028b6:	6878      	ldr	r0, [r7, #4]
 81028b8:	f7fe ffd2 	bl	8101860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 81028bc:	687b      	ldr	r3, [r7, #4]
 81028be:	2203      	movs	r2, #3
 81028c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	681b      	ldr	r3, [r3, #0]
 81028c8:	4618      	mov	r0, r3
 81028ca:	f004 fc0d 	bl	81070e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	6818      	ldr	r0, [r3, #0]
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	7c1a      	ldrb	r2, [r3, #16]
 81028d6:	f88d 2000 	strb.w	r2, [sp]
 81028da:	3304      	adds	r3, #4
 81028dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 81028de:	f004 fb92 	bl	8107006 <USB_CoreInit>
 81028e2:	4603      	mov	r3, r0
 81028e4:	2b00      	cmp	r3, #0
 81028e6:	d005      	beq.n	81028f4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81028e8:	687b      	ldr	r3, [r7, #4]
 81028ea:	2202      	movs	r2, #2
 81028ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81028f0:	2301      	movs	r3, #1
 81028f2:	e0d5      	b.n	8102aa0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	2100      	movs	r1, #0
 81028fa:	4618      	mov	r0, r3
 81028fc:	f004 fc05 	bl	810710a <USB_SetCurrentMode>
 8102900:	4603      	mov	r3, r0
 8102902:	2b00      	cmp	r3, #0
 8102904:	d005      	beq.n	8102912 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	2202      	movs	r2, #2
 810290a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810290e:	2301      	movs	r3, #1
 8102910:	e0c6      	b.n	8102aa0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102912:	2300      	movs	r3, #0
 8102914:	73fb      	strb	r3, [r7, #15]
 8102916:	e04a      	b.n	81029ae <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8102918:	7bfa      	ldrb	r2, [r7, #15]
 810291a:	6879      	ldr	r1, [r7, #4]
 810291c:	4613      	mov	r3, r2
 810291e:	00db      	lsls	r3, r3, #3
 8102920:	4413      	add	r3, r2
 8102922:	009b      	lsls	r3, r3, #2
 8102924:	440b      	add	r3, r1
 8102926:	3315      	adds	r3, #21
 8102928:	2201      	movs	r2, #1
 810292a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 810292c:	7bfa      	ldrb	r2, [r7, #15]
 810292e:	6879      	ldr	r1, [r7, #4]
 8102930:	4613      	mov	r3, r2
 8102932:	00db      	lsls	r3, r3, #3
 8102934:	4413      	add	r3, r2
 8102936:	009b      	lsls	r3, r3, #2
 8102938:	440b      	add	r3, r1
 810293a:	3314      	adds	r3, #20
 810293c:	7bfa      	ldrb	r2, [r7, #15]
 810293e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8102940:	7bfa      	ldrb	r2, [r7, #15]
 8102942:	7bfb      	ldrb	r3, [r7, #15]
 8102944:	b298      	uxth	r0, r3
 8102946:	6879      	ldr	r1, [r7, #4]
 8102948:	4613      	mov	r3, r2
 810294a:	00db      	lsls	r3, r3, #3
 810294c:	4413      	add	r3, r2
 810294e:	009b      	lsls	r3, r3, #2
 8102950:	440b      	add	r3, r1
 8102952:	332e      	adds	r3, #46	@ 0x2e
 8102954:	4602      	mov	r2, r0
 8102956:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8102958:	7bfa      	ldrb	r2, [r7, #15]
 810295a:	6879      	ldr	r1, [r7, #4]
 810295c:	4613      	mov	r3, r2
 810295e:	00db      	lsls	r3, r3, #3
 8102960:	4413      	add	r3, r2
 8102962:	009b      	lsls	r3, r3, #2
 8102964:	440b      	add	r3, r1
 8102966:	3318      	adds	r3, #24
 8102968:	2200      	movs	r2, #0
 810296a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 810296c:	7bfa      	ldrb	r2, [r7, #15]
 810296e:	6879      	ldr	r1, [r7, #4]
 8102970:	4613      	mov	r3, r2
 8102972:	00db      	lsls	r3, r3, #3
 8102974:	4413      	add	r3, r2
 8102976:	009b      	lsls	r3, r3, #2
 8102978:	440b      	add	r3, r1
 810297a:	331c      	adds	r3, #28
 810297c:	2200      	movs	r2, #0
 810297e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8102980:	7bfa      	ldrb	r2, [r7, #15]
 8102982:	6879      	ldr	r1, [r7, #4]
 8102984:	4613      	mov	r3, r2
 8102986:	00db      	lsls	r3, r3, #3
 8102988:	4413      	add	r3, r2
 810298a:	009b      	lsls	r3, r3, #2
 810298c:	440b      	add	r3, r1
 810298e:	3320      	adds	r3, #32
 8102990:	2200      	movs	r2, #0
 8102992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8102994:	7bfa      	ldrb	r2, [r7, #15]
 8102996:	6879      	ldr	r1, [r7, #4]
 8102998:	4613      	mov	r3, r2
 810299a:	00db      	lsls	r3, r3, #3
 810299c:	4413      	add	r3, r2
 810299e:	009b      	lsls	r3, r3, #2
 81029a0:	440b      	add	r3, r1
 81029a2:	3324      	adds	r3, #36	@ 0x24
 81029a4:	2200      	movs	r2, #0
 81029a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81029a8:	7bfb      	ldrb	r3, [r7, #15]
 81029aa:	3301      	adds	r3, #1
 81029ac:	73fb      	strb	r3, [r7, #15]
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	791b      	ldrb	r3, [r3, #4]
 81029b2:	7bfa      	ldrb	r2, [r7, #15]
 81029b4:	429a      	cmp	r2, r3
 81029b6:	d3af      	bcc.n	8102918 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81029b8:	2300      	movs	r3, #0
 81029ba:	73fb      	strb	r3, [r7, #15]
 81029bc:	e044      	b.n	8102a48 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 81029be:	7bfa      	ldrb	r2, [r7, #15]
 81029c0:	6879      	ldr	r1, [r7, #4]
 81029c2:	4613      	mov	r3, r2
 81029c4:	00db      	lsls	r3, r3, #3
 81029c6:	4413      	add	r3, r2
 81029c8:	009b      	lsls	r3, r3, #2
 81029ca:	440b      	add	r3, r1
 81029cc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 81029d0:	2200      	movs	r2, #0
 81029d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 81029d4:	7bfa      	ldrb	r2, [r7, #15]
 81029d6:	6879      	ldr	r1, [r7, #4]
 81029d8:	4613      	mov	r3, r2
 81029da:	00db      	lsls	r3, r3, #3
 81029dc:	4413      	add	r3, r2
 81029de:	009b      	lsls	r3, r3, #2
 81029e0:	440b      	add	r3, r1
 81029e2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 81029e6:	7bfa      	ldrb	r2, [r7, #15]
 81029e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 81029ea:	7bfa      	ldrb	r2, [r7, #15]
 81029ec:	6879      	ldr	r1, [r7, #4]
 81029ee:	4613      	mov	r3, r2
 81029f0:	00db      	lsls	r3, r3, #3
 81029f2:	4413      	add	r3, r2
 81029f4:	009b      	lsls	r3, r3, #2
 81029f6:	440b      	add	r3, r1
 81029f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 81029fc:	2200      	movs	r2, #0
 81029fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8102a00:	7bfa      	ldrb	r2, [r7, #15]
 8102a02:	6879      	ldr	r1, [r7, #4]
 8102a04:	4613      	mov	r3, r2
 8102a06:	00db      	lsls	r3, r3, #3
 8102a08:	4413      	add	r3, r2
 8102a0a:	009b      	lsls	r3, r3, #2
 8102a0c:	440b      	add	r3, r1
 8102a0e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8102a12:	2200      	movs	r2, #0
 8102a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8102a16:	7bfa      	ldrb	r2, [r7, #15]
 8102a18:	6879      	ldr	r1, [r7, #4]
 8102a1a:	4613      	mov	r3, r2
 8102a1c:	00db      	lsls	r3, r3, #3
 8102a1e:	4413      	add	r3, r2
 8102a20:	009b      	lsls	r3, r3, #2
 8102a22:	440b      	add	r3, r1
 8102a24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8102a28:	2200      	movs	r2, #0
 8102a2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8102a2c:	7bfa      	ldrb	r2, [r7, #15]
 8102a2e:	6879      	ldr	r1, [r7, #4]
 8102a30:	4613      	mov	r3, r2
 8102a32:	00db      	lsls	r3, r3, #3
 8102a34:	4413      	add	r3, r2
 8102a36:	009b      	lsls	r3, r3, #2
 8102a38:	440b      	add	r3, r1
 8102a3a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8102a3e:	2200      	movs	r2, #0
 8102a40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102a42:	7bfb      	ldrb	r3, [r7, #15]
 8102a44:	3301      	adds	r3, #1
 8102a46:	73fb      	strb	r3, [r7, #15]
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	791b      	ldrb	r3, [r3, #4]
 8102a4c:	7bfa      	ldrb	r2, [r7, #15]
 8102a4e:	429a      	cmp	r2, r3
 8102a50:	d3b5      	bcc.n	81029be <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	6818      	ldr	r0, [r3, #0]
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	7c1a      	ldrb	r2, [r3, #16]
 8102a5a:	f88d 2000 	strb.w	r2, [sp]
 8102a5e:	3304      	adds	r3, #4
 8102a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8102a62:	f004 fb9f 	bl	81071a4 <USB_DevInit>
 8102a66:	4603      	mov	r3, r0
 8102a68:	2b00      	cmp	r3, #0
 8102a6a:	d005      	beq.n	8102a78 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	2202      	movs	r2, #2
 8102a70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8102a74:	2301      	movs	r3, #1
 8102a76:	e013      	b.n	8102aa0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	2200      	movs	r2, #0
 8102a7c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	2201      	movs	r2, #1
 8102a82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	7b1b      	ldrb	r3, [r3, #12]
 8102a8a:	2b01      	cmp	r3, #1
 8102a8c:	d102      	bne.n	8102a94 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8102a8e:	6878      	ldr	r0, [r7, #4]
 8102a90:	f000 f80a 	bl	8102aa8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	681b      	ldr	r3, [r3, #0]
 8102a98:	4618      	mov	r0, r3
 8102a9a:	f004 fd5a 	bl	8107552 <USB_DevDisconnect>

  return HAL_OK;
 8102a9e:	2300      	movs	r3, #0
}
 8102aa0:	4618      	mov	r0, r3
 8102aa2:	3710      	adds	r7, #16
 8102aa4:	46bd      	mov	sp, r7
 8102aa6:	bd80      	pop	{r7, pc}

08102aa8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8102aa8:	b480      	push	{r7}
 8102aaa:	b085      	sub	sp, #20
 8102aac:	af00      	add	r7, sp, #0
 8102aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	2201      	movs	r2, #1
 8102aba:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8102abe:	687b      	ldr	r3, [r7, #4]
 8102ac0:	2200      	movs	r2, #0
 8102ac2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8102ac6:	68fb      	ldr	r3, [r7, #12]
 8102ac8:	699b      	ldr	r3, [r3, #24]
 8102aca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8102ace:	68fb      	ldr	r3, [r7, #12]
 8102ad0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8102ad2:	68fb      	ldr	r3, [r7, #12]
 8102ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8102ada:	f043 0303 	orr.w	r3, r3, #3
 8102ade:	68fa      	ldr	r2, [r7, #12]
 8102ae0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8102ae2:	2300      	movs	r3, #0
}
 8102ae4:	4618      	mov	r0, r3
 8102ae6:	3714      	adds	r7, #20
 8102ae8:	46bd      	mov	sp, r7
 8102aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aee:	4770      	bx	lr

08102af0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102af0:	b580      	push	{r7, lr}
 8102af2:	b084      	sub	sp, #16
 8102af4:	af00      	add	r7, sp, #0
 8102af6:	60f8      	str	r0, [r7, #12]
 8102af8:	460b      	mov	r3, r1
 8102afa:	607a      	str	r2, [r7, #4]
 8102afc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102afe:	4b37      	ldr	r3, [pc, #220]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b00:	681b      	ldr	r3, [r3, #0]
 8102b02:	f023 0201 	bic.w	r2, r3, #1
 8102b06:	4935      	ldr	r1, [pc, #212]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b08:	68fb      	ldr	r3, [r7, #12]
 8102b0a:	4313      	orrs	r3, r2
 8102b0c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	2b00      	cmp	r3, #0
 8102b12:	d123      	bne.n	8102b5c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102b14:	f7ff fce8 	bl	81024e8 <HAL_GetCurrentCPUID>
 8102b18:	4603      	mov	r3, r0
 8102b1a:	2b03      	cmp	r3, #3
 8102b1c:	d158      	bne.n	8102bd0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b20:	691b      	ldr	r3, [r3, #16]
 8102b22:	4a2e      	ldr	r2, [pc, #184]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b24:	f023 0301 	bic.w	r3, r3, #1
 8102b28:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8102be0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b2c:	691b      	ldr	r3, [r3, #16]
 8102b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8102be0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b30:	f043 0304 	orr.w	r3, r3, #4
 8102b34:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102b36:	f3bf 8f4f 	dsb	sy
}
 8102b3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102b3c:	f3bf 8f6f 	isb	sy
}
 8102b40:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102b42:	7afb      	ldrb	r3, [r7, #11]
 8102b44:	2b01      	cmp	r3, #1
 8102b46:	d101      	bne.n	8102b4c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102b48:	bf30      	wfi
 8102b4a:	e000      	b.n	8102b4e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102b4c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b4e:	4b24      	ldr	r3, [pc, #144]	@ (8102be0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b50:	691b      	ldr	r3, [r3, #16]
 8102b52:	4a23      	ldr	r2, [pc, #140]	@ (8102be0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b54:	f023 0304 	bic.w	r3, r3, #4
 8102b58:	6113      	str	r3, [r2, #16]
 8102b5a:	e03c      	b.n	8102bd6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	2b01      	cmp	r3, #1
 8102b60:	d123      	bne.n	8102baa <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102b62:	f7ff fcc1 	bl	81024e8 <HAL_GetCurrentCPUID>
 8102b66:	4603      	mov	r3, r0
 8102b68:	2b01      	cmp	r3, #1
 8102b6a:	d133      	bne.n	8102bd4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b6e:	695b      	ldr	r3, [r3, #20]
 8102b70:	4a1a      	ldr	r2, [pc, #104]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b72:	f023 0302 	bic.w	r3, r3, #2
 8102b76:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b78:	4b19      	ldr	r3, [pc, #100]	@ (8102be0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b7a:	691b      	ldr	r3, [r3, #16]
 8102b7c:	4a18      	ldr	r2, [pc, #96]	@ (8102be0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b7e:	f043 0304 	orr.w	r3, r3, #4
 8102b82:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102b84:	f3bf 8f4f 	dsb	sy
}
 8102b88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102b8a:	f3bf 8f6f 	isb	sy
}
 8102b8e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102b90:	7afb      	ldrb	r3, [r7, #11]
 8102b92:	2b01      	cmp	r3, #1
 8102b94:	d101      	bne.n	8102b9a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102b96:	bf30      	wfi
 8102b98:	e000      	b.n	8102b9c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102b9a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b9c:	4b10      	ldr	r3, [pc, #64]	@ (8102be0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b9e:	691b      	ldr	r3, [r3, #16]
 8102ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8102be0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ba2:	f023 0304 	bic.w	r3, r3, #4
 8102ba6:	6113      	str	r3, [r2, #16]
 8102ba8:	e015      	b.n	8102bd6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102baa:	f7ff fc9d 	bl	81024e8 <HAL_GetCurrentCPUID>
 8102bae:	4603      	mov	r3, r0
 8102bb0:	2b03      	cmp	r3, #3
 8102bb2:	d106      	bne.n	8102bc2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102bb4:	4b09      	ldr	r3, [pc, #36]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bb6:	691b      	ldr	r3, [r3, #16]
 8102bb8:	4a08      	ldr	r2, [pc, #32]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bba:	f023 0304 	bic.w	r3, r3, #4
 8102bbe:	6113      	str	r3, [r2, #16]
 8102bc0:	e009      	b.n	8102bd6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102bc2:	4b06      	ldr	r3, [pc, #24]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bc4:	695b      	ldr	r3, [r3, #20]
 8102bc6:	4a05      	ldr	r2, [pc, #20]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bc8:	f023 0304 	bic.w	r3, r3, #4
 8102bcc:	6153      	str	r3, [r2, #20]
 8102bce:	e002      	b.n	8102bd6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102bd0:	bf00      	nop
 8102bd2:	e000      	b.n	8102bd6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102bd4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102bd6:	3710      	adds	r7, #16
 8102bd8:	46bd      	mov	sp, r7
 8102bda:	bd80      	pop	{r7, pc}
 8102bdc:	58024800 	.word	0x58024800
 8102be0:	e000ed00 	.word	0xe000ed00

08102be4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102be4:	b580      	push	{r7, lr}
 8102be6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102be8:	f7ff fc7e 	bl	81024e8 <HAL_GetCurrentCPUID>
 8102bec:	4603      	mov	r3, r0
 8102bee:	2b03      	cmp	r3, #3
 8102bf0:	d101      	bne.n	8102bf6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102bf2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102bf4:	e001      	b.n	8102bfa <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102bf6:	bf40      	sev
    __WFE ();
 8102bf8:	bf20      	wfe
}
 8102bfa:	bf00      	nop
 8102bfc:	bd80      	pop	{r7, pc}
	...

08102c00 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8102c00:	b480      	push	{r7}
 8102c02:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8102c04:	4b05      	ldr	r3, [pc, #20]	@ (8102c1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8102c06:	68db      	ldr	r3, [r3, #12]
 8102c08:	4a04      	ldr	r2, [pc, #16]	@ (8102c1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8102c0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8102c0e:	60d3      	str	r3, [r2, #12]
}
 8102c10:	bf00      	nop
 8102c12:	46bd      	mov	sp, r7
 8102c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c18:	4770      	bx	lr
 8102c1a:	bf00      	nop
 8102c1c:	58024800 	.word	0x58024800

08102c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102c20:	b480      	push	{r7}
 8102c22:	b089      	sub	sp, #36	@ 0x24
 8102c24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102c26:	4bb3      	ldr	r3, [pc, #716]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c28:	691b      	ldr	r3, [r3, #16]
 8102c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8102c2e:	2b18      	cmp	r3, #24
 8102c30:	f200 8155 	bhi.w	8102ede <HAL_RCC_GetSysClockFreq+0x2be>
 8102c34:	a201      	add	r2, pc, #4	@ (adr r2, 8102c3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102c3a:	bf00      	nop
 8102c3c:	08102ca1 	.word	0x08102ca1
 8102c40:	08102edf 	.word	0x08102edf
 8102c44:	08102edf 	.word	0x08102edf
 8102c48:	08102edf 	.word	0x08102edf
 8102c4c:	08102edf 	.word	0x08102edf
 8102c50:	08102edf 	.word	0x08102edf
 8102c54:	08102edf 	.word	0x08102edf
 8102c58:	08102edf 	.word	0x08102edf
 8102c5c:	08102cc7 	.word	0x08102cc7
 8102c60:	08102edf 	.word	0x08102edf
 8102c64:	08102edf 	.word	0x08102edf
 8102c68:	08102edf 	.word	0x08102edf
 8102c6c:	08102edf 	.word	0x08102edf
 8102c70:	08102edf 	.word	0x08102edf
 8102c74:	08102edf 	.word	0x08102edf
 8102c78:	08102edf 	.word	0x08102edf
 8102c7c:	08102ccd 	.word	0x08102ccd
 8102c80:	08102edf 	.word	0x08102edf
 8102c84:	08102edf 	.word	0x08102edf
 8102c88:	08102edf 	.word	0x08102edf
 8102c8c:	08102edf 	.word	0x08102edf
 8102c90:	08102edf 	.word	0x08102edf
 8102c94:	08102edf 	.word	0x08102edf
 8102c98:	08102edf 	.word	0x08102edf
 8102c9c:	08102cd3 	.word	0x08102cd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102ca0:	4b94      	ldr	r3, [pc, #592]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ca2:	681b      	ldr	r3, [r3, #0]
 8102ca4:	f003 0320 	and.w	r3, r3, #32
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	d009      	beq.n	8102cc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102cac:	4b91      	ldr	r3, [pc, #580]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	08db      	lsrs	r3, r3, #3
 8102cb2:	f003 0303 	and.w	r3, r3, #3
 8102cb6:	4a90      	ldr	r2, [pc, #576]	@ (8102ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8102cbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102cbe:	e111      	b.n	8102ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102cc0:	4b8d      	ldr	r3, [pc, #564]	@ (8102ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102cc2:	61bb      	str	r3, [r7, #24]
      break;
 8102cc4:	e10e      	b.n	8102ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8102efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102cc8:	61bb      	str	r3, [r7, #24]
      break;
 8102cca:	e10b      	b.n	8102ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8102f00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102cce:	61bb      	str	r3, [r7, #24]
      break;
 8102cd0:	e108      	b.n	8102ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102cd2:	4b88      	ldr	r3, [pc, #544]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102cd6:	f003 0303 	and.w	r3, r3, #3
 8102cda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102cdc:	4b85      	ldr	r3, [pc, #532]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102ce0:	091b      	lsrs	r3, r3, #4
 8102ce2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102ce6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102ce8:	4b82      	ldr	r3, [pc, #520]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102cec:	f003 0301 	and.w	r3, r3, #1
 8102cf0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102cf2:	4b80      	ldr	r3, [pc, #512]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102cf6:	08db      	lsrs	r3, r3, #3
 8102cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102cfc:	68fa      	ldr	r2, [r7, #12]
 8102cfe:	fb02 f303 	mul.w	r3, r2, r3
 8102d02:	ee07 3a90 	vmov	s15, r3
 8102d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102d0e:	693b      	ldr	r3, [r7, #16]
 8102d10:	2b00      	cmp	r3, #0
 8102d12:	f000 80e1 	beq.w	8102ed8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8102d16:	697b      	ldr	r3, [r7, #20]
 8102d18:	2b02      	cmp	r3, #2
 8102d1a:	f000 8083 	beq.w	8102e24 <HAL_RCC_GetSysClockFreq+0x204>
 8102d1e:	697b      	ldr	r3, [r7, #20]
 8102d20:	2b02      	cmp	r3, #2
 8102d22:	f200 80a1 	bhi.w	8102e68 <HAL_RCC_GetSysClockFreq+0x248>
 8102d26:	697b      	ldr	r3, [r7, #20]
 8102d28:	2b00      	cmp	r3, #0
 8102d2a:	d003      	beq.n	8102d34 <HAL_RCC_GetSysClockFreq+0x114>
 8102d2c:	697b      	ldr	r3, [r7, #20]
 8102d2e:	2b01      	cmp	r3, #1
 8102d30:	d056      	beq.n	8102de0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102d32:	e099      	b.n	8102e68 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102d34:	4b6f      	ldr	r3, [pc, #444]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	f003 0320 	and.w	r3, r3, #32
 8102d3c:	2b00      	cmp	r3, #0
 8102d3e:	d02d      	beq.n	8102d9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102d40:	4b6c      	ldr	r3, [pc, #432]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	08db      	lsrs	r3, r3, #3
 8102d46:	f003 0303 	and.w	r3, r3, #3
 8102d4a:	4a6b      	ldr	r2, [pc, #428]	@ (8102ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8102d50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102d52:	687b      	ldr	r3, [r7, #4]
 8102d54:	ee07 3a90 	vmov	s15, r3
 8102d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d5c:	693b      	ldr	r3, [r7, #16]
 8102d5e:	ee07 3a90 	vmov	s15, r3
 8102d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d6a:	4b62      	ldr	r3, [pc, #392]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d72:	ee07 3a90 	vmov	s15, r3
 8102d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8102f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8102d9a:	e087      	b.n	8102eac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102d9c:	693b      	ldr	r3, [r7, #16]
 8102d9e:	ee07 3a90 	vmov	s15, r3
 8102da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102da6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8102f08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102dae:	4b51      	ldr	r3, [pc, #324]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102db6:	ee07 3a90 	vmov	s15, r3
 8102dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8102dc2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8102f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102dda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102dde:	e065      	b.n	8102eac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102de0:	693b      	ldr	r3, [r7, #16]
 8102de2:	ee07 3a90 	vmov	s15, r3
 8102de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102dea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8102f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102df2:	4b40      	ldr	r3, [pc, #256]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dfa:	ee07 3a90 	vmov	s15, r3
 8102dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8102f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102e22:	e043      	b.n	8102eac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102e24:	693b      	ldr	r3, [r7, #16]
 8102e26:	ee07 3a90 	vmov	s15, r3
 8102e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102f10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e36:	4b2f      	ldr	r3, [pc, #188]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e3e:	ee07 3a90 	vmov	s15, r3
 8102e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8102f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102e66:	e021      	b.n	8102eac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102e68:	693b      	ldr	r3, [r7, #16]
 8102e6a:	ee07 3a90 	vmov	s15, r3
 8102e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8102f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e82:	ee07 3a90 	vmov	s15, r3
 8102e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8102f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102eaa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102eac:	4b11      	ldr	r3, [pc, #68]	@ (8102ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102eb0:	0a5b      	lsrs	r3, r3, #9
 8102eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102eb6:	3301      	adds	r3, #1
 8102eb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8102eba:	683b      	ldr	r3, [r7, #0]
 8102ebc:	ee07 3a90 	vmov	s15, r3
 8102ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8102ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ed0:	ee17 3a90 	vmov	r3, s15
 8102ed4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102ed6:	e005      	b.n	8102ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102ed8:	2300      	movs	r3, #0
 8102eda:	61bb      	str	r3, [r7, #24]
      break;
 8102edc:	e002      	b.n	8102ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8102ede:	4b07      	ldr	r3, [pc, #28]	@ (8102efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102ee0:	61bb      	str	r3, [r7, #24]
      break;
 8102ee2:	bf00      	nop
  }

  return sysclockfreq;
 8102ee4:	69bb      	ldr	r3, [r7, #24]
}
 8102ee6:	4618      	mov	r0, r3
 8102ee8:	3724      	adds	r7, #36	@ 0x24
 8102eea:	46bd      	mov	sp, r7
 8102eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ef0:	4770      	bx	lr
 8102ef2:	bf00      	nop
 8102ef4:	58024400 	.word	0x58024400
 8102ef8:	03d09000 	.word	0x03d09000
 8102efc:	003d0900 	.word	0x003d0900
 8102f00:	017d7840 	.word	0x017d7840
 8102f04:	46000000 	.word	0x46000000
 8102f08:	4c742400 	.word	0x4c742400
 8102f0c:	4a742400 	.word	0x4a742400
 8102f10:	4bbebc20 	.word	0x4bbebc20

08102f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102f14:	b580      	push	{r7, lr}
 8102f16:	b082      	sub	sp, #8
 8102f18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102f1a:	f7ff fe81 	bl	8102c20 <HAL_RCC_GetSysClockFreq>
 8102f1e:	4602      	mov	r2, r0
 8102f20:	4b11      	ldr	r3, [pc, #68]	@ (8102f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8102f22:	699b      	ldr	r3, [r3, #24]
 8102f24:	0a1b      	lsrs	r3, r3, #8
 8102f26:	f003 030f 	and.w	r3, r3, #15
 8102f2a:	4910      	ldr	r1, [pc, #64]	@ (8102f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8102f2c:	5ccb      	ldrb	r3, [r1, r3]
 8102f2e:	f003 031f 	and.w	r3, r3, #31
 8102f32:	fa22 f303 	lsr.w	r3, r2, r3
 8102f36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102f38:	4b0b      	ldr	r3, [pc, #44]	@ (8102f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8102f3a:	699b      	ldr	r3, [r3, #24]
 8102f3c:	f003 030f 	and.w	r3, r3, #15
 8102f40:	4a0a      	ldr	r2, [pc, #40]	@ (8102f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8102f42:	5cd3      	ldrb	r3, [r2, r3]
 8102f44:	f003 031f 	and.w	r3, r3, #31
 8102f48:	687a      	ldr	r2, [r7, #4]
 8102f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8102f4e:	4a08      	ldr	r2, [pc, #32]	@ (8102f70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102f50:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102f52:	4b07      	ldr	r3, [pc, #28]	@ (8102f70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102f54:	681b      	ldr	r3, [r3, #0]
 8102f56:	4a07      	ldr	r2, [pc, #28]	@ (8102f74 <HAL_RCC_GetHCLKFreq+0x60>)
 8102f58:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102f5a:	4b05      	ldr	r3, [pc, #20]	@ (8102f70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102f5c:	681b      	ldr	r3, [r3, #0]
}
 8102f5e:	4618      	mov	r0, r3
 8102f60:	3708      	adds	r7, #8
 8102f62:	46bd      	mov	sp, r7
 8102f64:	bd80      	pop	{r7, pc}
 8102f66:	bf00      	nop
 8102f68:	58024400 	.word	0x58024400
 8102f6c:	08108a94 	.word	0x08108a94
 8102f70:	10000004 	.word	0x10000004
 8102f74:	10000000 	.word	0x10000000

08102f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102f78:	b580      	push	{r7, lr}
 8102f7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102f7c:	f7ff ffca 	bl	8102f14 <HAL_RCC_GetHCLKFreq>
 8102f80:	4602      	mov	r2, r0
 8102f82:	4b06      	ldr	r3, [pc, #24]	@ (8102f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8102f84:	69db      	ldr	r3, [r3, #28]
 8102f86:	091b      	lsrs	r3, r3, #4
 8102f88:	f003 0307 	and.w	r3, r3, #7
 8102f8c:	4904      	ldr	r1, [pc, #16]	@ (8102fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102f8e:	5ccb      	ldrb	r3, [r1, r3]
 8102f90:	f003 031f 	and.w	r3, r3, #31
 8102f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102f98:	4618      	mov	r0, r3
 8102f9a:	bd80      	pop	{r7, pc}
 8102f9c:	58024400 	.word	0x58024400
 8102fa0:	08108a94 	.word	0x08108a94

08102fa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8102fa4:	b480      	push	{r7}
 8102fa6:	b083      	sub	sp, #12
 8102fa8:	af00      	add	r7, sp, #0
 8102faa:	6078      	str	r0, [r7, #4]
 8102fac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	223f      	movs	r2, #63	@ 0x3f
 8102fb2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8102fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8103020 <HAL_RCC_GetClockConfig+0x7c>)
 8102fb6:	691b      	ldr	r3, [r3, #16]
 8102fb8:	f003 0207 	and.w	r2, r3, #7
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8102fc0:	4b17      	ldr	r3, [pc, #92]	@ (8103020 <HAL_RCC_GetClockConfig+0x7c>)
 8102fc2:	699b      	ldr	r3, [r3, #24]
 8102fc4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8102fcc:	4b14      	ldr	r3, [pc, #80]	@ (8103020 <HAL_RCC_GetClockConfig+0x7c>)
 8102fce:	699b      	ldr	r3, [r3, #24]
 8102fd0:	f003 020f 	and.w	r2, r3, #15
 8102fd4:	687b      	ldr	r3, [r7, #4]
 8102fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8102fd8:	4b11      	ldr	r3, [pc, #68]	@ (8103020 <HAL_RCC_GetClockConfig+0x7c>)
 8102fda:	699b      	ldr	r3, [r3, #24]
 8102fdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8102fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8103020 <HAL_RCC_GetClockConfig+0x7c>)
 8102fe6:	69db      	ldr	r3, [r3, #28]
 8102fe8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8102ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8103020 <HAL_RCC_GetClockConfig+0x7c>)
 8102ff2:	69db      	ldr	r3, [r3, #28]
 8102ff4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8102ffc:	4b08      	ldr	r3, [pc, #32]	@ (8103020 <HAL_RCC_GetClockConfig+0x7c>)
 8102ffe:	6a1b      	ldr	r3, [r3, #32]
 8103000:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8103008:	4b06      	ldr	r3, [pc, #24]	@ (8103024 <HAL_RCC_GetClockConfig+0x80>)
 810300a:	681b      	ldr	r3, [r3, #0]
 810300c:	f003 020f 	and.w	r2, r3, #15
 8103010:	683b      	ldr	r3, [r7, #0]
 8103012:	601a      	str	r2, [r3, #0]
}
 8103014:	bf00      	nop
 8103016:	370c      	adds	r7, #12
 8103018:	46bd      	mov	sp, r7
 810301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810301e:	4770      	bx	lr
 8103020:	58024400 	.word	0x58024400
 8103024:	52002000 	.word	0x52002000

08103028 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810302c:	b0cc      	sub	sp, #304	@ 0x130
 810302e:	af00      	add	r7, sp, #0
 8103030:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103034:	2300      	movs	r3, #0
 8103036:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810303a:	2300      	movs	r3, #0
 810303c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103048:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810304c:	2500      	movs	r5, #0
 810304e:	ea54 0305 	orrs.w	r3, r4, r5
 8103052:	d049      	beq.n	81030e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103054:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810305a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810305e:	d02f      	beq.n	81030c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8103060:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103064:	d828      	bhi.n	81030b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103066:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810306a:	d01a      	beq.n	81030a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810306c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103070:	d822      	bhi.n	81030b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103072:	2b00      	cmp	r3, #0
 8103074:	d003      	beq.n	810307e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8103076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810307a:	d007      	beq.n	810308c <HAL_RCCEx_PeriphCLKConfig+0x64>
 810307c:	e01c      	b.n	81030b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810307e:	4bb8      	ldr	r3, [pc, #736]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103082:	4ab7      	ldr	r2, [pc, #732]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810308a:	e01a      	b.n	81030c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810308c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103090:	3308      	adds	r3, #8
 8103092:	2102      	movs	r1, #2
 8103094:	4618      	mov	r0, r3
 8103096:	f002 fba1 	bl	81057dc <RCCEx_PLL2_Config>
 810309a:	4603      	mov	r3, r0
 810309c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81030a0:	e00f      	b.n	81030c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81030a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030a6:	3328      	adds	r3, #40	@ 0x28
 81030a8:	2102      	movs	r1, #2
 81030aa:	4618      	mov	r0, r3
 81030ac:	f002 fc48 	bl	8105940 <RCCEx_PLL3_Config>
 81030b0:	4603      	mov	r3, r0
 81030b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81030b6:	e004      	b.n	81030c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81030b8:	2301      	movs	r3, #1
 81030ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81030be:	e000      	b.n	81030c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81030c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81030c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81030c6:	2b00      	cmp	r3, #0
 81030c8:	d10a      	bne.n	81030e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81030ca:	4ba5      	ldr	r3, [pc, #660]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81030cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81030ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81030d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81030d8:	4aa1      	ldr	r2, [pc, #644]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81030da:	430b      	orrs	r3, r1
 81030dc:	6513      	str	r3, [r2, #80]	@ 0x50
 81030de:	e003      	b.n	81030e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81030e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81030e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81030f4:	f04f 0900 	mov.w	r9, #0
 81030f8:	ea58 0309 	orrs.w	r3, r8, r9
 81030fc:	d047      	beq.n	810318e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81030fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103104:	2b04      	cmp	r3, #4
 8103106:	d82a      	bhi.n	810315e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103108:	a201      	add	r2, pc, #4	@ (adr r2, 8103110 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810310e:	bf00      	nop
 8103110:	08103125 	.word	0x08103125
 8103114:	08103133 	.word	0x08103133
 8103118:	08103149 	.word	0x08103149
 810311c:	08103167 	.word	0x08103167
 8103120:	08103167 	.word	0x08103167
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103124:	4b8e      	ldr	r3, [pc, #568]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103128:	4a8d      	ldr	r2, [pc, #564]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810312a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810312e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103130:	e01a      	b.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103132:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103136:	3308      	adds	r3, #8
 8103138:	2100      	movs	r1, #0
 810313a:	4618      	mov	r0, r3
 810313c:	f002 fb4e 	bl	81057dc <RCCEx_PLL2_Config>
 8103140:	4603      	mov	r3, r0
 8103142:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103146:	e00f      	b.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810314c:	3328      	adds	r3, #40	@ 0x28
 810314e:	2100      	movs	r1, #0
 8103150:	4618      	mov	r0, r3
 8103152:	f002 fbf5 	bl	8105940 <RCCEx_PLL3_Config>
 8103156:	4603      	mov	r3, r0
 8103158:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810315c:	e004      	b.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810315e:	2301      	movs	r3, #1
 8103160:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103164:	e000      	b.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8103166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103168:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810316c:	2b00      	cmp	r3, #0
 810316e:	d10a      	bne.n	8103186 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103170:	4b7b      	ldr	r3, [pc, #492]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103174:	f023 0107 	bic.w	r1, r3, #7
 8103178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810317e:	4a78      	ldr	r2, [pc, #480]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103180:	430b      	orrs	r3, r1
 8103182:	6513      	str	r3, [r2, #80]	@ 0x50
 8103184:	e003      	b.n	810318e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103186:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810318a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810318e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103196:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810319a:	f04f 0b00 	mov.w	fp, #0
 810319e:	ea5a 030b 	orrs.w	r3, sl, fp
 81031a2:	d04c      	beq.n	810323e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81031a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81031aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81031ae:	d030      	beq.n	8103212 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81031b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81031b4:	d829      	bhi.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81031b6:	2bc0      	cmp	r3, #192	@ 0xc0
 81031b8:	d02d      	beq.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81031ba:	2bc0      	cmp	r3, #192	@ 0xc0
 81031bc:	d825      	bhi.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81031be:	2b80      	cmp	r3, #128	@ 0x80
 81031c0:	d018      	beq.n	81031f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81031c2:	2b80      	cmp	r3, #128	@ 0x80
 81031c4:	d821      	bhi.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81031c6:	2b00      	cmp	r3, #0
 81031c8:	d002      	beq.n	81031d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81031ca:	2b40      	cmp	r3, #64	@ 0x40
 81031cc:	d007      	beq.n	81031de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81031ce:	e01c      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031d0:	4b63      	ldr	r3, [pc, #396]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031d4:	4a62      	ldr	r2, [pc, #392]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81031d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81031da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81031dc:	e01c      	b.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81031de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031e2:	3308      	adds	r3, #8
 81031e4:	2100      	movs	r1, #0
 81031e6:	4618      	mov	r0, r3
 81031e8:	f002 faf8 	bl	81057dc <RCCEx_PLL2_Config>
 81031ec:	4603      	mov	r3, r0
 81031ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81031f2:	e011      	b.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81031f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031f8:	3328      	adds	r3, #40	@ 0x28
 81031fa:	2100      	movs	r1, #0
 81031fc:	4618      	mov	r0, r3
 81031fe:	f002 fb9f 	bl	8105940 <RCCEx_PLL3_Config>
 8103202:	4603      	mov	r3, r0
 8103204:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103208:	e006      	b.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810320a:	2301      	movs	r3, #1
 810320c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103210:	e002      	b.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103212:	bf00      	nop
 8103214:	e000      	b.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103218:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810321c:	2b00      	cmp	r3, #0
 810321e:	d10a      	bne.n	8103236 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103220:	4b4f      	ldr	r3, [pc, #316]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103224:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8103228:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810322c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810322e:	4a4c      	ldr	r2, [pc, #304]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103230:	430b      	orrs	r3, r1
 8103232:	6513      	str	r3, [r2, #80]	@ 0x50
 8103234:	e003      	b.n	810323e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103236:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810323a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810323e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103246:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810324a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 810324e:	2300      	movs	r3, #0
 8103250:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8103254:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8103258:	460b      	mov	r3, r1
 810325a:	4313      	orrs	r3, r2
 810325c:	d053      	beq.n	8103306 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810325e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103266:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810326a:	d035      	beq.n	81032d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810326c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103270:	d82e      	bhi.n	81032d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103272:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103276:	d031      	beq.n	81032dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103278:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810327c:	d828      	bhi.n	81032d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810327e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103282:	d01a      	beq.n	81032ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103288:	d822      	bhi.n	81032d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810328a:	2b00      	cmp	r3, #0
 810328c:	d003      	beq.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810328e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103292:	d007      	beq.n	81032a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103294:	e01c      	b.n	81032d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103296:	4b32      	ldr	r3, [pc, #200]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810329a:	4a31      	ldr	r2, [pc, #196]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810329c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81032a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81032a2:	e01c      	b.n	81032de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81032a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032a8:	3308      	adds	r3, #8
 81032aa:	2100      	movs	r1, #0
 81032ac:	4618      	mov	r0, r3
 81032ae:	f002 fa95 	bl	81057dc <RCCEx_PLL2_Config>
 81032b2:	4603      	mov	r3, r0
 81032b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81032b8:	e011      	b.n	81032de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81032ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032be:	3328      	adds	r3, #40	@ 0x28
 81032c0:	2100      	movs	r1, #0
 81032c2:	4618      	mov	r0, r3
 81032c4:	f002 fb3c 	bl	8105940 <RCCEx_PLL3_Config>
 81032c8:	4603      	mov	r3, r0
 81032ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81032ce:	e006      	b.n	81032de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81032d0:	2301      	movs	r3, #1
 81032d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81032d6:	e002      	b.n	81032de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81032d8:	bf00      	nop
 81032da:	e000      	b.n	81032de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81032dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81032de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81032e2:	2b00      	cmp	r3, #0
 81032e4:	d10b      	bne.n	81032fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81032e6:	4b1e      	ldr	r3, [pc, #120]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81032e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81032ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81032ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81032f6:	4a1a      	ldr	r2, [pc, #104]	@ (8103360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81032f8:	430b      	orrs	r3, r1
 81032fa:	6593      	str	r3, [r2, #88]	@ 0x58
 81032fc:	e003      	b.n	8103306 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103302:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103306:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810330e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8103312:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8103316:	2300      	movs	r3, #0
 8103318:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810331c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8103320:	460b      	mov	r3, r1
 8103322:	4313      	orrs	r3, r2
 8103324:	d056      	beq.n	81033d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103326:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810332a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810332e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103332:	d038      	beq.n	81033a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103334:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103338:	d831      	bhi.n	810339e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810333a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810333e:	d034      	beq.n	81033aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103340:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103344:	d82b      	bhi.n	810339e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103346:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810334a:	d01d      	beq.n	8103388 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810334c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103350:	d825      	bhi.n	810339e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103352:	2b00      	cmp	r3, #0
 8103354:	d006      	beq.n	8103364 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103356:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810335a:	d00a      	beq.n	8103372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810335c:	e01f      	b.n	810339e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810335e:	bf00      	nop
 8103360:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103364:	4ba2      	ldr	r3, [pc, #648]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103368:	4aa1      	ldr	r2, [pc, #644]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810336a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810336e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103370:	e01c      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103376:	3308      	adds	r3, #8
 8103378:	2100      	movs	r1, #0
 810337a:	4618      	mov	r0, r3
 810337c:	f002 fa2e 	bl	81057dc <RCCEx_PLL2_Config>
 8103380:	4603      	mov	r3, r0
 8103382:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103386:	e011      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810338c:	3328      	adds	r3, #40	@ 0x28
 810338e:	2100      	movs	r1, #0
 8103390:	4618      	mov	r0, r3
 8103392:	f002 fad5 	bl	8105940 <RCCEx_PLL3_Config>
 8103396:	4603      	mov	r3, r0
 8103398:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810339c:	e006      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810339e:	2301      	movs	r3, #1
 81033a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81033a4:	e002      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81033a6:	bf00      	nop
 81033a8:	e000      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81033aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81033ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033b0:	2b00      	cmp	r3, #0
 81033b2:	d10b      	bne.n	81033cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81033b4:	4b8e      	ldr	r3, [pc, #568]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81033b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81033bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81033c4:	4a8a      	ldr	r2, [pc, #552]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81033c6:	430b      	orrs	r3, r1
 81033c8:	6593      	str	r3, [r2, #88]	@ 0x58
 81033ca:	e003      	b.n	81033d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81033d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81033e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81033e4:	2300      	movs	r3, #0
 81033e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81033ea:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81033ee:	460b      	mov	r3, r1
 81033f0:	4313      	orrs	r3, r2
 81033f2:	d03a      	beq.n	810346a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81033f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81033fa:	2b30      	cmp	r3, #48	@ 0x30
 81033fc:	d01f      	beq.n	810343e <HAL_RCCEx_PeriphCLKConfig+0x416>
 81033fe:	2b30      	cmp	r3, #48	@ 0x30
 8103400:	d819      	bhi.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103402:	2b20      	cmp	r3, #32
 8103404:	d00c      	beq.n	8103420 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103406:	2b20      	cmp	r3, #32
 8103408:	d815      	bhi.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810340a:	2b00      	cmp	r3, #0
 810340c:	d019      	beq.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810340e:	2b10      	cmp	r3, #16
 8103410:	d111      	bne.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103412:	4b77      	ldr	r3, [pc, #476]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103416:	4a76      	ldr	r2, [pc, #472]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810341c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810341e:	e011      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103420:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103424:	3308      	adds	r3, #8
 8103426:	2102      	movs	r1, #2
 8103428:	4618      	mov	r0, r3
 810342a:	f002 f9d7 	bl	81057dc <RCCEx_PLL2_Config>
 810342e:	4603      	mov	r3, r0
 8103430:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103434:	e006      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103436:	2301      	movs	r3, #1
 8103438:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810343c:	e002      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810343e:	bf00      	nop
 8103440:	e000      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103444:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103448:	2b00      	cmp	r3, #0
 810344a:	d10a      	bne.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810344c:	4b68      	ldr	r3, [pc, #416]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810344e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103450:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8103454:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810345a:	4a65      	ldr	r2, [pc, #404]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810345c:	430b      	orrs	r3, r1
 810345e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103460:	e003      	b.n	810346a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103462:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103466:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810346a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103472:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8103476:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810347a:	2300      	movs	r3, #0
 810347c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8103480:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8103484:	460b      	mov	r3, r1
 8103486:	4313      	orrs	r3, r2
 8103488:	d051      	beq.n	810352e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810348a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810348e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103494:	d035      	beq.n	8103502 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103496:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810349a:	d82e      	bhi.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810349c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81034a0:	d031      	beq.n	8103506 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81034a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81034a6:	d828      	bhi.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81034a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81034ac:	d01a      	beq.n	81034e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81034ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81034b2:	d822      	bhi.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81034b4:	2b00      	cmp	r3, #0
 81034b6:	d003      	beq.n	81034c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81034b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81034bc:	d007      	beq.n	81034ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81034be:	e01c      	b.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034c0:	4b4b      	ldr	r3, [pc, #300]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81034c4:	4a4a      	ldr	r2, [pc, #296]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81034c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81034ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81034cc:	e01c      	b.n	8103508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81034ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034d2:	3308      	adds	r3, #8
 81034d4:	2100      	movs	r1, #0
 81034d6:	4618      	mov	r0, r3
 81034d8:	f002 f980 	bl	81057dc <RCCEx_PLL2_Config>
 81034dc:	4603      	mov	r3, r0
 81034de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81034e2:	e011      	b.n	8103508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81034e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034e8:	3328      	adds	r3, #40	@ 0x28
 81034ea:	2100      	movs	r1, #0
 81034ec:	4618      	mov	r0, r3
 81034ee:	f002 fa27 	bl	8105940 <RCCEx_PLL3_Config>
 81034f2:	4603      	mov	r3, r0
 81034f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81034f8:	e006      	b.n	8103508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81034fa:	2301      	movs	r3, #1
 81034fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103500:	e002      	b.n	8103508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103502:	bf00      	nop
 8103504:	e000      	b.n	8103508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103508:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810350c:	2b00      	cmp	r3, #0
 810350e:	d10a      	bne.n	8103526 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103510:	4b37      	ldr	r3, [pc, #220]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103514:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8103518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810351c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810351e:	4a34      	ldr	r2, [pc, #208]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103520:	430b      	orrs	r3, r1
 8103522:	6513      	str	r3, [r2, #80]	@ 0x50
 8103524:	e003      	b.n	810352e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103526:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810352a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810352e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103536:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810353a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810353e:	2300      	movs	r3, #0
 8103540:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8103544:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8103548:	460b      	mov	r3, r1
 810354a:	4313      	orrs	r3, r2
 810354c:	d056      	beq.n	81035fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810354e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103558:	d033      	beq.n	81035c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810355a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810355e:	d82c      	bhi.n	81035ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103564:	d02f      	beq.n	81035c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810356a:	d826      	bhi.n	81035ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 810356c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103570:	d02b      	beq.n	81035ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103572:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103576:	d820      	bhi.n	81035ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810357c:	d012      	beq.n	81035a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810357e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103582:	d81a      	bhi.n	81035ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103584:	2b00      	cmp	r3, #0
 8103586:	d022      	beq.n	81035ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810358c:	d115      	bne.n	81035ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810358e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103592:	3308      	adds	r3, #8
 8103594:	2101      	movs	r1, #1
 8103596:	4618      	mov	r0, r3
 8103598:	f002 f920 	bl	81057dc <RCCEx_PLL2_Config>
 810359c:	4603      	mov	r3, r0
 810359e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81035a2:	e015      	b.n	81035d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81035a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035a8:	3328      	adds	r3, #40	@ 0x28
 81035aa:	2101      	movs	r1, #1
 81035ac:	4618      	mov	r0, r3
 81035ae:	f002 f9c7 	bl	8105940 <RCCEx_PLL3_Config>
 81035b2:	4603      	mov	r3, r0
 81035b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81035b8:	e00a      	b.n	81035d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81035ba:	2301      	movs	r3, #1
 81035bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81035c0:	e006      	b.n	81035d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81035c2:	bf00      	nop
 81035c4:	e004      	b.n	81035d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81035c6:	bf00      	nop
 81035c8:	e002      	b.n	81035d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81035ca:	bf00      	nop
 81035cc:	e000      	b.n	81035d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81035ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81035d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81035d4:	2b00      	cmp	r3, #0
 81035d6:	d10d      	bne.n	81035f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81035d8:	4b05      	ldr	r3, [pc, #20]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81035da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81035dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81035e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81035e6:	4a02      	ldr	r2, [pc, #8]	@ (81035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81035e8:	430b      	orrs	r3, r1
 81035ea:	6513      	str	r3, [r2, #80]	@ 0x50
 81035ec:	e006      	b.n	81035fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81035ee:	bf00      	nop
 81035f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81035f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81035fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103604:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103608:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810360c:	2300      	movs	r3, #0
 810360e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8103612:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8103616:	460b      	mov	r3, r1
 8103618:	4313      	orrs	r3, r2
 810361a:	d055      	beq.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810361c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103628:	d033      	beq.n	8103692 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810362a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810362e:	d82c      	bhi.n	810368a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103634:	d02f      	beq.n	8103696 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810363a:	d826      	bhi.n	810368a <HAL_RCCEx_PeriphCLKConfig+0x662>
 810363c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103640:	d02b      	beq.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103642:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103646:	d820      	bhi.n	810368a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810364c:	d012      	beq.n	8103674 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810364e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103652:	d81a      	bhi.n	810368a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103654:	2b00      	cmp	r3, #0
 8103656:	d022      	beq.n	810369e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810365c:	d115      	bne.n	810368a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810365e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103662:	3308      	adds	r3, #8
 8103664:	2101      	movs	r1, #1
 8103666:	4618      	mov	r0, r3
 8103668:	f002 f8b8 	bl	81057dc <RCCEx_PLL2_Config>
 810366c:	4603      	mov	r3, r0
 810366e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103672:	e015      	b.n	81036a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103674:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103678:	3328      	adds	r3, #40	@ 0x28
 810367a:	2101      	movs	r1, #1
 810367c:	4618      	mov	r0, r3
 810367e:	f002 f95f 	bl	8105940 <RCCEx_PLL3_Config>
 8103682:	4603      	mov	r3, r0
 8103684:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103688:	e00a      	b.n	81036a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810368a:	2301      	movs	r3, #1
 810368c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103690:	e006      	b.n	81036a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103692:	bf00      	nop
 8103694:	e004      	b.n	81036a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103696:	bf00      	nop
 8103698:	e002      	b.n	81036a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810369a:	bf00      	nop
 810369c:	e000      	b.n	81036a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810369e:	bf00      	nop
    }

    if (ret == HAL_OK)
 81036a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81036a4:	2b00      	cmp	r3, #0
 81036a6:	d10b      	bne.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81036a8:	4bb7      	ldr	r3, [pc, #732]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81036ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81036b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81036b8:	4ab3      	ldr	r2, [pc, #716]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036ba:	430b      	orrs	r3, r1
 81036bc:	6593      	str	r3, [r2, #88]	@ 0x58
 81036be:	e003      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81036c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 81036c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036d0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 81036d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81036d8:	2300      	movs	r3, #0
 81036da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81036de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81036e2:	460b      	mov	r3, r1
 81036e4:	4313      	orrs	r3, r2
 81036e6:	d02a      	beq.n	810373e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 81036e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81036ee:	2b00      	cmp	r3, #0
 81036f0:	d011      	beq.n	8103716 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 81036f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81036f6:	d10a      	bne.n	810370e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81036f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036fc:	3308      	adds	r3, #8
 81036fe:	2101      	movs	r1, #1
 8103700:	4618      	mov	r0, r3
 8103702:	f002 f86b 	bl	81057dc <RCCEx_PLL2_Config>
 8103706:	4603      	mov	r3, r0
 8103708:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 810370c:	e004      	b.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810370e:	2301      	movs	r3, #1
 8103710:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103714:	e000      	b.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8103716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103718:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810371c:	2b00      	cmp	r3, #0
 810371e:	d10a      	bne.n	8103736 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8103720:	4b99      	ldr	r3, [pc, #612]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103724:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8103728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810372c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810372e:	4a96      	ldr	r2, [pc, #600]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103730:	430b      	orrs	r3, r1
 8103732:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103734:	e003      	b.n	810373e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103736:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810373a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810373e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103746:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810374a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810374e:	2300      	movs	r3, #0
 8103750:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8103754:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8103758:	460b      	mov	r3, r1
 810375a:	4313      	orrs	r3, r2
 810375c:	d037      	beq.n	81037ce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810375e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103768:	d00e      	beq.n	8103788 <HAL_RCCEx_PeriphCLKConfig+0x760>
 810376a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810376e:	d816      	bhi.n	810379e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8103770:	2b00      	cmp	r3, #0
 8103772:	d018      	beq.n	81037a6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8103774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103778:	d111      	bne.n	810379e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810377a:	4b83      	ldr	r3, [pc, #524]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810377e:	4a82      	ldr	r2, [pc, #520]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103784:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103786:	e00f      	b.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103788:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810378c:	3308      	adds	r3, #8
 810378e:	2101      	movs	r1, #1
 8103790:	4618      	mov	r0, r3
 8103792:	f002 f823 	bl	81057dc <RCCEx_PLL2_Config>
 8103796:	4603      	mov	r3, r0
 8103798:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810379c:	e004      	b.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810379e:	2301      	movs	r3, #1
 81037a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81037a4:	e000      	b.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 81037a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81037a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81037ac:	2b00      	cmp	r3, #0
 81037ae:	d10a      	bne.n	81037c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81037b0:	4b75      	ldr	r3, [pc, #468]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81037b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81037b4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81037b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81037be:	4a72      	ldr	r2, [pc, #456]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81037c0:	430b      	orrs	r3, r1
 81037c2:	6513      	str	r3, [r2, #80]	@ 0x50
 81037c4:	e003      	b.n	81037ce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81037ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81037ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037d6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81037da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81037de:	2300      	movs	r3, #0
 81037e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81037e4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81037e8:	460b      	mov	r3, r1
 81037ea:	4313      	orrs	r3, r2
 81037ec:	d03a      	beq.n	8103864 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81037ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81037f4:	2b03      	cmp	r3, #3
 81037f6:	d81d      	bhi.n	8103834 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 81037f8:	a201      	add	r2, pc, #4	@ (adr r2, 8103800 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 81037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81037fe:	bf00      	nop
 8103800:	0810383d 	.word	0x0810383d
 8103804:	08103811 	.word	0x08103811
 8103808:	0810381f 	.word	0x0810381f
 810380c:	0810383d 	.word	0x0810383d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103810:	4b5d      	ldr	r3, [pc, #372]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103814:	4a5c      	ldr	r2, [pc, #368]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810381a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810381c:	e00f      	b.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810381e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103822:	3308      	adds	r3, #8
 8103824:	2102      	movs	r1, #2
 8103826:	4618      	mov	r0, r3
 8103828:	f001 ffd8 	bl	81057dc <RCCEx_PLL2_Config>
 810382c:	4603      	mov	r3, r0
 810382e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103832:	e004      	b.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103834:	2301      	movs	r3, #1
 8103836:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810383a:	e000      	b.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 810383c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810383e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103842:	2b00      	cmp	r3, #0
 8103844:	d10a      	bne.n	810385c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103846:	4b50      	ldr	r3, [pc, #320]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810384a:	f023 0103 	bic.w	r1, r3, #3
 810384e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103854:	4a4c      	ldr	r2, [pc, #304]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103856:	430b      	orrs	r3, r1
 8103858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810385a:	e003      	b.n	8103864 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810385c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103860:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103868:	e9d3 2300 	ldrd	r2, r3, [r3]
 810386c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8103870:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8103874:	2300      	movs	r3, #0
 8103876:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810387a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810387e:	460b      	mov	r3, r1
 8103880:	4313      	orrs	r3, r2
 8103882:	f000 80a0 	beq.w	81039c6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103886:	4b41      	ldr	r3, [pc, #260]	@ (810398c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103888:	681b      	ldr	r3, [r3, #0]
 810388a:	4a40      	ldr	r2, [pc, #256]	@ (810398c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810388c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103890:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103892:	f7fe fb99 	bl	8101fc8 <HAL_GetTick>
 8103896:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810389a:	e00b      	b.n	81038b4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810389c:	f7fe fb94 	bl	8101fc8 <HAL_GetTick>
 81038a0:	4602      	mov	r2, r0
 81038a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 81038a6:	1ad3      	subs	r3, r2, r3
 81038a8:	2b64      	cmp	r3, #100	@ 0x64
 81038aa:	d903      	bls.n	81038b4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 81038ac:	2303      	movs	r3, #3
 81038ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81038b2:	e005      	b.n	81038c0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81038b4:	4b35      	ldr	r3, [pc, #212]	@ (810398c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81038b6:	681b      	ldr	r3, [r3, #0]
 81038b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81038bc:	2b00      	cmp	r3, #0
 81038be:	d0ed      	beq.n	810389c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 81038c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81038c4:	2b00      	cmp	r3, #0
 81038c6:	d17a      	bne.n	81039be <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81038c8:	4b2f      	ldr	r3, [pc, #188]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81038cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81038d4:	4053      	eors	r3, r2
 81038d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81038da:	2b00      	cmp	r3, #0
 81038dc:	d015      	beq.n	810390a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81038de:	4b2a      	ldr	r3, [pc, #168]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81038e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81038e6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81038ea:	4b27      	ldr	r3, [pc, #156]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81038ee:	4a26      	ldr	r2, [pc, #152]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81038f4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81038f6:	4b24      	ldr	r3, [pc, #144]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81038fa:	4a23      	ldr	r2, [pc, #140]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8103900:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103902:	4a21      	ldr	r2, [pc, #132]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103904:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8103908:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810390a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810390e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103916:	d118      	bne.n	810394a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103918:	f7fe fb56 	bl	8101fc8 <HAL_GetTick>
 810391c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103920:	e00d      	b.n	810393e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103922:	f7fe fb51 	bl	8101fc8 <HAL_GetTick>
 8103926:	4602      	mov	r2, r0
 8103928:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810392c:	1ad2      	subs	r2, r2, r3
 810392e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8103932:	429a      	cmp	r2, r3
 8103934:	d903      	bls.n	810393e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8103936:	2303      	movs	r3, #3
 8103938:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 810393c:	e005      	b.n	810394a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810393e:	4b12      	ldr	r3, [pc, #72]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103942:	f003 0302 	and.w	r3, r3, #2
 8103946:	2b00      	cmp	r3, #0
 8103948:	d0eb      	beq.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810394a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810394e:	2b00      	cmp	r3, #0
 8103950:	d130      	bne.n	81039b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103952:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103956:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810395a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810395e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103962:	d115      	bne.n	8103990 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8103964:	4b08      	ldr	r3, [pc, #32]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103966:	691b      	ldr	r3, [r3, #16]
 8103968:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810396c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103970:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103974:	091b      	lsrs	r3, r3, #4
 8103976:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810397a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810397e:	4a02      	ldr	r2, [pc, #8]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103980:	430b      	orrs	r3, r1
 8103982:	6113      	str	r3, [r2, #16]
 8103984:	e00a      	b.n	810399c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8103986:	bf00      	nop
 8103988:	58024400 	.word	0x58024400
 810398c:	58024800 	.word	0x58024800
 8103990:	4bd4      	ldr	r3, [pc, #848]	@ (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103992:	691b      	ldr	r3, [r3, #16]
 8103994:	4ad3      	ldr	r2, [pc, #844]	@ (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103996:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810399a:	6113      	str	r3, [r2, #16]
 810399c:	4bd1      	ldr	r3, [pc, #836]	@ (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810399e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81039a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81039ac:	4acd      	ldr	r2, [pc, #820]	@ (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81039ae:	430b      	orrs	r3, r1
 81039b0:	6713      	str	r3, [r2, #112]	@ 0x70
 81039b2:	e008      	b.n	81039c6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81039b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81039b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 81039bc:	e003      	b.n	81039c6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81039c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81039c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039ce:	f002 0301 	and.w	r3, r2, #1
 81039d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81039d6:	2300      	movs	r3, #0
 81039d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81039dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81039e0:	460b      	mov	r3, r1
 81039e2:	4313      	orrs	r3, r2
 81039e4:	f000 808b 	beq.w	8103afe <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81039e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81039f0:	2b28      	cmp	r3, #40	@ 0x28
 81039f2:	d86b      	bhi.n	8103acc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 81039f4:	a201      	add	r2, pc, #4	@ (adr r2, 81039fc <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 81039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039fa:	bf00      	nop
 81039fc:	08103ad5 	.word	0x08103ad5
 8103a00:	08103acd 	.word	0x08103acd
 8103a04:	08103acd 	.word	0x08103acd
 8103a08:	08103acd 	.word	0x08103acd
 8103a0c:	08103acd 	.word	0x08103acd
 8103a10:	08103acd 	.word	0x08103acd
 8103a14:	08103acd 	.word	0x08103acd
 8103a18:	08103acd 	.word	0x08103acd
 8103a1c:	08103aa1 	.word	0x08103aa1
 8103a20:	08103acd 	.word	0x08103acd
 8103a24:	08103acd 	.word	0x08103acd
 8103a28:	08103acd 	.word	0x08103acd
 8103a2c:	08103acd 	.word	0x08103acd
 8103a30:	08103acd 	.word	0x08103acd
 8103a34:	08103acd 	.word	0x08103acd
 8103a38:	08103acd 	.word	0x08103acd
 8103a3c:	08103ab7 	.word	0x08103ab7
 8103a40:	08103acd 	.word	0x08103acd
 8103a44:	08103acd 	.word	0x08103acd
 8103a48:	08103acd 	.word	0x08103acd
 8103a4c:	08103acd 	.word	0x08103acd
 8103a50:	08103acd 	.word	0x08103acd
 8103a54:	08103acd 	.word	0x08103acd
 8103a58:	08103acd 	.word	0x08103acd
 8103a5c:	08103ad5 	.word	0x08103ad5
 8103a60:	08103acd 	.word	0x08103acd
 8103a64:	08103acd 	.word	0x08103acd
 8103a68:	08103acd 	.word	0x08103acd
 8103a6c:	08103acd 	.word	0x08103acd
 8103a70:	08103acd 	.word	0x08103acd
 8103a74:	08103acd 	.word	0x08103acd
 8103a78:	08103acd 	.word	0x08103acd
 8103a7c:	08103ad5 	.word	0x08103ad5
 8103a80:	08103acd 	.word	0x08103acd
 8103a84:	08103acd 	.word	0x08103acd
 8103a88:	08103acd 	.word	0x08103acd
 8103a8c:	08103acd 	.word	0x08103acd
 8103a90:	08103acd 	.word	0x08103acd
 8103a94:	08103acd 	.word	0x08103acd
 8103a98:	08103acd 	.word	0x08103acd
 8103a9c:	08103ad5 	.word	0x08103ad5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aa4:	3308      	adds	r3, #8
 8103aa6:	2101      	movs	r1, #1
 8103aa8:	4618      	mov	r0, r3
 8103aaa:	f001 fe97 	bl	81057dc <RCCEx_PLL2_Config>
 8103aae:	4603      	mov	r3, r0
 8103ab0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103ab4:	e00f      	b.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aba:	3328      	adds	r3, #40	@ 0x28
 8103abc:	2101      	movs	r1, #1
 8103abe:	4618      	mov	r0, r3
 8103ac0:	f001 ff3e 	bl	8105940 <RCCEx_PLL3_Config>
 8103ac4:	4603      	mov	r3, r0
 8103ac6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103aca:	e004      	b.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103acc:	2301      	movs	r3, #1
 8103ace:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103ad2:	e000      	b.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8103ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ad6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ada:	2b00      	cmp	r3, #0
 8103adc:	d10b      	bne.n	8103af6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103ade:	4b81      	ldr	r3, [pc, #516]	@ (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ae2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8103ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103aee:	4a7d      	ldr	r2, [pc, #500]	@ (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103af0:	430b      	orrs	r3, r1
 8103af2:	6553      	str	r3, [r2, #84]	@ 0x54
 8103af4:	e003      	b.n	8103afe <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103af6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103afa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b06:	f002 0302 	and.w	r3, r2, #2
 8103b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8103b0e:	2300      	movs	r3, #0
 8103b10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8103b14:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8103b18:	460b      	mov	r3, r1
 8103b1a:	4313      	orrs	r3, r2
 8103b1c:	d042      	beq.n	8103ba4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103b24:	2b05      	cmp	r3, #5
 8103b26:	d825      	bhi.n	8103b74 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8103b28:	a201      	add	r2, pc, #4	@ (adr r2, 8103b30 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8103b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b2e:	bf00      	nop
 8103b30:	08103b7d 	.word	0x08103b7d
 8103b34:	08103b49 	.word	0x08103b49
 8103b38:	08103b5f 	.word	0x08103b5f
 8103b3c:	08103b7d 	.word	0x08103b7d
 8103b40:	08103b7d 	.word	0x08103b7d
 8103b44:	08103b7d 	.word	0x08103b7d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103b48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b4c:	3308      	adds	r3, #8
 8103b4e:	2101      	movs	r1, #1
 8103b50:	4618      	mov	r0, r3
 8103b52:	f001 fe43 	bl	81057dc <RCCEx_PLL2_Config>
 8103b56:	4603      	mov	r3, r0
 8103b58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103b5c:	e00f      	b.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b62:	3328      	adds	r3, #40	@ 0x28
 8103b64:	2101      	movs	r1, #1
 8103b66:	4618      	mov	r0, r3
 8103b68:	f001 feea 	bl	8105940 <RCCEx_PLL3_Config>
 8103b6c:	4603      	mov	r3, r0
 8103b6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103b72:	e004      	b.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b74:	2301      	movs	r3, #1
 8103b76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103b7a:	e000      	b.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8103b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b82:	2b00      	cmp	r3, #0
 8103b84:	d10a      	bne.n	8103b9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103b86:	4b57      	ldr	r3, [pc, #348]	@ (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b8a:	f023 0107 	bic.w	r1, r3, #7
 8103b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103b94:	4a53      	ldr	r2, [pc, #332]	@ (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b96:	430b      	orrs	r3, r1
 8103b98:	6553      	str	r3, [r2, #84]	@ 0x54
 8103b9a:	e003      	b.n	8103ba4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b9c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ba0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bac:	f002 0304 	and.w	r3, r2, #4
 8103bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8103bb4:	2300      	movs	r3, #0
 8103bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8103bba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8103bbe:	460b      	mov	r3, r1
 8103bc0:	4313      	orrs	r3, r2
 8103bc2:	d044      	beq.n	8103c4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103bcc:	2b05      	cmp	r3, #5
 8103bce:	d825      	bhi.n	8103c1c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8103bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8103bd8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8103bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103bd6:	bf00      	nop
 8103bd8:	08103c25 	.word	0x08103c25
 8103bdc:	08103bf1 	.word	0x08103bf1
 8103be0:	08103c07 	.word	0x08103c07
 8103be4:	08103c25 	.word	0x08103c25
 8103be8:	08103c25 	.word	0x08103c25
 8103bec:	08103c25 	.word	0x08103c25
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bf4:	3308      	adds	r3, #8
 8103bf6:	2101      	movs	r1, #1
 8103bf8:	4618      	mov	r0, r3
 8103bfa:	f001 fdef 	bl	81057dc <RCCEx_PLL2_Config>
 8103bfe:	4603      	mov	r3, r0
 8103c00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103c04:	e00f      	b.n	8103c26 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c0a:	3328      	adds	r3, #40	@ 0x28
 8103c0c:	2101      	movs	r1, #1
 8103c0e:	4618      	mov	r0, r3
 8103c10:	f001 fe96 	bl	8105940 <RCCEx_PLL3_Config>
 8103c14:	4603      	mov	r3, r0
 8103c16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103c1a:	e004      	b.n	8103c26 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c1c:	2301      	movs	r3, #1
 8103c1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103c22:	e000      	b.n	8103c26 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8103c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c2a:	2b00      	cmp	r3, #0
 8103c2c:	d10b      	bne.n	8103c46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103c32:	f023 0107 	bic.w	r1, r3, #7
 8103c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103c3e:	4a29      	ldr	r2, [pc, #164]	@ (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103c40:	430b      	orrs	r3, r1
 8103c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8103c44:	e003      	b.n	8103c4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c56:	f002 0320 	and.w	r3, r2, #32
 8103c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8103c5e:	2300      	movs	r3, #0
 8103c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8103c64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8103c68:	460b      	mov	r3, r1
 8103c6a:	4313      	orrs	r3, r2
 8103c6c:	d057      	beq.n	8103d1e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8103c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103c7a:	d035      	beq.n	8103ce8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8103c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103c80:	d82c      	bhi.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103c86:	d031      	beq.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8103c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103c8c:	d826      	bhi.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103c8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103c92:	d02d      	beq.n	8103cf0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8103c94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103c98:	d820      	bhi.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103c9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103c9e:	d012      	beq.n	8103cc6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8103ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103ca4:	d81a      	bhi.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103ca6:	2b00      	cmp	r3, #0
 8103ca8:	d024      	beq.n	8103cf4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8103caa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103cae:	d115      	bne.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cb4:	3308      	adds	r3, #8
 8103cb6:	2100      	movs	r1, #0
 8103cb8:	4618      	mov	r0, r3
 8103cba:	f001 fd8f 	bl	81057dc <RCCEx_PLL2_Config>
 8103cbe:	4603      	mov	r3, r0
 8103cc0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103cc4:	e017      	b.n	8103cf6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cca:	3328      	adds	r3, #40	@ 0x28
 8103ccc:	2102      	movs	r1, #2
 8103cce:	4618      	mov	r0, r3
 8103cd0:	f001 fe36 	bl	8105940 <RCCEx_PLL3_Config>
 8103cd4:	4603      	mov	r3, r0
 8103cd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103cda:	e00c      	b.n	8103cf6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103cdc:	2301      	movs	r3, #1
 8103cde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103ce2:	e008      	b.n	8103cf6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8103ce4:	58024400 	.word	0x58024400
        break;
 8103ce8:	bf00      	nop
 8103cea:	e004      	b.n	8103cf6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103cec:	bf00      	nop
 8103cee:	e002      	b.n	8103cf6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103cf0:	bf00      	nop
 8103cf2:	e000      	b.n	8103cf6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103cf6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103cfa:	2b00      	cmp	r3, #0
 8103cfc:	d10b      	bne.n	8103d16 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103cfe:	4bc2      	ldr	r3, [pc, #776]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103d02:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103d0e:	4abe      	ldr	r2, [pc, #760]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103d10:	430b      	orrs	r3, r1
 8103d12:	6553      	str	r3, [r2, #84]	@ 0x54
 8103d14:	e003      	b.n	8103d1e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d26:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8103d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8103d2e:	2300      	movs	r3, #0
 8103d30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8103d34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8103d38:	460b      	mov	r3, r1
 8103d3a:	4313      	orrs	r3, r2
 8103d3c:	d055      	beq.n	8103dea <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8103d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103d46:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103d4a:	d033      	beq.n	8103db4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8103d4c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103d50:	d82c      	bhi.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103d56:	d02f      	beq.n	8103db8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8103d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103d5c:	d826      	bhi.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103d5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103d62:	d02b      	beq.n	8103dbc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8103d64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103d68:	d820      	bhi.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103d6e:	d012      	beq.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8103d70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103d74:	d81a      	bhi.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103d76:	2b00      	cmp	r3, #0
 8103d78:	d022      	beq.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8103d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8103d7e:	d115      	bne.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d84:	3308      	adds	r3, #8
 8103d86:	2100      	movs	r1, #0
 8103d88:	4618      	mov	r0, r3
 8103d8a:	f001 fd27 	bl	81057dc <RCCEx_PLL2_Config>
 8103d8e:	4603      	mov	r3, r0
 8103d90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103d94:	e015      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d9a:	3328      	adds	r3, #40	@ 0x28
 8103d9c:	2102      	movs	r1, #2
 8103d9e:	4618      	mov	r0, r3
 8103da0:	f001 fdce 	bl	8105940 <RCCEx_PLL3_Config>
 8103da4:	4603      	mov	r3, r0
 8103da6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103daa:	e00a      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103dac:	2301      	movs	r3, #1
 8103dae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103db2:	e006      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103db4:	bf00      	nop
 8103db6:	e004      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103db8:	bf00      	nop
 8103dba:	e002      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103dbc:	bf00      	nop
 8103dbe:	e000      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103dc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103dc6:	2b00      	cmp	r3, #0
 8103dc8:	d10b      	bne.n	8103de2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103dca:	4b8f      	ldr	r3, [pc, #572]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103dce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8103dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103dda:	4a8b      	ldr	r2, [pc, #556]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103ddc:	430b      	orrs	r3, r1
 8103dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8103de0:	e003      	b.n	8103dea <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103de2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103de6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103df2:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8103df6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8103dfa:	2300      	movs	r3, #0
 8103dfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8103e00:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8103e04:	460b      	mov	r3, r1
 8103e06:	4313      	orrs	r3, r2
 8103e08:	d055      	beq.n	8103eb6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103e12:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103e16:	d033      	beq.n	8103e80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8103e18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103e1c:	d82c      	bhi.n	8103e78 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103e1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103e22:	d02f      	beq.n	8103e84 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8103e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103e28:	d826      	bhi.n	8103e78 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103e2a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103e2e:	d02b      	beq.n	8103e88 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8103e30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103e34:	d820      	bhi.n	8103e78 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103e3a:	d012      	beq.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8103e3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103e40:	d81a      	bhi.n	8103e78 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103e42:	2b00      	cmp	r3, #0
 8103e44:	d022      	beq.n	8103e8c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8103e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103e4a:	d115      	bne.n	8103e78 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e50:	3308      	adds	r3, #8
 8103e52:	2100      	movs	r1, #0
 8103e54:	4618      	mov	r0, r3
 8103e56:	f001 fcc1 	bl	81057dc <RCCEx_PLL2_Config>
 8103e5a:	4603      	mov	r3, r0
 8103e5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103e60:	e015      	b.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e66:	3328      	adds	r3, #40	@ 0x28
 8103e68:	2102      	movs	r1, #2
 8103e6a:	4618      	mov	r0, r3
 8103e6c:	f001 fd68 	bl	8105940 <RCCEx_PLL3_Config>
 8103e70:	4603      	mov	r3, r0
 8103e72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103e76:	e00a      	b.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103e78:	2301      	movs	r3, #1
 8103e7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103e7e:	e006      	b.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103e80:	bf00      	nop
 8103e82:	e004      	b.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103e84:	bf00      	nop
 8103e86:	e002      	b.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103e88:	bf00      	nop
 8103e8a:	e000      	b.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e92:	2b00      	cmp	r3, #0
 8103e94:	d10b      	bne.n	8103eae <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103e96:	4b5c      	ldr	r3, [pc, #368]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103e9a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8103e9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103ea6:	4a58      	ldr	r2, [pc, #352]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103ea8:	430b      	orrs	r3, r1
 8103eaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8103eac:	e003      	b.n	8103eb6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103eae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103eb2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ebe:	f002 0308 	and.w	r3, r2, #8
 8103ec2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103ec6:	2300      	movs	r3, #0
 8103ec8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8103ecc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8103ed0:	460b      	mov	r3, r1
 8103ed2:	4313      	orrs	r3, r2
 8103ed4:	d01e      	beq.n	8103f14 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103ed6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103ee2:	d10c      	bne.n	8103efe <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ee8:	3328      	adds	r3, #40	@ 0x28
 8103eea:	2102      	movs	r1, #2
 8103eec:	4618      	mov	r0, r3
 8103eee:	f001 fd27 	bl	8105940 <RCCEx_PLL3_Config>
 8103ef2:	4603      	mov	r3, r0
 8103ef4:	2b00      	cmp	r3, #0
 8103ef6:	d002      	beq.n	8103efe <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8103ef8:	2301      	movs	r3, #1
 8103efa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103efe:	4b42      	ldr	r3, [pc, #264]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103f06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103f0e:	4a3e      	ldr	r2, [pc, #248]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103f10:	430b      	orrs	r3, r1
 8103f12:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f1c:	f002 0310 	and.w	r3, r2, #16
 8103f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8103f24:	2300      	movs	r3, #0
 8103f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8103f2a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8103f2e:	460b      	mov	r3, r1
 8103f30:	4313      	orrs	r3, r2
 8103f32:	d01e      	beq.n	8103f72 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8103f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103f40:	d10c      	bne.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f46:	3328      	adds	r3, #40	@ 0x28
 8103f48:	2102      	movs	r1, #2
 8103f4a:	4618      	mov	r0, r3
 8103f4c:	f001 fcf8 	bl	8105940 <RCCEx_PLL3_Config>
 8103f50:	4603      	mov	r3, r0
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d002      	beq.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8103f56:	2301      	movs	r3, #1
 8103f58:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103f60:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103f64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103f6c:	4a26      	ldr	r2, [pc, #152]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103f6e:	430b      	orrs	r3, r1
 8103f70:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f7a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8103f7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103f82:	2300      	movs	r3, #0
 8103f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8103f88:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8103f8c:	460b      	mov	r3, r1
 8103f8e:	4313      	orrs	r3, r2
 8103f90:	d040      	beq.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103f9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103f9e:	d022      	beq.n	8103fe6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8103fa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103fa4:	d81b      	bhi.n	8103fde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103fa6:	2b00      	cmp	r3, #0
 8103fa8:	d003      	beq.n	8103fb2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8103faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103fae:	d00b      	beq.n	8103fc8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8103fb0:	e015      	b.n	8103fde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103fb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fb6:	3308      	adds	r3, #8
 8103fb8:	2100      	movs	r1, #0
 8103fba:	4618      	mov	r0, r3
 8103fbc:	f001 fc0e 	bl	81057dc <RCCEx_PLL2_Config>
 8103fc0:	4603      	mov	r3, r0
 8103fc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103fc6:	e00f      	b.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103fc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fcc:	3328      	adds	r3, #40	@ 0x28
 8103fce:	2102      	movs	r1, #2
 8103fd0:	4618      	mov	r0, r3
 8103fd2:	f001 fcb5 	bl	8105940 <RCCEx_PLL3_Config>
 8103fd6:	4603      	mov	r3, r0
 8103fd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103fdc:	e004      	b.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103fde:	2301      	movs	r3, #1
 8103fe0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103fe4:	e000      	b.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8103fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103fe8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103fec:	2b00      	cmp	r3, #0
 8103fee:	d10d      	bne.n	810400c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103ff0:	4b05      	ldr	r3, [pc, #20]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103ff4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8103ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ffc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104000:	4a01      	ldr	r2, [pc, #4]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104002:	430b      	orrs	r3, r1
 8104004:	6593      	str	r3, [r2, #88]	@ 0x58
 8104006:	e005      	b.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8104008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810400c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104010:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104014:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104018:	e9d3 2300 	ldrd	r2, r3, [r3]
 810401c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8104020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8104022:	2300      	movs	r3, #0
 8104024:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8104026:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810402a:	460b      	mov	r3, r1
 810402c:	4313      	orrs	r3, r2
 810402e:	d03b      	beq.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8104030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104038:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810403c:	d01f      	beq.n	810407e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810403e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104042:	d818      	bhi.n	8104076 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8104044:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104048:	d003      	beq.n	8104052 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810404a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810404e:	d007      	beq.n	8104060 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8104050:	e011      	b.n	8104076 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104052:	4b64      	ldr	r3, [pc, #400]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104056:	4a63      	ldr	r2, [pc, #396]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810405c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810405e:	e00f      	b.n	8104080 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104064:	3328      	adds	r3, #40	@ 0x28
 8104066:	2101      	movs	r1, #1
 8104068:	4618      	mov	r0, r3
 810406a:	f001 fc69 	bl	8105940 <RCCEx_PLL3_Config>
 810406e:	4603      	mov	r3, r0
 8104070:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8104074:	e004      	b.n	8104080 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104076:	2301      	movs	r3, #1
 8104078:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810407c:	e000      	b.n	8104080 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810407e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104080:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104084:	2b00      	cmp	r3, #0
 8104086:	d10b      	bne.n	81040a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104088:	4b56      	ldr	r3, [pc, #344]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810408a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810408c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8104090:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104098:	4a52      	ldr	r2, [pc, #328]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810409a:	430b      	orrs	r3, r1
 810409c:	6553      	str	r3, [r2, #84]	@ 0x54
 810409e:	e003      	b.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81040a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81040a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040b0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81040b4:	673b      	str	r3, [r7, #112]	@ 0x70
 81040b6:	2300      	movs	r3, #0
 81040b8:	677b      	str	r3, [r7, #116]	@ 0x74
 81040ba:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81040be:	460b      	mov	r3, r1
 81040c0:	4313      	orrs	r3, r2
 81040c2:	d031      	beq.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81040c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81040ca:	2b00      	cmp	r3, #0
 81040cc:	d003      	beq.n	81040d6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 81040ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81040d2:	d007      	beq.n	81040e4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 81040d4:	e011      	b.n	81040fa <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81040d6:	4b43      	ldr	r3, [pc, #268]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81040da:	4a42      	ldr	r2, [pc, #264]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81040dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81040e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81040e2:	e00e      	b.n	8104102 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81040e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040e8:	3308      	adds	r3, #8
 81040ea:	2102      	movs	r1, #2
 81040ec:	4618      	mov	r0, r3
 81040ee:	f001 fb75 	bl	81057dc <RCCEx_PLL2_Config>
 81040f2:	4603      	mov	r3, r0
 81040f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81040f8:	e003      	b.n	8104102 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81040fa:	2301      	movs	r3, #1
 81040fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104102:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104106:	2b00      	cmp	r3, #0
 8104108:	d10a      	bne.n	8104120 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810410a:	4b36      	ldr	r3, [pc, #216]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810410c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810410e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8104112:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104118:	4a32      	ldr	r2, [pc, #200]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810411a:	430b      	orrs	r3, r1
 810411c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810411e:	e003      	b.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104120:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104124:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104128:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104130:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8104134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8104136:	2300      	movs	r3, #0
 8104138:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810413a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810413e:	460b      	mov	r3, r1
 8104140:	4313      	orrs	r3, r2
 8104142:	d00c      	beq.n	810415e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104144:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104148:	3328      	adds	r3, #40	@ 0x28
 810414a:	2102      	movs	r1, #2
 810414c:	4618      	mov	r0, r3
 810414e:	f001 fbf7 	bl	8105940 <RCCEx_PLL3_Config>
 8104152:	4603      	mov	r3, r0
 8104154:	2b00      	cmp	r3, #0
 8104156:	d002      	beq.n	810415e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8104158:	2301      	movs	r3, #1
 810415a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810415e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104166:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810416a:	663b      	str	r3, [r7, #96]	@ 0x60
 810416c:	2300      	movs	r3, #0
 810416e:	667b      	str	r3, [r7, #100]	@ 0x64
 8104170:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8104174:	460b      	mov	r3, r1
 8104176:	4313      	orrs	r3, r2
 8104178:	d03a      	beq.n	81041f0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810417a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810417e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104186:	d018      	beq.n	81041ba <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8104188:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810418c:	d811      	bhi.n	81041b2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810418e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104192:	d014      	beq.n	81041be <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8104194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104198:	d80b      	bhi.n	81041b2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810419a:	2b00      	cmp	r3, #0
 810419c:	d011      	beq.n	81041c2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810419e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81041a2:	d106      	bne.n	81041b2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81041a4:	4b0f      	ldr	r3, [pc, #60]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81041a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81041a8:	4a0e      	ldr	r2, [pc, #56]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81041aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81041ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81041b0:	e008      	b.n	81041c4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81041b2:	2301      	movs	r3, #1
 81041b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81041b8:	e004      	b.n	81041c4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81041ba:	bf00      	nop
 81041bc:	e002      	b.n	81041c4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81041be:	bf00      	nop
 81041c0:	e000      	b.n	81041c4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81041c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81041c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81041c8:	2b00      	cmp	r3, #0
 81041ca:	d10d      	bne.n	81041e8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81041cc:	4b05      	ldr	r3, [pc, #20]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81041d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81041dc:	4a01      	ldr	r2, [pc, #4]	@ (81041e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81041de:	430b      	orrs	r3, r1
 81041e0:	6553      	str	r3, [r2, #84]	@ 0x54
 81041e2:	e005      	b.n	81041f0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 81041e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81041ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81041f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041f8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81041fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 81041fe:	2300      	movs	r3, #0
 8104200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8104202:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8104206:	460b      	mov	r3, r1
 8104208:	4313      	orrs	r3, r2
 810420a:	d009      	beq.n	8104220 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810420c:	4baa      	ldr	r3, [pc, #680]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810420e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104210:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8104214:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810421a:	4aa7      	ldr	r2, [pc, #668]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810421c:	430b      	orrs	r3, r1
 810421e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104220:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104228:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810422c:	653b      	str	r3, [r7, #80]	@ 0x50
 810422e:	2300      	movs	r3, #0
 8104230:	657b      	str	r3, [r7, #84]	@ 0x54
 8104232:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8104236:	460b      	mov	r3, r1
 8104238:	4313      	orrs	r3, r2
 810423a:	d00a      	beq.n	8104252 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810423c:	4b9e      	ldr	r3, [pc, #632]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810423e:	691b      	ldr	r3, [r3, #16]
 8104240:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8104244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104248:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810424c:	4a9a      	ldr	r2, [pc, #616]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810424e:	430b      	orrs	r3, r1
 8104250:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104256:	e9d3 2300 	ldrd	r2, r3, [r3]
 810425a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810425e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104260:	2300      	movs	r3, #0
 8104262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104264:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8104268:	460b      	mov	r3, r1
 810426a:	4313      	orrs	r3, r2
 810426c:	d009      	beq.n	8104282 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810426e:	4b92      	ldr	r3, [pc, #584]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104272:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8104276:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810427a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810427c:	4a8e      	ldr	r2, [pc, #568]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810427e:	430b      	orrs	r3, r1
 8104280:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104286:	e9d3 2300 	ldrd	r2, r3, [r3]
 810428a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810428e:	643b      	str	r3, [r7, #64]	@ 0x40
 8104290:	2300      	movs	r3, #0
 8104292:	647b      	str	r3, [r7, #68]	@ 0x44
 8104294:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8104298:	460b      	mov	r3, r1
 810429a:	4313      	orrs	r3, r2
 810429c:	d00e      	beq.n	81042bc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810429e:	4b86      	ldr	r3, [pc, #536]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81042a0:	691b      	ldr	r3, [r3, #16]
 81042a2:	4a85      	ldr	r2, [pc, #532]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81042a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81042a8:	6113      	str	r3, [r2, #16]
 81042aa:	4b83      	ldr	r3, [pc, #524]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81042ac:	6919      	ldr	r1, [r3, #16]
 81042ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81042b6:	4a80      	ldr	r2, [pc, #512]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81042b8:	430b      	orrs	r3, r1
 81042ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81042bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042c4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81042c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 81042ca:	2300      	movs	r3, #0
 81042cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81042ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81042d2:	460b      	mov	r3, r1
 81042d4:	4313      	orrs	r3, r2
 81042d6:	d009      	beq.n	81042ec <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81042d8:	4b77      	ldr	r3, [pc, #476]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81042da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81042dc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81042e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81042e6:	4a74      	ldr	r2, [pc, #464]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81042e8:	430b      	orrs	r3, r1
 81042ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81042ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042f4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81042f8:	633b      	str	r3, [r7, #48]	@ 0x30
 81042fa:	2300      	movs	r3, #0
 81042fc:	637b      	str	r3, [r7, #52]	@ 0x34
 81042fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8104302:	460b      	mov	r3, r1
 8104304:	4313      	orrs	r3, r2
 8104306:	d00a      	beq.n	810431e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104308:	4b6b      	ldr	r3, [pc, #428]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810430a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810430c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8104310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104318:	4a67      	ldr	r2, [pc, #412]	@ (81044b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810431a:	430b      	orrs	r3, r1
 810431c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810431e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104326:	2100      	movs	r1, #0
 8104328:	62b9      	str	r1, [r7, #40]	@ 0x28
 810432a:	f003 0301 	and.w	r3, r3, #1
 810432e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104330:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8104334:	460b      	mov	r3, r1
 8104336:	4313      	orrs	r3, r2
 8104338:	d011      	beq.n	810435e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810433a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810433e:	3308      	adds	r3, #8
 8104340:	2100      	movs	r1, #0
 8104342:	4618      	mov	r0, r3
 8104344:	f001 fa4a 	bl	81057dc <RCCEx_PLL2_Config>
 8104348:	4603      	mov	r3, r0
 810434a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810434e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104352:	2b00      	cmp	r3, #0
 8104354:	d003      	beq.n	810435e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104356:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810435a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810435e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104366:	2100      	movs	r1, #0
 8104368:	6239      	str	r1, [r7, #32]
 810436a:	f003 0302 	and.w	r3, r3, #2
 810436e:	627b      	str	r3, [r7, #36]	@ 0x24
 8104370:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104374:	460b      	mov	r3, r1
 8104376:	4313      	orrs	r3, r2
 8104378:	d011      	beq.n	810439e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810437a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810437e:	3308      	adds	r3, #8
 8104380:	2101      	movs	r1, #1
 8104382:	4618      	mov	r0, r3
 8104384:	f001 fa2a 	bl	81057dc <RCCEx_PLL2_Config>
 8104388:	4603      	mov	r3, r0
 810438a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810438e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104392:	2b00      	cmp	r3, #0
 8104394:	d003      	beq.n	810439e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104396:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810439a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810439e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043a6:	2100      	movs	r1, #0
 81043a8:	61b9      	str	r1, [r7, #24]
 81043aa:	f003 0304 	and.w	r3, r3, #4
 81043ae:	61fb      	str	r3, [r7, #28]
 81043b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81043b4:	460b      	mov	r3, r1
 81043b6:	4313      	orrs	r3, r2
 81043b8:	d011      	beq.n	81043de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81043ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043be:	3308      	adds	r3, #8
 81043c0:	2102      	movs	r1, #2
 81043c2:	4618      	mov	r0, r3
 81043c4:	f001 fa0a 	bl	81057dc <RCCEx_PLL2_Config>
 81043c8:	4603      	mov	r3, r0
 81043ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81043ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043d2:	2b00      	cmp	r3, #0
 81043d4:	d003      	beq.n	81043de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81043de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043e6:	2100      	movs	r1, #0
 81043e8:	6139      	str	r1, [r7, #16]
 81043ea:	f003 0308 	and.w	r3, r3, #8
 81043ee:	617b      	str	r3, [r7, #20]
 81043f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81043f4:	460b      	mov	r3, r1
 81043f6:	4313      	orrs	r3, r2
 81043f8:	d011      	beq.n	810441e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81043fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043fe:	3328      	adds	r3, #40	@ 0x28
 8104400:	2100      	movs	r1, #0
 8104402:	4618      	mov	r0, r3
 8104404:	f001 fa9c 	bl	8105940 <RCCEx_PLL3_Config>
 8104408:	4603      	mov	r3, r0
 810440a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810440e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104412:	2b00      	cmp	r3, #0
 8104414:	d003      	beq.n	810441e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104416:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810441a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810441e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104426:	2100      	movs	r1, #0
 8104428:	60b9      	str	r1, [r7, #8]
 810442a:	f003 0310 	and.w	r3, r3, #16
 810442e:	60fb      	str	r3, [r7, #12]
 8104430:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104434:	460b      	mov	r3, r1
 8104436:	4313      	orrs	r3, r2
 8104438:	d011      	beq.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810443a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810443e:	3328      	adds	r3, #40	@ 0x28
 8104440:	2101      	movs	r1, #1
 8104442:	4618      	mov	r0, r3
 8104444:	f001 fa7c 	bl	8105940 <RCCEx_PLL3_Config>
 8104448:	4603      	mov	r3, r0
 810444a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810444e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104452:	2b00      	cmp	r3, #0
 8104454:	d003      	beq.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104456:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810445a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810445e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104466:	2100      	movs	r1, #0
 8104468:	6039      	str	r1, [r7, #0]
 810446a:	f003 0320 	and.w	r3, r3, #32
 810446e:	607b      	str	r3, [r7, #4]
 8104470:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104474:	460b      	mov	r3, r1
 8104476:	4313      	orrs	r3, r2
 8104478:	d011      	beq.n	810449e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810447a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810447e:	3328      	adds	r3, #40	@ 0x28
 8104480:	2102      	movs	r1, #2
 8104482:	4618      	mov	r0, r3
 8104484:	f001 fa5c 	bl	8105940 <RCCEx_PLL3_Config>
 8104488:	4603      	mov	r3, r0
 810448a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810448e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104492:	2b00      	cmp	r3, #0
 8104494:	d003      	beq.n	810449e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104496:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810449a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 810449e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 81044a2:	2b00      	cmp	r3, #0
 81044a4:	d101      	bne.n	81044aa <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 81044a6:	2300      	movs	r3, #0
 81044a8:	e000      	b.n	81044ac <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81044aa:	2301      	movs	r3, #1
}
 81044ac:	4618      	mov	r0, r3
 81044ae:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 81044b2:	46bd      	mov	sp, r7
 81044b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81044b8:	58024400 	.word	0x58024400

081044bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 81044bc:	b580      	push	{r7, lr}
 81044be:	b090      	sub	sp, #64	@ 0x40
 81044c0:	af00      	add	r7, sp, #0
 81044c2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81044c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81044ca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 81044ce:	430b      	orrs	r3, r1
 81044d0:	f040 8094 	bne.w	81045fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 81044d4:	4b9e      	ldr	r3, [pc, #632]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81044d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81044d8:	f003 0307 	and.w	r3, r3, #7
 81044dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81044e0:	2b04      	cmp	r3, #4
 81044e2:	f200 8087 	bhi.w	81045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81044e6:	a201      	add	r2, pc, #4	@ (adr r2, 81044ec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81044ec:	08104501 	.word	0x08104501
 81044f0:	08104529 	.word	0x08104529
 81044f4:	08104551 	.word	0x08104551
 81044f8:	081045ed 	.word	0x081045ed
 81044fc:	08104579 	.word	0x08104579
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104500:	4b93      	ldr	r3, [pc, #588]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104508:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810450c:	d108      	bne.n	8104520 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810450e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104512:	4618      	mov	r0, r3
 8104514:	f001 f810 	bl	8105538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810451a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810451c:	f000 bd45 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104520:	2300      	movs	r3, #0
 8104522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104524:	f000 bd41 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104528:	4b89      	ldr	r3, [pc, #548]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104530:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104534:	d108      	bne.n	8104548 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104536:	f107 0318 	add.w	r3, r7, #24
 810453a:	4618      	mov	r0, r3
 810453c:	f000 fd54 	bl	8104fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104540:	69bb      	ldr	r3, [r7, #24]
 8104542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104544:	f000 bd31 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104548:	2300      	movs	r3, #0
 810454a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810454c:	f000 bd2d 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104550:	4b7f      	ldr	r3, [pc, #508]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104552:	681b      	ldr	r3, [r3, #0]
 8104554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810455c:	d108      	bne.n	8104570 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810455e:	f107 030c 	add.w	r3, r7, #12
 8104562:	4618      	mov	r0, r3
 8104564:	f000 fe94 	bl	8105290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104568:	68fb      	ldr	r3, [r7, #12]
 810456a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810456c:	f000 bd1d 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104570:	2300      	movs	r3, #0
 8104572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104574:	f000 bd19 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104578:	4b75      	ldr	r3, [pc, #468]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810457a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810457c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104580:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104582:	4b73      	ldr	r3, [pc, #460]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104584:	681b      	ldr	r3, [r3, #0]
 8104586:	f003 0304 	and.w	r3, r3, #4
 810458a:	2b04      	cmp	r3, #4
 810458c:	d10c      	bne.n	81045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810458e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104590:	2b00      	cmp	r3, #0
 8104592:	d109      	bne.n	81045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104594:	4b6e      	ldr	r3, [pc, #440]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	08db      	lsrs	r3, r3, #3
 810459a:	f003 0303 	and.w	r3, r3, #3
 810459e:	4a6d      	ldr	r2, [pc, #436]	@ (8104754 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81045a0:	fa22 f303 	lsr.w	r3, r2, r3
 81045a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81045a6:	e01f      	b.n	81045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81045a8:	4b69      	ldr	r3, [pc, #420]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81045aa:	681b      	ldr	r3, [r3, #0]
 81045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81045b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81045b4:	d106      	bne.n	81045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81045b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81045b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81045bc:	d102      	bne.n	81045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81045be:	4b66      	ldr	r3, [pc, #408]	@ (8104758 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81045c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81045c2:	e011      	b.n	81045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81045c4:	4b62      	ldr	r3, [pc, #392]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81045c6:	681b      	ldr	r3, [r3, #0]
 81045c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81045cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81045d0:	d106      	bne.n	81045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 81045d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81045d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81045d8:	d102      	bne.n	81045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81045da:	4b60      	ldr	r3, [pc, #384]	@ (810475c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81045dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81045de:	e003      	b.n	81045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81045e0:	2300      	movs	r3, #0
 81045e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81045e4:	f000 bce1 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81045e8:	f000 bcdf 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81045ec:	4b5c      	ldr	r3, [pc, #368]	@ (8104760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81045ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045f0:	f000 bcdb 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81045f4:	2300      	movs	r3, #0
 81045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045f8:	f000 bcd7 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81045fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104600:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8104604:	430b      	orrs	r3, r1
 8104606:	f040 80ad 	bne.w	8104764 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810460a:	4b51      	ldr	r3, [pc, #324]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810460c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810460e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8104612:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810461a:	d056      	beq.n	81046ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 810461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810461e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104622:	f200 8090 	bhi.w	8104746 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104628:	2bc0      	cmp	r3, #192	@ 0xc0
 810462a:	f000 8088 	beq.w	810473e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810462e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104630:	2bc0      	cmp	r3, #192	@ 0xc0
 8104632:	f200 8088 	bhi.w	8104746 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104638:	2b80      	cmp	r3, #128	@ 0x80
 810463a:	d032      	beq.n	81046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 810463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810463e:	2b80      	cmp	r3, #128	@ 0x80
 8104640:	f200 8081 	bhi.w	8104746 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104646:	2b00      	cmp	r3, #0
 8104648:	d003      	beq.n	8104652 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810464c:	2b40      	cmp	r3, #64	@ 0x40
 810464e:	d014      	beq.n	810467a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8104650:	e079      	b.n	8104746 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104652:	4b3f      	ldr	r3, [pc, #252]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104654:	681b      	ldr	r3, [r3, #0]
 8104656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810465a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810465e:	d108      	bne.n	8104672 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104664:	4618      	mov	r0, r3
 8104666:	f000 ff67 	bl	8105538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810466a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810466c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810466e:	f000 bc9c 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104672:	2300      	movs	r3, #0
 8104674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104676:	f000 bc98 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810467a:	4b35      	ldr	r3, [pc, #212]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810467c:	681b      	ldr	r3, [r3, #0]
 810467e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104682:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104686:	d108      	bne.n	810469a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104688:	f107 0318 	add.w	r3, r7, #24
 810468c:	4618      	mov	r0, r3
 810468e:	f000 fcab 	bl	8104fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104692:	69bb      	ldr	r3, [r7, #24]
 8104694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104696:	f000 bc88 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810469a:	2300      	movs	r3, #0
 810469c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810469e:	f000 bc84 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81046a2:	4b2b      	ldr	r3, [pc, #172]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81046a4:	681b      	ldr	r3, [r3, #0]
 81046a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81046aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81046ae:	d108      	bne.n	81046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81046b0:	f107 030c 	add.w	r3, r7, #12
 81046b4:	4618      	mov	r0, r3
 81046b6:	f000 fdeb 	bl	8105290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81046ba:	68fb      	ldr	r3, [r7, #12]
 81046bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046be:	f000 bc74 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046c2:	2300      	movs	r3, #0
 81046c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81046c6:	f000 bc70 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81046ca:	4b21      	ldr	r3, [pc, #132]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81046cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81046ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81046d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81046d4:	4b1e      	ldr	r3, [pc, #120]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	f003 0304 	and.w	r3, r3, #4
 81046dc:	2b04      	cmp	r3, #4
 81046de:	d10c      	bne.n	81046fa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81046e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81046e2:	2b00      	cmp	r3, #0
 81046e4:	d109      	bne.n	81046fa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81046e6:	4b1a      	ldr	r3, [pc, #104]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81046e8:	681b      	ldr	r3, [r3, #0]
 81046ea:	08db      	lsrs	r3, r3, #3
 81046ec:	f003 0303 	and.w	r3, r3, #3
 81046f0:	4a18      	ldr	r2, [pc, #96]	@ (8104754 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81046f2:	fa22 f303 	lsr.w	r3, r2, r3
 81046f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81046f8:	e01f      	b.n	810473a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81046fa:	4b15      	ldr	r3, [pc, #84]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104706:	d106      	bne.n	8104716 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8104708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810470a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810470e:	d102      	bne.n	8104716 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104710:	4b11      	ldr	r3, [pc, #68]	@ (8104758 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104714:	e011      	b.n	810473a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104716:	4b0e      	ldr	r3, [pc, #56]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104718:	681b      	ldr	r3, [r3, #0]
 810471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810471e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104722:	d106      	bne.n	8104732 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8104724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810472a:	d102      	bne.n	8104732 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810472c:	4b0b      	ldr	r3, [pc, #44]	@ (810475c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104730:	e003      	b.n	810473a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104732:	2300      	movs	r3, #0
 8104734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104736:	f000 bc38 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810473a:	f000 bc36 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810473e:	4b08      	ldr	r3, [pc, #32]	@ (8104760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104742:	f000 bc32 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104746:	2300      	movs	r3, #0
 8104748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810474a:	f000 bc2e 	b.w	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810474e:	bf00      	nop
 8104750:	58024400 	.word	0x58024400
 8104754:	03d09000 	.word	0x03d09000
 8104758:	003d0900 	.word	0x003d0900
 810475c:	017d7840 	.word	0x017d7840
 8104760:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104768:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 810476c:	430b      	orrs	r3, r1
 810476e:	f040 809c 	bne.w	81048aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8104772:	4b9e      	ldr	r3, [pc, #632]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104776:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 810477a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810477e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104782:	d054      	beq.n	810482e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8104784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104786:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810478a:	f200 808b 	bhi.w	81048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104790:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104794:	f000 8083 	beq.w	810489e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8104798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810479a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810479e:	f200 8081 	bhi.w	81048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81047a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81047a8:	d02f      	beq.n	810480a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81047aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81047ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81047b0:	d878      	bhi.n	81048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81047b4:	2b00      	cmp	r3, #0
 81047b6:	d004      	beq.n	81047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 81047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81047ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81047be:	d012      	beq.n	81047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 81047c0:	e070      	b.n	81048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81047c2:	4b8a      	ldr	r3, [pc, #552]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81047c4:	681b      	ldr	r3, [r3, #0]
 81047c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81047ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81047ce:	d107      	bne.n	81047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81047d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81047d4:	4618      	mov	r0, r3
 81047d6:	f000 feaf 	bl	8105538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81047dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81047de:	e3e4      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81047e0:	2300      	movs	r3, #0
 81047e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81047e4:	e3e1      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81047e6:	4b81      	ldr	r3, [pc, #516]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81047e8:	681b      	ldr	r3, [r3, #0]
 81047ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81047ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81047f2:	d107      	bne.n	8104804 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81047f4:	f107 0318 	add.w	r3, r7, #24
 81047f8:	4618      	mov	r0, r3
 81047fa:	f000 fbf5 	bl	8104fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81047fe:	69bb      	ldr	r3, [r7, #24]
 8104800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104802:	e3d2      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104804:	2300      	movs	r3, #0
 8104806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104808:	e3cf      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810480a:	4b78      	ldr	r3, [pc, #480]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810480c:	681b      	ldr	r3, [r3, #0]
 810480e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104816:	d107      	bne.n	8104828 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104818:	f107 030c 	add.w	r3, r7, #12
 810481c:	4618      	mov	r0, r3
 810481e:	f000 fd37 	bl	8105290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104822:	68fb      	ldr	r3, [r7, #12]
 8104824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104826:	e3c0      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104828:	2300      	movs	r3, #0
 810482a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810482c:	e3bd      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810482e:	4b6f      	ldr	r3, [pc, #444]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104832:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104836:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104838:	4b6c      	ldr	r3, [pc, #432]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	f003 0304 	and.w	r3, r3, #4
 8104840:	2b04      	cmp	r3, #4
 8104842:	d10c      	bne.n	810485e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8104844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104846:	2b00      	cmp	r3, #0
 8104848:	d109      	bne.n	810485e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810484a:	4b68      	ldr	r3, [pc, #416]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810484c:	681b      	ldr	r3, [r3, #0]
 810484e:	08db      	lsrs	r3, r3, #3
 8104850:	f003 0303 	and.w	r3, r3, #3
 8104854:	4a66      	ldr	r2, [pc, #408]	@ (81049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104856:	fa22 f303 	lsr.w	r3, r2, r3
 810485a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810485c:	e01e      	b.n	810489c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810485e:	4b63      	ldr	r3, [pc, #396]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104860:	681b      	ldr	r3, [r3, #0]
 8104862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810486a:	d106      	bne.n	810487a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 810486c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810486e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104872:	d102      	bne.n	810487a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104874:	4b5f      	ldr	r3, [pc, #380]	@ (81049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104878:	e010      	b.n	810489c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810487a:	4b5c      	ldr	r3, [pc, #368]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810487c:	681b      	ldr	r3, [r3, #0]
 810487e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104886:	d106      	bne.n	8104896 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8104888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810488a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810488e:	d102      	bne.n	8104896 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104890:	4b59      	ldr	r3, [pc, #356]	@ (81049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104894:	e002      	b.n	810489c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104896:	2300      	movs	r3, #0
 8104898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810489a:	e386      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810489c:	e385      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810489e:	4b57      	ldr	r3, [pc, #348]	@ (81049fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81048a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81048a2:	e382      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81048a4:	2300      	movs	r3, #0
 81048a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81048a8:	e37f      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81048aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 81048ae:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 81048b2:	430b      	orrs	r3, r1
 81048b4:	f040 80a7 	bne.w	8104a06 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 81048b8:	4b4c      	ldr	r3, [pc, #304]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81048ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81048bc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 81048c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81048c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81048c8:	d055      	beq.n	8104976 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 81048ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81048cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81048d0:	f200 8096 	bhi.w	8104a00 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81048d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81048da:	f000 8084 	beq.w	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 81048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81048e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81048e4:	f200 808c 	bhi.w	8104a00 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81048ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81048ee:	d030      	beq.n	8104952 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81048f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81048f6:	f200 8083 	bhi.w	8104a00 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81048fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81048fc:	2b00      	cmp	r3, #0
 81048fe:	d004      	beq.n	810490a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8104900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104906:	d012      	beq.n	810492e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8104908:	e07a      	b.n	8104a00 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810490a:	4b38      	ldr	r3, [pc, #224]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810490c:	681b      	ldr	r3, [r3, #0]
 810490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104912:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104916:	d107      	bne.n	8104928 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810491c:	4618      	mov	r0, r3
 810491e:	f000 fe0b 	bl	8105538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104926:	e340      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104928:	2300      	movs	r3, #0
 810492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810492c:	e33d      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810492e:	4b2f      	ldr	r3, [pc, #188]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104930:	681b      	ldr	r3, [r3, #0]
 8104932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104936:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810493a:	d107      	bne.n	810494c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810493c:	f107 0318 	add.w	r3, r7, #24
 8104940:	4618      	mov	r0, r3
 8104942:	f000 fb51 	bl	8104fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104946:	69bb      	ldr	r3, [r7, #24]
 8104948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810494a:	e32e      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810494c:	2300      	movs	r3, #0
 810494e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104950:	e32b      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104952:	4b26      	ldr	r3, [pc, #152]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810495a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810495e:	d107      	bne.n	8104970 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104960:	f107 030c 	add.w	r3, r7, #12
 8104964:	4618      	mov	r0, r3
 8104966:	f000 fc93 	bl	8105290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810496a:	68fb      	ldr	r3, [r7, #12]
 810496c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810496e:	e31c      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104970:	2300      	movs	r3, #0
 8104972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104974:	e319      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104976:	4b1d      	ldr	r3, [pc, #116]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810497a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810497e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104980:	4b1a      	ldr	r3, [pc, #104]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104982:	681b      	ldr	r3, [r3, #0]
 8104984:	f003 0304 	and.w	r3, r3, #4
 8104988:	2b04      	cmp	r3, #4
 810498a:	d10c      	bne.n	81049a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810498c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810498e:	2b00      	cmp	r3, #0
 8104990:	d109      	bne.n	81049a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104992:	4b16      	ldr	r3, [pc, #88]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104994:	681b      	ldr	r3, [r3, #0]
 8104996:	08db      	lsrs	r3, r3, #3
 8104998:	f003 0303 	and.w	r3, r3, #3
 810499c:	4a14      	ldr	r2, [pc, #80]	@ (81049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810499e:	fa22 f303 	lsr.w	r3, r2, r3
 81049a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81049a4:	e01e      	b.n	81049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81049a6:	4b11      	ldr	r3, [pc, #68]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81049a8:	681b      	ldr	r3, [r3, #0]
 81049aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81049ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81049b2:	d106      	bne.n	81049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 81049b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81049b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81049ba:	d102      	bne.n	81049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81049bc:	4b0d      	ldr	r3, [pc, #52]	@ (81049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81049be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81049c0:	e010      	b.n	81049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81049c2:	4b0a      	ldr	r3, [pc, #40]	@ (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81049c4:	681b      	ldr	r3, [r3, #0]
 81049c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81049ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81049ce:	d106      	bne.n	81049de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 81049d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81049d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81049d6:	d102      	bne.n	81049de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81049d8:	4b07      	ldr	r3, [pc, #28]	@ (81049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81049da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81049dc:	e002      	b.n	81049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81049de:	2300      	movs	r3, #0
 81049e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81049e2:	e2e2      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81049e4:	e2e1      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81049e6:	4b05      	ldr	r3, [pc, #20]	@ (81049fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81049e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81049ea:	e2de      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81049ec:	58024400 	.word	0x58024400
 81049f0:	03d09000 	.word	0x03d09000
 81049f4:	003d0900 	.word	0x003d0900
 81049f8:	017d7840 	.word	0x017d7840
 81049fc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8104a00:	2300      	movs	r3, #0
 8104a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a04:	e2d1      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8104a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104a0a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8104a0e:	430b      	orrs	r3, r1
 8104a10:	f040 809c 	bne.w	8104b4c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8104a14:	4b93      	ldr	r3, [pc, #588]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104a18:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8104a1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104a20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104a24:	d054      	beq.n	8104ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8104a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104a28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104a2c:	f200 808b 	bhi.w	8104b46 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104a32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104a36:	f000 8083 	beq.w	8104b40 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8104a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104a3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104a40:	f200 8081 	bhi.w	8104b46 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104a4a:	d02f      	beq.n	8104aac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8104a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104a52:	d878      	bhi.n	8104b46 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104a56:	2b00      	cmp	r3, #0
 8104a58:	d004      	beq.n	8104a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8104a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104a60:	d012      	beq.n	8104a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8104a62:	e070      	b.n	8104b46 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104a64:	4b7f      	ldr	r3, [pc, #508]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a66:	681b      	ldr	r3, [r3, #0]
 8104a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104a6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104a70:	d107      	bne.n	8104a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104a76:	4618      	mov	r0, r3
 8104a78:	f000 fd5e 	bl	8105538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a80:	e293      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a82:	2300      	movs	r3, #0
 8104a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a86:	e290      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104a88:	4b76      	ldr	r3, [pc, #472]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104a90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104a94:	d107      	bne.n	8104aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104a96:	f107 0318 	add.w	r3, r7, #24
 8104a9a:	4618      	mov	r0, r3
 8104a9c:	f000 faa4 	bl	8104fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104aa0:	69bb      	ldr	r3, [r7, #24]
 8104aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104aa4:	e281      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104aa6:	2300      	movs	r3, #0
 8104aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104aaa:	e27e      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104aac:	4b6d      	ldr	r3, [pc, #436]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104aae:	681b      	ldr	r3, [r3, #0]
 8104ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104ab8:	d107      	bne.n	8104aca <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104aba:	f107 030c 	add.w	r3, r7, #12
 8104abe:	4618      	mov	r0, r3
 8104ac0:	f000 fbe6 	bl	8105290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104ac4:	68fb      	ldr	r3, [r7, #12]
 8104ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ac8:	e26f      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104aca:	2300      	movs	r3, #0
 8104acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ace:	e26c      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104ad0:	4b64      	ldr	r3, [pc, #400]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104ad4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104ad8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104ada:	4b62      	ldr	r3, [pc, #392]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104adc:	681b      	ldr	r3, [r3, #0]
 8104ade:	f003 0304 	and.w	r3, r3, #4
 8104ae2:	2b04      	cmp	r3, #4
 8104ae4:	d10c      	bne.n	8104b00 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8104ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104ae8:	2b00      	cmp	r3, #0
 8104aea:	d109      	bne.n	8104b00 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104aec:	4b5d      	ldr	r3, [pc, #372]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104aee:	681b      	ldr	r3, [r3, #0]
 8104af0:	08db      	lsrs	r3, r3, #3
 8104af2:	f003 0303 	and.w	r3, r3, #3
 8104af6:	4a5c      	ldr	r2, [pc, #368]	@ (8104c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104af8:	fa22 f303 	lsr.w	r3, r2, r3
 8104afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104afe:	e01e      	b.n	8104b3e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104b00:	4b58      	ldr	r3, [pc, #352]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104b08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104b0c:	d106      	bne.n	8104b1c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8104b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104b14:	d102      	bne.n	8104b1c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104b16:	4b55      	ldr	r3, [pc, #340]	@ (8104c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104b1a:	e010      	b.n	8104b3e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104b1c:	4b51      	ldr	r3, [pc, #324]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b1e:	681b      	ldr	r3, [r3, #0]
 8104b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104b24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104b28:	d106      	bne.n	8104b38 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8104b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104b30:	d102      	bne.n	8104b38 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104b32:	4b4f      	ldr	r3, [pc, #316]	@ (8104c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104b36:	e002      	b.n	8104b3e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104b38:	2300      	movs	r3, #0
 8104b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104b3c:	e235      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104b3e:	e234      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104b40:	4b4c      	ldr	r3, [pc, #304]	@ (8104c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8104b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b44:	e231      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104b46:	2300      	movs	r3, #0
 8104b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b4a:	e22e      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8104b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104b50:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8104b54:	430b      	orrs	r3, r1
 8104b56:	f040 808f 	bne.w	8104c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8104b5a:	4b42      	ldr	r3, [pc, #264]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104b5e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8104b62:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8104b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104b6a:	d06b      	beq.n	8104c44 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8104b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104b72:	d874      	bhi.n	8104c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104b7a:	d056      	beq.n	8104c2a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8104b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104b82:	d86c      	bhi.n	8104c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104b8a:	d03b      	beq.n	8104c04 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8104b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104b92:	d864      	bhi.n	8104c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104b9a:	d021      	beq.n	8104be0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8104b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104ba2:	d85c      	bhi.n	8104c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ba6:	2b00      	cmp	r3, #0
 8104ba8:	d004      	beq.n	8104bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8104baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104bb0:	d004      	beq.n	8104bbc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8104bb2:	e054      	b.n	8104c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8104bb4:	f7fe f9e0 	bl	8102f78 <HAL_RCC_GetPCLK1Freq>
 8104bb8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104bba:	e1f6      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104bbc:	4b29      	ldr	r3, [pc, #164]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104bbe:	681b      	ldr	r3, [r3, #0]
 8104bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104bc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104bc8:	d107      	bne.n	8104bda <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104bca:	f107 0318 	add.w	r3, r7, #24
 8104bce:	4618      	mov	r0, r3
 8104bd0:	f000 fa0a 	bl	8104fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104bd4:	69fb      	ldr	r3, [r7, #28]
 8104bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104bd8:	e1e7      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104bda:	2300      	movs	r3, #0
 8104bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104bde:	e1e4      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104be0:	4b20      	ldr	r3, [pc, #128]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104bec:	d107      	bne.n	8104bfe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104bee:	f107 030c 	add.w	r3, r7, #12
 8104bf2:	4618      	mov	r0, r3
 8104bf4:	f000 fb4c 	bl	8105290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104bf8:	693b      	ldr	r3, [r7, #16]
 8104bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104bfc:	e1d5      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104bfe:	2300      	movs	r3, #0
 8104c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c02:	e1d2      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104c04:	4b17      	ldr	r3, [pc, #92]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c06:	681b      	ldr	r3, [r3, #0]
 8104c08:	f003 0304 	and.w	r3, r3, #4
 8104c0c:	2b04      	cmp	r3, #4
 8104c0e:	d109      	bne.n	8104c24 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104c10:	4b14      	ldr	r3, [pc, #80]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c12:	681b      	ldr	r3, [r3, #0]
 8104c14:	08db      	lsrs	r3, r3, #3
 8104c16:	f003 0303 	and.w	r3, r3, #3
 8104c1a:	4a13      	ldr	r2, [pc, #76]	@ (8104c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8104c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c22:	e1c2      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c24:	2300      	movs	r3, #0
 8104c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c28:	e1bf      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8104c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c2c:	681b      	ldr	r3, [r3, #0]
 8104c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104c36:	d102      	bne.n	8104c3e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8104c38:	4b0c      	ldr	r3, [pc, #48]	@ (8104c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c3c:	e1b5      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c3e:	2300      	movs	r3, #0
 8104c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c42:	e1b2      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104c44:	4b07      	ldr	r3, [pc, #28]	@ (8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c46:	681b      	ldr	r3, [r3, #0]
 8104c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104c50:	d102      	bne.n	8104c58 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8104c52:	4b07      	ldr	r3, [pc, #28]	@ (8104c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c56:	e1a8      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c58:	2300      	movs	r3, #0
 8104c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c5c:	e1a5      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104c5e:	2300      	movs	r3, #0
 8104c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c62:	e1a2      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104c64:	58024400 	.word	0x58024400
 8104c68:	03d09000 	.word	0x03d09000
 8104c6c:	003d0900 	.word	0x003d0900
 8104c70:	017d7840 	.word	0x017d7840
 8104c74:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8104c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104c7c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8104c80:	430b      	orrs	r3, r1
 8104c82:	d173      	bne.n	8104d6c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8104c84:	4b9c      	ldr	r3, [pc, #624]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104c88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104c8c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104c90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104c94:	d02f      	beq.n	8104cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8104c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104c98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104c9c:	d863      	bhi.n	8104d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8104c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ca0:	2b00      	cmp	r3, #0
 8104ca2:	d004      	beq.n	8104cae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8104ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104caa:	d012      	beq.n	8104cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8104cac:	e05b      	b.n	8104d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104cae:	4b92      	ldr	r3, [pc, #584]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104cb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104cba:	d107      	bne.n	8104ccc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104cbc:	f107 0318 	add.w	r3, r7, #24
 8104cc0:	4618      	mov	r0, r3
 8104cc2:	f000 f991 	bl	8104fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104cc6:	69bb      	ldr	r3, [r7, #24]
 8104cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104cca:	e16e      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ccc:	2300      	movs	r3, #0
 8104cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104cd0:	e16b      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104cd2:	4b89      	ldr	r3, [pc, #548]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104cd4:	681b      	ldr	r3, [r3, #0]
 8104cd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104cde:	d107      	bne.n	8104cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104ce0:	f107 030c 	add.w	r3, r7, #12
 8104ce4:	4618      	mov	r0, r3
 8104ce6:	f000 fad3 	bl	8105290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8104cea:	697b      	ldr	r3, [r7, #20]
 8104cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104cee:	e15c      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104cf0:	2300      	movs	r3, #0
 8104cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104cf4:	e159      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104cf6:	4b80      	ldr	r3, [pc, #512]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104cfa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104cfe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104d00:	4b7d      	ldr	r3, [pc, #500]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104d02:	681b      	ldr	r3, [r3, #0]
 8104d04:	f003 0304 	and.w	r3, r3, #4
 8104d08:	2b04      	cmp	r3, #4
 8104d0a:	d10c      	bne.n	8104d26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8104d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104d0e:	2b00      	cmp	r3, #0
 8104d10:	d109      	bne.n	8104d26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104d12:	4b79      	ldr	r3, [pc, #484]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104d14:	681b      	ldr	r3, [r3, #0]
 8104d16:	08db      	lsrs	r3, r3, #3
 8104d18:	f003 0303 	and.w	r3, r3, #3
 8104d1c:	4a77      	ldr	r2, [pc, #476]	@ (8104efc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8104d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104d24:	e01e      	b.n	8104d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104d26:	4b74      	ldr	r3, [pc, #464]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104d28:	681b      	ldr	r3, [r3, #0]
 8104d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104d32:	d106      	bne.n	8104d42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8104d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104d36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104d3a:	d102      	bne.n	8104d42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104d3c:	4b70      	ldr	r3, [pc, #448]	@ (8104f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104d40:	e010      	b.n	8104d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104d42:	4b6d      	ldr	r3, [pc, #436]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104d44:	681b      	ldr	r3, [r3, #0]
 8104d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104d4e:	d106      	bne.n	8104d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8104d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104d56:	d102      	bne.n	8104d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104d58:	4b6a      	ldr	r3, [pc, #424]	@ (8104f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104d5c:	e002      	b.n	8104d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104d5e:	2300      	movs	r3, #0
 8104d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104d62:	e122      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104d64:	e121      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104d66:	2300      	movs	r3, #0
 8104d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d6a:	e11e      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8104d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104d70:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8104d74:	430b      	orrs	r3, r1
 8104d76:	d133      	bne.n	8104de0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8104d78:	4b5f      	ldr	r3, [pc, #380]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104d80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d84:	2b00      	cmp	r3, #0
 8104d86:	d004      	beq.n	8104d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8104d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104d8e:	d012      	beq.n	8104db6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8104d90:	e023      	b.n	8104dda <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104d92:	4b59      	ldr	r3, [pc, #356]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104d94:	681b      	ldr	r3, [r3, #0]
 8104d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104d9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104d9e:	d107      	bne.n	8104db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104da4:	4618      	mov	r0, r3
 8104da6:	f000 fbc7 	bl	8105538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dae:	e0fc      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104db0:	2300      	movs	r3, #0
 8104db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104db4:	e0f9      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104db6:	4b50      	ldr	r3, [pc, #320]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104db8:	681b      	ldr	r3, [r3, #0]
 8104dba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104dbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104dc2:	d107      	bne.n	8104dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104dc4:	f107 0318 	add.w	r3, r7, #24
 8104dc8:	4618      	mov	r0, r3
 8104dca:	f000 f90d 	bl	8104fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8104dce:	6a3b      	ldr	r3, [r7, #32]
 8104dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dd2:	e0ea      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104dd4:	2300      	movs	r3, #0
 8104dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104dd8:	e0e7      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104dda:	2300      	movs	r3, #0
 8104ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104dde:	e0e4      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8104de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104de4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8104de8:	430b      	orrs	r3, r1
 8104dea:	f040 808d 	bne.w	8104f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8104dee:	4b42      	ldr	r3, [pc, #264]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104df2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8104df6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104dfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104dfe:	d06b      	beq.n	8104ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8104e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104e06:	d874      	bhi.n	8104ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104e0e:	d056      	beq.n	8104ebe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8104e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104e16:	d86c      	bhi.n	8104ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104e1e:	d03b      	beq.n	8104e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8104e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104e26:	d864      	bhi.n	8104ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104e2e:	d021      	beq.n	8104e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8104e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104e36:	d85c      	bhi.n	8104ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e3a:	2b00      	cmp	r3, #0
 8104e3c:	d004      	beq.n	8104e48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8104e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104e44:	d004      	beq.n	8104e50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8104e46:	e054      	b.n	8104ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8104e48:	f000 f8b8 	bl	8104fbc <HAL_RCCEx_GetD3PCLK1Freq>
 8104e4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104e4e:	e0ac      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104e50:	4b29      	ldr	r3, [pc, #164]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e52:	681b      	ldr	r3, [r3, #0]
 8104e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104e58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104e5c:	d107      	bne.n	8104e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104e5e:	f107 0318 	add.w	r3, r7, #24
 8104e62:	4618      	mov	r0, r3
 8104e64:	f000 f8c0 	bl	8104fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104e68:	69fb      	ldr	r3, [r7, #28]
 8104e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e6c:	e09d      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e6e:	2300      	movs	r3, #0
 8104e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e72:	e09a      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104e74:	4b20      	ldr	r3, [pc, #128]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104e80:	d107      	bne.n	8104e92 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104e82:	f107 030c 	add.w	r3, r7, #12
 8104e86:	4618      	mov	r0, r3
 8104e88:	f000 fa02 	bl	8105290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104e8c:	693b      	ldr	r3, [r7, #16]
 8104e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e90:	e08b      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e92:	2300      	movs	r3, #0
 8104e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e96:	e088      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104e98:	4b17      	ldr	r3, [pc, #92]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	f003 0304 	and.w	r3, r3, #4
 8104ea0:	2b04      	cmp	r3, #4
 8104ea2:	d109      	bne.n	8104eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104ea4:	4b14      	ldr	r3, [pc, #80]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	08db      	lsrs	r3, r3, #3
 8104eaa:	f003 0303 	and.w	r3, r3, #3
 8104eae:	4a13      	ldr	r2, [pc, #76]	@ (8104efc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8104eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104eb6:	e078      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104eb8:	2300      	movs	r3, #0
 8104eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ebc:	e075      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8104ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ec0:	681b      	ldr	r3, [r3, #0]
 8104ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104eca:	d102      	bne.n	8104ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8104ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8104f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ed0:	e06b      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ed2:	2300      	movs	r3, #0
 8104ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ed6:	e068      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104ed8:	4b07      	ldr	r3, [pc, #28]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104eda:	681b      	ldr	r3, [r3, #0]
 8104edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104ee4:	d102      	bne.n	8104eec <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8104ee6:	4b07      	ldr	r3, [pc, #28]	@ (8104f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104eea:	e05e      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104eec:	2300      	movs	r3, #0
 8104eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ef0:	e05b      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8104ef2:	2300      	movs	r3, #0
 8104ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ef6:	e058      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104ef8:	58024400 	.word	0x58024400
 8104efc:	03d09000 	.word	0x03d09000
 8104f00:	003d0900 	.word	0x003d0900
 8104f04:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8104f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104f0c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8104f10:	430b      	orrs	r3, r1
 8104f12:	d148      	bne.n	8104fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8104f14:	4b27      	ldr	r3, [pc, #156]	@ (8104fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104f18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104f1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f24:	d02a      	beq.n	8104f7c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8104f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f2c:	d838      	bhi.n	8104fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8104f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104f30:	2b00      	cmp	r3, #0
 8104f32:	d004      	beq.n	8104f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8104f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104f3a:	d00d      	beq.n	8104f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8104f3c:	e030      	b.n	8104fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8104fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104f40:	681b      	ldr	r3, [r3, #0]
 8104f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104f46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104f4a:	d102      	bne.n	8104f52 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8104f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8104f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f50:	e02b      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f52:	2300      	movs	r3, #0
 8104f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f56:	e028      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104f58:	4b16      	ldr	r3, [pc, #88]	@ (8104fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104f5a:	681b      	ldr	r3, [r3, #0]
 8104f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104f60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104f64:	d107      	bne.n	8104f76 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104f6a:	4618      	mov	r0, r3
 8104f6c:	f000 fae4 	bl	8105538 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f74:	e019      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f76:	2300      	movs	r3, #0
 8104f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f7a:	e016      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8104fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104f7e:	681b      	ldr	r3, [r3, #0]
 8104f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104f84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104f88:	d107      	bne.n	8104f9a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104f8a:	f107 0318 	add.w	r3, r7, #24
 8104f8e:	4618      	mov	r0, r3
 8104f90:	f000 f82a 	bl	8104fe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104f94:	69fb      	ldr	r3, [r7, #28]
 8104f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f98:	e007      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f9a:	2300      	movs	r3, #0
 8104f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f9e:	e004      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104fa0:	2300      	movs	r3, #0
 8104fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104fa4:	e001      	b.n	8104faa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8104fa6:	2300      	movs	r3, #0
 8104fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8104faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8104fac:	4618      	mov	r0, r3
 8104fae:	3740      	adds	r7, #64	@ 0x40
 8104fb0:	46bd      	mov	sp, r7
 8104fb2:	bd80      	pop	{r7, pc}
 8104fb4:	58024400 	.word	0x58024400
 8104fb8:	017d7840 	.word	0x017d7840

08104fbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104fbc:	b580      	push	{r7, lr}
 8104fbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104fc0:	f7fd ffa8 	bl	8102f14 <HAL_RCC_GetHCLKFreq>
 8104fc4:	4602      	mov	r2, r0
 8104fc6:	4b06      	ldr	r3, [pc, #24]	@ (8104fe0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104fc8:	6a1b      	ldr	r3, [r3, #32]
 8104fca:	091b      	lsrs	r3, r3, #4
 8104fcc:	f003 0307 	and.w	r3, r3, #7
 8104fd0:	4904      	ldr	r1, [pc, #16]	@ (8104fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104fd2:	5ccb      	ldrb	r3, [r1, r3]
 8104fd4:	f003 031f 	and.w	r3, r3, #31
 8104fd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104fdc:	4618      	mov	r0, r3
 8104fde:	bd80      	pop	{r7, pc}
 8104fe0:	58024400 	.word	0x58024400
 8104fe4:	08108a94 	.word	0x08108a94

08104fe8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8104fe8:	b480      	push	{r7}
 8104fea:	b089      	sub	sp, #36	@ 0x24
 8104fec:	af00      	add	r7, sp, #0
 8104fee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104ff0:	4ba1      	ldr	r3, [pc, #644]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ff4:	f003 0303 	and.w	r3, r3, #3
 8104ff8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8104ffa:	4b9f      	ldr	r3, [pc, #636]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ffe:	0b1b      	lsrs	r3, r3, #12
 8105000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105004:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105006:	4b9c      	ldr	r3, [pc, #624]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810500a:	091b      	lsrs	r3, r3, #4
 810500c:	f003 0301 	and.w	r3, r3, #1
 8105010:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105012:	4b99      	ldr	r3, [pc, #612]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105016:	08db      	lsrs	r3, r3, #3
 8105018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810501c:	693a      	ldr	r2, [r7, #16]
 810501e:	fb02 f303 	mul.w	r3, r2, r3
 8105022:	ee07 3a90 	vmov	s15, r3
 8105026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810502a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810502e:	697b      	ldr	r3, [r7, #20]
 8105030:	2b00      	cmp	r3, #0
 8105032:	f000 8111 	beq.w	8105258 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105036:	69bb      	ldr	r3, [r7, #24]
 8105038:	2b02      	cmp	r3, #2
 810503a:	f000 8083 	beq.w	8105144 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810503e:	69bb      	ldr	r3, [r7, #24]
 8105040:	2b02      	cmp	r3, #2
 8105042:	f200 80a1 	bhi.w	8105188 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105046:	69bb      	ldr	r3, [r7, #24]
 8105048:	2b00      	cmp	r3, #0
 810504a:	d003      	beq.n	8105054 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810504c:	69bb      	ldr	r3, [r7, #24]
 810504e:	2b01      	cmp	r3, #1
 8105050:	d056      	beq.n	8105100 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105052:	e099      	b.n	8105188 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105054:	4b88      	ldr	r3, [pc, #544]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105056:	681b      	ldr	r3, [r3, #0]
 8105058:	f003 0320 	and.w	r3, r3, #32
 810505c:	2b00      	cmp	r3, #0
 810505e:	d02d      	beq.n	81050bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105060:	4b85      	ldr	r3, [pc, #532]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105062:	681b      	ldr	r3, [r3, #0]
 8105064:	08db      	lsrs	r3, r3, #3
 8105066:	f003 0303 	and.w	r3, r3, #3
 810506a:	4a84      	ldr	r2, [pc, #528]	@ (810527c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810506c:	fa22 f303 	lsr.w	r3, r2, r3
 8105070:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105072:	68bb      	ldr	r3, [r7, #8]
 8105074:	ee07 3a90 	vmov	s15, r3
 8105078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810507c:	697b      	ldr	r3, [r7, #20]
 810507e:	ee07 3a90 	vmov	s15, r3
 8105082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810508a:	4b7b      	ldr	r3, [pc, #492]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810508c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810508e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105092:	ee07 3a90 	vmov	s15, r3
 8105096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810509a:	ed97 6a03 	vldr	s12, [r7, #12]
 810509e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81050a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81050ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81050ba:	e087      	b.n	81051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81050bc:	697b      	ldr	r3, [r7, #20]
 81050be:	ee07 3a90 	vmov	s15, r3
 81050c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105284 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81050ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050ce:	4b6a      	ldr	r3, [pc, #424]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81050d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81050d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050d6:	ee07 3a90 	vmov	s15, r3
 81050da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050de:	ed97 6a03 	vldr	s12, [r7, #12]
 81050e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81050e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81050f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81050fe:	e065      	b.n	81051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105100:	697b      	ldr	r3, [r7, #20]
 8105102:	ee07 3a90 	vmov	s15, r3
 8105106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810510a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810510e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105112:	4b59      	ldr	r3, [pc, #356]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810511a:	ee07 3a90 	vmov	s15, r3
 810511e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105122:	ed97 6a03 	vldr	s12, [r7, #12]
 8105126:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810512a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810512e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810513e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105142:	e043      	b.n	81051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105144:	697b      	ldr	r3, [r7, #20]
 8105146:	ee07 3a90 	vmov	s15, r3
 810514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810514e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810528c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105156:	4b48      	ldr	r3, [pc, #288]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810515e:	ee07 3a90 	vmov	s15, r3
 8105162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105166:	ed97 6a03 	vldr	s12, [r7, #12]
 810516a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105186:	e021      	b.n	81051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105188:	697b      	ldr	r3, [r7, #20]
 810518a:	ee07 3a90 	vmov	s15, r3
 810518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105192:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810519a:	4b37      	ldr	r3, [pc, #220]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810519c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81051a2:	ee07 3a90 	vmov	s15, r3
 81051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81051ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81051ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81051cc:	4b2a      	ldr	r3, [pc, #168]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81051d0:	0a5b      	lsrs	r3, r3, #9
 81051d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81051d6:	ee07 3a90 	vmov	s15, r3
 81051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81051e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81051e6:	edd7 6a07 	vldr	s13, [r7, #28]
 81051ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81051ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81051f2:	ee17 2a90 	vmov	r2, s15
 81051f6:	687b      	ldr	r3, [r7, #4]
 81051f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81051fa:	4b1f      	ldr	r3, [pc, #124]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81051fe:	0c1b      	lsrs	r3, r3, #16
 8105200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105204:	ee07 3a90 	vmov	s15, r3
 8105208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810520c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105214:	edd7 6a07 	vldr	s13, [r7, #28]
 8105218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810521c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105220:	ee17 2a90 	vmov	r2, s15
 8105224:	687b      	ldr	r3, [r7, #4]
 8105226:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105228:	4b13      	ldr	r3, [pc, #76]	@ (8105278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810522c:	0e1b      	lsrs	r3, r3, #24
 810522e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105232:	ee07 3a90 	vmov	s15, r3
 8105236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810523a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810523e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105242:	edd7 6a07 	vldr	s13, [r7, #28]
 8105246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810524a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810524e:	ee17 2a90 	vmov	r2, s15
 8105252:	687b      	ldr	r3, [r7, #4]
 8105254:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105256:	e008      	b.n	810526a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	2200      	movs	r2, #0
 810525c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	2200      	movs	r2, #0
 8105262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105264:	687b      	ldr	r3, [r7, #4]
 8105266:	2200      	movs	r2, #0
 8105268:	609a      	str	r2, [r3, #8]
}
 810526a:	bf00      	nop
 810526c:	3724      	adds	r7, #36	@ 0x24
 810526e:	46bd      	mov	sp, r7
 8105270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105274:	4770      	bx	lr
 8105276:	bf00      	nop
 8105278:	58024400 	.word	0x58024400
 810527c:	03d09000 	.word	0x03d09000
 8105280:	46000000 	.word	0x46000000
 8105284:	4c742400 	.word	0x4c742400
 8105288:	4a742400 	.word	0x4a742400
 810528c:	4bbebc20 	.word	0x4bbebc20

08105290 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105290:	b480      	push	{r7}
 8105292:	b089      	sub	sp, #36	@ 0x24
 8105294:	af00      	add	r7, sp, #0
 8105296:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105298:	4ba1      	ldr	r3, [pc, #644]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810529c:	f003 0303 	and.w	r3, r3, #3
 81052a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81052a2:	4b9f      	ldr	r3, [pc, #636]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81052a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81052a6:	0d1b      	lsrs	r3, r3, #20
 81052a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81052ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81052ae:	4b9c      	ldr	r3, [pc, #624]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81052b2:	0a1b      	lsrs	r3, r3, #8
 81052b4:	f003 0301 	and.w	r3, r3, #1
 81052b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81052ba:	4b99      	ldr	r3, [pc, #612]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81052bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81052be:	08db      	lsrs	r3, r3, #3
 81052c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81052c4:	693a      	ldr	r2, [r7, #16]
 81052c6:	fb02 f303 	mul.w	r3, r2, r3
 81052ca:	ee07 3a90 	vmov	s15, r3
 81052ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81052d6:	697b      	ldr	r3, [r7, #20]
 81052d8:	2b00      	cmp	r3, #0
 81052da:	f000 8111 	beq.w	8105500 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81052de:	69bb      	ldr	r3, [r7, #24]
 81052e0:	2b02      	cmp	r3, #2
 81052e2:	f000 8083 	beq.w	81053ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81052e6:	69bb      	ldr	r3, [r7, #24]
 81052e8:	2b02      	cmp	r3, #2
 81052ea:	f200 80a1 	bhi.w	8105430 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81052ee:	69bb      	ldr	r3, [r7, #24]
 81052f0:	2b00      	cmp	r3, #0
 81052f2:	d003      	beq.n	81052fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81052f4:	69bb      	ldr	r3, [r7, #24]
 81052f6:	2b01      	cmp	r3, #1
 81052f8:	d056      	beq.n	81053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81052fa:	e099      	b.n	8105430 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81052fc:	4b88      	ldr	r3, [pc, #544]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81052fe:	681b      	ldr	r3, [r3, #0]
 8105300:	f003 0320 	and.w	r3, r3, #32
 8105304:	2b00      	cmp	r3, #0
 8105306:	d02d      	beq.n	8105364 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105308:	4b85      	ldr	r3, [pc, #532]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	08db      	lsrs	r3, r3, #3
 810530e:	f003 0303 	and.w	r3, r3, #3
 8105312:	4a84      	ldr	r2, [pc, #528]	@ (8105524 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105314:	fa22 f303 	lsr.w	r3, r2, r3
 8105318:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810531a:	68bb      	ldr	r3, [r7, #8]
 810531c:	ee07 3a90 	vmov	s15, r3
 8105320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105324:	697b      	ldr	r3, [r7, #20]
 8105326:	ee07 3a90 	vmov	s15, r3
 810532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810532e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105332:	4b7b      	ldr	r3, [pc, #492]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810533a:	ee07 3a90 	vmov	s15, r3
 810533e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105342:	ed97 6a03 	vldr	s12, [r7, #12]
 8105346:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810534a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810534e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810535a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810535e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105362:	e087      	b.n	8105474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105364:	697b      	ldr	r3, [r7, #20]
 8105366:	ee07 3a90 	vmov	s15, r3
 810536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810536e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810552c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105376:	4b6a      	ldr	r3, [pc, #424]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810537e:	ee07 3a90 	vmov	s15, r3
 8105382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105386:	ed97 6a03 	vldr	s12, [r7, #12]
 810538a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81053a6:	e065      	b.n	8105474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81053a8:	697b      	ldr	r3, [r7, #20]
 81053aa:	ee07 3a90 	vmov	s15, r3
 81053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053ba:	4b59      	ldr	r3, [pc, #356]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053c2:	ee07 3a90 	vmov	s15, r3
 81053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81053ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81053ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81053da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81053ea:	e043      	b.n	8105474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81053ec:	697b      	ldr	r3, [r7, #20]
 81053ee:	ee07 3a90 	vmov	s15, r3
 81053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81053fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053fe:	4b48      	ldr	r3, [pc, #288]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105406:	ee07 3a90 	vmov	s15, r3
 810540a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810540e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105412:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810541e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105426:	ee67 7a27 	vmul.f32	s15, s14, s15
 810542a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810542e:	e021      	b.n	8105474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105430:	697b      	ldr	r3, [r7, #20]
 8105432:	ee07 3a90 	vmov	s15, r3
 8105436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810543a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810543e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105442:	4b37      	ldr	r3, [pc, #220]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810544a:	ee07 3a90 	vmov	s15, r3
 810544e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105452:	ed97 6a03 	vldr	s12, [r7, #12]
 8105456:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810545a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810545e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810546a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810546e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105472:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105474:	4b2a      	ldr	r3, [pc, #168]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105478:	0a5b      	lsrs	r3, r3, #9
 810547a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810547e:	ee07 3a90 	vmov	s15, r3
 8105482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810548a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810548e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810549a:	ee17 2a90 	vmov	r2, s15
 810549e:	687b      	ldr	r3, [r7, #4]
 81054a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81054a2:	4b1f      	ldr	r3, [pc, #124]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81054a6:	0c1b      	lsrs	r3, r3, #16
 81054a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81054ac:	ee07 3a90 	vmov	s15, r3
 81054b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81054b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81054bc:	edd7 6a07 	vldr	s13, [r7, #28]
 81054c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81054c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81054c8:	ee17 2a90 	vmov	r2, s15
 81054cc:	687b      	ldr	r3, [r7, #4]
 81054ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81054d0:	4b13      	ldr	r3, [pc, #76]	@ (8105520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81054d4:	0e1b      	lsrs	r3, r3, #24
 81054d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81054da:	ee07 3a90 	vmov	s15, r3
 81054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81054e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81054ea:	edd7 6a07 	vldr	s13, [r7, #28]
 81054ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81054f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81054f6:	ee17 2a90 	vmov	r2, s15
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81054fe:	e008      	b.n	8105512 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	2200      	movs	r2, #0
 8105504:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	2200      	movs	r2, #0
 810550a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	2200      	movs	r2, #0
 8105510:	609a      	str	r2, [r3, #8]
}
 8105512:	bf00      	nop
 8105514:	3724      	adds	r7, #36	@ 0x24
 8105516:	46bd      	mov	sp, r7
 8105518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810551c:	4770      	bx	lr
 810551e:	bf00      	nop
 8105520:	58024400 	.word	0x58024400
 8105524:	03d09000 	.word	0x03d09000
 8105528:	46000000 	.word	0x46000000
 810552c:	4c742400 	.word	0x4c742400
 8105530:	4a742400 	.word	0x4a742400
 8105534:	4bbebc20 	.word	0x4bbebc20

08105538 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8105538:	b480      	push	{r7}
 810553a:	b089      	sub	sp, #36	@ 0x24
 810553c:	af00      	add	r7, sp, #0
 810553e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105540:	4ba0      	ldr	r3, [pc, #640]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105544:	f003 0303 	and.w	r3, r3, #3
 8105548:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810554a:	4b9e      	ldr	r3, [pc, #632]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810554e:	091b      	lsrs	r3, r3, #4
 8105550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105554:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105556:	4b9b      	ldr	r3, [pc, #620]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810555a:	f003 0301 	and.w	r3, r3, #1
 810555e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105560:	4b98      	ldr	r3, [pc, #608]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105564:	08db      	lsrs	r3, r3, #3
 8105566:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810556a:	693a      	ldr	r2, [r7, #16]
 810556c:	fb02 f303 	mul.w	r3, r2, r3
 8105570:	ee07 3a90 	vmov	s15, r3
 8105574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105578:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810557c:	697b      	ldr	r3, [r7, #20]
 810557e:	2b00      	cmp	r3, #0
 8105580:	f000 8111 	beq.w	81057a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105584:	69bb      	ldr	r3, [r7, #24]
 8105586:	2b02      	cmp	r3, #2
 8105588:	f000 8083 	beq.w	8105692 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810558c:	69bb      	ldr	r3, [r7, #24]
 810558e:	2b02      	cmp	r3, #2
 8105590:	f200 80a1 	bhi.w	81056d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105594:	69bb      	ldr	r3, [r7, #24]
 8105596:	2b00      	cmp	r3, #0
 8105598:	d003      	beq.n	81055a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810559a:	69bb      	ldr	r3, [r7, #24]
 810559c:	2b01      	cmp	r3, #1
 810559e:	d056      	beq.n	810564e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81055a0:	e099      	b.n	81056d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81055a2:	4b88      	ldr	r3, [pc, #544]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81055a4:	681b      	ldr	r3, [r3, #0]
 81055a6:	f003 0320 	and.w	r3, r3, #32
 81055aa:	2b00      	cmp	r3, #0
 81055ac:	d02d      	beq.n	810560a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81055ae:	4b85      	ldr	r3, [pc, #532]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81055b0:	681b      	ldr	r3, [r3, #0]
 81055b2:	08db      	lsrs	r3, r3, #3
 81055b4:	f003 0303 	and.w	r3, r3, #3
 81055b8:	4a83      	ldr	r2, [pc, #524]	@ (81057c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81055ba:	fa22 f303 	lsr.w	r3, r2, r3
 81055be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81055c0:	68bb      	ldr	r3, [r7, #8]
 81055c2:	ee07 3a90 	vmov	s15, r3
 81055c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055ca:	697b      	ldr	r3, [r7, #20]
 81055cc:	ee07 3a90 	vmov	s15, r3
 81055d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055d8:	4b7a      	ldr	r3, [pc, #488]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81055da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81055dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055e0:	ee07 3a90 	vmov	s15, r3
 81055e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055e8:	ed97 6a03 	vldr	s12, [r7, #12]
 81055ec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 81057cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81055f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81055fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105604:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105608:	e087      	b.n	810571a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810560a:	697b      	ldr	r3, [r7, #20]
 810560c:	ee07 3a90 	vmov	s15, r3
 8105610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105614:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 81057d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810561c:	4b69      	ldr	r3, [pc, #420]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105624:	ee07 3a90 	vmov	s15, r3
 8105628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810562c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105630:	eddf 5a66 	vldr	s11, [pc, #408]	@ 81057cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810563c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105648:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810564c:	e065      	b.n	810571a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810564e:	697b      	ldr	r3, [r7, #20]
 8105650:	ee07 3a90 	vmov	s15, r3
 8105654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105658:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 81057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810565c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105660:	4b58      	ldr	r3, [pc, #352]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105668:	ee07 3a90 	vmov	s15, r3
 810566c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105670:	ed97 6a03 	vldr	s12, [r7, #12]
 8105674:	eddf 5a55 	vldr	s11, [pc, #340]	@ 81057cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810567c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105688:	ee67 7a27 	vmul.f32	s15, s14, s15
 810568c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105690:	e043      	b.n	810571a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105692:	697b      	ldr	r3, [r7, #20]
 8105694:	ee07 3a90 	vmov	s15, r3
 8105698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810569c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 81057d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81056a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81056a4:	4b47      	ldr	r3, [pc, #284]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81056a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81056a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056ac:	ee07 3a90 	vmov	s15, r3
 81056b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056b4:	ed97 6a03 	vldr	s12, [r7, #12]
 81056b8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 81057cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81056bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81056c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81056d4:	e021      	b.n	810571a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81056d6:	697b      	ldr	r3, [r7, #20]
 81056d8:	ee07 3a90 	vmov	s15, r3
 81056dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056e0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 81057d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81056e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81056e8:	4b36      	ldr	r3, [pc, #216]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81056ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81056ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056f0:	ee07 3a90 	vmov	s15, r3
 81056f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056f8:	ed97 6a03 	vldr	s12, [r7, #12]
 81056fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 81057cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105708:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810570c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105714:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105718:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810571a:	4b2a      	ldr	r3, [pc, #168]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810571e:	0a5b      	lsrs	r3, r3, #9
 8105720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105724:	ee07 3a90 	vmov	s15, r3
 8105728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810572c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105734:	edd7 6a07 	vldr	s13, [r7, #28]
 8105738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810573c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105740:	ee17 2a90 	vmov	r2, s15
 8105744:	687b      	ldr	r3, [r7, #4]
 8105746:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8105748:	4b1e      	ldr	r3, [pc, #120]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810574a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810574c:	0c1b      	lsrs	r3, r3, #16
 810574e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105752:	ee07 3a90 	vmov	s15, r3
 8105756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810575a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810575e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105762:	edd7 6a07 	vldr	s13, [r7, #28]
 8105766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810576a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810576e:	ee17 2a90 	vmov	r2, s15
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8105776:	4b13      	ldr	r3, [pc, #76]	@ (81057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810577a:	0e1b      	lsrs	r3, r3, #24
 810577c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105780:	ee07 3a90 	vmov	s15, r3
 8105784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105788:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810578c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105790:	edd7 6a07 	vldr	s13, [r7, #28]
 8105794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810579c:	ee17 2a90 	vmov	r2, s15
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81057a4:	e008      	b.n	81057b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	2200      	movs	r2, #0
 81057aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	2200      	movs	r2, #0
 81057b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81057b2:	687b      	ldr	r3, [r7, #4]
 81057b4:	2200      	movs	r2, #0
 81057b6:	609a      	str	r2, [r3, #8]
}
 81057b8:	bf00      	nop
 81057ba:	3724      	adds	r7, #36	@ 0x24
 81057bc:	46bd      	mov	sp, r7
 81057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057c2:	4770      	bx	lr
 81057c4:	58024400 	.word	0x58024400
 81057c8:	03d09000 	.word	0x03d09000
 81057cc:	46000000 	.word	0x46000000
 81057d0:	4c742400 	.word	0x4c742400
 81057d4:	4a742400 	.word	0x4a742400
 81057d8:	4bbebc20 	.word	0x4bbebc20

081057dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81057dc:	b580      	push	{r7, lr}
 81057de:	b084      	sub	sp, #16
 81057e0:	af00      	add	r7, sp, #0
 81057e2:	6078      	str	r0, [r7, #4]
 81057e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81057e6:	2300      	movs	r3, #0
 81057e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81057ea:	4b54      	ldr	r3, [pc, #336]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81057ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81057ee:	f003 0303 	and.w	r3, r3, #3
 81057f2:	2b03      	cmp	r3, #3
 81057f4:	d101      	bne.n	81057fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81057f6:	2301      	movs	r3, #1
 81057f8:	e09b      	b.n	8105932 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81057fa:	4b50      	ldr	r3, [pc, #320]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	4a4f      	ldr	r2, [pc, #316]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 8105800:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8105804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105806:	f7fc fbdf 	bl	8101fc8 <HAL_GetTick>
 810580a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810580c:	e008      	b.n	8105820 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810580e:	f7fc fbdb 	bl	8101fc8 <HAL_GetTick>
 8105812:	4602      	mov	r2, r0
 8105814:	68bb      	ldr	r3, [r7, #8]
 8105816:	1ad3      	subs	r3, r2, r3
 8105818:	2b02      	cmp	r3, #2
 810581a:	d901      	bls.n	8105820 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810581c:	2303      	movs	r3, #3
 810581e:	e088      	b.n	8105932 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105820:	4b46      	ldr	r3, [pc, #280]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 8105822:	681b      	ldr	r3, [r3, #0]
 8105824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105828:	2b00      	cmp	r3, #0
 810582a:	d1f0      	bne.n	810580e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810582c:	4b43      	ldr	r3, [pc, #268]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 810582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105830:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8105834:	687b      	ldr	r3, [r7, #4]
 8105836:	681b      	ldr	r3, [r3, #0]
 8105838:	031b      	lsls	r3, r3, #12
 810583a:	4940      	ldr	r1, [pc, #256]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 810583c:	4313      	orrs	r3, r2
 810583e:	628b      	str	r3, [r1, #40]	@ 0x28
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	685b      	ldr	r3, [r3, #4]
 8105844:	3b01      	subs	r3, #1
 8105846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	689b      	ldr	r3, [r3, #8]
 810584e:	3b01      	subs	r3, #1
 8105850:	025b      	lsls	r3, r3, #9
 8105852:	b29b      	uxth	r3, r3
 8105854:	431a      	orrs	r2, r3
 8105856:	687b      	ldr	r3, [r7, #4]
 8105858:	68db      	ldr	r3, [r3, #12]
 810585a:	3b01      	subs	r3, #1
 810585c:	041b      	lsls	r3, r3, #16
 810585e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8105862:	431a      	orrs	r2, r3
 8105864:	687b      	ldr	r3, [r7, #4]
 8105866:	691b      	ldr	r3, [r3, #16]
 8105868:	3b01      	subs	r3, #1
 810586a:	061b      	lsls	r3, r3, #24
 810586c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8105870:	4932      	ldr	r1, [pc, #200]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 8105872:	4313      	orrs	r3, r2
 8105874:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105876:	4b31      	ldr	r3, [pc, #196]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 8105878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810587a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	695b      	ldr	r3, [r3, #20]
 8105882:	492e      	ldr	r1, [pc, #184]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 8105884:	4313      	orrs	r3, r2
 8105886:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105888:	4b2c      	ldr	r3, [pc, #176]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 810588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810588c:	f023 0220 	bic.w	r2, r3, #32
 8105890:	687b      	ldr	r3, [r7, #4]
 8105892:	699b      	ldr	r3, [r3, #24]
 8105894:	4929      	ldr	r1, [pc, #164]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 8105896:	4313      	orrs	r3, r2
 8105898:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810589a:	4b28      	ldr	r3, [pc, #160]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 810589c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810589e:	4a27      	ldr	r2, [pc, #156]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058a0:	f023 0310 	bic.w	r3, r3, #16
 81058a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81058a6:	4b25      	ldr	r3, [pc, #148]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81058aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81058ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81058b2:	687a      	ldr	r2, [r7, #4]
 81058b4:	69d2      	ldr	r2, [r2, #28]
 81058b6:	00d2      	lsls	r2, r2, #3
 81058b8:	4920      	ldr	r1, [pc, #128]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058ba:	4313      	orrs	r3, r2
 81058bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81058be:	4b1f      	ldr	r3, [pc, #124]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81058c2:	4a1e      	ldr	r2, [pc, #120]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058c4:	f043 0310 	orr.w	r3, r3, #16
 81058c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81058ca:	683b      	ldr	r3, [r7, #0]
 81058cc:	2b00      	cmp	r3, #0
 81058ce:	d106      	bne.n	81058de <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81058d0:	4b1a      	ldr	r3, [pc, #104]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81058d4:	4a19      	ldr	r2, [pc, #100]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81058da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81058dc:	e00f      	b.n	81058fe <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81058de:	683b      	ldr	r3, [r7, #0]
 81058e0:	2b01      	cmp	r3, #1
 81058e2:	d106      	bne.n	81058f2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81058e4:	4b15      	ldr	r3, [pc, #84]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81058e8:	4a14      	ldr	r2, [pc, #80]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81058ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81058f0:	e005      	b.n	81058fe <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81058f2:	4b12      	ldr	r3, [pc, #72]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81058f6:	4a11      	ldr	r2, [pc, #68]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 81058f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81058fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81058fe:	4b0f      	ldr	r3, [pc, #60]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 8105900:	681b      	ldr	r3, [r3, #0]
 8105902:	4a0e      	ldr	r2, [pc, #56]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 8105904:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8105908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810590a:	f7fc fb5d 	bl	8101fc8 <HAL_GetTick>
 810590e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105910:	e008      	b.n	8105924 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105912:	f7fc fb59 	bl	8101fc8 <HAL_GetTick>
 8105916:	4602      	mov	r2, r0
 8105918:	68bb      	ldr	r3, [r7, #8]
 810591a:	1ad3      	subs	r3, r2, r3
 810591c:	2b02      	cmp	r3, #2
 810591e:	d901      	bls.n	8105924 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105920:	2303      	movs	r3, #3
 8105922:	e006      	b.n	8105932 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105924:	4b05      	ldr	r3, [pc, #20]	@ (810593c <RCCEx_PLL2_Config+0x160>)
 8105926:	681b      	ldr	r3, [r3, #0]
 8105928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810592c:	2b00      	cmp	r3, #0
 810592e:	d0f0      	beq.n	8105912 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105930:	7bfb      	ldrb	r3, [r7, #15]
}
 8105932:	4618      	mov	r0, r3
 8105934:	3710      	adds	r7, #16
 8105936:	46bd      	mov	sp, r7
 8105938:	bd80      	pop	{r7, pc}
 810593a:	bf00      	nop
 810593c:	58024400 	.word	0x58024400

08105940 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105940:	b580      	push	{r7, lr}
 8105942:	b084      	sub	sp, #16
 8105944:	af00      	add	r7, sp, #0
 8105946:	6078      	str	r0, [r7, #4]
 8105948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810594a:	2300      	movs	r3, #0
 810594c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810594e:	4b54      	ldr	r3, [pc, #336]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105952:	f003 0303 	and.w	r3, r3, #3
 8105956:	2b03      	cmp	r3, #3
 8105958:	d101      	bne.n	810595e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810595a:	2301      	movs	r3, #1
 810595c:	e09b      	b.n	8105a96 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810595e:	4b50      	ldr	r3, [pc, #320]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	4a4f      	ldr	r2, [pc, #316]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8105968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810596a:	f7fc fb2d 	bl	8101fc8 <HAL_GetTick>
 810596e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105970:	e008      	b.n	8105984 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105972:	f7fc fb29 	bl	8101fc8 <HAL_GetTick>
 8105976:	4602      	mov	r2, r0
 8105978:	68bb      	ldr	r3, [r7, #8]
 810597a:	1ad3      	subs	r3, r2, r3
 810597c:	2b02      	cmp	r3, #2
 810597e:	d901      	bls.n	8105984 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105980:	2303      	movs	r3, #3
 8105982:	e088      	b.n	8105a96 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105984:	4b46      	ldr	r3, [pc, #280]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105986:	681b      	ldr	r3, [r3, #0]
 8105988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810598c:	2b00      	cmp	r3, #0
 810598e:	d1f0      	bne.n	8105972 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105990:	4b43      	ldr	r3, [pc, #268]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105994:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8105998:	687b      	ldr	r3, [r7, #4]
 810599a:	681b      	ldr	r3, [r3, #0]
 810599c:	051b      	lsls	r3, r3, #20
 810599e:	4940      	ldr	r1, [pc, #256]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 81059a0:	4313      	orrs	r3, r2
 81059a2:	628b      	str	r3, [r1, #40]	@ 0x28
 81059a4:	687b      	ldr	r3, [r7, #4]
 81059a6:	685b      	ldr	r3, [r3, #4]
 81059a8:	3b01      	subs	r3, #1
 81059aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	689b      	ldr	r3, [r3, #8]
 81059b2:	3b01      	subs	r3, #1
 81059b4:	025b      	lsls	r3, r3, #9
 81059b6:	b29b      	uxth	r3, r3
 81059b8:	431a      	orrs	r2, r3
 81059ba:	687b      	ldr	r3, [r7, #4]
 81059bc:	68db      	ldr	r3, [r3, #12]
 81059be:	3b01      	subs	r3, #1
 81059c0:	041b      	lsls	r3, r3, #16
 81059c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81059c6:	431a      	orrs	r2, r3
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	691b      	ldr	r3, [r3, #16]
 81059cc:	3b01      	subs	r3, #1
 81059ce:	061b      	lsls	r3, r3, #24
 81059d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81059d4:	4932      	ldr	r1, [pc, #200]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 81059d6:	4313      	orrs	r3, r2
 81059d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81059da:	4b31      	ldr	r3, [pc, #196]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 81059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81059de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81059e2:	687b      	ldr	r3, [r7, #4]
 81059e4:	695b      	ldr	r3, [r3, #20]
 81059e6:	492e      	ldr	r1, [pc, #184]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 81059e8:	4313      	orrs	r3, r2
 81059ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81059ec:	4b2c      	ldr	r3, [pc, #176]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 81059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81059f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81059f4:	687b      	ldr	r3, [r7, #4]
 81059f6:	699b      	ldr	r3, [r3, #24]
 81059f8:	4929      	ldr	r1, [pc, #164]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 81059fa:	4313      	orrs	r3, r2
 81059fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81059fe:	4b28      	ldr	r3, [pc, #160]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a02:	4a27      	ldr	r2, [pc, #156]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8105a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105a0a:	4b25      	ldr	r3, [pc, #148]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105a12:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8105a16:	687a      	ldr	r2, [r7, #4]
 8105a18:	69d2      	ldr	r2, [r2, #28]
 8105a1a:	00d2      	lsls	r2, r2, #3
 8105a1c:	4920      	ldr	r1, [pc, #128]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a1e:	4313      	orrs	r3, r2
 8105a20:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105a22:	4b1f      	ldr	r3, [pc, #124]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a26:	4a1e      	ldr	r2, [pc, #120]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105a2e:	683b      	ldr	r3, [r7, #0]
 8105a30:	2b00      	cmp	r3, #0
 8105a32:	d106      	bne.n	8105a42 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105a34:	4b1a      	ldr	r3, [pc, #104]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a38:	4a19      	ldr	r2, [pc, #100]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8105a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105a40:	e00f      	b.n	8105a62 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105a42:	683b      	ldr	r3, [r7, #0]
 8105a44:	2b01      	cmp	r3, #1
 8105a46:	d106      	bne.n	8105a56 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105a48:	4b15      	ldr	r3, [pc, #84]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a4c:	4a14      	ldr	r2, [pc, #80]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105a52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105a54:	e005      	b.n	8105a62 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105a56:	4b12      	ldr	r3, [pc, #72]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a5a:	4a11      	ldr	r2, [pc, #68]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105a60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105a62:	4b0f      	ldr	r3, [pc, #60]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a64:	681b      	ldr	r3, [r3, #0]
 8105a66:	4a0e      	ldr	r2, [pc, #56]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8105a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105a6e:	f7fc faab 	bl	8101fc8 <HAL_GetTick>
 8105a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105a74:	e008      	b.n	8105a88 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105a76:	f7fc faa7 	bl	8101fc8 <HAL_GetTick>
 8105a7a:	4602      	mov	r2, r0
 8105a7c:	68bb      	ldr	r3, [r7, #8]
 8105a7e:	1ad3      	subs	r3, r2, r3
 8105a80:	2b02      	cmp	r3, #2
 8105a82:	d901      	bls.n	8105a88 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105a84:	2303      	movs	r3, #3
 8105a86:	e006      	b.n	8105a96 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105a88:	4b05      	ldr	r3, [pc, #20]	@ (8105aa0 <RCCEx_PLL3_Config+0x160>)
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105a90:	2b00      	cmp	r3, #0
 8105a92:	d0f0      	beq.n	8105a76 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8105a96:	4618      	mov	r0, r3
 8105a98:	3710      	adds	r7, #16
 8105a9a:	46bd      	mov	sp, r7
 8105a9c:	bd80      	pop	{r7, pc}
 8105a9e:	bf00      	nop
 8105aa0:	58024400 	.word	0x58024400

08105aa4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8105aa4:	b580      	push	{r7, lr}
 8105aa6:	b084      	sub	sp, #16
 8105aa8:	af00      	add	r7, sp, #0
 8105aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8105aac:	2301      	movs	r3, #1
 8105aae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	2b00      	cmp	r3, #0
 8105ab4:	d073      	beq.n	8105b9e <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8105abc:	b2db      	uxtb	r3, r3
 8105abe:	2b00      	cmp	r3, #0
 8105ac0:	d106      	bne.n	8105ad0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	2200      	movs	r2, #0
 8105ac6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8105aca:	6878      	ldr	r0, [r7, #4]
 8105acc:	f7fb fda0 	bl	8101610 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105ad0:	687b      	ldr	r3, [r7, #4]
 8105ad2:	2202      	movs	r2, #2
 8105ad4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	681b      	ldr	r3, [r3, #0]
 8105adc:	68db      	ldr	r3, [r3, #12]
 8105ade:	f003 0310 	and.w	r3, r3, #16
 8105ae2:	2b10      	cmp	r3, #16
 8105ae4:	d052      	beq.n	8105b8c <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	22ca      	movs	r2, #202	@ 0xca
 8105aec:	625a      	str	r2, [r3, #36]	@ 0x24
 8105aee:	687b      	ldr	r3, [r7, #4]
 8105af0:	681b      	ldr	r3, [r3, #0]
 8105af2:	2253      	movs	r2, #83	@ 0x53
 8105af4:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8105af6:	6878      	ldr	r0, [r7, #4]
 8105af8:	f000 f87a 	bl	8105bf0 <RTC_EnterInitMode>
 8105afc:	4603      	mov	r3, r0
 8105afe:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8105b00:	7bfb      	ldrb	r3, [r7, #15]
 8105b02:	2b00      	cmp	r3, #0
 8105b04:	d126      	bne.n	8105b54 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	681b      	ldr	r3, [r3, #0]
 8105b0a:	689b      	ldr	r3, [r3, #8]
 8105b0c:	687a      	ldr	r2, [r7, #4]
 8105b0e:	6812      	ldr	r2, [r2, #0]
 8105b10:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8105b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8105b18:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	681b      	ldr	r3, [r3, #0]
 8105b1e:	6899      	ldr	r1, [r3, #8]
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	685a      	ldr	r2, [r3, #4]
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	691b      	ldr	r3, [r3, #16]
 8105b28:	431a      	orrs	r2, r3
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	699b      	ldr	r3, [r3, #24]
 8105b2e:	431a      	orrs	r2, r3
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	681b      	ldr	r3, [r3, #0]
 8105b34:	430a      	orrs	r2, r1
 8105b36:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	689b      	ldr	r3, [r3, #8]
 8105b3c:	0419      	lsls	r1, r3, #16
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	68da      	ldr	r2, [r3, #12]
 8105b42:	687b      	ldr	r3, [r7, #4]
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	430a      	orrs	r2, r1
 8105b48:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8105b4a:	6878      	ldr	r0, [r7, #4]
 8105b4c:	f000 f884 	bl	8105c58 <RTC_ExitInitMode>
 8105b50:	4603      	mov	r3, r0
 8105b52:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8105b54:	7bfb      	ldrb	r3, [r7, #15]
 8105b56:	2b00      	cmp	r3, #0
 8105b58:	d113      	bne.n	8105b82 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8105b5a:	687b      	ldr	r3, [r7, #4]
 8105b5c:	681b      	ldr	r3, [r3, #0]
 8105b5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	681b      	ldr	r3, [r3, #0]
 8105b64:	f022 0203 	bic.w	r2, r2, #3
 8105b68:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	681b      	ldr	r3, [r3, #0]
 8105b6e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8105b70:	687b      	ldr	r3, [r7, #4]
 8105b72:	69da      	ldr	r2, [r3, #28]
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	695b      	ldr	r3, [r3, #20]
 8105b78:	431a      	orrs	r2, r3
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	681b      	ldr	r3, [r3, #0]
 8105b7e:	430a      	orrs	r2, r1
 8105b80:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	681b      	ldr	r3, [r3, #0]
 8105b86:	22ff      	movs	r2, #255	@ 0xff
 8105b88:	625a      	str	r2, [r3, #36]	@ 0x24
 8105b8a:	e001      	b.n	8105b90 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8105b8c:	2300      	movs	r3, #0
 8105b8e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8105b90:	7bfb      	ldrb	r3, [r7, #15]
 8105b92:	2b00      	cmp	r3, #0
 8105b94:	d103      	bne.n	8105b9e <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	2201      	movs	r2, #1
 8105b9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8105b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8105ba0:	4618      	mov	r0, r3
 8105ba2:	3710      	adds	r7, #16
 8105ba4:	46bd      	mov	sp, r7
 8105ba6:	bd80      	pop	{r7, pc}

08105ba8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8105ba8:	b580      	push	{r7, lr}
 8105baa:	b084      	sub	sp, #16
 8105bac:	af00      	add	r7, sp, #0
 8105bae:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8105bb0:	687b      	ldr	r3, [r7, #4]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8105bec <HAL_RTC_WaitForSynchro+0x44>)
 8105bb6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8105bb8:	f7fc fa06 	bl	8101fc8 <HAL_GetTick>
 8105bbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105bbe:	e009      	b.n	8105bd4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8105bc0:	f7fc fa02 	bl	8101fc8 <HAL_GetTick>
 8105bc4:	4602      	mov	r2, r0
 8105bc6:	68fb      	ldr	r3, [r7, #12]
 8105bc8:	1ad3      	subs	r3, r2, r3
 8105bca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105bce:	d901      	bls.n	8105bd4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8105bd0:	2303      	movs	r3, #3
 8105bd2:	e007      	b.n	8105be4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	681b      	ldr	r3, [r3, #0]
 8105bd8:	68db      	ldr	r3, [r3, #12]
 8105bda:	f003 0320 	and.w	r3, r3, #32
 8105bde:	2b00      	cmp	r3, #0
 8105be0:	d0ee      	beq.n	8105bc0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8105be2:	2300      	movs	r3, #0
}
 8105be4:	4618      	mov	r0, r3
 8105be6:	3710      	adds	r7, #16
 8105be8:	46bd      	mov	sp, r7
 8105bea:	bd80      	pop	{r7, pc}
 8105bec:	0003ff5f 	.word	0x0003ff5f

08105bf0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8105bf0:	b580      	push	{r7, lr}
 8105bf2:	b084      	sub	sp, #16
 8105bf4:	af00      	add	r7, sp, #0
 8105bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105bf8:	2300      	movs	r3, #0
 8105bfa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	681b      	ldr	r3, [r3, #0]
 8105c00:	68db      	ldr	r3, [r3, #12]
 8105c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105c06:	2b00      	cmp	r3, #0
 8105c08:	d120      	bne.n	8105c4c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8105c0a:	687b      	ldr	r3, [r7, #4]
 8105c0c:	681b      	ldr	r3, [r3, #0]
 8105c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8105c12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8105c14:	f7fc f9d8 	bl	8101fc8 <HAL_GetTick>
 8105c18:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105c1a:	e00d      	b.n	8105c38 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8105c1c:	f7fc f9d4 	bl	8101fc8 <HAL_GetTick>
 8105c20:	4602      	mov	r2, r0
 8105c22:	68bb      	ldr	r3, [r7, #8]
 8105c24:	1ad3      	subs	r3, r2, r3
 8105c26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105c2a:	d905      	bls.n	8105c38 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8105c2c:	2303      	movs	r3, #3
 8105c2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105c30:	687b      	ldr	r3, [r7, #4]
 8105c32:	2203      	movs	r2, #3
 8105c34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105c38:	687b      	ldr	r3, [r7, #4]
 8105c3a:	681b      	ldr	r3, [r3, #0]
 8105c3c:	68db      	ldr	r3, [r3, #12]
 8105c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105c42:	2b00      	cmp	r3, #0
 8105c44:	d102      	bne.n	8105c4c <RTC_EnterInitMode+0x5c>
 8105c46:	7bfb      	ldrb	r3, [r7, #15]
 8105c48:	2b03      	cmp	r3, #3
 8105c4a:	d1e7      	bne.n	8105c1c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8105c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8105c4e:	4618      	mov	r0, r3
 8105c50:	3710      	adds	r7, #16
 8105c52:	46bd      	mov	sp, r7
 8105c54:	bd80      	pop	{r7, pc}
	...

08105c58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8105c58:	b580      	push	{r7, lr}
 8105c5a:	b084      	sub	sp, #16
 8105c5c:	af00      	add	r7, sp, #0
 8105c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105c60:	2300      	movs	r3, #0
 8105c62:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8105c64:	4b1a      	ldr	r3, [pc, #104]	@ (8105cd0 <RTC_ExitInitMode+0x78>)
 8105c66:	68db      	ldr	r3, [r3, #12]
 8105c68:	4a19      	ldr	r2, [pc, #100]	@ (8105cd0 <RTC_ExitInitMode+0x78>)
 8105c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105c6e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8105c70:	4b17      	ldr	r3, [pc, #92]	@ (8105cd0 <RTC_ExitInitMode+0x78>)
 8105c72:	689b      	ldr	r3, [r3, #8]
 8105c74:	f003 0320 	and.w	r3, r3, #32
 8105c78:	2b00      	cmp	r3, #0
 8105c7a:	d10c      	bne.n	8105c96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105c7c:	6878      	ldr	r0, [r7, #4]
 8105c7e:	f7ff ff93 	bl	8105ba8 <HAL_RTC_WaitForSynchro>
 8105c82:	4603      	mov	r3, r0
 8105c84:	2b00      	cmp	r3, #0
 8105c86:	d01e      	beq.n	8105cc6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	2203      	movs	r2, #3
 8105c8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8105c90:	2303      	movs	r3, #3
 8105c92:	73fb      	strb	r3, [r7, #15]
 8105c94:	e017      	b.n	8105cc6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105c96:	4b0e      	ldr	r3, [pc, #56]	@ (8105cd0 <RTC_ExitInitMode+0x78>)
 8105c98:	689b      	ldr	r3, [r3, #8]
 8105c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8105cd0 <RTC_ExitInitMode+0x78>)
 8105c9c:	f023 0320 	bic.w	r3, r3, #32
 8105ca0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105ca2:	6878      	ldr	r0, [r7, #4]
 8105ca4:	f7ff ff80 	bl	8105ba8 <HAL_RTC_WaitForSynchro>
 8105ca8:	4603      	mov	r3, r0
 8105caa:	2b00      	cmp	r3, #0
 8105cac:	d005      	beq.n	8105cba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	2203      	movs	r2, #3
 8105cb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8105cb6:	2303      	movs	r3, #3
 8105cb8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105cba:	4b05      	ldr	r3, [pc, #20]	@ (8105cd0 <RTC_ExitInitMode+0x78>)
 8105cbc:	689b      	ldr	r3, [r3, #8]
 8105cbe:	4a04      	ldr	r2, [pc, #16]	@ (8105cd0 <RTC_ExitInitMode+0x78>)
 8105cc0:	f043 0320 	orr.w	r3, r3, #32
 8105cc4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8105cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8105cc8:	4618      	mov	r0, r3
 8105cca:	3710      	adds	r7, #16
 8105ccc:	46bd      	mov	sp, r7
 8105cce:	bd80      	pop	{r7, pc}
 8105cd0:	58004000 	.word	0x58004000

08105cd4 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 8105cd4:	b480      	push	{r7}
 8105cd6:	b085      	sub	sp, #20
 8105cd8:	af00      	add	r7, sp, #0
 8105cda:	6078      	str	r0, [r7, #4]
 8105cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8105ce4:	2b01      	cmp	r3, #1
 8105ce6:	d101      	bne.n	8105cec <HAL_RTCEx_SetTamper+0x18>
 8105ce8:	2302      	movs	r3, #2
 8105cea:	e0cc      	b.n	8105e86 <HAL_RTCEx_SetTamper+0x1b2>
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	2201      	movs	r2, #1
 8105cf0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8105cf4:	687b      	ldr	r3, [r7, #4]
 8105cf6:	2202      	movs	r2, #2
 8105cf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105d02:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8105d04:	683b      	ldr	r3, [r7, #0]
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	68fa      	ldr	r2, [r7, #12]
 8105d0a:	4313      	orrs	r3, r2
 8105d0c:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8105d0e:	683b      	ldr	r3, [r7, #0]
 8105d10:	689b      	ldr	r3, [r3, #8]
 8105d12:	2b08      	cmp	r3, #8
 8105d14:	d003      	beq.n	8105d1e <HAL_RTCEx_SetTamper+0x4a>
 8105d16:	683b      	ldr	r3, [r7, #0]
 8105d18:	689b      	ldr	r3, [r3, #8]
 8105d1a:	2b02      	cmp	r3, #2
 8105d1c:	d106      	bne.n	8105d2c <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8105d1e:	683b      	ldr	r3, [r7, #0]
 8105d20:	681b      	ldr	r3, [r3, #0]
 8105d22:	005b      	lsls	r3, r3, #1
 8105d24:	68fa      	ldr	r2, [r7, #12]
 8105d26:	4313      	orrs	r3, r2
 8105d28:	60fb      	str	r3, [r7, #12]
 8105d2a:	e006      	b.n	8105d3a <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8105d2c:	683b      	ldr	r3, [r7, #0]
 8105d2e:	681b      	ldr	r3, [r3, #0]
 8105d30:	005b      	lsls	r3, r3, #1
 8105d32:	43db      	mvns	r3, r3
 8105d34:	68fa      	ldr	r2, [r7, #12]
 8105d36:	4013      	ands	r3, r2
 8105d38:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8105d3a:	683b      	ldr	r3, [r7, #0]
 8105d3c:	68db      	ldr	r3, [r3, #12]
 8105d3e:	2b00      	cmp	r3, #0
 8105d40:	d01e      	beq.n	8105d80 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105d42:	683b      	ldr	r3, [r7, #0]
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	f003 0301 	and.w	r3, r3, #1
 8105d4a:	2b00      	cmp	r3, #0
 8105d4c:	d003      	beq.n	8105d56 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8105d4e:	68fb      	ldr	r3, [r7, #12]
 8105d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105d54:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105d56:	683b      	ldr	r3, [r7, #0]
 8105d58:	681b      	ldr	r3, [r3, #0]
 8105d5a:	f003 0308 	and.w	r3, r3, #8
 8105d5e:	2b00      	cmp	r3, #0
 8105d60:	d003      	beq.n	8105d6a <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8105d62:	68fb      	ldr	r3, [r7, #12]
 8105d64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8105d68:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105d6a:	683b      	ldr	r3, [r7, #0]
 8105d6c:	681b      	ldr	r3, [r3, #0]
 8105d6e:	f003 0320 	and.w	r3, r3, #32
 8105d72:	2b00      	cmp	r3, #0
 8105d74:	d022      	beq.n	8105dbc <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8105d76:	68fb      	ldr	r3, [r7, #12]
 8105d78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105d7c:	60fb      	str	r3, [r7, #12]
 8105d7e:	e01d      	b.n	8105dbc <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105d80:	683b      	ldr	r3, [r7, #0]
 8105d82:	681b      	ldr	r3, [r3, #0]
 8105d84:	f003 0301 	and.w	r3, r3, #1
 8105d88:	2b00      	cmp	r3, #0
 8105d8a:	d003      	beq.n	8105d94 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8105d8c:	68fb      	ldr	r3, [r7, #12]
 8105d8e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8105d92:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105d94:	683b      	ldr	r3, [r7, #0]
 8105d96:	681b      	ldr	r3, [r3, #0]
 8105d98:	f003 0308 	and.w	r3, r3, #8
 8105d9c:	2b00      	cmp	r3, #0
 8105d9e:	d003      	beq.n	8105da8 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8105da0:	68fb      	ldr	r3, [r7, #12]
 8105da2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8105da6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105da8:	683b      	ldr	r3, [r7, #0]
 8105daa:	681b      	ldr	r3, [r3, #0]
 8105dac:	f003 0320 	and.w	r3, r3, #32
 8105db0:	2b00      	cmp	r3, #0
 8105db2:	d003      	beq.n	8105dbc <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8105db4:	68fb      	ldr	r3, [r7, #12]
 8105db6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8105dba:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8105dbc:	683b      	ldr	r3, [r7, #0]
 8105dbe:	691b      	ldr	r3, [r3, #16]
 8105dc0:	2b00      	cmp	r3, #0
 8105dc2:	d01e      	beq.n	8105e02 <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105dc4:	683b      	ldr	r3, [r7, #0]
 8105dc6:	681b      	ldr	r3, [r3, #0]
 8105dc8:	f003 0301 	and.w	r3, r3, #1
 8105dcc:	2b00      	cmp	r3, #0
 8105dce:	d003      	beq.n	8105dd8 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8105dd0:	68fb      	ldr	r3, [r7, #12]
 8105dd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8105dd6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105dd8:	683b      	ldr	r3, [r7, #0]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	f003 0308 	and.w	r3, r3, #8
 8105de0:	2b00      	cmp	r3, #0
 8105de2:	d003      	beq.n	8105dec <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8105de4:	68fb      	ldr	r3, [r7, #12]
 8105de6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105dea:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105dec:	683b      	ldr	r3, [r7, #0]
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	f003 0320 	and.w	r3, r3, #32
 8105df4:	2b00      	cmp	r3, #0
 8105df6:	d022      	beq.n	8105e3e <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8105df8:	68fb      	ldr	r3, [r7, #12]
 8105dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105dfe:	60fb      	str	r3, [r7, #12]
 8105e00:	e01d      	b.n	8105e3e <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105e02:	683b      	ldr	r3, [r7, #0]
 8105e04:	681b      	ldr	r3, [r3, #0]
 8105e06:	f003 0301 	and.w	r3, r3, #1
 8105e0a:	2b00      	cmp	r3, #0
 8105e0c:	d003      	beq.n	8105e16 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8105e0e:	68fb      	ldr	r3, [r7, #12]
 8105e10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8105e14:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105e16:	683b      	ldr	r3, [r7, #0]
 8105e18:	681b      	ldr	r3, [r3, #0]
 8105e1a:	f003 0308 	and.w	r3, r3, #8
 8105e1e:	2b00      	cmp	r3, #0
 8105e20:	d003      	beq.n	8105e2a <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8105e22:	68fb      	ldr	r3, [r7, #12]
 8105e24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8105e28:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105e2a:	683b      	ldr	r3, [r7, #0]
 8105e2c:	681b      	ldr	r3, [r3, #0]
 8105e2e:	f003 0320 	and.w	r3, r3, #32
 8105e32:	2b00      	cmp	r3, #0
 8105e34:	d003      	beq.n	8105e3e <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8105e36:	68fb      	ldr	r3, [r7, #12]
 8105e38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8105e3c:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8105e3e:	68fb      	ldr	r3, [r7, #12]
 8105e40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105e48:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105e4a:	683b      	ldr	r3, [r7, #0]
 8105e4c:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8105e4e:	683b      	ldr	r3, [r7, #0]
 8105e50:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105e52:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8105e54:	683b      	ldr	r3, [r7, #0]
 8105e56:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8105e58:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8105e5a:	683b      	ldr	r3, [r7, #0]
 8105e5c:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8105e5e:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8105e60:	683b      	ldr	r3, [r7, #0]
 8105e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8105e64:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105e66:	68fa      	ldr	r2, [r7, #12]
 8105e68:	4313      	orrs	r3, r2
 8105e6a:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8105e6c:	687b      	ldr	r3, [r7, #4]
 8105e6e:	681b      	ldr	r3, [r3, #0]
 8105e70:	68fa      	ldr	r2, [r7, #12]
 8105e72:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8105e74:	687b      	ldr	r3, [r7, #4]
 8105e76:	2201      	movs	r2, #1
 8105e78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8105e7c:	687b      	ldr	r3, [r7, #4]
 8105e7e:	2200      	movs	r2, #0
 8105e80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8105e84:	2300      	movs	r3, #0
}
 8105e86:	4618      	mov	r0, r3
 8105e88:	3714      	adds	r7, #20
 8105e8a:	46bd      	mov	sp, r7
 8105e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e90:	4770      	bx	lr
	...

08105e94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8105e94:	b580      	push	{r7, lr}
 8105e96:	b08a      	sub	sp, #40	@ 0x28
 8105e98:	af00      	add	r7, sp, #0
 8105e9a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8105e9c:	687b      	ldr	r3, [r7, #4]
 8105e9e:	2b00      	cmp	r3, #0
 8105ea0:	d101      	bne.n	8105ea6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8105ea2:	2301      	movs	r3, #1
 8105ea4:	e290      	b.n	81063c8 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105ea6:	f7fc f8bf 	bl	8102028 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8105eaa:	687b      	ldr	r3, [r7, #4]
 8105eac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8105eb0:	2b01      	cmp	r3, #1
 8105eb2:	d113      	bne.n	8105edc <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105eb4:	687b      	ldr	r3, [r7, #4]
 8105eb6:	681b      	ldr	r3, [r3, #0]
 8105eb8:	4a96      	ldr	r2, [pc, #600]	@ (8106114 <HAL_SAI_Init+0x280>)
 8105eba:	4293      	cmp	r3, r2
 8105ebc:	d004      	beq.n	8105ec8 <HAL_SAI_Init+0x34>
 8105ebe:	687b      	ldr	r3, [r7, #4]
 8105ec0:	681b      	ldr	r3, [r3, #0]
 8105ec2:	4a95      	ldr	r2, [pc, #596]	@ (8106118 <HAL_SAI_Init+0x284>)
 8105ec4:	4293      	cmp	r3, r2
 8105ec6:	d107      	bne.n	8105ed8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105ecc:	2b01      	cmp	r3, #1
 8105ece:	d103      	bne.n	8105ed8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105ed4:	2b00      	cmp	r3, #0
 8105ed6:	d001      	beq.n	8105edc <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8105ed8:	2301      	movs	r3, #1
 8105eda:	e275      	b.n	81063c8 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105edc:	687b      	ldr	r3, [r7, #4]
 8105ede:	681b      	ldr	r3, [r3, #0]
 8105ee0:	4a8c      	ldr	r2, [pc, #560]	@ (8106114 <HAL_SAI_Init+0x280>)
 8105ee2:	4293      	cmp	r3, r2
 8105ee4:	d004      	beq.n	8105ef0 <HAL_SAI_Init+0x5c>
 8105ee6:	687b      	ldr	r3, [r7, #4]
 8105ee8:	681b      	ldr	r3, [r3, #0]
 8105eea:	4a8c      	ldr	r2, [pc, #560]	@ (810611c <HAL_SAI_Init+0x288>)
 8105eec:	4293      	cmp	r3, r2
 8105eee:	d102      	bne.n	8105ef6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8105ef0:	4b8b      	ldr	r3, [pc, #556]	@ (8106120 <HAL_SAI_Init+0x28c>)
 8105ef2:	61bb      	str	r3, [r7, #24]
 8105ef4:	e028      	b.n	8105f48 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	681b      	ldr	r3, [r3, #0]
 8105efa:	4a8a      	ldr	r2, [pc, #552]	@ (8106124 <HAL_SAI_Init+0x290>)
 8105efc:	4293      	cmp	r3, r2
 8105efe:	d004      	beq.n	8105f0a <HAL_SAI_Init+0x76>
 8105f00:	687b      	ldr	r3, [r7, #4]
 8105f02:	681b      	ldr	r3, [r3, #0]
 8105f04:	4a88      	ldr	r2, [pc, #544]	@ (8106128 <HAL_SAI_Init+0x294>)
 8105f06:	4293      	cmp	r3, r2
 8105f08:	d102      	bne.n	8105f10 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8105f0a:	4b88      	ldr	r3, [pc, #544]	@ (810612c <HAL_SAI_Init+0x298>)
 8105f0c:	61bb      	str	r3, [r7, #24]
 8105f0e:	e01b      	b.n	8105f48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	681b      	ldr	r3, [r3, #0]
 8105f14:	4a86      	ldr	r2, [pc, #536]	@ (8106130 <HAL_SAI_Init+0x29c>)
 8105f16:	4293      	cmp	r3, r2
 8105f18:	d004      	beq.n	8105f24 <HAL_SAI_Init+0x90>
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	4a85      	ldr	r2, [pc, #532]	@ (8106134 <HAL_SAI_Init+0x2a0>)
 8105f20:	4293      	cmp	r3, r2
 8105f22:	d102      	bne.n	8105f2a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8105f24:	4b84      	ldr	r3, [pc, #528]	@ (8106138 <HAL_SAI_Init+0x2a4>)
 8105f26:	61bb      	str	r3, [r7, #24]
 8105f28:	e00e      	b.n	8105f48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8105f2a:	687b      	ldr	r3, [r7, #4]
 8105f2c:	681b      	ldr	r3, [r3, #0]
 8105f2e:	4a7a      	ldr	r2, [pc, #488]	@ (8106118 <HAL_SAI_Init+0x284>)
 8105f30:	4293      	cmp	r3, r2
 8105f32:	d004      	beq.n	8105f3e <HAL_SAI_Init+0xaa>
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	4a80      	ldr	r2, [pc, #512]	@ (810613c <HAL_SAI_Init+0x2a8>)
 8105f3a:	4293      	cmp	r3, r2
 8105f3c:	d102      	bne.n	8105f44 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8105f3e:	4b80      	ldr	r3, [pc, #512]	@ (8106140 <HAL_SAI_Init+0x2ac>)
 8105f40:	61bb      	str	r3, [r7, #24]
 8105f42:	e001      	b.n	8105f48 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8105f44:	2301      	movs	r3, #1
 8105f46:	e23f      	b.n	81063c8 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8105f4e:	b2db      	uxtb	r3, r3
 8105f50:	2b00      	cmp	r3, #0
 8105f52:	d106      	bne.n	8105f62 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8105f54:	687b      	ldr	r3, [r7, #4]
 8105f56:	2200      	movs	r2, #0
 8105f58:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8105f5c:	6878      	ldr	r0, [r7, #4]
 8105f5e:	f7fb fd9d 	bl	8101a9c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8105f62:	6878      	ldr	r0, [r7, #4]
 8105f64:	f000 fa40 	bl	81063e8 <SAI_Disable>
 8105f68:	4603      	mov	r3, r0
 8105f6a:	2b00      	cmp	r3, #0
 8105f6c:	d001      	beq.n	8105f72 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8105f6e:	2301      	movs	r3, #1
 8105f70:	e22a      	b.n	81063c8 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	2202      	movs	r2, #2
 8105f76:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	68db      	ldr	r3, [r3, #12]
 8105f7e:	2b02      	cmp	r3, #2
 8105f80:	d00c      	beq.n	8105f9c <HAL_SAI_Init+0x108>
 8105f82:	2b02      	cmp	r3, #2
 8105f84:	d80d      	bhi.n	8105fa2 <HAL_SAI_Init+0x10e>
 8105f86:	2b00      	cmp	r3, #0
 8105f88:	d002      	beq.n	8105f90 <HAL_SAI_Init+0xfc>
 8105f8a:	2b01      	cmp	r3, #1
 8105f8c:	d003      	beq.n	8105f96 <HAL_SAI_Init+0x102>
 8105f8e:	e008      	b.n	8105fa2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8105f90:	2300      	movs	r3, #0
 8105f92:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105f94:	e008      	b.n	8105fa8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8105f96:	2310      	movs	r3, #16
 8105f98:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105f9a:	e005      	b.n	8105fa8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8105f9c:	2320      	movs	r3, #32
 8105f9e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105fa0:	e002      	b.n	8105fa8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8105fa2:	2300      	movs	r3, #0
 8105fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105fa6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8105fa8:	687b      	ldr	r3, [r7, #4]
 8105faa:	689b      	ldr	r3, [r3, #8]
 8105fac:	2b05      	cmp	r3, #5
 8105fae:	d832      	bhi.n	8106016 <HAL_SAI_Init+0x182>
 8105fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8105fb8 <HAL_SAI_Init+0x124>)
 8105fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105fb6:	bf00      	nop
 8105fb8:	08105fd1 	.word	0x08105fd1
 8105fbc:	08105fd7 	.word	0x08105fd7
 8105fc0:	08105fdf 	.word	0x08105fdf
 8105fc4:	08105fe7 	.word	0x08105fe7
 8105fc8:	08105ff7 	.word	0x08105ff7
 8105fcc:	08106007 	.word	0x08106007
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8105fd0:	2300      	movs	r3, #0
 8105fd2:	61fb      	str	r3, [r7, #28]
      break;
 8105fd4:	e022      	b.n	810601c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8105fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8105fda:	61fb      	str	r3, [r7, #28]
      break;
 8105fdc:	e01e      	b.n	810601c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105fde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105fe2:	61fb      	str	r3, [r7, #28]
      break;
 8105fe4:	e01a      	b.n	810601c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105fe6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105fea:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8105fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105fee:	f043 0301 	orr.w	r3, r3, #1
 8105ff2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105ff4:	e012      	b.n	810601c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105ff6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105ffa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8105ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105ffe:	f043 0302 	orr.w	r3, r3, #2
 8106002:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8106004:	e00a      	b.n	810601c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106006:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810600a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 810600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810600e:	f043 0303 	orr.w	r3, r3, #3
 8106012:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8106014:	e002      	b.n	810601c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8106016:	2300      	movs	r3, #0
 8106018:	61fb      	str	r3, [r7, #28]
      break;
 810601a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 810601c:	69bb      	ldr	r3, [r7, #24]
 810601e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8106020:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8106022:	687b      	ldr	r3, [r7, #4]
 8106024:	6a1b      	ldr	r3, [r3, #32]
 8106026:	2b00      	cmp	r3, #0
 8106028:	f000 80c5 	beq.w	81061b6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 810602c:	2300      	movs	r3, #0
 810602e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	681b      	ldr	r3, [r3, #0]
 8106034:	4a37      	ldr	r2, [pc, #220]	@ (8106114 <HAL_SAI_Init+0x280>)
 8106036:	4293      	cmp	r3, r2
 8106038:	d004      	beq.n	8106044 <HAL_SAI_Init+0x1b0>
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	681b      	ldr	r3, [r3, #0]
 810603e:	4a37      	ldr	r2, [pc, #220]	@ (810611c <HAL_SAI_Init+0x288>)
 8106040:	4293      	cmp	r3, r2
 8106042:	d106      	bne.n	8106052 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8106044:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8106048:	f04f 0100 	mov.w	r1, #0
 810604c:	f7fe fa36 	bl	81044bc <HAL_RCCEx_GetPeriphCLKFreq>
 8106050:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8106052:	687b      	ldr	r3, [r7, #4]
 8106054:	681b      	ldr	r3, [r3, #0]
 8106056:	4a33      	ldr	r2, [pc, #204]	@ (8106124 <HAL_SAI_Init+0x290>)
 8106058:	4293      	cmp	r3, r2
 810605a:	d004      	beq.n	8106066 <HAL_SAI_Init+0x1d2>
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	681b      	ldr	r3, [r3, #0]
 8106060:	4a31      	ldr	r2, [pc, #196]	@ (8106128 <HAL_SAI_Init+0x294>)
 8106062:	4293      	cmp	r3, r2
 8106064:	d106      	bne.n	8106074 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8106066:	f44f 7000 	mov.w	r0, #512	@ 0x200
 810606a:	f04f 0100 	mov.w	r1, #0
 810606e:	f7fe fa25 	bl	81044bc <HAL_RCCEx_GetPeriphCLKFreq>
 8106072:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8106074:	687b      	ldr	r3, [r7, #4]
 8106076:	681b      	ldr	r3, [r3, #0]
 8106078:	4a2d      	ldr	r2, [pc, #180]	@ (8106130 <HAL_SAI_Init+0x29c>)
 810607a:	4293      	cmp	r3, r2
 810607c:	d004      	beq.n	8106088 <HAL_SAI_Init+0x1f4>
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	681b      	ldr	r3, [r3, #0]
 8106082:	4a2c      	ldr	r2, [pc, #176]	@ (8106134 <HAL_SAI_Init+0x2a0>)
 8106084:	4293      	cmp	r3, r2
 8106086:	d106      	bne.n	8106096 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8106088:	f44f 7000 	mov.w	r0, #512	@ 0x200
 810608c:	f04f 0100 	mov.w	r1, #0
 8106090:	f7fe fa14 	bl	81044bc <HAL_RCCEx_GetPeriphCLKFreq>
 8106094:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8106096:	687b      	ldr	r3, [r7, #4]
 8106098:	681b      	ldr	r3, [r3, #0]
 810609a:	4a1f      	ldr	r2, [pc, #124]	@ (8106118 <HAL_SAI_Init+0x284>)
 810609c:	4293      	cmp	r3, r2
 810609e:	d106      	bne.n	81060ae <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 81060a0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 81060a4:	f04f 0100 	mov.w	r1, #0
 81060a8:	f7fe fa08 	bl	81044bc <HAL_RCCEx_GetPeriphCLKFreq>
 81060ac:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 81060ae:	687b      	ldr	r3, [r7, #4]
 81060b0:	681b      	ldr	r3, [r3, #0]
 81060b2:	4a22      	ldr	r2, [pc, #136]	@ (810613c <HAL_SAI_Init+0x2a8>)
 81060b4:	4293      	cmp	r3, r2
 81060b6:	d106      	bne.n	81060c6 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 81060b8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 81060bc:	f04f 0100 	mov.w	r1, #0
 81060c0:	f7fe f9fc 	bl	81044bc <HAL_RCCEx_GetPeriphCLKFreq>
 81060c4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 81060c6:	687b      	ldr	r3, [r7, #4]
 81060c8:	699b      	ldr	r3, [r3, #24]
 81060ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81060ce:	d139      	bne.n	8106144 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81060d0:	687b      	ldr	r3, [r7, #4]
 81060d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81060d4:	2b04      	cmp	r3, #4
 81060d6:	d102      	bne.n	81060de <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 81060d8:	2340      	movs	r3, #64	@ 0x40
 81060da:	60fb      	str	r3, [r7, #12]
 81060dc:	e00a      	b.n	81060f4 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81060e2:	2b08      	cmp	r3, #8
 81060e4:	d103      	bne.n	81060ee <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 81060e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81060ea:	60fb      	str	r3, [r7, #12]
 81060ec:	e002      	b.n	81060f4 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81060f2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 81060f4:	697a      	ldr	r2, [r7, #20]
 81060f6:	4613      	mov	r3, r2
 81060f8:	009b      	lsls	r3, r3, #2
 81060fa:	4413      	add	r3, r2
 81060fc:	005b      	lsls	r3, r3, #1
 81060fe:	4619      	mov	r1, r3
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	6a1b      	ldr	r3, [r3, #32]
 8106104:	68fa      	ldr	r2, [r7, #12]
 8106106:	fb02 f303 	mul.w	r3, r2, r3
 810610a:	fbb1 f3f3 	udiv	r3, r1, r3
 810610e:	613b      	str	r3, [r7, #16]
 8106110:	e030      	b.n	8106174 <HAL_SAI_Init+0x2e0>
 8106112:	bf00      	nop
 8106114:	40015804 	.word	0x40015804
 8106118:	58005404 	.word	0x58005404
 810611c:	40015824 	.word	0x40015824
 8106120:	40015800 	.word	0x40015800
 8106124:	40015c04 	.word	0x40015c04
 8106128:	40015c24 	.word	0x40015c24
 810612c:	40015c00 	.word	0x40015c00
 8106130:	40016004 	.word	0x40016004
 8106134:	40016024 	.word	0x40016024
 8106138:	40016000 	.word	0x40016000
 810613c:	58005424 	.word	0x58005424
 8106140:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106148:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810614c:	d101      	bne.n	8106152 <HAL_SAI_Init+0x2be>
 810614e:	2302      	movs	r3, #2
 8106150:	e000      	b.n	8106154 <HAL_SAI_Init+0x2c0>
 8106152:	2301      	movs	r3, #1
 8106154:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8106156:	697a      	ldr	r2, [r7, #20]
 8106158:	4613      	mov	r3, r2
 810615a:	009b      	lsls	r3, r3, #2
 810615c:	4413      	add	r3, r2
 810615e:	005b      	lsls	r3, r3, #1
 8106160:	4619      	mov	r1, r3
 8106162:	687b      	ldr	r3, [r7, #4]
 8106164:	6a1b      	ldr	r3, [r3, #32]
 8106166:	68ba      	ldr	r2, [r7, #8]
 8106168:	fb02 f303 	mul.w	r3, r2, r3
 810616c:	021b      	lsls	r3, r3, #8
 810616e:	fbb1 f3f3 	udiv	r3, r1, r3
 8106172:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8106174:	693b      	ldr	r3, [r7, #16]
 8106176:	4a96      	ldr	r2, [pc, #600]	@ (81063d0 <HAL_SAI_Init+0x53c>)
 8106178:	fba2 2303 	umull	r2, r3, r2, r3
 810617c:	08da      	lsrs	r2, r3, #3
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8106182:	6939      	ldr	r1, [r7, #16]
 8106184:	4b92      	ldr	r3, [pc, #584]	@ (81063d0 <HAL_SAI_Init+0x53c>)
 8106186:	fba3 2301 	umull	r2, r3, r3, r1
 810618a:	08da      	lsrs	r2, r3, #3
 810618c:	4613      	mov	r3, r2
 810618e:	009b      	lsls	r3, r3, #2
 8106190:	4413      	add	r3, r2
 8106192:	005b      	lsls	r3, r3, #1
 8106194:	1aca      	subs	r2, r1, r3
 8106196:	2a08      	cmp	r2, #8
 8106198:	d904      	bls.n	81061a4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810619e:	1c5a      	adds	r2, r3, #1
 81061a0:	687b      	ldr	r3, [r7, #4]
 81061a2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81061a4:	687b      	ldr	r3, [r7, #4]
 81061a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81061a8:	2b04      	cmp	r3, #4
 81061aa:	d104      	bne.n	81061b6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81061b0:	085a      	lsrs	r2, r3, #1
 81061b2:	687b      	ldr	r3, [r7, #4]
 81061b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	685b      	ldr	r3, [r3, #4]
 81061ba:	2b00      	cmp	r3, #0
 81061bc:	d003      	beq.n	81061c6 <HAL_SAI_Init+0x332>
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	685b      	ldr	r3, [r3, #4]
 81061c2:	2b02      	cmp	r3, #2
 81061c4:	d109      	bne.n	81061da <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 81061c6:	687b      	ldr	r3, [r7, #4]
 81061c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81061ca:	2b01      	cmp	r3, #1
 81061cc:	d101      	bne.n	81061d2 <HAL_SAI_Init+0x33e>
 81061ce:	2300      	movs	r3, #0
 81061d0:	e001      	b.n	81061d6 <HAL_SAI_Init+0x342>
 81061d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81061d6:	623b      	str	r3, [r7, #32]
 81061d8:	e008      	b.n	81061ec <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81061de:	2b01      	cmp	r3, #1
 81061e0:	d102      	bne.n	81061e8 <HAL_SAI_Init+0x354>
 81061e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81061e6:	e000      	b.n	81061ea <HAL_SAI_Init+0x356>
 81061e8:	2300      	movs	r3, #0
 81061ea:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81061ec:	f7fb ff1c 	bl	8102028 <HAL_GetREVID>
 81061f0:	4603      	mov	r3, r0
 81061f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81061f6:	d331      	bcc.n	810625c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 81061f8:	687b      	ldr	r3, [r7, #4]
 81061fa:	681b      	ldr	r3, [r3, #0]
 81061fc:	6819      	ldr	r1, [r3, #0]
 81061fe:	687b      	ldr	r3, [r7, #4]
 8106200:	681a      	ldr	r2, [r3, #0]
 8106202:	4b74      	ldr	r3, [pc, #464]	@ (81063d4 <HAL_SAI_Init+0x540>)
 8106204:	400b      	ands	r3, r1
 8106206:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106208:	687b      	ldr	r3, [r7, #4]
 810620a:	681b      	ldr	r3, [r3, #0]
 810620c:	6819      	ldr	r1, [r3, #0]
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	685a      	ldr	r2, [r3, #4]
 8106212:	687b      	ldr	r3, [r7, #4]
 8106214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106216:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106218:	687b      	ldr	r3, [r7, #4]
 810621a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810621c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106222:	431a      	orrs	r2, r3
 8106224:	6a3b      	ldr	r3, [r7, #32]
 8106226:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106228:	69fb      	ldr	r3, [r7, #28]
 810622a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810622c:	687b      	ldr	r3, [r7, #4]
 810622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106230:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	695b      	ldr	r3, [r3, #20]
 8106236:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810623c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106242:	051b      	lsls	r3, r3, #20
 8106244:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810624a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810624c:	687b      	ldr	r3, [r7, #4]
 810624e:	691b      	ldr	r3, [r3, #16]
 8106250:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106252:	687b      	ldr	r3, [r7, #4]
 8106254:	681b      	ldr	r3, [r3, #0]
 8106256:	430a      	orrs	r2, r1
 8106258:	601a      	str	r2, [r3, #0]
 810625a:	e02d      	b.n	81062b8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	681b      	ldr	r3, [r3, #0]
 8106260:	6819      	ldr	r1, [r3, #0]
 8106262:	687b      	ldr	r3, [r7, #4]
 8106264:	681a      	ldr	r2, [r3, #0]
 8106266:	4b5c      	ldr	r3, [pc, #368]	@ (81063d8 <HAL_SAI_Init+0x544>)
 8106268:	400b      	ands	r3, r1
 810626a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810626c:	687b      	ldr	r3, [r7, #4]
 810626e:	681b      	ldr	r3, [r3, #0]
 8106270:	6819      	ldr	r1, [r3, #0]
 8106272:	687b      	ldr	r3, [r7, #4]
 8106274:	685a      	ldr	r2, [r3, #4]
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810627a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106280:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106282:	687b      	ldr	r3, [r7, #4]
 8106284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106286:	431a      	orrs	r2, r3
 8106288:	6a3b      	ldr	r3, [r7, #32]
 810628a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 810628c:	69fb      	ldr	r3, [r7, #28]
 810628e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106290:	687b      	ldr	r3, [r7, #4]
 8106292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106294:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	695b      	ldr	r3, [r3, #20]
 810629a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810629c:	687b      	ldr	r3, [r7, #4]
 810629e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81062a0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81062a6:	051b      	lsls	r3, r3, #20
 81062a8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81062aa:	687b      	ldr	r3, [r7, #4]
 81062ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81062ae:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	681b      	ldr	r3, [r3, #0]
 81062b4:	430a      	orrs	r2, r1
 81062b6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81062b8:	687b      	ldr	r3, [r7, #4]
 81062ba:	681b      	ldr	r3, [r3, #0]
 81062bc:	685b      	ldr	r3, [r3, #4]
 81062be:	687a      	ldr	r2, [r7, #4]
 81062c0:	6812      	ldr	r2, [r2, #0]
 81062c2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 81062c6:	f023 030f 	bic.w	r3, r3, #15
 81062ca:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	681b      	ldr	r3, [r3, #0]
 81062d0:	6859      	ldr	r1, [r3, #4]
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	69da      	ldr	r2, [r3, #28]
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81062da:	431a      	orrs	r2, r3
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81062e0:	431a      	orrs	r2, r3
 81062e2:	687b      	ldr	r3, [r7, #4]
 81062e4:	681b      	ldr	r3, [r3, #0]
 81062e6:	430a      	orrs	r2, r1
 81062e8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	681b      	ldr	r3, [r3, #0]
 81062ee:	6899      	ldr	r1, [r3, #8]
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	681a      	ldr	r2, [r3, #0]
 81062f4:	4b39      	ldr	r3, [pc, #228]	@ (81063dc <HAL_SAI_Init+0x548>)
 81062f6:	400b      	ands	r3, r1
 81062f8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81062fa:	687b      	ldr	r3, [r7, #4]
 81062fc:	681b      	ldr	r3, [r3, #0]
 81062fe:	6899      	ldr	r1, [r3, #8]
 8106300:	687b      	ldr	r3, [r7, #4]
 8106302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106304:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8106306:	687b      	ldr	r3, [r7, #4]
 8106308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810630a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 810630c:	687b      	ldr	r3, [r7, #4]
 810630e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8106310:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8106316:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810631c:	3b01      	subs	r3, #1
 810631e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8106320:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	681b      	ldr	r3, [r3, #0]
 8106326:	430a      	orrs	r2, r1
 8106328:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 810632a:	687b      	ldr	r3, [r7, #4]
 810632c:	681b      	ldr	r3, [r3, #0]
 810632e:	68d9      	ldr	r1, [r3, #12]
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	681a      	ldr	r2, [r3, #0]
 8106334:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8106338:	400b      	ands	r3, r1
 810633a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	681b      	ldr	r3, [r3, #0]
 8106340:	68d9      	ldr	r1, [r3, #12]
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8106346:	687b      	ldr	r3, [r7, #4]
 8106348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810634a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 810634c:	687b      	ldr	r3, [r7, #4]
 810634e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106350:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106352:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106358:	3b01      	subs	r3, #1
 810635a:	021b      	lsls	r3, r3, #8
 810635c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	681b      	ldr	r3, [r3, #0]
 8106362:	430a      	orrs	r2, r1
 8106364:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8106366:	687b      	ldr	r3, [r7, #4]
 8106368:	681b      	ldr	r3, [r3, #0]
 810636a:	4a1d      	ldr	r2, [pc, #116]	@ (81063e0 <HAL_SAI_Init+0x54c>)
 810636c:	4293      	cmp	r3, r2
 810636e:	d004      	beq.n	810637a <HAL_SAI_Init+0x4e6>
 8106370:	687b      	ldr	r3, [r7, #4]
 8106372:	681b      	ldr	r3, [r3, #0]
 8106374:	4a1b      	ldr	r2, [pc, #108]	@ (81063e4 <HAL_SAI_Init+0x550>)
 8106376:	4293      	cmp	r3, r2
 8106378:	d119      	bne.n	81063ae <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 810637a:	69bb      	ldr	r3, [r7, #24]
 810637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810637e:	f023 0201 	bic.w	r2, r3, #1
 8106382:	69bb      	ldr	r3, [r7, #24]
 8106384:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810638c:	2b01      	cmp	r3, #1
 810638e:	d10e      	bne.n	81063ae <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106390:	687b      	ldr	r3, [r7, #4]
 8106392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106398:	3b01      	subs	r3, #1
 810639a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 810639c:	431a      	orrs	r2, r3
 810639e:	69bb      	ldr	r3, [r7, #24]
 81063a0:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81063a2:	69bb      	ldr	r3, [r7, #24]
 81063a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81063a6:	f043 0201 	orr.w	r2, r3, #1
 81063aa:	69bb      	ldr	r3, [r7, #24]
 81063ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	2200      	movs	r2, #0
 81063b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	2201      	movs	r2, #1
 81063ba:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	2200      	movs	r2, #0
 81063c2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 81063c6:	2300      	movs	r3, #0
}
 81063c8:	4618      	mov	r0, r3
 81063ca:	3728      	adds	r7, #40	@ 0x28
 81063cc:	46bd      	mov	sp, r7
 81063ce:	bd80      	pop	{r7, pc}
 81063d0:	cccccccd 	.word	0xcccccccd
 81063d4:	f005c010 	.word	0xf005c010
 81063d8:	f805c010 	.word	0xf805c010
 81063dc:	fff88000 	.word	0xfff88000
 81063e0:	40015804 	.word	0x40015804
 81063e4:	58005404 	.word	0x58005404

081063e8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 81063e8:	b480      	push	{r7}
 81063ea:	b085      	sub	sp, #20
 81063ec:	af00      	add	r7, sp, #0
 81063ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 81063f0:	4b18      	ldr	r3, [pc, #96]	@ (8106454 <SAI_Disable+0x6c>)
 81063f2:	681b      	ldr	r3, [r3, #0]
 81063f4:	4a18      	ldr	r2, [pc, #96]	@ (8106458 <SAI_Disable+0x70>)
 81063f6:	fba2 2303 	umull	r2, r3, r2, r3
 81063fa:	0b1b      	lsrs	r3, r3, #12
 81063fc:	009b      	lsls	r3, r3, #2
 81063fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8106400:	2300      	movs	r3, #0
 8106402:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8106404:	687b      	ldr	r3, [r7, #4]
 8106406:	681b      	ldr	r3, [r3, #0]
 8106408:	681a      	ldr	r2, [r3, #0]
 810640a:	687b      	ldr	r3, [r7, #4]
 810640c:	681b      	ldr	r3, [r3, #0]
 810640e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8106412:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8106414:	68fb      	ldr	r3, [r7, #12]
 8106416:	2b00      	cmp	r3, #0
 8106418:	d10a      	bne.n	8106430 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106420:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8106424:	687b      	ldr	r3, [r7, #4]
 8106426:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 810642a:	2303      	movs	r3, #3
 810642c:	72fb      	strb	r3, [r7, #11]
      break;
 810642e:	e009      	b.n	8106444 <SAI_Disable+0x5c>
    }
    count--;
 8106430:	68fb      	ldr	r3, [r7, #12]
 8106432:	3b01      	subs	r3, #1
 8106434:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	681b      	ldr	r3, [r3, #0]
 810643a:	681b      	ldr	r3, [r3, #0]
 810643c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106440:	2b00      	cmp	r3, #0
 8106442:	d1e7      	bne.n	8106414 <SAI_Disable+0x2c>

  return status;
 8106444:	7afb      	ldrb	r3, [r7, #11]
}
 8106446:	4618      	mov	r0, r3
 8106448:	3714      	adds	r7, #20
 810644a:	46bd      	mov	sp, r7
 810644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106450:	4770      	bx	lr
 8106452:	bf00      	nop
 8106454:	10000000 	.word	0x10000000
 8106458:	95cbec1b 	.word	0x95cbec1b

0810645c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 810645c:	b580      	push	{r7, lr}
 810645e:	b084      	sub	sp, #16
 8106460:	af00      	add	r7, sp, #0
 8106462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	2b00      	cmp	r3, #0
 8106468:	d101      	bne.n	810646e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 810646a:	2301      	movs	r3, #1
 810646c:	e05e      	b.n	810652c <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 810646e:	687b      	ldr	r3, [r7, #4]
 8106470:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8106474:	b2db      	uxtb	r3, r3
 8106476:	2b00      	cmp	r3, #0
 8106478:	d106      	bne.n	8106488 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	2200      	movs	r2, #0
 810647e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8106482:	6878      	ldr	r0, [r7, #4]
 8106484:	f7fb f8f6 	bl	8101674 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	2202      	movs	r2, #2
 810648c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	681b      	ldr	r3, [r3, #0]
 8106494:	681a      	ldr	r2, [r3, #0]
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	681b      	ldr	r3, [r3, #0]
 810649a:	f022 0203 	bic.w	r2, r2, #3
 810649e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 81064a0:	687b      	ldr	r3, [r7, #4]
 81064a2:	681b      	ldr	r3, [r3, #0]
 81064a4:	681b      	ldr	r3, [r3, #0]
 81064a6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 81064a8:	68fa      	ldr	r2, [r7, #12]
 81064aa:	4b22      	ldr	r3, [pc, #136]	@ (8106534 <HAL_SPDIFRX_Init+0xd8>)
 81064ac:	4013      	ands	r3, r2
 81064ae:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 81064b0:	687b      	ldr	r3, [r7, #4]
 81064b2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 81064b8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 81064ba:	687b      	ldr	r3, [r7, #4]
 81064bc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 81064be:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 81064c4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 81064ca:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 81064cc:	687b      	ldr	r3, [r7, #4]
 81064ce:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 81064d0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 81064d2:	687b      	ldr	r3, [r7, #4]
 81064d4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 81064d6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 81064dc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 81064e2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 81064e8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 81064ea:	68fa      	ldr	r2, [r7, #12]
 81064ec:	4313      	orrs	r3, r2
 81064ee:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 81064f6:	2b01      	cmp	r3, #1
 81064f8:	d103      	bne.n	8106502 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 81064fa:	68fb      	ldr	r3, [r7, #12]
 81064fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106500:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8106508:	2b01      	cmp	r3, #1
 810650a:	d103      	bne.n	8106514 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 810650c:	68fb      	ldr	r3, [r7, #12]
 810650e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8106512:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	68fa      	ldr	r2, [r7, #12]
 810651a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	2200      	movs	r2, #0
 8106520:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	2201      	movs	r2, #1
 8106526:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 810652a:	2300      	movs	r3, #0
}
 810652c:	4618      	mov	r0, r3
 810652e:	3710      	adds	r7, #16
 8106530:	46bd      	mov	sp, r7
 8106532:	bd80      	pop	{r7, pc}
 8106534:	ffc88407 	.word	0xffc88407

08106538 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8106538:	b580      	push	{r7, lr}
 810653a:	b084      	sub	sp, #16
 810653c:	af00      	add	r7, sp, #0
 810653e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	2b00      	cmp	r3, #0
 8106544:	d101      	bne.n	810654a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8106546:	2301      	movs	r3, #1
 8106548:	e10f      	b.n	810676a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810654a:	687b      	ldr	r3, [r7, #4]
 810654c:	2200      	movs	r2, #0
 810654e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	681b      	ldr	r3, [r3, #0]
 8106554:	4a87      	ldr	r2, [pc, #540]	@ (8106774 <HAL_SPI_Init+0x23c>)
 8106556:	4293      	cmp	r3, r2
 8106558:	d00f      	beq.n	810657a <HAL_SPI_Init+0x42>
 810655a:	687b      	ldr	r3, [r7, #4]
 810655c:	681b      	ldr	r3, [r3, #0]
 810655e:	4a86      	ldr	r2, [pc, #536]	@ (8106778 <HAL_SPI_Init+0x240>)
 8106560:	4293      	cmp	r3, r2
 8106562:	d00a      	beq.n	810657a <HAL_SPI_Init+0x42>
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	681b      	ldr	r3, [r3, #0]
 8106568:	4a84      	ldr	r2, [pc, #528]	@ (810677c <HAL_SPI_Init+0x244>)
 810656a:	4293      	cmp	r3, r2
 810656c:	d005      	beq.n	810657a <HAL_SPI_Init+0x42>
 810656e:	687b      	ldr	r3, [r7, #4]
 8106570:	68db      	ldr	r3, [r3, #12]
 8106572:	2b0f      	cmp	r3, #15
 8106574:	d901      	bls.n	810657a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8106576:	2301      	movs	r3, #1
 8106578:	e0f7      	b.n	810676a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810657a:	6878      	ldr	r0, [r7, #4]
 810657c:	f000 f900 	bl	8106780 <SPI_GetPacketSize>
 8106580:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	681b      	ldr	r3, [r3, #0]
 8106586:	4a7b      	ldr	r2, [pc, #492]	@ (8106774 <HAL_SPI_Init+0x23c>)
 8106588:	4293      	cmp	r3, r2
 810658a:	d00c      	beq.n	81065a6 <HAL_SPI_Init+0x6e>
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	681b      	ldr	r3, [r3, #0]
 8106590:	4a79      	ldr	r2, [pc, #484]	@ (8106778 <HAL_SPI_Init+0x240>)
 8106592:	4293      	cmp	r3, r2
 8106594:	d007      	beq.n	81065a6 <HAL_SPI_Init+0x6e>
 8106596:	687b      	ldr	r3, [r7, #4]
 8106598:	681b      	ldr	r3, [r3, #0]
 810659a:	4a78      	ldr	r2, [pc, #480]	@ (810677c <HAL_SPI_Init+0x244>)
 810659c:	4293      	cmp	r3, r2
 810659e:	d002      	beq.n	81065a6 <HAL_SPI_Init+0x6e>
 81065a0:	68fb      	ldr	r3, [r7, #12]
 81065a2:	2b08      	cmp	r3, #8
 81065a4:	d811      	bhi.n	81065ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81065aa:	4a72      	ldr	r2, [pc, #456]	@ (8106774 <HAL_SPI_Init+0x23c>)
 81065ac:	4293      	cmp	r3, r2
 81065ae:	d009      	beq.n	81065c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	681b      	ldr	r3, [r3, #0]
 81065b4:	4a70      	ldr	r2, [pc, #448]	@ (8106778 <HAL_SPI_Init+0x240>)
 81065b6:	4293      	cmp	r3, r2
 81065b8:	d004      	beq.n	81065c4 <HAL_SPI_Init+0x8c>
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	681b      	ldr	r3, [r3, #0]
 81065be:	4a6f      	ldr	r2, [pc, #444]	@ (810677c <HAL_SPI_Init+0x244>)
 81065c0:	4293      	cmp	r3, r2
 81065c2:	d104      	bne.n	81065ce <HAL_SPI_Init+0x96>
 81065c4:	68fb      	ldr	r3, [r7, #12]
 81065c6:	2b10      	cmp	r3, #16
 81065c8:	d901      	bls.n	81065ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81065ca:	2301      	movs	r3, #1
 81065cc:	e0cd      	b.n	810676a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81065d4:	b2db      	uxtb	r3, r3
 81065d6:	2b00      	cmp	r3, #0
 81065d8:	d106      	bne.n	81065e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	2200      	movs	r2, #0
 81065de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81065e2:	6878      	ldr	r0, [r7, #4]
 81065e4:	f7fb f8ac 	bl	8101740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81065e8:	687b      	ldr	r3, [r7, #4]
 81065ea:	2202      	movs	r2, #2
 81065ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	681b      	ldr	r3, [r3, #0]
 81065f4:	681a      	ldr	r2, [r3, #0]
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	681b      	ldr	r3, [r3, #0]
 81065fa:	f022 0201 	bic.w	r2, r2, #1
 81065fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	681b      	ldr	r3, [r3, #0]
 8106604:	689b      	ldr	r3, [r3, #8]
 8106606:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810660a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810660c:	687b      	ldr	r3, [r7, #4]
 810660e:	699b      	ldr	r3, [r3, #24]
 8106610:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106614:	d119      	bne.n	810664a <HAL_SPI_Init+0x112>
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	685b      	ldr	r3, [r3, #4]
 810661a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810661e:	d103      	bne.n	8106628 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106620:	687b      	ldr	r3, [r7, #4]
 8106622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106624:	2b00      	cmp	r3, #0
 8106626:	d008      	beq.n	810663a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810662c:	2b00      	cmp	r3, #0
 810662e:	d10c      	bne.n	810664a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106638:	d107      	bne.n	810664a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	681b      	ldr	r3, [r3, #0]
 810663e:	681a      	ldr	r2, [r3, #0]
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	681b      	ldr	r3, [r3, #0]
 8106644:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8106648:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	685b      	ldr	r3, [r3, #4]
 810664e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8106652:	2b00      	cmp	r3, #0
 8106654:	d00f      	beq.n	8106676 <HAL_SPI_Init+0x13e>
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	68db      	ldr	r3, [r3, #12]
 810665a:	2b06      	cmp	r3, #6
 810665c:	d90b      	bls.n	8106676 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	681b      	ldr	r3, [r3, #0]
 8106664:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8106668:	687b      	ldr	r3, [r7, #4]
 810666a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	430a      	orrs	r2, r1
 8106672:	601a      	str	r2, [r3, #0]
 8106674:	e007      	b.n	8106686 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	681a      	ldr	r2, [r3, #0]
 810667c:	687b      	ldr	r3, [r7, #4]
 810667e:	681b      	ldr	r3, [r3, #0]
 8106680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106684:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	69da      	ldr	r2, [r3, #28]
 810668a:	687b      	ldr	r3, [r7, #4]
 810668c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810668e:	431a      	orrs	r2, r3
 8106690:	68bb      	ldr	r3, [r7, #8]
 8106692:	431a      	orrs	r2, r3
 8106694:	687b      	ldr	r3, [r7, #4]
 8106696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106698:	ea42 0103 	orr.w	r1, r2, r3
 810669c:	687b      	ldr	r3, [r7, #4]
 810669e:	68da      	ldr	r2, [r3, #12]
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	681b      	ldr	r3, [r3, #0]
 81066a4:	430a      	orrs	r2, r1
 81066a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81066b0:	431a      	orrs	r2, r3
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81066b6:	431a      	orrs	r2, r3
 81066b8:	687b      	ldr	r3, [r7, #4]
 81066ba:	699b      	ldr	r3, [r3, #24]
 81066bc:	431a      	orrs	r2, r3
 81066be:	687b      	ldr	r3, [r7, #4]
 81066c0:	691b      	ldr	r3, [r3, #16]
 81066c2:	431a      	orrs	r2, r3
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	695b      	ldr	r3, [r3, #20]
 81066c8:	431a      	orrs	r2, r3
 81066ca:	687b      	ldr	r3, [r7, #4]
 81066cc:	6a1b      	ldr	r3, [r3, #32]
 81066ce:	431a      	orrs	r2, r3
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	685b      	ldr	r3, [r3, #4]
 81066d4:	431a      	orrs	r2, r3
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81066da:	431a      	orrs	r2, r3
 81066dc:	687b      	ldr	r3, [r7, #4]
 81066de:	689b      	ldr	r3, [r3, #8]
 81066e0:	431a      	orrs	r2, r3
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81066e6:	ea42 0103 	orr.w	r1, r2, r3
 81066ea:	687b      	ldr	r3, [r7, #4]
 81066ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	681b      	ldr	r3, [r3, #0]
 81066f2:	430a      	orrs	r2, r1
 81066f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81066f6:	687b      	ldr	r3, [r7, #4]
 81066f8:	685b      	ldr	r3, [r3, #4]
 81066fa:	2b00      	cmp	r3, #0
 81066fc:	d113      	bne.n	8106726 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	681b      	ldr	r3, [r3, #0]
 8106702:	689b      	ldr	r3, [r3, #8]
 8106704:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	681b      	ldr	r3, [r3, #0]
 810670c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8106710:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	681b      	ldr	r3, [r3, #0]
 8106716:	689b      	ldr	r3, [r3, #8]
 8106718:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810671c:	687b      	ldr	r3, [r7, #4]
 810671e:	681b      	ldr	r3, [r3, #0]
 8106720:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8106724:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8106726:	687b      	ldr	r3, [r7, #4]
 8106728:	681b      	ldr	r3, [r3, #0]
 810672a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810672c:	687b      	ldr	r3, [r7, #4]
 810672e:	681b      	ldr	r3, [r3, #0]
 8106730:	f022 0201 	bic.w	r2, r2, #1
 8106734:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8106736:	687b      	ldr	r3, [r7, #4]
 8106738:	685b      	ldr	r3, [r3, #4]
 810673a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810673e:	2b00      	cmp	r3, #0
 8106740:	d00a      	beq.n	8106758 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	681b      	ldr	r3, [r3, #0]
 8106746:	68db      	ldr	r3, [r3, #12]
 8106748:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	681b      	ldr	r3, [r3, #0]
 8106754:	430a      	orrs	r2, r1
 8106756:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	2200      	movs	r2, #0
 810675c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	2201      	movs	r2, #1
 8106764:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8106768:	2300      	movs	r3, #0
}
 810676a:	4618      	mov	r0, r3
 810676c:	3710      	adds	r7, #16
 810676e:	46bd      	mov	sp, r7
 8106770:	bd80      	pop	{r7, pc}
 8106772:	bf00      	nop
 8106774:	40013000 	.word	0x40013000
 8106778:	40003800 	.word	0x40003800
 810677c:	40003c00 	.word	0x40003c00

08106780 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8106780:	b480      	push	{r7}
 8106782:	b085      	sub	sp, #20
 8106784:	af00      	add	r7, sp, #0
 8106786:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8106788:	687b      	ldr	r3, [r7, #4]
 810678a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810678c:	095b      	lsrs	r3, r3, #5
 810678e:	3301      	adds	r3, #1
 8106790:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	68db      	ldr	r3, [r3, #12]
 8106796:	3301      	adds	r3, #1
 8106798:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810679a:	68bb      	ldr	r3, [r7, #8]
 810679c:	3307      	adds	r3, #7
 810679e:	08db      	lsrs	r3, r3, #3
 81067a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81067a2:	68bb      	ldr	r3, [r7, #8]
 81067a4:	68fa      	ldr	r2, [r7, #12]
 81067a6:	fb02 f303 	mul.w	r3, r2, r3
}
 81067aa:	4618      	mov	r0, r3
 81067ac:	3714      	adds	r7, #20
 81067ae:	46bd      	mov	sp, r7
 81067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b4:	4770      	bx	lr

081067b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81067b6:	b580      	push	{r7, lr}
 81067b8:	b082      	sub	sp, #8
 81067ba:	af00      	add	r7, sp, #0
 81067bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81067be:	687b      	ldr	r3, [r7, #4]
 81067c0:	2b00      	cmp	r3, #0
 81067c2:	d101      	bne.n	81067c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81067c4:	2301      	movs	r3, #1
 81067c6:	e049      	b.n	810685c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81067c8:	687b      	ldr	r3, [r7, #4]
 81067ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81067ce:	b2db      	uxtb	r3, r3
 81067d0:	2b00      	cmp	r3, #0
 81067d2:	d106      	bne.n	81067e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	2200      	movs	r2, #0
 81067d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81067dc:	6878      	ldr	r0, [r7, #4]
 81067de:	f000 f841 	bl	8106864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	2202      	movs	r2, #2
 81067e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81067ea:	687b      	ldr	r3, [r7, #4]
 81067ec:	681a      	ldr	r2, [r3, #0]
 81067ee:	687b      	ldr	r3, [r7, #4]
 81067f0:	3304      	adds	r3, #4
 81067f2:	4619      	mov	r1, r3
 81067f4:	4610      	mov	r0, r2
 81067f6:	f000 f9e7 	bl	8106bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	2201      	movs	r2, #1
 81067fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	2201      	movs	r2, #1
 8106806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810680a:	687b      	ldr	r3, [r7, #4]
 810680c:	2201      	movs	r2, #1
 810680e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	2201      	movs	r2, #1
 8106816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810681a:	687b      	ldr	r3, [r7, #4]
 810681c:	2201      	movs	r2, #1
 810681e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106822:	687b      	ldr	r3, [r7, #4]
 8106824:	2201      	movs	r2, #1
 8106826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810682a:	687b      	ldr	r3, [r7, #4]
 810682c:	2201      	movs	r2, #1
 810682e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106832:	687b      	ldr	r3, [r7, #4]
 8106834:	2201      	movs	r2, #1
 8106836:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810683a:	687b      	ldr	r3, [r7, #4]
 810683c:	2201      	movs	r2, #1
 810683e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106842:	687b      	ldr	r3, [r7, #4]
 8106844:	2201      	movs	r2, #1
 8106846:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	2201      	movs	r2, #1
 810684e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	2201      	movs	r2, #1
 8106856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810685a:	2300      	movs	r3, #0
}
 810685c:	4618      	mov	r0, r3
 810685e:	3708      	adds	r7, #8
 8106860:	46bd      	mov	sp, r7
 8106862:	bd80      	pop	{r7, pc}

08106864 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8106864:	b480      	push	{r7}
 8106866:	b083      	sub	sp, #12
 8106868:	af00      	add	r7, sp, #0
 810686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810686c:	bf00      	nop
 810686e:	370c      	adds	r7, #12
 8106870:	46bd      	mov	sp, r7
 8106872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106876:	4770      	bx	lr

08106878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106878:	b480      	push	{r7}
 810687a:	b085      	sub	sp, #20
 810687c:	af00      	add	r7, sp, #0
 810687e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106886:	b2db      	uxtb	r3, r3
 8106888:	2b01      	cmp	r3, #1
 810688a:	d001      	beq.n	8106890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810688c:	2301      	movs	r3, #1
 810688e:	e054      	b.n	810693a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	2202      	movs	r2, #2
 8106894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	681b      	ldr	r3, [r3, #0]
 810689c:	68da      	ldr	r2, [r3, #12]
 810689e:	687b      	ldr	r3, [r7, #4]
 81068a0:	681b      	ldr	r3, [r3, #0]
 81068a2:	f042 0201 	orr.w	r2, r2, #1
 81068a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	681b      	ldr	r3, [r3, #0]
 81068ac:	4a26      	ldr	r2, [pc, #152]	@ (8106948 <HAL_TIM_Base_Start_IT+0xd0>)
 81068ae:	4293      	cmp	r3, r2
 81068b0:	d022      	beq.n	81068f8 <HAL_TIM_Base_Start_IT+0x80>
 81068b2:	687b      	ldr	r3, [r7, #4]
 81068b4:	681b      	ldr	r3, [r3, #0]
 81068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81068ba:	d01d      	beq.n	81068f8 <HAL_TIM_Base_Start_IT+0x80>
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	681b      	ldr	r3, [r3, #0]
 81068c0:	4a22      	ldr	r2, [pc, #136]	@ (810694c <HAL_TIM_Base_Start_IT+0xd4>)
 81068c2:	4293      	cmp	r3, r2
 81068c4:	d018      	beq.n	81068f8 <HAL_TIM_Base_Start_IT+0x80>
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	681b      	ldr	r3, [r3, #0]
 81068ca:	4a21      	ldr	r2, [pc, #132]	@ (8106950 <HAL_TIM_Base_Start_IT+0xd8>)
 81068cc:	4293      	cmp	r3, r2
 81068ce:	d013      	beq.n	81068f8 <HAL_TIM_Base_Start_IT+0x80>
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	681b      	ldr	r3, [r3, #0]
 81068d4:	4a1f      	ldr	r2, [pc, #124]	@ (8106954 <HAL_TIM_Base_Start_IT+0xdc>)
 81068d6:	4293      	cmp	r3, r2
 81068d8:	d00e      	beq.n	81068f8 <HAL_TIM_Base_Start_IT+0x80>
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	681b      	ldr	r3, [r3, #0]
 81068de:	4a1e      	ldr	r2, [pc, #120]	@ (8106958 <HAL_TIM_Base_Start_IT+0xe0>)
 81068e0:	4293      	cmp	r3, r2
 81068e2:	d009      	beq.n	81068f8 <HAL_TIM_Base_Start_IT+0x80>
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	681b      	ldr	r3, [r3, #0]
 81068e8:	4a1c      	ldr	r2, [pc, #112]	@ (810695c <HAL_TIM_Base_Start_IT+0xe4>)
 81068ea:	4293      	cmp	r3, r2
 81068ec:	d004      	beq.n	81068f8 <HAL_TIM_Base_Start_IT+0x80>
 81068ee:	687b      	ldr	r3, [r7, #4]
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	4a1b      	ldr	r2, [pc, #108]	@ (8106960 <HAL_TIM_Base_Start_IT+0xe8>)
 81068f4:	4293      	cmp	r3, r2
 81068f6:	d115      	bne.n	8106924 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81068f8:	687b      	ldr	r3, [r7, #4]
 81068fa:	681b      	ldr	r3, [r3, #0]
 81068fc:	689a      	ldr	r2, [r3, #8]
 81068fe:	4b19      	ldr	r3, [pc, #100]	@ (8106964 <HAL_TIM_Base_Start_IT+0xec>)
 8106900:	4013      	ands	r3, r2
 8106902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106904:	68fb      	ldr	r3, [r7, #12]
 8106906:	2b06      	cmp	r3, #6
 8106908:	d015      	beq.n	8106936 <HAL_TIM_Base_Start_IT+0xbe>
 810690a:	68fb      	ldr	r3, [r7, #12]
 810690c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106910:	d011      	beq.n	8106936 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	681b      	ldr	r3, [r3, #0]
 8106916:	681a      	ldr	r2, [r3, #0]
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	681b      	ldr	r3, [r3, #0]
 810691c:	f042 0201 	orr.w	r2, r2, #1
 8106920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106922:	e008      	b.n	8106936 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	681b      	ldr	r3, [r3, #0]
 8106928:	681a      	ldr	r2, [r3, #0]
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	681b      	ldr	r3, [r3, #0]
 810692e:	f042 0201 	orr.w	r2, r2, #1
 8106932:	601a      	str	r2, [r3, #0]
 8106934:	e000      	b.n	8106938 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106938:	2300      	movs	r3, #0
}
 810693a:	4618      	mov	r0, r3
 810693c:	3714      	adds	r7, #20
 810693e:	46bd      	mov	sp, r7
 8106940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106944:	4770      	bx	lr
 8106946:	bf00      	nop
 8106948:	40010000 	.word	0x40010000
 810694c:	40000400 	.word	0x40000400
 8106950:	40000800 	.word	0x40000800
 8106954:	40000c00 	.word	0x40000c00
 8106958:	40010400 	.word	0x40010400
 810695c:	40001800 	.word	0x40001800
 8106960:	40014000 	.word	0x40014000
 8106964:	00010007 	.word	0x00010007

08106968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106968:	b580      	push	{r7, lr}
 810696a:	b084      	sub	sp, #16
 810696c:	af00      	add	r7, sp, #0
 810696e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	681b      	ldr	r3, [r3, #0]
 8106974:	68db      	ldr	r3, [r3, #12]
 8106976:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	681b      	ldr	r3, [r3, #0]
 810697c:	691b      	ldr	r3, [r3, #16]
 810697e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8106980:	68bb      	ldr	r3, [r7, #8]
 8106982:	f003 0302 	and.w	r3, r3, #2
 8106986:	2b00      	cmp	r3, #0
 8106988:	d020      	beq.n	81069cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810698a:	68fb      	ldr	r3, [r7, #12]
 810698c:	f003 0302 	and.w	r3, r3, #2
 8106990:	2b00      	cmp	r3, #0
 8106992:	d01b      	beq.n	81069cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8106994:	687b      	ldr	r3, [r7, #4]
 8106996:	681b      	ldr	r3, [r3, #0]
 8106998:	f06f 0202 	mvn.w	r2, #2
 810699c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	2201      	movs	r2, #1
 81069a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	681b      	ldr	r3, [r3, #0]
 81069a8:	699b      	ldr	r3, [r3, #24]
 81069aa:	f003 0303 	and.w	r3, r3, #3
 81069ae:	2b00      	cmp	r3, #0
 81069b0:	d003      	beq.n	81069ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81069b2:	6878      	ldr	r0, [r7, #4]
 81069b4:	f000 f8e9 	bl	8106b8a <HAL_TIM_IC_CaptureCallback>
 81069b8:	e005      	b.n	81069c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81069ba:	6878      	ldr	r0, [r7, #4]
 81069bc:	f000 f8db 	bl	8106b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81069c0:	6878      	ldr	r0, [r7, #4]
 81069c2:	f000 f8ec 	bl	8106b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81069c6:	687b      	ldr	r3, [r7, #4]
 81069c8:	2200      	movs	r2, #0
 81069ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81069cc:	68bb      	ldr	r3, [r7, #8]
 81069ce:	f003 0304 	and.w	r3, r3, #4
 81069d2:	2b00      	cmp	r3, #0
 81069d4:	d020      	beq.n	8106a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 81069d6:	68fb      	ldr	r3, [r7, #12]
 81069d8:	f003 0304 	and.w	r3, r3, #4
 81069dc:	2b00      	cmp	r3, #0
 81069de:	d01b      	beq.n	8106a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	681b      	ldr	r3, [r3, #0]
 81069e4:	f06f 0204 	mvn.w	r2, #4
 81069e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81069ea:	687b      	ldr	r3, [r7, #4]
 81069ec:	2202      	movs	r2, #2
 81069ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81069f0:	687b      	ldr	r3, [r7, #4]
 81069f2:	681b      	ldr	r3, [r3, #0]
 81069f4:	699b      	ldr	r3, [r3, #24]
 81069f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81069fa:	2b00      	cmp	r3, #0
 81069fc:	d003      	beq.n	8106a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81069fe:	6878      	ldr	r0, [r7, #4]
 8106a00:	f000 f8c3 	bl	8106b8a <HAL_TIM_IC_CaptureCallback>
 8106a04:	e005      	b.n	8106a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106a06:	6878      	ldr	r0, [r7, #4]
 8106a08:	f000 f8b5 	bl	8106b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106a0c:	6878      	ldr	r0, [r7, #4]
 8106a0e:	f000 f8c6 	bl	8106b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	2200      	movs	r2, #0
 8106a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8106a18:	68bb      	ldr	r3, [r7, #8]
 8106a1a:	f003 0308 	and.w	r3, r3, #8
 8106a1e:	2b00      	cmp	r3, #0
 8106a20:	d020      	beq.n	8106a64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8106a22:	68fb      	ldr	r3, [r7, #12]
 8106a24:	f003 0308 	and.w	r3, r3, #8
 8106a28:	2b00      	cmp	r3, #0
 8106a2a:	d01b      	beq.n	8106a64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8106a2c:	687b      	ldr	r3, [r7, #4]
 8106a2e:	681b      	ldr	r3, [r3, #0]
 8106a30:	f06f 0208 	mvn.w	r2, #8
 8106a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106a36:	687b      	ldr	r3, [r7, #4]
 8106a38:	2204      	movs	r2, #4
 8106a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106a3c:	687b      	ldr	r3, [r7, #4]
 8106a3e:	681b      	ldr	r3, [r3, #0]
 8106a40:	69db      	ldr	r3, [r3, #28]
 8106a42:	f003 0303 	and.w	r3, r3, #3
 8106a46:	2b00      	cmp	r3, #0
 8106a48:	d003      	beq.n	8106a52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106a4a:	6878      	ldr	r0, [r7, #4]
 8106a4c:	f000 f89d 	bl	8106b8a <HAL_TIM_IC_CaptureCallback>
 8106a50:	e005      	b.n	8106a5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106a52:	6878      	ldr	r0, [r7, #4]
 8106a54:	f000 f88f 	bl	8106b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106a58:	6878      	ldr	r0, [r7, #4]
 8106a5a:	f000 f8a0 	bl	8106b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106a5e:	687b      	ldr	r3, [r7, #4]
 8106a60:	2200      	movs	r2, #0
 8106a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8106a64:	68bb      	ldr	r3, [r7, #8]
 8106a66:	f003 0310 	and.w	r3, r3, #16
 8106a6a:	2b00      	cmp	r3, #0
 8106a6c:	d020      	beq.n	8106ab0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8106a6e:	68fb      	ldr	r3, [r7, #12]
 8106a70:	f003 0310 	and.w	r3, r3, #16
 8106a74:	2b00      	cmp	r3, #0
 8106a76:	d01b      	beq.n	8106ab0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8106a78:	687b      	ldr	r3, [r7, #4]
 8106a7a:	681b      	ldr	r3, [r3, #0]
 8106a7c:	f06f 0210 	mvn.w	r2, #16
 8106a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106a82:	687b      	ldr	r3, [r7, #4]
 8106a84:	2208      	movs	r2, #8
 8106a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106a88:	687b      	ldr	r3, [r7, #4]
 8106a8a:	681b      	ldr	r3, [r3, #0]
 8106a8c:	69db      	ldr	r3, [r3, #28]
 8106a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106a92:	2b00      	cmp	r3, #0
 8106a94:	d003      	beq.n	8106a9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106a96:	6878      	ldr	r0, [r7, #4]
 8106a98:	f000 f877 	bl	8106b8a <HAL_TIM_IC_CaptureCallback>
 8106a9c:	e005      	b.n	8106aaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106a9e:	6878      	ldr	r0, [r7, #4]
 8106aa0:	f000 f869 	bl	8106b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106aa4:	6878      	ldr	r0, [r7, #4]
 8106aa6:	f000 f87a 	bl	8106b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106aaa:	687b      	ldr	r3, [r7, #4]
 8106aac:	2200      	movs	r2, #0
 8106aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8106ab0:	68bb      	ldr	r3, [r7, #8]
 8106ab2:	f003 0301 	and.w	r3, r3, #1
 8106ab6:	2b00      	cmp	r3, #0
 8106ab8:	d00c      	beq.n	8106ad4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8106aba:	68fb      	ldr	r3, [r7, #12]
 8106abc:	f003 0301 	and.w	r3, r3, #1
 8106ac0:	2b00      	cmp	r3, #0
 8106ac2:	d007      	beq.n	8106ad4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8106ac4:	687b      	ldr	r3, [r7, #4]
 8106ac6:	681b      	ldr	r3, [r3, #0]
 8106ac8:	f06f 0201 	mvn.w	r2, #1
 8106acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8106ace:	6878      	ldr	r0, [r7, #4]
 8106ad0:	f7fa fcee 	bl	81014b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106ad4:	68bb      	ldr	r3, [r7, #8]
 8106ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106ada:	2b00      	cmp	r3, #0
 8106adc:	d104      	bne.n	8106ae8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8106ade:	68bb      	ldr	r3, [r7, #8]
 8106ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106ae4:	2b00      	cmp	r3, #0
 8106ae6:	d00c      	beq.n	8106b02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106ae8:	68fb      	ldr	r3, [r7, #12]
 8106aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106aee:	2b00      	cmp	r3, #0
 8106af0:	d007      	beq.n	8106b02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8106af2:	687b      	ldr	r3, [r7, #4]
 8106af4:	681b      	ldr	r3, [r3, #0]
 8106af6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8106afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106afc:	6878      	ldr	r0, [r7, #4]
 8106afe:	f000 f90d 	bl	8106d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8106b02:	68bb      	ldr	r3, [r7, #8]
 8106b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106b08:	2b00      	cmp	r3, #0
 8106b0a:	d00c      	beq.n	8106b26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106b0c:	68fb      	ldr	r3, [r7, #12]
 8106b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106b12:	2b00      	cmp	r3, #0
 8106b14:	d007      	beq.n	8106b26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	681b      	ldr	r3, [r3, #0]
 8106b1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8106b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106b20:	6878      	ldr	r0, [r7, #4]
 8106b22:	f000 f905 	bl	8106d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8106b26:	68bb      	ldr	r3, [r7, #8]
 8106b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106b2c:	2b00      	cmp	r3, #0
 8106b2e:	d00c      	beq.n	8106b4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8106b30:	68fb      	ldr	r3, [r7, #12]
 8106b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106b36:	2b00      	cmp	r3, #0
 8106b38:	d007      	beq.n	8106b4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8106b3a:	687b      	ldr	r3, [r7, #4]
 8106b3c:	681b      	ldr	r3, [r3, #0]
 8106b3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8106b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106b44:	6878      	ldr	r0, [r7, #4]
 8106b46:	f000 f834 	bl	8106bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8106b4a:	68bb      	ldr	r3, [r7, #8]
 8106b4c:	f003 0320 	and.w	r3, r3, #32
 8106b50:	2b00      	cmp	r3, #0
 8106b52:	d00c      	beq.n	8106b6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8106b54:	68fb      	ldr	r3, [r7, #12]
 8106b56:	f003 0320 	and.w	r3, r3, #32
 8106b5a:	2b00      	cmp	r3, #0
 8106b5c:	d007      	beq.n	8106b6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8106b5e:	687b      	ldr	r3, [r7, #4]
 8106b60:	681b      	ldr	r3, [r3, #0]
 8106b62:	f06f 0220 	mvn.w	r2, #32
 8106b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106b68:	6878      	ldr	r0, [r7, #4]
 8106b6a:	f000 f8cd 	bl	8106d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8106b6e:	bf00      	nop
 8106b70:	3710      	adds	r7, #16
 8106b72:	46bd      	mov	sp, r7
 8106b74:	bd80      	pop	{r7, pc}

08106b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106b76:	b480      	push	{r7}
 8106b78:	b083      	sub	sp, #12
 8106b7a:	af00      	add	r7, sp, #0
 8106b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106b7e:	bf00      	nop
 8106b80:	370c      	adds	r7, #12
 8106b82:	46bd      	mov	sp, r7
 8106b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b88:	4770      	bx	lr

08106b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8106b8a:	b480      	push	{r7}
 8106b8c:	b083      	sub	sp, #12
 8106b8e:	af00      	add	r7, sp, #0
 8106b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106b92:	bf00      	nop
 8106b94:	370c      	adds	r7, #12
 8106b96:	46bd      	mov	sp, r7
 8106b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b9c:	4770      	bx	lr

08106b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8106b9e:	b480      	push	{r7}
 8106ba0:	b083      	sub	sp, #12
 8106ba2:	af00      	add	r7, sp, #0
 8106ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8106ba6:	bf00      	nop
 8106ba8:	370c      	adds	r7, #12
 8106baa:	46bd      	mov	sp, r7
 8106bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bb0:	4770      	bx	lr

08106bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8106bb2:	b480      	push	{r7}
 8106bb4:	b083      	sub	sp, #12
 8106bb6:	af00      	add	r7, sp, #0
 8106bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8106bba:	bf00      	nop
 8106bbc:	370c      	adds	r7, #12
 8106bbe:	46bd      	mov	sp, r7
 8106bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bc4:	4770      	bx	lr
	...

08106bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106bc8:	b480      	push	{r7}
 8106bca:	b085      	sub	sp, #20
 8106bcc:	af00      	add	r7, sp, #0
 8106bce:	6078      	str	r0, [r7, #4]
 8106bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	681b      	ldr	r3, [r3, #0]
 8106bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106bd8:	687b      	ldr	r3, [r7, #4]
 8106bda:	4a43      	ldr	r2, [pc, #268]	@ (8106ce8 <TIM_Base_SetConfig+0x120>)
 8106bdc:	4293      	cmp	r3, r2
 8106bde:	d013      	beq.n	8106c08 <TIM_Base_SetConfig+0x40>
 8106be0:	687b      	ldr	r3, [r7, #4]
 8106be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106be6:	d00f      	beq.n	8106c08 <TIM_Base_SetConfig+0x40>
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	4a40      	ldr	r2, [pc, #256]	@ (8106cec <TIM_Base_SetConfig+0x124>)
 8106bec:	4293      	cmp	r3, r2
 8106bee:	d00b      	beq.n	8106c08 <TIM_Base_SetConfig+0x40>
 8106bf0:	687b      	ldr	r3, [r7, #4]
 8106bf2:	4a3f      	ldr	r2, [pc, #252]	@ (8106cf0 <TIM_Base_SetConfig+0x128>)
 8106bf4:	4293      	cmp	r3, r2
 8106bf6:	d007      	beq.n	8106c08 <TIM_Base_SetConfig+0x40>
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	4a3e      	ldr	r2, [pc, #248]	@ (8106cf4 <TIM_Base_SetConfig+0x12c>)
 8106bfc:	4293      	cmp	r3, r2
 8106bfe:	d003      	beq.n	8106c08 <TIM_Base_SetConfig+0x40>
 8106c00:	687b      	ldr	r3, [r7, #4]
 8106c02:	4a3d      	ldr	r2, [pc, #244]	@ (8106cf8 <TIM_Base_SetConfig+0x130>)
 8106c04:	4293      	cmp	r3, r2
 8106c06:	d108      	bne.n	8106c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106c08:	68fb      	ldr	r3, [r7, #12]
 8106c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8106c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106c10:	683b      	ldr	r3, [r7, #0]
 8106c12:	685b      	ldr	r3, [r3, #4]
 8106c14:	68fa      	ldr	r2, [r7, #12]
 8106c16:	4313      	orrs	r3, r2
 8106c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	4a32      	ldr	r2, [pc, #200]	@ (8106ce8 <TIM_Base_SetConfig+0x120>)
 8106c1e:	4293      	cmp	r3, r2
 8106c20:	d01f      	beq.n	8106c62 <TIM_Base_SetConfig+0x9a>
 8106c22:	687b      	ldr	r3, [r7, #4]
 8106c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106c28:	d01b      	beq.n	8106c62 <TIM_Base_SetConfig+0x9a>
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	4a2f      	ldr	r2, [pc, #188]	@ (8106cec <TIM_Base_SetConfig+0x124>)
 8106c2e:	4293      	cmp	r3, r2
 8106c30:	d017      	beq.n	8106c62 <TIM_Base_SetConfig+0x9a>
 8106c32:	687b      	ldr	r3, [r7, #4]
 8106c34:	4a2e      	ldr	r2, [pc, #184]	@ (8106cf0 <TIM_Base_SetConfig+0x128>)
 8106c36:	4293      	cmp	r3, r2
 8106c38:	d013      	beq.n	8106c62 <TIM_Base_SetConfig+0x9a>
 8106c3a:	687b      	ldr	r3, [r7, #4]
 8106c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8106cf4 <TIM_Base_SetConfig+0x12c>)
 8106c3e:	4293      	cmp	r3, r2
 8106c40:	d00f      	beq.n	8106c62 <TIM_Base_SetConfig+0x9a>
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	4a2c      	ldr	r2, [pc, #176]	@ (8106cf8 <TIM_Base_SetConfig+0x130>)
 8106c46:	4293      	cmp	r3, r2
 8106c48:	d00b      	beq.n	8106c62 <TIM_Base_SetConfig+0x9a>
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8106cfc <TIM_Base_SetConfig+0x134>)
 8106c4e:	4293      	cmp	r3, r2
 8106c50:	d007      	beq.n	8106c62 <TIM_Base_SetConfig+0x9a>
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	4a2a      	ldr	r2, [pc, #168]	@ (8106d00 <TIM_Base_SetConfig+0x138>)
 8106c56:	4293      	cmp	r3, r2
 8106c58:	d003      	beq.n	8106c62 <TIM_Base_SetConfig+0x9a>
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	4a29      	ldr	r2, [pc, #164]	@ (8106d04 <TIM_Base_SetConfig+0x13c>)
 8106c5e:	4293      	cmp	r3, r2
 8106c60:	d108      	bne.n	8106c74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106c62:	68fb      	ldr	r3, [r7, #12]
 8106c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106c6a:	683b      	ldr	r3, [r7, #0]
 8106c6c:	68db      	ldr	r3, [r3, #12]
 8106c6e:	68fa      	ldr	r2, [r7, #12]
 8106c70:	4313      	orrs	r3, r2
 8106c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106c74:	68fb      	ldr	r3, [r7, #12]
 8106c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8106c7a:	683b      	ldr	r3, [r7, #0]
 8106c7c:	695b      	ldr	r3, [r3, #20]
 8106c7e:	4313      	orrs	r3, r2
 8106c80:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106c82:	683b      	ldr	r3, [r7, #0]
 8106c84:	689a      	ldr	r2, [r3, #8]
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106c8a:	683b      	ldr	r3, [r7, #0]
 8106c8c:	681a      	ldr	r2, [r3, #0]
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106c92:	687b      	ldr	r3, [r7, #4]
 8106c94:	4a14      	ldr	r2, [pc, #80]	@ (8106ce8 <TIM_Base_SetConfig+0x120>)
 8106c96:	4293      	cmp	r3, r2
 8106c98:	d00f      	beq.n	8106cba <TIM_Base_SetConfig+0xf2>
 8106c9a:	687b      	ldr	r3, [r7, #4]
 8106c9c:	4a16      	ldr	r2, [pc, #88]	@ (8106cf8 <TIM_Base_SetConfig+0x130>)
 8106c9e:	4293      	cmp	r3, r2
 8106ca0:	d00b      	beq.n	8106cba <TIM_Base_SetConfig+0xf2>
 8106ca2:	687b      	ldr	r3, [r7, #4]
 8106ca4:	4a15      	ldr	r2, [pc, #84]	@ (8106cfc <TIM_Base_SetConfig+0x134>)
 8106ca6:	4293      	cmp	r3, r2
 8106ca8:	d007      	beq.n	8106cba <TIM_Base_SetConfig+0xf2>
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	4a14      	ldr	r2, [pc, #80]	@ (8106d00 <TIM_Base_SetConfig+0x138>)
 8106cae:	4293      	cmp	r3, r2
 8106cb0:	d003      	beq.n	8106cba <TIM_Base_SetConfig+0xf2>
 8106cb2:	687b      	ldr	r3, [r7, #4]
 8106cb4:	4a13      	ldr	r2, [pc, #76]	@ (8106d04 <TIM_Base_SetConfig+0x13c>)
 8106cb6:	4293      	cmp	r3, r2
 8106cb8:	d103      	bne.n	8106cc2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106cba:	683b      	ldr	r3, [r7, #0]
 8106cbc:	691a      	ldr	r2, [r3, #16]
 8106cbe:	687b      	ldr	r3, [r7, #4]
 8106cc0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8106cc2:	687b      	ldr	r3, [r7, #4]
 8106cc4:	681b      	ldr	r3, [r3, #0]
 8106cc6:	f043 0204 	orr.w	r2, r3, #4
 8106cca:	687b      	ldr	r3, [r7, #4]
 8106ccc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	2201      	movs	r2, #1
 8106cd2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8106cd4:	687b      	ldr	r3, [r7, #4]
 8106cd6:	68fa      	ldr	r2, [r7, #12]
 8106cd8:	601a      	str	r2, [r3, #0]
}
 8106cda:	bf00      	nop
 8106cdc:	3714      	adds	r7, #20
 8106cde:	46bd      	mov	sp, r7
 8106ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ce4:	4770      	bx	lr
 8106ce6:	bf00      	nop
 8106ce8:	40010000 	.word	0x40010000
 8106cec:	40000400 	.word	0x40000400
 8106cf0:	40000800 	.word	0x40000800
 8106cf4:	40000c00 	.word	0x40000c00
 8106cf8:	40010400 	.word	0x40010400
 8106cfc:	40014000 	.word	0x40014000
 8106d00:	40014400 	.word	0x40014400
 8106d04:	40014800 	.word	0x40014800

08106d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106d08:	b480      	push	{r7}
 8106d0a:	b083      	sub	sp, #12
 8106d0c:	af00      	add	r7, sp, #0
 8106d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106d10:	bf00      	nop
 8106d12:	370c      	adds	r7, #12
 8106d14:	46bd      	mov	sp, r7
 8106d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d1a:	4770      	bx	lr

08106d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106d1c:	b480      	push	{r7}
 8106d1e:	b083      	sub	sp, #12
 8106d20:	af00      	add	r7, sp, #0
 8106d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8106d24:	bf00      	nop
 8106d26:	370c      	adds	r7, #12
 8106d28:	46bd      	mov	sp, r7
 8106d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d2e:	4770      	bx	lr

08106d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106d30:	b480      	push	{r7}
 8106d32:	b083      	sub	sp, #12
 8106d34:	af00      	add	r7, sp, #0
 8106d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106d38:	bf00      	nop
 8106d3a:	370c      	adds	r7, #12
 8106d3c:	46bd      	mov	sp, r7
 8106d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d42:	4770      	bx	lr

08106d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106d44:	b580      	push	{r7, lr}
 8106d46:	b08a      	sub	sp, #40	@ 0x28
 8106d48:	af02      	add	r7, sp, #8
 8106d4a:	60f8      	str	r0, [r7, #12]
 8106d4c:	60b9      	str	r1, [r7, #8]
 8106d4e:	603b      	str	r3, [r7, #0]
 8106d50:	4613      	mov	r3, r2
 8106d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8106d54:	68fb      	ldr	r3, [r7, #12]
 8106d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106d5a:	2b20      	cmp	r3, #32
 8106d5c:	d17b      	bne.n	8106e56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8106d5e:	68bb      	ldr	r3, [r7, #8]
 8106d60:	2b00      	cmp	r3, #0
 8106d62:	d002      	beq.n	8106d6a <HAL_UART_Transmit+0x26>
 8106d64:	88fb      	ldrh	r3, [r7, #6]
 8106d66:	2b00      	cmp	r3, #0
 8106d68:	d101      	bne.n	8106d6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8106d6a:	2301      	movs	r3, #1
 8106d6c:	e074      	b.n	8106e58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106d6e:	68fb      	ldr	r3, [r7, #12]
 8106d70:	2200      	movs	r2, #0
 8106d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106d76:	68fb      	ldr	r3, [r7, #12]
 8106d78:	2221      	movs	r2, #33	@ 0x21
 8106d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106d7e:	f7fb f923 	bl	8101fc8 <HAL_GetTick>
 8106d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8106d84:	68fb      	ldr	r3, [r7, #12]
 8106d86:	88fa      	ldrh	r2, [r7, #6]
 8106d88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8106d8c:	68fb      	ldr	r3, [r7, #12]
 8106d8e:	88fa      	ldrh	r2, [r7, #6]
 8106d90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106d94:	68fb      	ldr	r3, [r7, #12]
 8106d96:	689b      	ldr	r3, [r3, #8]
 8106d98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106d9c:	d108      	bne.n	8106db0 <HAL_UART_Transmit+0x6c>
 8106d9e:	68fb      	ldr	r3, [r7, #12]
 8106da0:	691b      	ldr	r3, [r3, #16]
 8106da2:	2b00      	cmp	r3, #0
 8106da4:	d104      	bne.n	8106db0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8106da6:	2300      	movs	r3, #0
 8106da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8106daa:	68bb      	ldr	r3, [r7, #8]
 8106dac:	61bb      	str	r3, [r7, #24]
 8106dae:	e003      	b.n	8106db8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8106db0:	68bb      	ldr	r3, [r7, #8]
 8106db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106db4:	2300      	movs	r3, #0
 8106db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8106db8:	e030      	b.n	8106e1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106dba:	683b      	ldr	r3, [r7, #0]
 8106dbc:	9300      	str	r3, [sp, #0]
 8106dbe:	697b      	ldr	r3, [r7, #20]
 8106dc0:	2200      	movs	r2, #0
 8106dc2:	2180      	movs	r1, #128	@ 0x80
 8106dc4:	68f8      	ldr	r0, [r7, #12]
 8106dc6:	f000 f84b 	bl	8106e60 <UART_WaitOnFlagUntilTimeout>
 8106dca:	4603      	mov	r3, r0
 8106dcc:	2b00      	cmp	r3, #0
 8106dce:	d005      	beq.n	8106ddc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8106dd0:	68fb      	ldr	r3, [r7, #12]
 8106dd2:	2220      	movs	r2, #32
 8106dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8106dd8:	2303      	movs	r3, #3
 8106dda:	e03d      	b.n	8106e58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8106ddc:	69fb      	ldr	r3, [r7, #28]
 8106dde:	2b00      	cmp	r3, #0
 8106de0:	d10b      	bne.n	8106dfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8106de2:	69bb      	ldr	r3, [r7, #24]
 8106de4:	881b      	ldrh	r3, [r3, #0]
 8106de6:	461a      	mov	r2, r3
 8106de8:	68fb      	ldr	r3, [r7, #12]
 8106dea:	681b      	ldr	r3, [r3, #0]
 8106dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106df0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8106df2:	69bb      	ldr	r3, [r7, #24]
 8106df4:	3302      	adds	r3, #2
 8106df6:	61bb      	str	r3, [r7, #24]
 8106df8:	e007      	b.n	8106e0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8106dfa:	69fb      	ldr	r3, [r7, #28]
 8106dfc:	781a      	ldrb	r2, [r3, #0]
 8106dfe:	68fb      	ldr	r3, [r7, #12]
 8106e00:	681b      	ldr	r3, [r3, #0]
 8106e02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8106e04:	69fb      	ldr	r3, [r7, #28]
 8106e06:	3301      	adds	r3, #1
 8106e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8106e0a:	68fb      	ldr	r3, [r7, #12]
 8106e0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8106e10:	b29b      	uxth	r3, r3
 8106e12:	3b01      	subs	r3, #1
 8106e14:	b29a      	uxth	r2, r3
 8106e16:	68fb      	ldr	r3, [r7, #12]
 8106e18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8106e1c:	68fb      	ldr	r3, [r7, #12]
 8106e1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8106e22:	b29b      	uxth	r3, r3
 8106e24:	2b00      	cmp	r3, #0
 8106e26:	d1c8      	bne.n	8106dba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8106e28:	683b      	ldr	r3, [r7, #0]
 8106e2a:	9300      	str	r3, [sp, #0]
 8106e2c:	697b      	ldr	r3, [r7, #20]
 8106e2e:	2200      	movs	r2, #0
 8106e30:	2140      	movs	r1, #64	@ 0x40
 8106e32:	68f8      	ldr	r0, [r7, #12]
 8106e34:	f000 f814 	bl	8106e60 <UART_WaitOnFlagUntilTimeout>
 8106e38:	4603      	mov	r3, r0
 8106e3a:	2b00      	cmp	r3, #0
 8106e3c:	d005      	beq.n	8106e4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8106e3e:	68fb      	ldr	r3, [r7, #12]
 8106e40:	2220      	movs	r2, #32
 8106e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8106e46:	2303      	movs	r3, #3
 8106e48:	e006      	b.n	8106e58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106e4a:	68fb      	ldr	r3, [r7, #12]
 8106e4c:	2220      	movs	r2, #32
 8106e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8106e52:	2300      	movs	r3, #0
 8106e54:	e000      	b.n	8106e58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8106e56:	2302      	movs	r3, #2
  }
}
 8106e58:	4618      	mov	r0, r3
 8106e5a:	3720      	adds	r7, #32
 8106e5c:	46bd      	mov	sp, r7
 8106e5e:	bd80      	pop	{r7, pc}

08106e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106e60:	b580      	push	{r7, lr}
 8106e62:	b084      	sub	sp, #16
 8106e64:	af00      	add	r7, sp, #0
 8106e66:	60f8      	str	r0, [r7, #12]
 8106e68:	60b9      	str	r1, [r7, #8]
 8106e6a:	603b      	str	r3, [r7, #0]
 8106e6c:	4613      	mov	r3, r2
 8106e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106e70:	e04f      	b.n	8106f12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106e72:	69bb      	ldr	r3, [r7, #24]
 8106e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106e78:	d04b      	beq.n	8106f12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106e7a:	f7fb f8a5 	bl	8101fc8 <HAL_GetTick>
 8106e7e:	4602      	mov	r2, r0
 8106e80:	683b      	ldr	r3, [r7, #0]
 8106e82:	1ad3      	subs	r3, r2, r3
 8106e84:	69ba      	ldr	r2, [r7, #24]
 8106e86:	429a      	cmp	r2, r3
 8106e88:	d302      	bcc.n	8106e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8106e8a:	69bb      	ldr	r3, [r7, #24]
 8106e8c:	2b00      	cmp	r3, #0
 8106e8e:	d101      	bne.n	8106e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8106e90:	2303      	movs	r3, #3
 8106e92:	e04e      	b.n	8106f32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8106e94:	68fb      	ldr	r3, [r7, #12]
 8106e96:	681b      	ldr	r3, [r3, #0]
 8106e98:	681b      	ldr	r3, [r3, #0]
 8106e9a:	f003 0304 	and.w	r3, r3, #4
 8106e9e:	2b00      	cmp	r3, #0
 8106ea0:	d037      	beq.n	8106f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8106ea2:	68bb      	ldr	r3, [r7, #8]
 8106ea4:	2b80      	cmp	r3, #128	@ 0x80
 8106ea6:	d034      	beq.n	8106f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8106ea8:	68bb      	ldr	r3, [r7, #8]
 8106eaa:	2b40      	cmp	r3, #64	@ 0x40
 8106eac:	d031      	beq.n	8106f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8106eae:	68fb      	ldr	r3, [r7, #12]
 8106eb0:	681b      	ldr	r3, [r3, #0]
 8106eb2:	69db      	ldr	r3, [r3, #28]
 8106eb4:	f003 0308 	and.w	r3, r3, #8
 8106eb8:	2b08      	cmp	r3, #8
 8106eba:	d110      	bne.n	8106ede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106ebc:	68fb      	ldr	r3, [r7, #12]
 8106ebe:	681b      	ldr	r3, [r3, #0]
 8106ec0:	2208      	movs	r2, #8
 8106ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106ec4:	68f8      	ldr	r0, [r7, #12]
 8106ec6:	f000 f838 	bl	8106f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8106eca:	68fb      	ldr	r3, [r7, #12]
 8106ecc:	2208      	movs	r2, #8
 8106ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106ed2:	68fb      	ldr	r3, [r7, #12]
 8106ed4:	2200      	movs	r2, #0
 8106ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8106eda:	2301      	movs	r3, #1
 8106edc:	e029      	b.n	8106f32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106ede:	68fb      	ldr	r3, [r7, #12]
 8106ee0:	681b      	ldr	r3, [r3, #0]
 8106ee2:	69db      	ldr	r3, [r3, #28]
 8106ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8106ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106eec:	d111      	bne.n	8106f12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106eee:	68fb      	ldr	r3, [r7, #12]
 8106ef0:	681b      	ldr	r3, [r3, #0]
 8106ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8106ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106ef8:	68f8      	ldr	r0, [r7, #12]
 8106efa:	f000 f81e 	bl	8106f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106efe:	68fb      	ldr	r3, [r7, #12]
 8106f00:	2220      	movs	r2, #32
 8106f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106f06:	68fb      	ldr	r3, [r7, #12]
 8106f08:	2200      	movs	r2, #0
 8106f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8106f0e:	2303      	movs	r3, #3
 8106f10:	e00f      	b.n	8106f32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106f12:	68fb      	ldr	r3, [r7, #12]
 8106f14:	681b      	ldr	r3, [r3, #0]
 8106f16:	69da      	ldr	r2, [r3, #28]
 8106f18:	68bb      	ldr	r3, [r7, #8]
 8106f1a:	4013      	ands	r3, r2
 8106f1c:	68ba      	ldr	r2, [r7, #8]
 8106f1e:	429a      	cmp	r2, r3
 8106f20:	bf0c      	ite	eq
 8106f22:	2301      	moveq	r3, #1
 8106f24:	2300      	movne	r3, #0
 8106f26:	b2db      	uxtb	r3, r3
 8106f28:	461a      	mov	r2, r3
 8106f2a:	79fb      	ldrb	r3, [r7, #7]
 8106f2c:	429a      	cmp	r2, r3
 8106f2e:	d0a0      	beq.n	8106e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106f30:	2300      	movs	r3, #0
}
 8106f32:	4618      	mov	r0, r3
 8106f34:	3710      	adds	r7, #16
 8106f36:	46bd      	mov	sp, r7
 8106f38:	bd80      	pop	{r7, pc}

08106f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8106f3a:	b480      	push	{r7}
 8106f3c:	b095      	sub	sp, #84	@ 0x54
 8106f3e:	af00      	add	r7, sp, #0
 8106f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106f42:	687b      	ldr	r3, [r7, #4]
 8106f44:	681b      	ldr	r3, [r3, #0]
 8106f46:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106f4a:	e853 3f00 	ldrex	r3, [r3]
 8106f4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8106f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8106f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	681b      	ldr	r3, [r3, #0]
 8106f5c:	461a      	mov	r2, r3
 8106f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8106f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8106f62:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106f64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8106f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8106f68:	e841 2300 	strex	r3, r2, [r1]
 8106f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8106f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106f70:	2b00      	cmp	r3, #0
 8106f72:	d1e6      	bne.n	8106f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	681b      	ldr	r3, [r3, #0]
 8106f78:	3308      	adds	r3, #8
 8106f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106f7c:	6a3b      	ldr	r3, [r7, #32]
 8106f7e:	e853 3f00 	ldrex	r3, [r3]
 8106f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8106f84:	69fb      	ldr	r3, [r7, #28]
 8106f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8106f8a:	f023 0301 	bic.w	r3, r3, #1
 8106f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	681b      	ldr	r3, [r3, #0]
 8106f94:	3308      	adds	r3, #8
 8106f96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8106f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106fa0:	e841 2300 	strex	r3, r2, [r1]
 8106fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8106fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106fa8:	2b00      	cmp	r3, #0
 8106faa:	d1e3      	bne.n	8106f74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106fb0:	2b01      	cmp	r3, #1
 8106fb2:	d118      	bne.n	8106fe6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	681b      	ldr	r3, [r3, #0]
 8106fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106fba:	68fb      	ldr	r3, [r7, #12]
 8106fbc:	e853 3f00 	ldrex	r3, [r3]
 8106fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8106fc2:	68bb      	ldr	r3, [r7, #8]
 8106fc4:	f023 0310 	bic.w	r3, r3, #16
 8106fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8106fca:	687b      	ldr	r3, [r7, #4]
 8106fcc:	681b      	ldr	r3, [r3, #0]
 8106fce:	461a      	mov	r2, r3
 8106fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8106fd2:	61bb      	str	r3, [r7, #24]
 8106fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106fd6:	6979      	ldr	r1, [r7, #20]
 8106fd8:	69ba      	ldr	r2, [r7, #24]
 8106fda:	e841 2300 	strex	r3, r2, [r1]
 8106fde:	613b      	str	r3, [r7, #16]
   return(result);
 8106fe0:	693b      	ldr	r3, [r7, #16]
 8106fe2:	2b00      	cmp	r3, #0
 8106fe4:	d1e6      	bne.n	8106fb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	2220      	movs	r2, #32
 8106fea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	2200      	movs	r2, #0
 8106ff2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8106ff4:	687b      	ldr	r3, [r7, #4]
 8106ff6:	2200      	movs	r2, #0
 8106ff8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8106ffa:	bf00      	nop
 8106ffc:	3754      	adds	r7, #84	@ 0x54
 8106ffe:	46bd      	mov	sp, r7
 8107000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107004:	4770      	bx	lr

08107006 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8107006:	b084      	sub	sp, #16
 8107008:	b580      	push	{r7, lr}
 810700a:	b084      	sub	sp, #16
 810700c:	af00      	add	r7, sp, #0
 810700e:	6078      	str	r0, [r7, #4]
 8107010:	f107 001c 	add.w	r0, r7, #28
 8107014:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8107018:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810701c:	2b01      	cmp	r3, #1
 810701e:	d123      	bne.n	8107068 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8107020:	687b      	ldr	r3, [r7, #4]
 8107022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107024:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	68db      	ldr	r3, [r3, #12]
 8107030:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8107034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8107038:	687a      	ldr	r2, [r7, #4]
 810703a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810703c:	687b      	ldr	r3, [r7, #4]
 810703e:	68db      	ldr	r3, [r3, #12]
 8107040:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8107044:	687b      	ldr	r3, [r7, #4]
 8107046:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8107048:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 810704c:	2b01      	cmp	r3, #1
 810704e:	d105      	bne.n	810705c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	68db      	ldr	r3, [r3, #12]
 8107054:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810705c:	6878      	ldr	r0, [r7, #4]
 810705e:	f000 faa7 	bl	81075b0 <USB_CoreReset>
 8107062:	4603      	mov	r3, r0
 8107064:	73fb      	strb	r3, [r7, #15]
 8107066:	e01b      	b.n	81070a0 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	68db      	ldr	r3, [r3, #12]
 810706c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8107074:	6878      	ldr	r0, [r7, #4]
 8107076:	f000 fa9b 	bl	81075b0 <USB_CoreReset>
 810707a:	4603      	mov	r3, r0
 810707c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810707e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8107082:	2b00      	cmp	r3, #0
 8107084:	d106      	bne.n	8107094 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8107086:	687b      	ldr	r3, [r7, #4]
 8107088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810708a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810708e:	687b      	ldr	r3, [r7, #4]
 8107090:	639a      	str	r2, [r3, #56]	@ 0x38
 8107092:	e005      	b.n	81070a0 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8107094:	687b      	ldr	r3, [r7, #4]
 8107096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107098:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 81070a0:	7fbb      	ldrb	r3, [r7, #30]
 81070a2:	2b01      	cmp	r3, #1
 81070a4:	d118      	bne.n	81070d8 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 81070a6:	687b      	ldr	r3, [r7, #4]
 81070a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81070aa:	b29a      	uxth	r2, r3
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 81070b0:	687b      	ldr	r3, [r7, #4]
 81070b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81070b4:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 81070b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81070bc:	687a      	ldr	r2, [r7, #4]
 81070be:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	689b      	ldr	r3, [r3, #8]
 81070c4:	f043 0206 	orr.w	r2, r3, #6
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 81070cc:	687b      	ldr	r3, [r7, #4]
 81070ce:	689b      	ldr	r3, [r3, #8]
 81070d0:	f043 0220 	orr.w	r2, r3, #32
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 81070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 81070da:	4618      	mov	r0, r3
 81070dc:	3710      	adds	r7, #16
 81070de:	46bd      	mov	sp, r7
 81070e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81070e4:	b004      	add	sp, #16
 81070e6:	4770      	bx	lr

081070e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 81070e8:	b480      	push	{r7}
 81070ea:	b083      	sub	sp, #12
 81070ec:	af00      	add	r7, sp, #0
 81070ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 81070f0:	687b      	ldr	r3, [r7, #4]
 81070f2:	689b      	ldr	r3, [r3, #8]
 81070f4:	f023 0201 	bic.w	r2, r3, #1
 81070f8:	687b      	ldr	r3, [r7, #4]
 81070fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 81070fc:	2300      	movs	r3, #0
}
 81070fe:	4618      	mov	r0, r3
 8107100:	370c      	adds	r7, #12
 8107102:	46bd      	mov	sp, r7
 8107104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107108:	4770      	bx	lr

0810710a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810710a:	b580      	push	{r7, lr}
 810710c:	b084      	sub	sp, #16
 810710e:	af00      	add	r7, sp, #0
 8107110:	6078      	str	r0, [r7, #4]
 8107112:	460b      	mov	r3, r1
 8107114:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8107116:	2300      	movs	r3, #0
 8107118:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810711a:	687b      	ldr	r3, [r7, #4]
 810711c:	68db      	ldr	r3, [r3, #12]
 810711e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8107126:	78fb      	ldrb	r3, [r7, #3]
 8107128:	2b01      	cmp	r3, #1
 810712a:	d115      	bne.n	8107158 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810712c:	687b      	ldr	r3, [r7, #4]
 810712e:	68db      	ldr	r3, [r3, #12]
 8107130:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8107134:	687b      	ldr	r3, [r7, #4]
 8107136:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8107138:	200a      	movs	r0, #10
 810713a:	f7fa ff51 	bl	8101fe0 <HAL_Delay>
      ms += 10U;
 810713e:	68fb      	ldr	r3, [r7, #12]
 8107140:	330a      	adds	r3, #10
 8107142:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8107144:	6878      	ldr	r0, [r7, #4]
 8107146:	f000 fa25 	bl	8107594 <USB_GetMode>
 810714a:	4603      	mov	r3, r0
 810714c:	2b01      	cmp	r3, #1
 810714e:	d01e      	beq.n	810718e <USB_SetCurrentMode+0x84>
 8107150:	68fb      	ldr	r3, [r7, #12]
 8107152:	2bc7      	cmp	r3, #199	@ 0xc7
 8107154:	d9f0      	bls.n	8107138 <USB_SetCurrentMode+0x2e>
 8107156:	e01a      	b.n	810718e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8107158:	78fb      	ldrb	r3, [r7, #3]
 810715a:	2b00      	cmp	r3, #0
 810715c:	d115      	bne.n	810718a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	68db      	ldr	r3, [r3, #12]
 8107162:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8107166:	687b      	ldr	r3, [r7, #4]
 8107168:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810716a:	200a      	movs	r0, #10
 810716c:	f7fa ff38 	bl	8101fe0 <HAL_Delay>
      ms += 10U;
 8107170:	68fb      	ldr	r3, [r7, #12]
 8107172:	330a      	adds	r3, #10
 8107174:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8107176:	6878      	ldr	r0, [r7, #4]
 8107178:	f000 fa0c 	bl	8107594 <USB_GetMode>
 810717c:	4603      	mov	r3, r0
 810717e:	2b00      	cmp	r3, #0
 8107180:	d005      	beq.n	810718e <USB_SetCurrentMode+0x84>
 8107182:	68fb      	ldr	r3, [r7, #12]
 8107184:	2bc7      	cmp	r3, #199	@ 0xc7
 8107186:	d9f0      	bls.n	810716a <USB_SetCurrentMode+0x60>
 8107188:	e001      	b.n	810718e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810718a:	2301      	movs	r3, #1
 810718c:	e005      	b.n	810719a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 810718e:	68fb      	ldr	r3, [r7, #12]
 8107190:	2bc8      	cmp	r3, #200	@ 0xc8
 8107192:	d101      	bne.n	8107198 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8107194:	2301      	movs	r3, #1
 8107196:	e000      	b.n	810719a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8107198:	2300      	movs	r3, #0
}
 810719a:	4618      	mov	r0, r3
 810719c:	3710      	adds	r7, #16
 810719e:	46bd      	mov	sp, r7
 81071a0:	bd80      	pop	{r7, pc}
	...

081071a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 81071a4:	b084      	sub	sp, #16
 81071a6:	b580      	push	{r7, lr}
 81071a8:	b086      	sub	sp, #24
 81071aa:	af00      	add	r7, sp, #0
 81071ac:	6078      	str	r0, [r7, #4]
 81071ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 81071b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 81071b6:	2300      	movs	r3, #0
 81071b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81071ba:	687b      	ldr	r3, [r7, #4]
 81071bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 81071be:	2300      	movs	r3, #0
 81071c0:	613b      	str	r3, [r7, #16]
 81071c2:	e009      	b.n	81071d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 81071c4:	687a      	ldr	r2, [r7, #4]
 81071c6:	693b      	ldr	r3, [r7, #16]
 81071c8:	3340      	adds	r3, #64	@ 0x40
 81071ca:	009b      	lsls	r3, r3, #2
 81071cc:	4413      	add	r3, r2
 81071ce:	2200      	movs	r2, #0
 81071d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 81071d2:	693b      	ldr	r3, [r7, #16]
 81071d4:	3301      	adds	r3, #1
 81071d6:	613b      	str	r3, [r7, #16]
 81071d8:	693b      	ldr	r3, [r7, #16]
 81071da:	2b0e      	cmp	r3, #14
 81071dc:	d9f2      	bls.n	81071c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 81071de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 81071e2:	2b00      	cmp	r3, #0
 81071e4:	d11c      	bne.n	8107220 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 81071e6:	68fb      	ldr	r3, [r7, #12]
 81071e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81071ec:	685b      	ldr	r3, [r3, #4]
 81071ee:	68fa      	ldr	r2, [r7, #12]
 81071f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81071f4:	f043 0302 	orr.w	r3, r3, #2
 81071f8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 81071fa:	687b      	ldr	r3, [r7, #4]
 81071fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81071fe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8107202:	687b      	ldr	r3, [r7, #4]
 8107204:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	681b      	ldr	r3, [r3, #0]
 810720a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810720e:	687b      	ldr	r3, [r7, #4]
 8107210:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	681b      	ldr	r3, [r3, #0]
 8107216:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	601a      	str	r2, [r3, #0]
 810721e:	e005      	b.n	810722c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107224:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8107228:	687b      	ldr	r3, [r7, #4]
 810722a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810722c:	68fb      	ldr	r3, [r7, #12]
 810722e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8107232:	461a      	mov	r2, r3
 8107234:	2300      	movs	r3, #0
 8107236:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8107238:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 810723c:	2b01      	cmp	r3, #1
 810723e:	d10d      	bne.n	810725c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8107240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8107244:	2b00      	cmp	r3, #0
 8107246:	d104      	bne.n	8107252 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8107248:	2100      	movs	r1, #0
 810724a:	6878      	ldr	r0, [r7, #4]
 810724c:	f000 f968 	bl	8107520 <USB_SetDevSpeed>
 8107250:	e008      	b.n	8107264 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8107252:	2101      	movs	r1, #1
 8107254:	6878      	ldr	r0, [r7, #4]
 8107256:	f000 f963 	bl	8107520 <USB_SetDevSpeed>
 810725a:	e003      	b.n	8107264 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810725c:	2103      	movs	r1, #3
 810725e:	6878      	ldr	r0, [r7, #4]
 8107260:	f000 f95e 	bl	8107520 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8107264:	2110      	movs	r1, #16
 8107266:	6878      	ldr	r0, [r7, #4]
 8107268:	f000 f8fa 	bl	8107460 <USB_FlushTxFifo>
 810726c:	4603      	mov	r3, r0
 810726e:	2b00      	cmp	r3, #0
 8107270:	d001      	beq.n	8107276 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8107272:	2301      	movs	r3, #1
 8107274:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8107276:	6878      	ldr	r0, [r7, #4]
 8107278:	f000 f924 	bl	81074c4 <USB_FlushRxFifo>
 810727c:	4603      	mov	r3, r0
 810727e:	2b00      	cmp	r3, #0
 8107280:	d001      	beq.n	8107286 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8107282:	2301      	movs	r3, #1
 8107284:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810728c:	461a      	mov	r2, r3
 810728e:	2300      	movs	r3, #0
 8107290:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8107292:	68fb      	ldr	r3, [r7, #12]
 8107294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107298:	461a      	mov	r2, r3
 810729a:	2300      	movs	r3, #0
 810729c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810729e:	68fb      	ldr	r3, [r7, #12]
 81072a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81072a4:	461a      	mov	r2, r3
 81072a6:	2300      	movs	r3, #0
 81072a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 81072aa:	2300      	movs	r3, #0
 81072ac:	613b      	str	r3, [r7, #16]
 81072ae:	e043      	b.n	8107338 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 81072b0:	693b      	ldr	r3, [r7, #16]
 81072b2:	015a      	lsls	r2, r3, #5
 81072b4:	68fb      	ldr	r3, [r7, #12]
 81072b6:	4413      	add	r3, r2
 81072b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81072bc:	681b      	ldr	r3, [r3, #0]
 81072be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 81072c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81072c6:	d118      	bne.n	81072fa <USB_DevInit+0x156>
    {
      if (i == 0U)
 81072c8:	693b      	ldr	r3, [r7, #16]
 81072ca:	2b00      	cmp	r3, #0
 81072cc:	d10a      	bne.n	81072e4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 81072ce:	693b      	ldr	r3, [r7, #16]
 81072d0:	015a      	lsls	r2, r3, #5
 81072d2:	68fb      	ldr	r3, [r7, #12]
 81072d4:	4413      	add	r3, r2
 81072d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81072da:	461a      	mov	r2, r3
 81072dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 81072e0:	6013      	str	r3, [r2, #0]
 81072e2:	e013      	b.n	810730c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 81072e4:	693b      	ldr	r3, [r7, #16]
 81072e6:	015a      	lsls	r2, r3, #5
 81072e8:	68fb      	ldr	r3, [r7, #12]
 81072ea:	4413      	add	r3, r2
 81072ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81072f0:	461a      	mov	r2, r3
 81072f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 81072f6:	6013      	str	r3, [r2, #0]
 81072f8:	e008      	b.n	810730c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 81072fa:	693b      	ldr	r3, [r7, #16]
 81072fc:	015a      	lsls	r2, r3, #5
 81072fe:	68fb      	ldr	r3, [r7, #12]
 8107300:	4413      	add	r3, r2
 8107302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107306:	461a      	mov	r2, r3
 8107308:	2300      	movs	r3, #0
 810730a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810730c:	693b      	ldr	r3, [r7, #16]
 810730e:	015a      	lsls	r2, r3, #5
 8107310:	68fb      	ldr	r3, [r7, #12]
 8107312:	4413      	add	r3, r2
 8107314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107318:	461a      	mov	r2, r3
 810731a:	2300      	movs	r3, #0
 810731c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810731e:	693b      	ldr	r3, [r7, #16]
 8107320:	015a      	lsls	r2, r3, #5
 8107322:	68fb      	ldr	r3, [r7, #12]
 8107324:	4413      	add	r3, r2
 8107326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810732a:	461a      	mov	r2, r3
 810732c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8107330:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107332:	693b      	ldr	r3, [r7, #16]
 8107334:	3301      	adds	r3, #1
 8107336:	613b      	str	r3, [r7, #16]
 8107338:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810733c:	461a      	mov	r2, r3
 810733e:	693b      	ldr	r3, [r7, #16]
 8107340:	4293      	cmp	r3, r2
 8107342:	d3b5      	bcc.n	81072b0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107344:	2300      	movs	r3, #0
 8107346:	613b      	str	r3, [r7, #16]
 8107348:	e043      	b.n	81073d2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810734a:	693b      	ldr	r3, [r7, #16]
 810734c:	015a      	lsls	r2, r3, #5
 810734e:	68fb      	ldr	r3, [r7, #12]
 8107350:	4413      	add	r3, r2
 8107352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107356:	681b      	ldr	r3, [r3, #0]
 8107358:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810735c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8107360:	d118      	bne.n	8107394 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8107362:	693b      	ldr	r3, [r7, #16]
 8107364:	2b00      	cmp	r3, #0
 8107366:	d10a      	bne.n	810737e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8107368:	693b      	ldr	r3, [r7, #16]
 810736a:	015a      	lsls	r2, r3, #5
 810736c:	68fb      	ldr	r3, [r7, #12]
 810736e:	4413      	add	r3, r2
 8107370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107374:	461a      	mov	r2, r3
 8107376:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810737a:	6013      	str	r3, [r2, #0]
 810737c:	e013      	b.n	81073a6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810737e:	693b      	ldr	r3, [r7, #16]
 8107380:	015a      	lsls	r2, r3, #5
 8107382:	68fb      	ldr	r3, [r7, #12]
 8107384:	4413      	add	r3, r2
 8107386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810738a:	461a      	mov	r2, r3
 810738c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8107390:	6013      	str	r3, [r2, #0]
 8107392:	e008      	b.n	81073a6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8107394:	693b      	ldr	r3, [r7, #16]
 8107396:	015a      	lsls	r2, r3, #5
 8107398:	68fb      	ldr	r3, [r7, #12]
 810739a:	4413      	add	r3, r2
 810739c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81073a0:	461a      	mov	r2, r3
 81073a2:	2300      	movs	r3, #0
 81073a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 81073a6:	693b      	ldr	r3, [r7, #16]
 81073a8:	015a      	lsls	r2, r3, #5
 81073aa:	68fb      	ldr	r3, [r7, #12]
 81073ac:	4413      	add	r3, r2
 81073ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81073b2:	461a      	mov	r2, r3
 81073b4:	2300      	movs	r3, #0
 81073b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 81073b8:	693b      	ldr	r3, [r7, #16]
 81073ba:	015a      	lsls	r2, r3, #5
 81073bc:	68fb      	ldr	r3, [r7, #12]
 81073be:	4413      	add	r3, r2
 81073c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81073c4:	461a      	mov	r2, r3
 81073c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 81073ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 81073cc:	693b      	ldr	r3, [r7, #16]
 81073ce:	3301      	adds	r3, #1
 81073d0:	613b      	str	r3, [r7, #16]
 81073d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 81073d6:	461a      	mov	r2, r3
 81073d8:	693b      	ldr	r3, [r7, #16]
 81073da:	4293      	cmp	r3, r2
 81073dc:	d3b5      	bcc.n	810734a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81073e4:	691b      	ldr	r3, [r3, #16]
 81073e6:	68fa      	ldr	r2, [r7, #12]
 81073e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81073ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81073f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	2200      	movs	r2, #0
 81073f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 81073f8:	687b      	ldr	r3, [r7, #4]
 81073fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 81073fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8107400:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8107404:	2b00      	cmp	r3, #0
 8107406:	d105      	bne.n	8107414 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8107408:	687b      	ldr	r3, [r7, #4]
 810740a:	699b      	ldr	r3, [r3, #24]
 810740c:	f043 0210 	orr.w	r2, r3, #16
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8107414:	687b      	ldr	r3, [r7, #4]
 8107416:	699a      	ldr	r2, [r3, #24]
 8107418:	4b10      	ldr	r3, [pc, #64]	@ (810745c <USB_DevInit+0x2b8>)
 810741a:	4313      	orrs	r3, r2
 810741c:	687a      	ldr	r2, [r7, #4]
 810741e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8107420:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8107424:	2b00      	cmp	r3, #0
 8107426:	d005      	beq.n	8107434 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	699b      	ldr	r3, [r3, #24]
 810742c:	f043 0208 	orr.w	r2, r3, #8
 8107430:	687b      	ldr	r3, [r7, #4]
 8107432:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8107434:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8107438:	2b01      	cmp	r3, #1
 810743a:	d107      	bne.n	810744c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810743c:	687b      	ldr	r3, [r7, #4]
 810743e:	699b      	ldr	r3, [r3, #24]
 8107440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8107444:	f043 0304 	orr.w	r3, r3, #4
 8107448:	687a      	ldr	r2, [r7, #4]
 810744a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810744c:	7dfb      	ldrb	r3, [r7, #23]
}
 810744e:	4618      	mov	r0, r3
 8107450:	3718      	adds	r7, #24
 8107452:	46bd      	mov	sp, r7
 8107454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8107458:	b004      	add	sp, #16
 810745a:	4770      	bx	lr
 810745c:	803c3800 	.word	0x803c3800

08107460 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8107460:	b480      	push	{r7}
 8107462:	b085      	sub	sp, #20
 8107464:	af00      	add	r7, sp, #0
 8107466:	6078      	str	r0, [r7, #4]
 8107468:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810746a:	2300      	movs	r3, #0
 810746c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810746e:	68fb      	ldr	r3, [r7, #12]
 8107470:	3301      	adds	r3, #1
 8107472:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107474:	68fb      	ldr	r3, [r7, #12]
 8107476:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810747a:	d901      	bls.n	8107480 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810747c:	2303      	movs	r3, #3
 810747e:	e01b      	b.n	81074b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8107480:	687b      	ldr	r3, [r7, #4]
 8107482:	691b      	ldr	r3, [r3, #16]
 8107484:	2b00      	cmp	r3, #0
 8107486:	daf2      	bge.n	810746e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8107488:	2300      	movs	r3, #0
 810748a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810748c:	683b      	ldr	r3, [r7, #0]
 810748e:	019b      	lsls	r3, r3, #6
 8107490:	f043 0220 	orr.w	r2, r3, #32
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8107498:	68fb      	ldr	r3, [r7, #12]
 810749a:	3301      	adds	r3, #1
 810749c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810749e:	68fb      	ldr	r3, [r7, #12]
 81074a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81074a4:	d901      	bls.n	81074aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 81074a6:	2303      	movs	r3, #3
 81074a8:	e006      	b.n	81074b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	691b      	ldr	r3, [r3, #16]
 81074ae:	f003 0320 	and.w	r3, r3, #32
 81074b2:	2b20      	cmp	r3, #32
 81074b4:	d0f0      	beq.n	8107498 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 81074b6:	2300      	movs	r3, #0
}
 81074b8:	4618      	mov	r0, r3
 81074ba:	3714      	adds	r7, #20
 81074bc:	46bd      	mov	sp, r7
 81074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074c2:	4770      	bx	lr

081074c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 81074c4:	b480      	push	{r7}
 81074c6:	b085      	sub	sp, #20
 81074c8:	af00      	add	r7, sp, #0
 81074ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81074cc:	2300      	movs	r3, #0
 81074ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81074d0:	68fb      	ldr	r3, [r7, #12]
 81074d2:	3301      	adds	r3, #1
 81074d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81074d6:	68fb      	ldr	r3, [r7, #12]
 81074d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81074dc:	d901      	bls.n	81074e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 81074de:	2303      	movs	r3, #3
 81074e0:	e018      	b.n	8107514 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81074e2:	687b      	ldr	r3, [r7, #4]
 81074e4:	691b      	ldr	r3, [r3, #16]
 81074e6:	2b00      	cmp	r3, #0
 81074e8:	daf2      	bge.n	81074d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 81074ea:	2300      	movs	r3, #0
 81074ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	2210      	movs	r2, #16
 81074f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81074f4:	68fb      	ldr	r3, [r7, #12]
 81074f6:	3301      	adds	r3, #1
 81074f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81074fa:	68fb      	ldr	r3, [r7, #12]
 81074fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107500:	d901      	bls.n	8107506 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8107502:	2303      	movs	r3, #3
 8107504:	e006      	b.n	8107514 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8107506:	687b      	ldr	r3, [r7, #4]
 8107508:	691b      	ldr	r3, [r3, #16]
 810750a:	f003 0310 	and.w	r3, r3, #16
 810750e:	2b10      	cmp	r3, #16
 8107510:	d0f0      	beq.n	81074f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8107512:	2300      	movs	r3, #0
}
 8107514:	4618      	mov	r0, r3
 8107516:	3714      	adds	r7, #20
 8107518:	46bd      	mov	sp, r7
 810751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810751e:	4770      	bx	lr

08107520 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8107520:	b480      	push	{r7}
 8107522:	b085      	sub	sp, #20
 8107524:	af00      	add	r7, sp, #0
 8107526:	6078      	str	r0, [r7, #4]
 8107528:	460b      	mov	r3, r1
 810752a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810752c:	687b      	ldr	r3, [r7, #4]
 810752e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8107530:	68fb      	ldr	r3, [r7, #12]
 8107532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107536:	681a      	ldr	r2, [r3, #0]
 8107538:	78fb      	ldrb	r3, [r7, #3]
 810753a:	68f9      	ldr	r1, [r7, #12]
 810753c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8107540:	4313      	orrs	r3, r2
 8107542:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8107544:	2300      	movs	r3, #0
}
 8107546:	4618      	mov	r0, r3
 8107548:	3714      	adds	r7, #20
 810754a:	46bd      	mov	sp, r7
 810754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107550:	4770      	bx	lr

08107552 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8107552:	b480      	push	{r7}
 8107554:	b085      	sub	sp, #20
 8107556:	af00      	add	r7, sp, #0
 8107558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810755a:	687b      	ldr	r3, [r7, #4]
 810755c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810755e:	68fb      	ldr	r3, [r7, #12]
 8107560:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8107564:	681b      	ldr	r3, [r3, #0]
 8107566:	68fa      	ldr	r2, [r7, #12]
 8107568:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810756c:	f023 0303 	bic.w	r3, r3, #3
 8107570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8107572:	68fb      	ldr	r3, [r7, #12]
 8107574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107578:	685b      	ldr	r3, [r3, #4]
 810757a:	68fa      	ldr	r2, [r7, #12]
 810757c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8107580:	f043 0302 	orr.w	r3, r3, #2
 8107584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8107586:	2300      	movs	r3, #0
}
 8107588:	4618      	mov	r0, r3
 810758a:	3714      	adds	r7, #20
 810758c:	46bd      	mov	sp, r7
 810758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107592:	4770      	bx	lr

08107594 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8107594:	b480      	push	{r7}
 8107596:	b083      	sub	sp, #12
 8107598:	af00      	add	r7, sp, #0
 810759a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	695b      	ldr	r3, [r3, #20]
 81075a0:	f003 0301 	and.w	r3, r3, #1
}
 81075a4:	4618      	mov	r0, r3
 81075a6:	370c      	adds	r7, #12
 81075a8:	46bd      	mov	sp, r7
 81075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075ae:	4770      	bx	lr

081075b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 81075b0:	b480      	push	{r7}
 81075b2:	b085      	sub	sp, #20
 81075b4:	af00      	add	r7, sp, #0
 81075b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81075b8:	2300      	movs	r3, #0
 81075ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81075bc:	68fb      	ldr	r3, [r7, #12]
 81075be:	3301      	adds	r3, #1
 81075c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81075c2:	68fb      	ldr	r3, [r7, #12]
 81075c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81075c8:	d901      	bls.n	81075ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 81075ca:	2303      	movs	r3, #3
 81075cc:	e01b      	b.n	8107606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81075ce:	687b      	ldr	r3, [r7, #4]
 81075d0:	691b      	ldr	r3, [r3, #16]
 81075d2:	2b00      	cmp	r3, #0
 81075d4:	daf2      	bge.n	81075bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 81075d6:	2300      	movs	r3, #0
 81075d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 81075da:	687b      	ldr	r3, [r7, #4]
 81075dc:	691b      	ldr	r3, [r3, #16]
 81075de:	f043 0201 	orr.w	r2, r3, #1
 81075e2:	687b      	ldr	r3, [r7, #4]
 81075e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81075e6:	68fb      	ldr	r3, [r7, #12]
 81075e8:	3301      	adds	r3, #1
 81075ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81075ec:	68fb      	ldr	r3, [r7, #12]
 81075ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81075f2:	d901      	bls.n	81075f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 81075f4:	2303      	movs	r3, #3
 81075f6:	e006      	b.n	8107606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 81075f8:	687b      	ldr	r3, [r7, #4]
 81075fa:	691b      	ldr	r3, [r3, #16]
 81075fc:	f003 0301 	and.w	r3, r3, #1
 8107600:	2b01      	cmp	r3, #1
 8107602:	d0f0      	beq.n	81075e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8107604:	2300      	movs	r3, #0
}
 8107606:	4618      	mov	r0, r3
 8107608:	3714      	adds	r7, #20
 810760a:	46bd      	mov	sp, r7
 810760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107610:	4770      	bx	lr
	...

08107614 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8107614:	b580      	push	{r7, lr}
 8107616:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8107618:	4b05      	ldr	r3, [pc, #20]	@ (8107630 <SysTick_Handler+0x1c>)
 810761a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810761c:	f000 f9fe 	bl	8107a1c <xTaskGetSchedulerState>
 8107620:	4603      	mov	r3, r0
 8107622:	2b01      	cmp	r3, #1
 8107624:	d001      	beq.n	810762a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8107626:	f000 f89f 	bl	8107768 <xPortSysTickHandler>
  }
}
 810762a:	bf00      	nop
 810762c:	bd80      	pop	{r7, pc}
 810762e:	bf00      	nop
 8107630:	e000e010 	.word	0xe000e010

08107634 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8107634:	b480      	push	{r7}
 8107636:	b085      	sub	sp, #20
 8107638:	af00      	add	r7, sp, #0
 810763a:	6078      	str	r0, [r7, #4]
 810763c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810763e:	687b      	ldr	r3, [r7, #4]
 8107640:	685b      	ldr	r3, [r3, #4]
 8107642:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8107644:	683b      	ldr	r3, [r7, #0]
 8107646:	68fa      	ldr	r2, [r7, #12]
 8107648:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810764a:	68fb      	ldr	r3, [r7, #12]
 810764c:	689a      	ldr	r2, [r3, #8]
 810764e:	683b      	ldr	r3, [r7, #0]
 8107650:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8107652:	68fb      	ldr	r3, [r7, #12]
 8107654:	689b      	ldr	r3, [r3, #8]
 8107656:	683a      	ldr	r2, [r7, #0]
 8107658:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810765a:	68fb      	ldr	r3, [r7, #12]
 810765c:	683a      	ldr	r2, [r7, #0]
 810765e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8107660:	683b      	ldr	r3, [r7, #0]
 8107662:	687a      	ldr	r2, [r7, #4]
 8107664:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	681b      	ldr	r3, [r3, #0]
 810766a:	1c5a      	adds	r2, r3, #1
 810766c:	687b      	ldr	r3, [r7, #4]
 810766e:	601a      	str	r2, [r3, #0]
}
 8107670:	bf00      	nop
 8107672:	3714      	adds	r7, #20
 8107674:	46bd      	mov	sp, r7
 8107676:	f85d 7b04 	ldr.w	r7, [sp], #4
 810767a:	4770      	bx	lr

0810767c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810767c:	b480      	push	{r7}
 810767e:	b085      	sub	sp, #20
 8107680:	af00      	add	r7, sp, #0
 8107682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8107684:	687b      	ldr	r3, [r7, #4]
 8107686:	691b      	ldr	r3, [r3, #16]
 8107688:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810768a:	687b      	ldr	r3, [r7, #4]
 810768c:	685b      	ldr	r3, [r3, #4]
 810768e:	687a      	ldr	r2, [r7, #4]
 8107690:	6892      	ldr	r2, [r2, #8]
 8107692:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	689b      	ldr	r3, [r3, #8]
 8107698:	687a      	ldr	r2, [r7, #4]
 810769a:	6852      	ldr	r2, [r2, #4]
 810769c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810769e:	68fb      	ldr	r3, [r7, #12]
 81076a0:	685b      	ldr	r3, [r3, #4]
 81076a2:	687a      	ldr	r2, [r7, #4]
 81076a4:	429a      	cmp	r2, r3
 81076a6:	d103      	bne.n	81076b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81076a8:	687b      	ldr	r3, [r7, #4]
 81076aa:	689a      	ldr	r2, [r3, #8]
 81076ac:	68fb      	ldr	r3, [r7, #12]
 81076ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81076b0:	687b      	ldr	r3, [r7, #4]
 81076b2:	2200      	movs	r2, #0
 81076b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81076b6:	68fb      	ldr	r3, [r7, #12]
 81076b8:	681b      	ldr	r3, [r3, #0]
 81076ba:	1e5a      	subs	r2, r3, #1
 81076bc:	68fb      	ldr	r3, [r7, #12]
 81076be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81076c0:	68fb      	ldr	r3, [r7, #12]
 81076c2:	681b      	ldr	r3, [r3, #0]
}
 81076c4:	4618      	mov	r0, r3
 81076c6:	3714      	adds	r7, #20
 81076c8:	46bd      	mov	sp, r7
 81076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076ce:	4770      	bx	lr

081076d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81076d0:	4b07      	ldr	r3, [pc, #28]	@ (81076f0 <pxCurrentTCBConst2>)
 81076d2:	6819      	ldr	r1, [r3, #0]
 81076d4:	6808      	ldr	r0, [r1, #0]
 81076d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81076da:	f380 8809 	msr	PSP, r0
 81076de:	f3bf 8f6f 	isb	sy
 81076e2:	f04f 0000 	mov.w	r0, #0
 81076e6:	f380 8811 	msr	BASEPRI, r0
 81076ea:	4770      	bx	lr
 81076ec:	f3af 8000 	nop.w

081076f0 <pxCurrentTCBConst2>:
 81076f0:	10000858 	.word	0x10000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81076f4:	bf00      	nop
 81076f6:	bf00      	nop
	...

08107700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8107700:	f3ef 8009 	mrs	r0, PSP
 8107704:	f3bf 8f6f 	isb	sy
 8107708:	4b15      	ldr	r3, [pc, #84]	@ (8107760 <pxCurrentTCBConst>)
 810770a:	681a      	ldr	r2, [r3, #0]
 810770c:	f01e 0f10 	tst.w	lr, #16
 8107710:	bf08      	it	eq
 8107712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8107716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810771a:	6010      	str	r0, [r2, #0]
 810771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8107720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8107724:	f380 8811 	msr	BASEPRI, r0
 8107728:	f3bf 8f4f 	dsb	sy
 810772c:	f3bf 8f6f 	isb	sy
 8107730:	f000 f8f6 	bl	8107920 <vTaskSwitchContext>
 8107734:	f04f 0000 	mov.w	r0, #0
 8107738:	f380 8811 	msr	BASEPRI, r0
 810773c:	bc09      	pop	{r0, r3}
 810773e:	6819      	ldr	r1, [r3, #0]
 8107740:	6808      	ldr	r0, [r1, #0]
 8107742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107746:	f01e 0f10 	tst.w	lr, #16
 810774a:	bf08      	it	eq
 810774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8107750:	f380 8809 	msr	PSP, r0
 8107754:	f3bf 8f6f 	isb	sy
 8107758:	4770      	bx	lr
 810775a:	bf00      	nop
 810775c:	f3af 8000 	nop.w

08107760 <pxCurrentTCBConst>:
 8107760:	10000858 	.word	0x10000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8107764:	bf00      	nop
 8107766:	bf00      	nop

08107768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8107768:	b580      	push	{r7, lr}
 810776a:	b082      	sub	sp, #8
 810776c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107772:	f383 8811 	msr	BASEPRI, r3
 8107776:	f3bf 8f6f 	isb	sy
 810777a:	f3bf 8f4f 	dsb	sy
 810777e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8107780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8107782:	f000 f813 	bl	81077ac <xTaskIncrementTick>
 8107786:	4603      	mov	r3, r0
 8107788:	2b00      	cmp	r3, #0
 810778a:	d003      	beq.n	8107794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810778c:	4b06      	ldr	r3, [pc, #24]	@ (81077a8 <xPortSysTickHandler+0x40>)
 810778e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107792:	601a      	str	r2, [r3, #0]
 8107794:	2300      	movs	r3, #0
 8107796:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8107798:	683b      	ldr	r3, [r7, #0]
 810779a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810779e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 81077a0:	bf00      	nop
 81077a2:	3708      	adds	r7, #8
 81077a4:	46bd      	mov	sp, r7
 81077a6:	bd80      	pop	{r7, pc}
 81077a8:	e000ed04 	.word	0xe000ed04

081077ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81077ac:	b580      	push	{r7, lr}
 81077ae:	b086      	sub	sp, #24
 81077b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81077b2:	2300      	movs	r3, #0
 81077b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81077b6:	4b4f      	ldr	r3, [pc, #316]	@ (81078f4 <xTaskIncrementTick+0x148>)
 81077b8:	681b      	ldr	r3, [r3, #0]
 81077ba:	2b00      	cmp	r3, #0
 81077bc:	f040 8090 	bne.w	81078e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81077c0:	4b4d      	ldr	r3, [pc, #308]	@ (81078f8 <xTaskIncrementTick+0x14c>)
 81077c2:	681b      	ldr	r3, [r3, #0]
 81077c4:	3301      	adds	r3, #1
 81077c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81077c8:	4a4b      	ldr	r2, [pc, #300]	@ (81078f8 <xTaskIncrementTick+0x14c>)
 81077ca:	693b      	ldr	r3, [r7, #16]
 81077cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81077ce:	693b      	ldr	r3, [r7, #16]
 81077d0:	2b00      	cmp	r3, #0
 81077d2:	d121      	bne.n	8107818 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 81077d4:	4b49      	ldr	r3, [pc, #292]	@ (81078fc <xTaskIncrementTick+0x150>)
 81077d6:	681b      	ldr	r3, [r3, #0]
 81077d8:	681b      	ldr	r3, [r3, #0]
 81077da:	2b00      	cmp	r3, #0
 81077dc:	d00b      	beq.n	81077f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 81077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81077e2:	f383 8811 	msr	BASEPRI, r3
 81077e6:	f3bf 8f6f 	isb	sy
 81077ea:	f3bf 8f4f 	dsb	sy
 81077ee:	603b      	str	r3, [r7, #0]
}
 81077f0:	bf00      	nop
 81077f2:	bf00      	nop
 81077f4:	e7fd      	b.n	81077f2 <xTaskIncrementTick+0x46>
 81077f6:	4b41      	ldr	r3, [pc, #260]	@ (81078fc <xTaskIncrementTick+0x150>)
 81077f8:	681b      	ldr	r3, [r3, #0]
 81077fa:	60fb      	str	r3, [r7, #12]
 81077fc:	4b40      	ldr	r3, [pc, #256]	@ (8107900 <xTaskIncrementTick+0x154>)
 81077fe:	681b      	ldr	r3, [r3, #0]
 8107800:	4a3e      	ldr	r2, [pc, #248]	@ (81078fc <xTaskIncrementTick+0x150>)
 8107802:	6013      	str	r3, [r2, #0]
 8107804:	4a3e      	ldr	r2, [pc, #248]	@ (8107900 <xTaskIncrementTick+0x154>)
 8107806:	68fb      	ldr	r3, [r7, #12]
 8107808:	6013      	str	r3, [r2, #0]
 810780a:	4b3e      	ldr	r3, [pc, #248]	@ (8107904 <xTaskIncrementTick+0x158>)
 810780c:	681b      	ldr	r3, [r3, #0]
 810780e:	3301      	adds	r3, #1
 8107810:	4a3c      	ldr	r2, [pc, #240]	@ (8107904 <xTaskIncrementTick+0x158>)
 8107812:	6013      	str	r3, [r2, #0]
 8107814:	f000 f8e2 	bl	81079dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8107818:	4b3b      	ldr	r3, [pc, #236]	@ (8107908 <xTaskIncrementTick+0x15c>)
 810781a:	681b      	ldr	r3, [r3, #0]
 810781c:	693a      	ldr	r2, [r7, #16]
 810781e:	429a      	cmp	r2, r3
 8107820:	d349      	bcc.n	81078b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107822:	4b36      	ldr	r3, [pc, #216]	@ (81078fc <xTaskIncrementTick+0x150>)
 8107824:	681b      	ldr	r3, [r3, #0]
 8107826:	681b      	ldr	r3, [r3, #0]
 8107828:	2b00      	cmp	r3, #0
 810782a:	d104      	bne.n	8107836 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810782c:	4b36      	ldr	r3, [pc, #216]	@ (8107908 <xTaskIncrementTick+0x15c>)
 810782e:	f04f 32ff 	mov.w	r2, #4294967295
 8107832:	601a      	str	r2, [r3, #0]
					break;
 8107834:	e03f      	b.n	81078b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107836:	4b31      	ldr	r3, [pc, #196]	@ (81078fc <xTaskIncrementTick+0x150>)
 8107838:	681b      	ldr	r3, [r3, #0]
 810783a:	68db      	ldr	r3, [r3, #12]
 810783c:	68db      	ldr	r3, [r3, #12]
 810783e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8107840:	68bb      	ldr	r3, [r7, #8]
 8107842:	685b      	ldr	r3, [r3, #4]
 8107844:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8107846:	693a      	ldr	r2, [r7, #16]
 8107848:	687b      	ldr	r3, [r7, #4]
 810784a:	429a      	cmp	r2, r3
 810784c:	d203      	bcs.n	8107856 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810784e:	4a2e      	ldr	r2, [pc, #184]	@ (8107908 <xTaskIncrementTick+0x15c>)
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8107854:	e02f      	b.n	81078b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107856:	68bb      	ldr	r3, [r7, #8]
 8107858:	3304      	adds	r3, #4
 810785a:	4618      	mov	r0, r3
 810785c:	f7ff ff0e 	bl	810767c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8107860:	68bb      	ldr	r3, [r7, #8]
 8107862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107864:	2b00      	cmp	r3, #0
 8107866:	d004      	beq.n	8107872 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107868:	68bb      	ldr	r3, [r7, #8]
 810786a:	3318      	adds	r3, #24
 810786c:	4618      	mov	r0, r3
 810786e:	f7ff ff05 	bl	810767c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8107872:	68bb      	ldr	r3, [r7, #8]
 8107874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107876:	4b25      	ldr	r3, [pc, #148]	@ (810790c <xTaskIncrementTick+0x160>)
 8107878:	681b      	ldr	r3, [r3, #0]
 810787a:	429a      	cmp	r2, r3
 810787c:	d903      	bls.n	8107886 <xTaskIncrementTick+0xda>
 810787e:	68bb      	ldr	r3, [r7, #8]
 8107880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107882:	4a22      	ldr	r2, [pc, #136]	@ (810790c <xTaskIncrementTick+0x160>)
 8107884:	6013      	str	r3, [r2, #0]
 8107886:	68bb      	ldr	r3, [r7, #8]
 8107888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810788a:	4613      	mov	r3, r2
 810788c:	009b      	lsls	r3, r3, #2
 810788e:	4413      	add	r3, r2
 8107890:	009b      	lsls	r3, r3, #2
 8107892:	4a1f      	ldr	r2, [pc, #124]	@ (8107910 <xTaskIncrementTick+0x164>)
 8107894:	441a      	add	r2, r3
 8107896:	68bb      	ldr	r3, [r7, #8]
 8107898:	3304      	adds	r3, #4
 810789a:	4619      	mov	r1, r3
 810789c:	4610      	mov	r0, r2
 810789e:	f7ff fec9 	bl	8107634 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81078a2:	68bb      	ldr	r3, [r7, #8]
 81078a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81078a6:	4b1b      	ldr	r3, [pc, #108]	@ (8107914 <xTaskIncrementTick+0x168>)
 81078a8:	681b      	ldr	r3, [r3, #0]
 81078aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81078ac:	429a      	cmp	r2, r3
 81078ae:	d3b8      	bcc.n	8107822 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 81078b0:	2301      	movs	r3, #1
 81078b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81078b4:	e7b5      	b.n	8107822 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81078b6:	4b17      	ldr	r3, [pc, #92]	@ (8107914 <xTaskIncrementTick+0x168>)
 81078b8:	681b      	ldr	r3, [r3, #0]
 81078ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81078bc:	4914      	ldr	r1, [pc, #80]	@ (8107910 <xTaskIncrementTick+0x164>)
 81078be:	4613      	mov	r3, r2
 81078c0:	009b      	lsls	r3, r3, #2
 81078c2:	4413      	add	r3, r2
 81078c4:	009b      	lsls	r3, r3, #2
 81078c6:	440b      	add	r3, r1
 81078c8:	681b      	ldr	r3, [r3, #0]
 81078ca:	2b01      	cmp	r3, #1
 81078cc:	d901      	bls.n	81078d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 81078ce:	2301      	movs	r3, #1
 81078d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81078d2:	4b11      	ldr	r3, [pc, #68]	@ (8107918 <xTaskIncrementTick+0x16c>)
 81078d4:	681b      	ldr	r3, [r3, #0]
 81078d6:	2b00      	cmp	r3, #0
 81078d8:	d007      	beq.n	81078ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 81078da:	2301      	movs	r3, #1
 81078dc:	617b      	str	r3, [r7, #20]
 81078de:	e004      	b.n	81078ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81078e0:	4b0e      	ldr	r3, [pc, #56]	@ (810791c <xTaskIncrementTick+0x170>)
 81078e2:	681b      	ldr	r3, [r3, #0]
 81078e4:	3301      	adds	r3, #1
 81078e6:	4a0d      	ldr	r2, [pc, #52]	@ (810791c <xTaskIncrementTick+0x170>)
 81078e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81078ea:	697b      	ldr	r3, [r7, #20]
}
 81078ec:	4618      	mov	r0, r3
 81078ee:	3718      	adds	r7, #24
 81078f0:	46bd      	mov	sp, r7
 81078f2:	bd80      	pop	{r7, pc}
 81078f4:	10000ce0 	.word	0x10000ce0
 81078f8:	10000cc4 	.word	0x10000cc4
 81078fc:	10000cbc 	.word	0x10000cbc
 8107900:	10000cc0 	.word	0x10000cc0
 8107904:	10000cd8 	.word	0x10000cd8
 8107908:	10000cdc 	.word	0x10000cdc
 810790c:	10000cc8 	.word	0x10000cc8
 8107910:	1000085c 	.word	0x1000085c
 8107914:	10000858 	.word	0x10000858
 8107918:	10000cd4 	.word	0x10000cd4
 810791c:	10000cd0 	.word	0x10000cd0

08107920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8107920:	b480      	push	{r7}
 8107922:	b085      	sub	sp, #20
 8107924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8107926:	4b28      	ldr	r3, [pc, #160]	@ (81079c8 <vTaskSwitchContext+0xa8>)
 8107928:	681b      	ldr	r3, [r3, #0]
 810792a:	2b00      	cmp	r3, #0
 810792c:	d003      	beq.n	8107936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810792e:	4b27      	ldr	r3, [pc, #156]	@ (81079cc <vTaskSwitchContext+0xac>)
 8107930:	2201      	movs	r2, #1
 8107932:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8107934:	e042      	b.n	81079bc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8107936:	4b25      	ldr	r3, [pc, #148]	@ (81079cc <vTaskSwitchContext+0xac>)
 8107938:	2200      	movs	r2, #0
 810793a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810793c:	4b24      	ldr	r3, [pc, #144]	@ (81079d0 <vTaskSwitchContext+0xb0>)
 810793e:	681b      	ldr	r3, [r3, #0]
 8107940:	60fb      	str	r3, [r7, #12]
 8107942:	e011      	b.n	8107968 <vTaskSwitchContext+0x48>
 8107944:	68fb      	ldr	r3, [r7, #12]
 8107946:	2b00      	cmp	r3, #0
 8107948:	d10b      	bne.n	8107962 <vTaskSwitchContext+0x42>
	__asm volatile
 810794a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810794e:	f383 8811 	msr	BASEPRI, r3
 8107952:	f3bf 8f6f 	isb	sy
 8107956:	f3bf 8f4f 	dsb	sy
 810795a:	607b      	str	r3, [r7, #4]
}
 810795c:	bf00      	nop
 810795e:	bf00      	nop
 8107960:	e7fd      	b.n	810795e <vTaskSwitchContext+0x3e>
 8107962:	68fb      	ldr	r3, [r7, #12]
 8107964:	3b01      	subs	r3, #1
 8107966:	60fb      	str	r3, [r7, #12]
 8107968:	491a      	ldr	r1, [pc, #104]	@ (81079d4 <vTaskSwitchContext+0xb4>)
 810796a:	68fa      	ldr	r2, [r7, #12]
 810796c:	4613      	mov	r3, r2
 810796e:	009b      	lsls	r3, r3, #2
 8107970:	4413      	add	r3, r2
 8107972:	009b      	lsls	r3, r3, #2
 8107974:	440b      	add	r3, r1
 8107976:	681b      	ldr	r3, [r3, #0]
 8107978:	2b00      	cmp	r3, #0
 810797a:	d0e3      	beq.n	8107944 <vTaskSwitchContext+0x24>
 810797c:	68fa      	ldr	r2, [r7, #12]
 810797e:	4613      	mov	r3, r2
 8107980:	009b      	lsls	r3, r3, #2
 8107982:	4413      	add	r3, r2
 8107984:	009b      	lsls	r3, r3, #2
 8107986:	4a13      	ldr	r2, [pc, #76]	@ (81079d4 <vTaskSwitchContext+0xb4>)
 8107988:	4413      	add	r3, r2
 810798a:	60bb      	str	r3, [r7, #8]
 810798c:	68bb      	ldr	r3, [r7, #8]
 810798e:	685b      	ldr	r3, [r3, #4]
 8107990:	685a      	ldr	r2, [r3, #4]
 8107992:	68bb      	ldr	r3, [r7, #8]
 8107994:	605a      	str	r2, [r3, #4]
 8107996:	68bb      	ldr	r3, [r7, #8]
 8107998:	685a      	ldr	r2, [r3, #4]
 810799a:	68bb      	ldr	r3, [r7, #8]
 810799c:	3308      	adds	r3, #8
 810799e:	429a      	cmp	r2, r3
 81079a0:	d104      	bne.n	81079ac <vTaskSwitchContext+0x8c>
 81079a2:	68bb      	ldr	r3, [r7, #8]
 81079a4:	685b      	ldr	r3, [r3, #4]
 81079a6:	685a      	ldr	r2, [r3, #4]
 81079a8:	68bb      	ldr	r3, [r7, #8]
 81079aa:	605a      	str	r2, [r3, #4]
 81079ac:	68bb      	ldr	r3, [r7, #8]
 81079ae:	685b      	ldr	r3, [r3, #4]
 81079b0:	68db      	ldr	r3, [r3, #12]
 81079b2:	4a09      	ldr	r2, [pc, #36]	@ (81079d8 <vTaskSwitchContext+0xb8>)
 81079b4:	6013      	str	r3, [r2, #0]
 81079b6:	4a06      	ldr	r2, [pc, #24]	@ (81079d0 <vTaskSwitchContext+0xb0>)
 81079b8:	68fb      	ldr	r3, [r7, #12]
 81079ba:	6013      	str	r3, [r2, #0]
}
 81079bc:	bf00      	nop
 81079be:	3714      	adds	r7, #20
 81079c0:	46bd      	mov	sp, r7
 81079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079c6:	4770      	bx	lr
 81079c8:	10000ce0 	.word	0x10000ce0
 81079cc:	10000cd4 	.word	0x10000cd4
 81079d0:	10000cc8 	.word	0x10000cc8
 81079d4:	1000085c 	.word	0x1000085c
 81079d8:	10000858 	.word	0x10000858

081079dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 81079dc:	b480      	push	{r7}
 81079de:	b083      	sub	sp, #12
 81079e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81079e2:	4b0c      	ldr	r3, [pc, #48]	@ (8107a14 <prvResetNextTaskUnblockTime+0x38>)
 81079e4:	681b      	ldr	r3, [r3, #0]
 81079e6:	681b      	ldr	r3, [r3, #0]
 81079e8:	2b00      	cmp	r3, #0
 81079ea:	d104      	bne.n	81079f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81079ec:	4b0a      	ldr	r3, [pc, #40]	@ (8107a18 <prvResetNextTaskUnblockTime+0x3c>)
 81079ee:	f04f 32ff 	mov.w	r2, #4294967295
 81079f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81079f4:	e008      	b.n	8107a08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81079f6:	4b07      	ldr	r3, [pc, #28]	@ (8107a14 <prvResetNextTaskUnblockTime+0x38>)
 81079f8:	681b      	ldr	r3, [r3, #0]
 81079fa:	68db      	ldr	r3, [r3, #12]
 81079fc:	68db      	ldr	r3, [r3, #12]
 81079fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8107a00:	687b      	ldr	r3, [r7, #4]
 8107a02:	685b      	ldr	r3, [r3, #4]
 8107a04:	4a04      	ldr	r2, [pc, #16]	@ (8107a18 <prvResetNextTaskUnblockTime+0x3c>)
 8107a06:	6013      	str	r3, [r2, #0]
}
 8107a08:	bf00      	nop
 8107a0a:	370c      	adds	r7, #12
 8107a0c:	46bd      	mov	sp, r7
 8107a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a12:	4770      	bx	lr
 8107a14:	10000cbc 	.word	0x10000cbc
 8107a18:	10000cdc 	.word	0x10000cdc

08107a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8107a1c:	b480      	push	{r7}
 8107a1e:	b083      	sub	sp, #12
 8107a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8107a22:	4b0b      	ldr	r3, [pc, #44]	@ (8107a50 <xTaskGetSchedulerState+0x34>)
 8107a24:	681b      	ldr	r3, [r3, #0]
 8107a26:	2b00      	cmp	r3, #0
 8107a28:	d102      	bne.n	8107a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8107a2a:	2301      	movs	r3, #1
 8107a2c:	607b      	str	r3, [r7, #4]
 8107a2e:	e008      	b.n	8107a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107a30:	4b08      	ldr	r3, [pc, #32]	@ (8107a54 <xTaskGetSchedulerState+0x38>)
 8107a32:	681b      	ldr	r3, [r3, #0]
 8107a34:	2b00      	cmp	r3, #0
 8107a36:	d102      	bne.n	8107a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8107a38:	2302      	movs	r3, #2
 8107a3a:	607b      	str	r3, [r7, #4]
 8107a3c:	e001      	b.n	8107a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8107a3e:	2300      	movs	r3, #0
 8107a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8107a42:	687b      	ldr	r3, [r7, #4]
	}
 8107a44:	4618      	mov	r0, r3
 8107a46:	370c      	adds	r7, #12
 8107a48:	46bd      	mov	sp, r7
 8107a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a4e:	4770      	bx	lr
 8107a50:	10000ccc 	.word	0x10000ccc
 8107a54:	10000ce0 	.word	0x10000ce0

08107a58 <std>:
 8107a58:	2300      	movs	r3, #0
 8107a5a:	b510      	push	{r4, lr}
 8107a5c:	4604      	mov	r4, r0
 8107a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8107a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8107a66:	6083      	str	r3, [r0, #8]
 8107a68:	8181      	strh	r1, [r0, #12]
 8107a6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8107a6c:	81c2      	strh	r2, [r0, #14]
 8107a6e:	6183      	str	r3, [r0, #24]
 8107a70:	4619      	mov	r1, r3
 8107a72:	2208      	movs	r2, #8
 8107a74:	305c      	adds	r0, #92	@ 0x5c
 8107a76:	f000 f9f9 	bl	8107e6c <memset>
 8107a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8107ab0 <std+0x58>)
 8107a7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8107a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8107ab4 <std+0x5c>)
 8107a80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8107a82:	4b0d      	ldr	r3, [pc, #52]	@ (8107ab8 <std+0x60>)
 8107a84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8107a86:	4b0d      	ldr	r3, [pc, #52]	@ (8107abc <std+0x64>)
 8107a88:	6323      	str	r3, [r4, #48]	@ 0x30
 8107a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8107ac0 <std+0x68>)
 8107a8c:	6224      	str	r4, [r4, #32]
 8107a8e:	429c      	cmp	r4, r3
 8107a90:	d006      	beq.n	8107aa0 <std+0x48>
 8107a92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8107a96:	4294      	cmp	r4, r2
 8107a98:	d002      	beq.n	8107aa0 <std+0x48>
 8107a9a:	33d0      	adds	r3, #208	@ 0xd0
 8107a9c:	429c      	cmp	r4, r3
 8107a9e:	d105      	bne.n	8107aac <std+0x54>
 8107aa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8107aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107aa8:	f000 ba58 	b.w	8107f5c <__retarget_lock_init_recursive>
 8107aac:	bd10      	pop	{r4, pc}
 8107aae:	bf00      	nop
 8107ab0:	08107cbd 	.word	0x08107cbd
 8107ab4:	08107cdf 	.word	0x08107cdf
 8107ab8:	08107d17 	.word	0x08107d17
 8107abc:	08107d3b 	.word	0x08107d3b
 8107ac0:	10000ce4 	.word	0x10000ce4

08107ac4 <stdio_exit_handler>:
 8107ac4:	4a02      	ldr	r2, [pc, #8]	@ (8107ad0 <stdio_exit_handler+0xc>)
 8107ac6:	4903      	ldr	r1, [pc, #12]	@ (8107ad4 <stdio_exit_handler+0x10>)
 8107ac8:	4803      	ldr	r0, [pc, #12]	@ (8107ad8 <stdio_exit_handler+0x14>)
 8107aca:	f000 b869 	b.w	8107ba0 <_fwalk_sglue>
 8107ace:	bf00      	nop
 8107ad0:	10000010 	.word	0x10000010
 8107ad4:	08108815 	.word	0x08108815
 8107ad8:	10000020 	.word	0x10000020

08107adc <cleanup_stdio>:
 8107adc:	6841      	ldr	r1, [r0, #4]
 8107ade:	4b0c      	ldr	r3, [pc, #48]	@ (8107b10 <cleanup_stdio+0x34>)
 8107ae0:	4299      	cmp	r1, r3
 8107ae2:	b510      	push	{r4, lr}
 8107ae4:	4604      	mov	r4, r0
 8107ae6:	d001      	beq.n	8107aec <cleanup_stdio+0x10>
 8107ae8:	f000 fe94 	bl	8108814 <_fflush_r>
 8107aec:	68a1      	ldr	r1, [r4, #8]
 8107aee:	4b09      	ldr	r3, [pc, #36]	@ (8107b14 <cleanup_stdio+0x38>)
 8107af0:	4299      	cmp	r1, r3
 8107af2:	d002      	beq.n	8107afa <cleanup_stdio+0x1e>
 8107af4:	4620      	mov	r0, r4
 8107af6:	f000 fe8d 	bl	8108814 <_fflush_r>
 8107afa:	68e1      	ldr	r1, [r4, #12]
 8107afc:	4b06      	ldr	r3, [pc, #24]	@ (8107b18 <cleanup_stdio+0x3c>)
 8107afe:	4299      	cmp	r1, r3
 8107b00:	d004      	beq.n	8107b0c <cleanup_stdio+0x30>
 8107b02:	4620      	mov	r0, r4
 8107b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107b08:	f000 be84 	b.w	8108814 <_fflush_r>
 8107b0c:	bd10      	pop	{r4, pc}
 8107b0e:	bf00      	nop
 8107b10:	10000ce4 	.word	0x10000ce4
 8107b14:	10000d4c 	.word	0x10000d4c
 8107b18:	10000db4 	.word	0x10000db4

08107b1c <global_stdio_init.part.0>:
 8107b1c:	b510      	push	{r4, lr}
 8107b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8107b4c <global_stdio_init.part.0+0x30>)
 8107b20:	4c0b      	ldr	r4, [pc, #44]	@ (8107b50 <global_stdio_init.part.0+0x34>)
 8107b22:	4a0c      	ldr	r2, [pc, #48]	@ (8107b54 <global_stdio_init.part.0+0x38>)
 8107b24:	601a      	str	r2, [r3, #0]
 8107b26:	4620      	mov	r0, r4
 8107b28:	2200      	movs	r2, #0
 8107b2a:	2104      	movs	r1, #4
 8107b2c:	f7ff ff94 	bl	8107a58 <std>
 8107b30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8107b34:	2201      	movs	r2, #1
 8107b36:	2109      	movs	r1, #9
 8107b38:	f7ff ff8e 	bl	8107a58 <std>
 8107b3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8107b40:	2202      	movs	r2, #2
 8107b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107b46:	2112      	movs	r1, #18
 8107b48:	f7ff bf86 	b.w	8107a58 <std>
 8107b4c:	10000e1c 	.word	0x10000e1c
 8107b50:	10000ce4 	.word	0x10000ce4
 8107b54:	08107ac5 	.word	0x08107ac5

08107b58 <__sfp_lock_acquire>:
 8107b58:	4801      	ldr	r0, [pc, #4]	@ (8107b60 <__sfp_lock_acquire+0x8>)
 8107b5a:	f000 ba00 	b.w	8107f5e <__retarget_lock_acquire_recursive>
 8107b5e:	bf00      	nop
 8107b60:	10000e25 	.word	0x10000e25

08107b64 <__sfp_lock_release>:
 8107b64:	4801      	ldr	r0, [pc, #4]	@ (8107b6c <__sfp_lock_release+0x8>)
 8107b66:	f000 b9fb 	b.w	8107f60 <__retarget_lock_release_recursive>
 8107b6a:	bf00      	nop
 8107b6c:	10000e25 	.word	0x10000e25

08107b70 <__sinit>:
 8107b70:	b510      	push	{r4, lr}
 8107b72:	4604      	mov	r4, r0
 8107b74:	f7ff fff0 	bl	8107b58 <__sfp_lock_acquire>
 8107b78:	6a23      	ldr	r3, [r4, #32]
 8107b7a:	b11b      	cbz	r3, 8107b84 <__sinit+0x14>
 8107b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107b80:	f7ff bff0 	b.w	8107b64 <__sfp_lock_release>
 8107b84:	4b04      	ldr	r3, [pc, #16]	@ (8107b98 <__sinit+0x28>)
 8107b86:	6223      	str	r3, [r4, #32]
 8107b88:	4b04      	ldr	r3, [pc, #16]	@ (8107b9c <__sinit+0x2c>)
 8107b8a:	681b      	ldr	r3, [r3, #0]
 8107b8c:	2b00      	cmp	r3, #0
 8107b8e:	d1f5      	bne.n	8107b7c <__sinit+0xc>
 8107b90:	f7ff ffc4 	bl	8107b1c <global_stdio_init.part.0>
 8107b94:	e7f2      	b.n	8107b7c <__sinit+0xc>
 8107b96:	bf00      	nop
 8107b98:	08107add 	.word	0x08107add
 8107b9c:	10000e1c 	.word	0x10000e1c

08107ba0 <_fwalk_sglue>:
 8107ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107ba4:	4607      	mov	r7, r0
 8107ba6:	4688      	mov	r8, r1
 8107ba8:	4614      	mov	r4, r2
 8107baa:	2600      	movs	r6, #0
 8107bac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8107bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8107bb4:	d505      	bpl.n	8107bc2 <_fwalk_sglue+0x22>
 8107bb6:	6824      	ldr	r4, [r4, #0]
 8107bb8:	2c00      	cmp	r4, #0
 8107bba:	d1f7      	bne.n	8107bac <_fwalk_sglue+0xc>
 8107bbc:	4630      	mov	r0, r6
 8107bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107bc2:	89ab      	ldrh	r3, [r5, #12]
 8107bc4:	2b01      	cmp	r3, #1
 8107bc6:	d907      	bls.n	8107bd8 <_fwalk_sglue+0x38>
 8107bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8107bcc:	3301      	adds	r3, #1
 8107bce:	d003      	beq.n	8107bd8 <_fwalk_sglue+0x38>
 8107bd0:	4629      	mov	r1, r5
 8107bd2:	4638      	mov	r0, r7
 8107bd4:	47c0      	blx	r8
 8107bd6:	4306      	orrs	r6, r0
 8107bd8:	3568      	adds	r5, #104	@ 0x68
 8107bda:	e7e9      	b.n	8107bb0 <_fwalk_sglue+0x10>

08107bdc <iprintf>:
 8107bdc:	b40f      	push	{r0, r1, r2, r3}
 8107bde:	b507      	push	{r0, r1, r2, lr}
 8107be0:	4906      	ldr	r1, [pc, #24]	@ (8107bfc <iprintf+0x20>)
 8107be2:	ab04      	add	r3, sp, #16
 8107be4:	6808      	ldr	r0, [r1, #0]
 8107be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8107bea:	6881      	ldr	r1, [r0, #8]
 8107bec:	9301      	str	r3, [sp, #4]
 8107bee:	f000 fae9 	bl	81081c4 <_vfiprintf_r>
 8107bf2:	b003      	add	sp, #12
 8107bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8107bf8:	b004      	add	sp, #16
 8107bfa:	4770      	bx	lr
 8107bfc:	1000001c 	.word	0x1000001c

08107c00 <_puts_r>:
 8107c00:	6a03      	ldr	r3, [r0, #32]
 8107c02:	b570      	push	{r4, r5, r6, lr}
 8107c04:	6884      	ldr	r4, [r0, #8]
 8107c06:	4605      	mov	r5, r0
 8107c08:	460e      	mov	r6, r1
 8107c0a:	b90b      	cbnz	r3, 8107c10 <_puts_r+0x10>
 8107c0c:	f7ff ffb0 	bl	8107b70 <__sinit>
 8107c10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8107c12:	07db      	lsls	r3, r3, #31
 8107c14:	d405      	bmi.n	8107c22 <_puts_r+0x22>
 8107c16:	89a3      	ldrh	r3, [r4, #12]
 8107c18:	0598      	lsls	r0, r3, #22
 8107c1a:	d402      	bmi.n	8107c22 <_puts_r+0x22>
 8107c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8107c1e:	f000 f99e 	bl	8107f5e <__retarget_lock_acquire_recursive>
 8107c22:	89a3      	ldrh	r3, [r4, #12]
 8107c24:	0719      	lsls	r1, r3, #28
 8107c26:	d502      	bpl.n	8107c2e <_puts_r+0x2e>
 8107c28:	6923      	ldr	r3, [r4, #16]
 8107c2a:	2b00      	cmp	r3, #0
 8107c2c:	d135      	bne.n	8107c9a <_puts_r+0x9a>
 8107c2e:	4621      	mov	r1, r4
 8107c30:	4628      	mov	r0, r5
 8107c32:	f000 f8c5 	bl	8107dc0 <__swsetup_r>
 8107c36:	b380      	cbz	r0, 8107c9a <_puts_r+0x9a>
 8107c38:	f04f 35ff 	mov.w	r5, #4294967295
 8107c3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8107c3e:	07da      	lsls	r2, r3, #31
 8107c40:	d405      	bmi.n	8107c4e <_puts_r+0x4e>
 8107c42:	89a3      	ldrh	r3, [r4, #12]
 8107c44:	059b      	lsls	r3, r3, #22
 8107c46:	d402      	bmi.n	8107c4e <_puts_r+0x4e>
 8107c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8107c4a:	f000 f989 	bl	8107f60 <__retarget_lock_release_recursive>
 8107c4e:	4628      	mov	r0, r5
 8107c50:	bd70      	pop	{r4, r5, r6, pc}
 8107c52:	2b00      	cmp	r3, #0
 8107c54:	da04      	bge.n	8107c60 <_puts_r+0x60>
 8107c56:	69a2      	ldr	r2, [r4, #24]
 8107c58:	429a      	cmp	r2, r3
 8107c5a:	dc17      	bgt.n	8107c8c <_puts_r+0x8c>
 8107c5c:	290a      	cmp	r1, #10
 8107c5e:	d015      	beq.n	8107c8c <_puts_r+0x8c>
 8107c60:	6823      	ldr	r3, [r4, #0]
 8107c62:	1c5a      	adds	r2, r3, #1
 8107c64:	6022      	str	r2, [r4, #0]
 8107c66:	7019      	strb	r1, [r3, #0]
 8107c68:	68a3      	ldr	r3, [r4, #8]
 8107c6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8107c6e:	3b01      	subs	r3, #1
 8107c70:	60a3      	str	r3, [r4, #8]
 8107c72:	2900      	cmp	r1, #0
 8107c74:	d1ed      	bne.n	8107c52 <_puts_r+0x52>
 8107c76:	2b00      	cmp	r3, #0
 8107c78:	da11      	bge.n	8107c9e <_puts_r+0x9e>
 8107c7a:	4622      	mov	r2, r4
 8107c7c:	210a      	movs	r1, #10
 8107c7e:	4628      	mov	r0, r5
 8107c80:	f000 f85f 	bl	8107d42 <__swbuf_r>
 8107c84:	3001      	adds	r0, #1
 8107c86:	d0d7      	beq.n	8107c38 <_puts_r+0x38>
 8107c88:	250a      	movs	r5, #10
 8107c8a:	e7d7      	b.n	8107c3c <_puts_r+0x3c>
 8107c8c:	4622      	mov	r2, r4
 8107c8e:	4628      	mov	r0, r5
 8107c90:	f000 f857 	bl	8107d42 <__swbuf_r>
 8107c94:	3001      	adds	r0, #1
 8107c96:	d1e7      	bne.n	8107c68 <_puts_r+0x68>
 8107c98:	e7ce      	b.n	8107c38 <_puts_r+0x38>
 8107c9a:	3e01      	subs	r6, #1
 8107c9c:	e7e4      	b.n	8107c68 <_puts_r+0x68>
 8107c9e:	6823      	ldr	r3, [r4, #0]
 8107ca0:	1c5a      	adds	r2, r3, #1
 8107ca2:	6022      	str	r2, [r4, #0]
 8107ca4:	220a      	movs	r2, #10
 8107ca6:	701a      	strb	r2, [r3, #0]
 8107ca8:	e7ee      	b.n	8107c88 <_puts_r+0x88>
	...

08107cac <puts>:
 8107cac:	4b02      	ldr	r3, [pc, #8]	@ (8107cb8 <puts+0xc>)
 8107cae:	4601      	mov	r1, r0
 8107cb0:	6818      	ldr	r0, [r3, #0]
 8107cb2:	f7ff bfa5 	b.w	8107c00 <_puts_r>
 8107cb6:	bf00      	nop
 8107cb8:	1000001c 	.word	0x1000001c

08107cbc <__sread>:
 8107cbc:	b510      	push	{r4, lr}
 8107cbe:	460c      	mov	r4, r1
 8107cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107cc4:	f000 f8fc 	bl	8107ec0 <_read_r>
 8107cc8:	2800      	cmp	r0, #0
 8107cca:	bfab      	itete	ge
 8107ccc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8107cce:	89a3      	ldrhlt	r3, [r4, #12]
 8107cd0:	181b      	addge	r3, r3, r0
 8107cd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8107cd6:	bfac      	ite	ge
 8107cd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8107cda:	81a3      	strhlt	r3, [r4, #12]
 8107cdc:	bd10      	pop	{r4, pc}

08107cde <__swrite>:
 8107cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107ce2:	461f      	mov	r7, r3
 8107ce4:	898b      	ldrh	r3, [r1, #12]
 8107ce6:	05db      	lsls	r3, r3, #23
 8107ce8:	4605      	mov	r5, r0
 8107cea:	460c      	mov	r4, r1
 8107cec:	4616      	mov	r6, r2
 8107cee:	d505      	bpl.n	8107cfc <__swrite+0x1e>
 8107cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107cf4:	2302      	movs	r3, #2
 8107cf6:	2200      	movs	r2, #0
 8107cf8:	f000 f8d0 	bl	8107e9c <_lseek_r>
 8107cfc:	89a3      	ldrh	r3, [r4, #12]
 8107cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107d02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8107d06:	81a3      	strh	r3, [r4, #12]
 8107d08:	4632      	mov	r2, r6
 8107d0a:	463b      	mov	r3, r7
 8107d0c:	4628      	mov	r0, r5
 8107d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107d12:	f000 b8e7 	b.w	8107ee4 <_write_r>

08107d16 <__sseek>:
 8107d16:	b510      	push	{r4, lr}
 8107d18:	460c      	mov	r4, r1
 8107d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107d1e:	f000 f8bd 	bl	8107e9c <_lseek_r>
 8107d22:	1c43      	adds	r3, r0, #1
 8107d24:	89a3      	ldrh	r3, [r4, #12]
 8107d26:	bf15      	itete	ne
 8107d28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8107d2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8107d2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8107d32:	81a3      	strheq	r3, [r4, #12]
 8107d34:	bf18      	it	ne
 8107d36:	81a3      	strhne	r3, [r4, #12]
 8107d38:	bd10      	pop	{r4, pc}

08107d3a <__sclose>:
 8107d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107d3e:	f000 b89d 	b.w	8107e7c <_close_r>

08107d42 <__swbuf_r>:
 8107d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107d44:	460e      	mov	r6, r1
 8107d46:	4614      	mov	r4, r2
 8107d48:	4605      	mov	r5, r0
 8107d4a:	b118      	cbz	r0, 8107d54 <__swbuf_r+0x12>
 8107d4c:	6a03      	ldr	r3, [r0, #32]
 8107d4e:	b90b      	cbnz	r3, 8107d54 <__swbuf_r+0x12>
 8107d50:	f7ff ff0e 	bl	8107b70 <__sinit>
 8107d54:	69a3      	ldr	r3, [r4, #24]
 8107d56:	60a3      	str	r3, [r4, #8]
 8107d58:	89a3      	ldrh	r3, [r4, #12]
 8107d5a:	071a      	lsls	r2, r3, #28
 8107d5c:	d501      	bpl.n	8107d62 <__swbuf_r+0x20>
 8107d5e:	6923      	ldr	r3, [r4, #16]
 8107d60:	b943      	cbnz	r3, 8107d74 <__swbuf_r+0x32>
 8107d62:	4621      	mov	r1, r4
 8107d64:	4628      	mov	r0, r5
 8107d66:	f000 f82b 	bl	8107dc0 <__swsetup_r>
 8107d6a:	b118      	cbz	r0, 8107d74 <__swbuf_r+0x32>
 8107d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8107d70:	4638      	mov	r0, r7
 8107d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107d74:	6823      	ldr	r3, [r4, #0]
 8107d76:	6922      	ldr	r2, [r4, #16]
 8107d78:	1a98      	subs	r0, r3, r2
 8107d7a:	6963      	ldr	r3, [r4, #20]
 8107d7c:	b2f6      	uxtb	r6, r6
 8107d7e:	4283      	cmp	r3, r0
 8107d80:	4637      	mov	r7, r6
 8107d82:	dc05      	bgt.n	8107d90 <__swbuf_r+0x4e>
 8107d84:	4621      	mov	r1, r4
 8107d86:	4628      	mov	r0, r5
 8107d88:	f000 fd44 	bl	8108814 <_fflush_r>
 8107d8c:	2800      	cmp	r0, #0
 8107d8e:	d1ed      	bne.n	8107d6c <__swbuf_r+0x2a>
 8107d90:	68a3      	ldr	r3, [r4, #8]
 8107d92:	3b01      	subs	r3, #1
 8107d94:	60a3      	str	r3, [r4, #8]
 8107d96:	6823      	ldr	r3, [r4, #0]
 8107d98:	1c5a      	adds	r2, r3, #1
 8107d9a:	6022      	str	r2, [r4, #0]
 8107d9c:	701e      	strb	r6, [r3, #0]
 8107d9e:	6962      	ldr	r2, [r4, #20]
 8107da0:	1c43      	adds	r3, r0, #1
 8107da2:	429a      	cmp	r2, r3
 8107da4:	d004      	beq.n	8107db0 <__swbuf_r+0x6e>
 8107da6:	89a3      	ldrh	r3, [r4, #12]
 8107da8:	07db      	lsls	r3, r3, #31
 8107daa:	d5e1      	bpl.n	8107d70 <__swbuf_r+0x2e>
 8107dac:	2e0a      	cmp	r6, #10
 8107dae:	d1df      	bne.n	8107d70 <__swbuf_r+0x2e>
 8107db0:	4621      	mov	r1, r4
 8107db2:	4628      	mov	r0, r5
 8107db4:	f000 fd2e 	bl	8108814 <_fflush_r>
 8107db8:	2800      	cmp	r0, #0
 8107dba:	d0d9      	beq.n	8107d70 <__swbuf_r+0x2e>
 8107dbc:	e7d6      	b.n	8107d6c <__swbuf_r+0x2a>
	...

08107dc0 <__swsetup_r>:
 8107dc0:	b538      	push	{r3, r4, r5, lr}
 8107dc2:	4b29      	ldr	r3, [pc, #164]	@ (8107e68 <__swsetup_r+0xa8>)
 8107dc4:	4605      	mov	r5, r0
 8107dc6:	6818      	ldr	r0, [r3, #0]
 8107dc8:	460c      	mov	r4, r1
 8107dca:	b118      	cbz	r0, 8107dd4 <__swsetup_r+0x14>
 8107dcc:	6a03      	ldr	r3, [r0, #32]
 8107dce:	b90b      	cbnz	r3, 8107dd4 <__swsetup_r+0x14>
 8107dd0:	f7ff fece 	bl	8107b70 <__sinit>
 8107dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107dd8:	0719      	lsls	r1, r3, #28
 8107dda:	d422      	bmi.n	8107e22 <__swsetup_r+0x62>
 8107ddc:	06da      	lsls	r2, r3, #27
 8107dde:	d407      	bmi.n	8107df0 <__swsetup_r+0x30>
 8107de0:	2209      	movs	r2, #9
 8107de2:	602a      	str	r2, [r5, #0]
 8107de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8107de8:	81a3      	strh	r3, [r4, #12]
 8107dea:	f04f 30ff 	mov.w	r0, #4294967295
 8107dee:	e033      	b.n	8107e58 <__swsetup_r+0x98>
 8107df0:	0758      	lsls	r0, r3, #29
 8107df2:	d512      	bpl.n	8107e1a <__swsetup_r+0x5a>
 8107df4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107df6:	b141      	cbz	r1, 8107e0a <__swsetup_r+0x4a>
 8107df8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8107dfc:	4299      	cmp	r1, r3
 8107dfe:	d002      	beq.n	8107e06 <__swsetup_r+0x46>
 8107e00:	4628      	mov	r0, r5
 8107e02:	f000 f8bd 	bl	8107f80 <_free_r>
 8107e06:	2300      	movs	r3, #0
 8107e08:	6363      	str	r3, [r4, #52]	@ 0x34
 8107e0a:	89a3      	ldrh	r3, [r4, #12]
 8107e0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8107e10:	81a3      	strh	r3, [r4, #12]
 8107e12:	2300      	movs	r3, #0
 8107e14:	6063      	str	r3, [r4, #4]
 8107e16:	6923      	ldr	r3, [r4, #16]
 8107e18:	6023      	str	r3, [r4, #0]
 8107e1a:	89a3      	ldrh	r3, [r4, #12]
 8107e1c:	f043 0308 	orr.w	r3, r3, #8
 8107e20:	81a3      	strh	r3, [r4, #12]
 8107e22:	6923      	ldr	r3, [r4, #16]
 8107e24:	b94b      	cbnz	r3, 8107e3a <__swsetup_r+0x7a>
 8107e26:	89a3      	ldrh	r3, [r4, #12]
 8107e28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8107e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107e30:	d003      	beq.n	8107e3a <__swsetup_r+0x7a>
 8107e32:	4621      	mov	r1, r4
 8107e34:	4628      	mov	r0, r5
 8107e36:	f000 fd3b 	bl	81088b0 <__smakebuf_r>
 8107e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107e3e:	f013 0201 	ands.w	r2, r3, #1
 8107e42:	d00a      	beq.n	8107e5a <__swsetup_r+0x9a>
 8107e44:	2200      	movs	r2, #0
 8107e46:	60a2      	str	r2, [r4, #8]
 8107e48:	6962      	ldr	r2, [r4, #20]
 8107e4a:	4252      	negs	r2, r2
 8107e4c:	61a2      	str	r2, [r4, #24]
 8107e4e:	6922      	ldr	r2, [r4, #16]
 8107e50:	b942      	cbnz	r2, 8107e64 <__swsetup_r+0xa4>
 8107e52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8107e56:	d1c5      	bne.n	8107de4 <__swsetup_r+0x24>
 8107e58:	bd38      	pop	{r3, r4, r5, pc}
 8107e5a:	0799      	lsls	r1, r3, #30
 8107e5c:	bf58      	it	pl
 8107e5e:	6962      	ldrpl	r2, [r4, #20]
 8107e60:	60a2      	str	r2, [r4, #8]
 8107e62:	e7f4      	b.n	8107e4e <__swsetup_r+0x8e>
 8107e64:	2000      	movs	r0, #0
 8107e66:	e7f7      	b.n	8107e58 <__swsetup_r+0x98>
 8107e68:	1000001c 	.word	0x1000001c

08107e6c <memset>:
 8107e6c:	4402      	add	r2, r0
 8107e6e:	4603      	mov	r3, r0
 8107e70:	4293      	cmp	r3, r2
 8107e72:	d100      	bne.n	8107e76 <memset+0xa>
 8107e74:	4770      	bx	lr
 8107e76:	f803 1b01 	strb.w	r1, [r3], #1
 8107e7a:	e7f9      	b.n	8107e70 <memset+0x4>

08107e7c <_close_r>:
 8107e7c:	b538      	push	{r3, r4, r5, lr}
 8107e7e:	4d06      	ldr	r5, [pc, #24]	@ (8107e98 <_close_r+0x1c>)
 8107e80:	2300      	movs	r3, #0
 8107e82:	4604      	mov	r4, r0
 8107e84:	4608      	mov	r0, r1
 8107e86:	602b      	str	r3, [r5, #0]
 8107e88:	f7f9 ff95 	bl	8101db6 <_close>
 8107e8c:	1c43      	adds	r3, r0, #1
 8107e8e:	d102      	bne.n	8107e96 <_close_r+0x1a>
 8107e90:	682b      	ldr	r3, [r5, #0]
 8107e92:	b103      	cbz	r3, 8107e96 <_close_r+0x1a>
 8107e94:	6023      	str	r3, [r4, #0]
 8107e96:	bd38      	pop	{r3, r4, r5, pc}
 8107e98:	10000e20 	.word	0x10000e20

08107e9c <_lseek_r>:
 8107e9c:	b538      	push	{r3, r4, r5, lr}
 8107e9e:	4d07      	ldr	r5, [pc, #28]	@ (8107ebc <_lseek_r+0x20>)
 8107ea0:	4604      	mov	r4, r0
 8107ea2:	4608      	mov	r0, r1
 8107ea4:	4611      	mov	r1, r2
 8107ea6:	2200      	movs	r2, #0
 8107ea8:	602a      	str	r2, [r5, #0]
 8107eaa:	461a      	mov	r2, r3
 8107eac:	f7f9 ffaa 	bl	8101e04 <_lseek>
 8107eb0:	1c43      	adds	r3, r0, #1
 8107eb2:	d102      	bne.n	8107eba <_lseek_r+0x1e>
 8107eb4:	682b      	ldr	r3, [r5, #0]
 8107eb6:	b103      	cbz	r3, 8107eba <_lseek_r+0x1e>
 8107eb8:	6023      	str	r3, [r4, #0]
 8107eba:	bd38      	pop	{r3, r4, r5, pc}
 8107ebc:	10000e20 	.word	0x10000e20

08107ec0 <_read_r>:
 8107ec0:	b538      	push	{r3, r4, r5, lr}
 8107ec2:	4d07      	ldr	r5, [pc, #28]	@ (8107ee0 <_read_r+0x20>)
 8107ec4:	4604      	mov	r4, r0
 8107ec6:	4608      	mov	r0, r1
 8107ec8:	4611      	mov	r1, r2
 8107eca:	2200      	movs	r2, #0
 8107ecc:	602a      	str	r2, [r5, #0]
 8107ece:	461a      	mov	r2, r3
 8107ed0:	f7f9 ff38 	bl	8101d44 <_read>
 8107ed4:	1c43      	adds	r3, r0, #1
 8107ed6:	d102      	bne.n	8107ede <_read_r+0x1e>
 8107ed8:	682b      	ldr	r3, [r5, #0]
 8107eda:	b103      	cbz	r3, 8107ede <_read_r+0x1e>
 8107edc:	6023      	str	r3, [r4, #0]
 8107ede:	bd38      	pop	{r3, r4, r5, pc}
 8107ee0:	10000e20 	.word	0x10000e20

08107ee4 <_write_r>:
 8107ee4:	b538      	push	{r3, r4, r5, lr}
 8107ee6:	4d07      	ldr	r5, [pc, #28]	@ (8107f04 <_write_r+0x20>)
 8107ee8:	4604      	mov	r4, r0
 8107eea:	4608      	mov	r0, r1
 8107eec:	4611      	mov	r1, r2
 8107eee:	2200      	movs	r2, #0
 8107ef0:	602a      	str	r2, [r5, #0]
 8107ef2:	461a      	mov	r2, r3
 8107ef4:	f7f9 ff43 	bl	8101d7e <_write>
 8107ef8:	1c43      	adds	r3, r0, #1
 8107efa:	d102      	bne.n	8107f02 <_write_r+0x1e>
 8107efc:	682b      	ldr	r3, [r5, #0]
 8107efe:	b103      	cbz	r3, 8107f02 <_write_r+0x1e>
 8107f00:	6023      	str	r3, [r4, #0]
 8107f02:	bd38      	pop	{r3, r4, r5, pc}
 8107f04:	10000e20 	.word	0x10000e20

08107f08 <__errno>:
 8107f08:	4b01      	ldr	r3, [pc, #4]	@ (8107f10 <__errno+0x8>)
 8107f0a:	6818      	ldr	r0, [r3, #0]
 8107f0c:	4770      	bx	lr
 8107f0e:	bf00      	nop
 8107f10:	1000001c 	.word	0x1000001c

08107f14 <__libc_init_array>:
 8107f14:	b570      	push	{r4, r5, r6, lr}
 8107f16:	4d0d      	ldr	r5, [pc, #52]	@ (8107f4c <__libc_init_array+0x38>)
 8107f18:	4c0d      	ldr	r4, [pc, #52]	@ (8107f50 <__libc_init_array+0x3c>)
 8107f1a:	1b64      	subs	r4, r4, r5
 8107f1c:	10a4      	asrs	r4, r4, #2
 8107f1e:	2600      	movs	r6, #0
 8107f20:	42a6      	cmp	r6, r4
 8107f22:	d109      	bne.n	8107f38 <__libc_init_array+0x24>
 8107f24:	4d0b      	ldr	r5, [pc, #44]	@ (8107f54 <__libc_init_array+0x40>)
 8107f26:	4c0c      	ldr	r4, [pc, #48]	@ (8107f58 <__libc_init_array+0x44>)
 8107f28:	f000 fd30 	bl	810898c <_init>
 8107f2c:	1b64      	subs	r4, r4, r5
 8107f2e:	10a4      	asrs	r4, r4, #2
 8107f30:	2600      	movs	r6, #0
 8107f32:	42a6      	cmp	r6, r4
 8107f34:	d105      	bne.n	8107f42 <__libc_init_array+0x2e>
 8107f36:	bd70      	pop	{r4, r5, r6, pc}
 8107f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8107f3c:	4798      	blx	r3
 8107f3e:	3601      	adds	r6, #1
 8107f40:	e7ee      	b.n	8107f20 <__libc_init_array+0xc>
 8107f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8107f46:	4798      	blx	r3
 8107f48:	3601      	adds	r6, #1
 8107f4a:	e7f2      	b.n	8107f32 <__libc_init_array+0x1e>
 8107f4c:	08108ae0 	.word	0x08108ae0
 8107f50:	08108ae0 	.word	0x08108ae0
 8107f54:	08108ae0 	.word	0x08108ae0
 8107f58:	08108ae4 	.word	0x08108ae4

08107f5c <__retarget_lock_init_recursive>:
 8107f5c:	4770      	bx	lr

08107f5e <__retarget_lock_acquire_recursive>:
 8107f5e:	4770      	bx	lr

08107f60 <__retarget_lock_release_recursive>:
 8107f60:	4770      	bx	lr

08107f62 <memcpy>:
 8107f62:	440a      	add	r2, r1
 8107f64:	4291      	cmp	r1, r2
 8107f66:	f100 33ff 	add.w	r3, r0, #4294967295
 8107f6a:	d100      	bne.n	8107f6e <memcpy+0xc>
 8107f6c:	4770      	bx	lr
 8107f6e:	b510      	push	{r4, lr}
 8107f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107f78:	4291      	cmp	r1, r2
 8107f7a:	d1f9      	bne.n	8107f70 <memcpy+0xe>
 8107f7c:	bd10      	pop	{r4, pc}
	...

08107f80 <_free_r>:
 8107f80:	b538      	push	{r3, r4, r5, lr}
 8107f82:	4605      	mov	r5, r0
 8107f84:	2900      	cmp	r1, #0
 8107f86:	d041      	beq.n	810800c <_free_r+0x8c>
 8107f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107f8c:	1f0c      	subs	r4, r1, #4
 8107f8e:	2b00      	cmp	r3, #0
 8107f90:	bfb8      	it	lt
 8107f92:	18e4      	addlt	r4, r4, r3
 8107f94:	f000 f8e0 	bl	8108158 <__malloc_lock>
 8107f98:	4a1d      	ldr	r2, [pc, #116]	@ (8108010 <_free_r+0x90>)
 8107f9a:	6813      	ldr	r3, [r2, #0]
 8107f9c:	b933      	cbnz	r3, 8107fac <_free_r+0x2c>
 8107f9e:	6063      	str	r3, [r4, #4]
 8107fa0:	6014      	str	r4, [r2, #0]
 8107fa2:	4628      	mov	r0, r5
 8107fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107fa8:	f000 b8dc 	b.w	8108164 <__malloc_unlock>
 8107fac:	42a3      	cmp	r3, r4
 8107fae:	d908      	bls.n	8107fc2 <_free_r+0x42>
 8107fb0:	6820      	ldr	r0, [r4, #0]
 8107fb2:	1821      	adds	r1, r4, r0
 8107fb4:	428b      	cmp	r3, r1
 8107fb6:	bf01      	itttt	eq
 8107fb8:	6819      	ldreq	r1, [r3, #0]
 8107fba:	685b      	ldreq	r3, [r3, #4]
 8107fbc:	1809      	addeq	r1, r1, r0
 8107fbe:	6021      	streq	r1, [r4, #0]
 8107fc0:	e7ed      	b.n	8107f9e <_free_r+0x1e>
 8107fc2:	461a      	mov	r2, r3
 8107fc4:	685b      	ldr	r3, [r3, #4]
 8107fc6:	b10b      	cbz	r3, 8107fcc <_free_r+0x4c>
 8107fc8:	42a3      	cmp	r3, r4
 8107fca:	d9fa      	bls.n	8107fc2 <_free_r+0x42>
 8107fcc:	6811      	ldr	r1, [r2, #0]
 8107fce:	1850      	adds	r0, r2, r1
 8107fd0:	42a0      	cmp	r0, r4
 8107fd2:	d10b      	bne.n	8107fec <_free_r+0x6c>
 8107fd4:	6820      	ldr	r0, [r4, #0]
 8107fd6:	4401      	add	r1, r0
 8107fd8:	1850      	adds	r0, r2, r1
 8107fda:	4283      	cmp	r3, r0
 8107fdc:	6011      	str	r1, [r2, #0]
 8107fde:	d1e0      	bne.n	8107fa2 <_free_r+0x22>
 8107fe0:	6818      	ldr	r0, [r3, #0]
 8107fe2:	685b      	ldr	r3, [r3, #4]
 8107fe4:	6053      	str	r3, [r2, #4]
 8107fe6:	4408      	add	r0, r1
 8107fe8:	6010      	str	r0, [r2, #0]
 8107fea:	e7da      	b.n	8107fa2 <_free_r+0x22>
 8107fec:	d902      	bls.n	8107ff4 <_free_r+0x74>
 8107fee:	230c      	movs	r3, #12
 8107ff0:	602b      	str	r3, [r5, #0]
 8107ff2:	e7d6      	b.n	8107fa2 <_free_r+0x22>
 8107ff4:	6820      	ldr	r0, [r4, #0]
 8107ff6:	1821      	adds	r1, r4, r0
 8107ff8:	428b      	cmp	r3, r1
 8107ffa:	bf04      	itt	eq
 8107ffc:	6819      	ldreq	r1, [r3, #0]
 8107ffe:	685b      	ldreq	r3, [r3, #4]
 8108000:	6063      	str	r3, [r4, #4]
 8108002:	bf04      	itt	eq
 8108004:	1809      	addeq	r1, r1, r0
 8108006:	6021      	streq	r1, [r4, #0]
 8108008:	6054      	str	r4, [r2, #4]
 810800a:	e7ca      	b.n	8107fa2 <_free_r+0x22>
 810800c:	bd38      	pop	{r3, r4, r5, pc}
 810800e:	bf00      	nop
 8108010:	10000e2c 	.word	0x10000e2c

08108014 <sbrk_aligned>:
 8108014:	b570      	push	{r4, r5, r6, lr}
 8108016:	4e0f      	ldr	r6, [pc, #60]	@ (8108054 <sbrk_aligned+0x40>)
 8108018:	460c      	mov	r4, r1
 810801a:	6831      	ldr	r1, [r6, #0]
 810801c:	4605      	mov	r5, r0
 810801e:	b911      	cbnz	r1, 8108026 <sbrk_aligned+0x12>
 8108020:	f000 fca4 	bl	810896c <_sbrk_r>
 8108024:	6030      	str	r0, [r6, #0]
 8108026:	4621      	mov	r1, r4
 8108028:	4628      	mov	r0, r5
 810802a:	f000 fc9f 	bl	810896c <_sbrk_r>
 810802e:	1c43      	adds	r3, r0, #1
 8108030:	d103      	bne.n	810803a <sbrk_aligned+0x26>
 8108032:	f04f 34ff 	mov.w	r4, #4294967295
 8108036:	4620      	mov	r0, r4
 8108038:	bd70      	pop	{r4, r5, r6, pc}
 810803a:	1cc4      	adds	r4, r0, #3
 810803c:	f024 0403 	bic.w	r4, r4, #3
 8108040:	42a0      	cmp	r0, r4
 8108042:	d0f8      	beq.n	8108036 <sbrk_aligned+0x22>
 8108044:	1a21      	subs	r1, r4, r0
 8108046:	4628      	mov	r0, r5
 8108048:	f000 fc90 	bl	810896c <_sbrk_r>
 810804c:	3001      	adds	r0, #1
 810804e:	d1f2      	bne.n	8108036 <sbrk_aligned+0x22>
 8108050:	e7ef      	b.n	8108032 <sbrk_aligned+0x1e>
 8108052:	bf00      	nop
 8108054:	10000e28 	.word	0x10000e28

08108058 <_malloc_r>:
 8108058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810805c:	1ccd      	adds	r5, r1, #3
 810805e:	f025 0503 	bic.w	r5, r5, #3
 8108062:	3508      	adds	r5, #8
 8108064:	2d0c      	cmp	r5, #12
 8108066:	bf38      	it	cc
 8108068:	250c      	movcc	r5, #12
 810806a:	2d00      	cmp	r5, #0
 810806c:	4606      	mov	r6, r0
 810806e:	db01      	blt.n	8108074 <_malloc_r+0x1c>
 8108070:	42a9      	cmp	r1, r5
 8108072:	d904      	bls.n	810807e <_malloc_r+0x26>
 8108074:	230c      	movs	r3, #12
 8108076:	6033      	str	r3, [r6, #0]
 8108078:	2000      	movs	r0, #0
 810807a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810807e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8108154 <_malloc_r+0xfc>
 8108082:	f000 f869 	bl	8108158 <__malloc_lock>
 8108086:	f8d8 3000 	ldr.w	r3, [r8]
 810808a:	461c      	mov	r4, r3
 810808c:	bb44      	cbnz	r4, 81080e0 <_malloc_r+0x88>
 810808e:	4629      	mov	r1, r5
 8108090:	4630      	mov	r0, r6
 8108092:	f7ff ffbf 	bl	8108014 <sbrk_aligned>
 8108096:	1c43      	adds	r3, r0, #1
 8108098:	4604      	mov	r4, r0
 810809a:	d158      	bne.n	810814e <_malloc_r+0xf6>
 810809c:	f8d8 4000 	ldr.w	r4, [r8]
 81080a0:	4627      	mov	r7, r4
 81080a2:	2f00      	cmp	r7, #0
 81080a4:	d143      	bne.n	810812e <_malloc_r+0xd6>
 81080a6:	2c00      	cmp	r4, #0
 81080a8:	d04b      	beq.n	8108142 <_malloc_r+0xea>
 81080aa:	6823      	ldr	r3, [r4, #0]
 81080ac:	4639      	mov	r1, r7
 81080ae:	4630      	mov	r0, r6
 81080b0:	eb04 0903 	add.w	r9, r4, r3
 81080b4:	f000 fc5a 	bl	810896c <_sbrk_r>
 81080b8:	4581      	cmp	r9, r0
 81080ba:	d142      	bne.n	8108142 <_malloc_r+0xea>
 81080bc:	6821      	ldr	r1, [r4, #0]
 81080be:	1a6d      	subs	r5, r5, r1
 81080c0:	4629      	mov	r1, r5
 81080c2:	4630      	mov	r0, r6
 81080c4:	f7ff ffa6 	bl	8108014 <sbrk_aligned>
 81080c8:	3001      	adds	r0, #1
 81080ca:	d03a      	beq.n	8108142 <_malloc_r+0xea>
 81080cc:	6823      	ldr	r3, [r4, #0]
 81080ce:	442b      	add	r3, r5
 81080d0:	6023      	str	r3, [r4, #0]
 81080d2:	f8d8 3000 	ldr.w	r3, [r8]
 81080d6:	685a      	ldr	r2, [r3, #4]
 81080d8:	bb62      	cbnz	r2, 8108134 <_malloc_r+0xdc>
 81080da:	f8c8 7000 	str.w	r7, [r8]
 81080de:	e00f      	b.n	8108100 <_malloc_r+0xa8>
 81080e0:	6822      	ldr	r2, [r4, #0]
 81080e2:	1b52      	subs	r2, r2, r5
 81080e4:	d420      	bmi.n	8108128 <_malloc_r+0xd0>
 81080e6:	2a0b      	cmp	r2, #11
 81080e8:	d917      	bls.n	810811a <_malloc_r+0xc2>
 81080ea:	1961      	adds	r1, r4, r5
 81080ec:	42a3      	cmp	r3, r4
 81080ee:	6025      	str	r5, [r4, #0]
 81080f0:	bf18      	it	ne
 81080f2:	6059      	strne	r1, [r3, #4]
 81080f4:	6863      	ldr	r3, [r4, #4]
 81080f6:	bf08      	it	eq
 81080f8:	f8c8 1000 	streq.w	r1, [r8]
 81080fc:	5162      	str	r2, [r4, r5]
 81080fe:	604b      	str	r3, [r1, #4]
 8108100:	4630      	mov	r0, r6
 8108102:	f000 f82f 	bl	8108164 <__malloc_unlock>
 8108106:	f104 000b 	add.w	r0, r4, #11
 810810a:	1d23      	adds	r3, r4, #4
 810810c:	f020 0007 	bic.w	r0, r0, #7
 8108110:	1ac2      	subs	r2, r0, r3
 8108112:	bf1c      	itt	ne
 8108114:	1a1b      	subne	r3, r3, r0
 8108116:	50a3      	strne	r3, [r4, r2]
 8108118:	e7af      	b.n	810807a <_malloc_r+0x22>
 810811a:	6862      	ldr	r2, [r4, #4]
 810811c:	42a3      	cmp	r3, r4
 810811e:	bf0c      	ite	eq
 8108120:	f8c8 2000 	streq.w	r2, [r8]
 8108124:	605a      	strne	r2, [r3, #4]
 8108126:	e7eb      	b.n	8108100 <_malloc_r+0xa8>
 8108128:	4623      	mov	r3, r4
 810812a:	6864      	ldr	r4, [r4, #4]
 810812c:	e7ae      	b.n	810808c <_malloc_r+0x34>
 810812e:	463c      	mov	r4, r7
 8108130:	687f      	ldr	r7, [r7, #4]
 8108132:	e7b6      	b.n	81080a2 <_malloc_r+0x4a>
 8108134:	461a      	mov	r2, r3
 8108136:	685b      	ldr	r3, [r3, #4]
 8108138:	42a3      	cmp	r3, r4
 810813a:	d1fb      	bne.n	8108134 <_malloc_r+0xdc>
 810813c:	2300      	movs	r3, #0
 810813e:	6053      	str	r3, [r2, #4]
 8108140:	e7de      	b.n	8108100 <_malloc_r+0xa8>
 8108142:	230c      	movs	r3, #12
 8108144:	6033      	str	r3, [r6, #0]
 8108146:	4630      	mov	r0, r6
 8108148:	f000 f80c 	bl	8108164 <__malloc_unlock>
 810814c:	e794      	b.n	8108078 <_malloc_r+0x20>
 810814e:	6005      	str	r5, [r0, #0]
 8108150:	e7d6      	b.n	8108100 <_malloc_r+0xa8>
 8108152:	bf00      	nop
 8108154:	10000e2c 	.word	0x10000e2c

08108158 <__malloc_lock>:
 8108158:	4801      	ldr	r0, [pc, #4]	@ (8108160 <__malloc_lock+0x8>)
 810815a:	f7ff bf00 	b.w	8107f5e <__retarget_lock_acquire_recursive>
 810815e:	bf00      	nop
 8108160:	10000e24 	.word	0x10000e24

08108164 <__malloc_unlock>:
 8108164:	4801      	ldr	r0, [pc, #4]	@ (810816c <__malloc_unlock+0x8>)
 8108166:	f7ff befb 	b.w	8107f60 <__retarget_lock_release_recursive>
 810816a:	bf00      	nop
 810816c:	10000e24 	.word	0x10000e24

08108170 <__sfputc_r>:
 8108170:	6893      	ldr	r3, [r2, #8]
 8108172:	3b01      	subs	r3, #1
 8108174:	2b00      	cmp	r3, #0
 8108176:	b410      	push	{r4}
 8108178:	6093      	str	r3, [r2, #8]
 810817a:	da08      	bge.n	810818e <__sfputc_r+0x1e>
 810817c:	6994      	ldr	r4, [r2, #24]
 810817e:	42a3      	cmp	r3, r4
 8108180:	db01      	blt.n	8108186 <__sfputc_r+0x16>
 8108182:	290a      	cmp	r1, #10
 8108184:	d103      	bne.n	810818e <__sfputc_r+0x1e>
 8108186:	f85d 4b04 	ldr.w	r4, [sp], #4
 810818a:	f7ff bdda 	b.w	8107d42 <__swbuf_r>
 810818e:	6813      	ldr	r3, [r2, #0]
 8108190:	1c58      	adds	r0, r3, #1
 8108192:	6010      	str	r0, [r2, #0]
 8108194:	7019      	strb	r1, [r3, #0]
 8108196:	4608      	mov	r0, r1
 8108198:	f85d 4b04 	ldr.w	r4, [sp], #4
 810819c:	4770      	bx	lr

0810819e <__sfputs_r>:
 810819e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81081a0:	4606      	mov	r6, r0
 81081a2:	460f      	mov	r7, r1
 81081a4:	4614      	mov	r4, r2
 81081a6:	18d5      	adds	r5, r2, r3
 81081a8:	42ac      	cmp	r4, r5
 81081aa:	d101      	bne.n	81081b0 <__sfputs_r+0x12>
 81081ac:	2000      	movs	r0, #0
 81081ae:	e007      	b.n	81081c0 <__sfputs_r+0x22>
 81081b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 81081b4:	463a      	mov	r2, r7
 81081b6:	4630      	mov	r0, r6
 81081b8:	f7ff ffda 	bl	8108170 <__sfputc_r>
 81081bc:	1c43      	adds	r3, r0, #1
 81081be:	d1f3      	bne.n	81081a8 <__sfputs_r+0xa>
 81081c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081081c4 <_vfiprintf_r>:
 81081c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81081c8:	460d      	mov	r5, r1
 81081ca:	b09d      	sub	sp, #116	@ 0x74
 81081cc:	4614      	mov	r4, r2
 81081ce:	4698      	mov	r8, r3
 81081d0:	4606      	mov	r6, r0
 81081d2:	b118      	cbz	r0, 81081dc <_vfiprintf_r+0x18>
 81081d4:	6a03      	ldr	r3, [r0, #32]
 81081d6:	b90b      	cbnz	r3, 81081dc <_vfiprintf_r+0x18>
 81081d8:	f7ff fcca 	bl	8107b70 <__sinit>
 81081dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81081de:	07d9      	lsls	r1, r3, #31
 81081e0:	d405      	bmi.n	81081ee <_vfiprintf_r+0x2a>
 81081e2:	89ab      	ldrh	r3, [r5, #12]
 81081e4:	059a      	lsls	r2, r3, #22
 81081e6:	d402      	bmi.n	81081ee <_vfiprintf_r+0x2a>
 81081e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81081ea:	f7ff feb8 	bl	8107f5e <__retarget_lock_acquire_recursive>
 81081ee:	89ab      	ldrh	r3, [r5, #12]
 81081f0:	071b      	lsls	r3, r3, #28
 81081f2:	d501      	bpl.n	81081f8 <_vfiprintf_r+0x34>
 81081f4:	692b      	ldr	r3, [r5, #16]
 81081f6:	b99b      	cbnz	r3, 8108220 <_vfiprintf_r+0x5c>
 81081f8:	4629      	mov	r1, r5
 81081fa:	4630      	mov	r0, r6
 81081fc:	f7ff fde0 	bl	8107dc0 <__swsetup_r>
 8108200:	b170      	cbz	r0, 8108220 <_vfiprintf_r+0x5c>
 8108202:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8108204:	07dc      	lsls	r4, r3, #31
 8108206:	d504      	bpl.n	8108212 <_vfiprintf_r+0x4e>
 8108208:	f04f 30ff 	mov.w	r0, #4294967295
 810820c:	b01d      	add	sp, #116	@ 0x74
 810820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108212:	89ab      	ldrh	r3, [r5, #12]
 8108214:	0598      	lsls	r0, r3, #22
 8108216:	d4f7      	bmi.n	8108208 <_vfiprintf_r+0x44>
 8108218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810821a:	f7ff fea1 	bl	8107f60 <__retarget_lock_release_recursive>
 810821e:	e7f3      	b.n	8108208 <_vfiprintf_r+0x44>
 8108220:	2300      	movs	r3, #0
 8108222:	9309      	str	r3, [sp, #36]	@ 0x24
 8108224:	2320      	movs	r3, #32
 8108226:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810822a:	f8cd 800c 	str.w	r8, [sp, #12]
 810822e:	2330      	movs	r3, #48	@ 0x30
 8108230:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 81083e0 <_vfiprintf_r+0x21c>
 8108234:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8108238:	f04f 0901 	mov.w	r9, #1
 810823c:	4623      	mov	r3, r4
 810823e:	469a      	mov	sl, r3
 8108240:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108244:	b10a      	cbz	r2, 810824a <_vfiprintf_r+0x86>
 8108246:	2a25      	cmp	r2, #37	@ 0x25
 8108248:	d1f9      	bne.n	810823e <_vfiprintf_r+0x7a>
 810824a:	ebba 0b04 	subs.w	fp, sl, r4
 810824e:	d00b      	beq.n	8108268 <_vfiprintf_r+0xa4>
 8108250:	465b      	mov	r3, fp
 8108252:	4622      	mov	r2, r4
 8108254:	4629      	mov	r1, r5
 8108256:	4630      	mov	r0, r6
 8108258:	f7ff ffa1 	bl	810819e <__sfputs_r>
 810825c:	3001      	adds	r0, #1
 810825e:	f000 80a7 	beq.w	81083b0 <_vfiprintf_r+0x1ec>
 8108262:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8108264:	445a      	add	r2, fp
 8108266:	9209      	str	r2, [sp, #36]	@ 0x24
 8108268:	f89a 3000 	ldrb.w	r3, [sl]
 810826c:	2b00      	cmp	r3, #0
 810826e:	f000 809f 	beq.w	81083b0 <_vfiprintf_r+0x1ec>
 8108272:	2300      	movs	r3, #0
 8108274:	f04f 32ff 	mov.w	r2, #4294967295
 8108278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810827c:	f10a 0a01 	add.w	sl, sl, #1
 8108280:	9304      	str	r3, [sp, #16]
 8108282:	9307      	str	r3, [sp, #28]
 8108284:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8108288:	931a      	str	r3, [sp, #104]	@ 0x68
 810828a:	4654      	mov	r4, sl
 810828c:	2205      	movs	r2, #5
 810828e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108292:	4853      	ldr	r0, [pc, #332]	@ (81083e0 <_vfiprintf_r+0x21c>)
 8108294:	f7f8 f824 	bl	81002e0 <memchr>
 8108298:	9a04      	ldr	r2, [sp, #16]
 810829a:	b9d8      	cbnz	r0, 81082d4 <_vfiprintf_r+0x110>
 810829c:	06d1      	lsls	r1, r2, #27
 810829e:	bf44      	itt	mi
 81082a0:	2320      	movmi	r3, #32
 81082a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81082a6:	0713      	lsls	r3, r2, #28
 81082a8:	bf44      	itt	mi
 81082aa:	232b      	movmi	r3, #43	@ 0x2b
 81082ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81082b0:	f89a 3000 	ldrb.w	r3, [sl]
 81082b4:	2b2a      	cmp	r3, #42	@ 0x2a
 81082b6:	d015      	beq.n	81082e4 <_vfiprintf_r+0x120>
 81082b8:	9a07      	ldr	r2, [sp, #28]
 81082ba:	4654      	mov	r4, sl
 81082bc:	2000      	movs	r0, #0
 81082be:	f04f 0c0a 	mov.w	ip, #10
 81082c2:	4621      	mov	r1, r4
 81082c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81082c8:	3b30      	subs	r3, #48	@ 0x30
 81082ca:	2b09      	cmp	r3, #9
 81082cc:	d94b      	bls.n	8108366 <_vfiprintf_r+0x1a2>
 81082ce:	b1b0      	cbz	r0, 81082fe <_vfiprintf_r+0x13a>
 81082d0:	9207      	str	r2, [sp, #28]
 81082d2:	e014      	b.n	81082fe <_vfiprintf_r+0x13a>
 81082d4:	eba0 0308 	sub.w	r3, r0, r8
 81082d8:	fa09 f303 	lsl.w	r3, r9, r3
 81082dc:	4313      	orrs	r3, r2
 81082de:	9304      	str	r3, [sp, #16]
 81082e0:	46a2      	mov	sl, r4
 81082e2:	e7d2      	b.n	810828a <_vfiprintf_r+0xc6>
 81082e4:	9b03      	ldr	r3, [sp, #12]
 81082e6:	1d19      	adds	r1, r3, #4
 81082e8:	681b      	ldr	r3, [r3, #0]
 81082ea:	9103      	str	r1, [sp, #12]
 81082ec:	2b00      	cmp	r3, #0
 81082ee:	bfbb      	ittet	lt
 81082f0:	425b      	neglt	r3, r3
 81082f2:	f042 0202 	orrlt.w	r2, r2, #2
 81082f6:	9307      	strge	r3, [sp, #28]
 81082f8:	9307      	strlt	r3, [sp, #28]
 81082fa:	bfb8      	it	lt
 81082fc:	9204      	strlt	r2, [sp, #16]
 81082fe:	7823      	ldrb	r3, [r4, #0]
 8108300:	2b2e      	cmp	r3, #46	@ 0x2e
 8108302:	d10a      	bne.n	810831a <_vfiprintf_r+0x156>
 8108304:	7863      	ldrb	r3, [r4, #1]
 8108306:	2b2a      	cmp	r3, #42	@ 0x2a
 8108308:	d132      	bne.n	8108370 <_vfiprintf_r+0x1ac>
 810830a:	9b03      	ldr	r3, [sp, #12]
 810830c:	1d1a      	adds	r2, r3, #4
 810830e:	681b      	ldr	r3, [r3, #0]
 8108310:	9203      	str	r2, [sp, #12]
 8108312:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8108316:	3402      	adds	r4, #2
 8108318:	9305      	str	r3, [sp, #20]
 810831a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 81083f0 <_vfiprintf_r+0x22c>
 810831e:	7821      	ldrb	r1, [r4, #0]
 8108320:	2203      	movs	r2, #3
 8108322:	4650      	mov	r0, sl
 8108324:	f7f7 ffdc 	bl	81002e0 <memchr>
 8108328:	b138      	cbz	r0, 810833a <_vfiprintf_r+0x176>
 810832a:	9b04      	ldr	r3, [sp, #16]
 810832c:	eba0 000a 	sub.w	r0, r0, sl
 8108330:	2240      	movs	r2, #64	@ 0x40
 8108332:	4082      	lsls	r2, r0
 8108334:	4313      	orrs	r3, r2
 8108336:	3401      	adds	r4, #1
 8108338:	9304      	str	r3, [sp, #16]
 810833a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810833e:	4829      	ldr	r0, [pc, #164]	@ (81083e4 <_vfiprintf_r+0x220>)
 8108340:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8108344:	2206      	movs	r2, #6
 8108346:	f7f7 ffcb 	bl	81002e0 <memchr>
 810834a:	2800      	cmp	r0, #0
 810834c:	d03f      	beq.n	81083ce <_vfiprintf_r+0x20a>
 810834e:	4b26      	ldr	r3, [pc, #152]	@ (81083e8 <_vfiprintf_r+0x224>)
 8108350:	bb1b      	cbnz	r3, 810839a <_vfiprintf_r+0x1d6>
 8108352:	9b03      	ldr	r3, [sp, #12]
 8108354:	3307      	adds	r3, #7
 8108356:	f023 0307 	bic.w	r3, r3, #7
 810835a:	3308      	adds	r3, #8
 810835c:	9303      	str	r3, [sp, #12]
 810835e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108360:	443b      	add	r3, r7
 8108362:	9309      	str	r3, [sp, #36]	@ 0x24
 8108364:	e76a      	b.n	810823c <_vfiprintf_r+0x78>
 8108366:	fb0c 3202 	mla	r2, ip, r2, r3
 810836a:	460c      	mov	r4, r1
 810836c:	2001      	movs	r0, #1
 810836e:	e7a8      	b.n	81082c2 <_vfiprintf_r+0xfe>
 8108370:	2300      	movs	r3, #0
 8108372:	3401      	adds	r4, #1
 8108374:	9305      	str	r3, [sp, #20]
 8108376:	4619      	mov	r1, r3
 8108378:	f04f 0c0a 	mov.w	ip, #10
 810837c:	4620      	mov	r0, r4
 810837e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8108382:	3a30      	subs	r2, #48	@ 0x30
 8108384:	2a09      	cmp	r2, #9
 8108386:	d903      	bls.n	8108390 <_vfiprintf_r+0x1cc>
 8108388:	2b00      	cmp	r3, #0
 810838a:	d0c6      	beq.n	810831a <_vfiprintf_r+0x156>
 810838c:	9105      	str	r1, [sp, #20]
 810838e:	e7c4      	b.n	810831a <_vfiprintf_r+0x156>
 8108390:	fb0c 2101 	mla	r1, ip, r1, r2
 8108394:	4604      	mov	r4, r0
 8108396:	2301      	movs	r3, #1
 8108398:	e7f0      	b.n	810837c <_vfiprintf_r+0x1b8>
 810839a:	ab03      	add	r3, sp, #12
 810839c:	9300      	str	r3, [sp, #0]
 810839e:	462a      	mov	r2, r5
 81083a0:	4b12      	ldr	r3, [pc, #72]	@ (81083ec <_vfiprintf_r+0x228>)
 81083a2:	a904      	add	r1, sp, #16
 81083a4:	4630      	mov	r0, r6
 81083a6:	f3af 8000 	nop.w
 81083aa:	4607      	mov	r7, r0
 81083ac:	1c78      	adds	r0, r7, #1
 81083ae:	d1d6      	bne.n	810835e <_vfiprintf_r+0x19a>
 81083b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81083b2:	07d9      	lsls	r1, r3, #31
 81083b4:	d405      	bmi.n	81083c2 <_vfiprintf_r+0x1fe>
 81083b6:	89ab      	ldrh	r3, [r5, #12]
 81083b8:	059a      	lsls	r2, r3, #22
 81083ba:	d402      	bmi.n	81083c2 <_vfiprintf_r+0x1fe>
 81083bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81083be:	f7ff fdcf 	bl	8107f60 <__retarget_lock_release_recursive>
 81083c2:	89ab      	ldrh	r3, [r5, #12]
 81083c4:	065b      	lsls	r3, r3, #25
 81083c6:	f53f af1f 	bmi.w	8108208 <_vfiprintf_r+0x44>
 81083ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 81083cc:	e71e      	b.n	810820c <_vfiprintf_r+0x48>
 81083ce:	ab03      	add	r3, sp, #12
 81083d0:	9300      	str	r3, [sp, #0]
 81083d2:	462a      	mov	r2, r5
 81083d4:	4b05      	ldr	r3, [pc, #20]	@ (81083ec <_vfiprintf_r+0x228>)
 81083d6:	a904      	add	r1, sp, #16
 81083d8:	4630      	mov	r0, r6
 81083da:	f000 f879 	bl	81084d0 <_printf_i>
 81083de:	e7e4      	b.n	81083aa <_vfiprintf_r+0x1e6>
 81083e0:	08108aa4 	.word	0x08108aa4
 81083e4:	08108aae 	.word	0x08108aae
 81083e8:	00000000 	.word	0x00000000
 81083ec:	0810819f 	.word	0x0810819f
 81083f0:	08108aaa 	.word	0x08108aaa

081083f4 <_printf_common>:
 81083f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81083f8:	4616      	mov	r6, r2
 81083fa:	4698      	mov	r8, r3
 81083fc:	688a      	ldr	r2, [r1, #8]
 81083fe:	690b      	ldr	r3, [r1, #16]
 8108400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8108404:	4293      	cmp	r3, r2
 8108406:	bfb8      	it	lt
 8108408:	4613      	movlt	r3, r2
 810840a:	6033      	str	r3, [r6, #0]
 810840c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8108410:	4607      	mov	r7, r0
 8108412:	460c      	mov	r4, r1
 8108414:	b10a      	cbz	r2, 810841a <_printf_common+0x26>
 8108416:	3301      	adds	r3, #1
 8108418:	6033      	str	r3, [r6, #0]
 810841a:	6823      	ldr	r3, [r4, #0]
 810841c:	0699      	lsls	r1, r3, #26
 810841e:	bf42      	ittt	mi
 8108420:	6833      	ldrmi	r3, [r6, #0]
 8108422:	3302      	addmi	r3, #2
 8108424:	6033      	strmi	r3, [r6, #0]
 8108426:	6825      	ldr	r5, [r4, #0]
 8108428:	f015 0506 	ands.w	r5, r5, #6
 810842c:	d106      	bne.n	810843c <_printf_common+0x48>
 810842e:	f104 0a19 	add.w	sl, r4, #25
 8108432:	68e3      	ldr	r3, [r4, #12]
 8108434:	6832      	ldr	r2, [r6, #0]
 8108436:	1a9b      	subs	r3, r3, r2
 8108438:	42ab      	cmp	r3, r5
 810843a:	dc26      	bgt.n	810848a <_printf_common+0x96>
 810843c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8108440:	6822      	ldr	r2, [r4, #0]
 8108442:	3b00      	subs	r3, #0
 8108444:	bf18      	it	ne
 8108446:	2301      	movne	r3, #1
 8108448:	0692      	lsls	r2, r2, #26
 810844a:	d42b      	bmi.n	81084a4 <_printf_common+0xb0>
 810844c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8108450:	4641      	mov	r1, r8
 8108452:	4638      	mov	r0, r7
 8108454:	47c8      	blx	r9
 8108456:	3001      	adds	r0, #1
 8108458:	d01e      	beq.n	8108498 <_printf_common+0xa4>
 810845a:	6823      	ldr	r3, [r4, #0]
 810845c:	6922      	ldr	r2, [r4, #16]
 810845e:	f003 0306 	and.w	r3, r3, #6
 8108462:	2b04      	cmp	r3, #4
 8108464:	bf02      	ittt	eq
 8108466:	68e5      	ldreq	r5, [r4, #12]
 8108468:	6833      	ldreq	r3, [r6, #0]
 810846a:	1aed      	subeq	r5, r5, r3
 810846c:	68a3      	ldr	r3, [r4, #8]
 810846e:	bf0c      	ite	eq
 8108470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108474:	2500      	movne	r5, #0
 8108476:	4293      	cmp	r3, r2
 8108478:	bfc4      	itt	gt
 810847a:	1a9b      	subgt	r3, r3, r2
 810847c:	18ed      	addgt	r5, r5, r3
 810847e:	2600      	movs	r6, #0
 8108480:	341a      	adds	r4, #26
 8108482:	42b5      	cmp	r5, r6
 8108484:	d11a      	bne.n	81084bc <_printf_common+0xc8>
 8108486:	2000      	movs	r0, #0
 8108488:	e008      	b.n	810849c <_printf_common+0xa8>
 810848a:	2301      	movs	r3, #1
 810848c:	4652      	mov	r2, sl
 810848e:	4641      	mov	r1, r8
 8108490:	4638      	mov	r0, r7
 8108492:	47c8      	blx	r9
 8108494:	3001      	adds	r0, #1
 8108496:	d103      	bne.n	81084a0 <_printf_common+0xac>
 8108498:	f04f 30ff 	mov.w	r0, #4294967295
 810849c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81084a0:	3501      	adds	r5, #1
 81084a2:	e7c6      	b.n	8108432 <_printf_common+0x3e>
 81084a4:	18e1      	adds	r1, r4, r3
 81084a6:	1c5a      	adds	r2, r3, #1
 81084a8:	2030      	movs	r0, #48	@ 0x30
 81084aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 81084ae:	4422      	add	r2, r4
 81084b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 81084b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 81084b8:	3302      	adds	r3, #2
 81084ba:	e7c7      	b.n	810844c <_printf_common+0x58>
 81084bc:	2301      	movs	r3, #1
 81084be:	4622      	mov	r2, r4
 81084c0:	4641      	mov	r1, r8
 81084c2:	4638      	mov	r0, r7
 81084c4:	47c8      	blx	r9
 81084c6:	3001      	adds	r0, #1
 81084c8:	d0e6      	beq.n	8108498 <_printf_common+0xa4>
 81084ca:	3601      	adds	r6, #1
 81084cc:	e7d9      	b.n	8108482 <_printf_common+0x8e>
	...

081084d0 <_printf_i>:
 81084d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81084d4:	7e0f      	ldrb	r7, [r1, #24]
 81084d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 81084d8:	2f78      	cmp	r7, #120	@ 0x78
 81084da:	4691      	mov	r9, r2
 81084dc:	4680      	mov	r8, r0
 81084de:	460c      	mov	r4, r1
 81084e0:	469a      	mov	sl, r3
 81084e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 81084e6:	d807      	bhi.n	81084f8 <_printf_i+0x28>
 81084e8:	2f62      	cmp	r7, #98	@ 0x62
 81084ea:	d80a      	bhi.n	8108502 <_printf_i+0x32>
 81084ec:	2f00      	cmp	r7, #0
 81084ee:	f000 80d1 	beq.w	8108694 <_printf_i+0x1c4>
 81084f2:	2f58      	cmp	r7, #88	@ 0x58
 81084f4:	f000 80b8 	beq.w	8108668 <_printf_i+0x198>
 81084f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81084fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8108500:	e03a      	b.n	8108578 <_printf_i+0xa8>
 8108502:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8108506:	2b15      	cmp	r3, #21
 8108508:	d8f6      	bhi.n	81084f8 <_printf_i+0x28>
 810850a:	a101      	add	r1, pc, #4	@ (adr r1, 8108510 <_printf_i+0x40>)
 810850c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8108510:	08108569 	.word	0x08108569
 8108514:	0810857d 	.word	0x0810857d
 8108518:	081084f9 	.word	0x081084f9
 810851c:	081084f9 	.word	0x081084f9
 8108520:	081084f9 	.word	0x081084f9
 8108524:	081084f9 	.word	0x081084f9
 8108528:	0810857d 	.word	0x0810857d
 810852c:	081084f9 	.word	0x081084f9
 8108530:	081084f9 	.word	0x081084f9
 8108534:	081084f9 	.word	0x081084f9
 8108538:	081084f9 	.word	0x081084f9
 810853c:	0810867b 	.word	0x0810867b
 8108540:	081085a7 	.word	0x081085a7
 8108544:	08108635 	.word	0x08108635
 8108548:	081084f9 	.word	0x081084f9
 810854c:	081084f9 	.word	0x081084f9
 8108550:	0810869d 	.word	0x0810869d
 8108554:	081084f9 	.word	0x081084f9
 8108558:	081085a7 	.word	0x081085a7
 810855c:	081084f9 	.word	0x081084f9
 8108560:	081084f9 	.word	0x081084f9
 8108564:	0810863d 	.word	0x0810863d
 8108568:	6833      	ldr	r3, [r6, #0]
 810856a:	1d1a      	adds	r2, r3, #4
 810856c:	681b      	ldr	r3, [r3, #0]
 810856e:	6032      	str	r2, [r6, #0]
 8108570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8108574:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8108578:	2301      	movs	r3, #1
 810857a:	e09c      	b.n	81086b6 <_printf_i+0x1e6>
 810857c:	6833      	ldr	r3, [r6, #0]
 810857e:	6820      	ldr	r0, [r4, #0]
 8108580:	1d19      	adds	r1, r3, #4
 8108582:	6031      	str	r1, [r6, #0]
 8108584:	0606      	lsls	r6, r0, #24
 8108586:	d501      	bpl.n	810858c <_printf_i+0xbc>
 8108588:	681d      	ldr	r5, [r3, #0]
 810858a:	e003      	b.n	8108594 <_printf_i+0xc4>
 810858c:	0645      	lsls	r5, r0, #25
 810858e:	d5fb      	bpl.n	8108588 <_printf_i+0xb8>
 8108590:	f9b3 5000 	ldrsh.w	r5, [r3]
 8108594:	2d00      	cmp	r5, #0
 8108596:	da03      	bge.n	81085a0 <_printf_i+0xd0>
 8108598:	232d      	movs	r3, #45	@ 0x2d
 810859a:	426d      	negs	r5, r5
 810859c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81085a0:	4858      	ldr	r0, [pc, #352]	@ (8108704 <_printf_i+0x234>)
 81085a2:	230a      	movs	r3, #10
 81085a4:	e011      	b.n	81085ca <_printf_i+0xfa>
 81085a6:	6821      	ldr	r1, [r4, #0]
 81085a8:	6833      	ldr	r3, [r6, #0]
 81085aa:	0608      	lsls	r0, r1, #24
 81085ac:	f853 5b04 	ldr.w	r5, [r3], #4
 81085b0:	d402      	bmi.n	81085b8 <_printf_i+0xe8>
 81085b2:	0649      	lsls	r1, r1, #25
 81085b4:	bf48      	it	mi
 81085b6:	b2ad      	uxthmi	r5, r5
 81085b8:	2f6f      	cmp	r7, #111	@ 0x6f
 81085ba:	4852      	ldr	r0, [pc, #328]	@ (8108704 <_printf_i+0x234>)
 81085bc:	6033      	str	r3, [r6, #0]
 81085be:	bf14      	ite	ne
 81085c0:	230a      	movne	r3, #10
 81085c2:	2308      	moveq	r3, #8
 81085c4:	2100      	movs	r1, #0
 81085c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 81085ca:	6866      	ldr	r6, [r4, #4]
 81085cc:	60a6      	str	r6, [r4, #8]
 81085ce:	2e00      	cmp	r6, #0
 81085d0:	db05      	blt.n	81085de <_printf_i+0x10e>
 81085d2:	6821      	ldr	r1, [r4, #0]
 81085d4:	432e      	orrs	r6, r5
 81085d6:	f021 0104 	bic.w	r1, r1, #4
 81085da:	6021      	str	r1, [r4, #0]
 81085dc:	d04b      	beq.n	8108676 <_printf_i+0x1a6>
 81085de:	4616      	mov	r6, r2
 81085e0:	fbb5 f1f3 	udiv	r1, r5, r3
 81085e4:	fb03 5711 	mls	r7, r3, r1, r5
 81085e8:	5dc7      	ldrb	r7, [r0, r7]
 81085ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 81085ee:	462f      	mov	r7, r5
 81085f0:	42bb      	cmp	r3, r7
 81085f2:	460d      	mov	r5, r1
 81085f4:	d9f4      	bls.n	81085e0 <_printf_i+0x110>
 81085f6:	2b08      	cmp	r3, #8
 81085f8:	d10b      	bne.n	8108612 <_printf_i+0x142>
 81085fa:	6823      	ldr	r3, [r4, #0]
 81085fc:	07df      	lsls	r7, r3, #31
 81085fe:	d508      	bpl.n	8108612 <_printf_i+0x142>
 8108600:	6923      	ldr	r3, [r4, #16]
 8108602:	6861      	ldr	r1, [r4, #4]
 8108604:	4299      	cmp	r1, r3
 8108606:	bfde      	ittt	le
 8108608:	2330      	movle	r3, #48	@ 0x30
 810860a:	f806 3c01 	strble.w	r3, [r6, #-1]
 810860e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8108612:	1b92      	subs	r2, r2, r6
 8108614:	6122      	str	r2, [r4, #16]
 8108616:	f8cd a000 	str.w	sl, [sp]
 810861a:	464b      	mov	r3, r9
 810861c:	aa03      	add	r2, sp, #12
 810861e:	4621      	mov	r1, r4
 8108620:	4640      	mov	r0, r8
 8108622:	f7ff fee7 	bl	81083f4 <_printf_common>
 8108626:	3001      	adds	r0, #1
 8108628:	d14a      	bne.n	81086c0 <_printf_i+0x1f0>
 810862a:	f04f 30ff 	mov.w	r0, #4294967295
 810862e:	b004      	add	sp, #16
 8108630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108634:	6823      	ldr	r3, [r4, #0]
 8108636:	f043 0320 	orr.w	r3, r3, #32
 810863a:	6023      	str	r3, [r4, #0]
 810863c:	4832      	ldr	r0, [pc, #200]	@ (8108708 <_printf_i+0x238>)
 810863e:	2778      	movs	r7, #120	@ 0x78
 8108640:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8108644:	6823      	ldr	r3, [r4, #0]
 8108646:	6831      	ldr	r1, [r6, #0]
 8108648:	061f      	lsls	r7, r3, #24
 810864a:	f851 5b04 	ldr.w	r5, [r1], #4
 810864e:	d402      	bmi.n	8108656 <_printf_i+0x186>
 8108650:	065f      	lsls	r7, r3, #25
 8108652:	bf48      	it	mi
 8108654:	b2ad      	uxthmi	r5, r5
 8108656:	6031      	str	r1, [r6, #0]
 8108658:	07d9      	lsls	r1, r3, #31
 810865a:	bf44      	itt	mi
 810865c:	f043 0320 	orrmi.w	r3, r3, #32
 8108660:	6023      	strmi	r3, [r4, #0]
 8108662:	b11d      	cbz	r5, 810866c <_printf_i+0x19c>
 8108664:	2310      	movs	r3, #16
 8108666:	e7ad      	b.n	81085c4 <_printf_i+0xf4>
 8108668:	4826      	ldr	r0, [pc, #152]	@ (8108704 <_printf_i+0x234>)
 810866a:	e7e9      	b.n	8108640 <_printf_i+0x170>
 810866c:	6823      	ldr	r3, [r4, #0]
 810866e:	f023 0320 	bic.w	r3, r3, #32
 8108672:	6023      	str	r3, [r4, #0]
 8108674:	e7f6      	b.n	8108664 <_printf_i+0x194>
 8108676:	4616      	mov	r6, r2
 8108678:	e7bd      	b.n	81085f6 <_printf_i+0x126>
 810867a:	6833      	ldr	r3, [r6, #0]
 810867c:	6825      	ldr	r5, [r4, #0]
 810867e:	6961      	ldr	r1, [r4, #20]
 8108680:	1d18      	adds	r0, r3, #4
 8108682:	6030      	str	r0, [r6, #0]
 8108684:	062e      	lsls	r6, r5, #24
 8108686:	681b      	ldr	r3, [r3, #0]
 8108688:	d501      	bpl.n	810868e <_printf_i+0x1be>
 810868a:	6019      	str	r1, [r3, #0]
 810868c:	e002      	b.n	8108694 <_printf_i+0x1c4>
 810868e:	0668      	lsls	r0, r5, #25
 8108690:	d5fb      	bpl.n	810868a <_printf_i+0x1ba>
 8108692:	8019      	strh	r1, [r3, #0]
 8108694:	2300      	movs	r3, #0
 8108696:	6123      	str	r3, [r4, #16]
 8108698:	4616      	mov	r6, r2
 810869a:	e7bc      	b.n	8108616 <_printf_i+0x146>
 810869c:	6833      	ldr	r3, [r6, #0]
 810869e:	1d1a      	adds	r2, r3, #4
 81086a0:	6032      	str	r2, [r6, #0]
 81086a2:	681e      	ldr	r6, [r3, #0]
 81086a4:	6862      	ldr	r2, [r4, #4]
 81086a6:	2100      	movs	r1, #0
 81086a8:	4630      	mov	r0, r6
 81086aa:	f7f7 fe19 	bl	81002e0 <memchr>
 81086ae:	b108      	cbz	r0, 81086b4 <_printf_i+0x1e4>
 81086b0:	1b80      	subs	r0, r0, r6
 81086b2:	6060      	str	r0, [r4, #4]
 81086b4:	6863      	ldr	r3, [r4, #4]
 81086b6:	6123      	str	r3, [r4, #16]
 81086b8:	2300      	movs	r3, #0
 81086ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81086be:	e7aa      	b.n	8108616 <_printf_i+0x146>
 81086c0:	6923      	ldr	r3, [r4, #16]
 81086c2:	4632      	mov	r2, r6
 81086c4:	4649      	mov	r1, r9
 81086c6:	4640      	mov	r0, r8
 81086c8:	47d0      	blx	sl
 81086ca:	3001      	adds	r0, #1
 81086cc:	d0ad      	beq.n	810862a <_printf_i+0x15a>
 81086ce:	6823      	ldr	r3, [r4, #0]
 81086d0:	079b      	lsls	r3, r3, #30
 81086d2:	d413      	bmi.n	81086fc <_printf_i+0x22c>
 81086d4:	68e0      	ldr	r0, [r4, #12]
 81086d6:	9b03      	ldr	r3, [sp, #12]
 81086d8:	4298      	cmp	r0, r3
 81086da:	bfb8      	it	lt
 81086dc:	4618      	movlt	r0, r3
 81086de:	e7a6      	b.n	810862e <_printf_i+0x15e>
 81086e0:	2301      	movs	r3, #1
 81086e2:	4632      	mov	r2, r6
 81086e4:	4649      	mov	r1, r9
 81086e6:	4640      	mov	r0, r8
 81086e8:	47d0      	blx	sl
 81086ea:	3001      	adds	r0, #1
 81086ec:	d09d      	beq.n	810862a <_printf_i+0x15a>
 81086ee:	3501      	adds	r5, #1
 81086f0:	68e3      	ldr	r3, [r4, #12]
 81086f2:	9903      	ldr	r1, [sp, #12]
 81086f4:	1a5b      	subs	r3, r3, r1
 81086f6:	42ab      	cmp	r3, r5
 81086f8:	dcf2      	bgt.n	81086e0 <_printf_i+0x210>
 81086fa:	e7eb      	b.n	81086d4 <_printf_i+0x204>
 81086fc:	2500      	movs	r5, #0
 81086fe:	f104 0619 	add.w	r6, r4, #25
 8108702:	e7f5      	b.n	81086f0 <_printf_i+0x220>
 8108704:	08108ab5 	.word	0x08108ab5
 8108708:	08108ac6 	.word	0x08108ac6

0810870c <__sflush_r>:
 810870c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8108710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108714:	0716      	lsls	r6, r2, #28
 8108716:	4605      	mov	r5, r0
 8108718:	460c      	mov	r4, r1
 810871a:	d454      	bmi.n	81087c6 <__sflush_r+0xba>
 810871c:	684b      	ldr	r3, [r1, #4]
 810871e:	2b00      	cmp	r3, #0
 8108720:	dc02      	bgt.n	8108728 <__sflush_r+0x1c>
 8108722:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8108724:	2b00      	cmp	r3, #0
 8108726:	dd48      	ble.n	81087ba <__sflush_r+0xae>
 8108728:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810872a:	2e00      	cmp	r6, #0
 810872c:	d045      	beq.n	81087ba <__sflush_r+0xae>
 810872e:	2300      	movs	r3, #0
 8108730:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8108734:	682f      	ldr	r7, [r5, #0]
 8108736:	6a21      	ldr	r1, [r4, #32]
 8108738:	602b      	str	r3, [r5, #0]
 810873a:	d030      	beq.n	810879e <__sflush_r+0x92>
 810873c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810873e:	89a3      	ldrh	r3, [r4, #12]
 8108740:	0759      	lsls	r1, r3, #29
 8108742:	d505      	bpl.n	8108750 <__sflush_r+0x44>
 8108744:	6863      	ldr	r3, [r4, #4]
 8108746:	1ad2      	subs	r2, r2, r3
 8108748:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810874a:	b10b      	cbz	r3, 8108750 <__sflush_r+0x44>
 810874c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810874e:	1ad2      	subs	r2, r2, r3
 8108750:	2300      	movs	r3, #0
 8108752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8108754:	6a21      	ldr	r1, [r4, #32]
 8108756:	4628      	mov	r0, r5
 8108758:	47b0      	blx	r6
 810875a:	1c43      	adds	r3, r0, #1
 810875c:	89a3      	ldrh	r3, [r4, #12]
 810875e:	d106      	bne.n	810876e <__sflush_r+0x62>
 8108760:	6829      	ldr	r1, [r5, #0]
 8108762:	291d      	cmp	r1, #29
 8108764:	d82b      	bhi.n	81087be <__sflush_r+0xb2>
 8108766:	4a2a      	ldr	r2, [pc, #168]	@ (8108810 <__sflush_r+0x104>)
 8108768:	40ca      	lsrs	r2, r1
 810876a:	07d6      	lsls	r6, r2, #31
 810876c:	d527      	bpl.n	81087be <__sflush_r+0xb2>
 810876e:	2200      	movs	r2, #0
 8108770:	6062      	str	r2, [r4, #4]
 8108772:	04d9      	lsls	r1, r3, #19
 8108774:	6922      	ldr	r2, [r4, #16]
 8108776:	6022      	str	r2, [r4, #0]
 8108778:	d504      	bpl.n	8108784 <__sflush_r+0x78>
 810877a:	1c42      	adds	r2, r0, #1
 810877c:	d101      	bne.n	8108782 <__sflush_r+0x76>
 810877e:	682b      	ldr	r3, [r5, #0]
 8108780:	b903      	cbnz	r3, 8108784 <__sflush_r+0x78>
 8108782:	6560      	str	r0, [r4, #84]	@ 0x54
 8108784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8108786:	602f      	str	r7, [r5, #0]
 8108788:	b1b9      	cbz	r1, 81087ba <__sflush_r+0xae>
 810878a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810878e:	4299      	cmp	r1, r3
 8108790:	d002      	beq.n	8108798 <__sflush_r+0x8c>
 8108792:	4628      	mov	r0, r5
 8108794:	f7ff fbf4 	bl	8107f80 <_free_r>
 8108798:	2300      	movs	r3, #0
 810879a:	6363      	str	r3, [r4, #52]	@ 0x34
 810879c:	e00d      	b.n	81087ba <__sflush_r+0xae>
 810879e:	2301      	movs	r3, #1
 81087a0:	4628      	mov	r0, r5
 81087a2:	47b0      	blx	r6
 81087a4:	4602      	mov	r2, r0
 81087a6:	1c50      	adds	r0, r2, #1
 81087a8:	d1c9      	bne.n	810873e <__sflush_r+0x32>
 81087aa:	682b      	ldr	r3, [r5, #0]
 81087ac:	2b00      	cmp	r3, #0
 81087ae:	d0c6      	beq.n	810873e <__sflush_r+0x32>
 81087b0:	2b1d      	cmp	r3, #29
 81087b2:	d001      	beq.n	81087b8 <__sflush_r+0xac>
 81087b4:	2b16      	cmp	r3, #22
 81087b6:	d11e      	bne.n	81087f6 <__sflush_r+0xea>
 81087b8:	602f      	str	r7, [r5, #0]
 81087ba:	2000      	movs	r0, #0
 81087bc:	e022      	b.n	8108804 <__sflush_r+0xf8>
 81087be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81087c2:	b21b      	sxth	r3, r3
 81087c4:	e01b      	b.n	81087fe <__sflush_r+0xf2>
 81087c6:	690f      	ldr	r7, [r1, #16]
 81087c8:	2f00      	cmp	r7, #0
 81087ca:	d0f6      	beq.n	81087ba <__sflush_r+0xae>
 81087cc:	0793      	lsls	r3, r2, #30
 81087ce:	680e      	ldr	r6, [r1, #0]
 81087d0:	bf08      	it	eq
 81087d2:	694b      	ldreq	r3, [r1, #20]
 81087d4:	600f      	str	r7, [r1, #0]
 81087d6:	bf18      	it	ne
 81087d8:	2300      	movne	r3, #0
 81087da:	eba6 0807 	sub.w	r8, r6, r7
 81087de:	608b      	str	r3, [r1, #8]
 81087e0:	f1b8 0f00 	cmp.w	r8, #0
 81087e4:	dde9      	ble.n	81087ba <__sflush_r+0xae>
 81087e6:	6a21      	ldr	r1, [r4, #32]
 81087e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 81087ea:	4643      	mov	r3, r8
 81087ec:	463a      	mov	r2, r7
 81087ee:	4628      	mov	r0, r5
 81087f0:	47b0      	blx	r6
 81087f2:	2800      	cmp	r0, #0
 81087f4:	dc08      	bgt.n	8108808 <__sflush_r+0xfc>
 81087f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81087fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81087fe:	81a3      	strh	r3, [r4, #12]
 8108800:	f04f 30ff 	mov.w	r0, #4294967295
 8108804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108808:	4407      	add	r7, r0
 810880a:	eba8 0800 	sub.w	r8, r8, r0
 810880e:	e7e7      	b.n	81087e0 <__sflush_r+0xd4>
 8108810:	20400001 	.word	0x20400001

08108814 <_fflush_r>:
 8108814:	b538      	push	{r3, r4, r5, lr}
 8108816:	690b      	ldr	r3, [r1, #16]
 8108818:	4605      	mov	r5, r0
 810881a:	460c      	mov	r4, r1
 810881c:	b913      	cbnz	r3, 8108824 <_fflush_r+0x10>
 810881e:	2500      	movs	r5, #0
 8108820:	4628      	mov	r0, r5
 8108822:	bd38      	pop	{r3, r4, r5, pc}
 8108824:	b118      	cbz	r0, 810882e <_fflush_r+0x1a>
 8108826:	6a03      	ldr	r3, [r0, #32]
 8108828:	b90b      	cbnz	r3, 810882e <_fflush_r+0x1a>
 810882a:	f7ff f9a1 	bl	8107b70 <__sinit>
 810882e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108832:	2b00      	cmp	r3, #0
 8108834:	d0f3      	beq.n	810881e <_fflush_r+0xa>
 8108836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8108838:	07d0      	lsls	r0, r2, #31
 810883a:	d404      	bmi.n	8108846 <_fflush_r+0x32>
 810883c:	0599      	lsls	r1, r3, #22
 810883e:	d402      	bmi.n	8108846 <_fflush_r+0x32>
 8108840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108842:	f7ff fb8c 	bl	8107f5e <__retarget_lock_acquire_recursive>
 8108846:	4628      	mov	r0, r5
 8108848:	4621      	mov	r1, r4
 810884a:	f7ff ff5f 	bl	810870c <__sflush_r>
 810884e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8108850:	07da      	lsls	r2, r3, #31
 8108852:	4605      	mov	r5, r0
 8108854:	d4e4      	bmi.n	8108820 <_fflush_r+0xc>
 8108856:	89a3      	ldrh	r3, [r4, #12]
 8108858:	059b      	lsls	r3, r3, #22
 810885a:	d4e1      	bmi.n	8108820 <_fflush_r+0xc>
 810885c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810885e:	f7ff fb7f 	bl	8107f60 <__retarget_lock_release_recursive>
 8108862:	e7dd      	b.n	8108820 <_fflush_r+0xc>

08108864 <__swhatbuf_r>:
 8108864:	b570      	push	{r4, r5, r6, lr}
 8108866:	460c      	mov	r4, r1
 8108868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810886c:	2900      	cmp	r1, #0
 810886e:	b096      	sub	sp, #88	@ 0x58
 8108870:	4615      	mov	r5, r2
 8108872:	461e      	mov	r6, r3
 8108874:	da0d      	bge.n	8108892 <__swhatbuf_r+0x2e>
 8108876:	89a3      	ldrh	r3, [r4, #12]
 8108878:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810887c:	f04f 0100 	mov.w	r1, #0
 8108880:	bf14      	ite	ne
 8108882:	2340      	movne	r3, #64	@ 0x40
 8108884:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8108888:	2000      	movs	r0, #0
 810888a:	6031      	str	r1, [r6, #0]
 810888c:	602b      	str	r3, [r5, #0]
 810888e:	b016      	add	sp, #88	@ 0x58
 8108890:	bd70      	pop	{r4, r5, r6, pc}
 8108892:	466a      	mov	r2, sp
 8108894:	f000 f848 	bl	8108928 <_fstat_r>
 8108898:	2800      	cmp	r0, #0
 810889a:	dbec      	blt.n	8108876 <__swhatbuf_r+0x12>
 810889c:	9901      	ldr	r1, [sp, #4]
 810889e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 81088a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 81088a6:	4259      	negs	r1, r3
 81088a8:	4159      	adcs	r1, r3
 81088aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81088ae:	e7eb      	b.n	8108888 <__swhatbuf_r+0x24>

081088b0 <__smakebuf_r>:
 81088b0:	898b      	ldrh	r3, [r1, #12]
 81088b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81088b4:	079d      	lsls	r5, r3, #30
 81088b6:	4606      	mov	r6, r0
 81088b8:	460c      	mov	r4, r1
 81088ba:	d507      	bpl.n	81088cc <__smakebuf_r+0x1c>
 81088bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 81088c0:	6023      	str	r3, [r4, #0]
 81088c2:	6123      	str	r3, [r4, #16]
 81088c4:	2301      	movs	r3, #1
 81088c6:	6163      	str	r3, [r4, #20]
 81088c8:	b003      	add	sp, #12
 81088ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81088cc:	ab01      	add	r3, sp, #4
 81088ce:	466a      	mov	r2, sp
 81088d0:	f7ff ffc8 	bl	8108864 <__swhatbuf_r>
 81088d4:	9f00      	ldr	r7, [sp, #0]
 81088d6:	4605      	mov	r5, r0
 81088d8:	4639      	mov	r1, r7
 81088da:	4630      	mov	r0, r6
 81088dc:	f7ff fbbc 	bl	8108058 <_malloc_r>
 81088e0:	b948      	cbnz	r0, 81088f6 <__smakebuf_r+0x46>
 81088e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81088e6:	059a      	lsls	r2, r3, #22
 81088e8:	d4ee      	bmi.n	81088c8 <__smakebuf_r+0x18>
 81088ea:	f023 0303 	bic.w	r3, r3, #3
 81088ee:	f043 0302 	orr.w	r3, r3, #2
 81088f2:	81a3      	strh	r3, [r4, #12]
 81088f4:	e7e2      	b.n	81088bc <__smakebuf_r+0xc>
 81088f6:	89a3      	ldrh	r3, [r4, #12]
 81088f8:	6020      	str	r0, [r4, #0]
 81088fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81088fe:	81a3      	strh	r3, [r4, #12]
 8108900:	9b01      	ldr	r3, [sp, #4]
 8108902:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8108906:	b15b      	cbz	r3, 8108920 <__smakebuf_r+0x70>
 8108908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810890c:	4630      	mov	r0, r6
 810890e:	f000 f81d 	bl	810894c <_isatty_r>
 8108912:	b128      	cbz	r0, 8108920 <__smakebuf_r+0x70>
 8108914:	89a3      	ldrh	r3, [r4, #12]
 8108916:	f023 0303 	bic.w	r3, r3, #3
 810891a:	f043 0301 	orr.w	r3, r3, #1
 810891e:	81a3      	strh	r3, [r4, #12]
 8108920:	89a3      	ldrh	r3, [r4, #12]
 8108922:	431d      	orrs	r5, r3
 8108924:	81a5      	strh	r5, [r4, #12]
 8108926:	e7cf      	b.n	81088c8 <__smakebuf_r+0x18>

08108928 <_fstat_r>:
 8108928:	b538      	push	{r3, r4, r5, lr}
 810892a:	4d07      	ldr	r5, [pc, #28]	@ (8108948 <_fstat_r+0x20>)
 810892c:	2300      	movs	r3, #0
 810892e:	4604      	mov	r4, r0
 8108930:	4608      	mov	r0, r1
 8108932:	4611      	mov	r1, r2
 8108934:	602b      	str	r3, [r5, #0]
 8108936:	f7f9 fa4a 	bl	8101dce <_fstat>
 810893a:	1c43      	adds	r3, r0, #1
 810893c:	d102      	bne.n	8108944 <_fstat_r+0x1c>
 810893e:	682b      	ldr	r3, [r5, #0]
 8108940:	b103      	cbz	r3, 8108944 <_fstat_r+0x1c>
 8108942:	6023      	str	r3, [r4, #0]
 8108944:	bd38      	pop	{r3, r4, r5, pc}
 8108946:	bf00      	nop
 8108948:	10000e20 	.word	0x10000e20

0810894c <_isatty_r>:
 810894c:	b538      	push	{r3, r4, r5, lr}
 810894e:	4d06      	ldr	r5, [pc, #24]	@ (8108968 <_isatty_r+0x1c>)
 8108950:	2300      	movs	r3, #0
 8108952:	4604      	mov	r4, r0
 8108954:	4608      	mov	r0, r1
 8108956:	602b      	str	r3, [r5, #0]
 8108958:	f7f9 fa49 	bl	8101dee <_isatty>
 810895c:	1c43      	adds	r3, r0, #1
 810895e:	d102      	bne.n	8108966 <_isatty_r+0x1a>
 8108960:	682b      	ldr	r3, [r5, #0]
 8108962:	b103      	cbz	r3, 8108966 <_isatty_r+0x1a>
 8108964:	6023      	str	r3, [r4, #0]
 8108966:	bd38      	pop	{r3, r4, r5, pc}
 8108968:	10000e20 	.word	0x10000e20

0810896c <_sbrk_r>:
 810896c:	b538      	push	{r3, r4, r5, lr}
 810896e:	4d06      	ldr	r5, [pc, #24]	@ (8108988 <_sbrk_r+0x1c>)
 8108970:	2300      	movs	r3, #0
 8108972:	4604      	mov	r4, r0
 8108974:	4608      	mov	r0, r1
 8108976:	602b      	str	r3, [r5, #0]
 8108978:	f7f9 fa52 	bl	8101e20 <_sbrk>
 810897c:	1c43      	adds	r3, r0, #1
 810897e:	d102      	bne.n	8108986 <_sbrk_r+0x1a>
 8108980:	682b      	ldr	r3, [r5, #0]
 8108982:	b103      	cbz	r3, 8108986 <_sbrk_r+0x1a>
 8108984:	6023      	str	r3, [r4, #0]
 8108986:	bd38      	pop	{r3, r4, r5, pc}
 8108988:	10000e20 	.word	0x10000e20

0810898c <_init>:
 810898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810898e:	bf00      	nop
 8108990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108992:	bc08      	pop	{r3}
 8108994:	469e      	mov	lr, r3
 8108996:	4770      	bx	lr

08108998 <_fini>:
 8108998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810899a:	bf00      	nop
 810899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810899e:	bc08      	pop	{r3}
 81089a0:	469e      	mov	lr, r3
 81089a2:	4770      	bx	lr
