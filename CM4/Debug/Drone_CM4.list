
Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d4  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000212c  0810a874  0810a874  0000b874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c9a0  0810c9a0  0000d9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810c9a8  0810c9a8  0000d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810c9ac  0810c9ac  0000d9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  10000000  0810c9b0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f0c  1000006c  0810ca1c  0000e06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000f78  0810ca1c  0000ef78  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aa5e  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000526f  00000000  00000000  00038afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002280  00000000  00000000  0003dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001acb  00000000  00000000  0003fff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046b83  00000000  00000000  00041abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002caa0  00000000  00000000  0008863e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001c10c3  00000000  00000000  000b50de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002761a1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009ae0  00000000  00000000  002761e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000050  00000000  00000000  0027fcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000006c 	.word	0x1000006c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810a85c 	.word	0x0810a85c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000070 	.word	0x10000070
 81002dc:	0810a85c 	.word	0x0810a85c

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <IMUReadReg>:
    0x2e, 0x00, 0xc1
};


IMU_STATUS IMUReadReg(IMU *pIMU, uint8_t const reg, uint8_t *pBuf, uint32_t len)
{
 8100380:	b590      	push	{r4, r7, lr}
 8100382:	b091      	sub	sp, #68	@ 0x44
 8100384:	af02      	add	r7, sp, #8
 8100386:	60f8      	str	r0, [r7, #12]
 8100388:	607a      	str	r2, [r7, #4]
 810038a:	603b      	str	r3, [r7, #0]
 810038c:	460b      	mov	r3, r1
 810038e:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 8100390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100394:	2210      	movs	r2, #16
 8100396:	2100      	movs	r1, #0
 8100398:	4618      	mov	r0, r3
 810039a:	f009 fccf 	bl	8109d3c <memset>
	// 0x80 bmi270 read bit
	pTx[0] = 0x80 | reg;
 810039e:	7afb      	ldrb	r3, [r7, #11]
 81003a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 81003a4:	b2db      	uxtb	r3, r3
 81003a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t pRx[16];
	memset(pRx, 0, sizeof(pRx));
 81003aa:	f107 0314 	add.w	r3, r7, #20
 81003ae:	2210      	movs	r2, #16
 81003b0:	2100      	movs	r1, #0
 81003b2:	4618      	mov	r0, r3
 81003b4:	f009 fcc2 	bl	8109d3c <memset>
	// status = HAL_SPI_Transmit(pIMUSPIRef, pTemp, 1, 100);

	// set NSS high
	// HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);

	if(len + 1 > 16)
 81003b8:	683b      	ldr	r3, [r7, #0]
 81003ba:	3301      	adds	r3, #1
 81003bc:	2b10      	cmp	r3, #16
 81003be:	d901      	bls.n	81003c4 <IMUReadReg+0x44>
	{
		return IMU_ERROR;
 81003c0:	2301      	movs	r3, #1
 81003c2:	e01f      	b.n	8100404 <IMUReadReg+0x84>
	}

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(pIMU->pSPI, pTx, pRx, len + 1, 100);
 81003c4:	68fb      	ldr	r3, [r7, #12]
 81003c6:	6818      	ldr	r0, [r3, #0]
 81003c8:	683b      	ldr	r3, [r7, #0]
 81003ca:	b29b      	uxth	r3, r3
 81003cc:	3301      	adds	r3, #1
 81003ce:	b29b      	uxth	r3, r3
 81003d0:	f107 0214 	add.w	r2, r7, #20
 81003d4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 81003d8:	2464      	movs	r4, #100	@ 0x64
 81003da:	9400      	str	r4, [sp, #0]
 81003dc:	f006 fff0 	bl	81073c0 <HAL_SPI_TransmitReceive>
 81003e0:	4603      	mov	r3, r0
 81003e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if(status != HAL_OK)
 81003e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 81003ea:	2b00      	cmp	r3, #0
 81003ec:	d001      	beq.n	81003f2 <IMUReadReg+0x72>
	{
		return IMU_ERROR;
 81003ee:	2301      	movs	r3, #1
 81003f0:	e008      	b.n	8100404 <IMUReadReg+0x84>
	}
	// 1st byte sent by bmi270 is a dummy byte
	memcpy(pBuf, &pRx[1], len);
 81003f2:	f107 0314 	add.w	r3, r7, #20
 81003f6:	3301      	adds	r3, #1
 81003f8:	683a      	ldr	r2, [r7, #0]
 81003fa:	4619      	mov	r1, r3
 81003fc:	6878      	ldr	r0, [r7, #4]
 81003fe:	f009 fd18 	bl	8109e32 <memcpy>

	return IMU_OK;
 8100402:	2300      	movs	r3, #0
}
 8100404:	4618      	mov	r0, r3
 8100406:	373c      	adds	r7, #60	@ 0x3c
 8100408:	46bd      	mov	sp, r7
 810040a:	bd90      	pop	{r4, r7, pc}

0810040c <IMUWriteReg>:

IMU_STATUS IMUWriteReg(IMU *pIMU, uint8_t const reg, uint8_t *pBuf, uint32_t len)
{
 810040c:	b580      	push	{r7, lr}
 810040e:	b08a      	sub	sp, #40	@ 0x28
 8100410:	af00      	add	r7, sp, #0
 8100412:	60f8      	str	r0, [r7, #12]
 8100414:	607a      	str	r2, [r7, #4]
 8100416:	603b      	str	r3, [r7, #0]
 8100418:	460b      	mov	r3, r1
 810041a:	72fb      	strb	r3, [r7, #11]
	uint8_t pTx[16];
	memset(pTx, 0, sizeof(pTx));
 810041c:	f107 0314 	add.w	r3, r7, #20
 8100420:	2210      	movs	r2, #16
 8100422:	2100      	movs	r1, #0
 8100424:	4618      	mov	r0, r3
 8100426:	f009 fc89 	bl	8109d3c <memset>

	if(len + 1 > 16)
 810042a:	683b      	ldr	r3, [r7, #0]
 810042c:	3301      	adds	r3, #1
 810042e:	2b10      	cmp	r3, #16
 8100430:	d901      	bls.n	8100436 <IMUWriteReg+0x2a>
	{
		return IMU_OK;
 8100432:	2300      	movs	r3, #0
 8100434:	e01e      	b.n	8100474 <IMUWriteReg+0x68>
	}

	pTx[0] = reg;
 8100436:	7afb      	ldrb	r3, [r7, #11]
 8100438:	753b      	strb	r3, [r7, #20]
	memcpy(&pTx[1], (void*)pBuf, len);
 810043a:	f107 0314 	add.w	r3, r7, #20
 810043e:	3301      	adds	r3, #1
 8100440:	683a      	ldr	r2, [r7, #0]
 8100442:	6879      	ldr	r1, [r7, #4]
 8100444:	4618      	mov	r0, r3
 8100446:	f009 fcf4 	bl	8109e32 <memcpy>

	HAL_StatusTypeDef status = HAL_SPI_Transmit(pIMU->pSPI, pTx, len + 1, 100);
 810044a:	68fb      	ldr	r3, [r7, #12]
 810044c:	6818      	ldr	r0, [r3, #0]
 810044e:	683b      	ldr	r3, [r7, #0]
 8100450:	b29b      	uxth	r3, r3
 8100452:	3301      	adds	r3, #1
 8100454:	b29a      	uxth	r2, r3
 8100456:	f107 0114 	add.w	r1, r7, #20
 810045a:	2364      	movs	r3, #100	@ 0x64
 810045c:	f006 fdc4 	bl	8106fe8 <HAL_SPI_Transmit>
 8100460:	4603      	mov	r3, r0
 8100462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(status != HAL_OK)
 8100466:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810046a:	2b00      	cmp	r3, #0
 810046c:	d001      	beq.n	8100472 <IMUWriteReg+0x66>
	{
		return IMU_ERROR;
 810046e:	2301      	movs	r3, #1
 8100470:	e000      	b.n	8100474 <IMUWriteReg+0x68>
	}

	return IMU_OK;
 8100472:	2300      	movs	r3, #0
}
 8100474:	4618      	mov	r0, r3
 8100476:	3728      	adds	r7, #40	@ 0x28
 8100478:	46bd      	mov	sp, r7
 810047a:	bd80      	pop	{r7, pc}

0810047c <IMU2CPUInterruptHandler>:
  status = IMUUpdateGyro(pIMU);
  return status;
}

void IMU2CPUInterruptHandler(IMU *pIMU)
{
 810047c:	b580      	push	{r7, lr}
 810047e:	b084      	sub	sp, #16
 8100480:	af00      	add	r7, sp, #0
 8100482:	6078      	str	r0, [r7, #4]
  if(pIMU == NULL || pIMU->pSPI == NULL)
 8100484:	687b      	ldr	r3, [r7, #4]
 8100486:	2b00      	cmp	r3, #0
 8100488:	d003      	beq.n	8100492 <IMU2CPUInterruptHandler+0x16>
 810048a:	687b      	ldr	r3, [r7, #4]
 810048c:	681b      	ldr	r3, [r3, #0]
 810048e:	2b00      	cmp	r3, #0
 8100490:	d111      	bne.n	81004b6 <IMU2CPUInterruptHandler+0x3a>
  {
    LOG_ERROR("IMU Interrupt Handler: pIMU or pSPI is NULL");
 8100492:	481b      	ldr	r0, [pc, #108]	@ (8100500 <IMU2CPUInterruptHandler+0x84>)
 8100494:	f009 fb0a 	bl	8109aac <iprintf>
 8100498:	481a      	ldr	r0, [pc, #104]	@ (8100504 <IMU2CPUInterruptHandler+0x88>)
 810049a:	f009 fb07 	bl	8109aac <iprintf>
 810049e:	f44f 710c 	mov.w	r1, #560	@ 0x230
 81004a2:	4819      	ldr	r0, [pc, #100]	@ (8100508 <IMU2CPUInterruptHandler+0x8c>)
 81004a4:	f009 fb02 	bl	8109aac <iprintf>
 81004a8:	4818      	ldr	r0, [pc, #96]	@ (810050c <IMU2CPUInterruptHandler+0x90>)
 81004aa:	f009 faff 	bl	8109aac <iprintf>
 81004ae:	4818      	ldr	r0, [pc, #96]	@ (8100510 <IMU2CPUInterruptHandler+0x94>)
 81004b0:	f009 fb64 	bl	8109b7c <puts>
 81004b4:	e020      	b.n	81004f8 <IMU2CPUInterruptHandler+0x7c>
    return;
  }

  // read both status registers
  uint8_t pBuf[2] = {0, 0};
 81004b6:	2300      	movs	r3, #0
 81004b8:	81bb      	strh	r3, [r7, #12]
  IMU_STATUS status = IMUReadReg(pIMU, BMI2_INT_STATUS_1_ADDR, pBuf, 2);
 81004ba:	f107 020c 	add.w	r2, r7, #12
 81004be:	2302      	movs	r3, #2
 81004c0:	211d      	movs	r1, #29
 81004c2:	6878      	ldr	r0, [r7, #4]
 81004c4:	f7ff ff5c 	bl	8100380 <IMUReadReg>
 81004c8:	4603      	mov	r3, r0
 81004ca:	73fb      	strb	r3, [r7, #15]

  // uint8_t intStatus0 = pBuf[0];
  uint8_t intStatus1 = pBuf[1];
 81004cc:	7b7b      	ldrb	r3, [r7, #13]
 81004ce:	73bb      	strb	r3, [r7, #14]
  if(BIT_ISSET(intStatus1, BMI2_INT_STATUS_GYR_RDY_BIT))
  {
    status = IMUUpdateGyro(pIMU);
  }

  if(status != IMU_OK) 
 81004d0:	7bfb      	ldrb	r3, [r7, #15]
 81004d2:	2b00      	cmp	r3, #0
 81004d4:	d010      	beq.n	81004f8 <IMU2CPUInterruptHandler+0x7c>
  {
    LOG_ERROR("IMU Interrupt Handler: Failed to update IMU position data");
 81004d6:	480a      	ldr	r0, [pc, #40]	@ (8100500 <IMU2CPUInterruptHandler+0x84>)
 81004d8:	f009 fae8 	bl	8109aac <iprintf>
 81004dc:	4809      	ldr	r0, [pc, #36]	@ (8100504 <IMU2CPUInterruptHandler+0x88>)
 81004de:	f009 fae5 	bl	8109aac <iprintf>
 81004e2:	f240 214d 	movw	r1, #589	@ 0x24d
 81004e6:	4808      	ldr	r0, [pc, #32]	@ (8100508 <IMU2CPUInterruptHandler+0x8c>)
 81004e8:	f009 fae0 	bl	8109aac <iprintf>
 81004ec:	4809      	ldr	r0, [pc, #36]	@ (8100514 <IMU2CPUInterruptHandler+0x98>)
 81004ee:	f009 fadd 	bl	8109aac <iprintf>
 81004f2:	4807      	ldr	r0, [pc, #28]	@ (8100510 <IMU2CPUInterruptHandler+0x94>)
 81004f4:	f009 fb42 	bl	8109b7c <puts>
  }
}
 81004f8:	3710      	adds	r7, #16
 81004fa:	46bd      	mov	sp, r7
 81004fc:	bd80      	pop	{r7, pc}
 81004fe:	bf00      	nop
 8100500:	0810a874 	.word	0x0810a874
 8100504:	0810a880 	.word	0x0810a880
 8100508:	0810a8b0 	.word	0x0810a8b0
 810050c:	0810a8b4 	.word	0x0810a8b4
 8100510:	0810a8e0 	.word	0x0810a8e0
 8100514:	0810a8e4 	.word	0x0810a8e4

08100518 <IMUInit>:
  IMU_ACC_RANGE accRange,
  IMU_ACC_ODR accODR,
  IMU_GYRO_RANGE gyroRange,
  IMU_GYRO_ODR gyroODR
)
{
 8100518:	b580      	push	{r7, lr}
 810051a:	b086      	sub	sp, #24
 810051c:	af00      	add	r7, sp, #0
 810051e:	60f8      	str	r0, [r7, #12]
 8100520:	60b9      	str	r1, [r7, #8]
 8100522:	607a      	str	r2, [r7, #4]
 8100524:	70fb      	strb	r3, [r7, #3]
  memset(pIMU, 0, sizeof(IMU));
 8100526:	2224      	movs	r2, #36	@ 0x24
 8100528:	2100      	movs	r1, #0
 810052a:	68f8      	ldr	r0, [r7, #12]
 810052c:	f009 fc06 	bl	8109d3c <memset>
	pIMU->pSPI = pSPI;
 8100530:	68fb      	ldr	r3, [r7, #12]
 8100532:	68ba      	ldr	r2, [r7, #8]
 8100534:	601a      	str	r2, [r3, #0]
  pIMU->accRange = accRange;
 8100536:	68fb      	ldr	r3, [r7, #12]
 8100538:	78fa      	ldrb	r2, [r7, #3]
 810053a:	771a      	strb	r2, [r3, #28]
  pIMU->accODR = accODR;
 810053c:	68fb      	ldr	r3, [r7, #12]
 810053e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8100542:	775a      	strb	r2, [r3, #29]
  pIMU->gyroRange = gyroRange;
 8100544:	68fb      	ldr	r3, [r7, #12]
 8100546:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 810054a:	779a      	strb	r2, [r3, #30]
  pIMU->gyroODR = gyroODR;
 810054c:	68fb      	ldr	r3, [r7, #12]
 810054e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8100552:	77da      	strb	r2, [r3, #31]

	IMU_STATUS status;
	uint8_t pBuffer[2];
  memset(pBuffer, 0, sizeof(pBuffer));
 8100554:	f107 0314 	add.w	r3, r7, #20
 8100558:	2202      	movs	r2, #2
 810055a:	2100      	movs	r1, #0
 810055c:	4618      	mov	r0, r3
 810055e:	f009 fbed 	bl	8109d3c <memset>

	// Dummy read to initialize SPI
	status = IMUReadReg(pIMU, BMI2_CHIP_ID_ADDR, pBuffer, 1);
 8100562:	f107 0214 	add.w	r2, r7, #20
 8100566:	2301      	movs	r3, #1
 8100568:	2100      	movs	r1, #0
 810056a:	68f8      	ldr	r0, [r7, #12]
 810056c:	f7ff ff08 	bl	8100380 <IMUReadReg>
 8100570:	4603      	mov	r3, r0
 8100572:	75fb      	strb	r3, [r7, #23]
	status = IMUReadReg(pIMU, BMI2_CHIP_ID_ADDR, pBuffer, 1);
 8100574:	f107 0214 	add.w	r2, r7, #20
 8100578:	2301      	movs	r3, #1
 810057a:	2100      	movs	r1, #0
 810057c:	68f8      	ldr	r0, [r7, #12]
 810057e:	f7ff feff 	bl	8100380 <IMUReadReg>
 8100582:	4603      	mov	r3, r0
 8100584:	75fb      	strb	r3, [r7, #23]

	// Disable PWR_CONF advanced power save
	pBuffer[0] = 0;
 8100586:	2300      	movs	r3, #0
 8100588:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_PWR_CONF_ADDR, pBuffer, 1);
 810058a:	f107 0214 	add.w	r2, r7, #20
 810058e:	2301      	movs	r3, #1
 8100590:	217c      	movs	r1, #124	@ 0x7c
 8100592:	68f8      	ldr	r0, [r7, #12]
 8100594:	f7ff ff3a 	bl	810040c <IMUWriteReg>
 8100598:	4603      	mov	r3, r0
 810059a:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(1);
 810059c:	2001      	movs	r0, #1
 810059e:	f002 f939 	bl	8102814 <HAL_Delay>

	// Prepare config file
	pBuffer[0] = 0;
 81005a2:	2300      	movs	r3, #0
 81005a4:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_INIT_CTRL_ADDR, pBuffer, 1);
 81005a6:	f107 0214 	add.w	r2, r7, #20
 81005aa:	2301      	movs	r3, #1
 81005ac:	2159      	movs	r1, #89	@ 0x59
 81005ae:	68f8      	ldr	r0, [r7, #12]
 81005b0:	f7ff ff2c 	bl	810040c <IMUWriteReg>
 81005b4:	4603      	mov	r3, r0
 81005b6:	75fb      	strb	r3, [r7, #23]

	// I added the data write address directly to the config_file
	HAL_SPI_Transmit(pIMU->pSPI, bmi270_config_file, sizeof(bmi270_config_file), 100);
 81005b8:	68fb      	ldr	r3, [r7, #12]
 81005ba:	6818      	ldr	r0, [r3, #0]
 81005bc:	2364      	movs	r3, #100	@ 0x64
 81005be:	f242 0201 	movw	r2, #8193	@ 0x2001
 81005c2:	493b      	ldr	r1, [pc, #236]	@ (81006b0 <IMUInit+0x198>)
 81005c4:	f006 fd10 	bl	8106fe8 <HAL_SPI_Transmit>

	pBuffer[0] = 0x01;
 81005c8:	2301      	movs	r3, #1
 81005ca:	753b      	strb	r3, [r7, #20]
	status = IMUWriteReg(pIMU, BMI2_INIT_CTRL_ADDR, pBuffer, 1);
 81005cc:	f107 0214 	add.w	r2, r7, #20
 81005d0:	2301      	movs	r3, #1
 81005d2:	2159      	movs	r1, #89	@ 0x59
 81005d4:	68f8      	ldr	r0, [r7, #12]
 81005d6:	f7ff ff19 	bl	810040c <IMUWriteReg>
 81005da:	4603      	mov	r3, r0
 81005dc:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(20);
 81005de:	2014      	movs	r0, #20
 81005e0:	f002 f918 	bl	8102814 <HAL_Delay>

	status = IMUReadReg(pIMU, BMI2_INTERNAL_STATUS_ADDR, pBuffer, 1);
 81005e4:	f107 0214 	add.w	r2, r7, #20
 81005e8:	2301      	movs	r3, #1
 81005ea:	2121      	movs	r1, #33	@ 0x21
 81005ec:	68f8      	ldr	r0, [r7, #12]
 81005ee:	f7ff fec7 	bl	8100380 <IMUReadReg>
 81005f2:	4603      	mov	r3, r0
 81005f4:	75fb      	strb	r3, [r7, #23]
	if(status == -1 || (pBuffer[0] & 1) == 0)
 81005f6:	7d3b      	ldrb	r3, [r7, #20]
 81005f8:	f003 0301 	and.w	r3, r3, #1
 81005fc:	2b00      	cmp	r3, #0
 81005fe:	d101      	bne.n	8100604 <IMUInit+0xec>
	{
		return IMU_ERROR;
 8100600:	2301      	movs	r3, #1
 8100602:	e050      	b.n	81006a6 <IMUInit+0x18e>

  /*
  * Device Enable/Disable
  */
  // enable acceleration, gyro, and temp but disable auxillary interface
  pBuffer[0] = 0x0E;
 8100604:	230e      	movs	r3, #14
 8100606:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_PWR_CTRL_ADDR, pBuffer, 1);
 8100608:	f107 0214 	add.w	r2, r7, #20
 810060c:	2301      	movs	r3, #1
 810060e:	217d      	movs	r1, #125	@ 0x7d
 8100610:	68f8      	ldr	r0, [r7, #12]
 8100612:	f7ff fefb 	bl	810040c <IMUWriteReg>
 8100616:	4603      	mov	r3, r0
 8100618:	75fb      	strb	r3, [r7, #23]

  /*
  * Accelerometer Setup
  */
  // enable acc filter perf bit, set acc bwp to normal, and set acc_odr to 100 Hz
  pBuffer[0] = BMI2_ACC_CONF_PERF_MODE_BIT | BMI2_ACC_CONF_BWP_NORMAL_BIT | pIMU->accODR;
 810061a:	68fb      	ldr	r3, [r7, #12]
 810061c:	7f5b      	ldrb	r3, [r3, #29]
 810061e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8100622:	b2db      	uxtb	r3, r3
 8100624:	753b      	strb	r3, [r7, #20]
  // Set acc range to pIMU->accRange
  pBuffer[1] = pIMU->accRange;
 8100626:	68fb      	ldr	r3, [r7, #12]
 8100628:	7f1b      	ldrb	r3, [r3, #28]
 810062a:	757b      	strb	r3, [r7, #21]
  status = IMUWriteReg(pIMU, BMI2_ACC_CONF_ADDR, pBuffer, 2);
 810062c:	f107 0214 	add.w	r2, r7, #20
 8100630:	2302      	movs	r3, #2
 8100632:	2140      	movs	r1, #64	@ 0x40
 8100634:	68f8      	ldr	r0, [r7, #12]
 8100636:	f7ff fee9 	bl	810040c <IMUWriteReg>
 810063a:	4603      	mov	r3, r0
 810063c:	75fb      	strb	r3, [r7, #23]

  /*
  * Gyro Setup
  */
  // enable gyro filter perf bit, set gyr bwp to normal, and set gry_odr to 100 Hz
  pBuffer[0] = BMI2_GYRO_CONF_FILTER_PERF_BIT | BMI2_GYRO_CONF_NOISE_PERF_BIT | BMI2_GYRO_CONF_BWP_NORMAL_BIT | pIMU->gyroODR;
 810063e:	68fb      	ldr	r3, [r7, #12]
 8100640:	7fdb      	ldrb	r3, [r3, #31]
 8100642:	f063 031f 	orn	r3, r3, #31
 8100646:	b2db      	uxtb	r3, r3
 8100648:	753b      	strb	r3, [r7, #20]
  // set gyro range
  pBuffer[1] = pIMU->gyroRange;
 810064a:	68fb      	ldr	r3, [r7, #12]
 810064c:	7f9b      	ldrb	r3, [r3, #30]
 810064e:	757b      	strb	r3, [r7, #21]
  status = IMUWriteReg(pIMU, BMI2_GYR_CONF_ADDR, pBuffer, 2);
 8100650:	f107 0214 	add.w	r2, r7, #20
 8100654:	2302      	movs	r3, #2
 8100656:	2142      	movs	r1, #66	@ 0x42
 8100658:	68f8      	ldr	r0, [r7, #12]
 810065a:	f7ff fed7 	bl	810040c <IMUWriteReg>
 810065e:	4603      	mov	r3, r0
 8100660:	75fb      	strb	r3, [r7, #23]

  /*
  * Power Setup
  */
  // disable adv power sav and leave fifo self wakeup enabled
  pBuffer[0] = 0x02;
 8100662:	2302      	movs	r3, #2
 8100664:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_PWR_CONF_ADDR, pBuffer, 1);
 8100666:	f107 0214 	add.w	r2, r7, #20
 810066a:	2301      	movs	r3, #1
 810066c:	217c      	movs	r1, #124	@ 0x7c
 810066e:	68f8      	ldr	r0, [r7, #12]
 8100670:	f7ff fecc 	bl	810040c <IMUWriteReg>
 8100674:	4603      	mov	r3, r0
 8100676:	75fb      	strb	r3, [r7, #23]

  /*
  * Interrupt Setup
  */
  // enable INT1 w input disabled, output enabled, push pull, and active high
  pBuffer[0] = (0 << 3) | (1 << 2) | (0 << 1) | (1 << 0);
 8100678:	2305      	movs	r3, #5
 810067a:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_INT1_IO_CTRL_ADDR, pBuffer, 1);
 810067c:	f107 0214 	add.w	r2, r7, #20
 8100680:	2301      	movs	r3, #1
 8100682:	2153      	movs	r1, #83	@ 0x53
 8100684:	68f8      	ldr	r0, [r7, #12]
 8100686:	f7ff fec1 	bl	810040c <IMUWriteReg>
 810068a:	4603      	mov	r3, r0
 810068c:	75fb      	strb	r3, [r7, #23]
  // interrupts will NOT be cleared automatically. Have to be cleared by the
  // the host reading the int status registers
  pBuffer[0] = 1;
 810068e:	2301      	movs	r3, #1
 8100690:	753b      	strb	r3, [r7, #20]
  status = IMUWriteReg(pIMU, BMI2_INT_LATCH_ADDR, pBuffer, 1);
 8100692:	f107 0214 	add.w	r2, r7, #20
 8100696:	2301      	movs	r3, #1
 8100698:	2155      	movs	r1, #85	@ 0x55
 810069a:	68f8      	ldr	r0, [r7, #12]
 810069c:	f7ff feb6 	bl	810040c <IMUWriteReg>
 81006a0:	4603      	mov	r3, r0
 81006a2:	75fb      	strb	r3, [r7, #23]

	return IMU_OK;
 81006a4:	2300      	movs	r3, #0
}
 81006a6:	4618      	mov	r0, r3
 81006a8:	3718      	adds	r7, #24
 81006aa:	46bd      	mov	sp, r7
 81006ac:	bd80      	pop	{r7, pc}
 81006ae:	bf00      	nop
 81006b0:	0810a958 	.word	0x0810a958

081006b4 <__io_putchar>:

static void SyncUARTTaskHandler(void);
static int8_t LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 81006b4:	b580      	push	{r7, lr}
 81006b6:	b084      	sub	sp, #16
 81006b8:	af00      	add	r7, sp, #0
 81006ba:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 81006bc:	f002 fb2e 	bl	8102d1c <HAL_GetCurrentCPUID>
 81006c0:	4603      	mov	r3, r0
 81006c2:	2b03      	cmp	r3, #3
 81006c4:	d110      	bne.n	81006e8 <__io_putchar+0x34>
  {
    RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 81006c6:	4b15      	ldr	r3, [pc, #84]	@ (810071c <__io_putchar+0x68>)
 81006c8:	681b      	ldr	r3, [r3, #0]
 81006ca:	1d39      	adds	r1, r7, #4
 81006cc:	2201      	movs	r2, #1
 81006ce:	4618      	mov	r0, r3
 81006d0:	f000 f8fa 	bl	81008c8 <RingBuffWrite>
    if((char)ch == '\n')
 81006d4:	687b      	ldr	r3, [r7, #4]
 81006d6:	b2db      	uxtb	r3, r3
 81006d8:	2b0a      	cmp	r3, #10
 81006da:	d119      	bne.n	8100710 <__io_putchar+0x5c>
    {
      LoggerWriteToUART(pCM7RingBuf);
 81006dc:	4b0f      	ldr	r3, [pc, #60]	@ (810071c <__io_putchar+0x68>)
 81006de:	681b      	ldr	r3, [r3, #0]
 81006e0:	4618      	mov	r0, r3
 81006e2:	f000 f859 	bl	8100798 <LoggerWriteToUART>
 81006e6:	e013      	b.n	8100710 <__io_putchar+0x5c>
    }
  }
  else 
  {
    RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 81006e8:	4b0d      	ldr	r3, [pc, #52]	@ (8100720 <__io_putchar+0x6c>)
 81006ea:	681b      	ldr	r3, [r3, #0]
 81006ec:	1d39      	adds	r1, r7, #4
 81006ee:	2201      	movs	r2, #1
 81006f0:	4618      	mov	r0, r3
 81006f2:	f000 f8e9 	bl	81008c8 <RingBuffWrite>
    if((char)ch == '\n')
 81006f6:	687b      	ldr	r3, [r7, #4]
 81006f8:	b2db      	uxtb	r3, r3
 81006fa:	2b0a      	cmp	r3, #10
 81006fc:	d108      	bne.n	8100710 <__io_putchar+0x5c>
    {
      /*
      * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
      */
      uint32_t taskID = SYNC_TASKID_UART_OUT;
 81006fe:	2300      	movs	r3, #0
 8100700:	60fb      	str	r3, [r7, #12]
      SyncMailBoxWriteNotify(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8100702:	f107 030c 	add.w	r3, r7, #12
 8100706:	2204      	movs	r2, #4
 8100708:	4619      	mov	r1, r3
 810070a:	2000      	movs	r0, #0
 810070c:	f000 fadc 	bl	8100cc8 <SyncMailBoxWriteNotify>
    }
  }
  return ch;
 8100710:	687b      	ldr	r3, [r7, #4]
}
 8100712:	4618      	mov	r0, r3
 8100714:	3710      	adds	r7, #16
 8100716:	46bd      	mov	sp, r7
 8100718:	bd80      	pop	{r7, pc}
 810071a:	bf00      	nop
 810071c:	1000008c 	.word	0x1000008c
 8100720:	10000088 	.word	0x10000088

08100724 <LoggerInit>:

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 8100724:	b580      	push	{r7, lr}
 8100726:	b082      	sub	sp, #8
 8100728:	af00      	add	r7, sp, #0
 810072a:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 810072c:	f002 faf6 	bl	8102d1c <HAL_GetCurrentCPUID>
 8100730:	4603      	mov	r3, r0
 8100732:	2b03      	cmp	r3, #3
 8100734:	d102      	bne.n	810073c <LoggerInit+0x18>
 8100736:	687b      	ldr	r3, [r7, #4]
 8100738:	2b00      	cmp	r3, #0
 810073a:	d105      	bne.n	8100748 <LoggerInit+0x24>
  {
    pUART = NULL;
 810073c:	4b10      	ldr	r3, [pc, #64]	@ (8100780 <LoggerInit+0x5c>)
 810073e:	2200      	movs	r2, #0
 8100740:	601a      	str	r2, [r3, #0]
    return -1;
 8100742:	f04f 33ff 	mov.w	r3, #4294967295
 8100746:	e017      	b.n	8100778 <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8100748:	f44f 7190 	mov.w	r1, #288	@ 0x120
 810074c:	480d      	ldr	r0, [pc, #52]	@ (8100784 <LoggerInit+0x60>)
 810074e:	f000 f88b 	bl	8100868 <RingBuffCreate>
 8100752:	4603      	mov	r3, r0
 8100754:	4a0c      	ldr	r2, [pc, #48]	@ (8100788 <LoggerInit+0x64>)
 8100756:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8100758:	f44f 7190 	mov.w	r1, #288	@ 0x120
 810075c:	480b      	ldr	r0, [pc, #44]	@ (810078c <LoggerInit+0x68>)
 810075e:	f000 f883 	bl	8100868 <RingBuffCreate>
 8100762:	4603      	mov	r3, r0
 8100764:	4a0a      	ldr	r2, [pc, #40]	@ (8100790 <LoggerInit+0x6c>)
 8100766:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 8100768:	4a05      	ldr	r2, [pc, #20]	@ (8100780 <LoggerInit+0x5c>)
 810076a:	687b      	ldr	r3, [r7, #4]
 810076c:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 810076e:	2100      	movs	r1, #0
 8100770:	4808      	ldr	r0, [pc, #32]	@ (8100794 <LoggerInit+0x70>)
 8100772:	f000 fb01 	bl	8100d78 <SyncRegisterHandler>

  return 0;
 8100776:	2300      	movs	r3, #0
}
 8100778:	4618      	mov	r0, r3
 810077a:	3708      	adds	r7, #8
 810077c:	46bd      	mov	sp, r7
 810077e:	bd80      	pop	{r7, pc}
 8100780:	10000090 	.word	0x10000090
 8100784:	38000008 	.word	0x38000008
 8100788:	10000088 	.word	0x10000088
 810078c:	38000128 	.word	0x38000128
 8100790:	1000008c 	.word	0x1000008c
 8100794:	081007e9 	.word	0x081007e9

08100798 <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 8100798:	b580      	push	{r7, lr}
 810079a:	b084      	sub	sp, #16
 810079c:	af00      	add	r7, sp, #0
 810079e:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 81007a0:	2300      	movs	r3, #0
 81007a2:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 81007a4:	2300      	movs	r3, #0
 81007a6:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 81007a8:	6878      	ldr	r0, [r7, #4]
 81007aa:	f000 f9c9 	bl	8100b40 <RingBuffGetLinearBlockReadLength>
 81007ae:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 81007b0:	68fb      	ldr	r3, [r7, #12]
 81007b2:	2b00      	cmp	r3, #0
 81007b4:	d011      	beq.n	81007da <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 81007b6:	6878      	ldr	r0, [r7, #4]
 81007b8:	f000 f998 	bl	8100aec <RingBuffGetLinearBlockReadAddress>
 81007bc:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 81007be:	4b09      	ldr	r3, [pc, #36]	@ (81007e4 <LoggerWriteToUART+0x4c>)
 81007c0:	6818      	ldr	r0, [r3, #0]
 81007c2:	68fb      	ldr	r3, [r7, #12]
 81007c4:	b29a      	uxth	r2, r3
 81007c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81007ca:	68b9      	ldr	r1, [r7, #8]
 81007cc:	f008 fa22 	bl	8108c14 <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 81007d0:	68f9      	ldr	r1, [r7, #12]
 81007d2:	6878      	ldr	r0, [r7, #4]
 81007d4:	f000 f9f6 	bl	8100bc4 <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 81007d8:	e7e6      	b.n	81007a8 <LoggerWriteToUART+0x10>
  }
  return 0;
 81007da:	2300      	movs	r3, #0
}
 81007dc:	4618      	mov	r0, r3
 81007de:	3710      	adds	r7, #16
 81007e0:	46bd      	mov	sp, r7
 81007e2:	bd80      	pop	{r7, pc}
 81007e4:	10000090 	.word	0x10000090

081007e8 <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 81007e8:	b580      	push	{r7, lr}
 81007ea:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 81007ec:	f002 fa96 	bl	8102d1c <HAL_GetCurrentCPUID>
 81007f0:	4603      	mov	r3, r0
 81007f2:	2b03      	cmp	r3, #3
 81007f4:	d104      	bne.n	8100800 <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 81007f6:	4b03      	ldr	r3, [pc, #12]	@ (8100804 <SyncUARTTaskHandler+0x1c>)
 81007f8:	681b      	ldr	r3, [r3, #0]
 81007fa:	4618      	mov	r0, r3
 81007fc:	f7ff ffcc 	bl	8100798 <LoggerWriteToUART>
  }
 8100800:	bf00      	nop
 8100802:	bd80      	pop	{r7, pc}
 8100804:	10000088 	.word	0x10000088

08100808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100808:	b480      	push	{r7}
 810080a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810080c:	4b09      	ldr	r3, [pc, #36]	@ (8100834 <SystemInit+0x2c>)
 810080e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100812:	4a08      	ldr	r2, [pc, #32]	@ (8100834 <SystemInit+0x2c>)
 8100814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810081c:	4b05      	ldr	r3, [pc, #20]	@ (8100834 <SystemInit+0x2c>)
 810081e:	691b      	ldr	r3, [r3, #16]
 8100820:	4a04      	ldr	r2, [pc, #16]	@ (8100834 <SystemInit+0x2c>)
 8100822:	f043 0310 	orr.w	r3, r3, #16
 8100826:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100828:	bf00      	nop
 810082a:	46bd      	mov	sp, r7
 810082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100830:	4770      	bx	lr
 8100832:	bf00      	nop
 8100834:	e000ed00 	.word	0xe000ed00

08100838 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100838:	b480      	push	{r7}
 810083a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 810083c:	4b09      	ldr	r3, [pc, #36]	@ (8100864 <ExitRun0Mode+0x2c>)
 810083e:	68db      	ldr	r3, [r3, #12]
 8100840:	4a08      	ldr	r2, [pc, #32]	@ (8100864 <ExitRun0Mode+0x2c>)
 8100842:	f023 0302 	bic.w	r3, r3, #2
 8100846:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100848:	bf00      	nop
 810084a:	4b06      	ldr	r3, [pc, #24]	@ (8100864 <ExitRun0Mode+0x2c>)
 810084c:	685b      	ldr	r3, [r3, #4]
 810084e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100852:	2b00      	cmp	r3, #0
 8100854:	d0f9      	beq.n	810084a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100856:	bf00      	nop
 8100858:	bf00      	nop
 810085a:	46bd      	mov	sp, r7
 810085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100860:	4770      	bx	lr
 8100862:	bf00      	nop
 8100864:	58024800 	.word	0x58024800

08100868 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8100868:	b580      	push	{r7, lr}
 810086a:	b084      	sub	sp, #16
 810086c:	af00      	add	r7, sp, #0
 810086e:	6078      	str	r0, [r7, #4]
 8100870:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 8100872:	687b      	ldr	r3, [r7, #4]
 8100874:	2b00      	cmp	r3, #0
 8100876:	d005      	beq.n	8100884 <RingBuffCreate+0x1c>
 8100878:	683b      	ldr	r3, [r7, #0]
 810087a:	2b00      	cmp	r3, #0
 810087c:	d002      	beq.n	8100884 <RingBuffCreate+0x1c>
 810087e:	683b      	ldr	r3, [r7, #0]
 8100880:	2b20      	cmp	r3, #32
 8100882:	d801      	bhi.n	8100888 <RingBuffCreate+0x20>
        return NULL;
 8100884:	2300      	movs	r3, #0
 8100886:	e017      	b.n	81008b8 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 8100888:	687b      	ldr	r3, [r7, #4]
 810088a:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 810088c:	2220      	movs	r2, #32
 810088e:	2100      	movs	r1, #0
 8100890:	68f8      	ldr	r0, [r7, #12]
 8100892:	f009 fa53 	bl	8109d3c <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 8100896:	683b      	ldr	r3, [r7, #0]
 8100898:	f1a3 0220 	sub.w	r2, r3, #32
 810089c:	68fb      	ldr	r3, [r7, #12]
 810089e:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 81008a0:	687b      	ldr	r3, [r7, #4]
 81008a2:	f103 0220 	add.w	r2, r3, #32
 81008a6:	68fb      	ldr	r3, [r7, #12]
 81008a8:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 81008aa:	68fb      	ldr	r3, [r7, #12]
 81008ac:	4a04      	ldr	r2, [pc, #16]	@ (81008c0 <RingBuffCreate+0x58>)
 81008ae:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 81008b0:	68fb      	ldr	r3, [r7, #12]
 81008b2:	4a04      	ldr	r2, [pc, #16]	@ (81008c4 <RingBuffCreate+0x5c>)
 81008b4:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 81008b6:	68fb      	ldr	r3, [r7, #12]
}
 81008b8:	4618      	mov	r0, r3
 81008ba:	3710      	adds	r7, #16
 81008bc:	46bd      	mov	sp, r7
 81008be:	bd80      	pop	{r7, pc}
 81008c0:	deadbeef 	.word	0xdeadbeef
 81008c4:	21524110 	.word	0x21524110

081008c8 <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 81008c8:	b580      	push	{r7, lr}
 81008ca:	b088      	sub	sp, #32
 81008cc:	af00      	add	r7, sp, #0
 81008ce:	60f8      	str	r0, [r7, #12]
 81008d0:	60b9      	str	r1, [r7, #8]
 81008d2:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 81008d4:	68bb      	ldr	r3, [r7, #8]
 81008d6:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 81008d8:	68fb      	ldr	r3, [r7, #12]
 81008da:	2b00      	cmp	r3, #0
 81008dc:	d017      	beq.n	810090e <RingBuffWrite+0x46>
 81008de:	68fb      	ldr	r3, [r7, #12]
 81008e0:	681b      	ldr	r3, [r3, #0]
 81008e2:	4a3b      	ldr	r2, [pc, #236]	@ (81009d0 <RingBuffWrite+0x108>)
 81008e4:	4293      	cmp	r3, r2
 81008e6:	d112      	bne.n	810090e <RingBuffWrite+0x46>
 81008e8:	68fb      	ldr	r3, [r7, #12]
 81008ea:	699b      	ldr	r3, [r3, #24]
 81008ec:	4a39      	ldr	r2, [pc, #228]	@ (81009d4 <RingBuffWrite+0x10c>)
 81008ee:	4293      	cmp	r3, r2
 81008f0:	d10d      	bne.n	810090e <RingBuffWrite+0x46>
 81008f2:	68fb      	ldr	r3, [r7, #12]
 81008f4:	685b      	ldr	r3, [r3, #4]
 81008f6:	2b00      	cmp	r3, #0
 81008f8:	d009      	beq.n	810090e <RingBuffWrite+0x46>
 81008fa:	68fb      	ldr	r3, [r7, #12]
 81008fc:	689b      	ldr	r3, [r3, #8]
 81008fe:	2b00      	cmp	r3, #0
 8100900:	d005      	beq.n	810090e <RingBuffWrite+0x46>
 8100902:	68bb      	ldr	r3, [r7, #8]
 8100904:	2b00      	cmp	r3, #0
 8100906:	d002      	beq.n	810090e <RingBuffWrite+0x46>
 8100908:	687b      	ldr	r3, [r7, #4]
 810090a:	2b00      	cmp	r3, #0
 810090c:	d101      	bne.n	8100912 <RingBuffWrite+0x4a>
        return 0;
 810090e:	2300      	movs	r3, #0
 8100910:	e059      	b.n	81009c6 <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 8100912:	68f8      	ldr	r0, [r7, #12]
 8100914:	f000 f860 	bl	81009d8 <RingBuffGetFree>
 8100918:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 810091a:	687a      	ldr	r2, [r7, #4]
 810091c:	69bb      	ldr	r3, [r7, #24]
 810091e:	4293      	cmp	r3, r2
 8100920:	bf28      	it	cs
 8100922:	4613      	movcs	r3, r2
 8100924:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8100926:	687b      	ldr	r3, [r7, #4]
 8100928:	2b00      	cmp	r3, #0
 810092a:	d101      	bne.n	8100930 <RingBuffWrite+0x68>
        return 0;
 810092c:	2300      	movs	r3, #0
 810092e:	e04a      	b.n	81009c6 <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8100930:	68fb      	ldr	r3, [r7, #12]
 8100932:	689a      	ldr	r2, [r3, #8]
 8100934:	68fb      	ldr	r3, [r7, #12]
 8100936:	691b      	ldr	r3, [r3, #16]
 8100938:	1ad3      	subs	r3, r2, r3
 810093a:	687a      	ldr	r2, [r7, #4]
 810093c:	429a      	cmp	r2, r3
 810093e:	d905      	bls.n	810094c <RingBuffWrite+0x84>
 8100940:	68fb      	ldr	r3, [r7, #12]
 8100942:	689a      	ldr	r2, [r3, #8]
 8100944:	68fb      	ldr	r3, [r7, #12]
 8100946:	691b      	ldr	r3, [r3, #16]
 8100948:	1ad3      	subs	r3, r2, r3
 810094a:	e000      	b.n	810094e <RingBuffWrite+0x86>
 810094c:	687b      	ldr	r3, [r7, #4]
 810094e:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8100950:	68fb      	ldr	r3, [r7, #12]
 8100952:	685a      	ldr	r2, [r3, #4]
 8100954:	68fb      	ldr	r3, [r7, #12]
 8100956:	691b      	ldr	r3, [r3, #16]
 8100958:	4413      	add	r3, r2
 810095a:	697a      	ldr	r2, [r7, #20]
 810095c:	69f9      	ldr	r1, [r7, #28]
 810095e:	4618      	mov	r0, r3
 8100960:	f009 fa67 	bl	8109e32 <memcpy>
    buff->w += tocopy;
 8100964:	68fb      	ldr	r3, [r7, #12]
 8100966:	691a      	ldr	r2, [r3, #16]
 8100968:	697b      	ldr	r3, [r7, #20]
 810096a:	441a      	add	r2, r3
 810096c:	68fb      	ldr	r3, [r7, #12]
 810096e:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8100970:	687a      	ldr	r2, [r7, #4]
 8100972:	697b      	ldr	r3, [r7, #20]
 8100974:	1ad3      	subs	r3, r2, r3
 8100976:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8100978:	687b      	ldr	r3, [r7, #4]
 810097a:	2b00      	cmp	r3, #0
 810097c:	d00b      	beq.n	8100996 <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 810097e:	68fb      	ldr	r3, [r7, #12]
 8100980:	6858      	ldr	r0, [r3, #4]
 8100982:	69fa      	ldr	r2, [r7, #28]
 8100984:	697b      	ldr	r3, [r7, #20]
 8100986:	4413      	add	r3, r2
 8100988:	687a      	ldr	r2, [r7, #4]
 810098a:	4619      	mov	r1, r3
 810098c:	f009 fa51 	bl	8109e32 <memcpy>
        buff->w = btw;
 8100990:	68fb      	ldr	r3, [r7, #12]
 8100992:	687a      	ldr	r2, [r7, #4]
 8100994:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8100996:	68fb      	ldr	r3, [r7, #12]
 8100998:	691a      	ldr	r2, [r3, #16]
 810099a:	68fb      	ldr	r3, [r7, #12]
 810099c:	689b      	ldr	r3, [r3, #8]
 810099e:	429a      	cmp	r2, r3
 81009a0:	d302      	bcc.n	81009a8 <RingBuffWrite+0xe0>
        buff->w = 0;
 81009a2:	68fb      	ldr	r3, [r7, #12]
 81009a4:	2200      	movs	r2, #0
 81009a6:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 81009a8:	68fb      	ldr	r3, [r7, #12]
 81009aa:	695b      	ldr	r3, [r3, #20]
 81009ac:	2b00      	cmp	r3, #0
 81009ae:	d007      	beq.n	81009c0 <RingBuffWrite+0xf8>
 81009b0:	68fb      	ldr	r3, [r7, #12]
 81009b2:	695b      	ldr	r3, [r3, #20]
 81009b4:	6979      	ldr	r1, [r7, #20]
 81009b6:	687a      	ldr	r2, [r7, #4]
 81009b8:	440a      	add	r2, r1
 81009ba:	2101      	movs	r1, #1
 81009bc:	68f8      	ldr	r0, [r7, #12]
 81009be:	4798      	blx	r3
    return tocopy + btw;
 81009c0:	697a      	ldr	r2, [r7, #20]
 81009c2:	687b      	ldr	r3, [r7, #4]
 81009c4:	4413      	add	r3, r2
}
 81009c6:	4618      	mov	r0, r3
 81009c8:	3720      	adds	r7, #32
 81009ca:	46bd      	mov	sp, r7
 81009cc:	bd80      	pop	{r7, pc}
 81009ce:	bf00      	nop
 81009d0:	deadbeef 	.word	0xdeadbeef
 81009d4:	21524110 	.word	0x21524110

081009d8 <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 81009d8:	b480      	push	{r7}
 81009da:	b087      	sub	sp, #28
 81009dc:	af00      	add	r7, sp, #0
 81009de:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 81009e0:	687b      	ldr	r3, [r7, #4]
 81009e2:	2b00      	cmp	r3, #0
 81009e4:	d011      	beq.n	8100a0a <RingBuffGetFree+0x32>
 81009e6:	687b      	ldr	r3, [r7, #4]
 81009e8:	681b      	ldr	r3, [r3, #0]
 81009ea:	4a1c      	ldr	r2, [pc, #112]	@ (8100a5c <RingBuffGetFree+0x84>)
 81009ec:	4293      	cmp	r3, r2
 81009ee:	d10c      	bne.n	8100a0a <RingBuffGetFree+0x32>
 81009f0:	687b      	ldr	r3, [r7, #4]
 81009f2:	699b      	ldr	r3, [r3, #24]
 81009f4:	4a1a      	ldr	r2, [pc, #104]	@ (8100a60 <RingBuffGetFree+0x88>)
 81009f6:	4293      	cmp	r3, r2
 81009f8:	d107      	bne.n	8100a0a <RingBuffGetFree+0x32>
 81009fa:	687b      	ldr	r3, [r7, #4]
 81009fc:	685b      	ldr	r3, [r3, #4]
 81009fe:	2b00      	cmp	r3, #0
 8100a00:	d003      	beq.n	8100a0a <RingBuffGetFree+0x32>
 8100a02:	687b      	ldr	r3, [r7, #4]
 8100a04:	689b      	ldr	r3, [r3, #8]
 8100a06:	2b00      	cmp	r3, #0
 8100a08:	d101      	bne.n	8100a0e <RingBuffGetFree+0x36>
        return 0;
 8100a0a:	2300      	movs	r3, #0
 8100a0c:	e01f      	b.n	8100a4e <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8100a0e:	687b      	ldr	r3, [r7, #4]
 8100a10:	691b      	ldr	r3, [r3, #16]
 8100a12:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100a14:	687b      	ldr	r3, [r7, #4]
 8100a16:	68db      	ldr	r3, [r3, #12]
 8100a18:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8100a1a:	693a      	ldr	r2, [r7, #16]
 8100a1c:	68fb      	ldr	r3, [r7, #12]
 8100a1e:	429a      	cmp	r2, r3
 8100a20:	d103      	bne.n	8100a2a <RingBuffGetFree+0x52>
        size = buff->size;
 8100a22:	687b      	ldr	r3, [r7, #4]
 8100a24:	689b      	ldr	r3, [r3, #8]
 8100a26:	617b      	str	r3, [r7, #20]
 8100a28:	e00f      	b.n	8100a4a <RingBuffGetFree+0x72>
    } else if (r > w) {
 8100a2a:	68fa      	ldr	r2, [r7, #12]
 8100a2c:	693b      	ldr	r3, [r7, #16]
 8100a2e:	429a      	cmp	r2, r3
 8100a30:	d904      	bls.n	8100a3c <RingBuffGetFree+0x64>
        size = r - w;
 8100a32:	68fa      	ldr	r2, [r7, #12]
 8100a34:	693b      	ldr	r3, [r7, #16]
 8100a36:	1ad3      	subs	r3, r2, r3
 8100a38:	617b      	str	r3, [r7, #20]
 8100a3a:	e006      	b.n	8100a4a <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8100a3c:	687b      	ldr	r3, [r7, #4]
 8100a3e:	689a      	ldr	r2, [r3, #8]
 8100a40:	68f9      	ldr	r1, [r7, #12]
 8100a42:	693b      	ldr	r3, [r7, #16]
 8100a44:	1acb      	subs	r3, r1, r3
 8100a46:	4413      	add	r3, r2
 8100a48:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8100a4a:	697b      	ldr	r3, [r7, #20]
 8100a4c:	3b01      	subs	r3, #1
}
 8100a4e:	4618      	mov	r0, r3
 8100a50:	371c      	adds	r7, #28
 8100a52:	46bd      	mov	sp, r7
 8100a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a58:	4770      	bx	lr
 8100a5a:	bf00      	nop
 8100a5c:	deadbeef 	.word	0xdeadbeef
 8100a60:	21524110 	.word	0x21524110

08100a64 <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8100a64:	b480      	push	{r7}
 8100a66:	b087      	sub	sp, #28
 8100a68:	af00      	add	r7, sp, #0
 8100a6a:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8100a6c:	687b      	ldr	r3, [r7, #4]
 8100a6e:	2b00      	cmp	r3, #0
 8100a70:	d011      	beq.n	8100a96 <RingBuffGetFull+0x32>
 8100a72:	687b      	ldr	r3, [r7, #4]
 8100a74:	681b      	ldr	r3, [r3, #0]
 8100a76:	4a1b      	ldr	r2, [pc, #108]	@ (8100ae4 <RingBuffGetFull+0x80>)
 8100a78:	4293      	cmp	r3, r2
 8100a7a:	d10c      	bne.n	8100a96 <RingBuffGetFull+0x32>
 8100a7c:	687b      	ldr	r3, [r7, #4]
 8100a7e:	699b      	ldr	r3, [r3, #24]
 8100a80:	4a19      	ldr	r2, [pc, #100]	@ (8100ae8 <RingBuffGetFull+0x84>)
 8100a82:	4293      	cmp	r3, r2
 8100a84:	d107      	bne.n	8100a96 <RingBuffGetFull+0x32>
 8100a86:	687b      	ldr	r3, [r7, #4]
 8100a88:	685b      	ldr	r3, [r3, #4]
 8100a8a:	2b00      	cmp	r3, #0
 8100a8c:	d003      	beq.n	8100a96 <RingBuffGetFull+0x32>
 8100a8e:	687b      	ldr	r3, [r7, #4]
 8100a90:	689b      	ldr	r3, [r3, #8]
 8100a92:	2b00      	cmp	r3, #0
 8100a94:	d101      	bne.n	8100a9a <RingBuffGetFull+0x36>
        return 0;
 8100a96:	2300      	movs	r3, #0
 8100a98:	e01d      	b.n	8100ad6 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8100a9a:	687b      	ldr	r3, [r7, #4]
 8100a9c:	691b      	ldr	r3, [r3, #16]
 8100a9e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100aa0:	687b      	ldr	r3, [r7, #4]
 8100aa2:	68db      	ldr	r3, [r3, #12]
 8100aa4:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8100aa6:	693a      	ldr	r2, [r7, #16]
 8100aa8:	68fb      	ldr	r3, [r7, #12]
 8100aaa:	429a      	cmp	r2, r3
 8100aac:	d102      	bne.n	8100ab4 <RingBuffGetFull+0x50>
        size = 0;
 8100aae:	2300      	movs	r3, #0
 8100ab0:	617b      	str	r3, [r7, #20]
 8100ab2:	e00f      	b.n	8100ad4 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8100ab4:	693a      	ldr	r2, [r7, #16]
 8100ab6:	68fb      	ldr	r3, [r7, #12]
 8100ab8:	429a      	cmp	r2, r3
 8100aba:	d904      	bls.n	8100ac6 <RingBuffGetFull+0x62>
        size = w - r;
 8100abc:	693a      	ldr	r2, [r7, #16]
 8100abe:	68fb      	ldr	r3, [r7, #12]
 8100ac0:	1ad3      	subs	r3, r2, r3
 8100ac2:	617b      	str	r3, [r7, #20]
 8100ac4:	e006      	b.n	8100ad4 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8100ac6:	687b      	ldr	r3, [r7, #4]
 8100ac8:	689a      	ldr	r2, [r3, #8]
 8100aca:	6939      	ldr	r1, [r7, #16]
 8100acc:	68fb      	ldr	r3, [r7, #12]
 8100ace:	1acb      	subs	r3, r1, r3
 8100ad0:	4413      	add	r3, r2
 8100ad2:	617b      	str	r3, [r7, #20]
    }
    return size;
 8100ad4:	697b      	ldr	r3, [r7, #20]
}
 8100ad6:	4618      	mov	r0, r3
 8100ad8:	371c      	adds	r7, #28
 8100ada:	46bd      	mov	sp, r7
 8100adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ae0:	4770      	bx	lr
 8100ae2:	bf00      	nop
 8100ae4:	deadbeef 	.word	0xdeadbeef
 8100ae8:	21524110 	.word	0x21524110

08100aec <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 8100aec:	b480      	push	{r7}
 8100aee:	b083      	sub	sp, #12
 8100af0:	af00      	add	r7, sp, #0
 8100af2:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8100af4:	687b      	ldr	r3, [r7, #4]
 8100af6:	2b00      	cmp	r3, #0
 8100af8:	d011      	beq.n	8100b1e <RingBuffGetLinearBlockReadAddress+0x32>
 8100afa:	687b      	ldr	r3, [r7, #4]
 8100afc:	681b      	ldr	r3, [r3, #0]
 8100afe:	4a0e      	ldr	r2, [pc, #56]	@ (8100b38 <RingBuffGetLinearBlockReadAddress+0x4c>)
 8100b00:	4293      	cmp	r3, r2
 8100b02:	d10c      	bne.n	8100b1e <RingBuffGetLinearBlockReadAddress+0x32>
 8100b04:	687b      	ldr	r3, [r7, #4]
 8100b06:	699b      	ldr	r3, [r3, #24]
 8100b08:	4a0c      	ldr	r2, [pc, #48]	@ (8100b3c <RingBuffGetLinearBlockReadAddress+0x50>)
 8100b0a:	4293      	cmp	r3, r2
 8100b0c:	d107      	bne.n	8100b1e <RingBuffGetLinearBlockReadAddress+0x32>
 8100b0e:	687b      	ldr	r3, [r7, #4]
 8100b10:	685b      	ldr	r3, [r3, #4]
 8100b12:	2b00      	cmp	r3, #0
 8100b14:	d003      	beq.n	8100b1e <RingBuffGetLinearBlockReadAddress+0x32>
 8100b16:	687b      	ldr	r3, [r7, #4]
 8100b18:	689b      	ldr	r3, [r3, #8]
 8100b1a:	2b00      	cmp	r3, #0
 8100b1c:	d101      	bne.n	8100b22 <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 8100b1e:	2300      	movs	r3, #0
 8100b20:	e004      	b.n	8100b2c <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 8100b22:	687b      	ldr	r3, [r7, #4]
 8100b24:	685a      	ldr	r2, [r3, #4]
 8100b26:	687b      	ldr	r3, [r7, #4]
 8100b28:	68db      	ldr	r3, [r3, #12]
 8100b2a:	4413      	add	r3, r2
}
 8100b2c:	4618      	mov	r0, r3
 8100b2e:	370c      	adds	r7, #12
 8100b30:	46bd      	mov	sp, r7
 8100b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b36:	4770      	bx	lr
 8100b38:	deadbeef 	.word	0xdeadbeef
 8100b3c:	21524110 	.word	0x21524110

08100b40 <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 8100b40:	b480      	push	{r7}
 8100b42:	b087      	sub	sp, #28
 8100b44:	af00      	add	r7, sp, #0
 8100b46:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8100b48:	687b      	ldr	r3, [r7, #4]
 8100b4a:	2b00      	cmp	r3, #0
 8100b4c:	d011      	beq.n	8100b72 <RingBuffGetLinearBlockReadLength+0x32>
 8100b4e:	687b      	ldr	r3, [r7, #4]
 8100b50:	681b      	ldr	r3, [r3, #0]
 8100b52:	4a1a      	ldr	r2, [pc, #104]	@ (8100bbc <RingBuffGetLinearBlockReadLength+0x7c>)
 8100b54:	4293      	cmp	r3, r2
 8100b56:	d10c      	bne.n	8100b72 <RingBuffGetLinearBlockReadLength+0x32>
 8100b58:	687b      	ldr	r3, [r7, #4]
 8100b5a:	699b      	ldr	r3, [r3, #24]
 8100b5c:	4a18      	ldr	r2, [pc, #96]	@ (8100bc0 <RingBuffGetLinearBlockReadLength+0x80>)
 8100b5e:	4293      	cmp	r3, r2
 8100b60:	d107      	bne.n	8100b72 <RingBuffGetLinearBlockReadLength+0x32>
 8100b62:	687b      	ldr	r3, [r7, #4]
 8100b64:	685b      	ldr	r3, [r3, #4]
 8100b66:	2b00      	cmp	r3, #0
 8100b68:	d003      	beq.n	8100b72 <RingBuffGetLinearBlockReadLength+0x32>
 8100b6a:	687b      	ldr	r3, [r7, #4]
 8100b6c:	689b      	ldr	r3, [r3, #8]
 8100b6e:	2b00      	cmp	r3, #0
 8100b70:	d101      	bne.n	8100b76 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 8100b72:	2300      	movs	r3, #0
 8100b74:	e01b      	b.n	8100bae <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8100b76:	687b      	ldr	r3, [r7, #4]
 8100b78:	691b      	ldr	r3, [r3, #16]
 8100b7a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100b7c:	687b      	ldr	r3, [r7, #4]
 8100b7e:	68db      	ldr	r3, [r3, #12]
 8100b80:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8100b82:	693a      	ldr	r2, [r7, #16]
 8100b84:	68fb      	ldr	r3, [r7, #12]
 8100b86:	429a      	cmp	r2, r3
 8100b88:	d904      	bls.n	8100b94 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8100b8a:	693a      	ldr	r2, [r7, #16]
 8100b8c:	68fb      	ldr	r3, [r7, #12]
 8100b8e:	1ad3      	subs	r3, r2, r3
 8100b90:	617b      	str	r3, [r7, #20]
 8100b92:	e00b      	b.n	8100bac <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8100b94:	68fa      	ldr	r2, [r7, #12]
 8100b96:	693b      	ldr	r3, [r7, #16]
 8100b98:	429a      	cmp	r2, r3
 8100b9a:	d905      	bls.n	8100ba8 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8100b9c:	687b      	ldr	r3, [r7, #4]
 8100b9e:	689a      	ldr	r2, [r3, #8]
 8100ba0:	68fb      	ldr	r3, [r7, #12]
 8100ba2:	1ad3      	subs	r3, r2, r3
 8100ba4:	617b      	str	r3, [r7, #20]
 8100ba6:	e001      	b.n	8100bac <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8100ba8:	2300      	movs	r3, #0
 8100baa:	617b      	str	r3, [r7, #20]
    }
    return len;
 8100bac:	697b      	ldr	r3, [r7, #20]
}
 8100bae:	4618      	mov	r0, r3
 8100bb0:	371c      	adds	r7, #28
 8100bb2:	46bd      	mov	sp, r7
 8100bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bb8:	4770      	bx	lr
 8100bba:	bf00      	nop
 8100bbc:	deadbeef 	.word	0xdeadbeef
 8100bc0:	21524110 	.word	0x21524110

08100bc4 <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8100bc4:	b580      	push	{r7, lr}
 8100bc6:	b084      	sub	sp, #16
 8100bc8:	af00      	add	r7, sp, #0
 8100bca:	6078      	str	r0, [r7, #4]
 8100bcc:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8100bce:	687b      	ldr	r3, [r7, #4]
 8100bd0:	2b00      	cmp	r3, #0
 8100bd2:	d014      	beq.n	8100bfe <RingBuffSkip+0x3a>
 8100bd4:	687b      	ldr	r3, [r7, #4]
 8100bd6:	681b      	ldr	r3, [r3, #0]
 8100bd8:	4a20      	ldr	r2, [pc, #128]	@ (8100c5c <RingBuffSkip+0x98>)
 8100bda:	4293      	cmp	r3, r2
 8100bdc:	d10f      	bne.n	8100bfe <RingBuffSkip+0x3a>
 8100bde:	687b      	ldr	r3, [r7, #4]
 8100be0:	699b      	ldr	r3, [r3, #24]
 8100be2:	4a1f      	ldr	r2, [pc, #124]	@ (8100c60 <RingBuffSkip+0x9c>)
 8100be4:	4293      	cmp	r3, r2
 8100be6:	d10a      	bne.n	8100bfe <RingBuffSkip+0x3a>
 8100be8:	687b      	ldr	r3, [r7, #4]
 8100bea:	685b      	ldr	r3, [r3, #4]
 8100bec:	2b00      	cmp	r3, #0
 8100bee:	d006      	beq.n	8100bfe <RingBuffSkip+0x3a>
 8100bf0:	687b      	ldr	r3, [r7, #4]
 8100bf2:	689b      	ldr	r3, [r3, #8]
 8100bf4:	2b00      	cmp	r3, #0
 8100bf6:	d002      	beq.n	8100bfe <RingBuffSkip+0x3a>
 8100bf8:	683b      	ldr	r3, [r7, #0]
 8100bfa:	2b00      	cmp	r3, #0
 8100bfc:	d101      	bne.n	8100c02 <RingBuffSkip+0x3e>
        return 0;
 8100bfe:	2300      	movs	r3, #0
 8100c00:	e027      	b.n	8100c52 <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 8100c02:	6878      	ldr	r0, [r7, #4]
 8100c04:	f7ff ff2e 	bl	8100a64 <RingBuffGetFull>
 8100c08:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8100c0a:	683a      	ldr	r2, [r7, #0]
 8100c0c:	68fb      	ldr	r3, [r7, #12]
 8100c0e:	4293      	cmp	r3, r2
 8100c10:	bf28      	it	cs
 8100c12:	4613      	movcs	r3, r2
 8100c14:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8100c16:	687b      	ldr	r3, [r7, #4]
 8100c18:	68da      	ldr	r2, [r3, #12]
 8100c1a:	683b      	ldr	r3, [r7, #0]
 8100c1c:	441a      	add	r2, r3
 8100c1e:	687b      	ldr	r3, [r7, #4]
 8100c20:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8100c22:	687b      	ldr	r3, [r7, #4]
 8100c24:	68da      	ldr	r2, [r3, #12]
 8100c26:	687b      	ldr	r3, [r7, #4]
 8100c28:	689b      	ldr	r3, [r3, #8]
 8100c2a:	429a      	cmp	r2, r3
 8100c2c:	d306      	bcc.n	8100c3c <RingBuffSkip+0x78>
        buff->r -= buff->size;
 8100c2e:	687b      	ldr	r3, [r7, #4]
 8100c30:	689b      	ldr	r3, [r3, #8]
 8100c32:	687a      	ldr	r2, [r7, #4]
 8100c34:	68d2      	ldr	r2, [r2, #12]
 8100c36:	1ad2      	subs	r2, r2, r3
 8100c38:	687b      	ldr	r3, [r7, #4]
 8100c3a:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8100c3c:	687b      	ldr	r3, [r7, #4]
 8100c3e:	695b      	ldr	r3, [r3, #20]
 8100c40:	2b00      	cmp	r3, #0
 8100c42:	d005      	beq.n	8100c50 <RingBuffSkip+0x8c>
 8100c44:	687b      	ldr	r3, [r7, #4]
 8100c46:	695b      	ldr	r3, [r3, #20]
 8100c48:	683a      	ldr	r2, [r7, #0]
 8100c4a:	2100      	movs	r1, #0
 8100c4c:	6878      	ldr	r0, [r7, #4]
 8100c4e:	4798      	blx	r3
    return len;
 8100c50:	683b      	ldr	r3, [r7, #0]
}
 8100c52:	4618      	mov	r0, r3
 8100c54:	3710      	adds	r7, #16
 8100c56:	46bd      	mov	sp, r7
 8100c58:	bd80      	pop	{r7, pc}
 8100c5a:	bf00      	nop
 8100c5c:	deadbeef 	.word	0xdeadbeef
 8100c60:	21524110 	.word	0x21524110

08100c64 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8100c64:	b480      	push	{r7}
 8100c66:	b085      	sub	sp, #20
 8100c68:	af00      	add	r7, sp, #0
 8100c6a:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8100c6c:	2300      	movs	r3, #0
 8100c6e:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 8100c70:	687b      	ldr	r3, [r7, #4]
 8100c72:	2b01      	cmp	r3, #1
 8100c74:	d103      	bne.n	8100c7e <SyncMailBoxGet+0x1a>
 8100c76:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8100c7a:	60fb      	str	r3, [r7, #12]
 8100c7c:	e001      	b.n	8100c82 <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 8100c7e:	4b04      	ldr	r3, [pc, #16]	@ (8100c90 <SyncMailBoxGet+0x2c>)
 8100c80:	60fb      	str	r3, [r7, #12]
    return pMB;
 8100c82:	68fb      	ldr	r3, [r7, #12]
}
 8100c84:	4618      	mov	r0, r3
 8100c86:	3714      	adds	r7, #20
 8100c88:	46bd      	mov	sp, r7
 8100c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c8e:	4770      	bx	lr
 8100c90:	38000004 	.word	0x38000004

08100c94 <SyncMailBoxWrite>:

int8_t SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8100c94:	b580      	push	{r7, lr}
 8100c96:	b086      	sub	sp, #24
 8100c98:	af00      	add	r7, sp, #0
 8100c9a:	60f8      	str	r0, [r7, #12]
 8100c9c:	60b9      	str	r1, [r7, #8]
 8100c9e:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8100ca0:	687b      	ldr	r3, [r7, #4]
 8100ca2:	2b04      	cmp	r3, #4
 8100ca4:	d902      	bls.n	8100cac <SyncMailBoxWrite+0x18>
 8100ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8100caa:	e009      	b.n	8100cc0 <SyncMailBoxWrite+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8100cac:	68f8      	ldr	r0, [r7, #12]
 8100cae:	f7ff ffd9 	bl	8100c64 <SyncMailBoxGet>
 8100cb2:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 8100cb4:	687a      	ldr	r2, [r7, #4]
 8100cb6:	68b9      	ldr	r1, [r7, #8]
 8100cb8:	6978      	ldr	r0, [r7, #20]
 8100cba:	f009 f8ba 	bl	8109e32 <memcpy>
    return 0;
 8100cbe:	2300      	movs	r3, #0
}
 8100cc0:	4618      	mov	r0, r3
 8100cc2:	3718      	adds	r7, #24
 8100cc4:	46bd      	mov	sp, r7
 8100cc6:	bd80      	pop	{r7, pc}

08100cc8 <SyncMailBoxWriteNotify>:

int8_t SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8100cc8:	b580      	push	{r7, lr}
 8100cca:	b086      	sub	sp, #24
 8100ccc:	af00      	add	r7, sp, #0
 8100cce:	60f8      	str	r0, [r7, #12]
 8100cd0:	60b9      	str	r1, [r7, #8]
 8100cd2:	607a      	str	r2, [r7, #4]
    int8_t status = SyncMailBoxWrite(mbID, pBuffer, len);
 8100cd4:	687a      	ldr	r2, [r7, #4]
 8100cd6:	68b9      	ldr	r1, [r7, #8]
 8100cd8:	68f8      	ldr	r0, [r7, #12]
 8100cda:	f7ff ffdb 	bl	8100c94 <SyncMailBoxWrite>
 8100cde:	4603      	mov	r3, r0
 8100ce0:	75fb      	strb	r3, [r7, #23]
    if(status < 0) return status;
 8100ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8100ce6:	2b00      	cmp	r3, #0
 8100ce8:	da02      	bge.n	8100cf0 <SyncMailBoxWriteNotify+0x28>
 8100cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8100cee:	e003      	b.n	8100cf8 <SyncMailBoxWriteNotify+0x30>
    asm volatile ("dsb");
 8100cf0:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 8100cf4:	bf40      	sev
    return 0;
 8100cf6:	2300      	movs	r3, #0
}
 8100cf8:	4618      	mov	r0, r3
 8100cfa:	3718      	adds	r7, #24
 8100cfc:	46bd      	mov	sp, r7
 8100cfe:	bd80      	pop	{r7, pc}

08100d00 <SyncMailBoxRead>:

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8100d00:	b580      	push	{r7, lr}
 8100d02:	b086      	sub	sp, #24
 8100d04:	af00      	add	r7, sp, #0
 8100d06:	60f8      	str	r0, [r7, #12]
 8100d08:	60b9      	str	r1, [r7, #8]
 8100d0a:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 8100d0c:	687b      	ldr	r3, [r7, #4]
 8100d0e:	2b04      	cmp	r3, #4
 8100d10:	d902      	bls.n	8100d18 <SyncMailBoxRead+0x18>
 8100d12:	f04f 33ff 	mov.w	r3, #4294967295
 8100d16:	e009      	b.n	8100d2c <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8100d18:	68f8      	ldr	r0, [r7, #12]
 8100d1a:	f7ff ffa3 	bl	8100c64 <SyncMailBoxGet>
 8100d1e:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 8100d20:	687a      	ldr	r2, [r7, #4]
 8100d22:	6979      	ldr	r1, [r7, #20]
 8100d24:	68b8      	ldr	r0, [r7, #8]
 8100d26:	f009 f884 	bl	8109e32 <memcpy>
    return 0;
 8100d2a:	2300      	movs	r3, #0
}
 8100d2c:	4618      	mov	r0, r3
 8100d2e:	3718      	adds	r7, #24
 8100d30:	46bd      	mov	sp, r7
 8100d32:	bd80      	pop	{r7, pc}

08100d34 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8100d34:	b480      	push	{r7}
 8100d36:	b083      	sub	sp, #12
 8100d38:	af00      	add	r7, sp, #0
 8100d3a:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8100d3c:	687b      	ldr	r3, [r7, #4]
 8100d3e:	2b02      	cmp	r3, #2
 8100d40:	d901      	bls.n	8100d46 <SyncGetTaskHandler+0x12>
 8100d42:	2300      	movs	r3, #0
 8100d44:	e003      	b.n	8100d4e <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8100d46:	4a05      	ldr	r2, [pc, #20]	@ (8100d5c <SyncGetTaskHandler+0x28>)
 8100d48:	687b      	ldr	r3, [r7, #4]
 8100d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8100d4e:	4618      	mov	r0, r3
 8100d50:	370c      	adds	r7, #12
 8100d52:	46bd      	mov	sp, r7
 8100d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d58:	4770      	bx	lr
 8100d5a:	bf00      	nop
 8100d5c:	10000094 	.word	0x10000094

08100d60 <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8100d60:	b580      	push	{r7, lr}
 8100d62:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8100d64:	2208      	movs	r2, #8
 8100d66:	2100      	movs	r1, #0
 8100d68:	4802      	ldr	r0, [pc, #8]	@ (8100d74 <SyncInit+0x14>)
 8100d6a:	f008 ffe7 	bl	8109d3c <memset>
    return 0;
 8100d6e:	2300      	movs	r3, #0
}
 8100d70:	4618      	mov	r0, r3
 8100d72:	bd80      	pop	{r7, pc}
 8100d74:	10000094 	.word	0x10000094

08100d78 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8100d78:	b480      	push	{r7}
 8100d7a:	b083      	sub	sp, #12
 8100d7c:	af00      	add	r7, sp, #0
 8100d7e:	6078      	str	r0, [r7, #4]
 8100d80:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8100d82:	683b      	ldr	r3, [r7, #0]
 8100d84:	2b02      	cmp	r3, #2
 8100d86:	d902      	bls.n	8100d8e <SyncRegisterHandler+0x16>
 8100d88:	f04f 33ff 	mov.w	r3, #4294967295
 8100d8c:	e005      	b.n	8100d9a <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 8100d8e:	4906      	ldr	r1, [pc, #24]	@ (8100da8 <SyncRegisterHandler+0x30>)
 8100d90:	683b      	ldr	r3, [r7, #0]
 8100d92:	687a      	ldr	r2, [r7, #4]
 8100d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 8100d98:	2300      	movs	r3, #0
}
 8100d9a:	4618      	mov	r0, r3
 8100d9c:	370c      	adds	r7, #12
 8100d9e:	46bd      	mov	sp, r7
 8100da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100da4:	4770      	bx	lr
 8100da6:	bf00      	nop
 8100da8:	10000094 	.word	0x10000094

08100dac <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 8100dac:	b580      	push	{r7, lr}
 8100dae:	b082      	sub	sp, #8
 8100db0:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8100db2:	2300      	movs	r3, #0
 8100db4:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8100db6:	463b      	mov	r3, r7
 8100db8:	2204      	movs	r2, #4
 8100dba:	4619      	mov	r1, r3
 8100dbc:	2000      	movs	r0, #0
 8100dbe:	f7ff ff9f 	bl	8100d00 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8100dc2:	683b      	ldr	r3, [r7, #0]
 8100dc4:	4618      	mov	r0, r3
 8100dc6:	f7ff ffb5 	bl	8100d34 <SyncGetTaskHandler>
 8100dca:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8100dcc:	687b      	ldr	r3, [r7, #4]
 8100dce:	2b00      	cmp	r3, #0
 8100dd0:	d001      	beq.n	8100dd6 <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 8100dd2:	687b      	ldr	r3, [r7, #4]
 8100dd4:	4798      	blx	r3
    }
}
 8100dd6:	bf00      	nop
 8100dd8:	3708      	adds	r7, #8
 8100dda:	46bd      	mov	sp, r7
 8100ddc:	bd80      	pop	{r7, pc}

08100dde <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 8100dde:	b580      	push	{r7, lr}
 8100de0:	b082      	sub	sp, #8
 8100de2:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 8100de4:	2300      	movs	r3, #0
 8100de6:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8100de8:	463b      	mov	r3, r7
 8100dea:	2204      	movs	r2, #4
 8100dec:	4619      	mov	r1, r3
 8100dee:	2001      	movs	r0, #1
 8100df0:	f7ff ff86 	bl	8100d00 <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8100df4:	683b      	ldr	r3, [r7, #0]
 8100df6:	4618      	mov	r0, r3
 8100df8:	f7ff ff9c 	bl	8100d34 <SyncGetTaskHandler>
 8100dfc:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8100dfe:	687b      	ldr	r3, [r7, #4]
 8100e00:	2b00      	cmp	r3, #0
 8100e02:	d001      	beq.n	8100e08 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 8100e04:	687b      	ldr	r3, [r7, #4]
 8100e06:	4798      	blx	r3
    }
 8100e08:	bf00      	nop
 8100e0a:	3708      	adds	r7, #8
 8100e0c:	46bd      	mov	sp, r7
 8100e0e:	bd80      	pop	{r7, pc}

08100e10 <HAL_GPIO_EXTI_Callback>:
IMU gIMU;
TaskHandle_t pPIDTaskHandler;
TaskHandle_t pPWMTaskHandler;

void HAL_GPIO_EXTI_Callback(uint16_t gpioPin)
{
 8100e10:	b580      	push	{r7, lr}
 8100e12:	b082      	sub	sp, #8
 8100e14:	af00      	add	r7, sp, #0
 8100e16:	4603      	mov	r3, r0
 8100e18:	80fb      	strh	r3, [r7, #6]
	if(gpioPin == IMU_INT_Pin) {
 8100e1a:	88fb      	ldrh	r3, [r7, #6]
 8100e1c:	2b80      	cmp	r3, #128	@ 0x80
 8100e1e:	d102      	bne.n	8100e26 <HAL_GPIO_EXTI_Callback+0x16>
    IMU2CPUInterruptHandler(&gIMU);
 8100e20:	4803      	ldr	r0, [pc, #12]	@ (8100e30 <HAL_GPIO_EXTI_Callback+0x20>)
 8100e22:	f7ff fb2b 	bl	810047c <IMU2CPUInterruptHandler>
	}
}
 8100e26:	bf00      	nop
 8100e28:	3708      	adds	r7, #8
 8100e2a:	46bd      	mov	sp, r7
 8100e2c:	bd80      	pop	{r7, pc}
 8100e2e:	bf00      	nop
 8100e30:	10000920 	.word	0x10000920

08100e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100e34:	b580      	push	{r7, lr}
 8100e36:	b086      	sub	sp, #24
 8100e38:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100e3a:	4b37      	ldr	r3, [pc, #220]	@ (8100f18 <main+0xe4>)
 8100e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e40:	4a35      	ldr	r2, [pc, #212]	@ (8100f18 <main+0xe4>)
 8100e42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100e46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e4a:	4b33      	ldr	r3, [pc, #204]	@ (8100f18 <main+0xe4>)
 8100e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100e54:	607b      	str	r3, [r7, #4]
 8100e56:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e58:	2001      	movs	r0, #1
 8100e5a:	f002 f93b 	bl	81030d4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100e5e:	f002 faf5 	bl	810344c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100e62:	2201      	movs	r2, #1
 8100e64:	2102      	movs	r1, #2
 8100e66:	2000      	movs	r0, #0
 8100e68:	f002 fa76 	bl	8103358 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8100f1c <main+0xe8>)
 8100e6e:	681b      	ldr	r3, [r3, #0]
 8100e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100e74:	2b70      	cmp	r3, #112	@ 0x70
 8100e76:	d108      	bne.n	8100e8a <main+0x56>
 8100e78:	4b29      	ldr	r3, [pc, #164]	@ (8100f20 <main+0xec>)
 8100e7a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100e7e:	4a28      	ldr	r2, [pc, #160]	@ (8100f20 <main+0xec>)
 8100e80:	f043 0301 	orr.w	r3, r3, #1
 8100e84:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100e88:	e007      	b.n	8100e9a <main+0x66>
 8100e8a:	4b25      	ldr	r3, [pc, #148]	@ (8100f20 <main+0xec>)
 8100e8c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100e90:	4a23      	ldr	r2, [pc, #140]	@ (8100f20 <main+0xec>)
 8100e92:	f043 0301 	orr.w	r3, r3, #1
 8100e96:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100e9a:	f001 fc3d 	bl	8102718 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100e9e:	f000 fb67 	bl	8101570 <MX_GPIO_Init>
  MX_HDMI_CEC_Init();
 8100ea2:	f000 f84f 	bl	8100f44 <MX_HDMI_CEC_Init>
  MX_RTC_Init();
 8100ea6:	f000 f881 	bl	8100fac <MX_RTC_Init>
  MX_SAI1_Init();
 8100eaa:	f000 f8cd 	bl	8101048 <MX_SAI1_Init>
  MX_SPDIFRX1_Init();
 8100eae:	f000 f96d 	bl	810118c <MX_SPDIFRX1_Init>
  MX_SPI2_Init();
 8100eb2:	f000 f9a3 	bl	81011fc <MX_SPI2_Init>
  MX_SPI5_Init();
 8100eb6:	f000 f9f7 	bl	81012a8 <MX_SPI5_Init>
  MX_TIM8_Init();
 8100eba:	f000 fa49 	bl	8101350 <MX_TIM8_Init>
  MX_TIM13_Init();
 8100ebe:	f000 fad7 	bl	8101470 <MX_TIM13_Init>
  MX_USB_OTG_HS_PCD_Init();
 8100ec2:	f000 fb23 	bl	810150c <MX_USB_OTG_HS_PCD_Init>
//     (void*) NULL,                     /* Pointer to tasks arguments (parameter) */
//     tskIDLE_PRIORITY + 2UL,           /* Task priority*/
//     NULL                              /* Task handle */
// );

  LoggerInit(NULL);
 8100ec6:	2000      	movs	r0, #0
 8100ec8:	f7ff fc2c 	bl	8100724 <LoggerInit>
  SyncInit();
 8100ecc:	f7ff ff48 	bl	8100d60 <SyncInit>
  IMUInit(
 8100ed0:	4b14      	ldr	r3, [pc, #80]	@ (8100f24 <main+0xf0>)
 8100ed2:	681a      	ldr	r2, [r3, #0]
 8100ed4:	2308      	movs	r3, #8
 8100ed6:	9302      	str	r3, [sp, #8]
 8100ed8:	2303      	movs	r3, #3
 8100eda:	9301      	str	r3, [sp, #4]
 8100edc:	2308      	movs	r3, #8
 8100ede:	9300      	str	r3, [sp, #0]
 8100ee0:	2301      	movs	r3, #1
 8100ee2:	4911      	ldr	r1, [pc, #68]	@ (8100f28 <main+0xf4>)
 8100ee4:	4811      	ldr	r0, [pc, #68]	@ (8100f2c <main+0xf8>)
 8100ee6:	f7ff fb17 	bl	8100518 <IMUInit>

  while (1)
  {
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	  HAL_Delay(1000);
 8100eea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100eee:	f001 fc91 	bl	8102814 <HAL_Delay>
	  LOG_INFO("Hello from CM4");
 8100ef2:	480f      	ldr	r0, [pc, #60]	@ (8100f30 <main+0xfc>)
 8100ef4:	f008 fdda 	bl	8109aac <iprintf>
 8100ef8:	480e      	ldr	r0, [pc, #56]	@ (8100f34 <main+0x100>)
 8100efa:	f008 fdd7 	bl	8109aac <iprintf>
 8100efe:	21bf      	movs	r1, #191	@ 0xbf
 8100f00:	480d      	ldr	r0, [pc, #52]	@ (8100f38 <main+0x104>)
 8100f02:	f008 fdd3 	bl	8109aac <iprintf>
 8100f06:	480d      	ldr	r0, [pc, #52]	@ (8100f3c <main+0x108>)
 8100f08:	f008 fdd0 	bl	8109aac <iprintf>
 8100f0c:	480c      	ldr	r0, [pc, #48]	@ (8100f40 <main+0x10c>)
 8100f0e:	f008 fe35 	bl	8109b7c <puts>
	  HAL_Delay(1000);
 8100f12:	bf00      	nop
 8100f14:	e7e9      	b.n	8100eea <main+0xb6>
 8100f16:	bf00      	nop
 8100f18:	58024400 	.word	0x58024400
 8100f1c:	e000ed00 	.word	0xe000ed00
 8100f20:	58026400 	.word	0x58026400
 8100f24:	10000944 	.word	0x10000944
 8100f28:	10000284 	.word	0x10000284
 8100f2c:	10000920 	.word	0x10000920
 8100f30:	0810a920 	.word	0x0810a920
 8100f34:	0810a92c 	.word	0x0810a92c
 8100f38:	0810a940 	.word	0x0810a940
 8100f3c:	0810a944 	.word	0x0810a944
 8100f40:	0810a954 	.word	0x0810a954

08100f44 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100f44:	b580      	push	{r7, lr}
 8100f46:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100f48:	4b15      	ldr	r3, [pc, #84]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f4a:	4a16      	ldr	r2, [pc, #88]	@ (8100fa4 <MX_HDMI_CEC_Init+0x60>)
 8100f4c:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100f4e:	4b14      	ldr	r3, [pc, #80]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f50:	2200      	movs	r2, #0
 8100f52:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100f54:	4b12      	ldr	r3, [pc, #72]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f56:	2200      	movs	r2, #0
 8100f58:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100f5a:	4b11      	ldr	r3, [pc, #68]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f5c:	2210      	movs	r2, #16
 8100f5e:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100f60:	4b0f      	ldr	r3, [pc, #60]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f62:	2200      	movs	r2, #0
 8100f64:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100f66:	4b0e      	ldr	r3, [pc, #56]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f68:	2200      	movs	r2, #0
 8100f6a:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f6e:	2200      	movs	r2, #0
 8100f70:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100f72:	4b0b      	ldr	r3, [pc, #44]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f74:	2200      	movs	r2, #0
 8100f76:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100f78:	4b09      	ldr	r3, [pc, #36]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8100f7e:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100f80:	4b07      	ldr	r3, [pc, #28]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f82:	2200      	movs	r2, #0
 8100f84:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100f86:	4b06      	ldr	r3, [pc, #24]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f88:	4a07      	ldr	r2, [pc, #28]	@ (8100fa8 <MX_HDMI_CEC_Init+0x64>)
 8100f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100f8c:	4804      	ldr	r0, [pc, #16]	@ (8100fa0 <MX_HDMI_CEC_Init+0x5c>)
 8100f8e:	f001 fc87 	bl	81028a0 <HAL_CEC_Init>
 8100f92:	4603      	mov	r3, r0
 8100f94:	2b00      	cmp	r3, #0
 8100f96:	d001      	beq.n	8100f9c <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100f98:	f000 fd46 	bl	8101a28 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100f9c:	bf00      	nop
 8100f9e:	bd80      	pop	{r7, pc}
 8100fa0:	1000009c 	.word	0x1000009c
 8100fa4:	40006c00 	.word	0x40006c00
 8100fa8:	10000910 	.word	0x10000910

08100fac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100fac:	b580      	push	{r7, lr}
 8100fae:	b08a      	sub	sp, #40	@ 0x28
 8100fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100fb2:	463b      	mov	r3, r7
 8100fb4:	2228      	movs	r2, #40	@ 0x28
 8100fb6:	2100      	movs	r1, #0
 8100fb8:	4618      	mov	r0, r3
 8100fba:	f008 febf 	bl	8109d3c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100fbe:	4b20      	ldr	r3, [pc, #128]	@ (8101040 <MX_RTC_Init+0x94>)
 8100fc0:	4a20      	ldr	r2, [pc, #128]	@ (8101044 <MX_RTC_Init+0x98>)
 8100fc2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8101040 <MX_RTC_Init+0x94>)
 8100fc6:	2200      	movs	r2, #0
 8100fc8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100fca:	4b1d      	ldr	r3, [pc, #116]	@ (8101040 <MX_RTC_Init+0x94>)
 8100fcc:	227f      	movs	r2, #127	@ 0x7f
 8100fce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8101040 <MX_RTC_Init+0x94>)
 8100fd2:	22ff      	movs	r2, #255	@ 0xff
 8100fd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8101040 <MX_RTC_Init+0x94>)
 8100fd8:	2200      	movs	r2, #0
 8100fda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100fdc:	4b18      	ldr	r3, [pc, #96]	@ (8101040 <MX_RTC_Init+0x94>)
 8100fde:	2200      	movs	r2, #0
 8100fe0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100fe2:	4b17      	ldr	r3, [pc, #92]	@ (8101040 <MX_RTC_Init+0x94>)
 8100fe4:	2200      	movs	r2, #0
 8100fe6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100fe8:	4b15      	ldr	r3, [pc, #84]	@ (8101040 <MX_RTC_Init+0x94>)
 8100fea:	2200      	movs	r2, #0
 8100fec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100fee:	4814      	ldr	r0, [pc, #80]	@ (8101040 <MX_RTC_Init+0x94>)
 8100ff0:	f005 f98c 	bl	810630c <HAL_RTC_Init>
 8100ff4:	4603      	mov	r3, r0
 8100ff6:	2b00      	cmp	r3, #0
 8100ff8:	d001      	beq.n	8100ffe <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100ffa:	f000 fd15 	bl	8101a28 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100ffe:	2301      	movs	r3, #1
 8101000:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8101002:	2301      	movs	r3, #1
 8101004:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8101006:	2300      	movs	r3, #0
 8101008:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 810100a:	2300      	movs	r3, #0
 810100c:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 810100e:	2300      	movs	r3, #0
 8101010:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8101012:	2300      	movs	r3, #0
 8101014:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8101016:	2300      	movs	r3, #0
 8101018:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 810101a:	2300      	movs	r3, #0
 810101c:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 810101e:	2380      	movs	r3, #128	@ 0x80
 8101020:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8101022:	463b      	mov	r3, r7
 8101024:	4619      	mov	r1, r3
 8101026:	4806      	ldr	r0, [pc, #24]	@ (8101040 <MX_RTC_Init+0x94>)
 8101028:	f005 fa88 	bl	810653c <HAL_RTCEx_SetTamper>
 810102c:	4603      	mov	r3, r0
 810102e:	2b00      	cmp	r3, #0
 8101030:	d001      	beq.n	8101036 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8101032:	f000 fcf9 	bl	8101a28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8101036:	bf00      	nop
 8101038:	3728      	adds	r7, #40	@ 0x28
 810103a:	46bd      	mov	sp, r7
 810103c:	bd80      	pop	{r7, pc}
 810103e:	bf00      	nop
 8101040:	100000e0 	.word	0x100000e0
 8101044:	58004000 	.word	0x58004000

08101048 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8101048:	b580      	push	{r7, lr}
 810104a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 810104c:	4b4a      	ldr	r3, [pc, #296]	@ (8101178 <MX_SAI1_Init+0x130>)
 810104e:	4a4b      	ldr	r2, [pc, #300]	@ (810117c <MX_SAI1_Init+0x134>)
 8101050:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8101052:	4b49      	ldr	r3, [pc, #292]	@ (8101178 <MX_SAI1_Init+0x130>)
 8101054:	2200      	movs	r2, #0
 8101056:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8101058:	4b47      	ldr	r3, [pc, #284]	@ (8101178 <MX_SAI1_Init+0x130>)
 810105a:	2200      	movs	r2, #0
 810105c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 810105e:	4b46      	ldr	r3, [pc, #280]	@ (8101178 <MX_SAI1_Init+0x130>)
 8101060:	2240      	movs	r2, #64	@ 0x40
 8101062:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8101064:	4b44      	ldr	r3, [pc, #272]	@ (8101178 <MX_SAI1_Init+0x130>)
 8101066:	2200      	movs	r2, #0
 8101068:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 810106a:	4b43      	ldr	r3, [pc, #268]	@ (8101178 <MX_SAI1_Init+0x130>)
 810106c:	2200      	movs	r2, #0
 810106e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8101070:	4b41      	ldr	r3, [pc, #260]	@ (8101178 <MX_SAI1_Init+0x130>)
 8101072:	2200      	movs	r2, #0
 8101074:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8101076:	4b40      	ldr	r3, [pc, #256]	@ (8101178 <MX_SAI1_Init+0x130>)
 8101078:	2200      	movs	r2, #0
 810107a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 810107c:	4b3e      	ldr	r3, [pc, #248]	@ (8101178 <MX_SAI1_Init+0x130>)
 810107e:	2200      	movs	r2, #0
 8101080:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8101082:	4b3d      	ldr	r3, [pc, #244]	@ (8101178 <MX_SAI1_Init+0x130>)
 8101084:	2200      	movs	r2, #0
 8101086:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8101088:	4b3b      	ldr	r3, [pc, #236]	@ (8101178 <MX_SAI1_Init+0x130>)
 810108a:	2200      	movs	r2, #0
 810108c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 810108e:	4b3a      	ldr	r3, [pc, #232]	@ (8101178 <MX_SAI1_Init+0x130>)
 8101090:	4a3b      	ldr	r2, [pc, #236]	@ (8101180 <MX_SAI1_Init+0x138>)
 8101092:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8101094:	4b38      	ldr	r3, [pc, #224]	@ (8101178 <MX_SAI1_Init+0x130>)
 8101096:	2200      	movs	r2, #0
 8101098:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 810109a:	4b37      	ldr	r3, [pc, #220]	@ (8101178 <MX_SAI1_Init+0x130>)
 810109c:	2200      	movs	r2, #0
 810109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 81010a0:	4b35      	ldr	r3, [pc, #212]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010a2:	2200      	movs	r2, #0
 81010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 81010a6:	4b34      	ldr	r3, [pc, #208]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010a8:	2200      	movs	r2, #0
 81010aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 81010ac:	4b32      	ldr	r3, [pc, #200]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010ae:	2200      	movs	r2, #0
 81010b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 81010b4:	4b30      	ldr	r3, [pc, #192]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010b6:	2201      	movs	r2, #1
 81010b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 81010ba:	4b2f      	ldr	r3, [pc, #188]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81010c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 81010c2:	4b2d      	ldr	r3, [pc, #180]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010c4:	2208      	movs	r2, #8
 81010c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 81010c8:	4b2b      	ldr	r3, [pc, #172]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010ca:	2201      	movs	r2, #1
 81010cc:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 81010ce:	4b2a      	ldr	r3, [pc, #168]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010d0:	2200      	movs	r2, #0
 81010d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 81010d4:	4b28      	ldr	r3, [pc, #160]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010d6:	2200      	movs	r2, #0
 81010d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 81010da:	4b27      	ldr	r3, [pc, #156]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010dc:	2200      	movs	r2, #0
 81010de:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 81010e0:	4b25      	ldr	r3, [pc, #148]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010e2:	2200      	movs	r2, #0
 81010e4:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 81010e6:	4b24      	ldr	r3, [pc, #144]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010e8:	2200      	movs	r2, #0
 81010ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 81010ec:	4b22      	ldr	r3, [pc, #136]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010ee:	2201      	movs	r2, #1
 81010f0:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 81010f2:	4b21      	ldr	r3, [pc, #132]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010f4:	2200      	movs	r2, #0
 81010f6:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 81010f8:	481f      	ldr	r0, [pc, #124]	@ (8101178 <MX_SAI1_Init+0x130>)
 81010fa:	f005 faff 	bl	81066fc <HAL_SAI_Init>
 81010fe:	4603      	mov	r3, r0
 8101100:	2b00      	cmp	r3, #0
 8101102:	d001      	beq.n	8101108 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8101104:	f000 fc90 	bl	8101a28 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8101108:	4b1e      	ldr	r3, [pc, #120]	@ (8101184 <MX_SAI1_Init+0x13c>)
 810110a:	4a1f      	ldr	r2, [pc, #124]	@ (8101188 <MX_SAI1_Init+0x140>)
 810110c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 810110e:	4b1d      	ldr	r3, [pc, #116]	@ (8101184 <MX_SAI1_Init+0x13c>)
 8101110:	2204      	movs	r2, #4
 8101112:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8101114:	4b1b      	ldr	r3, [pc, #108]	@ (8101184 <MX_SAI1_Init+0x13c>)
 8101116:	2200      	movs	r2, #0
 8101118:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 810111a:	4b1a      	ldr	r3, [pc, #104]	@ (8101184 <MX_SAI1_Init+0x13c>)
 810111c:	2200      	movs	r2, #0
 810111e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8101120:	4b18      	ldr	r3, [pc, #96]	@ (8101184 <MX_SAI1_Init+0x13c>)
 8101122:	2200      	movs	r2, #0
 8101124:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8101126:	4b17      	ldr	r3, [pc, #92]	@ (8101184 <MX_SAI1_Init+0x13c>)
 8101128:	2200      	movs	r2, #0
 810112a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 810112c:	4b15      	ldr	r3, [pc, #84]	@ (8101184 <MX_SAI1_Init+0x13c>)
 810112e:	2200      	movs	r2, #0
 8101130:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8101132:	4b14      	ldr	r3, [pc, #80]	@ (8101184 <MX_SAI1_Init+0x13c>)
 8101134:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8101138:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 810113a:	4b12      	ldr	r3, [pc, #72]	@ (8101184 <MX_SAI1_Init+0x13c>)
 810113c:	2200      	movs	r2, #0
 810113e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8101140:	4b10      	ldr	r3, [pc, #64]	@ (8101184 <MX_SAI1_Init+0x13c>)
 8101142:	2200      	movs	r2, #0
 8101144:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8101146:	4b0f      	ldr	r3, [pc, #60]	@ (8101184 <MX_SAI1_Init+0x13c>)
 8101148:	2200      	movs	r2, #0
 810114a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 810114c:	4b0d      	ldr	r3, [pc, #52]	@ (8101184 <MX_SAI1_Init+0x13c>)
 810114e:	2200      	movs	r2, #0
 8101150:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8101154:	4b0b      	ldr	r3, [pc, #44]	@ (8101184 <MX_SAI1_Init+0x13c>)
 8101156:	2201      	movs	r2, #1
 8101158:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 810115a:	4b0a      	ldr	r3, [pc, #40]	@ (8101184 <MX_SAI1_Init+0x13c>)
 810115c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101160:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8101162:	4808      	ldr	r0, [pc, #32]	@ (8101184 <MX_SAI1_Init+0x13c>)
 8101164:	f005 faca 	bl	81066fc <HAL_SAI_Init>
 8101168:	4603      	mov	r3, r0
 810116a:	2b00      	cmp	r3, #0
 810116c:	d001      	beq.n	8101172 <MX_SAI1_Init+0x12a>
  {
    Error_Handler();
 810116e:	f000 fc5b 	bl	8101a28 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8101172:	bf00      	nop
 8101174:	bd80      	pop	{r7, pc}
 8101176:	bf00      	nop
 8101178:	10000104 	.word	0x10000104
 810117c:	40015804 	.word	0x40015804
 8101180:	0002ee00 	.word	0x0002ee00
 8101184:	1000019c 	.word	0x1000019c
 8101188:	40015824 	.word	0x40015824

0810118c <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 810118c:	b580      	push	{r7, lr}
 810118e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8101190:	4b19      	ldr	r3, [pc, #100]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 8101192:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8101196:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8101198:	4b17      	ldr	r3, [pc, #92]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 810119a:	2200      	movs	r2, #0
 810119c:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 810119e:	4b16      	ldr	r3, [pc, #88]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011a0:	2200      	movs	r2, #0
 81011a2:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 81011a4:	4b14      	ldr	r3, [pc, #80]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011a6:	2200      	movs	r2, #0
 81011a8:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 81011aa:	4b13      	ldr	r3, [pc, #76]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011ac:	2200      	movs	r2, #0
 81011ae:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 81011b0:	4b11      	ldr	r3, [pc, #68]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011b2:	2200      	movs	r2, #0
 81011b4:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 81011b6:	4b10      	ldr	r3, [pc, #64]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011b8:	2200      	movs	r2, #0
 81011ba:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 81011bc:	4b0e      	ldr	r3, [pc, #56]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011be:	2200      	movs	r2, #0
 81011c0:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 81011c2:	4b0d      	ldr	r3, [pc, #52]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011c4:	2200      	movs	r2, #0
 81011c6:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 81011c8:	4b0b      	ldr	r3, [pc, #44]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011ca:	2200      	movs	r2, #0
 81011cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 81011ce:	4b0a      	ldr	r3, [pc, #40]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011d0:	2200      	movs	r2, #0
 81011d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 81011d4:	4b08      	ldr	r3, [pc, #32]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011d6:	2200      	movs	r2, #0
 81011d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 81011dc:	4b06      	ldr	r3, [pc, #24]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011de:	2200      	movs	r2, #0
 81011e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 81011e4:	4804      	ldr	r0, [pc, #16]	@ (81011f8 <MX_SPDIFRX1_Init+0x6c>)
 81011e6:	f005 fd6d 	bl	8106cc4 <HAL_SPDIFRX_Init>
 81011ea:	4603      	mov	r3, r0
 81011ec:	2b00      	cmp	r3, #0
 81011ee:	d001      	beq.n	81011f4 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 81011f0:	f000 fc1a 	bl	8101a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 81011f4:	bf00      	nop
 81011f6:	bd80      	pop	{r7, pc}
 81011f8:	10000234 	.word	0x10000234

081011fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 81011fc:	b580      	push	{r7, lr}
 81011fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8101200:	4b27      	ldr	r3, [pc, #156]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101202:	4a28      	ldr	r2, [pc, #160]	@ (81012a4 <MX_SPI2_Init+0xa8>)
 8101204:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8101206:	4b26      	ldr	r3, [pc, #152]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101208:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810120c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 810120e:	4b24      	ldr	r3, [pc, #144]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101210:	2200      	movs	r2, #0
 8101212:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8101214:	4b22      	ldr	r3, [pc, #136]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101216:	2207      	movs	r2, #7
 8101218:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 810121a:	4b21      	ldr	r3, [pc, #132]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 810121c:	2200      	movs	r2, #0
 810121e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101220:	4b1f      	ldr	r3, [pc, #124]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101222:	2200      	movs	r2, #0
 8101224:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8101226:	4b1e      	ldr	r3, [pc, #120]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101228:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 810122c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 810122e:	4b1c      	ldr	r3, [pc, #112]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101230:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8101234:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101236:	4b1a      	ldr	r3, [pc, #104]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101238:	2200      	movs	r2, #0
 810123a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 810123c:	4b18      	ldr	r3, [pc, #96]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 810123e:	2200      	movs	r2, #0
 8101240:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101242:	4b17      	ldr	r3, [pc, #92]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101244:	2200      	movs	r2, #0
 8101246:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8101248:	4b15      	ldr	r3, [pc, #84]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 810124a:	2200      	movs	r2, #0
 810124c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810124e:	4b14      	ldr	r3, [pc, #80]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101250:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8101254:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101256:	4b12      	ldr	r3, [pc, #72]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101258:	2200      	movs	r2, #0
 810125a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810125c:	4b10      	ldr	r3, [pc, #64]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 810125e:	2200      	movs	r2, #0
 8101260:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101262:	4b0f      	ldr	r3, [pc, #60]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101264:	2200      	movs	r2, #0
 8101266:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101268:	4b0d      	ldr	r3, [pc, #52]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 810126a:	2200      	movs	r2, #0
 810126c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810126e:	4b0c      	ldr	r3, [pc, #48]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101270:	2200      	movs	r2, #0
 8101272:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101274:	4b0a      	ldr	r3, [pc, #40]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101276:	2200      	movs	r2, #0
 8101278:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810127a:	4b09      	ldr	r3, [pc, #36]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 810127c:	2200      	movs	r2, #0
 810127e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101280:	4b07      	ldr	r3, [pc, #28]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101282:	2200      	movs	r2, #0
 8101284:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101286:	4b06      	ldr	r3, [pc, #24]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 8101288:	2200      	movs	r2, #0
 810128a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 810128c:	4804      	ldr	r0, [pc, #16]	@ (81012a0 <MX_SPI2_Init+0xa4>)
 810128e:	f005 fd87 	bl	8106da0 <HAL_SPI_Init>
 8101292:	4603      	mov	r3, r0
 8101294:	2b00      	cmp	r3, #0
 8101296:	d001      	beq.n	810129c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8101298:	f000 fbc6 	bl	8101a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 810129c:	bf00      	nop
 810129e:	bd80      	pop	{r7, pc}
 81012a0:	10000284 	.word	0x10000284
 81012a4:	40003800 	.word	0x40003800

081012a8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 81012a8:	b580      	push	{r7, lr}
 81012aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 81012ac:	4b26      	ldr	r3, [pc, #152]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012ae:	4a27      	ldr	r2, [pc, #156]	@ (810134c <MX_SPI5_Init+0xa4>)
 81012b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 81012b2:	4b25      	ldr	r3, [pc, #148]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012b4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 81012b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 81012ba:	4b23      	ldr	r3, [pc, #140]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012bc:	2200      	movs	r2, #0
 81012be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 81012c0:	4b21      	ldr	r3, [pc, #132]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012c2:	2203      	movs	r2, #3
 81012c4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 81012c6:	4b20      	ldr	r3, [pc, #128]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012c8:	2200      	movs	r2, #0
 81012ca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 81012cc:	4b1e      	ldr	r3, [pc, #120]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012ce:	2200      	movs	r2, #0
 81012d0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 81012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012d4:	2200      	movs	r2, #0
 81012d6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 81012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012da:	2200      	movs	r2, #0
 81012dc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81012de:	4b1a      	ldr	r3, [pc, #104]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012e0:	2200      	movs	r2, #0
 81012e2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 81012e4:	4b18      	ldr	r3, [pc, #96]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012e6:	2200      	movs	r2, #0
 81012e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81012ea:	4b17      	ldr	r3, [pc, #92]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012ec:	2200      	movs	r2, #0
 81012ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 81012f0:	4b15      	ldr	r3, [pc, #84]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012f2:	2200      	movs	r2, #0
 81012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81012f6:	4b14      	ldr	r3, [pc, #80]	@ (8101348 <MX_SPI5_Init+0xa0>)
 81012f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81012fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81012fe:	4b12      	ldr	r3, [pc, #72]	@ (8101348 <MX_SPI5_Init+0xa0>)
 8101300:	2200      	movs	r2, #0
 8101302:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101304:	4b10      	ldr	r3, [pc, #64]	@ (8101348 <MX_SPI5_Init+0xa0>)
 8101306:	2200      	movs	r2, #0
 8101308:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810130a:	4b0f      	ldr	r3, [pc, #60]	@ (8101348 <MX_SPI5_Init+0xa0>)
 810130c:	2200      	movs	r2, #0
 810130e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101310:	4b0d      	ldr	r3, [pc, #52]	@ (8101348 <MX_SPI5_Init+0xa0>)
 8101312:	2200      	movs	r2, #0
 8101314:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101316:	4b0c      	ldr	r3, [pc, #48]	@ (8101348 <MX_SPI5_Init+0xa0>)
 8101318:	2200      	movs	r2, #0
 810131a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810131c:	4b0a      	ldr	r3, [pc, #40]	@ (8101348 <MX_SPI5_Init+0xa0>)
 810131e:	2200      	movs	r2, #0
 8101320:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101322:	4b09      	ldr	r3, [pc, #36]	@ (8101348 <MX_SPI5_Init+0xa0>)
 8101324:	2200      	movs	r2, #0
 8101326:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101328:	4b07      	ldr	r3, [pc, #28]	@ (8101348 <MX_SPI5_Init+0xa0>)
 810132a:	2200      	movs	r2, #0
 810132c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810132e:	4b06      	ldr	r3, [pc, #24]	@ (8101348 <MX_SPI5_Init+0xa0>)
 8101330:	2200      	movs	r2, #0
 8101332:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8101334:	4804      	ldr	r0, [pc, #16]	@ (8101348 <MX_SPI5_Init+0xa0>)
 8101336:	f005 fd33 	bl	8106da0 <HAL_SPI_Init>
 810133a:	4603      	mov	r3, r0
 810133c:	2b00      	cmp	r3, #0
 810133e:	d001      	beq.n	8101344 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8101340:	f000 fb72 	bl	8101a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8101344:	bf00      	nop
 8101346:	bd80      	pop	{r7, pc}
 8101348:	1000030c 	.word	0x1000030c
 810134c:	40015000 	.word	0x40015000

08101350 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8101350:	b580      	push	{r7, lr}
 8101352:	b096      	sub	sp, #88	@ 0x58
 8101354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101356:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 810135a:	2200      	movs	r2, #0
 810135c:	601a      	str	r2, [r3, #0]
 810135e:	605a      	str	r2, [r3, #4]
 8101360:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101362:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101366:	2200      	movs	r2, #0
 8101368:	601a      	str	r2, [r3, #0]
 810136a:	605a      	str	r2, [r3, #4]
 810136c:	609a      	str	r2, [r3, #8]
 810136e:	60da      	str	r2, [r3, #12]
 8101370:	611a      	str	r2, [r3, #16]
 8101372:	615a      	str	r2, [r3, #20]
 8101374:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101376:	1d3b      	adds	r3, r7, #4
 8101378:	222c      	movs	r2, #44	@ 0x2c
 810137a:	2100      	movs	r1, #0
 810137c:	4618      	mov	r0, r3
 810137e:	f008 fcdd 	bl	8109d3c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8101382:	4b39      	ldr	r3, [pc, #228]	@ (8101468 <MX_TIM8_Init+0x118>)
 8101384:	4a39      	ldr	r2, [pc, #228]	@ (810146c <MX_TIM8_Init+0x11c>)
 8101386:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8101388:	4b37      	ldr	r3, [pc, #220]	@ (8101468 <MX_TIM8_Init+0x118>)
 810138a:	2200      	movs	r2, #0
 810138c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 810138e:	4b36      	ldr	r3, [pc, #216]	@ (8101468 <MX_TIM8_Init+0x118>)
 8101390:	2200      	movs	r2, #0
 8101392:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8101394:	4b34      	ldr	r3, [pc, #208]	@ (8101468 <MX_TIM8_Init+0x118>)
 8101396:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810139a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810139c:	4b32      	ldr	r3, [pc, #200]	@ (8101468 <MX_TIM8_Init+0x118>)
 810139e:	2200      	movs	r2, #0
 81013a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 81013a2:	4b31      	ldr	r3, [pc, #196]	@ (8101468 <MX_TIM8_Init+0x118>)
 81013a4:	2200      	movs	r2, #0
 81013a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81013a8:	4b2f      	ldr	r3, [pc, #188]	@ (8101468 <MX_TIM8_Init+0x118>)
 81013aa:	2200      	movs	r2, #0
 81013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 81013ae:	482e      	ldr	r0, [pc, #184]	@ (8101468 <MX_TIM8_Init+0x118>)
 81013b0:	f006 fcf6 	bl	8107da0 <HAL_TIM_PWM_Init>
 81013b4:	4603      	mov	r3, r0
 81013b6:	2b00      	cmp	r3, #0
 81013b8:	d001      	beq.n	81013be <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 81013ba:	f000 fb35 	bl	8101a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81013be:	2300      	movs	r3, #0
 81013c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81013c2:	2300      	movs	r3, #0
 81013c4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81013c6:	2300      	movs	r3, #0
 81013c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 81013ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 81013ce:	4619      	mov	r1, r3
 81013d0:	4825      	ldr	r0, [pc, #148]	@ (8101468 <MX_TIM8_Init+0x118>)
 81013d2:	f007 faf5 	bl	81089c0 <HAL_TIMEx_MasterConfigSynchronization>
 81013d6:	4603      	mov	r3, r0
 81013d8:	2b00      	cmp	r3, #0
 81013da:	d001      	beq.n	81013e0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 81013dc:	f000 fb24 	bl	8101a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81013e0:	2360      	movs	r3, #96	@ 0x60
 81013e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 81013e4:	2300      	movs	r3, #0
 81013e6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81013e8:	2300      	movs	r3, #0
 81013ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81013ec:	2300      	movs	r3, #0
 81013ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81013f0:	2300      	movs	r3, #0
 81013f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81013f4:	2300      	movs	r3, #0
 81013f6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81013f8:	2300      	movs	r3, #0
 81013fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81013fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101400:	2200      	movs	r2, #0
 8101402:	4619      	mov	r1, r3
 8101404:	4818      	ldr	r0, [pc, #96]	@ (8101468 <MX_TIM8_Init+0x118>)
 8101406:	f006 fe29 	bl	810805c <HAL_TIM_PWM_ConfigChannel>
 810140a:	4603      	mov	r3, r0
 810140c:	2b00      	cmp	r3, #0
 810140e:	d001      	beq.n	8101414 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8101410:	f000 fb0a 	bl	8101a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101414:	2300      	movs	r3, #0
 8101416:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101418:	2300      	movs	r3, #0
 810141a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 810141c:	2300      	movs	r3, #0
 810141e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101420:	2300      	movs	r3, #0
 8101422:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101424:	2300      	movs	r3, #0
 8101426:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810142c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 810142e:	2300      	movs	r3, #0
 8101430:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101432:	2300      	movs	r3, #0
 8101434:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810143a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 810143c:	2300      	movs	r3, #0
 810143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101440:	2300      	movs	r3, #0
 8101442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8101444:	1d3b      	adds	r3, r7, #4
 8101446:	4619      	mov	r1, r3
 8101448:	4807      	ldr	r0, [pc, #28]	@ (8101468 <MX_TIM8_Init+0x118>)
 810144a:	f007 fb47 	bl	8108adc <HAL_TIMEx_ConfigBreakDeadTime>
 810144e:	4603      	mov	r3, r0
 8101450:	2b00      	cmp	r3, #0
 8101452:	d001      	beq.n	8101458 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8101454:	f000 fae8 	bl	8101a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8101458:	4803      	ldr	r0, [pc, #12]	@ (8101468 <MX_TIM8_Init+0x118>)
 810145a:	f000 fd8f 	bl	8101f7c <HAL_TIM_MspPostInit>

}
 810145e:	bf00      	nop
 8101460:	3758      	adds	r7, #88	@ 0x58
 8101462:	46bd      	mov	sp, r7
 8101464:	bd80      	pop	{r7, pc}
 8101466:	bf00      	nop
 8101468:	10000394 	.word	0x10000394
 810146c:	40010400 	.word	0x40010400

08101470 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8101470:	b580      	push	{r7, lr}
 8101472:	b088      	sub	sp, #32
 8101474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8101476:	1d3b      	adds	r3, r7, #4
 8101478:	2200      	movs	r2, #0
 810147a:	601a      	str	r2, [r3, #0]
 810147c:	605a      	str	r2, [r3, #4]
 810147e:	609a      	str	r2, [r3, #8]
 8101480:	60da      	str	r2, [r3, #12]
 8101482:	611a      	str	r2, [r3, #16]
 8101484:	615a      	str	r2, [r3, #20]
 8101486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8101488:	4b1e      	ldr	r3, [pc, #120]	@ (8101504 <MX_TIM13_Init+0x94>)
 810148a:	4a1f      	ldr	r2, [pc, #124]	@ (8101508 <MX_TIM13_Init+0x98>)
 810148c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 810148e:	4b1d      	ldr	r3, [pc, #116]	@ (8101504 <MX_TIM13_Init+0x94>)
 8101490:	2200      	movs	r2, #0
 8101492:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101494:	4b1b      	ldr	r3, [pc, #108]	@ (8101504 <MX_TIM13_Init+0x94>)
 8101496:	2200      	movs	r2, #0
 8101498:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 810149a:	4b1a      	ldr	r3, [pc, #104]	@ (8101504 <MX_TIM13_Init+0x94>)
 810149c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81014a0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81014a2:	4b18      	ldr	r3, [pc, #96]	@ (8101504 <MX_TIM13_Init+0x94>)
 81014a4:	2200      	movs	r2, #0
 81014a6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81014a8:	4b16      	ldr	r3, [pc, #88]	@ (8101504 <MX_TIM13_Init+0x94>)
 81014aa:	2200      	movs	r2, #0
 81014ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 81014ae:	4815      	ldr	r0, [pc, #84]	@ (8101504 <MX_TIM13_Init+0x94>)
 81014b0:	f006 fba7 	bl	8107c02 <HAL_TIM_Base_Init>
 81014b4:	4603      	mov	r3, r0
 81014b6:	2b00      	cmp	r3, #0
 81014b8:	d001      	beq.n	81014be <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 81014ba:	f000 fab5 	bl	8101a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 81014be:	4811      	ldr	r0, [pc, #68]	@ (8101504 <MX_TIM13_Init+0x94>)
 81014c0:	f006 fc6e 	bl	8107da0 <HAL_TIM_PWM_Init>
 81014c4:	4603      	mov	r3, r0
 81014c6:	2b00      	cmp	r3, #0
 81014c8:	d001      	beq.n	81014ce <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 81014ca:	f000 faad 	bl	8101a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81014ce:	2360      	movs	r3, #96	@ 0x60
 81014d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 81014d2:	2300      	movs	r3, #0
 81014d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81014d6:	2300      	movs	r3, #0
 81014d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81014da:	2300      	movs	r3, #0
 81014dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81014de:	1d3b      	adds	r3, r7, #4
 81014e0:	2200      	movs	r2, #0
 81014e2:	4619      	mov	r1, r3
 81014e4:	4807      	ldr	r0, [pc, #28]	@ (8101504 <MX_TIM13_Init+0x94>)
 81014e6:	f006 fdb9 	bl	810805c <HAL_TIM_PWM_ConfigChannel>
 81014ea:	4603      	mov	r3, r0
 81014ec:	2b00      	cmp	r3, #0
 81014ee:	d001      	beq.n	81014f4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 81014f0:	f000 fa9a 	bl	8101a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 81014f4:	4803      	ldr	r0, [pc, #12]	@ (8101504 <MX_TIM13_Init+0x94>)
 81014f6:	f000 fd41 	bl	8101f7c <HAL_TIM_MspPostInit>

}
 81014fa:	bf00      	nop
 81014fc:	3720      	adds	r7, #32
 81014fe:	46bd      	mov	sp, r7
 8101500:	bd80      	pop	{r7, pc}
 8101502:	bf00      	nop
 8101504:	100003e0 	.word	0x100003e0
 8101508:	40001c00 	.word	0x40001c00

0810150c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 810150c:	b580      	push	{r7, lr}
 810150e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8101510:	4b15      	ldr	r3, [pc, #84]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101512:	4a16      	ldr	r2, [pc, #88]	@ (810156c <MX_USB_OTG_HS_PCD_Init+0x60>)
 8101514:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8101516:	4b14      	ldr	r3, [pc, #80]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101518:	2209      	movs	r2, #9
 810151a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 810151c:	4b12      	ldr	r3, [pc, #72]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810151e:	2200      	movs	r2, #0
 8101520:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8101522:	4b11      	ldr	r3, [pc, #68]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101524:	2200      	movs	r2, #0
 8101526:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8101528:	4b0f      	ldr	r3, [pc, #60]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810152a:	2201      	movs	r2, #1
 810152c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 810152e:	4b0e      	ldr	r3, [pc, #56]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101530:	2200      	movs	r2, #0
 8101532:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8101534:	4b0c      	ldr	r3, [pc, #48]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101536:	2200      	movs	r2, #0
 8101538:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 810153a:	4b0b      	ldr	r3, [pc, #44]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810153c:	2200      	movs	r2, #0
 810153e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8101540:	4b09      	ldr	r3, [pc, #36]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101542:	2200      	movs	r2, #0
 8101544:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8101546:	4b08      	ldr	r3, [pc, #32]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101548:	2200      	movs	r2, #0
 810154a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 810154c:	4b06      	ldr	r3, [pc, #24]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810154e:	2200      	movs	r2, #0
 8101550:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8101552:	4805      	ldr	r0, [pc, #20]	@ (8101568 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101554:	f001 fdd0 	bl	81030f8 <HAL_PCD_Init>
 8101558:	4603      	mov	r3, r0
 810155a:	2b00      	cmp	r3, #0
 810155c:	d001      	beq.n	8101562 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 810155e:	f000 fa63 	bl	8101a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8101562:	bf00      	nop
 8101564:	bd80      	pop	{r7, pc}
 8101566:	bf00      	nop
 8101568:	1000042c 	.word	0x1000042c
 810156c:	40040000 	.word	0x40040000

08101570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101570:	b580      	push	{r7, lr}
 8101572:	b090      	sub	sp, #64	@ 0x40
 8101574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101576:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810157a:	2200      	movs	r2, #0
 810157c:	601a      	str	r2, [r3, #0]
 810157e:	605a      	str	r2, [r3, #4]
 8101580:	609a      	str	r2, [r3, #8]
 8101582:	60da      	str	r2, [r3, #12]
 8101584:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8101586:	4bbc      	ldr	r3, [pc, #752]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810158c:	4aba      	ldr	r2, [pc, #744]	@ (8101878 <MX_GPIO_Init+0x308>)
 810158e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101592:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101596:	4bb8      	ldr	r3, [pc, #736]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810159c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 81015a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81015a4:	4bb4      	ldr	r3, [pc, #720]	@ (8101878 <MX_GPIO_Init+0x308>)
 81015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015aa:	4ab3      	ldr	r2, [pc, #716]	@ (8101878 <MX_GPIO_Init+0x308>)
 81015ac:	f043 0302 	orr.w	r3, r3, #2
 81015b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015b4:	4bb0      	ldr	r3, [pc, #704]	@ (8101878 <MX_GPIO_Init+0x308>)
 81015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015ba:	f003 0302 	and.w	r3, r3, #2
 81015be:	627b      	str	r3, [r7, #36]	@ 0x24
 81015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81015c2:	4bad      	ldr	r3, [pc, #692]	@ (8101878 <MX_GPIO_Init+0x308>)
 81015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015c8:	4aab      	ldr	r2, [pc, #684]	@ (8101878 <MX_GPIO_Init+0x308>)
 81015ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81015ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015d2:	4ba9      	ldr	r3, [pc, #676]	@ (8101878 <MX_GPIO_Init+0x308>)
 81015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81015dc:	623b      	str	r3, [r7, #32]
 81015de:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81015e0:	4ba5      	ldr	r3, [pc, #660]	@ (8101878 <MX_GPIO_Init+0x308>)
 81015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015e6:	4aa4      	ldr	r2, [pc, #656]	@ (8101878 <MX_GPIO_Init+0x308>)
 81015e8:	f043 0304 	orr.w	r3, r3, #4
 81015ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015f0:	4ba1      	ldr	r3, [pc, #644]	@ (8101878 <MX_GPIO_Init+0x308>)
 81015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015f6:	f003 0304 	and.w	r3, r3, #4
 81015fa:	61fb      	str	r3, [r7, #28]
 81015fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81015fe:	4b9e      	ldr	r3, [pc, #632]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101604:	4a9c      	ldr	r2, [pc, #624]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101606:	f043 0310 	orr.w	r3, r3, #16
 810160a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810160e:	4b9a      	ldr	r3, [pc, #616]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101614:	f003 0310 	and.w	r3, r3, #16
 8101618:	61bb      	str	r3, [r7, #24]
 810161a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 810161c:	4b96      	ldr	r3, [pc, #600]	@ (8101878 <MX_GPIO_Init+0x308>)
 810161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101622:	4a95      	ldr	r2, [pc, #596]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810162c:	4b92      	ldr	r3, [pc, #584]	@ (8101878 <MX_GPIO_Init+0x308>)
 810162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101636:	617b      	str	r3, [r7, #20]
 8101638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810163a:	4b8f      	ldr	r3, [pc, #572]	@ (8101878 <MX_GPIO_Init+0x308>)
 810163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101640:	4a8d      	ldr	r2, [pc, #564]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101642:	f043 0308 	orr.w	r3, r3, #8
 8101646:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810164a:	4b8b      	ldr	r3, [pc, #556]	@ (8101878 <MX_GPIO_Init+0x308>)
 810164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101650:	f003 0308 	and.w	r3, r3, #8
 8101654:	613b      	str	r3, [r7, #16]
 8101656:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101658:	4b87      	ldr	r3, [pc, #540]	@ (8101878 <MX_GPIO_Init+0x308>)
 810165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810165e:	4a86      	ldr	r2, [pc, #536]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101660:	f043 0301 	orr.w	r3, r3, #1
 8101664:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101668:	4b83      	ldr	r3, [pc, #524]	@ (8101878 <MX_GPIO_Init+0x308>)
 810166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810166e:	f003 0301 	and.w	r3, r3, #1
 8101672:	60fb      	str	r3, [r7, #12]
 8101674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101676:	4b80      	ldr	r3, [pc, #512]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810167c:	4a7e      	ldr	r2, [pc, #504]	@ (8101878 <MX_GPIO_Init+0x308>)
 810167e:	f043 0320 	orr.w	r3, r3, #32
 8101682:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101686:	4b7c      	ldr	r3, [pc, #496]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810168c:	f003 0320 	and.w	r3, r3, #32
 8101690:	60bb      	str	r3, [r7, #8]
 8101692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8101694:	4b78      	ldr	r3, [pc, #480]	@ (8101878 <MX_GPIO_Init+0x308>)
 8101696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810169a:	4a77      	ldr	r2, [pc, #476]	@ (8101878 <MX_GPIO_Init+0x308>)
 810169c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016a4:	4b74      	ldr	r3, [pc, #464]	@ (8101878 <MX_GPIO_Init+0x308>)
 81016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81016ae:	607b      	str	r3, [r7, #4]
 81016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 81016b2:	4b71      	ldr	r3, [pc, #452]	@ (8101878 <MX_GPIO_Init+0x308>)
 81016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016b8:	4a6f      	ldr	r2, [pc, #444]	@ (8101878 <MX_GPIO_Init+0x308>)
 81016ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81016be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016c2:	4b6d      	ldr	r3, [pc, #436]	@ (8101878 <MX_GPIO_Init+0x308>)
 81016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81016cc:	603b      	str	r3, [r7, #0]
 81016ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PI6 PI5 PI4 PI1
                           PI0 PI7 PI2 PI3
                           PI9 PI10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 81016d0:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 81016d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016d6:	2302      	movs	r3, #2
 81016d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016da:	2300      	movs	r3, #0
 81016dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81016de:	2303      	movs	r3, #3
 81016e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81016e2:	230c      	movs	r3, #12
 81016e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81016e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81016ea:	4619      	mov	r1, r3
 81016ec:	4863      	ldr	r0, [pc, #396]	@ (810187c <MX_GPIO_Init+0x30c>)
 81016ee:	f001 fb27 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 81016f2:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 81016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016f8:	2302      	movs	r3, #2
 81016fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016fc:	2300      	movs	r3, #0
 81016fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101700:	2300      	movs	r3, #0
 8101702:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101704:	2309      	movs	r3, #9
 8101706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101708:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810170c:	4619      	mov	r1, r3
 810170e:	485c      	ldr	r0, [pc, #368]	@ (8101880 <MX_GPIO_Init+0x310>)
 8101710:	f001 fb16 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_8;
 8101714:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8101718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810171a:	2302      	movs	r3, #2
 810171c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810171e:	2300      	movs	r3, #0
 8101720:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101722:	2303      	movs	r3, #3
 8101724:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101726:	230c      	movs	r3, #12
 8101728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810172a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810172e:	4619      	mov	r1, r3
 8101730:	4854      	ldr	r0, [pc, #336]	@ (8101884 <MX_GPIO_Init+0x314>)
 8101732:	f001 fb05 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8101736:	f64f 7383 	movw	r3, #65411	@ 0xff83
 810173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810173c:	2302      	movs	r3, #2
 810173e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101740:	2300      	movs	r3, #0
 8101742:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101744:	2303      	movs	r3, #3
 8101746:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101748:	230c      	movs	r3, #12
 810174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810174c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101750:	4619      	mov	r1, r3
 8101752:	484d      	ldr	r0, [pc, #308]	@ (8101888 <MX_GPIO_Init+0x318>)
 8101754:	f001 faf4 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8101758:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 810175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810175e:	2302      	movs	r3, #2
 8101760:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101762:	2300      	movs	r3, #0
 8101764:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101766:	2300      	movs	r3, #0
 8101768:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810176a:	230b      	movs	r3, #11
 810176c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810176e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101772:	4619      	mov	r1, r3
 8101774:	4842      	ldr	r0, [pc, #264]	@ (8101880 <MX_GPIO_Init+0x310>)
 8101776:	f001 fae3 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH14 PH13 PH5
                           PH10 PH11 PH9 PH12
                           PH6 PH8 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_5
 810177a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 810177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_12
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101780:	2302      	movs	r3, #2
 8101782:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101784:	2300      	movs	r3, #0
 8101786:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101788:	2303      	movs	r3, #3
 810178a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810178c:	230c      	movs	r3, #12
 810178e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101790:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101794:	4619      	mov	r1, r3
 8101796:	483d      	ldr	r0, [pc, #244]	@ (810188c <MX_GPIO_Init+0x31c>)
 8101798:	f001 fad2 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG4 PG2
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_2
 810179c:	f248 1317 	movw	r3, #33047	@ 0x8117
 81017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017a2:	2302      	movs	r3, #2
 81017a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017a6:	2300      	movs	r3, #0
 81017a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81017aa:	2303      	movs	r3, #3
 81017ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81017ae:	230c      	movs	r3, #12
 81017b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81017b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81017b6:	4619      	mov	r1, r3
 81017b8:	4831      	ldr	r0, [pc, #196]	@ (8101880 <MX_GPIO_Init+0x310>)
 81017ba:	f001 fac1 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 81017be:	2304      	movs	r3, #4
 81017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017c2:	2302      	movs	r3, #2
 81017c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017c6:	2300      	movs	r3, #0
 81017c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81017ca:	2303      	movs	r3, #3
 81017cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81017ce:	230c      	movs	r3, #12
 81017d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81017d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81017d6:	4619      	mov	r1, r3
 81017d8:	482d      	ldr	r0, [pc, #180]	@ (8101890 <MX_GPIO_Init+0x320>)
 81017da:	f001 fab1 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 81017de:	f24c 7303 	movw	r3, #50947	@ 0xc703
 81017e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017e4:	2302      	movs	r3, #2
 81017e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017e8:	2300      	movs	r3, #0
 81017ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81017ec:	2303      	movs	r3, #3
 81017ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81017f0:	230c      	movs	r3, #12
 81017f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81017f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81017f8:	4619      	mov	r1, r3
 81017fa:	4825      	ldr	r0, [pc, #148]	@ (8101890 <MX_GPIO_Init+0x320>)
 81017fc:	f001 faa0 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8101800:	2380      	movs	r3, #128	@ 0x80
 8101802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101804:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8101808:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810180a:	2300      	movs	r3, #0
 810180c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 810180e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101812:	4619      	mov	r1, r3
 8101814:	481b      	ldr	r0, [pc, #108]	@ (8101884 <MX_GPIO_Init+0x314>)
 8101816:	f001 fa93 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 810181a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 810181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101820:	2302      	movs	r3, #2
 8101822:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101824:	2300      	movs	r3, #0
 8101826:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101828:	2303      	movs	r3, #3
 810182a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810182c:	230c      	movs	r3, #12
 810182e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101834:	4619      	mov	r1, r3
 8101836:	4817      	ldr	r0, [pc, #92]	@ (8101894 <MX_GPIO_Init+0x324>)
 8101838:	f001 fa82 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 810183c:	2340      	movs	r3, #64	@ 0x40
 810183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101840:	2302      	movs	r3, #2
 8101842:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101844:	2300      	movs	r3, #0
 8101846:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101848:	2300      	movs	r3, #0
 810184a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 810184c:	230a      	movs	r3, #10
 810184e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101854:	4619      	mov	r1, r3
 8101856:	480a      	ldr	r0, [pc, #40]	@ (8101880 <MX_GPIO_Init+0x310>)
 8101858:	f001 fa72 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810185c:	23c0      	movs	r3, #192	@ 0xc0
 810185e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101860:	2302      	movs	r3, #2
 8101862:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101864:	2300      	movs	r3, #0
 8101866:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101868:	2300      	movs	r3, #0
 810186a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810186c:	2309      	movs	r3, #9
 810186e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101870:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101874:	4619      	mov	r1, r3
 8101876:	e00f      	b.n	8101898 <MX_GPIO_Init+0x328>
 8101878:	58024400 	.word	0x58024400
 810187c:	58022000 	.word	0x58022000
 8101880:	58021800 	.word	0x58021800
 8101884:	58020800 	.word	0x58020800
 8101888:	58021000 	.word	0x58021000
 810188c:	58021c00 	.word	0x58021c00
 8101890:	58020c00 	.word	0x58020c00
 8101894:	58021400 	.word	0x58021400
 8101898:	4853      	ldr	r0, [pc, #332]	@ (81019e8 <MX_GPIO_Init+0x478>)
 810189a:	f001 fa51 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 810189e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81018a4:	2303      	movs	r3, #3
 81018a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018a8:	2300      	movs	r3, #0
 81018aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81018ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81018b0:	4619      	mov	r1, r3
 81018b2:	484d      	ldr	r0, [pc, #308]	@ (81019e8 <MX_GPIO_Init+0x478>)
 81018b4:	f001 fa44 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 81018b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018be:	2302      	movs	r3, #2
 81018c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018c2:	2300      	movs	r3, #0
 81018c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018c6:	2300      	movs	r3, #0
 81018c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81018ca:	230a      	movs	r3, #10
 81018cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81018ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81018d2:	4619      	mov	r1, r3
 81018d4:	4844      	ldr	r0, [pc, #272]	@ (81019e8 <MX_GPIO_Init+0x478>)
 81018d6:	f001 fa33 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 81018da:	2332      	movs	r3, #50	@ 0x32
 81018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018de:	2302      	movs	r3, #2
 81018e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018e2:	2300      	movs	r3, #0
 81018e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018e6:	2300      	movs	r3, #0
 81018e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81018ea:	230b      	movs	r3, #11
 81018ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81018ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81018f2:	4619      	mov	r1, r3
 81018f4:	483d      	ldr	r0, [pc, #244]	@ (81019ec <MX_GPIO_Init+0x47c>)
 81018f6:	f001 fa23 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ9 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 81018fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101900:	2302      	movs	r3, #2
 8101902:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101904:	2300      	movs	r3, #0
 8101906:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101908:	2300      	movs	r3, #0
 810190a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 810190c:	2308      	movs	r3, #8
 810190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101910:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101914:	4619      	mov	r1, r3
 8101916:	4836      	ldr	r0, [pc, #216]	@ (81019f0 <MX_GPIO_Init+0x480>)
 8101918:	f001 fa12 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 810191c:	230c      	movs	r3, #12
 810191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101920:	2302      	movs	r3, #2
 8101922:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101924:	2300      	movs	r3, #0
 8101926:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101928:	2300      	movs	r3, #0
 810192a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810192c:	2309      	movs	r3, #9
 810192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101930:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101934:	4619      	mov	r1, r3
 8101936:	482f      	ldr	r0, [pc, #188]	@ (81019f4 <MX_GPIO_Init+0x484>)
 8101938:	f001 fa02 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 810193c:	2386      	movs	r3, #134	@ 0x86
 810193e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101940:	2302      	movs	r3, #2
 8101942:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101944:	2300      	movs	r3, #0
 8101946:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101948:	2300      	movs	r3, #0
 810194a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810194c:	230b      	movs	r3, #11
 810194e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101950:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101954:	4619      	mov	r1, r3
 8101956:	4828      	ldr	r0, [pc, #160]	@ (81019f8 <MX_GPIO_Init+0x488>)
 8101958:	f001 f9f2 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 810195c:	2304      	movs	r3, #4
 810195e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101960:	2302      	movs	r3, #2
 8101962:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101964:	2300      	movs	r3, #0
 8101966:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101968:	2300      	movs	r3, #0
 810196a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810196c:	2309      	movs	r3, #9
 810196e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101970:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101974:	4619      	mov	r1, r3
 8101976:	4821      	ldr	r0, [pc, #132]	@ (81019fc <MX_GPIO_Init+0x48c>)
 8101978:	f001 f9e2 	bl	8102d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 810197c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101982:	2302      	movs	r3, #2
 8101984:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101986:	2300      	movs	r3, #0
 8101988:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810198a:	2300      	movs	r3, #0
 810198c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810198e:	2309      	movs	r3, #9
 8101990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101992:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101996:	4619      	mov	r1, r3
 8101998:	4819      	ldr	r0, [pc, #100]	@ (8101a00 <MX_GPIO_Init+0x490>)
 810199a:	f001 f9d1 	bl	8102d40 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 810199e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 81019a2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 81019a6:	f000 ff65 	bl	8102874 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81019aa:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 81019ae:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 81019b2:	f000 ff5f 	bl	8102874 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 81019b6:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 81019ba:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 81019be:	f000 ff59 	bl	8102874 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 81019c2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 81019c6:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 81019ca:	f000 ff53 	bl	8102874 <HAL_SYSCFG_AnalogSwitchConfig>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 81019ce:	2200      	movs	r2, #0
 81019d0:	2105      	movs	r1, #5
 81019d2:	2017      	movs	r0, #23
 81019d4:	f001 f97a 	bl	8102ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 81019d8:	2017      	movs	r0, #23
 81019da:	f001 f991 	bl	8102d00 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81019de:	bf00      	nop
 81019e0:	3740      	adds	r7, #64	@ 0x40
 81019e2:	46bd      	mov	sp, r7
 81019e4:	bd80      	pop	{r7, pc}
 81019e6:	bf00      	nop
 81019e8:	58021400 	.word	0x58021400
 81019ec:	58020800 	.word	0x58020800
 81019f0:	58022400 	.word	0x58022400
 81019f4:	58021c00 	.word	0x58021c00
 81019f8:	58020000 	.word	0x58020000
 81019fc:	58020400 	.word	0x58020400
 8101a00:	58020c00 	.word	0x58020c00

08101a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101a04:	b580      	push	{r7, lr}
 8101a06:	b082      	sub	sp, #8
 8101a08:	af00      	add	r7, sp, #0
 8101a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8101a0c:	687b      	ldr	r3, [r7, #4]
 8101a0e:	681b      	ldr	r3, [r3, #0]
 8101a10:	4a04      	ldr	r2, [pc, #16]	@ (8101a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101a12:	4293      	cmp	r3, r2
 8101a14:	d101      	bne.n	8101a1a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8101a16:	f000 fedd 	bl	81027d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101a1a:	bf00      	nop
 8101a1c:	3708      	adds	r7, #8
 8101a1e:	46bd      	mov	sp, r7
 8101a20:	bd80      	pop	{r7, pc}
 8101a22:	bf00      	nop
 8101a24:	40000400 	.word	0x40000400

08101a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101a28:	b480      	push	{r7}
 8101a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101a2c:	b672      	cpsid	i
}
 8101a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101a30:	bf00      	nop
 8101a32:	e7fd      	b.n	8101a30 <Error_Handler+0x8>

08101a34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101a34:	b580      	push	{r7, lr}
 8101a36:	b082      	sub	sp, #8
 8101a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101a3a:	4b10      	ldr	r3, [pc, #64]	@ (8101a7c <HAL_MspInit+0x48>)
 8101a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101a40:	4a0e      	ldr	r2, [pc, #56]	@ (8101a7c <HAL_MspInit+0x48>)
 8101a42:	f043 0302 	orr.w	r3, r3, #2
 8101a46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8101a7c <HAL_MspInit+0x48>)
 8101a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101a50:	f003 0302 	and.w	r3, r3, #2
 8101a54:	607b      	str	r3, [r7, #4]
 8101a56:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101a58:	2200      	movs	r2, #0
 8101a5a:	210f      	movs	r1, #15
 8101a5c:	f06f 0001 	mvn.w	r0, #1
 8101a60:	f001 f934 	bl	8102ccc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 8101a64:	2200      	movs	r2, #0
 8101a66:	2105      	movs	r1, #5
 8101a68:	2040      	movs	r0, #64	@ 0x40
 8101a6a:	f001 f92f 	bl	8102ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8101a6e:	2040      	movs	r0, #64	@ 0x40
 8101a70:	f001 f946 	bl	8102d00 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101a74:	bf00      	nop
 8101a76:	3708      	adds	r7, #8
 8101a78:	46bd      	mov	sp, r7
 8101a7a:	bd80      	pop	{r7, pc}
 8101a7c:	58024400 	.word	0x58024400

08101a80 <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101a80:	b580      	push	{r7, lr}
 8101a82:	b0bc      	sub	sp, #240	@ 0xf0
 8101a84:	af00      	add	r7, sp, #0
 8101a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101a8c:	2200      	movs	r2, #0
 8101a8e:	601a      	str	r2, [r3, #0]
 8101a90:	605a      	str	r2, [r3, #4]
 8101a92:	609a      	str	r2, [r3, #8]
 8101a94:	60da      	str	r2, [r3, #12]
 8101a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a98:	f107 0310 	add.w	r3, r7, #16
 8101a9c:	22c8      	movs	r2, #200	@ 0xc8
 8101a9e:	2100      	movs	r1, #0
 8101aa0:	4618      	mov	r0, r3
 8101aa2:	f008 f94b 	bl	8109d3c <memset>
  if(hcec->Instance==CEC)
 8101aa6:	687b      	ldr	r3, [r7, #4]
 8101aa8:	681b      	ldr	r3, [r3, #0]
 8101aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8101b58 <HAL_CEC_MspInit+0xd8>)
 8101aac:	4293      	cmp	r3, r2
 8101aae:	d14e      	bne.n	8101b4e <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8101ab0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8101ab4:	f04f 0300 	mov.w	r3, #0
 8101ab8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8101abc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8101ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101ac4:	f107 0310 	add.w	r3, r7, #16
 8101ac8:	4618      	mov	r0, r3
 8101aca:	f001 fee1 	bl	8103890 <HAL_RCCEx_PeriphCLKConfig>
 8101ace:	4603      	mov	r3, r0
 8101ad0:	2b00      	cmp	r3, #0
 8101ad2:	d001      	beq.n	8101ad8 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 8101ad4:	f7ff ffa8 	bl	8101a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8101ad8:	4b20      	ldr	r3, [pc, #128]	@ (8101b5c <HAL_CEC_MspInit+0xdc>)
 8101ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101ade:	4a1f      	ldr	r2, [pc, #124]	@ (8101b5c <HAL_CEC_MspInit+0xdc>)
 8101ae0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8101ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8101b5c <HAL_CEC_MspInit+0xdc>)
 8101aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101aee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8101af2:	60fb      	str	r3, [r7, #12]
 8101af4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101af6:	4b19      	ldr	r3, [pc, #100]	@ (8101b5c <HAL_CEC_MspInit+0xdc>)
 8101af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101afc:	4a17      	ldr	r2, [pc, #92]	@ (8101b5c <HAL_CEC_MspInit+0xdc>)
 8101afe:	f043 0302 	orr.w	r3, r3, #2
 8101b02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b06:	4b15      	ldr	r3, [pc, #84]	@ (8101b5c <HAL_CEC_MspInit+0xdc>)
 8101b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b0c:	f003 0302 	and.w	r3, r3, #2
 8101b10:	60bb      	str	r3, [r7, #8]
 8101b12:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8101b14:	2340      	movs	r3, #64	@ 0x40
 8101b16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101b1a:	2312      	movs	r3, #18
 8101b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b20:	2300      	movs	r3, #0
 8101b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b26:	2300      	movs	r3, #0
 8101b28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101b2c:	2305      	movs	r3, #5
 8101b2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 8101b32:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101b36:	4619      	mov	r1, r3
 8101b38:	4809      	ldr	r0, [pc, #36]	@ (8101b60 <HAL_CEC_MspInit+0xe0>)
 8101b3a:	f001 f901 	bl	8102d40 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 8101b3e:	2200      	movs	r2, #0
 8101b40:	2105      	movs	r1, #5
 8101b42:	205e      	movs	r0, #94	@ 0x5e
 8101b44:	f001 f8c2 	bl	8102ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8101b48:	205e      	movs	r0, #94	@ 0x5e
 8101b4a:	f001 f8d9 	bl	8102d00 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 8101b4e:	bf00      	nop
 8101b50:	37f0      	adds	r7, #240	@ 0xf0
 8101b52:	46bd      	mov	sp, r7
 8101b54:	bd80      	pop	{r7, pc}
 8101b56:	bf00      	nop
 8101b58:	40006c00 	.word	0x40006c00
 8101b5c:	58024400 	.word	0x58024400
 8101b60:	58020400 	.word	0x58020400

08101b64 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101b64:	b580      	push	{r7, lr}
 8101b66:	b0b4      	sub	sp, #208	@ 0xd0
 8101b68:	af00      	add	r7, sp, #0
 8101b6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101b6c:	f107 0308 	add.w	r3, r7, #8
 8101b70:	22c8      	movs	r2, #200	@ 0xc8
 8101b72:	2100      	movs	r1, #0
 8101b74:	4618      	mov	r0, r3
 8101b76:	f008 f8e1 	bl	8109d3c <memset>
  if(hrtc->Instance==RTC)
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	681b      	ldr	r3, [r3, #0]
 8101b7e:	4a10      	ldr	r2, [pc, #64]	@ (8101bc0 <HAL_RTC_MspInit+0x5c>)
 8101b80:	4293      	cmp	r3, r2
 8101b82:	d119      	bne.n	8101bb8 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101b84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101b88:	f04f 0300 	mov.w	r3, #0
 8101b8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8101b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101b94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b98:	f107 0308 	add.w	r3, r7, #8
 8101b9c:	4618      	mov	r0, r3
 8101b9e:	f001 fe77 	bl	8103890 <HAL_RCCEx_PeriphCLKConfig>
 8101ba2:	4603      	mov	r3, r0
 8101ba4:	2b00      	cmp	r3, #0
 8101ba6:	d001      	beq.n	8101bac <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8101ba8:	f7ff ff3e 	bl	8101a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101bac:	4b05      	ldr	r3, [pc, #20]	@ (8101bc4 <HAL_RTC_MspInit+0x60>)
 8101bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101bb0:	4a04      	ldr	r2, [pc, #16]	@ (8101bc4 <HAL_RTC_MspInit+0x60>)
 8101bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101bb6:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8101bb8:	bf00      	nop
 8101bba:	37d0      	adds	r7, #208	@ 0xd0
 8101bbc:	46bd      	mov	sp, r7
 8101bbe:	bd80      	pop	{r7, pc}
 8101bc0:	58004000 	.word	0x58004000
 8101bc4:	58024400 	.word	0x58024400

08101bc8 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8101bc8:	b580      	push	{r7, lr}
 8101bca:	b0bc      	sub	sp, #240	@ 0xf0
 8101bcc:	af00      	add	r7, sp, #0
 8101bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bd0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101bd4:	2200      	movs	r2, #0
 8101bd6:	601a      	str	r2, [r3, #0]
 8101bd8:	605a      	str	r2, [r3, #4]
 8101bda:	609a      	str	r2, [r3, #8]
 8101bdc:	60da      	str	r2, [r3, #12]
 8101bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101be0:	f107 0310 	add.w	r3, r7, #16
 8101be4:	22c8      	movs	r2, #200	@ 0xc8
 8101be6:	2100      	movs	r1, #0
 8101be8:	4618      	mov	r0, r3
 8101bea:	f008 f8a7 	bl	8109d3c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	681b      	ldr	r3, [r3, #0]
 8101bf2:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8101bf6:	d144      	bne.n	8101c82 <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101bf8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8101bfc:	f04f 0300 	mov.w	r3, #0
 8101c00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8101c04:	2300      	movs	r3, #0
 8101c06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c08:	f107 0310 	add.w	r3, r7, #16
 8101c0c:	4618      	mov	r0, r3
 8101c0e:	f001 fe3f 	bl	8103890 <HAL_RCCEx_PeriphCLKConfig>
 8101c12:	4603      	mov	r3, r0
 8101c14:	2b00      	cmp	r3, #0
 8101c16:	d001      	beq.n	8101c1c <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8101c18:	f7ff ff06 	bl	8101a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8101c8c <HAL_SPDIFRX_MspInit+0xc4>)
 8101c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101c22:	4a1a      	ldr	r2, [pc, #104]	@ (8101c8c <HAL_SPDIFRX_MspInit+0xc4>)
 8101c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101c28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101c2c:	4b17      	ldr	r3, [pc, #92]	@ (8101c8c <HAL_SPDIFRX_MspInit+0xc4>)
 8101c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101c36:	60fb      	str	r3, [r7, #12]
 8101c38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c3a:	4b14      	ldr	r3, [pc, #80]	@ (8101c8c <HAL_SPDIFRX_MspInit+0xc4>)
 8101c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c40:	4a12      	ldr	r2, [pc, #72]	@ (8101c8c <HAL_SPDIFRX_MspInit+0xc4>)
 8101c42:	f043 0308 	orr.w	r3, r3, #8
 8101c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c4a:	4b10      	ldr	r3, [pc, #64]	@ (8101c8c <HAL_SPDIFRX_MspInit+0xc4>)
 8101c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c50:	f003 0308 	and.w	r3, r3, #8
 8101c54:	60bb      	str	r3, [r7, #8]
 8101c56:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101c58:	2380      	movs	r3, #128	@ 0x80
 8101c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c5e:	2302      	movs	r3, #2
 8101c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c64:	2300      	movs	r3, #0
 8101c66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c6a:	2300      	movs	r3, #0
 8101c6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101c70:	2309      	movs	r3, #9
 8101c72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101c76:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101c7a:	4619      	mov	r1, r3
 8101c7c:	4804      	ldr	r0, [pc, #16]	@ (8101c90 <HAL_SPDIFRX_MspInit+0xc8>)
 8101c7e:	f001 f85f 	bl	8102d40 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8101c82:	bf00      	nop
 8101c84:	37f0      	adds	r7, #240	@ 0xf0
 8101c86:	46bd      	mov	sp, r7
 8101c88:	bd80      	pop	{r7, pc}
 8101c8a:	bf00      	nop
 8101c8c:	58024400 	.word	0x58024400
 8101c90:	58020c00 	.word	0x58020c00

08101c94 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101c94:	b580      	push	{r7, lr}
 8101c96:	b0c0      	sub	sp, #256	@ 0x100
 8101c98:	af00      	add	r7, sp, #0
 8101c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c9c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101ca0:	2200      	movs	r2, #0
 8101ca2:	601a      	str	r2, [r3, #0]
 8101ca4:	605a      	str	r2, [r3, #4]
 8101ca6:	609a      	str	r2, [r3, #8]
 8101ca8:	60da      	str	r2, [r3, #12]
 8101caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101cac:	f107 0320 	add.w	r3, r7, #32
 8101cb0:	22c8      	movs	r2, #200	@ 0xc8
 8101cb2:	2100      	movs	r1, #0
 8101cb4:	4618      	mov	r0, r3
 8101cb6:	f008 f841 	bl	8109d3c <memset>
  if(hspi->Instance==SPI2)
 8101cba:	687b      	ldr	r3, [r7, #4]
 8101cbc:	681b      	ldr	r3, [r3, #0]
 8101cbe:	4a72      	ldr	r2, [pc, #456]	@ (8101e88 <HAL_SPI_MspInit+0x1f4>)
 8101cc0:	4293      	cmp	r3, r2
 8101cc2:	d16b      	bne.n	8101d9c <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8101cc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8101cc8:	f04f 0300 	mov.w	r3, #0
 8101ccc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101cd0:	2300      	movs	r3, #0
 8101cd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101cd6:	f107 0320 	add.w	r3, r7, #32
 8101cda:	4618      	mov	r0, r3
 8101cdc:	f001 fdd8 	bl	8103890 <HAL_RCCEx_PeriphCLKConfig>
 8101ce0:	4603      	mov	r3, r0
 8101ce2:	2b00      	cmp	r3, #0
 8101ce4:	d001      	beq.n	8101cea <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8101ce6:	f7ff fe9f 	bl	8101a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8101cea:	4b68      	ldr	r3, [pc, #416]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101cf0:	4a66      	ldr	r2, [pc, #408]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101cf6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101cfa:	4b64      	ldr	r3, [pc, #400]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101d04:	61fb      	str	r3, [r7, #28]
 8101d06:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101d08:	4b60      	ldr	r3, [pc, #384]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101d10:	f043 0301 	orr.w	r3, r3, #1
 8101d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d18:	4b5c      	ldr	r3, [pc, #368]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d1e:	f003 0301 	and.w	r3, r3, #1
 8101d22:	61bb      	str	r3, [r7, #24]
 8101d24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101d26:	4b59      	ldr	r3, [pc, #356]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d2c:	4a57      	ldr	r2, [pc, #348]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101d2e:	f043 0304 	orr.w	r3, r3, #4
 8101d32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d36:	4b55      	ldr	r3, [pc, #340]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d3c:	f003 0304 	and.w	r3, r3, #4
 8101d40:	617b      	str	r3, [r7, #20]
 8101d42:	697b      	ldr	r3, [r7, #20]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 8101d44:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8101d48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d4c:	2302      	movs	r3, #2
 8101d4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d52:	2300      	movs	r3, #0
 8101d54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d58:	2300      	movs	r3, #0
 8101d5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101d5e:	2305      	movs	r3, #5
 8101d60:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101d64:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101d68:	4619      	mov	r1, r3
 8101d6a:	4849      	ldr	r0, [pc, #292]	@ (8101e90 <HAL_SPI_MspInit+0x1fc>)
 8101d6c:	f000 ffe8 	bl	8102d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8101d70:	230c      	movs	r3, #12
 8101d72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d76:	2302      	movs	r3, #2
 8101d78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d7c:	2300      	movs	r3, #0
 8101d7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d82:	2300      	movs	r3, #0
 8101d84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101d88:	2305      	movs	r3, #5
 8101d8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101d8e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101d92:	4619      	mov	r1, r3
 8101d94:	483f      	ldr	r0, [pc, #252]	@ (8101e94 <HAL_SPI_MspInit+0x200>)
 8101d96:	f000 ffd3 	bl	8102d40 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 8101d9a:	e06f      	b.n	8101e7c <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI5)
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	681b      	ldr	r3, [r3, #0]
 8101da0:	4a3d      	ldr	r2, [pc, #244]	@ (8101e98 <HAL_SPI_MspInit+0x204>)
 8101da2:	4293      	cmp	r3, r2
 8101da4:	d16a      	bne.n	8101e7c <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101da6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101daa:	f04f 0300 	mov.w	r3, #0
 8101dae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101db2:	2300      	movs	r3, #0
 8101db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101db8:	f107 0320 	add.w	r3, r7, #32
 8101dbc:	4618      	mov	r0, r3
 8101dbe:	f001 fd67 	bl	8103890 <HAL_RCCEx_PeriphCLKConfig>
 8101dc2:	4603      	mov	r3, r0
 8101dc4:	2b00      	cmp	r3, #0
 8101dc6:	d001      	beq.n	8101dcc <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8101dc8:	f7ff fe2e 	bl	8101a28 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101dd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8101dd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101de6:	613b      	str	r3, [r7, #16]
 8101de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101dea:	4b28      	ldr	r3, [pc, #160]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101df0:	4a26      	ldr	r2, [pc, #152]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101df6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101dfa:	4b24      	ldr	r3, [pc, #144]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101e04:	60fb      	str	r3, [r7, #12]
 8101e06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101e08:	4b20      	ldr	r3, [pc, #128]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101e10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101e14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101e18:	4b1c      	ldr	r3, [pc, #112]	@ (8101e8c <HAL_SPI_MspInit+0x1f8>)
 8101e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101e22:	60bb      	str	r3, [r7, #8]
 8101e24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101e26:	2303      	movs	r3, #3
 8101e28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e2c:	2302      	movs	r3, #2
 8101e2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e32:	2300      	movs	r3, #0
 8101e34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e38:	2300      	movs	r3, #0
 8101e3a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101e3e:	2305      	movs	r3, #5
 8101e40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8101e44:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101e48:	4619      	mov	r1, r3
 8101e4a:	4814      	ldr	r0, [pc, #80]	@ (8101e9c <HAL_SPI_MspInit+0x208>)
 8101e4c:	f000 ff78 	bl	8102d40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8101e50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e58:	2302      	movs	r3, #2
 8101e5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e5e:	2300      	movs	r3, #0
 8101e60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e64:	2300      	movs	r3, #0
 8101e66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101e6a:	2305      	movs	r3, #5
 8101e6c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101e70:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101e74:	4619      	mov	r1, r3
 8101e76:	480a      	ldr	r0, [pc, #40]	@ (8101ea0 <HAL_SPI_MspInit+0x20c>)
 8101e78:	f000 ff62 	bl	8102d40 <HAL_GPIO_Init>
}
 8101e7c:	bf00      	nop
 8101e7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101e82:	46bd      	mov	sp, r7
 8101e84:	bd80      	pop	{r7, pc}
 8101e86:	bf00      	nop
 8101e88:	40003800 	.word	0x40003800
 8101e8c:	58024400 	.word	0x58024400
 8101e90:	58020000 	.word	0x58020000
 8101e94:	58020800 	.word	0x58020800
 8101e98:	40015000 	.word	0x40015000
 8101e9c:	58022800 	.word	0x58022800
 8101ea0:	58022400 	.word	0x58022400

08101ea4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8101ea4:	b580      	push	{r7, lr}
 8101ea6:	b08a      	sub	sp, #40	@ 0x28
 8101ea8:	af00      	add	r7, sp, #0
 8101eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101eac:	f107 0314 	add.w	r3, r7, #20
 8101eb0:	2200      	movs	r2, #0
 8101eb2:	601a      	str	r2, [r3, #0]
 8101eb4:	605a      	str	r2, [r3, #4]
 8101eb6:	609a      	str	r2, [r3, #8]
 8101eb8:	60da      	str	r2, [r3, #12]
 8101eba:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	681b      	ldr	r3, [r3, #0]
 8101ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8101f2c <HAL_TIM_PWM_MspInit+0x88>)
 8101ec2:	4293      	cmp	r3, r2
 8101ec4:	d12d      	bne.n	8101f22 <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8101ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8101f30 <HAL_TIM_PWM_MspInit+0x8c>)
 8101ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101ecc:	4a18      	ldr	r2, [pc, #96]	@ (8101f30 <HAL_TIM_PWM_MspInit+0x8c>)
 8101ece:	f043 0302 	orr.w	r3, r3, #2
 8101ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101ed6:	4b16      	ldr	r3, [pc, #88]	@ (8101f30 <HAL_TIM_PWM_MspInit+0x8c>)
 8101ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101edc:	f003 0302 	and.w	r3, r3, #2
 8101ee0:	613b      	str	r3, [r7, #16]
 8101ee2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101ee4:	4b12      	ldr	r3, [pc, #72]	@ (8101f30 <HAL_TIM_PWM_MspInit+0x8c>)
 8101ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101eea:	4a11      	ldr	r2, [pc, #68]	@ (8101f30 <HAL_TIM_PWM_MspInit+0x8c>)
 8101eec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8101f30 <HAL_TIM_PWM_MspInit+0x8c>)
 8101ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101efe:	60fb      	str	r3, [r7, #12]
 8101f00:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8101f02:	2340      	movs	r3, #64	@ 0x40
 8101f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f06:	2302      	movs	r3, #2
 8101f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f0a:	2300      	movs	r3, #0
 8101f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f0e:	2300      	movs	r3, #0
 8101f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101f12:	2303      	movs	r3, #3
 8101f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8101f16:	f107 0314 	add.w	r3, r7, #20
 8101f1a:	4619      	mov	r1, r3
 8101f1c:	4805      	ldr	r0, [pc, #20]	@ (8101f34 <HAL_TIM_PWM_MspInit+0x90>)
 8101f1e:	f000 ff0f 	bl	8102d40 <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8101f22:	bf00      	nop
 8101f24:	3728      	adds	r7, #40	@ 0x28
 8101f26:	46bd      	mov	sp, r7
 8101f28:	bd80      	pop	{r7, pc}
 8101f2a:	bf00      	nop
 8101f2c:	40010400 	.word	0x40010400
 8101f30:	58024400 	.word	0x58024400
 8101f34:	58022400 	.word	0x58022400

08101f38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101f38:	b480      	push	{r7}
 8101f3a:	b085      	sub	sp, #20
 8101f3c:	af00      	add	r7, sp, #0
 8101f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	681b      	ldr	r3, [r3, #0]
 8101f44:	4a0b      	ldr	r2, [pc, #44]	@ (8101f74 <HAL_TIM_Base_MspInit+0x3c>)
 8101f46:	4293      	cmp	r3, r2
 8101f48:	d10e      	bne.n	8101f68 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8101f78 <HAL_TIM_Base_MspInit+0x40>)
 8101f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101f50:	4a09      	ldr	r2, [pc, #36]	@ (8101f78 <HAL_TIM_Base_MspInit+0x40>)
 8101f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101f56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101f5a:	4b07      	ldr	r3, [pc, #28]	@ (8101f78 <HAL_TIM_Base_MspInit+0x40>)
 8101f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101f64:	60fb      	str	r3, [r7, #12]
 8101f66:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8101f68:	bf00      	nop
 8101f6a:	3714      	adds	r7, #20
 8101f6c:	46bd      	mov	sp, r7
 8101f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f72:	4770      	bx	lr
 8101f74:	40001c00 	.word	0x40001c00
 8101f78:	58024400 	.word	0x58024400

08101f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101f7c:	b580      	push	{r7, lr}
 8101f7e:	b08a      	sub	sp, #40	@ 0x28
 8101f80:	af00      	add	r7, sp, #0
 8101f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f84:	f107 0314 	add.w	r3, r7, #20
 8101f88:	2200      	movs	r2, #0
 8101f8a:	601a      	str	r2, [r3, #0]
 8101f8c:	605a      	str	r2, [r3, #4]
 8101f8e:	609a      	str	r2, [r3, #8]
 8101f90:	60da      	str	r2, [r3, #12]
 8101f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	681b      	ldr	r3, [r3, #0]
 8101f98:	4a35      	ldr	r2, [pc, #212]	@ (8102070 <HAL_TIM_MspPostInit+0xf4>)
 8101f9a:	4293      	cmp	r3, r2
 8101f9c:	d13e      	bne.n	810201c <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101f9e:	4b35      	ldr	r3, [pc, #212]	@ (8102074 <HAL_TIM_MspPostInit+0xf8>)
 8101fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fa4:	4a33      	ldr	r2, [pc, #204]	@ (8102074 <HAL_TIM_MspPostInit+0xf8>)
 8101fa6:	f043 0304 	orr.w	r3, r3, #4
 8101faa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101fae:	4b31      	ldr	r3, [pc, #196]	@ (8102074 <HAL_TIM_MspPostInit+0xf8>)
 8101fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fb4:	f003 0304 	and.w	r3, r3, #4
 8101fb8:	613b      	str	r3, [r7, #16]
 8101fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8102074 <HAL_TIM_MspPostInit+0xf8>)
 8101fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8102074 <HAL_TIM_MspPostInit+0xf8>)
 8101fc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101fcc:	4b29      	ldr	r3, [pc, #164]	@ (8102074 <HAL_TIM_MspPostInit+0xf8>)
 8101fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101fd6:	60fb      	str	r3, [r7, #12]
 8101fd8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101fda:	2340      	movs	r3, #64	@ 0x40
 8101fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fde:	2302      	movs	r3, #2
 8101fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fe2:	2300      	movs	r3, #0
 8101fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101fe6:	2300      	movs	r3, #0
 8101fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101fea:	2303      	movs	r3, #3
 8101fec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101fee:	f107 0314 	add.w	r3, r7, #20
 8101ff2:	4619      	mov	r1, r3
 8101ff4:	4820      	ldr	r0, [pc, #128]	@ (8102078 <HAL_TIM_MspPostInit+0xfc>)
 8101ff6:	f000 fea3 	bl	8102d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8101ffa:	2380      	movs	r3, #128	@ 0x80
 8101ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ffe:	2302      	movs	r3, #2
 8102000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102002:	2300      	movs	r3, #0
 8102004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102006:	2300      	movs	r3, #0
 8102008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 810200a:	2303      	movs	r3, #3
 810200c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 810200e:	f107 0314 	add.w	r3, r7, #20
 8102012:	4619      	mov	r1, r3
 8102014:	4819      	ldr	r0, [pc, #100]	@ (810207c <HAL_TIM_MspPostInit+0x100>)
 8102016:	f000 fe93 	bl	8102d40 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 810201a:	e024      	b.n	8102066 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	681b      	ldr	r3, [r3, #0]
 8102020:	4a17      	ldr	r2, [pc, #92]	@ (8102080 <HAL_TIM_MspPostInit+0x104>)
 8102022:	4293      	cmp	r3, r2
 8102024:	d11f      	bne.n	8102066 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102026:	4b13      	ldr	r3, [pc, #76]	@ (8102074 <HAL_TIM_MspPostInit+0xf8>)
 8102028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810202c:	4a11      	ldr	r2, [pc, #68]	@ (8102074 <HAL_TIM_MspPostInit+0xf8>)
 810202e:	f043 0320 	orr.w	r3, r3, #32
 8102032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102036:	4b0f      	ldr	r3, [pc, #60]	@ (8102074 <HAL_TIM_MspPostInit+0xf8>)
 8102038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810203c:	f003 0320 	and.w	r3, r3, #32
 8102040:	60bb      	str	r3, [r7, #8]
 8102042:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8102044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8102048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810204a:	2302      	movs	r3, #2
 810204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810204e:	2300      	movs	r3, #0
 8102050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102052:	2300      	movs	r3, #0
 8102054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8102056:	2309      	movs	r3, #9
 8102058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 810205a:	f107 0314 	add.w	r3, r7, #20
 810205e:	4619      	mov	r1, r3
 8102060:	4808      	ldr	r0, [pc, #32]	@ (8102084 <HAL_TIM_MspPostInit+0x108>)
 8102062:	f000 fe6d 	bl	8102d40 <HAL_GPIO_Init>
}
 8102066:	bf00      	nop
 8102068:	3728      	adds	r7, #40	@ 0x28
 810206a:	46bd      	mov	sp, r7
 810206c:	bd80      	pop	{r7, pc}
 810206e:	bf00      	nop
 8102070:	40010400 	.word	0x40010400
 8102074:	58024400 	.word	0x58024400
 8102078:	58020800 	.word	0x58020800
 810207c:	58022400 	.word	0x58022400
 8102080:	40001c00 	.word	0x40001c00
 8102084:	58021400 	.word	0x58021400

08102088 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8102088:	b580      	push	{r7, lr}
 810208a:	b0c2      	sub	sp, #264	@ 0x108
 810208c:	af00      	add	r7, sp, #0
 810208e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8102092:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8102096:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102098:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810209c:	2200      	movs	r2, #0
 810209e:	601a      	str	r2, [r3, #0]
 81020a0:	605a      	str	r2, [r3, #4]
 81020a2:	609a      	str	r2, [r3, #8]
 81020a4:	60da      	str	r2, [r3, #12]
 81020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81020a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81020ac:	22c8      	movs	r2, #200	@ 0xc8
 81020ae:	2100      	movs	r1, #0
 81020b0:	4618      	mov	r0, r3
 81020b2:	f007 fe43 	bl	8109d3c <memset>
  if(hpcd->Instance==USB_OTG_HS)
 81020b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81020ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	681b      	ldr	r3, [r3, #0]
 81020c2:	4a79      	ldr	r2, [pc, #484]	@ (81022a8 <HAL_PCD_MspInit+0x220>)
 81020c4:	4293      	cmp	r3, r2
 81020c6:	f040 80ea 	bne.w	810229e <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81020ca:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 81020ce:	f04f 0300 	mov.w	r3, #0
 81020d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 81020d6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 81020da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81020de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81020e2:	4618      	mov	r0, r3
 81020e4:	f001 fbd4 	bl	8103890 <HAL_RCCEx_PeriphCLKConfig>
 81020e8:	4603      	mov	r3, r0
 81020ea:	2b00      	cmp	r3, #0
 81020ec:	d001      	beq.n	81020f2 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 81020ee:	f7ff fc9b 	bl	8101a28 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 81020f2:	f001 f9b9 	bl	8103468 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81020f6:	4b6d      	ldr	r3, [pc, #436]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 81020f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020fc:	4a6b      	ldr	r2, [pc, #428]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 81020fe:	f043 0302 	orr.w	r3, r3, #2
 8102102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102106:	4b69      	ldr	r3, [pc, #420]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810210c:	f003 0302 	and.w	r3, r3, #2
 8102110:	627b      	str	r3, [r7, #36]	@ 0x24
 8102112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8102114:	4b65      	ldr	r3, [pc, #404]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810211a:	4a64      	ldr	r2, [pc, #400]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 810211c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102124:	4b61      	ldr	r3, [pc, #388]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810212a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810212e:	623b      	str	r3, [r7, #32]
 8102130:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102132:	4b5e      	ldr	r3, [pc, #376]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102138:	4a5c      	ldr	r2, [pc, #368]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 810213a:	f043 0304 	orr.w	r3, r3, #4
 810213e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102142:	4b5a      	ldr	r3, [pc, #360]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102148:	f003 0304 	and.w	r3, r3, #4
 810214c:	61fb      	str	r3, [r7, #28]
 810214e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8102150:	4b56      	ldr	r3, [pc, #344]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102156:	4a55      	ldr	r2, [pc, #340]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810215c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102160:	4b52      	ldr	r3, [pc, #328]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810216a:	61bb      	str	r3, [r7, #24]
 810216c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810216e:	4b4f      	ldr	r3, [pc, #316]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102174:	4a4d      	ldr	r2, [pc, #308]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102176:	f043 0301 	orr.w	r3, r3, #1
 810217a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810217e:	4b4b      	ldr	r3, [pc, #300]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102184:	f003 0301 	and.w	r3, r3, #1
 8102188:	617b      	str	r3, [r7, #20]
 810218a:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 810218c:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8102190:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102194:	2302      	movs	r3, #2
 8102196:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810219a:	2300      	movs	r3, #0
 810219c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81021a0:	2302      	movs	r3, #2
 81021a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81021a6:	230a      	movs	r3, #10
 81021a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81021ac:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81021b0:	4619      	mov	r1, r3
 81021b2:	483f      	ldr	r0, [pc, #252]	@ (81022b0 <HAL_PCD_MspInit+0x228>)
 81021b4:	f000 fdc4 	bl	8102d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 81021b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81021bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021c0:	2302      	movs	r3, #2
 81021c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021c6:	2300      	movs	r3, #0
 81021c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81021cc:	2302      	movs	r3, #2
 81021ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81021d2:	230a      	movs	r3, #10
 81021d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 81021d8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81021dc:	4619      	mov	r1, r3
 81021de:	4835      	ldr	r0, [pc, #212]	@ (81022b4 <HAL_PCD_MspInit+0x22c>)
 81021e0:	f000 fdae 	bl	8102d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 81021e4:	2301      	movs	r3, #1
 81021e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021ea:	2302      	movs	r3, #2
 81021ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021f0:	2300      	movs	r3, #0
 81021f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81021f6:	2302      	movs	r3, #2
 81021f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81021fc:	230a      	movs	r3, #10
 81021fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8102202:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102206:	4619      	mov	r1, r3
 8102208:	482b      	ldr	r0, [pc, #172]	@ (81022b8 <HAL_PCD_MspInit+0x230>)
 810220a:	f000 fd99 	bl	8102d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 810220e:	2310      	movs	r3, #16
 8102210:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102214:	2302      	movs	r3, #2
 8102216:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810221a:	2300      	movs	r3, #0
 810221c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102220:	2302      	movs	r3, #2
 8102222:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102226:	230a      	movs	r3, #10
 8102228:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 810222c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102230:	4619      	mov	r1, r3
 8102232:	4822      	ldr	r0, [pc, #136]	@ (81022bc <HAL_PCD_MspInit+0x234>)
 8102234:	f000 fd84 	bl	8102d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8102238:	2328      	movs	r3, #40	@ 0x28
 810223a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810223e:	2302      	movs	r3, #2
 8102240:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102244:	2300      	movs	r3, #0
 8102246:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810224a:	2302      	movs	r3, #2
 810224c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102250:	230a      	movs	r3, #10
 8102252:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102256:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810225a:	4619      	mov	r1, r3
 810225c:	4818      	ldr	r0, [pc, #96]	@ (81022c0 <HAL_PCD_MspInit+0x238>)
 810225e:	f000 fd6f 	bl	8102d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8102262:	4b12      	ldr	r3, [pc, #72]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102264:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102268:	4a10      	ldr	r2, [pc, #64]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 810226a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810226e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102272:	4b0e      	ldr	r3, [pc, #56]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810227c:	613b      	str	r3, [r7, #16]
 810227e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8102280:	4b0a      	ldr	r3, [pc, #40]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102286:	4a09      	ldr	r2, [pc, #36]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102288:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810228c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102290:	4b06      	ldr	r3, [pc, #24]	@ (81022ac <HAL_PCD_MspInit+0x224>)
 8102292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102296:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810229a:	60fb      	str	r3, [r7, #12]
 810229c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 810229e:	bf00      	nop
 81022a0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 81022a4:	46bd      	mov	sp, r7
 81022a6:	bd80      	pop	{r7, pc}
 81022a8:	40040000 	.word	0x40040000
 81022ac:	58024400 	.word	0x58024400
 81022b0:	58020400 	.word	0x58020400
 81022b4:	58022000 	.word	0x58022000
 81022b8:	58020800 	.word	0x58020800
 81022bc:	58021c00 	.word	0x58021c00
 81022c0:	58020000 	.word	0x58020000

081022c4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 81022c4:	b580      	push	{r7, lr}
 81022c6:	b0bc      	sub	sp, #240	@ 0xf0
 81022c8:	af00      	add	r7, sp, #0
 81022ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81022cc:	f107 0310 	add.w	r3, r7, #16
 81022d0:	22c8      	movs	r2, #200	@ 0xc8
 81022d2:	2100      	movs	r1, #0
 81022d4:	4618      	mov	r0, r3
 81022d6:	f007 fd31 	bl	8109d3c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	681b      	ldr	r3, [r3, #0]
 81022de:	4a4f      	ldr	r2, [pc, #316]	@ (810241c <HAL_SAI_MspInit+0x158>)
 81022e0:	4293      	cmp	r3, r2
 81022e2:	d153      	bne.n	810238c <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81022e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81022e8:	f04f 0300 	mov.w	r3, #0
 81022ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81022f0:	2300      	movs	r3, #0
 81022f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81022f4:	f107 0310 	add.w	r3, r7, #16
 81022f8:	4618      	mov	r0, r3
 81022fa:	f001 fac9 	bl	8103890 <HAL_RCCEx_PeriphCLKConfig>
 81022fe:	4603      	mov	r3, r0
 8102300:	2b00      	cmp	r3, #0
 8102302:	d001      	beq.n	8102308 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8102304:	f7ff fb90 	bl	8101a28 <Error_Handler>
    }

    if (SAI1_client == 0)
 8102308:	4b45      	ldr	r3, [pc, #276]	@ (8102420 <HAL_SAI_MspInit+0x15c>)
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	2b00      	cmp	r3, #0
 810230e:	d10e      	bne.n	810232e <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8102310:	4b44      	ldr	r3, [pc, #272]	@ (8102424 <HAL_SAI_MspInit+0x160>)
 8102312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102316:	4a43      	ldr	r2, [pc, #268]	@ (8102424 <HAL_SAI_MspInit+0x160>)
 8102318:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810231c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102320:	4b40      	ldr	r3, [pc, #256]	@ (8102424 <HAL_SAI_MspInit+0x160>)
 8102322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810232a:	60fb      	str	r3, [r7, #12]
 810232c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 810232e:	4b3c      	ldr	r3, [pc, #240]	@ (8102420 <HAL_SAI_MspInit+0x15c>)
 8102330:	681b      	ldr	r3, [r3, #0]
 8102332:	3301      	adds	r3, #1
 8102334:	4a3a      	ldr	r2, [pc, #232]	@ (8102420 <HAL_SAI_MspInit+0x15c>)
 8102336:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8102338:	2370      	movs	r3, #112	@ 0x70
 810233a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810233e:	2302      	movs	r3, #2
 8102340:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102344:	2300      	movs	r3, #0
 8102346:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810234a:	2300      	movs	r3, #0
 810234c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102350:	2306      	movs	r3, #6
 8102352:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102356:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810235a:	4619      	mov	r1, r3
 810235c:	4832      	ldr	r0, [pc, #200]	@ (8102428 <HAL_SAI_MspInit+0x164>)
 810235e:	f000 fcef 	bl	8102d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8102362:	2380      	movs	r3, #128	@ 0x80
 8102364:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102368:	2302      	movs	r3, #2
 810236a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810236e:	2300      	movs	r3, #0
 8102370:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102374:	2300      	movs	r3, #0
 8102376:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810237a:	2306      	movs	r3, #6
 810237c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 8102380:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8102384:	4619      	mov	r1, r3
 8102386:	4829      	ldr	r0, [pc, #164]	@ (810242c <HAL_SAI_MspInit+0x168>)
 8102388:	f000 fcda 	bl	8102d40 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	681b      	ldr	r3, [r3, #0]
 8102390:	4a27      	ldr	r2, [pc, #156]	@ (8102430 <HAL_SAI_MspInit+0x16c>)
 8102392:	4293      	cmp	r3, r2
 8102394:	d13e      	bne.n	8102414 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8102396:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810239a:	f04f 0300 	mov.w	r3, #0
 810239e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81023a2:	2300      	movs	r3, #0
 81023a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81023a6:	f107 0310 	add.w	r3, r7, #16
 81023aa:	4618      	mov	r0, r3
 81023ac:	f001 fa70 	bl	8103890 <HAL_RCCEx_PeriphCLKConfig>
 81023b0:	4603      	mov	r3, r0
 81023b2:	2b00      	cmp	r3, #0
 81023b4:	d001      	beq.n	81023ba <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 81023b6:	f7ff fb37 	bl	8101a28 <Error_Handler>
    }

      if (SAI1_client == 0)
 81023ba:	4b19      	ldr	r3, [pc, #100]	@ (8102420 <HAL_SAI_MspInit+0x15c>)
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	2b00      	cmp	r3, #0
 81023c0:	d10e      	bne.n	81023e0 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81023c2:	4b18      	ldr	r3, [pc, #96]	@ (8102424 <HAL_SAI_MspInit+0x160>)
 81023c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81023c8:	4a16      	ldr	r2, [pc, #88]	@ (8102424 <HAL_SAI_MspInit+0x160>)
 81023ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81023ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81023d2:	4b14      	ldr	r3, [pc, #80]	@ (8102424 <HAL_SAI_MspInit+0x160>)
 81023d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81023d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81023dc:	60bb      	str	r3, [r7, #8]
 81023de:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 81023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8102420 <HAL_SAI_MspInit+0x15c>)
 81023e2:	681b      	ldr	r3, [r3, #0]
 81023e4:	3301      	adds	r3, #1
 81023e6:	4a0e      	ldr	r2, [pc, #56]	@ (8102420 <HAL_SAI_MspInit+0x15c>)
 81023e8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 81023ea:	2308      	movs	r3, #8
 81023ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023f0:	2302      	movs	r3, #2
 81023f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023f6:	2300      	movs	r3, #0
 81023f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81023fc:	2300      	movs	r3, #0
 81023fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102402:	2306      	movs	r3, #6
 8102404:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8102408:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810240c:	4619      	mov	r1, r3
 810240e:	4806      	ldr	r0, [pc, #24]	@ (8102428 <HAL_SAI_MspInit+0x164>)
 8102410:	f000 fc96 	bl	8102d40 <HAL_GPIO_Init>

    }
}
 8102414:	bf00      	nop
 8102416:	37f0      	adds	r7, #240	@ 0xf0
 8102418:	46bd      	mov	sp, r7
 810241a:	bd80      	pop	{r7, pc}
 810241c:	40015804 	.word	0x40015804
 8102420:	10000948 	.word	0x10000948
 8102424:	58024400 	.word	0x58024400
 8102428:	58021000 	.word	0x58021000
 810242c:	58021800 	.word	0x58021800
 8102430:	40015824 	.word	0x40015824

08102434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102434:	b580      	push	{r7, lr}
 8102436:	b090      	sub	sp, #64	@ 0x40
 8102438:	af00      	add	r7, sp, #0
 810243a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	2b0f      	cmp	r3, #15
 8102440:	d827      	bhi.n	8102492 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8102442:	2200      	movs	r2, #0
 8102444:	6879      	ldr	r1, [r7, #4]
 8102446:	201d      	movs	r0, #29
 8102448:	f000 fc40 	bl	8102ccc <HAL_NVIC_SetPriority>

     /* Enable the TIM3 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 810244c:	201d      	movs	r0, #29
 810244e:	f000 fc57 	bl	8102d00 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8102452:	4a29      	ldr	r2, [pc, #164]	@ (81024f8 <HAL_InitTick+0xc4>)
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8102458:	4b28      	ldr	r3, [pc, #160]	@ (81024fc <HAL_InitTick+0xc8>)
 810245a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810245e:	4a27      	ldr	r2, [pc, #156]	@ (81024fc <HAL_InitTick+0xc8>)
 8102460:	f043 0302 	orr.w	r3, r3, #2
 8102464:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102468:	4b24      	ldr	r3, [pc, #144]	@ (81024fc <HAL_InitTick+0xc8>)
 810246a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810246e:	f003 0302 	and.w	r3, r3, #2
 8102472:	60fb      	str	r3, [r7, #12]
 8102474:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8102476:	f107 0210 	add.w	r2, r7, #16
 810247a:	f107 0314 	add.w	r3, r7, #20
 810247e:	4611      	mov	r1, r2
 8102480:	4618      	mov	r0, r3
 8102482:	f001 f9c3 	bl	810380c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8102486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102488:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810248a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810248c:	2b00      	cmp	r3, #0
 810248e:	d106      	bne.n	810249e <HAL_InitTick+0x6a>
 8102490:	e001      	b.n	8102496 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8102492:	2301      	movs	r3, #1
 8102494:	e02b      	b.n	81024ee <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8102496:	f001 f9a3 	bl	81037e0 <HAL_RCC_GetPCLK1Freq>
 810249a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 810249c:	e004      	b.n	81024a8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 810249e:	f001 f99f 	bl	81037e0 <HAL_RCC_GetPCLK1Freq>
 81024a2:	4603      	mov	r3, r0
 81024a4:	005b      	lsls	r3, r3, #1
 81024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81024a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81024aa:	4a15      	ldr	r2, [pc, #84]	@ (8102500 <HAL_InitTick+0xcc>)
 81024ac:	fba2 2303 	umull	r2, r3, r2, r3
 81024b0:	0c9b      	lsrs	r3, r3, #18
 81024b2:	3b01      	subs	r3, #1
 81024b4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 81024b6:	4b13      	ldr	r3, [pc, #76]	@ (8102504 <HAL_InitTick+0xd0>)
 81024b8:	4a13      	ldr	r2, [pc, #76]	@ (8102508 <HAL_InitTick+0xd4>)
 81024ba:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 81024bc:	4b11      	ldr	r3, [pc, #68]	@ (8102504 <HAL_InitTick+0xd0>)
 81024be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81024c2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 81024c4:	4a0f      	ldr	r2, [pc, #60]	@ (8102504 <HAL_InitTick+0xd0>)
 81024c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81024c8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 81024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8102504 <HAL_InitTick+0xd0>)
 81024cc:	2200      	movs	r2, #0
 81024ce:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8102504 <HAL_InitTick+0xd0>)
 81024d2:	2200      	movs	r2, #0
 81024d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 81024d6:	480b      	ldr	r0, [pc, #44]	@ (8102504 <HAL_InitTick+0xd0>)
 81024d8:	f005 fb93 	bl	8107c02 <HAL_TIM_Base_Init>
 81024dc:	4603      	mov	r3, r0
 81024de:	2b00      	cmp	r3, #0
 81024e0:	d104      	bne.n	81024ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 81024e2:	4808      	ldr	r0, [pc, #32]	@ (8102504 <HAL_InitTick+0xd0>)
 81024e4:	f005 fbe4 	bl	8107cb0 <HAL_TIM_Base_Start_IT>
 81024e8:	4603      	mov	r3, r0
 81024ea:	e000      	b.n	81024ee <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81024ec:	2301      	movs	r3, #1
}
 81024ee:	4618      	mov	r0, r3
 81024f0:	3740      	adds	r7, #64	@ 0x40
 81024f2:	46bd      	mov	sp, r7
 81024f4:	bd80      	pop	{r7, pc}
 81024f6:	bf00      	nop
 81024f8:	10000008 	.word	0x10000008
 81024fc:	58024400 	.word	0x58024400
 8102500:	431bde83 	.word	0x431bde83
 8102504:	1000094c 	.word	0x1000094c
 8102508:	40000400 	.word	0x40000400

0810250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810250c:	b480      	push	{r7}
 810250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102510:	bf00      	nop
 8102512:	e7fd      	b.n	8102510 <NMI_Handler+0x4>

08102514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102514:	b480      	push	{r7}
 8102516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102518:	bf00      	nop
 810251a:	e7fd      	b.n	8102518 <HardFault_Handler+0x4>

0810251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810251c:	b480      	push	{r7}
 810251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102520:	bf00      	nop
 8102522:	e7fd      	b.n	8102520 <MemManage_Handler+0x4>

08102524 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102524:	b480      	push	{r7}
 8102526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102528:	bf00      	nop
 810252a:	e7fd      	b.n	8102528 <BusFault_Handler+0x4>

0810252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810252c:	b480      	push	{r7}
 810252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102530:	bf00      	nop
 8102532:	e7fd      	b.n	8102530 <UsageFault_Handler+0x4>

08102534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102534:	b480      	push	{r7}
 8102536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102538:	bf00      	nop
 810253a:	46bd      	mov	sp, r7
 810253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102540:	4770      	bx	lr

08102542 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8102542:	b580      	push	{r7, lr}
 8102544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8102546:	2080      	movs	r0, #128	@ 0x80
 8102548:	f000 fdaa 	bl	81030a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 810254c:	bf00      	nop
 810254e:	bd80      	pop	{r7, pc}

08102550 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8102550:	b580      	push	{r7, lr}
 8102552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8102554:	4802      	ldr	r0, [pc, #8]	@ (8102560 <TIM3_IRQHandler+0x10>)
 8102556:	f005 fc7a 	bl	8107e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 810255a:	bf00      	nop
 810255c:	bd80      	pop	{r7, pc}
 810255e:	bf00      	nop
 8102560:	1000094c 	.word	0x1000094c

08102564 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8102564:	b580      	push	{r7, lr}
 8102566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8102568:	4802      	ldr	r0, [pc, #8]	@ (8102574 <CEC_IRQHandler+0x10>)
 810256a:	f000 f9fb 	bl	8102964 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 810256e:	bf00      	nop
 8102570:	bd80      	pop	{r7, pc}
 8102572:	bf00      	nop
 8102574:	1000009c 	.word	0x1000009c

08102578 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102578:	b580      	push	{r7, lr}
 810257a:	b086      	sub	sp, #24
 810257c:	af00      	add	r7, sp, #0
 810257e:	60f8      	str	r0, [r7, #12]
 8102580:	60b9      	str	r1, [r7, #8]
 8102582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102584:	2300      	movs	r3, #0
 8102586:	617b      	str	r3, [r7, #20]
 8102588:	e00a      	b.n	81025a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 810258a:	f3af 8000 	nop.w
 810258e:	4601      	mov	r1, r0
 8102590:	68bb      	ldr	r3, [r7, #8]
 8102592:	1c5a      	adds	r2, r3, #1
 8102594:	60ba      	str	r2, [r7, #8]
 8102596:	b2ca      	uxtb	r2, r1
 8102598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810259a:	697b      	ldr	r3, [r7, #20]
 810259c:	3301      	adds	r3, #1
 810259e:	617b      	str	r3, [r7, #20]
 81025a0:	697a      	ldr	r2, [r7, #20]
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	429a      	cmp	r2, r3
 81025a6:	dbf0      	blt.n	810258a <_read+0x12>
  }

  return len;
 81025a8:	687b      	ldr	r3, [r7, #4]
}
 81025aa:	4618      	mov	r0, r3
 81025ac:	3718      	adds	r7, #24
 81025ae:	46bd      	mov	sp, r7
 81025b0:	bd80      	pop	{r7, pc}

081025b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81025b2:	b580      	push	{r7, lr}
 81025b4:	b086      	sub	sp, #24
 81025b6:	af00      	add	r7, sp, #0
 81025b8:	60f8      	str	r0, [r7, #12]
 81025ba:	60b9      	str	r1, [r7, #8]
 81025bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81025be:	2300      	movs	r3, #0
 81025c0:	617b      	str	r3, [r7, #20]
 81025c2:	e009      	b.n	81025d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 81025c4:	68bb      	ldr	r3, [r7, #8]
 81025c6:	1c5a      	adds	r2, r3, #1
 81025c8:	60ba      	str	r2, [r7, #8]
 81025ca:	781b      	ldrb	r3, [r3, #0]
 81025cc:	4618      	mov	r0, r3
 81025ce:	f7fe f871 	bl	81006b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81025d2:	697b      	ldr	r3, [r7, #20]
 81025d4:	3301      	adds	r3, #1
 81025d6:	617b      	str	r3, [r7, #20]
 81025d8:	697a      	ldr	r2, [r7, #20]
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	429a      	cmp	r2, r3
 81025de:	dbf1      	blt.n	81025c4 <_write+0x12>
  }
  return len;
 81025e0:	687b      	ldr	r3, [r7, #4]
}
 81025e2:	4618      	mov	r0, r3
 81025e4:	3718      	adds	r7, #24
 81025e6:	46bd      	mov	sp, r7
 81025e8:	bd80      	pop	{r7, pc}

081025ea <_close>:

int _close(int file)
{
 81025ea:	b480      	push	{r7}
 81025ec:	b083      	sub	sp, #12
 81025ee:	af00      	add	r7, sp, #0
 81025f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81025f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 81025f6:	4618      	mov	r0, r3
 81025f8:	370c      	adds	r7, #12
 81025fa:	46bd      	mov	sp, r7
 81025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102600:	4770      	bx	lr

08102602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102602:	b480      	push	{r7}
 8102604:	b083      	sub	sp, #12
 8102606:	af00      	add	r7, sp, #0
 8102608:	6078      	str	r0, [r7, #4]
 810260a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 810260c:	683b      	ldr	r3, [r7, #0]
 810260e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8102612:	605a      	str	r2, [r3, #4]
  return 0;
 8102614:	2300      	movs	r3, #0
}
 8102616:	4618      	mov	r0, r3
 8102618:	370c      	adds	r7, #12
 810261a:	46bd      	mov	sp, r7
 810261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102620:	4770      	bx	lr

08102622 <_isatty>:

int _isatty(int file)
{
 8102622:	b480      	push	{r7}
 8102624:	b083      	sub	sp, #12
 8102626:	af00      	add	r7, sp, #0
 8102628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 810262a:	2301      	movs	r3, #1
}
 810262c:	4618      	mov	r0, r3
 810262e:	370c      	adds	r7, #12
 8102630:	46bd      	mov	sp, r7
 8102632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102636:	4770      	bx	lr

08102638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102638:	b480      	push	{r7}
 810263a:	b085      	sub	sp, #20
 810263c:	af00      	add	r7, sp, #0
 810263e:	60f8      	str	r0, [r7, #12]
 8102640:	60b9      	str	r1, [r7, #8]
 8102642:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8102644:	2300      	movs	r3, #0
}
 8102646:	4618      	mov	r0, r3
 8102648:	3714      	adds	r7, #20
 810264a:	46bd      	mov	sp, r7
 810264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102650:	4770      	bx	lr
	...

08102654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102654:	b580      	push	{r7, lr}
 8102656:	b086      	sub	sp, #24
 8102658:	af00      	add	r7, sp, #0
 810265a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810265c:	4a14      	ldr	r2, [pc, #80]	@ (81026b0 <_sbrk+0x5c>)
 810265e:	4b15      	ldr	r3, [pc, #84]	@ (81026b4 <_sbrk+0x60>)
 8102660:	1ad3      	subs	r3, r2, r3
 8102662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102664:	697b      	ldr	r3, [r7, #20]
 8102666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102668:	4b13      	ldr	r3, [pc, #76]	@ (81026b8 <_sbrk+0x64>)
 810266a:	681b      	ldr	r3, [r3, #0]
 810266c:	2b00      	cmp	r3, #0
 810266e:	d102      	bne.n	8102676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102670:	4b11      	ldr	r3, [pc, #68]	@ (81026b8 <_sbrk+0x64>)
 8102672:	4a12      	ldr	r2, [pc, #72]	@ (81026bc <_sbrk+0x68>)
 8102674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102676:	4b10      	ldr	r3, [pc, #64]	@ (81026b8 <_sbrk+0x64>)
 8102678:	681a      	ldr	r2, [r3, #0]
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	4413      	add	r3, r2
 810267e:	693a      	ldr	r2, [r7, #16]
 8102680:	429a      	cmp	r2, r3
 8102682:	d207      	bcs.n	8102694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102684:	f007 fba8 	bl	8109dd8 <__errno>
 8102688:	4603      	mov	r3, r0
 810268a:	220c      	movs	r2, #12
 810268c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810268e:	f04f 33ff 	mov.w	r3, #4294967295
 8102692:	e009      	b.n	81026a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102694:	4b08      	ldr	r3, [pc, #32]	@ (81026b8 <_sbrk+0x64>)
 8102696:	681b      	ldr	r3, [r3, #0]
 8102698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810269a:	4b07      	ldr	r3, [pc, #28]	@ (81026b8 <_sbrk+0x64>)
 810269c:	681a      	ldr	r2, [r3, #0]
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	4413      	add	r3, r2
 81026a2:	4a05      	ldr	r2, [pc, #20]	@ (81026b8 <_sbrk+0x64>)
 81026a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81026a6:	68fb      	ldr	r3, [r7, #12]
}
 81026a8:	4618      	mov	r0, r3
 81026aa:	3718      	adds	r7, #24
 81026ac:	46bd      	mov	sp, r7
 81026ae:	bd80      	pop	{r7, pc}
 81026b0:	10048000 	.word	0x10048000
 81026b4:	00000400 	.word	0x00000400
 81026b8:	10000998 	.word	0x10000998
 81026bc:	10000f78 	.word	0x10000f78

081026c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81026c0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81026fc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 81026c4:	f7fe f8b8 	bl	8100838 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81026c8:	f7fe f89e 	bl	8100808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81026cc:	480c      	ldr	r0, [pc, #48]	@ (8102700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81026ce:	490d      	ldr	r1, [pc, #52]	@ (8102704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8102708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81026d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81026d4:	e002      	b.n	81026dc <LoopCopyDataInit>

081026d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81026d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81026d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81026da:	3304      	adds	r3, #4

081026dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81026dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81026de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81026e0:	d3f9      	bcc.n	81026d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81026e2:	4a0a      	ldr	r2, [pc, #40]	@ (810270c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81026e4:	4c0a      	ldr	r4, [pc, #40]	@ (8102710 <LoopFillZerobss+0x22>)
  movs r3, #0
 81026e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81026e8:	e001      	b.n	81026ee <LoopFillZerobss>

081026ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81026ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81026ec:	3204      	adds	r2, #4

081026ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81026ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81026f0:	d3fb      	bcc.n	81026ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81026f2:	f007 fb77 	bl	8109de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81026f6:	f7fe fb9d 	bl	8100e34 <main>
  bx  lr
 81026fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81026fc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102700:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102704:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 8102708:	0810c9b0 	.word	0x0810c9b0
  ldr r2, =_sbss
 810270c:	1000006c 	.word	0x1000006c
  ldr r4, =_ebss
 8102710:	10000f78 	.word	0x10000f78

08102714 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102714:	e7fe      	b.n	8102714 <ADC3_IRQHandler>
	...

08102718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102718:	b580      	push	{r7, lr}
 810271a:	b082      	sub	sp, #8
 810271c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810271e:	4b28      	ldr	r3, [pc, #160]	@ (81027c0 <HAL_Init+0xa8>)
 8102720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102724:	4a26      	ldr	r2, [pc, #152]	@ (81027c0 <HAL_Init+0xa8>)
 8102726:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810272a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810272e:	4b24      	ldr	r3, [pc, #144]	@ (81027c0 <HAL_Init+0xa8>)
 8102730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102738:	603b      	str	r3, [r7, #0]
 810273a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810273c:	4b21      	ldr	r3, [pc, #132]	@ (81027c4 <HAL_Init+0xac>)
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8102744:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102748:	4a1e      	ldr	r2, [pc, #120]	@ (81027c4 <HAL_Init+0xac>)
 810274a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810274e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102750:	4b1c      	ldr	r3, [pc, #112]	@ (81027c4 <HAL_Init+0xac>)
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	4a1b      	ldr	r2, [pc, #108]	@ (81027c4 <HAL_Init+0xac>)
 8102756:	f043 0301 	orr.w	r3, r3, #1
 810275a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810275c:	2003      	movs	r0, #3
 810275e:	f000 faaa 	bl	8102cb6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102762:	f000 fe91 	bl	8103488 <HAL_RCC_GetSysClockFreq>
 8102766:	4602      	mov	r2, r0
 8102768:	4b15      	ldr	r3, [pc, #84]	@ (81027c0 <HAL_Init+0xa8>)
 810276a:	699b      	ldr	r3, [r3, #24]
 810276c:	0a1b      	lsrs	r3, r3, #8
 810276e:	f003 030f 	and.w	r3, r3, #15
 8102772:	4915      	ldr	r1, [pc, #84]	@ (81027c8 <HAL_Init+0xb0>)
 8102774:	5ccb      	ldrb	r3, [r1, r3]
 8102776:	f003 031f 	and.w	r3, r3, #31
 810277a:	fa22 f303 	lsr.w	r3, r2, r3
 810277e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102780:	4b0f      	ldr	r3, [pc, #60]	@ (81027c0 <HAL_Init+0xa8>)
 8102782:	699b      	ldr	r3, [r3, #24]
 8102784:	f003 030f 	and.w	r3, r3, #15
 8102788:	4a0f      	ldr	r2, [pc, #60]	@ (81027c8 <HAL_Init+0xb0>)
 810278a:	5cd3      	ldrb	r3, [r2, r3]
 810278c:	f003 031f 	and.w	r3, r3, #31
 8102790:	687a      	ldr	r2, [r7, #4]
 8102792:	fa22 f303 	lsr.w	r3, r2, r3
 8102796:	4a0d      	ldr	r2, [pc, #52]	@ (81027cc <HAL_Init+0xb4>)
 8102798:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810279a:	4b0c      	ldr	r3, [pc, #48]	@ (81027cc <HAL_Init+0xb4>)
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	4a0c      	ldr	r2, [pc, #48]	@ (81027d0 <HAL_Init+0xb8>)
 81027a0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81027a2:	200f      	movs	r0, #15
 81027a4:	f7ff fe46 	bl	8102434 <HAL_InitTick>
 81027a8:	4603      	mov	r3, r0
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	d001      	beq.n	81027b2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81027ae:	2301      	movs	r3, #1
 81027b0:	e002      	b.n	81027b8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81027b2:	f7ff f93f 	bl	8101a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81027b6:	2300      	movs	r3, #0
}
 81027b8:	4618      	mov	r0, r3
 81027ba:	3708      	adds	r7, #8
 81027bc:	46bd      	mov	sp, r7
 81027be:	bd80      	pop	{r7, pc}
 81027c0:	58024400 	.word	0x58024400
 81027c4:	40024400 	.word	0x40024400
 81027c8:	0810c95c 	.word	0x0810c95c
 81027cc:	10000004 	.word	0x10000004
 81027d0:	10000000 	.word	0x10000000

081027d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81027d4:	b480      	push	{r7}
 81027d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81027d8:	4b06      	ldr	r3, [pc, #24]	@ (81027f4 <HAL_IncTick+0x20>)
 81027da:	781b      	ldrb	r3, [r3, #0]
 81027dc:	461a      	mov	r2, r3
 81027de:	4b06      	ldr	r3, [pc, #24]	@ (81027f8 <HAL_IncTick+0x24>)
 81027e0:	681b      	ldr	r3, [r3, #0]
 81027e2:	4413      	add	r3, r2
 81027e4:	4a04      	ldr	r2, [pc, #16]	@ (81027f8 <HAL_IncTick+0x24>)
 81027e6:	6013      	str	r3, [r2, #0]
}
 81027e8:	bf00      	nop
 81027ea:	46bd      	mov	sp, r7
 81027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027f0:	4770      	bx	lr
 81027f2:	bf00      	nop
 81027f4:	1000000c 	.word	0x1000000c
 81027f8:	1000099c 	.word	0x1000099c

081027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81027fc:	b480      	push	{r7}
 81027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8102800:	4b03      	ldr	r3, [pc, #12]	@ (8102810 <HAL_GetTick+0x14>)
 8102802:	681b      	ldr	r3, [r3, #0]
}
 8102804:	4618      	mov	r0, r3
 8102806:	46bd      	mov	sp, r7
 8102808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810280c:	4770      	bx	lr
 810280e:	bf00      	nop
 8102810:	1000099c 	.word	0x1000099c

08102814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102814:	b580      	push	{r7, lr}
 8102816:	b084      	sub	sp, #16
 8102818:	af00      	add	r7, sp, #0
 810281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810281c:	f7ff ffee 	bl	81027fc <HAL_GetTick>
 8102820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102826:	68fb      	ldr	r3, [r7, #12]
 8102828:	f1b3 3fff 	cmp.w	r3, #4294967295
 810282c:	d005      	beq.n	810283a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810282e:	4b0a      	ldr	r3, [pc, #40]	@ (8102858 <HAL_Delay+0x44>)
 8102830:	781b      	ldrb	r3, [r3, #0]
 8102832:	461a      	mov	r2, r3
 8102834:	68fb      	ldr	r3, [r7, #12]
 8102836:	4413      	add	r3, r2
 8102838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810283a:	bf00      	nop
 810283c:	f7ff ffde 	bl	81027fc <HAL_GetTick>
 8102840:	4602      	mov	r2, r0
 8102842:	68bb      	ldr	r3, [r7, #8]
 8102844:	1ad3      	subs	r3, r2, r3
 8102846:	68fa      	ldr	r2, [r7, #12]
 8102848:	429a      	cmp	r2, r3
 810284a:	d8f7      	bhi.n	810283c <HAL_Delay+0x28>
  {
  }
}
 810284c:	bf00      	nop
 810284e:	bf00      	nop
 8102850:	3710      	adds	r7, #16
 8102852:	46bd      	mov	sp, r7
 8102854:	bd80      	pop	{r7, pc}
 8102856:	bf00      	nop
 8102858:	1000000c 	.word	0x1000000c

0810285c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810285c:	b480      	push	{r7}
 810285e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102860:	4b03      	ldr	r3, [pc, #12]	@ (8102870 <HAL_GetREVID+0x14>)
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	0c1b      	lsrs	r3, r3, #16
}
 8102866:	4618      	mov	r0, r3
 8102868:	46bd      	mov	sp, r7
 810286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810286e:	4770      	bx	lr
 8102870:	5c001000 	.word	0x5c001000

08102874 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8102874:	b480      	push	{r7}
 8102876:	b083      	sub	sp, #12
 8102878:	af00      	add	r7, sp, #0
 810287a:	6078      	str	r0, [r7, #4]
 810287c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810287e:	4b07      	ldr	r3, [pc, #28]	@ (810289c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102880:	685a      	ldr	r2, [r3, #4]
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	43db      	mvns	r3, r3
 8102886:	401a      	ands	r2, r3
 8102888:	4904      	ldr	r1, [pc, #16]	@ (810289c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 810288a:	683b      	ldr	r3, [r7, #0]
 810288c:	4313      	orrs	r3, r2
 810288e:	604b      	str	r3, [r1, #4]
}
 8102890:	bf00      	nop
 8102892:	370c      	adds	r7, #12
 8102894:	46bd      	mov	sp, r7
 8102896:	f85d 7b04 	ldr.w	r7, [sp], #4
 810289a:	4770      	bx	lr
 810289c:	58000400 	.word	0x58000400

081028a0 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 81028a0:	b580      	push	{r7, lr}
 81028a2:	b082      	sub	sp, #8
 81028a4:	af00      	add	r7, sp, #0
 81028a6:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	2b00      	cmp	r3, #0
 81028ac:	d003      	beq.n	81028b6 <HAL_CEC_Init+0x16>
 81028ae:	687b      	ldr	r3, [r7, #4]
 81028b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81028b2:	2b00      	cmp	r3, #0
 81028b4:	d101      	bne.n	81028ba <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 81028b6:	2301      	movs	r3, #1
 81028b8:	e050      	b.n	810295c <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81028be:	2b00      	cmp	r3, #0
 81028c0:	d106      	bne.n	81028d0 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	2200      	movs	r2, #0
 81028c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 81028ca:	6878      	ldr	r0, [r7, #4]
 81028cc:	f7ff f8d8 	bl	8101a80 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 81028d0:	687b      	ldr	r3, [r7, #4]
 81028d2:	2224      	movs	r2, #36	@ 0x24
 81028d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	681b      	ldr	r3, [r3, #0]
 81028da:	681a      	ldr	r2, [r3, #0]
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	681b      	ldr	r3, [r3, #0]
 81028e0:	f022 0201 	bic.w	r2, r2, #1
 81028e4:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	685a      	ldr	r2, [r3, #4]
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	689b      	ldr	r3, [r3, #8]
 81028ee:	431a      	orrs	r2, r3
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	68db      	ldr	r3, [r3, #12]
 81028f4:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81028f6:	687b      	ldr	r3, [r7, #4]
 81028f8:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81028fa:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81028fc:	687b      	ldr	r3, [r7, #4]
 81028fe:	695b      	ldr	r3, [r3, #20]
 8102900:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102906:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 810290c:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8102912:	041b      	lsls	r3, r3, #16
 8102914:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810291c:	687b      	ldr	r3, [r7, #4]
 810291e:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102920:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102922:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	695b      	ldr	r3, [r3, #20]
 810292a:	687a      	ldr	r2, [r7, #4]
 810292c:	6812      	ldr	r2, [r2, #0]
 810292e:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8102932:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8102936:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	681a      	ldr	r2, [r3, #0]
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	681b      	ldr	r3, [r3, #0]
 8102942:	f042 0201 	orr.w	r2, r2, #1
 8102946:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102948:	687b      	ldr	r3, [r7, #4]
 810294a:	2200      	movs	r2, #0
 810294c:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 810294e:	687b      	ldr	r3, [r7, #4]
 8102950:	2220      	movs	r2, #32
 8102952:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	2220      	movs	r2, #32
 8102958:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810295a:	2300      	movs	r3, #0
}
 810295c:	4618      	mov	r0, r3
 810295e:	3708      	adds	r7, #8
 8102960:	46bd      	mov	sp, r7
 8102962:	bd80      	pop	{r7, pc}

08102964 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8102964:	b580      	push	{r7, lr}
 8102966:	b084      	sub	sp, #16
 8102968:	af00      	add	r7, sp, #0
 810296a:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	681b      	ldr	r3, [r3, #0]
 8102970:	691b      	ldr	r3, [r3, #16]
 8102972:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8102974:	68fb      	ldr	r3, [r7, #12]
 8102976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810297a:	2b00      	cmp	r3, #0
 810297c:	d00a      	beq.n	8102994 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 810297e:	687b      	ldr	r3, [r7, #4]
 8102980:	2280      	movs	r2, #128	@ 0x80
 8102982:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	691a      	ldr	r2, [r3, #16]
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	681b      	ldr	r3, [r3, #0]
 810298e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8102992:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8102994:	68fb      	ldr	r3, [r7, #12]
 8102996:	f003 0301 	and.w	r3, r3, #1
 810299a:	2b00      	cmp	r3, #0
 810299c:	d01c      	beq.n	81029d8 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	2222      	movs	r2, #34	@ 0x22
 81029a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 81029a4:	687b      	ldr	r3, [r7, #4]
 81029a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81029a8:	3301      	adds	r3, #1
 81029aa:	b29a      	uxth	r2, r3
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 81029b0:	687b      	ldr	r3, [r7, #4]
 81029b2:	681b      	ldr	r3, [r3, #0]
 81029b4:	68da      	ldr	r2, [r3, #12]
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81029ba:	b2d2      	uxtb	r2, r2
 81029bc:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81029c2:	1c5a      	adds	r2, r3, #1
 81029c4:	687b      	ldr	r3, [r7, #4]
 81029c6:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	691a      	ldr	r2, [r3, #16]
 81029ce:	687b      	ldr	r3, [r7, #4]
 81029d0:	681b      	ldr	r3, [r3, #0]
 81029d2:	f042 0201 	orr.w	r2, r2, #1
 81029d6:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 81029d8:	68fb      	ldr	r3, [r7, #12]
 81029da:	f003 0302 	and.w	r3, r3, #2
 81029de:	2b00      	cmp	r3, #0
 81029e0:	d01e      	beq.n	8102a20 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	681b      	ldr	r3, [r3, #0]
 81029e6:	691a      	ldr	r2, [r3, #16]
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	f042 0202 	orr.w	r2, r2, #2
 81029f0:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	2220      	movs	r2, #32
 81029f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	2200      	movs	r2, #0
 81029fc:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 81029fe:	687b      	ldr	r3, [r7, #4]
 8102a00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8102a06:	425b      	negs	r3, r3
 8102a08:	441a      	add	r2, r3
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8102a0e:	687b      	ldr	r3, [r7, #4]
 8102a10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8102a12:	4619      	mov	r1, r3
 8102a14:	6878      	ldr	r0, [r7, #4]
 8102a16:	f000 f88c 	bl	8102b32 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	2200      	movs	r2, #0
 8102a1e:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8102a20:	68fb      	ldr	r3, [r7, #12]
 8102a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102a26:	2b00      	cmp	r3, #0
 8102a28:	d024      	beq.n	8102a74 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8102a2e:	3b01      	subs	r3, #1
 8102a30:	b29a      	uxth	r2, r3
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8102a3a:	2b00      	cmp	r3, #0
 8102a3c:	d107      	bne.n	8102a4e <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	681a      	ldr	r2, [r3, #0]
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	681b      	ldr	r3, [r3, #0]
 8102a48:	f042 0204 	orr.w	r2, r2, #4
 8102a4c:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8102a4e:	687b      	ldr	r3, [r7, #4]
 8102a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a52:	781a      	ldrb	r2, [r3, #0]
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a5e:	1c5a      	adds	r2, r3, #1
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	691a      	ldr	r2, [r3, #16]
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	681b      	ldr	r3, [r3, #0]
 8102a6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8102a72:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8102a74:	68fb      	ldr	r3, [r7, #12]
 8102a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102a7a:	2b00      	cmp	r3, #0
 8102a7c:	d014      	beq.n	8102aa8 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	681b      	ldr	r3, [r3, #0]
 8102a82:	691a      	ldr	r2, [r3, #16]
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	681b      	ldr	r3, [r3, #0]
 8102a88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8102a8c:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	2220      	movs	r2, #32
 8102a92:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	2200      	movs	r2, #0
 8102a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	2200      	movs	r2, #0
 8102aa0:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8102aa2:	6878      	ldr	r0, [r7, #4]
 8102aa4:	f000 f83b 	bl	8102b1e <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8102aa8:	68fa      	ldr	r2, [r7, #12]
 8102aaa:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8102aae:	4013      	ands	r3, r2
 8102ab0:	2b00      	cmp	r3, #0
 8102ab2:	d030      	beq.n	8102b16 <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	68fa      	ldr	r2, [r7, #12]
 8102ab8:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	681b      	ldr	r3, [r3, #0]
 8102abe:	691b      	ldr	r3, [r3, #16]
 8102ac0:	687a      	ldr	r2, [r7, #4]
 8102ac2:	6812      	ldr	r2, [r2, #0]
 8102ac4:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 8102ac8:	f043 031c 	orr.w	r3, r3, #28
 8102acc:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8102ace:	68fb      	ldr	r3, [r7, #12]
 8102ad0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8102ad4:	2b00      	cmp	r3, #0
 8102ad6:	d00e      	beq.n	8102af6 <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8102ae0:	425b      	negs	r3, r3
 8102ae2:	441a      	add	r2, r3
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	2200      	movs	r2, #0
 8102aec:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	2220      	movs	r2, #32
 8102af2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8102af4:	e00c      	b.n	8102b10 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8102af6:	68fb      	ldr	r3, [r7, #12]
 8102af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102afc:	2b00      	cmp	r3, #0
 8102afe:	d107      	bne.n	8102b10 <HAL_CEC_IRQHandler+0x1ac>
 8102b00:	68fb      	ldr	r3, [r7, #12]
 8102b02:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8102b06:	2b00      	cmp	r3, #0
 8102b08:	d002      	beq.n	8102b10 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	2220      	movs	r2, #32
 8102b0e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8102b10:	6878      	ldr	r0, [r7, #4]
 8102b12:	f000 f819 	bl	8102b48 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8102b16:	bf00      	nop
 8102b18:	3710      	adds	r7, #16
 8102b1a:	46bd      	mov	sp, r7
 8102b1c:	bd80      	pop	{r7, pc}

08102b1e <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8102b1e:	b480      	push	{r7}
 8102b20:	b083      	sub	sp, #12
 8102b22:	af00      	add	r7, sp, #0
 8102b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8102b26:	bf00      	nop
 8102b28:	370c      	adds	r7, #12
 8102b2a:	46bd      	mov	sp, r7
 8102b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b30:	4770      	bx	lr

08102b32 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8102b32:	b480      	push	{r7}
 8102b34:	b083      	sub	sp, #12
 8102b36:	af00      	add	r7, sp, #0
 8102b38:	6078      	str	r0, [r7, #4]
 8102b3a:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8102b3c:	bf00      	nop
 8102b3e:	370c      	adds	r7, #12
 8102b40:	46bd      	mov	sp, r7
 8102b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b46:	4770      	bx	lr

08102b48 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8102b48:	b480      	push	{r7}
 8102b4a:	b083      	sub	sp, #12
 8102b4c:	af00      	add	r7, sp, #0
 8102b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8102b50:	bf00      	nop
 8102b52:	370c      	adds	r7, #12
 8102b54:	46bd      	mov	sp, r7
 8102b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b5a:	4770      	bx	lr

08102b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102b5c:	b480      	push	{r7}
 8102b5e:	b085      	sub	sp, #20
 8102b60:	af00      	add	r7, sp, #0
 8102b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	f003 0307 	and.w	r3, r3, #7
 8102b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8102ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8102b6e:	68db      	ldr	r3, [r3, #12]
 8102b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102b72:	68ba      	ldr	r2, [r7, #8]
 8102b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102b78:	4013      	ands	r3, r2
 8102b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102b7c:	68fb      	ldr	r3, [r7, #12]
 8102b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102b80:	68bb      	ldr	r3, [r7, #8]
 8102b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102b8e:	4a04      	ldr	r2, [pc, #16]	@ (8102ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8102b90:	68bb      	ldr	r3, [r7, #8]
 8102b92:	60d3      	str	r3, [r2, #12]
}
 8102b94:	bf00      	nop
 8102b96:	3714      	adds	r7, #20
 8102b98:	46bd      	mov	sp, r7
 8102b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b9e:	4770      	bx	lr
 8102ba0:	e000ed00 	.word	0xe000ed00

08102ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102ba4:	b480      	push	{r7}
 8102ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102ba8:	4b04      	ldr	r3, [pc, #16]	@ (8102bbc <__NVIC_GetPriorityGrouping+0x18>)
 8102baa:	68db      	ldr	r3, [r3, #12]
 8102bac:	0a1b      	lsrs	r3, r3, #8
 8102bae:	f003 0307 	and.w	r3, r3, #7
}
 8102bb2:	4618      	mov	r0, r3
 8102bb4:	46bd      	mov	sp, r7
 8102bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bba:	4770      	bx	lr
 8102bbc:	e000ed00 	.word	0xe000ed00

08102bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102bc0:	b480      	push	{r7}
 8102bc2:	b083      	sub	sp, #12
 8102bc4:	af00      	add	r7, sp, #0
 8102bc6:	4603      	mov	r3, r0
 8102bc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102bce:	2b00      	cmp	r3, #0
 8102bd0:	db0b      	blt.n	8102bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102bd2:	88fb      	ldrh	r3, [r7, #6]
 8102bd4:	f003 021f 	and.w	r2, r3, #31
 8102bd8:	4907      	ldr	r1, [pc, #28]	@ (8102bf8 <__NVIC_EnableIRQ+0x38>)
 8102bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102bde:	095b      	lsrs	r3, r3, #5
 8102be0:	2001      	movs	r0, #1
 8102be2:	fa00 f202 	lsl.w	r2, r0, r2
 8102be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102bea:	bf00      	nop
 8102bec:	370c      	adds	r7, #12
 8102bee:	46bd      	mov	sp, r7
 8102bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bf4:	4770      	bx	lr
 8102bf6:	bf00      	nop
 8102bf8:	e000e100 	.word	0xe000e100

08102bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102bfc:	b480      	push	{r7}
 8102bfe:	b083      	sub	sp, #12
 8102c00:	af00      	add	r7, sp, #0
 8102c02:	4603      	mov	r3, r0
 8102c04:	6039      	str	r1, [r7, #0]
 8102c06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102c0c:	2b00      	cmp	r3, #0
 8102c0e:	db0a      	blt.n	8102c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102c10:	683b      	ldr	r3, [r7, #0]
 8102c12:	b2da      	uxtb	r2, r3
 8102c14:	490c      	ldr	r1, [pc, #48]	@ (8102c48 <__NVIC_SetPriority+0x4c>)
 8102c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102c1a:	0112      	lsls	r2, r2, #4
 8102c1c:	b2d2      	uxtb	r2, r2
 8102c1e:	440b      	add	r3, r1
 8102c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102c24:	e00a      	b.n	8102c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102c26:	683b      	ldr	r3, [r7, #0]
 8102c28:	b2da      	uxtb	r2, r3
 8102c2a:	4908      	ldr	r1, [pc, #32]	@ (8102c4c <__NVIC_SetPriority+0x50>)
 8102c2c:	88fb      	ldrh	r3, [r7, #6]
 8102c2e:	f003 030f 	and.w	r3, r3, #15
 8102c32:	3b04      	subs	r3, #4
 8102c34:	0112      	lsls	r2, r2, #4
 8102c36:	b2d2      	uxtb	r2, r2
 8102c38:	440b      	add	r3, r1
 8102c3a:	761a      	strb	r2, [r3, #24]
}
 8102c3c:	bf00      	nop
 8102c3e:	370c      	adds	r7, #12
 8102c40:	46bd      	mov	sp, r7
 8102c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c46:	4770      	bx	lr
 8102c48:	e000e100 	.word	0xe000e100
 8102c4c:	e000ed00 	.word	0xe000ed00

08102c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102c50:	b480      	push	{r7}
 8102c52:	b089      	sub	sp, #36	@ 0x24
 8102c54:	af00      	add	r7, sp, #0
 8102c56:	60f8      	str	r0, [r7, #12]
 8102c58:	60b9      	str	r1, [r7, #8]
 8102c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102c5c:	68fb      	ldr	r3, [r7, #12]
 8102c5e:	f003 0307 	and.w	r3, r3, #7
 8102c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102c64:	69fb      	ldr	r3, [r7, #28]
 8102c66:	f1c3 0307 	rsb	r3, r3, #7
 8102c6a:	2b04      	cmp	r3, #4
 8102c6c:	bf28      	it	cs
 8102c6e:	2304      	movcs	r3, #4
 8102c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102c72:	69fb      	ldr	r3, [r7, #28]
 8102c74:	3304      	adds	r3, #4
 8102c76:	2b06      	cmp	r3, #6
 8102c78:	d902      	bls.n	8102c80 <NVIC_EncodePriority+0x30>
 8102c7a:	69fb      	ldr	r3, [r7, #28]
 8102c7c:	3b03      	subs	r3, #3
 8102c7e:	e000      	b.n	8102c82 <NVIC_EncodePriority+0x32>
 8102c80:	2300      	movs	r3, #0
 8102c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102c84:	f04f 32ff 	mov.w	r2, #4294967295
 8102c88:	69bb      	ldr	r3, [r7, #24]
 8102c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8102c8e:	43da      	mvns	r2, r3
 8102c90:	68bb      	ldr	r3, [r7, #8]
 8102c92:	401a      	ands	r2, r3
 8102c94:	697b      	ldr	r3, [r7, #20]
 8102c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102c98:	f04f 31ff 	mov.w	r1, #4294967295
 8102c9c:	697b      	ldr	r3, [r7, #20]
 8102c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8102ca2:	43d9      	mvns	r1, r3
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102ca8:	4313      	orrs	r3, r2
         );
}
 8102caa:	4618      	mov	r0, r3
 8102cac:	3724      	adds	r7, #36	@ 0x24
 8102cae:	46bd      	mov	sp, r7
 8102cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cb4:	4770      	bx	lr

08102cb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102cb6:	b580      	push	{r7, lr}
 8102cb8:	b082      	sub	sp, #8
 8102cba:	af00      	add	r7, sp, #0
 8102cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102cbe:	6878      	ldr	r0, [r7, #4]
 8102cc0:	f7ff ff4c 	bl	8102b5c <__NVIC_SetPriorityGrouping>
}
 8102cc4:	bf00      	nop
 8102cc6:	3708      	adds	r7, #8
 8102cc8:	46bd      	mov	sp, r7
 8102cca:	bd80      	pop	{r7, pc}

08102ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102ccc:	b580      	push	{r7, lr}
 8102cce:	b086      	sub	sp, #24
 8102cd0:	af00      	add	r7, sp, #0
 8102cd2:	4603      	mov	r3, r0
 8102cd4:	60b9      	str	r1, [r7, #8]
 8102cd6:	607a      	str	r2, [r7, #4]
 8102cd8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102cda:	f7ff ff63 	bl	8102ba4 <__NVIC_GetPriorityGrouping>
 8102cde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102ce0:	687a      	ldr	r2, [r7, #4]
 8102ce2:	68b9      	ldr	r1, [r7, #8]
 8102ce4:	6978      	ldr	r0, [r7, #20]
 8102ce6:	f7ff ffb3 	bl	8102c50 <NVIC_EncodePriority>
 8102cea:	4602      	mov	r2, r0
 8102cec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102cf0:	4611      	mov	r1, r2
 8102cf2:	4618      	mov	r0, r3
 8102cf4:	f7ff ff82 	bl	8102bfc <__NVIC_SetPriority>
}
 8102cf8:	bf00      	nop
 8102cfa:	3718      	adds	r7, #24
 8102cfc:	46bd      	mov	sp, r7
 8102cfe:	bd80      	pop	{r7, pc}

08102d00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102d00:	b580      	push	{r7, lr}
 8102d02:	b082      	sub	sp, #8
 8102d04:	af00      	add	r7, sp, #0
 8102d06:	4603      	mov	r3, r0
 8102d08:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102d0e:	4618      	mov	r0, r3
 8102d10:	f7ff ff56 	bl	8102bc0 <__NVIC_EnableIRQ>
}
 8102d14:	bf00      	nop
 8102d16:	3708      	adds	r7, #8
 8102d18:	46bd      	mov	sp, r7
 8102d1a:	bd80      	pop	{r7, pc}

08102d1c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102d1c:	b480      	push	{r7}
 8102d1e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102d20:	4b06      	ldr	r3, [pc, #24]	@ (8102d3c <HAL_GetCurrentCPUID+0x20>)
 8102d22:	681b      	ldr	r3, [r3, #0]
 8102d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8102d28:	2b70      	cmp	r3, #112	@ 0x70
 8102d2a:	d101      	bne.n	8102d30 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8102d2c:	2303      	movs	r3, #3
 8102d2e:	e000      	b.n	8102d32 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8102d30:	2301      	movs	r3, #1
  }
}
 8102d32:	4618      	mov	r0, r3
 8102d34:	46bd      	mov	sp, r7
 8102d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d3a:	4770      	bx	lr
 8102d3c:	e000ed00 	.word	0xe000ed00

08102d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8102d40:	b480      	push	{r7}
 8102d42:	b089      	sub	sp, #36	@ 0x24
 8102d44:	af00      	add	r7, sp, #0
 8102d46:	6078      	str	r0, [r7, #4]
 8102d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102d4a:	2300      	movs	r3, #0
 8102d4c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102d4e:	4b89      	ldr	r3, [pc, #548]	@ (8102f74 <HAL_GPIO_Init+0x234>)
 8102d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102d52:	e194      	b.n	810307e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102d54:	683b      	ldr	r3, [r7, #0]
 8102d56:	681a      	ldr	r2, [r3, #0]
 8102d58:	2101      	movs	r1, #1
 8102d5a:	69fb      	ldr	r3, [r7, #28]
 8102d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8102d60:	4013      	ands	r3, r2
 8102d62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102d64:	693b      	ldr	r3, [r7, #16]
 8102d66:	2b00      	cmp	r3, #0
 8102d68:	f000 8186 	beq.w	8103078 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102d6c:	683b      	ldr	r3, [r7, #0]
 8102d6e:	685b      	ldr	r3, [r3, #4]
 8102d70:	f003 0303 	and.w	r3, r3, #3
 8102d74:	2b01      	cmp	r3, #1
 8102d76:	d005      	beq.n	8102d84 <HAL_GPIO_Init+0x44>
 8102d78:	683b      	ldr	r3, [r7, #0]
 8102d7a:	685b      	ldr	r3, [r3, #4]
 8102d7c:	f003 0303 	and.w	r3, r3, #3
 8102d80:	2b02      	cmp	r3, #2
 8102d82:	d130      	bne.n	8102de6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	689b      	ldr	r3, [r3, #8]
 8102d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102d8a:	69fb      	ldr	r3, [r7, #28]
 8102d8c:	005b      	lsls	r3, r3, #1
 8102d8e:	2203      	movs	r2, #3
 8102d90:	fa02 f303 	lsl.w	r3, r2, r3
 8102d94:	43db      	mvns	r3, r3
 8102d96:	69ba      	ldr	r2, [r7, #24]
 8102d98:	4013      	ands	r3, r2
 8102d9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102d9c:	683b      	ldr	r3, [r7, #0]
 8102d9e:	68da      	ldr	r2, [r3, #12]
 8102da0:	69fb      	ldr	r3, [r7, #28]
 8102da2:	005b      	lsls	r3, r3, #1
 8102da4:	fa02 f303 	lsl.w	r3, r2, r3
 8102da8:	69ba      	ldr	r2, [r7, #24]
 8102daa:	4313      	orrs	r3, r2
 8102dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	69ba      	ldr	r2, [r7, #24]
 8102db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	685b      	ldr	r3, [r3, #4]
 8102db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102dba:	2201      	movs	r2, #1
 8102dbc:	69fb      	ldr	r3, [r7, #28]
 8102dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8102dc2:	43db      	mvns	r3, r3
 8102dc4:	69ba      	ldr	r2, [r7, #24]
 8102dc6:	4013      	ands	r3, r2
 8102dc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102dca:	683b      	ldr	r3, [r7, #0]
 8102dcc:	685b      	ldr	r3, [r3, #4]
 8102dce:	091b      	lsrs	r3, r3, #4
 8102dd0:	f003 0201 	and.w	r2, r3, #1
 8102dd4:	69fb      	ldr	r3, [r7, #28]
 8102dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8102dda:	69ba      	ldr	r2, [r7, #24]
 8102ddc:	4313      	orrs	r3, r2
 8102dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	69ba      	ldr	r2, [r7, #24]
 8102de4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102de6:	683b      	ldr	r3, [r7, #0]
 8102de8:	685b      	ldr	r3, [r3, #4]
 8102dea:	f003 0303 	and.w	r3, r3, #3
 8102dee:	2b03      	cmp	r3, #3
 8102df0:	d017      	beq.n	8102e22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	68db      	ldr	r3, [r3, #12]
 8102df6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102df8:	69fb      	ldr	r3, [r7, #28]
 8102dfa:	005b      	lsls	r3, r3, #1
 8102dfc:	2203      	movs	r2, #3
 8102dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8102e02:	43db      	mvns	r3, r3
 8102e04:	69ba      	ldr	r2, [r7, #24]
 8102e06:	4013      	ands	r3, r2
 8102e08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102e0a:	683b      	ldr	r3, [r7, #0]
 8102e0c:	689a      	ldr	r2, [r3, #8]
 8102e0e:	69fb      	ldr	r3, [r7, #28]
 8102e10:	005b      	lsls	r3, r3, #1
 8102e12:	fa02 f303 	lsl.w	r3, r2, r3
 8102e16:	69ba      	ldr	r2, [r7, #24]
 8102e18:	4313      	orrs	r3, r2
 8102e1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	69ba      	ldr	r2, [r7, #24]
 8102e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102e22:	683b      	ldr	r3, [r7, #0]
 8102e24:	685b      	ldr	r3, [r3, #4]
 8102e26:	f003 0303 	and.w	r3, r3, #3
 8102e2a:	2b02      	cmp	r3, #2
 8102e2c:	d123      	bne.n	8102e76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102e2e:	69fb      	ldr	r3, [r7, #28]
 8102e30:	08da      	lsrs	r2, r3, #3
 8102e32:	687b      	ldr	r3, [r7, #4]
 8102e34:	3208      	adds	r2, #8
 8102e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102e3c:	69fb      	ldr	r3, [r7, #28]
 8102e3e:	f003 0307 	and.w	r3, r3, #7
 8102e42:	009b      	lsls	r3, r3, #2
 8102e44:	220f      	movs	r2, #15
 8102e46:	fa02 f303 	lsl.w	r3, r2, r3
 8102e4a:	43db      	mvns	r3, r3
 8102e4c:	69ba      	ldr	r2, [r7, #24]
 8102e4e:	4013      	ands	r3, r2
 8102e50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102e52:	683b      	ldr	r3, [r7, #0]
 8102e54:	691a      	ldr	r2, [r3, #16]
 8102e56:	69fb      	ldr	r3, [r7, #28]
 8102e58:	f003 0307 	and.w	r3, r3, #7
 8102e5c:	009b      	lsls	r3, r3, #2
 8102e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8102e62:	69ba      	ldr	r2, [r7, #24]
 8102e64:	4313      	orrs	r3, r2
 8102e66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102e68:	69fb      	ldr	r3, [r7, #28]
 8102e6a:	08da      	lsrs	r2, r3, #3
 8102e6c:	687b      	ldr	r3, [r7, #4]
 8102e6e:	3208      	adds	r2, #8
 8102e70:	69b9      	ldr	r1, [r7, #24]
 8102e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102e7c:	69fb      	ldr	r3, [r7, #28]
 8102e7e:	005b      	lsls	r3, r3, #1
 8102e80:	2203      	movs	r2, #3
 8102e82:	fa02 f303 	lsl.w	r3, r2, r3
 8102e86:	43db      	mvns	r3, r3
 8102e88:	69ba      	ldr	r2, [r7, #24]
 8102e8a:	4013      	ands	r3, r2
 8102e8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102e8e:	683b      	ldr	r3, [r7, #0]
 8102e90:	685b      	ldr	r3, [r3, #4]
 8102e92:	f003 0203 	and.w	r2, r3, #3
 8102e96:	69fb      	ldr	r3, [r7, #28]
 8102e98:	005b      	lsls	r3, r3, #1
 8102e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8102e9e:	69ba      	ldr	r2, [r7, #24]
 8102ea0:	4313      	orrs	r3, r2
 8102ea2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102ea4:	687b      	ldr	r3, [r7, #4]
 8102ea6:	69ba      	ldr	r2, [r7, #24]
 8102ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102eaa:	683b      	ldr	r3, [r7, #0]
 8102eac:	685b      	ldr	r3, [r3, #4]
 8102eae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102eb2:	2b00      	cmp	r3, #0
 8102eb4:	f000 80e0 	beq.w	8103078 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8102f78 <HAL_GPIO_Init+0x238>)
 8102eba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102ebe:	4a2e      	ldr	r2, [pc, #184]	@ (8102f78 <HAL_GPIO_Init+0x238>)
 8102ec0:	f043 0302 	orr.w	r3, r3, #2
 8102ec4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8102f78 <HAL_GPIO_Init+0x238>)
 8102eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102ece:	f003 0302 	and.w	r3, r3, #2
 8102ed2:	60fb      	str	r3, [r7, #12]
 8102ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102ed6:	4a29      	ldr	r2, [pc, #164]	@ (8102f7c <HAL_GPIO_Init+0x23c>)
 8102ed8:	69fb      	ldr	r3, [r7, #28]
 8102eda:	089b      	lsrs	r3, r3, #2
 8102edc:	3302      	adds	r3, #2
 8102ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102ee4:	69fb      	ldr	r3, [r7, #28]
 8102ee6:	f003 0303 	and.w	r3, r3, #3
 8102eea:	009b      	lsls	r3, r3, #2
 8102eec:	220f      	movs	r2, #15
 8102eee:	fa02 f303 	lsl.w	r3, r2, r3
 8102ef2:	43db      	mvns	r3, r3
 8102ef4:	69ba      	ldr	r2, [r7, #24]
 8102ef6:	4013      	ands	r3, r2
 8102ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	4a20      	ldr	r2, [pc, #128]	@ (8102f80 <HAL_GPIO_Init+0x240>)
 8102efe:	4293      	cmp	r3, r2
 8102f00:	d052      	beq.n	8102fa8 <HAL_GPIO_Init+0x268>
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	4a1f      	ldr	r2, [pc, #124]	@ (8102f84 <HAL_GPIO_Init+0x244>)
 8102f06:	4293      	cmp	r3, r2
 8102f08:	d031      	beq.n	8102f6e <HAL_GPIO_Init+0x22e>
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8102f88 <HAL_GPIO_Init+0x248>)
 8102f0e:	4293      	cmp	r3, r2
 8102f10:	d02b      	beq.n	8102f6a <HAL_GPIO_Init+0x22a>
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	4a1d      	ldr	r2, [pc, #116]	@ (8102f8c <HAL_GPIO_Init+0x24c>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d025      	beq.n	8102f66 <HAL_GPIO_Init+0x226>
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8102f90 <HAL_GPIO_Init+0x250>)
 8102f1e:	4293      	cmp	r3, r2
 8102f20:	d01f      	beq.n	8102f62 <HAL_GPIO_Init+0x222>
 8102f22:	687b      	ldr	r3, [r7, #4]
 8102f24:	4a1b      	ldr	r2, [pc, #108]	@ (8102f94 <HAL_GPIO_Init+0x254>)
 8102f26:	4293      	cmp	r3, r2
 8102f28:	d019      	beq.n	8102f5e <HAL_GPIO_Init+0x21e>
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8102f98 <HAL_GPIO_Init+0x258>)
 8102f2e:	4293      	cmp	r3, r2
 8102f30:	d013      	beq.n	8102f5a <HAL_GPIO_Init+0x21a>
 8102f32:	687b      	ldr	r3, [r7, #4]
 8102f34:	4a19      	ldr	r2, [pc, #100]	@ (8102f9c <HAL_GPIO_Init+0x25c>)
 8102f36:	4293      	cmp	r3, r2
 8102f38:	d00d      	beq.n	8102f56 <HAL_GPIO_Init+0x216>
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	4a18      	ldr	r2, [pc, #96]	@ (8102fa0 <HAL_GPIO_Init+0x260>)
 8102f3e:	4293      	cmp	r3, r2
 8102f40:	d007      	beq.n	8102f52 <HAL_GPIO_Init+0x212>
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	4a17      	ldr	r2, [pc, #92]	@ (8102fa4 <HAL_GPIO_Init+0x264>)
 8102f46:	4293      	cmp	r3, r2
 8102f48:	d101      	bne.n	8102f4e <HAL_GPIO_Init+0x20e>
 8102f4a:	2309      	movs	r3, #9
 8102f4c:	e02d      	b.n	8102faa <HAL_GPIO_Init+0x26a>
 8102f4e:	230a      	movs	r3, #10
 8102f50:	e02b      	b.n	8102faa <HAL_GPIO_Init+0x26a>
 8102f52:	2308      	movs	r3, #8
 8102f54:	e029      	b.n	8102faa <HAL_GPIO_Init+0x26a>
 8102f56:	2307      	movs	r3, #7
 8102f58:	e027      	b.n	8102faa <HAL_GPIO_Init+0x26a>
 8102f5a:	2306      	movs	r3, #6
 8102f5c:	e025      	b.n	8102faa <HAL_GPIO_Init+0x26a>
 8102f5e:	2305      	movs	r3, #5
 8102f60:	e023      	b.n	8102faa <HAL_GPIO_Init+0x26a>
 8102f62:	2304      	movs	r3, #4
 8102f64:	e021      	b.n	8102faa <HAL_GPIO_Init+0x26a>
 8102f66:	2303      	movs	r3, #3
 8102f68:	e01f      	b.n	8102faa <HAL_GPIO_Init+0x26a>
 8102f6a:	2302      	movs	r3, #2
 8102f6c:	e01d      	b.n	8102faa <HAL_GPIO_Init+0x26a>
 8102f6e:	2301      	movs	r3, #1
 8102f70:	e01b      	b.n	8102faa <HAL_GPIO_Init+0x26a>
 8102f72:	bf00      	nop
 8102f74:	580000c0 	.word	0x580000c0
 8102f78:	58024400 	.word	0x58024400
 8102f7c:	58000400 	.word	0x58000400
 8102f80:	58020000 	.word	0x58020000
 8102f84:	58020400 	.word	0x58020400
 8102f88:	58020800 	.word	0x58020800
 8102f8c:	58020c00 	.word	0x58020c00
 8102f90:	58021000 	.word	0x58021000
 8102f94:	58021400 	.word	0x58021400
 8102f98:	58021800 	.word	0x58021800
 8102f9c:	58021c00 	.word	0x58021c00
 8102fa0:	58022000 	.word	0x58022000
 8102fa4:	58022400 	.word	0x58022400
 8102fa8:	2300      	movs	r3, #0
 8102faa:	69fa      	ldr	r2, [r7, #28]
 8102fac:	f002 0203 	and.w	r2, r2, #3
 8102fb0:	0092      	lsls	r2, r2, #2
 8102fb2:	4093      	lsls	r3, r2
 8102fb4:	69ba      	ldr	r2, [r7, #24]
 8102fb6:	4313      	orrs	r3, r2
 8102fb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102fba:	4938      	ldr	r1, [pc, #224]	@ (810309c <HAL_GPIO_Init+0x35c>)
 8102fbc:	69fb      	ldr	r3, [r7, #28]
 8102fbe:	089b      	lsrs	r3, r3, #2
 8102fc0:	3302      	adds	r3, #2
 8102fc2:	69ba      	ldr	r2, [r7, #24]
 8102fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102fcc:	681b      	ldr	r3, [r3, #0]
 8102fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102fd0:	693b      	ldr	r3, [r7, #16]
 8102fd2:	43db      	mvns	r3, r3
 8102fd4:	69ba      	ldr	r2, [r7, #24]
 8102fd6:	4013      	ands	r3, r2
 8102fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102fda:	683b      	ldr	r3, [r7, #0]
 8102fdc:	685b      	ldr	r3, [r3, #4]
 8102fde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8102fe2:	2b00      	cmp	r3, #0
 8102fe4:	d003      	beq.n	8102fee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102fe6:	69ba      	ldr	r2, [r7, #24]
 8102fe8:	693b      	ldr	r3, [r7, #16]
 8102fea:	4313      	orrs	r3, r2
 8102fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102fee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102ff2:	69bb      	ldr	r3, [r7, #24]
 8102ff4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102ffa:	685b      	ldr	r3, [r3, #4]
 8102ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102ffe:	693b      	ldr	r3, [r7, #16]
 8103000:	43db      	mvns	r3, r3
 8103002:	69ba      	ldr	r2, [r7, #24]
 8103004:	4013      	ands	r3, r2
 8103006:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103008:	683b      	ldr	r3, [r7, #0]
 810300a:	685b      	ldr	r3, [r3, #4]
 810300c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8103010:	2b00      	cmp	r3, #0
 8103012:	d003      	beq.n	810301c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103014:	69ba      	ldr	r2, [r7, #24]
 8103016:	693b      	ldr	r3, [r7, #16]
 8103018:	4313      	orrs	r3, r2
 810301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810301c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8103020:	69bb      	ldr	r3, [r7, #24]
 8103022:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103024:	697b      	ldr	r3, [r7, #20]
 8103026:	685b      	ldr	r3, [r3, #4]
 8103028:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810302a:	693b      	ldr	r3, [r7, #16]
 810302c:	43db      	mvns	r3, r3
 810302e:	69ba      	ldr	r2, [r7, #24]
 8103030:	4013      	ands	r3, r2
 8103032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103034:	683b      	ldr	r3, [r7, #0]
 8103036:	685b      	ldr	r3, [r3, #4]
 8103038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810303c:	2b00      	cmp	r3, #0
 810303e:	d003      	beq.n	8103048 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103040:	69ba      	ldr	r2, [r7, #24]
 8103042:	693b      	ldr	r3, [r7, #16]
 8103044:	4313      	orrs	r3, r2
 8103046:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103048:	697b      	ldr	r3, [r7, #20]
 810304a:	69ba      	ldr	r2, [r7, #24]
 810304c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810304e:	697b      	ldr	r3, [r7, #20]
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103054:	693b      	ldr	r3, [r7, #16]
 8103056:	43db      	mvns	r3, r3
 8103058:	69ba      	ldr	r2, [r7, #24]
 810305a:	4013      	ands	r3, r2
 810305c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810305e:	683b      	ldr	r3, [r7, #0]
 8103060:	685b      	ldr	r3, [r3, #4]
 8103062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103066:	2b00      	cmp	r3, #0
 8103068:	d003      	beq.n	8103072 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810306a:	69ba      	ldr	r2, [r7, #24]
 810306c:	693b      	ldr	r3, [r7, #16]
 810306e:	4313      	orrs	r3, r2
 8103070:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103072:	697b      	ldr	r3, [r7, #20]
 8103074:	69ba      	ldr	r2, [r7, #24]
 8103076:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103078:	69fb      	ldr	r3, [r7, #28]
 810307a:	3301      	adds	r3, #1
 810307c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810307e:	683b      	ldr	r3, [r7, #0]
 8103080:	681a      	ldr	r2, [r3, #0]
 8103082:	69fb      	ldr	r3, [r7, #28]
 8103084:	fa22 f303 	lsr.w	r3, r2, r3
 8103088:	2b00      	cmp	r3, #0
 810308a:	f47f ae63 	bne.w	8102d54 <HAL_GPIO_Init+0x14>
  }
}
 810308e:	bf00      	nop
 8103090:	bf00      	nop
 8103092:	3724      	adds	r7, #36	@ 0x24
 8103094:	46bd      	mov	sp, r7
 8103096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810309a:	4770      	bx	lr
 810309c:	58000400 	.word	0x58000400

081030a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81030a0:	b580      	push	{r7, lr}
 81030a2:	b082      	sub	sp, #8
 81030a4:	af00      	add	r7, sp, #0
 81030a6:	4603      	mov	r3, r0
 81030a8:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81030ae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 81030b2:	88fb      	ldrh	r3, [r7, #6]
 81030b4:	4013      	ands	r3, r2
 81030b6:	2b00      	cmp	r3, #0
 81030b8:	d008      	beq.n	81030cc <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81030ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81030be:	88fb      	ldrh	r3, [r7, #6]
 81030c0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81030c4:	88fb      	ldrh	r3, [r7, #6]
 81030c6:	4618      	mov	r0, r3
 81030c8:	f7fd fea2 	bl	8100e10 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81030cc:	bf00      	nop
 81030ce:	3708      	adds	r7, #8
 81030d0:	46bd      	mov	sp, r7
 81030d2:	bd80      	pop	{r7, pc}

081030d4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81030d4:	b480      	push	{r7}
 81030d6:	b083      	sub	sp, #12
 81030d8:	af00      	add	r7, sp, #0
 81030da:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81030dc:	4b05      	ldr	r3, [pc, #20]	@ (81030f4 <HAL_HSEM_ActivateNotification+0x20>)
 81030de:	681a      	ldr	r2, [r3, #0]
 81030e0:	4904      	ldr	r1, [pc, #16]	@ (81030f4 <HAL_HSEM_ActivateNotification+0x20>)
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	4313      	orrs	r3, r2
 81030e6:	600b      	str	r3, [r1, #0]
#endif
}
 81030e8:	bf00      	nop
 81030ea:	370c      	adds	r7, #12
 81030ec:	46bd      	mov	sp, r7
 81030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030f2:	4770      	bx	lr
 81030f4:	58026510 	.word	0x58026510

081030f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81030f8:	b580      	push	{r7, lr}
 81030fa:	b086      	sub	sp, #24
 81030fc:	af02      	add	r7, sp, #8
 81030fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	2b00      	cmp	r3, #0
 8103104:	d101      	bne.n	810310a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8103106:	2301      	movs	r3, #1
 8103108:	e0fe      	b.n	8103308 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8103110:	b2db      	uxtb	r3, r3
 8103112:	2b00      	cmp	r3, #0
 8103114:	d106      	bne.n	8103124 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	2200      	movs	r2, #0
 810311a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 810311e:	6878      	ldr	r0, [r7, #4]
 8103120:	f7fe ffb2 	bl	8102088 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	2203      	movs	r2, #3
 8103128:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	681b      	ldr	r3, [r3, #0]
 8103130:	4618      	mov	r0, r3
 8103132:	f005 ff41 	bl	8108fb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	6818      	ldr	r0, [r3, #0]
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	7c1a      	ldrb	r2, [r3, #16]
 810313e:	f88d 2000 	strb.w	r2, [sp]
 8103142:	3304      	adds	r3, #4
 8103144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103146:	f005 fec6 	bl	8108ed6 <USB_CoreInit>
 810314a:	4603      	mov	r3, r0
 810314c:	2b00      	cmp	r3, #0
 810314e:	d005      	beq.n	810315c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	2202      	movs	r2, #2
 8103154:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8103158:	2301      	movs	r3, #1
 810315a:	e0d5      	b.n	8103308 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	2100      	movs	r1, #0
 8103162:	4618      	mov	r0, r3
 8103164:	f005 ff39 	bl	8108fda <USB_SetCurrentMode>
 8103168:	4603      	mov	r3, r0
 810316a:	2b00      	cmp	r3, #0
 810316c:	d005      	beq.n	810317a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 810316e:	687b      	ldr	r3, [r7, #4]
 8103170:	2202      	movs	r2, #2
 8103172:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8103176:	2301      	movs	r3, #1
 8103178:	e0c6      	b.n	8103308 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810317a:	2300      	movs	r3, #0
 810317c:	73fb      	strb	r3, [r7, #15]
 810317e:	e04a      	b.n	8103216 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8103180:	7bfa      	ldrb	r2, [r7, #15]
 8103182:	6879      	ldr	r1, [r7, #4]
 8103184:	4613      	mov	r3, r2
 8103186:	00db      	lsls	r3, r3, #3
 8103188:	4413      	add	r3, r2
 810318a:	009b      	lsls	r3, r3, #2
 810318c:	440b      	add	r3, r1
 810318e:	3315      	adds	r3, #21
 8103190:	2201      	movs	r2, #1
 8103192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8103194:	7bfa      	ldrb	r2, [r7, #15]
 8103196:	6879      	ldr	r1, [r7, #4]
 8103198:	4613      	mov	r3, r2
 810319a:	00db      	lsls	r3, r3, #3
 810319c:	4413      	add	r3, r2
 810319e:	009b      	lsls	r3, r3, #2
 81031a0:	440b      	add	r3, r1
 81031a2:	3314      	adds	r3, #20
 81031a4:	7bfa      	ldrb	r2, [r7, #15]
 81031a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 81031a8:	7bfa      	ldrb	r2, [r7, #15]
 81031aa:	7bfb      	ldrb	r3, [r7, #15]
 81031ac:	b298      	uxth	r0, r3
 81031ae:	6879      	ldr	r1, [r7, #4]
 81031b0:	4613      	mov	r3, r2
 81031b2:	00db      	lsls	r3, r3, #3
 81031b4:	4413      	add	r3, r2
 81031b6:	009b      	lsls	r3, r3, #2
 81031b8:	440b      	add	r3, r1
 81031ba:	332e      	adds	r3, #46	@ 0x2e
 81031bc:	4602      	mov	r2, r0
 81031be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81031c0:	7bfa      	ldrb	r2, [r7, #15]
 81031c2:	6879      	ldr	r1, [r7, #4]
 81031c4:	4613      	mov	r3, r2
 81031c6:	00db      	lsls	r3, r3, #3
 81031c8:	4413      	add	r3, r2
 81031ca:	009b      	lsls	r3, r3, #2
 81031cc:	440b      	add	r3, r1
 81031ce:	3318      	adds	r3, #24
 81031d0:	2200      	movs	r2, #0
 81031d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81031d4:	7bfa      	ldrb	r2, [r7, #15]
 81031d6:	6879      	ldr	r1, [r7, #4]
 81031d8:	4613      	mov	r3, r2
 81031da:	00db      	lsls	r3, r3, #3
 81031dc:	4413      	add	r3, r2
 81031de:	009b      	lsls	r3, r3, #2
 81031e0:	440b      	add	r3, r1
 81031e2:	331c      	adds	r3, #28
 81031e4:	2200      	movs	r2, #0
 81031e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81031e8:	7bfa      	ldrb	r2, [r7, #15]
 81031ea:	6879      	ldr	r1, [r7, #4]
 81031ec:	4613      	mov	r3, r2
 81031ee:	00db      	lsls	r3, r3, #3
 81031f0:	4413      	add	r3, r2
 81031f2:	009b      	lsls	r3, r3, #2
 81031f4:	440b      	add	r3, r1
 81031f6:	3320      	adds	r3, #32
 81031f8:	2200      	movs	r2, #0
 81031fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81031fc:	7bfa      	ldrb	r2, [r7, #15]
 81031fe:	6879      	ldr	r1, [r7, #4]
 8103200:	4613      	mov	r3, r2
 8103202:	00db      	lsls	r3, r3, #3
 8103204:	4413      	add	r3, r2
 8103206:	009b      	lsls	r3, r3, #2
 8103208:	440b      	add	r3, r1
 810320a:	3324      	adds	r3, #36	@ 0x24
 810320c:	2200      	movs	r2, #0
 810320e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8103210:	7bfb      	ldrb	r3, [r7, #15]
 8103212:	3301      	adds	r3, #1
 8103214:	73fb      	strb	r3, [r7, #15]
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	791b      	ldrb	r3, [r3, #4]
 810321a:	7bfa      	ldrb	r2, [r7, #15]
 810321c:	429a      	cmp	r2, r3
 810321e:	d3af      	bcc.n	8103180 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8103220:	2300      	movs	r3, #0
 8103222:	73fb      	strb	r3, [r7, #15]
 8103224:	e044      	b.n	81032b0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8103226:	7bfa      	ldrb	r2, [r7, #15]
 8103228:	6879      	ldr	r1, [r7, #4]
 810322a:	4613      	mov	r3, r2
 810322c:	00db      	lsls	r3, r3, #3
 810322e:	4413      	add	r3, r2
 8103230:	009b      	lsls	r3, r3, #2
 8103232:	440b      	add	r3, r1
 8103234:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8103238:	2200      	movs	r2, #0
 810323a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 810323c:	7bfa      	ldrb	r2, [r7, #15]
 810323e:	6879      	ldr	r1, [r7, #4]
 8103240:	4613      	mov	r3, r2
 8103242:	00db      	lsls	r3, r3, #3
 8103244:	4413      	add	r3, r2
 8103246:	009b      	lsls	r3, r3, #2
 8103248:	440b      	add	r3, r1
 810324a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 810324e:	7bfa      	ldrb	r2, [r7, #15]
 8103250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8103252:	7bfa      	ldrb	r2, [r7, #15]
 8103254:	6879      	ldr	r1, [r7, #4]
 8103256:	4613      	mov	r3, r2
 8103258:	00db      	lsls	r3, r3, #3
 810325a:	4413      	add	r3, r2
 810325c:	009b      	lsls	r3, r3, #2
 810325e:	440b      	add	r3, r1
 8103260:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8103264:	2200      	movs	r2, #0
 8103266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8103268:	7bfa      	ldrb	r2, [r7, #15]
 810326a:	6879      	ldr	r1, [r7, #4]
 810326c:	4613      	mov	r3, r2
 810326e:	00db      	lsls	r3, r3, #3
 8103270:	4413      	add	r3, r2
 8103272:	009b      	lsls	r3, r3, #2
 8103274:	440b      	add	r3, r1
 8103276:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 810327a:	2200      	movs	r2, #0
 810327c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 810327e:	7bfa      	ldrb	r2, [r7, #15]
 8103280:	6879      	ldr	r1, [r7, #4]
 8103282:	4613      	mov	r3, r2
 8103284:	00db      	lsls	r3, r3, #3
 8103286:	4413      	add	r3, r2
 8103288:	009b      	lsls	r3, r3, #2
 810328a:	440b      	add	r3, r1
 810328c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8103290:	2200      	movs	r2, #0
 8103292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8103294:	7bfa      	ldrb	r2, [r7, #15]
 8103296:	6879      	ldr	r1, [r7, #4]
 8103298:	4613      	mov	r3, r2
 810329a:	00db      	lsls	r3, r3, #3
 810329c:	4413      	add	r3, r2
 810329e:	009b      	lsls	r3, r3, #2
 81032a0:	440b      	add	r3, r1
 81032a2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 81032a6:	2200      	movs	r2, #0
 81032a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81032aa:	7bfb      	ldrb	r3, [r7, #15]
 81032ac:	3301      	adds	r3, #1
 81032ae:	73fb      	strb	r3, [r7, #15]
 81032b0:	687b      	ldr	r3, [r7, #4]
 81032b2:	791b      	ldrb	r3, [r3, #4]
 81032b4:	7bfa      	ldrb	r2, [r7, #15]
 81032b6:	429a      	cmp	r2, r3
 81032b8:	d3b5      	bcc.n	8103226 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	6818      	ldr	r0, [r3, #0]
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	7c1a      	ldrb	r2, [r3, #16]
 81032c2:	f88d 2000 	strb.w	r2, [sp]
 81032c6:	3304      	adds	r3, #4
 81032c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 81032ca:	f005 fed3 	bl	8109074 <USB_DevInit>
 81032ce:	4603      	mov	r3, r0
 81032d0:	2b00      	cmp	r3, #0
 81032d2:	d005      	beq.n	81032e0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81032d4:	687b      	ldr	r3, [r7, #4]
 81032d6:	2202      	movs	r2, #2
 81032d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81032dc:	2301      	movs	r3, #1
 81032de:	e013      	b.n	8103308 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	2200      	movs	r2, #0
 81032e4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	2201      	movs	r2, #1
 81032ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	7b1b      	ldrb	r3, [r3, #12]
 81032f2:	2b01      	cmp	r3, #1
 81032f4:	d102      	bne.n	81032fc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 81032f6:	6878      	ldr	r0, [r7, #4]
 81032f8:	f000 f80a 	bl	8103310 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 81032fc:	687b      	ldr	r3, [r7, #4]
 81032fe:	681b      	ldr	r3, [r3, #0]
 8103300:	4618      	mov	r0, r3
 8103302:	f006 f88e 	bl	8109422 <USB_DevDisconnect>

  return HAL_OK;
 8103306:	2300      	movs	r3, #0
}
 8103308:	4618      	mov	r0, r3
 810330a:	3710      	adds	r7, #16
 810330c:	46bd      	mov	sp, r7
 810330e:	bd80      	pop	{r7, pc}

08103310 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8103310:	b480      	push	{r7}
 8103312:	b085      	sub	sp, #20
 8103314:	af00      	add	r7, sp, #0
 8103316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	2201      	movs	r2, #1
 8103322:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	2200      	movs	r2, #0
 810332a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 810332e:	68fb      	ldr	r3, [r7, #12]
 8103330:	699b      	ldr	r3, [r3, #24]
 8103332:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8103336:	68fb      	ldr	r3, [r7, #12]
 8103338:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 810333a:	68fb      	ldr	r3, [r7, #12]
 810333c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810333e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8103342:	f043 0303 	orr.w	r3, r3, #3
 8103346:	68fa      	ldr	r2, [r7, #12]
 8103348:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 810334a:	2300      	movs	r3, #0
}
 810334c:	4618      	mov	r0, r3
 810334e:	3714      	adds	r7, #20
 8103350:	46bd      	mov	sp, r7
 8103352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103356:	4770      	bx	lr

08103358 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103358:	b580      	push	{r7, lr}
 810335a:	b084      	sub	sp, #16
 810335c:	af00      	add	r7, sp, #0
 810335e:	60f8      	str	r0, [r7, #12]
 8103360:	460b      	mov	r3, r1
 8103362:	607a      	str	r2, [r7, #4]
 8103364:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103366:	4b37      	ldr	r3, [pc, #220]	@ (8103444 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	f023 0201 	bic.w	r2, r3, #1
 810336e:	4935      	ldr	r1, [pc, #212]	@ (8103444 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103370:	68fb      	ldr	r3, [r7, #12]
 8103372:	4313      	orrs	r3, r2
 8103374:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103376:	687b      	ldr	r3, [r7, #4]
 8103378:	2b00      	cmp	r3, #0
 810337a:	d123      	bne.n	81033c4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810337c:	f7ff fcce 	bl	8102d1c <HAL_GetCurrentCPUID>
 8103380:	4603      	mov	r3, r0
 8103382:	2b03      	cmp	r3, #3
 8103384:	d158      	bne.n	8103438 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103386:	4b2f      	ldr	r3, [pc, #188]	@ (8103444 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103388:	691b      	ldr	r3, [r3, #16]
 810338a:	4a2e      	ldr	r2, [pc, #184]	@ (8103444 <HAL_PWREx_EnterSTOPMode+0xec>)
 810338c:	f023 0301 	bic.w	r3, r3, #1
 8103390:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103392:	4b2d      	ldr	r3, [pc, #180]	@ (8103448 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103394:	691b      	ldr	r3, [r3, #16]
 8103396:	4a2c      	ldr	r2, [pc, #176]	@ (8103448 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103398:	f043 0304 	orr.w	r3, r3, #4
 810339c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810339e:	f3bf 8f4f 	dsb	sy
}
 81033a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81033a4:	f3bf 8f6f 	isb	sy
}
 81033a8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81033aa:	7afb      	ldrb	r3, [r7, #11]
 81033ac:	2b01      	cmp	r3, #1
 81033ae:	d101      	bne.n	81033b4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81033b0:	bf30      	wfi
 81033b2:	e000      	b.n	81033b6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81033b4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81033b6:	4b24      	ldr	r3, [pc, #144]	@ (8103448 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81033b8:	691b      	ldr	r3, [r3, #16]
 81033ba:	4a23      	ldr	r2, [pc, #140]	@ (8103448 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81033bc:	f023 0304 	bic.w	r3, r3, #4
 81033c0:	6113      	str	r3, [r2, #16]
 81033c2:	e03c      	b.n	810343e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	2b01      	cmp	r3, #1
 81033c8:	d123      	bne.n	8103412 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81033ca:	f7ff fca7 	bl	8102d1c <HAL_GetCurrentCPUID>
 81033ce:	4603      	mov	r3, r0
 81033d0:	2b01      	cmp	r3, #1
 81033d2:	d133      	bne.n	810343c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81033d4:	4b1b      	ldr	r3, [pc, #108]	@ (8103444 <HAL_PWREx_EnterSTOPMode+0xec>)
 81033d6:	695b      	ldr	r3, [r3, #20]
 81033d8:	4a1a      	ldr	r2, [pc, #104]	@ (8103444 <HAL_PWREx_EnterSTOPMode+0xec>)
 81033da:	f023 0302 	bic.w	r3, r3, #2
 81033de:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81033e0:	4b19      	ldr	r3, [pc, #100]	@ (8103448 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81033e2:	691b      	ldr	r3, [r3, #16]
 81033e4:	4a18      	ldr	r2, [pc, #96]	@ (8103448 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81033e6:	f043 0304 	orr.w	r3, r3, #4
 81033ea:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81033ec:	f3bf 8f4f 	dsb	sy
}
 81033f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81033f2:	f3bf 8f6f 	isb	sy
}
 81033f6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81033f8:	7afb      	ldrb	r3, [r7, #11]
 81033fa:	2b01      	cmp	r3, #1
 81033fc:	d101      	bne.n	8103402 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81033fe:	bf30      	wfi
 8103400:	e000      	b.n	8103404 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103402:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103404:	4b10      	ldr	r3, [pc, #64]	@ (8103448 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103406:	691b      	ldr	r3, [r3, #16]
 8103408:	4a0f      	ldr	r2, [pc, #60]	@ (8103448 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810340a:	f023 0304 	bic.w	r3, r3, #4
 810340e:	6113      	str	r3, [r2, #16]
 8103410:	e015      	b.n	810343e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103412:	f7ff fc83 	bl	8102d1c <HAL_GetCurrentCPUID>
 8103416:	4603      	mov	r3, r0
 8103418:	2b03      	cmp	r3, #3
 810341a:	d106      	bne.n	810342a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810341c:	4b09      	ldr	r3, [pc, #36]	@ (8103444 <HAL_PWREx_EnterSTOPMode+0xec>)
 810341e:	691b      	ldr	r3, [r3, #16]
 8103420:	4a08      	ldr	r2, [pc, #32]	@ (8103444 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103422:	f023 0304 	bic.w	r3, r3, #4
 8103426:	6113      	str	r3, [r2, #16]
 8103428:	e009      	b.n	810343e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810342a:	4b06      	ldr	r3, [pc, #24]	@ (8103444 <HAL_PWREx_EnterSTOPMode+0xec>)
 810342c:	695b      	ldr	r3, [r3, #20]
 810342e:	4a05      	ldr	r2, [pc, #20]	@ (8103444 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103430:	f023 0304 	bic.w	r3, r3, #4
 8103434:	6153      	str	r3, [r2, #20]
 8103436:	e002      	b.n	810343e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103438:	bf00      	nop
 810343a:	e000      	b.n	810343e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810343c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810343e:	3710      	adds	r7, #16
 8103440:	46bd      	mov	sp, r7
 8103442:	bd80      	pop	{r7, pc}
 8103444:	58024800 	.word	0x58024800
 8103448:	e000ed00 	.word	0xe000ed00

0810344c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810344c:	b580      	push	{r7, lr}
 810344e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103450:	f7ff fc64 	bl	8102d1c <HAL_GetCurrentCPUID>
 8103454:	4603      	mov	r3, r0
 8103456:	2b03      	cmp	r3, #3
 8103458:	d101      	bne.n	810345e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810345a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810345c:	e001      	b.n	8103462 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810345e:	bf40      	sev
    __WFE ();
 8103460:	bf20      	wfe
}
 8103462:	bf00      	nop
 8103464:	bd80      	pop	{r7, pc}
	...

08103468 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8103468:	b480      	push	{r7}
 810346a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 810346c:	4b05      	ldr	r3, [pc, #20]	@ (8103484 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 810346e:	68db      	ldr	r3, [r3, #12]
 8103470:	4a04      	ldr	r2, [pc, #16]	@ (8103484 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8103472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103476:	60d3      	str	r3, [r2, #12]
}
 8103478:	bf00      	nop
 810347a:	46bd      	mov	sp, r7
 810347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103480:	4770      	bx	lr
 8103482:	bf00      	nop
 8103484:	58024800 	.word	0x58024800

08103488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103488:	b480      	push	{r7}
 810348a:	b089      	sub	sp, #36	@ 0x24
 810348c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810348e:	4bb3      	ldr	r3, [pc, #716]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103490:	691b      	ldr	r3, [r3, #16]
 8103492:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103496:	2b18      	cmp	r3, #24
 8103498:	f200 8155 	bhi.w	8103746 <HAL_RCC_GetSysClockFreq+0x2be>
 810349c:	a201      	add	r2, pc, #4	@ (adr r2, 81034a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 810349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81034a2:	bf00      	nop
 81034a4:	08103509 	.word	0x08103509
 81034a8:	08103747 	.word	0x08103747
 81034ac:	08103747 	.word	0x08103747
 81034b0:	08103747 	.word	0x08103747
 81034b4:	08103747 	.word	0x08103747
 81034b8:	08103747 	.word	0x08103747
 81034bc:	08103747 	.word	0x08103747
 81034c0:	08103747 	.word	0x08103747
 81034c4:	0810352f 	.word	0x0810352f
 81034c8:	08103747 	.word	0x08103747
 81034cc:	08103747 	.word	0x08103747
 81034d0:	08103747 	.word	0x08103747
 81034d4:	08103747 	.word	0x08103747
 81034d8:	08103747 	.word	0x08103747
 81034dc:	08103747 	.word	0x08103747
 81034e0:	08103747 	.word	0x08103747
 81034e4:	08103535 	.word	0x08103535
 81034e8:	08103747 	.word	0x08103747
 81034ec:	08103747 	.word	0x08103747
 81034f0:	08103747 	.word	0x08103747
 81034f4:	08103747 	.word	0x08103747
 81034f8:	08103747 	.word	0x08103747
 81034fc:	08103747 	.word	0x08103747
 8103500:	08103747 	.word	0x08103747
 8103504:	0810353b 	.word	0x0810353b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103508:	4b94      	ldr	r3, [pc, #592]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	f003 0320 	and.w	r3, r3, #32
 8103510:	2b00      	cmp	r3, #0
 8103512:	d009      	beq.n	8103528 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103514:	4b91      	ldr	r3, [pc, #580]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103516:	681b      	ldr	r3, [r3, #0]
 8103518:	08db      	lsrs	r3, r3, #3
 810351a:	f003 0303 	and.w	r3, r3, #3
 810351e:	4a90      	ldr	r2, [pc, #576]	@ (8103760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103520:	fa22 f303 	lsr.w	r3, r2, r3
 8103524:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8103526:	e111      	b.n	810374c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103528:	4b8d      	ldr	r3, [pc, #564]	@ (8103760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810352a:	61bb      	str	r3, [r7, #24]
      break;
 810352c:	e10e      	b.n	810374c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810352e:	4b8d      	ldr	r3, [pc, #564]	@ (8103764 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103530:	61bb      	str	r3, [r7, #24]
      break;
 8103532:	e10b      	b.n	810374c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8103534:	4b8c      	ldr	r3, [pc, #560]	@ (8103768 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103536:	61bb      	str	r3, [r7, #24]
      break;
 8103538:	e108      	b.n	810374c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810353a:	4b88      	ldr	r3, [pc, #544]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810353e:	f003 0303 	and.w	r3, r3, #3
 8103542:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103544:	4b85      	ldr	r3, [pc, #532]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103548:	091b      	lsrs	r3, r3, #4
 810354a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810354e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103550:	4b82      	ldr	r3, [pc, #520]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103554:	f003 0301 	and.w	r3, r3, #1
 8103558:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810355a:	4b80      	ldr	r3, [pc, #512]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810355c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810355e:	08db      	lsrs	r3, r3, #3
 8103560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103564:	68fa      	ldr	r2, [r7, #12]
 8103566:	fb02 f303 	mul.w	r3, r2, r3
 810356a:	ee07 3a90 	vmov	s15, r3
 810356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103572:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8103576:	693b      	ldr	r3, [r7, #16]
 8103578:	2b00      	cmp	r3, #0
 810357a:	f000 80e1 	beq.w	8103740 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 810357e:	697b      	ldr	r3, [r7, #20]
 8103580:	2b02      	cmp	r3, #2
 8103582:	f000 8083 	beq.w	810368c <HAL_RCC_GetSysClockFreq+0x204>
 8103586:	697b      	ldr	r3, [r7, #20]
 8103588:	2b02      	cmp	r3, #2
 810358a:	f200 80a1 	bhi.w	81036d0 <HAL_RCC_GetSysClockFreq+0x248>
 810358e:	697b      	ldr	r3, [r7, #20]
 8103590:	2b00      	cmp	r3, #0
 8103592:	d003      	beq.n	810359c <HAL_RCC_GetSysClockFreq+0x114>
 8103594:	697b      	ldr	r3, [r7, #20]
 8103596:	2b01      	cmp	r3, #1
 8103598:	d056      	beq.n	8103648 <HAL_RCC_GetSysClockFreq+0x1c0>
 810359a:	e099      	b.n	81036d0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810359c:	4b6f      	ldr	r3, [pc, #444]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810359e:	681b      	ldr	r3, [r3, #0]
 81035a0:	f003 0320 	and.w	r3, r3, #32
 81035a4:	2b00      	cmp	r3, #0
 81035a6:	d02d      	beq.n	8103604 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81035a8:	4b6c      	ldr	r3, [pc, #432]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035aa:	681b      	ldr	r3, [r3, #0]
 81035ac:	08db      	lsrs	r3, r3, #3
 81035ae:	f003 0303 	and.w	r3, r3, #3
 81035b2:	4a6b      	ldr	r2, [pc, #428]	@ (8103760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81035b4:	fa22 f303 	lsr.w	r3, r2, r3
 81035b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	ee07 3a90 	vmov	s15, r3
 81035c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035c4:	693b      	ldr	r3, [r7, #16]
 81035c6:	ee07 3a90 	vmov	s15, r3
 81035ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035d2:	4b62      	ldr	r3, [pc, #392]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81035d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035da:	ee07 3a90 	vmov	s15, r3
 81035de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035e2:	ed97 6a02 	vldr	s12, [r7, #8]
 81035e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810376c <HAL_RCC_GetSysClockFreq+0x2e4>
 81035ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81035f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8103602:	e087      	b.n	8103714 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103604:	693b      	ldr	r3, [r7, #16]
 8103606:	ee07 3a90 	vmov	s15, r3
 810360a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810360e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8103770 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103616:	4b51      	ldr	r3, [pc, #324]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810361a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810361e:	ee07 3a90 	vmov	s15, r3
 8103622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103626:	ed97 6a02 	vldr	s12, [r7, #8]
 810362a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810376c <HAL_RCC_GetSysClockFreq+0x2e4>
 810362e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810363a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810363e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103646:	e065      	b.n	8103714 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103648:	693b      	ldr	r3, [r7, #16]
 810364a:	ee07 3a90 	vmov	s15, r3
 810364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103652:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8103774 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810365a:	4b40      	ldr	r3, [pc, #256]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810365e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103662:	ee07 3a90 	vmov	s15, r3
 8103666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810366a:	ed97 6a02 	vldr	s12, [r7, #8]
 810366e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810376c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810367a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810367e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810368a:	e043      	b.n	8103714 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810368c:	693b      	ldr	r3, [r7, #16]
 810368e:	ee07 3a90 	vmov	s15, r3
 8103692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103696:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8103778 <HAL_RCC_GetSysClockFreq+0x2f0>
 810369a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810369e:	4b2f      	ldr	r3, [pc, #188]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81036a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81036a6:	ee07 3a90 	vmov	s15, r3
 81036aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81036b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810376c <HAL_RCC_GetSysClockFreq+0x2e4>
 81036b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81036c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81036ce:	e021      	b.n	8103714 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81036d0:	693b      	ldr	r3, [r7, #16]
 81036d2:	ee07 3a90 	vmov	s15, r3
 81036d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8103774 <HAL_RCC_GetSysClockFreq+0x2ec>
 81036de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81036e2:	4b1e      	ldr	r3, [pc, #120]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81036e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81036ea:	ee07 3a90 	vmov	s15, r3
 81036ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81036f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810376c <HAL_RCC_GetSysClockFreq+0x2e4>
 81036fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810370e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103712:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8103714:	4b11      	ldr	r3, [pc, #68]	@ (810375c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103718:	0a5b      	lsrs	r3, r3, #9
 810371a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810371e:	3301      	adds	r3, #1
 8103720:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8103722:	683b      	ldr	r3, [r7, #0]
 8103724:	ee07 3a90 	vmov	s15, r3
 8103728:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810372c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103738:	ee17 3a90 	vmov	r3, s15
 810373c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810373e:	e005      	b.n	810374c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103740:	2300      	movs	r3, #0
 8103742:	61bb      	str	r3, [r7, #24]
      break;
 8103744:	e002      	b.n	810374c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8103746:	4b07      	ldr	r3, [pc, #28]	@ (8103764 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103748:	61bb      	str	r3, [r7, #24]
      break;
 810374a:	bf00      	nop
  }

  return sysclockfreq;
 810374c:	69bb      	ldr	r3, [r7, #24]
}
 810374e:	4618      	mov	r0, r3
 8103750:	3724      	adds	r7, #36	@ 0x24
 8103752:	46bd      	mov	sp, r7
 8103754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103758:	4770      	bx	lr
 810375a:	bf00      	nop
 810375c:	58024400 	.word	0x58024400
 8103760:	03d09000 	.word	0x03d09000
 8103764:	003d0900 	.word	0x003d0900
 8103768:	017d7840 	.word	0x017d7840
 810376c:	46000000 	.word	0x46000000
 8103770:	4c742400 	.word	0x4c742400
 8103774:	4a742400 	.word	0x4a742400
 8103778:	4bbebc20 	.word	0x4bbebc20

0810377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810377c:	b580      	push	{r7, lr}
 810377e:	b082      	sub	sp, #8
 8103780:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103782:	f7ff fe81 	bl	8103488 <HAL_RCC_GetSysClockFreq>
 8103786:	4602      	mov	r2, r0
 8103788:	4b11      	ldr	r3, [pc, #68]	@ (81037d0 <HAL_RCC_GetHCLKFreq+0x54>)
 810378a:	699b      	ldr	r3, [r3, #24]
 810378c:	0a1b      	lsrs	r3, r3, #8
 810378e:	f003 030f 	and.w	r3, r3, #15
 8103792:	4910      	ldr	r1, [pc, #64]	@ (81037d4 <HAL_RCC_GetHCLKFreq+0x58>)
 8103794:	5ccb      	ldrb	r3, [r1, r3]
 8103796:	f003 031f 	and.w	r3, r3, #31
 810379a:	fa22 f303 	lsr.w	r3, r2, r3
 810379e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81037a0:	4b0b      	ldr	r3, [pc, #44]	@ (81037d0 <HAL_RCC_GetHCLKFreq+0x54>)
 81037a2:	699b      	ldr	r3, [r3, #24]
 81037a4:	f003 030f 	and.w	r3, r3, #15
 81037a8:	4a0a      	ldr	r2, [pc, #40]	@ (81037d4 <HAL_RCC_GetHCLKFreq+0x58>)
 81037aa:	5cd3      	ldrb	r3, [r2, r3]
 81037ac:	f003 031f 	and.w	r3, r3, #31
 81037b0:	687a      	ldr	r2, [r7, #4]
 81037b2:	fa22 f303 	lsr.w	r3, r2, r3
 81037b6:	4a08      	ldr	r2, [pc, #32]	@ (81037d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81037b8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81037ba:	4b07      	ldr	r3, [pc, #28]	@ (81037d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	4a07      	ldr	r2, [pc, #28]	@ (81037dc <HAL_RCC_GetHCLKFreq+0x60>)
 81037c0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81037c2:	4b05      	ldr	r3, [pc, #20]	@ (81037d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81037c4:	681b      	ldr	r3, [r3, #0]
}
 81037c6:	4618      	mov	r0, r3
 81037c8:	3708      	adds	r7, #8
 81037ca:	46bd      	mov	sp, r7
 81037cc:	bd80      	pop	{r7, pc}
 81037ce:	bf00      	nop
 81037d0:	58024400 	.word	0x58024400
 81037d4:	0810c95c 	.word	0x0810c95c
 81037d8:	10000004 	.word	0x10000004
 81037dc:	10000000 	.word	0x10000000

081037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81037e0:	b580      	push	{r7, lr}
 81037e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81037e4:	f7ff ffca 	bl	810377c <HAL_RCC_GetHCLKFreq>
 81037e8:	4602      	mov	r2, r0
 81037ea:	4b06      	ldr	r3, [pc, #24]	@ (8103804 <HAL_RCC_GetPCLK1Freq+0x24>)
 81037ec:	69db      	ldr	r3, [r3, #28]
 81037ee:	091b      	lsrs	r3, r3, #4
 81037f0:	f003 0307 	and.w	r3, r3, #7
 81037f4:	4904      	ldr	r1, [pc, #16]	@ (8103808 <HAL_RCC_GetPCLK1Freq+0x28>)
 81037f6:	5ccb      	ldrb	r3, [r1, r3]
 81037f8:	f003 031f 	and.w	r3, r3, #31
 81037fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103800:	4618      	mov	r0, r3
 8103802:	bd80      	pop	{r7, pc}
 8103804:	58024400 	.word	0x58024400
 8103808:	0810c95c 	.word	0x0810c95c

0810380c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810380c:	b480      	push	{r7}
 810380e:	b083      	sub	sp, #12
 8103810:	af00      	add	r7, sp, #0
 8103812:	6078      	str	r0, [r7, #4]
 8103814:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	223f      	movs	r2, #63	@ 0x3f
 810381a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810381c:	4b1a      	ldr	r3, [pc, #104]	@ (8103888 <HAL_RCC_GetClockConfig+0x7c>)
 810381e:	691b      	ldr	r3, [r3, #16]
 8103820:	f003 0207 	and.w	r2, r3, #7
 8103824:	687b      	ldr	r3, [r7, #4]
 8103826:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8103828:	4b17      	ldr	r3, [pc, #92]	@ (8103888 <HAL_RCC_GetClockConfig+0x7c>)
 810382a:	699b      	ldr	r3, [r3, #24]
 810382c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8103834:	4b14      	ldr	r3, [pc, #80]	@ (8103888 <HAL_RCC_GetClockConfig+0x7c>)
 8103836:	699b      	ldr	r3, [r3, #24]
 8103838:	f003 020f 	and.w	r2, r3, #15
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8103840:	4b11      	ldr	r3, [pc, #68]	@ (8103888 <HAL_RCC_GetClockConfig+0x7c>)
 8103842:	699b      	ldr	r3, [r3, #24]
 8103844:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810384c:	4b0e      	ldr	r3, [pc, #56]	@ (8103888 <HAL_RCC_GetClockConfig+0x7c>)
 810384e:	69db      	ldr	r3, [r3, #28]
 8103850:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8103858:	4b0b      	ldr	r3, [pc, #44]	@ (8103888 <HAL_RCC_GetClockConfig+0x7c>)
 810385a:	69db      	ldr	r3, [r3, #28]
 810385c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8103864:	4b08      	ldr	r3, [pc, #32]	@ (8103888 <HAL_RCC_GetClockConfig+0x7c>)
 8103866:	6a1b      	ldr	r3, [r3, #32]
 8103868:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8103870:	4b06      	ldr	r3, [pc, #24]	@ (810388c <HAL_RCC_GetClockConfig+0x80>)
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	f003 020f 	and.w	r2, r3, #15
 8103878:	683b      	ldr	r3, [r7, #0]
 810387a:	601a      	str	r2, [r3, #0]
}
 810387c:	bf00      	nop
 810387e:	370c      	adds	r7, #12
 8103880:	46bd      	mov	sp, r7
 8103882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103886:	4770      	bx	lr
 8103888:	58024400 	.word	0x58024400
 810388c:	52002000 	.word	0x52002000

08103890 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103894:	b0cc      	sub	sp, #304	@ 0x130
 8103896:	af00      	add	r7, sp, #0
 8103898:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810389c:	2300      	movs	r3, #0
 810389e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81038a2:	2300      	movs	r3, #0
 81038a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81038a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81038b4:	2500      	movs	r5, #0
 81038b6:	ea54 0305 	orrs.w	r3, r4, r5
 81038ba:	d049      	beq.n	8103950 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81038bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81038c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81038c6:	d02f      	beq.n	8103928 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81038c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81038cc:	d828      	bhi.n	8103920 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81038ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81038d2:	d01a      	beq.n	810390a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81038d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81038d8:	d822      	bhi.n	8103920 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81038da:	2b00      	cmp	r3, #0
 81038dc:	d003      	beq.n	81038e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81038de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81038e2:	d007      	beq.n	81038f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81038e4:	e01c      	b.n	8103920 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038e6:	4bb8      	ldr	r3, [pc, #736]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81038ea:	4ab7      	ldr	r2, [pc, #732]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81038f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81038f2:	e01a      	b.n	810392a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81038f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038f8:	3308      	adds	r3, #8
 81038fa:	2102      	movs	r1, #2
 81038fc:	4618      	mov	r0, r3
 81038fe:	f002 fba1 	bl	8106044 <RCCEx_PLL2_Config>
 8103902:	4603      	mov	r3, r0
 8103904:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103908:	e00f      	b.n	810392a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810390a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810390e:	3328      	adds	r3, #40	@ 0x28
 8103910:	2102      	movs	r1, #2
 8103912:	4618      	mov	r0, r3
 8103914:	f002 fc48 	bl	81061a8 <RCCEx_PLL3_Config>
 8103918:	4603      	mov	r3, r0
 810391a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810391e:	e004      	b.n	810392a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103920:	2301      	movs	r3, #1
 8103922:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103926:	e000      	b.n	810392a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103928:	bf00      	nop
    }

    if (ret == HAL_OK)
 810392a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810392e:	2b00      	cmp	r3, #0
 8103930:	d10a      	bne.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103932:	4ba5      	ldr	r3, [pc, #660]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103936:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810393a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810393e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103940:	4aa1      	ldr	r2, [pc, #644]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103942:	430b      	orrs	r3, r1
 8103944:	6513      	str	r3, [r2, #80]	@ 0x50
 8103946:	e003      	b.n	8103950 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103948:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810394c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103950:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103958:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810395c:	f04f 0900 	mov.w	r9, #0
 8103960:	ea58 0309 	orrs.w	r3, r8, r9
 8103964:	d047      	beq.n	81039f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8103966:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810396a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810396c:	2b04      	cmp	r3, #4
 810396e:	d82a      	bhi.n	81039c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103970:	a201      	add	r2, pc, #4	@ (adr r2, 8103978 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8103972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103976:	bf00      	nop
 8103978:	0810398d 	.word	0x0810398d
 810397c:	0810399b 	.word	0x0810399b
 8103980:	081039b1 	.word	0x081039b1
 8103984:	081039cf 	.word	0x081039cf
 8103988:	081039cf 	.word	0x081039cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810398c:	4b8e      	ldr	r3, [pc, #568]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103990:	4a8d      	ldr	r2, [pc, #564]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103998:	e01a      	b.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810399a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810399e:	3308      	adds	r3, #8
 81039a0:	2100      	movs	r1, #0
 81039a2:	4618      	mov	r0, r3
 81039a4:	f002 fb4e 	bl	8106044 <RCCEx_PLL2_Config>
 81039a8:	4603      	mov	r3, r0
 81039aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81039ae:	e00f      	b.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81039b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039b4:	3328      	adds	r3, #40	@ 0x28
 81039b6:	2100      	movs	r1, #0
 81039b8:	4618      	mov	r0, r3
 81039ba:	f002 fbf5 	bl	81061a8 <RCCEx_PLL3_Config>
 81039be:	4603      	mov	r3, r0
 81039c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81039c4:	e004      	b.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81039c6:	2301      	movs	r3, #1
 81039c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81039cc:	e000      	b.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81039ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81039d4:	2b00      	cmp	r3, #0
 81039d6:	d10a      	bne.n	81039ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81039d8:	4b7b      	ldr	r3, [pc, #492]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81039dc:	f023 0107 	bic.w	r1, r3, #7
 81039e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81039e6:	4a78      	ldr	r2, [pc, #480]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039e8:	430b      	orrs	r3, r1
 81039ea:	6513      	str	r3, [r2, #80]	@ 0x50
 81039ec:	e003      	b.n	81039f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81039f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81039f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8103a02:	f04f 0b00 	mov.w	fp, #0
 8103a06:	ea5a 030b 	orrs.w	r3, sl, fp
 8103a0a:	d04c      	beq.n	8103aa6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103a16:	d030      	beq.n	8103a7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103a1c:	d829      	bhi.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103a1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8103a20:	d02d      	beq.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8103a22:	2bc0      	cmp	r3, #192	@ 0xc0
 8103a24:	d825      	bhi.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103a26:	2b80      	cmp	r3, #128	@ 0x80
 8103a28:	d018      	beq.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8103a2a:	2b80      	cmp	r3, #128	@ 0x80
 8103a2c:	d821      	bhi.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103a2e:	2b00      	cmp	r3, #0
 8103a30:	d002      	beq.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8103a32:	2b40      	cmp	r3, #64	@ 0x40
 8103a34:	d007      	beq.n	8103a46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8103a36:	e01c      	b.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a38:	4b63      	ldr	r3, [pc, #396]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103a3c:	4a62      	ldr	r2, [pc, #392]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103a44:	e01c      	b.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a4a:	3308      	adds	r3, #8
 8103a4c:	2100      	movs	r1, #0
 8103a4e:	4618      	mov	r0, r3
 8103a50:	f002 faf8 	bl	8106044 <RCCEx_PLL2_Config>
 8103a54:	4603      	mov	r3, r0
 8103a56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103a5a:	e011      	b.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a60:	3328      	adds	r3, #40	@ 0x28
 8103a62:	2100      	movs	r1, #0
 8103a64:	4618      	mov	r0, r3
 8103a66:	f002 fb9f 	bl	81061a8 <RCCEx_PLL3_Config>
 8103a6a:	4603      	mov	r3, r0
 8103a6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103a70:	e006      	b.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a72:	2301      	movs	r3, #1
 8103a74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103a78:	e002      	b.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103a7a:	bf00      	nop
 8103a7c:	e000      	b.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a84:	2b00      	cmp	r3, #0
 8103a86:	d10a      	bne.n	8103a9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103a88:	4b4f      	ldr	r3, [pc, #316]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103a8c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8103a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103a96:	4a4c      	ldr	r2, [pc, #304]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a98:	430b      	orrs	r3, r1
 8103a9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8103a9c:	e003      	b.n	8103aa6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103aa2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103aae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8103ab2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8103ab6:	2300      	movs	r3, #0
 8103ab8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8103abc:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8103ac0:	460b      	mov	r3, r1
 8103ac2:	4313      	orrs	r3, r2
 8103ac4:	d053      	beq.n	8103b6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8103ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103ace:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103ad2:	d035      	beq.n	8103b40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103ad4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103ad8:	d82e      	bhi.n	8103b38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103ada:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103ade:	d031      	beq.n	8103b44 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103ae0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103ae4:	d828      	bhi.n	8103b38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103ae6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103aea:	d01a      	beq.n	8103b22 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103aec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103af0:	d822      	bhi.n	8103b38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103af2:	2b00      	cmp	r3, #0
 8103af4:	d003      	beq.n	8103afe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103af6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103afa:	d007      	beq.n	8103b0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103afc:	e01c      	b.n	8103b38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103afe:	4b32      	ldr	r3, [pc, #200]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103b02:	4a31      	ldr	r2, [pc, #196]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103b0a:	e01c      	b.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b10:	3308      	adds	r3, #8
 8103b12:	2100      	movs	r1, #0
 8103b14:	4618      	mov	r0, r3
 8103b16:	f002 fa95 	bl	8106044 <RCCEx_PLL2_Config>
 8103b1a:	4603      	mov	r3, r0
 8103b1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103b20:	e011      	b.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b26:	3328      	adds	r3, #40	@ 0x28
 8103b28:	2100      	movs	r1, #0
 8103b2a:	4618      	mov	r0, r3
 8103b2c:	f002 fb3c 	bl	81061a8 <RCCEx_PLL3_Config>
 8103b30:	4603      	mov	r3, r0
 8103b32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103b36:	e006      	b.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103b38:	2301      	movs	r3, #1
 8103b3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103b3e:	e002      	b.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103b40:	bf00      	nop
 8103b42:	e000      	b.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b4a:	2b00      	cmp	r3, #0
 8103b4c:	d10b      	bne.n	8103b66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b52:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8103b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b60:	430b      	orrs	r3, r1
 8103b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8103b64:	e003      	b.n	8103b6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b76:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8103b7a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8103b7e:	2300      	movs	r3, #0
 8103b80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8103b84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8103b88:	460b      	mov	r3, r1
 8103b8a:	4313      	orrs	r3, r2
 8103b8c:	d056      	beq.n	8103c3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103b96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103b9a:	d038      	beq.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103b9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103ba0:	d831      	bhi.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103ba2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103ba6:	d034      	beq.n	8103c12 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103ba8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103bac:	d82b      	bhi.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103bae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103bb2:	d01d      	beq.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8103bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103bb8:	d825      	bhi.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103bba:	2b00      	cmp	r3, #0
 8103bbc:	d006      	beq.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103bbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8103bc2:	d00a      	beq.n	8103bda <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103bc4:	e01f      	b.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103bc6:	bf00      	nop
 8103bc8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bcc:	4ba2      	ldr	r3, [pc, #648]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103bd0:	4aa1      	ldr	r2, [pc, #644]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103bd8:	e01c      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bde:	3308      	adds	r3, #8
 8103be0:	2100      	movs	r1, #0
 8103be2:	4618      	mov	r0, r3
 8103be4:	f002 fa2e 	bl	8106044 <RCCEx_PLL2_Config>
 8103be8:	4603      	mov	r3, r0
 8103bea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103bee:	e011      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bf4:	3328      	adds	r3, #40	@ 0x28
 8103bf6:	2100      	movs	r1, #0
 8103bf8:	4618      	mov	r0, r3
 8103bfa:	f002 fad5 	bl	81061a8 <RCCEx_PLL3_Config>
 8103bfe:	4603      	mov	r3, r0
 8103c00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103c04:	e006      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103c06:	2301      	movs	r3, #1
 8103c08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103c0c:	e002      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103c0e:	bf00      	nop
 8103c10:	e000      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c18:	2b00      	cmp	r3, #0
 8103c1a:	d10b      	bne.n	8103c34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103c1c:	4b8e      	ldr	r3, [pc, #568]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103c20:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8103c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103c2c:	4a8a      	ldr	r2, [pc, #552]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c2e:	430b      	orrs	r3, r1
 8103c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8103c32:	e003      	b.n	8103c3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c38:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c44:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8103c48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8103c4c:	2300      	movs	r3, #0
 8103c4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8103c52:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8103c56:	460b      	mov	r3, r1
 8103c58:	4313      	orrs	r3, r2
 8103c5a:	d03a      	beq.n	8103cd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103c62:	2b30      	cmp	r3, #48	@ 0x30
 8103c64:	d01f      	beq.n	8103ca6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103c66:	2b30      	cmp	r3, #48	@ 0x30
 8103c68:	d819      	bhi.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103c6a:	2b20      	cmp	r3, #32
 8103c6c:	d00c      	beq.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103c6e:	2b20      	cmp	r3, #32
 8103c70:	d815      	bhi.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103c72:	2b00      	cmp	r3, #0
 8103c74:	d019      	beq.n	8103caa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103c76:	2b10      	cmp	r3, #16
 8103c78:	d111      	bne.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c7a:	4b77      	ldr	r3, [pc, #476]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103c7e:	4a76      	ldr	r2, [pc, #472]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103c86:	e011      	b.n	8103cac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c8c:	3308      	adds	r3, #8
 8103c8e:	2102      	movs	r1, #2
 8103c90:	4618      	mov	r0, r3
 8103c92:	f002 f9d7 	bl	8106044 <RCCEx_PLL2_Config>
 8103c96:	4603      	mov	r3, r0
 8103c98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103c9c:	e006      	b.n	8103cac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103c9e:	2301      	movs	r3, #1
 8103ca0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103ca4:	e002      	b.n	8103cac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103ca6:	bf00      	nop
 8103ca8:	e000      	b.n	8103cac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103cac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103cb0:	2b00      	cmp	r3, #0
 8103cb2:	d10a      	bne.n	8103cca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103cb4:	4b68      	ldr	r3, [pc, #416]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103cb8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8103cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103cc2:	4a65      	ldr	r2, [pc, #404]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103cc4:	430b      	orrs	r3, r1
 8103cc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103cc8:	e003      	b.n	8103cd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103cce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cda:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8103cde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8103ce2:	2300      	movs	r3, #0
 8103ce4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8103ce8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8103cec:	460b      	mov	r3, r1
 8103cee:	4313      	orrs	r3, r2
 8103cf0:	d051      	beq.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103cf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103cfc:	d035      	beq.n	8103d6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103d02:	d82e      	bhi.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103d04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103d08:	d031      	beq.n	8103d6e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103d0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103d0e:	d828      	bhi.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103d14:	d01a      	beq.n	8103d4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103d1a:	d822      	bhi.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103d1c:	2b00      	cmp	r3, #0
 8103d1e:	d003      	beq.n	8103d28 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103d24:	d007      	beq.n	8103d36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103d26:	e01c      	b.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d28:	4b4b      	ldr	r3, [pc, #300]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103d34:	e01c      	b.n	8103d70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d3a:	3308      	adds	r3, #8
 8103d3c:	2100      	movs	r1, #0
 8103d3e:	4618      	mov	r0, r3
 8103d40:	f002 f980 	bl	8106044 <RCCEx_PLL2_Config>
 8103d44:	4603      	mov	r3, r0
 8103d46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103d4a:	e011      	b.n	8103d70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d50:	3328      	adds	r3, #40	@ 0x28
 8103d52:	2100      	movs	r1, #0
 8103d54:	4618      	mov	r0, r3
 8103d56:	f002 fa27 	bl	81061a8 <RCCEx_PLL3_Config>
 8103d5a:	4603      	mov	r3, r0
 8103d5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103d60:	e006      	b.n	8103d70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d62:	2301      	movs	r3, #1
 8103d64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103d68:	e002      	b.n	8103d70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103d6a:	bf00      	nop
 8103d6c:	e000      	b.n	8103d70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d74:	2b00      	cmp	r3, #0
 8103d76:	d10a      	bne.n	8103d8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103d78:	4b37      	ldr	r3, [pc, #220]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103d7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8103d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d86:	4a34      	ldr	r2, [pc, #208]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103d88:	430b      	orrs	r3, r1
 8103d8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8103d8c:	e003      	b.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8103da2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8103da6:	2300      	movs	r3, #0
 8103da8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8103dac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8103db0:	460b      	mov	r3, r1
 8103db2:	4313      	orrs	r3, r2
 8103db4:	d056      	beq.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103dc0:	d033      	beq.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103dc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103dc6:	d82c      	bhi.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103dc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103dcc:	d02f      	beq.n	8103e2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103dce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103dd2:	d826      	bhi.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103dd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103dd8:	d02b      	beq.n	8103e32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103dda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103dde:	d820      	bhi.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103de4:	d012      	beq.n	8103e0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103dea:	d81a      	bhi.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103dec:	2b00      	cmp	r3, #0
 8103dee:	d022      	beq.n	8103e36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103df4:	d115      	bne.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dfa:	3308      	adds	r3, #8
 8103dfc:	2101      	movs	r1, #1
 8103dfe:	4618      	mov	r0, r3
 8103e00:	f002 f920 	bl	8106044 <RCCEx_PLL2_Config>
 8103e04:	4603      	mov	r3, r0
 8103e06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103e0a:	e015      	b.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103e0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e10:	3328      	adds	r3, #40	@ 0x28
 8103e12:	2101      	movs	r1, #1
 8103e14:	4618      	mov	r0, r3
 8103e16:	f002 f9c7 	bl	81061a8 <RCCEx_PLL3_Config>
 8103e1a:	4603      	mov	r3, r0
 8103e1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103e20:	e00a      	b.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103e22:	2301      	movs	r3, #1
 8103e24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103e28:	e006      	b.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103e2a:	bf00      	nop
 8103e2c:	e004      	b.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103e2e:	bf00      	nop
 8103e30:	e002      	b.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103e32:	bf00      	nop
 8103e34:	e000      	b.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e3c:	2b00      	cmp	r3, #0
 8103e3e:	d10d      	bne.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103e40:	4b05      	ldr	r3, [pc, #20]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103e44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103e48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103e4e:	4a02      	ldr	r2, [pc, #8]	@ (8103e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103e50:	430b      	orrs	r3, r1
 8103e52:	6513      	str	r3, [r2, #80]	@ 0x50
 8103e54:	e006      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103e56:	bf00      	nop
 8103e58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e60:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e6c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103e70:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8103e74:	2300      	movs	r3, #0
 8103e76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8103e7a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8103e7e:	460b      	mov	r3, r1
 8103e80:	4313      	orrs	r3, r2
 8103e82:	d055      	beq.n	8103f30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103e90:	d033      	beq.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103e96:	d82c      	bhi.n	8103ef2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103e9c:	d02f      	beq.n	8103efe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103ea2:	d826      	bhi.n	8103ef2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103ea4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103ea8:	d02b      	beq.n	8103f02 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103eaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103eae:	d820      	bhi.n	8103ef2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103eb4:	d012      	beq.n	8103edc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103eba:	d81a      	bhi.n	8103ef2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	d022      	beq.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103ec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103ec4:	d115      	bne.n	8103ef2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103ec6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103eca:	3308      	adds	r3, #8
 8103ecc:	2101      	movs	r1, #1
 8103ece:	4618      	mov	r0, r3
 8103ed0:	f002 f8b8 	bl	8106044 <RCCEx_PLL2_Config>
 8103ed4:	4603      	mov	r3, r0
 8103ed6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103eda:	e015      	b.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103edc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ee0:	3328      	adds	r3, #40	@ 0x28
 8103ee2:	2101      	movs	r1, #1
 8103ee4:	4618      	mov	r0, r3
 8103ee6:	f002 f95f 	bl	81061a8 <RCCEx_PLL3_Config>
 8103eea:	4603      	mov	r3, r0
 8103eec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103ef0:	e00a      	b.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103ef2:	2301      	movs	r3, #1
 8103ef4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103ef8:	e006      	b.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103efa:	bf00      	nop
 8103efc:	e004      	b.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103efe:	bf00      	nop
 8103f00:	e002      	b.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103f02:	bf00      	nop
 8103f04:	e000      	b.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f0c:	2b00      	cmp	r3, #0
 8103f0e:	d10b      	bne.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103f10:	4bb7      	ldr	r3, [pc, #732]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103f14:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103f20:	4ab3      	ldr	r2, [pc, #716]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103f22:	430b      	orrs	r3, r1
 8103f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8103f26:	e003      	b.n	8103f30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f2c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8103f30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f38:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8103f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8103f40:	2300      	movs	r3, #0
 8103f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8103f46:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8103f4a:	460b      	mov	r3, r1
 8103f4c:	4313      	orrs	r3, r2
 8103f4e:	d02a      	beq.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8103f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f56:	2b00      	cmp	r3, #0
 8103f58:	d011      	beq.n	8103f7e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8103f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103f5e:	d10a      	bne.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f64:	3308      	adds	r3, #8
 8103f66:	2101      	movs	r1, #1
 8103f68:	4618      	mov	r0, r3
 8103f6a:	f002 f86b 	bl	8106044 <RCCEx_PLL2_Config>
 8103f6e:	4603      	mov	r3, r0
 8103f70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8103f74:	e004      	b.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f76:	2301      	movs	r3, #1
 8103f78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103f7c:	e000      	b.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8103f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f84:	2b00      	cmp	r3, #0
 8103f86:	d10a      	bne.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8103f88:	4b99      	ldr	r3, [pc, #612]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103f8c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8103f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f96:	4a96      	ldr	r2, [pc, #600]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103f98:	430b      	orrs	r3, r1
 8103f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103f9c:	e003      	b.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103fa2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fae:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8103fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8103fb6:	2300      	movs	r3, #0
 8103fb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8103fbc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8103fc0:	460b      	mov	r3, r1
 8103fc2:	4313      	orrs	r3, r2
 8103fc4:	d037      	beq.n	8104036 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103fd0:	d00e      	beq.n	8103ff0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8103fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103fd6:	d816      	bhi.n	8104006 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8103fd8:	2b00      	cmp	r3, #0
 8103fda:	d018      	beq.n	810400e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8103fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103fe0:	d111      	bne.n	8104006 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103fe2:	4b83      	ldr	r3, [pc, #524]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fe6:	4a82      	ldr	r2, [pc, #520]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103fee:	e00f      	b.n	8104010 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ff4:	3308      	adds	r3, #8
 8103ff6:	2101      	movs	r1, #1
 8103ff8:	4618      	mov	r0, r3
 8103ffa:	f002 f823 	bl	8106044 <RCCEx_PLL2_Config>
 8103ffe:	4603      	mov	r3, r0
 8104000:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104004:	e004      	b.n	8104010 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104006:	2301      	movs	r3, #1
 8104008:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810400c:	e000      	b.n	8104010 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810400e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104010:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104014:	2b00      	cmp	r3, #0
 8104016:	d10a      	bne.n	810402e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104018:	4b75      	ldr	r3, [pc, #468]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810401a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810401c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8104020:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8104026:	4a72      	ldr	r2, [pc, #456]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104028:	430b      	orrs	r3, r1
 810402a:	6513      	str	r3, [r2, #80]	@ 0x50
 810402c:	e003      	b.n	8104036 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810402e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104032:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104036:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810403e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8104042:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8104046:	2300      	movs	r3, #0
 8104048:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810404c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8104050:	460b      	mov	r3, r1
 8104052:	4313      	orrs	r3, r2
 8104054:	d03a      	beq.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8104056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810405a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810405c:	2b03      	cmp	r3, #3
 810405e:	d81d      	bhi.n	810409c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8104060:	a201      	add	r2, pc, #4	@ (adr r2, 8104068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8104062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104066:	bf00      	nop
 8104068:	081040a5 	.word	0x081040a5
 810406c:	08104079 	.word	0x08104079
 8104070:	08104087 	.word	0x08104087
 8104074:	081040a5 	.word	0x081040a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104078:	4b5d      	ldr	r3, [pc, #372]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810407c:	4a5c      	ldr	r2, [pc, #368]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810407e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104082:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104084:	e00f      	b.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810408a:	3308      	adds	r3, #8
 810408c:	2102      	movs	r1, #2
 810408e:	4618      	mov	r0, r3
 8104090:	f001 ffd8 	bl	8106044 <RCCEx_PLL2_Config>
 8104094:	4603      	mov	r3, r0
 8104096:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810409a:	e004      	b.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810409c:	2301      	movs	r3, #1
 810409e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81040a2:	e000      	b.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 81040a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81040a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81040aa:	2b00      	cmp	r3, #0
 81040ac:	d10a      	bne.n	81040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81040ae:	4b50      	ldr	r3, [pc, #320]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81040b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81040b2:	f023 0103 	bic.w	r1, r3, #3
 81040b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81040bc:	4a4c      	ldr	r2, [pc, #304]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81040be:	430b      	orrs	r3, r1
 81040c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81040c2:	e003      	b.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81040c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81040cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81040d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81040dc:	2300      	movs	r3, #0
 81040de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81040e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81040e6:	460b      	mov	r3, r1
 81040e8:	4313      	orrs	r3, r2
 81040ea:	f000 80a0 	beq.w	810422e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81040ee:	4b41      	ldr	r3, [pc, #260]	@ (81041f4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81040f0:	681b      	ldr	r3, [r3, #0]
 81040f2:	4a40      	ldr	r2, [pc, #256]	@ (81041f4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81040f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81040f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81040fa:	f7fe fb7f 	bl	81027fc <HAL_GetTick>
 81040fe:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104102:	e00b      	b.n	810411c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104104:	f7fe fb7a 	bl	81027fc <HAL_GetTick>
 8104108:	4602      	mov	r2, r0
 810410a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810410e:	1ad3      	subs	r3, r2, r3
 8104110:	2b64      	cmp	r3, #100	@ 0x64
 8104112:	d903      	bls.n	810411c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8104114:	2303      	movs	r3, #3
 8104116:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810411a:	e005      	b.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810411c:	4b35      	ldr	r3, [pc, #212]	@ (81041f4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104124:	2b00      	cmp	r3, #0
 8104126:	d0ed      	beq.n	8104104 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8104128:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810412c:	2b00      	cmp	r3, #0
 810412e:	d17a      	bne.n	8104226 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104130:	4b2f      	ldr	r3, [pc, #188]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104132:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8104134:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104138:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810413c:	4053      	eors	r3, r2
 810413e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8104142:	2b00      	cmp	r3, #0
 8104144:	d015      	beq.n	8104172 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104146:	4b2a      	ldr	r3, [pc, #168]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810414a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810414e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104152:	4b27      	ldr	r3, [pc, #156]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104156:	4a26      	ldr	r2, [pc, #152]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810415c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810415e:	4b24      	ldr	r3, [pc, #144]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104162:	4a23      	ldr	r2, [pc, #140]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8104168:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810416a:	4a21      	ldr	r2, [pc, #132]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810416c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8104170:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104172:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104176:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810417a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810417e:	d118      	bne.n	81041b2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104180:	f7fe fb3c 	bl	81027fc <HAL_GetTick>
 8104184:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104188:	e00d      	b.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810418a:	f7fe fb37 	bl	81027fc <HAL_GetTick>
 810418e:	4602      	mov	r2, r0
 8104190:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8104194:	1ad2      	subs	r2, r2, r3
 8104196:	f241 3388 	movw	r3, #5000	@ 0x1388
 810419a:	429a      	cmp	r2, r3
 810419c:	d903      	bls.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 810419e:	2303      	movs	r3, #3
 81041a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 81041a4:	e005      	b.n	81041b2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81041a6:	4b12      	ldr	r3, [pc, #72]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81041a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81041aa:	f003 0302 	and.w	r3, r3, #2
 81041ae:	2b00      	cmp	r3, #0
 81041b0:	d0eb      	beq.n	810418a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 81041b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81041b6:	2b00      	cmp	r3, #0
 81041b8:	d130      	bne.n	810421c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81041ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81041c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81041c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81041ca:	d115      	bne.n	81041f8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 81041cc:	4b08      	ldr	r3, [pc, #32]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81041ce:	691b      	ldr	r3, [r3, #16]
 81041d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81041d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81041dc:	091b      	lsrs	r3, r3, #4
 81041de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81041e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81041e6:	4a02      	ldr	r2, [pc, #8]	@ (81041f0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81041e8:	430b      	orrs	r3, r1
 81041ea:	6113      	str	r3, [r2, #16]
 81041ec:	e00a      	b.n	8104204 <HAL_RCCEx_PeriphCLKConfig+0x974>
 81041ee:	bf00      	nop
 81041f0:	58024400 	.word	0x58024400
 81041f4:	58024800 	.word	0x58024800
 81041f8:	4bd4      	ldr	r3, [pc, #848]	@ (810454c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81041fa:	691b      	ldr	r3, [r3, #16]
 81041fc:	4ad3      	ldr	r2, [pc, #844]	@ (810454c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81041fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8104202:	6113      	str	r3, [r2, #16]
 8104204:	4bd1      	ldr	r3, [pc, #836]	@ (810454c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104206:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8104208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810420c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8104210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104214:	4acd      	ldr	r2, [pc, #820]	@ (810454c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104216:	430b      	orrs	r3, r1
 8104218:	6713      	str	r3, [r2, #112]	@ 0x70
 810421a:	e008      	b.n	810422e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810421c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104220:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8104224:	e003      	b.n	810422e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104226:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810422a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810422e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104236:	f002 0301 	and.w	r3, r2, #1
 810423a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810423e:	2300      	movs	r3, #0
 8104240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8104244:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8104248:	460b      	mov	r3, r1
 810424a:	4313      	orrs	r3, r2
 810424c:	f000 808b 	beq.w	8104366 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8104250:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104258:	2b28      	cmp	r3, #40	@ 0x28
 810425a:	d86b      	bhi.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810425c:	a201      	add	r2, pc, #4	@ (adr r2, 8104264 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104262:	bf00      	nop
 8104264:	0810433d 	.word	0x0810433d
 8104268:	08104335 	.word	0x08104335
 810426c:	08104335 	.word	0x08104335
 8104270:	08104335 	.word	0x08104335
 8104274:	08104335 	.word	0x08104335
 8104278:	08104335 	.word	0x08104335
 810427c:	08104335 	.word	0x08104335
 8104280:	08104335 	.word	0x08104335
 8104284:	08104309 	.word	0x08104309
 8104288:	08104335 	.word	0x08104335
 810428c:	08104335 	.word	0x08104335
 8104290:	08104335 	.word	0x08104335
 8104294:	08104335 	.word	0x08104335
 8104298:	08104335 	.word	0x08104335
 810429c:	08104335 	.word	0x08104335
 81042a0:	08104335 	.word	0x08104335
 81042a4:	0810431f 	.word	0x0810431f
 81042a8:	08104335 	.word	0x08104335
 81042ac:	08104335 	.word	0x08104335
 81042b0:	08104335 	.word	0x08104335
 81042b4:	08104335 	.word	0x08104335
 81042b8:	08104335 	.word	0x08104335
 81042bc:	08104335 	.word	0x08104335
 81042c0:	08104335 	.word	0x08104335
 81042c4:	0810433d 	.word	0x0810433d
 81042c8:	08104335 	.word	0x08104335
 81042cc:	08104335 	.word	0x08104335
 81042d0:	08104335 	.word	0x08104335
 81042d4:	08104335 	.word	0x08104335
 81042d8:	08104335 	.word	0x08104335
 81042dc:	08104335 	.word	0x08104335
 81042e0:	08104335 	.word	0x08104335
 81042e4:	0810433d 	.word	0x0810433d
 81042e8:	08104335 	.word	0x08104335
 81042ec:	08104335 	.word	0x08104335
 81042f0:	08104335 	.word	0x08104335
 81042f4:	08104335 	.word	0x08104335
 81042f8:	08104335 	.word	0x08104335
 81042fc:	08104335 	.word	0x08104335
 8104300:	08104335 	.word	0x08104335
 8104304:	0810433d 	.word	0x0810433d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810430c:	3308      	adds	r3, #8
 810430e:	2101      	movs	r1, #1
 8104310:	4618      	mov	r0, r3
 8104312:	f001 fe97 	bl	8106044 <RCCEx_PLL2_Config>
 8104316:	4603      	mov	r3, r0
 8104318:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810431c:	e00f      	b.n	810433e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810431e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104322:	3328      	adds	r3, #40	@ 0x28
 8104324:	2101      	movs	r1, #1
 8104326:	4618      	mov	r0, r3
 8104328:	f001 ff3e 	bl	81061a8 <RCCEx_PLL3_Config>
 810432c:	4603      	mov	r3, r0
 810432e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104332:	e004      	b.n	810433e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104334:	2301      	movs	r3, #1
 8104336:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810433a:	e000      	b.n	810433e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810433c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810433e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104342:	2b00      	cmp	r3, #0
 8104344:	d10b      	bne.n	810435e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104346:	4b81      	ldr	r3, [pc, #516]	@ (810454c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810434a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810434e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104356:	4a7d      	ldr	r2, [pc, #500]	@ (810454c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104358:	430b      	orrs	r3, r1
 810435a:	6553      	str	r3, [r2, #84]	@ 0x54
 810435c:	e003      	b.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810435e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104362:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810436e:	f002 0302 	and.w	r3, r2, #2
 8104372:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8104376:	2300      	movs	r3, #0
 8104378:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810437c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8104380:	460b      	mov	r3, r1
 8104382:	4313      	orrs	r3, r2
 8104384:	d042      	beq.n	810440c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104386:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810438a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810438c:	2b05      	cmp	r3, #5
 810438e:	d825      	bhi.n	81043dc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8104390:	a201      	add	r2, pc, #4	@ (adr r2, 8104398 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8104392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104396:	bf00      	nop
 8104398:	081043e5 	.word	0x081043e5
 810439c:	081043b1 	.word	0x081043b1
 81043a0:	081043c7 	.word	0x081043c7
 81043a4:	081043e5 	.word	0x081043e5
 81043a8:	081043e5 	.word	0x081043e5
 81043ac:	081043e5 	.word	0x081043e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81043b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043b4:	3308      	adds	r3, #8
 81043b6:	2101      	movs	r1, #1
 81043b8:	4618      	mov	r0, r3
 81043ba:	f001 fe43 	bl	8106044 <RCCEx_PLL2_Config>
 81043be:	4603      	mov	r3, r0
 81043c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81043c4:	e00f      	b.n	81043e6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81043c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043ca:	3328      	adds	r3, #40	@ 0x28
 81043cc:	2101      	movs	r1, #1
 81043ce:	4618      	mov	r0, r3
 81043d0:	f001 feea 	bl	81061a8 <RCCEx_PLL3_Config>
 81043d4:	4603      	mov	r3, r0
 81043d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81043da:	e004      	b.n	81043e6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81043dc:	2301      	movs	r3, #1
 81043de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81043e2:	e000      	b.n	81043e6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 81043e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81043e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043ea:	2b00      	cmp	r3, #0
 81043ec:	d10a      	bne.n	8104404 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81043ee:	4b57      	ldr	r3, [pc, #348]	@ (810454c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81043f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81043f2:	f023 0107 	bic.w	r1, r3, #7
 81043f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81043fc:	4a53      	ldr	r2, [pc, #332]	@ (810454c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81043fe:	430b      	orrs	r3, r1
 8104400:	6553      	str	r3, [r2, #84]	@ 0x54
 8104402:	e003      	b.n	810440c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104404:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104408:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810440c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104414:	f002 0304 	and.w	r3, r2, #4
 8104418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810441c:	2300      	movs	r3, #0
 810441e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8104422:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8104426:	460b      	mov	r3, r1
 8104428:	4313      	orrs	r3, r2
 810442a:	d044      	beq.n	81044b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810442c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8104434:	2b05      	cmp	r3, #5
 8104436:	d825      	bhi.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8104438:	a201      	add	r2, pc, #4	@ (adr r2, 8104440 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810443e:	bf00      	nop
 8104440:	0810448d 	.word	0x0810448d
 8104444:	08104459 	.word	0x08104459
 8104448:	0810446f 	.word	0x0810446f
 810444c:	0810448d 	.word	0x0810448d
 8104450:	0810448d 	.word	0x0810448d
 8104454:	0810448d 	.word	0x0810448d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810445c:	3308      	adds	r3, #8
 810445e:	2101      	movs	r1, #1
 8104460:	4618      	mov	r0, r3
 8104462:	f001 fdef 	bl	8106044 <RCCEx_PLL2_Config>
 8104466:	4603      	mov	r3, r0
 8104468:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810446c:	e00f      	b.n	810448e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810446e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104472:	3328      	adds	r3, #40	@ 0x28
 8104474:	2101      	movs	r1, #1
 8104476:	4618      	mov	r0, r3
 8104478:	f001 fe96 	bl	81061a8 <RCCEx_PLL3_Config>
 810447c:	4603      	mov	r3, r0
 810447e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104482:	e004      	b.n	810448e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104484:	2301      	movs	r3, #1
 8104486:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810448a:	e000      	b.n	810448e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 810448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810448e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104492:	2b00      	cmp	r3, #0
 8104494:	d10b      	bne.n	81044ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104496:	4b2d      	ldr	r3, [pc, #180]	@ (810454c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810449a:	f023 0107 	bic.w	r1, r3, #7
 810449e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81044a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81044a6:	4a29      	ldr	r2, [pc, #164]	@ (810454c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81044a8:	430b      	orrs	r3, r1
 81044aa:	6593      	str	r3, [r2, #88]	@ 0x58
 81044ac:	e003      	b.n	81044b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81044b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81044b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044be:	f002 0320 	and.w	r3, r2, #32
 81044c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81044c6:	2300      	movs	r3, #0
 81044c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81044cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81044d0:	460b      	mov	r3, r1
 81044d2:	4313      	orrs	r3, r2
 81044d4:	d057      	beq.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81044d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81044de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81044e2:	d035      	beq.n	8104550 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 81044e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81044e8:	d82c      	bhi.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81044ee:	d031      	beq.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 81044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81044f4:	d826      	bhi.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81044f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81044fa:	d02d      	beq.n	8104558 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 81044fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104500:	d820      	bhi.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8104502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104506:	d012      	beq.n	810452e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8104508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810450c:	d81a      	bhi.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810450e:	2b00      	cmp	r3, #0
 8104510:	d024      	beq.n	810455c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8104512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104516:	d115      	bne.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810451c:	3308      	adds	r3, #8
 810451e:	2100      	movs	r1, #0
 8104520:	4618      	mov	r0, r3
 8104522:	f001 fd8f 	bl	8106044 <RCCEx_PLL2_Config>
 8104526:	4603      	mov	r3, r0
 8104528:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810452c:	e017      	b.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810452e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104532:	3328      	adds	r3, #40	@ 0x28
 8104534:	2102      	movs	r1, #2
 8104536:	4618      	mov	r0, r3
 8104538:	f001 fe36 	bl	81061a8 <RCCEx_PLL3_Config>
 810453c:	4603      	mov	r3, r0
 810453e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104542:	e00c      	b.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104544:	2301      	movs	r3, #1
 8104546:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810454a:	e008      	b.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810454c:	58024400 	.word	0x58024400
        break;
 8104550:	bf00      	nop
 8104552:	e004      	b.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8104554:	bf00      	nop
 8104556:	e002      	b.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8104558:	bf00      	nop
 810455a:	e000      	b.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810455c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810455e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104562:	2b00      	cmp	r3, #0
 8104564:	d10b      	bne.n	810457e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104566:	4bc2      	ldr	r3, [pc, #776]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810456a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810456e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104576:	4abe      	ldr	r2, [pc, #760]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104578:	430b      	orrs	r3, r1
 810457a:	6553      	str	r3, [r2, #84]	@ 0x54
 810457c:	e003      	b.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810457e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104582:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104586:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810458e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8104592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8104596:	2300      	movs	r3, #0
 8104598:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810459c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81045a0:	460b      	mov	r3, r1
 81045a2:	4313      	orrs	r3, r2
 81045a4:	d055      	beq.n	8104652 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81045a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81045aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81045ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81045b2:	d033      	beq.n	810461c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 81045b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81045b8:	d82c      	bhi.n	8104614 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81045ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81045be:	d02f      	beq.n	8104620 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 81045c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81045c4:	d826      	bhi.n	8104614 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81045c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81045ca:	d02b      	beq.n	8104624 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 81045cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81045d0:	d820      	bhi.n	8104614 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81045d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81045d6:	d012      	beq.n	81045fe <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 81045d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81045dc:	d81a      	bhi.n	8104614 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81045de:	2b00      	cmp	r3, #0
 81045e0:	d022      	beq.n	8104628 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 81045e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81045e6:	d115      	bne.n	8104614 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81045e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81045ec:	3308      	adds	r3, #8
 81045ee:	2100      	movs	r1, #0
 81045f0:	4618      	mov	r0, r3
 81045f2:	f001 fd27 	bl	8106044 <RCCEx_PLL2_Config>
 81045f6:	4603      	mov	r3, r0
 81045f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81045fc:	e015      	b.n	810462a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81045fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104602:	3328      	adds	r3, #40	@ 0x28
 8104604:	2102      	movs	r1, #2
 8104606:	4618      	mov	r0, r3
 8104608:	f001 fdce 	bl	81061a8 <RCCEx_PLL3_Config>
 810460c:	4603      	mov	r3, r0
 810460e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104612:	e00a      	b.n	810462a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104614:	2301      	movs	r3, #1
 8104616:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810461a:	e006      	b.n	810462a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810461c:	bf00      	nop
 810461e:	e004      	b.n	810462a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104620:	bf00      	nop
 8104622:	e002      	b.n	810462a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104624:	bf00      	nop
 8104626:	e000      	b.n	810462a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104628:	bf00      	nop
    }

    if (ret == HAL_OK)
 810462a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810462e:	2b00      	cmp	r3, #0
 8104630:	d10b      	bne.n	810464a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104632:	4b8f      	ldr	r3, [pc, #572]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104636:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810463a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810463e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104642:	4a8b      	ldr	r2, [pc, #556]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104644:	430b      	orrs	r3, r1
 8104646:	6593      	str	r3, [r2, #88]	@ 0x58
 8104648:	e003      	b.n	8104652 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810464a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810464e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104656:	e9d3 2300 	ldrd	r2, r3, [r3]
 810465a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810465e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8104662:	2300      	movs	r3, #0
 8104664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8104668:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810466c:	460b      	mov	r3, r1
 810466e:	4313      	orrs	r3, r2
 8104670:	d055      	beq.n	810471e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104672:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810467a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810467e:	d033      	beq.n	81046e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8104680:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8104684:	d82c      	bhi.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810468a:	d02f      	beq.n	81046ec <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 810468c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104690:	d826      	bhi.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104692:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104696:	d02b      	beq.n	81046f0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8104698:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810469c:	d820      	bhi.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810469e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81046a2:	d012      	beq.n	81046ca <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 81046a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81046a8:	d81a      	bhi.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81046aa:	2b00      	cmp	r3, #0
 81046ac:	d022      	beq.n	81046f4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 81046ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81046b2:	d115      	bne.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81046b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81046b8:	3308      	adds	r3, #8
 81046ba:	2100      	movs	r1, #0
 81046bc:	4618      	mov	r0, r3
 81046be:	f001 fcc1 	bl	8106044 <RCCEx_PLL2_Config>
 81046c2:	4603      	mov	r3, r0
 81046c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81046c8:	e015      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81046ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81046ce:	3328      	adds	r3, #40	@ 0x28
 81046d0:	2102      	movs	r1, #2
 81046d2:	4618      	mov	r0, r3
 81046d4:	f001 fd68 	bl	81061a8 <RCCEx_PLL3_Config>
 81046d8:	4603      	mov	r3, r0
 81046da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81046de:	e00a      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81046e0:	2301      	movs	r3, #1
 81046e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81046e6:	e006      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81046e8:	bf00      	nop
 81046ea:	e004      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81046ec:	bf00      	nop
 81046ee:	e002      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81046f0:	bf00      	nop
 81046f2:	e000      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 81046f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81046f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81046fa:	2b00      	cmp	r3, #0
 81046fc:	d10b      	bne.n	8104716 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81046fe:	4b5c      	ldr	r3, [pc, #368]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104702:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8104706:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810470a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810470e:	4a58      	ldr	r2, [pc, #352]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104710:	430b      	orrs	r3, r1
 8104712:	6593      	str	r3, [r2, #88]	@ 0x58
 8104714:	e003      	b.n	810471e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104716:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810471a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810471e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104726:	f002 0308 	and.w	r3, r2, #8
 810472a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810472e:	2300      	movs	r3, #0
 8104730:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8104734:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8104738:	460b      	mov	r3, r1
 810473a:	4313      	orrs	r3, r2
 810473c:	d01e      	beq.n	810477c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810473e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810474a:	d10c      	bne.n	8104766 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810474c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104750:	3328      	adds	r3, #40	@ 0x28
 8104752:	2102      	movs	r1, #2
 8104754:	4618      	mov	r0, r3
 8104756:	f001 fd27 	bl	81061a8 <RCCEx_PLL3_Config>
 810475a:	4603      	mov	r3, r0
 810475c:	2b00      	cmp	r3, #0
 810475e:	d002      	beq.n	8104766 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8104760:	2301      	movs	r3, #1
 8104762:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104766:	4b42      	ldr	r3, [pc, #264]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810476a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810476e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104776:	4a3e      	ldr	r2, [pc, #248]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104778:	430b      	orrs	r3, r1
 810477a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810477c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104784:	f002 0310 	and.w	r3, r2, #16
 8104788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810478c:	2300      	movs	r3, #0
 810478e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8104792:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8104796:	460b      	mov	r3, r1
 8104798:	4313      	orrs	r3, r2
 810479a:	d01e      	beq.n	81047da <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810479c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81047a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81047a8:	d10c      	bne.n	81047c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81047aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047ae:	3328      	adds	r3, #40	@ 0x28
 81047b0:	2102      	movs	r1, #2
 81047b2:	4618      	mov	r0, r3
 81047b4:	f001 fcf8 	bl	81061a8 <RCCEx_PLL3_Config>
 81047b8:	4603      	mov	r3, r0
 81047ba:	2b00      	cmp	r3, #0
 81047bc:	d002      	beq.n	81047c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 81047be:	2301      	movs	r3, #1
 81047c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81047c4:	4b2a      	ldr	r3, [pc, #168]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81047c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81047c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81047cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81047d4:	4a26      	ldr	r2, [pc, #152]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81047d6:	430b      	orrs	r3, r1
 81047d8:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81047da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047e2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81047e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81047ea:	2300      	movs	r3, #0
 81047ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81047f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81047f4:	460b      	mov	r3, r1
 81047f6:	4313      	orrs	r3, r2
 81047f8:	d040      	beq.n	810487c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81047fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104806:	d022      	beq.n	810484e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8104808:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810480c:	d81b      	bhi.n	8104846 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810480e:	2b00      	cmp	r3, #0
 8104810:	d003      	beq.n	810481a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8104812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104816:	d00b      	beq.n	8104830 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8104818:	e015      	b.n	8104846 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810481a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810481e:	3308      	adds	r3, #8
 8104820:	2100      	movs	r1, #0
 8104822:	4618      	mov	r0, r3
 8104824:	f001 fc0e 	bl	8106044 <RCCEx_PLL2_Config>
 8104828:	4603      	mov	r3, r0
 810482a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810482e:	e00f      	b.n	8104850 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104830:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104834:	3328      	adds	r3, #40	@ 0x28
 8104836:	2102      	movs	r1, #2
 8104838:	4618      	mov	r0, r3
 810483a:	f001 fcb5 	bl	81061a8 <RCCEx_PLL3_Config>
 810483e:	4603      	mov	r3, r0
 8104840:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104844:	e004      	b.n	8104850 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104846:	2301      	movs	r3, #1
 8104848:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810484c:	e000      	b.n	8104850 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810484e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104850:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104854:	2b00      	cmp	r3, #0
 8104856:	d10d      	bne.n	8104874 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104858:	4b05      	ldr	r3, [pc, #20]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810485a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810485c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8104860:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104864:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104868:	4a01      	ldr	r2, [pc, #4]	@ (8104870 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810486a:	430b      	orrs	r3, r1
 810486c:	6593      	str	r3, [r2, #88]	@ 0x58
 810486e:	e005      	b.n	810487c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8104870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104874:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104878:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810487c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104884:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8104888:	67bb      	str	r3, [r7, #120]	@ 0x78
 810488a:	2300      	movs	r3, #0
 810488c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810488e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8104892:	460b      	mov	r3, r1
 8104894:	4313      	orrs	r3, r2
 8104896:	d03b      	beq.n	8104910 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8104898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810489c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81048a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81048a4:	d01f      	beq.n	81048e6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 81048a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81048aa:	d818      	bhi.n	81048de <HAL_RCCEx_PeriphCLKConfig+0x104e>
 81048ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81048b0:	d003      	beq.n	81048ba <HAL_RCCEx_PeriphCLKConfig+0x102a>
 81048b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81048b6:	d007      	beq.n	81048c8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 81048b8:	e011      	b.n	81048de <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81048ba:	4b64      	ldr	r3, [pc, #400]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81048bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81048be:	4a63      	ldr	r2, [pc, #396]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81048c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81048c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81048c6:	e00f      	b.n	81048e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81048c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81048cc:	3328      	adds	r3, #40	@ 0x28
 81048ce:	2101      	movs	r1, #1
 81048d0:	4618      	mov	r0, r3
 81048d2:	f001 fc69 	bl	81061a8 <RCCEx_PLL3_Config>
 81048d6:	4603      	mov	r3, r0
 81048d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 81048dc:	e004      	b.n	81048e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81048de:	2301      	movs	r3, #1
 81048e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81048e4:	e000      	b.n	81048e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 81048e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81048e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81048ec:	2b00      	cmp	r3, #0
 81048ee:	d10b      	bne.n	8104908 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81048f0:	4b56      	ldr	r3, [pc, #344]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81048f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81048f4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81048f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81048fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104900:	4a52      	ldr	r2, [pc, #328]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104902:	430b      	orrs	r3, r1
 8104904:	6553      	str	r3, [r2, #84]	@ 0x54
 8104906:	e003      	b.n	8104910 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104908:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810490c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104918:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810491c:	673b      	str	r3, [r7, #112]	@ 0x70
 810491e:	2300      	movs	r3, #0
 8104920:	677b      	str	r3, [r7, #116]	@ 0x74
 8104922:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8104926:	460b      	mov	r3, r1
 8104928:	4313      	orrs	r3, r2
 810492a:	d031      	beq.n	8104990 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810492c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104932:	2b00      	cmp	r3, #0
 8104934:	d003      	beq.n	810493e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8104936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810493a:	d007      	beq.n	810494c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 810493c:	e011      	b.n	8104962 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810493e:	4b43      	ldr	r3, [pc, #268]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104942:	4a42      	ldr	r2, [pc, #264]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104948:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810494a:	e00e      	b.n	810496a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810494c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104950:	3308      	adds	r3, #8
 8104952:	2102      	movs	r1, #2
 8104954:	4618      	mov	r0, r3
 8104956:	f001 fb75 	bl	8106044 <RCCEx_PLL2_Config>
 810495a:	4603      	mov	r3, r0
 810495c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104960:	e003      	b.n	810496a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8104962:	2301      	movs	r3, #1
 8104964:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104968:	bf00      	nop
    }

    if (ret == HAL_OK)
 810496a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810496e:	2b00      	cmp	r3, #0
 8104970:	d10a      	bne.n	8104988 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104972:	4b36      	ldr	r3, [pc, #216]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104976:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810497a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810497e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104980:	4a32      	ldr	r2, [pc, #200]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104982:	430b      	orrs	r3, r1
 8104984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8104986:	e003      	b.n	8104990 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104988:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810498c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104998:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810499c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810499e:	2300      	movs	r3, #0
 81049a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81049a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81049a6:	460b      	mov	r3, r1
 81049a8:	4313      	orrs	r3, r2
 81049aa:	d00c      	beq.n	81049c6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81049ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81049b0:	3328      	adds	r3, #40	@ 0x28
 81049b2:	2102      	movs	r1, #2
 81049b4:	4618      	mov	r0, r3
 81049b6:	f001 fbf7 	bl	81061a8 <RCCEx_PLL3_Config>
 81049ba:	4603      	mov	r3, r0
 81049bc:	2b00      	cmp	r3, #0
 81049be:	d002      	beq.n	81049c6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 81049c0:	2301      	movs	r3, #1
 81049c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81049c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81049d2:	663b      	str	r3, [r7, #96]	@ 0x60
 81049d4:	2300      	movs	r3, #0
 81049d6:	667b      	str	r3, [r7, #100]	@ 0x64
 81049d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81049dc:	460b      	mov	r3, r1
 81049de:	4313      	orrs	r3, r2
 81049e0:	d03a      	beq.n	8104a58 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 81049e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81049e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81049ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81049ee:	d018      	beq.n	8104a22 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 81049f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81049f4:	d811      	bhi.n	8104a1a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81049f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81049fa:	d014      	beq.n	8104a26 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 81049fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104a00:	d80b      	bhi.n	8104a1a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8104a02:	2b00      	cmp	r3, #0
 8104a04:	d011      	beq.n	8104a2a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8104a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a0a:	d106      	bne.n	8104a1a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a10:	4a0e      	ldr	r2, [pc, #56]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8104a18:	e008      	b.n	8104a2c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104a1a:	2301      	movs	r3, #1
 8104a1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104a20:	e004      	b.n	8104a2c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104a22:	bf00      	nop
 8104a24:	e002      	b.n	8104a2c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104a26:	bf00      	nop
 8104a28:	e000      	b.n	8104a2c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104a2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104a30:	2b00      	cmp	r3, #0
 8104a32:	d10d      	bne.n	8104a50 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104a34:	4b05      	ldr	r3, [pc, #20]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104a38:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104a44:	4a01      	ldr	r2, [pc, #4]	@ (8104a4c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104a46:	430b      	orrs	r3, r1
 8104a48:	6553      	str	r3, [r2, #84]	@ 0x54
 8104a4a:	e005      	b.n	8104a58 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8104a4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104a54:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a60:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8104a64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8104a66:	2300      	movs	r3, #0
 8104a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8104a6a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8104a6e:	460b      	mov	r3, r1
 8104a70:	4313      	orrs	r3, r2
 8104a72:	d009      	beq.n	8104a88 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104a74:	4baa      	ldr	r3, [pc, #680]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104a78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8104a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104a82:	4aa7      	ldr	r2, [pc, #668]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104a84:	430b      	orrs	r3, r1
 8104a86:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a90:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8104a94:	653b      	str	r3, [r7, #80]	@ 0x50
 8104a96:	2300      	movs	r3, #0
 8104a98:	657b      	str	r3, [r7, #84]	@ 0x54
 8104a9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8104a9e:	460b      	mov	r3, r1
 8104aa0:	4313      	orrs	r3, r2
 8104aa2:	d00a      	beq.n	8104aba <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104aa4:	4b9e      	ldr	r3, [pc, #632]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104aa6:	691b      	ldr	r3, [r3, #16]
 8104aa8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8104aac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104ab0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8104ab4:	4a9a      	ldr	r2, [pc, #616]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104ab6:	430b      	orrs	r3, r1
 8104ab8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ac2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8104ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104ac8:	2300      	movs	r3, #0
 8104aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104acc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8104ad0:	460b      	mov	r3, r1
 8104ad2:	4313      	orrs	r3, r2
 8104ad4:	d009      	beq.n	8104aea <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104ad6:	4b92      	ldr	r3, [pc, #584]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104ada:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8104ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104ae6:	430b      	orrs	r3, r1
 8104ae8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104af2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8104af6:	643b      	str	r3, [r7, #64]	@ 0x40
 8104af8:	2300      	movs	r3, #0
 8104afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8104afc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8104b00:	460b      	mov	r3, r1
 8104b02:	4313      	orrs	r3, r2
 8104b04:	d00e      	beq.n	8104b24 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104b06:	4b86      	ldr	r3, [pc, #536]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104b08:	691b      	ldr	r3, [r3, #16]
 8104b0a:	4a85      	ldr	r2, [pc, #532]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104b0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8104b10:	6113      	str	r3, [r2, #16]
 8104b12:	4b83      	ldr	r3, [pc, #524]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104b14:	6919      	ldr	r1, [r3, #16]
 8104b16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104b1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8104b1e:	4a80      	ldr	r2, [pc, #512]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104b20:	430b      	orrs	r3, r1
 8104b22:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104b24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b2c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8104b30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8104b32:	2300      	movs	r3, #0
 8104b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104b36:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8104b3a:	460b      	mov	r3, r1
 8104b3c:	4313      	orrs	r3, r2
 8104b3e:	d009      	beq.n	8104b54 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104b40:	4b77      	ldr	r3, [pc, #476]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104b44:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8104b48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104b4e:	4a74      	ldr	r2, [pc, #464]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104b50:	430b      	orrs	r3, r1
 8104b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b5c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8104b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8104b62:	2300      	movs	r3, #0
 8104b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8104b66:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8104b6a:	460b      	mov	r3, r1
 8104b6c:	4313      	orrs	r3, r2
 8104b6e:	d00a      	beq.n	8104b86 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104b70:	4b6b      	ldr	r3, [pc, #428]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104b74:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8104b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104b80:	4a67      	ldr	r2, [pc, #412]	@ (8104d20 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104b82:	430b      	orrs	r3, r1
 8104b84:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b8e:	2100      	movs	r1, #0
 8104b90:	62b9      	str	r1, [r7, #40]	@ 0x28
 8104b92:	f003 0301 	and.w	r3, r3, #1
 8104b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104b98:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8104b9c:	460b      	mov	r3, r1
 8104b9e:	4313      	orrs	r3, r2
 8104ba0:	d011      	beq.n	8104bc6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104ba6:	3308      	adds	r3, #8
 8104ba8:	2100      	movs	r1, #0
 8104baa:	4618      	mov	r0, r3
 8104bac:	f001 fa4a 	bl	8106044 <RCCEx_PLL2_Config>
 8104bb0:	4603      	mov	r3, r0
 8104bb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8104bb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104bba:	2b00      	cmp	r3, #0
 8104bbc:	d003      	beq.n	8104bc6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104bbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104bc2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8104bc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bce:	2100      	movs	r1, #0
 8104bd0:	6239      	str	r1, [r7, #32]
 8104bd2:	f003 0302 	and.w	r3, r3, #2
 8104bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8104bd8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104bdc:	460b      	mov	r3, r1
 8104bde:	4313      	orrs	r3, r2
 8104be0:	d011      	beq.n	8104c06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104be6:	3308      	adds	r3, #8
 8104be8:	2101      	movs	r1, #1
 8104bea:	4618      	mov	r0, r3
 8104bec:	f001 fa2a 	bl	8106044 <RCCEx_PLL2_Config>
 8104bf0:	4603      	mov	r3, r0
 8104bf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8104bf6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104bfa:	2b00      	cmp	r3, #0
 8104bfc:	d003      	beq.n	8104c06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104bfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104c02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c0e:	2100      	movs	r1, #0
 8104c10:	61b9      	str	r1, [r7, #24]
 8104c12:	f003 0304 	and.w	r3, r3, #4
 8104c16:	61fb      	str	r3, [r7, #28]
 8104c18:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104c1c:	460b      	mov	r3, r1
 8104c1e:	4313      	orrs	r3, r2
 8104c20:	d011      	beq.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104c22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104c26:	3308      	adds	r3, #8
 8104c28:	2102      	movs	r1, #2
 8104c2a:	4618      	mov	r0, r3
 8104c2c:	f001 fa0a 	bl	8106044 <RCCEx_PLL2_Config>
 8104c30:	4603      	mov	r3, r0
 8104c32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8104c36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104c3a:	2b00      	cmp	r3, #0
 8104c3c:	d003      	beq.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104c42:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c4e:	2100      	movs	r1, #0
 8104c50:	6139      	str	r1, [r7, #16]
 8104c52:	f003 0308 	and.w	r3, r3, #8
 8104c56:	617b      	str	r3, [r7, #20]
 8104c58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104c5c:	460b      	mov	r3, r1
 8104c5e:	4313      	orrs	r3, r2
 8104c60:	d011      	beq.n	8104c86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104c66:	3328      	adds	r3, #40	@ 0x28
 8104c68:	2100      	movs	r1, #0
 8104c6a:	4618      	mov	r0, r3
 8104c6c:	f001 fa9c 	bl	81061a8 <RCCEx_PLL3_Config>
 8104c70:	4603      	mov	r3, r0
 8104c72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8104c76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104c7a:	2b00      	cmp	r3, #0
 8104c7c:	d003      	beq.n	8104c86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104c82:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c8e:	2100      	movs	r1, #0
 8104c90:	60b9      	str	r1, [r7, #8]
 8104c92:	f003 0310 	and.w	r3, r3, #16
 8104c96:	60fb      	str	r3, [r7, #12]
 8104c98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104c9c:	460b      	mov	r3, r1
 8104c9e:	4313      	orrs	r3, r2
 8104ca0:	d011      	beq.n	8104cc6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104ca6:	3328      	adds	r3, #40	@ 0x28
 8104ca8:	2101      	movs	r1, #1
 8104caa:	4618      	mov	r0, r3
 8104cac:	f001 fa7c 	bl	81061a8 <RCCEx_PLL3_Config>
 8104cb0:	4603      	mov	r3, r0
 8104cb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8104cb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104cba:	2b00      	cmp	r3, #0
 8104cbc:	d003      	beq.n	8104cc6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104cc2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104cce:	2100      	movs	r1, #0
 8104cd0:	6039      	str	r1, [r7, #0]
 8104cd2:	f003 0320 	and.w	r3, r3, #32
 8104cd6:	607b      	str	r3, [r7, #4]
 8104cd8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104cdc:	460b      	mov	r3, r1
 8104cde:	4313      	orrs	r3, r2
 8104ce0:	d011      	beq.n	8104d06 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104ce6:	3328      	adds	r3, #40	@ 0x28
 8104ce8:	2102      	movs	r1, #2
 8104cea:	4618      	mov	r0, r3
 8104cec:	f001 fa5c 	bl	81061a8 <RCCEx_PLL3_Config>
 8104cf0:	4603      	mov	r3, r0
 8104cf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8104cf6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104cfa:	2b00      	cmp	r3, #0
 8104cfc:	d003      	beq.n	8104d06 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104d02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8104d06:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8104d0a:	2b00      	cmp	r3, #0
 8104d0c:	d101      	bne.n	8104d12 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8104d0e:	2300      	movs	r3, #0
 8104d10:	e000      	b.n	8104d14 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8104d12:	2301      	movs	r3, #1
}
 8104d14:	4618      	mov	r0, r3
 8104d16:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8104d1a:	46bd      	mov	sp, r7
 8104d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104d20:	58024400 	.word	0x58024400

08104d24 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8104d24:	b580      	push	{r7, lr}
 8104d26:	b090      	sub	sp, #64	@ 0x40
 8104d28:	af00      	add	r7, sp, #0
 8104d2a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104d32:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8104d36:	430b      	orrs	r3, r1
 8104d38:	f040 8094 	bne.w	8104e64 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8104d3c:	4b9e      	ldr	r3, [pc, #632]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104d40:	f003 0307 	and.w	r3, r3, #7
 8104d44:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d48:	2b04      	cmp	r3, #4
 8104d4a:	f200 8087 	bhi.w	8104e5c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8104d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8104d54 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8104d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d54:	08104d69 	.word	0x08104d69
 8104d58:	08104d91 	.word	0x08104d91
 8104d5c:	08104db9 	.word	0x08104db9
 8104d60:	08104e55 	.word	0x08104e55
 8104d64:	08104de1 	.word	0x08104de1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104d68:	4b93      	ldr	r3, [pc, #588]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104d6a:	681b      	ldr	r3, [r3, #0]
 8104d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104d70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104d74:	d108      	bne.n	8104d88 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104d7a:	4618      	mov	r0, r3
 8104d7c:	f001 f810 	bl	8105da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104d84:	f000 bd45 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104d88:	2300      	movs	r3, #0
 8104d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d8c:	f000 bd41 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104d90:	4b89      	ldr	r3, [pc, #548]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104d98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104d9c:	d108      	bne.n	8104db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104d9e:	f107 0318 	add.w	r3, r7, #24
 8104da2:	4618      	mov	r0, r3
 8104da4:	f000 fd54 	bl	8105850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104da8:	69bb      	ldr	r3, [r7, #24]
 8104daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dac:	f000 bd31 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104db0:	2300      	movs	r3, #0
 8104db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104db4:	f000 bd2d 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104db8:	4b7f      	ldr	r3, [pc, #508]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104dc4:	d108      	bne.n	8104dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104dc6:	f107 030c 	add.w	r3, r7, #12
 8104dca:	4618      	mov	r0, r3
 8104dcc:	f000 fe94 	bl	8105af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104dd0:	68fb      	ldr	r3, [r7, #12]
 8104dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dd4:	f000 bd1d 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104dd8:	2300      	movs	r3, #0
 8104dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ddc:	f000 bd19 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104de0:	4b75      	ldr	r3, [pc, #468]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104de4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104de8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104dea:	4b73      	ldr	r3, [pc, #460]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104dec:	681b      	ldr	r3, [r3, #0]
 8104dee:	f003 0304 	and.w	r3, r3, #4
 8104df2:	2b04      	cmp	r3, #4
 8104df4:	d10c      	bne.n	8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8104df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104df8:	2b00      	cmp	r3, #0
 8104dfa:	d109      	bne.n	8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104dfc:	4b6e      	ldr	r3, [pc, #440]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104dfe:	681b      	ldr	r3, [r3, #0]
 8104e00:	08db      	lsrs	r3, r3, #3
 8104e02:	f003 0303 	and.w	r3, r3, #3
 8104e06:	4a6d      	ldr	r2, [pc, #436]	@ (8104fbc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104e08:	fa22 f303 	lsr.w	r3, r2, r3
 8104e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104e0e:	e01f      	b.n	8104e50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104e10:	4b69      	ldr	r3, [pc, #420]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104e1c:	d106      	bne.n	8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8104e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104e20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104e24:	d102      	bne.n	8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104e26:	4b66      	ldr	r3, [pc, #408]	@ (8104fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104e2a:	e011      	b.n	8104e50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104e2c:	4b62      	ldr	r3, [pc, #392]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104e2e:	681b      	ldr	r3, [r3, #0]
 8104e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104e38:	d106      	bne.n	8104e48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8104e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104e40:	d102      	bne.n	8104e48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104e42:	4b60      	ldr	r3, [pc, #384]	@ (8104fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104e46:	e003      	b.n	8104e50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104e48:	2300      	movs	r3, #0
 8104e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104e4c:	f000 bce1 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104e50:	f000 bcdf 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104e54:	4b5c      	ldr	r3, [pc, #368]	@ (8104fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e58:	f000 bcdb 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104e5c:	2300      	movs	r3, #0
 8104e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e60:	f000 bcd7 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104e68:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8104e6c:	430b      	orrs	r3, r1
 8104e6e:	f040 80ad 	bne.w	8104fcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8104e72:	4b51      	ldr	r3, [pc, #324]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e76:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8104e7a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104e82:	d056      	beq.n	8104f32 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8104e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104e8a:	f200 8090 	bhi.w	8104fae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e90:	2bc0      	cmp	r3, #192	@ 0xc0
 8104e92:	f000 8088 	beq.w	8104fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8104e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e98:	2bc0      	cmp	r3, #192	@ 0xc0
 8104e9a:	f200 8088 	bhi.w	8104fae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104ea0:	2b80      	cmp	r3, #128	@ 0x80
 8104ea2:	d032      	beq.n	8104f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8104ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104ea6:	2b80      	cmp	r3, #128	@ 0x80
 8104ea8:	f200 8081 	bhi.w	8104fae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104eae:	2b00      	cmp	r3, #0
 8104eb0:	d003      	beq.n	8104eba <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8104eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104eb4:	2b40      	cmp	r3, #64	@ 0x40
 8104eb6:	d014      	beq.n	8104ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8104eb8:	e079      	b.n	8104fae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104eba:	4b3f      	ldr	r3, [pc, #252]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104ebc:	681b      	ldr	r3, [r3, #0]
 8104ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104ec2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104ec6:	d108      	bne.n	8104eda <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104ecc:	4618      	mov	r0, r3
 8104ece:	f000 ff67 	bl	8105da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ed6:	f000 bc9c 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104eda:	2300      	movs	r3, #0
 8104edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ede:	f000 bc98 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104ee2:	4b35      	ldr	r3, [pc, #212]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104ee4:	681b      	ldr	r3, [r3, #0]
 8104ee6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104eee:	d108      	bne.n	8104f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104ef0:	f107 0318 	add.w	r3, r7, #24
 8104ef4:	4618      	mov	r0, r3
 8104ef6:	f000 fcab 	bl	8105850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104efa:	69bb      	ldr	r3, [r7, #24]
 8104efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104efe:	f000 bc88 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f02:	2300      	movs	r3, #0
 8104f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f06:	f000 bc84 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f0c:	681b      	ldr	r3, [r3, #0]
 8104f0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f16:	d108      	bne.n	8104f2a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104f18:	f107 030c 	add.w	r3, r7, #12
 8104f1c:	4618      	mov	r0, r3
 8104f1e:	f000 fdeb 	bl	8105af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104f22:	68fb      	ldr	r3, [r7, #12]
 8104f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f26:	f000 bc74 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f2a:	2300      	movs	r3, #0
 8104f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f2e:	f000 bc70 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104f32:	4b21      	ldr	r3, [pc, #132]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104f36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104f3a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f3e:	681b      	ldr	r3, [r3, #0]
 8104f40:	f003 0304 	and.w	r3, r3, #4
 8104f44:	2b04      	cmp	r3, #4
 8104f46:	d10c      	bne.n	8104f62 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8104f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104f4a:	2b00      	cmp	r3, #0
 8104f4c:	d109      	bne.n	8104f62 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f50:	681b      	ldr	r3, [r3, #0]
 8104f52:	08db      	lsrs	r3, r3, #3
 8104f54:	f003 0303 	and.w	r3, r3, #3
 8104f58:	4a18      	ldr	r2, [pc, #96]	@ (8104fbc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8104f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104f60:	e01f      	b.n	8104fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104f62:	4b15      	ldr	r3, [pc, #84]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f64:	681b      	ldr	r3, [r3, #0]
 8104f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104f6e:	d106      	bne.n	8104f7e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8104f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104f72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104f76:	d102      	bne.n	8104f7e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104f78:	4b11      	ldr	r3, [pc, #68]	@ (8104fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104f7c:	e011      	b.n	8104fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8104fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f80:	681b      	ldr	r3, [r3, #0]
 8104f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104f8a:	d106      	bne.n	8104f9a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8104f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f92:	d102      	bne.n	8104f9a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104f94:	4b0b      	ldr	r3, [pc, #44]	@ (8104fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104f98:	e003      	b.n	8104fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104f9a:	2300      	movs	r3, #0
 8104f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104f9e:	f000 bc38 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104fa2:	f000 bc36 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104fa6:	4b08      	ldr	r3, [pc, #32]	@ (8104fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104faa:	f000 bc32 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104fae:	2300      	movs	r3, #0
 8104fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104fb2:	f000 bc2e 	b.w	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104fb6:	bf00      	nop
 8104fb8:	58024400 	.word	0x58024400
 8104fbc:	03d09000 	.word	0x03d09000
 8104fc0:	003d0900 	.word	0x003d0900
 8104fc4:	017d7840 	.word	0x017d7840
 8104fc8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104fd0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8104fd4:	430b      	orrs	r3, r1
 8104fd6:	f040 809c 	bne.w	8105112 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8104fda:	4b9e      	ldr	r3, [pc, #632]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104fde:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8104fe2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104fe6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104fea:	d054      	beq.n	8105096 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8104fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104fee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104ff2:	f200 808b 	bhi.w	810510c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104ff8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104ffc:	f000 8083 	beq.w	8105106 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8105000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105002:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105006:	f200 8081 	bhi.w	810510c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810500a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810500c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105010:	d02f      	beq.n	8105072 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8105012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105018:	d878      	bhi.n	810510c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810501c:	2b00      	cmp	r3, #0
 810501e:	d004      	beq.n	810502a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8105020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105026:	d012      	beq.n	810504e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8105028:	e070      	b.n	810510c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810502a:	4b8a      	ldr	r3, [pc, #552]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105032:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105036:	d107      	bne.n	8105048 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810503c:	4618      	mov	r0, r3
 810503e:	f000 feaf 	bl	8105da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105046:	e3e4      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105048:	2300      	movs	r3, #0
 810504a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810504c:	e3e1      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810504e:	4b81      	ldr	r3, [pc, #516]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105050:	681b      	ldr	r3, [r3, #0]
 8105052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810505a:	d107      	bne.n	810506c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810505c:	f107 0318 	add.w	r3, r7, #24
 8105060:	4618      	mov	r0, r3
 8105062:	f000 fbf5 	bl	8105850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105066:	69bb      	ldr	r3, [r7, #24]
 8105068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810506a:	e3d2      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810506c:	2300      	movs	r3, #0
 810506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105070:	e3cf      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105072:	4b78      	ldr	r3, [pc, #480]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810507a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810507e:	d107      	bne.n	8105090 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105080:	f107 030c 	add.w	r3, r7, #12
 8105084:	4618      	mov	r0, r3
 8105086:	f000 fd37 	bl	8105af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810508a:	68fb      	ldr	r3, [r7, #12]
 810508c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810508e:	e3c0      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105090:	2300      	movs	r3, #0
 8105092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105094:	e3bd      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105096:	4b6f      	ldr	r3, [pc, #444]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810509a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810509e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81050a0:	4b6c      	ldr	r3, [pc, #432]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	f003 0304 	and.w	r3, r3, #4
 81050a8:	2b04      	cmp	r3, #4
 81050aa:	d10c      	bne.n	81050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81050ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81050ae:	2b00      	cmp	r3, #0
 81050b0:	d109      	bne.n	81050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81050b2:	4b68      	ldr	r3, [pc, #416]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	08db      	lsrs	r3, r3, #3
 81050b8:	f003 0303 	and.w	r3, r3, #3
 81050bc:	4a66      	ldr	r2, [pc, #408]	@ (8105258 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81050be:	fa22 f303 	lsr.w	r3, r2, r3
 81050c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81050c4:	e01e      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81050c6:	4b63      	ldr	r3, [pc, #396]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81050c8:	681b      	ldr	r3, [r3, #0]
 81050ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81050ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81050d2:	d106      	bne.n	81050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81050d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81050d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81050da:	d102      	bne.n	81050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81050dc:	4b5f      	ldr	r3, [pc, #380]	@ (810525c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81050de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81050e0:	e010      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81050e2:	4b5c      	ldr	r3, [pc, #368]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81050e4:	681b      	ldr	r3, [r3, #0]
 81050e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81050ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81050ee:	d106      	bne.n	81050fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 81050f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81050f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81050f6:	d102      	bne.n	81050fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81050f8:	4b59      	ldr	r3, [pc, #356]	@ (8105260 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81050fc:	e002      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81050fe:	2300      	movs	r3, #0
 8105100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8105102:	e386      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105104:	e385      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105106:	4b57      	ldr	r3, [pc, #348]	@ (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8105108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810510a:	e382      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810510c:	2300      	movs	r3, #0
 810510e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105110:	e37f      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8105112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105116:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810511a:	430b      	orrs	r3, r1
 810511c:	f040 80a7 	bne.w	810526e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8105120:	4b4c      	ldr	r3, [pc, #304]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105124:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8105128:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810512c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105130:	d055      	beq.n	81051de <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8105132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105138:	f200 8096 	bhi.w	8105268 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810513e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105142:	f000 8084 	beq.w	810524e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8105146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105148:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810514c:	f200 808c 	bhi.w	8105268 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8105150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105156:	d030      	beq.n	81051ba <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8105158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810515a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810515e:	f200 8083 	bhi.w	8105268 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8105162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105164:	2b00      	cmp	r3, #0
 8105166:	d004      	beq.n	8105172 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8105168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810516a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810516e:	d012      	beq.n	8105196 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8105170:	e07a      	b.n	8105268 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105172:	4b38      	ldr	r3, [pc, #224]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105174:	681b      	ldr	r3, [r3, #0]
 8105176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810517a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810517e:	d107      	bne.n	8105190 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105184:	4618      	mov	r0, r3
 8105186:	f000 fe0b 	bl	8105da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810518a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810518c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810518e:	e340      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105190:	2300      	movs	r3, #0
 8105192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105194:	e33d      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105196:	4b2f      	ldr	r3, [pc, #188]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810519e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81051a2:	d107      	bne.n	81051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81051a4:	f107 0318 	add.w	r3, r7, #24
 81051a8:	4618      	mov	r0, r3
 81051aa:	f000 fb51 	bl	8105850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81051ae:	69bb      	ldr	r3, [r7, #24]
 81051b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81051b2:	e32e      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81051b4:	2300      	movs	r3, #0
 81051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81051b8:	e32b      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81051ba:	4b26      	ldr	r3, [pc, #152]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81051bc:	681b      	ldr	r3, [r3, #0]
 81051be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81051c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81051c6:	d107      	bne.n	81051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81051c8:	f107 030c 	add.w	r3, r7, #12
 81051cc:	4618      	mov	r0, r3
 81051ce:	f000 fc93 	bl	8105af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81051d2:	68fb      	ldr	r3, [r7, #12]
 81051d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81051d6:	e31c      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81051d8:	2300      	movs	r3, #0
 81051da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81051dc:	e319      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81051de:	4b1d      	ldr	r3, [pc, #116]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81051e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81051e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81051e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81051e8:	4b1a      	ldr	r3, [pc, #104]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81051ea:	681b      	ldr	r3, [r3, #0]
 81051ec:	f003 0304 	and.w	r3, r3, #4
 81051f0:	2b04      	cmp	r3, #4
 81051f2:	d10c      	bne.n	810520e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 81051f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81051f6:	2b00      	cmp	r3, #0
 81051f8:	d109      	bne.n	810520e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81051fa:	4b16      	ldr	r3, [pc, #88]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81051fc:	681b      	ldr	r3, [r3, #0]
 81051fe:	08db      	lsrs	r3, r3, #3
 8105200:	f003 0303 	and.w	r3, r3, #3
 8105204:	4a14      	ldr	r2, [pc, #80]	@ (8105258 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8105206:	fa22 f303 	lsr.w	r3, r2, r3
 810520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810520c:	e01e      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810520e:	4b11      	ldr	r3, [pc, #68]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105210:	681b      	ldr	r3, [r3, #0]
 8105212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810521a:	d106      	bne.n	810522a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 810521c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810521e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105222:	d102      	bne.n	810522a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105224:	4b0d      	ldr	r3, [pc, #52]	@ (810525c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8105226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105228:	e010      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810522a:	4b0a      	ldr	r3, [pc, #40]	@ (8105254 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810522c:	681b      	ldr	r3, [r3, #0]
 810522e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105232:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105236:	d106      	bne.n	8105246 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8105238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810523a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810523e:	d102      	bne.n	8105246 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105240:	4b07      	ldr	r3, [pc, #28]	@ (8105260 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8105242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105244:	e002      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105246:	2300      	movs	r3, #0
 8105248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810524a:	e2e2      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810524c:	e2e1      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810524e:	4b05      	ldr	r3, [pc, #20]	@ (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8105250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105252:	e2de      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105254:	58024400 	.word	0x58024400
 8105258:	03d09000 	.word	0x03d09000
 810525c:	003d0900 	.word	0x003d0900
 8105260:	017d7840 	.word	0x017d7840
 8105264:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8105268:	2300      	movs	r3, #0
 810526a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810526c:	e2d1      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810526e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105272:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8105276:	430b      	orrs	r3, r1
 8105278:	f040 809c 	bne.w	81053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 810527c:	4b93      	ldr	r3, [pc, #588]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810527e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105280:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8105284:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105288:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810528c:	d054      	beq.n	8105338 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105290:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105294:	f200 808b 	bhi.w	81053ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810529a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810529e:	f000 8083 	beq.w	81053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81052a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81052a8:	f200 8081 	bhi.w	81053ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81052ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81052b2:	d02f      	beq.n	8105314 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81052b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81052ba:	d878      	bhi.n	81053ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81052bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052be:	2b00      	cmp	r3, #0
 81052c0:	d004      	beq.n	81052cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81052c8:	d012      	beq.n	81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81052ca:	e070      	b.n	81053ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81052cc:	4b7f      	ldr	r3, [pc, #508]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81052ce:	681b      	ldr	r3, [r3, #0]
 81052d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81052d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81052d8:	d107      	bne.n	81052ea <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81052da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81052de:	4618      	mov	r0, r3
 81052e0:	f000 fd5e 	bl	8105da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81052e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052e8:	e293      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052ea:	2300      	movs	r3, #0
 81052ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81052ee:	e290      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81052f0:	4b76      	ldr	r3, [pc, #472]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81052f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81052fc:	d107      	bne.n	810530e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81052fe:	f107 0318 	add.w	r3, r7, #24
 8105302:	4618      	mov	r0, r3
 8105304:	f000 faa4 	bl	8105850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105308:	69bb      	ldr	r3, [r7, #24]
 810530a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810530c:	e281      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810530e:	2300      	movs	r3, #0
 8105310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105312:	e27e      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105314:	4b6d      	ldr	r3, [pc, #436]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105316:	681b      	ldr	r3, [r3, #0]
 8105318:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810531c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105320:	d107      	bne.n	8105332 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105322:	f107 030c 	add.w	r3, r7, #12
 8105326:	4618      	mov	r0, r3
 8105328:	f000 fbe6 	bl	8105af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810532c:	68fb      	ldr	r3, [r7, #12]
 810532e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105330:	e26f      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105332:	2300      	movs	r3, #0
 8105334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105336:	e26c      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105338:	4b64      	ldr	r3, [pc, #400]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810533a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810533c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105340:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105342:	4b62      	ldr	r3, [pc, #392]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	f003 0304 	and.w	r3, r3, #4
 810534a:	2b04      	cmp	r3, #4
 810534c:	d10c      	bne.n	8105368 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810534e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105350:	2b00      	cmp	r3, #0
 8105352:	d109      	bne.n	8105368 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105354:	4b5d      	ldr	r3, [pc, #372]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105356:	681b      	ldr	r3, [r3, #0]
 8105358:	08db      	lsrs	r3, r3, #3
 810535a:	f003 0303 	and.w	r3, r3, #3
 810535e:	4a5c      	ldr	r2, [pc, #368]	@ (81054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8105360:	fa22 f303 	lsr.w	r3, r2, r3
 8105364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105366:	e01e      	b.n	81053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105368:	4b58      	ldr	r3, [pc, #352]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810536a:	681b      	ldr	r3, [r3, #0]
 810536c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105374:	d106      	bne.n	8105384 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8105376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810537c:	d102      	bne.n	8105384 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810537e:	4b55      	ldr	r3, [pc, #340]	@ (81054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8105380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105382:	e010      	b.n	81053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105384:	4b51      	ldr	r3, [pc, #324]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105386:	681b      	ldr	r3, [r3, #0]
 8105388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810538c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105390:	d106      	bne.n	81053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8105392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105398:	d102      	bne.n	81053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810539a:	4b4f      	ldr	r3, [pc, #316]	@ (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810539c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810539e:	e002      	b.n	81053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81053a0:	2300      	movs	r3, #0
 81053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81053a4:	e235      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81053a6:	e234      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81053a8:	4b4c      	ldr	r3, [pc, #304]	@ (81054dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81053aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81053ac:	e231      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81053ae:	2300      	movs	r3, #0
 81053b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81053b2:	e22e      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81053b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81053b8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 81053bc:	430b      	orrs	r3, r1
 81053be:	f040 808f 	bne.w	81054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81053c2:	4b42      	ldr	r3, [pc, #264]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81053c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81053c6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81053ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 81053cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81053ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81053d2:	d06b      	beq.n	81054ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81053d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81053d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81053da:	d874      	bhi.n	81054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81053de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81053e2:	d056      	beq.n	8105492 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 81053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81053e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81053ea:	d86c      	bhi.n	81054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81053ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81053ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81053f2:	d03b      	beq.n	810546c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 81053f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81053f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81053fa:	d864      	bhi.n	81054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81053fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81053fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105402:	d021      	beq.n	8105448 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8105404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810540a:	d85c      	bhi.n	81054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810540c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810540e:	2b00      	cmp	r3, #0
 8105410:	d004      	beq.n	810541c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8105412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105418:	d004      	beq.n	8105424 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810541a:	e054      	b.n	81054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 810541c:	f7fe f9e0 	bl	81037e0 <HAL_RCC_GetPCLK1Freq>
 8105420:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105422:	e1f6      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105424:	4b29      	ldr	r3, [pc, #164]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105426:	681b      	ldr	r3, [r3, #0]
 8105428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810542c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105430:	d107      	bne.n	8105442 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105432:	f107 0318 	add.w	r3, r7, #24
 8105436:	4618      	mov	r0, r3
 8105438:	f000 fa0a 	bl	8105850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810543c:	69fb      	ldr	r3, [r7, #28]
 810543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105440:	e1e7      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105442:	2300      	movs	r3, #0
 8105444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105446:	e1e4      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105448:	4b20      	ldr	r3, [pc, #128]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810544a:	681b      	ldr	r3, [r3, #0]
 810544c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105454:	d107      	bne.n	8105466 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105456:	f107 030c 	add.w	r3, r7, #12
 810545a:	4618      	mov	r0, r3
 810545c:	f000 fb4c 	bl	8105af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105460:	693b      	ldr	r3, [r7, #16]
 8105462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105464:	e1d5      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105466:	2300      	movs	r3, #0
 8105468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810546a:	e1d2      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810546c:	4b17      	ldr	r3, [pc, #92]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	f003 0304 	and.w	r3, r3, #4
 8105474:	2b04      	cmp	r3, #4
 8105476:	d109      	bne.n	810548c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105478:	4b14      	ldr	r3, [pc, #80]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	08db      	lsrs	r3, r3, #3
 810547e:	f003 0303 	and.w	r3, r3, #3
 8105482:	4a13      	ldr	r2, [pc, #76]	@ (81054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8105484:	fa22 f303 	lsr.w	r3, r2, r3
 8105488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810548a:	e1c2      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810548c:	2300      	movs	r3, #0
 810548e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105490:	e1bf      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105492:	4b0e      	ldr	r3, [pc, #56]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105494:	681b      	ldr	r3, [r3, #0]
 8105496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810549a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810549e:	d102      	bne.n	81054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81054a0:	4b0c      	ldr	r3, [pc, #48]	@ (81054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81054a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81054a4:	e1b5      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81054a6:	2300      	movs	r3, #0
 81054a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81054aa:	e1b2      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81054ac:	4b07      	ldr	r3, [pc, #28]	@ (81054cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81054ae:	681b      	ldr	r3, [r3, #0]
 81054b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81054b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81054b8:	d102      	bne.n	81054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81054ba:	4b07      	ldr	r3, [pc, #28]	@ (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81054bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81054be:	e1a8      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81054c0:	2300      	movs	r3, #0
 81054c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81054c4:	e1a5      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81054c6:	2300      	movs	r3, #0
 81054c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81054ca:	e1a2      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81054cc:	58024400 	.word	0x58024400
 81054d0:	03d09000 	.word	0x03d09000
 81054d4:	003d0900 	.word	0x003d0900
 81054d8:	017d7840 	.word	0x017d7840
 81054dc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81054e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81054e4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 81054e8:	430b      	orrs	r3, r1
 81054ea:	d173      	bne.n	81055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 81054ec:	4b9c      	ldr	r3, [pc, #624]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81054ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81054f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81054f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81054f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81054fc:	d02f      	beq.n	810555e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81054fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105504:	d863      	bhi.n	81055ce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8105506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105508:	2b00      	cmp	r3, #0
 810550a:	d004      	beq.n	8105516 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 810550c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810550e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105512:	d012      	beq.n	810553a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8105514:	e05b      	b.n	81055ce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105516:	4b92      	ldr	r3, [pc, #584]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105518:	681b      	ldr	r3, [r3, #0]
 810551a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810551e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105522:	d107      	bne.n	8105534 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105524:	f107 0318 	add.w	r3, r7, #24
 8105528:	4618      	mov	r0, r3
 810552a:	f000 f991 	bl	8105850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810552e:	69bb      	ldr	r3, [r7, #24]
 8105530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105532:	e16e      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105534:	2300      	movs	r3, #0
 8105536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105538:	e16b      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810553a:	4b89      	ldr	r3, [pc, #548]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810553c:	681b      	ldr	r3, [r3, #0]
 810553e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105546:	d107      	bne.n	8105558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105548:	f107 030c 	add.w	r3, r7, #12
 810554c:	4618      	mov	r0, r3
 810554e:	f000 fad3 	bl	8105af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8105552:	697b      	ldr	r3, [r7, #20]
 8105554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105556:	e15c      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105558:	2300      	movs	r3, #0
 810555a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810555c:	e159      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810555e:	4b80      	ldr	r3, [pc, #512]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105562:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105566:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105568:	4b7d      	ldr	r3, [pc, #500]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810556a:	681b      	ldr	r3, [r3, #0]
 810556c:	f003 0304 	and.w	r3, r3, #4
 8105570:	2b04      	cmp	r3, #4
 8105572:	d10c      	bne.n	810558e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8105574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105576:	2b00      	cmp	r3, #0
 8105578:	d109      	bne.n	810558e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810557a:	4b79      	ldr	r3, [pc, #484]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810557c:	681b      	ldr	r3, [r3, #0]
 810557e:	08db      	lsrs	r3, r3, #3
 8105580:	f003 0303 	and.w	r3, r3, #3
 8105584:	4a77      	ldr	r2, [pc, #476]	@ (8105764 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8105586:	fa22 f303 	lsr.w	r3, r2, r3
 810558a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810558c:	e01e      	b.n	81055cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810558e:	4b74      	ldr	r3, [pc, #464]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810559a:	d106      	bne.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 810559c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810559e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81055a2:	d102      	bne.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81055a4:	4b70      	ldr	r3, [pc, #448]	@ (8105768 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81055a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81055a8:	e010      	b.n	81055cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81055aa:	4b6d      	ldr	r3, [pc, #436]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81055ac:	681b      	ldr	r3, [r3, #0]
 81055ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81055b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81055b6:	d106      	bne.n	81055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 81055b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81055ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81055be:	d102      	bne.n	81055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81055c0:	4b6a      	ldr	r3, [pc, #424]	@ (810576c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81055c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81055c4:	e002      	b.n	81055cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81055c6:	2300      	movs	r3, #0
 81055c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81055ca:	e122      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81055cc:	e121      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81055ce:	2300      	movs	r3, #0
 81055d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81055d2:	e11e      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81055d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81055d8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 81055dc:	430b      	orrs	r3, r1
 81055de:	d133      	bne.n	8105648 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 81055e0:	4b5f      	ldr	r3, [pc, #380]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81055e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81055e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81055e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81055ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81055ec:	2b00      	cmp	r3, #0
 81055ee:	d004      	beq.n	81055fa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 81055f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81055f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81055f6:	d012      	beq.n	810561e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 81055f8:	e023      	b.n	8105642 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81055fa:	4b59      	ldr	r3, [pc, #356]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81055fc:	681b      	ldr	r3, [r3, #0]
 81055fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105606:	d107      	bne.n	8105618 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810560c:	4618      	mov	r0, r3
 810560e:	f000 fbc7 	bl	8105da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105616:	e0fc      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105618:	2300      	movs	r3, #0
 810561a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810561c:	e0f9      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810561e:	4b50      	ldr	r3, [pc, #320]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105620:	681b      	ldr	r3, [r3, #0]
 8105622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810562a:	d107      	bne.n	810563c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810562c:	f107 0318 	add.w	r3, r7, #24
 8105630:	4618      	mov	r0, r3
 8105632:	f000 f90d 	bl	8105850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8105636:	6a3b      	ldr	r3, [r7, #32]
 8105638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810563a:	e0ea      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810563c:	2300      	movs	r3, #0
 810563e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105640:	e0e7      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105642:	2300      	movs	r3, #0
 8105644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105646:	e0e4      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8105648:	e9d7 2300 	ldrd	r2, r3, [r7]
 810564c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8105650:	430b      	orrs	r3, r1
 8105652:	f040 808d 	bne.w	8105770 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8105656:	4b42      	ldr	r3, [pc, #264]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810565a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 810565e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105662:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105666:	d06b      	beq.n	8105740 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8105668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810566a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810566e:	d874      	bhi.n	810575a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105676:	d056      	beq.n	8105726 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8105678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810567a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810567e:	d86c      	bhi.n	810575a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105682:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105686:	d03b      	beq.n	8105700 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8105688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810568a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810568e:	d864      	bhi.n	810575a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105696:	d021      	beq.n	81056dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8105698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810569a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810569e:	d85c      	bhi.n	810575a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81056a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056a2:	2b00      	cmp	r3, #0
 81056a4:	d004      	beq.n	81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 81056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81056ac:	d004      	beq.n	81056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 81056ae:	e054      	b.n	810575a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81056b0:	f000 f8b8 	bl	8105824 <HAL_RCCEx_GetD3PCLK1Freq>
 81056b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81056b6:	e0ac      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81056b8:	4b29      	ldr	r3, [pc, #164]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81056ba:	681b      	ldr	r3, [r3, #0]
 81056bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81056c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81056c4:	d107      	bne.n	81056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81056c6:	f107 0318 	add.w	r3, r7, #24
 81056ca:	4618      	mov	r0, r3
 81056cc:	f000 f8c0 	bl	8105850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81056d0:	69fb      	ldr	r3, [r7, #28]
 81056d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81056d4:	e09d      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81056d6:	2300      	movs	r3, #0
 81056d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81056da:	e09a      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81056dc:	4b20      	ldr	r3, [pc, #128]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81056e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81056e8:	d107      	bne.n	81056fa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81056ea:	f107 030c 	add.w	r3, r7, #12
 81056ee:	4618      	mov	r0, r3
 81056f0:	f000 fa02 	bl	8105af8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81056f4:	693b      	ldr	r3, [r7, #16]
 81056f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81056f8:	e08b      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81056fa:	2300      	movs	r3, #0
 81056fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81056fe:	e088      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105700:	4b17      	ldr	r3, [pc, #92]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105702:	681b      	ldr	r3, [r3, #0]
 8105704:	f003 0304 	and.w	r3, r3, #4
 8105708:	2b04      	cmp	r3, #4
 810570a:	d109      	bne.n	8105720 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810570c:	4b14      	ldr	r3, [pc, #80]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810570e:	681b      	ldr	r3, [r3, #0]
 8105710:	08db      	lsrs	r3, r3, #3
 8105712:	f003 0303 	and.w	r3, r3, #3
 8105716:	4a13      	ldr	r2, [pc, #76]	@ (8105764 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8105718:	fa22 f303 	lsr.w	r3, r2, r3
 810571c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810571e:	e078      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105720:	2300      	movs	r3, #0
 8105722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105724:	e075      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105726:	4b0e      	ldr	r3, [pc, #56]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105728:	681b      	ldr	r3, [r3, #0]
 810572a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810572e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105732:	d102      	bne.n	810573a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8105734:	4b0c      	ldr	r3, [pc, #48]	@ (8105768 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8105736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105738:	e06b      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810573a:	2300      	movs	r3, #0
 810573c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810573e:	e068      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105740:	4b07      	ldr	r3, [pc, #28]	@ (8105760 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105742:	681b      	ldr	r3, [r3, #0]
 8105744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810574c:	d102      	bne.n	8105754 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810574e:	4b07      	ldr	r3, [pc, #28]	@ (810576c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8105750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105752:	e05e      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105754:	2300      	movs	r3, #0
 8105756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105758:	e05b      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810575a:	2300      	movs	r3, #0
 810575c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810575e:	e058      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105760:	58024400 	.word	0x58024400
 8105764:	03d09000 	.word	0x03d09000
 8105768:	003d0900 	.word	0x003d0900
 810576c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8105770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105774:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8105778:	430b      	orrs	r3, r1
 810577a:	d148      	bne.n	810580e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 810577c:	4b27      	ldr	r3, [pc, #156]	@ (810581c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810577e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105780:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105784:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810578c:	d02a      	beq.n	81057e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810578e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105790:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105794:	d838      	bhi.n	8105808 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8105796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105798:	2b00      	cmp	r3, #0
 810579a:	d004      	beq.n	81057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 810579c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810579e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81057a2:	d00d      	beq.n	81057c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 81057a4:	e030      	b.n	8105808 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81057a6:	4b1d      	ldr	r3, [pc, #116]	@ (810581c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81057a8:	681b      	ldr	r3, [r3, #0]
 81057aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81057ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81057b2:	d102      	bne.n	81057ba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 81057b4:	4b1a      	ldr	r3, [pc, #104]	@ (8105820 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 81057b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81057b8:	e02b      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81057ba:	2300      	movs	r3, #0
 81057bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81057be:	e028      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81057c0:	4b16      	ldr	r3, [pc, #88]	@ (810581c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81057c2:	681b      	ldr	r3, [r3, #0]
 81057c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81057c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81057cc:	d107      	bne.n	81057de <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81057ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81057d2:	4618      	mov	r0, r3
 81057d4:	f000 fae4 	bl	8105da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81057dc:	e019      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81057de:	2300      	movs	r3, #0
 81057e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81057e2:	e016      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81057e4:	4b0d      	ldr	r3, [pc, #52]	@ (810581c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81057e6:	681b      	ldr	r3, [r3, #0]
 81057e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81057ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81057f0:	d107      	bne.n	8105802 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81057f2:	f107 0318 	add.w	r3, r7, #24
 81057f6:	4618      	mov	r0, r3
 81057f8:	f000 f82a 	bl	8105850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81057fc:	69fb      	ldr	r3, [r7, #28]
 81057fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105800:	e007      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105802:	2300      	movs	r3, #0
 8105804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105806:	e004      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105808:	2300      	movs	r3, #0
 810580a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810580c:	e001      	b.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810580e:	2300      	movs	r3, #0
 8105810:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8105812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8105814:	4618      	mov	r0, r3
 8105816:	3740      	adds	r7, #64	@ 0x40
 8105818:	46bd      	mov	sp, r7
 810581a:	bd80      	pop	{r7, pc}
 810581c:	58024400 	.word	0x58024400
 8105820:	017d7840 	.word	0x017d7840

08105824 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105824:	b580      	push	{r7, lr}
 8105826:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105828:	f7fd ffa8 	bl	810377c <HAL_RCC_GetHCLKFreq>
 810582c:	4602      	mov	r2, r0
 810582e:	4b06      	ldr	r3, [pc, #24]	@ (8105848 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105830:	6a1b      	ldr	r3, [r3, #32]
 8105832:	091b      	lsrs	r3, r3, #4
 8105834:	f003 0307 	and.w	r3, r3, #7
 8105838:	4904      	ldr	r1, [pc, #16]	@ (810584c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810583a:	5ccb      	ldrb	r3, [r1, r3]
 810583c:	f003 031f 	and.w	r3, r3, #31
 8105840:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105844:	4618      	mov	r0, r3
 8105846:	bd80      	pop	{r7, pc}
 8105848:	58024400 	.word	0x58024400
 810584c:	0810c95c 	.word	0x0810c95c

08105850 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8105850:	b480      	push	{r7}
 8105852:	b089      	sub	sp, #36	@ 0x24
 8105854:	af00      	add	r7, sp, #0
 8105856:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105858:	4ba1      	ldr	r3, [pc, #644]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810585a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810585c:	f003 0303 	and.w	r3, r3, #3
 8105860:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8105862:	4b9f      	ldr	r3, [pc, #636]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105866:	0b1b      	lsrs	r3, r3, #12
 8105868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810586c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810586e:	4b9c      	ldr	r3, [pc, #624]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105872:	091b      	lsrs	r3, r3, #4
 8105874:	f003 0301 	and.w	r3, r3, #1
 8105878:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810587a:	4b99      	ldr	r3, [pc, #612]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810587c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810587e:	08db      	lsrs	r3, r3, #3
 8105880:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105884:	693a      	ldr	r2, [r7, #16]
 8105886:	fb02 f303 	mul.w	r3, r2, r3
 810588a:	ee07 3a90 	vmov	s15, r3
 810588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105892:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105896:	697b      	ldr	r3, [r7, #20]
 8105898:	2b00      	cmp	r3, #0
 810589a:	f000 8111 	beq.w	8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810589e:	69bb      	ldr	r3, [r7, #24]
 81058a0:	2b02      	cmp	r3, #2
 81058a2:	f000 8083 	beq.w	81059ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81058a6:	69bb      	ldr	r3, [r7, #24]
 81058a8:	2b02      	cmp	r3, #2
 81058aa:	f200 80a1 	bhi.w	81059f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81058ae:	69bb      	ldr	r3, [r7, #24]
 81058b0:	2b00      	cmp	r3, #0
 81058b2:	d003      	beq.n	81058bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81058b4:	69bb      	ldr	r3, [r7, #24]
 81058b6:	2b01      	cmp	r3, #1
 81058b8:	d056      	beq.n	8105968 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81058ba:	e099      	b.n	81059f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81058bc:	4b88      	ldr	r3, [pc, #544]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81058be:	681b      	ldr	r3, [r3, #0]
 81058c0:	f003 0320 	and.w	r3, r3, #32
 81058c4:	2b00      	cmp	r3, #0
 81058c6:	d02d      	beq.n	8105924 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81058c8:	4b85      	ldr	r3, [pc, #532]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81058ca:	681b      	ldr	r3, [r3, #0]
 81058cc:	08db      	lsrs	r3, r3, #3
 81058ce:	f003 0303 	and.w	r3, r3, #3
 81058d2:	4a84      	ldr	r2, [pc, #528]	@ (8105ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81058d4:	fa22 f303 	lsr.w	r3, r2, r3
 81058d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81058da:	68bb      	ldr	r3, [r7, #8]
 81058dc:	ee07 3a90 	vmov	s15, r3
 81058e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058e4:	697b      	ldr	r3, [r7, #20]
 81058e6:	ee07 3a90 	vmov	s15, r3
 81058ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058f2:	4b7b      	ldr	r3, [pc, #492]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81058f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81058f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058fa:	ee07 3a90 	vmov	s15, r3
 81058fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105902:	ed97 6a03 	vldr	s12, [r7, #12]
 8105906:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810590a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810590e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810591e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105922:	e087      	b.n	8105a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105924:	697b      	ldr	r3, [r7, #20]
 8105926:	ee07 3a90 	vmov	s15, r3
 810592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810592e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105aec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105936:	4b6a      	ldr	r3, [pc, #424]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810593a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810593e:	ee07 3a90 	vmov	s15, r3
 8105942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105946:	ed97 6a03 	vldr	s12, [r7, #12]
 810594a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810594e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810595a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810595e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105966:	e065      	b.n	8105a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105968:	697b      	ldr	r3, [r7, #20]
 810596a:	ee07 3a90 	vmov	s15, r3
 810596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105972:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810597a:	4b59      	ldr	r3, [pc, #356]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810597e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105982:	ee07 3a90 	vmov	s15, r3
 8105986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810598a:	ed97 6a03 	vldr	s12, [r7, #12]
 810598e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810599a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810599e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81059a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81059aa:	e043      	b.n	8105a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81059ac:	697b      	ldr	r3, [r7, #20]
 81059ae:	ee07 3a90 	vmov	s15, r3
 81059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059be:	4b48      	ldr	r3, [pc, #288]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81059c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059c6:	ee07 3a90 	vmov	s15, r3
 81059ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81059d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81059d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81059da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81059de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81059e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81059ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81059ee:	e021      	b.n	8105a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81059f0:	697b      	ldr	r3, [r7, #20]
 81059f2:	ee07 3a90 	vmov	s15, r3
 81059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81059fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a02:	4b37      	ldr	r3, [pc, #220]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a0a:	ee07 3a90 	vmov	s15, r3
 8105a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105a32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105a34:	4b2a      	ldr	r3, [pc, #168]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105a38:	0a5b      	lsrs	r3, r3, #9
 8105a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105a3e:	ee07 3a90 	vmov	s15, r3
 8105a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a5a:	ee17 2a90 	vmov	r2, s15
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105a62:	4b1f      	ldr	r3, [pc, #124]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105a66:	0c1b      	lsrs	r3, r3, #16
 8105a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105a6c:	ee07 3a90 	vmov	s15, r3
 8105a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105a78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a88:	ee17 2a90 	vmov	r2, s15
 8105a8c:	687b      	ldr	r3, [r7, #4]
 8105a8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105a90:	4b13      	ldr	r3, [pc, #76]	@ (8105ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105a94:	0e1b      	lsrs	r3, r3, #24
 8105a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105a9a:	ee07 3a90 	vmov	s15, r3
 8105a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105aa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8105aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105ab6:	ee17 2a90 	vmov	r2, s15
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105abe:	e008      	b.n	8105ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	2200      	movs	r2, #0
 8105ac4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	2200      	movs	r2, #0
 8105aca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	2200      	movs	r2, #0
 8105ad0:	609a      	str	r2, [r3, #8]
}
 8105ad2:	bf00      	nop
 8105ad4:	3724      	adds	r7, #36	@ 0x24
 8105ad6:	46bd      	mov	sp, r7
 8105ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105adc:	4770      	bx	lr
 8105ade:	bf00      	nop
 8105ae0:	58024400 	.word	0x58024400
 8105ae4:	03d09000 	.word	0x03d09000
 8105ae8:	46000000 	.word	0x46000000
 8105aec:	4c742400 	.word	0x4c742400
 8105af0:	4a742400 	.word	0x4a742400
 8105af4:	4bbebc20 	.word	0x4bbebc20

08105af8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105af8:	b480      	push	{r7}
 8105afa:	b089      	sub	sp, #36	@ 0x24
 8105afc:	af00      	add	r7, sp, #0
 8105afe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105b00:	4ba1      	ldr	r3, [pc, #644]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b04:	f003 0303 	and.w	r3, r3, #3
 8105b08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105b0a:	4b9f      	ldr	r3, [pc, #636]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b0e:	0d1b      	lsrs	r3, r3, #20
 8105b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105b14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105b16:	4b9c      	ldr	r3, [pc, #624]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105b1a:	0a1b      	lsrs	r3, r3, #8
 8105b1c:	f003 0301 	and.w	r3, r3, #1
 8105b20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105b22:	4b99      	ldr	r3, [pc, #612]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105b26:	08db      	lsrs	r3, r3, #3
 8105b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105b2c:	693a      	ldr	r2, [r7, #16]
 8105b2e:	fb02 f303 	mul.w	r3, r2, r3
 8105b32:	ee07 3a90 	vmov	s15, r3
 8105b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105b3e:	697b      	ldr	r3, [r7, #20]
 8105b40:	2b00      	cmp	r3, #0
 8105b42:	f000 8111 	beq.w	8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105b46:	69bb      	ldr	r3, [r7, #24]
 8105b48:	2b02      	cmp	r3, #2
 8105b4a:	f000 8083 	beq.w	8105c54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105b4e:	69bb      	ldr	r3, [r7, #24]
 8105b50:	2b02      	cmp	r3, #2
 8105b52:	f200 80a1 	bhi.w	8105c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105b56:	69bb      	ldr	r3, [r7, #24]
 8105b58:	2b00      	cmp	r3, #0
 8105b5a:	d003      	beq.n	8105b64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105b5c:	69bb      	ldr	r3, [r7, #24]
 8105b5e:	2b01      	cmp	r3, #1
 8105b60:	d056      	beq.n	8105c10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105b62:	e099      	b.n	8105c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105b64:	4b88      	ldr	r3, [pc, #544]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b66:	681b      	ldr	r3, [r3, #0]
 8105b68:	f003 0320 	and.w	r3, r3, #32
 8105b6c:	2b00      	cmp	r3, #0
 8105b6e:	d02d      	beq.n	8105bcc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105b70:	4b85      	ldr	r3, [pc, #532]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b72:	681b      	ldr	r3, [r3, #0]
 8105b74:	08db      	lsrs	r3, r3, #3
 8105b76:	f003 0303 	and.w	r3, r3, #3
 8105b7a:	4a84      	ldr	r2, [pc, #528]	@ (8105d8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8105b80:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105b82:	68bb      	ldr	r3, [r7, #8]
 8105b84:	ee07 3a90 	vmov	s15, r3
 8105b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b8c:	697b      	ldr	r3, [r7, #20]
 8105b8e:	ee07 3a90 	vmov	s15, r3
 8105b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b9a:	4b7b      	ldr	r3, [pc, #492]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ba2:	ee07 3a90 	vmov	s15, r3
 8105ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8105bae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105d90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105bca:	e087      	b.n	8105cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105bcc:	697b      	ldr	r3, [r7, #20]
 8105bce:	ee07 3a90 	vmov	s15, r3
 8105bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bd6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105d94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bde:	4b6a      	ldr	r3, [pc, #424]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105be6:	ee07 3a90 	vmov	s15, r3
 8105bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8105bf2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105d90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105c0e:	e065      	b.n	8105cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105c10:	697b      	ldr	r3, [r7, #20]
 8105c12:	ee07 3a90 	vmov	s15, r3
 8105c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c22:	4b59      	ldr	r3, [pc, #356]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c2a:	ee07 3a90 	vmov	s15, r3
 8105c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105d90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105c52:	e043      	b.n	8105cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105c54:	697b      	ldr	r3, [r7, #20]
 8105c56:	ee07 3a90 	vmov	s15, r3
 8105c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105d9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c66:	4b48      	ldr	r3, [pc, #288]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c6e:	ee07 3a90 	vmov	s15, r3
 8105c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105d90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105c96:	e021      	b.n	8105cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105c98:	697b      	ldr	r3, [r7, #20]
 8105c9a:	ee07 3a90 	vmov	s15, r3
 8105c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ca2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105caa:	4b37      	ldr	r3, [pc, #220]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105cb2:	ee07 3a90 	vmov	s15, r3
 8105cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8105cbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105d90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105cda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105ce0:	0a5b      	lsrs	r3, r3, #9
 8105ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105ce6:	ee07 3a90 	vmov	s15, r3
 8105cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105cee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8105cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d02:	ee17 2a90 	vmov	r2, s15
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8105d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105d0e:	0c1b      	lsrs	r3, r3, #16
 8105d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105d14:	ee07 3a90 	vmov	s15, r3
 8105d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105d20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105d24:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d30:	ee17 2a90 	vmov	r2, s15
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105d38:	4b13      	ldr	r3, [pc, #76]	@ (8105d88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105d3c:	0e1b      	lsrs	r3, r3, #24
 8105d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105d42:	ee07 3a90 	vmov	s15, r3
 8105d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d5e:	ee17 2a90 	vmov	r2, s15
 8105d62:	687b      	ldr	r3, [r7, #4]
 8105d64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105d66:	e008      	b.n	8105d7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	2200      	movs	r2, #0
 8105d6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	2200      	movs	r2, #0
 8105d72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105d74:	687b      	ldr	r3, [r7, #4]
 8105d76:	2200      	movs	r2, #0
 8105d78:	609a      	str	r2, [r3, #8]
}
 8105d7a:	bf00      	nop
 8105d7c:	3724      	adds	r7, #36	@ 0x24
 8105d7e:	46bd      	mov	sp, r7
 8105d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d84:	4770      	bx	lr
 8105d86:	bf00      	nop
 8105d88:	58024400 	.word	0x58024400
 8105d8c:	03d09000 	.word	0x03d09000
 8105d90:	46000000 	.word	0x46000000
 8105d94:	4c742400 	.word	0x4c742400
 8105d98:	4a742400 	.word	0x4a742400
 8105d9c:	4bbebc20 	.word	0x4bbebc20

08105da0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8105da0:	b480      	push	{r7}
 8105da2:	b089      	sub	sp, #36	@ 0x24
 8105da4:	af00      	add	r7, sp, #0
 8105da6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105da8:	4ba0      	ldr	r3, [pc, #640]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105dac:	f003 0303 	and.w	r3, r3, #3
 8105db0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8105db2:	4b9e      	ldr	r3, [pc, #632]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105db6:	091b      	lsrs	r3, r3, #4
 8105db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105dbc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105dbe:	4b9b      	ldr	r3, [pc, #620]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105dc2:	f003 0301 	and.w	r3, r3, #1
 8105dc6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105dc8:	4b98      	ldr	r3, [pc, #608]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105dcc:	08db      	lsrs	r3, r3, #3
 8105dce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105dd2:	693a      	ldr	r2, [r7, #16]
 8105dd4:	fb02 f303 	mul.w	r3, r2, r3
 8105dd8:	ee07 3a90 	vmov	s15, r3
 8105ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105de0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105de4:	697b      	ldr	r3, [r7, #20]
 8105de6:	2b00      	cmp	r3, #0
 8105de8:	f000 8111 	beq.w	810600e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105dec:	69bb      	ldr	r3, [r7, #24]
 8105dee:	2b02      	cmp	r3, #2
 8105df0:	f000 8083 	beq.w	8105efa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105df4:	69bb      	ldr	r3, [r7, #24]
 8105df6:	2b02      	cmp	r3, #2
 8105df8:	f200 80a1 	bhi.w	8105f3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105dfc:	69bb      	ldr	r3, [r7, #24]
 8105dfe:	2b00      	cmp	r3, #0
 8105e00:	d003      	beq.n	8105e0a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8105e02:	69bb      	ldr	r3, [r7, #24]
 8105e04:	2b01      	cmp	r3, #1
 8105e06:	d056      	beq.n	8105eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105e08:	e099      	b.n	8105f3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105e0a:	4b88      	ldr	r3, [pc, #544]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e0c:	681b      	ldr	r3, [r3, #0]
 8105e0e:	f003 0320 	and.w	r3, r3, #32
 8105e12:	2b00      	cmp	r3, #0
 8105e14:	d02d      	beq.n	8105e72 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105e16:	4b85      	ldr	r3, [pc, #532]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e18:	681b      	ldr	r3, [r3, #0]
 8105e1a:	08db      	lsrs	r3, r3, #3
 8105e1c:	f003 0303 	and.w	r3, r3, #3
 8105e20:	4a83      	ldr	r2, [pc, #524]	@ (8106030 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105e22:	fa22 f303 	lsr.w	r3, r2, r3
 8105e26:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105e28:	68bb      	ldr	r3, [r7, #8]
 8105e2a:	ee07 3a90 	vmov	s15, r3
 8105e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e32:	697b      	ldr	r3, [r7, #20]
 8105e34:	ee07 3a90 	vmov	s15, r3
 8105e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e40:	4b7a      	ldr	r3, [pc, #488]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e48:	ee07 3a90 	vmov	s15, r3
 8105e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e50:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e54:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8106034 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e6c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105e70:	e087      	b.n	8105f82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105e72:	697b      	ldr	r3, [r7, #20]
 8105e74:	ee07 3a90 	vmov	s15, r3
 8105e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e7c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8106038 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e84:	4b69      	ldr	r3, [pc, #420]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e8c:	ee07 3a90 	vmov	s15, r3
 8105e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e94:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e98:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8106034 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ea4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105eb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105eb4:	e065      	b.n	8105f82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105eb6:	697b      	ldr	r3, [r7, #20]
 8105eb8:	ee07 3a90 	vmov	s15, r3
 8105ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ec0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 810603c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8105ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ec8:	4b58      	ldr	r3, [pc, #352]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ed0:	ee07 3a90 	vmov	s15, r3
 8105ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ed8:	ed97 6a03 	vldr	s12, [r7, #12]
 8105edc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8106034 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ef4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105ef8:	e043      	b.n	8105f82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105efa:	697b      	ldr	r3, [r7, #20]
 8105efc:	ee07 3a90 	vmov	s15, r3
 8105f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f04:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8106040 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f0c:	4b47      	ldr	r3, [pc, #284]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f14:	ee07 3a90 	vmov	s15, r3
 8105f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105f20:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8106034 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105f3c:	e021      	b.n	8105f82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105f3e:	697b      	ldr	r3, [r7, #20]
 8105f40:	ee07 3a90 	vmov	s15, r3
 8105f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f48:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8106038 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f50:	4b36      	ldr	r3, [pc, #216]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f58:	ee07 3a90 	vmov	s15, r3
 8105f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f60:	ed97 6a03 	vldr	s12, [r7, #12]
 8105f64:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8106034 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105f80:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8105f82:	4b2a      	ldr	r3, [pc, #168]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105f86:	0a5b      	lsrs	r3, r3, #9
 8105f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105f8c:	ee07 3a90 	vmov	s15, r3
 8105f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105fa8:	ee17 2a90 	vmov	r2, s15
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8105fb0:	4b1e      	ldr	r3, [pc, #120]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105fb4:	0c1b      	lsrs	r3, r3, #16
 8105fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105fba:	ee07 3a90 	vmov	s15, r3
 8105fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8105fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105fd6:	ee17 2a90 	vmov	r2, s15
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8105fde:	4b13      	ldr	r3, [pc, #76]	@ (810602c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105fe2:	0e1b      	lsrs	r3, r3, #24
 8105fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105fe8:	ee07 3a90 	vmov	s15, r3
 8105fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ff0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105ff4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105ff8:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106004:	ee17 2a90 	vmov	r2, s15
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810600c:	e008      	b.n	8106020 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810600e:	687b      	ldr	r3, [r7, #4]
 8106010:	2200      	movs	r2, #0
 8106012:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106014:	687b      	ldr	r3, [r7, #4]
 8106016:	2200      	movs	r2, #0
 8106018:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810601a:	687b      	ldr	r3, [r7, #4]
 810601c:	2200      	movs	r2, #0
 810601e:	609a      	str	r2, [r3, #8]
}
 8106020:	bf00      	nop
 8106022:	3724      	adds	r7, #36	@ 0x24
 8106024:	46bd      	mov	sp, r7
 8106026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810602a:	4770      	bx	lr
 810602c:	58024400 	.word	0x58024400
 8106030:	03d09000 	.word	0x03d09000
 8106034:	46000000 	.word	0x46000000
 8106038:	4c742400 	.word	0x4c742400
 810603c:	4a742400 	.word	0x4a742400
 8106040:	4bbebc20 	.word	0x4bbebc20

08106044 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106044:	b580      	push	{r7, lr}
 8106046:	b084      	sub	sp, #16
 8106048:	af00      	add	r7, sp, #0
 810604a:	6078      	str	r0, [r7, #4]
 810604c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810604e:	2300      	movs	r3, #0
 8106050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106052:	4b54      	ldr	r3, [pc, #336]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106056:	f003 0303 	and.w	r3, r3, #3
 810605a:	2b03      	cmp	r3, #3
 810605c:	d101      	bne.n	8106062 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810605e:	2301      	movs	r3, #1
 8106060:	e09b      	b.n	810619a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106062:	4b50      	ldr	r3, [pc, #320]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106064:	681b      	ldr	r3, [r3, #0]
 8106066:	4a4f      	ldr	r2, [pc, #316]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106068:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810606c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810606e:	f7fc fbc5 	bl	81027fc <HAL_GetTick>
 8106072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106074:	e008      	b.n	8106088 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106076:	f7fc fbc1 	bl	81027fc <HAL_GetTick>
 810607a:	4602      	mov	r2, r0
 810607c:	68bb      	ldr	r3, [r7, #8]
 810607e:	1ad3      	subs	r3, r2, r3
 8106080:	2b02      	cmp	r3, #2
 8106082:	d901      	bls.n	8106088 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106084:	2303      	movs	r3, #3
 8106086:	e088      	b.n	810619a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106088:	4b46      	ldr	r3, [pc, #280]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106090:	2b00      	cmp	r3, #0
 8106092:	d1f0      	bne.n	8106076 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106094:	4b43      	ldr	r3, [pc, #268]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106098:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810609c:	687b      	ldr	r3, [r7, #4]
 810609e:	681b      	ldr	r3, [r3, #0]
 81060a0:	031b      	lsls	r3, r3, #12
 81060a2:	4940      	ldr	r1, [pc, #256]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 81060a4:	4313      	orrs	r3, r2
 81060a6:	628b      	str	r3, [r1, #40]	@ 0x28
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	685b      	ldr	r3, [r3, #4]
 81060ac:	3b01      	subs	r3, #1
 81060ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	689b      	ldr	r3, [r3, #8]
 81060b6:	3b01      	subs	r3, #1
 81060b8:	025b      	lsls	r3, r3, #9
 81060ba:	b29b      	uxth	r3, r3
 81060bc:	431a      	orrs	r2, r3
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	68db      	ldr	r3, [r3, #12]
 81060c2:	3b01      	subs	r3, #1
 81060c4:	041b      	lsls	r3, r3, #16
 81060c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81060ca:	431a      	orrs	r2, r3
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	691b      	ldr	r3, [r3, #16]
 81060d0:	3b01      	subs	r3, #1
 81060d2:	061b      	lsls	r3, r3, #24
 81060d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81060d8:	4932      	ldr	r1, [pc, #200]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 81060da:	4313      	orrs	r3, r2
 81060dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81060de:	4b31      	ldr	r3, [pc, #196]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 81060e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81060e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	695b      	ldr	r3, [r3, #20]
 81060ea:	492e      	ldr	r1, [pc, #184]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 81060ec:	4313      	orrs	r3, r2
 81060ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81060f0:	4b2c      	ldr	r3, [pc, #176]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 81060f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81060f4:	f023 0220 	bic.w	r2, r3, #32
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	699b      	ldr	r3, [r3, #24]
 81060fc:	4929      	ldr	r1, [pc, #164]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 81060fe:	4313      	orrs	r3, r2
 8106100:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106102:	4b28      	ldr	r3, [pc, #160]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106106:	4a27      	ldr	r2, [pc, #156]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106108:	f023 0310 	bic.w	r3, r3, #16
 810610c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810610e:	4b25      	ldr	r3, [pc, #148]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106112:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8106116:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810611a:	687a      	ldr	r2, [r7, #4]
 810611c:	69d2      	ldr	r2, [r2, #28]
 810611e:	00d2      	lsls	r2, r2, #3
 8106120:	4920      	ldr	r1, [pc, #128]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106122:	4313      	orrs	r3, r2
 8106124:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106126:	4b1f      	ldr	r3, [pc, #124]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810612a:	4a1e      	ldr	r2, [pc, #120]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 810612c:	f043 0310 	orr.w	r3, r3, #16
 8106130:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106132:	683b      	ldr	r3, [r7, #0]
 8106134:	2b00      	cmp	r3, #0
 8106136:	d106      	bne.n	8106146 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106138:	4b1a      	ldr	r3, [pc, #104]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 810613a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810613c:	4a19      	ldr	r2, [pc, #100]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 810613e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8106142:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106144:	e00f      	b.n	8106166 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106146:	683b      	ldr	r3, [r7, #0]
 8106148:	2b01      	cmp	r3, #1
 810614a:	d106      	bne.n	810615a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810614c:	4b15      	ldr	r3, [pc, #84]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 810614e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106150:	4a14      	ldr	r2, [pc, #80]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106156:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106158:	e005      	b.n	8106166 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810615a:	4b12      	ldr	r3, [pc, #72]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 810615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810615e:	4a11      	ldr	r2, [pc, #68]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106160:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8106164:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106166:	4b0f      	ldr	r3, [pc, #60]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 8106168:	681b      	ldr	r3, [r3, #0]
 810616a:	4a0e      	ldr	r2, [pc, #56]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 810616c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8106170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106172:	f7fc fb43 	bl	81027fc <HAL_GetTick>
 8106176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106178:	e008      	b.n	810618c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810617a:	f7fc fb3f 	bl	81027fc <HAL_GetTick>
 810617e:	4602      	mov	r2, r0
 8106180:	68bb      	ldr	r3, [r7, #8]
 8106182:	1ad3      	subs	r3, r2, r3
 8106184:	2b02      	cmp	r3, #2
 8106186:	d901      	bls.n	810618c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106188:	2303      	movs	r3, #3
 810618a:	e006      	b.n	810619a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810618c:	4b05      	ldr	r3, [pc, #20]	@ (81061a4 <RCCEx_PLL2_Config+0x160>)
 810618e:	681b      	ldr	r3, [r3, #0]
 8106190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106194:	2b00      	cmp	r3, #0
 8106196:	d0f0      	beq.n	810617a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106198:	7bfb      	ldrb	r3, [r7, #15]
}
 810619a:	4618      	mov	r0, r3
 810619c:	3710      	adds	r7, #16
 810619e:	46bd      	mov	sp, r7
 81061a0:	bd80      	pop	{r7, pc}
 81061a2:	bf00      	nop
 81061a4:	58024400 	.word	0x58024400

081061a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81061a8:	b580      	push	{r7, lr}
 81061aa:	b084      	sub	sp, #16
 81061ac:	af00      	add	r7, sp, #0
 81061ae:	6078      	str	r0, [r7, #4]
 81061b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81061b2:	2300      	movs	r3, #0
 81061b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81061b6:	4b54      	ldr	r3, [pc, #336]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81061b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81061ba:	f003 0303 	and.w	r3, r3, #3
 81061be:	2b03      	cmp	r3, #3
 81061c0:	d101      	bne.n	81061c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81061c2:	2301      	movs	r3, #1
 81061c4:	e09b      	b.n	81062fe <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81061c6:	4b50      	ldr	r3, [pc, #320]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81061c8:	681b      	ldr	r3, [r3, #0]
 81061ca:	4a4f      	ldr	r2, [pc, #316]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81061cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81061d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81061d2:	f7fc fb13 	bl	81027fc <HAL_GetTick>
 81061d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81061d8:	e008      	b.n	81061ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81061da:	f7fc fb0f 	bl	81027fc <HAL_GetTick>
 81061de:	4602      	mov	r2, r0
 81061e0:	68bb      	ldr	r3, [r7, #8]
 81061e2:	1ad3      	subs	r3, r2, r3
 81061e4:	2b02      	cmp	r3, #2
 81061e6:	d901      	bls.n	81061ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81061e8:	2303      	movs	r3, #3
 81061ea:	e088      	b.n	81062fe <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81061ec:	4b46      	ldr	r3, [pc, #280]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81061ee:	681b      	ldr	r3, [r3, #0]
 81061f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81061f4:	2b00      	cmp	r3, #0
 81061f6:	d1f0      	bne.n	81061da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81061f8:	4b43      	ldr	r3, [pc, #268]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81061fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81061fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	681b      	ldr	r3, [r3, #0]
 8106204:	051b      	lsls	r3, r3, #20
 8106206:	4940      	ldr	r1, [pc, #256]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 8106208:	4313      	orrs	r3, r2
 810620a:	628b      	str	r3, [r1, #40]	@ 0x28
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	685b      	ldr	r3, [r3, #4]
 8106210:	3b01      	subs	r3, #1
 8106212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	689b      	ldr	r3, [r3, #8]
 810621a:	3b01      	subs	r3, #1
 810621c:	025b      	lsls	r3, r3, #9
 810621e:	b29b      	uxth	r3, r3
 8106220:	431a      	orrs	r2, r3
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	68db      	ldr	r3, [r3, #12]
 8106226:	3b01      	subs	r3, #1
 8106228:	041b      	lsls	r3, r3, #16
 810622a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810622e:	431a      	orrs	r2, r3
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	691b      	ldr	r3, [r3, #16]
 8106234:	3b01      	subs	r3, #1
 8106236:	061b      	lsls	r3, r3, #24
 8106238:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810623c:	4932      	ldr	r1, [pc, #200]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 810623e:	4313      	orrs	r3, r2
 8106240:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106242:	4b31      	ldr	r3, [pc, #196]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 8106244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106246:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810624a:	687b      	ldr	r3, [r7, #4]
 810624c:	695b      	ldr	r3, [r3, #20]
 810624e:	492e      	ldr	r1, [pc, #184]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 8106250:	4313      	orrs	r3, r2
 8106252:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106254:	4b2c      	ldr	r3, [pc, #176]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 8106256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106258:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	699b      	ldr	r3, [r3, #24]
 8106260:	4929      	ldr	r1, [pc, #164]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 8106262:	4313      	orrs	r3, r2
 8106264:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106266:	4b28      	ldr	r3, [pc, #160]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 8106268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810626a:	4a27      	ldr	r2, [pc, #156]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 810626c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8106270:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106272:	4b25      	ldr	r3, [pc, #148]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 8106274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106276:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810627a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810627e:	687a      	ldr	r2, [r7, #4]
 8106280:	69d2      	ldr	r2, [r2, #28]
 8106282:	00d2      	lsls	r2, r2, #3
 8106284:	4920      	ldr	r1, [pc, #128]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 8106286:	4313      	orrs	r3, r2
 8106288:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810628a:	4b1f      	ldr	r3, [pc, #124]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 810628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810628e:	4a1e      	ldr	r2, [pc, #120]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 8106290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106294:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106296:	683b      	ldr	r3, [r7, #0]
 8106298:	2b00      	cmp	r3, #0
 810629a:	d106      	bne.n	81062aa <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810629c:	4b1a      	ldr	r3, [pc, #104]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 810629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062a0:	4a19      	ldr	r2, [pc, #100]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81062a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81062a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81062a8:	e00f      	b.n	81062ca <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81062aa:	683b      	ldr	r3, [r7, #0]
 81062ac:	2b01      	cmp	r3, #1
 81062ae:	d106      	bne.n	81062be <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81062b0:	4b15      	ldr	r3, [pc, #84]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062b4:	4a14      	ldr	r2, [pc, #80]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81062b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81062ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81062bc:	e005      	b.n	81062ca <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81062be:	4b12      	ldr	r3, [pc, #72]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81062c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062c2:	4a11      	ldr	r2, [pc, #68]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81062c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81062c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81062ca:	4b0f      	ldr	r3, [pc, #60]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81062cc:	681b      	ldr	r3, [r3, #0]
 81062ce:	4a0e      	ldr	r2, [pc, #56]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81062d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81062d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81062d6:	f7fc fa91 	bl	81027fc <HAL_GetTick>
 81062da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81062dc:	e008      	b.n	81062f0 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81062de:	f7fc fa8d 	bl	81027fc <HAL_GetTick>
 81062e2:	4602      	mov	r2, r0
 81062e4:	68bb      	ldr	r3, [r7, #8]
 81062e6:	1ad3      	subs	r3, r2, r3
 81062e8:	2b02      	cmp	r3, #2
 81062ea:	d901      	bls.n	81062f0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81062ec:	2303      	movs	r3, #3
 81062ee:	e006      	b.n	81062fe <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81062f0:	4b05      	ldr	r3, [pc, #20]	@ (8106308 <RCCEx_PLL3_Config+0x160>)
 81062f2:	681b      	ldr	r3, [r3, #0]
 81062f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81062f8:	2b00      	cmp	r3, #0
 81062fa:	d0f0      	beq.n	81062de <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81062fc:	7bfb      	ldrb	r3, [r7, #15]
}
 81062fe:	4618      	mov	r0, r3
 8106300:	3710      	adds	r7, #16
 8106302:	46bd      	mov	sp, r7
 8106304:	bd80      	pop	{r7, pc}
 8106306:	bf00      	nop
 8106308:	58024400 	.word	0x58024400

0810630c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 810630c:	b580      	push	{r7, lr}
 810630e:	b084      	sub	sp, #16
 8106310:	af00      	add	r7, sp, #0
 8106312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8106314:	2301      	movs	r3, #1
 8106316:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	2b00      	cmp	r3, #0
 810631c:	d073      	beq.n	8106406 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8106324:	b2db      	uxtb	r3, r3
 8106326:	2b00      	cmp	r3, #0
 8106328:	d106      	bne.n	8106338 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 810632a:	687b      	ldr	r3, [r7, #4]
 810632c:	2200      	movs	r2, #0
 810632e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8106332:	6878      	ldr	r0, [r7, #4]
 8106334:	f7fb fc16 	bl	8101b64 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	2202      	movs	r2, #2
 810633c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	681b      	ldr	r3, [r3, #0]
 8106344:	68db      	ldr	r3, [r3, #12]
 8106346:	f003 0310 	and.w	r3, r3, #16
 810634a:	2b10      	cmp	r3, #16
 810634c:	d052      	beq.n	81063f4 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	681b      	ldr	r3, [r3, #0]
 8106352:	22ca      	movs	r2, #202	@ 0xca
 8106354:	625a      	str	r2, [r3, #36]	@ 0x24
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	681b      	ldr	r3, [r3, #0]
 810635a:	2253      	movs	r2, #83	@ 0x53
 810635c:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 810635e:	6878      	ldr	r0, [r7, #4]
 8106360:	f000 f87a 	bl	8106458 <RTC_EnterInitMode>
 8106364:	4603      	mov	r3, r0
 8106366:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8106368:	7bfb      	ldrb	r3, [r7, #15]
 810636a:	2b00      	cmp	r3, #0
 810636c:	d126      	bne.n	81063bc <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	689b      	ldr	r3, [r3, #8]
 8106374:	687a      	ldr	r2, [r7, #4]
 8106376:	6812      	ldr	r2, [r2, #0]
 8106378:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 810637c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8106380:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	681b      	ldr	r3, [r3, #0]
 8106386:	6899      	ldr	r1, [r3, #8]
 8106388:	687b      	ldr	r3, [r7, #4]
 810638a:	685a      	ldr	r2, [r3, #4]
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	691b      	ldr	r3, [r3, #16]
 8106390:	431a      	orrs	r2, r3
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	699b      	ldr	r3, [r3, #24]
 8106396:	431a      	orrs	r2, r3
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	681b      	ldr	r3, [r3, #0]
 810639c:	430a      	orrs	r2, r1
 810639e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	689b      	ldr	r3, [r3, #8]
 81063a4:	0419      	lsls	r1, r3, #16
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	68da      	ldr	r2, [r3, #12]
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	681b      	ldr	r3, [r3, #0]
 81063ae:	430a      	orrs	r2, r1
 81063b0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 81063b2:	6878      	ldr	r0, [r7, #4]
 81063b4:	f000 f884 	bl	81064c0 <RTC_ExitInitMode>
 81063b8:	4603      	mov	r3, r0
 81063ba:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 81063bc:	7bfb      	ldrb	r3, [r7, #15]
 81063be:	2b00      	cmp	r3, #0
 81063c0:	d113      	bne.n	81063ea <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	681b      	ldr	r3, [r3, #0]
 81063c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	681b      	ldr	r3, [r3, #0]
 81063cc:	f022 0203 	bic.w	r2, r2, #3
 81063d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	681b      	ldr	r3, [r3, #0]
 81063d6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 81063d8:	687b      	ldr	r3, [r7, #4]
 81063da:	69da      	ldr	r2, [r3, #28]
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	695b      	ldr	r3, [r3, #20]
 81063e0:	431a      	orrs	r2, r3
 81063e2:	687b      	ldr	r3, [r7, #4]
 81063e4:	681b      	ldr	r3, [r3, #0]
 81063e6:	430a      	orrs	r2, r1
 81063e8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 81063ea:	687b      	ldr	r3, [r7, #4]
 81063ec:	681b      	ldr	r3, [r3, #0]
 81063ee:	22ff      	movs	r2, #255	@ 0xff
 81063f0:	625a      	str	r2, [r3, #36]	@ 0x24
 81063f2:	e001      	b.n	81063f8 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 81063f4:	2300      	movs	r3, #0
 81063f6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 81063f8:	7bfb      	ldrb	r3, [r7, #15]
 81063fa:	2b00      	cmp	r3, #0
 81063fc:	d103      	bne.n	8106406 <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	2201      	movs	r2, #1
 8106402:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8106406:	7bfb      	ldrb	r3, [r7, #15]
}
 8106408:	4618      	mov	r0, r3
 810640a:	3710      	adds	r7, #16
 810640c:	46bd      	mov	sp, r7
 810640e:	bd80      	pop	{r7, pc}

08106410 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8106410:	b580      	push	{r7, lr}
 8106412:	b084      	sub	sp, #16
 8106414:	af00      	add	r7, sp, #0
 8106416:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	681b      	ldr	r3, [r3, #0]
 810641c:	4a0d      	ldr	r2, [pc, #52]	@ (8106454 <HAL_RTC_WaitForSynchro+0x44>)
 810641e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8106420:	f7fc f9ec 	bl	81027fc <HAL_GetTick>
 8106424:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8106426:	e009      	b.n	810643c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8106428:	f7fc f9e8 	bl	81027fc <HAL_GetTick>
 810642c:	4602      	mov	r2, r0
 810642e:	68fb      	ldr	r3, [r7, #12]
 8106430:	1ad3      	subs	r3, r2, r3
 8106432:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8106436:	d901      	bls.n	810643c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8106438:	2303      	movs	r3, #3
 810643a:	e007      	b.n	810644c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 810643c:	687b      	ldr	r3, [r7, #4]
 810643e:	681b      	ldr	r3, [r3, #0]
 8106440:	68db      	ldr	r3, [r3, #12]
 8106442:	f003 0320 	and.w	r3, r3, #32
 8106446:	2b00      	cmp	r3, #0
 8106448:	d0ee      	beq.n	8106428 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 810644a:	2300      	movs	r3, #0
}
 810644c:	4618      	mov	r0, r3
 810644e:	3710      	adds	r7, #16
 8106450:	46bd      	mov	sp, r7
 8106452:	bd80      	pop	{r7, pc}
 8106454:	0003ff5f 	.word	0x0003ff5f

08106458 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8106458:	b580      	push	{r7, lr}
 810645a:	b084      	sub	sp, #16
 810645c:	af00      	add	r7, sp, #0
 810645e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106460:	2300      	movs	r3, #0
 8106462:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	681b      	ldr	r3, [r3, #0]
 8106468:	68db      	ldr	r3, [r3, #12]
 810646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810646e:	2b00      	cmp	r3, #0
 8106470:	d120      	bne.n	81064b4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8106472:	687b      	ldr	r3, [r7, #4]
 8106474:	681b      	ldr	r3, [r3, #0]
 8106476:	f04f 32ff 	mov.w	r2, #4294967295
 810647a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 810647c:	f7fc f9be 	bl	81027fc <HAL_GetTick>
 8106480:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8106482:	e00d      	b.n	81064a0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8106484:	f7fc f9ba 	bl	81027fc <HAL_GetTick>
 8106488:	4602      	mov	r2, r0
 810648a:	68bb      	ldr	r3, [r7, #8]
 810648c:	1ad3      	subs	r3, r2, r3
 810648e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8106492:	d905      	bls.n	81064a0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8106494:	2303      	movs	r3, #3
 8106496:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	2203      	movs	r2, #3
 810649c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81064a0:	687b      	ldr	r3, [r7, #4]
 81064a2:	681b      	ldr	r3, [r3, #0]
 81064a4:	68db      	ldr	r3, [r3, #12]
 81064a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81064aa:	2b00      	cmp	r3, #0
 81064ac:	d102      	bne.n	81064b4 <RTC_EnterInitMode+0x5c>
 81064ae:	7bfb      	ldrb	r3, [r7, #15]
 81064b0:	2b03      	cmp	r3, #3
 81064b2:	d1e7      	bne.n	8106484 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 81064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 81064b6:	4618      	mov	r0, r3
 81064b8:	3710      	adds	r7, #16
 81064ba:	46bd      	mov	sp, r7
 81064bc:	bd80      	pop	{r7, pc}
	...

081064c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 81064c0:	b580      	push	{r7, lr}
 81064c2:	b084      	sub	sp, #16
 81064c4:	af00      	add	r7, sp, #0
 81064c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81064c8:	2300      	movs	r3, #0
 81064ca:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 81064cc:	4b1a      	ldr	r3, [pc, #104]	@ (8106538 <RTC_ExitInitMode+0x78>)
 81064ce:	68db      	ldr	r3, [r3, #12]
 81064d0:	4a19      	ldr	r2, [pc, #100]	@ (8106538 <RTC_ExitInitMode+0x78>)
 81064d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81064d6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 81064d8:	4b17      	ldr	r3, [pc, #92]	@ (8106538 <RTC_ExitInitMode+0x78>)
 81064da:	689b      	ldr	r3, [r3, #8]
 81064dc:	f003 0320 	and.w	r3, r3, #32
 81064e0:	2b00      	cmp	r3, #0
 81064e2:	d10c      	bne.n	81064fe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81064e4:	6878      	ldr	r0, [r7, #4]
 81064e6:	f7ff ff93 	bl	8106410 <HAL_RTC_WaitForSynchro>
 81064ea:	4603      	mov	r3, r0
 81064ec:	2b00      	cmp	r3, #0
 81064ee:	d01e      	beq.n	810652e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	2203      	movs	r2, #3
 81064f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 81064f8:	2303      	movs	r3, #3
 81064fa:	73fb      	strb	r3, [r7, #15]
 81064fc:	e017      	b.n	810652e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81064fe:	4b0e      	ldr	r3, [pc, #56]	@ (8106538 <RTC_ExitInitMode+0x78>)
 8106500:	689b      	ldr	r3, [r3, #8]
 8106502:	4a0d      	ldr	r2, [pc, #52]	@ (8106538 <RTC_ExitInitMode+0x78>)
 8106504:	f023 0320 	bic.w	r3, r3, #32
 8106508:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 810650a:	6878      	ldr	r0, [r7, #4]
 810650c:	f7ff ff80 	bl	8106410 <HAL_RTC_WaitForSynchro>
 8106510:	4603      	mov	r3, r0
 8106512:	2b00      	cmp	r3, #0
 8106514:	d005      	beq.n	8106522 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8106516:	687b      	ldr	r3, [r7, #4]
 8106518:	2203      	movs	r2, #3
 810651a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 810651e:	2303      	movs	r3, #3
 8106520:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8106522:	4b05      	ldr	r3, [pc, #20]	@ (8106538 <RTC_ExitInitMode+0x78>)
 8106524:	689b      	ldr	r3, [r3, #8]
 8106526:	4a04      	ldr	r2, [pc, #16]	@ (8106538 <RTC_ExitInitMode+0x78>)
 8106528:	f043 0320 	orr.w	r3, r3, #32
 810652c:	6093      	str	r3, [r2, #8]
  }

  return status;
 810652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8106530:	4618      	mov	r0, r3
 8106532:	3710      	adds	r7, #16
 8106534:	46bd      	mov	sp, r7
 8106536:	bd80      	pop	{r7, pc}
 8106538:	58004000 	.word	0x58004000

0810653c <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 810653c:	b480      	push	{r7}
 810653e:	b085      	sub	sp, #20
 8106540:	af00      	add	r7, sp, #0
 8106542:	6078      	str	r0, [r7, #4]
 8106544:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8106546:	687b      	ldr	r3, [r7, #4]
 8106548:	f893 3020 	ldrb.w	r3, [r3, #32]
 810654c:	2b01      	cmp	r3, #1
 810654e:	d101      	bne.n	8106554 <HAL_RTCEx_SetTamper+0x18>
 8106550:	2302      	movs	r3, #2
 8106552:	e0cc      	b.n	81066ee <HAL_RTCEx_SetTamper+0x1b2>
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	2201      	movs	r2, #1
 8106558:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	2202      	movs	r2, #2
 8106560:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	681b      	ldr	r3, [r3, #0]
 8106568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810656a:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 810656c:	683b      	ldr	r3, [r7, #0]
 810656e:	681b      	ldr	r3, [r3, #0]
 8106570:	68fa      	ldr	r2, [r7, #12]
 8106572:	4313      	orrs	r3, r2
 8106574:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8106576:	683b      	ldr	r3, [r7, #0]
 8106578:	689b      	ldr	r3, [r3, #8]
 810657a:	2b08      	cmp	r3, #8
 810657c:	d003      	beq.n	8106586 <HAL_RTCEx_SetTamper+0x4a>
 810657e:	683b      	ldr	r3, [r7, #0]
 8106580:	689b      	ldr	r3, [r3, #8]
 8106582:	2b02      	cmp	r3, #2
 8106584:	d106      	bne.n	8106594 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8106586:	683b      	ldr	r3, [r7, #0]
 8106588:	681b      	ldr	r3, [r3, #0]
 810658a:	005b      	lsls	r3, r3, #1
 810658c:	68fa      	ldr	r2, [r7, #12]
 810658e:	4313      	orrs	r3, r2
 8106590:	60fb      	str	r3, [r7, #12]
 8106592:	e006      	b.n	81065a2 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8106594:	683b      	ldr	r3, [r7, #0]
 8106596:	681b      	ldr	r3, [r3, #0]
 8106598:	005b      	lsls	r3, r3, #1
 810659a:	43db      	mvns	r3, r3
 810659c:	68fa      	ldr	r2, [r7, #12]
 810659e:	4013      	ands	r3, r2
 81065a0:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 81065a2:	683b      	ldr	r3, [r7, #0]
 81065a4:	68db      	ldr	r3, [r3, #12]
 81065a6:	2b00      	cmp	r3, #0
 81065a8:	d01e      	beq.n	81065e8 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81065aa:	683b      	ldr	r3, [r7, #0]
 81065ac:	681b      	ldr	r3, [r3, #0]
 81065ae:	f003 0301 	and.w	r3, r3, #1
 81065b2:	2b00      	cmp	r3, #0
 81065b4:	d003      	beq.n	81065be <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 81065b6:	68fb      	ldr	r3, [r7, #12]
 81065b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81065bc:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81065be:	683b      	ldr	r3, [r7, #0]
 81065c0:	681b      	ldr	r3, [r3, #0]
 81065c2:	f003 0308 	and.w	r3, r3, #8
 81065c6:	2b00      	cmp	r3, #0
 81065c8:	d003      	beq.n	81065d2 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 81065ca:	68fb      	ldr	r3, [r7, #12]
 81065cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81065d0:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81065d2:	683b      	ldr	r3, [r7, #0]
 81065d4:	681b      	ldr	r3, [r3, #0]
 81065d6:	f003 0320 	and.w	r3, r3, #32
 81065da:	2b00      	cmp	r3, #0
 81065dc:	d022      	beq.n	8106624 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 81065de:	68fb      	ldr	r3, [r7, #12]
 81065e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81065e4:	60fb      	str	r3, [r7, #12]
 81065e6:	e01d      	b.n	8106624 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81065e8:	683b      	ldr	r3, [r7, #0]
 81065ea:	681b      	ldr	r3, [r3, #0]
 81065ec:	f003 0301 	and.w	r3, r3, #1
 81065f0:	2b00      	cmp	r3, #0
 81065f2:	d003      	beq.n	81065fc <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 81065f4:	68fb      	ldr	r3, [r7, #12]
 81065f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 81065fa:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81065fc:	683b      	ldr	r3, [r7, #0]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	f003 0308 	and.w	r3, r3, #8
 8106604:	2b00      	cmp	r3, #0
 8106606:	d003      	beq.n	8106610 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8106608:	68fb      	ldr	r3, [r7, #12]
 810660a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810660e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8106610:	683b      	ldr	r3, [r7, #0]
 8106612:	681b      	ldr	r3, [r3, #0]
 8106614:	f003 0320 	and.w	r3, r3, #32
 8106618:	2b00      	cmp	r3, #0
 810661a:	d003      	beq.n	8106624 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 810661c:	68fb      	ldr	r3, [r7, #12]
 810661e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8106622:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8106624:	683b      	ldr	r3, [r7, #0]
 8106626:	691b      	ldr	r3, [r3, #16]
 8106628:	2b00      	cmp	r3, #0
 810662a:	d01e      	beq.n	810666a <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810662c:	683b      	ldr	r3, [r7, #0]
 810662e:	681b      	ldr	r3, [r3, #0]
 8106630:	f003 0301 	and.w	r3, r3, #1
 8106634:	2b00      	cmp	r3, #0
 8106636:	d003      	beq.n	8106640 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8106638:	68fb      	ldr	r3, [r7, #12]
 810663a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810663e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8106640:	683b      	ldr	r3, [r7, #0]
 8106642:	681b      	ldr	r3, [r3, #0]
 8106644:	f003 0308 	and.w	r3, r3, #8
 8106648:	2b00      	cmp	r3, #0
 810664a:	d003      	beq.n	8106654 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 810664c:	68fb      	ldr	r3, [r7, #12]
 810664e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8106652:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8106654:	683b      	ldr	r3, [r7, #0]
 8106656:	681b      	ldr	r3, [r3, #0]
 8106658:	f003 0320 	and.w	r3, r3, #32
 810665c:	2b00      	cmp	r3, #0
 810665e:	d022      	beq.n	81066a6 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8106660:	68fb      	ldr	r3, [r7, #12]
 8106662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8106666:	60fb      	str	r3, [r7, #12]
 8106668:	e01d      	b.n	81066a6 <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810666a:	683b      	ldr	r3, [r7, #0]
 810666c:	681b      	ldr	r3, [r3, #0]
 810666e:	f003 0301 	and.w	r3, r3, #1
 8106672:	2b00      	cmp	r3, #0
 8106674:	d003      	beq.n	810667e <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8106676:	68fb      	ldr	r3, [r7, #12]
 8106678:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810667c:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810667e:	683b      	ldr	r3, [r7, #0]
 8106680:	681b      	ldr	r3, [r3, #0]
 8106682:	f003 0308 	and.w	r3, r3, #8
 8106686:	2b00      	cmp	r3, #0
 8106688:	d003      	beq.n	8106692 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 810668a:	68fb      	ldr	r3, [r7, #12]
 810668c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8106690:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8106692:	683b      	ldr	r3, [r7, #0]
 8106694:	681b      	ldr	r3, [r3, #0]
 8106696:	f003 0320 	and.w	r3, r3, #32
 810669a:	2b00      	cmp	r3, #0
 810669c:	d003      	beq.n	81066a6 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 810669e:	68fb      	ldr	r3, [r7, #12]
 81066a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 81066a4:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 81066a6:	68fb      	ldr	r3, [r7, #12]
 81066a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81066ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81066b0:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81066b2:	683b      	ldr	r3, [r7, #0]
 81066b4:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 81066b6:	683b      	ldr	r3, [r7, #0]
 81066b8:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81066ba:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 81066bc:	683b      	ldr	r3, [r7, #0]
 81066be:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 81066c0:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 81066c2:	683b      	ldr	r3, [r7, #0]
 81066c4:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 81066c6:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 81066c8:	683b      	ldr	r3, [r7, #0]
 81066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 81066cc:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81066ce:	68fa      	ldr	r2, [r7, #12]
 81066d0:	4313      	orrs	r3, r2
 81066d2:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	681b      	ldr	r3, [r3, #0]
 81066d8:	68fa      	ldr	r2, [r7, #12]
 81066da:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 81066dc:	687b      	ldr	r3, [r7, #4]
 81066de:	2201      	movs	r2, #1
 81066e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 81066e4:	687b      	ldr	r3, [r7, #4]
 81066e6:	2200      	movs	r2, #0
 81066e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 81066ec:	2300      	movs	r3, #0
}
 81066ee:	4618      	mov	r0, r3
 81066f0:	3714      	adds	r7, #20
 81066f2:	46bd      	mov	sp, r7
 81066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066f8:	4770      	bx	lr
	...

081066fc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 81066fc:	b580      	push	{r7, lr}
 81066fe:	b08a      	sub	sp, #40	@ 0x28
 8106700:	af00      	add	r7, sp, #0
 8106702:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8106704:	687b      	ldr	r3, [r7, #4]
 8106706:	2b00      	cmp	r3, #0
 8106708:	d101      	bne.n	810670e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 810670a:	2301      	movs	r3, #1
 810670c:	e290      	b.n	8106c30 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810670e:	f7fc f8a5 	bl	810285c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8106718:	2b01      	cmp	r3, #1
 810671a:	d113      	bne.n	8106744 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 810671c:	687b      	ldr	r3, [r7, #4]
 810671e:	681b      	ldr	r3, [r3, #0]
 8106720:	4a96      	ldr	r2, [pc, #600]	@ (810697c <HAL_SAI_Init+0x280>)
 8106722:	4293      	cmp	r3, r2
 8106724:	d004      	beq.n	8106730 <HAL_SAI_Init+0x34>
 8106726:	687b      	ldr	r3, [r7, #4]
 8106728:	681b      	ldr	r3, [r3, #0]
 810672a:	4a95      	ldr	r2, [pc, #596]	@ (8106980 <HAL_SAI_Init+0x284>)
 810672c:	4293      	cmp	r3, r2
 810672e:	d107      	bne.n	8106740 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8106734:	2b01      	cmp	r3, #1
 8106736:	d103      	bne.n	8106740 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 810673c:	2b00      	cmp	r3, #0
 810673e:	d001      	beq.n	8106744 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8106740:	2301      	movs	r3, #1
 8106742:	e275      	b.n	8106c30 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	681b      	ldr	r3, [r3, #0]
 8106748:	4a8c      	ldr	r2, [pc, #560]	@ (810697c <HAL_SAI_Init+0x280>)
 810674a:	4293      	cmp	r3, r2
 810674c:	d004      	beq.n	8106758 <HAL_SAI_Init+0x5c>
 810674e:	687b      	ldr	r3, [r7, #4]
 8106750:	681b      	ldr	r3, [r3, #0]
 8106752:	4a8c      	ldr	r2, [pc, #560]	@ (8106984 <HAL_SAI_Init+0x288>)
 8106754:	4293      	cmp	r3, r2
 8106756:	d102      	bne.n	810675e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8106758:	4b8b      	ldr	r3, [pc, #556]	@ (8106988 <HAL_SAI_Init+0x28c>)
 810675a:	61bb      	str	r3, [r7, #24]
 810675c:	e028      	b.n	81067b0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810675e:	687b      	ldr	r3, [r7, #4]
 8106760:	681b      	ldr	r3, [r3, #0]
 8106762:	4a8a      	ldr	r2, [pc, #552]	@ (810698c <HAL_SAI_Init+0x290>)
 8106764:	4293      	cmp	r3, r2
 8106766:	d004      	beq.n	8106772 <HAL_SAI_Init+0x76>
 8106768:	687b      	ldr	r3, [r7, #4]
 810676a:	681b      	ldr	r3, [r3, #0]
 810676c:	4a88      	ldr	r2, [pc, #544]	@ (8106990 <HAL_SAI_Init+0x294>)
 810676e:	4293      	cmp	r3, r2
 8106770:	d102      	bne.n	8106778 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8106772:	4b88      	ldr	r3, [pc, #544]	@ (8106994 <HAL_SAI_Init+0x298>)
 8106774:	61bb      	str	r3, [r7, #24]
 8106776:	e01b      	b.n	81067b0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8106778:	687b      	ldr	r3, [r7, #4]
 810677a:	681b      	ldr	r3, [r3, #0]
 810677c:	4a86      	ldr	r2, [pc, #536]	@ (8106998 <HAL_SAI_Init+0x29c>)
 810677e:	4293      	cmp	r3, r2
 8106780:	d004      	beq.n	810678c <HAL_SAI_Init+0x90>
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	681b      	ldr	r3, [r3, #0]
 8106786:	4a85      	ldr	r2, [pc, #532]	@ (810699c <HAL_SAI_Init+0x2a0>)
 8106788:	4293      	cmp	r3, r2
 810678a:	d102      	bne.n	8106792 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 810678c:	4b84      	ldr	r3, [pc, #528]	@ (81069a0 <HAL_SAI_Init+0x2a4>)
 810678e:	61bb      	str	r3, [r7, #24]
 8106790:	e00e      	b.n	81067b0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	4a7a      	ldr	r2, [pc, #488]	@ (8106980 <HAL_SAI_Init+0x284>)
 8106798:	4293      	cmp	r3, r2
 810679a:	d004      	beq.n	81067a6 <HAL_SAI_Init+0xaa>
 810679c:	687b      	ldr	r3, [r7, #4]
 810679e:	681b      	ldr	r3, [r3, #0]
 81067a0:	4a80      	ldr	r2, [pc, #512]	@ (81069a4 <HAL_SAI_Init+0x2a8>)
 81067a2:	4293      	cmp	r3, r2
 81067a4:	d102      	bne.n	81067ac <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 81067a6:	4b80      	ldr	r3, [pc, #512]	@ (81069a8 <HAL_SAI_Init+0x2ac>)
 81067a8:	61bb      	str	r3, [r7, #24]
 81067aa:	e001      	b.n	81067b0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 81067ac:	2301      	movs	r3, #1
 81067ae:	e23f      	b.n	8106c30 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 81067b6:	b2db      	uxtb	r3, r3
 81067b8:	2b00      	cmp	r3, #0
 81067ba:	d106      	bne.n	81067ca <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	2200      	movs	r2, #0
 81067c0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 81067c4:	6878      	ldr	r0, [r7, #4]
 81067c6:	f7fb fd7d 	bl	81022c4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 81067ca:	6878      	ldr	r0, [r7, #4]
 81067cc:	f000 fa40 	bl	8106c50 <SAI_Disable>
 81067d0:	4603      	mov	r3, r0
 81067d2:	2b00      	cmp	r3, #0
 81067d4:	d001      	beq.n	81067da <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 81067d6:	2301      	movs	r3, #1
 81067d8:	e22a      	b.n	8106c30 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	2202      	movs	r2, #2
 81067de:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	68db      	ldr	r3, [r3, #12]
 81067e6:	2b02      	cmp	r3, #2
 81067e8:	d00c      	beq.n	8106804 <HAL_SAI_Init+0x108>
 81067ea:	2b02      	cmp	r3, #2
 81067ec:	d80d      	bhi.n	810680a <HAL_SAI_Init+0x10e>
 81067ee:	2b00      	cmp	r3, #0
 81067f0:	d002      	beq.n	81067f8 <HAL_SAI_Init+0xfc>
 81067f2:	2b01      	cmp	r3, #1
 81067f4:	d003      	beq.n	81067fe <HAL_SAI_Init+0x102>
 81067f6:	e008      	b.n	810680a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 81067f8:	2300      	movs	r3, #0
 81067fa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81067fc:	e008      	b.n	8106810 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 81067fe:	2310      	movs	r3, #16
 8106800:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8106802:	e005      	b.n	8106810 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8106804:	2320      	movs	r3, #32
 8106806:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8106808:	e002      	b.n	8106810 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 810680a:	2300      	movs	r3, #0
 810680c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 810680e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8106810:	687b      	ldr	r3, [r7, #4]
 8106812:	689b      	ldr	r3, [r3, #8]
 8106814:	2b05      	cmp	r3, #5
 8106816:	d832      	bhi.n	810687e <HAL_SAI_Init+0x182>
 8106818:	a201      	add	r2, pc, #4	@ (adr r2, 8106820 <HAL_SAI_Init+0x124>)
 810681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810681e:	bf00      	nop
 8106820:	08106839 	.word	0x08106839
 8106824:	0810683f 	.word	0x0810683f
 8106828:	08106847 	.word	0x08106847
 810682c:	0810684f 	.word	0x0810684f
 8106830:	0810685f 	.word	0x0810685f
 8106834:	0810686f 	.word	0x0810686f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8106838:	2300      	movs	r3, #0
 810683a:	61fb      	str	r3, [r7, #28]
      break;
 810683c:	e022      	b.n	8106884 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 810683e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8106842:	61fb      	str	r3, [r7, #28]
      break;
 8106844:	e01e      	b.n	8106884 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106846:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810684a:	61fb      	str	r3, [r7, #28]
      break;
 810684c:	e01a      	b.n	8106884 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810684e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8106852:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8106854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106856:	f043 0301 	orr.w	r3, r3, #1
 810685a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 810685c:	e012      	b.n	8106884 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810685e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8106862:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8106864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106866:	f043 0302 	orr.w	r3, r3, #2
 810686a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 810686c:	e00a      	b.n	8106884 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810686e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8106872:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8106874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106876:	f043 0303 	orr.w	r3, r3, #3
 810687a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 810687c:	e002      	b.n	8106884 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 810687e:	2300      	movs	r3, #0
 8106880:	61fb      	str	r3, [r7, #28]
      break;
 8106882:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8106884:	69bb      	ldr	r3, [r7, #24]
 8106886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8106888:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 810688a:	687b      	ldr	r3, [r7, #4]
 810688c:	6a1b      	ldr	r3, [r3, #32]
 810688e:	2b00      	cmp	r3, #0
 8106890:	f000 80c5 	beq.w	8106a1e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8106894:	2300      	movs	r3, #0
 8106896:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	681b      	ldr	r3, [r3, #0]
 810689c:	4a37      	ldr	r2, [pc, #220]	@ (810697c <HAL_SAI_Init+0x280>)
 810689e:	4293      	cmp	r3, r2
 81068a0:	d004      	beq.n	81068ac <HAL_SAI_Init+0x1b0>
 81068a2:	687b      	ldr	r3, [r7, #4]
 81068a4:	681b      	ldr	r3, [r3, #0]
 81068a6:	4a37      	ldr	r2, [pc, #220]	@ (8106984 <HAL_SAI_Init+0x288>)
 81068a8:	4293      	cmp	r3, r2
 81068aa:	d106      	bne.n	81068ba <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 81068ac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 81068b0:	f04f 0100 	mov.w	r1, #0
 81068b4:	f7fe fa36 	bl	8104d24 <HAL_RCCEx_GetPeriphCLKFreq>
 81068b8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	681b      	ldr	r3, [r3, #0]
 81068be:	4a33      	ldr	r2, [pc, #204]	@ (810698c <HAL_SAI_Init+0x290>)
 81068c0:	4293      	cmp	r3, r2
 81068c2:	d004      	beq.n	81068ce <HAL_SAI_Init+0x1d2>
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	681b      	ldr	r3, [r3, #0]
 81068c8:	4a31      	ldr	r2, [pc, #196]	@ (8106990 <HAL_SAI_Init+0x294>)
 81068ca:	4293      	cmp	r3, r2
 81068cc:	d106      	bne.n	81068dc <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 81068ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 81068d2:	f04f 0100 	mov.w	r1, #0
 81068d6:	f7fe fa25 	bl	8104d24 <HAL_RCCEx_GetPeriphCLKFreq>
 81068da:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	681b      	ldr	r3, [r3, #0]
 81068e0:	4a2d      	ldr	r2, [pc, #180]	@ (8106998 <HAL_SAI_Init+0x29c>)
 81068e2:	4293      	cmp	r3, r2
 81068e4:	d004      	beq.n	81068f0 <HAL_SAI_Init+0x1f4>
 81068e6:	687b      	ldr	r3, [r7, #4]
 81068e8:	681b      	ldr	r3, [r3, #0]
 81068ea:	4a2c      	ldr	r2, [pc, #176]	@ (810699c <HAL_SAI_Init+0x2a0>)
 81068ec:	4293      	cmp	r3, r2
 81068ee:	d106      	bne.n	81068fe <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 81068f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 81068f4:	f04f 0100 	mov.w	r1, #0
 81068f8:	f7fe fa14 	bl	8104d24 <HAL_RCCEx_GetPeriphCLKFreq>
 81068fc:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	681b      	ldr	r3, [r3, #0]
 8106902:	4a1f      	ldr	r2, [pc, #124]	@ (8106980 <HAL_SAI_Init+0x284>)
 8106904:	4293      	cmp	r3, r2
 8106906:	d106      	bne.n	8106916 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8106908:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 810690c:	f04f 0100 	mov.w	r1, #0
 8106910:	f7fe fa08 	bl	8104d24 <HAL_RCCEx_GetPeriphCLKFreq>
 8106914:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	681b      	ldr	r3, [r3, #0]
 810691a:	4a22      	ldr	r2, [pc, #136]	@ (81069a4 <HAL_SAI_Init+0x2a8>)
 810691c:	4293      	cmp	r3, r2
 810691e:	d106      	bne.n	810692e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8106920:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8106924:	f04f 0100 	mov.w	r1, #0
 8106928:	f7fe f9fc 	bl	8104d24 <HAL_RCCEx_GetPeriphCLKFreq>
 810692c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 810692e:	687b      	ldr	r3, [r7, #4]
 8106930:	699b      	ldr	r3, [r3, #24]
 8106932:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8106936:	d139      	bne.n	81069ac <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810693c:	2b04      	cmp	r3, #4
 810693e:	d102      	bne.n	8106946 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8106940:	2340      	movs	r3, #64	@ 0x40
 8106942:	60fb      	str	r3, [r7, #12]
 8106944:	e00a      	b.n	810695c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810694a:	2b08      	cmp	r3, #8
 810694c:	d103      	bne.n	8106956 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 810694e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8106952:	60fb      	str	r3, [r7, #12]
 8106954:	e002      	b.n	810695c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810695a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 810695c:	697a      	ldr	r2, [r7, #20]
 810695e:	4613      	mov	r3, r2
 8106960:	009b      	lsls	r3, r3, #2
 8106962:	4413      	add	r3, r2
 8106964:	005b      	lsls	r3, r3, #1
 8106966:	4619      	mov	r1, r3
 8106968:	687b      	ldr	r3, [r7, #4]
 810696a:	6a1b      	ldr	r3, [r3, #32]
 810696c:	68fa      	ldr	r2, [r7, #12]
 810696e:	fb02 f303 	mul.w	r3, r2, r3
 8106972:	fbb1 f3f3 	udiv	r3, r1, r3
 8106976:	613b      	str	r3, [r7, #16]
 8106978:	e030      	b.n	81069dc <HAL_SAI_Init+0x2e0>
 810697a:	bf00      	nop
 810697c:	40015804 	.word	0x40015804
 8106980:	58005404 	.word	0x58005404
 8106984:	40015824 	.word	0x40015824
 8106988:	40015800 	.word	0x40015800
 810698c:	40015c04 	.word	0x40015c04
 8106990:	40015c24 	.word	0x40015c24
 8106994:	40015c00 	.word	0x40015c00
 8106998:	40016004 	.word	0x40016004
 810699c:	40016024 	.word	0x40016024
 81069a0:	40016000 	.word	0x40016000
 81069a4:	58005424 	.word	0x58005424
 81069a8:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 81069ac:	687b      	ldr	r3, [r7, #4]
 81069ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81069b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81069b4:	d101      	bne.n	81069ba <HAL_SAI_Init+0x2be>
 81069b6:	2302      	movs	r3, #2
 81069b8:	e000      	b.n	81069bc <HAL_SAI_Init+0x2c0>
 81069ba:	2301      	movs	r3, #1
 81069bc:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 81069be:	697a      	ldr	r2, [r7, #20]
 81069c0:	4613      	mov	r3, r2
 81069c2:	009b      	lsls	r3, r3, #2
 81069c4:	4413      	add	r3, r2
 81069c6:	005b      	lsls	r3, r3, #1
 81069c8:	4619      	mov	r1, r3
 81069ca:	687b      	ldr	r3, [r7, #4]
 81069cc:	6a1b      	ldr	r3, [r3, #32]
 81069ce:	68ba      	ldr	r2, [r7, #8]
 81069d0:	fb02 f303 	mul.w	r3, r2, r3
 81069d4:	021b      	lsls	r3, r3, #8
 81069d6:	fbb1 f3f3 	udiv	r3, r1, r3
 81069da:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 81069dc:	693b      	ldr	r3, [r7, #16]
 81069de:	4a96      	ldr	r2, [pc, #600]	@ (8106c38 <HAL_SAI_Init+0x53c>)
 81069e0:	fba2 2303 	umull	r2, r3, r2, r3
 81069e4:	08da      	lsrs	r2, r3, #3
 81069e6:	687b      	ldr	r3, [r7, #4]
 81069e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 81069ea:	6939      	ldr	r1, [r7, #16]
 81069ec:	4b92      	ldr	r3, [pc, #584]	@ (8106c38 <HAL_SAI_Init+0x53c>)
 81069ee:	fba3 2301 	umull	r2, r3, r3, r1
 81069f2:	08da      	lsrs	r2, r3, #3
 81069f4:	4613      	mov	r3, r2
 81069f6:	009b      	lsls	r3, r3, #2
 81069f8:	4413      	add	r3, r2
 81069fa:	005b      	lsls	r3, r3, #1
 81069fc:	1aca      	subs	r2, r1, r3
 81069fe:	2a08      	cmp	r2, #8
 8106a00:	d904      	bls.n	8106a0c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8106a02:	687b      	ldr	r3, [r7, #4]
 8106a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106a06:	1c5a      	adds	r2, r3, #1
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106a10:	2b04      	cmp	r3, #4
 8106a12:	d104      	bne.n	8106a1e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8106a14:	687b      	ldr	r3, [r7, #4]
 8106a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106a18:	085a      	lsrs	r2, r3, #1
 8106a1a:	687b      	ldr	r3, [r7, #4]
 8106a1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8106a1e:	687b      	ldr	r3, [r7, #4]
 8106a20:	685b      	ldr	r3, [r3, #4]
 8106a22:	2b00      	cmp	r3, #0
 8106a24:	d003      	beq.n	8106a2e <HAL_SAI_Init+0x332>
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	685b      	ldr	r3, [r3, #4]
 8106a2a:	2b02      	cmp	r3, #2
 8106a2c:	d109      	bne.n	8106a42 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8106a2e:	687b      	ldr	r3, [r7, #4]
 8106a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106a32:	2b01      	cmp	r3, #1
 8106a34:	d101      	bne.n	8106a3a <HAL_SAI_Init+0x33e>
 8106a36:	2300      	movs	r3, #0
 8106a38:	e001      	b.n	8106a3e <HAL_SAI_Init+0x342>
 8106a3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8106a3e:	623b      	str	r3, [r7, #32]
 8106a40:	e008      	b.n	8106a54 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8106a42:	687b      	ldr	r3, [r7, #4]
 8106a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106a46:	2b01      	cmp	r3, #1
 8106a48:	d102      	bne.n	8106a50 <HAL_SAI_Init+0x354>
 8106a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8106a4e:	e000      	b.n	8106a52 <HAL_SAI_Init+0x356>
 8106a50:	2300      	movs	r3, #0
 8106a52:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8106a54:	f7fb ff02 	bl	810285c <HAL_GetREVID>
 8106a58:	4603      	mov	r3, r0
 8106a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106a5e:	d331      	bcc.n	8106ac4 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106a60:	687b      	ldr	r3, [r7, #4]
 8106a62:	681b      	ldr	r3, [r3, #0]
 8106a64:	6819      	ldr	r1, [r3, #0]
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	681a      	ldr	r2, [r3, #0]
 8106a6a:	4b74      	ldr	r3, [pc, #464]	@ (8106c3c <HAL_SAI_Init+0x540>)
 8106a6c:	400b      	ands	r3, r1
 8106a6e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	681b      	ldr	r3, [r3, #0]
 8106a74:	6819      	ldr	r1, [r3, #0]
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	685a      	ldr	r2, [r3, #4]
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106a7e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106a84:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106a86:	687b      	ldr	r3, [r7, #4]
 8106a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106a8a:	431a      	orrs	r2, r3
 8106a8c:	6a3b      	ldr	r3, [r7, #32]
 8106a8e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106a90:	69fb      	ldr	r3, [r7, #28]
 8106a92:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106a94:	687b      	ldr	r3, [r7, #4]
 8106a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106a98:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	695b      	ldr	r3, [r3, #20]
 8106a9e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106aa0:	687b      	ldr	r3, [r7, #4]
 8106aa2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106aa4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106aa6:	687b      	ldr	r3, [r7, #4]
 8106aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106aaa:	051b      	lsls	r3, r3, #20
 8106aac:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106aae:	687b      	ldr	r3, [r7, #4]
 8106ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106ab2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106ab4:	687b      	ldr	r3, [r7, #4]
 8106ab6:	691b      	ldr	r3, [r3, #16]
 8106ab8:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	681b      	ldr	r3, [r3, #0]
 8106abe:	430a      	orrs	r2, r1
 8106ac0:	601a      	str	r2, [r3, #0]
 8106ac2:	e02d      	b.n	8106b20 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106ac4:	687b      	ldr	r3, [r7, #4]
 8106ac6:	681b      	ldr	r3, [r3, #0]
 8106ac8:	6819      	ldr	r1, [r3, #0]
 8106aca:	687b      	ldr	r3, [r7, #4]
 8106acc:	681a      	ldr	r2, [r3, #0]
 8106ace:	4b5c      	ldr	r3, [pc, #368]	@ (8106c40 <HAL_SAI_Init+0x544>)
 8106ad0:	400b      	ands	r3, r1
 8106ad2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106ad4:	687b      	ldr	r3, [r7, #4]
 8106ad6:	681b      	ldr	r3, [r3, #0]
 8106ad8:	6819      	ldr	r1, [r3, #0]
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	685a      	ldr	r2, [r3, #4]
 8106ade:	687b      	ldr	r3, [r7, #4]
 8106ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106ae2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106ae8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106aee:	431a      	orrs	r2, r3
 8106af0:	6a3b      	ldr	r3, [r7, #32]
 8106af2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106af4:	69fb      	ldr	r3, [r7, #28]
 8106af6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106afc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	695b      	ldr	r3, [r3, #20]
 8106b02:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106b04:	687b      	ldr	r3, [r7, #4]
 8106b06:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106b08:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106b0a:	687b      	ldr	r3, [r7, #4]
 8106b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106b0e:	051b      	lsls	r3, r3, #20
 8106b10:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8106b12:	687b      	ldr	r3, [r7, #4]
 8106b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106b16:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106b18:	687b      	ldr	r3, [r7, #4]
 8106b1a:	681b      	ldr	r3, [r3, #0]
 8106b1c:	430a      	orrs	r2, r1
 8106b1e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8106b20:	687b      	ldr	r3, [r7, #4]
 8106b22:	681b      	ldr	r3, [r3, #0]
 8106b24:	685b      	ldr	r3, [r3, #4]
 8106b26:	687a      	ldr	r2, [r7, #4]
 8106b28:	6812      	ldr	r2, [r2, #0]
 8106b2a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8106b2e:	f023 030f 	bic.w	r3, r3, #15
 8106b32:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	681b      	ldr	r3, [r3, #0]
 8106b38:	6859      	ldr	r1, [r3, #4]
 8106b3a:	687b      	ldr	r3, [r7, #4]
 8106b3c:	69da      	ldr	r2, [r3, #28]
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106b42:	431a      	orrs	r2, r3
 8106b44:	687b      	ldr	r3, [r7, #4]
 8106b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106b48:	431a      	orrs	r2, r3
 8106b4a:	687b      	ldr	r3, [r7, #4]
 8106b4c:	681b      	ldr	r3, [r3, #0]
 8106b4e:	430a      	orrs	r2, r1
 8106b50:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8106b52:	687b      	ldr	r3, [r7, #4]
 8106b54:	681b      	ldr	r3, [r3, #0]
 8106b56:	6899      	ldr	r1, [r3, #8]
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	681a      	ldr	r2, [r3, #0]
 8106b5c:	4b39      	ldr	r3, [pc, #228]	@ (8106c44 <HAL_SAI_Init+0x548>)
 8106b5e:	400b      	ands	r3, r1
 8106b60:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106b62:	687b      	ldr	r3, [r7, #4]
 8106b64:	681b      	ldr	r3, [r3, #0]
 8106b66:	6899      	ldr	r1, [r3, #8]
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106b6c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8106b6e:	687b      	ldr	r3, [r7, #4]
 8106b70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106b72:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8106b74:	687b      	ldr	r3, [r7, #4]
 8106b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8106b78:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8106b7a:	687b      	ldr	r3, [r7, #4]
 8106b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8106b7e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106b84:	3b01      	subs	r3, #1
 8106b86:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8106b88:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106b8a:	687b      	ldr	r3, [r7, #4]
 8106b8c:	681b      	ldr	r3, [r3, #0]
 8106b8e:	430a      	orrs	r2, r1
 8106b90:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8106b92:	687b      	ldr	r3, [r7, #4]
 8106b94:	681b      	ldr	r3, [r3, #0]
 8106b96:	68d9      	ldr	r1, [r3, #12]
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	681a      	ldr	r2, [r3, #0]
 8106b9c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8106ba0:	400b      	ands	r3, r1
 8106ba2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	681b      	ldr	r3, [r3, #0]
 8106ba8:	68d9      	ldr	r1, [r3, #12]
 8106baa:	687b      	ldr	r3, [r7, #4]
 8106bac:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106bb2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106bb4:	687b      	ldr	r3, [r7, #4]
 8106bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106bb8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106bba:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106bc0:	3b01      	subs	r3, #1
 8106bc2:	021b      	lsls	r3, r3, #8
 8106bc4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106bc6:	687b      	ldr	r3, [r7, #4]
 8106bc8:	681b      	ldr	r3, [r3, #0]
 8106bca:	430a      	orrs	r2, r1
 8106bcc:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8106bce:	687b      	ldr	r3, [r7, #4]
 8106bd0:	681b      	ldr	r3, [r3, #0]
 8106bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8106c48 <HAL_SAI_Init+0x54c>)
 8106bd4:	4293      	cmp	r3, r2
 8106bd6:	d004      	beq.n	8106be2 <HAL_SAI_Init+0x4e6>
 8106bd8:	687b      	ldr	r3, [r7, #4]
 8106bda:	681b      	ldr	r3, [r3, #0]
 8106bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8106c4c <HAL_SAI_Init+0x550>)
 8106bde:	4293      	cmp	r3, r2
 8106be0:	d119      	bne.n	8106c16 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8106be2:	69bb      	ldr	r3, [r7, #24]
 8106be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106be6:	f023 0201 	bic.w	r2, r3, #1
 8106bea:	69bb      	ldr	r3, [r7, #24]
 8106bec:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8106bf4:	2b01      	cmp	r3, #1
 8106bf6:	d10e      	bne.n	8106c16 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8106bfc:	687b      	ldr	r3, [r7, #4]
 8106bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106c00:	3b01      	subs	r3, #1
 8106c02:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106c04:	431a      	orrs	r2, r3
 8106c06:	69bb      	ldr	r3, [r7, #24]
 8106c08:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8106c0a:	69bb      	ldr	r3, [r7, #24]
 8106c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106c0e:	f043 0201 	orr.w	r2, r3, #1
 8106c12:	69bb      	ldr	r3, [r7, #24]
 8106c14:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	2200      	movs	r2, #0
 8106c1a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8106c1e:	687b      	ldr	r3, [r7, #4]
 8106c20:	2201      	movs	r2, #1
 8106c22:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8106c26:	687b      	ldr	r3, [r7, #4]
 8106c28:	2200      	movs	r2, #0
 8106c2a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8106c2e:	2300      	movs	r3, #0
}
 8106c30:	4618      	mov	r0, r3
 8106c32:	3728      	adds	r7, #40	@ 0x28
 8106c34:	46bd      	mov	sp, r7
 8106c36:	bd80      	pop	{r7, pc}
 8106c38:	cccccccd 	.word	0xcccccccd
 8106c3c:	f005c010 	.word	0xf005c010
 8106c40:	f805c010 	.word	0xf805c010
 8106c44:	fff88000 	.word	0xfff88000
 8106c48:	40015804 	.word	0x40015804
 8106c4c:	58005404 	.word	0x58005404

08106c50 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8106c50:	b480      	push	{r7}
 8106c52:	b085      	sub	sp, #20
 8106c54:	af00      	add	r7, sp, #0
 8106c56:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8106c58:	4b18      	ldr	r3, [pc, #96]	@ (8106cbc <SAI_Disable+0x6c>)
 8106c5a:	681b      	ldr	r3, [r3, #0]
 8106c5c:	4a18      	ldr	r2, [pc, #96]	@ (8106cc0 <SAI_Disable+0x70>)
 8106c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8106c62:	0b1b      	lsrs	r3, r3, #12
 8106c64:	009b      	lsls	r3, r3, #2
 8106c66:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8106c68:	2300      	movs	r3, #0
 8106c6a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	681b      	ldr	r3, [r3, #0]
 8106c70:	681a      	ldr	r2, [r3, #0]
 8106c72:	687b      	ldr	r3, [r7, #4]
 8106c74:	681b      	ldr	r3, [r3, #0]
 8106c76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8106c7a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8106c7c:	68fb      	ldr	r3, [r7, #12]
 8106c7e:	2b00      	cmp	r3, #0
 8106c80:	d10a      	bne.n	8106c98 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106c88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8106c92:	2303      	movs	r3, #3
 8106c94:	72fb      	strb	r3, [r7, #11]
      break;
 8106c96:	e009      	b.n	8106cac <SAI_Disable+0x5c>
    }
    count--;
 8106c98:	68fb      	ldr	r3, [r7, #12]
 8106c9a:	3b01      	subs	r3, #1
 8106c9c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8106c9e:	687b      	ldr	r3, [r7, #4]
 8106ca0:	681b      	ldr	r3, [r3, #0]
 8106ca2:	681b      	ldr	r3, [r3, #0]
 8106ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106ca8:	2b00      	cmp	r3, #0
 8106caa:	d1e7      	bne.n	8106c7c <SAI_Disable+0x2c>

  return status;
 8106cac:	7afb      	ldrb	r3, [r7, #11]
}
 8106cae:	4618      	mov	r0, r3
 8106cb0:	3714      	adds	r7, #20
 8106cb2:	46bd      	mov	sp, r7
 8106cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cb8:	4770      	bx	lr
 8106cba:	bf00      	nop
 8106cbc:	10000000 	.word	0x10000000
 8106cc0:	95cbec1b 	.word	0x95cbec1b

08106cc4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8106cc4:	b580      	push	{r7, lr}
 8106cc6:	b084      	sub	sp, #16
 8106cc8:	af00      	add	r7, sp, #0
 8106cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	2b00      	cmp	r3, #0
 8106cd0:	d101      	bne.n	8106cd6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8106cd2:	2301      	movs	r3, #1
 8106cd4:	e05e      	b.n	8106d94 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8106cdc:	b2db      	uxtb	r3, r3
 8106cde:	2b00      	cmp	r3, #0
 8106ce0:	d106      	bne.n	8106cf0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8106ce2:	687b      	ldr	r3, [r7, #4]
 8106ce4:	2200      	movs	r2, #0
 8106ce6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8106cea:	6878      	ldr	r0, [r7, #4]
 8106cec:	f7fa ff6c 	bl	8101bc8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	2202      	movs	r2, #2
 8106cf4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	681b      	ldr	r3, [r3, #0]
 8106cfc:	681a      	ldr	r2, [r3, #0]
 8106cfe:	687b      	ldr	r3, [r7, #4]
 8106d00:	681b      	ldr	r3, [r3, #0]
 8106d02:	f022 0203 	bic.w	r2, r2, #3
 8106d06:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	681b      	ldr	r3, [r3, #0]
 8106d0c:	681b      	ldr	r3, [r3, #0]
 8106d0e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8106d10:	68fa      	ldr	r2, [r7, #12]
 8106d12:	4b22      	ldr	r3, [pc, #136]	@ (8106d9c <HAL_SPDIFRX_Init+0xd8>)
 8106d14:	4013      	ands	r3, r2
 8106d16:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8106d18:	687b      	ldr	r3, [r7, #4]
 8106d1a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8106d20:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8106d22:	687b      	ldr	r3, [r7, #4]
 8106d24:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8106d26:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8106d28:	687b      	ldr	r3, [r7, #4]
 8106d2a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8106d2c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8106d2e:	687b      	ldr	r3, [r7, #4]
 8106d30:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8106d32:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8106d34:	687b      	ldr	r3, [r7, #4]
 8106d36:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8106d38:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8106d3a:	687b      	ldr	r3, [r7, #4]
 8106d3c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8106d3e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8106d44:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8106d46:	687b      	ldr	r3, [r7, #4]
 8106d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8106d4a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8106d4c:	687b      	ldr	r3, [r7, #4]
 8106d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8106d50:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8106d52:	68fa      	ldr	r2, [r7, #12]
 8106d54:	4313      	orrs	r3, r2
 8106d56:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8106d5e:	2b01      	cmp	r3, #1
 8106d60:	d103      	bne.n	8106d6a <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8106d62:	68fb      	ldr	r3, [r7, #12]
 8106d64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106d68:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8106d6a:	687b      	ldr	r3, [r7, #4]
 8106d6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8106d70:	2b01      	cmp	r3, #1
 8106d72:	d103      	bne.n	8106d7c <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8106d74:	68fb      	ldr	r3, [r7, #12]
 8106d76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8106d7a:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	681b      	ldr	r3, [r3, #0]
 8106d80:	68fa      	ldr	r2, [r7, #12]
 8106d82:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	2200      	movs	r2, #0
 8106d88:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	2201      	movs	r2, #1
 8106d8e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8106d92:	2300      	movs	r3, #0
}
 8106d94:	4618      	mov	r0, r3
 8106d96:	3710      	adds	r7, #16
 8106d98:	46bd      	mov	sp, r7
 8106d9a:	bd80      	pop	{r7, pc}
 8106d9c:	ffc88407 	.word	0xffc88407

08106da0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8106da0:	b580      	push	{r7, lr}
 8106da2:	b084      	sub	sp, #16
 8106da4:	af00      	add	r7, sp, #0
 8106da6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	2b00      	cmp	r3, #0
 8106dac:	d101      	bne.n	8106db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8106dae:	2301      	movs	r3, #1
 8106db0:	e10f      	b.n	8106fd2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	2200      	movs	r2, #0
 8106db6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8106db8:	687b      	ldr	r3, [r7, #4]
 8106dba:	681b      	ldr	r3, [r3, #0]
 8106dbc:	4a87      	ldr	r2, [pc, #540]	@ (8106fdc <HAL_SPI_Init+0x23c>)
 8106dbe:	4293      	cmp	r3, r2
 8106dc0:	d00f      	beq.n	8106de2 <HAL_SPI_Init+0x42>
 8106dc2:	687b      	ldr	r3, [r7, #4]
 8106dc4:	681b      	ldr	r3, [r3, #0]
 8106dc6:	4a86      	ldr	r2, [pc, #536]	@ (8106fe0 <HAL_SPI_Init+0x240>)
 8106dc8:	4293      	cmp	r3, r2
 8106dca:	d00a      	beq.n	8106de2 <HAL_SPI_Init+0x42>
 8106dcc:	687b      	ldr	r3, [r7, #4]
 8106dce:	681b      	ldr	r3, [r3, #0]
 8106dd0:	4a84      	ldr	r2, [pc, #528]	@ (8106fe4 <HAL_SPI_Init+0x244>)
 8106dd2:	4293      	cmp	r3, r2
 8106dd4:	d005      	beq.n	8106de2 <HAL_SPI_Init+0x42>
 8106dd6:	687b      	ldr	r3, [r7, #4]
 8106dd8:	68db      	ldr	r3, [r3, #12]
 8106dda:	2b0f      	cmp	r3, #15
 8106ddc:	d901      	bls.n	8106de2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8106dde:	2301      	movs	r3, #1
 8106de0:	e0f7      	b.n	8106fd2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8106de2:	6878      	ldr	r0, [r7, #4]
 8106de4:	f000 fef2 	bl	8107bcc <SPI_GetPacketSize>
 8106de8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106dea:	687b      	ldr	r3, [r7, #4]
 8106dec:	681b      	ldr	r3, [r3, #0]
 8106dee:	4a7b      	ldr	r2, [pc, #492]	@ (8106fdc <HAL_SPI_Init+0x23c>)
 8106df0:	4293      	cmp	r3, r2
 8106df2:	d00c      	beq.n	8106e0e <HAL_SPI_Init+0x6e>
 8106df4:	687b      	ldr	r3, [r7, #4]
 8106df6:	681b      	ldr	r3, [r3, #0]
 8106df8:	4a79      	ldr	r2, [pc, #484]	@ (8106fe0 <HAL_SPI_Init+0x240>)
 8106dfa:	4293      	cmp	r3, r2
 8106dfc:	d007      	beq.n	8106e0e <HAL_SPI_Init+0x6e>
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	681b      	ldr	r3, [r3, #0]
 8106e02:	4a78      	ldr	r2, [pc, #480]	@ (8106fe4 <HAL_SPI_Init+0x244>)
 8106e04:	4293      	cmp	r3, r2
 8106e06:	d002      	beq.n	8106e0e <HAL_SPI_Init+0x6e>
 8106e08:	68fb      	ldr	r3, [r7, #12]
 8106e0a:	2b08      	cmp	r3, #8
 8106e0c:	d811      	bhi.n	8106e32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106e0e:	687b      	ldr	r3, [r7, #4]
 8106e10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106e12:	4a72      	ldr	r2, [pc, #456]	@ (8106fdc <HAL_SPI_Init+0x23c>)
 8106e14:	4293      	cmp	r3, r2
 8106e16:	d009      	beq.n	8106e2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	681b      	ldr	r3, [r3, #0]
 8106e1c:	4a70      	ldr	r2, [pc, #448]	@ (8106fe0 <HAL_SPI_Init+0x240>)
 8106e1e:	4293      	cmp	r3, r2
 8106e20:	d004      	beq.n	8106e2c <HAL_SPI_Init+0x8c>
 8106e22:	687b      	ldr	r3, [r7, #4]
 8106e24:	681b      	ldr	r3, [r3, #0]
 8106e26:	4a6f      	ldr	r2, [pc, #444]	@ (8106fe4 <HAL_SPI_Init+0x244>)
 8106e28:	4293      	cmp	r3, r2
 8106e2a:	d104      	bne.n	8106e36 <HAL_SPI_Init+0x96>
 8106e2c:	68fb      	ldr	r3, [r7, #12]
 8106e2e:	2b10      	cmp	r3, #16
 8106e30:	d901      	bls.n	8106e36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8106e32:	2301      	movs	r3, #1
 8106e34:	e0cd      	b.n	8106fd2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8106e3c:	b2db      	uxtb	r3, r3
 8106e3e:	2b00      	cmp	r3, #0
 8106e40:	d106      	bne.n	8106e50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8106e42:	687b      	ldr	r3, [r7, #4]
 8106e44:	2200      	movs	r2, #0
 8106e46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8106e4a:	6878      	ldr	r0, [r7, #4]
 8106e4c:	f7fa ff22 	bl	8101c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8106e50:	687b      	ldr	r3, [r7, #4]
 8106e52:	2202      	movs	r2, #2
 8106e54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	681b      	ldr	r3, [r3, #0]
 8106e5c:	681a      	ldr	r2, [r3, #0]
 8106e5e:	687b      	ldr	r3, [r7, #4]
 8106e60:	681b      	ldr	r3, [r3, #0]
 8106e62:	f022 0201 	bic.w	r2, r2, #1
 8106e66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8106e68:	687b      	ldr	r3, [r7, #4]
 8106e6a:	681b      	ldr	r3, [r3, #0]
 8106e6c:	689b      	ldr	r3, [r3, #8]
 8106e6e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8106e72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106e74:	687b      	ldr	r3, [r7, #4]
 8106e76:	699b      	ldr	r3, [r3, #24]
 8106e78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106e7c:	d119      	bne.n	8106eb2 <HAL_SPI_Init+0x112>
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	685b      	ldr	r3, [r3, #4]
 8106e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106e86:	d103      	bne.n	8106e90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106e88:	687b      	ldr	r3, [r7, #4]
 8106e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106e8c:	2b00      	cmp	r3, #0
 8106e8e:	d008      	beq.n	8106ea2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106e90:	687b      	ldr	r3, [r7, #4]
 8106e92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106e94:	2b00      	cmp	r3, #0
 8106e96:	d10c      	bne.n	8106eb2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106ea0:	d107      	bne.n	8106eb2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8106ea2:	687b      	ldr	r3, [r7, #4]
 8106ea4:	681b      	ldr	r3, [r3, #0]
 8106ea6:	681a      	ldr	r2, [r3, #0]
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	681b      	ldr	r3, [r3, #0]
 8106eac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8106eb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8106eb2:	687b      	ldr	r3, [r7, #4]
 8106eb4:	685b      	ldr	r3, [r3, #4]
 8106eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8106eba:	2b00      	cmp	r3, #0
 8106ebc:	d00f      	beq.n	8106ede <HAL_SPI_Init+0x13e>
 8106ebe:	687b      	ldr	r3, [r7, #4]
 8106ec0:	68db      	ldr	r3, [r3, #12]
 8106ec2:	2b06      	cmp	r3, #6
 8106ec4:	d90b      	bls.n	8106ede <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8106ec6:	687b      	ldr	r3, [r7, #4]
 8106ec8:	681b      	ldr	r3, [r3, #0]
 8106eca:	681b      	ldr	r3, [r3, #0]
 8106ecc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8106ed4:	687b      	ldr	r3, [r7, #4]
 8106ed6:	681b      	ldr	r3, [r3, #0]
 8106ed8:	430a      	orrs	r2, r1
 8106eda:	601a      	str	r2, [r3, #0]
 8106edc:	e007      	b.n	8106eee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	681b      	ldr	r3, [r3, #0]
 8106ee2:	681a      	ldr	r2, [r3, #0]
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	681b      	ldr	r3, [r3, #0]
 8106ee8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106eec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8106eee:	687b      	ldr	r3, [r7, #4]
 8106ef0:	69da      	ldr	r2, [r3, #28]
 8106ef2:	687b      	ldr	r3, [r7, #4]
 8106ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106ef6:	431a      	orrs	r2, r3
 8106ef8:	68bb      	ldr	r3, [r7, #8]
 8106efa:	431a      	orrs	r2, r3
 8106efc:	687b      	ldr	r3, [r7, #4]
 8106efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106f00:	ea42 0103 	orr.w	r1, r2, r3
 8106f04:	687b      	ldr	r3, [r7, #4]
 8106f06:	68da      	ldr	r2, [r3, #12]
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	681b      	ldr	r3, [r3, #0]
 8106f0c:	430a      	orrs	r2, r1
 8106f0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106f14:	687b      	ldr	r3, [r7, #4]
 8106f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106f18:	431a      	orrs	r2, r3
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106f1e:	431a      	orrs	r2, r3
 8106f20:	687b      	ldr	r3, [r7, #4]
 8106f22:	699b      	ldr	r3, [r3, #24]
 8106f24:	431a      	orrs	r2, r3
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	691b      	ldr	r3, [r3, #16]
 8106f2a:	431a      	orrs	r2, r3
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	695b      	ldr	r3, [r3, #20]
 8106f30:	431a      	orrs	r2, r3
 8106f32:	687b      	ldr	r3, [r7, #4]
 8106f34:	6a1b      	ldr	r3, [r3, #32]
 8106f36:	431a      	orrs	r2, r3
 8106f38:	687b      	ldr	r3, [r7, #4]
 8106f3a:	685b      	ldr	r3, [r3, #4]
 8106f3c:	431a      	orrs	r2, r3
 8106f3e:	687b      	ldr	r3, [r7, #4]
 8106f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106f42:	431a      	orrs	r2, r3
 8106f44:	687b      	ldr	r3, [r7, #4]
 8106f46:	689b      	ldr	r3, [r3, #8]
 8106f48:	431a      	orrs	r2, r3
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106f4e:	ea42 0103 	orr.w	r1, r2, r3
 8106f52:	687b      	ldr	r3, [r7, #4]
 8106f54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8106f56:	687b      	ldr	r3, [r7, #4]
 8106f58:	681b      	ldr	r3, [r3, #0]
 8106f5a:	430a      	orrs	r2, r1
 8106f5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8106f5e:	687b      	ldr	r3, [r7, #4]
 8106f60:	685b      	ldr	r3, [r3, #4]
 8106f62:	2b00      	cmp	r3, #0
 8106f64:	d113      	bne.n	8106f8e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8106f66:	687b      	ldr	r3, [r7, #4]
 8106f68:	681b      	ldr	r3, [r3, #0]
 8106f6a:	689b      	ldr	r3, [r3, #8]
 8106f6c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8106f70:	687b      	ldr	r3, [r7, #4]
 8106f72:	681b      	ldr	r3, [r3, #0]
 8106f74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8106f78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	681b      	ldr	r3, [r3, #0]
 8106f7e:	689b      	ldr	r3, [r3, #8]
 8106f80:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	681b      	ldr	r3, [r3, #0]
 8106f88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8106f8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8106f8e:	687b      	ldr	r3, [r7, #4]
 8106f90:	681b      	ldr	r3, [r3, #0]
 8106f92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	681b      	ldr	r3, [r3, #0]
 8106f98:	f022 0201 	bic.w	r2, r2, #1
 8106f9c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8106f9e:	687b      	ldr	r3, [r7, #4]
 8106fa0:	685b      	ldr	r3, [r3, #4]
 8106fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8106fa6:	2b00      	cmp	r3, #0
 8106fa8:	d00a      	beq.n	8106fc0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8106faa:	687b      	ldr	r3, [r7, #4]
 8106fac:	681b      	ldr	r3, [r3, #0]
 8106fae:	68db      	ldr	r3, [r3, #12]
 8106fb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8106fb8:	687b      	ldr	r3, [r7, #4]
 8106fba:	681b      	ldr	r3, [r3, #0]
 8106fbc:	430a      	orrs	r2, r1
 8106fbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8106fc0:	687b      	ldr	r3, [r7, #4]
 8106fc2:	2200      	movs	r2, #0
 8106fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8106fc8:	687b      	ldr	r3, [r7, #4]
 8106fca:	2201      	movs	r2, #1
 8106fcc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8106fd0:	2300      	movs	r3, #0
}
 8106fd2:	4618      	mov	r0, r3
 8106fd4:	3710      	adds	r7, #16
 8106fd6:	46bd      	mov	sp, r7
 8106fd8:	bd80      	pop	{r7, pc}
 8106fda:	bf00      	nop
 8106fdc:	40013000 	.word	0x40013000
 8106fe0:	40003800 	.word	0x40003800
 8106fe4:	40003c00 	.word	0x40003c00

08106fe8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106fe8:	b580      	push	{r7, lr}
 8106fea:	b088      	sub	sp, #32
 8106fec:	af02      	add	r7, sp, #8
 8106fee:	60f8      	str	r0, [r7, #12]
 8106ff0:	60b9      	str	r1, [r7, #8]
 8106ff2:	603b      	str	r3, [r7, #0]
 8106ff4:	4613      	mov	r3, r2
 8106ff6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8106ff8:	68fb      	ldr	r3, [r7, #12]
 8106ffa:	681b      	ldr	r3, [r3, #0]
 8106ffc:	3320      	adds	r3, #32
 8106ffe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8107000:	f7fb fbfc 	bl	81027fc <HAL_GetTick>
 8107004:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8107006:	68fb      	ldr	r3, [r7, #12]
 8107008:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810700c:	b2db      	uxtb	r3, r3
 810700e:	2b01      	cmp	r3, #1
 8107010:	d001      	beq.n	8107016 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8107012:	2302      	movs	r3, #2
 8107014:	e1cf      	b.n	81073b6 <HAL_SPI_Transmit+0x3ce>
  }

  if ((pData == NULL) || (Size == 0UL))
 8107016:	68bb      	ldr	r3, [r7, #8]
 8107018:	2b00      	cmp	r3, #0
 810701a:	d002      	beq.n	8107022 <HAL_SPI_Transmit+0x3a>
 810701c:	88fb      	ldrh	r3, [r7, #6]
 810701e:	2b00      	cmp	r3, #0
 8107020:	d101      	bne.n	8107026 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8107022:	2301      	movs	r3, #1
 8107024:	e1c7      	b.n	81073b6 <HAL_SPI_Transmit+0x3ce>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8107026:	68fb      	ldr	r3, [r7, #12]
 8107028:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 810702c:	2b01      	cmp	r3, #1
 810702e:	d101      	bne.n	8107034 <HAL_SPI_Transmit+0x4c>
 8107030:	2302      	movs	r3, #2
 8107032:	e1c0      	b.n	81073b6 <HAL_SPI_Transmit+0x3ce>
 8107034:	68fb      	ldr	r3, [r7, #12]
 8107036:	2201      	movs	r2, #1
 8107038:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 810703c:	68fb      	ldr	r3, [r7, #12]
 810703e:	2203      	movs	r2, #3
 8107040:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8107044:	68fb      	ldr	r3, [r7, #12]
 8107046:	2200      	movs	r2, #0
 8107048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 810704c:	68fb      	ldr	r3, [r7, #12]
 810704e:	68ba      	ldr	r2, [r7, #8]
 8107050:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8107052:	68fb      	ldr	r3, [r7, #12]
 8107054:	88fa      	ldrh	r2, [r7, #6]
 8107056:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 810705a:	68fb      	ldr	r3, [r7, #12]
 810705c:	88fa      	ldrh	r2, [r7, #6]
 810705e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8107062:	68fb      	ldr	r3, [r7, #12]
 8107064:	2200      	movs	r2, #0
 8107066:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8107068:	68fb      	ldr	r3, [r7, #12]
 810706a:	2200      	movs	r2, #0
 810706c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8107070:	68fb      	ldr	r3, [r7, #12]
 8107072:	2200      	movs	r2, #0
 8107074:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8107078:	68fb      	ldr	r3, [r7, #12]
 810707a:	2200      	movs	r2, #0
 810707c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 810707e:	68fb      	ldr	r3, [r7, #12]
 8107080:	2200      	movs	r2, #0
 8107082:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8107084:	68fb      	ldr	r3, [r7, #12]
 8107086:	689b      	ldr	r3, [r3, #8]
 8107088:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 810708c:	d108      	bne.n	81070a0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 810708e:	68fb      	ldr	r3, [r7, #12]
 8107090:	681b      	ldr	r3, [r3, #0]
 8107092:	681a      	ldr	r2, [r3, #0]
 8107094:	68fb      	ldr	r3, [r7, #12]
 8107096:	681b      	ldr	r3, [r3, #0]
 8107098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810709c:	601a      	str	r2, [r3, #0]
 810709e:	e009      	b.n	81070b4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 81070a0:	68fb      	ldr	r3, [r7, #12]
 81070a2:	681b      	ldr	r3, [r3, #0]
 81070a4:	68db      	ldr	r3, [r3, #12]
 81070a6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 81070aa:	68fb      	ldr	r3, [r7, #12]
 81070ac:	681b      	ldr	r3, [r3, #0]
 81070ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 81070b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81070b4:	68fb      	ldr	r3, [r7, #12]
 81070b6:	681b      	ldr	r3, [r3, #0]
 81070b8:	685b      	ldr	r3, [r3, #4]
 81070ba:	0c1b      	lsrs	r3, r3, #16
 81070bc:	041b      	lsls	r3, r3, #16
 81070be:	88f9      	ldrh	r1, [r7, #6]
 81070c0:	68fa      	ldr	r2, [r7, #12]
 81070c2:	6812      	ldr	r2, [r2, #0]
 81070c4:	430b      	orrs	r3, r1
 81070c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 81070c8:	68fb      	ldr	r3, [r7, #12]
 81070ca:	681b      	ldr	r3, [r3, #0]
 81070cc:	681a      	ldr	r2, [r3, #0]
 81070ce:	68fb      	ldr	r3, [r7, #12]
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	f042 0201 	orr.w	r2, r2, #1
 81070d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81070d8:	68fb      	ldr	r3, [r7, #12]
 81070da:	685b      	ldr	r3, [r3, #4]
 81070dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81070e0:	d107      	bne.n	81070f2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81070e2:	68fb      	ldr	r3, [r7, #12]
 81070e4:	681b      	ldr	r3, [r3, #0]
 81070e6:	681a      	ldr	r2, [r3, #0]
 81070e8:	68fb      	ldr	r3, [r7, #12]
 81070ea:	681b      	ldr	r3, [r3, #0]
 81070ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81070f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81070f2:	68fb      	ldr	r3, [r7, #12]
 81070f4:	68db      	ldr	r3, [r3, #12]
 81070f6:	2b0f      	cmp	r3, #15
 81070f8:	d947      	bls.n	810718a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81070fa:	e03f      	b.n	810717c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81070fc:	68fb      	ldr	r3, [r7, #12]
 81070fe:	681b      	ldr	r3, [r3, #0]
 8107100:	695b      	ldr	r3, [r3, #20]
 8107102:	f003 0302 	and.w	r3, r3, #2
 8107106:	2b02      	cmp	r3, #2
 8107108:	d114      	bne.n	8107134 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 810710a:	68fb      	ldr	r3, [r7, #12]
 810710c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 810710e:	68fb      	ldr	r3, [r7, #12]
 8107110:	681b      	ldr	r3, [r3, #0]
 8107112:	6812      	ldr	r2, [r2, #0]
 8107114:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8107116:	68fb      	ldr	r3, [r7, #12]
 8107118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810711a:	1d1a      	adds	r2, r3, #4
 810711c:	68fb      	ldr	r3, [r7, #12]
 810711e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8107120:	68fb      	ldr	r3, [r7, #12]
 8107122:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107126:	b29b      	uxth	r3, r3
 8107128:	3b01      	subs	r3, #1
 810712a:	b29a      	uxth	r2, r3
 810712c:	68fb      	ldr	r3, [r7, #12]
 810712e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8107132:	e023      	b.n	810717c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107134:	f7fb fb62 	bl	81027fc <HAL_GetTick>
 8107138:	4602      	mov	r2, r0
 810713a:	693b      	ldr	r3, [r7, #16]
 810713c:	1ad3      	subs	r3, r2, r3
 810713e:	683a      	ldr	r2, [r7, #0]
 8107140:	429a      	cmp	r2, r3
 8107142:	d803      	bhi.n	810714c <HAL_SPI_Transmit+0x164>
 8107144:	683b      	ldr	r3, [r7, #0]
 8107146:	f1b3 3fff 	cmp.w	r3, #4294967295
 810714a:	d102      	bne.n	8107152 <HAL_SPI_Transmit+0x16a>
 810714c:	683b      	ldr	r3, [r7, #0]
 810714e:	2b00      	cmp	r3, #0
 8107150:	d114      	bne.n	810717c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8107152:	68f8      	ldr	r0, [r7, #12]
 8107154:	f000 fc6c 	bl	8107a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107158:	68fb      	ldr	r3, [r7, #12]
 810715a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810715e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8107162:	68fb      	ldr	r3, [r7, #12]
 8107164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8107168:	68fb      	ldr	r3, [r7, #12]
 810716a:	2201      	movs	r2, #1
 810716c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8107170:	68fb      	ldr	r3, [r7, #12]
 8107172:	2200      	movs	r2, #0
 8107174:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8107178:	2303      	movs	r3, #3
 810717a:	e11c      	b.n	81073b6 <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 810717c:	68fb      	ldr	r3, [r7, #12]
 810717e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107182:	b29b      	uxth	r3, r3
 8107184:	2b00      	cmp	r3, #0
 8107186:	d1b9      	bne.n	81070fc <HAL_SPI_Transmit+0x114>
 8107188:	e0ef      	b.n	810736a <HAL_SPI_Transmit+0x382>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810718a:	68fb      	ldr	r3, [r7, #12]
 810718c:	68db      	ldr	r3, [r3, #12]
 810718e:	2b07      	cmp	r3, #7
 8107190:	f240 80e4 	bls.w	810735c <HAL_SPI_Transmit+0x374>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8107194:	e05d      	b.n	8107252 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8107196:	68fb      	ldr	r3, [r7, #12]
 8107198:	681b      	ldr	r3, [r3, #0]
 810719a:	695b      	ldr	r3, [r3, #20]
 810719c:	f003 0302 	and.w	r3, r3, #2
 81071a0:	2b02      	cmp	r3, #2
 81071a2:	d132      	bne.n	810720a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81071a4:	68fb      	ldr	r3, [r7, #12]
 81071a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81071aa:	b29b      	uxth	r3, r3
 81071ac:	2b01      	cmp	r3, #1
 81071ae:	d918      	bls.n	81071e2 <HAL_SPI_Transmit+0x1fa>
 81071b0:	68fb      	ldr	r3, [r7, #12]
 81071b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81071b4:	2b00      	cmp	r3, #0
 81071b6:	d014      	beq.n	81071e2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 81071b8:	68fb      	ldr	r3, [r7, #12]
 81071ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81071bc:	68fb      	ldr	r3, [r7, #12]
 81071be:	681b      	ldr	r3, [r3, #0]
 81071c0:	6812      	ldr	r2, [r2, #0]
 81071c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81071c4:	68fb      	ldr	r3, [r7, #12]
 81071c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81071c8:	1d1a      	adds	r2, r3, #4
 81071ca:	68fb      	ldr	r3, [r7, #12]
 81071cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81071ce:	68fb      	ldr	r3, [r7, #12]
 81071d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81071d4:	b29b      	uxth	r3, r3
 81071d6:	3b02      	subs	r3, #2
 81071d8:	b29a      	uxth	r2, r3
 81071da:	68fb      	ldr	r3, [r7, #12]
 81071dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81071e0:	e037      	b.n	8107252 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 81071e2:	68fb      	ldr	r3, [r7, #12]
 81071e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81071e6:	881a      	ldrh	r2, [r3, #0]
 81071e8:	697b      	ldr	r3, [r7, #20]
 81071ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81071ec:	68fb      	ldr	r3, [r7, #12]
 81071ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81071f0:	1c9a      	adds	r2, r3, #2
 81071f2:	68fb      	ldr	r3, [r7, #12]
 81071f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 81071f6:	68fb      	ldr	r3, [r7, #12]
 81071f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81071fc:	b29b      	uxth	r3, r3
 81071fe:	3b01      	subs	r3, #1
 8107200:	b29a      	uxth	r2, r3
 8107202:	68fb      	ldr	r3, [r7, #12]
 8107204:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8107208:	e023      	b.n	8107252 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810720a:	f7fb faf7 	bl	81027fc <HAL_GetTick>
 810720e:	4602      	mov	r2, r0
 8107210:	693b      	ldr	r3, [r7, #16]
 8107212:	1ad3      	subs	r3, r2, r3
 8107214:	683a      	ldr	r2, [r7, #0]
 8107216:	429a      	cmp	r2, r3
 8107218:	d803      	bhi.n	8107222 <HAL_SPI_Transmit+0x23a>
 810721a:	683b      	ldr	r3, [r7, #0]
 810721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107220:	d102      	bne.n	8107228 <HAL_SPI_Transmit+0x240>
 8107222:	683b      	ldr	r3, [r7, #0]
 8107224:	2b00      	cmp	r3, #0
 8107226:	d114      	bne.n	8107252 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8107228:	68f8      	ldr	r0, [r7, #12]
 810722a:	f000 fc01 	bl	8107a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810722e:	68fb      	ldr	r3, [r7, #12]
 8107230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107234:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8107238:	68fb      	ldr	r3, [r7, #12]
 810723a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810723e:	68fb      	ldr	r3, [r7, #12]
 8107240:	2201      	movs	r2, #1
 8107242:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8107246:	68fb      	ldr	r3, [r7, #12]
 8107248:	2200      	movs	r2, #0
 810724a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 810724e:	2303      	movs	r3, #3
 8107250:	e0b1      	b.n	81073b6 <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 8107252:	68fb      	ldr	r3, [r7, #12]
 8107254:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107258:	b29b      	uxth	r3, r3
 810725a:	2b00      	cmp	r3, #0
 810725c:	d19b      	bne.n	8107196 <HAL_SPI_Transmit+0x1ae>
 810725e:	e084      	b.n	810736a <HAL_SPI_Transmit+0x382>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8107260:	68fb      	ldr	r3, [r7, #12]
 8107262:	681b      	ldr	r3, [r3, #0]
 8107264:	695b      	ldr	r3, [r3, #20]
 8107266:	f003 0302 	and.w	r3, r3, #2
 810726a:	2b02      	cmp	r3, #2
 810726c:	d152      	bne.n	8107314 <HAL_SPI_Transmit+0x32c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810726e:	68fb      	ldr	r3, [r7, #12]
 8107270:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107274:	b29b      	uxth	r3, r3
 8107276:	2b03      	cmp	r3, #3
 8107278:	d918      	bls.n	81072ac <HAL_SPI_Transmit+0x2c4>
 810727a:	68fb      	ldr	r3, [r7, #12]
 810727c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810727e:	2b40      	cmp	r3, #64	@ 0x40
 8107280:	d914      	bls.n	81072ac <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8107282:	68fb      	ldr	r3, [r7, #12]
 8107284:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	681b      	ldr	r3, [r3, #0]
 810728a:	6812      	ldr	r2, [r2, #0]
 810728c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810728e:	68fb      	ldr	r3, [r7, #12]
 8107290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107292:	1d1a      	adds	r2, r3, #4
 8107294:	68fb      	ldr	r3, [r7, #12]
 8107296:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8107298:	68fb      	ldr	r3, [r7, #12]
 810729a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810729e:	b29b      	uxth	r3, r3
 81072a0:	3b04      	subs	r3, #4
 81072a2:	b29a      	uxth	r2, r3
 81072a4:	68fb      	ldr	r3, [r7, #12]
 81072a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81072aa:	e057      	b.n	810735c <HAL_SPI_Transmit+0x374>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81072ac:	68fb      	ldr	r3, [r7, #12]
 81072ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81072b2:	b29b      	uxth	r3, r3
 81072b4:	2b01      	cmp	r3, #1
 81072b6:	d917      	bls.n	81072e8 <HAL_SPI_Transmit+0x300>
 81072b8:	68fb      	ldr	r3, [r7, #12]
 81072ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81072bc:	2b00      	cmp	r3, #0
 81072be:	d013      	beq.n	81072e8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 81072c0:	68fb      	ldr	r3, [r7, #12]
 81072c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81072c4:	881a      	ldrh	r2, [r3, #0]
 81072c6:	697b      	ldr	r3, [r7, #20]
 81072c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81072ca:	68fb      	ldr	r3, [r7, #12]
 81072cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81072ce:	1c9a      	adds	r2, r3, #2
 81072d0:	68fb      	ldr	r3, [r7, #12]
 81072d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81072d4:	68fb      	ldr	r3, [r7, #12]
 81072d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81072da:	b29b      	uxth	r3, r3
 81072dc:	3b02      	subs	r3, #2
 81072de:	b29a      	uxth	r2, r3
 81072e0:	68fb      	ldr	r3, [r7, #12]
 81072e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81072e6:	e039      	b.n	810735c <HAL_SPI_Transmit+0x374>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 81072e8:	68fb      	ldr	r3, [r7, #12]
 81072ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81072ec:	68fb      	ldr	r3, [r7, #12]
 81072ee:	681b      	ldr	r3, [r3, #0]
 81072f0:	3320      	adds	r3, #32
 81072f2:	7812      	ldrb	r2, [r2, #0]
 81072f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 81072f6:	68fb      	ldr	r3, [r7, #12]
 81072f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81072fa:	1c5a      	adds	r2, r3, #1
 81072fc:	68fb      	ldr	r3, [r7, #12]
 81072fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8107300:	68fb      	ldr	r3, [r7, #12]
 8107302:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107306:	b29b      	uxth	r3, r3
 8107308:	3b01      	subs	r3, #1
 810730a:	b29a      	uxth	r2, r3
 810730c:	68fb      	ldr	r3, [r7, #12]
 810730e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8107312:	e023      	b.n	810735c <HAL_SPI_Transmit+0x374>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107314:	f7fb fa72 	bl	81027fc <HAL_GetTick>
 8107318:	4602      	mov	r2, r0
 810731a:	693b      	ldr	r3, [r7, #16]
 810731c:	1ad3      	subs	r3, r2, r3
 810731e:	683a      	ldr	r2, [r7, #0]
 8107320:	429a      	cmp	r2, r3
 8107322:	d803      	bhi.n	810732c <HAL_SPI_Transmit+0x344>
 8107324:	683b      	ldr	r3, [r7, #0]
 8107326:	f1b3 3fff 	cmp.w	r3, #4294967295
 810732a:	d102      	bne.n	8107332 <HAL_SPI_Transmit+0x34a>
 810732c:	683b      	ldr	r3, [r7, #0]
 810732e:	2b00      	cmp	r3, #0
 8107330:	d114      	bne.n	810735c <HAL_SPI_Transmit+0x374>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8107332:	68f8      	ldr	r0, [r7, #12]
 8107334:	f000 fb7c 	bl	8107a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107338:	68fb      	ldr	r3, [r7, #12]
 810733a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810733e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8107342:	68fb      	ldr	r3, [r7, #12]
 8107344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8107348:	68fb      	ldr	r3, [r7, #12]
 810734a:	2201      	movs	r2, #1
 810734c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8107350:	68fb      	ldr	r3, [r7, #12]
 8107352:	2200      	movs	r2, #0
 8107354:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8107358:	2303      	movs	r3, #3
 810735a:	e02c      	b.n	81073b6 <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 810735c:	68fb      	ldr	r3, [r7, #12]
 810735e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107362:	b29b      	uxth	r3, r3
 8107364:	2b00      	cmp	r3, #0
 8107366:	f47f af7b 	bne.w	8107260 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 810736a:	693b      	ldr	r3, [r7, #16]
 810736c:	9300      	str	r3, [sp, #0]
 810736e:	683b      	ldr	r3, [r7, #0]
 8107370:	2200      	movs	r2, #0
 8107372:	2108      	movs	r1, #8
 8107374:	68f8      	ldr	r0, [r7, #12]
 8107376:	f000 fbfb 	bl	8107b70 <SPI_WaitOnFlagUntilTimeout>
 810737a:	4603      	mov	r3, r0
 810737c:	2b00      	cmp	r3, #0
 810737e:	d007      	beq.n	8107390 <HAL_SPI_Transmit+0x3a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8107380:	68fb      	ldr	r3, [r7, #12]
 8107382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107386:	f043 0220 	orr.w	r2, r3, #32
 810738a:	68fb      	ldr	r3, [r7, #12]
 810738c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8107390:	68f8      	ldr	r0, [r7, #12]
 8107392:	f000 fb4d 	bl	8107a30 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8107396:	68fb      	ldr	r3, [r7, #12]
 8107398:	2201      	movs	r2, #1
 810739a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 810739e:	68fb      	ldr	r3, [r7, #12]
 81073a0:	2200      	movs	r2, #0
 81073a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81073a6:	68fb      	ldr	r3, [r7, #12]
 81073a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81073ac:	2b00      	cmp	r3, #0
 81073ae:	d001      	beq.n	81073b4 <HAL_SPI_Transmit+0x3cc>
  {
    return HAL_ERROR;
 81073b0:	2301      	movs	r3, #1
 81073b2:	e000      	b.n	81073b6 <HAL_SPI_Transmit+0x3ce>
  }
  else
  {
    return HAL_OK;
 81073b4:	2300      	movs	r3, #0
  }
}
 81073b6:	4618      	mov	r0, r3
 81073b8:	3718      	adds	r7, #24
 81073ba:	46bd      	mov	sp, r7
 81073bc:	bd80      	pop	{r7, pc}
	...

081073c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 81073c0:	b580      	push	{r7, lr}
 81073c2:	b08e      	sub	sp, #56	@ 0x38
 81073c4:	af02      	add	r7, sp, #8
 81073c6:	60f8      	str	r0, [r7, #12]
 81073c8:	60b9      	str	r1, [r7, #8]
 81073ca:	607a      	str	r2, [r7, #4]
 81073cc:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81073ce:	68fb      	ldr	r3, [r7, #12]
 81073d0:	681b      	ldr	r3, [r3, #0]
 81073d2:	3320      	adds	r3, #32
 81073d4:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 81073d6:	68fb      	ldr	r3, [r7, #12]
 81073d8:	681b      	ldr	r3, [r3, #0]
 81073da:	3330      	adds	r3, #48	@ 0x30
 81073dc:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81073e2:	095b      	lsrs	r3, r3, #5
 81073e4:	b29b      	uxth	r3, r3
 81073e6:	3301      	adds	r3, #1
 81073e8:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81073ea:	f7fb fa07 	bl	81027fc <HAL_GetTick>
 81073ee:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 81073f0:	887b      	ldrh	r3, [r7, #2]
 81073f2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 81073f4:	887b      	ldrh	r3, [r7, #2]
 81073f6:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 81073f8:	68fb      	ldr	r3, [r7, #12]
 81073fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81073fe:	b2db      	uxtb	r3, r3
 8107400:	2b01      	cmp	r3, #1
 8107402:	d001      	beq.n	8107408 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8107404:	2302      	movs	r3, #2
 8107406:	e30e      	b.n	8107a26 <HAL_SPI_TransmitReceive+0x666>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8107408:	68bb      	ldr	r3, [r7, #8]
 810740a:	2b00      	cmp	r3, #0
 810740c:	d005      	beq.n	810741a <HAL_SPI_TransmitReceive+0x5a>
 810740e:	687b      	ldr	r3, [r7, #4]
 8107410:	2b00      	cmp	r3, #0
 8107412:	d002      	beq.n	810741a <HAL_SPI_TransmitReceive+0x5a>
 8107414:	887b      	ldrh	r3, [r7, #2]
 8107416:	2b00      	cmp	r3, #0
 8107418:	d101      	bne.n	810741e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 810741a:	2301      	movs	r3, #1
 810741c:	e303      	b.n	8107a26 <HAL_SPI_TransmitReceive+0x666>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 810741e:	68fb      	ldr	r3, [r7, #12]
 8107420:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8107424:	2b01      	cmp	r3, #1
 8107426:	d101      	bne.n	810742c <HAL_SPI_TransmitReceive+0x6c>
 8107428:	2302      	movs	r3, #2
 810742a:	e2fc      	b.n	8107a26 <HAL_SPI_TransmitReceive+0x666>
 810742c:	68fb      	ldr	r3, [r7, #12]
 810742e:	2201      	movs	r2, #1
 8107430:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8107434:	68fb      	ldr	r3, [r7, #12]
 8107436:	2205      	movs	r2, #5
 8107438:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810743c:	68fb      	ldr	r3, [r7, #12]
 810743e:	2200      	movs	r2, #0
 8107440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8107444:	68fb      	ldr	r3, [r7, #12]
 8107446:	687a      	ldr	r2, [r7, #4]
 8107448:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 810744a:	68fb      	ldr	r3, [r7, #12]
 810744c:	887a      	ldrh	r2, [r7, #2]
 810744e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8107452:	68fb      	ldr	r3, [r7, #12]
 8107454:	887a      	ldrh	r2, [r7, #2]
 8107456:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 810745a:	68fb      	ldr	r3, [r7, #12]
 810745c:	68ba      	ldr	r2, [r7, #8]
 810745e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8107460:	68fb      	ldr	r3, [r7, #12]
 8107462:	887a      	ldrh	r2, [r7, #2]
 8107464:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8107468:	68fb      	ldr	r3, [r7, #12]
 810746a:	887a      	ldrh	r2, [r7, #2]
 810746c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8107470:	68fb      	ldr	r3, [r7, #12]
 8107472:	2200      	movs	r2, #0
 8107474:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8107476:	68fb      	ldr	r3, [r7, #12]
 8107478:	2200      	movs	r2, #0
 810747a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 810747c:	68fb      	ldr	r3, [r7, #12]
 810747e:	681b      	ldr	r3, [r3, #0]
 8107480:	68da      	ldr	r2, [r3, #12]
 8107482:	68fb      	ldr	r3, [r7, #12]
 8107484:	681b      	ldr	r3, [r3, #0]
 8107486:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 810748a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 810748c:	68fb      	ldr	r3, [r7, #12]
 810748e:	681b      	ldr	r3, [r3, #0]
 8107490:	4a70      	ldr	r2, [pc, #448]	@ (8107654 <HAL_SPI_TransmitReceive+0x294>)
 8107492:	4293      	cmp	r3, r2
 8107494:	d009      	beq.n	81074aa <HAL_SPI_TransmitReceive+0xea>
 8107496:	68fb      	ldr	r3, [r7, #12]
 8107498:	681b      	ldr	r3, [r3, #0]
 810749a:	4a6f      	ldr	r2, [pc, #444]	@ (8107658 <HAL_SPI_TransmitReceive+0x298>)
 810749c:	4293      	cmp	r3, r2
 810749e:	d004      	beq.n	81074aa <HAL_SPI_TransmitReceive+0xea>
 81074a0:	68fb      	ldr	r3, [r7, #12]
 81074a2:	681b      	ldr	r3, [r3, #0]
 81074a4:	4a6d      	ldr	r2, [pc, #436]	@ (810765c <HAL_SPI_TransmitReceive+0x29c>)
 81074a6:	4293      	cmp	r3, r2
 81074a8:	d102      	bne.n	81074b0 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 81074aa:	2310      	movs	r3, #16
 81074ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81074ae:	e001      	b.n	81074b4 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 81074b0:	2308      	movs	r3, #8
 81074b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81074b4:	68fb      	ldr	r3, [r7, #12]
 81074b6:	681b      	ldr	r3, [r3, #0]
 81074b8:	685b      	ldr	r3, [r3, #4]
 81074ba:	0c1b      	lsrs	r3, r3, #16
 81074bc:	041b      	lsls	r3, r3, #16
 81074be:	8879      	ldrh	r1, [r7, #2]
 81074c0:	68fa      	ldr	r2, [r7, #12]
 81074c2:	6812      	ldr	r2, [r2, #0]
 81074c4:	430b      	orrs	r3, r1
 81074c6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 81074c8:	68fb      	ldr	r3, [r7, #12]
 81074ca:	681b      	ldr	r3, [r3, #0]
 81074cc:	681a      	ldr	r2, [r3, #0]
 81074ce:	68fb      	ldr	r3, [r7, #12]
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	f042 0201 	orr.w	r2, r2, #1
 81074d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81074d8:	68fb      	ldr	r3, [r7, #12]
 81074da:	685b      	ldr	r3, [r3, #4]
 81074dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81074e0:	d107      	bne.n	81074f2 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81074e2:	68fb      	ldr	r3, [r7, #12]
 81074e4:	681b      	ldr	r3, [r3, #0]
 81074e6:	681a      	ldr	r2, [r3, #0]
 81074e8:	68fb      	ldr	r3, [r7, #12]
 81074ea:	681b      	ldr	r3, [r3, #0]
 81074ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81074f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81074f2:	68fb      	ldr	r3, [r7, #12]
 81074f4:	68db      	ldr	r3, [r3, #12]
 81074f6:	2b0f      	cmp	r3, #15
 81074f8:	f240 80a2 	bls.w	8107640 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 81074fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81074fe:	089b      	lsrs	r3, r3, #2
 8107500:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8107502:	e094      	b.n	810762e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8107504:	68fb      	ldr	r3, [r7, #12]
 8107506:	681b      	ldr	r3, [r3, #0]
 8107508:	695b      	ldr	r3, [r3, #20]
 810750a:	f003 0302 	and.w	r3, r3, #2
 810750e:	2b02      	cmp	r3, #2
 8107510:	d120      	bne.n	8107554 <HAL_SPI_TransmitReceive+0x194>
 8107512:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8107514:	2b00      	cmp	r3, #0
 8107516:	d01d      	beq.n	8107554 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8107518:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810751a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 810751c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810751e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8107520:	429a      	cmp	r2, r3
 8107522:	d217      	bcs.n	8107554 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8107524:	68fb      	ldr	r3, [r7, #12]
 8107526:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8107528:	68fb      	ldr	r3, [r7, #12]
 810752a:	681b      	ldr	r3, [r3, #0]
 810752c:	6812      	ldr	r2, [r2, #0]
 810752e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8107530:	68fb      	ldr	r3, [r7, #12]
 8107532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107534:	1d1a      	adds	r2, r3, #4
 8107536:	68fb      	ldr	r3, [r7, #12]
 8107538:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 810753a:	68fb      	ldr	r3, [r7, #12]
 810753c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107540:	b29b      	uxth	r3, r3
 8107542:	3b01      	subs	r3, #1
 8107544:	b29a      	uxth	r2, r3
 8107546:	68fb      	ldr	r3, [r7, #12]
 8107548:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810754c:	68fb      	ldr	r3, [r7, #12]
 810754e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107552:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8107554:	68fb      	ldr	r3, [r7, #12]
 8107556:	681b      	ldr	r3, [r3, #0]
 8107558:	695b      	ldr	r3, [r3, #20]
 810755a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 810755c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810755e:	2b00      	cmp	r3, #0
 8107560:	d065      	beq.n	810762e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8107562:	68fb      	ldr	r3, [r7, #12]
 8107564:	681b      	ldr	r3, [r3, #0]
 8107566:	695b      	ldr	r3, [r3, #20]
 8107568:	f003 0301 	and.w	r3, r3, #1
 810756c:	2b01      	cmp	r3, #1
 810756e:	d118      	bne.n	81075a2 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107570:	68fb      	ldr	r3, [r7, #12]
 8107572:	681a      	ldr	r2, [r3, #0]
 8107574:	68fb      	ldr	r3, [r7, #12]
 8107576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107578:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 810757a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810757c:	68fb      	ldr	r3, [r7, #12]
 810757e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107580:	1d1a      	adds	r2, r3, #4
 8107582:	68fb      	ldr	r3, [r7, #12]
 8107584:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8107586:	68fb      	ldr	r3, [r7, #12]
 8107588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810758c:	b29b      	uxth	r3, r3
 810758e:	3b01      	subs	r3, #1
 8107590:	b29a      	uxth	r2, r3
 8107592:	68fb      	ldr	r3, [r7, #12]
 8107594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8107598:	68fb      	ldr	r3, [r7, #12]
 810759a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810759e:	853b      	strh	r3, [r7, #40]	@ 0x28
 81075a0:	e045      	b.n	810762e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81075a2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 81075a4:	8bfb      	ldrh	r3, [r7, #30]
 81075a6:	429a      	cmp	r2, r3
 81075a8:	d21d      	bcs.n	81075e6 <HAL_SPI_TransmitReceive+0x226>
 81075aa:	697b      	ldr	r3, [r7, #20]
 81075ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81075b0:	2b00      	cmp	r3, #0
 81075b2:	d018      	beq.n	81075e6 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81075b4:	68fb      	ldr	r3, [r7, #12]
 81075b6:	681a      	ldr	r2, [r3, #0]
 81075b8:	68fb      	ldr	r3, [r7, #12]
 81075ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81075bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 81075be:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81075c0:	68fb      	ldr	r3, [r7, #12]
 81075c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81075c4:	1d1a      	adds	r2, r3, #4
 81075c6:	68fb      	ldr	r3, [r7, #12]
 81075c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81075ca:	68fb      	ldr	r3, [r7, #12]
 81075cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81075d0:	b29b      	uxth	r3, r3
 81075d2:	3b01      	subs	r3, #1
 81075d4:	b29a      	uxth	r2, r3
 81075d6:	68fb      	ldr	r3, [r7, #12]
 81075d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81075dc:	68fb      	ldr	r3, [r7, #12]
 81075de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81075e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 81075e4:	e023      	b.n	810762e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81075e6:	f7fb f909 	bl	81027fc <HAL_GetTick>
 81075ea:	4602      	mov	r2, r0
 81075ec:	69bb      	ldr	r3, [r7, #24]
 81075ee:	1ad3      	subs	r3, r2, r3
 81075f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81075f2:	429a      	cmp	r2, r3
 81075f4:	d803      	bhi.n	81075fe <HAL_SPI_TransmitReceive+0x23e>
 81075f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81075f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81075fc:	d102      	bne.n	8107604 <HAL_SPI_TransmitReceive+0x244>
 81075fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107600:	2b00      	cmp	r3, #0
 8107602:	d114      	bne.n	810762e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8107604:	68f8      	ldr	r0, [r7, #12]
 8107606:	f000 fa13 	bl	8107a30 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810760a:	68fb      	ldr	r3, [r7, #12]
 810760c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107610:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8107614:	68fb      	ldr	r3, [r7, #12]
 8107616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 810761a:	68fb      	ldr	r3, [r7, #12]
 810761c:	2201      	movs	r2, #1
 810761e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8107622:	68fb      	ldr	r3, [r7, #12]
 8107624:	2200      	movs	r2, #0
 8107626:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 810762a:	2303      	movs	r3, #3
 810762c:	e1fb      	b.n	8107a26 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810762e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8107630:	2b00      	cmp	r3, #0
 8107632:	f47f af67 	bne.w	8107504 <HAL_SPI_TransmitReceive+0x144>
 8107636:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8107638:	2b00      	cmp	r3, #0
 810763a:	f47f af63 	bne.w	8107504 <HAL_SPI_TransmitReceive+0x144>
 810763e:	e1cc      	b.n	81079da <HAL_SPI_TransmitReceive+0x61a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8107640:	68fb      	ldr	r3, [r7, #12]
 8107642:	68db      	ldr	r3, [r3, #12]
 8107644:	2b07      	cmp	r3, #7
 8107646:	f240 81c0 	bls.w	81079ca <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 810764a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810764c:	085b      	lsrs	r3, r3, #1
 810764e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8107650:	e0c7      	b.n	81077e2 <HAL_SPI_TransmitReceive+0x422>
 8107652:	bf00      	nop
 8107654:	40013000 	.word	0x40013000
 8107658:	40003800 	.word	0x40003800
 810765c:	40003c00 	.word	0x40003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8107660:	68fb      	ldr	r3, [r7, #12]
 8107662:	681b      	ldr	r3, [r3, #0]
 8107664:	695b      	ldr	r3, [r3, #20]
 8107666:	f003 0302 	and.w	r3, r3, #2
 810766a:	2b02      	cmp	r3, #2
 810766c:	d11f      	bne.n	81076ae <HAL_SPI_TransmitReceive+0x2ee>
 810766e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8107670:	2b00      	cmp	r3, #0
 8107672:	d01c      	beq.n	81076ae <HAL_SPI_TransmitReceive+0x2ee>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8107674:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8107676:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8107678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810767a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 810767c:	429a      	cmp	r2, r3
 810767e:	d216      	bcs.n	81076ae <HAL_SPI_TransmitReceive+0x2ee>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8107680:	68fb      	ldr	r3, [r7, #12]
 8107682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107684:	881a      	ldrh	r2, [r3, #0]
 8107686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107688:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 810768a:	68fb      	ldr	r3, [r7, #12]
 810768c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810768e:	1c9a      	adds	r2, r3, #2
 8107690:	68fb      	ldr	r3, [r7, #12]
 8107692:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8107694:	68fb      	ldr	r3, [r7, #12]
 8107696:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810769a:	b29b      	uxth	r3, r3
 810769c:	3b01      	subs	r3, #1
 810769e:	b29a      	uxth	r2, r3
 81076a0:	68fb      	ldr	r3, [r7, #12]
 81076a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81076a6:	68fb      	ldr	r3, [r7, #12]
 81076a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81076ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 81076ae:	68fb      	ldr	r3, [r7, #12]
 81076b0:	681b      	ldr	r3, [r3, #0]
 81076b2:	695b      	ldr	r3, [r3, #20]
 81076b4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 81076b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81076b8:	2b00      	cmp	r3, #0
 81076ba:	f000 8092 	beq.w	81077e2 <HAL_SPI_TransmitReceive+0x422>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81076be:	68fb      	ldr	r3, [r7, #12]
 81076c0:	681b      	ldr	r3, [r3, #0]
 81076c2:	695b      	ldr	r3, [r3, #20]
 81076c4:	f003 0301 	and.w	r3, r3, #1
 81076c8:	2b01      	cmp	r3, #1
 81076ca:	d118      	bne.n	81076fe <HAL_SPI_TransmitReceive+0x33e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81076cc:	68fb      	ldr	r3, [r7, #12]
 81076ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81076d0:	6a3a      	ldr	r2, [r7, #32]
 81076d2:	8812      	ldrh	r2, [r2, #0]
 81076d4:	b292      	uxth	r2, r2
 81076d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81076d8:	68fb      	ldr	r3, [r7, #12]
 81076da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81076dc:	1c9a      	adds	r2, r3, #2
 81076de:	68fb      	ldr	r3, [r7, #12]
 81076e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 81076e2:	68fb      	ldr	r3, [r7, #12]
 81076e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81076e8:	b29b      	uxth	r3, r3
 81076ea:	3b01      	subs	r3, #1
 81076ec:	b29a      	uxth	r2, r3
 81076ee:	68fb      	ldr	r3, [r7, #12]
 81076f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81076f4:	68fb      	ldr	r3, [r7, #12]
 81076f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 81076fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 81076fc:	e071      	b.n	81077e2 <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 81076fe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8107700:	8bfb      	ldrh	r3, [r7, #30]
 8107702:	429a      	cmp	r2, r3
 8107704:	d228      	bcs.n	8107758 <HAL_SPI_TransmitReceive+0x398>
 8107706:	697b      	ldr	r3, [r7, #20]
 8107708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810770c:	2b00      	cmp	r3, #0
 810770e:	d023      	beq.n	8107758 <HAL_SPI_TransmitReceive+0x398>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107710:	68fb      	ldr	r3, [r7, #12]
 8107712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107714:	6a3a      	ldr	r2, [r7, #32]
 8107716:	8812      	ldrh	r2, [r2, #0]
 8107718:	b292      	uxth	r2, r2
 810771a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810771c:	68fb      	ldr	r3, [r7, #12]
 810771e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107720:	1c9a      	adds	r2, r3, #2
 8107722:	68fb      	ldr	r3, [r7, #12]
 8107724:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107726:	68fb      	ldr	r3, [r7, #12]
 8107728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810772a:	6a3a      	ldr	r2, [r7, #32]
 810772c:	8812      	ldrh	r2, [r2, #0]
 810772e:	b292      	uxth	r2, r2
 8107730:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8107732:	68fb      	ldr	r3, [r7, #12]
 8107734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107736:	1c9a      	adds	r2, r3, #2
 8107738:	68fb      	ldr	r3, [r7, #12]
 810773a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810773c:	68fb      	ldr	r3, [r7, #12]
 810773e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8107742:	b29b      	uxth	r3, r3
 8107744:	3b02      	subs	r3, #2
 8107746:	b29a      	uxth	r2, r3
 8107748:	68fb      	ldr	r3, [r7, #12]
 810774a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810774e:	68fb      	ldr	r3, [r7, #12]
 8107750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8107754:	853b      	strh	r3, [r7, #40]	@ 0x28
 8107756:	e044      	b.n	81077e2 <HAL_SPI_TransmitReceive+0x422>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8107758:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810775a:	2b01      	cmp	r3, #1
 810775c:	d11d      	bne.n	810779a <HAL_SPI_TransmitReceive+0x3da>
 810775e:	697b      	ldr	r3, [r7, #20]
 8107760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8107764:	2b00      	cmp	r3, #0
 8107766:	d018      	beq.n	810779a <HAL_SPI_TransmitReceive+0x3da>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107768:	68fb      	ldr	r3, [r7, #12]
 810776a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810776c:	6a3a      	ldr	r2, [r7, #32]
 810776e:	8812      	ldrh	r2, [r2, #0]
 8107770:	b292      	uxth	r2, r2
 8107772:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8107774:	68fb      	ldr	r3, [r7, #12]
 8107776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107778:	1c9a      	adds	r2, r3, #2
 810777a:	68fb      	ldr	r3, [r7, #12]
 810777c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 810777e:	68fb      	ldr	r3, [r7, #12]
 8107780:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8107784:	b29b      	uxth	r3, r3
 8107786:	3b01      	subs	r3, #1
 8107788:	b29a      	uxth	r2, r3
 810778a:	68fb      	ldr	r3, [r7, #12]
 810778c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8107790:	68fb      	ldr	r3, [r7, #12]
 8107792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8107796:	853b      	strh	r3, [r7, #40]	@ 0x28
 8107798:	e023      	b.n	81077e2 <HAL_SPI_TransmitReceive+0x422>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810779a:	f7fb f82f 	bl	81027fc <HAL_GetTick>
 810779e:	4602      	mov	r2, r0
 81077a0:	69bb      	ldr	r3, [r7, #24]
 81077a2:	1ad3      	subs	r3, r2, r3
 81077a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81077a6:	429a      	cmp	r2, r3
 81077a8:	d803      	bhi.n	81077b2 <HAL_SPI_TransmitReceive+0x3f2>
 81077aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81077ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81077b0:	d102      	bne.n	81077b8 <HAL_SPI_TransmitReceive+0x3f8>
 81077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81077b4:	2b00      	cmp	r3, #0
 81077b6:	d114      	bne.n	81077e2 <HAL_SPI_TransmitReceive+0x422>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81077b8:	68f8      	ldr	r0, [r7, #12]
 81077ba:	f000 f939 	bl	8107a30 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81077be:	68fb      	ldr	r3, [r7, #12]
 81077c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81077c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81077c8:	68fb      	ldr	r3, [r7, #12]
 81077ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 81077ce:	68fb      	ldr	r3, [r7, #12]
 81077d0:	2201      	movs	r2, #1
 81077d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 81077d6:	68fb      	ldr	r3, [r7, #12]
 81077d8:	2200      	movs	r2, #0
 81077da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 81077de:	2303      	movs	r3, #3
 81077e0:	e121      	b.n	8107a26 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81077e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81077e4:	2b00      	cmp	r3, #0
 81077e6:	f47f af3b 	bne.w	8107660 <HAL_SPI_TransmitReceive+0x2a0>
 81077ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81077ec:	2b00      	cmp	r3, #0
 81077ee:	f47f af37 	bne.w	8107660 <HAL_SPI_TransmitReceive+0x2a0>
 81077f2:	e0f2      	b.n	81079da <HAL_SPI_TransmitReceive+0x61a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 81077f4:	68fb      	ldr	r3, [r7, #12]
 81077f6:	681b      	ldr	r3, [r3, #0]
 81077f8:	695b      	ldr	r3, [r3, #20]
 81077fa:	f003 0302 	and.w	r3, r3, #2
 81077fe:	2b02      	cmp	r3, #2
 8107800:	d121      	bne.n	8107846 <HAL_SPI_TransmitReceive+0x486>
 8107802:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8107804:	2b00      	cmp	r3, #0
 8107806:	d01e      	beq.n	8107846 <HAL_SPI_TransmitReceive+0x486>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8107808:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810780a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 810780c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810780e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8107810:	429a      	cmp	r2, r3
 8107812:	d218      	bcs.n	8107846 <HAL_SPI_TransmitReceive+0x486>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8107814:	68fb      	ldr	r3, [r7, #12]
 8107816:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8107818:	68fb      	ldr	r3, [r7, #12]
 810781a:	681b      	ldr	r3, [r3, #0]
 810781c:	3320      	adds	r3, #32
 810781e:	7812      	ldrb	r2, [r2, #0]
 8107820:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8107822:	68fb      	ldr	r3, [r7, #12]
 8107824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107826:	1c5a      	adds	r2, r3, #1
 8107828:	68fb      	ldr	r3, [r7, #12]
 810782a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 810782c:	68fb      	ldr	r3, [r7, #12]
 810782e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107832:	b29b      	uxth	r3, r3
 8107834:	3b01      	subs	r3, #1
 8107836:	b29a      	uxth	r2, r3
 8107838:	68fb      	ldr	r3, [r7, #12]
 810783a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810783e:	68fb      	ldr	r3, [r7, #12]
 8107840:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8107844:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8107846:	68fb      	ldr	r3, [r7, #12]
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	695b      	ldr	r3, [r3, #20]
 810784c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 810784e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8107850:	2b00      	cmp	r3, #0
 8107852:	f000 80ba 	beq.w	81079ca <HAL_SPI_TransmitReceive+0x60a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8107856:	68fb      	ldr	r3, [r7, #12]
 8107858:	681b      	ldr	r3, [r3, #0]
 810785a:	695b      	ldr	r3, [r3, #20]
 810785c:	f003 0301 	and.w	r3, r3, #1
 8107860:	2b01      	cmp	r3, #1
 8107862:	d11b      	bne.n	810789c <HAL_SPI_TransmitReceive+0x4dc>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8107864:	68fb      	ldr	r3, [r7, #12]
 8107866:	681b      	ldr	r3, [r3, #0]
 8107868:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810786c:	68fb      	ldr	r3, [r7, #12]
 810786e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107870:	7812      	ldrb	r2, [r2, #0]
 8107872:	b2d2      	uxtb	r2, r2
 8107874:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107876:	68fb      	ldr	r3, [r7, #12]
 8107878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810787a:	1c5a      	adds	r2, r3, #1
 810787c:	68fb      	ldr	r3, [r7, #12]
 810787e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8107880:	68fb      	ldr	r3, [r7, #12]
 8107882:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8107886:	b29b      	uxth	r3, r3
 8107888:	3b01      	subs	r3, #1
 810788a:	b29a      	uxth	r2, r3
 810788c:	68fb      	ldr	r3, [r7, #12]
 810788e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8107892:	68fb      	ldr	r3, [r7, #12]
 8107894:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8107898:	853b      	strh	r3, [r7, #40]	@ 0x28
 810789a:	e096      	b.n	81079ca <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 810789c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 810789e:	8bfb      	ldrh	r3, [r7, #30]
 81078a0:	429a      	cmp	r2, r3
 81078a2:	d24a      	bcs.n	810793a <HAL_SPI_TransmitReceive+0x57a>
 81078a4:	697b      	ldr	r3, [r7, #20]
 81078a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81078aa:	2b00      	cmp	r3, #0
 81078ac:	d045      	beq.n	810793a <HAL_SPI_TransmitReceive+0x57a>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81078ae:	68fb      	ldr	r3, [r7, #12]
 81078b0:	681b      	ldr	r3, [r3, #0]
 81078b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81078b6:	68fb      	ldr	r3, [r7, #12]
 81078b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81078ba:	7812      	ldrb	r2, [r2, #0]
 81078bc:	b2d2      	uxtb	r2, r2
 81078be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81078c0:	68fb      	ldr	r3, [r7, #12]
 81078c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81078c4:	1c5a      	adds	r2, r3, #1
 81078c6:	68fb      	ldr	r3, [r7, #12]
 81078c8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81078ca:	68fb      	ldr	r3, [r7, #12]
 81078cc:	681b      	ldr	r3, [r3, #0]
 81078ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81078d2:	68fb      	ldr	r3, [r7, #12]
 81078d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81078d6:	7812      	ldrb	r2, [r2, #0]
 81078d8:	b2d2      	uxtb	r2, r2
 81078da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81078dc:	68fb      	ldr	r3, [r7, #12]
 81078de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81078e0:	1c5a      	adds	r2, r3, #1
 81078e2:	68fb      	ldr	r3, [r7, #12]
 81078e4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81078e6:	68fb      	ldr	r3, [r7, #12]
 81078e8:	681b      	ldr	r3, [r3, #0]
 81078ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81078ee:	68fb      	ldr	r3, [r7, #12]
 81078f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81078f2:	7812      	ldrb	r2, [r2, #0]
 81078f4:	b2d2      	uxtb	r2, r2
 81078f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81078f8:	68fb      	ldr	r3, [r7, #12]
 81078fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81078fc:	1c5a      	adds	r2, r3, #1
 81078fe:	68fb      	ldr	r3, [r7, #12]
 8107900:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8107902:	68fb      	ldr	r3, [r7, #12]
 8107904:	681b      	ldr	r3, [r3, #0]
 8107906:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810790a:	68fb      	ldr	r3, [r7, #12]
 810790c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810790e:	7812      	ldrb	r2, [r2, #0]
 8107910:	b2d2      	uxtb	r2, r2
 8107912:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107914:	68fb      	ldr	r3, [r7, #12]
 8107916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107918:	1c5a      	adds	r2, r3, #1
 810791a:	68fb      	ldr	r3, [r7, #12]
 810791c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810791e:	68fb      	ldr	r3, [r7, #12]
 8107920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8107924:	b29b      	uxth	r3, r3
 8107926:	3b04      	subs	r3, #4
 8107928:	b29a      	uxth	r2, r3
 810792a:	68fb      	ldr	r3, [r7, #12]
 810792c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8107930:	68fb      	ldr	r3, [r7, #12]
 8107932:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8107936:	853b      	strh	r3, [r7, #40]	@ 0x28
 8107938:	e047      	b.n	81079ca <HAL_SPI_TransmitReceive+0x60a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 810793a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 810793c:	2b03      	cmp	r3, #3
 810793e:	d820      	bhi.n	8107982 <HAL_SPI_TransmitReceive+0x5c2>
 8107940:	697b      	ldr	r3, [r7, #20]
 8107942:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8107946:	2b00      	cmp	r3, #0
 8107948:	d01b      	beq.n	8107982 <HAL_SPI_TransmitReceive+0x5c2>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810794a:	68fb      	ldr	r3, [r7, #12]
 810794c:	681b      	ldr	r3, [r3, #0]
 810794e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8107952:	68fb      	ldr	r3, [r7, #12]
 8107954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107956:	7812      	ldrb	r2, [r2, #0]
 8107958:	b2d2      	uxtb	r2, r2
 810795a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810795c:	68fb      	ldr	r3, [r7, #12]
 810795e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107960:	1c5a      	adds	r2, r3, #1
 8107962:	68fb      	ldr	r3, [r7, #12]
 8107964:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8107966:	68fb      	ldr	r3, [r7, #12]
 8107968:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810796c:	b29b      	uxth	r3, r3
 810796e:	3b01      	subs	r3, #1
 8107970:	b29a      	uxth	r2, r3
 8107972:	68fb      	ldr	r3, [r7, #12]
 8107974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8107978:	68fb      	ldr	r3, [r7, #12]
 810797a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 810797e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8107980:	e023      	b.n	81079ca <HAL_SPI_TransmitReceive+0x60a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107982:	f7fa ff3b 	bl	81027fc <HAL_GetTick>
 8107986:	4602      	mov	r2, r0
 8107988:	69bb      	ldr	r3, [r7, #24]
 810798a:	1ad3      	subs	r3, r2, r3
 810798c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810798e:	429a      	cmp	r2, r3
 8107990:	d803      	bhi.n	810799a <HAL_SPI_TransmitReceive+0x5da>
 8107992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107998:	d102      	bne.n	81079a0 <HAL_SPI_TransmitReceive+0x5e0>
 810799a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810799c:	2b00      	cmp	r3, #0
 810799e:	d114      	bne.n	81079ca <HAL_SPI_TransmitReceive+0x60a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 81079a0:	68f8      	ldr	r0, [r7, #12]
 81079a2:	f000 f845 	bl	8107a30 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81079a6:	68fb      	ldr	r3, [r7, #12]
 81079a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81079ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81079b0:	68fb      	ldr	r3, [r7, #12]
 81079b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 81079b6:	68fb      	ldr	r3, [r7, #12]
 81079b8:	2201      	movs	r2, #1
 81079ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 81079be:	68fb      	ldr	r3, [r7, #12]
 81079c0:	2200      	movs	r2, #0
 81079c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 81079c6:	2303      	movs	r3, #3
 81079c8:	e02d      	b.n	8107a26 <HAL_SPI_TransmitReceive+0x666>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81079ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81079cc:	2b00      	cmp	r3, #0
 81079ce:	f47f af11 	bne.w	81077f4 <HAL_SPI_TransmitReceive+0x434>
 81079d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 81079d4:	2b00      	cmp	r3, #0
 81079d6:	f47f af0d 	bne.w	81077f4 <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 81079da:	69bb      	ldr	r3, [r7, #24]
 81079dc:	9300      	str	r3, [sp, #0]
 81079de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81079e0:	2200      	movs	r2, #0
 81079e2:	2108      	movs	r1, #8
 81079e4:	68f8      	ldr	r0, [r7, #12]
 81079e6:	f000 f8c3 	bl	8107b70 <SPI_WaitOnFlagUntilTimeout>
 81079ea:	4603      	mov	r3, r0
 81079ec:	2b00      	cmp	r3, #0
 81079ee:	d007      	beq.n	8107a00 <HAL_SPI_TransmitReceive+0x640>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81079f0:	68fb      	ldr	r3, [r7, #12]
 81079f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81079f6:	f043 0220 	orr.w	r2, r3, #32
 81079fa:	68fb      	ldr	r3, [r7, #12]
 81079fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8107a00:	68f8      	ldr	r0, [r7, #12]
 8107a02:	f000 f815 	bl	8107a30 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8107a06:	68fb      	ldr	r3, [r7, #12]
 8107a08:	2201      	movs	r2, #1
 8107a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8107a0e:	68fb      	ldr	r3, [r7, #12]
 8107a10:	2200      	movs	r2, #0
 8107a12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8107a16:	68fb      	ldr	r3, [r7, #12]
 8107a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107a1c:	2b00      	cmp	r3, #0
 8107a1e:	d001      	beq.n	8107a24 <HAL_SPI_TransmitReceive+0x664>
  {
    return HAL_ERROR;
 8107a20:	2301      	movs	r3, #1
 8107a22:	e000      	b.n	8107a26 <HAL_SPI_TransmitReceive+0x666>
  }
  else
  {
    return HAL_OK;
 8107a24:	2300      	movs	r3, #0
  }
}
 8107a26:	4618      	mov	r0, r3
 8107a28:	3730      	adds	r7, #48	@ 0x30
 8107a2a:	46bd      	mov	sp, r7
 8107a2c:	bd80      	pop	{r7, pc}
 8107a2e:	bf00      	nop

08107a30 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8107a30:	b480      	push	{r7}
 8107a32:	b085      	sub	sp, #20
 8107a34:	af00      	add	r7, sp, #0
 8107a36:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	681b      	ldr	r3, [r3, #0]
 8107a3c:	695b      	ldr	r3, [r3, #20]
 8107a3e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	681b      	ldr	r3, [r3, #0]
 8107a44:	699a      	ldr	r2, [r3, #24]
 8107a46:	687b      	ldr	r3, [r7, #4]
 8107a48:	681b      	ldr	r3, [r3, #0]
 8107a4a:	f042 0208 	orr.w	r2, r2, #8
 8107a4e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8107a50:	687b      	ldr	r3, [r7, #4]
 8107a52:	681b      	ldr	r3, [r3, #0]
 8107a54:	699a      	ldr	r2, [r3, #24]
 8107a56:	687b      	ldr	r3, [r7, #4]
 8107a58:	681b      	ldr	r3, [r3, #0]
 8107a5a:	f042 0210 	orr.w	r2, r2, #16
 8107a5e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8107a60:	687b      	ldr	r3, [r7, #4]
 8107a62:	681b      	ldr	r3, [r3, #0]
 8107a64:	681a      	ldr	r2, [r3, #0]
 8107a66:	687b      	ldr	r3, [r7, #4]
 8107a68:	681b      	ldr	r3, [r3, #0]
 8107a6a:	f022 0201 	bic.w	r2, r2, #1
 8107a6e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8107a70:	687b      	ldr	r3, [r7, #4]
 8107a72:	681b      	ldr	r3, [r3, #0]
 8107a74:	691b      	ldr	r3, [r3, #16]
 8107a76:	687a      	ldr	r2, [r7, #4]
 8107a78:	6812      	ldr	r2, [r2, #0]
 8107a7a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8107a7e:	f023 0303 	bic.w	r3, r3, #3
 8107a82:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8107a84:	687b      	ldr	r3, [r7, #4]
 8107a86:	681b      	ldr	r3, [r3, #0]
 8107a88:	689a      	ldr	r2, [r3, #8]
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	681b      	ldr	r3, [r3, #0]
 8107a8e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8107a92:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8107a94:	687b      	ldr	r3, [r7, #4]
 8107a96:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8107a9a:	b2db      	uxtb	r3, r3
 8107a9c:	2b04      	cmp	r3, #4
 8107a9e:	d014      	beq.n	8107aca <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8107aa0:	68fb      	ldr	r3, [r7, #12]
 8107aa2:	f003 0320 	and.w	r3, r3, #32
 8107aa6:	2b00      	cmp	r3, #0
 8107aa8:	d00f      	beq.n	8107aca <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8107aaa:	687b      	ldr	r3, [r7, #4]
 8107aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107ab0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	681b      	ldr	r3, [r3, #0]
 8107abe:	699a      	ldr	r2, [r3, #24]
 8107ac0:	687b      	ldr	r3, [r7, #4]
 8107ac2:	681b      	ldr	r3, [r3, #0]
 8107ac4:	f042 0220 	orr.w	r2, r2, #32
 8107ac8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8107aca:	687b      	ldr	r3, [r7, #4]
 8107acc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8107ad0:	b2db      	uxtb	r3, r3
 8107ad2:	2b03      	cmp	r3, #3
 8107ad4:	d014      	beq.n	8107b00 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8107ad6:	68fb      	ldr	r3, [r7, #12]
 8107ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107adc:	2b00      	cmp	r3, #0
 8107ade:	d00f      	beq.n	8107b00 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107ae6:	f043 0204 	orr.w	r2, r3, #4
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	681b      	ldr	r3, [r3, #0]
 8107af4:	699a      	ldr	r2, [r3, #24]
 8107af6:	687b      	ldr	r3, [r7, #4]
 8107af8:	681b      	ldr	r3, [r3, #0]
 8107afa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8107afe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8107b00:	68fb      	ldr	r3, [r7, #12]
 8107b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107b06:	2b00      	cmp	r3, #0
 8107b08:	d00f      	beq.n	8107b2a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8107b0a:	687b      	ldr	r3, [r7, #4]
 8107b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107b10:	f043 0201 	orr.w	r2, r3, #1
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8107b1a:	687b      	ldr	r3, [r7, #4]
 8107b1c:	681b      	ldr	r3, [r3, #0]
 8107b1e:	699a      	ldr	r2, [r3, #24]
 8107b20:	687b      	ldr	r3, [r7, #4]
 8107b22:	681b      	ldr	r3, [r3, #0]
 8107b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8107b28:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8107b2a:	68fb      	ldr	r3, [r7, #12]
 8107b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107b30:	2b00      	cmp	r3, #0
 8107b32:	d00f      	beq.n	8107b54 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107b3a:	f043 0208 	orr.w	r2, r3, #8
 8107b3e:	687b      	ldr	r3, [r7, #4]
 8107b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8107b44:	687b      	ldr	r3, [r7, #4]
 8107b46:	681b      	ldr	r3, [r3, #0]
 8107b48:	699a      	ldr	r2, [r3, #24]
 8107b4a:	687b      	ldr	r3, [r7, #4]
 8107b4c:	681b      	ldr	r3, [r3, #0]
 8107b4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8107b52:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8107b54:	687b      	ldr	r3, [r7, #4]
 8107b56:	2200      	movs	r2, #0
 8107b58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	2200      	movs	r2, #0
 8107b60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8107b64:	bf00      	nop
 8107b66:	3714      	adds	r7, #20
 8107b68:	46bd      	mov	sp, r7
 8107b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b6e:	4770      	bx	lr

08107b70 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8107b70:	b580      	push	{r7, lr}
 8107b72:	b084      	sub	sp, #16
 8107b74:	af00      	add	r7, sp, #0
 8107b76:	60f8      	str	r0, [r7, #12]
 8107b78:	60b9      	str	r1, [r7, #8]
 8107b7a:	603b      	str	r3, [r7, #0]
 8107b7c:	4613      	mov	r3, r2
 8107b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107b80:	e010      	b.n	8107ba4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107b82:	f7fa fe3b 	bl	81027fc <HAL_GetTick>
 8107b86:	4602      	mov	r2, r0
 8107b88:	69bb      	ldr	r3, [r7, #24]
 8107b8a:	1ad3      	subs	r3, r2, r3
 8107b8c:	683a      	ldr	r2, [r7, #0]
 8107b8e:	429a      	cmp	r2, r3
 8107b90:	d803      	bhi.n	8107b9a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8107b92:	683b      	ldr	r3, [r7, #0]
 8107b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107b98:	d102      	bne.n	8107ba0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8107b9a:	683b      	ldr	r3, [r7, #0]
 8107b9c:	2b00      	cmp	r3, #0
 8107b9e:	d101      	bne.n	8107ba4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8107ba0:	2303      	movs	r3, #3
 8107ba2:	e00f      	b.n	8107bc4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107ba4:	68fb      	ldr	r3, [r7, #12]
 8107ba6:	681b      	ldr	r3, [r3, #0]
 8107ba8:	695a      	ldr	r2, [r3, #20]
 8107baa:	68bb      	ldr	r3, [r7, #8]
 8107bac:	4013      	ands	r3, r2
 8107bae:	68ba      	ldr	r2, [r7, #8]
 8107bb0:	429a      	cmp	r2, r3
 8107bb2:	bf0c      	ite	eq
 8107bb4:	2301      	moveq	r3, #1
 8107bb6:	2300      	movne	r3, #0
 8107bb8:	b2db      	uxtb	r3, r3
 8107bba:	461a      	mov	r2, r3
 8107bbc:	79fb      	ldrb	r3, [r7, #7]
 8107bbe:	429a      	cmp	r2, r3
 8107bc0:	d0df      	beq.n	8107b82 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8107bc2:	2300      	movs	r3, #0
}
 8107bc4:	4618      	mov	r0, r3
 8107bc6:	3710      	adds	r7, #16
 8107bc8:	46bd      	mov	sp, r7
 8107bca:	bd80      	pop	{r7, pc}

08107bcc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8107bcc:	b480      	push	{r7}
 8107bce:	b085      	sub	sp, #20
 8107bd0:	af00      	add	r7, sp, #0
 8107bd2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107bd8:	095b      	lsrs	r3, r3, #5
 8107bda:	3301      	adds	r3, #1
 8107bdc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8107bde:	687b      	ldr	r3, [r7, #4]
 8107be0:	68db      	ldr	r3, [r3, #12]
 8107be2:	3301      	adds	r3, #1
 8107be4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8107be6:	68bb      	ldr	r3, [r7, #8]
 8107be8:	3307      	adds	r3, #7
 8107bea:	08db      	lsrs	r3, r3, #3
 8107bec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8107bee:	68bb      	ldr	r3, [r7, #8]
 8107bf0:	68fa      	ldr	r2, [r7, #12]
 8107bf2:	fb02 f303 	mul.w	r3, r2, r3
}
 8107bf6:	4618      	mov	r0, r3
 8107bf8:	3714      	adds	r7, #20
 8107bfa:	46bd      	mov	sp, r7
 8107bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c00:	4770      	bx	lr

08107c02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8107c02:	b580      	push	{r7, lr}
 8107c04:	b082      	sub	sp, #8
 8107c06:	af00      	add	r7, sp, #0
 8107c08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107c0a:	687b      	ldr	r3, [r7, #4]
 8107c0c:	2b00      	cmp	r3, #0
 8107c0e:	d101      	bne.n	8107c14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107c10:	2301      	movs	r3, #1
 8107c12:	e049      	b.n	8107ca8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107c14:	687b      	ldr	r3, [r7, #4]
 8107c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8107c1a:	b2db      	uxtb	r3, r3
 8107c1c:	2b00      	cmp	r3, #0
 8107c1e:	d106      	bne.n	8107c2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	2200      	movs	r2, #0
 8107c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107c28:	6878      	ldr	r0, [r7, #4]
 8107c2a:	f7fa f985 	bl	8101f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	2202      	movs	r2, #2
 8107c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107c36:	687b      	ldr	r3, [r7, #4]
 8107c38:	681a      	ldr	r2, [r3, #0]
 8107c3a:	687b      	ldr	r3, [r7, #4]
 8107c3c:	3304      	adds	r3, #4
 8107c3e:	4619      	mov	r1, r3
 8107c40:	4610      	mov	r0, r2
 8107c42:	f000 fb47 	bl	81082d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107c46:	687b      	ldr	r3, [r7, #4]
 8107c48:	2201      	movs	r2, #1
 8107c4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107c4e:	687b      	ldr	r3, [r7, #4]
 8107c50:	2201      	movs	r2, #1
 8107c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8107c56:	687b      	ldr	r3, [r7, #4]
 8107c58:	2201      	movs	r2, #1
 8107c5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8107c5e:	687b      	ldr	r3, [r7, #4]
 8107c60:	2201      	movs	r2, #1
 8107c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8107c66:	687b      	ldr	r3, [r7, #4]
 8107c68:	2201      	movs	r2, #1
 8107c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8107c6e:	687b      	ldr	r3, [r7, #4]
 8107c70:	2201      	movs	r2, #1
 8107c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8107c76:	687b      	ldr	r3, [r7, #4]
 8107c78:	2201      	movs	r2, #1
 8107c7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107c7e:	687b      	ldr	r3, [r7, #4]
 8107c80:	2201      	movs	r2, #1
 8107c82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8107c86:	687b      	ldr	r3, [r7, #4]
 8107c88:	2201      	movs	r2, #1
 8107c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8107c8e:	687b      	ldr	r3, [r7, #4]
 8107c90:	2201      	movs	r2, #1
 8107c92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8107c96:	687b      	ldr	r3, [r7, #4]
 8107c98:	2201      	movs	r2, #1
 8107c9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107c9e:	687b      	ldr	r3, [r7, #4]
 8107ca0:	2201      	movs	r2, #1
 8107ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8107ca6:	2300      	movs	r3, #0
}
 8107ca8:	4618      	mov	r0, r3
 8107caa:	3708      	adds	r7, #8
 8107cac:	46bd      	mov	sp, r7
 8107cae:	bd80      	pop	{r7, pc}

08107cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8107cb0:	b480      	push	{r7}
 8107cb2:	b085      	sub	sp, #20
 8107cb4:	af00      	add	r7, sp, #0
 8107cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8107cb8:	687b      	ldr	r3, [r7, #4]
 8107cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8107cbe:	b2db      	uxtb	r3, r3
 8107cc0:	2b01      	cmp	r3, #1
 8107cc2:	d001      	beq.n	8107cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8107cc4:	2301      	movs	r3, #1
 8107cc6:	e054      	b.n	8107d72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107cc8:	687b      	ldr	r3, [r7, #4]
 8107cca:	2202      	movs	r2, #2
 8107ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8107cd0:	687b      	ldr	r3, [r7, #4]
 8107cd2:	681b      	ldr	r3, [r3, #0]
 8107cd4:	68da      	ldr	r2, [r3, #12]
 8107cd6:	687b      	ldr	r3, [r7, #4]
 8107cd8:	681b      	ldr	r3, [r3, #0]
 8107cda:	f042 0201 	orr.w	r2, r2, #1
 8107cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107ce0:	687b      	ldr	r3, [r7, #4]
 8107ce2:	681b      	ldr	r3, [r3, #0]
 8107ce4:	4a26      	ldr	r2, [pc, #152]	@ (8107d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8107ce6:	4293      	cmp	r3, r2
 8107ce8:	d022      	beq.n	8107d30 <HAL_TIM_Base_Start_IT+0x80>
 8107cea:	687b      	ldr	r3, [r7, #4]
 8107cec:	681b      	ldr	r3, [r3, #0]
 8107cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107cf2:	d01d      	beq.n	8107d30 <HAL_TIM_Base_Start_IT+0x80>
 8107cf4:	687b      	ldr	r3, [r7, #4]
 8107cf6:	681b      	ldr	r3, [r3, #0]
 8107cf8:	4a22      	ldr	r2, [pc, #136]	@ (8107d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8107cfa:	4293      	cmp	r3, r2
 8107cfc:	d018      	beq.n	8107d30 <HAL_TIM_Base_Start_IT+0x80>
 8107cfe:	687b      	ldr	r3, [r7, #4]
 8107d00:	681b      	ldr	r3, [r3, #0]
 8107d02:	4a21      	ldr	r2, [pc, #132]	@ (8107d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8107d04:	4293      	cmp	r3, r2
 8107d06:	d013      	beq.n	8107d30 <HAL_TIM_Base_Start_IT+0x80>
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	681b      	ldr	r3, [r3, #0]
 8107d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8107d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8107d0e:	4293      	cmp	r3, r2
 8107d10:	d00e      	beq.n	8107d30 <HAL_TIM_Base_Start_IT+0x80>
 8107d12:	687b      	ldr	r3, [r7, #4]
 8107d14:	681b      	ldr	r3, [r3, #0]
 8107d16:	4a1e      	ldr	r2, [pc, #120]	@ (8107d90 <HAL_TIM_Base_Start_IT+0xe0>)
 8107d18:	4293      	cmp	r3, r2
 8107d1a:	d009      	beq.n	8107d30 <HAL_TIM_Base_Start_IT+0x80>
 8107d1c:	687b      	ldr	r3, [r7, #4]
 8107d1e:	681b      	ldr	r3, [r3, #0]
 8107d20:	4a1c      	ldr	r2, [pc, #112]	@ (8107d94 <HAL_TIM_Base_Start_IT+0xe4>)
 8107d22:	4293      	cmp	r3, r2
 8107d24:	d004      	beq.n	8107d30 <HAL_TIM_Base_Start_IT+0x80>
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	681b      	ldr	r3, [r3, #0]
 8107d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8107d98 <HAL_TIM_Base_Start_IT+0xe8>)
 8107d2c:	4293      	cmp	r3, r2
 8107d2e:	d115      	bne.n	8107d5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	681b      	ldr	r3, [r3, #0]
 8107d34:	689a      	ldr	r2, [r3, #8]
 8107d36:	4b19      	ldr	r3, [pc, #100]	@ (8107d9c <HAL_TIM_Base_Start_IT+0xec>)
 8107d38:	4013      	ands	r3, r2
 8107d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107d3c:	68fb      	ldr	r3, [r7, #12]
 8107d3e:	2b06      	cmp	r3, #6
 8107d40:	d015      	beq.n	8107d6e <HAL_TIM_Base_Start_IT+0xbe>
 8107d42:	68fb      	ldr	r3, [r7, #12]
 8107d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107d48:	d011      	beq.n	8107d6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8107d4a:	687b      	ldr	r3, [r7, #4]
 8107d4c:	681b      	ldr	r3, [r3, #0]
 8107d4e:	681a      	ldr	r2, [r3, #0]
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	681b      	ldr	r3, [r3, #0]
 8107d54:	f042 0201 	orr.w	r2, r2, #1
 8107d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107d5a:	e008      	b.n	8107d6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	681b      	ldr	r3, [r3, #0]
 8107d60:	681a      	ldr	r2, [r3, #0]
 8107d62:	687b      	ldr	r3, [r7, #4]
 8107d64:	681b      	ldr	r3, [r3, #0]
 8107d66:	f042 0201 	orr.w	r2, r2, #1
 8107d6a:	601a      	str	r2, [r3, #0]
 8107d6c:	e000      	b.n	8107d70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107d70:	2300      	movs	r3, #0
}
 8107d72:	4618      	mov	r0, r3
 8107d74:	3714      	adds	r7, #20
 8107d76:	46bd      	mov	sp, r7
 8107d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d7c:	4770      	bx	lr
 8107d7e:	bf00      	nop
 8107d80:	40010000 	.word	0x40010000
 8107d84:	40000400 	.word	0x40000400
 8107d88:	40000800 	.word	0x40000800
 8107d8c:	40000c00 	.word	0x40000c00
 8107d90:	40010400 	.word	0x40010400
 8107d94:	40001800 	.word	0x40001800
 8107d98:	40014000 	.word	0x40014000
 8107d9c:	00010007 	.word	0x00010007

08107da0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8107da0:	b580      	push	{r7, lr}
 8107da2:	b082      	sub	sp, #8
 8107da4:	af00      	add	r7, sp, #0
 8107da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107da8:	687b      	ldr	r3, [r7, #4]
 8107daa:	2b00      	cmp	r3, #0
 8107dac:	d101      	bne.n	8107db2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8107dae:	2301      	movs	r3, #1
 8107db0:	e049      	b.n	8107e46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8107db8:	b2db      	uxtb	r3, r3
 8107dba:	2b00      	cmp	r3, #0
 8107dbc:	d106      	bne.n	8107dcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	2200      	movs	r2, #0
 8107dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8107dc6:	6878      	ldr	r0, [r7, #4]
 8107dc8:	f7fa f86c 	bl	8101ea4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	2202      	movs	r2, #2
 8107dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107dd4:	687b      	ldr	r3, [r7, #4]
 8107dd6:	681a      	ldr	r2, [r3, #0]
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	3304      	adds	r3, #4
 8107ddc:	4619      	mov	r1, r3
 8107dde:	4610      	mov	r0, r2
 8107de0:	f000 fa78 	bl	81082d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107de4:	687b      	ldr	r3, [r7, #4]
 8107de6:	2201      	movs	r2, #1
 8107de8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	2201      	movs	r2, #1
 8107df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	2201      	movs	r2, #1
 8107df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8107dfc:	687b      	ldr	r3, [r7, #4]
 8107dfe:	2201      	movs	r2, #1
 8107e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8107e04:	687b      	ldr	r3, [r7, #4]
 8107e06:	2201      	movs	r2, #1
 8107e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	2201      	movs	r2, #1
 8107e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8107e14:	687b      	ldr	r3, [r7, #4]
 8107e16:	2201      	movs	r2, #1
 8107e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	2201      	movs	r2, #1
 8107e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8107e24:	687b      	ldr	r3, [r7, #4]
 8107e26:	2201      	movs	r2, #1
 8107e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8107e2c:	687b      	ldr	r3, [r7, #4]
 8107e2e:	2201      	movs	r2, #1
 8107e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8107e34:	687b      	ldr	r3, [r7, #4]
 8107e36:	2201      	movs	r2, #1
 8107e38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	2201      	movs	r2, #1
 8107e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8107e44:	2300      	movs	r3, #0
}
 8107e46:	4618      	mov	r0, r3
 8107e48:	3708      	adds	r7, #8
 8107e4a:	46bd      	mov	sp, r7
 8107e4c:	bd80      	pop	{r7, pc}

08107e4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8107e4e:	b580      	push	{r7, lr}
 8107e50:	b084      	sub	sp, #16
 8107e52:	af00      	add	r7, sp, #0
 8107e54:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8107e56:	687b      	ldr	r3, [r7, #4]
 8107e58:	681b      	ldr	r3, [r3, #0]
 8107e5a:	68db      	ldr	r3, [r3, #12]
 8107e5c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8107e5e:	687b      	ldr	r3, [r7, #4]
 8107e60:	681b      	ldr	r3, [r3, #0]
 8107e62:	691b      	ldr	r3, [r3, #16]
 8107e64:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8107e66:	68bb      	ldr	r3, [r7, #8]
 8107e68:	f003 0302 	and.w	r3, r3, #2
 8107e6c:	2b00      	cmp	r3, #0
 8107e6e:	d020      	beq.n	8107eb2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8107e70:	68fb      	ldr	r3, [r7, #12]
 8107e72:	f003 0302 	and.w	r3, r3, #2
 8107e76:	2b00      	cmp	r3, #0
 8107e78:	d01b      	beq.n	8107eb2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8107e7a:	687b      	ldr	r3, [r7, #4]
 8107e7c:	681b      	ldr	r3, [r3, #0]
 8107e7e:	f06f 0202 	mvn.w	r2, #2
 8107e82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8107e84:	687b      	ldr	r3, [r7, #4]
 8107e86:	2201      	movs	r2, #1
 8107e88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8107e8a:	687b      	ldr	r3, [r7, #4]
 8107e8c:	681b      	ldr	r3, [r3, #0]
 8107e8e:	699b      	ldr	r3, [r3, #24]
 8107e90:	f003 0303 	and.w	r3, r3, #3
 8107e94:	2b00      	cmp	r3, #0
 8107e96:	d003      	beq.n	8107ea0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8107e98:	6878      	ldr	r0, [r7, #4]
 8107e9a:	f000 f9fd 	bl	8108298 <HAL_TIM_IC_CaptureCallback>
 8107e9e:	e005      	b.n	8107eac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8107ea0:	6878      	ldr	r0, [r7, #4]
 8107ea2:	f000 f9ef 	bl	8108284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107ea6:	6878      	ldr	r0, [r7, #4]
 8107ea8:	f000 fa00 	bl	81082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107eac:	687b      	ldr	r3, [r7, #4]
 8107eae:	2200      	movs	r2, #0
 8107eb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8107eb2:	68bb      	ldr	r3, [r7, #8]
 8107eb4:	f003 0304 	and.w	r3, r3, #4
 8107eb8:	2b00      	cmp	r3, #0
 8107eba:	d020      	beq.n	8107efe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8107ebc:	68fb      	ldr	r3, [r7, #12]
 8107ebe:	f003 0304 	and.w	r3, r3, #4
 8107ec2:	2b00      	cmp	r3, #0
 8107ec4:	d01b      	beq.n	8107efe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8107ec6:	687b      	ldr	r3, [r7, #4]
 8107ec8:	681b      	ldr	r3, [r3, #0]
 8107eca:	f06f 0204 	mvn.w	r2, #4
 8107ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8107ed0:	687b      	ldr	r3, [r7, #4]
 8107ed2:	2202      	movs	r2, #2
 8107ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8107ed6:	687b      	ldr	r3, [r7, #4]
 8107ed8:	681b      	ldr	r3, [r3, #0]
 8107eda:	699b      	ldr	r3, [r3, #24]
 8107edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8107ee0:	2b00      	cmp	r3, #0
 8107ee2:	d003      	beq.n	8107eec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107ee4:	6878      	ldr	r0, [r7, #4]
 8107ee6:	f000 f9d7 	bl	8108298 <HAL_TIM_IC_CaptureCallback>
 8107eea:	e005      	b.n	8107ef8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107eec:	6878      	ldr	r0, [r7, #4]
 8107eee:	f000 f9c9 	bl	8108284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107ef2:	6878      	ldr	r0, [r7, #4]
 8107ef4:	f000 f9da 	bl	81082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	2200      	movs	r2, #0
 8107efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8107efe:	68bb      	ldr	r3, [r7, #8]
 8107f00:	f003 0308 	and.w	r3, r3, #8
 8107f04:	2b00      	cmp	r3, #0
 8107f06:	d020      	beq.n	8107f4a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8107f08:	68fb      	ldr	r3, [r7, #12]
 8107f0a:	f003 0308 	and.w	r3, r3, #8
 8107f0e:	2b00      	cmp	r3, #0
 8107f10:	d01b      	beq.n	8107f4a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8107f12:	687b      	ldr	r3, [r7, #4]
 8107f14:	681b      	ldr	r3, [r3, #0]
 8107f16:	f06f 0208 	mvn.w	r2, #8
 8107f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8107f1c:	687b      	ldr	r3, [r7, #4]
 8107f1e:	2204      	movs	r2, #4
 8107f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8107f22:	687b      	ldr	r3, [r7, #4]
 8107f24:	681b      	ldr	r3, [r3, #0]
 8107f26:	69db      	ldr	r3, [r3, #28]
 8107f28:	f003 0303 	and.w	r3, r3, #3
 8107f2c:	2b00      	cmp	r3, #0
 8107f2e:	d003      	beq.n	8107f38 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107f30:	6878      	ldr	r0, [r7, #4]
 8107f32:	f000 f9b1 	bl	8108298 <HAL_TIM_IC_CaptureCallback>
 8107f36:	e005      	b.n	8107f44 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107f38:	6878      	ldr	r0, [r7, #4]
 8107f3a:	f000 f9a3 	bl	8108284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107f3e:	6878      	ldr	r0, [r7, #4]
 8107f40:	f000 f9b4 	bl	81082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107f44:	687b      	ldr	r3, [r7, #4]
 8107f46:	2200      	movs	r2, #0
 8107f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8107f4a:	68bb      	ldr	r3, [r7, #8]
 8107f4c:	f003 0310 	and.w	r3, r3, #16
 8107f50:	2b00      	cmp	r3, #0
 8107f52:	d020      	beq.n	8107f96 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8107f54:	68fb      	ldr	r3, [r7, #12]
 8107f56:	f003 0310 	and.w	r3, r3, #16
 8107f5a:	2b00      	cmp	r3, #0
 8107f5c:	d01b      	beq.n	8107f96 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	f06f 0210 	mvn.w	r2, #16
 8107f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	2208      	movs	r2, #8
 8107f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8107f6e:	687b      	ldr	r3, [r7, #4]
 8107f70:	681b      	ldr	r3, [r3, #0]
 8107f72:	69db      	ldr	r3, [r3, #28]
 8107f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8107f78:	2b00      	cmp	r3, #0
 8107f7a:	d003      	beq.n	8107f84 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107f7c:	6878      	ldr	r0, [r7, #4]
 8107f7e:	f000 f98b 	bl	8108298 <HAL_TIM_IC_CaptureCallback>
 8107f82:	e005      	b.n	8107f90 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107f84:	6878      	ldr	r0, [r7, #4]
 8107f86:	f000 f97d 	bl	8108284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107f8a:	6878      	ldr	r0, [r7, #4]
 8107f8c:	f000 f98e 	bl	81082ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	2200      	movs	r2, #0
 8107f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8107f96:	68bb      	ldr	r3, [r7, #8]
 8107f98:	f003 0301 	and.w	r3, r3, #1
 8107f9c:	2b00      	cmp	r3, #0
 8107f9e:	d00c      	beq.n	8107fba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8107fa0:	68fb      	ldr	r3, [r7, #12]
 8107fa2:	f003 0301 	and.w	r3, r3, #1
 8107fa6:	2b00      	cmp	r3, #0
 8107fa8:	d007      	beq.n	8107fba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8107faa:	687b      	ldr	r3, [r7, #4]
 8107fac:	681b      	ldr	r3, [r3, #0]
 8107fae:	f06f 0201 	mvn.w	r2, #1
 8107fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8107fb4:	6878      	ldr	r0, [r7, #4]
 8107fb6:	f7f9 fd25 	bl	8101a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8107fba:	68bb      	ldr	r3, [r7, #8]
 8107fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107fc0:	2b00      	cmp	r3, #0
 8107fc2:	d104      	bne.n	8107fce <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8107fc4:	68bb      	ldr	r3, [r7, #8]
 8107fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8107fca:	2b00      	cmp	r3, #0
 8107fcc:	d00c      	beq.n	8107fe8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8107fce:	68fb      	ldr	r3, [r7, #12]
 8107fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107fd4:	2b00      	cmp	r3, #0
 8107fd6:	d007      	beq.n	8107fe8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	681b      	ldr	r3, [r3, #0]
 8107fdc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8107fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8107fe2:	6878      	ldr	r0, [r7, #4]
 8107fe4:	f000 fe02 	bl	8108bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8107fe8:	68bb      	ldr	r3, [r7, #8]
 8107fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107fee:	2b00      	cmp	r3, #0
 8107ff0:	d00c      	beq.n	810800c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8107ff2:	68fb      	ldr	r3, [r7, #12]
 8107ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107ff8:	2b00      	cmp	r3, #0
 8107ffa:	d007      	beq.n	810800c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	681b      	ldr	r3, [r3, #0]
 8108000:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8108004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8108006:	6878      	ldr	r0, [r7, #4]
 8108008:	f000 fdfa 	bl	8108c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810800c:	68bb      	ldr	r3, [r7, #8]
 810800e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108012:	2b00      	cmp	r3, #0
 8108014:	d00c      	beq.n	8108030 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8108016:	68fb      	ldr	r3, [r7, #12]
 8108018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810801c:	2b00      	cmp	r3, #0
 810801e:	d007      	beq.n	8108030 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	681b      	ldr	r3, [r3, #0]
 8108024:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8108028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810802a:	6878      	ldr	r0, [r7, #4]
 810802c:	f000 f948 	bl	81082c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8108030:	68bb      	ldr	r3, [r7, #8]
 8108032:	f003 0320 	and.w	r3, r3, #32
 8108036:	2b00      	cmp	r3, #0
 8108038:	d00c      	beq.n	8108054 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810803a:	68fb      	ldr	r3, [r7, #12]
 810803c:	f003 0320 	and.w	r3, r3, #32
 8108040:	2b00      	cmp	r3, #0
 8108042:	d007      	beq.n	8108054 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8108044:	687b      	ldr	r3, [r7, #4]
 8108046:	681b      	ldr	r3, [r3, #0]
 8108048:	f06f 0220 	mvn.w	r2, #32
 810804c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810804e:	6878      	ldr	r0, [r7, #4]
 8108050:	f000 fdc2 	bl	8108bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8108054:	bf00      	nop
 8108056:	3710      	adds	r7, #16
 8108058:	46bd      	mov	sp, r7
 810805a:	bd80      	pop	{r7, pc}

0810805c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810805c:	b580      	push	{r7, lr}
 810805e:	b086      	sub	sp, #24
 8108060:	af00      	add	r7, sp, #0
 8108062:	60f8      	str	r0, [r7, #12]
 8108064:	60b9      	str	r1, [r7, #8]
 8108066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108068:	2300      	movs	r3, #0
 810806a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810806c:	68fb      	ldr	r3, [r7, #12]
 810806e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8108072:	2b01      	cmp	r3, #1
 8108074:	d101      	bne.n	810807a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8108076:	2302      	movs	r3, #2
 8108078:	e0ff      	b.n	810827a <HAL_TIM_PWM_ConfigChannel+0x21e>
 810807a:	68fb      	ldr	r3, [r7, #12]
 810807c:	2201      	movs	r2, #1
 810807e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	2b14      	cmp	r3, #20
 8108086:	f200 80f0 	bhi.w	810826a <HAL_TIM_PWM_ConfigChannel+0x20e>
 810808a:	a201      	add	r2, pc, #4	@ (adr r2, 8108090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 810808c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108090:	081080e5 	.word	0x081080e5
 8108094:	0810826b 	.word	0x0810826b
 8108098:	0810826b 	.word	0x0810826b
 810809c:	0810826b 	.word	0x0810826b
 81080a0:	08108125 	.word	0x08108125
 81080a4:	0810826b 	.word	0x0810826b
 81080a8:	0810826b 	.word	0x0810826b
 81080ac:	0810826b 	.word	0x0810826b
 81080b0:	08108167 	.word	0x08108167
 81080b4:	0810826b 	.word	0x0810826b
 81080b8:	0810826b 	.word	0x0810826b
 81080bc:	0810826b 	.word	0x0810826b
 81080c0:	081081a7 	.word	0x081081a7
 81080c4:	0810826b 	.word	0x0810826b
 81080c8:	0810826b 	.word	0x0810826b
 81080cc:	0810826b 	.word	0x0810826b
 81080d0:	081081e9 	.word	0x081081e9
 81080d4:	0810826b 	.word	0x0810826b
 81080d8:	0810826b 	.word	0x0810826b
 81080dc:	0810826b 	.word	0x0810826b
 81080e0:	08108229 	.word	0x08108229
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81080e4:	68fb      	ldr	r3, [r7, #12]
 81080e6:	681b      	ldr	r3, [r3, #0]
 81080e8:	68b9      	ldr	r1, [r7, #8]
 81080ea:	4618      	mov	r0, r3
 81080ec:	f000 f992 	bl	8108414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81080f0:	68fb      	ldr	r3, [r7, #12]
 81080f2:	681b      	ldr	r3, [r3, #0]
 81080f4:	699a      	ldr	r2, [r3, #24]
 81080f6:	68fb      	ldr	r3, [r7, #12]
 81080f8:	681b      	ldr	r3, [r3, #0]
 81080fa:	f042 0208 	orr.w	r2, r2, #8
 81080fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8108100:	68fb      	ldr	r3, [r7, #12]
 8108102:	681b      	ldr	r3, [r3, #0]
 8108104:	699a      	ldr	r2, [r3, #24]
 8108106:	68fb      	ldr	r3, [r7, #12]
 8108108:	681b      	ldr	r3, [r3, #0]
 810810a:	f022 0204 	bic.w	r2, r2, #4
 810810e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8108110:	68fb      	ldr	r3, [r7, #12]
 8108112:	681b      	ldr	r3, [r3, #0]
 8108114:	6999      	ldr	r1, [r3, #24]
 8108116:	68bb      	ldr	r3, [r7, #8]
 8108118:	691a      	ldr	r2, [r3, #16]
 810811a:	68fb      	ldr	r3, [r7, #12]
 810811c:	681b      	ldr	r3, [r3, #0]
 810811e:	430a      	orrs	r2, r1
 8108120:	619a      	str	r2, [r3, #24]
      break;
 8108122:	e0a5      	b.n	8108270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8108124:	68fb      	ldr	r3, [r7, #12]
 8108126:	681b      	ldr	r3, [r3, #0]
 8108128:	68b9      	ldr	r1, [r7, #8]
 810812a:	4618      	mov	r0, r3
 810812c:	f000 fa02 	bl	8108534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8108130:	68fb      	ldr	r3, [r7, #12]
 8108132:	681b      	ldr	r3, [r3, #0]
 8108134:	699a      	ldr	r2, [r3, #24]
 8108136:	68fb      	ldr	r3, [r7, #12]
 8108138:	681b      	ldr	r3, [r3, #0]
 810813a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810813e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8108140:	68fb      	ldr	r3, [r7, #12]
 8108142:	681b      	ldr	r3, [r3, #0]
 8108144:	699a      	ldr	r2, [r3, #24]
 8108146:	68fb      	ldr	r3, [r7, #12]
 8108148:	681b      	ldr	r3, [r3, #0]
 810814a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810814e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8108150:	68fb      	ldr	r3, [r7, #12]
 8108152:	681b      	ldr	r3, [r3, #0]
 8108154:	6999      	ldr	r1, [r3, #24]
 8108156:	68bb      	ldr	r3, [r7, #8]
 8108158:	691b      	ldr	r3, [r3, #16]
 810815a:	021a      	lsls	r2, r3, #8
 810815c:	68fb      	ldr	r3, [r7, #12]
 810815e:	681b      	ldr	r3, [r3, #0]
 8108160:	430a      	orrs	r2, r1
 8108162:	619a      	str	r2, [r3, #24]
      break;
 8108164:	e084      	b.n	8108270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8108166:	68fb      	ldr	r3, [r7, #12]
 8108168:	681b      	ldr	r3, [r3, #0]
 810816a:	68b9      	ldr	r1, [r7, #8]
 810816c:	4618      	mov	r0, r3
 810816e:	f000 fa6b 	bl	8108648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8108172:	68fb      	ldr	r3, [r7, #12]
 8108174:	681b      	ldr	r3, [r3, #0]
 8108176:	69da      	ldr	r2, [r3, #28]
 8108178:	68fb      	ldr	r3, [r7, #12]
 810817a:	681b      	ldr	r3, [r3, #0]
 810817c:	f042 0208 	orr.w	r2, r2, #8
 8108180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8108182:	68fb      	ldr	r3, [r7, #12]
 8108184:	681b      	ldr	r3, [r3, #0]
 8108186:	69da      	ldr	r2, [r3, #28]
 8108188:	68fb      	ldr	r3, [r7, #12]
 810818a:	681b      	ldr	r3, [r3, #0]
 810818c:	f022 0204 	bic.w	r2, r2, #4
 8108190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8108192:	68fb      	ldr	r3, [r7, #12]
 8108194:	681b      	ldr	r3, [r3, #0]
 8108196:	69d9      	ldr	r1, [r3, #28]
 8108198:	68bb      	ldr	r3, [r7, #8]
 810819a:	691a      	ldr	r2, [r3, #16]
 810819c:	68fb      	ldr	r3, [r7, #12]
 810819e:	681b      	ldr	r3, [r3, #0]
 81081a0:	430a      	orrs	r2, r1
 81081a2:	61da      	str	r2, [r3, #28]
      break;
 81081a4:	e064      	b.n	8108270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81081a6:	68fb      	ldr	r3, [r7, #12]
 81081a8:	681b      	ldr	r3, [r3, #0]
 81081aa:	68b9      	ldr	r1, [r7, #8]
 81081ac:	4618      	mov	r0, r3
 81081ae:	f000 fad3 	bl	8108758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81081b2:	68fb      	ldr	r3, [r7, #12]
 81081b4:	681b      	ldr	r3, [r3, #0]
 81081b6:	69da      	ldr	r2, [r3, #28]
 81081b8:	68fb      	ldr	r3, [r7, #12]
 81081ba:	681b      	ldr	r3, [r3, #0]
 81081bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81081c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81081c2:	68fb      	ldr	r3, [r7, #12]
 81081c4:	681b      	ldr	r3, [r3, #0]
 81081c6:	69da      	ldr	r2, [r3, #28]
 81081c8:	68fb      	ldr	r3, [r7, #12]
 81081ca:	681b      	ldr	r3, [r3, #0]
 81081cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81081d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81081d2:	68fb      	ldr	r3, [r7, #12]
 81081d4:	681b      	ldr	r3, [r3, #0]
 81081d6:	69d9      	ldr	r1, [r3, #28]
 81081d8:	68bb      	ldr	r3, [r7, #8]
 81081da:	691b      	ldr	r3, [r3, #16]
 81081dc:	021a      	lsls	r2, r3, #8
 81081de:	68fb      	ldr	r3, [r7, #12]
 81081e0:	681b      	ldr	r3, [r3, #0]
 81081e2:	430a      	orrs	r2, r1
 81081e4:	61da      	str	r2, [r3, #28]
      break;
 81081e6:	e043      	b.n	8108270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81081e8:	68fb      	ldr	r3, [r7, #12]
 81081ea:	681b      	ldr	r3, [r3, #0]
 81081ec:	68b9      	ldr	r1, [r7, #8]
 81081ee:	4618      	mov	r0, r3
 81081f0:	f000 fb1c 	bl	810882c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81081f4:	68fb      	ldr	r3, [r7, #12]
 81081f6:	681b      	ldr	r3, [r3, #0]
 81081f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81081fa:	68fb      	ldr	r3, [r7, #12]
 81081fc:	681b      	ldr	r3, [r3, #0]
 81081fe:	f042 0208 	orr.w	r2, r2, #8
 8108202:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8108204:	68fb      	ldr	r3, [r7, #12]
 8108206:	681b      	ldr	r3, [r3, #0]
 8108208:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810820a:	68fb      	ldr	r3, [r7, #12]
 810820c:	681b      	ldr	r3, [r3, #0]
 810820e:	f022 0204 	bic.w	r2, r2, #4
 8108212:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8108214:	68fb      	ldr	r3, [r7, #12]
 8108216:	681b      	ldr	r3, [r3, #0]
 8108218:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810821a:	68bb      	ldr	r3, [r7, #8]
 810821c:	691a      	ldr	r2, [r3, #16]
 810821e:	68fb      	ldr	r3, [r7, #12]
 8108220:	681b      	ldr	r3, [r3, #0]
 8108222:	430a      	orrs	r2, r1
 8108224:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8108226:	e023      	b.n	8108270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8108228:	68fb      	ldr	r3, [r7, #12]
 810822a:	681b      	ldr	r3, [r3, #0]
 810822c:	68b9      	ldr	r1, [r7, #8]
 810822e:	4618      	mov	r0, r3
 8108230:	f000 fb60 	bl	81088f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8108234:	68fb      	ldr	r3, [r7, #12]
 8108236:	681b      	ldr	r3, [r3, #0]
 8108238:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810823a:	68fb      	ldr	r3, [r7, #12]
 810823c:	681b      	ldr	r3, [r3, #0]
 810823e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8108242:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8108244:	68fb      	ldr	r3, [r7, #12]
 8108246:	681b      	ldr	r3, [r3, #0]
 8108248:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810824a:	68fb      	ldr	r3, [r7, #12]
 810824c:	681b      	ldr	r3, [r3, #0]
 810824e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8108252:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8108254:	68fb      	ldr	r3, [r7, #12]
 8108256:	681b      	ldr	r3, [r3, #0]
 8108258:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810825a:	68bb      	ldr	r3, [r7, #8]
 810825c:	691b      	ldr	r3, [r3, #16]
 810825e:	021a      	lsls	r2, r3, #8
 8108260:	68fb      	ldr	r3, [r7, #12]
 8108262:	681b      	ldr	r3, [r3, #0]
 8108264:	430a      	orrs	r2, r1
 8108266:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8108268:	e002      	b.n	8108270 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810826a:	2301      	movs	r3, #1
 810826c:	75fb      	strb	r3, [r7, #23]
      break;
 810826e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8108270:	68fb      	ldr	r3, [r7, #12]
 8108272:	2200      	movs	r2, #0
 8108274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8108278:	7dfb      	ldrb	r3, [r7, #23]
}
 810827a:	4618      	mov	r0, r3
 810827c:	3718      	adds	r7, #24
 810827e:	46bd      	mov	sp, r7
 8108280:	bd80      	pop	{r7, pc}
 8108282:	bf00      	nop

08108284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8108284:	b480      	push	{r7}
 8108286:	b083      	sub	sp, #12
 8108288:	af00      	add	r7, sp, #0
 810828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810828c:	bf00      	nop
 810828e:	370c      	adds	r7, #12
 8108290:	46bd      	mov	sp, r7
 8108292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108296:	4770      	bx	lr

08108298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8108298:	b480      	push	{r7}
 810829a:	b083      	sub	sp, #12
 810829c:	af00      	add	r7, sp, #0
 810829e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81082a0:	bf00      	nop
 81082a2:	370c      	adds	r7, #12
 81082a4:	46bd      	mov	sp, r7
 81082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082aa:	4770      	bx	lr

081082ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81082ac:	b480      	push	{r7}
 81082ae:	b083      	sub	sp, #12
 81082b0:	af00      	add	r7, sp, #0
 81082b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81082b4:	bf00      	nop
 81082b6:	370c      	adds	r7, #12
 81082b8:	46bd      	mov	sp, r7
 81082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082be:	4770      	bx	lr

081082c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81082c0:	b480      	push	{r7}
 81082c2:	b083      	sub	sp, #12
 81082c4:	af00      	add	r7, sp, #0
 81082c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81082c8:	bf00      	nop
 81082ca:	370c      	adds	r7, #12
 81082cc:	46bd      	mov	sp, r7
 81082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082d2:	4770      	bx	lr

081082d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81082d4:	b480      	push	{r7}
 81082d6:	b085      	sub	sp, #20
 81082d8:	af00      	add	r7, sp, #0
 81082da:	6078      	str	r0, [r7, #4]
 81082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81082de:	687b      	ldr	r3, [r7, #4]
 81082e0:	681b      	ldr	r3, [r3, #0]
 81082e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81082e4:	687b      	ldr	r3, [r7, #4]
 81082e6:	4a43      	ldr	r2, [pc, #268]	@ (81083f4 <TIM_Base_SetConfig+0x120>)
 81082e8:	4293      	cmp	r3, r2
 81082ea:	d013      	beq.n	8108314 <TIM_Base_SetConfig+0x40>
 81082ec:	687b      	ldr	r3, [r7, #4]
 81082ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81082f2:	d00f      	beq.n	8108314 <TIM_Base_SetConfig+0x40>
 81082f4:	687b      	ldr	r3, [r7, #4]
 81082f6:	4a40      	ldr	r2, [pc, #256]	@ (81083f8 <TIM_Base_SetConfig+0x124>)
 81082f8:	4293      	cmp	r3, r2
 81082fa:	d00b      	beq.n	8108314 <TIM_Base_SetConfig+0x40>
 81082fc:	687b      	ldr	r3, [r7, #4]
 81082fe:	4a3f      	ldr	r2, [pc, #252]	@ (81083fc <TIM_Base_SetConfig+0x128>)
 8108300:	4293      	cmp	r3, r2
 8108302:	d007      	beq.n	8108314 <TIM_Base_SetConfig+0x40>
 8108304:	687b      	ldr	r3, [r7, #4]
 8108306:	4a3e      	ldr	r2, [pc, #248]	@ (8108400 <TIM_Base_SetConfig+0x12c>)
 8108308:	4293      	cmp	r3, r2
 810830a:	d003      	beq.n	8108314 <TIM_Base_SetConfig+0x40>
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	4a3d      	ldr	r2, [pc, #244]	@ (8108404 <TIM_Base_SetConfig+0x130>)
 8108310:	4293      	cmp	r3, r2
 8108312:	d108      	bne.n	8108326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8108314:	68fb      	ldr	r3, [r7, #12]
 8108316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810831a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810831c:	683b      	ldr	r3, [r7, #0]
 810831e:	685b      	ldr	r3, [r3, #4]
 8108320:	68fa      	ldr	r2, [r7, #12]
 8108322:	4313      	orrs	r3, r2
 8108324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	4a32      	ldr	r2, [pc, #200]	@ (81083f4 <TIM_Base_SetConfig+0x120>)
 810832a:	4293      	cmp	r3, r2
 810832c:	d01f      	beq.n	810836e <TIM_Base_SetConfig+0x9a>
 810832e:	687b      	ldr	r3, [r7, #4]
 8108330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108334:	d01b      	beq.n	810836e <TIM_Base_SetConfig+0x9a>
 8108336:	687b      	ldr	r3, [r7, #4]
 8108338:	4a2f      	ldr	r2, [pc, #188]	@ (81083f8 <TIM_Base_SetConfig+0x124>)
 810833a:	4293      	cmp	r3, r2
 810833c:	d017      	beq.n	810836e <TIM_Base_SetConfig+0x9a>
 810833e:	687b      	ldr	r3, [r7, #4]
 8108340:	4a2e      	ldr	r2, [pc, #184]	@ (81083fc <TIM_Base_SetConfig+0x128>)
 8108342:	4293      	cmp	r3, r2
 8108344:	d013      	beq.n	810836e <TIM_Base_SetConfig+0x9a>
 8108346:	687b      	ldr	r3, [r7, #4]
 8108348:	4a2d      	ldr	r2, [pc, #180]	@ (8108400 <TIM_Base_SetConfig+0x12c>)
 810834a:	4293      	cmp	r3, r2
 810834c:	d00f      	beq.n	810836e <TIM_Base_SetConfig+0x9a>
 810834e:	687b      	ldr	r3, [r7, #4]
 8108350:	4a2c      	ldr	r2, [pc, #176]	@ (8108404 <TIM_Base_SetConfig+0x130>)
 8108352:	4293      	cmp	r3, r2
 8108354:	d00b      	beq.n	810836e <TIM_Base_SetConfig+0x9a>
 8108356:	687b      	ldr	r3, [r7, #4]
 8108358:	4a2b      	ldr	r2, [pc, #172]	@ (8108408 <TIM_Base_SetConfig+0x134>)
 810835a:	4293      	cmp	r3, r2
 810835c:	d007      	beq.n	810836e <TIM_Base_SetConfig+0x9a>
 810835e:	687b      	ldr	r3, [r7, #4]
 8108360:	4a2a      	ldr	r2, [pc, #168]	@ (810840c <TIM_Base_SetConfig+0x138>)
 8108362:	4293      	cmp	r3, r2
 8108364:	d003      	beq.n	810836e <TIM_Base_SetConfig+0x9a>
 8108366:	687b      	ldr	r3, [r7, #4]
 8108368:	4a29      	ldr	r2, [pc, #164]	@ (8108410 <TIM_Base_SetConfig+0x13c>)
 810836a:	4293      	cmp	r3, r2
 810836c:	d108      	bne.n	8108380 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810836e:	68fb      	ldr	r3, [r7, #12]
 8108370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8108376:	683b      	ldr	r3, [r7, #0]
 8108378:	68db      	ldr	r3, [r3, #12]
 810837a:	68fa      	ldr	r2, [r7, #12]
 810837c:	4313      	orrs	r3, r2
 810837e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8108380:	68fb      	ldr	r3, [r7, #12]
 8108382:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8108386:	683b      	ldr	r3, [r7, #0]
 8108388:	695b      	ldr	r3, [r3, #20]
 810838a:	4313      	orrs	r3, r2
 810838c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810838e:	683b      	ldr	r3, [r7, #0]
 8108390:	689a      	ldr	r2, [r3, #8]
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8108396:	683b      	ldr	r3, [r7, #0]
 8108398:	681a      	ldr	r2, [r3, #0]
 810839a:	687b      	ldr	r3, [r7, #4]
 810839c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810839e:	687b      	ldr	r3, [r7, #4]
 81083a0:	4a14      	ldr	r2, [pc, #80]	@ (81083f4 <TIM_Base_SetConfig+0x120>)
 81083a2:	4293      	cmp	r3, r2
 81083a4:	d00f      	beq.n	81083c6 <TIM_Base_SetConfig+0xf2>
 81083a6:	687b      	ldr	r3, [r7, #4]
 81083a8:	4a16      	ldr	r2, [pc, #88]	@ (8108404 <TIM_Base_SetConfig+0x130>)
 81083aa:	4293      	cmp	r3, r2
 81083ac:	d00b      	beq.n	81083c6 <TIM_Base_SetConfig+0xf2>
 81083ae:	687b      	ldr	r3, [r7, #4]
 81083b0:	4a15      	ldr	r2, [pc, #84]	@ (8108408 <TIM_Base_SetConfig+0x134>)
 81083b2:	4293      	cmp	r3, r2
 81083b4:	d007      	beq.n	81083c6 <TIM_Base_SetConfig+0xf2>
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	4a14      	ldr	r2, [pc, #80]	@ (810840c <TIM_Base_SetConfig+0x138>)
 81083ba:	4293      	cmp	r3, r2
 81083bc:	d003      	beq.n	81083c6 <TIM_Base_SetConfig+0xf2>
 81083be:	687b      	ldr	r3, [r7, #4]
 81083c0:	4a13      	ldr	r2, [pc, #76]	@ (8108410 <TIM_Base_SetConfig+0x13c>)
 81083c2:	4293      	cmp	r3, r2
 81083c4:	d103      	bne.n	81083ce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81083c6:	683b      	ldr	r3, [r7, #0]
 81083c8:	691a      	ldr	r2, [r3, #16]
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 81083ce:	687b      	ldr	r3, [r7, #4]
 81083d0:	681b      	ldr	r3, [r3, #0]
 81083d2:	f043 0204 	orr.w	r2, r3, #4
 81083d6:	687b      	ldr	r3, [r7, #4]
 81083d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	2201      	movs	r2, #1
 81083de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 81083e0:	687b      	ldr	r3, [r7, #4]
 81083e2:	68fa      	ldr	r2, [r7, #12]
 81083e4:	601a      	str	r2, [r3, #0]
}
 81083e6:	bf00      	nop
 81083e8:	3714      	adds	r7, #20
 81083ea:	46bd      	mov	sp, r7
 81083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083f0:	4770      	bx	lr
 81083f2:	bf00      	nop
 81083f4:	40010000 	.word	0x40010000
 81083f8:	40000400 	.word	0x40000400
 81083fc:	40000800 	.word	0x40000800
 8108400:	40000c00 	.word	0x40000c00
 8108404:	40010400 	.word	0x40010400
 8108408:	40014000 	.word	0x40014000
 810840c:	40014400 	.word	0x40014400
 8108410:	40014800 	.word	0x40014800

08108414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8108414:	b480      	push	{r7}
 8108416:	b087      	sub	sp, #28
 8108418:	af00      	add	r7, sp, #0
 810841a:	6078      	str	r0, [r7, #4]
 810841c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810841e:	687b      	ldr	r3, [r7, #4]
 8108420:	6a1b      	ldr	r3, [r3, #32]
 8108422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108424:	687b      	ldr	r3, [r7, #4]
 8108426:	6a1b      	ldr	r3, [r3, #32]
 8108428:	f023 0201 	bic.w	r2, r3, #1
 810842c:	687b      	ldr	r3, [r7, #4]
 810842e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108430:	687b      	ldr	r3, [r7, #4]
 8108432:	685b      	ldr	r3, [r3, #4]
 8108434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8108436:	687b      	ldr	r3, [r7, #4]
 8108438:	699b      	ldr	r3, [r3, #24]
 810843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810843c:	68fb      	ldr	r3, [r7, #12]
 810843e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8108448:	68fb      	ldr	r3, [r7, #12]
 810844a:	f023 0303 	bic.w	r3, r3, #3
 810844e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108450:	683b      	ldr	r3, [r7, #0]
 8108452:	681b      	ldr	r3, [r3, #0]
 8108454:	68fa      	ldr	r2, [r7, #12]
 8108456:	4313      	orrs	r3, r2
 8108458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810845a:	697b      	ldr	r3, [r7, #20]
 810845c:	f023 0302 	bic.w	r3, r3, #2
 8108460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8108462:	683b      	ldr	r3, [r7, #0]
 8108464:	689b      	ldr	r3, [r3, #8]
 8108466:	697a      	ldr	r2, [r7, #20]
 8108468:	4313      	orrs	r3, r2
 810846a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810846c:	687b      	ldr	r3, [r7, #4]
 810846e:	4a2c      	ldr	r2, [pc, #176]	@ (8108520 <TIM_OC1_SetConfig+0x10c>)
 8108470:	4293      	cmp	r3, r2
 8108472:	d00f      	beq.n	8108494 <TIM_OC1_SetConfig+0x80>
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	4a2b      	ldr	r2, [pc, #172]	@ (8108524 <TIM_OC1_SetConfig+0x110>)
 8108478:	4293      	cmp	r3, r2
 810847a:	d00b      	beq.n	8108494 <TIM_OC1_SetConfig+0x80>
 810847c:	687b      	ldr	r3, [r7, #4]
 810847e:	4a2a      	ldr	r2, [pc, #168]	@ (8108528 <TIM_OC1_SetConfig+0x114>)
 8108480:	4293      	cmp	r3, r2
 8108482:	d007      	beq.n	8108494 <TIM_OC1_SetConfig+0x80>
 8108484:	687b      	ldr	r3, [r7, #4]
 8108486:	4a29      	ldr	r2, [pc, #164]	@ (810852c <TIM_OC1_SetConfig+0x118>)
 8108488:	4293      	cmp	r3, r2
 810848a:	d003      	beq.n	8108494 <TIM_OC1_SetConfig+0x80>
 810848c:	687b      	ldr	r3, [r7, #4]
 810848e:	4a28      	ldr	r2, [pc, #160]	@ (8108530 <TIM_OC1_SetConfig+0x11c>)
 8108490:	4293      	cmp	r3, r2
 8108492:	d10c      	bne.n	81084ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8108494:	697b      	ldr	r3, [r7, #20]
 8108496:	f023 0308 	bic.w	r3, r3, #8
 810849a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810849c:	683b      	ldr	r3, [r7, #0]
 810849e:	68db      	ldr	r3, [r3, #12]
 81084a0:	697a      	ldr	r2, [r7, #20]
 81084a2:	4313      	orrs	r3, r2
 81084a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81084a6:	697b      	ldr	r3, [r7, #20]
 81084a8:	f023 0304 	bic.w	r3, r3, #4
 81084ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81084ae:	687b      	ldr	r3, [r7, #4]
 81084b0:	4a1b      	ldr	r2, [pc, #108]	@ (8108520 <TIM_OC1_SetConfig+0x10c>)
 81084b2:	4293      	cmp	r3, r2
 81084b4:	d00f      	beq.n	81084d6 <TIM_OC1_SetConfig+0xc2>
 81084b6:	687b      	ldr	r3, [r7, #4]
 81084b8:	4a1a      	ldr	r2, [pc, #104]	@ (8108524 <TIM_OC1_SetConfig+0x110>)
 81084ba:	4293      	cmp	r3, r2
 81084bc:	d00b      	beq.n	81084d6 <TIM_OC1_SetConfig+0xc2>
 81084be:	687b      	ldr	r3, [r7, #4]
 81084c0:	4a19      	ldr	r2, [pc, #100]	@ (8108528 <TIM_OC1_SetConfig+0x114>)
 81084c2:	4293      	cmp	r3, r2
 81084c4:	d007      	beq.n	81084d6 <TIM_OC1_SetConfig+0xc2>
 81084c6:	687b      	ldr	r3, [r7, #4]
 81084c8:	4a18      	ldr	r2, [pc, #96]	@ (810852c <TIM_OC1_SetConfig+0x118>)
 81084ca:	4293      	cmp	r3, r2
 81084cc:	d003      	beq.n	81084d6 <TIM_OC1_SetConfig+0xc2>
 81084ce:	687b      	ldr	r3, [r7, #4]
 81084d0:	4a17      	ldr	r2, [pc, #92]	@ (8108530 <TIM_OC1_SetConfig+0x11c>)
 81084d2:	4293      	cmp	r3, r2
 81084d4:	d111      	bne.n	81084fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81084d6:	693b      	ldr	r3, [r7, #16]
 81084d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81084dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81084de:	693b      	ldr	r3, [r7, #16]
 81084e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 81084e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81084e6:	683b      	ldr	r3, [r7, #0]
 81084e8:	695b      	ldr	r3, [r3, #20]
 81084ea:	693a      	ldr	r2, [r7, #16]
 81084ec:	4313      	orrs	r3, r2
 81084ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81084f0:	683b      	ldr	r3, [r7, #0]
 81084f2:	699b      	ldr	r3, [r3, #24]
 81084f4:	693a      	ldr	r2, [r7, #16]
 81084f6:	4313      	orrs	r3, r2
 81084f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81084fa:	687b      	ldr	r3, [r7, #4]
 81084fc:	693a      	ldr	r2, [r7, #16]
 81084fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108500:	687b      	ldr	r3, [r7, #4]
 8108502:	68fa      	ldr	r2, [r7, #12]
 8108504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8108506:	683b      	ldr	r3, [r7, #0]
 8108508:	685a      	ldr	r2, [r3, #4]
 810850a:	687b      	ldr	r3, [r7, #4]
 810850c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810850e:	687b      	ldr	r3, [r7, #4]
 8108510:	697a      	ldr	r2, [r7, #20]
 8108512:	621a      	str	r2, [r3, #32]
}
 8108514:	bf00      	nop
 8108516:	371c      	adds	r7, #28
 8108518:	46bd      	mov	sp, r7
 810851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810851e:	4770      	bx	lr
 8108520:	40010000 	.word	0x40010000
 8108524:	40010400 	.word	0x40010400
 8108528:	40014000 	.word	0x40014000
 810852c:	40014400 	.word	0x40014400
 8108530:	40014800 	.word	0x40014800

08108534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8108534:	b480      	push	{r7}
 8108536:	b087      	sub	sp, #28
 8108538:	af00      	add	r7, sp, #0
 810853a:	6078      	str	r0, [r7, #4]
 810853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810853e:	687b      	ldr	r3, [r7, #4]
 8108540:	6a1b      	ldr	r3, [r3, #32]
 8108542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8108544:	687b      	ldr	r3, [r7, #4]
 8108546:	6a1b      	ldr	r3, [r3, #32]
 8108548:	f023 0210 	bic.w	r2, r3, #16
 810854c:	687b      	ldr	r3, [r7, #4]
 810854e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108550:	687b      	ldr	r3, [r7, #4]
 8108552:	685b      	ldr	r3, [r3, #4]
 8108554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8108556:	687b      	ldr	r3, [r7, #4]
 8108558:	699b      	ldr	r3, [r3, #24]
 810855a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810855c:	68fb      	ldr	r3, [r7, #12]
 810855e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8108562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8108566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8108568:	68fb      	ldr	r3, [r7, #12]
 810856a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810856e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108570:	683b      	ldr	r3, [r7, #0]
 8108572:	681b      	ldr	r3, [r3, #0]
 8108574:	021b      	lsls	r3, r3, #8
 8108576:	68fa      	ldr	r2, [r7, #12]
 8108578:	4313      	orrs	r3, r2
 810857a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810857c:	697b      	ldr	r3, [r7, #20]
 810857e:	f023 0320 	bic.w	r3, r3, #32
 8108582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8108584:	683b      	ldr	r3, [r7, #0]
 8108586:	689b      	ldr	r3, [r3, #8]
 8108588:	011b      	lsls	r3, r3, #4
 810858a:	697a      	ldr	r2, [r7, #20]
 810858c:	4313      	orrs	r3, r2
 810858e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8108590:	687b      	ldr	r3, [r7, #4]
 8108592:	4a28      	ldr	r2, [pc, #160]	@ (8108634 <TIM_OC2_SetConfig+0x100>)
 8108594:	4293      	cmp	r3, r2
 8108596:	d003      	beq.n	81085a0 <TIM_OC2_SetConfig+0x6c>
 8108598:	687b      	ldr	r3, [r7, #4]
 810859a:	4a27      	ldr	r2, [pc, #156]	@ (8108638 <TIM_OC2_SetConfig+0x104>)
 810859c:	4293      	cmp	r3, r2
 810859e:	d10d      	bne.n	81085bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 81085a0:	697b      	ldr	r3, [r7, #20]
 81085a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81085a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81085a8:	683b      	ldr	r3, [r7, #0]
 81085aa:	68db      	ldr	r3, [r3, #12]
 81085ac:	011b      	lsls	r3, r3, #4
 81085ae:	697a      	ldr	r2, [r7, #20]
 81085b0:	4313      	orrs	r3, r2
 81085b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81085b4:	697b      	ldr	r3, [r7, #20]
 81085b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 81085ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81085bc:	687b      	ldr	r3, [r7, #4]
 81085be:	4a1d      	ldr	r2, [pc, #116]	@ (8108634 <TIM_OC2_SetConfig+0x100>)
 81085c0:	4293      	cmp	r3, r2
 81085c2:	d00f      	beq.n	81085e4 <TIM_OC2_SetConfig+0xb0>
 81085c4:	687b      	ldr	r3, [r7, #4]
 81085c6:	4a1c      	ldr	r2, [pc, #112]	@ (8108638 <TIM_OC2_SetConfig+0x104>)
 81085c8:	4293      	cmp	r3, r2
 81085ca:	d00b      	beq.n	81085e4 <TIM_OC2_SetConfig+0xb0>
 81085cc:	687b      	ldr	r3, [r7, #4]
 81085ce:	4a1b      	ldr	r2, [pc, #108]	@ (810863c <TIM_OC2_SetConfig+0x108>)
 81085d0:	4293      	cmp	r3, r2
 81085d2:	d007      	beq.n	81085e4 <TIM_OC2_SetConfig+0xb0>
 81085d4:	687b      	ldr	r3, [r7, #4]
 81085d6:	4a1a      	ldr	r2, [pc, #104]	@ (8108640 <TIM_OC2_SetConfig+0x10c>)
 81085d8:	4293      	cmp	r3, r2
 81085da:	d003      	beq.n	81085e4 <TIM_OC2_SetConfig+0xb0>
 81085dc:	687b      	ldr	r3, [r7, #4]
 81085de:	4a19      	ldr	r2, [pc, #100]	@ (8108644 <TIM_OC2_SetConfig+0x110>)
 81085e0:	4293      	cmp	r3, r2
 81085e2:	d113      	bne.n	810860c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81085e4:	693b      	ldr	r3, [r7, #16]
 81085e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 81085ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81085ec:	693b      	ldr	r3, [r7, #16]
 81085ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 81085f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81085f4:	683b      	ldr	r3, [r7, #0]
 81085f6:	695b      	ldr	r3, [r3, #20]
 81085f8:	009b      	lsls	r3, r3, #2
 81085fa:	693a      	ldr	r2, [r7, #16]
 81085fc:	4313      	orrs	r3, r2
 81085fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8108600:	683b      	ldr	r3, [r7, #0]
 8108602:	699b      	ldr	r3, [r3, #24]
 8108604:	009b      	lsls	r3, r3, #2
 8108606:	693a      	ldr	r2, [r7, #16]
 8108608:	4313      	orrs	r3, r2
 810860a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810860c:	687b      	ldr	r3, [r7, #4]
 810860e:	693a      	ldr	r2, [r7, #16]
 8108610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108612:	687b      	ldr	r3, [r7, #4]
 8108614:	68fa      	ldr	r2, [r7, #12]
 8108616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8108618:	683b      	ldr	r3, [r7, #0]
 810861a:	685a      	ldr	r2, [r3, #4]
 810861c:	687b      	ldr	r3, [r7, #4]
 810861e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108620:	687b      	ldr	r3, [r7, #4]
 8108622:	697a      	ldr	r2, [r7, #20]
 8108624:	621a      	str	r2, [r3, #32]
}
 8108626:	bf00      	nop
 8108628:	371c      	adds	r7, #28
 810862a:	46bd      	mov	sp, r7
 810862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108630:	4770      	bx	lr
 8108632:	bf00      	nop
 8108634:	40010000 	.word	0x40010000
 8108638:	40010400 	.word	0x40010400
 810863c:	40014000 	.word	0x40014000
 8108640:	40014400 	.word	0x40014400
 8108644:	40014800 	.word	0x40014800

08108648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8108648:	b480      	push	{r7}
 810864a:	b087      	sub	sp, #28
 810864c:	af00      	add	r7, sp, #0
 810864e:	6078      	str	r0, [r7, #4]
 8108650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108652:	687b      	ldr	r3, [r7, #4]
 8108654:	6a1b      	ldr	r3, [r3, #32]
 8108656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	6a1b      	ldr	r3, [r3, #32]
 810865c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8108660:	687b      	ldr	r3, [r7, #4]
 8108662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108664:	687b      	ldr	r3, [r7, #4]
 8108666:	685b      	ldr	r3, [r3, #4]
 8108668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810866a:	687b      	ldr	r3, [r7, #4]
 810866c:	69db      	ldr	r3, [r3, #28]
 810866e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8108670:	68fb      	ldr	r3, [r7, #12]
 8108672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810867a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810867c:	68fb      	ldr	r3, [r7, #12]
 810867e:	f023 0303 	bic.w	r3, r3, #3
 8108682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108684:	683b      	ldr	r3, [r7, #0]
 8108686:	681b      	ldr	r3, [r3, #0]
 8108688:	68fa      	ldr	r2, [r7, #12]
 810868a:	4313      	orrs	r3, r2
 810868c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810868e:	697b      	ldr	r3, [r7, #20]
 8108690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8108694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8108696:	683b      	ldr	r3, [r7, #0]
 8108698:	689b      	ldr	r3, [r3, #8]
 810869a:	021b      	lsls	r3, r3, #8
 810869c:	697a      	ldr	r2, [r7, #20]
 810869e:	4313      	orrs	r3, r2
 81086a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81086a2:	687b      	ldr	r3, [r7, #4]
 81086a4:	4a27      	ldr	r2, [pc, #156]	@ (8108744 <TIM_OC3_SetConfig+0xfc>)
 81086a6:	4293      	cmp	r3, r2
 81086a8:	d003      	beq.n	81086b2 <TIM_OC3_SetConfig+0x6a>
 81086aa:	687b      	ldr	r3, [r7, #4]
 81086ac:	4a26      	ldr	r2, [pc, #152]	@ (8108748 <TIM_OC3_SetConfig+0x100>)
 81086ae:	4293      	cmp	r3, r2
 81086b0:	d10d      	bne.n	81086ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81086b2:	697b      	ldr	r3, [r7, #20]
 81086b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 81086b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81086ba:	683b      	ldr	r3, [r7, #0]
 81086bc:	68db      	ldr	r3, [r3, #12]
 81086be:	021b      	lsls	r3, r3, #8
 81086c0:	697a      	ldr	r2, [r7, #20]
 81086c2:	4313      	orrs	r3, r2
 81086c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81086c6:	697b      	ldr	r3, [r7, #20]
 81086c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 81086cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81086ce:	687b      	ldr	r3, [r7, #4]
 81086d0:	4a1c      	ldr	r2, [pc, #112]	@ (8108744 <TIM_OC3_SetConfig+0xfc>)
 81086d2:	4293      	cmp	r3, r2
 81086d4:	d00f      	beq.n	81086f6 <TIM_OC3_SetConfig+0xae>
 81086d6:	687b      	ldr	r3, [r7, #4]
 81086d8:	4a1b      	ldr	r2, [pc, #108]	@ (8108748 <TIM_OC3_SetConfig+0x100>)
 81086da:	4293      	cmp	r3, r2
 81086dc:	d00b      	beq.n	81086f6 <TIM_OC3_SetConfig+0xae>
 81086de:	687b      	ldr	r3, [r7, #4]
 81086e0:	4a1a      	ldr	r2, [pc, #104]	@ (810874c <TIM_OC3_SetConfig+0x104>)
 81086e2:	4293      	cmp	r3, r2
 81086e4:	d007      	beq.n	81086f6 <TIM_OC3_SetConfig+0xae>
 81086e6:	687b      	ldr	r3, [r7, #4]
 81086e8:	4a19      	ldr	r2, [pc, #100]	@ (8108750 <TIM_OC3_SetConfig+0x108>)
 81086ea:	4293      	cmp	r3, r2
 81086ec:	d003      	beq.n	81086f6 <TIM_OC3_SetConfig+0xae>
 81086ee:	687b      	ldr	r3, [r7, #4]
 81086f0:	4a18      	ldr	r2, [pc, #96]	@ (8108754 <TIM_OC3_SetConfig+0x10c>)
 81086f2:	4293      	cmp	r3, r2
 81086f4:	d113      	bne.n	810871e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81086f6:	693b      	ldr	r3, [r7, #16]
 81086f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81086fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81086fe:	693b      	ldr	r3, [r7, #16]
 8108700:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8108704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8108706:	683b      	ldr	r3, [r7, #0]
 8108708:	695b      	ldr	r3, [r3, #20]
 810870a:	011b      	lsls	r3, r3, #4
 810870c:	693a      	ldr	r2, [r7, #16]
 810870e:	4313      	orrs	r3, r2
 8108710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8108712:	683b      	ldr	r3, [r7, #0]
 8108714:	699b      	ldr	r3, [r3, #24]
 8108716:	011b      	lsls	r3, r3, #4
 8108718:	693a      	ldr	r2, [r7, #16]
 810871a:	4313      	orrs	r3, r2
 810871c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810871e:	687b      	ldr	r3, [r7, #4]
 8108720:	693a      	ldr	r2, [r7, #16]
 8108722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8108724:	687b      	ldr	r3, [r7, #4]
 8108726:	68fa      	ldr	r2, [r7, #12]
 8108728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810872a:	683b      	ldr	r3, [r7, #0]
 810872c:	685a      	ldr	r2, [r3, #4]
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108732:	687b      	ldr	r3, [r7, #4]
 8108734:	697a      	ldr	r2, [r7, #20]
 8108736:	621a      	str	r2, [r3, #32]
}
 8108738:	bf00      	nop
 810873a:	371c      	adds	r7, #28
 810873c:	46bd      	mov	sp, r7
 810873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108742:	4770      	bx	lr
 8108744:	40010000 	.word	0x40010000
 8108748:	40010400 	.word	0x40010400
 810874c:	40014000 	.word	0x40014000
 8108750:	40014400 	.word	0x40014400
 8108754:	40014800 	.word	0x40014800

08108758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8108758:	b480      	push	{r7}
 810875a:	b087      	sub	sp, #28
 810875c:	af00      	add	r7, sp, #0
 810875e:	6078      	str	r0, [r7, #4]
 8108760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108762:	687b      	ldr	r3, [r7, #4]
 8108764:	6a1b      	ldr	r3, [r3, #32]
 8108766:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108768:	687b      	ldr	r3, [r7, #4]
 810876a:	6a1b      	ldr	r3, [r3, #32]
 810876c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8108770:	687b      	ldr	r3, [r7, #4]
 8108772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108774:	687b      	ldr	r3, [r7, #4]
 8108776:	685b      	ldr	r3, [r3, #4]
 8108778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810877a:	687b      	ldr	r3, [r7, #4]
 810877c:	69db      	ldr	r3, [r3, #28]
 810877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8108780:	68fb      	ldr	r3, [r7, #12]
 8108782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8108786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810878a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810878c:	68fb      	ldr	r3, [r7, #12]
 810878e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108794:	683b      	ldr	r3, [r7, #0]
 8108796:	681b      	ldr	r3, [r3, #0]
 8108798:	021b      	lsls	r3, r3, #8
 810879a:	68fa      	ldr	r2, [r7, #12]
 810879c:	4313      	orrs	r3, r2
 810879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81087a0:	693b      	ldr	r3, [r7, #16]
 81087a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 81087a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81087a8:	683b      	ldr	r3, [r7, #0]
 81087aa:	689b      	ldr	r3, [r3, #8]
 81087ac:	031b      	lsls	r3, r3, #12
 81087ae:	693a      	ldr	r2, [r7, #16]
 81087b0:	4313      	orrs	r3, r2
 81087b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81087b4:	687b      	ldr	r3, [r7, #4]
 81087b6:	4a18      	ldr	r2, [pc, #96]	@ (8108818 <TIM_OC4_SetConfig+0xc0>)
 81087b8:	4293      	cmp	r3, r2
 81087ba:	d00f      	beq.n	81087dc <TIM_OC4_SetConfig+0x84>
 81087bc:	687b      	ldr	r3, [r7, #4]
 81087be:	4a17      	ldr	r2, [pc, #92]	@ (810881c <TIM_OC4_SetConfig+0xc4>)
 81087c0:	4293      	cmp	r3, r2
 81087c2:	d00b      	beq.n	81087dc <TIM_OC4_SetConfig+0x84>
 81087c4:	687b      	ldr	r3, [r7, #4]
 81087c6:	4a16      	ldr	r2, [pc, #88]	@ (8108820 <TIM_OC4_SetConfig+0xc8>)
 81087c8:	4293      	cmp	r3, r2
 81087ca:	d007      	beq.n	81087dc <TIM_OC4_SetConfig+0x84>
 81087cc:	687b      	ldr	r3, [r7, #4]
 81087ce:	4a15      	ldr	r2, [pc, #84]	@ (8108824 <TIM_OC4_SetConfig+0xcc>)
 81087d0:	4293      	cmp	r3, r2
 81087d2:	d003      	beq.n	81087dc <TIM_OC4_SetConfig+0x84>
 81087d4:	687b      	ldr	r3, [r7, #4]
 81087d6:	4a14      	ldr	r2, [pc, #80]	@ (8108828 <TIM_OC4_SetConfig+0xd0>)
 81087d8:	4293      	cmp	r3, r2
 81087da:	d109      	bne.n	81087f0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81087dc:	697b      	ldr	r3, [r7, #20]
 81087de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 81087e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81087e4:	683b      	ldr	r3, [r7, #0]
 81087e6:	695b      	ldr	r3, [r3, #20]
 81087e8:	019b      	lsls	r3, r3, #6
 81087ea:	697a      	ldr	r2, [r7, #20]
 81087ec:	4313      	orrs	r3, r2
 81087ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81087f0:	687b      	ldr	r3, [r7, #4]
 81087f2:	697a      	ldr	r2, [r7, #20]
 81087f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81087f6:	687b      	ldr	r3, [r7, #4]
 81087f8:	68fa      	ldr	r2, [r7, #12]
 81087fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81087fc:	683b      	ldr	r3, [r7, #0]
 81087fe:	685a      	ldr	r2, [r3, #4]
 8108800:	687b      	ldr	r3, [r7, #4]
 8108802:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108804:	687b      	ldr	r3, [r7, #4]
 8108806:	693a      	ldr	r2, [r7, #16]
 8108808:	621a      	str	r2, [r3, #32]
}
 810880a:	bf00      	nop
 810880c:	371c      	adds	r7, #28
 810880e:	46bd      	mov	sp, r7
 8108810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108814:	4770      	bx	lr
 8108816:	bf00      	nop
 8108818:	40010000 	.word	0x40010000
 810881c:	40010400 	.word	0x40010400
 8108820:	40014000 	.word	0x40014000
 8108824:	40014400 	.word	0x40014400
 8108828:	40014800 	.word	0x40014800

0810882c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810882c:	b480      	push	{r7}
 810882e:	b087      	sub	sp, #28
 8108830:	af00      	add	r7, sp, #0
 8108832:	6078      	str	r0, [r7, #4]
 8108834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108836:	687b      	ldr	r3, [r7, #4]
 8108838:	6a1b      	ldr	r3, [r3, #32]
 810883a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810883c:	687b      	ldr	r3, [r7, #4]
 810883e:	6a1b      	ldr	r3, [r3, #32]
 8108840:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8108844:	687b      	ldr	r3, [r7, #4]
 8108846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108848:	687b      	ldr	r3, [r7, #4]
 810884a:	685b      	ldr	r3, [r3, #4]
 810884c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810884e:	687b      	ldr	r3, [r7, #4]
 8108850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8108854:	68fb      	ldr	r3, [r7, #12]
 8108856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810885a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810885e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108860:	683b      	ldr	r3, [r7, #0]
 8108862:	681b      	ldr	r3, [r3, #0]
 8108864:	68fa      	ldr	r2, [r7, #12]
 8108866:	4313      	orrs	r3, r2
 8108868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810886a:	693b      	ldr	r3, [r7, #16]
 810886c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8108870:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8108872:	683b      	ldr	r3, [r7, #0]
 8108874:	689b      	ldr	r3, [r3, #8]
 8108876:	041b      	lsls	r3, r3, #16
 8108878:	693a      	ldr	r2, [r7, #16]
 810887a:	4313      	orrs	r3, r2
 810887c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810887e:	687b      	ldr	r3, [r7, #4]
 8108880:	4a17      	ldr	r2, [pc, #92]	@ (81088e0 <TIM_OC5_SetConfig+0xb4>)
 8108882:	4293      	cmp	r3, r2
 8108884:	d00f      	beq.n	81088a6 <TIM_OC5_SetConfig+0x7a>
 8108886:	687b      	ldr	r3, [r7, #4]
 8108888:	4a16      	ldr	r2, [pc, #88]	@ (81088e4 <TIM_OC5_SetConfig+0xb8>)
 810888a:	4293      	cmp	r3, r2
 810888c:	d00b      	beq.n	81088a6 <TIM_OC5_SetConfig+0x7a>
 810888e:	687b      	ldr	r3, [r7, #4]
 8108890:	4a15      	ldr	r2, [pc, #84]	@ (81088e8 <TIM_OC5_SetConfig+0xbc>)
 8108892:	4293      	cmp	r3, r2
 8108894:	d007      	beq.n	81088a6 <TIM_OC5_SetConfig+0x7a>
 8108896:	687b      	ldr	r3, [r7, #4]
 8108898:	4a14      	ldr	r2, [pc, #80]	@ (81088ec <TIM_OC5_SetConfig+0xc0>)
 810889a:	4293      	cmp	r3, r2
 810889c:	d003      	beq.n	81088a6 <TIM_OC5_SetConfig+0x7a>
 810889e:	687b      	ldr	r3, [r7, #4]
 81088a0:	4a13      	ldr	r2, [pc, #76]	@ (81088f0 <TIM_OC5_SetConfig+0xc4>)
 81088a2:	4293      	cmp	r3, r2
 81088a4:	d109      	bne.n	81088ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81088a6:	697b      	ldr	r3, [r7, #20]
 81088a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81088ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81088ae:	683b      	ldr	r3, [r7, #0]
 81088b0:	695b      	ldr	r3, [r3, #20]
 81088b2:	021b      	lsls	r3, r3, #8
 81088b4:	697a      	ldr	r2, [r7, #20]
 81088b6:	4313      	orrs	r3, r2
 81088b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81088ba:	687b      	ldr	r3, [r7, #4]
 81088bc:	697a      	ldr	r2, [r7, #20]
 81088be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81088c0:	687b      	ldr	r3, [r7, #4]
 81088c2:	68fa      	ldr	r2, [r7, #12]
 81088c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81088c6:	683b      	ldr	r3, [r7, #0]
 81088c8:	685a      	ldr	r2, [r3, #4]
 81088ca:	687b      	ldr	r3, [r7, #4]
 81088cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81088ce:	687b      	ldr	r3, [r7, #4]
 81088d0:	693a      	ldr	r2, [r7, #16]
 81088d2:	621a      	str	r2, [r3, #32]
}
 81088d4:	bf00      	nop
 81088d6:	371c      	adds	r7, #28
 81088d8:	46bd      	mov	sp, r7
 81088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088de:	4770      	bx	lr
 81088e0:	40010000 	.word	0x40010000
 81088e4:	40010400 	.word	0x40010400
 81088e8:	40014000 	.word	0x40014000
 81088ec:	40014400 	.word	0x40014400
 81088f0:	40014800 	.word	0x40014800

081088f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81088f4:	b480      	push	{r7}
 81088f6:	b087      	sub	sp, #28
 81088f8:	af00      	add	r7, sp, #0
 81088fa:	6078      	str	r0, [r7, #4]
 81088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81088fe:	687b      	ldr	r3, [r7, #4]
 8108900:	6a1b      	ldr	r3, [r3, #32]
 8108902:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8108904:	687b      	ldr	r3, [r7, #4]
 8108906:	6a1b      	ldr	r3, [r3, #32]
 8108908:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810890c:	687b      	ldr	r3, [r7, #4]
 810890e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108910:	687b      	ldr	r3, [r7, #4]
 8108912:	685b      	ldr	r3, [r3, #4]
 8108914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108916:	687b      	ldr	r3, [r7, #4]
 8108918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810891a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810891c:	68fb      	ldr	r3, [r7, #12]
 810891e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8108922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8108926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108928:	683b      	ldr	r3, [r7, #0]
 810892a:	681b      	ldr	r3, [r3, #0]
 810892c:	021b      	lsls	r3, r3, #8
 810892e:	68fa      	ldr	r2, [r7, #12]
 8108930:	4313      	orrs	r3, r2
 8108932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8108934:	693b      	ldr	r3, [r7, #16]
 8108936:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810893a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810893c:	683b      	ldr	r3, [r7, #0]
 810893e:	689b      	ldr	r3, [r3, #8]
 8108940:	051b      	lsls	r3, r3, #20
 8108942:	693a      	ldr	r2, [r7, #16]
 8108944:	4313      	orrs	r3, r2
 8108946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108948:	687b      	ldr	r3, [r7, #4]
 810894a:	4a18      	ldr	r2, [pc, #96]	@ (81089ac <TIM_OC6_SetConfig+0xb8>)
 810894c:	4293      	cmp	r3, r2
 810894e:	d00f      	beq.n	8108970 <TIM_OC6_SetConfig+0x7c>
 8108950:	687b      	ldr	r3, [r7, #4]
 8108952:	4a17      	ldr	r2, [pc, #92]	@ (81089b0 <TIM_OC6_SetConfig+0xbc>)
 8108954:	4293      	cmp	r3, r2
 8108956:	d00b      	beq.n	8108970 <TIM_OC6_SetConfig+0x7c>
 8108958:	687b      	ldr	r3, [r7, #4]
 810895a:	4a16      	ldr	r2, [pc, #88]	@ (81089b4 <TIM_OC6_SetConfig+0xc0>)
 810895c:	4293      	cmp	r3, r2
 810895e:	d007      	beq.n	8108970 <TIM_OC6_SetConfig+0x7c>
 8108960:	687b      	ldr	r3, [r7, #4]
 8108962:	4a15      	ldr	r2, [pc, #84]	@ (81089b8 <TIM_OC6_SetConfig+0xc4>)
 8108964:	4293      	cmp	r3, r2
 8108966:	d003      	beq.n	8108970 <TIM_OC6_SetConfig+0x7c>
 8108968:	687b      	ldr	r3, [r7, #4]
 810896a:	4a14      	ldr	r2, [pc, #80]	@ (81089bc <TIM_OC6_SetConfig+0xc8>)
 810896c:	4293      	cmp	r3, r2
 810896e:	d109      	bne.n	8108984 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8108970:	697b      	ldr	r3, [r7, #20]
 8108972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8108976:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8108978:	683b      	ldr	r3, [r7, #0]
 810897a:	695b      	ldr	r3, [r3, #20]
 810897c:	029b      	lsls	r3, r3, #10
 810897e:	697a      	ldr	r2, [r7, #20]
 8108980:	4313      	orrs	r3, r2
 8108982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108984:	687b      	ldr	r3, [r7, #4]
 8108986:	697a      	ldr	r2, [r7, #20]
 8108988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810898a:	687b      	ldr	r3, [r7, #4]
 810898c:	68fa      	ldr	r2, [r7, #12]
 810898e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8108990:	683b      	ldr	r3, [r7, #0]
 8108992:	685a      	ldr	r2, [r3, #4]
 8108994:	687b      	ldr	r3, [r7, #4]
 8108996:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108998:	687b      	ldr	r3, [r7, #4]
 810899a:	693a      	ldr	r2, [r7, #16]
 810899c:	621a      	str	r2, [r3, #32]
}
 810899e:	bf00      	nop
 81089a0:	371c      	adds	r7, #28
 81089a2:	46bd      	mov	sp, r7
 81089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089a8:	4770      	bx	lr
 81089aa:	bf00      	nop
 81089ac:	40010000 	.word	0x40010000
 81089b0:	40010400 	.word	0x40010400
 81089b4:	40014000 	.word	0x40014000
 81089b8:	40014400 	.word	0x40014400
 81089bc:	40014800 	.word	0x40014800

081089c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 81089c0:	b480      	push	{r7}
 81089c2:	b085      	sub	sp, #20
 81089c4:	af00      	add	r7, sp, #0
 81089c6:	6078      	str	r0, [r7, #4]
 81089c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81089ca:	687b      	ldr	r3, [r7, #4]
 81089cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 81089d0:	2b01      	cmp	r3, #1
 81089d2:	d101      	bne.n	81089d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81089d4:	2302      	movs	r3, #2
 81089d6:	e06d      	b.n	8108ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81089d8:	687b      	ldr	r3, [r7, #4]
 81089da:	2201      	movs	r2, #1
 81089dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81089e0:	687b      	ldr	r3, [r7, #4]
 81089e2:	2202      	movs	r2, #2
 81089e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81089e8:	687b      	ldr	r3, [r7, #4]
 81089ea:	681b      	ldr	r3, [r3, #0]
 81089ec:	685b      	ldr	r3, [r3, #4]
 81089ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81089f0:	687b      	ldr	r3, [r7, #4]
 81089f2:	681b      	ldr	r3, [r3, #0]
 81089f4:	689b      	ldr	r3, [r3, #8]
 81089f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81089f8:	687b      	ldr	r3, [r7, #4]
 81089fa:	681b      	ldr	r3, [r3, #0]
 81089fc:	4a30      	ldr	r2, [pc, #192]	@ (8108ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81089fe:	4293      	cmp	r3, r2
 8108a00:	d004      	beq.n	8108a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8108a02:	687b      	ldr	r3, [r7, #4]
 8108a04:	681b      	ldr	r3, [r3, #0]
 8108a06:	4a2f      	ldr	r2, [pc, #188]	@ (8108ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108a08:	4293      	cmp	r3, r2
 8108a0a:	d108      	bne.n	8108a1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8108a0c:	68fb      	ldr	r3, [r7, #12]
 8108a0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8108a12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8108a14:	683b      	ldr	r3, [r7, #0]
 8108a16:	685b      	ldr	r3, [r3, #4]
 8108a18:	68fa      	ldr	r2, [r7, #12]
 8108a1a:	4313      	orrs	r3, r2
 8108a1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8108a1e:	68fb      	ldr	r3, [r7, #12]
 8108a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108a24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8108a26:	683b      	ldr	r3, [r7, #0]
 8108a28:	681b      	ldr	r3, [r3, #0]
 8108a2a:	68fa      	ldr	r2, [r7, #12]
 8108a2c:	4313      	orrs	r3, r2
 8108a2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	681b      	ldr	r3, [r3, #0]
 8108a34:	68fa      	ldr	r2, [r7, #12]
 8108a36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108a38:	687b      	ldr	r3, [r7, #4]
 8108a3a:	681b      	ldr	r3, [r3, #0]
 8108a3c:	4a20      	ldr	r2, [pc, #128]	@ (8108ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108a3e:	4293      	cmp	r3, r2
 8108a40:	d022      	beq.n	8108a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108a42:	687b      	ldr	r3, [r7, #4]
 8108a44:	681b      	ldr	r3, [r3, #0]
 8108a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108a4a:	d01d      	beq.n	8108a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108a4c:	687b      	ldr	r3, [r7, #4]
 8108a4e:	681b      	ldr	r3, [r3, #0]
 8108a50:	4a1d      	ldr	r2, [pc, #116]	@ (8108ac8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8108a52:	4293      	cmp	r3, r2
 8108a54:	d018      	beq.n	8108a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108a56:	687b      	ldr	r3, [r7, #4]
 8108a58:	681b      	ldr	r3, [r3, #0]
 8108a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8108acc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8108a5c:	4293      	cmp	r3, r2
 8108a5e:	d013      	beq.n	8108a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108a60:	687b      	ldr	r3, [r7, #4]
 8108a62:	681b      	ldr	r3, [r3, #0]
 8108a64:	4a1a      	ldr	r2, [pc, #104]	@ (8108ad0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8108a66:	4293      	cmp	r3, r2
 8108a68:	d00e      	beq.n	8108a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108a6a:	687b      	ldr	r3, [r7, #4]
 8108a6c:	681b      	ldr	r3, [r3, #0]
 8108a6e:	4a15      	ldr	r2, [pc, #84]	@ (8108ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108a70:	4293      	cmp	r3, r2
 8108a72:	d009      	beq.n	8108a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108a74:	687b      	ldr	r3, [r7, #4]
 8108a76:	681b      	ldr	r3, [r3, #0]
 8108a78:	4a16      	ldr	r2, [pc, #88]	@ (8108ad4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8108a7a:	4293      	cmp	r3, r2
 8108a7c:	d004      	beq.n	8108a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108a7e:	687b      	ldr	r3, [r7, #4]
 8108a80:	681b      	ldr	r3, [r3, #0]
 8108a82:	4a15      	ldr	r2, [pc, #84]	@ (8108ad8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8108a84:	4293      	cmp	r3, r2
 8108a86:	d10c      	bne.n	8108aa2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8108a88:	68bb      	ldr	r3, [r7, #8]
 8108a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8108a8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8108a90:	683b      	ldr	r3, [r7, #0]
 8108a92:	689b      	ldr	r3, [r3, #8]
 8108a94:	68ba      	ldr	r2, [r7, #8]
 8108a96:	4313      	orrs	r3, r2
 8108a98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8108a9a:	687b      	ldr	r3, [r7, #4]
 8108a9c:	681b      	ldr	r3, [r3, #0]
 8108a9e:	68ba      	ldr	r2, [r7, #8]
 8108aa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8108aa2:	687b      	ldr	r3, [r7, #4]
 8108aa4:	2201      	movs	r2, #1
 8108aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8108aaa:	687b      	ldr	r3, [r7, #4]
 8108aac:	2200      	movs	r2, #0
 8108aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8108ab2:	2300      	movs	r3, #0
}
 8108ab4:	4618      	mov	r0, r3
 8108ab6:	3714      	adds	r7, #20
 8108ab8:	46bd      	mov	sp, r7
 8108aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108abe:	4770      	bx	lr
 8108ac0:	40010000 	.word	0x40010000
 8108ac4:	40010400 	.word	0x40010400
 8108ac8:	40000400 	.word	0x40000400
 8108acc:	40000800 	.word	0x40000800
 8108ad0:	40000c00 	.word	0x40000c00
 8108ad4:	40001800 	.word	0x40001800
 8108ad8:	40014000 	.word	0x40014000

08108adc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8108adc:	b480      	push	{r7}
 8108ade:	b085      	sub	sp, #20
 8108ae0:	af00      	add	r7, sp, #0
 8108ae2:	6078      	str	r0, [r7, #4]
 8108ae4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8108ae6:	2300      	movs	r3, #0
 8108ae8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8108af0:	2b01      	cmp	r3, #1
 8108af2:	d101      	bne.n	8108af8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8108af4:	2302      	movs	r3, #2
 8108af6:	e065      	b.n	8108bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8108af8:	687b      	ldr	r3, [r7, #4]
 8108afa:	2201      	movs	r2, #1
 8108afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8108b00:	68fb      	ldr	r3, [r7, #12]
 8108b02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8108b06:	683b      	ldr	r3, [r7, #0]
 8108b08:	68db      	ldr	r3, [r3, #12]
 8108b0a:	4313      	orrs	r3, r2
 8108b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8108b0e:	68fb      	ldr	r3, [r7, #12]
 8108b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8108b14:	683b      	ldr	r3, [r7, #0]
 8108b16:	689b      	ldr	r3, [r3, #8]
 8108b18:	4313      	orrs	r3, r2
 8108b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8108b1c:	68fb      	ldr	r3, [r7, #12]
 8108b1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8108b22:	683b      	ldr	r3, [r7, #0]
 8108b24:	685b      	ldr	r3, [r3, #4]
 8108b26:	4313      	orrs	r3, r2
 8108b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8108b2a:	68fb      	ldr	r3, [r7, #12]
 8108b2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8108b30:	683b      	ldr	r3, [r7, #0]
 8108b32:	681b      	ldr	r3, [r3, #0]
 8108b34:	4313      	orrs	r3, r2
 8108b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8108b38:	68fb      	ldr	r3, [r7, #12]
 8108b3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8108b3e:	683b      	ldr	r3, [r7, #0]
 8108b40:	691b      	ldr	r3, [r3, #16]
 8108b42:	4313      	orrs	r3, r2
 8108b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8108b46:	68fb      	ldr	r3, [r7, #12]
 8108b48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8108b4c:	683b      	ldr	r3, [r7, #0]
 8108b4e:	695b      	ldr	r3, [r3, #20]
 8108b50:	4313      	orrs	r3, r2
 8108b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8108b54:	68fb      	ldr	r3, [r7, #12]
 8108b56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8108b5a:	683b      	ldr	r3, [r7, #0]
 8108b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b5e:	4313      	orrs	r3, r2
 8108b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8108b62:	68fb      	ldr	r3, [r7, #12]
 8108b64:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8108b68:	683b      	ldr	r3, [r7, #0]
 8108b6a:	699b      	ldr	r3, [r3, #24]
 8108b6c:	041b      	lsls	r3, r3, #16
 8108b6e:	4313      	orrs	r3, r2
 8108b70:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8108b72:	687b      	ldr	r3, [r7, #4]
 8108b74:	681b      	ldr	r3, [r3, #0]
 8108b76:	4a16      	ldr	r2, [pc, #88]	@ (8108bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8108b78:	4293      	cmp	r3, r2
 8108b7a:	d004      	beq.n	8108b86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8108b7c:	687b      	ldr	r3, [r7, #4]
 8108b7e:	681b      	ldr	r3, [r3, #0]
 8108b80:	4a14      	ldr	r2, [pc, #80]	@ (8108bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8108b82:	4293      	cmp	r3, r2
 8108b84:	d115      	bne.n	8108bb2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8108b86:	68fb      	ldr	r3, [r7, #12]
 8108b88:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8108b8c:	683b      	ldr	r3, [r7, #0]
 8108b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108b90:	051b      	lsls	r3, r3, #20
 8108b92:	4313      	orrs	r3, r2
 8108b94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8108b96:	68fb      	ldr	r3, [r7, #12]
 8108b98:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8108b9c:	683b      	ldr	r3, [r7, #0]
 8108b9e:	69db      	ldr	r3, [r3, #28]
 8108ba0:	4313      	orrs	r3, r2
 8108ba2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8108ba4:	68fb      	ldr	r3, [r7, #12]
 8108ba6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8108baa:	683b      	ldr	r3, [r7, #0]
 8108bac:	6a1b      	ldr	r3, [r3, #32]
 8108bae:	4313      	orrs	r3, r2
 8108bb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8108bb2:	687b      	ldr	r3, [r7, #4]
 8108bb4:	681b      	ldr	r3, [r3, #0]
 8108bb6:	68fa      	ldr	r2, [r7, #12]
 8108bb8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8108bba:	687b      	ldr	r3, [r7, #4]
 8108bbc:	2200      	movs	r2, #0
 8108bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8108bc2:	2300      	movs	r3, #0
}
 8108bc4:	4618      	mov	r0, r3
 8108bc6:	3714      	adds	r7, #20
 8108bc8:	46bd      	mov	sp, r7
 8108bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bce:	4770      	bx	lr
 8108bd0:	40010000 	.word	0x40010000
 8108bd4:	40010400 	.word	0x40010400

08108bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8108bd8:	b480      	push	{r7}
 8108bda:	b083      	sub	sp, #12
 8108bdc:	af00      	add	r7, sp, #0
 8108bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8108be0:	bf00      	nop
 8108be2:	370c      	adds	r7, #12
 8108be4:	46bd      	mov	sp, r7
 8108be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bea:	4770      	bx	lr

08108bec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8108bec:	b480      	push	{r7}
 8108bee:	b083      	sub	sp, #12
 8108bf0:	af00      	add	r7, sp, #0
 8108bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8108bf4:	bf00      	nop
 8108bf6:	370c      	adds	r7, #12
 8108bf8:	46bd      	mov	sp, r7
 8108bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bfe:	4770      	bx	lr

08108c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8108c00:	b480      	push	{r7}
 8108c02:	b083      	sub	sp, #12
 8108c04:	af00      	add	r7, sp, #0
 8108c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8108c08:	bf00      	nop
 8108c0a:	370c      	adds	r7, #12
 8108c0c:	46bd      	mov	sp, r7
 8108c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c12:	4770      	bx	lr

08108c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8108c14:	b580      	push	{r7, lr}
 8108c16:	b08a      	sub	sp, #40	@ 0x28
 8108c18:	af02      	add	r7, sp, #8
 8108c1a:	60f8      	str	r0, [r7, #12]
 8108c1c:	60b9      	str	r1, [r7, #8]
 8108c1e:	603b      	str	r3, [r7, #0]
 8108c20:	4613      	mov	r3, r2
 8108c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8108c24:	68fb      	ldr	r3, [r7, #12]
 8108c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108c2a:	2b20      	cmp	r3, #32
 8108c2c:	d17b      	bne.n	8108d26 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8108c2e:	68bb      	ldr	r3, [r7, #8]
 8108c30:	2b00      	cmp	r3, #0
 8108c32:	d002      	beq.n	8108c3a <HAL_UART_Transmit+0x26>
 8108c34:	88fb      	ldrh	r3, [r7, #6]
 8108c36:	2b00      	cmp	r3, #0
 8108c38:	d101      	bne.n	8108c3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8108c3a:	2301      	movs	r3, #1
 8108c3c:	e074      	b.n	8108d28 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108c3e:	68fb      	ldr	r3, [r7, #12]
 8108c40:	2200      	movs	r2, #0
 8108c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108c46:	68fb      	ldr	r3, [r7, #12]
 8108c48:	2221      	movs	r2, #33	@ 0x21
 8108c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108c4e:	f7f9 fdd5 	bl	81027fc <HAL_GetTick>
 8108c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8108c54:	68fb      	ldr	r3, [r7, #12]
 8108c56:	88fa      	ldrh	r2, [r7, #6]
 8108c58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8108c5c:	68fb      	ldr	r3, [r7, #12]
 8108c5e:	88fa      	ldrh	r2, [r7, #6]
 8108c60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8108c64:	68fb      	ldr	r3, [r7, #12]
 8108c66:	689b      	ldr	r3, [r3, #8]
 8108c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108c6c:	d108      	bne.n	8108c80 <HAL_UART_Transmit+0x6c>
 8108c6e:	68fb      	ldr	r3, [r7, #12]
 8108c70:	691b      	ldr	r3, [r3, #16]
 8108c72:	2b00      	cmp	r3, #0
 8108c74:	d104      	bne.n	8108c80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8108c76:	2300      	movs	r3, #0
 8108c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8108c7a:	68bb      	ldr	r3, [r7, #8]
 8108c7c:	61bb      	str	r3, [r7, #24]
 8108c7e:	e003      	b.n	8108c88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8108c80:	68bb      	ldr	r3, [r7, #8]
 8108c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8108c84:	2300      	movs	r3, #0
 8108c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8108c88:	e030      	b.n	8108cec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8108c8a:	683b      	ldr	r3, [r7, #0]
 8108c8c:	9300      	str	r3, [sp, #0]
 8108c8e:	697b      	ldr	r3, [r7, #20]
 8108c90:	2200      	movs	r2, #0
 8108c92:	2180      	movs	r1, #128	@ 0x80
 8108c94:	68f8      	ldr	r0, [r7, #12]
 8108c96:	f000 f84b 	bl	8108d30 <UART_WaitOnFlagUntilTimeout>
 8108c9a:	4603      	mov	r3, r0
 8108c9c:	2b00      	cmp	r3, #0
 8108c9e:	d005      	beq.n	8108cac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108ca0:	68fb      	ldr	r3, [r7, #12]
 8108ca2:	2220      	movs	r2, #32
 8108ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8108ca8:	2303      	movs	r3, #3
 8108caa:	e03d      	b.n	8108d28 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8108cac:	69fb      	ldr	r3, [r7, #28]
 8108cae:	2b00      	cmp	r3, #0
 8108cb0:	d10b      	bne.n	8108cca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8108cb2:	69bb      	ldr	r3, [r7, #24]
 8108cb4:	881b      	ldrh	r3, [r3, #0]
 8108cb6:	461a      	mov	r2, r3
 8108cb8:	68fb      	ldr	r3, [r7, #12]
 8108cba:	681b      	ldr	r3, [r3, #0]
 8108cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108cc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8108cc2:	69bb      	ldr	r3, [r7, #24]
 8108cc4:	3302      	adds	r3, #2
 8108cc6:	61bb      	str	r3, [r7, #24]
 8108cc8:	e007      	b.n	8108cda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8108cca:	69fb      	ldr	r3, [r7, #28]
 8108ccc:	781a      	ldrb	r2, [r3, #0]
 8108cce:	68fb      	ldr	r3, [r7, #12]
 8108cd0:	681b      	ldr	r3, [r3, #0]
 8108cd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8108cd4:	69fb      	ldr	r3, [r7, #28]
 8108cd6:	3301      	adds	r3, #1
 8108cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8108cda:	68fb      	ldr	r3, [r7, #12]
 8108cdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8108ce0:	b29b      	uxth	r3, r3
 8108ce2:	3b01      	subs	r3, #1
 8108ce4:	b29a      	uxth	r2, r3
 8108ce6:	68fb      	ldr	r3, [r7, #12]
 8108ce8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8108cec:	68fb      	ldr	r3, [r7, #12]
 8108cee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8108cf2:	b29b      	uxth	r3, r3
 8108cf4:	2b00      	cmp	r3, #0
 8108cf6:	d1c8      	bne.n	8108c8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8108cf8:	683b      	ldr	r3, [r7, #0]
 8108cfa:	9300      	str	r3, [sp, #0]
 8108cfc:	697b      	ldr	r3, [r7, #20]
 8108cfe:	2200      	movs	r2, #0
 8108d00:	2140      	movs	r1, #64	@ 0x40
 8108d02:	68f8      	ldr	r0, [r7, #12]
 8108d04:	f000 f814 	bl	8108d30 <UART_WaitOnFlagUntilTimeout>
 8108d08:	4603      	mov	r3, r0
 8108d0a:	2b00      	cmp	r3, #0
 8108d0c:	d005      	beq.n	8108d1a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8108d0e:	68fb      	ldr	r3, [r7, #12]
 8108d10:	2220      	movs	r2, #32
 8108d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8108d16:	2303      	movs	r3, #3
 8108d18:	e006      	b.n	8108d28 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108d1a:	68fb      	ldr	r3, [r7, #12]
 8108d1c:	2220      	movs	r2, #32
 8108d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8108d22:	2300      	movs	r3, #0
 8108d24:	e000      	b.n	8108d28 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8108d26:	2302      	movs	r3, #2
  }
}
 8108d28:	4618      	mov	r0, r3
 8108d2a:	3720      	adds	r7, #32
 8108d2c:	46bd      	mov	sp, r7
 8108d2e:	bd80      	pop	{r7, pc}

08108d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108d30:	b580      	push	{r7, lr}
 8108d32:	b084      	sub	sp, #16
 8108d34:	af00      	add	r7, sp, #0
 8108d36:	60f8      	str	r0, [r7, #12]
 8108d38:	60b9      	str	r1, [r7, #8]
 8108d3a:	603b      	str	r3, [r7, #0]
 8108d3c:	4613      	mov	r3, r2
 8108d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108d40:	e04f      	b.n	8108de2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108d42:	69bb      	ldr	r3, [r7, #24]
 8108d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108d48:	d04b      	beq.n	8108de2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108d4a:	f7f9 fd57 	bl	81027fc <HAL_GetTick>
 8108d4e:	4602      	mov	r2, r0
 8108d50:	683b      	ldr	r3, [r7, #0]
 8108d52:	1ad3      	subs	r3, r2, r3
 8108d54:	69ba      	ldr	r2, [r7, #24]
 8108d56:	429a      	cmp	r2, r3
 8108d58:	d302      	bcc.n	8108d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8108d5a:	69bb      	ldr	r3, [r7, #24]
 8108d5c:	2b00      	cmp	r3, #0
 8108d5e:	d101      	bne.n	8108d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8108d60:	2303      	movs	r3, #3
 8108d62:	e04e      	b.n	8108e02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8108d64:	68fb      	ldr	r3, [r7, #12]
 8108d66:	681b      	ldr	r3, [r3, #0]
 8108d68:	681b      	ldr	r3, [r3, #0]
 8108d6a:	f003 0304 	and.w	r3, r3, #4
 8108d6e:	2b00      	cmp	r3, #0
 8108d70:	d037      	beq.n	8108de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8108d72:	68bb      	ldr	r3, [r7, #8]
 8108d74:	2b80      	cmp	r3, #128	@ 0x80
 8108d76:	d034      	beq.n	8108de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8108d78:	68bb      	ldr	r3, [r7, #8]
 8108d7a:	2b40      	cmp	r3, #64	@ 0x40
 8108d7c:	d031      	beq.n	8108de2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8108d7e:	68fb      	ldr	r3, [r7, #12]
 8108d80:	681b      	ldr	r3, [r3, #0]
 8108d82:	69db      	ldr	r3, [r3, #28]
 8108d84:	f003 0308 	and.w	r3, r3, #8
 8108d88:	2b08      	cmp	r3, #8
 8108d8a:	d110      	bne.n	8108dae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8108d8c:	68fb      	ldr	r3, [r7, #12]
 8108d8e:	681b      	ldr	r3, [r3, #0]
 8108d90:	2208      	movs	r2, #8
 8108d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8108d94:	68f8      	ldr	r0, [r7, #12]
 8108d96:	f000 f838 	bl	8108e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8108d9a:	68fb      	ldr	r3, [r7, #12]
 8108d9c:	2208      	movs	r2, #8
 8108d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108da2:	68fb      	ldr	r3, [r7, #12]
 8108da4:	2200      	movs	r2, #0
 8108da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8108daa:	2301      	movs	r3, #1
 8108dac:	e029      	b.n	8108e02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108dae:	68fb      	ldr	r3, [r7, #12]
 8108db0:	681b      	ldr	r3, [r3, #0]
 8108db2:	69db      	ldr	r3, [r3, #28]
 8108db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8108db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8108dbc:	d111      	bne.n	8108de2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108dbe:	68fb      	ldr	r3, [r7, #12]
 8108dc0:	681b      	ldr	r3, [r3, #0]
 8108dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8108dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8108dc8:	68f8      	ldr	r0, [r7, #12]
 8108dca:	f000 f81e 	bl	8108e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108dce:	68fb      	ldr	r3, [r7, #12]
 8108dd0:	2220      	movs	r2, #32
 8108dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108dd6:	68fb      	ldr	r3, [r7, #12]
 8108dd8:	2200      	movs	r2, #0
 8108dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8108dde:	2303      	movs	r3, #3
 8108de0:	e00f      	b.n	8108e02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108de2:	68fb      	ldr	r3, [r7, #12]
 8108de4:	681b      	ldr	r3, [r3, #0]
 8108de6:	69da      	ldr	r2, [r3, #28]
 8108de8:	68bb      	ldr	r3, [r7, #8]
 8108dea:	4013      	ands	r3, r2
 8108dec:	68ba      	ldr	r2, [r7, #8]
 8108dee:	429a      	cmp	r2, r3
 8108df0:	bf0c      	ite	eq
 8108df2:	2301      	moveq	r3, #1
 8108df4:	2300      	movne	r3, #0
 8108df6:	b2db      	uxtb	r3, r3
 8108df8:	461a      	mov	r2, r3
 8108dfa:	79fb      	ldrb	r3, [r7, #7]
 8108dfc:	429a      	cmp	r2, r3
 8108dfe:	d0a0      	beq.n	8108d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108e00:	2300      	movs	r3, #0
}
 8108e02:	4618      	mov	r0, r3
 8108e04:	3710      	adds	r7, #16
 8108e06:	46bd      	mov	sp, r7
 8108e08:	bd80      	pop	{r7, pc}

08108e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108e0a:	b480      	push	{r7}
 8108e0c:	b095      	sub	sp, #84	@ 0x54
 8108e0e:	af00      	add	r7, sp, #0
 8108e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108e12:	687b      	ldr	r3, [r7, #4]
 8108e14:	681b      	ldr	r3, [r3, #0]
 8108e16:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108e1a:	e853 3f00 	ldrex	r3, [r3]
 8108e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8108e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8108e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8108e28:	687b      	ldr	r3, [r7, #4]
 8108e2a:	681b      	ldr	r3, [r3, #0]
 8108e2c:	461a      	mov	r2, r3
 8108e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8108e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8108e32:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108e34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8108e36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8108e38:	e841 2300 	strex	r3, r2, [r1]
 8108e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8108e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108e40:	2b00      	cmp	r3, #0
 8108e42:	d1e6      	bne.n	8108e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108e44:	687b      	ldr	r3, [r7, #4]
 8108e46:	681b      	ldr	r3, [r3, #0]
 8108e48:	3308      	adds	r3, #8
 8108e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108e4c:	6a3b      	ldr	r3, [r7, #32]
 8108e4e:	e853 3f00 	ldrex	r3, [r3]
 8108e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8108e54:	69fb      	ldr	r3, [r7, #28]
 8108e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108e5a:	f023 0301 	bic.w	r3, r3, #1
 8108e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8108e60:	687b      	ldr	r3, [r7, #4]
 8108e62:	681b      	ldr	r3, [r3, #0]
 8108e64:	3308      	adds	r3, #8
 8108e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8108e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8108e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8108e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108e70:	e841 2300 	strex	r3, r2, [r1]
 8108e74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8108e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108e78:	2b00      	cmp	r3, #0
 8108e7a:	d1e3      	bne.n	8108e44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108e7c:	687b      	ldr	r3, [r7, #4]
 8108e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108e80:	2b01      	cmp	r3, #1
 8108e82:	d118      	bne.n	8108eb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108e84:	687b      	ldr	r3, [r7, #4]
 8108e86:	681b      	ldr	r3, [r3, #0]
 8108e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108e8a:	68fb      	ldr	r3, [r7, #12]
 8108e8c:	e853 3f00 	ldrex	r3, [r3]
 8108e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8108e92:	68bb      	ldr	r3, [r7, #8]
 8108e94:	f023 0310 	bic.w	r3, r3, #16
 8108e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8108e9a:	687b      	ldr	r3, [r7, #4]
 8108e9c:	681b      	ldr	r3, [r3, #0]
 8108e9e:	461a      	mov	r2, r3
 8108ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8108ea2:	61bb      	str	r3, [r7, #24]
 8108ea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108ea6:	6979      	ldr	r1, [r7, #20]
 8108ea8:	69ba      	ldr	r2, [r7, #24]
 8108eaa:	e841 2300 	strex	r3, r2, [r1]
 8108eae:	613b      	str	r3, [r7, #16]
   return(result);
 8108eb0:	693b      	ldr	r3, [r7, #16]
 8108eb2:	2b00      	cmp	r3, #0
 8108eb4:	d1e6      	bne.n	8108e84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108eb6:	687b      	ldr	r3, [r7, #4]
 8108eb8:	2220      	movs	r2, #32
 8108eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108ebe:	687b      	ldr	r3, [r7, #4]
 8108ec0:	2200      	movs	r2, #0
 8108ec2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8108ec4:	687b      	ldr	r3, [r7, #4]
 8108ec6:	2200      	movs	r2, #0
 8108ec8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8108eca:	bf00      	nop
 8108ecc:	3754      	adds	r7, #84	@ 0x54
 8108ece:	46bd      	mov	sp, r7
 8108ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ed4:	4770      	bx	lr

08108ed6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8108ed6:	b084      	sub	sp, #16
 8108ed8:	b580      	push	{r7, lr}
 8108eda:	b084      	sub	sp, #16
 8108edc:	af00      	add	r7, sp, #0
 8108ede:	6078      	str	r0, [r7, #4]
 8108ee0:	f107 001c 	add.w	r0, r7, #28
 8108ee4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8108ee8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8108eec:	2b01      	cmp	r3, #1
 8108eee:	d123      	bne.n	8108f38 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8108ef0:	687b      	ldr	r3, [r7, #4]
 8108ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108ef4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8108ef8:	687b      	ldr	r3, [r7, #4]
 8108efa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8108efc:	687b      	ldr	r3, [r7, #4]
 8108efe:	68db      	ldr	r3, [r3, #12]
 8108f00:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8108f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8108f08:	687a      	ldr	r2, [r7, #4]
 8108f0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8108f0c:	687b      	ldr	r3, [r7, #4]
 8108f0e:	68db      	ldr	r3, [r3, #12]
 8108f10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8108f14:	687b      	ldr	r3, [r7, #4]
 8108f16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8108f18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8108f1c:	2b01      	cmp	r3, #1
 8108f1e:	d105      	bne.n	8108f2c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8108f20:	687b      	ldr	r3, [r7, #4]
 8108f22:	68db      	ldr	r3, [r3, #12]
 8108f24:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8108f28:	687b      	ldr	r3, [r7, #4]
 8108f2a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8108f2c:	6878      	ldr	r0, [r7, #4]
 8108f2e:	f000 faa7 	bl	8109480 <USB_CoreReset>
 8108f32:	4603      	mov	r3, r0
 8108f34:	73fb      	strb	r3, [r7, #15]
 8108f36:	e01b      	b.n	8108f70 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8108f38:	687b      	ldr	r3, [r7, #4]
 8108f3a:	68db      	ldr	r3, [r3, #12]
 8108f3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8108f40:	687b      	ldr	r3, [r7, #4]
 8108f42:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8108f44:	6878      	ldr	r0, [r7, #4]
 8108f46:	f000 fa9b 	bl	8109480 <USB_CoreReset>
 8108f4a:	4603      	mov	r3, r0
 8108f4c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8108f4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8108f52:	2b00      	cmp	r3, #0
 8108f54:	d106      	bne.n	8108f64 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8108f56:	687b      	ldr	r3, [r7, #4]
 8108f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108f5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8108f5e:	687b      	ldr	r3, [r7, #4]
 8108f60:	639a      	str	r2, [r3, #56]	@ 0x38
 8108f62:	e005      	b.n	8108f70 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8108f64:	687b      	ldr	r3, [r7, #4]
 8108f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108f68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8108f6c:	687b      	ldr	r3, [r7, #4]
 8108f6e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8108f70:	7fbb      	ldrb	r3, [r7, #30]
 8108f72:	2b01      	cmp	r3, #1
 8108f74:	d118      	bne.n	8108fa8 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8108f76:	687b      	ldr	r3, [r7, #4]
 8108f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108f7a:	b29a      	uxth	r2, r3
 8108f7c:	687b      	ldr	r3, [r7, #4]
 8108f7e:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8108f80:	687b      	ldr	r3, [r7, #4]
 8108f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108f84:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 8108f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108f8c:	687a      	ldr	r2, [r7, #4]
 8108f8e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8108f90:	687b      	ldr	r3, [r7, #4]
 8108f92:	689b      	ldr	r3, [r3, #8]
 8108f94:	f043 0206 	orr.w	r2, r3, #6
 8108f98:	687b      	ldr	r3, [r7, #4]
 8108f9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8108f9c:	687b      	ldr	r3, [r7, #4]
 8108f9e:	689b      	ldr	r3, [r3, #8]
 8108fa0:	f043 0220 	orr.w	r2, r3, #32
 8108fa4:	687b      	ldr	r3, [r7, #4]
 8108fa6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8108fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8108faa:	4618      	mov	r0, r3
 8108fac:	3710      	adds	r7, #16
 8108fae:	46bd      	mov	sp, r7
 8108fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8108fb4:	b004      	add	sp, #16
 8108fb6:	4770      	bx	lr

08108fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8108fb8:	b480      	push	{r7}
 8108fba:	b083      	sub	sp, #12
 8108fbc:	af00      	add	r7, sp, #0
 8108fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8108fc0:	687b      	ldr	r3, [r7, #4]
 8108fc2:	689b      	ldr	r3, [r3, #8]
 8108fc4:	f023 0201 	bic.w	r2, r3, #1
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8108fcc:	2300      	movs	r3, #0
}
 8108fce:	4618      	mov	r0, r3
 8108fd0:	370c      	adds	r7, #12
 8108fd2:	46bd      	mov	sp, r7
 8108fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fd8:	4770      	bx	lr

08108fda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8108fda:	b580      	push	{r7, lr}
 8108fdc:	b084      	sub	sp, #16
 8108fde:	af00      	add	r7, sp, #0
 8108fe0:	6078      	str	r0, [r7, #4]
 8108fe2:	460b      	mov	r3, r1
 8108fe4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8108fe6:	2300      	movs	r3, #0
 8108fe8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8108fea:	687b      	ldr	r3, [r7, #4]
 8108fec:	68db      	ldr	r3, [r3, #12]
 8108fee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8108ff6:	78fb      	ldrb	r3, [r7, #3]
 8108ff8:	2b01      	cmp	r3, #1
 8108ffa:	d115      	bne.n	8109028 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8108ffc:	687b      	ldr	r3, [r7, #4]
 8108ffe:	68db      	ldr	r3, [r3, #12]
 8109000:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8109004:	687b      	ldr	r3, [r7, #4]
 8109006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8109008:	200a      	movs	r0, #10
 810900a:	f7f9 fc03 	bl	8102814 <HAL_Delay>
      ms += 10U;
 810900e:	68fb      	ldr	r3, [r7, #12]
 8109010:	330a      	adds	r3, #10
 8109012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8109014:	6878      	ldr	r0, [r7, #4]
 8109016:	f000 fa25 	bl	8109464 <USB_GetMode>
 810901a:	4603      	mov	r3, r0
 810901c:	2b01      	cmp	r3, #1
 810901e:	d01e      	beq.n	810905e <USB_SetCurrentMode+0x84>
 8109020:	68fb      	ldr	r3, [r7, #12]
 8109022:	2bc7      	cmp	r3, #199	@ 0xc7
 8109024:	d9f0      	bls.n	8109008 <USB_SetCurrentMode+0x2e>
 8109026:	e01a      	b.n	810905e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8109028:	78fb      	ldrb	r3, [r7, #3]
 810902a:	2b00      	cmp	r3, #0
 810902c:	d115      	bne.n	810905a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810902e:	687b      	ldr	r3, [r7, #4]
 8109030:	68db      	ldr	r3, [r3, #12]
 8109032:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8109036:	687b      	ldr	r3, [r7, #4]
 8109038:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810903a:	200a      	movs	r0, #10
 810903c:	f7f9 fbea 	bl	8102814 <HAL_Delay>
      ms += 10U;
 8109040:	68fb      	ldr	r3, [r7, #12]
 8109042:	330a      	adds	r3, #10
 8109044:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8109046:	6878      	ldr	r0, [r7, #4]
 8109048:	f000 fa0c 	bl	8109464 <USB_GetMode>
 810904c:	4603      	mov	r3, r0
 810904e:	2b00      	cmp	r3, #0
 8109050:	d005      	beq.n	810905e <USB_SetCurrentMode+0x84>
 8109052:	68fb      	ldr	r3, [r7, #12]
 8109054:	2bc7      	cmp	r3, #199	@ 0xc7
 8109056:	d9f0      	bls.n	810903a <USB_SetCurrentMode+0x60>
 8109058:	e001      	b.n	810905e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810905a:	2301      	movs	r3, #1
 810905c:	e005      	b.n	810906a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 810905e:	68fb      	ldr	r3, [r7, #12]
 8109060:	2bc8      	cmp	r3, #200	@ 0xc8
 8109062:	d101      	bne.n	8109068 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8109064:	2301      	movs	r3, #1
 8109066:	e000      	b.n	810906a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8109068:	2300      	movs	r3, #0
}
 810906a:	4618      	mov	r0, r3
 810906c:	3710      	adds	r7, #16
 810906e:	46bd      	mov	sp, r7
 8109070:	bd80      	pop	{r7, pc}
	...

08109074 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8109074:	b084      	sub	sp, #16
 8109076:	b580      	push	{r7, lr}
 8109078:	b086      	sub	sp, #24
 810907a:	af00      	add	r7, sp, #0
 810907c:	6078      	str	r0, [r7, #4]
 810907e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8109082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8109086:	2300      	movs	r3, #0
 8109088:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810908a:	687b      	ldr	r3, [r7, #4]
 810908c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810908e:	2300      	movs	r3, #0
 8109090:	613b      	str	r3, [r7, #16]
 8109092:	e009      	b.n	81090a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8109094:	687a      	ldr	r2, [r7, #4]
 8109096:	693b      	ldr	r3, [r7, #16]
 8109098:	3340      	adds	r3, #64	@ 0x40
 810909a:	009b      	lsls	r3, r3, #2
 810909c:	4413      	add	r3, r2
 810909e:	2200      	movs	r2, #0
 81090a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 81090a2:	693b      	ldr	r3, [r7, #16]
 81090a4:	3301      	adds	r3, #1
 81090a6:	613b      	str	r3, [r7, #16]
 81090a8:	693b      	ldr	r3, [r7, #16]
 81090aa:	2b0e      	cmp	r3, #14
 81090ac:	d9f2      	bls.n	8109094 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 81090ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 81090b2:	2b00      	cmp	r3, #0
 81090b4:	d11c      	bne.n	81090f0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 81090b6:	68fb      	ldr	r3, [r7, #12]
 81090b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81090bc:	685b      	ldr	r3, [r3, #4]
 81090be:	68fa      	ldr	r2, [r7, #12]
 81090c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81090c4:	f043 0302 	orr.w	r3, r3, #2
 81090c8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 81090ca:	687b      	ldr	r3, [r7, #4]
 81090cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81090ce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 81090d2:	687b      	ldr	r3, [r7, #4]
 81090d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 81090d6:	687b      	ldr	r3, [r7, #4]
 81090d8:	681b      	ldr	r3, [r3, #0]
 81090da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 81090de:	687b      	ldr	r3, [r7, #4]
 81090e0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 81090e2:	687b      	ldr	r3, [r7, #4]
 81090e4:	681b      	ldr	r3, [r3, #0]
 81090e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81090ea:	687b      	ldr	r3, [r7, #4]
 81090ec:	601a      	str	r2, [r3, #0]
 81090ee:	e005      	b.n	81090fc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 81090f0:	687b      	ldr	r3, [r7, #4]
 81090f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81090f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 81090f8:	687b      	ldr	r3, [r7, #4]
 81090fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 81090fc:	68fb      	ldr	r3, [r7, #12]
 81090fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8109102:	461a      	mov	r2, r3
 8109104:	2300      	movs	r3, #0
 8109106:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8109108:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 810910c:	2b01      	cmp	r3, #1
 810910e:	d10d      	bne.n	810912c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8109110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109114:	2b00      	cmp	r3, #0
 8109116:	d104      	bne.n	8109122 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8109118:	2100      	movs	r1, #0
 810911a:	6878      	ldr	r0, [r7, #4]
 810911c:	f000 f968 	bl	81093f0 <USB_SetDevSpeed>
 8109120:	e008      	b.n	8109134 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8109122:	2101      	movs	r1, #1
 8109124:	6878      	ldr	r0, [r7, #4]
 8109126:	f000 f963 	bl	81093f0 <USB_SetDevSpeed>
 810912a:	e003      	b.n	8109134 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810912c:	2103      	movs	r1, #3
 810912e:	6878      	ldr	r0, [r7, #4]
 8109130:	f000 f95e 	bl	81093f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8109134:	2110      	movs	r1, #16
 8109136:	6878      	ldr	r0, [r7, #4]
 8109138:	f000 f8fa 	bl	8109330 <USB_FlushTxFifo>
 810913c:	4603      	mov	r3, r0
 810913e:	2b00      	cmp	r3, #0
 8109140:	d001      	beq.n	8109146 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8109142:	2301      	movs	r3, #1
 8109144:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8109146:	6878      	ldr	r0, [r7, #4]
 8109148:	f000 f924 	bl	8109394 <USB_FlushRxFifo>
 810914c:	4603      	mov	r3, r0
 810914e:	2b00      	cmp	r3, #0
 8109150:	d001      	beq.n	8109156 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8109152:	2301      	movs	r3, #1
 8109154:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8109156:	68fb      	ldr	r3, [r7, #12]
 8109158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810915c:	461a      	mov	r2, r3
 810915e:	2300      	movs	r3, #0
 8109160:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8109162:	68fb      	ldr	r3, [r7, #12]
 8109164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109168:	461a      	mov	r2, r3
 810916a:	2300      	movs	r3, #0
 810916c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810916e:	68fb      	ldr	r3, [r7, #12]
 8109170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109174:	461a      	mov	r2, r3
 8109176:	2300      	movs	r3, #0
 8109178:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810917a:	2300      	movs	r3, #0
 810917c:	613b      	str	r3, [r7, #16]
 810917e:	e043      	b.n	8109208 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8109180:	693b      	ldr	r3, [r7, #16]
 8109182:	015a      	lsls	r2, r3, #5
 8109184:	68fb      	ldr	r3, [r7, #12]
 8109186:	4413      	add	r3, r2
 8109188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810918c:	681b      	ldr	r3, [r3, #0]
 810918e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8109192:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8109196:	d118      	bne.n	81091ca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8109198:	693b      	ldr	r3, [r7, #16]
 810919a:	2b00      	cmp	r3, #0
 810919c:	d10a      	bne.n	81091b4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810919e:	693b      	ldr	r3, [r7, #16]
 81091a0:	015a      	lsls	r2, r3, #5
 81091a2:	68fb      	ldr	r3, [r7, #12]
 81091a4:	4413      	add	r3, r2
 81091a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81091aa:	461a      	mov	r2, r3
 81091ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 81091b0:	6013      	str	r3, [r2, #0]
 81091b2:	e013      	b.n	81091dc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 81091b4:	693b      	ldr	r3, [r7, #16]
 81091b6:	015a      	lsls	r2, r3, #5
 81091b8:	68fb      	ldr	r3, [r7, #12]
 81091ba:	4413      	add	r3, r2
 81091bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81091c0:	461a      	mov	r2, r3
 81091c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 81091c6:	6013      	str	r3, [r2, #0]
 81091c8:	e008      	b.n	81091dc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 81091ca:	693b      	ldr	r3, [r7, #16]
 81091cc:	015a      	lsls	r2, r3, #5
 81091ce:	68fb      	ldr	r3, [r7, #12]
 81091d0:	4413      	add	r3, r2
 81091d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81091d6:	461a      	mov	r2, r3
 81091d8:	2300      	movs	r3, #0
 81091da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 81091dc:	693b      	ldr	r3, [r7, #16]
 81091de:	015a      	lsls	r2, r3, #5
 81091e0:	68fb      	ldr	r3, [r7, #12]
 81091e2:	4413      	add	r3, r2
 81091e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81091e8:	461a      	mov	r2, r3
 81091ea:	2300      	movs	r3, #0
 81091ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 81091ee:	693b      	ldr	r3, [r7, #16]
 81091f0:	015a      	lsls	r2, r3, #5
 81091f2:	68fb      	ldr	r3, [r7, #12]
 81091f4:	4413      	add	r3, r2
 81091f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81091fa:	461a      	mov	r2, r3
 81091fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8109200:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8109202:	693b      	ldr	r3, [r7, #16]
 8109204:	3301      	adds	r3, #1
 8109206:	613b      	str	r3, [r7, #16]
 8109208:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810920c:	461a      	mov	r2, r3
 810920e:	693b      	ldr	r3, [r7, #16]
 8109210:	4293      	cmp	r3, r2
 8109212:	d3b5      	bcc.n	8109180 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8109214:	2300      	movs	r3, #0
 8109216:	613b      	str	r3, [r7, #16]
 8109218:	e043      	b.n	81092a2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810921a:	693b      	ldr	r3, [r7, #16]
 810921c:	015a      	lsls	r2, r3, #5
 810921e:	68fb      	ldr	r3, [r7, #12]
 8109220:	4413      	add	r3, r2
 8109222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109226:	681b      	ldr	r3, [r3, #0]
 8109228:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810922c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8109230:	d118      	bne.n	8109264 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8109232:	693b      	ldr	r3, [r7, #16]
 8109234:	2b00      	cmp	r3, #0
 8109236:	d10a      	bne.n	810924e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8109238:	693b      	ldr	r3, [r7, #16]
 810923a:	015a      	lsls	r2, r3, #5
 810923c:	68fb      	ldr	r3, [r7, #12]
 810923e:	4413      	add	r3, r2
 8109240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109244:	461a      	mov	r2, r3
 8109246:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810924a:	6013      	str	r3, [r2, #0]
 810924c:	e013      	b.n	8109276 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810924e:	693b      	ldr	r3, [r7, #16]
 8109250:	015a      	lsls	r2, r3, #5
 8109252:	68fb      	ldr	r3, [r7, #12]
 8109254:	4413      	add	r3, r2
 8109256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810925a:	461a      	mov	r2, r3
 810925c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8109260:	6013      	str	r3, [r2, #0]
 8109262:	e008      	b.n	8109276 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8109264:	693b      	ldr	r3, [r7, #16]
 8109266:	015a      	lsls	r2, r3, #5
 8109268:	68fb      	ldr	r3, [r7, #12]
 810926a:	4413      	add	r3, r2
 810926c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109270:	461a      	mov	r2, r3
 8109272:	2300      	movs	r3, #0
 8109274:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8109276:	693b      	ldr	r3, [r7, #16]
 8109278:	015a      	lsls	r2, r3, #5
 810927a:	68fb      	ldr	r3, [r7, #12]
 810927c:	4413      	add	r3, r2
 810927e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109282:	461a      	mov	r2, r3
 8109284:	2300      	movs	r3, #0
 8109286:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8109288:	693b      	ldr	r3, [r7, #16]
 810928a:	015a      	lsls	r2, r3, #5
 810928c:	68fb      	ldr	r3, [r7, #12]
 810928e:	4413      	add	r3, r2
 8109290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8109294:	461a      	mov	r2, r3
 8109296:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810929a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810929c:	693b      	ldr	r3, [r7, #16]
 810929e:	3301      	adds	r3, #1
 81092a0:	613b      	str	r3, [r7, #16]
 81092a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 81092a6:	461a      	mov	r2, r3
 81092a8:	693b      	ldr	r3, [r7, #16]
 81092aa:	4293      	cmp	r3, r2
 81092ac:	d3b5      	bcc.n	810921a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 81092ae:	68fb      	ldr	r3, [r7, #12]
 81092b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81092b4:	691b      	ldr	r3, [r3, #16]
 81092b6:	68fa      	ldr	r2, [r7, #12]
 81092b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81092bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81092c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 81092c2:	687b      	ldr	r3, [r7, #4]
 81092c4:	2200      	movs	r2, #0
 81092c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 81092ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 81092d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 81092d4:	2b00      	cmp	r3, #0
 81092d6:	d105      	bne.n	81092e4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	699b      	ldr	r3, [r3, #24]
 81092dc:	f043 0210 	orr.w	r2, r3, #16
 81092e0:	687b      	ldr	r3, [r7, #4]
 81092e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 81092e4:	687b      	ldr	r3, [r7, #4]
 81092e6:	699a      	ldr	r2, [r3, #24]
 81092e8:	4b10      	ldr	r3, [pc, #64]	@ (810932c <USB_DevInit+0x2b8>)
 81092ea:	4313      	orrs	r3, r2
 81092ec:	687a      	ldr	r2, [r7, #4]
 81092ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 81092f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 81092f4:	2b00      	cmp	r3, #0
 81092f6:	d005      	beq.n	8109304 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 81092f8:	687b      	ldr	r3, [r7, #4]
 81092fa:	699b      	ldr	r3, [r3, #24]
 81092fc:	f043 0208 	orr.w	r2, r3, #8
 8109300:	687b      	ldr	r3, [r7, #4]
 8109302:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8109304:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8109308:	2b01      	cmp	r3, #1
 810930a:	d107      	bne.n	810931c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810930c:	687b      	ldr	r3, [r7, #4]
 810930e:	699b      	ldr	r3, [r3, #24]
 8109310:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8109314:	f043 0304 	orr.w	r3, r3, #4
 8109318:	687a      	ldr	r2, [r7, #4]
 810931a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810931c:	7dfb      	ldrb	r3, [r7, #23]
}
 810931e:	4618      	mov	r0, r3
 8109320:	3718      	adds	r7, #24
 8109322:	46bd      	mov	sp, r7
 8109324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8109328:	b004      	add	sp, #16
 810932a:	4770      	bx	lr
 810932c:	803c3800 	.word	0x803c3800

08109330 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8109330:	b480      	push	{r7}
 8109332:	b085      	sub	sp, #20
 8109334:	af00      	add	r7, sp, #0
 8109336:	6078      	str	r0, [r7, #4]
 8109338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810933a:	2300      	movs	r3, #0
 810933c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810933e:	68fb      	ldr	r3, [r7, #12]
 8109340:	3301      	adds	r3, #1
 8109342:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8109344:	68fb      	ldr	r3, [r7, #12]
 8109346:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810934a:	d901      	bls.n	8109350 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810934c:	2303      	movs	r3, #3
 810934e:	e01b      	b.n	8109388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8109350:	687b      	ldr	r3, [r7, #4]
 8109352:	691b      	ldr	r3, [r3, #16]
 8109354:	2b00      	cmp	r3, #0
 8109356:	daf2      	bge.n	810933e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8109358:	2300      	movs	r3, #0
 810935a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810935c:	683b      	ldr	r3, [r7, #0]
 810935e:	019b      	lsls	r3, r3, #6
 8109360:	f043 0220 	orr.w	r2, r3, #32
 8109364:	687b      	ldr	r3, [r7, #4]
 8109366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8109368:	68fb      	ldr	r3, [r7, #12]
 810936a:	3301      	adds	r3, #1
 810936c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810936e:	68fb      	ldr	r3, [r7, #12]
 8109370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8109374:	d901      	bls.n	810937a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8109376:	2303      	movs	r3, #3
 8109378:	e006      	b.n	8109388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810937a:	687b      	ldr	r3, [r7, #4]
 810937c:	691b      	ldr	r3, [r3, #16]
 810937e:	f003 0320 	and.w	r3, r3, #32
 8109382:	2b20      	cmp	r3, #32
 8109384:	d0f0      	beq.n	8109368 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8109386:	2300      	movs	r3, #0
}
 8109388:	4618      	mov	r0, r3
 810938a:	3714      	adds	r7, #20
 810938c:	46bd      	mov	sp, r7
 810938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109392:	4770      	bx	lr

08109394 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8109394:	b480      	push	{r7}
 8109396:	b085      	sub	sp, #20
 8109398:	af00      	add	r7, sp, #0
 810939a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810939c:	2300      	movs	r3, #0
 810939e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81093a0:	68fb      	ldr	r3, [r7, #12]
 81093a2:	3301      	adds	r3, #1
 81093a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81093a6:	68fb      	ldr	r3, [r7, #12]
 81093a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81093ac:	d901      	bls.n	81093b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 81093ae:	2303      	movs	r3, #3
 81093b0:	e018      	b.n	81093e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81093b2:	687b      	ldr	r3, [r7, #4]
 81093b4:	691b      	ldr	r3, [r3, #16]
 81093b6:	2b00      	cmp	r3, #0
 81093b8:	daf2      	bge.n	81093a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 81093ba:	2300      	movs	r3, #0
 81093bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 81093be:	687b      	ldr	r3, [r7, #4]
 81093c0:	2210      	movs	r2, #16
 81093c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81093c4:	68fb      	ldr	r3, [r7, #12]
 81093c6:	3301      	adds	r3, #1
 81093c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81093ca:	68fb      	ldr	r3, [r7, #12]
 81093cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81093d0:	d901      	bls.n	81093d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 81093d2:	2303      	movs	r3, #3
 81093d4:	e006      	b.n	81093e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 81093d6:	687b      	ldr	r3, [r7, #4]
 81093d8:	691b      	ldr	r3, [r3, #16]
 81093da:	f003 0310 	and.w	r3, r3, #16
 81093de:	2b10      	cmp	r3, #16
 81093e0:	d0f0      	beq.n	81093c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 81093e2:	2300      	movs	r3, #0
}
 81093e4:	4618      	mov	r0, r3
 81093e6:	3714      	adds	r7, #20
 81093e8:	46bd      	mov	sp, r7
 81093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093ee:	4770      	bx	lr

081093f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 81093f0:	b480      	push	{r7}
 81093f2:	b085      	sub	sp, #20
 81093f4:	af00      	add	r7, sp, #0
 81093f6:	6078      	str	r0, [r7, #4]
 81093f8:	460b      	mov	r3, r1
 81093fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81093fc:	687b      	ldr	r3, [r7, #4]
 81093fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8109400:	68fb      	ldr	r3, [r7, #12]
 8109402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109406:	681a      	ldr	r2, [r3, #0]
 8109408:	78fb      	ldrb	r3, [r7, #3]
 810940a:	68f9      	ldr	r1, [r7, #12]
 810940c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8109410:	4313      	orrs	r3, r2
 8109412:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8109414:	2300      	movs	r3, #0
}
 8109416:	4618      	mov	r0, r3
 8109418:	3714      	adds	r7, #20
 810941a:	46bd      	mov	sp, r7
 810941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109420:	4770      	bx	lr

08109422 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8109422:	b480      	push	{r7}
 8109424:	b085      	sub	sp, #20
 8109426:	af00      	add	r7, sp, #0
 8109428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810942a:	687b      	ldr	r3, [r7, #4]
 810942c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810942e:	68fb      	ldr	r3, [r7, #12]
 8109430:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8109434:	681b      	ldr	r3, [r3, #0]
 8109436:	68fa      	ldr	r2, [r7, #12]
 8109438:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810943c:	f023 0303 	bic.w	r3, r3, #3
 8109440:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8109442:	68fb      	ldr	r3, [r7, #12]
 8109444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8109448:	685b      	ldr	r3, [r3, #4]
 810944a:	68fa      	ldr	r2, [r7, #12]
 810944c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8109450:	f043 0302 	orr.w	r3, r3, #2
 8109454:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8109456:	2300      	movs	r3, #0
}
 8109458:	4618      	mov	r0, r3
 810945a:	3714      	adds	r7, #20
 810945c:	46bd      	mov	sp, r7
 810945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109462:	4770      	bx	lr

08109464 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8109464:	b480      	push	{r7}
 8109466:	b083      	sub	sp, #12
 8109468:	af00      	add	r7, sp, #0
 810946a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810946c:	687b      	ldr	r3, [r7, #4]
 810946e:	695b      	ldr	r3, [r3, #20]
 8109470:	f003 0301 	and.w	r3, r3, #1
}
 8109474:	4618      	mov	r0, r3
 8109476:	370c      	adds	r7, #12
 8109478:	46bd      	mov	sp, r7
 810947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810947e:	4770      	bx	lr

08109480 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8109480:	b480      	push	{r7}
 8109482:	b085      	sub	sp, #20
 8109484:	af00      	add	r7, sp, #0
 8109486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8109488:	2300      	movs	r3, #0
 810948a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810948c:	68fb      	ldr	r3, [r7, #12]
 810948e:	3301      	adds	r3, #1
 8109490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8109492:	68fb      	ldr	r3, [r7, #12]
 8109494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8109498:	d901      	bls.n	810949e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810949a:	2303      	movs	r3, #3
 810949c:	e01b      	b.n	81094d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810949e:	687b      	ldr	r3, [r7, #4]
 81094a0:	691b      	ldr	r3, [r3, #16]
 81094a2:	2b00      	cmp	r3, #0
 81094a4:	daf2      	bge.n	810948c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 81094a6:	2300      	movs	r3, #0
 81094a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 81094aa:	687b      	ldr	r3, [r7, #4]
 81094ac:	691b      	ldr	r3, [r3, #16]
 81094ae:	f043 0201 	orr.w	r2, r3, #1
 81094b2:	687b      	ldr	r3, [r7, #4]
 81094b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81094b6:	68fb      	ldr	r3, [r7, #12]
 81094b8:	3301      	adds	r3, #1
 81094ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81094bc:	68fb      	ldr	r3, [r7, #12]
 81094be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81094c2:	d901      	bls.n	81094c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 81094c4:	2303      	movs	r3, #3
 81094c6:	e006      	b.n	81094d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 81094c8:	687b      	ldr	r3, [r7, #4]
 81094ca:	691b      	ldr	r3, [r3, #16]
 81094cc:	f003 0301 	and.w	r3, r3, #1
 81094d0:	2b01      	cmp	r3, #1
 81094d2:	d0f0      	beq.n	81094b6 <USB_CoreReset+0x36>

  return HAL_OK;
 81094d4:	2300      	movs	r3, #0
}
 81094d6:	4618      	mov	r0, r3
 81094d8:	3714      	adds	r7, #20
 81094da:	46bd      	mov	sp, r7
 81094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094e0:	4770      	bx	lr
	...

081094e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81094e4:	b580      	push	{r7, lr}
 81094e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81094e8:	4b05      	ldr	r3, [pc, #20]	@ (8109500 <SysTick_Handler+0x1c>)
 81094ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81094ec:	f000 f9fe 	bl	81098ec <xTaskGetSchedulerState>
 81094f0:	4603      	mov	r3, r0
 81094f2:	2b01      	cmp	r3, #1
 81094f4:	d001      	beq.n	81094fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 81094f6:	f000 f89f 	bl	8109638 <xPortSysTickHandler>
  }
}
 81094fa:	bf00      	nop
 81094fc:	bd80      	pop	{r7, pc}
 81094fe:	bf00      	nop
 8109500:	e000e010 	.word	0xe000e010

08109504 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8109504:	b480      	push	{r7}
 8109506:	b085      	sub	sp, #20
 8109508:	af00      	add	r7, sp, #0
 810950a:	6078      	str	r0, [r7, #4]
 810950c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810950e:	687b      	ldr	r3, [r7, #4]
 8109510:	685b      	ldr	r3, [r3, #4]
 8109512:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8109514:	683b      	ldr	r3, [r7, #0]
 8109516:	68fa      	ldr	r2, [r7, #12]
 8109518:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810951a:	68fb      	ldr	r3, [r7, #12]
 810951c:	689a      	ldr	r2, [r3, #8]
 810951e:	683b      	ldr	r3, [r7, #0]
 8109520:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8109522:	68fb      	ldr	r3, [r7, #12]
 8109524:	689b      	ldr	r3, [r3, #8]
 8109526:	683a      	ldr	r2, [r7, #0]
 8109528:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810952a:	68fb      	ldr	r3, [r7, #12]
 810952c:	683a      	ldr	r2, [r7, #0]
 810952e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8109530:	683b      	ldr	r3, [r7, #0]
 8109532:	687a      	ldr	r2, [r7, #4]
 8109534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8109536:	687b      	ldr	r3, [r7, #4]
 8109538:	681b      	ldr	r3, [r3, #0]
 810953a:	1c5a      	adds	r2, r3, #1
 810953c:	687b      	ldr	r3, [r7, #4]
 810953e:	601a      	str	r2, [r3, #0]
}
 8109540:	bf00      	nop
 8109542:	3714      	adds	r7, #20
 8109544:	46bd      	mov	sp, r7
 8109546:	f85d 7b04 	ldr.w	r7, [sp], #4
 810954a:	4770      	bx	lr

0810954c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810954c:	b480      	push	{r7}
 810954e:	b085      	sub	sp, #20
 8109550:	af00      	add	r7, sp, #0
 8109552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8109554:	687b      	ldr	r3, [r7, #4]
 8109556:	691b      	ldr	r3, [r3, #16]
 8109558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810955a:	687b      	ldr	r3, [r7, #4]
 810955c:	685b      	ldr	r3, [r3, #4]
 810955e:	687a      	ldr	r2, [r7, #4]
 8109560:	6892      	ldr	r2, [r2, #8]
 8109562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8109564:	687b      	ldr	r3, [r7, #4]
 8109566:	689b      	ldr	r3, [r3, #8]
 8109568:	687a      	ldr	r2, [r7, #4]
 810956a:	6852      	ldr	r2, [r2, #4]
 810956c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810956e:	68fb      	ldr	r3, [r7, #12]
 8109570:	685b      	ldr	r3, [r3, #4]
 8109572:	687a      	ldr	r2, [r7, #4]
 8109574:	429a      	cmp	r2, r3
 8109576:	d103      	bne.n	8109580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8109578:	687b      	ldr	r3, [r7, #4]
 810957a:	689a      	ldr	r2, [r3, #8]
 810957c:	68fb      	ldr	r3, [r7, #12]
 810957e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8109580:	687b      	ldr	r3, [r7, #4]
 8109582:	2200      	movs	r2, #0
 8109584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8109586:	68fb      	ldr	r3, [r7, #12]
 8109588:	681b      	ldr	r3, [r3, #0]
 810958a:	1e5a      	subs	r2, r3, #1
 810958c:	68fb      	ldr	r3, [r7, #12]
 810958e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8109590:	68fb      	ldr	r3, [r7, #12]
 8109592:	681b      	ldr	r3, [r3, #0]
}
 8109594:	4618      	mov	r0, r3
 8109596:	3714      	adds	r7, #20
 8109598:	46bd      	mov	sp, r7
 810959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810959e:	4770      	bx	lr

081095a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81095a0:	4b07      	ldr	r3, [pc, #28]	@ (81095c0 <pxCurrentTCBConst2>)
 81095a2:	6819      	ldr	r1, [r3, #0]
 81095a4:	6808      	ldr	r0, [r1, #0]
 81095a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81095aa:	f380 8809 	msr	PSP, r0
 81095ae:	f3bf 8f6f 	isb	sy
 81095b2:	f04f 0000 	mov.w	r0, #0
 81095b6:	f380 8811 	msr	BASEPRI, r0
 81095ba:	4770      	bx	lr
 81095bc:	f3af 8000 	nop.w

081095c0 <pxCurrentTCBConst2>:
 81095c0:	100009a0 	.word	0x100009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81095c4:	bf00      	nop
 81095c6:	bf00      	nop
	...

081095d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81095d0:	f3ef 8009 	mrs	r0, PSP
 81095d4:	f3bf 8f6f 	isb	sy
 81095d8:	4b15      	ldr	r3, [pc, #84]	@ (8109630 <pxCurrentTCBConst>)
 81095da:	681a      	ldr	r2, [r3, #0]
 81095dc:	f01e 0f10 	tst.w	lr, #16
 81095e0:	bf08      	it	eq
 81095e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81095e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81095ea:	6010      	str	r0, [r2, #0]
 81095ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 81095f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81095f4:	f380 8811 	msr	BASEPRI, r0
 81095f8:	f3bf 8f4f 	dsb	sy
 81095fc:	f3bf 8f6f 	isb	sy
 8109600:	f000 f8f6 	bl	81097f0 <vTaskSwitchContext>
 8109604:	f04f 0000 	mov.w	r0, #0
 8109608:	f380 8811 	msr	BASEPRI, r0
 810960c:	bc09      	pop	{r0, r3}
 810960e:	6819      	ldr	r1, [r3, #0]
 8109610:	6808      	ldr	r0, [r1, #0]
 8109612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109616:	f01e 0f10 	tst.w	lr, #16
 810961a:	bf08      	it	eq
 810961c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8109620:	f380 8809 	msr	PSP, r0
 8109624:	f3bf 8f6f 	isb	sy
 8109628:	4770      	bx	lr
 810962a:	bf00      	nop
 810962c:	f3af 8000 	nop.w

08109630 <pxCurrentTCBConst>:
 8109630:	100009a0 	.word	0x100009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8109634:	bf00      	nop
 8109636:	bf00      	nop

08109638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8109638:	b580      	push	{r7, lr}
 810963a:	b082      	sub	sp, #8
 810963c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810963e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109642:	f383 8811 	msr	BASEPRI, r3
 8109646:	f3bf 8f6f 	isb	sy
 810964a:	f3bf 8f4f 	dsb	sy
 810964e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8109650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8109652:	f000 f813 	bl	810967c <xTaskIncrementTick>
 8109656:	4603      	mov	r3, r0
 8109658:	2b00      	cmp	r3, #0
 810965a:	d003      	beq.n	8109664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810965c:	4b06      	ldr	r3, [pc, #24]	@ (8109678 <xPortSysTickHandler+0x40>)
 810965e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109662:	601a      	str	r2, [r3, #0]
 8109664:	2300      	movs	r3, #0
 8109666:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8109668:	683b      	ldr	r3, [r7, #0]
 810966a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810966e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8109670:	bf00      	nop
 8109672:	3708      	adds	r7, #8
 8109674:	46bd      	mov	sp, r7
 8109676:	bd80      	pop	{r7, pc}
 8109678:	e000ed04 	.word	0xe000ed04

0810967c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810967c:	b580      	push	{r7, lr}
 810967e:	b086      	sub	sp, #24
 8109680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8109682:	2300      	movs	r3, #0
 8109684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8109686:	4b4f      	ldr	r3, [pc, #316]	@ (81097c4 <xTaskIncrementTick+0x148>)
 8109688:	681b      	ldr	r3, [r3, #0]
 810968a:	2b00      	cmp	r3, #0
 810968c:	f040 8090 	bne.w	81097b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8109690:	4b4d      	ldr	r3, [pc, #308]	@ (81097c8 <xTaskIncrementTick+0x14c>)
 8109692:	681b      	ldr	r3, [r3, #0]
 8109694:	3301      	adds	r3, #1
 8109696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8109698:	4a4b      	ldr	r2, [pc, #300]	@ (81097c8 <xTaskIncrementTick+0x14c>)
 810969a:	693b      	ldr	r3, [r7, #16]
 810969c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810969e:	693b      	ldr	r3, [r7, #16]
 81096a0:	2b00      	cmp	r3, #0
 81096a2:	d121      	bne.n	81096e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 81096a4:	4b49      	ldr	r3, [pc, #292]	@ (81097cc <xTaskIncrementTick+0x150>)
 81096a6:	681b      	ldr	r3, [r3, #0]
 81096a8:	681b      	ldr	r3, [r3, #0]
 81096aa:	2b00      	cmp	r3, #0
 81096ac:	d00b      	beq.n	81096c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 81096ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81096b2:	f383 8811 	msr	BASEPRI, r3
 81096b6:	f3bf 8f6f 	isb	sy
 81096ba:	f3bf 8f4f 	dsb	sy
 81096be:	603b      	str	r3, [r7, #0]
}
 81096c0:	bf00      	nop
 81096c2:	bf00      	nop
 81096c4:	e7fd      	b.n	81096c2 <xTaskIncrementTick+0x46>
 81096c6:	4b41      	ldr	r3, [pc, #260]	@ (81097cc <xTaskIncrementTick+0x150>)
 81096c8:	681b      	ldr	r3, [r3, #0]
 81096ca:	60fb      	str	r3, [r7, #12]
 81096cc:	4b40      	ldr	r3, [pc, #256]	@ (81097d0 <xTaskIncrementTick+0x154>)
 81096ce:	681b      	ldr	r3, [r3, #0]
 81096d0:	4a3e      	ldr	r2, [pc, #248]	@ (81097cc <xTaskIncrementTick+0x150>)
 81096d2:	6013      	str	r3, [r2, #0]
 81096d4:	4a3e      	ldr	r2, [pc, #248]	@ (81097d0 <xTaskIncrementTick+0x154>)
 81096d6:	68fb      	ldr	r3, [r7, #12]
 81096d8:	6013      	str	r3, [r2, #0]
 81096da:	4b3e      	ldr	r3, [pc, #248]	@ (81097d4 <xTaskIncrementTick+0x158>)
 81096dc:	681b      	ldr	r3, [r3, #0]
 81096de:	3301      	adds	r3, #1
 81096e0:	4a3c      	ldr	r2, [pc, #240]	@ (81097d4 <xTaskIncrementTick+0x158>)
 81096e2:	6013      	str	r3, [r2, #0]
 81096e4:	f000 f8e2 	bl	81098ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81096e8:	4b3b      	ldr	r3, [pc, #236]	@ (81097d8 <xTaskIncrementTick+0x15c>)
 81096ea:	681b      	ldr	r3, [r3, #0]
 81096ec:	693a      	ldr	r2, [r7, #16]
 81096ee:	429a      	cmp	r2, r3
 81096f0:	d349      	bcc.n	8109786 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81096f2:	4b36      	ldr	r3, [pc, #216]	@ (81097cc <xTaskIncrementTick+0x150>)
 81096f4:	681b      	ldr	r3, [r3, #0]
 81096f6:	681b      	ldr	r3, [r3, #0]
 81096f8:	2b00      	cmp	r3, #0
 81096fa:	d104      	bne.n	8109706 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81096fc:	4b36      	ldr	r3, [pc, #216]	@ (81097d8 <xTaskIncrementTick+0x15c>)
 81096fe:	f04f 32ff 	mov.w	r2, #4294967295
 8109702:	601a      	str	r2, [r3, #0]
					break;
 8109704:	e03f      	b.n	8109786 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8109706:	4b31      	ldr	r3, [pc, #196]	@ (81097cc <xTaskIncrementTick+0x150>)
 8109708:	681b      	ldr	r3, [r3, #0]
 810970a:	68db      	ldr	r3, [r3, #12]
 810970c:	68db      	ldr	r3, [r3, #12]
 810970e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8109710:	68bb      	ldr	r3, [r7, #8]
 8109712:	685b      	ldr	r3, [r3, #4]
 8109714:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8109716:	693a      	ldr	r2, [r7, #16]
 8109718:	687b      	ldr	r3, [r7, #4]
 810971a:	429a      	cmp	r2, r3
 810971c:	d203      	bcs.n	8109726 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810971e:	4a2e      	ldr	r2, [pc, #184]	@ (81097d8 <xTaskIncrementTick+0x15c>)
 8109720:	687b      	ldr	r3, [r7, #4]
 8109722:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8109724:	e02f      	b.n	8109786 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8109726:	68bb      	ldr	r3, [r7, #8]
 8109728:	3304      	adds	r3, #4
 810972a:	4618      	mov	r0, r3
 810972c:	f7ff ff0e 	bl	810954c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8109730:	68bb      	ldr	r3, [r7, #8]
 8109732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109734:	2b00      	cmp	r3, #0
 8109736:	d004      	beq.n	8109742 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8109738:	68bb      	ldr	r3, [r7, #8]
 810973a:	3318      	adds	r3, #24
 810973c:	4618      	mov	r0, r3
 810973e:	f7ff ff05 	bl	810954c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8109742:	68bb      	ldr	r3, [r7, #8]
 8109744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8109746:	4b25      	ldr	r3, [pc, #148]	@ (81097dc <xTaskIncrementTick+0x160>)
 8109748:	681b      	ldr	r3, [r3, #0]
 810974a:	429a      	cmp	r2, r3
 810974c:	d903      	bls.n	8109756 <xTaskIncrementTick+0xda>
 810974e:	68bb      	ldr	r3, [r7, #8]
 8109750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109752:	4a22      	ldr	r2, [pc, #136]	@ (81097dc <xTaskIncrementTick+0x160>)
 8109754:	6013      	str	r3, [r2, #0]
 8109756:	68bb      	ldr	r3, [r7, #8]
 8109758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810975a:	4613      	mov	r3, r2
 810975c:	009b      	lsls	r3, r3, #2
 810975e:	4413      	add	r3, r2
 8109760:	009b      	lsls	r3, r3, #2
 8109762:	4a1f      	ldr	r2, [pc, #124]	@ (81097e0 <xTaskIncrementTick+0x164>)
 8109764:	441a      	add	r2, r3
 8109766:	68bb      	ldr	r3, [r7, #8]
 8109768:	3304      	adds	r3, #4
 810976a:	4619      	mov	r1, r3
 810976c:	4610      	mov	r0, r2
 810976e:	f7ff fec9 	bl	8109504 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8109772:	68bb      	ldr	r3, [r7, #8]
 8109774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8109776:	4b1b      	ldr	r3, [pc, #108]	@ (81097e4 <xTaskIncrementTick+0x168>)
 8109778:	681b      	ldr	r3, [r3, #0]
 810977a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810977c:	429a      	cmp	r2, r3
 810977e:	d3b8      	bcc.n	81096f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8109780:	2301      	movs	r3, #1
 8109782:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8109784:	e7b5      	b.n	81096f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8109786:	4b17      	ldr	r3, [pc, #92]	@ (81097e4 <xTaskIncrementTick+0x168>)
 8109788:	681b      	ldr	r3, [r3, #0]
 810978a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810978c:	4914      	ldr	r1, [pc, #80]	@ (81097e0 <xTaskIncrementTick+0x164>)
 810978e:	4613      	mov	r3, r2
 8109790:	009b      	lsls	r3, r3, #2
 8109792:	4413      	add	r3, r2
 8109794:	009b      	lsls	r3, r3, #2
 8109796:	440b      	add	r3, r1
 8109798:	681b      	ldr	r3, [r3, #0]
 810979a:	2b01      	cmp	r3, #1
 810979c:	d901      	bls.n	81097a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810979e:	2301      	movs	r3, #1
 81097a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81097a2:	4b11      	ldr	r3, [pc, #68]	@ (81097e8 <xTaskIncrementTick+0x16c>)
 81097a4:	681b      	ldr	r3, [r3, #0]
 81097a6:	2b00      	cmp	r3, #0
 81097a8:	d007      	beq.n	81097ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 81097aa:	2301      	movs	r3, #1
 81097ac:	617b      	str	r3, [r7, #20]
 81097ae:	e004      	b.n	81097ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81097b0:	4b0e      	ldr	r3, [pc, #56]	@ (81097ec <xTaskIncrementTick+0x170>)
 81097b2:	681b      	ldr	r3, [r3, #0]
 81097b4:	3301      	adds	r3, #1
 81097b6:	4a0d      	ldr	r2, [pc, #52]	@ (81097ec <xTaskIncrementTick+0x170>)
 81097b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81097ba:	697b      	ldr	r3, [r7, #20]
}
 81097bc:	4618      	mov	r0, r3
 81097be:	3718      	adds	r7, #24
 81097c0:	46bd      	mov	sp, r7
 81097c2:	bd80      	pop	{r7, pc}
 81097c4:	10000e28 	.word	0x10000e28
 81097c8:	10000e0c 	.word	0x10000e0c
 81097cc:	10000e04 	.word	0x10000e04
 81097d0:	10000e08 	.word	0x10000e08
 81097d4:	10000e20 	.word	0x10000e20
 81097d8:	10000e24 	.word	0x10000e24
 81097dc:	10000e10 	.word	0x10000e10
 81097e0:	100009a4 	.word	0x100009a4
 81097e4:	100009a0 	.word	0x100009a0
 81097e8:	10000e1c 	.word	0x10000e1c
 81097ec:	10000e18 	.word	0x10000e18

081097f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81097f0:	b480      	push	{r7}
 81097f2:	b085      	sub	sp, #20
 81097f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81097f6:	4b28      	ldr	r3, [pc, #160]	@ (8109898 <vTaskSwitchContext+0xa8>)
 81097f8:	681b      	ldr	r3, [r3, #0]
 81097fa:	2b00      	cmp	r3, #0
 81097fc:	d003      	beq.n	8109806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81097fe:	4b27      	ldr	r3, [pc, #156]	@ (810989c <vTaskSwitchContext+0xac>)
 8109800:	2201      	movs	r2, #1
 8109802:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8109804:	e042      	b.n	810988c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8109806:	4b25      	ldr	r3, [pc, #148]	@ (810989c <vTaskSwitchContext+0xac>)
 8109808:	2200      	movs	r2, #0
 810980a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810980c:	4b24      	ldr	r3, [pc, #144]	@ (81098a0 <vTaskSwitchContext+0xb0>)
 810980e:	681b      	ldr	r3, [r3, #0]
 8109810:	60fb      	str	r3, [r7, #12]
 8109812:	e011      	b.n	8109838 <vTaskSwitchContext+0x48>
 8109814:	68fb      	ldr	r3, [r7, #12]
 8109816:	2b00      	cmp	r3, #0
 8109818:	d10b      	bne.n	8109832 <vTaskSwitchContext+0x42>
	__asm volatile
 810981a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810981e:	f383 8811 	msr	BASEPRI, r3
 8109822:	f3bf 8f6f 	isb	sy
 8109826:	f3bf 8f4f 	dsb	sy
 810982a:	607b      	str	r3, [r7, #4]
}
 810982c:	bf00      	nop
 810982e:	bf00      	nop
 8109830:	e7fd      	b.n	810982e <vTaskSwitchContext+0x3e>
 8109832:	68fb      	ldr	r3, [r7, #12]
 8109834:	3b01      	subs	r3, #1
 8109836:	60fb      	str	r3, [r7, #12]
 8109838:	491a      	ldr	r1, [pc, #104]	@ (81098a4 <vTaskSwitchContext+0xb4>)
 810983a:	68fa      	ldr	r2, [r7, #12]
 810983c:	4613      	mov	r3, r2
 810983e:	009b      	lsls	r3, r3, #2
 8109840:	4413      	add	r3, r2
 8109842:	009b      	lsls	r3, r3, #2
 8109844:	440b      	add	r3, r1
 8109846:	681b      	ldr	r3, [r3, #0]
 8109848:	2b00      	cmp	r3, #0
 810984a:	d0e3      	beq.n	8109814 <vTaskSwitchContext+0x24>
 810984c:	68fa      	ldr	r2, [r7, #12]
 810984e:	4613      	mov	r3, r2
 8109850:	009b      	lsls	r3, r3, #2
 8109852:	4413      	add	r3, r2
 8109854:	009b      	lsls	r3, r3, #2
 8109856:	4a13      	ldr	r2, [pc, #76]	@ (81098a4 <vTaskSwitchContext+0xb4>)
 8109858:	4413      	add	r3, r2
 810985a:	60bb      	str	r3, [r7, #8]
 810985c:	68bb      	ldr	r3, [r7, #8]
 810985e:	685b      	ldr	r3, [r3, #4]
 8109860:	685a      	ldr	r2, [r3, #4]
 8109862:	68bb      	ldr	r3, [r7, #8]
 8109864:	605a      	str	r2, [r3, #4]
 8109866:	68bb      	ldr	r3, [r7, #8]
 8109868:	685a      	ldr	r2, [r3, #4]
 810986a:	68bb      	ldr	r3, [r7, #8]
 810986c:	3308      	adds	r3, #8
 810986e:	429a      	cmp	r2, r3
 8109870:	d104      	bne.n	810987c <vTaskSwitchContext+0x8c>
 8109872:	68bb      	ldr	r3, [r7, #8]
 8109874:	685b      	ldr	r3, [r3, #4]
 8109876:	685a      	ldr	r2, [r3, #4]
 8109878:	68bb      	ldr	r3, [r7, #8]
 810987a:	605a      	str	r2, [r3, #4]
 810987c:	68bb      	ldr	r3, [r7, #8]
 810987e:	685b      	ldr	r3, [r3, #4]
 8109880:	68db      	ldr	r3, [r3, #12]
 8109882:	4a09      	ldr	r2, [pc, #36]	@ (81098a8 <vTaskSwitchContext+0xb8>)
 8109884:	6013      	str	r3, [r2, #0]
 8109886:	4a06      	ldr	r2, [pc, #24]	@ (81098a0 <vTaskSwitchContext+0xb0>)
 8109888:	68fb      	ldr	r3, [r7, #12]
 810988a:	6013      	str	r3, [r2, #0]
}
 810988c:	bf00      	nop
 810988e:	3714      	adds	r7, #20
 8109890:	46bd      	mov	sp, r7
 8109892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109896:	4770      	bx	lr
 8109898:	10000e28 	.word	0x10000e28
 810989c:	10000e1c 	.word	0x10000e1c
 81098a0:	10000e10 	.word	0x10000e10
 81098a4:	100009a4 	.word	0x100009a4
 81098a8:	100009a0 	.word	0x100009a0

081098ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 81098ac:	b480      	push	{r7}
 81098ae:	b083      	sub	sp, #12
 81098b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81098b2:	4b0c      	ldr	r3, [pc, #48]	@ (81098e4 <prvResetNextTaskUnblockTime+0x38>)
 81098b4:	681b      	ldr	r3, [r3, #0]
 81098b6:	681b      	ldr	r3, [r3, #0]
 81098b8:	2b00      	cmp	r3, #0
 81098ba:	d104      	bne.n	81098c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81098bc:	4b0a      	ldr	r3, [pc, #40]	@ (81098e8 <prvResetNextTaskUnblockTime+0x3c>)
 81098be:	f04f 32ff 	mov.w	r2, #4294967295
 81098c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81098c4:	e008      	b.n	81098d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81098c6:	4b07      	ldr	r3, [pc, #28]	@ (81098e4 <prvResetNextTaskUnblockTime+0x38>)
 81098c8:	681b      	ldr	r3, [r3, #0]
 81098ca:	68db      	ldr	r3, [r3, #12]
 81098cc:	68db      	ldr	r3, [r3, #12]
 81098ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81098d0:	687b      	ldr	r3, [r7, #4]
 81098d2:	685b      	ldr	r3, [r3, #4]
 81098d4:	4a04      	ldr	r2, [pc, #16]	@ (81098e8 <prvResetNextTaskUnblockTime+0x3c>)
 81098d6:	6013      	str	r3, [r2, #0]
}
 81098d8:	bf00      	nop
 81098da:	370c      	adds	r7, #12
 81098dc:	46bd      	mov	sp, r7
 81098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098e2:	4770      	bx	lr
 81098e4:	10000e04 	.word	0x10000e04
 81098e8:	10000e24 	.word	0x10000e24

081098ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81098ec:	b480      	push	{r7}
 81098ee:	b083      	sub	sp, #12
 81098f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81098f2:	4b0b      	ldr	r3, [pc, #44]	@ (8109920 <xTaskGetSchedulerState+0x34>)
 81098f4:	681b      	ldr	r3, [r3, #0]
 81098f6:	2b00      	cmp	r3, #0
 81098f8:	d102      	bne.n	8109900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81098fa:	2301      	movs	r3, #1
 81098fc:	607b      	str	r3, [r7, #4]
 81098fe:	e008      	b.n	8109912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8109900:	4b08      	ldr	r3, [pc, #32]	@ (8109924 <xTaskGetSchedulerState+0x38>)
 8109902:	681b      	ldr	r3, [r3, #0]
 8109904:	2b00      	cmp	r3, #0
 8109906:	d102      	bne.n	810990e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8109908:	2302      	movs	r3, #2
 810990a:	607b      	str	r3, [r7, #4]
 810990c:	e001      	b.n	8109912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810990e:	2300      	movs	r3, #0
 8109910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8109912:	687b      	ldr	r3, [r7, #4]
	}
 8109914:	4618      	mov	r0, r3
 8109916:	370c      	adds	r7, #12
 8109918:	46bd      	mov	sp, r7
 810991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810991e:	4770      	bx	lr
 8109920:	10000e14 	.word	0x10000e14
 8109924:	10000e28 	.word	0x10000e28

08109928 <std>:
 8109928:	2300      	movs	r3, #0
 810992a:	b510      	push	{r4, lr}
 810992c:	4604      	mov	r4, r0
 810992e:	e9c0 3300 	strd	r3, r3, [r0]
 8109932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8109936:	6083      	str	r3, [r0, #8]
 8109938:	8181      	strh	r1, [r0, #12]
 810993a:	6643      	str	r3, [r0, #100]	@ 0x64
 810993c:	81c2      	strh	r2, [r0, #14]
 810993e:	6183      	str	r3, [r0, #24]
 8109940:	4619      	mov	r1, r3
 8109942:	2208      	movs	r2, #8
 8109944:	305c      	adds	r0, #92	@ 0x5c
 8109946:	f000 f9f9 	bl	8109d3c <memset>
 810994a:	4b0d      	ldr	r3, [pc, #52]	@ (8109980 <std+0x58>)
 810994c:	6263      	str	r3, [r4, #36]	@ 0x24
 810994e:	4b0d      	ldr	r3, [pc, #52]	@ (8109984 <std+0x5c>)
 8109950:	62a3      	str	r3, [r4, #40]	@ 0x28
 8109952:	4b0d      	ldr	r3, [pc, #52]	@ (8109988 <std+0x60>)
 8109954:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8109956:	4b0d      	ldr	r3, [pc, #52]	@ (810998c <std+0x64>)
 8109958:	6323      	str	r3, [r4, #48]	@ 0x30
 810995a:	4b0d      	ldr	r3, [pc, #52]	@ (8109990 <std+0x68>)
 810995c:	6224      	str	r4, [r4, #32]
 810995e:	429c      	cmp	r4, r3
 8109960:	d006      	beq.n	8109970 <std+0x48>
 8109962:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8109966:	4294      	cmp	r4, r2
 8109968:	d002      	beq.n	8109970 <std+0x48>
 810996a:	33d0      	adds	r3, #208	@ 0xd0
 810996c:	429c      	cmp	r4, r3
 810996e:	d105      	bne.n	810997c <std+0x54>
 8109970:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8109974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109978:	f000 ba58 	b.w	8109e2c <__retarget_lock_init_recursive>
 810997c:	bd10      	pop	{r4, pc}
 810997e:	bf00      	nop
 8109980:	08109b8d 	.word	0x08109b8d
 8109984:	08109baf 	.word	0x08109baf
 8109988:	08109be7 	.word	0x08109be7
 810998c:	08109c0b 	.word	0x08109c0b
 8109990:	10000e2c 	.word	0x10000e2c

08109994 <stdio_exit_handler>:
 8109994:	4a02      	ldr	r2, [pc, #8]	@ (81099a0 <stdio_exit_handler+0xc>)
 8109996:	4903      	ldr	r1, [pc, #12]	@ (81099a4 <stdio_exit_handler+0x10>)
 8109998:	4803      	ldr	r0, [pc, #12]	@ (81099a8 <stdio_exit_handler+0x14>)
 810999a:	f000 b869 	b.w	8109a70 <_fwalk_sglue>
 810999e:	bf00      	nop
 81099a0:	10000010 	.word	0x10000010
 81099a4:	0810a6e5 	.word	0x0810a6e5
 81099a8:	10000020 	.word	0x10000020

081099ac <cleanup_stdio>:
 81099ac:	6841      	ldr	r1, [r0, #4]
 81099ae:	4b0c      	ldr	r3, [pc, #48]	@ (81099e0 <cleanup_stdio+0x34>)
 81099b0:	4299      	cmp	r1, r3
 81099b2:	b510      	push	{r4, lr}
 81099b4:	4604      	mov	r4, r0
 81099b6:	d001      	beq.n	81099bc <cleanup_stdio+0x10>
 81099b8:	f000 fe94 	bl	810a6e4 <_fflush_r>
 81099bc:	68a1      	ldr	r1, [r4, #8]
 81099be:	4b09      	ldr	r3, [pc, #36]	@ (81099e4 <cleanup_stdio+0x38>)
 81099c0:	4299      	cmp	r1, r3
 81099c2:	d002      	beq.n	81099ca <cleanup_stdio+0x1e>
 81099c4:	4620      	mov	r0, r4
 81099c6:	f000 fe8d 	bl	810a6e4 <_fflush_r>
 81099ca:	68e1      	ldr	r1, [r4, #12]
 81099cc:	4b06      	ldr	r3, [pc, #24]	@ (81099e8 <cleanup_stdio+0x3c>)
 81099ce:	4299      	cmp	r1, r3
 81099d0:	d004      	beq.n	81099dc <cleanup_stdio+0x30>
 81099d2:	4620      	mov	r0, r4
 81099d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81099d8:	f000 be84 	b.w	810a6e4 <_fflush_r>
 81099dc:	bd10      	pop	{r4, pc}
 81099de:	bf00      	nop
 81099e0:	10000e2c 	.word	0x10000e2c
 81099e4:	10000e94 	.word	0x10000e94
 81099e8:	10000efc 	.word	0x10000efc

081099ec <global_stdio_init.part.0>:
 81099ec:	b510      	push	{r4, lr}
 81099ee:	4b0b      	ldr	r3, [pc, #44]	@ (8109a1c <global_stdio_init.part.0+0x30>)
 81099f0:	4c0b      	ldr	r4, [pc, #44]	@ (8109a20 <global_stdio_init.part.0+0x34>)
 81099f2:	4a0c      	ldr	r2, [pc, #48]	@ (8109a24 <global_stdio_init.part.0+0x38>)
 81099f4:	601a      	str	r2, [r3, #0]
 81099f6:	4620      	mov	r0, r4
 81099f8:	2200      	movs	r2, #0
 81099fa:	2104      	movs	r1, #4
 81099fc:	f7ff ff94 	bl	8109928 <std>
 8109a00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8109a04:	2201      	movs	r2, #1
 8109a06:	2109      	movs	r1, #9
 8109a08:	f7ff ff8e 	bl	8109928 <std>
 8109a0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8109a10:	2202      	movs	r2, #2
 8109a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109a16:	2112      	movs	r1, #18
 8109a18:	f7ff bf86 	b.w	8109928 <std>
 8109a1c:	10000f64 	.word	0x10000f64
 8109a20:	10000e2c 	.word	0x10000e2c
 8109a24:	08109995 	.word	0x08109995

08109a28 <__sfp_lock_acquire>:
 8109a28:	4801      	ldr	r0, [pc, #4]	@ (8109a30 <__sfp_lock_acquire+0x8>)
 8109a2a:	f000 ba00 	b.w	8109e2e <__retarget_lock_acquire_recursive>
 8109a2e:	bf00      	nop
 8109a30:	10000f6d 	.word	0x10000f6d

08109a34 <__sfp_lock_release>:
 8109a34:	4801      	ldr	r0, [pc, #4]	@ (8109a3c <__sfp_lock_release+0x8>)
 8109a36:	f000 b9fb 	b.w	8109e30 <__retarget_lock_release_recursive>
 8109a3a:	bf00      	nop
 8109a3c:	10000f6d 	.word	0x10000f6d

08109a40 <__sinit>:
 8109a40:	b510      	push	{r4, lr}
 8109a42:	4604      	mov	r4, r0
 8109a44:	f7ff fff0 	bl	8109a28 <__sfp_lock_acquire>
 8109a48:	6a23      	ldr	r3, [r4, #32]
 8109a4a:	b11b      	cbz	r3, 8109a54 <__sinit+0x14>
 8109a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109a50:	f7ff bff0 	b.w	8109a34 <__sfp_lock_release>
 8109a54:	4b04      	ldr	r3, [pc, #16]	@ (8109a68 <__sinit+0x28>)
 8109a56:	6223      	str	r3, [r4, #32]
 8109a58:	4b04      	ldr	r3, [pc, #16]	@ (8109a6c <__sinit+0x2c>)
 8109a5a:	681b      	ldr	r3, [r3, #0]
 8109a5c:	2b00      	cmp	r3, #0
 8109a5e:	d1f5      	bne.n	8109a4c <__sinit+0xc>
 8109a60:	f7ff ffc4 	bl	81099ec <global_stdio_init.part.0>
 8109a64:	e7f2      	b.n	8109a4c <__sinit+0xc>
 8109a66:	bf00      	nop
 8109a68:	081099ad 	.word	0x081099ad
 8109a6c:	10000f64 	.word	0x10000f64

08109a70 <_fwalk_sglue>:
 8109a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109a74:	4607      	mov	r7, r0
 8109a76:	4688      	mov	r8, r1
 8109a78:	4614      	mov	r4, r2
 8109a7a:	2600      	movs	r6, #0
 8109a7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8109a80:	f1b9 0901 	subs.w	r9, r9, #1
 8109a84:	d505      	bpl.n	8109a92 <_fwalk_sglue+0x22>
 8109a86:	6824      	ldr	r4, [r4, #0]
 8109a88:	2c00      	cmp	r4, #0
 8109a8a:	d1f7      	bne.n	8109a7c <_fwalk_sglue+0xc>
 8109a8c:	4630      	mov	r0, r6
 8109a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109a92:	89ab      	ldrh	r3, [r5, #12]
 8109a94:	2b01      	cmp	r3, #1
 8109a96:	d907      	bls.n	8109aa8 <_fwalk_sglue+0x38>
 8109a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8109a9c:	3301      	adds	r3, #1
 8109a9e:	d003      	beq.n	8109aa8 <_fwalk_sglue+0x38>
 8109aa0:	4629      	mov	r1, r5
 8109aa2:	4638      	mov	r0, r7
 8109aa4:	47c0      	blx	r8
 8109aa6:	4306      	orrs	r6, r0
 8109aa8:	3568      	adds	r5, #104	@ 0x68
 8109aaa:	e7e9      	b.n	8109a80 <_fwalk_sglue+0x10>

08109aac <iprintf>:
 8109aac:	b40f      	push	{r0, r1, r2, r3}
 8109aae:	b507      	push	{r0, r1, r2, lr}
 8109ab0:	4906      	ldr	r1, [pc, #24]	@ (8109acc <iprintf+0x20>)
 8109ab2:	ab04      	add	r3, sp, #16
 8109ab4:	6808      	ldr	r0, [r1, #0]
 8109ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8109aba:	6881      	ldr	r1, [r0, #8]
 8109abc:	9301      	str	r3, [sp, #4]
 8109abe:	f000 fae9 	bl	810a094 <_vfiprintf_r>
 8109ac2:	b003      	add	sp, #12
 8109ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8109ac8:	b004      	add	sp, #16
 8109aca:	4770      	bx	lr
 8109acc:	1000001c 	.word	0x1000001c

08109ad0 <_puts_r>:
 8109ad0:	6a03      	ldr	r3, [r0, #32]
 8109ad2:	b570      	push	{r4, r5, r6, lr}
 8109ad4:	6884      	ldr	r4, [r0, #8]
 8109ad6:	4605      	mov	r5, r0
 8109ad8:	460e      	mov	r6, r1
 8109ada:	b90b      	cbnz	r3, 8109ae0 <_puts_r+0x10>
 8109adc:	f7ff ffb0 	bl	8109a40 <__sinit>
 8109ae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8109ae2:	07db      	lsls	r3, r3, #31
 8109ae4:	d405      	bmi.n	8109af2 <_puts_r+0x22>
 8109ae6:	89a3      	ldrh	r3, [r4, #12]
 8109ae8:	0598      	lsls	r0, r3, #22
 8109aea:	d402      	bmi.n	8109af2 <_puts_r+0x22>
 8109aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8109aee:	f000 f99e 	bl	8109e2e <__retarget_lock_acquire_recursive>
 8109af2:	89a3      	ldrh	r3, [r4, #12]
 8109af4:	0719      	lsls	r1, r3, #28
 8109af6:	d502      	bpl.n	8109afe <_puts_r+0x2e>
 8109af8:	6923      	ldr	r3, [r4, #16]
 8109afa:	2b00      	cmp	r3, #0
 8109afc:	d135      	bne.n	8109b6a <_puts_r+0x9a>
 8109afe:	4621      	mov	r1, r4
 8109b00:	4628      	mov	r0, r5
 8109b02:	f000 f8c5 	bl	8109c90 <__swsetup_r>
 8109b06:	b380      	cbz	r0, 8109b6a <_puts_r+0x9a>
 8109b08:	f04f 35ff 	mov.w	r5, #4294967295
 8109b0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8109b0e:	07da      	lsls	r2, r3, #31
 8109b10:	d405      	bmi.n	8109b1e <_puts_r+0x4e>
 8109b12:	89a3      	ldrh	r3, [r4, #12]
 8109b14:	059b      	lsls	r3, r3, #22
 8109b16:	d402      	bmi.n	8109b1e <_puts_r+0x4e>
 8109b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8109b1a:	f000 f989 	bl	8109e30 <__retarget_lock_release_recursive>
 8109b1e:	4628      	mov	r0, r5
 8109b20:	bd70      	pop	{r4, r5, r6, pc}
 8109b22:	2b00      	cmp	r3, #0
 8109b24:	da04      	bge.n	8109b30 <_puts_r+0x60>
 8109b26:	69a2      	ldr	r2, [r4, #24]
 8109b28:	429a      	cmp	r2, r3
 8109b2a:	dc17      	bgt.n	8109b5c <_puts_r+0x8c>
 8109b2c:	290a      	cmp	r1, #10
 8109b2e:	d015      	beq.n	8109b5c <_puts_r+0x8c>
 8109b30:	6823      	ldr	r3, [r4, #0]
 8109b32:	1c5a      	adds	r2, r3, #1
 8109b34:	6022      	str	r2, [r4, #0]
 8109b36:	7019      	strb	r1, [r3, #0]
 8109b38:	68a3      	ldr	r3, [r4, #8]
 8109b3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8109b3e:	3b01      	subs	r3, #1
 8109b40:	60a3      	str	r3, [r4, #8]
 8109b42:	2900      	cmp	r1, #0
 8109b44:	d1ed      	bne.n	8109b22 <_puts_r+0x52>
 8109b46:	2b00      	cmp	r3, #0
 8109b48:	da11      	bge.n	8109b6e <_puts_r+0x9e>
 8109b4a:	4622      	mov	r2, r4
 8109b4c:	210a      	movs	r1, #10
 8109b4e:	4628      	mov	r0, r5
 8109b50:	f000 f85f 	bl	8109c12 <__swbuf_r>
 8109b54:	3001      	adds	r0, #1
 8109b56:	d0d7      	beq.n	8109b08 <_puts_r+0x38>
 8109b58:	250a      	movs	r5, #10
 8109b5a:	e7d7      	b.n	8109b0c <_puts_r+0x3c>
 8109b5c:	4622      	mov	r2, r4
 8109b5e:	4628      	mov	r0, r5
 8109b60:	f000 f857 	bl	8109c12 <__swbuf_r>
 8109b64:	3001      	adds	r0, #1
 8109b66:	d1e7      	bne.n	8109b38 <_puts_r+0x68>
 8109b68:	e7ce      	b.n	8109b08 <_puts_r+0x38>
 8109b6a:	3e01      	subs	r6, #1
 8109b6c:	e7e4      	b.n	8109b38 <_puts_r+0x68>
 8109b6e:	6823      	ldr	r3, [r4, #0]
 8109b70:	1c5a      	adds	r2, r3, #1
 8109b72:	6022      	str	r2, [r4, #0]
 8109b74:	220a      	movs	r2, #10
 8109b76:	701a      	strb	r2, [r3, #0]
 8109b78:	e7ee      	b.n	8109b58 <_puts_r+0x88>
	...

08109b7c <puts>:
 8109b7c:	4b02      	ldr	r3, [pc, #8]	@ (8109b88 <puts+0xc>)
 8109b7e:	4601      	mov	r1, r0
 8109b80:	6818      	ldr	r0, [r3, #0]
 8109b82:	f7ff bfa5 	b.w	8109ad0 <_puts_r>
 8109b86:	bf00      	nop
 8109b88:	1000001c 	.word	0x1000001c

08109b8c <__sread>:
 8109b8c:	b510      	push	{r4, lr}
 8109b8e:	460c      	mov	r4, r1
 8109b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109b94:	f000 f8fc 	bl	8109d90 <_read_r>
 8109b98:	2800      	cmp	r0, #0
 8109b9a:	bfab      	itete	ge
 8109b9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8109b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8109ba0:	181b      	addge	r3, r3, r0
 8109ba2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8109ba6:	bfac      	ite	ge
 8109ba8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8109baa:	81a3      	strhlt	r3, [r4, #12]
 8109bac:	bd10      	pop	{r4, pc}

08109bae <__swrite>:
 8109bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109bb2:	461f      	mov	r7, r3
 8109bb4:	898b      	ldrh	r3, [r1, #12]
 8109bb6:	05db      	lsls	r3, r3, #23
 8109bb8:	4605      	mov	r5, r0
 8109bba:	460c      	mov	r4, r1
 8109bbc:	4616      	mov	r6, r2
 8109bbe:	d505      	bpl.n	8109bcc <__swrite+0x1e>
 8109bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109bc4:	2302      	movs	r3, #2
 8109bc6:	2200      	movs	r2, #0
 8109bc8:	f000 f8d0 	bl	8109d6c <_lseek_r>
 8109bcc:	89a3      	ldrh	r3, [r4, #12]
 8109bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8109bd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8109bd6:	81a3      	strh	r3, [r4, #12]
 8109bd8:	4632      	mov	r2, r6
 8109bda:	463b      	mov	r3, r7
 8109bdc:	4628      	mov	r0, r5
 8109bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8109be2:	f000 b8e7 	b.w	8109db4 <_write_r>

08109be6 <__sseek>:
 8109be6:	b510      	push	{r4, lr}
 8109be8:	460c      	mov	r4, r1
 8109bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109bee:	f000 f8bd 	bl	8109d6c <_lseek_r>
 8109bf2:	1c43      	adds	r3, r0, #1
 8109bf4:	89a3      	ldrh	r3, [r4, #12]
 8109bf6:	bf15      	itete	ne
 8109bf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8109bfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8109bfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8109c02:	81a3      	strheq	r3, [r4, #12]
 8109c04:	bf18      	it	ne
 8109c06:	81a3      	strhne	r3, [r4, #12]
 8109c08:	bd10      	pop	{r4, pc}

08109c0a <__sclose>:
 8109c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109c0e:	f000 b89d 	b.w	8109d4c <_close_r>

08109c12 <__swbuf_r>:
 8109c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109c14:	460e      	mov	r6, r1
 8109c16:	4614      	mov	r4, r2
 8109c18:	4605      	mov	r5, r0
 8109c1a:	b118      	cbz	r0, 8109c24 <__swbuf_r+0x12>
 8109c1c:	6a03      	ldr	r3, [r0, #32]
 8109c1e:	b90b      	cbnz	r3, 8109c24 <__swbuf_r+0x12>
 8109c20:	f7ff ff0e 	bl	8109a40 <__sinit>
 8109c24:	69a3      	ldr	r3, [r4, #24]
 8109c26:	60a3      	str	r3, [r4, #8]
 8109c28:	89a3      	ldrh	r3, [r4, #12]
 8109c2a:	071a      	lsls	r2, r3, #28
 8109c2c:	d501      	bpl.n	8109c32 <__swbuf_r+0x20>
 8109c2e:	6923      	ldr	r3, [r4, #16]
 8109c30:	b943      	cbnz	r3, 8109c44 <__swbuf_r+0x32>
 8109c32:	4621      	mov	r1, r4
 8109c34:	4628      	mov	r0, r5
 8109c36:	f000 f82b 	bl	8109c90 <__swsetup_r>
 8109c3a:	b118      	cbz	r0, 8109c44 <__swbuf_r+0x32>
 8109c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8109c40:	4638      	mov	r0, r7
 8109c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109c44:	6823      	ldr	r3, [r4, #0]
 8109c46:	6922      	ldr	r2, [r4, #16]
 8109c48:	1a98      	subs	r0, r3, r2
 8109c4a:	6963      	ldr	r3, [r4, #20]
 8109c4c:	b2f6      	uxtb	r6, r6
 8109c4e:	4283      	cmp	r3, r0
 8109c50:	4637      	mov	r7, r6
 8109c52:	dc05      	bgt.n	8109c60 <__swbuf_r+0x4e>
 8109c54:	4621      	mov	r1, r4
 8109c56:	4628      	mov	r0, r5
 8109c58:	f000 fd44 	bl	810a6e4 <_fflush_r>
 8109c5c:	2800      	cmp	r0, #0
 8109c5e:	d1ed      	bne.n	8109c3c <__swbuf_r+0x2a>
 8109c60:	68a3      	ldr	r3, [r4, #8]
 8109c62:	3b01      	subs	r3, #1
 8109c64:	60a3      	str	r3, [r4, #8]
 8109c66:	6823      	ldr	r3, [r4, #0]
 8109c68:	1c5a      	adds	r2, r3, #1
 8109c6a:	6022      	str	r2, [r4, #0]
 8109c6c:	701e      	strb	r6, [r3, #0]
 8109c6e:	6962      	ldr	r2, [r4, #20]
 8109c70:	1c43      	adds	r3, r0, #1
 8109c72:	429a      	cmp	r2, r3
 8109c74:	d004      	beq.n	8109c80 <__swbuf_r+0x6e>
 8109c76:	89a3      	ldrh	r3, [r4, #12]
 8109c78:	07db      	lsls	r3, r3, #31
 8109c7a:	d5e1      	bpl.n	8109c40 <__swbuf_r+0x2e>
 8109c7c:	2e0a      	cmp	r6, #10
 8109c7e:	d1df      	bne.n	8109c40 <__swbuf_r+0x2e>
 8109c80:	4621      	mov	r1, r4
 8109c82:	4628      	mov	r0, r5
 8109c84:	f000 fd2e 	bl	810a6e4 <_fflush_r>
 8109c88:	2800      	cmp	r0, #0
 8109c8a:	d0d9      	beq.n	8109c40 <__swbuf_r+0x2e>
 8109c8c:	e7d6      	b.n	8109c3c <__swbuf_r+0x2a>
	...

08109c90 <__swsetup_r>:
 8109c90:	b538      	push	{r3, r4, r5, lr}
 8109c92:	4b29      	ldr	r3, [pc, #164]	@ (8109d38 <__swsetup_r+0xa8>)
 8109c94:	4605      	mov	r5, r0
 8109c96:	6818      	ldr	r0, [r3, #0]
 8109c98:	460c      	mov	r4, r1
 8109c9a:	b118      	cbz	r0, 8109ca4 <__swsetup_r+0x14>
 8109c9c:	6a03      	ldr	r3, [r0, #32]
 8109c9e:	b90b      	cbnz	r3, 8109ca4 <__swsetup_r+0x14>
 8109ca0:	f7ff fece 	bl	8109a40 <__sinit>
 8109ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109ca8:	0719      	lsls	r1, r3, #28
 8109caa:	d422      	bmi.n	8109cf2 <__swsetup_r+0x62>
 8109cac:	06da      	lsls	r2, r3, #27
 8109cae:	d407      	bmi.n	8109cc0 <__swsetup_r+0x30>
 8109cb0:	2209      	movs	r2, #9
 8109cb2:	602a      	str	r2, [r5, #0]
 8109cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8109cb8:	81a3      	strh	r3, [r4, #12]
 8109cba:	f04f 30ff 	mov.w	r0, #4294967295
 8109cbe:	e033      	b.n	8109d28 <__swsetup_r+0x98>
 8109cc0:	0758      	lsls	r0, r3, #29
 8109cc2:	d512      	bpl.n	8109cea <__swsetup_r+0x5a>
 8109cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8109cc6:	b141      	cbz	r1, 8109cda <__swsetup_r+0x4a>
 8109cc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8109ccc:	4299      	cmp	r1, r3
 8109cce:	d002      	beq.n	8109cd6 <__swsetup_r+0x46>
 8109cd0:	4628      	mov	r0, r5
 8109cd2:	f000 f8bd 	bl	8109e50 <_free_r>
 8109cd6:	2300      	movs	r3, #0
 8109cd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8109cda:	89a3      	ldrh	r3, [r4, #12]
 8109cdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8109ce0:	81a3      	strh	r3, [r4, #12]
 8109ce2:	2300      	movs	r3, #0
 8109ce4:	6063      	str	r3, [r4, #4]
 8109ce6:	6923      	ldr	r3, [r4, #16]
 8109ce8:	6023      	str	r3, [r4, #0]
 8109cea:	89a3      	ldrh	r3, [r4, #12]
 8109cec:	f043 0308 	orr.w	r3, r3, #8
 8109cf0:	81a3      	strh	r3, [r4, #12]
 8109cf2:	6923      	ldr	r3, [r4, #16]
 8109cf4:	b94b      	cbnz	r3, 8109d0a <__swsetup_r+0x7a>
 8109cf6:	89a3      	ldrh	r3, [r4, #12]
 8109cf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8109cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8109d00:	d003      	beq.n	8109d0a <__swsetup_r+0x7a>
 8109d02:	4621      	mov	r1, r4
 8109d04:	4628      	mov	r0, r5
 8109d06:	f000 fd3b 	bl	810a780 <__smakebuf_r>
 8109d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109d0e:	f013 0201 	ands.w	r2, r3, #1
 8109d12:	d00a      	beq.n	8109d2a <__swsetup_r+0x9a>
 8109d14:	2200      	movs	r2, #0
 8109d16:	60a2      	str	r2, [r4, #8]
 8109d18:	6962      	ldr	r2, [r4, #20]
 8109d1a:	4252      	negs	r2, r2
 8109d1c:	61a2      	str	r2, [r4, #24]
 8109d1e:	6922      	ldr	r2, [r4, #16]
 8109d20:	b942      	cbnz	r2, 8109d34 <__swsetup_r+0xa4>
 8109d22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8109d26:	d1c5      	bne.n	8109cb4 <__swsetup_r+0x24>
 8109d28:	bd38      	pop	{r3, r4, r5, pc}
 8109d2a:	0799      	lsls	r1, r3, #30
 8109d2c:	bf58      	it	pl
 8109d2e:	6962      	ldrpl	r2, [r4, #20]
 8109d30:	60a2      	str	r2, [r4, #8]
 8109d32:	e7f4      	b.n	8109d1e <__swsetup_r+0x8e>
 8109d34:	2000      	movs	r0, #0
 8109d36:	e7f7      	b.n	8109d28 <__swsetup_r+0x98>
 8109d38:	1000001c 	.word	0x1000001c

08109d3c <memset>:
 8109d3c:	4402      	add	r2, r0
 8109d3e:	4603      	mov	r3, r0
 8109d40:	4293      	cmp	r3, r2
 8109d42:	d100      	bne.n	8109d46 <memset+0xa>
 8109d44:	4770      	bx	lr
 8109d46:	f803 1b01 	strb.w	r1, [r3], #1
 8109d4a:	e7f9      	b.n	8109d40 <memset+0x4>

08109d4c <_close_r>:
 8109d4c:	b538      	push	{r3, r4, r5, lr}
 8109d4e:	4d06      	ldr	r5, [pc, #24]	@ (8109d68 <_close_r+0x1c>)
 8109d50:	2300      	movs	r3, #0
 8109d52:	4604      	mov	r4, r0
 8109d54:	4608      	mov	r0, r1
 8109d56:	602b      	str	r3, [r5, #0]
 8109d58:	f7f8 fc47 	bl	81025ea <_close>
 8109d5c:	1c43      	adds	r3, r0, #1
 8109d5e:	d102      	bne.n	8109d66 <_close_r+0x1a>
 8109d60:	682b      	ldr	r3, [r5, #0]
 8109d62:	b103      	cbz	r3, 8109d66 <_close_r+0x1a>
 8109d64:	6023      	str	r3, [r4, #0]
 8109d66:	bd38      	pop	{r3, r4, r5, pc}
 8109d68:	10000f68 	.word	0x10000f68

08109d6c <_lseek_r>:
 8109d6c:	b538      	push	{r3, r4, r5, lr}
 8109d6e:	4d07      	ldr	r5, [pc, #28]	@ (8109d8c <_lseek_r+0x20>)
 8109d70:	4604      	mov	r4, r0
 8109d72:	4608      	mov	r0, r1
 8109d74:	4611      	mov	r1, r2
 8109d76:	2200      	movs	r2, #0
 8109d78:	602a      	str	r2, [r5, #0]
 8109d7a:	461a      	mov	r2, r3
 8109d7c:	f7f8 fc5c 	bl	8102638 <_lseek>
 8109d80:	1c43      	adds	r3, r0, #1
 8109d82:	d102      	bne.n	8109d8a <_lseek_r+0x1e>
 8109d84:	682b      	ldr	r3, [r5, #0]
 8109d86:	b103      	cbz	r3, 8109d8a <_lseek_r+0x1e>
 8109d88:	6023      	str	r3, [r4, #0]
 8109d8a:	bd38      	pop	{r3, r4, r5, pc}
 8109d8c:	10000f68 	.word	0x10000f68

08109d90 <_read_r>:
 8109d90:	b538      	push	{r3, r4, r5, lr}
 8109d92:	4d07      	ldr	r5, [pc, #28]	@ (8109db0 <_read_r+0x20>)
 8109d94:	4604      	mov	r4, r0
 8109d96:	4608      	mov	r0, r1
 8109d98:	4611      	mov	r1, r2
 8109d9a:	2200      	movs	r2, #0
 8109d9c:	602a      	str	r2, [r5, #0]
 8109d9e:	461a      	mov	r2, r3
 8109da0:	f7f8 fbea 	bl	8102578 <_read>
 8109da4:	1c43      	adds	r3, r0, #1
 8109da6:	d102      	bne.n	8109dae <_read_r+0x1e>
 8109da8:	682b      	ldr	r3, [r5, #0]
 8109daa:	b103      	cbz	r3, 8109dae <_read_r+0x1e>
 8109dac:	6023      	str	r3, [r4, #0]
 8109dae:	bd38      	pop	{r3, r4, r5, pc}
 8109db0:	10000f68 	.word	0x10000f68

08109db4 <_write_r>:
 8109db4:	b538      	push	{r3, r4, r5, lr}
 8109db6:	4d07      	ldr	r5, [pc, #28]	@ (8109dd4 <_write_r+0x20>)
 8109db8:	4604      	mov	r4, r0
 8109dba:	4608      	mov	r0, r1
 8109dbc:	4611      	mov	r1, r2
 8109dbe:	2200      	movs	r2, #0
 8109dc0:	602a      	str	r2, [r5, #0]
 8109dc2:	461a      	mov	r2, r3
 8109dc4:	f7f8 fbf5 	bl	81025b2 <_write>
 8109dc8:	1c43      	adds	r3, r0, #1
 8109dca:	d102      	bne.n	8109dd2 <_write_r+0x1e>
 8109dcc:	682b      	ldr	r3, [r5, #0]
 8109dce:	b103      	cbz	r3, 8109dd2 <_write_r+0x1e>
 8109dd0:	6023      	str	r3, [r4, #0]
 8109dd2:	bd38      	pop	{r3, r4, r5, pc}
 8109dd4:	10000f68 	.word	0x10000f68

08109dd8 <__errno>:
 8109dd8:	4b01      	ldr	r3, [pc, #4]	@ (8109de0 <__errno+0x8>)
 8109dda:	6818      	ldr	r0, [r3, #0]
 8109ddc:	4770      	bx	lr
 8109dde:	bf00      	nop
 8109de0:	1000001c 	.word	0x1000001c

08109de4 <__libc_init_array>:
 8109de4:	b570      	push	{r4, r5, r6, lr}
 8109de6:	4d0d      	ldr	r5, [pc, #52]	@ (8109e1c <__libc_init_array+0x38>)
 8109de8:	4c0d      	ldr	r4, [pc, #52]	@ (8109e20 <__libc_init_array+0x3c>)
 8109dea:	1b64      	subs	r4, r4, r5
 8109dec:	10a4      	asrs	r4, r4, #2
 8109dee:	2600      	movs	r6, #0
 8109df0:	42a6      	cmp	r6, r4
 8109df2:	d109      	bne.n	8109e08 <__libc_init_array+0x24>
 8109df4:	4d0b      	ldr	r5, [pc, #44]	@ (8109e24 <__libc_init_array+0x40>)
 8109df6:	4c0c      	ldr	r4, [pc, #48]	@ (8109e28 <__libc_init_array+0x44>)
 8109df8:	f000 fd30 	bl	810a85c <_init>
 8109dfc:	1b64      	subs	r4, r4, r5
 8109dfe:	10a4      	asrs	r4, r4, #2
 8109e00:	2600      	movs	r6, #0
 8109e02:	42a6      	cmp	r6, r4
 8109e04:	d105      	bne.n	8109e12 <__libc_init_array+0x2e>
 8109e06:	bd70      	pop	{r4, r5, r6, pc}
 8109e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8109e0c:	4798      	blx	r3
 8109e0e:	3601      	adds	r6, #1
 8109e10:	e7ee      	b.n	8109df0 <__libc_init_array+0xc>
 8109e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8109e16:	4798      	blx	r3
 8109e18:	3601      	adds	r6, #1
 8109e1a:	e7f2      	b.n	8109e02 <__libc_init_array+0x1e>
 8109e1c:	0810c9a8 	.word	0x0810c9a8
 8109e20:	0810c9a8 	.word	0x0810c9a8
 8109e24:	0810c9a8 	.word	0x0810c9a8
 8109e28:	0810c9ac 	.word	0x0810c9ac

08109e2c <__retarget_lock_init_recursive>:
 8109e2c:	4770      	bx	lr

08109e2e <__retarget_lock_acquire_recursive>:
 8109e2e:	4770      	bx	lr

08109e30 <__retarget_lock_release_recursive>:
 8109e30:	4770      	bx	lr

08109e32 <memcpy>:
 8109e32:	440a      	add	r2, r1
 8109e34:	4291      	cmp	r1, r2
 8109e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8109e3a:	d100      	bne.n	8109e3e <memcpy+0xc>
 8109e3c:	4770      	bx	lr
 8109e3e:	b510      	push	{r4, lr}
 8109e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8109e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8109e48:	4291      	cmp	r1, r2
 8109e4a:	d1f9      	bne.n	8109e40 <memcpy+0xe>
 8109e4c:	bd10      	pop	{r4, pc}
	...

08109e50 <_free_r>:
 8109e50:	b538      	push	{r3, r4, r5, lr}
 8109e52:	4605      	mov	r5, r0
 8109e54:	2900      	cmp	r1, #0
 8109e56:	d041      	beq.n	8109edc <_free_r+0x8c>
 8109e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8109e5c:	1f0c      	subs	r4, r1, #4
 8109e5e:	2b00      	cmp	r3, #0
 8109e60:	bfb8      	it	lt
 8109e62:	18e4      	addlt	r4, r4, r3
 8109e64:	f000 f8e0 	bl	810a028 <__malloc_lock>
 8109e68:	4a1d      	ldr	r2, [pc, #116]	@ (8109ee0 <_free_r+0x90>)
 8109e6a:	6813      	ldr	r3, [r2, #0]
 8109e6c:	b933      	cbnz	r3, 8109e7c <_free_r+0x2c>
 8109e6e:	6063      	str	r3, [r4, #4]
 8109e70:	6014      	str	r4, [r2, #0]
 8109e72:	4628      	mov	r0, r5
 8109e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8109e78:	f000 b8dc 	b.w	810a034 <__malloc_unlock>
 8109e7c:	42a3      	cmp	r3, r4
 8109e7e:	d908      	bls.n	8109e92 <_free_r+0x42>
 8109e80:	6820      	ldr	r0, [r4, #0]
 8109e82:	1821      	adds	r1, r4, r0
 8109e84:	428b      	cmp	r3, r1
 8109e86:	bf01      	itttt	eq
 8109e88:	6819      	ldreq	r1, [r3, #0]
 8109e8a:	685b      	ldreq	r3, [r3, #4]
 8109e8c:	1809      	addeq	r1, r1, r0
 8109e8e:	6021      	streq	r1, [r4, #0]
 8109e90:	e7ed      	b.n	8109e6e <_free_r+0x1e>
 8109e92:	461a      	mov	r2, r3
 8109e94:	685b      	ldr	r3, [r3, #4]
 8109e96:	b10b      	cbz	r3, 8109e9c <_free_r+0x4c>
 8109e98:	42a3      	cmp	r3, r4
 8109e9a:	d9fa      	bls.n	8109e92 <_free_r+0x42>
 8109e9c:	6811      	ldr	r1, [r2, #0]
 8109e9e:	1850      	adds	r0, r2, r1
 8109ea0:	42a0      	cmp	r0, r4
 8109ea2:	d10b      	bne.n	8109ebc <_free_r+0x6c>
 8109ea4:	6820      	ldr	r0, [r4, #0]
 8109ea6:	4401      	add	r1, r0
 8109ea8:	1850      	adds	r0, r2, r1
 8109eaa:	4283      	cmp	r3, r0
 8109eac:	6011      	str	r1, [r2, #0]
 8109eae:	d1e0      	bne.n	8109e72 <_free_r+0x22>
 8109eb0:	6818      	ldr	r0, [r3, #0]
 8109eb2:	685b      	ldr	r3, [r3, #4]
 8109eb4:	6053      	str	r3, [r2, #4]
 8109eb6:	4408      	add	r0, r1
 8109eb8:	6010      	str	r0, [r2, #0]
 8109eba:	e7da      	b.n	8109e72 <_free_r+0x22>
 8109ebc:	d902      	bls.n	8109ec4 <_free_r+0x74>
 8109ebe:	230c      	movs	r3, #12
 8109ec0:	602b      	str	r3, [r5, #0]
 8109ec2:	e7d6      	b.n	8109e72 <_free_r+0x22>
 8109ec4:	6820      	ldr	r0, [r4, #0]
 8109ec6:	1821      	adds	r1, r4, r0
 8109ec8:	428b      	cmp	r3, r1
 8109eca:	bf04      	itt	eq
 8109ecc:	6819      	ldreq	r1, [r3, #0]
 8109ece:	685b      	ldreq	r3, [r3, #4]
 8109ed0:	6063      	str	r3, [r4, #4]
 8109ed2:	bf04      	itt	eq
 8109ed4:	1809      	addeq	r1, r1, r0
 8109ed6:	6021      	streq	r1, [r4, #0]
 8109ed8:	6054      	str	r4, [r2, #4]
 8109eda:	e7ca      	b.n	8109e72 <_free_r+0x22>
 8109edc:	bd38      	pop	{r3, r4, r5, pc}
 8109ede:	bf00      	nop
 8109ee0:	10000f74 	.word	0x10000f74

08109ee4 <sbrk_aligned>:
 8109ee4:	b570      	push	{r4, r5, r6, lr}
 8109ee6:	4e0f      	ldr	r6, [pc, #60]	@ (8109f24 <sbrk_aligned+0x40>)
 8109ee8:	460c      	mov	r4, r1
 8109eea:	6831      	ldr	r1, [r6, #0]
 8109eec:	4605      	mov	r5, r0
 8109eee:	b911      	cbnz	r1, 8109ef6 <sbrk_aligned+0x12>
 8109ef0:	f000 fca4 	bl	810a83c <_sbrk_r>
 8109ef4:	6030      	str	r0, [r6, #0]
 8109ef6:	4621      	mov	r1, r4
 8109ef8:	4628      	mov	r0, r5
 8109efa:	f000 fc9f 	bl	810a83c <_sbrk_r>
 8109efe:	1c43      	adds	r3, r0, #1
 8109f00:	d103      	bne.n	8109f0a <sbrk_aligned+0x26>
 8109f02:	f04f 34ff 	mov.w	r4, #4294967295
 8109f06:	4620      	mov	r0, r4
 8109f08:	bd70      	pop	{r4, r5, r6, pc}
 8109f0a:	1cc4      	adds	r4, r0, #3
 8109f0c:	f024 0403 	bic.w	r4, r4, #3
 8109f10:	42a0      	cmp	r0, r4
 8109f12:	d0f8      	beq.n	8109f06 <sbrk_aligned+0x22>
 8109f14:	1a21      	subs	r1, r4, r0
 8109f16:	4628      	mov	r0, r5
 8109f18:	f000 fc90 	bl	810a83c <_sbrk_r>
 8109f1c:	3001      	adds	r0, #1
 8109f1e:	d1f2      	bne.n	8109f06 <sbrk_aligned+0x22>
 8109f20:	e7ef      	b.n	8109f02 <sbrk_aligned+0x1e>
 8109f22:	bf00      	nop
 8109f24:	10000f70 	.word	0x10000f70

08109f28 <_malloc_r>:
 8109f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109f2c:	1ccd      	adds	r5, r1, #3
 8109f2e:	f025 0503 	bic.w	r5, r5, #3
 8109f32:	3508      	adds	r5, #8
 8109f34:	2d0c      	cmp	r5, #12
 8109f36:	bf38      	it	cc
 8109f38:	250c      	movcc	r5, #12
 8109f3a:	2d00      	cmp	r5, #0
 8109f3c:	4606      	mov	r6, r0
 8109f3e:	db01      	blt.n	8109f44 <_malloc_r+0x1c>
 8109f40:	42a9      	cmp	r1, r5
 8109f42:	d904      	bls.n	8109f4e <_malloc_r+0x26>
 8109f44:	230c      	movs	r3, #12
 8109f46:	6033      	str	r3, [r6, #0]
 8109f48:	2000      	movs	r0, #0
 8109f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109f4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810a024 <_malloc_r+0xfc>
 8109f52:	f000 f869 	bl	810a028 <__malloc_lock>
 8109f56:	f8d8 3000 	ldr.w	r3, [r8]
 8109f5a:	461c      	mov	r4, r3
 8109f5c:	bb44      	cbnz	r4, 8109fb0 <_malloc_r+0x88>
 8109f5e:	4629      	mov	r1, r5
 8109f60:	4630      	mov	r0, r6
 8109f62:	f7ff ffbf 	bl	8109ee4 <sbrk_aligned>
 8109f66:	1c43      	adds	r3, r0, #1
 8109f68:	4604      	mov	r4, r0
 8109f6a:	d158      	bne.n	810a01e <_malloc_r+0xf6>
 8109f6c:	f8d8 4000 	ldr.w	r4, [r8]
 8109f70:	4627      	mov	r7, r4
 8109f72:	2f00      	cmp	r7, #0
 8109f74:	d143      	bne.n	8109ffe <_malloc_r+0xd6>
 8109f76:	2c00      	cmp	r4, #0
 8109f78:	d04b      	beq.n	810a012 <_malloc_r+0xea>
 8109f7a:	6823      	ldr	r3, [r4, #0]
 8109f7c:	4639      	mov	r1, r7
 8109f7e:	4630      	mov	r0, r6
 8109f80:	eb04 0903 	add.w	r9, r4, r3
 8109f84:	f000 fc5a 	bl	810a83c <_sbrk_r>
 8109f88:	4581      	cmp	r9, r0
 8109f8a:	d142      	bne.n	810a012 <_malloc_r+0xea>
 8109f8c:	6821      	ldr	r1, [r4, #0]
 8109f8e:	1a6d      	subs	r5, r5, r1
 8109f90:	4629      	mov	r1, r5
 8109f92:	4630      	mov	r0, r6
 8109f94:	f7ff ffa6 	bl	8109ee4 <sbrk_aligned>
 8109f98:	3001      	adds	r0, #1
 8109f9a:	d03a      	beq.n	810a012 <_malloc_r+0xea>
 8109f9c:	6823      	ldr	r3, [r4, #0]
 8109f9e:	442b      	add	r3, r5
 8109fa0:	6023      	str	r3, [r4, #0]
 8109fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8109fa6:	685a      	ldr	r2, [r3, #4]
 8109fa8:	bb62      	cbnz	r2, 810a004 <_malloc_r+0xdc>
 8109faa:	f8c8 7000 	str.w	r7, [r8]
 8109fae:	e00f      	b.n	8109fd0 <_malloc_r+0xa8>
 8109fb0:	6822      	ldr	r2, [r4, #0]
 8109fb2:	1b52      	subs	r2, r2, r5
 8109fb4:	d420      	bmi.n	8109ff8 <_malloc_r+0xd0>
 8109fb6:	2a0b      	cmp	r2, #11
 8109fb8:	d917      	bls.n	8109fea <_malloc_r+0xc2>
 8109fba:	1961      	adds	r1, r4, r5
 8109fbc:	42a3      	cmp	r3, r4
 8109fbe:	6025      	str	r5, [r4, #0]
 8109fc0:	bf18      	it	ne
 8109fc2:	6059      	strne	r1, [r3, #4]
 8109fc4:	6863      	ldr	r3, [r4, #4]
 8109fc6:	bf08      	it	eq
 8109fc8:	f8c8 1000 	streq.w	r1, [r8]
 8109fcc:	5162      	str	r2, [r4, r5]
 8109fce:	604b      	str	r3, [r1, #4]
 8109fd0:	4630      	mov	r0, r6
 8109fd2:	f000 f82f 	bl	810a034 <__malloc_unlock>
 8109fd6:	f104 000b 	add.w	r0, r4, #11
 8109fda:	1d23      	adds	r3, r4, #4
 8109fdc:	f020 0007 	bic.w	r0, r0, #7
 8109fe0:	1ac2      	subs	r2, r0, r3
 8109fe2:	bf1c      	itt	ne
 8109fe4:	1a1b      	subne	r3, r3, r0
 8109fe6:	50a3      	strne	r3, [r4, r2]
 8109fe8:	e7af      	b.n	8109f4a <_malloc_r+0x22>
 8109fea:	6862      	ldr	r2, [r4, #4]
 8109fec:	42a3      	cmp	r3, r4
 8109fee:	bf0c      	ite	eq
 8109ff0:	f8c8 2000 	streq.w	r2, [r8]
 8109ff4:	605a      	strne	r2, [r3, #4]
 8109ff6:	e7eb      	b.n	8109fd0 <_malloc_r+0xa8>
 8109ff8:	4623      	mov	r3, r4
 8109ffa:	6864      	ldr	r4, [r4, #4]
 8109ffc:	e7ae      	b.n	8109f5c <_malloc_r+0x34>
 8109ffe:	463c      	mov	r4, r7
 810a000:	687f      	ldr	r7, [r7, #4]
 810a002:	e7b6      	b.n	8109f72 <_malloc_r+0x4a>
 810a004:	461a      	mov	r2, r3
 810a006:	685b      	ldr	r3, [r3, #4]
 810a008:	42a3      	cmp	r3, r4
 810a00a:	d1fb      	bne.n	810a004 <_malloc_r+0xdc>
 810a00c:	2300      	movs	r3, #0
 810a00e:	6053      	str	r3, [r2, #4]
 810a010:	e7de      	b.n	8109fd0 <_malloc_r+0xa8>
 810a012:	230c      	movs	r3, #12
 810a014:	6033      	str	r3, [r6, #0]
 810a016:	4630      	mov	r0, r6
 810a018:	f000 f80c 	bl	810a034 <__malloc_unlock>
 810a01c:	e794      	b.n	8109f48 <_malloc_r+0x20>
 810a01e:	6005      	str	r5, [r0, #0]
 810a020:	e7d6      	b.n	8109fd0 <_malloc_r+0xa8>
 810a022:	bf00      	nop
 810a024:	10000f74 	.word	0x10000f74

0810a028 <__malloc_lock>:
 810a028:	4801      	ldr	r0, [pc, #4]	@ (810a030 <__malloc_lock+0x8>)
 810a02a:	f7ff bf00 	b.w	8109e2e <__retarget_lock_acquire_recursive>
 810a02e:	bf00      	nop
 810a030:	10000f6c 	.word	0x10000f6c

0810a034 <__malloc_unlock>:
 810a034:	4801      	ldr	r0, [pc, #4]	@ (810a03c <__malloc_unlock+0x8>)
 810a036:	f7ff befb 	b.w	8109e30 <__retarget_lock_release_recursive>
 810a03a:	bf00      	nop
 810a03c:	10000f6c 	.word	0x10000f6c

0810a040 <__sfputc_r>:
 810a040:	6893      	ldr	r3, [r2, #8]
 810a042:	3b01      	subs	r3, #1
 810a044:	2b00      	cmp	r3, #0
 810a046:	b410      	push	{r4}
 810a048:	6093      	str	r3, [r2, #8]
 810a04a:	da08      	bge.n	810a05e <__sfputc_r+0x1e>
 810a04c:	6994      	ldr	r4, [r2, #24]
 810a04e:	42a3      	cmp	r3, r4
 810a050:	db01      	blt.n	810a056 <__sfputc_r+0x16>
 810a052:	290a      	cmp	r1, #10
 810a054:	d103      	bne.n	810a05e <__sfputc_r+0x1e>
 810a056:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a05a:	f7ff bdda 	b.w	8109c12 <__swbuf_r>
 810a05e:	6813      	ldr	r3, [r2, #0]
 810a060:	1c58      	adds	r0, r3, #1
 810a062:	6010      	str	r0, [r2, #0]
 810a064:	7019      	strb	r1, [r3, #0]
 810a066:	4608      	mov	r0, r1
 810a068:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a06c:	4770      	bx	lr

0810a06e <__sfputs_r>:
 810a06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a070:	4606      	mov	r6, r0
 810a072:	460f      	mov	r7, r1
 810a074:	4614      	mov	r4, r2
 810a076:	18d5      	adds	r5, r2, r3
 810a078:	42ac      	cmp	r4, r5
 810a07a:	d101      	bne.n	810a080 <__sfputs_r+0x12>
 810a07c:	2000      	movs	r0, #0
 810a07e:	e007      	b.n	810a090 <__sfputs_r+0x22>
 810a080:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a084:	463a      	mov	r2, r7
 810a086:	4630      	mov	r0, r6
 810a088:	f7ff ffda 	bl	810a040 <__sfputc_r>
 810a08c:	1c43      	adds	r3, r0, #1
 810a08e:	d1f3      	bne.n	810a078 <__sfputs_r+0xa>
 810a090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810a094 <_vfiprintf_r>:
 810a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a098:	460d      	mov	r5, r1
 810a09a:	b09d      	sub	sp, #116	@ 0x74
 810a09c:	4614      	mov	r4, r2
 810a09e:	4698      	mov	r8, r3
 810a0a0:	4606      	mov	r6, r0
 810a0a2:	b118      	cbz	r0, 810a0ac <_vfiprintf_r+0x18>
 810a0a4:	6a03      	ldr	r3, [r0, #32]
 810a0a6:	b90b      	cbnz	r3, 810a0ac <_vfiprintf_r+0x18>
 810a0a8:	f7ff fcca 	bl	8109a40 <__sinit>
 810a0ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810a0ae:	07d9      	lsls	r1, r3, #31
 810a0b0:	d405      	bmi.n	810a0be <_vfiprintf_r+0x2a>
 810a0b2:	89ab      	ldrh	r3, [r5, #12]
 810a0b4:	059a      	lsls	r2, r3, #22
 810a0b6:	d402      	bmi.n	810a0be <_vfiprintf_r+0x2a>
 810a0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810a0ba:	f7ff feb8 	bl	8109e2e <__retarget_lock_acquire_recursive>
 810a0be:	89ab      	ldrh	r3, [r5, #12]
 810a0c0:	071b      	lsls	r3, r3, #28
 810a0c2:	d501      	bpl.n	810a0c8 <_vfiprintf_r+0x34>
 810a0c4:	692b      	ldr	r3, [r5, #16]
 810a0c6:	b99b      	cbnz	r3, 810a0f0 <_vfiprintf_r+0x5c>
 810a0c8:	4629      	mov	r1, r5
 810a0ca:	4630      	mov	r0, r6
 810a0cc:	f7ff fde0 	bl	8109c90 <__swsetup_r>
 810a0d0:	b170      	cbz	r0, 810a0f0 <_vfiprintf_r+0x5c>
 810a0d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810a0d4:	07dc      	lsls	r4, r3, #31
 810a0d6:	d504      	bpl.n	810a0e2 <_vfiprintf_r+0x4e>
 810a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 810a0dc:	b01d      	add	sp, #116	@ 0x74
 810a0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a0e2:	89ab      	ldrh	r3, [r5, #12]
 810a0e4:	0598      	lsls	r0, r3, #22
 810a0e6:	d4f7      	bmi.n	810a0d8 <_vfiprintf_r+0x44>
 810a0e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810a0ea:	f7ff fea1 	bl	8109e30 <__retarget_lock_release_recursive>
 810a0ee:	e7f3      	b.n	810a0d8 <_vfiprintf_r+0x44>
 810a0f0:	2300      	movs	r3, #0
 810a0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 810a0f4:	2320      	movs	r3, #32
 810a0f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810a0fa:	f8cd 800c 	str.w	r8, [sp, #12]
 810a0fe:	2330      	movs	r3, #48	@ 0x30
 810a100:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810a2b0 <_vfiprintf_r+0x21c>
 810a104:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810a108:	f04f 0901 	mov.w	r9, #1
 810a10c:	4623      	mov	r3, r4
 810a10e:	469a      	mov	sl, r3
 810a110:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a114:	b10a      	cbz	r2, 810a11a <_vfiprintf_r+0x86>
 810a116:	2a25      	cmp	r2, #37	@ 0x25
 810a118:	d1f9      	bne.n	810a10e <_vfiprintf_r+0x7a>
 810a11a:	ebba 0b04 	subs.w	fp, sl, r4
 810a11e:	d00b      	beq.n	810a138 <_vfiprintf_r+0xa4>
 810a120:	465b      	mov	r3, fp
 810a122:	4622      	mov	r2, r4
 810a124:	4629      	mov	r1, r5
 810a126:	4630      	mov	r0, r6
 810a128:	f7ff ffa1 	bl	810a06e <__sfputs_r>
 810a12c:	3001      	adds	r0, #1
 810a12e:	f000 80a7 	beq.w	810a280 <_vfiprintf_r+0x1ec>
 810a132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810a134:	445a      	add	r2, fp
 810a136:	9209      	str	r2, [sp, #36]	@ 0x24
 810a138:	f89a 3000 	ldrb.w	r3, [sl]
 810a13c:	2b00      	cmp	r3, #0
 810a13e:	f000 809f 	beq.w	810a280 <_vfiprintf_r+0x1ec>
 810a142:	2300      	movs	r3, #0
 810a144:	f04f 32ff 	mov.w	r2, #4294967295
 810a148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a14c:	f10a 0a01 	add.w	sl, sl, #1
 810a150:	9304      	str	r3, [sp, #16]
 810a152:	9307      	str	r3, [sp, #28]
 810a154:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810a158:	931a      	str	r3, [sp, #104]	@ 0x68
 810a15a:	4654      	mov	r4, sl
 810a15c:	2205      	movs	r2, #5
 810a15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a162:	4853      	ldr	r0, [pc, #332]	@ (810a2b0 <_vfiprintf_r+0x21c>)
 810a164:	f7f6 f8bc 	bl	81002e0 <memchr>
 810a168:	9a04      	ldr	r2, [sp, #16]
 810a16a:	b9d8      	cbnz	r0, 810a1a4 <_vfiprintf_r+0x110>
 810a16c:	06d1      	lsls	r1, r2, #27
 810a16e:	bf44      	itt	mi
 810a170:	2320      	movmi	r3, #32
 810a172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810a176:	0713      	lsls	r3, r2, #28
 810a178:	bf44      	itt	mi
 810a17a:	232b      	movmi	r3, #43	@ 0x2b
 810a17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810a180:	f89a 3000 	ldrb.w	r3, [sl]
 810a184:	2b2a      	cmp	r3, #42	@ 0x2a
 810a186:	d015      	beq.n	810a1b4 <_vfiprintf_r+0x120>
 810a188:	9a07      	ldr	r2, [sp, #28]
 810a18a:	4654      	mov	r4, sl
 810a18c:	2000      	movs	r0, #0
 810a18e:	f04f 0c0a 	mov.w	ip, #10
 810a192:	4621      	mov	r1, r4
 810a194:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a198:	3b30      	subs	r3, #48	@ 0x30
 810a19a:	2b09      	cmp	r3, #9
 810a19c:	d94b      	bls.n	810a236 <_vfiprintf_r+0x1a2>
 810a19e:	b1b0      	cbz	r0, 810a1ce <_vfiprintf_r+0x13a>
 810a1a0:	9207      	str	r2, [sp, #28]
 810a1a2:	e014      	b.n	810a1ce <_vfiprintf_r+0x13a>
 810a1a4:	eba0 0308 	sub.w	r3, r0, r8
 810a1a8:	fa09 f303 	lsl.w	r3, r9, r3
 810a1ac:	4313      	orrs	r3, r2
 810a1ae:	9304      	str	r3, [sp, #16]
 810a1b0:	46a2      	mov	sl, r4
 810a1b2:	e7d2      	b.n	810a15a <_vfiprintf_r+0xc6>
 810a1b4:	9b03      	ldr	r3, [sp, #12]
 810a1b6:	1d19      	adds	r1, r3, #4
 810a1b8:	681b      	ldr	r3, [r3, #0]
 810a1ba:	9103      	str	r1, [sp, #12]
 810a1bc:	2b00      	cmp	r3, #0
 810a1be:	bfbb      	ittet	lt
 810a1c0:	425b      	neglt	r3, r3
 810a1c2:	f042 0202 	orrlt.w	r2, r2, #2
 810a1c6:	9307      	strge	r3, [sp, #28]
 810a1c8:	9307      	strlt	r3, [sp, #28]
 810a1ca:	bfb8      	it	lt
 810a1cc:	9204      	strlt	r2, [sp, #16]
 810a1ce:	7823      	ldrb	r3, [r4, #0]
 810a1d0:	2b2e      	cmp	r3, #46	@ 0x2e
 810a1d2:	d10a      	bne.n	810a1ea <_vfiprintf_r+0x156>
 810a1d4:	7863      	ldrb	r3, [r4, #1]
 810a1d6:	2b2a      	cmp	r3, #42	@ 0x2a
 810a1d8:	d132      	bne.n	810a240 <_vfiprintf_r+0x1ac>
 810a1da:	9b03      	ldr	r3, [sp, #12]
 810a1dc:	1d1a      	adds	r2, r3, #4
 810a1de:	681b      	ldr	r3, [r3, #0]
 810a1e0:	9203      	str	r2, [sp, #12]
 810a1e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810a1e6:	3402      	adds	r4, #2
 810a1e8:	9305      	str	r3, [sp, #20]
 810a1ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810a2c0 <_vfiprintf_r+0x22c>
 810a1ee:	7821      	ldrb	r1, [r4, #0]
 810a1f0:	2203      	movs	r2, #3
 810a1f2:	4650      	mov	r0, sl
 810a1f4:	f7f6 f874 	bl	81002e0 <memchr>
 810a1f8:	b138      	cbz	r0, 810a20a <_vfiprintf_r+0x176>
 810a1fa:	9b04      	ldr	r3, [sp, #16]
 810a1fc:	eba0 000a 	sub.w	r0, r0, sl
 810a200:	2240      	movs	r2, #64	@ 0x40
 810a202:	4082      	lsls	r2, r0
 810a204:	4313      	orrs	r3, r2
 810a206:	3401      	adds	r4, #1
 810a208:	9304      	str	r3, [sp, #16]
 810a20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a20e:	4829      	ldr	r0, [pc, #164]	@ (810a2b4 <_vfiprintf_r+0x220>)
 810a210:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810a214:	2206      	movs	r2, #6
 810a216:	f7f6 f863 	bl	81002e0 <memchr>
 810a21a:	2800      	cmp	r0, #0
 810a21c:	d03f      	beq.n	810a29e <_vfiprintf_r+0x20a>
 810a21e:	4b26      	ldr	r3, [pc, #152]	@ (810a2b8 <_vfiprintf_r+0x224>)
 810a220:	bb1b      	cbnz	r3, 810a26a <_vfiprintf_r+0x1d6>
 810a222:	9b03      	ldr	r3, [sp, #12]
 810a224:	3307      	adds	r3, #7
 810a226:	f023 0307 	bic.w	r3, r3, #7
 810a22a:	3308      	adds	r3, #8
 810a22c:	9303      	str	r3, [sp, #12]
 810a22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a230:	443b      	add	r3, r7
 810a232:	9309      	str	r3, [sp, #36]	@ 0x24
 810a234:	e76a      	b.n	810a10c <_vfiprintf_r+0x78>
 810a236:	fb0c 3202 	mla	r2, ip, r2, r3
 810a23a:	460c      	mov	r4, r1
 810a23c:	2001      	movs	r0, #1
 810a23e:	e7a8      	b.n	810a192 <_vfiprintf_r+0xfe>
 810a240:	2300      	movs	r3, #0
 810a242:	3401      	adds	r4, #1
 810a244:	9305      	str	r3, [sp, #20]
 810a246:	4619      	mov	r1, r3
 810a248:	f04f 0c0a 	mov.w	ip, #10
 810a24c:	4620      	mov	r0, r4
 810a24e:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a252:	3a30      	subs	r2, #48	@ 0x30
 810a254:	2a09      	cmp	r2, #9
 810a256:	d903      	bls.n	810a260 <_vfiprintf_r+0x1cc>
 810a258:	2b00      	cmp	r3, #0
 810a25a:	d0c6      	beq.n	810a1ea <_vfiprintf_r+0x156>
 810a25c:	9105      	str	r1, [sp, #20]
 810a25e:	e7c4      	b.n	810a1ea <_vfiprintf_r+0x156>
 810a260:	fb0c 2101 	mla	r1, ip, r1, r2
 810a264:	4604      	mov	r4, r0
 810a266:	2301      	movs	r3, #1
 810a268:	e7f0      	b.n	810a24c <_vfiprintf_r+0x1b8>
 810a26a:	ab03      	add	r3, sp, #12
 810a26c:	9300      	str	r3, [sp, #0]
 810a26e:	462a      	mov	r2, r5
 810a270:	4b12      	ldr	r3, [pc, #72]	@ (810a2bc <_vfiprintf_r+0x228>)
 810a272:	a904      	add	r1, sp, #16
 810a274:	4630      	mov	r0, r6
 810a276:	f3af 8000 	nop.w
 810a27a:	4607      	mov	r7, r0
 810a27c:	1c78      	adds	r0, r7, #1
 810a27e:	d1d6      	bne.n	810a22e <_vfiprintf_r+0x19a>
 810a280:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810a282:	07d9      	lsls	r1, r3, #31
 810a284:	d405      	bmi.n	810a292 <_vfiprintf_r+0x1fe>
 810a286:	89ab      	ldrh	r3, [r5, #12]
 810a288:	059a      	lsls	r2, r3, #22
 810a28a:	d402      	bmi.n	810a292 <_vfiprintf_r+0x1fe>
 810a28c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810a28e:	f7ff fdcf 	bl	8109e30 <__retarget_lock_release_recursive>
 810a292:	89ab      	ldrh	r3, [r5, #12]
 810a294:	065b      	lsls	r3, r3, #25
 810a296:	f53f af1f 	bmi.w	810a0d8 <_vfiprintf_r+0x44>
 810a29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810a29c:	e71e      	b.n	810a0dc <_vfiprintf_r+0x48>
 810a29e:	ab03      	add	r3, sp, #12
 810a2a0:	9300      	str	r3, [sp, #0]
 810a2a2:	462a      	mov	r2, r5
 810a2a4:	4b05      	ldr	r3, [pc, #20]	@ (810a2bc <_vfiprintf_r+0x228>)
 810a2a6:	a904      	add	r1, sp, #16
 810a2a8:	4630      	mov	r0, r6
 810a2aa:	f000 f879 	bl	810a3a0 <_printf_i>
 810a2ae:	e7e4      	b.n	810a27a <_vfiprintf_r+0x1e6>
 810a2b0:	0810c96c 	.word	0x0810c96c
 810a2b4:	0810c976 	.word	0x0810c976
 810a2b8:	00000000 	.word	0x00000000
 810a2bc:	0810a06f 	.word	0x0810a06f
 810a2c0:	0810c972 	.word	0x0810c972

0810a2c4 <_printf_common>:
 810a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a2c8:	4616      	mov	r6, r2
 810a2ca:	4698      	mov	r8, r3
 810a2cc:	688a      	ldr	r2, [r1, #8]
 810a2ce:	690b      	ldr	r3, [r1, #16]
 810a2d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810a2d4:	4293      	cmp	r3, r2
 810a2d6:	bfb8      	it	lt
 810a2d8:	4613      	movlt	r3, r2
 810a2da:	6033      	str	r3, [r6, #0]
 810a2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810a2e0:	4607      	mov	r7, r0
 810a2e2:	460c      	mov	r4, r1
 810a2e4:	b10a      	cbz	r2, 810a2ea <_printf_common+0x26>
 810a2e6:	3301      	adds	r3, #1
 810a2e8:	6033      	str	r3, [r6, #0]
 810a2ea:	6823      	ldr	r3, [r4, #0]
 810a2ec:	0699      	lsls	r1, r3, #26
 810a2ee:	bf42      	ittt	mi
 810a2f0:	6833      	ldrmi	r3, [r6, #0]
 810a2f2:	3302      	addmi	r3, #2
 810a2f4:	6033      	strmi	r3, [r6, #0]
 810a2f6:	6825      	ldr	r5, [r4, #0]
 810a2f8:	f015 0506 	ands.w	r5, r5, #6
 810a2fc:	d106      	bne.n	810a30c <_printf_common+0x48>
 810a2fe:	f104 0a19 	add.w	sl, r4, #25
 810a302:	68e3      	ldr	r3, [r4, #12]
 810a304:	6832      	ldr	r2, [r6, #0]
 810a306:	1a9b      	subs	r3, r3, r2
 810a308:	42ab      	cmp	r3, r5
 810a30a:	dc26      	bgt.n	810a35a <_printf_common+0x96>
 810a30c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810a310:	6822      	ldr	r2, [r4, #0]
 810a312:	3b00      	subs	r3, #0
 810a314:	bf18      	it	ne
 810a316:	2301      	movne	r3, #1
 810a318:	0692      	lsls	r2, r2, #26
 810a31a:	d42b      	bmi.n	810a374 <_printf_common+0xb0>
 810a31c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810a320:	4641      	mov	r1, r8
 810a322:	4638      	mov	r0, r7
 810a324:	47c8      	blx	r9
 810a326:	3001      	adds	r0, #1
 810a328:	d01e      	beq.n	810a368 <_printf_common+0xa4>
 810a32a:	6823      	ldr	r3, [r4, #0]
 810a32c:	6922      	ldr	r2, [r4, #16]
 810a32e:	f003 0306 	and.w	r3, r3, #6
 810a332:	2b04      	cmp	r3, #4
 810a334:	bf02      	ittt	eq
 810a336:	68e5      	ldreq	r5, [r4, #12]
 810a338:	6833      	ldreq	r3, [r6, #0]
 810a33a:	1aed      	subeq	r5, r5, r3
 810a33c:	68a3      	ldr	r3, [r4, #8]
 810a33e:	bf0c      	ite	eq
 810a340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a344:	2500      	movne	r5, #0
 810a346:	4293      	cmp	r3, r2
 810a348:	bfc4      	itt	gt
 810a34a:	1a9b      	subgt	r3, r3, r2
 810a34c:	18ed      	addgt	r5, r5, r3
 810a34e:	2600      	movs	r6, #0
 810a350:	341a      	adds	r4, #26
 810a352:	42b5      	cmp	r5, r6
 810a354:	d11a      	bne.n	810a38c <_printf_common+0xc8>
 810a356:	2000      	movs	r0, #0
 810a358:	e008      	b.n	810a36c <_printf_common+0xa8>
 810a35a:	2301      	movs	r3, #1
 810a35c:	4652      	mov	r2, sl
 810a35e:	4641      	mov	r1, r8
 810a360:	4638      	mov	r0, r7
 810a362:	47c8      	blx	r9
 810a364:	3001      	adds	r0, #1
 810a366:	d103      	bne.n	810a370 <_printf_common+0xac>
 810a368:	f04f 30ff 	mov.w	r0, #4294967295
 810a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a370:	3501      	adds	r5, #1
 810a372:	e7c6      	b.n	810a302 <_printf_common+0x3e>
 810a374:	18e1      	adds	r1, r4, r3
 810a376:	1c5a      	adds	r2, r3, #1
 810a378:	2030      	movs	r0, #48	@ 0x30
 810a37a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810a37e:	4422      	add	r2, r4
 810a380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810a384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810a388:	3302      	adds	r3, #2
 810a38a:	e7c7      	b.n	810a31c <_printf_common+0x58>
 810a38c:	2301      	movs	r3, #1
 810a38e:	4622      	mov	r2, r4
 810a390:	4641      	mov	r1, r8
 810a392:	4638      	mov	r0, r7
 810a394:	47c8      	blx	r9
 810a396:	3001      	adds	r0, #1
 810a398:	d0e6      	beq.n	810a368 <_printf_common+0xa4>
 810a39a:	3601      	adds	r6, #1
 810a39c:	e7d9      	b.n	810a352 <_printf_common+0x8e>
	...

0810a3a0 <_printf_i>:
 810a3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a3a4:	7e0f      	ldrb	r7, [r1, #24]
 810a3a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810a3a8:	2f78      	cmp	r7, #120	@ 0x78
 810a3aa:	4691      	mov	r9, r2
 810a3ac:	4680      	mov	r8, r0
 810a3ae:	460c      	mov	r4, r1
 810a3b0:	469a      	mov	sl, r3
 810a3b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810a3b6:	d807      	bhi.n	810a3c8 <_printf_i+0x28>
 810a3b8:	2f62      	cmp	r7, #98	@ 0x62
 810a3ba:	d80a      	bhi.n	810a3d2 <_printf_i+0x32>
 810a3bc:	2f00      	cmp	r7, #0
 810a3be:	f000 80d1 	beq.w	810a564 <_printf_i+0x1c4>
 810a3c2:	2f58      	cmp	r7, #88	@ 0x58
 810a3c4:	f000 80b8 	beq.w	810a538 <_printf_i+0x198>
 810a3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810a3cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810a3d0:	e03a      	b.n	810a448 <_printf_i+0xa8>
 810a3d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810a3d6:	2b15      	cmp	r3, #21
 810a3d8:	d8f6      	bhi.n	810a3c8 <_printf_i+0x28>
 810a3da:	a101      	add	r1, pc, #4	@ (adr r1, 810a3e0 <_printf_i+0x40>)
 810a3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810a3e0:	0810a439 	.word	0x0810a439
 810a3e4:	0810a44d 	.word	0x0810a44d
 810a3e8:	0810a3c9 	.word	0x0810a3c9
 810a3ec:	0810a3c9 	.word	0x0810a3c9
 810a3f0:	0810a3c9 	.word	0x0810a3c9
 810a3f4:	0810a3c9 	.word	0x0810a3c9
 810a3f8:	0810a44d 	.word	0x0810a44d
 810a3fc:	0810a3c9 	.word	0x0810a3c9
 810a400:	0810a3c9 	.word	0x0810a3c9
 810a404:	0810a3c9 	.word	0x0810a3c9
 810a408:	0810a3c9 	.word	0x0810a3c9
 810a40c:	0810a54b 	.word	0x0810a54b
 810a410:	0810a477 	.word	0x0810a477
 810a414:	0810a505 	.word	0x0810a505
 810a418:	0810a3c9 	.word	0x0810a3c9
 810a41c:	0810a3c9 	.word	0x0810a3c9
 810a420:	0810a56d 	.word	0x0810a56d
 810a424:	0810a3c9 	.word	0x0810a3c9
 810a428:	0810a477 	.word	0x0810a477
 810a42c:	0810a3c9 	.word	0x0810a3c9
 810a430:	0810a3c9 	.word	0x0810a3c9
 810a434:	0810a50d 	.word	0x0810a50d
 810a438:	6833      	ldr	r3, [r6, #0]
 810a43a:	1d1a      	adds	r2, r3, #4
 810a43c:	681b      	ldr	r3, [r3, #0]
 810a43e:	6032      	str	r2, [r6, #0]
 810a440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810a444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810a448:	2301      	movs	r3, #1
 810a44a:	e09c      	b.n	810a586 <_printf_i+0x1e6>
 810a44c:	6833      	ldr	r3, [r6, #0]
 810a44e:	6820      	ldr	r0, [r4, #0]
 810a450:	1d19      	adds	r1, r3, #4
 810a452:	6031      	str	r1, [r6, #0]
 810a454:	0606      	lsls	r6, r0, #24
 810a456:	d501      	bpl.n	810a45c <_printf_i+0xbc>
 810a458:	681d      	ldr	r5, [r3, #0]
 810a45a:	e003      	b.n	810a464 <_printf_i+0xc4>
 810a45c:	0645      	lsls	r5, r0, #25
 810a45e:	d5fb      	bpl.n	810a458 <_printf_i+0xb8>
 810a460:	f9b3 5000 	ldrsh.w	r5, [r3]
 810a464:	2d00      	cmp	r5, #0
 810a466:	da03      	bge.n	810a470 <_printf_i+0xd0>
 810a468:	232d      	movs	r3, #45	@ 0x2d
 810a46a:	426d      	negs	r5, r5
 810a46c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810a470:	4858      	ldr	r0, [pc, #352]	@ (810a5d4 <_printf_i+0x234>)
 810a472:	230a      	movs	r3, #10
 810a474:	e011      	b.n	810a49a <_printf_i+0xfa>
 810a476:	6821      	ldr	r1, [r4, #0]
 810a478:	6833      	ldr	r3, [r6, #0]
 810a47a:	0608      	lsls	r0, r1, #24
 810a47c:	f853 5b04 	ldr.w	r5, [r3], #4
 810a480:	d402      	bmi.n	810a488 <_printf_i+0xe8>
 810a482:	0649      	lsls	r1, r1, #25
 810a484:	bf48      	it	mi
 810a486:	b2ad      	uxthmi	r5, r5
 810a488:	2f6f      	cmp	r7, #111	@ 0x6f
 810a48a:	4852      	ldr	r0, [pc, #328]	@ (810a5d4 <_printf_i+0x234>)
 810a48c:	6033      	str	r3, [r6, #0]
 810a48e:	bf14      	ite	ne
 810a490:	230a      	movne	r3, #10
 810a492:	2308      	moveq	r3, #8
 810a494:	2100      	movs	r1, #0
 810a496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810a49a:	6866      	ldr	r6, [r4, #4]
 810a49c:	60a6      	str	r6, [r4, #8]
 810a49e:	2e00      	cmp	r6, #0
 810a4a0:	db05      	blt.n	810a4ae <_printf_i+0x10e>
 810a4a2:	6821      	ldr	r1, [r4, #0]
 810a4a4:	432e      	orrs	r6, r5
 810a4a6:	f021 0104 	bic.w	r1, r1, #4
 810a4aa:	6021      	str	r1, [r4, #0]
 810a4ac:	d04b      	beq.n	810a546 <_printf_i+0x1a6>
 810a4ae:	4616      	mov	r6, r2
 810a4b0:	fbb5 f1f3 	udiv	r1, r5, r3
 810a4b4:	fb03 5711 	mls	r7, r3, r1, r5
 810a4b8:	5dc7      	ldrb	r7, [r0, r7]
 810a4ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810a4be:	462f      	mov	r7, r5
 810a4c0:	42bb      	cmp	r3, r7
 810a4c2:	460d      	mov	r5, r1
 810a4c4:	d9f4      	bls.n	810a4b0 <_printf_i+0x110>
 810a4c6:	2b08      	cmp	r3, #8
 810a4c8:	d10b      	bne.n	810a4e2 <_printf_i+0x142>
 810a4ca:	6823      	ldr	r3, [r4, #0]
 810a4cc:	07df      	lsls	r7, r3, #31
 810a4ce:	d508      	bpl.n	810a4e2 <_printf_i+0x142>
 810a4d0:	6923      	ldr	r3, [r4, #16]
 810a4d2:	6861      	ldr	r1, [r4, #4]
 810a4d4:	4299      	cmp	r1, r3
 810a4d6:	bfde      	ittt	le
 810a4d8:	2330      	movle	r3, #48	@ 0x30
 810a4da:	f806 3c01 	strble.w	r3, [r6, #-1]
 810a4de:	f106 36ff 	addle.w	r6, r6, #4294967295
 810a4e2:	1b92      	subs	r2, r2, r6
 810a4e4:	6122      	str	r2, [r4, #16]
 810a4e6:	f8cd a000 	str.w	sl, [sp]
 810a4ea:	464b      	mov	r3, r9
 810a4ec:	aa03      	add	r2, sp, #12
 810a4ee:	4621      	mov	r1, r4
 810a4f0:	4640      	mov	r0, r8
 810a4f2:	f7ff fee7 	bl	810a2c4 <_printf_common>
 810a4f6:	3001      	adds	r0, #1
 810a4f8:	d14a      	bne.n	810a590 <_printf_i+0x1f0>
 810a4fa:	f04f 30ff 	mov.w	r0, #4294967295
 810a4fe:	b004      	add	sp, #16
 810a500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a504:	6823      	ldr	r3, [r4, #0]
 810a506:	f043 0320 	orr.w	r3, r3, #32
 810a50a:	6023      	str	r3, [r4, #0]
 810a50c:	4832      	ldr	r0, [pc, #200]	@ (810a5d8 <_printf_i+0x238>)
 810a50e:	2778      	movs	r7, #120	@ 0x78
 810a510:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810a514:	6823      	ldr	r3, [r4, #0]
 810a516:	6831      	ldr	r1, [r6, #0]
 810a518:	061f      	lsls	r7, r3, #24
 810a51a:	f851 5b04 	ldr.w	r5, [r1], #4
 810a51e:	d402      	bmi.n	810a526 <_printf_i+0x186>
 810a520:	065f      	lsls	r7, r3, #25
 810a522:	bf48      	it	mi
 810a524:	b2ad      	uxthmi	r5, r5
 810a526:	6031      	str	r1, [r6, #0]
 810a528:	07d9      	lsls	r1, r3, #31
 810a52a:	bf44      	itt	mi
 810a52c:	f043 0320 	orrmi.w	r3, r3, #32
 810a530:	6023      	strmi	r3, [r4, #0]
 810a532:	b11d      	cbz	r5, 810a53c <_printf_i+0x19c>
 810a534:	2310      	movs	r3, #16
 810a536:	e7ad      	b.n	810a494 <_printf_i+0xf4>
 810a538:	4826      	ldr	r0, [pc, #152]	@ (810a5d4 <_printf_i+0x234>)
 810a53a:	e7e9      	b.n	810a510 <_printf_i+0x170>
 810a53c:	6823      	ldr	r3, [r4, #0]
 810a53e:	f023 0320 	bic.w	r3, r3, #32
 810a542:	6023      	str	r3, [r4, #0]
 810a544:	e7f6      	b.n	810a534 <_printf_i+0x194>
 810a546:	4616      	mov	r6, r2
 810a548:	e7bd      	b.n	810a4c6 <_printf_i+0x126>
 810a54a:	6833      	ldr	r3, [r6, #0]
 810a54c:	6825      	ldr	r5, [r4, #0]
 810a54e:	6961      	ldr	r1, [r4, #20]
 810a550:	1d18      	adds	r0, r3, #4
 810a552:	6030      	str	r0, [r6, #0]
 810a554:	062e      	lsls	r6, r5, #24
 810a556:	681b      	ldr	r3, [r3, #0]
 810a558:	d501      	bpl.n	810a55e <_printf_i+0x1be>
 810a55a:	6019      	str	r1, [r3, #0]
 810a55c:	e002      	b.n	810a564 <_printf_i+0x1c4>
 810a55e:	0668      	lsls	r0, r5, #25
 810a560:	d5fb      	bpl.n	810a55a <_printf_i+0x1ba>
 810a562:	8019      	strh	r1, [r3, #0]
 810a564:	2300      	movs	r3, #0
 810a566:	6123      	str	r3, [r4, #16]
 810a568:	4616      	mov	r6, r2
 810a56a:	e7bc      	b.n	810a4e6 <_printf_i+0x146>
 810a56c:	6833      	ldr	r3, [r6, #0]
 810a56e:	1d1a      	adds	r2, r3, #4
 810a570:	6032      	str	r2, [r6, #0]
 810a572:	681e      	ldr	r6, [r3, #0]
 810a574:	6862      	ldr	r2, [r4, #4]
 810a576:	2100      	movs	r1, #0
 810a578:	4630      	mov	r0, r6
 810a57a:	f7f5 feb1 	bl	81002e0 <memchr>
 810a57e:	b108      	cbz	r0, 810a584 <_printf_i+0x1e4>
 810a580:	1b80      	subs	r0, r0, r6
 810a582:	6060      	str	r0, [r4, #4]
 810a584:	6863      	ldr	r3, [r4, #4]
 810a586:	6123      	str	r3, [r4, #16]
 810a588:	2300      	movs	r3, #0
 810a58a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810a58e:	e7aa      	b.n	810a4e6 <_printf_i+0x146>
 810a590:	6923      	ldr	r3, [r4, #16]
 810a592:	4632      	mov	r2, r6
 810a594:	4649      	mov	r1, r9
 810a596:	4640      	mov	r0, r8
 810a598:	47d0      	blx	sl
 810a59a:	3001      	adds	r0, #1
 810a59c:	d0ad      	beq.n	810a4fa <_printf_i+0x15a>
 810a59e:	6823      	ldr	r3, [r4, #0]
 810a5a0:	079b      	lsls	r3, r3, #30
 810a5a2:	d413      	bmi.n	810a5cc <_printf_i+0x22c>
 810a5a4:	68e0      	ldr	r0, [r4, #12]
 810a5a6:	9b03      	ldr	r3, [sp, #12]
 810a5a8:	4298      	cmp	r0, r3
 810a5aa:	bfb8      	it	lt
 810a5ac:	4618      	movlt	r0, r3
 810a5ae:	e7a6      	b.n	810a4fe <_printf_i+0x15e>
 810a5b0:	2301      	movs	r3, #1
 810a5b2:	4632      	mov	r2, r6
 810a5b4:	4649      	mov	r1, r9
 810a5b6:	4640      	mov	r0, r8
 810a5b8:	47d0      	blx	sl
 810a5ba:	3001      	adds	r0, #1
 810a5bc:	d09d      	beq.n	810a4fa <_printf_i+0x15a>
 810a5be:	3501      	adds	r5, #1
 810a5c0:	68e3      	ldr	r3, [r4, #12]
 810a5c2:	9903      	ldr	r1, [sp, #12]
 810a5c4:	1a5b      	subs	r3, r3, r1
 810a5c6:	42ab      	cmp	r3, r5
 810a5c8:	dcf2      	bgt.n	810a5b0 <_printf_i+0x210>
 810a5ca:	e7eb      	b.n	810a5a4 <_printf_i+0x204>
 810a5cc:	2500      	movs	r5, #0
 810a5ce:	f104 0619 	add.w	r6, r4, #25
 810a5d2:	e7f5      	b.n	810a5c0 <_printf_i+0x220>
 810a5d4:	0810c97d 	.word	0x0810c97d
 810a5d8:	0810c98e 	.word	0x0810c98e

0810a5dc <__sflush_r>:
 810a5dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810a5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a5e4:	0716      	lsls	r6, r2, #28
 810a5e6:	4605      	mov	r5, r0
 810a5e8:	460c      	mov	r4, r1
 810a5ea:	d454      	bmi.n	810a696 <__sflush_r+0xba>
 810a5ec:	684b      	ldr	r3, [r1, #4]
 810a5ee:	2b00      	cmp	r3, #0
 810a5f0:	dc02      	bgt.n	810a5f8 <__sflush_r+0x1c>
 810a5f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810a5f4:	2b00      	cmp	r3, #0
 810a5f6:	dd48      	ble.n	810a68a <__sflush_r+0xae>
 810a5f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810a5fa:	2e00      	cmp	r6, #0
 810a5fc:	d045      	beq.n	810a68a <__sflush_r+0xae>
 810a5fe:	2300      	movs	r3, #0
 810a600:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810a604:	682f      	ldr	r7, [r5, #0]
 810a606:	6a21      	ldr	r1, [r4, #32]
 810a608:	602b      	str	r3, [r5, #0]
 810a60a:	d030      	beq.n	810a66e <__sflush_r+0x92>
 810a60c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810a60e:	89a3      	ldrh	r3, [r4, #12]
 810a610:	0759      	lsls	r1, r3, #29
 810a612:	d505      	bpl.n	810a620 <__sflush_r+0x44>
 810a614:	6863      	ldr	r3, [r4, #4]
 810a616:	1ad2      	subs	r2, r2, r3
 810a618:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810a61a:	b10b      	cbz	r3, 810a620 <__sflush_r+0x44>
 810a61c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810a61e:	1ad2      	subs	r2, r2, r3
 810a620:	2300      	movs	r3, #0
 810a622:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810a624:	6a21      	ldr	r1, [r4, #32]
 810a626:	4628      	mov	r0, r5
 810a628:	47b0      	blx	r6
 810a62a:	1c43      	adds	r3, r0, #1
 810a62c:	89a3      	ldrh	r3, [r4, #12]
 810a62e:	d106      	bne.n	810a63e <__sflush_r+0x62>
 810a630:	6829      	ldr	r1, [r5, #0]
 810a632:	291d      	cmp	r1, #29
 810a634:	d82b      	bhi.n	810a68e <__sflush_r+0xb2>
 810a636:	4a2a      	ldr	r2, [pc, #168]	@ (810a6e0 <__sflush_r+0x104>)
 810a638:	40ca      	lsrs	r2, r1
 810a63a:	07d6      	lsls	r6, r2, #31
 810a63c:	d527      	bpl.n	810a68e <__sflush_r+0xb2>
 810a63e:	2200      	movs	r2, #0
 810a640:	6062      	str	r2, [r4, #4]
 810a642:	04d9      	lsls	r1, r3, #19
 810a644:	6922      	ldr	r2, [r4, #16]
 810a646:	6022      	str	r2, [r4, #0]
 810a648:	d504      	bpl.n	810a654 <__sflush_r+0x78>
 810a64a:	1c42      	adds	r2, r0, #1
 810a64c:	d101      	bne.n	810a652 <__sflush_r+0x76>
 810a64e:	682b      	ldr	r3, [r5, #0]
 810a650:	b903      	cbnz	r3, 810a654 <__sflush_r+0x78>
 810a652:	6560      	str	r0, [r4, #84]	@ 0x54
 810a654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810a656:	602f      	str	r7, [r5, #0]
 810a658:	b1b9      	cbz	r1, 810a68a <__sflush_r+0xae>
 810a65a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810a65e:	4299      	cmp	r1, r3
 810a660:	d002      	beq.n	810a668 <__sflush_r+0x8c>
 810a662:	4628      	mov	r0, r5
 810a664:	f7ff fbf4 	bl	8109e50 <_free_r>
 810a668:	2300      	movs	r3, #0
 810a66a:	6363      	str	r3, [r4, #52]	@ 0x34
 810a66c:	e00d      	b.n	810a68a <__sflush_r+0xae>
 810a66e:	2301      	movs	r3, #1
 810a670:	4628      	mov	r0, r5
 810a672:	47b0      	blx	r6
 810a674:	4602      	mov	r2, r0
 810a676:	1c50      	adds	r0, r2, #1
 810a678:	d1c9      	bne.n	810a60e <__sflush_r+0x32>
 810a67a:	682b      	ldr	r3, [r5, #0]
 810a67c:	2b00      	cmp	r3, #0
 810a67e:	d0c6      	beq.n	810a60e <__sflush_r+0x32>
 810a680:	2b1d      	cmp	r3, #29
 810a682:	d001      	beq.n	810a688 <__sflush_r+0xac>
 810a684:	2b16      	cmp	r3, #22
 810a686:	d11e      	bne.n	810a6c6 <__sflush_r+0xea>
 810a688:	602f      	str	r7, [r5, #0]
 810a68a:	2000      	movs	r0, #0
 810a68c:	e022      	b.n	810a6d4 <__sflush_r+0xf8>
 810a68e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810a692:	b21b      	sxth	r3, r3
 810a694:	e01b      	b.n	810a6ce <__sflush_r+0xf2>
 810a696:	690f      	ldr	r7, [r1, #16]
 810a698:	2f00      	cmp	r7, #0
 810a69a:	d0f6      	beq.n	810a68a <__sflush_r+0xae>
 810a69c:	0793      	lsls	r3, r2, #30
 810a69e:	680e      	ldr	r6, [r1, #0]
 810a6a0:	bf08      	it	eq
 810a6a2:	694b      	ldreq	r3, [r1, #20]
 810a6a4:	600f      	str	r7, [r1, #0]
 810a6a6:	bf18      	it	ne
 810a6a8:	2300      	movne	r3, #0
 810a6aa:	eba6 0807 	sub.w	r8, r6, r7
 810a6ae:	608b      	str	r3, [r1, #8]
 810a6b0:	f1b8 0f00 	cmp.w	r8, #0
 810a6b4:	dde9      	ble.n	810a68a <__sflush_r+0xae>
 810a6b6:	6a21      	ldr	r1, [r4, #32]
 810a6b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810a6ba:	4643      	mov	r3, r8
 810a6bc:	463a      	mov	r2, r7
 810a6be:	4628      	mov	r0, r5
 810a6c0:	47b0      	blx	r6
 810a6c2:	2800      	cmp	r0, #0
 810a6c4:	dc08      	bgt.n	810a6d8 <__sflush_r+0xfc>
 810a6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a6ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810a6ce:	81a3      	strh	r3, [r4, #12]
 810a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 810a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a6d8:	4407      	add	r7, r0
 810a6da:	eba8 0800 	sub.w	r8, r8, r0
 810a6de:	e7e7      	b.n	810a6b0 <__sflush_r+0xd4>
 810a6e0:	20400001 	.word	0x20400001

0810a6e4 <_fflush_r>:
 810a6e4:	b538      	push	{r3, r4, r5, lr}
 810a6e6:	690b      	ldr	r3, [r1, #16]
 810a6e8:	4605      	mov	r5, r0
 810a6ea:	460c      	mov	r4, r1
 810a6ec:	b913      	cbnz	r3, 810a6f4 <_fflush_r+0x10>
 810a6ee:	2500      	movs	r5, #0
 810a6f0:	4628      	mov	r0, r5
 810a6f2:	bd38      	pop	{r3, r4, r5, pc}
 810a6f4:	b118      	cbz	r0, 810a6fe <_fflush_r+0x1a>
 810a6f6:	6a03      	ldr	r3, [r0, #32]
 810a6f8:	b90b      	cbnz	r3, 810a6fe <_fflush_r+0x1a>
 810a6fa:	f7ff f9a1 	bl	8109a40 <__sinit>
 810a6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a702:	2b00      	cmp	r3, #0
 810a704:	d0f3      	beq.n	810a6ee <_fflush_r+0xa>
 810a706:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810a708:	07d0      	lsls	r0, r2, #31
 810a70a:	d404      	bmi.n	810a716 <_fflush_r+0x32>
 810a70c:	0599      	lsls	r1, r3, #22
 810a70e:	d402      	bmi.n	810a716 <_fflush_r+0x32>
 810a710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a712:	f7ff fb8c 	bl	8109e2e <__retarget_lock_acquire_recursive>
 810a716:	4628      	mov	r0, r5
 810a718:	4621      	mov	r1, r4
 810a71a:	f7ff ff5f 	bl	810a5dc <__sflush_r>
 810a71e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a720:	07da      	lsls	r2, r3, #31
 810a722:	4605      	mov	r5, r0
 810a724:	d4e4      	bmi.n	810a6f0 <_fflush_r+0xc>
 810a726:	89a3      	ldrh	r3, [r4, #12]
 810a728:	059b      	lsls	r3, r3, #22
 810a72a:	d4e1      	bmi.n	810a6f0 <_fflush_r+0xc>
 810a72c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a72e:	f7ff fb7f 	bl	8109e30 <__retarget_lock_release_recursive>
 810a732:	e7dd      	b.n	810a6f0 <_fflush_r+0xc>

0810a734 <__swhatbuf_r>:
 810a734:	b570      	push	{r4, r5, r6, lr}
 810a736:	460c      	mov	r4, r1
 810a738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a73c:	2900      	cmp	r1, #0
 810a73e:	b096      	sub	sp, #88	@ 0x58
 810a740:	4615      	mov	r5, r2
 810a742:	461e      	mov	r6, r3
 810a744:	da0d      	bge.n	810a762 <__swhatbuf_r+0x2e>
 810a746:	89a3      	ldrh	r3, [r4, #12]
 810a748:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810a74c:	f04f 0100 	mov.w	r1, #0
 810a750:	bf14      	ite	ne
 810a752:	2340      	movne	r3, #64	@ 0x40
 810a754:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810a758:	2000      	movs	r0, #0
 810a75a:	6031      	str	r1, [r6, #0]
 810a75c:	602b      	str	r3, [r5, #0]
 810a75e:	b016      	add	sp, #88	@ 0x58
 810a760:	bd70      	pop	{r4, r5, r6, pc}
 810a762:	466a      	mov	r2, sp
 810a764:	f000 f848 	bl	810a7f8 <_fstat_r>
 810a768:	2800      	cmp	r0, #0
 810a76a:	dbec      	blt.n	810a746 <__swhatbuf_r+0x12>
 810a76c:	9901      	ldr	r1, [sp, #4]
 810a76e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810a772:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810a776:	4259      	negs	r1, r3
 810a778:	4159      	adcs	r1, r3
 810a77a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810a77e:	e7eb      	b.n	810a758 <__swhatbuf_r+0x24>

0810a780 <__smakebuf_r>:
 810a780:	898b      	ldrh	r3, [r1, #12]
 810a782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810a784:	079d      	lsls	r5, r3, #30
 810a786:	4606      	mov	r6, r0
 810a788:	460c      	mov	r4, r1
 810a78a:	d507      	bpl.n	810a79c <__smakebuf_r+0x1c>
 810a78c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810a790:	6023      	str	r3, [r4, #0]
 810a792:	6123      	str	r3, [r4, #16]
 810a794:	2301      	movs	r3, #1
 810a796:	6163      	str	r3, [r4, #20]
 810a798:	b003      	add	sp, #12
 810a79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810a79c:	ab01      	add	r3, sp, #4
 810a79e:	466a      	mov	r2, sp
 810a7a0:	f7ff ffc8 	bl	810a734 <__swhatbuf_r>
 810a7a4:	9f00      	ldr	r7, [sp, #0]
 810a7a6:	4605      	mov	r5, r0
 810a7a8:	4639      	mov	r1, r7
 810a7aa:	4630      	mov	r0, r6
 810a7ac:	f7ff fbbc 	bl	8109f28 <_malloc_r>
 810a7b0:	b948      	cbnz	r0, 810a7c6 <__smakebuf_r+0x46>
 810a7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a7b6:	059a      	lsls	r2, r3, #22
 810a7b8:	d4ee      	bmi.n	810a798 <__smakebuf_r+0x18>
 810a7ba:	f023 0303 	bic.w	r3, r3, #3
 810a7be:	f043 0302 	orr.w	r3, r3, #2
 810a7c2:	81a3      	strh	r3, [r4, #12]
 810a7c4:	e7e2      	b.n	810a78c <__smakebuf_r+0xc>
 810a7c6:	89a3      	ldrh	r3, [r4, #12]
 810a7c8:	6020      	str	r0, [r4, #0]
 810a7ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810a7ce:	81a3      	strh	r3, [r4, #12]
 810a7d0:	9b01      	ldr	r3, [sp, #4]
 810a7d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810a7d6:	b15b      	cbz	r3, 810a7f0 <__smakebuf_r+0x70>
 810a7d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a7dc:	4630      	mov	r0, r6
 810a7de:	f000 f81d 	bl	810a81c <_isatty_r>
 810a7e2:	b128      	cbz	r0, 810a7f0 <__smakebuf_r+0x70>
 810a7e4:	89a3      	ldrh	r3, [r4, #12]
 810a7e6:	f023 0303 	bic.w	r3, r3, #3
 810a7ea:	f043 0301 	orr.w	r3, r3, #1
 810a7ee:	81a3      	strh	r3, [r4, #12]
 810a7f0:	89a3      	ldrh	r3, [r4, #12]
 810a7f2:	431d      	orrs	r5, r3
 810a7f4:	81a5      	strh	r5, [r4, #12]
 810a7f6:	e7cf      	b.n	810a798 <__smakebuf_r+0x18>

0810a7f8 <_fstat_r>:
 810a7f8:	b538      	push	{r3, r4, r5, lr}
 810a7fa:	4d07      	ldr	r5, [pc, #28]	@ (810a818 <_fstat_r+0x20>)
 810a7fc:	2300      	movs	r3, #0
 810a7fe:	4604      	mov	r4, r0
 810a800:	4608      	mov	r0, r1
 810a802:	4611      	mov	r1, r2
 810a804:	602b      	str	r3, [r5, #0]
 810a806:	f7f7 fefc 	bl	8102602 <_fstat>
 810a80a:	1c43      	adds	r3, r0, #1
 810a80c:	d102      	bne.n	810a814 <_fstat_r+0x1c>
 810a80e:	682b      	ldr	r3, [r5, #0]
 810a810:	b103      	cbz	r3, 810a814 <_fstat_r+0x1c>
 810a812:	6023      	str	r3, [r4, #0]
 810a814:	bd38      	pop	{r3, r4, r5, pc}
 810a816:	bf00      	nop
 810a818:	10000f68 	.word	0x10000f68

0810a81c <_isatty_r>:
 810a81c:	b538      	push	{r3, r4, r5, lr}
 810a81e:	4d06      	ldr	r5, [pc, #24]	@ (810a838 <_isatty_r+0x1c>)
 810a820:	2300      	movs	r3, #0
 810a822:	4604      	mov	r4, r0
 810a824:	4608      	mov	r0, r1
 810a826:	602b      	str	r3, [r5, #0]
 810a828:	f7f7 fefb 	bl	8102622 <_isatty>
 810a82c:	1c43      	adds	r3, r0, #1
 810a82e:	d102      	bne.n	810a836 <_isatty_r+0x1a>
 810a830:	682b      	ldr	r3, [r5, #0]
 810a832:	b103      	cbz	r3, 810a836 <_isatty_r+0x1a>
 810a834:	6023      	str	r3, [r4, #0]
 810a836:	bd38      	pop	{r3, r4, r5, pc}
 810a838:	10000f68 	.word	0x10000f68

0810a83c <_sbrk_r>:
 810a83c:	b538      	push	{r3, r4, r5, lr}
 810a83e:	4d06      	ldr	r5, [pc, #24]	@ (810a858 <_sbrk_r+0x1c>)
 810a840:	2300      	movs	r3, #0
 810a842:	4604      	mov	r4, r0
 810a844:	4608      	mov	r0, r1
 810a846:	602b      	str	r3, [r5, #0]
 810a848:	f7f7 ff04 	bl	8102654 <_sbrk>
 810a84c:	1c43      	adds	r3, r0, #1
 810a84e:	d102      	bne.n	810a856 <_sbrk_r+0x1a>
 810a850:	682b      	ldr	r3, [r5, #0]
 810a852:	b103      	cbz	r3, 810a856 <_sbrk_r+0x1a>
 810a854:	6023      	str	r3, [r4, #0]
 810a856:	bd38      	pop	{r3, r4, r5, pc}
 810a858:	10000f68 	.word	0x10000f68

0810a85c <_init>:
 810a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a85e:	bf00      	nop
 810a860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a862:	bc08      	pop	{r3}
 810a864:	469e      	mov	lr, r3
 810a866:	4770      	bx	lr

0810a868 <_fini>:
 810a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a86a:	bf00      	nop
 810a86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a86e:	bc08      	pop	{r3}
 810a870:	469e      	mov	lr, r3
 810a872:	4770      	bx	lr
