
Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008644  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  081088e4  081088e4  000098e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08108978  08108978  00009978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08108980  08108980  00009980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08108984  08108984  00009984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  10000000  08108988  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc4  1000006c  081089f4  0000a06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000e30  081089f4  0000ae30  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028df0  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fc5  00000000  00000000  00032e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021e8  00000000  00000000  00037e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a53  00000000  00000000  0003a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044b4d  00000000  00000000  0003ba93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002bdae  00000000  00000000  000805e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001c0b12  00000000  00000000  000ac38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026cea0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009890  00000000  00000000  0026cee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  00276774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000006c 	.word	0x1000006c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081088cc 	.word	0x081088cc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000070 	.word	0x10000070
 81002dc:	081088cc 	.word	0x081088cc

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__io_putchar>:

static void SyncUARTTaskHandler(void);
static int8_t LoggerWriteToUART(RingBuff volatile *pBuff);

PUTCHAR_PROTOTYPE
{
 8100380:	b580      	push	{r7, lr}
 8100382:	b084      	sub	sp, #16
 8100384:	af00      	add	r7, sp, #0
 8100386:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8100388:	f002 f84e 	bl	8102428 <HAL_GetCurrentCPUID>
 810038c:	4603      	mov	r3, r0
 810038e:	2b03      	cmp	r3, #3
 8100390:	d110      	bne.n	81003b4 <__io_putchar+0x34>
  {
    RingBuffWrite(pCM7RingBuf, (void*)&ch, 1);
 8100392:	4b15      	ldr	r3, [pc, #84]	@ (81003e8 <__io_putchar+0x68>)
 8100394:	681b      	ldr	r3, [r3, #0]
 8100396:	1d39      	adds	r1, r7, #4
 8100398:	2201      	movs	r2, #1
 810039a:	4618      	mov	r0, r3
 810039c:	f000 f8fa 	bl	8100594 <RingBuffWrite>
    if((char)ch == '\n')
 81003a0:	687b      	ldr	r3, [r7, #4]
 81003a2:	b2db      	uxtb	r3, r3
 81003a4:	2b0a      	cmp	r3, #10
 81003a6:	d119      	bne.n	81003dc <__io_putchar+0x5c>
    {
      LoggerWriteToUART(pCM7RingBuf);
 81003a8:	4b0f      	ldr	r3, [pc, #60]	@ (81003e8 <__io_putchar+0x68>)
 81003aa:	681b      	ldr	r3, [r3, #0]
 81003ac:	4618      	mov	r0, r3
 81003ae:	f000 f859 	bl	8100464 <LoggerWriteToUART>
 81003b2:	e013      	b.n	81003dc <__io_putchar+0x5c>
    }
  }
  else 
  {
    RingBuffWrite(pCM4RingBuf, (void*)&ch, 1);
 81003b4:	4b0d      	ldr	r3, [pc, #52]	@ (81003ec <__io_putchar+0x6c>)
 81003b6:	681b      	ldr	r3, [r3, #0]
 81003b8:	1d39      	adds	r1, r7, #4
 81003ba:	2201      	movs	r2, #1
 81003bc:	4618      	mov	r0, r3
 81003be:	f000 f8e9 	bl	8100594 <RingBuffWrite>
    if((char)ch == '\n')
 81003c2:	687b      	ldr	r3, [r7, #4]
 81003c4:	b2db      	uxtb	r3, r3
 81003c6:	2b0a      	cmp	r3, #10
 81003c8:	d108      	bne.n	81003dc <__io_putchar+0x5c>
    {
      /*
      * CM4 sends signal to CM7 to send CM4's ring buffer to the UART interface
      */
      uint32_t taskID = SYNC_TASKID_UART_OUT;
 81003ca:	2300      	movs	r3, #0
 81003cc:	60fb      	str	r3, [r7, #12]
      SyncMailBoxWriteNotify(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 81003ce:	f107 030c 	add.w	r3, r7, #12
 81003d2:	2204      	movs	r2, #4
 81003d4:	4619      	mov	r1, r3
 81003d6:	2000      	movs	r0, #0
 81003d8:	f000 fadc 	bl	8100994 <SyncMailBoxWriteNotify>
    }
  }
  return ch;
 81003dc:	687b      	ldr	r3, [r7, #4]
}
 81003de:	4618      	mov	r0, r3
 81003e0:	3710      	adds	r7, #16
 81003e2:	46bd      	mov	sp, r7
 81003e4:	bd80      	pop	{r7, pc}
 81003e6:	bf00      	nop
 81003e8:	1000008c 	.word	0x1000008c
 81003ec:	10000088 	.word	0x10000088

081003f0 <LoggerInit>:

int8_t LoggerInit(UART_HandleTypeDef *pUART_)
{
 81003f0:	b580      	push	{r7, lr}
 81003f2:	b082      	sub	sp, #8
 81003f4:	af00      	add	r7, sp, #0
 81003f6:	6078      	str	r0, [r7, #4]
  if(HAL_GetCurrentCPUID() != CM7_CPUID || pUART_ == NULL) 
 81003f8:	f002 f816 	bl	8102428 <HAL_GetCurrentCPUID>
 81003fc:	4603      	mov	r3, r0
 81003fe:	2b03      	cmp	r3, #3
 8100400:	d102      	bne.n	8100408 <LoggerInit+0x18>
 8100402:	687b      	ldr	r3, [r7, #4]
 8100404:	2b00      	cmp	r3, #0
 8100406:	d105      	bne.n	8100414 <LoggerInit+0x24>
  {
    pUART = NULL;
 8100408:	4b10      	ldr	r3, [pc, #64]	@ (810044c <LoggerInit+0x5c>)
 810040a:	2200      	movs	r2, #0
 810040c:	601a      	str	r2, [r3, #0]
    return -1;
 810040e:	f04f 33ff 	mov.w	r3, #4294967295
 8100412:	e017      	b.n	8100444 <LoggerInit+0x54>
  }

  pCM4RingBuf = RingBuffCreate((void*)MEM_SHARED_CM4_UART_RINGBUFF_START, MEM_SHARED_CM4_UART_RINGBUFF_TOTAL_LEN);
 8100414:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8100418:	480d      	ldr	r0, [pc, #52]	@ (8100450 <LoggerInit+0x60>)
 810041a:	f000 f88b 	bl	8100534 <RingBuffCreate>
 810041e:	4603      	mov	r3, r0
 8100420:	4a0c      	ldr	r2, [pc, #48]	@ (8100454 <LoggerInit+0x64>)
 8100422:	6013      	str	r3, [r2, #0]
  pCM7RingBuf = RingBuffCreate((void*)MEM_SHARED_CM7_UART_RINGBUFF_START, MEM_SHARED_CM7_UART_RINGBUFF_TOTAL_LEN);
 8100424:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8100428:	480b      	ldr	r0, [pc, #44]	@ (8100458 <LoggerInit+0x68>)
 810042a:	f000 f883 	bl	8100534 <RingBuffCreate>
 810042e:	4603      	mov	r3, r0
 8100430:	4a0a      	ldr	r2, [pc, #40]	@ (810045c <LoggerInit+0x6c>)
 8100432:	6013      	str	r3, [r2, #0]
  pUART = pUART_;
 8100434:	4a05      	ldr	r2, [pc, #20]	@ (810044c <LoggerInit+0x5c>)
 8100436:	687b      	ldr	r3, [r7, #4]
 8100438:	6013      	str	r3, [r2, #0]
  SyncRegisterHandler(SyncUARTTaskHandler, SYNC_TASKID_UART_OUT);
 810043a:	2100      	movs	r1, #0
 810043c:	4808      	ldr	r0, [pc, #32]	@ (8100460 <LoggerInit+0x70>)
 810043e:	f000 fb01 	bl	8100a44 <SyncRegisterHandler>

  return 0;
 8100442:	2300      	movs	r3, #0
}
 8100444:	4618      	mov	r0, r3
 8100446:	3708      	adds	r7, #8
 8100448:	46bd      	mov	sp, r7
 810044a:	bd80      	pop	{r7, pc}
 810044c:	10000090 	.word	0x10000090
 8100450:	38000008 	.word	0x38000008
 8100454:	10000088 	.word	0x10000088
 8100458:	38000128 	.word	0x38000128
 810045c:	1000008c 	.word	0x1000008c
 8100460:	081004b5 	.word	0x081004b5

08100464 <LoggerWriteToUART>:

static int8_t LoggerWriteToUART(RingBuff volatile *pRingBuf)
{
 8100464:	b580      	push	{r7, lr}
 8100466:	b084      	sub	sp, #16
 8100468:	af00      	add	r7, sp, #0
 810046a:	6078      	str	r0, [r7, #4]
  uint32_t len = 0;
 810046c:	2300      	movs	r3, #0
 810046e:	60fb      	str	r3, [r7, #12]
  void *pBufToTransmit = NULL;
 8100470:	2300      	movs	r3, #0
 8100472:	60bb      	str	r3, [r7, #8]

  send:
  len = RingBuffGetLinearBlockReadLength(pRingBuf);
 8100474:	6878      	ldr	r0, [r7, #4]
 8100476:	f000 f9c9 	bl	810080c <RingBuffGetLinearBlockReadLength>
 810047a:	60f8      	str	r0, [r7, #12]
  if(len > 0)
 810047c:	68fb      	ldr	r3, [r7, #12]
 810047e:	2b00      	cmp	r3, #0
 8100480:	d011      	beq.n	81004a6 <LoggerWriteToUART+0x42>
  {
    pBufToTransmit = RingBuffGetLinearBlockReadAddress(pRingBuf);
 8100482:	6878      	ldr	r0, [r7, #4]
 8100484:	f000 f998 	bl	81007b8 <RingBuffGetLinearBlockReadAddress>
 8100488:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(pUART, pBufToTransmit, len, 1000);
 810048a:	4b09      	ldr	r3, [pc, #36]	@ (81004b0 <LoggerWriteToUART+0x4c>)
 810048c:	6818      	ldr	r0, [r3, #0]
 810048e:	68fb      	ldr	r3, [r7, #12]
 8100490:	b29a      	uxth	r2, r3
 8100492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100496:	68b9      	ldr	r1, [r7, #8]
 8100498:	f006 fbf4 	bl	8106c84 <HAL_UART_Transmit>
    RingBuffSkip(pRingBuf, len);
 810049c:	68f9      	ldr	r1, [r7, #12]
 810049e:	6878      	ldr	r0, [r7, #4]
 81004a0:	f000 f9f6 	bl	8100890 <RingBuffSkip>
    /* Check for anything in the overflow buffer */
    goto send;
 81004a4:	e7e6      	b.n	8100474 <LoggerWriteToUART+0x10>
  }
  return 0;
 81004a6:	2300      	movs	r3, #0
}
 81004a8:	4618      	mov	r0, r3
 81004aa:	3710      	adds	r7, #16
 81004ac:	46bd      	mov	sp, r7
 81004ae:	bd80      	pop	{r7, pc}
 81004b0:	10000090 	.word	0x10000090

081004b4 <SyncUARTTaskHandler>:

static void SyncUARTTaskHandler(void)
{
 81004b4:	b580      	push	{r7, lr}
 81004b6:	af00      	add	r7, sp, #0
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 81004b8:	f001 ffb6 	bl	8102428 <HAL_GetCurrentCPUID>
 81004bc:	4603      	mov	r3, r0
 81004be:	2b03      	cmp	r3, #3
 81004c0:	d104      	bne.n	81004cc <SyncUARTTaskHandler+0x18>
  {
    LoggerWriteToUART(pCM4RingBuf);
 81004c2:	4b03      	ldr	r3, [pc, #12]	@ (81004d0 <SyncUARTTaskHandler+0x1c>)
 81004c4:	681b      	ldr	r3, [r3, #0]
 81004c6:	4618      	mov	r0, r3
 81004c8:	f7ff ffcc 	bl	8100464 <LoggerWriteToUART>
  }
 81004cc:	bf00      	nop
 81004ce:	bd80      	pop	{r7, pc}
 81004d0:	10000088 	.word	0x10000088

081004d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81004d4:	b480      	push	{r7}
 81004d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81004d8:	4b09      	ldr	r3, [pc, #36]	@ (8100500 <SystemInit+0x2c>)
 81004da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81004de:	4a08      	ldr	r2, [pc, #32]	@ (8100500 <SystemInit+0x2c>)
 81004e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81004e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81004e8:	4b05      	ldr	r3, [pc, #20]	@ (8100500 <SystemInit+0x2c>)
 81004ea:	691b      	ldr	r3, [r3, #16]
 81004ec:	4a04      	ldr	r2, [pc, #16]	@ (8100500 <SystemInit+0x2c>)
 81004ee:	f043 0310 	orr.w	r3, r3, #16
 81004f2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81004f4:	bf00      	nop
 81004f6:	46bd      	mov	sp, r7
 81004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004fc:	4770      	bx	lr
 81004fe:	bf00      	nop
 8100500:	e000ed00 	.word	0xe000ed00

08100504 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100504:	b480      	push	{r7}
 8100506:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100508:	4b09      	ldr	r3, [pc, #36]	@ (8100530 <ExitRun0Mode+0x2c>)
 810050a:	68db      	ldr	r3, [r3, #12]
 810050c:	4a08      	ldr	r2, [pc, #32]	@ (8100530 <ExitRun0Mode+0x2c>)
 810050e:	f023 0302 	bic.w	r3, r3, #2
 8100512:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100514:	bf00      	nop
 8100516:	4b06      	ldr	r3, [pc, #24]	@ (8100530 <ExitRun0Mode+0x2c>)
 8100518:	685b      	ldr	r3, [r3, #4]
 810051a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810051e:	2b00      	cmp	r3, #0
 8100520:	d0f9      	beq.n	8100516 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100522:	bf00      	nop
 8100524:	bf00      	nop
 8100526:	46bd      	mov	sp, r7
 8100528:	f85d 7b04 	ldr.w	r7, [sp], #4
 810052c:	4770      	bx	lr
 810052e:	bf00      	nop
 8100530:	58024800 	.word	0x58024800

08100534 <RingBuffCreate>:
 * \param[in]       buff: Buffer handle
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
RINGBUFF_VOLATILE RingBuff* RingBuffCreate(void* pBuff, size_t size) {
 8100534:	b580      	push	{r7, lr}
 8100536:	b084      	sub	sp, #16
 8100538:	af00      	add	r7, sp, #0
 810053a:	6078      	str	r0, [r7, #4]
 810053c:	6039      	str	r1, [r7, #0]
    if (pBuff == NULL || size == 0 || size < (sizeof(RingBuff) + 1)) {
 810053e:	687b      	ldr	r3, [r7, #4]
 8100540:	2b00      	cmp	r3, #0
 8100542:	d005      	beq.n	8100550 <RingBuffCreate+0x1c>
 8100544:	683b      	ldr	r3, [r7, #0]
 8100546:	2b00      	cmp	r3, #0
 8100548:	d002      	beq.n	8100550 <RingBuffCreate+0x1c>
 810054a:	683b      	ldr	r3, [r7, #0]
 810054c:	2b20      	cmp	r3, #32
 810054e:	d801      	bhi.n	8100554 <RingBuffCreate+0x20>
        return NULL;
 8100550:	2300      	movs	r3, #0
 8100552:	e017      	b.n	8100584 <RingBuffCreate+0x50>
    }

    RINGBUFF_VOLATILE RingBuff *pRingBuf = (RingBuff*)pBuff;
 8100554:	687b      	ldr	r3, [r7, #4]
 8100556:	60fb      	str	r3, [r7, #12]
    BUF_MEMSET((void *)pRingBuf, 0x00, sizeof(RingBuff));
 8100558:	2220      	movs	r2, #32
 810055a:	2100      	movs	r1, #0
 810055c:	68f8      	ldr	r0, [r7, #12]
 810055e:	f007 fc25 	bl	8107dac <memset>

    pRingBuf->size = size - sizeof(RingBuff);
 8100562:	683b      	ldr	r3, [r7, #0]
 8100564:	f1a3 0220 	sub.w	r2, r3, #32
 8100568:	68fb      	ldr	r3, [r7, #12]
 810056a:	609a      	str	r2, [r3, #8]
    pRingBuf->buff = ((uint8_t*) ((uintptr_t)pBuff) + sizeof(RingBuff));
 810056c:	687b      	ldr	r3, [r7, #4]
 810056e:	f103 0220 	add.w	r2, r3, #32
 8100572:	68fb      	ldr	r3, [r7, #12]
 8100574:	605a      	str	r2, [r3, #4]

    pRingBuf->magic1 = 0xDEADBEEF;
 8100576:	68fb      	ldr	r3, [r7, #12]
 8100578:	4a04      	ldr	r2, [pc, #16]	@ (810058c <RingBuffCreate+0x58>)
 810057a:	601a      	str	r2, [r3, #0]
    pRingBuf->magic2 = ~0xDEADBEEF;
 810057c:	68fb      	ldr	r3, [r7, #12]
 810057e:	4a04      	ldr	r2, [pc, #16]	@ (8100590 <RingBuffCreate+0x5c>)
 8100580:	619a      	str	r2, [r3, #24]

    return pRingBuf;
 8100582:	68fb      	ldr	r3, [r7, #12]
}
 8100584:	4618      	mov	r0, r3
 8100586:	3710      	adds	r7, #16
 8100588:	46bd      	mov	sp, r7
 810058a:	bd80      	pop	{r7, pc}
 810058c:	deadbeef 	.word	0xdeadbeef
 8100590:	21524110 	.word	0x21524110

08100594 <RingBuffWrite>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
RingBuffWrite(RINGBUFF_VOLATILE RingBuff* buff, const void* data, size_t btw) {
 8100594:	b580      	push	{r7, lr}
 8100596:	b088      	sub	sp, #32
 8100598:	af00      	add	r7, sp, #0
 810059a:	60f8      	str	r0, [r7, #12]
 810059c:	60b9      	str	r1, [r7, #8]
 810059e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 81005a0:	68bb      	ldr	r3, [r7, #8]
 81005a2:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 81005a4:	68fb      	ldr	r3, [r7, #12]
 81005a6:	2b00      	cmp	r3, #0
 81005a8:	d017      	beq.n	81005da <RingBuffWrite+0x46>
 81005aa:	68fb      	ldr	r3, [r7, #12]
 81005ac:	681b      	ldr	r3, [r3, #0]
 81005ae:	4a3b      	ldr	r2, [pc, #236]	@ (810069c <RingBuffWrite+0x108>)
 81005b0:	4293      	cmp	r3, r2
 81005b2:	d112      	bne.n	81005da <RingBuffWrite+0x46>
 81005b4:	68fb      	ldr	r3, [r7, #12]
 81005b6:	699b      	ldr	r3, [r3, #24]
 81005b8:	4a39      	ldr	r2, [pc, #228]	@ (81006a0 <RingBuffWrite+0x10c>)
 81005ba:	4293      	cmp	r3, r2
 81005bc:	d10d      	bne.n	81005da <RingBuffWrite+0x46>
 81005be:	68fb      	ldr	r3, [r7, #12]
 81005c0:	685b      	ldr	r3, [r3, #4]
 81005c2:	2b00      	cmp	r3, #0
 81005c4:	d009      	beq.n	81005da <RingBuffWrite+0x46>
 81005c6:	68fb      	ldr	r3, [r7, #12]
 81005c8:	689b      	ldr	r3, [r3, #8]
 81005ca:	2b00      	cmp	r3, #0
 81005cc:	d005      	beq.n	81005da <RingBuffWrite+0x46>
 81005ce:	68bb      	ldr	r3, [r7, #8]
 81005d0:	2b00      	cmp	r3, #0
 81005d2:	d002      	beq.n	81005da <RingBuffWrite+0x46>
 81005d4:	687b      	ldr	r3, [r7, #4]
 81005d6:	2b00      	cmp	r3, #0
 81005d8:	d101      	bne.n	81005de <RingBuffWrite+0x4a>
        return 0;
 81005da:	2300      	movs	r3, #0
 81005dc:	e059      	b.n	8100692 <RingBuffWrite+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = RingBuffGetFree(buff);
 81005de:	68f8      	ldr	r0, [r7, #12]
 81005e0:	f000 f860 	bl	81006a4 <RingBuffGetFree>
 81005e4:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 81005e6:	687a      	ldr	r2, [r7, #4]
 81005e8:	69bb      	ldr	r3, [r7, #24]
 81005ea:	4293      	cmp	r3, r2
 81005ec:	bf28      	it	cs
 81005ee:	4613      	movcs	r3, r2
 81005f0:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 81005f2:	687b      	ldr	r3, [r7, #4]
 81005f4:	2b00      	cmp	r3, #0
 81005f6:	d101      	bne.n	81005fc <RingBuffWrite+0x68>
        return 0;
 81005f8:	2300      	movs	r3, #0
 81005fa:	e04a      	b.n	8100692 <RingBuffWrite+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 81005fc:	68fb      	ldr	r3, [r7, #12]
 81005fe:	689a      	ldr	r2, [r3, #8]
 8100600:	68fb      	ldr	r3, [r7, #12]
 8100602:	691b      	ldr	r3, [r3, #16]
 8100604:	1ad3      	subs	r3, r2, r3
 8100606:	687a      	ldr	r2, [r7, #4]
 8100608:	429a      	cmp	r2, r3
 810060a:	d905      	bls.n	8100618 <RingBuffWrite+0x84>
 810060c:	68fb      	ldr	r3, [r7, #12]
 810060e:	689a      	ldr	r2, [r3, #8]
 8100610:	68fb      	ldr	r3, [r7, #12]
 8100612:	691b      	ldr	r3, [r3, #16]
 8100614:	1ad3      	subs	r3, r2, r3
 8100616:	e000      	b.n	810061a <RingBuffWrite+0x86>
 8100618:	687b      	ldr	r3, [r7, #4]
 810061a:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 810061c:	68fb      	ldr	r3, [r7, #12]
 810061e:	685a      	ldr	r2, [r3, #4]
 8100620:	68fb      	ldr	r3, [r7, #12]
 8100622:	691b      	ldr	r3, [r3, #16]
 8100624:	4413      	add	r3, r2
 8100626:	697a      	ldr	r2, [r7, #20]
 8100628:	69f9      	ldr	r1, [r7, #28]
 810062a:	4618      	mov	r0, r3
 810062c:	f007 fc39 	bl	8107ea2 <memcpy>
    buff->w += tocopy;
 8100630:	68fb      	ldr	r3, [r7, #12]
 8100632:	691a      	ldr	r2, [r3, #16]
 8100634:	697b      	ldr	r3, [r7, #20]
 8100636:	441a      	add	r2, r3
 8100638:	68fb      	ldr	r3, [r7, #12]
 810063a:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 810063c:	687a      	ldr	r2, [r7, #4]
 810063e:	697b      	ldr	r3, [r7, #20]
 8100640:	1ad3      	subs	r3, r2, r3
 8100642:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8100644:	687b      	ldr	r3, [r7, #4]
 8100646:	2b00      	cmp	r3, #0
 8100648:	d00b      	beq.n	8100662 <RingBuffWrite+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 810064a:	68fb      	ldr	r3, [r7, #12]
 810064c:	6858      	ldr	r0, [r3, #4]
 810064e:	69fa      	ldr	r2, [r7, #28]
 8100650:	697b      	ldr	r3, [r7, #20]
 8100652:	4413      	add	r3, r2
 8100654:	687a      	ldr	r2, [r7, #4]
 8100656:	4619      	mov	r1, r3
 8100658:	f007 fc23 	bl	8107ea2 <memcpy>
        buff->w = btw;
 810065c:	68fb      	ldr	r3, [r7, #12]
 810065e:	687a      	ldr	r2, [r7, #4]
 8100660:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8100662:	68fb      	ldr	r3, [r7, #12]
 8100664:	691a      	ldr	r2, [r3, #16]
 8100666:	68fb      	ldr	r3, [r7, #12]
 8100668:	689b      	ldr	r3, [r3, #8]
 810066a:	429a      	cmp	r2, r3
 810066c:	d302      	bcc.n	8100674 <RingBuffWrite+0xe0>
        buff->w = 0;
 810066e:	68fb      	ldr	r3, [r7, #12]
 8100670:	2200      	movs	r2, #0
 8100672:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8100674:	68fb      	ldr	r3, [r7, #12]
 8100676:	695b      	ldr	r3, [r3, #20]
 8100678:	2b00      	cmp	r3, #0
 810067a:	d007      	beq.n	810068c <RingBuffWrite+0xf8>
 810067c:	68fb      	ldr	r3, [r7, #12]
 810067e:	695b      	ldr	r3, [r3, #20]
 8100680:	6979      	ldr	r1, [r7, #20]
 8100682:	687a      	ldr	r2, [r7, #4]
 8100684:	440a      	add	r2, r1
 8100686:	2101      	movs	r1, #1
 8100688:	68f8      	ldr	r0, [r7, #12]
 810068a:	4798      	blx	r3
    return tocopy + btw;
 810068c:	697a      	ldr	r2, [r7, #20]
 810068e:	687b      	ldr	r3, [r7, #4]
 8100690:	4413      	add	r3, r2
}
 8100692:	4618      	mov	r0, r3
 8100694:	3720      	adds	r7, #32
 8100696:	46bd      	mov	sp, r7
 8100698:	bd80      	pop	{r7, pc}
 810069a:	bf00      	nop
 810069c:	deadbeef 	.word	0xdeadbeef
 81006a0:	21524110 	.word	0x21524110

081006a4 <RingBuffGetFree>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
RingBuffGetFree(RINGBUFF_VOLATILE RingBuff* buff) {
 81006a4:	b480      	push	{r7}
 81006a6:	b087      	sub	sp, #28
 81006a8:	af00      	add	r7, sp, #0
 81006aa:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 81006ac:	687b      	ldr	r3, [r7, #4]
 81006ae:	2b00      	cmp	r3, #0
 81006b0:	d011      	beq.n	81006d6 <RingBuffGetFree+0x32>
 81006b2:	687b      	ldr	r3, [r7, #4]
 81006b4:	681b      	ldr	r3, [r3, #0]
 81006b6:	4a1c      	ldr	r2, [pc, #112]	@ (8100728 <RingBuffGetFree+0x84>)
 81006b8:	4293      	cmp	r3, r2
 81006ba:	d10c      	bne.n	81006d6 <RingBuffGetFree+0x32>
 81006bc:	687b      	ldr	r3, [r7, #4]
 81006be:	699b      	ldr	r3, [r3, #24]
 81006c0:	4a1a      	ldr	r2, [pc, #104]	@ (810072c <RingBuffGetFree+0x88>)
 81006c2:	4293      	cmp	r3, r2
 81006c4:	d107      	bne.n	81006d6 <RingBuffGetFree+0x32>
 81006c6:	687b      	ldr	r3, [r7, #4]
 81006c8:	685b      	ldr	r3, [r3, #4]
 81006ca:	2b00      	cmp	r3, #0
 81006cc:	d003      	beq.n	81006d6 <RingBuffGetFree+0x32>
 81006ce:	687b      	ldr	r3, [r7, #4]
 81006d0:	689b      	ldr	r3, [r3, #8]
 81006d2:	2b00      	cmp	r3, #0
 81006d4:	d101      	bne.n	81006da <RingBuffGetFree+0x36>
        return 0;
 81006d6:	2300      	movs	r3, #0
 81006d8:	e01f      	b.n	810071a <RingBuffGetFree+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 81006da:	687b      	ldr	r3, [r7, #4]
 81006dc:	691b      	ldr	r3, [r3, #16]
 81006de:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81006e0:	687b      	ldr	r3, [r7, #4]
 81006e2:	68db      	ldr	r3, [r3, #12]
 81006e4:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 81006e6:	693a      	ldr	r2, [r7, #16]
 81006e8:	68fb      	ldr	r3, [r7, #12]
 81006ea:	429a      	cmp	r2, r3
 81006ec:	d103      	bne.n	81006f6 <RingBuffGetFree+0x52>
        size = buff->size;
 81006ee:	687b      	ldr	r3, [r7, #4]
 81006f0:	689b      	ldr	r3, [r3, #8]
 81006f2:	617b      	str	r3, [r7, #20]
 81006f4:	e00f      	b.n	8100716 <RingBuffGetFree+0x72>
    } else if (r > w) {
 81006f6:	68fa      	ldr	r2, [r7, #12]
 81006f8:	693b      	ldr	r3, [r7, #16]
 81006fa:	429a      	cmp	r2, r3
 81006fc:	d904      	bls.n	8100708 <RingBuffGetFree+0x64>
        size = r - w;
 81006fe:	68fa      	ldr	r2, [r7, #12]
 8100700:	693b      	ldr	r3, [r7, #16]
 8100702:	1ad3      	subs	r3, r2, r3
 8100704:	617b      	str	r3, [r7, #20]
 8100706:	e006      	b.n	8100716 <RingBuffGetFree+0x72>
    } else {
        size = buff->size - (w - r);
 8100708:	687b      	ldr	r3, [r7, #4]
 810070a:	689a      	ldr	r2, [r3, #8]
 810070c:	68f9      	ldr	r1, [r7, #12]
 810070e:	693b      	ldr	r3, [r7, #16]
 8100710:	1acb      	subs	r3, r1, r3
 8100712:	4413      	add	r3, r2
 8100714:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8100716:	697b      	ldr	r3, [r7, #20]
 8100718:	3b01      	subs	r3, #1
}
 810071a:	4618      	mov	r0, r3
 810071c:	371c      	adds	r7, #28
 810071e:	46bd      	mov	sp, r7
 8100720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100724:	4770      	bx	lr
 8100726:	bf00      	nop
 8100728:	deadbeef 	.word	0xdeadbeef
 810072c:	21524110 	.word	0x21524110

08100730 <RingBuffGetFull>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
RingBuffGetFull(RINGBUFF_VOLATILE RingBuff* buff) {
 8100730:	b480      	push	{r7}
 8100732:	b087      	sub	sp, #28
 8100734:	af00      	add	r7, sp, #0
 8100736:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8100738:	687b      	ldr	r3, [r7, #4]
 810073a:	2b00      	cmp	r3, #0
 810073c:	d011      	beq.n	8100762 <RingBuffGetFull+0x32>
 810073e:	687b      	ldr	r3, [r7, #4]
 8100740:	681b      	ldr	r3, [r3, #0]
 8100742:	4a1b      	ldr	r2, [pc, #108]	@ (81007b0 <RingBuffGetFull+0x80>)
 8100744:	4293      	cmp	r3, r2
 8100746:	d10c      	bne.n	8100762 <RingBuffGetFull+0x32>
 8100748:	687b      	ldr	r3, [r7, #4]
 810074a:	699b      	ldr	r3, [r3, #24]
 810074c:	4a19      	ldr	r2, [pc, #100]	@ (81007b4 <RingBuffGetFull+0x84>)
 810074e:	4293      	cmp	r3, r2
 8100750:	d107      	bne.n	8100762 <RingBuffGetFull+0x32>
 8100752:	687b      	ldr	r3, [r7, #4]
 8100754:	685b      	ldr	r3, [r3, #4]
 8100756:	2b00      	cmp	r3, #0
 8100758:	d003      	beq.n	8100762 <RingBuffGetFull+0x32>
 810075a:	687b      	ldr	r3, [r7, #4]
 810075c:	689b      	ldr	r3, [r3, #8]
 810075e:	2b00      	cmp	r3, #0
 8100760:	d101      	bne.n	8100766 <RingBuffGetFull+0x36>
        return 0;
 8100762:	2300      	movs	r3, #0
 8100764:	e01d      	b.n	81007a2 <RingBuffGetFull+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8100766:	687b      	ldr	r3, [r7, #4]
 8100768:	691b      	ldr	r3, [r3, #16]
 810076a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 810076c:	687b      	ldr	r3, [r7, #4]
 810076e:	68db      	ldr	r3, [r3, #12]
 8100770:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8100772:	693a      	ldr	r2, [r7, #16]
 8100774:	68fb      	ldr	r3, [r7, #12]
 8100776:	429a      	cmp	r2, r3
 8100778:	d102      	bne.n	8100780 <RingBuffGetFull+0x50>
        size = 0;
 810077a:	2300      	movs	r3, #0
 810077c:	617b      	str	r3, [r7, #20]
 810077e:	e00f      	b.n	81007a0 <RingBuffGetFull+0x70>
    } else if (w > r) {
 8100780:	693a      	ldr	r2, [r7, #16]
 8100782:	68fb      	ldr	r3, [r7, #12]
 8100784:	429a      	cmp	r2, r3
 8100786:	d904      	bls.n	8100792 <RingBuffGetFull+0x62>
        size = w - r;
 8100788:	693a      	ldr	r2, [r7, #16]
 810078a:	68fb      	ldr	r3, [r7, #12]
 810078c:	1ad3      	subs	r3, r2, r3
 810078e:	617b      	str	r3, [r7, #20]
 8100790:	e006      	b.n	81007a0 <RingBuffGetFull+0x70>
    } else {
        size = buff->size - (r - w);
 8100792:	687b      	ldr	r3, [r7, #4]
 8100794:	689a      	ldr	r2, [r3, #8]
 8100796:	6939      	ldr	r1, [r7, #16]
 8100798:	68fb      	ldr	r3, [r7, #12]
 810079a:	1acb      	subs	r3, r1, r3
 810079c:	4413      	add	r3, r2
 810079e:	617b      	str	r3, [r7, #20]
    }
    return size;
 81007a0:	697b      	ldr	r3, [r7, #20]
}
 81007a2:	4618      	mov	r0, r3
 81007a4:	371c      	adds	r7, #28
 81007a6:	46bd      	mov	sp, r7
 81007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007ac:	4770      	bx	lr
 81007ae:	bf00      	nop
 81007b0:	deadbeef 	.word	0xdeadbeef
 81007b4:	21524110 	.word	0x21524110

081007b8 <RingBuffGetLinearBlockReadAddress>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
RingBuffGetLinearBlockReadAddress(RINGBUFF_VOLATILE RingBuff* buff) {
 81007b8:	b480      	push	{r7}
 81007ba:	b083      	sub	sp, #12
 81007bc:	af00      	add	r7, sp, #0
 81007be:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 81007c0:	687b      	ldr	r3, [r7, #4]
 81007c2:	2b00      	cmp	r3, #0
 81007c4:	d011      	beq.n	81007ea <RingBuffGetLinearBlockReadAddress+0x32>
 81007c6:	687b      	ldr	r3, [r7, #4]
 81007c8:	681b      	ldr	r3, [r3, #0]
 81007ca:	4a0e      	ldr	r2, [pc, #56]	@ (8100804 <RingBuffGetLinearBlockReadAddress+0x4c>)
 81007cc:	4293      	cmp	r3, r2
 81007ce:	d10c      	bne.n	81007ea <RingBuffGetLinearBlockReadAddress+0x32>
 81007d0:	687b      	ldr	r3, [r7, #4]
 81007d2:	699b      	ldr	r3, [r3, #24]
 81007d4:	4a0c      	ldr	r2, [pc, #48]	@ (8100808 <RingBuffGetLinearBlockReadAddress+0x50>)
 81007d6:	4293      	cmp	r3, r2
 81007d8:	d107      	bne.n	81007ea <RingBuffGetLinearBlockReadAddress+0x32>
 81007da:	687b      	ldr	r3, [r7, #4]
 81007dc:	685b      	ldr	r3, [r3, #4]
 81007de:	2b00      	cmp	r3, #0
 81007e0:	d003      	beq.n	81007ea <RingBuffGetLinearBlockReadAddress+0x32>
 81007e2:	687b      	ldr	r3, [r7, #4]
 81007e4:	689b      	ldr	r3, [r3, #8]
 81007e6:	2b00      	cmp	r3, #0
 81007e8:	d101      	bne.n	81007ee <RingBuffGetLinearBlockReadAddress+0x36>
        return NULL;
 81007ea:	2300      	movs	r3, #0
 81007ec:	e004      	b.n	81007f8 <RingBuffGetLinearBlockReadAddress+0x40>
    }
    return &buff->buff[buff->r];
 81007ee:	687b      	ldr	r3, [r7, #4]
 81007f0:	685a      	ldr	r2, [r3, #4]
 81007f2:	687b      	ldr	r3, [r7, #4]
 81007f4:	68db      	ldr	r3, [r3, #12]
 81007f6:	4413      	add	r3, r2
}
 81007f8:	4618      	mov	r0, r3
 81007fa:	370c      	adds	r7, #12
 81007fc:	46bd      	mov	sp, r7
 81007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100802:	4770      	bx	lr
 8100804:	deadbeef 	.word	0xdeadbeef
 8100808:	21524110 	.word	0x21524110

0810080c <RingBuffGetLinearBlockReadLength>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
RingBuffGetLinearBlockReadLength(RINGBUFF_VOLATILE RingBuff* buff) {
 810080c:	b480      	push	{r7}
 810080e:	b087      	sub	sp, #28
 8100810:	af00      	add	r7, sp, #0
 8100812:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8100814:	687b      	ldr	r3, [r7, #4]
 8100816:	2b00      	cmp	r3, #0
 8100818:	d011      	beq.n	810083e <RingBuffGetLinearBlockReadLength+0x32>
 810081a:	687b      	ldr	r3, [r7, #4]
 810081c:	681b      	ldr	r3, [r3, #0]
 810081e:	4a1a      	ldr	r2, [pc, #104]	@ (8100888 <RingBuffGetLinearBlockReadLength+0x7c>)
 8100820:	4293      	cmp	r3, r2
 8100822:	d10c      	bne.n	810083e <RingBuffGetLinearBlockReadLength+0x32>
 8100824:	687b      	ldr	r3, [r7, #4]
 8100826:	699b      	ldr	r3, [r3, #24]
 8100828:	4a18      	ldr	r2, [pc, #96]	@ (810088c <RingBuffGetLinearBlockReadLength+0x80>)
 810082a:	4293      	cmp	r3, r2
 810082c:	d107      	bne.n	810083e <RingBuffGetLinearBlockReadLength+0x32>
 810082e:	687b      	ldr	r3, [r7, #4]
 8100830:	685b      	ldr	r3, [r3, #4]
 8100832:	2b00      	cmp	r3, #0
 8100834:	d003      	beq.n	810083e <RingBuffGetLinearBlockReadLength+0x32>
 8100836:	687b      	ldr	r3, [r7, #4]
 8100838:	689b      	ldr	r3, [r3, #8]
 810083a:	2b00      	cmp	r3, #0
 810083c:	d101      	bne.n	8100842 <RingBuffGetLinearBlockReadLength+0x36>
        return 0;
 810083e:	2300      	movs	r3, #0
 8100840:	e01b      	b.n	810087a <RingBuffGetLinearBlockReadLength+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8100842:	687b      	ldr	r3, [r7, #4]
 8100844:	691b      	ldr	r3, [r3, #16]
 8100846:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100848:	687b      	ldr	r3, [r7, #4]
 810084a:	68db      	ldr	r3, [r3, #12]
 810084c:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 810084e:	693a      	ldr	r2, [r7, #16]
 8100850:	68fb      	ldr	r3, [r7, #12]
 8100852:	429a      	cmp	r2, r3
 8100854:	d904      	bls.n	8100860 <RingBuffGetLinearBlockReadLength+0x54>
        len = w - r;
 8100856:	693a      	ldr	r2, [r7, #16]
 8100858:	68fb      	ldr	r3, [r7, #12]
 810085a:	1ad3      	subs	r3, r2, r3
 810085c:	617b      	str	r3, [r7, #20]
 810085e:	e00b      	b.n	8100878 <RingBuffGetLinearBlockReadLength+0x6c>
    } else if (r > w) {
 8100860:	68fa      	ldr	r2, [r7, #12]
 8100862:	693b      	ldr	r3, [r7, #16]
 8100864:	429a      	cmp	r2, r3
 8100866:	d905      	bls.n	8100874 <RingBuffGetLinearBlockReadLength+0x68>
        len = buff->size - r;
 8100868:	687b      	ldr	r3, [r7, #4]
 810086a:	689a      	ldr	r2, [r3, #8]
 810086c:	68fb      	ldr	r3, [r7, #12]
 810086e:	1ad3      	subs	r3, r2, r3
 8100870:	617b      	str	r3, [r7, #20]
 8100872:	e001      	b.n	8100878 <RingBuffGetLinearBlockReadLength+0x6c>
    } else {
        len = 0;
 8100874:	2300      	movs	r3, #0
 8100876:	617b      	str	r3, [r7, #20]
    }
    return len;
 8100878:	697b      	ldr	r3, [r7, #20]
}
 810087a:	4618      	mov	r0, r3
 810087c:	371c      	adds	r7, #28
 810087e:	46bd      	mov	sp, r7
 8100880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100884:	4770      	bx	lr
 8100886:	bf00      	nop
 8100888:	deadbeef 	.word	0xdeadbeef
 810088c:	21524110 	.word	0x21524110

08100890 <RingBuffSkip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
RingBuffSkip(RINGBUFF_VOLATILE RingBuff* buff, size_t len) {
 8100890:	b580      	push	{r7, lr}
 8100892:	b084      	sub	sp, #16
 8100894:	af00      	add	r7, sp, #0
 8100896:	6078      	str	r0, [r7, #4]
 8100898:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 810089a:	687b      	ldr	r3, [r7, #4]
 810089c:	2b00      	cmp	r3, #0
 810089e:	d014      	beq.n	81008ca <RingBuffSkip+0x3a>
 81008a0:	687b      	ldr	r3, [r7, #4]
 81008a2:	681b      	ldr	r3, [r3, #0]
 81008a4:	4a20      	ldr	r2, [pc, #128]	@ (8100928 <RingBuffSkip+0x98>)
 81008a6:	4293      	cmp	r3, r2
 81008a8:	d10f      	bne.n	81008ca <RingBuffSkip+0x3a>
 81008aa:	687b      	ldr	r3, [r7, #4]
 81008ac:	699b      	ldr	r3, [r3, #24]
 81008ae:	4a1f      	ldr	r2, [pc, #124]	@ (810092c <RingBuffSkip+0x9c>)
 81008b0:	4293      	cmp	r3, r2
 81008b2:	d10a      	bne.n	81008ca <RingBuffSkip+0x3a>
 81008b4:	687b      	ldr	r3, [r7, #4]
 81008b6:	685b      	ldr	r3, [r3, #4]
 81008b8:	2b00      	cmp	r3, #0
 81008ba:	d006      	beq.n	81008ca <RingBuffSkip+0x3a>
 81008bc:	687b      	ldr	r3, [r7, #4]
 81008be:	689b      	ldr	r3, [r3, #8]
 81008c0:	2b00      	cmp	r3, #0
 81008c2:	d002      	beq.n	81008ca <RingBuffSkip+0x3a>
 81008c4:	683b      	ldr	r3, [r7, #0]
 81008c6:	2b00      	cmp	r3, #0
 81008c8:	d101      	bne.n	81008ce <RingBuffSkip+0x3e>
        return 0;
 81008ca:	2300      	movs	r3, #0
 81008cc:	e027      	b.n	810091e <RingBuffSkip+0x8e>
    }

    full = RingBuffGetFull(buff);             /* Get buffer used length */
 81008ce:	6878      	ldr	r0, [r7, #4]
 81008d0:	f7ff ff2e 	bl	8100730 <RingBuffGetFull>
 81008d4:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 81008d6:	683a      	ldr	r2, [r7, #0]
 81008d8:	68fb      	ldr	r3, [r7, #12]
 81008da:	4293      	cmp	r3, r2
 81008dc:	bf28      	it	cs
 81008de:	4613      	movcs	r3, r2
 81008e0:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 81008e2:	687b      	ldr	r3, [r7, #4]
 81008e4:	68da      	ldr	r2, [r3, #12]
 81008e6:	683b      	ldr	r3, [r7, #0]
 81008e8:	441a      	add	r2, r3
 81008ea:	687b      	ldr	r3, [r7, #4]
 81008ec:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 81008ee:	687b      	ldr	r3, [r7, #4]
 81008f0:	68da      	ldr	r2, [r3, #12]
 81008f2:	687b      	ldr	r3, [r7, #4]
 81008f4:	689b      	ldr	r3, [r3, #8]
 81008f6:	429a      	cmp	r2, r3
 81008f8:	d306      	bcc.n	8100908 <RingBuffSkip+0x78>
        buff->r -= buff->size;
 81008fa:	687b      	ldr	r3, [r7, #4]
 81008fc:	689b      	ldr	r3, [r3, #8]
 81008fe:	687a      	ldr	r2, [r7, #4]
 8100900:	68d2      	ldr	r2, [r2, #12]
 8100902:	1ad2      	subs	r2, r2, r3
 8100904:	687b      	ldr	r3, [r7, #4]
 8100906:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8100908:	687b      	ldr	r3, [r7, #4]
 810090a:	695b      	ldr	r3, [r3, #20]
 810090c:	2b00      	cmp	r3, #0
 810090e:	d005      	beq.n	810091c <RingBuffSkip+0x8c>
 8100910:	687b      	ldr	r3, [r7, #4]
 8100912:	695b      	ldr	r3, [r3, #20]
 8100914:	683a      	ldr	r2, [r7, #0]
 8100916:	2100      	movs	r1, #0
 8100918:	6878      	ldr	r0, [r7, #4]
 810091a:	4798      	blx	r3
    return len;
 810091c:	683b      	ldr	r3, [r7, #0]
}
 810091e:	4618      	mov	r0, r3
 8100920:	3710      	adds	r7, #16
 8100922:	46bd      	mov	sp, r7
 8100924:	bd80      	pop	{r7, pc}
 8100926:	bf00      	nop
 8100928:	deadbeef 	.word	0xdeadbeef
 810092c:	21524110 	.word	0x21524110

08100930 <SyncMailBoxGet>:
#include "mem/mem.h"

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID);

static uint8_t volatile* SyncMailBoxGet(uint32_t mbID)
{
 8100930:	b480      	push	{r7}
 8100932:	b085      	sub	sp, #20
 8100934:	af00      	add	r7, sp, #0
 8100936:	6078      	str	r0, [r7, #4]
    uint8_t volatile *pMB = NULL;
 8100938:	2300      	movs	r3, #0
 810093a:	60fb      	str	r3, [r7, #12]
    if(mbID == MAILBOX_CM7_ID) pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM7_START;
 810093c:	687b      	ldr	r3, [r7, #4]
 810093e:	2b01      	cmp	r3, #1
 8100940:	d103      	bne.n	810094a <SyncMailBoxGet+0x1a>
 8100942:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8100946:	60fb      	str	r3, [r7, #12]
 8100948:	e001      	b.n	810094e <SyncMailBoxGet+0x1e>
    else pMB = (uint8_t volatile*)MEM_SHARED_MAILBOX_CM4_START;
 810094a:	4b04      	ldr	r3, [pc, #16]	@ (810095c <SyncMailBoxGet+0x2c>)
 810094c:	60fb      	str	r3, [r7, #12]
    return pMB;
 810094e:	68fb      	ldr	r3, [r7, #12]
}
 8100950:	4618      	mov	r0, r3
 8100952:	3714      	adds	r7, #20
 8100954:	46bd      	mov	sp, r7
 8100956:	f85d 7b04 	ldr.w	r7, [sp], #4
 810095a:	4770      	bx	lr
 810095c:	38000004 	.word	0x38000004

08100960 <SyncMailBoxWrite>:

int8_t SyncMailBoxWrite(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8100960:	b580      	push	{r7, lr}
 8100962:	b086      	sub	sp, #24
 8100964:	af00      	add	r7, sp, #0
 8100966:	60f8      	str	r0, [r7, #12]
 8100968:	60b9      	str	r1, [r7, #8]
 810096a:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 810096c:	687b      	ldr	r3, [r7, #4]
 810096e:	2b04      	cmp	r3, #4
 8100970:	d902      	bls.n	8100978 <SyncMailBoxWrite+0x18>
 8100972:	f04f 33ff 	mov.w	r3, #4294967295
 8100976:	e009      	b.n	810098c <SyncMailBoxWrite+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 8100978:	68f8      	ldr	r0, [r7, #12]
 810097a:	f7ff ffd9 	bl	8100930 <SyncMailBoxGet>
 810097e:	6178      	str	r0, [r7, #20]
    memcpy((void*)pMB, (void*)pBuffer, len);
 8100980:	687a      	ldr	r2, [r7, #4]
 8100982:	68b9      	ldr	r1, [r7, #8]
 8100984:	6978      	ldr	r0, [r7, #20]
 8100986:	f007 fa8c 	bl	8107ea2 <memcpy>
    return 0;
 810098a:	2300      	movs	r3, #0
}
 810098c:	4618      	mov	r0, r3
 810098e:	3718      	adds	r7, #24
 8100990:	46bd      	mov	sp, r7
 8100992:	bd80      	pop	{r7, pc}

08100994 <SyncMailBoxWriteNotify>:

int8_t SyncMailBoxWriteNotify(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 8100994:	b580      	push	{r7, lr}
 8100996:	b086      	sub	sp, #24
 8100998:	af00      	add	r7, sp, #0
 810099a:	60f8      	str	r0, [r7, #12]
 810099c:	60b9      	str	r1, [r7, #8]
 810099e:	607a      	str	r2, [r7, #4]
    int8_t status = SyncMailBoxWrite(mbID, pBuffer, len);
 81009a0:	687a      	ldr	r2, [r7, #4]
 81009a2:	68b9      	ldr	r1, [r7, #8]
 81009a4:	68f8      	ldr	r0, [r7, #12]
 81009a6:	f7ff ffdb 	bl	8100960 <SyncMailBoxWrite>
 81009aa:	4603      	mov	r3, r0
 81009ac:	75fb      	strb	r3, [r7, #23]
    if(status < 0) return status;
 81009ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 81009b2:	2b00      	cmp	r3, #0
 81009b4:	da02      	bge.n	81009bc <SyncMailBoxWriteNotify+0x28>
 81009b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 81009ba:	e003      	b.n	81009c4 <SyncMailBoxWriteNotify+0x30>
    asm volatile ("dsb");
 81009bc:	f3bf 8f4f 	dsb	sy
    asm volatile ("sev");
 81009c0:	bf40      	sev
    return 0;
 81009c2:	2300      	movs	r3, #0
}
 81009c4:	4618      	mov	r0, r3
 81009c6:	3718      	adds	r7, #24
 81009c8:	46bd      	mov	sp, r7
 81009ca:	bd80      	pop	{r7, pc}

081009cc <SyncMailBoxRead>:

int8_t SyncMailBoxRead(uint32_t mbID, uint8_t *pBuffer, uint32_t len)
{
 81009cc:	b580      	push	{r7, lr}
 81009ce:	b086      	sub	sp, #24
 81009d0:	af00      	add	r7, sp, #0
 81009d2:	60f8      	str	r0, [r7, #12]
 81009d4:	60b9      	str	r1, [r7, #8]
 81009d6:	607a      	str	r2, [r7, #4]
    if(len > MEM_SHARED_MAILBOX_LEN) return -1;
 81009d8:	687b      	ldr	r3, [r7, #4]
 81009da:	2b04      	cmp	r3, #4
 81009dc:	d902      	bls.n	81009e4 <SyncMailBoxRead+0x18>
 81009de:	f04f 33ff 	mov.w	r3, #4294967295
 81009e2:	e009      	b.n	81009f8 <SyncMailBoxRead+0x2c>
    uint8_t volatile *pMB = SyncMailBoxGet(mbID);
 81009e4:	68f8      	ldr	r0, [r7, #12]
 81009e6:	f7ff ffa3 	bl	8100930 <SyncMailBoxGet>
 81009ea:	6178      	str	r0, [r7, #20]
    memcpy((void*)pBuffer, (void*)pMB, len);
 81009ec:	687a      	ldr	r2, [r7, #4]
 81009ee:	6979      	ldr	r1, [r7, #20]
 81009f0:	68b8      	ldr	r0, [r7, #8]
 81009f2:	f007 fa56 	bl	8107ea2 <memcpy>
    return 0;
 81009f6:	2300      	movs	r3, #0
}
 81009f8:	4618      	mov	r0, r3
 81009fa:	3718      	adds	r7, #24
 81009fc:	46bd      	mov	sp, r7
 81009fe:	bd80      	pop	{r7, pc}

08100a00 <SyncGetTaskHandler>:
//     if(HAL_GetCurrentCPUID() == CM7_CPUID)  return 0;
//     else                                    return 1;
// }

static task_handler_fn_t SyncGetTaskHandler(uint32_t taskID)
{
 8100a00:	b480      	push	{r7}
 8100a02:	b083      	sub	sp, #12
 8100a04:	af00      	add	r7, sp, #0
 8100a06:	6078      	str	r0, [r7, #4]
    if(taskID > NUM_TASK_TYPES) return NULL;
 8100a08:	687b      	ldr	r3, [r7, #4]
 8100a0a:	2b02      	cmp	r3, #2
 8100a0c:	d901      	bls.n	8100a12 <SyncGetTaskHandler+0x12>
 8100a0e:	2300      	movs	r3, #0
 8100a10:	e003      	b.n	8100a1a <SyncGetTaskHandler+0x1a>
    return handlers[taskID];
 8100a12:	4a05      	ldr	r2, [pc, #20]	@ (8100a28 <SyncGetTaskHandler+0x28>)
 8100a14:	687b      	ldr	r3, [r7, #4]
 8100a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8100a1a:	4618      	mov	r0, r3
 8100a1c:	370c      	adds	r7, #12
 8100a1e:	46bd      	mov	sp, r7
 8100a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a24:	4770      	bx	lr
 8100a26:	bf00      	nop
 8100a28:	10000094 	.word	0x10000094

08100a2c <SyncInit>:

/*
* \brief Each core needs to call SyncInit
*/
int8_t SyncInit(void)
{
 8100a2c:	b580      	push	{r7, lr}
 8100a2e:	af00      	add	r7, sp, #0
    memset(handlers, 0, sizeof(handlers));
 8100a30:	2208      	movs	r2, #8
 8100a32:	2100      	movs	r1, #0
 8100a34:	4802      	ldr	r0, [pc, #8]	@ (8100a40 <SyncInit+0x14>)
 8100a36:	f007 f9b9 	bl	8107dac <memset>
    return 0;
 8100a3a:	2300      	movs	r3, #0
}
 8100a3c:	4618      	mov	r0, r3
 8100a3e:	bd80      	pop	{r7, pc}
 8100a40:	10000094 	.word	0x10000094

08100a44 <SyncRegisterHandler>:

int8_t SyncRegisterHandler(task_handler_fn_t fn, uint32_t taskID)
{
 8100a44:	b480      	push	{r7}
 8100a46:	b083      	sub	sp, #12
 8100a48:	af00      	add	r7, sp, #0
 8100a4a:	6078      	str	r0, [r7, #4]
 8100a4c:	6039      	str	r1, [r7, #0]
    if(taskID > NUM_TASK_TYPES) return -1;
 8100a4e:	683b      	ldr	r3, [r7, #0]
 8100a50:	2b02      	cmp	r3, #2
 8100a52:	d902      	bls.n	8100a5a <SyncRegisterHandler+0x16>
 8100a54:	f04f 33ff 	mov.w	r3, #4294967295
 8100a58:	e005      	b.n	8100a66 <SyncRegisterHandler+0x22>
    handlers[taskID] = fn;
 8100a5a:	4906      	ldr	r1, [pc, #24]	@ (8100a74 <SyncRegisterHandler+0x30>)
 8100a5c:	683b      	ldr	r3, [r7, #0]
 8100a5e:	687a      	ldr	r2, [r7, #4]
 8100a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0;
 8100a64:	2300      	movs	r3, #0
}
 8100a66:	4618      	mov	r0, r3
 8100a68:	370c      	adds	r7, #12
 8100a6a:	46bd      	mov	sp, r7
 8100a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a70:	4770      	bx	lr
 8100a72:	bf00      	nop
 8100a74:	10000094 	.word	0x10000094

08100a78 <CM7_SEV_IRQHandler>:
* and the SEV IRQ handler for CM4 was called.
* This function was originally defined in CM4/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM7_SEV_IRQHandler(void)
{
 8100a78:	b580      	push	{r7, lr}
 8100a7a:	b082      	sub	sp, #8
 8100a7c:	af00      	add	r7, sp, #0
    // CPUID == CM4
    uint32_t taskID = 0;
 8100a7e:	2300      	movs	r3, #0
 8100a80:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM4_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8100a82:	463b      	mov	r3, r7
 8100a84:	2204      	movs	r2, #4
 8100a86:	4619      	mov	r1, r3
 8100a88:	2000      	movs	r0, #0
 8100a8a:	f7ff ff9f 	bl	81009cc <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8100a8e:	683b      	ldr	r3, [r7, #0]
 8100a90:	4618      	mov	r0, r3
 8100a92:	f7ff ffb5 	bl	8100a00 <SyncGetTaskHandler>
 8100a96:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8100a98:	687b      	ldr	r3, [r7, #4]
 8100a9a:	2b00      	cmp	r3, #0
 8100a9c:	d001      	beq.n	8100aa2 <CM7_SEV_IRQHandler+0x2a>
    {
        fn();
 8100a9e:	687b      	ldr	r3, [r7, #4]
 8100aa0:	4798      	blx	r3
    }
}
 8100aa2:	bf00      	nop
 8100aa4:	3708      	adds	r7, #8
 8100aa6:	46bd      	mov	sp, r7
 8100aa8:	bd80      	pop	{r7, pc}

08100aaa <CM4_SEV_IRQHandler>:
* and the SEV IRQ handler for CM7 was called.
* This function was originally defined in CM7/Core/Src/stm32h7xx_it.c 
* by the code generator but I moved it here.
*/
void CM4_SEV_IRQHandler(void)
{
 8100aaa:	b580      	push	{r7, lr}
 8100aac:	b082      	sub	sp, #8
 8100aae:	af00      	add	r7, sp, #0
    // CPUID == CM7
    uint32_t taskID = 0;
 8100ab0:	2300      	movs	r3, #0
 8100ab2:	603b      	str	r3, [r7, #0]
    SyncMailBoxRead(MAILBOX_CM7_ID, (uint8_t*)&taskID, sizeof(uint32_t));
 8100ab4:	463b      	mov	r3, r7
 8100ab6:	2204      	movs	r2, #4
 8100ab8:	4619      	mov	r1, r3
 8100aba:	2001      	movs	r0, #1
 8100abc:	f7ff ff86 	bl	81009cc <SyncMailBoxRead>
    task_handler_fn_t fn = SyncGetTaskHandler(taskID);
 8100ac0:	683b      	ldr	r3, [r7, #0]
 8100ac2:	4618      	mov	r0, r3
 8100ac4:	f7ff ff9c 	bl	8100a00 <SyncGetTaskHandler>
 8100ac8:	6078      	str	r0, [r7, #4]
    if(fn != NULL)
 8100aca:	687b      	ldr	r3, [r7, #4]
 8100acc:	2b00      	cmp	r3, #0
 8100ace:	d001      	beq.n	8100ad4 <CM4_SEV_IRQHandler+0x2a>
    {
        fn();
 8100ad0:	687b      	ldr	r3, [r7, #4]
 8100ad2:	4798      	blx	r3
    }
 8100ad4:	bf00      	nop
 8100ad6:	3708      	adds	r7, #8
 8100ad8:	46bd      	mov	sp, r7
 8100ada:	bd80      	pop	{r7, pc}

08100adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100adc:	b580      	push	{r7, lr}
 8100ade:	b082      	sub	sp, #8
 8100ae0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8100ba0 <main+0xc4>)
 8100ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8100ba0 <main+0xc4>)
 8100aea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100af2:	4b2b      	ldr	r3, [pc, #172]	@ (8100ba0 <main+0xc4>)
 8100af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100afc:	607b      	str	r3, [r7, #4]
 8100afe:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b00:	2001      	movs	r0, #1
 8100b02:	f001 fe53 	bl	81027ac <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100b06:	f002 f80d 	bl	8102b24 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100b0a:	2201      	movs	r2, #1
 8100b0c:	2102      	movs	r1, #2
 8100b0e:	2000      	movs	r0, #0
 8100b10:	f001 ff8e 	bl	8102a30 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b14:	4b23      	ldr	r3, [pc, #140]	@ (8100ba4 <main+0xc8>)
 8100b16:	681b      	ldr	r3, [r3, #0]
 8100b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100b1c:	2b70      	cmp	r3, #112	@ 0x70
 8100b1e:	d108      	bne.n	8100b32 <main+0x56>
 8100b20:	4b21      	ldr	r3, [pc, #132]	@ (8100ba8 <main+0xcc>)
 8100b22:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100b26:	4a20      	ldr	r2, [pc, #128]	@ (8100ba8 <main+0xcc>)
 8100b28:	f043 0301 	orr.w	r3, r3, #1
 8100b2c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100b30:	e007      	b.n	8100b42 <main+0x66>
 8100b32:	4b1d      	ldr	r3, [pc, #116]	@ (8100ba8 <main+0xcc>)
 8100b34:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100b38:	4a1b      	ldr	r2, [pc, #108]	@ (8100ba8 <main+0xcc>)
 8100b3a:	f043 0301 	orr.w	r3, r3, #1
 8100b3e:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100b42:	f001 f96f 	bl	8101e24 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100b46:	f000 fa1f 	bl	8100f88 <MX_GPIO_Init>
  MX_HDMI_CEC_Init();
 8100b4a:	f000 f83b 	bl	8100bc4 <MX_HDMI_CEC_Init>
  MX_RTC_Init();
 8100b4e:	f000 f86d 	bl	8100c2c <MX_RTC_Init>
  MX_SAI1_Init();
 8100b52:	f000 f8b9 	bl	8100cc8 <MX_SAI1_Init>
  MX_SPDIFRX1_Init();
 8100b56:	f000 f959 	bl	8100e0c <MX_SPDIFRX1_Init>
  MX_SPI5_Init();
 8100b5a:	f000 f98f 	bl	8100e7c <MX_SPI5_Init>
  MX_USB_OTG_HS_PCD_Init();
 8100b5e:	f000 f9e1 	bl	8100f24 <MX_USB_OTG_HS_PCD_Init>
//     (void*) NULL,                     /* Pointer to tasks arguments (parameter) */
//     tskIDLE_PRIORITY + 2UL,           /* Task priority*/
//     NULL                              /* Task handle */
// );

    SyncInit();
 8100b62:	f7ff ff63 	bl	8100a2c <SyncInit>
    LoggerInit(NULL);
 8100b66:	2000      	movs	r0, #0
 8100b68:	f7ff fc42 	bl	81003f0 <LoggerInit>

  while (1)
  {
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	  HAL_Delay(1000);
 8100b6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100b70:	f001 f9d6 	bl	8101f20 <HAL_Delay>
	  printf("Hello from CM4 \r\n");
 8100b74:	480d      	ldr	r0, [pc, #52]	@ (8100bac <main+0xd0>)
 8100b76:	f007 f839 	bl	8107bec <puts>
	  LOG_INFO("Hello from CM4");
 8100b7a:	480d      	ldr	r0, [pc, #52]	@ (8100bb0 <main+0xd4>)
 8100b7c:	f006 ffce 	bl	8107b1c <iprintf>
 8100b80:	480c      	ldr	r0, [pc, #48]	@ (8100bb4 <main+0xd8>)
 8100b82:	f006 ffcb 	bl	8107b1c <iprintf>
 8100b86:	21a8      	movs	r1, #168	@ 0xa8
 8100b88:	480b      	ldr	r0, [pc, #44]	@ (8100bb8 <main+0xdc>)
 8100b8a:	f006 ffc7 	bl	8107b1c <iprintf>
 8100b8e:	480b      	ldr	r0, [pc, #44]	@ (8100bbc <main+0xe0>)
 8100b90:	f006 ffc4 	bl	8107b1c <iprintf>
 8100b94:	480a      	ldr	r0, [pc, #40]	@ (8100bc0 <main+0xe4>)
 8100b96:	f007 f829 	bl	8107bec <puts>
	  HAL_Delay(1000);
 8100b9a:	bf00      	nop
 8100b9c:	e7e6      	b.n	8100b6c <main+0x90>
 8100b9e:	bf00      	nop
 8100ba0:	58024400 	.word	0x58024400
 8100ba4:	e000ed00 	.word	0xe000ed00
 8100ba8:	58026400 	.word	0x58026400
 8100bac:	081088e4 	.word	0x081088e4
 8100bb0:	081088f8 	.word	0x081088f8
 8100bb4:	08108904 	.word	0x08108904
 8100bb8:	08108918 	.word	0x08108918
 8100bbc:	08108920 	.word	0x08108920
 8100bc0:	08108930 	.word	0x08108930

08100bc4 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100bc4:	b580      	push	{r7, lr}
 8100bc6:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100bc8:	4b15      	ldr	r3, [pc, #84]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100bca:	4a16      	ldr	r2, [pc, #88]	@ (8100c24 <MX_HDMI_CEC_Init+0x60>)
 8100bcc:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100bce:	4b14      	ldr	r3, [pc, #80]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100bd0:	2200      	movs	r2, #0
 8100bd2:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100bd4:	4b12      	ldr	r3, [pc, #72]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100bd6:	2200      	movs	r2, #0
 8100bd8:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100bda:	4b11      	ldr	r3, [pc, #68]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100bdc:	2210      	movs	r2, #16
 8100bde:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100be0:	4b0f      	ldr	r3, [pc, #60]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100be2:	2200      	movs	r2, #0
 8100be4:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100be6:	4b0e      	ldr	r3, [pc, #56]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100be8:	2200      	movs	r2, #0
 8100bea:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100bec:	4b0c      	ldr	r3, [pc, #48]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100bee:	2200      	movs	r2, #0
 8100bf0:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100bf4:	2200      	movs	r2, #0
 8100bf6:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100bf8:	4b09      	ldr	r3, [pc, #36]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100bfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8100bfe:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100c00:	4b07      	ldr	r3, [pc, #28]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100c02:	2200      	movs	r2, #0
 8100c04:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100c06:	4b06      	ldr	r3, [pc, #24]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100c08:	4a07      	ldr	r2, [pc, #28]	@ (8100c28 <MX_HDMI_CEC_Init+0x64>)
 8100c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100c0c:	4804      	ldr	r0, [pc, #16]	@ (8100c20 <MX_HDMI_CEC_Init+0x5c>)
 8100c0e:	f001 f9cd 	bl	8101fac <HAL_CEC_Init>
 8100c12:	4603      	mov	r3, r0
 8100c14:	2b00      	cmp	r3, #0
 8100c16:	d001      	beq.n	8100c1c <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100c18:	f000 fbfc 	bl	8101414 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100c1c:	bf00      	nop
 8100c1e:	bd80      	pop	{r7, pc}
 8100c20:	1000009c 	.word	0x1000009c
 8100c24:	40006c00 	.word	0x40006c00
 8100c28:	100007f0 	.word	0x100007f0

08100c2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100c2c:	b580      	push	{r7, lr}
 8100c2e:	b08a      	sub	sp, #40	@ 0x28
 8100c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100c32:	463b      	mov	r3, r7
 8100c34:	2228      	movs	r2, #40	@ 0x28
 8100c36:	2100      	movs	r1, #0
 8100c38:	4618      	mov	r0, r3
 8100c3a:	f007 f8b7 	bl	8107dac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100c3e:	4b20      	ldr	r3, [pc, #128]	@ (8100cc0 <MX_RTC_Init+0x94>)
 8100c40:	4a20      	ldr	r2, [pc, #128]	@ (8100cc4 <MX_RTC_Init+0x98>)
 8100c42:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100c44:	4b1e      	ldr	r3, [pc, #120]	@ (8100cc0 <MX_RTC_Init+0x94>)
 8100c46:	2200      	movs	r2, #0
 8100c48:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8100cc0 <MX_RTC_Init+0x94>)
 8100c4c:	227f      	movs	r2, #127	@ 0x7f
 8100c4e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100c50:	4b1b      	ldr	r3, [pc, #108]	@ (8100cc0 <MX_RTC_Init+0x94>)
 8100c52:	22ff      	movs	r2, #255	@ 0xff
 8100c54:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100c56:	4b1a      	ldr	r3, [pc, #104]	@ (8100cc0 <MX_RTC_Init+0x94>)
 8100c58:	2200      	movs	r2, #0
 8100c5a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100c5c:	4b18      	ldr	r3, [pc, #96]	@ (8100cc0 <MX_RTC_Init+0x94>)
 8100c5e:	2200      	movs	r2, #0
 8100c60:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100c62:	4b17      	ldr	r3, [pc, #92]	@ (8100cc0 <MX_RTC_Init+0x94>)
 8100c64:	2200      	movs	r2, #0
 8100c66:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100c68:	4b15      	ldr	r3, [pc, #84]	@ (8100cc0 <MX_RTC_Init+0x94>)
 8100c6a:	2200      	movs	r2, #0
 8100c6c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100c6e:	4814      	ldr	r0, [pc, #80]	@ (8100cc0 <MX_RTC_Init+0x94>)
 8100c70:	f004 feb8 	bl	81059e4 <HAL_RTC_Init>
 8100c74:	4603      	mov	r3, r0
 8100c76:	2b00      	cmp	r3, #0
 8100c78:	d001      	beq.n	8100c7e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100c7a:	f000 fbcb 	bl	8101414 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100c7e:	2301      	movs	r3, #1
 8100c80:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100c82:	2301      	movs	r3, #1
 8100c84:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100c86:	2300      	movs	r3, #0
 8100c88:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100c8a:	2300      	movs	r3, #0
 8100c8c:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100c8e:	2300      	movs	r3, #0
 8100c90:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100c92:	2300      	movs	r3, #0
 8100c94:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100c96:	2300      	movs	r3, #0
 8100c98:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100c9a:	2300      	movs	r3, #0
 8100c9c:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100c9e:	2380      	movs	r3, #128	@ 0x80
 8100ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100ca2:	463b      	mov	r3, r7
 8100ca4:	4619      	mov	r1, r3
 8100ca6:	4806      	ldr	r0, [pc, #24]	@ (8100cc0 <MX_RTC_Init+0x94>)
 8100ca8:	f004 ffb4 	bl	8105c14 <HAL_RTCEx_SetTamper>
 8100cac:	4603      	mov	r3, r0
 8100cae:	2b00      	cmp	r3, #0
 8100cb0:	d001      	beq.n	8100cb6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100cb2:	f000 fbaf 	bl	8101414 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100cb6:	bf00      	nop
 8100cb8:	3728      	adds	r7, #40	@ 0x28
 8100cba:	46bd      	mov	sp, r7
 8100cbc:	bd80      	pop	{r7, pc}
 8100cbe:	bf00      	nop
 8100cc0:	100000e0 	.word	0x100000e0
 8100cc4:	58004000 	.word	0x58004000

08100cc8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100cc8:	b580      	push	{r7, lr}
 8100cca:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100cce:	4a4b      	ldr	r2, [pc, #300]	@ (8100dfc <MX_SAI1_Init+0x134>)
 8100cd0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100cd2:	4b49      	ldr	r3, [pc, #292]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100cd4:	2200      	movs	r2, #0
 8100cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100cd8:	4b47      	ldr	r3, [pc, #284]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100cda:	2200      	movs	r2, #0
 8100cdc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100cde:	4b46      	ldr	r3, [pc, #280]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100ce0:	2240      	movs	r2, #64	@ 0x40
 8100ce2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100ce4:	4b44      	ldr	r3, [pc, #272]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100ce6:	2200      	movs	r2, #0
 8100ce8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100cea:	4b43      	ldr	r3, [pc, #268]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100cec:	2200      	movs	r2, #0
 8100cee:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100cf0:	4b41      	ldr	r3, [pc, #260]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100cf2:	2200      	movs	r2, #0
 8100cf4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100cf6:	4b40      	ldr	r3, [pc, #256]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100cf8:	2200      	movs	r2, #0
 8100cfa:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100cfe:	2200      	movs	r2, #0
 8100d00:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100d02:	4b3d      	ldr	r3, [pc, #244]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d04:	2200      	movs	r2, #0
 8100d06:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100d08:	4b3b      	ldr	r3, [pc, #236]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d0a:	2200      	movs	r2, #0
 8100d0c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d10:	4a3b      	ldr	r2, [pc, #236]	@ (8100e00 <MX_SAI1_Init+0x138>)
 8100d12:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100d14:	4b38      	ldr	r3, [pc, #224]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d16:	2200      	movs	r2, #0
 8100d18:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100d1a:	4b37      	ldr	r3, [pc, #220]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d1c:	2200      	movs	r2, #0
 8100d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100d20:	4b35      	ldr	r3, [pc, #212]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d22:	2200      	movs	r2, #0
 8100d24:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100d26:	4b34      	ldr	r3, [pc, #208]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d28:	2200      	movs	r2, #0
 8100d2a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100d2c:	4b32      	ldr	r3, [pc, #200]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d2e:	2200      	movs	r2, #0
 8100d30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100d34:	4b30      	ldr	r3, [pc, #192]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d36:	2201      	movs	r2, #1
 8100d38:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100d42:	4b2d      	ldr	r3, [pc, #180]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d44:	2208      	movs	r2, #8
 8100d46:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100d48:	4b2b      	ldr	r3, [pc, #172]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d4a:	2201      	movs	r2, #1
 8100d4c:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d50:	2200      	movs	r2, #0
 8100d52:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100d54:	4b28      	ldr	r3, [pc, #160]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d56:	2200      	movs	r2, #0
 8100d58:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100d5a:	4b27      	ldr	r3, [pc, #156]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d5c:	2200      	movs	r2, #0
 8100d5e:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100d60:	4b25      	ldr	r3, [pc, #148]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d62:	2200      	movs	r2, #0
 8100d64:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100d66:	4b24      	ldr	r3, [pc, #144]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d68:	2200      	movs	r2, #0
 8100d6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100d6c:	4b22      	ldr	r3, [pc, #136]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d6e:	2201      	movs	r2, #1
 8100d70:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100d72:	4b21      	ldr	r3, [pc, #132]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d74:	2200      	movs	r2, #0
 8100d76:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100d78:	481f      	ldr	r0, [pc, #124]	@ (8100df8 <MX_SAI1_Init+0x130>)
 8100d7a:	f005 f82b 	bl	8105dd4 <HAL_SAI_Init>
 8100d7e:	4603      	mov	r3, r0
 8100d80:	2b00      	cmp	r3, #0
 8100d82:	d001      	beq.n	8100d88 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8100d84:	f000 fb46 	bl	8101414 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100d88:	4b1e      	ldr	r3, [pc, #120]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8100e08 <MX_SAI1_Init+0x140>)
 8100d8c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100d90:	2204      	movs	r2, #4
 8100d92:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100d94:	4b1b      	ldr	r3, [pc, #108]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100d96:	2200      	movs	r2, #0
 8100d98:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100d9c:	2200      	movs	r2, #0
 8100d9e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100da0:	4b18      	ldr	r3, [pc, #96]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100da2:	2200      	movs	r2, #0
 8100da4:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100da6:	4b17      	ldr	r3, [pc, #92]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100da8:	2200      	movs	r2, #0
 8100daa:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100dac:	4b15      	ldr	r3, [pc, #84]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100dae:	2200      	movs	r2, #0
 8100db0:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100db2:	4b14      	ldr	r3, [pc, #80]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100db4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100db8:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100dba:	4b12      	ldr	r3, [pc, #72]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100dbc:	2200      	movs	r2, #0
 8100dbe:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100dc0:	4b10      	ldr	r3, [pc, #64]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100dc2:	2200      	movs	r2, #0
 8100dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100dc8:	2200      	movs	r2, #0
 8100dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100dce:	2200      	movs	r2, #0
 8100dd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100dd6:	2201      	movs	r2, #1
 8100dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100dda:	4b0a      	ldr	r3, [pc, #40]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100ddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100de0:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100de2:	4808      	ldr	r0, [pc, #32]	@ (8100e04 <MX_SAI1_Init+0x13c>)
 8100de4:	f004 fff6 	bl	8105dd4 <HAL_SAI_Init>
 8100de8:	4603      	mov	r3, r0
 8100dea:	2b00      	cmp	r3, #0
 8100dec:	d001      	beq.n	8100df2 <MX_SAI1_Init+0x12a>
  {
    Error_Handler();
 8100dee:	f000 fb11 	bl	8101414 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100df2:	bf00      	nop
 8100df4:	bd80      	pop	{r7, pc}
 8100df6:	bf00      	nop
 8100df8:	10000104 	.word	0x10000104
 8100dfc:	40015804 	.word	0x40015804
 8100e00:	0002ee00 	.word	0x0002ee00
 8100e04:	1000019c 	.word	0x1000019c
 8100e08:	40015824 	.word	0x40015824

08100e0c <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100e0c:	b580      	push	{r7, lr}
 8100e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100e10:	4b19      	ldr	r3, [pc, #100]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e12:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100e16:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100e18:	4b17      	ldr	r3, [pc, #92]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e1a:	2200      	movs	r2, #0
 8100e1c:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100e1e:	4b16      	ldr	r3, [pc, #88]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e20:	2200      	movs	r2, #0
 8100e22:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100e24:	4b14      	ldr	r3, [pc, #80]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e26:	2200      	movs	r2, #0
 8100e28:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100e2a:	4b13      	ldr	r3, [pc, #76]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e2c:	2200      	movs	r2, #0
 8100e2e:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100e30:	4b11      	ldr	r3, [pc, #68]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e32:	2200      	movs	r2, #0
 8100e34:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100e36:	4b10      	ldr	r3, [pc, #64]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e38:	2200      	movs	r2, #0
 8100e3a:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e3e:	2200      	movs	r2, #0
 8100e40:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100e42:	4b0d      	ldr	r3, [pc, #52]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e44:	2200      	movs	r2, #0
 8100e46:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100e48:	4b0b      	ldr	r3, [pc, #44]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e4a:	2200      	movs	r2, #0
 8100e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e50:	2200      	movs	r2, #0
 8100e52:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100e54:	4b08      	ldr	r3, [pc, #32]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e56:	2200      	movs	r2, #0
 8100e58:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100e5c:	4b06      	ldr	r3, [pc, #24]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e5e:	2200      	movs	r2, #0
 8100e60:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100e64:	4804      	ldr	r0, [pc, #16]	@ (8100e78 <MX_SPDIFRX1_Init+0x6c>)
 8100e66:	f005 fa99 	bl	810639c <HAL_SPDIFRX_Init>
 8100e6a:	4603      	mov	r3, r0
 8100e6c:	2b00      	cmp	r3, #0
 8100e6e:	d001      	beq.n	8100e74 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100e70:	f000 fad0 	bl	8101414 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100e74:	bf00      	nop
 8100e76:	bd80      	pop	{r7, pc}
 8100e78:	10000234 	.word	0x10000234

08100e7c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100e7c:	b580      	push	{r7, lr}
 8100e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100e80:	4b26      	ldr	r3, [pc, #152]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100e82:	4a27      	ldr	r2, [pc, #156]	@ (8100f20 <MX_SPI5_Init+0xa4>)
 8100e84:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100e86:	4b25      	ldr	r3, [pc, #148]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100e88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100e8c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100e8e:	4b23      	ldr	r3, [pc, #140]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100e90:	2200      	movs	r2, #0
 8100e92:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100e94:	4b21      	ldr	r3, [pc, #132]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100e96:	2203      	movs	r2, #3
 8100e98:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100e9a:	4b20      	ldr	r3, [pc, #128]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100e9c:	2200      	movs	r2, #0
 8100e9e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100ea2:	2200      	movs	r2, #0
 8100ea4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100ea8:	2200      	movs	r2, #0
 8100eaa:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100eac:	4b1b      	ldr	r3, [pc, #108]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100eae:	2200      	movs	r2, #0
 8100eb0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100eb4:	2200      	movs	r2, #0
 8100eb6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100eb8:	4b18      	ldr	r3, [pc, #96]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100eba:	2200      	movs	r2, #0
 8100ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100ebe:	4b17      	ldr	r3, [pc, #92]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100ec0:	2200      	movs	r2, #0
 8100ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100ec4:	4b15      	ldr	r3, [pc, #84]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100ec6:	2200      	movs	r2, #0
 8100ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100eca:	4b14      	ldr	r3, [pc, #80]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100ecc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100ed0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100ed2:	4b12      	ldr	r3, [pc, #72]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100ed8:	4b10      	ldr	r3, [pc, #64]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100eda:	2200      	movs	r2, #0
 8100edc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100ede:	4b0f      	ldr	r3, [pc, #60]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100ee0:	2200      	movs	r2, #0
 8100ee2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100ee6:	2200      	movs	r2, #0
 8100ee8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100eea:	4b0c      	ldr	r3, [pc, #48]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100eec:	2200      	movs	r2, #0
 8100eee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100ef2:	2200      	movs	r2, #0
 8100ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100ef6:	4b09      	ldr	r3, [pc, #36]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100ef8:	2200      	movs	r2, #0
 8100efa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100efc:	4b07      	ldr	r3, [pc, #28]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100efe:	2200      	movs	r2, #0
 8100f00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100f02:	4b06      	ldr	r3, [pc, #24]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100f04:	2200      	movs	r2, #0
 8100f06:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100f08:	4804      	ldr	r0, [pc, #16]	@ (8100f1c <MX_SPI5_Init+0xa0>)
 8100f0a:	f005 fab5 	bl	8106478 <HAL_SPI_Init>
 8100f0e:	4603      	mov	r3, r0
 8100f10:	2b00      	cmp	r3, #0
 8100f12:	d001      	beq.n	8100f18 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100f14:	f000 fa7e 	bl	8101414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100f18:	bf00      	nop
 8100f1a:	bd80      	pop	{r7, pc}
 8100f1c:	10000284 	.word	0x10000284
 8100f20:	40015000 	.word	0x40015000

08100f24 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8100f24:	b580      	push	{r7, lr}
 8100f26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8100f28:	4b15      	ldr	r3, [pc, #84]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f2a:	4a16      	ldr	r2, [pc, #88]	@ (8100f84 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8100f2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8100f2e:	4b14      	ldr	r3, [pc, #80]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f30:	2209      	movs	r2, #9
 8100f32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8100f34:	4b12      	ldr	r3, [pc, #72]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f36:	2200      	movs	r2, #0
 8100f38:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8100f3a:	4b11      	ldr	r3, [pc, #68]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f3c:	2200      	movs	r2, #0
 8100f3e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8100f40:	4b0f      	ldr	r3, [pc, #60]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f42:	2201      	movs	r2, #1
 8100f44:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8100f46:	4b0e      	ldr	r3, [pc, #56]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f48:	2200      	movs	r2, #0
 8100f4a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8100f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f4e:	2200      	movs	r2, #0
 8100f50:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8100f52:	4b0b      	ldr	r3, [pc, #44]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f54:	2200      	movs	r2, #0
 8100f56:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8100f58:	4b09      	ldr	r3, [pc, #36]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f5a:	2200      	movs	r2, #0
 8100f5c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8100f5e:	4b08      	ldr	r3, [pc, #32]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f60:	2200      	movs	r2, #0
 8100f62:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8100f64:	4b06      	ldr	r3, [pc, #24]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f66:	2200      	movs	r2, #0
 8100f68:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8100f6a:	4805      	ldr	r0, [pc, #20]	@ (8100f80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100f6c:	f001 fc30 	bl	81027d0 <HAL_PCD_Init>
 8100f70:	4603      	mov	r3, r0
 8100f72:	2b00      	cmp	r3, #0
 8100f74:	d001      	beq.n	8100f7a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8100f76:	f000 fa4d 	bl	8101414 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8100f7a:	bf00      	nop
 8100f7c:	bd80      	pop	{r7, pc}
 8100f7e:	bf00      	nop
 8100f80:	1000030c 	.word	0x1000030c
 8100f84:	40040000 	.word	0x40040000

08100f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100f88:	b580      	push	{r7, lr}
 8100f8a:	b090      	sub	sp, #64	@ 0x40
 8100f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100f92:	2200      	movs	r2, #0
 8100f94:	601a      	str	r2, [r3, #0]
 8100f96:	605a      	str	r2, [r3, #4]
 8100f98:	609a      	str	r2, [r3, #8]
 8100f9a:	60da      	str	r2, [r3, #12]
 8100f9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100f9e:	4bbc      	ldr	r3, [pc, #752]	@ (8101290 <MX_GPIO_Init+0x308>)
 8100fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fa4:	4aba      	ldr	r2, [pc, #744]	@ (8101290 <MX_GPIO_Init+0x308>)
 8100fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100faa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fae:	4bb8      	ldr	r3, [pc, #736]	@ (8101290 <MX_GPIO_Init+0x308>)
 8100fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8100fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100fbc:	4bb4      	ldr	r3, [pc, #720]	@ (8101290 <MX_GPIO_Init+0x308>)
 8100fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fc2:	4ab3      	ldr	r2, [pc, #716]	@ (8101290 <MX_GPIO_Init+0x308>)
 8100fc4:	f043 0302 	orr.w	r3, r3, #2
 8100fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fcc:	4bb0      	ldr	r3, [pc, #704]	@ (8101290 <MX_GPIO_Init+0x308>)
 8100fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fd2:	f003 0302 	and.w	r3, r3, #2
 8100fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8100fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100fda:	4bad      	ldr	r3, [pc, #692]	@ (8101290 <MX_GPIO_Init+0x308>)
 8100fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fe0:	4aab      	ldr	r2, [pc, #684]	@ (8101290 <MX_GPIO_Init+0x308>)
 8100fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fea:	4ba9      	ldr	r3, [pc, #676]	@ (8101290 <MX_GPIO_Init+0x308>)
 8100fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100ff4:	623b      	str	r3, [r7, #32]
 8100ff6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100ff8:	4ba5      	ldr	r3, [pc, #660]	@ (8101290 <MX_GPIO_Init+0x308>)
 8100ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ffe:	4aa4      	ldr	r2, [pc, #656]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101000:	f043 0304 	orr.w	r3, r3, #4
 8101004:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101008:	4ba1      	ldr	r3, [pc, #644]	@ (8101290 <MX_GPIO_Init+0x308>)
 810100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810100e:	f003 0304 	and.w	r3, r3, #4
 8101012:	61fb      	str	r3, [r7, #28]
 8101014:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101016:	4b9e      	ldr	r3, [pc, #632]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810101c:	4a9c      	ldr	r2, [pc, #624]	@ (8101290 <MX_GPIO_Init+0x308>)
 810101e:	f043 0310 	orr.w	r3, r3, #16
 8101022:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101026:	4b9a      	ldr	r3, [pc, #616]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810102c:	f003 0310 	and.w	r3, r3, #16
 8101030:	61bb      	str	r3, [r7, #24]
 8101032:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8101034:	4b96      	ldr	r3, [pc, #600]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810103a:	4a95      	ldr	r2, [pc, #596]	@ (8101290 <MX_GPIO_Init+0x308>)
 810103c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101044:	4b92      	ldr	r3, [pc, #584]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810104a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810104e:	617b      	str	r3, [r7, #20]
 8101050:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101052:	4b8f      	ldr	r3, [pc, #572]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101058:	4a8d      	ldr	r2, [pc, #564]	@ (8101290 <MX_GPIO_Init+0x308>)
 810105a:	f043 0308 	orr.w	r3, r3, #8
 810105e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101062:	4b8b      	ldr	r3, [pc, #556]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101068:	f003 0308 	and.w	r3, r3, #8
 810106c:	613b      	str	r3, [r7, #16]
 810106e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101070:	4b87      	ldr	r3, [pc, #540]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101076:	4a86      	ldr	r2, [pc, #536]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101078:	f043 0320 	orr.w	r3, r3, #32
 810107c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101080:	4b83      	ldr	r3, [pc, #524]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101086:	f003 0320 	and.w	r3, r3, #32
 810108a:	60fb      	str	r3, [r7, #12]
 810108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 810108e:	4b80      	ldr	r3, [pc, #512]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101094:	4a7e      	ldr	r2, [pc, #504]	@ (8101290 <MX_GPIO_Init+0x308>)
 8101096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810109a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810109e:	4b7c      	ldr	r3, [pc, #496]	@ (8101290 <MX_GPIO_Init+0x308>)
 81010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81010a8:	60bb      	str	r3, [r7, #8]
 81010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 81010ac:	4b78      	ldr	r3, [pc, #480]	@ (8101290 <MX_GPIO_Init+0x308>)
 81010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010b2:	4a77      	ldr	r2, [pc, #476]	@ (8101290 <MX_GPIO_Init+0x308>)
 81010b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81010b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010bc:	4b74      	ldr	r3, [pc, #464]	@ (8101290 <MX_GPIO_Init+0x308>)
 81010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81010c6:	607b      	str	r3, [r7, #4]
 81010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81010ca:	4b71      	ldr	r3, [pc, #452]	@ (8101290 <MX_GPIO_Init+0x308>)
 81010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010d0:	4a6f      	ldr	r2, [pc, #444]	@ (8101290 <MX_GPIO_Init+0x308>)
 81010d2:	f043 0301 	orr.w	r3, r3, #1
 81010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010da:	4b6d      	ldr	r3, [pc, #436]	@ (8101290 <MX_GPIO_Init+0x308>)
 81010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010e0:	f003 0301 	and.w	r3, r3, #1
 81010e4:	603b      	str	r3, [r7, #0]
 81010e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PI6 PI5 PI4 PI1
                           PI0 PI7 PI2 PI3
                           PI9 PI10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 81010e8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 81010ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010ee:	2302      	movs	r3, #2
 81010f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010f2:	2300      	movs	r3, #0
 81010f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81010f6:	2303      	movs	r3, #3
 81010f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81010fa:	230c      	movs	r3, #12
 81010fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81010fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101102:	4619      	mov	r1, r3
 8101104:	4863      	ldr	r0, [pc, #396]	@ (8101294 <MX_GPIO_Init+0x30c>)
 8101106:	f001 f9a1 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 810110a:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 810110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101110:	2302      	movs	r3, #2
 8101112:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101114:	2300      	movs	r3, #0
 8101116:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101118:	2300      	movs	r3, #0
 810111a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810111c:	2309      	movs	r3, #9
 810111e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101120:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101124:	4619      	mov	r1, r3
 8101126:	485c      	ldr	r0, [pc, #368]	@ (8101298 <MX_GPIO_Init+0x310>)
 8101128:	f001 f990 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_8;
 810112c:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8101130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101132:	2302      	movs	r3, #2
 8101134:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101136:	2300      	movs	r3, #0
 8101138:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810113a:	2303      	movs	r3, #3
 810113c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810113e:	230c      	movs	r3, #12
 8101140:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101142:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101146:	4619      	mov	r1, r3
 8101148:	4854      	ldr	r0, [pc, #336]	@ (810129c <MX_GPIO_Init+0x314>)
 810114a:	f001 f97f 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 810114e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8101152:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101154:	2302      	movs	r3, #2
 8101156:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101158:	2300      	movs	r3, #0
 810115a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810115c:	2303      	movs	r3, #3
 810115e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101160:	230c      	movs	r3, #12
 8101162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101164:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101168:	4619      	mov	r1, r3
 810116a:	484d      	ldr	r0, [pc, #308]	@ (81012a0 <MX_GPIO_Init+0x318>)
 810116c:	f001 f96e 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8101170:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8101174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101176:	2302      	movs	r3, #2
 8101178:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810117a:	2300      	movs	r3, #0
 810117c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810117e:	2300      	movs	r3, #0
 8101180:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101182:	230b      	movs	r3, #11
 8101184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810118a:	4619      	mov	r1, r3
 810118c:	4842      	ldr	r0, [pc, #264]	@ (8101298 <MX_GPIO_Init+0x310>)
 810118e:	f001 f95d 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH14 PH13 PH5
                           PH10 PH11 PH9 PH12
                           PH6 PH8 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_5
 8101192:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8101196:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_12
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101198:	2302      	movs	r3, #2
 810119a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810119c:	2300      	movs	r3, #0
 810119e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011a0:	2303      	movs	r3, #3
 81011a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81011a4:	230c      	movs	r3, #12
 81011a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81011a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81011ac:	4619      	mov	r1, r3
 81011ae:	483d      	ldr	r0, [pc, #244]	@ (81012a4 <MX_GPIO_Init+0x31c>)
 81011b0:	f001 f94c 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG4 PG2
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_2
 81011b4:	f248 1317 	movw	r3, #33047	@ 0x8117
 81011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011ba:	2302      	movs	r3, #2
 81011bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011be:	2300      	movs	r3, #0
 81011c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011c2:	2303      	movs	r3, #3
 81011c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81011c6:	230c      	movs	r3, #12
 81011c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81011ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81011ce:	4619      	mov	r1, r3
 81011d0:	4831      	ldr	r0, [pc, #196]	@ (8101298 <MX_GPIO_Init+0x310>)
 81011d2:	f001 f93b 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 81011d6:	2304      	movs	r3, #4
 81011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011da:	2302      	movs	r3, #2
 81011dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011de:	2300      	movs	r3, #0
 81011e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011e2:	2303      	movs	r3, #3
 81011e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81011e6:	230c      	movs	r3, #12
 81011e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81011ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81011ee:	4619      	mov	r1, r3
 81011f0:	482d      	ldr	r0, [pc, #180]	@ (81012a8 <MX_GPIO_Init+0x320>)
 81011f2:	f001 f92b 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 81011f6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 81011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011fc:	2302      	movs	r3, #2
 81011fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101200:	2300      	movs	r3, #0
 8101202:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101204:	2303      	movs	r3, #3
 8101206:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101208:	230c      	movs	r3, #12
 810120a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810120c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101210:	4619      	mov	r1, r3
 8101212:	4825      	ldr	r0, [pc, #148]	@ (81012a8 <MX_GPIO_Init+0x320>)
 8101214:	f001 f91a 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8101218:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 810121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810121e:	2302      	movs	r3, #2
 8101220:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101222:	2300      	movs	r3, #0
 8101224:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101226:	2303      	movs	r3, #3
 8101228:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810122a:	230c      	movs	r3, #12
 810122c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810122e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101232:	4619      	mov	r1, r3
 8101234:	481d      	ldr	r0, [pc, #116]	@ (81012ac <MX_GPIO_Init+0x324>)
 8101236:	f001 f909 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 810123a:	2340      	movs	r3, #64	@ 0x40
 810123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810123e:	2302      	movs	r3, #2
 8101240:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101242:	2300      	movs	r3, #0
 8101244:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101246:	2300      	movs	r3, #0
 8101248:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 810124a:	230a      	movs	r3, #10
 810124c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810124e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101252:	4619      	mov	r1, r3
 8101254:	4810      	ldr	r0, [pc, #64]	@ (8101298 <MX_GPIO_Init+0x310>)
 8101256:	f001 f8f9 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810125a:	23c0      	movs	r3, #192	@ 0xc0
 810125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810125e:	2302      	movs	r3, #2
 8101260:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101262:	2300      	movs	r3, #0
 8101264:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101266:	2300      	movs	r3, #0
 8101268:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810126a:	2309      	movs	r3, #9
 810126c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810126e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101272:	4619      	mov	r1, r3
 8101274:	480d      	ldr	r0, [pc, #52]	@ (81012ac <MX_GPIO_Init+0x324>)
 8101276:	f001 f8e9 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 810127a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101280:	2303      	movs	r3, #3
 8101282:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101284:	2300      	movs	r3, #0
 8101286:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101288:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810128c:	4619      	mov	r1, r3
 810128e:	e00f      	b.n	81012b0 <MX_GPIO_Init+0x328>
 8101290:	58024400 	.word	0x58024400
 8101294:	58022000 	.word	0x58022000
 8101298:	58021800 	.word	0x58021800
 810129c:	58020800 	.word	0x58020800
 81012a0:	58021000 	.word	0x58021000
 81012a4:	58021c00 	.word	0x58021c00
 81012a8:	58020c00 	.word	0x58020c00
 81012ac:	58021400 	.word	0x58021400
 81012b0:	4848      	ldr	r0, [pc, #288]	@ (81013d4 <MX_GPIO_Init+0x44c>)
 81012b2:	f001 f8cb 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 81012b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012bc:	2302      	movs	r3, #2
 81012be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012c0:	2300      	movs	r3, #0
 81012c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012c4:	2300      	movs	r3, #0
 81012c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81012c8:	230a      	movs	r3, #10
 81012ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81012cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81012d0:	4619      	mov	r1, r3
 81012d2:	4840      	ldr	r0, [pc, #256]	@ (81013d4 <MX_GPIO_Init+0x44c>)
 81012d4:	f001 f8ba 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 81012d8:	2332      	movs	r3, #50	@ 0x32
 81012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012dc:	2302      	movs	r3, #2
 81012de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012e0:	2300      	movs	r3, #0
 81012e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012e4:	2300      	movs	r3, #0
 81012e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81012e8:	230b      	movs	r3, #11
 81012ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81012ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81012f0:	4619      	mov	r1, r3
 81012f2:	4839      	ldr	r0, [pc, #228]	@ (81013d8 <MX_GPIO_Init+0x450>)
 81012f4:	f001 f8aa 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ9 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 81012f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012fe:	2302      	movs	r3, #2
 8101300:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101302:	2300      	movs	r3, #0
 8101304:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101306:	2300      	movs	r3, #0
 8101308:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 810130a:	2308      	movs	r3, #8
 810130c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 810130e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101312:	4619      	mov	r1, r3
 8101314:	4831      	ldr	r0, [pc, #196]	@ (81013dc <MX_GPIO_Init+0x454>)
 8101316:	f001 f899 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 810131a:	230c      	movs	r3, #12
 810131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810131e:	2302      	movs	r3, #2
 8101320:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101322:	2300      	movs	r3, #0
 8101324:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101326:	2300      	movs	r3, #0
 8101328:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810132a:	2309      	movs	r3, #9
 810132c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 810132e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101332:	4619      	mov	r1, r3
 8101334:	482a      	ldr	r0, [pc, #168]	@ (81013e0 <MX_GPIO_Init+0x458>)
 8101336:	f001 f889 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 810133a:	2386      	movs	r3, #134	@ 0x86
 810133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810133e:	2302      	movs	r3, #2
 8101340:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101342:	2300      	movs	r3, #0
 8101344:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101346:	2300      	movs	r3, #0
 8101348:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810134a:	230b      	movs	r3, #11
 810134c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810134e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101352:	4619      	mov	r1, r3
 8101354:	4823      	ldr	r0, [pc, #140]	@ (81013e4 <MX_GPIO_Init+0x45c>)
 8101356:	f001 f879 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 810135a:	2304      	movs	r3, #4
 810135c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810135e:	2302      	movs	r3, #2
 8101360:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101362:	2300      	movs	r3, #0
 8101364:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101366:	2300      	movs	r3, #0
 8101368:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810136a:	2309      	movs	r3, #9
 810136c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810136e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101372:	4619      	mov	r1, r3
 8101374:	481c      	ldr	r0, [pc, #112]	@ (81013e8 <MX_GPIO_Init+0x460>)
 8101376:	f001 f869 	bl	810244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 810137a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101380:	2302      	movs	r3, #2
 8101382:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101384:	2300      	movs	r3, #0
 8101386:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101388:	2300      	movs	r3, #0
 810138a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810138c:	2309      	movs	r3, #9
 810138e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101390:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101394:	4619      	mov	r1, r3
 8101396:	4815      	ldr	r0, [pc, #84]	@ (81013ec <MX_GPIO_Init+0x464>)
 8101398:	f001 f858 	bl	810244c <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 810139c:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 81013a0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 81013a4:	f000 fdec 	bl	8101f80 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81013a8:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 81013ac:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 81013b0:	f000 fde6 	bl	8101f80 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 81013b4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 81013b8:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 81013bc:	f000 fde0 	bl	8101f80 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 81013c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 81013c4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 81013c8:	f000 fdda 	bl	8101f80 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81013cc:	bf00      	nop
 81013ce:	3740      	adds	r7, #64	@ 0x40
 81013d0:	46bd      	mov	sp, r7
 81013d2:	bd80      	pop	{r7, pc}
 81013d4:	58021400 	.word	0x58021400
 81013d8:	58020800 	.word	0x58020800
 81013dc:	58022400 	.word	0x58022400
 81013e0:	58021c00 	.word	0x58021c00
 81013e4:	58020000 	.word	0x58020000
 81013e8:	58020400 	.word	0x58020400
 81013ec:	58020c00 	.word	0x58020c00

081013f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81013f0:	b580      	push	{r7, lr}
 81013f2:	b082      	sub	sp, #8
 81013f4:	af00      	add	r7, sp, #0
 81013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 81013f8:	687b      	ldr	r3, [r7, #4]
 81013fa:	681b      	ldr	r3, [r3, #0]
 81013fc:	4a04      	ldr	r2, [pc, #16]	@ (8101410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81013fe:	4293      	cmp	r3, r2
 8101400:	d101      	bne.n	8101406 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8101402:	f000 fd6d 	bl	8101ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101406:	bf00      	nop
 8101408:	3708      	adds	r7, #8
 810140a:	46bd      	mov	sp, r7
 810140c:	bd80      	pop	{r7, pc}
 810140e:	bf00      	nop
 8101410:	40000400 	.word	0x40000400

08101414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101414:	b480      	push	{r7}
 8101416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101418:	b672      	cpsid	i
}
 810141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810141c:	bf00      	nop
 810141e:	e7fd      	b.n	810141c <Error_Handler+0x8>

08101420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101420:	b580      	push	{r7, lr}
 8101422:	b082      	sub	sp, #8
 8101424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101426:	4b10      	ldr	r3, [pc, #64]	@ (8101468 <HAL_MspInit+0x48>)
 8101428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810142c:	4a0e      	ldr	r2, [pc, #56]	@ (8101468 <HAL_MspInit+0x48>)
 810142e:	f043 0302 	orr.w	r3, r3, #2
 8101432:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101436:	4b0c      	ldr	r3, [pc, #48]	@ (8101468 <HAL_MspInit+0x48>)
 8101438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810143c:	f003 0302 	and.w	r3, r3, #2
 8101440:	607b      	str	r3, [r7, #4]
 8101442:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101444:	2200      	movs	r2, #0
 8101446:	210f      	movs	r1, #15
 8101448:	f06f 0001 	mvn.w	r0, #1
 810144c:	f000 ffc4 	bl	81023d8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 8101450:	2200      	movs	r2, #0
 8101452:	2105      	movs	r1, #5
 8101454:	2040      	movs	r0, #64	@ 0x40
 8101456:	f000 ffbf 	bl	81023d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 810145a:	2040      	movs	r0, #64	@ 0x40
 810145c:	f000 ffd6 	bl	810240c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101460:	bf00      	nop
 8101462:	3708      	adds	r7, #8
 8101464:	46bd      	mov	sp, r7
 8101466:	bd80      	pop	{r7, pc}
 8101468:	58024400 	.word	0x58024400

0810146c <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 810146c:	b580      	push	{r7, lr}
 810146e:	b0bc      	sub	sp, #240	@ 0xf0
 8101470:	af00      	add	r7, sp, #0
 8101472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101474:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101478:	2200      	movs	r2, #0
 810147a:	601a      	str	r2, [r3, #0]
 810147c:	605a      	str	r2, [r3, #4]
 810147e:	609a      	str	r2, [r3, #8]
 8101480:	60da      	str	r2, [r3, #12]
 8101482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101484:	f107 0310 	add.w	r3, r7, #16
 8101488:	22c8      	movs	r2, #200	@ 0xc8
 810148a:	2100      	movs	r1, #0
 810148c:	4618      	mov	r0, r3
 810148e:	f006 fc8d 	bl	8107dac <memset>
  if(hcec->Instance==CEC)
 8101492:	687b      	ldr	r3, [r7, #4]
 8101494:	681b      	ldr	r3, [r3, #0]
 8101496:	4a2b      	ldr	r2, [pc, #172]	@ (8101544 <HAL_CEC_MspInit+0xd8>)
 8101498:	4293      	cmp	r3, r2
 810149a:	d14e      	bne.n	810153a <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 810149c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 81014a0:	f04f 0300 	mov.w	r3, #0
 81014a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 81014a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 81014ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81014b0:	f107 0310 	add.w	r3, r7, #16
 81014b4:	4618      	mov	r0, r3
 81014b6:	f001 fd57 	bl	8102f68 <HAL_RCCEx_PeriphCLKConfig>
 81014ba:	4603      	mov	r3, r0
 81014bc:	2b00      	cmp	r3, #0
 81014be:	d001      	beq.n	81014c4 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 81014c0:	f7ff ffa8 	bl	8101414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 81014c4:	4b20      	ldr	r3, [pc, #128]	@ (8101548 <HAL_CEC_MspInit+0xdc>)
 81014c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81014ca:	4a1f      	ldr	r2, [pc, #124]	@ (8101548 <HAL_CEC_MspInit+0xdc>)
 81014cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 81014d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81014d4:	4b1c      	ldr	r3, [pc, #112]	@ (8101548 <HAL_CEC_MspInit+0xdc>)
 81014d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81014da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81014de:	60fb      	str	r3, [r7, #12]
 81014e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014e2:	4b19      	ldr	r3, [pc, #100]	@ (8101548 <HAL_CEC_MspInit+0xdc>)
 81014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014e8:	4a17      	ldr	r2, [pc, #92]	@ (8101548 <HAL_CEC_MspInit+0xdc>)
 81014ea:	f043 0302 	orr.w	r3, r3, #2
 81014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014f2:	4b15      	ldr	r3, [pc, #84]	@ (8101548 <HAL_CEC_MspInit+0xdc>)
 81014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014f8:	f003 0302 	and.w	r3, r3, #2
 81014fc:	60bb      	str	r3, [r7, #8]
 81014fe:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8101500:	2340      	movs	r3, #64	@ 0x40
 8101502:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101506:	2312      	movs	r3, #18
 8101508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810150c:	2300      	movs	r3, #0
 810150e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101512:	2300      	movs	r3, #0
 8101514:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101518:	2305      	movs	r3, #5
 810151a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 810151e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101522:	4619      	mov	r1, r3
 8101524:	4809      	ldr	r0, [pc, #36]	@ (810154c <HAL_CEC_MspInit+0xe0>)
 8101526:	f000 ff91 	bl	810244c <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 810152a:	2200      	movs	r2, #0
 810152c:	2105      	movs	r1, #5
 810152e:	205e      	movs	r0, #94	@ 0x5e
 8101530:	f000 ff52 	bl	81023d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8101534:	205e      	movs	r0, #94	@ 0x5e
 8101536:	f000 ff69 	bl	810240c <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 810153a:	bf00      	nop
 810153c:	37f0      	adds	r7, #240	@ 0xf0
 810153e:	46bd      	mov	sp, r7
 8101540:	bd80      	pop	{r7, pc}
 8101542:	bf00      	nop
 8101544:	40006c00 	.word	0x40006c00
 8101548:	58024400 	.word	0x58024400
 810154c:	58020400 	.word	0x58020400

08101550 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101550:	b580      	push	{r7, lr}
 8101552:	b0b4      	sub	sp, #208	@ 0xd0
 8101554:	af00      	add	r7, sp, #0
 8101556:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101558:	f107 0308 	add.w	r3, r7, #8
 810155c:	22c8      	movs	r2, #200	@ 0xc8
 810155e:	2100      	movs	r1, #0
 8101560:	4618      	mov	r0, r3
 8101562:	f006 fc23 	bl	8107dac <memset>
  if(hrtc->Instance==RTC)
 8101566:	687b      	ldr	r3, [r7, #4]
 8101568:	681b      	ldr	r3, [r3, #0]
 810156a:	4a10      	ldr	r2, [pc, #64]	@ (81015ac <HAL_RTC_MspInit+0x5c>)
 810156c:	4293      	cmp	r3, r2
 810156e:	d119      	bne.n	81015a4 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101570:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101574:	f04f 0300 	mov.w	r3, #0
 8101578:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 810157c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101580:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101584:	f107 0308 	add.w	r3, r7, #8
 8101588:	4618      	mov	r0, r3
 810158a:	f001 fced 	bl	8102f68 <HAL_RCCEx_PeriphCLKConfig>
 810158e:	4603      	mov	r3, r0
 8101590:	2b00      	cmp	r3, #0
 8101592:	d001      	beq.n	8101598 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8101594:	f7ff ff3e 	bl	8101414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101598:	4b05      	ldr	r3, [pc, #20]	@ (81015b0 <HAL_RTC_MspInit+0x60>)
 810159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810159c:	4a04      	ldr	r2, [pc, #16]	@ (81015b0 <HAL_RTC_MspInit+0x60>)
 810159e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81015a2:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 81015a4:	bf00      	nop
 81015a6:	37d0      	adds	r7, #208	@ 0xd0
 81015a8:	46bd      	mov	sp, r7
 81015aa:	bd80      	pop	{r7, pc}
 81015ac:	58004000 	.word	0x58004000
 81015b0:	58024400 	.word	0x58024400

081015b4 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 81015b4:	b580      	push	{r7, lr}
 81015b6:	b0bc      	sub	sp, #240	@ 0xf0
 81015b8:	af00      	add	r7, sp, #0
 81015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81015c0:	2200      	movs	r2, #0
 81015c2:	601a      	str	r2, [r3, #0]
 81015c4:	605a      	str	r2, [r3, #4]
 81015c6:	609a      	str	r2, [r3, #8]
 81015c8:	60da      	str	r2, [r3, #12]
 81015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81015cc:	f107 0310 	add.w	r3, r7, #16
 81015d0:	22c8      	movs	r2, #200	@ 0xc8
 81015d2:	2100      	movs	r1, #0
 81015d4:	4618      	mov	r0, r3
 81015d6:	f006 fbe9 	bl	8107dac <memset>
  if(hspdifrx->Instance==SPDIFRX)
 81015da:	687b      	ldr	r3, [r7, #4]
 81015dc:	681b      	ldr	r3, [r3, #0]
 81015de:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 81015e2:	d144      	bne.n	810166e <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 81015e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 81015e8:	f04f 0300 	mov.w	r3, #0
 81015ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 81015f0:	2300      	movs	r3, #0
 81015f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015f4:	f107 0310 	add.w	r3, r7, #16
 81015f8:	4618      	mov	r0, r3
 81015fa:	f001 fcb5 	bl	8102f68 <HAL_RCCEx_PeriphCLKConfig>
 81015fe:	4603      	mov	r3, r0
 8101600:	2b00      	cmp	r3, #0
 8101602:	d001      	beq.n	8101608 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8101604:	f7ff ff06 	bl	8101414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101608:	4b1b      	ldr	r3, [pc, #108]	@ (8101678 <HAL_SPDIFRX_MspInit+0xc4>)
 810160a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810160e:	4a1a      	ldr	r2, [pc, #104]	@ (8101678 <HAL_SPDIFRX_MspInit+0xc4>)
 8101610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101614:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101618:	4b17      	ldr	r3, [pc, #92]	@ (8101678 <HAL_SPDIFRX_MspInit+0xc4>)
 810161a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810161e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101622:	60fb      	str	r3, [r7, #12]
 8101624:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101626:	4b14      	ldr	r3, [pc, #80]	@ (8101678 <HAL_SPDIFRX_MspInit+0xc4>)
 8101628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810162c:	4a12      	ldr	r2, [pc, #72]	@ (8101678 <HAL_SPDIFRX_MspInit+0xc4>)
 810162e:	f043 0308 	orr.w	r3, r3, #8
 8101632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101636:	4b10      	ldr	r3, [pc, #64]	@ (8101678 <HAL_SPDIFRX_MspInit+0xc4>)
 8101638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810163c:	f003 0308 	and.w	r3, r3, #8
 8101640:	60bb      	str	r3, [r7, #8]
 8101642:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101644:	2380      	movs	r3, #128	@ 0x80
 8101646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810164a:	2302      	movs	r3, #2
 810164c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101650:	2300      	movs	r3, #0
 8101652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101656:	2300      	movs	r3, #0
 8101658:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 810165c:	2309      	movs	r3, #9
 810165e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101662:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101666:	4619      	mov	r1, r3
 8101668:	4804      	ldr	r0, [pc, #16]	@ (810167c <HAL_SPDIFRX_MspInit+0xc8>)
 810166a:	f000 feef 	bl	810244c <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 810166e:	bf00      	nop
 8101670:	37f0      	adds	r7, #240	@ 0xf0
 8101672:	46bd      	mov	sp, r7
 8101674:	bd80      	pop	{r7, pc}
 8101676:	bf00      	nop
 8101678:	58024400 	.word	0x58024400
 810167c:	58020c00 	.word	0x58020c00

08101680 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101680:	b580      	push	{r7, lr}
 8101682:	b0be      	sub	sp, #248	@ 0xf8
 8101684:	af00      	add	r7, sp, #0
 8101686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101688:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810168c:	2200      	movs	r2, #0
 810168e:	601a      	str	r2, [r3, #0]
 8101690:	605a      	str	r2, [r3, #4]
 8101692:	609a      	str	r2, [r3, #8]
 8101694:	60da      	str	r2, [r3, #12]
 8101696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101698:	f107 0318 	add.w	r3, r7, #24
 810169c:	22c8      	movs	r2, #200	@ 0xc8
 810169e:	2100      	movs	r1, #0
 81016a0:	4618      	mov	r0, r3
 81016a2:	f006 fb83 	bl	8107dac <memset>
  if(hspi->Instance==SPI5)
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	681b      	ldr	r3, [r3, #0]
 81016aa:	4a39      	ldr	r2, [pc, #228]	@ (8101790 <HAL_SPI_MspInit+0x110>)
 81016ac:	4293      	cmp	r3, r2
 81016ae:	d16a      	bne.n	8101786 <HAL_SPI_MspInit+0x106>

    /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 81016b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81016b4:	f04f 0300 	mov.w	r3, #0
 81016b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 81016bc:	2300      	movs	r3, #0
 81016be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016c2:	f107 0318 	add.w	r3, r7, #24
 81016c6:	4618      	mov	r0, r3
 81016c8:	f001 fc4e 	bl	8102f68 <HAL_RCCEx_PeriphCLKConfig>
 81016cc:	4603      	mov	r3, r0
 81016ce:	2b00      	cmp	r3, #0
 81016d0:	d001      	beq.n	81016d6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 81016d2:	f7ff fe9f 	bl	8101414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 81016d6:	4b2f      	ldr	r3, [pc, #188]	@ (8101794 <HAL_SPI_MspInit+0x114>)
 81016d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81016dc:	4a2d      	ldr	r2, [pc, #180]	@ (8101794 <HAL_SPI_MspInit+0x114>)
 81016de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81016e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81016e6:	4b2b      	ldr	r3, [pc, #172]	@ (8101794 <HAL_SPI_MspInit+0x114>)
 81016e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81016ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81016f0:	617b      	str	r3, [r7, #20]
 81016f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 81016f4:	4b27      	ldr	r3, [pc, #156]	@ (8101794 <HAL_SPI_MspInit+0x114>)
 81016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016fa:	4a26      	ldr	r2, [pc, #152]	@ (8101794 <HAL_SPI_MspInit+0x114>)
 81016fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101704:	4b23      	ldr	r3, [pc, #140]	@ (8101794 <HAL_SPI_MspInit+0x114>)
 8101706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810170a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810170e:	613b      	str	r3, [r7, #16]
 8101710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101712:	4b20      	ldr	r3, [pc, #128]	@ (8101794 <HAL_SPI_MspInit+0x114>)
 8101714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101718:	4a1e      	ldr	r2, [pc, #120]	@ (8101794 <HAL_SPI_MspInit+0x114>)
 810171a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810171e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101722:	4b1c      	ldr	r3, [pc, #112]	@ (8101794 <HAL_SPI_MspInit+0x114>)
 8101724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810172c:	60fb      	str	r3, [r7, #12]
 810172e:	68fb      	ldr	r3, [r7, #12]
    PK0     ------> SPI5_SCK
    PK1     ------> SPI5_NSS
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101730:	2303      	movs	r3, #3
 8101732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101736:	2302      	movs	r3, #2
 8101738:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810173c:	2300      	movs	r3, #0
 810173e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101742:	2300      	movs	r3, #0
 8101744:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101748:	2305      	movs	r3, #5
 810174a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 810174e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101752:	4619      	mov	r1, r3
 8101754:	4810      	ldr	r0, [pc, #64]	@ (8101798 <HAL_SPI_MspInit+0x118>)
 8101756:	f000 fe79 	bl	810244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 810175a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 810175e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101762:	2302      	movs	r3, #2
 8101764:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101768:	2300      	movs	r3, #0
 810176a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810176e:	2300      	movs	r3, #0
 8101770:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101774:	2305      	movs	r3, #5
 8101776:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 810177a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810177e:	4619      	mov	r1, r3
 8101780:	4806      	ldr	r0, [pc, #24]	@ (810179c <HAL_SPI_MspInit+0x11c>)
 8101782:	f000 fe63 	bl	810244c <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8101786:	bf00      	nop
 8101788:	37f8      	adds	r7, #248	@ 0xf8
 810178a:	46bd      	mov	sp, r7
 810178c:	bd80      	pop	{r7, pc}
 810178e:	bf00      	nop
 8101790:	40015000 	.word	0x40015000
 8101794:	58024400 	.word	0x58024400
 8101798:	58022800 	.word	0x58022800
 810179c:	58022400 	.word	0x58022400

081017a0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 81017a0:	b580      	push	{r7, lr}
 81017a2:	b0c2      	sub	sp, #264	@ 0x108
 81017a4:	af00      	add	r7, sp, #0
 81017a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81017aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81017ae:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017b0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81017b4:	2200      	movs	r2, #0
 81017b6:	601a      	str	r2, [r3, #0]
 81017b8:	605a      	str	r2, [r3, #4]
 81017ba:	609a      	str	r2, [r3, #8]
 81017bc:	60da      	str	r2, [r3, #12]
 81017be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81017c4:	22c8      	movs	r2, #200	@ 0xc8
 81017c6:	2100      	movs	r1, #0
 81017c8:	4618      	mov	r0, r3
 81017ca:	f006 faef 	bl	8107dac <memset>
  if(hpcd->Instance==USB_OTG_HS)
 81017ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81017d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81017d6:	681b      	ldr	r3, [r3, #0]
 81017d8:	681b      	ldr	r3, [r3, #0]
 81017da:	4a79      	ldr	r2, [pc, #484]	@ (81019c0 <HAL_PCD_MspInit+0x220>)
 81017dc:	4293      	cmp	r3, r2
 81017de:	f040 80ea 	bne.w	81019b6 <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81017e2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 81017e6:	f04f 0300 	mov.w	r3, #0
 81017ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 81017ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 81017f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81017fa:	4618      	mov	r0, r3
 81017fc:	f001 fbb4 	bl	8102f68 <HAL_RCCEx_PeriphCLKConfig>
 8101800:	4603      	mov	r3, r0
 8101802:	2b00      	cmp	r3, #0
 8101804:	d001      	beq.n	810180a <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8101806:	f7ff fe05 	bl	8101414 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 810180a:	f001 f999 	bl	8102b40 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810180e:	4b6d      	ldr	r3, [pc, #436]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 8101810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101814:	4a6b      	ldr	r2, [pc, #428]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 8101816:	f043 0302 	orr.w	r3, r3, #2
 810181a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810181e:	4b69      	ldr	r3, [pc, #420]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 8101820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101824:	f003 0302 	and.w	r3, r3, #2
 8101828:	627b      	str	r3, [r7, #36]	@ 0x24
 810182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 810182c:	4b65      	ldr	r3, [pc, #404]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 810182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101832:	4a64      	ldr	r2, [pc, #400]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 8101834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810183c:	4b61      	ldr	r3, [pc, #388]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 810183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101846:	623b      	str	r3, [r7, #32]
 8101848:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810184a:	4b5e      	ldr	r3, [pc, #376]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 810184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101850:	4a5c      	ldr	r2, [pc, #368]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 8101852:	f043 0304 	orr.w	r3, r3, #4
 8101856:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810185a:	4b5a      	ldr	r3, [pc, #360]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 810185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101860:	f003 0304 	and.w	r3, r3, #4
 8101864:	61fb      	str	r3, [r7, #28]
 8101866:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101868:	4b56      	ldr	r3, [pc, #344]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 810186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810186e:	4a55      	ldr	r2, [pc, #340]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 8101870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101874:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101878:	4b52      	ldr	r3, [pc, #328]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 810187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810187e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101882:	61bb      	str	r3, [r7, #24]
 8101884:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101886:	4b4f      	ldr	r3, [pc, #316]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 8101888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810188c:	4a4d      	ldr	r2, [pc, #308]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 810188e:	f043 0301 	orr.w	r3, r3, #1
 8101892:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101896:	4b4b      	ldr	r3, [pc, #300]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 8101898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810189c:	f003 0301 	and.w	r3, r3, #1
 81018a0:	617b      	str	r3, [r7, #20]
 81018a2:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 81018a4:	f643 4323 	movw	r3, #15395	@ 0x3c23
 81018a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018ac:	2302      	movs	r3, #2
 81018ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018b2:	2300      	movs	r3, #0
 81018b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81018b8:	2302      	movs	r3, #2
 81018ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81018be:	230a      	movs	r3, #10
 81018c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81018c4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81018c8:	4619      	mov	r1, r3
 81018ca:	483f      	ldr	r0, [pc, #252]	@ (81019c8 <HAL_PCD_MspInit+0x228>)
 81018cc:	f000 fdbe 	bl	810244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 81018d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81018d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018d8:	2302      	movs	r3, #2
 81018da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018de:	2300      	movs	r3, #0
 81018e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81018e4:	2302      	movs	r3, #2
 81018e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81018ea:	230a      	movs	r3, #10
 81018ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 81018f0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81018f4:	4619      	mov	r1, r3
 81018f6:	4835      	ldr	r0, [pc, #212]	@ (81019cc <HAL_PCD_MspInit+0x22c>)
 81018f8:	f000 fda8 	bl	810244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 81018fc:	2301      	movs	r3, #1
 81018fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101902:	2302      	movs	r3, #2
 8101904:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101908:	2300      	movs	r3, #0
 810190a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810190e:	2302      	movs	r3, #2
 8101910:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101914:	230a      	movs	r3, #10
 8101916:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 810191a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810191e:	4619      	mov	r1, r3
 8101920:	482b      	ldr	r0, [pc, #172]	@ (81019d0 <HAL_PCD_MspInit+0x230>)
 8101922:	f000 fd93 	bl	810244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8101926:	2310      	movs	r3, #16
 8101928:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810192c:	2302      	movs	r3, #2
 810192e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101932:	2300      	movs	r3, #0
 8101934:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101938:	2302      	movs	r3, #2
 810193a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810193e:	230a      	movs	r3, #10
 8101940:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8101944:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101948:	4619      	mov	r1, r3
 810194a:	4822      	ldr	r0, [pc, #136]	@ (81019d4 <HAL_PCD_MspInit+0x234>)
 810194c:	f000 fd7e 	bl	810244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8101950:	2328      	movs	r3, #40	@ 0x28
 8101952:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101956:	2302      	movs	r3, #2
 8101958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810195c:	2300      	movs	r3, #0
 810195e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101962:	2302      	movs	r3, #2
 8101964:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101968:	230a      	movs	r3, #10
 810196a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810196e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101972:	4619      	mov	r1, r3
 8101974:	4818      	ldr	r0, [pc, #96]	@ (81019d8 <HAL_PCD_MspInit+0x238>)
 8101976:	f000 fd69 	bl	810244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 810197a:	4b12      	ldr	r3, [pc, #72]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 810197c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101980:	4a10      	ldr	r2, [pc, #64]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 8101982:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101986:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810198a:	4b0e      	ldr	r3, [pc, #56]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 810198c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101994:	613b      	str	r3, [r7, #16]
 8101996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8101998:	4b0a      	ldr	r3, [pc, #40]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 810199a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810199e:	4a09      	ldr	r2, [pc, #36]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 81019a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81019a4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81019a8:	4b06      	ldr	r3, [pc, #24]	@ (81019c4 <HAL_PCD_MspInit+0x224>)
 81019aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81019ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 81019b2:	60fb      	str	r3, [r7, #12]
 81019b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 81019b6:	bf00      	nop
 81019b8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 81019bc:	46bd      	mov	sp, r7
 81019be:	bd80      	pop	{r7, pc}
 81019c0:	40040000 	.word	0x40040000
 81019c4:	58024400 	.word	0x58024400
 81019c8:	58020400 	.word	0x58020400
 81019cc:	58022000 	.word	0x58022000
 81019d0:	58020800 	.word	0x58020800
 81019d4:	58021c00 	.word	0x58021c00
 81019d8:	58020000 	.word	0x58020000

081019dc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 81019dc:	b580      	push	{r7, lr}
 81019de:	b0bc      	sub	sp, #240	@ 0xf0
 81019e0:	af00      	add	r7, sp, #0
 81019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81019e4:	f107 0310 	add.w	r3, r7, #16
 81019e8:	22c8      	movs	r2, #200	@ 0xc8
 81019ea:	2100      	movs	r1, #0
 81019ec:	4618      	mov	r0, r3
 81019ee:	f006 f9dd 	bl	8107dac <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 81019f2:	687b      	ldr	r3, [r7, #4]
 81019f4:	681b      	ldr	r3, [r3, #0]
 81019f6:	4a4f      	ldr	r2, [pc, #316]	@ (8101b34 <HAL_SAI_MspInit+0x158>)
 81019f8:	4293      	cmp	r3, r2
 81019fa:	d153      	bne.n	8101aa4 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81019fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101a00:	f04f 0300 	mov.w	r3, #0
 8101a04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101a08:	2300      	movs	r3, #0
 8101a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a0c:	f107 0310 	add.w	r3, r7, #16
 8101a10:	4618      	mov	r0, r3
 8101a12:	f001 faa9 	bl	8102f68 <HAL_RCCEx_PeriphCLKConfig>
 8101a16:	4603      	mov	r3, r0
 8101a18:	2b00      	cmp	r3, #0
 8101a1a:	d001      	beq.n	8101a20 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8101a1c:	f7ff fcfa 	bl	8101414 <Error_Handler>
    }

    if (SAI1_client == 0)
 8101a20:	4b45      	ldr	r3, [pc, #276]	@ (8101b38 <HAL_SAI_MspInit+0x15c>)
 8101a22:	681b      	ldr	r3, [r3, #0]
 8101a24:	2b00      	cmp	r3, #0
 8101a26:	d10e      	bne.n	8101a46 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101a28:	4b44      	ldr	r3, [pc, #272]	@ (8101b3c <HAL_SAI_MspInit+0x160>)
 8101a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101a2e:	4a43      	ldr	r2, [pc, #268]	@ (8101b3c <HAL_SAI_MspInit+0x160>)
 8101a30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101a34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101a38:	4b40      	ldr	r3, [pc, #256]	@ (8101b3c <HAL_SAI_MspInit+0x160>)
 8101a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101a42:	60fb      	str	r3, [r7, #12]
 8101a44:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8101a46:	4b3c      	ldr	r3, [pc, #240]	@ (8101b38 <HAL_SAI_MspInit+0x15c>)
 8101a48:	681b      	ldr	r3, [r3, #0]
 8101a4a:	3301      	adds	r3, #1
 8101a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8101b38 <HAL_SAI_MspInit+0x15c>)
 8101a4e:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8101a50:	2370      	movs	r3, #112	@ 0x70
 8101a52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a56:	2302      	movs	r3, #2
 8101a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a5c:	2300      	movs	r3, #0
 8101a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a62:	2300      	movs	r3, #0
 8101a64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101a68:	2306      	movs	r3, #6
 8101a6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101a6e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101a72:	4619      	mov	r1, r3
 8101a74:	4832      	ldr	r0, [pc, #200]	@ (8101b40 <HAL_SAI_MspInit+0x164>)
 8101a76:	f000 fce9 	bl	810244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8101a7a:	2380      	movs	r3, #128	@ 0x80
 8101a7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a80:	2302      	movs	r3, #2
 8101a82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a86:	2300      	movs	r3, #0
 8101a88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a8c:	2300      	movs	r3, #0
 8101a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101a92:	2306      	movs	r3, #6
 8101a94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 8101a98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101a9c:	4619      	mov	r1, r3
 8101a9e:	4829      	ldr	r0, [pc, #164]	@ (8101b44 <HAL_SAI_MspInit+0x168>)
 8101aa0:	f000 fcd4 	bl	810244c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	681b      	ldr	r3, [r3, #0]
 8101aa8:	4a27      	ldr	r2, [pc, #156]	@ (8101b48 <HAL_SAI_MspInit+0x16c>)
 8101aaa:	4293      	cmp	r3, r2
 8101aac:	d13e      	bne.n	8101b2c <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8101aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101ab2:	f04f 0300 	mov.w	r3, #0
 8101ab6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101aba:	2300      	movs	r3, #0
 8101abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101abe:	f107 0310 	add.w	r3, r7, #16
 8101ac2:	4618      	mov	r0, r3
 8101ac4:	f001 fa50 	bl	8102f68 <HAL_RCCEx_PeriphCLKConfig>
 8101ac8:	4603      	mov	r3, r0
 8101aca:	2b00      	cmp	r3, #0
 8101acc:	d001      	beq.n	8101ad2 <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 8101ace:	f7ff fca1 	bl	8101414 <Error_Handler>
    }

      if (SAI1_client == 0)
 8101ad2:	4b19      	ldr	r3, [pc, #100]	@ (8101b38 <HAL_SAI_MspInit+0x15c>)
 8101ad4:	681b      	ldr	r3, [r3, #0]
 8101ad6:	2b00      	cmp	r3, #0
 8101ad8:	d10e      	bne.n	8101af8 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101ada:	4b18      	ldr	r3, [pc, #96]	@ (8101b3c <HAL_SAI_MspInit+0x160>)
 8101adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101ae0:	4a16      	ldr	r2, [pc, #88]	@ (8101b3c <HAL_SAI_MspInit+0x160>)
 8101ae2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101aea:	4b14      	ldr	r3, [pc, #80]	@ (8101b3c <HAL_SAI_MspInit+0x160>)
 8101aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101af0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101af4:	60bb      	str	r3, [r7, #8]
 8101af6:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8101af8:	4b0f      	ldr	r3, [pc, #60]	@ (8101b38 <HAL_SAI_MspInit+0x15c>)
 8101afa:	681b      	ldr	r3, [r3, #0]
 8101afc:	3301      	adds	r3, #1
 8101afe:	4a0e      	ldr	r2, [pc, #56]	@ (8101b38 <HAL_SAI_MspInit+0x15c>)
 8101b00:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8101b02:	2308      	movs	r3, #8
 8101b04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b08:	2302      	movs	r3, #2
 8101b0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b0e:	2300      	movs	r3, #0
 8101b10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b14:	2300      	movs	r3, #0
 8101b16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101b1a:	2306      	movs	r3, #6
 8101b1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8101b20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101b24:	4619      	mov	r1, r3
 8101b26:	4806      	ldr	r0, [pc, #24]	@ (8101b40 <HAL_SAI_MspInit+0x164>)
 8101b28:	f000 fc90 	bl	810244c <HAL_GPIO_Init>

    }
}
 8101b2c:	bf00      	nop
 8101b2e:	37f0      	adds	r7, #240	@ 0xf0
 8101b30:	46bd      	mov	sp, r7
 8101b32:	bd80      	pop	{r7, pc}
 8101b34:	40015804 	.word	0x40015804
 8101b38:	10000800 	.word	0x10000800
 8101b3c:	58024400 	.word	0x58024400
 8101b40:	58021000 	.word	0x58021000
 8101b44:	58021800 	.word	0x58021800
 8101b48:	40015824 	.word	0x40015824

08101b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101b4c:	b580      	push	{r7, lr}
 8101b4e:	b090      	sub	sp, #64	@ 0x40
 8101b50:	af00      	add	r7, sp, #0
 8101b52:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	2b0f      	cmp	r3, #15
 8101b58:	d827      	bhi.n	8101baa <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8101b5a:	2200      	movs	r2, #0
 8101b5c:	6879      	ldr	r1, [r7, #4]
 8101b5e:	201d      	movs	r0, #29
 8101b60:	f000 fc3a 	bl	81023d8 <HAL_NVIC_SetPriority>

     /* Enable the TIM3 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8101b64:	201d      	movs	r0, #29
 8101b66:	f000 fc51 	bl	810240c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8101b6a:	4a29      	ldr	r2, [pc, #164]	@ (8101c10 <HAL_InitTick+0xc4>)
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8101b70:	4b28      	ldr	r3, [pc, #160]	@ (8101c14 <HAL_InitTick+0xc8>)
 8101b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b76:	4a27      	ldr	r2, [pc, #156]	@ (8101c14 <HAL_InitTick+0xc8>)
 8101b78:	f043 0302 	orr.w	r3, r3, #2
 8101b7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101b80:	4b24      	ldr	r3, [pc, #144]	@ (8101c14 <HAL_InitTick+0xc8>)
 8101b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b86:	f003 0302 	and.w	r3, r3, #2
 8101b8a:	60fb      	str	r3, [r7, #12]
 8101b8c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101b8e:	f107 0210 	add.w	r2, r7, #16
 8101b92:	f107 0314 	add.w	r3, r7, #20
 8101b96:	4611      	mov	r1, r2
 8101b98:	4618      	mov	r0, r3
 8101b9a:	f001 f9a3 	bl	8102ee4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8101b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8101ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101ba4:	2b00      	cmp	r3, #0
 8101ba6:	d106      	bne.n	8101bb6 <HAL_InitTick+0x6a>
 8101ba8:	e001      	b.n	8101bae <HAL_InitTick+0x62>
    return HAL_ERROR;
 8101baa:	2301      	movs	r3, #1
 8101bac:	e02b      	b.n	8101c06 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8101bae:	f001 f983 	bl	8102eb8 <HAL_RCC_GetPCLK1Freq>
 8101bb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8101bb4:	e004      	b.n	8101bc0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8101bb6:	f001 f97f 	bl	8102eb8 <HAL_RCC_GetPCLK1Freq>
 8101bba:	4603      	mov	r3, r0
 8101bbc:	005b      	lsls	r3, r3, #1
 8101bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101bc2:	4a15      	ldr	r2, [pc, #84]	@ (8101c18 <HAL_InitTick+0xcc>)
 8101bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8101bc8:	0c9b      	lsrs	r3, r3, #18
 8101bca:	3b01      	subs	r3, #1
 8101bcc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8101bce:	4b13      	ldr	r3, [pc, #76]	@ (8101c1c <HAL_InitTick+0xd0>)
 8101bd0:	4a13      	ldr	r2, [pc, #76]	@ (8101c20 <HAL_InitTick+0xd4>)
 8101bd2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8101bd4:	4b11      	ldr	r3, [pc, #68]	@ (8101c1c <HAL_InitTick+0xd0>)
 8101bd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8101bda:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8101bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8101c1c <HAL_InitTick+0xd0>)
 8101bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101be0:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8101be2:	4b0e      	ldr	r3, [pc, #56]	@ (8101c1c <HAL_InitTick+0xd0>)
 8101be4:	2200      	movs	r2, #0
 8101be6:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101be8:	4b0c      	ldr	r3, [pc, #48]	@ (8101c1c <HAL_InitTick+0xd0>)
 8101bea:	2200      	movs	r2, #0
 8101bec:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8101bee:	480b      	ldr	r0, [pc, #44]	@ (8101c1c <HAL_InitTick+0xd0>)
 8101bf0:	f004 fd81 	bl	81066f6 <HAL_TIM_Base_Init>
 8101bf4:	4603      	mov	r3, r0
 8101bf6:	2b00      	cmp	r3, #0
 8101bf8:	d104      	bne.n	8101c04 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8101bfa:	4808      	ldr	r0, [pc, #32]	@ (8101c1c <HAL_InitTick+0xd0>)
 8101bfc:	f004 fddc 	bl	81067b8 <HAL_TIM_Base_Start_IT>
 8101c00:	4603      	mov	r3, r0
 8101c02:	e000      	b.n	8101c06 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8101c04:	2301      	movs	r3, #1
}
 8101c06:	4618      	mov	r0, r3
 8101c08:	3740      	adds	r7, #64	@ 0x40
 8101c0a:	46bd      	mov	sp, r7
 8101c0c:	bd80      	pop	{r7, pc}
 8101c0e:	bf00      	nop
 8101c10:	10000008 	.word	0x10000008
 8101c14:	58024400 	.word	0x58024400
 8101c18:	431bde83 	.word	0x431bde83
 8101c1c:	10000804 	.word	0x10000804
 8101c20:	40000400 	.word	0x40000400

08101c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101c24:	b480      	push	{r7}
 8101c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101c28:	bf00      	nop
 8101c2a:	e7fd      	b.n	8101c28 <NMI_Handler+0x4>

08101c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101c2c:	b480      	push	{r7}
 8101c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101c30:	bf00      	nop
 8101c32:	e7fd      	b.n	8101c30 <HardFault_Handler+0x4>

08101c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101c34:	b480      	push	{r7}
 8101c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101c38:	bf00      	nop
 8101c3a:	e7fd      	b.n	8101c38 <MemManage_Handler+0x4>

08101c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101c3c:	b480      	push	{r7}
 8101c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101c40:	bf00      	nop
 8101c42:	e7fd      	b.n	8101c40 <BusFault_Handler+0x4>

08101c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101c44:	b480      	push	{r7}
 8101c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101c48:	bf00      	nop
 8101c4a:	e7fd      	b.n	8101c48 <UsageFault_Handler+0x4>

08101c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101c4c:	b480      	push	{r7}
 8101c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101c50:	bf00      	nop
 8101c52:	46bd      	mov	sp, r7
 8101c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c58:	4770      	bx	lr
	...

08101c5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8101c5c:	b580      	push	{r7, lr}
 8101c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8101c60:	4802      	ldr	r0, [pc, #8]	@ (8101c6c <TIM3_IRQHandler+0x10>)
 8101c62:	f004 fe21 	bl	81068a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8101c66:	bf00      	nop
 8101c68:	bd80      	pop	{r7, pc}
 8101c6a:	bf00      	nop
 8101c6c:	10000804 	.word	0x10000804

08101c70 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8101c70:	b580      	push	{r7, lr}
 8101c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8101c74:	4802      	ldr	r0, [pc, #8]	@ (8101c80 <CEC_IRQHandler+0x10>)
 8101c76:	f000 f9fb 	bl	8102070 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8101c7a:	bf00      	nop
 8101c7c:	bd80      	pop	{r7, pc}
 8101c7e:	bf00      	nop
 8101c80:	1000009c 	.word	0x1000009c

08101c84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101c84:	b580      	push	{r7, lr}
 8101c86:	b086      	sub	sp, #24
 8101c88:	af00      	add	r7, sp, #0
 8101c8a:	60f8      	str	r0, [r7, #12]
 8101c8c:	60b9      	str	r1, [r7, #8]
 8101c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101c90:	2300      	movs	r3, #0
 8101c92:	617b      	str	r3, [r7, #20]
 8101c94:	e00a      	b.n	8101cac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101c96:	f3af 8000 	nop.w
 8101c9a:	4601      	mov	r1, r0
 8101c9c:	68bb      	ldr	r3, [r7, #8]
 8101c9e:	1c5a      	adds	r2, r3, #1
 8101ca0:	60ba      	str	r2, [r7, #8]
 8101ca2:	b2ca      	uxtb	r2, r1
 8101ca4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ca6:	697b      	ldr	r3, [r7, #20]
 8101ca8:	3301      	adds	r3, #1
 8101caa:	617b      	str	r3, [r7, #20]
 8101cac:	697a      	ldr	r2, [r7, #20]
 8101cae:	687b      	ldr	r3, [r7, #4]
 8101cb0:	429a      	cmp	r2, r3
 8101cb2:	dbf0      	blt.n	8101c96 <_read+0x12>
  }

  return len;
 8101cb4:	687b      	ldr	r3, [r7, #4]
}
 8101cb6:	4618      	mov	r0, r3
 8101cb8:	3718      	adds	r7, #24
 8101cba:	46bd      	mov	sp, r7
 8101cbc:	bd80      	pop	{r7, pc}

08101cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101cbe:	b580      	push	{r7, lr}
 8101cc0:	b086      	sub	sp, #24
 8101cc2:	af00      	add	r7, sp, #0
 8101cc4:	60f8      	str	r0, [r7, #12]
 8101cc6:	60b9      	str	r1, [r7, #8]
 8101cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101cca:	2300      	movs	r3, #0
 8101ccc:	617b      	str	r3, [r7, #20]
 8101cce:	e009      	b.n	8101ce4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101cd0:	68bb      	ldr	r3, [r7, #8]
 8101cd2:	1c5a      	adds	r2, r3, #1
 8101cd4:	60ba      	str	r2, [r7, #8]
 8101cd6:	781b      	ldrb	r3, [r3, #0]
 8101cd8:	4618      	mov	r0, r3
 8101cda:	f7fe fb51 	bl	8100380 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101cde:	697b      	ldr	r3, [r7, #20]
 8101ce0:	3301      	adds	r3, #1
 8101ce2:	617b      	str	r3, [r7, #20]
 8101ce4:	697a      	ldr	r2, [r7, #20]
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	429a      	cmp	r2, r3
 8101cea:	dbf1      	blt.n	8101cd0 <_write+0x12>
  }
  return len;
 8101cec:	687b      	ldr	r3, [r7, #4]
}
 8101cee:	4618      	mov	r0, r3
 8101cf0:	3718      	adds	r7, #24
 8101cf2:	46bd      	mov	sp, r7
 8101cf4:	bd80      	pop	{r7, pc}

08101cf6 <_close>:

int _close(int file)
{
 8101cf6:	b480      	push	{r7}
 8101cf8:	b083      	sub	sp, #12
 8101cfa:	af00      	add	r7, sp, #0
 8101cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101d02:	4618      	mov	r0, r3
 8101d04:	370c      	adds	r7, #12
 8101d06:	46bd      	mov	sp, r7
 8101d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d0c:	4770      	bx	lr

08101d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101d0e:	b480      	push	{r7}
 8101d10:	b083      	sub	sp, #12
 8101d12:	af00      	add	r7, sp, #0
 8101d14:	6078      	str	r0, [r7, #4]
 8101d16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101d18:	683b      	ldr	r3, [r7, #0]
 8101d1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101d1e:	605a      	str	r2, [r3, #4]
  return 0;
 8101d20:	2300      	movs	r3, #0
}
 8101d22:	4618      	mov	r0, r3
 8101d24:	370c      	adds	r7, #12
 8101d26:	46bd      	mov	sp, r7
 8101d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d2c:	4770      	bx	lr

08101d2e <_isatty>:

int _isatty(int file)
{
 8101d2e:	b480      	push	{r7}
 8101d30:	b083      	sub	sp, #12
 8101d32:	af00      	add	r7, sp, #0
 8101d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101d36:	2301      	movs	r3, #1
}
 8101d38:	4618      	mov	r0, r3
 8101d3a:	370c      	adds	r7, #12
 8101d3c:	46bd      	mov	sp, r7
 8101d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d42:	4770      	bx	lr

08101d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101d44:	b480      	push	{r7}
 8101d46:	b085      	sub	sp, #20
 8101d48:	af00      	add	r7, sp, #0
 8101d4a:	60f8      	str	r0, [r7, #12]
 8101d4c:	60b9      	str	r1, [r7, #8]
 8101d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101d50:	2300      	movs	r3, #0
}
 8101d52:	4618      	mov	r0, r3
 8101d54:	3714      	adds	r7, #20
 8101d56:	46bd      	mov	sp, r7
 8101d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d5c:	4770      	bx	lr
	...

08101d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101d60:	b580      	push	{r7, lr}
 8101d62:	b086      	sub	sp, #24
 8101d64:	af00      	add	r7, sp, #0
 8101d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101d68:	4a14      	ldr	r2, [pc, #80]	@ (8101dbc <_sbrk+0x5c>)
 8101d6a:	4b15      	ldr	r3, [pc, #84]	@ (8101dc0 <_sbrk+0x60>)
 8101d6c:	1ad3      	subs	r3, r2, r3
 8101d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101d70:	697b      	ldr	r3, [r7, #20]
 8101d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101d74:	4b13      	ldr	r3, [pc, #76]	@ (8101dc4 <_sbrk+0x64>)
 8101d76:	681b      	ldr	r3, [r3, #0]
 8101d78:	2b00      	cmp	r3, #0
 8101d7a:	d102      	bne.n	8101d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101d7c:	4b11      	ldr	r3, [pc, #68]	@ (8101dc4 <_sbrk+0x64>)
 8101d7e:	4a12      	ldr	r2, [pc, #72]	@ (8101dc8 <_sbrk+0x68>)
 8101d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101d82:	4b10      	ldr	r3, [pc, #64]	@ (8101dc4 <_sbrk+0x64>)
 8101d84:	681a      	ldr	r2, [r3, #0]
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	4413      	add	r3, r2
 8101d8a:	693a      	ldr	r2, [r7, #16]
 8101d8c:	429a      	cmp	r2, r3
 8101d8e:	d207      	bcs.n	8101da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101d90:	f006 f85a 	bl	8107e48 <__errno>
 8101d94:	4603      	mov	r3, r0
 8101d96:	220c      	movs	r2, #12
 8101d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8101d9e:	e009      	b.n	8101db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101da0:	4b08      	ldr	r3, [pc, #32]	@ (8101dc4 <_sbrk+0x64>)
 8101da2:	681b      	ldr	r3, [r3, #0]
 8101da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101da6:	4b07      	ldr	r3, [pc, #28]	@ (8101dc4 <_sbrk+0x64>)
 8101da8:	681a      	ldr	r2, [r3, #0]
 8101daa:	687b      	ldr	r3, [r7, #4]
 8101dac:	4413      	add	r3, r2
 8101dae:	4a05      	ldr	r2, [pc, #20]	@ (8101dc4 <_sbrk+0x64>)
 8101db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101db2:	68fb      	ldr	r3, [r7, #12]
}
 8101db4:	4618      	mov	r0, r3
 8101db6:	3718      	adds	r7, #24
 8101db8:	46bd      	mov	sp, r7
 8101dba:	bd80      	pop	{r7, pc}
 8101dbc:	10048000 	.word	0x10048000
 8101dc0:	00000400 	.word	0x00000400
 8101dc4:	10000850 	.word	0x10000850
 8101dc8:	10000e30 	.word	0x10000e30

08101dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101dcc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8101e08 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8101dd0:	f7fe fb98 	bl	8100504 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8101dd4:	f7fe fb7e 	bl	81004d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101dd8:	480c      	ldr	r0, [pc, #48]	@ (8101e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101dda:	490d      	ldr	r1, [pc, #52]	@ (8101e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8101e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101de0:	e002      	b.n	8101de8 <LoopCopyDataInit>

08101de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101de6:	3304      	adds	r3, #4

08101de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101dec:	d3f9      	bcc.n	8101de2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101dee:	4a0a      	ldr	r2, [pc, #40]	@ (8101e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101df0:	4c0a      	ldr	r4, [pc, #40]	@ (8101e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8101df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101df4:	e001      	b.n	8101dfa <LoopFillZerobss>

08101df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101df8:	3204      	adds	r2, #4

08101dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101dfc:	d3fb      	bcc.n	8101df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101dfe:	f006 f829 	bl	8107e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101e02:	f7fe fe6b 	bl	8100adc <main>
  bx  lr
 8101e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101e08:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101e0c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101e10:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 8101e14:	08108988 	.word	0x08108988
  ldr r2, =_sbss
 8101e18:	1000006c 	.word	0x1000006c
  ldr r4, =_ebss
 8101e1c:	10000e30 	.word	0x10000e30

08101e20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101e20:	e7fe      	b.n	8101e20 <ADC3_IRQHandler>
	...

08101e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101e24:	b580      	push	{r7, lr}
 8101e26:	b082      	sub	sp, #8
 8101e28:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101e2a:	4b28      	ldr	r3, [pc, #160]	@ (8101ecc <HAL_Init+0xa8>)
 8101e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e30:	4a26      	ldr	r2, [pc, #152]	@ (8101ecc <HAL_Init+0xa8>)
 8101e32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101e36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101e3a:	4b24      	ldr	r3, [pc, #144]	@ (8101ecc <HAL_Init+0xa8>)
 8101e3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101e44:	603b      	str	r3, [r7, #0]
 8101e46:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101e48:	4b21      	ldr	r3, [pc, #132]	@ (8101ed0 <HAL_Init+0xac>)
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101e50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101e54:	4a1e      	ldr	r2, [pc, #120]	@ (8101ed0 <HAL_Init+0xac>)
 8101e56:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8101e5a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8101ed0 <HAL_Init+0xac>)
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	4a1b      	ldr	r2, [pc, #108]	@ (8101ed0 <HAL_Init+0xac>)
 8101e62:	f043 0301 	orr.w	r3, r3, #1
 8101e66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101e68:	2003      	movs	r0, #3
 8101e6a:	f000 faaa 	bl	81023c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101e6e:	f000 fe77 	bl	8102b60 <HAL_RCC_GetSysClockFreq>
 8101e72:	4602      	mov	r2, r0
 8101e74:	4b15      	ldr	r3, [pc, #84]	@ (8101ecc <HAL_Init+0xa8>)
 8101e76:	699b      	ldr	r3, [r3, #24]
 8101e78:	0a1b      	lsrs	r3, r3, #8
 8101e7a:	f003 030f 	and.w	r3, r3, #15
 8101e7e:	4915      	ldr	r1, [pc, #84]	@ (8101ed4 <HAL_Init+0xb0>)
 8101e80:	5ccb      	ldrb	r3, [r1, r3]
 8101e82:	f003 031f 	and.w	r3, r3, #31
 8101e86:	fa22 f303 	lsr.w	r3, r2, r3
 8101e8a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8101ecc <HAL_Init+0xa8>)
 8101e8e:	699b      	ldr	r3, [r3, #24]
 8101e90:	f003 030f 	and.w	r3, r3, #15
 8101e94:	4a0f      	ldr	r2, [pc, #60]	@ (8101ed4 <HAL_Init+0xb0>)
 8101e96:	5cd3      	ldrb	r3, [r2, r3]
 8101e98:	f003 031f 	and.w	r3, r3, #31
 8101e9c:	687a      	ldr	r2, [r7, #4]
 8101e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8101ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8101ed8 <HAL_Init+0xb4>)
 8101ea4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8101ed8 <HAL_Init+0xb4>)
 8101ea8:	681b      	ldr	r3, [r3, #0]
 8101eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8101edc <HAL_Init+0xb8>)
 8101eac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101eae:	200f      	movs	r0, #15
 8101eb0:	f7ff fe4c 	bl	8101b4c <HAL_InitTick>
 8101eb4:	4603      	mov	r3, r0
 8101eb6:	2b00      	cmp	r3, #0
 8101eb8:	d001      	beq.n	8101ebe <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101eba:	2301      	movs	r3, #1
 8101ebc:	e002      	b.n	8101ec4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101ebe:	f7ff faaf 	bl	8101420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101ec2:	2300      	movs	r3, #0
}
 8101ec4:	4618      	mov	r0, r3
 8101ec6:	3708      	adds	r7, #8
 8101ec8:	46bd      	mov	sp, r7
 8101eca:	bd80      	pop	{r7, pc}
 8101ecc:	58024400 	.word	0x58024400
 8101ed0:	40024400 	.word	0x40024400
 8101ed4:	08108934 	.word	0x08108934
 8101ed8:	10000004 	.word	0x10000004
 8101edc:	10000000 	.word	0x10000000

08101ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101ee0:	b480      	push	{r7}
 8101ee2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101ee4:	4b06      	ldr	r3, [pc, #24]	@ (8101f00 <HAL_IncTick+0x20>)
 8101ee6:	781b      	ldrb	r3, [r3, #0]
 8101ee8:	461a      	mov	r2, r3
 8101eea:	4b06      	ldr	r3, [pc, #24]	@ (8101f04 <HAL_IncTick+0x24>)
 8101eec:	681b      	ldr	r3, [r3, #0]
 8101eee:	4413      	add	r3, r2
 8101ef0:	4a04      	ldr	r2, [pc, #16]	@ (8101f04 <HAL_IncTick+0x24>)
 8101ef2:	6013      	str	r3, [r2, #0]
}
 8101ef4:	bf00      	nop
 8101ef6:	46bd      	mov	sp, r7
 8101ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101efc:	4770      	bx	lr
 8101efe:	bf00      	nop
 8101f00:	1000000c 	.word	0x1000000c
 8101f04:	10000854 	.word	0x10000854

08101f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101f08:	b480      	push	{r7}
 8101f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8101f0c:	4b03      	ldr	r3, [pc, #12]	@ (8101f1c <HAL_GetTick+0x14>)
 8101f0e:	681b      	ldr	r3, [r3, #0]
}
 8101f10:	4618      	mov	r0, r3
 8101f12:	46bd      	mov	sp, r7
 8101f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f18:	4770      	bx	lr
 8101f1a:	bf00      	nop
 8101f1c:	10000854 	.word	0x10000854

08101f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101f20:	b580      	push	{r7, lr}
 8101f22:	b084      	sub	sp, #16
 8101f24:	af00      	add	r7, sp, #0
 8101f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101f28:	f7ff ffee 	bl	8101f08 <HAL_GetTick>
 8101f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101f2e:	687b      	ldr	r3, [r7, #4]
 8101f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101f32:	68fb      	ldr	r3, [r7, #12]
 8101f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101f38:	d005      	beq.n	8101f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8101f64 <HAL_Delay+0x44>)
 8101f3c:	781b      	ldrb	r3, [r3, #0]
 8101f3e:	461a      	mov	r2, r3
 8101f40:	68fb      	ldr	r3, [r7, #12]
 8101f42:	4413      	add	r3, r2
 8101f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101f46:	bf00      	nop
 8101f48:	f7ff ffde 	bl	8101f08 <HAL_GetTick>
 8101f4c:	4602      	mov	r2, r0
 8101f4e:	68bb      	ldr	r3, [r7, #8]
 8101f50:	1ad3      	subs	r3, r2, r3
 8101f52:	68fa      	ldr	r2, [r7, #12]
 8101f54:	429a      	cmp	r2, r3
 8101f56:	d8f7      	bhi.n	8101f48 <HAL_Delay+0x28>
  {
  }
}
 8101f58:	bf00      	nop
 8101f5a:	bf00      	nop
 8101f5c:	3710      	adds	r7, #16
 8101f5e:	46bd      	mov	sp, r7
 8101f60:	bd80      	pop	{r7, pc}
 8101f62:	bf00      	nop
 8101f64:	1000000c 	.word	0x1000000c

08101f68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101f68:	b480      	push	{r7}
 8101f6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101f6c:	4b03      	ldr	r3, [pc, #12]	@ (8101f7c <HAL_GetREVID+0x14>)
 8101f6e:	681b      	ldr	r3, [r3, #0]
 8101f70:	0c1b      	lsrs	r3, r3, #16
}
 8101f72:	4618      	mov	r0, r3
 8101f74:	46bd      	mov	sp, r7
 8101f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f7a:	4770      	bx	lr
 8101f7c:	5c001000 	.word	0x5c001000

08101f80 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8101f80:	b480      	push	{r7}
 8101f82:	b083      	sub	sp, #12
 8101f84:	af00      	add	r7, sp, #0
 8101f86:	6078      	str	r0, [r7, #4]
 8101f88:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8101f8a:	4b07      	ldr	r3, [pc, #28]	@ (8101fa8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101f8c:	685a      	ldr	r2, [r3, #4]
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	43db      	mvns	r3, r3
 8101f92:	401a      	ands	r2, r3
 8101f94:	4904      	ldr	r1, [pc, #16]	@ (8101fa8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101f96:	683b      	ldr	r3, [r7, #0]
 8101f98:	4313      	orrs	r3, r2
 8101f9a:	604b      	str	r3, [r1, #4]
}
 8101f9c:	bf00      	nop
 8101f9e:	370c      	adds	r7, #12
 8101fa0:	46bd      	mov	sp, r7
 8101fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fa6:	4770      	bx	lr
 8101fa8:	58000400 	.word	0x58000400

08101fac <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8101fac:	b580      	push	{r7, lr}
 8101fae:	b082      	sub	sp, #8
 8101fb0:	af00      	add	r7, sp, #0
 8101fb2:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	2b00      	cmp	r3, #0
 8101fb8:	d003      	beq.n	8101fc2 <HAL_CEC_Init+0x16>
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101fbe:	2b00      	cmp	r3, #0
 8101fc0:	d101      	bne.n	8101fc6 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8101fc2:	2301      	movs	r3, #1
 8101fc4:	e050      	b.n	8102068 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101fca:	2b00      	cmp	r3, #0
 8101fcc:	d106      	bne.n	8101fdc <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	2200      	movs	r2, #0
 8101fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8101fd6:	6878      	ldr	r0, [r7, #4]
 8101fd8:	f7ff fa48 	bl	810146c <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	2224      	movs	r2, #36	@ 0x24
 8101fe0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	681b      	ldr	r3, [r3, #0]
 8101fe6:	681a      	ldr	r2, [r3, #0]
 8101fe8:	687b      	ldr	r3, [r7, #4]
 8101fea:	681b      	ldr	r3, [r3, #0]
 8101fec:	f022 0201 	bic.w	r2, r2, #1
 8101ff0:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8101ff2:	687b      	ldr	r3, [r7, #4]
 8101ff4:	685a      	ldr	r2, [r3, #4]
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	689b      	ldr	r3, [r3, #8]
 8101ffa:	431a      	orrs	r2, r3
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	68db      	ldr	r3, [r3, #12]
 8102000:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102006:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	695b      	ldr	r3, [r3, #20]
 810200c:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102012:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8102018:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810201e:	041b      	lsls	r3, r3, #16
 8102020:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8102024:	687b      	ldr	r3, [r7, #4]
 8102026:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 810202c:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810202e:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8102030:	687b      	ldr	r3, [r7, #4]
 8102032:	681b      	ldr	r3, [r3, #0]
 8102034:	695b      	ldr	r3, [r3, #20]
 8102036:	687a      	ldr	r2, [r7, #4]
 8102038:	6812      	ldr	r2, [r2, #0]
 810203a:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 810203e:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8102042:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	681b      	ldr	r3, [r3, #0]
 8102048:	681a      	ldr	r2, [r3, #0]
 810204a:	687b      	ldr	r3, [r7, #4]
 810204c:	681b      	ldr	r3, [r3, #0]
 810204e:	f042 0201 	orr.w	r2, r2, #1
 8102052:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102054:	687b      	ldr	r3, [r7, #4]
 8102056:	2200      	movs	r2, #0
 8102058:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	2220      	movs	r2, #32
 810205e:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	2220      	movs	r2, #32
 8102064:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8102066:	2300      	movs	r3, #0
}
 8102068:	4618      	mov	r0, r3
 810206a:	3708      	adds	r7, #8
 810206c:	46bd      	mov	sp, r7
 810206e:	bd80      	pop	{r7, pc}

08102070 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8102070:	b580      	push	{r7, lr}
 8102072:	b084      	sub	sp, #16
 8102074:	af00      	add	r7, sp, #0
 8102076:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	681b      	ldr	r3, [r3, #0]
 810207c:	691b      	ldr	r3, [r3, #16]
 810207e:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8102080:	68fb      	ldr	r3, [r7, #12]
 8102082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102086:	2b00      	cmp	r3, #0
 8102088:	d00a      	beq.n	81020a0 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	2280      	movs	r2, #128	@ 0x80
 810208e:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8102090:	687b      	ldr	r3, [r7, #4]
 8102092:	681b      	ldr	r3, [r3, #0]
 8102094:	691a      	ldr	r2, [r3, #16]
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	681b      	ldr	r3, [r3, #0]
 810209a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 810209e:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 81020a0:	68fb      	ldr	r3, [r7, #12]
 81020a2:	f003 0301 	and.w	r3, r3, #1
 81020a6:	2b00      	cmp	r3, #0
 81020a8:	d01c      	beq.n	81020e4 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	2222      	movs	r2, #34	@ 0x22
 81020ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 81020b0:	687b      	ldr	r3, [r7, #4]
 81020b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81020b4:	3301      	adds	r3, #1
 81020b6:	b29a      	uxth	r2, r3
 81020b8:	687b      	ldr	r3, [r7, #4]
 81020ba:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	68da      	ldr	r2, [r3, #12]
 81020c2:	687b      	ldr	r3, [r7, #4]
 81020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81020c6:	b2d2      	uxtb	r2, r2
 81020c8:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81020ce:	1c5a      	adds	r2, r3, #1
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	681b      	ldr	r3, [r3, #0]
 81020d8:	691a      	ldr	r2, [r3, #16]
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	681b      	ldr	r3, [r3, #0]
 81020de:	f042 0201 	orr.w	r2, r2, #1
 81020e2:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 81020e4:	68fb      	ldr	r3, [r7, #12]
 81020e6:	f003 0302 	and.w	r3, r3, #2
 81020ea:	2b00      	cmp	r3, #0
 81020ec:	d01e      	beq.n	810212c <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	681b      	ldr	r3, [r3, #0]
 81020f2:	691a      	ldr	r2, [r3, #16]
 81020f4:	687b      	ldr	r3, [r7, #4]
 81020f6:	681b      	ldr	r3, [r3, #0]
 81020f8:	f042 0202 	orr.w	r2, r2, #2
 81020fc:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	2220      	movs	r2, #32
 8102102:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	2200      	movs	r2, #0
 8102108:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8102112:	425b      	negs	r3, r3
 8102114:	441a      	add	r2, r3
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 810211e:	4619      	mov	r1, r3
 8102120:	6878      	ldr	r0, [r7, #4]
 8102122:	f000 f88c 	bl	810223e <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	2200      	movs	r2, #0
 810212a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 810212c:	68fb      	ldr	r3, [r7, #12]
 810212e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102132:	2b00      	cmp	r3, #0
 8102134:	d024      	beq.n	8102180 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 810213a:	3b01      	subs	r3, #1
 810213c:	b29a      	uxth	r2, r3
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8102146:	2b00      	cmp	r3, #0
 8102148:	d107      	bne.n	810215a <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	681b      	ldr	r3, [r3, #0]
 810214e:	681a      	ldr	r2, [r3, #0]
 8102150:	687b      	ldr	r3, [r7, #4]
 8102152:	681b      	ldr	r3, [r3, #0]
 8102154:	f042 0204 	orr.w	r2, r2, #4
 8102158:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 810215a:	687b      	ldr	r3, [r7, #4]
 810215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810215e:	781a      	ldrb	r2, [r3, #0]
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	681b      	ldr	r3, [r3, #0]
 8102164:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810216a:	1c5a      	adds	r2, r3, #1
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8102170:	687b      	ldr	r3, [r7, #4]
 8102172:	681b      	ldr	r3, [r3, #0]
 8102174:	691a      	ldr	r2, [r3, #16]
 8102176:	687b      	ldr	r3, [r7, #4]
 8102178:	681b      	ldr	r3, [r3, #0]
 810217a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810217e:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8102180:	68fb      	ldr	r3, [r7, #12]
 8102182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102186:	2b00      	cmp	r3, #0
 8102188:	d014      	beq.n	81021b4 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	681b      	ldr	r3, [r3, #0]
 810218e:	691a      	ldr	r2, [r3, #16]
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8102198:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	2220      	movs	r2, #32
 810219e:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	2200      	movs	r2, #0
 81021a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81021a8:	687b      	ldr	r3, [r7, #4]
 81021aa:	2200      	movs	r2, #0
 81021ac:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 81021ae:	6878      	ldr	r0, [r7, #4]
 81021b0:	f000 f83b 	bl	810222a <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 81021b4:	68fa      	ldr	r2, [r7, #12]
 81021b6:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 81021ba:	4013      	ands	r3, r2
 81021bc:	2b00      	cmp	r3, #0
 81021be:	d030      	beq.n	8102222 <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 81021c0:	687b      	ldr	r3, [r7, #4]
 81021c2:	68fa      	ldr	r2, [r7, #12]
 81021c4:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 81021c6:	687b      	ldr	r3, [r7, #4]
 81021c8:	681b      	ldr	r3, [r3, #0]
 81021ca:	691b      	ldr	r3, [r3, #16]
 81021cc:	687a      	ldr	r2, [r7, #4]
 81021ce:	6812      	ldr	r2, [r2, #0]
 81021d0:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 81021d4:	f043 031c 	orr.w	r3, r3, #28
 81021d8:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 81021da:	68fb      	ldr	r3, [r7, #12]
 81021dc:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 81021e0:	2b00      	cmp	r3, #0
 81021e2:	d00e      	beq.n	8102202 <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81021ec:	425b      	negs	r3, r3
 81021ee:	441a      	add	r2, r3
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	2200      	movs	r2, #0
 81021f8:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	2220      	movs	r2, #32
 81021fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8102200:	e00c      	b.n	810221c <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8102202:	68fb      	ldr	r3, [r7, #12]
 8102204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102208:	2b00      	cmp	r3, #0
 810220a:	d107      	bne.n	810221c <HAL_CEC_IRQHandler+0x1ac>
 810220c:	68fb      	ldr	r3, [r7, #12]
 810220e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8102212:	2b00      	cmp	r3, #0
 8102214:	d002      	beq.n	810221c <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8102216:	687b      	ldr	r3, [r7, #4]
 8102218:	2220      	movs	r2, #32
 810221a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 810221c:	6878      	ldr	r0, [r7, #4]
 810221e:	f000 f819 	bl	8102254 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8102222:	bf00      	nop
 8102224:	3710      	adds	r7, #16
 8102226:	46bd      	mov	sp, r7
 8102228:	bd80      	pop	{r7, pc}

0810222a <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 810222a:	b480      	push	{r7}
 810222c:	b083      	sub	sp, #12
 810222e:	af00      	add	r7, sp, #0
 8102230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8102232:	bf00      	nop
 8102234:	370c      	adds	r7, #12
 8102236:	46bd      	mov	sp, r7
 8102238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810223c:	4770      	bx	lr

0810223e <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 810223e:	b480      	push	{r7}
 8102240:	b083      	sub	sp, #12
 8102242:	af00      	add	r7, sp, #0
 8102244:	6078      	str	r0, [r7, #4]
 8102246:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8102248:	bf00      	nop
 810224a:	370c      	adds	r7, #12
 810224c:	46bd      	mov	sp, r7
 810224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102252:	4770      	bx	lr

08102254 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8102254:	b480      	push	{r7}
 8102256:	b083      	sub	sp, #12
 8102258:	af00      	add	r7, sp, #0
 810225a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 810225c:	bf00      	nop
 810225e:	370c      	adds	r7, #12
 8102260:	46bd      	mov	sp, r7
 8102262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102266:	4770      	bx	lr

08102268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102268:	b480      	push	{r7}
 810226a:	b085      	sub	sp, #20
 810226c:	af00      	add	r7, sp, #0
 810226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	f003 0307 	and.w	r3, r3, #7
 8102276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102278:	4b0c      	ldr	r3, [pc, #48]	@ (81022ac <__NVIC_SetPriorityGrouping+0x44>)
 810227a:	68db      	ldr	r3, [r3, #12]
 810227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810227e:	68ba      	ldr	r2, [r7, #8]
 8102280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102284:	4013      	ands	r3, r2
 8102286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102288:	68fb      	ldr	r3, [r7, #12]
 810228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810228c:	68bb      	ldr	r3, [r7, #8]
 810228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810229a:	4a04      	ldr	r2, [pc, #16]	@ (81022ac <__NVIC_SetPriorityGrouping+0x44>)
 810229c:	68bb      	ldr	r3, [r7, #8]
 810229e:	60d3      	str	r3, [r2, #12]
}
 81022a0:	bf00      	nop
 81022a2:	3714      	adds	r7, #20
 81022a4:	46bd      	mov	sp, r7
 81022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022aa:	4770      	bx	lr
 81022ac:	e000ed00 	.word	0xe000ed00

081022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81022b0:	b480      	push	{r7}
 81022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81022b4:	4b04      	ldr	r3, [pc, #16]	@ (81022c8 <__NVIC_GetPriorityGrouping+0x18>)
 81022b6:	68db      	ldr	r3, [r3, #12]
 81022b8:	0a1b      	lsrs	r3, r3, #8
 81022ba:	f003 0307 	and.w	r3, r3, #7
}
 81022be:	4618      	mov	r0, r3
 81022c0:	46bd      	mov	sp, r7
 81022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c6:	4770      	bx	lr
 81022c8:	e000ed00 	.word	0xe000ed00

081022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81022cc:	b480      	push	{r7}
 81022ce:	b083      	sub	sp, #12
 81022d0:	af00      	add	r7, sp, #0
 81022d2:	4603      	mov	r3, r0
 81022d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81022d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81022da:	2b00      	cmp	r3, #0
 81022dc:	db0b      	blt.n	81022f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81022de:	88fb      	ldrh	r3, [r7, #6]
 81022e0:	f003 021f 	and.w	r2, r3, #31
 81022e4:	4907      	ldr	r1, [pc, #28]	@ (8102304 <__NVIC_EnableIRQ+0x38>)
 81022e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81022ea:	095b      	lsrs	r3, r3, #5
 81022ec:	2001      	movs	r0, #1
 81022ee:	fa00 f202 	lsl.w	r2, r0, r2
 81022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81022f6:	bf00      	nop
 81022f8:	370c      	adds	r7, #12
 81022fa:	46bd      	mov	sp, r7
 81022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102300:	4770      	bx	lr
 8102302:	bf00      	nop
 8102304:	e000e100 	.word	0xe000e100

08102308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102308:	b480      	push	{r7}
 810230a:	b083      	sub	sp, #12
 810230c:	af00      	add	r7, sp, #0
 810230e:	4603      	mov	r3, r0
 8102310:	6039      	str	r1, [r7, #0]
 8102312:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102318:	2b00      	cmp	r3, #0
 810231a:	db0a      	blt.n	8102332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810231c:	683b      	ldr	r3, [r7, #0]
 810231e:	b2da      	uxtb	r2, r3
 8102320:	490c      	ldr	r1, [pc, #48]	@ (8102354 <__NVIC_SetPriority+0x4c>)
 8102322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102326:	0112      	lsls	r2, r2, #4
 8102328:	b2d2      	uxtb	r2, r2
 810232a:	440b      	add	r3, r1
 810232c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102330:	e00a      	b.n	8102348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102332:	683b      	ldr	r3, [r7, #0]
 8102334:	b2da      	uxtb	r2, r3
 8102336:	4908      	ldr	r1, [pc, #32]	@ (8102358 <__NVIC_SetPriority+0x50>)
 8102338:	88fb      	ldrh	r3, [r7, #6]
 810233a:	f003 030f 	and.w	r3, r3, #15
 810233e:	3b04      	subs	r3, #4
 8102340:	0112      	lsls	r2, r2, #4
 8102342:	b2d2      	uxtb	r2, r2
 8102344:	440b      	add	r3, r1
 8102346:	761a      	strb	r2, [r3, #24]
}
 8102348:	bf00      	nop
 810234a:	370c      	adds	r7, #12
 810234c:	46bd      	mov	sp, r7
 810234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102352:	4770      	bx	lr
 8102354:	e000e100 	.word	0xe000e100
 8102358:	e000ed00 	.word	0xe000ed00

0810235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810235c:	b480      	push	{r7}
 810235e:	b089      	sub	sp, #36	@ 0x24
 8102360:	af00      	add	r7, sp, #0
 8102362:	60f8      	str	r0, [r7, #12]
 8102364:	60b9      	str	r1, [r7, #8]
 8102366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102368:	68fb      	ldr	r3, [r7, #12]
 810236a:	f003 0307 	and.w	r3, r3, #7
 810236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102370:	69fb      	ldr	r3, [r7, #28]
 8102372:	f1c3 0307 	rsb	r3, r3, #7
 8102376:	2b04      	cmp	r3, #4
 8102378:	bf28      	it	cs
 810237a:	2304      	movcs	r3, #4
 810237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810237e:	69fb      	ldr	r3, [r7, #28]
 8102380:	3304      	adds	r3, #4
 8102382:	2b06      	cmp	r3, #6
 8102384:	d902      	bls.n	810238c <NVIC_EncodePriority+0x30>
 8102386:	69fb      	ldr	r3, [r7, #28]
 8102388:	3b03      	subs	r3, #3
 810238a:	e000      	b.n	810238e <NVIC_EncodePriority+0x32>
 810238c:	2300      	movs	r3, #0
 810238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102390:	f04f 32ff 	mov.w	r2, #4294967295
 8102394:	69bb      	ldr	r3, [r7, #24]
 8102396:	fa02 f303 	lsl.w	r3, r2, r3
 810239a:	43da      	mvns	r2, r3
 810239c:	68bb      	ldr	r3, [r7, #8]
 810239e:	401a      	ands	r2, r3
 81023a0:	697b      	ldr	r3, [r7, #20]
 81023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81023a4:	f04f 31ff 	mov.w	r1, #4294967295
 81023a8:	697b      	ldr	r3, [r7, #20]
 81023aa:	fa01 f303 	lsl.w	r3, r1, r3
 81023ae:	43d9      	mvns	r1, r3
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81023b4:	4313      	orrs	r3, r2
         );
}
 81023b6:	4618      	mov	r0, r3
 81023b8:	3724      	adds	r7, #36	@ 0x24
 81023ba:	46bd      	mov	sp, r7
 81023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c0:	4770      	bx	lr

081023c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81023c2:	b580      	push	{r7, lr}
 81023c4:	b082      	sub	sp, #8
 81023c6:	af00      	add	r7, sp, #0
 81023c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81023ca:	6878      	ldr	r0, [r7, #4]
 81023cc:	f7ff ff4c 	bl	8102268 <__NVIC_SetPriorityGrouping>
}
 81023d0:	bf00      	nop
 81023d2:	3708      	adds	r7, #8
 81023d4:	46bd      	mov	sp, r7
 81023d6:	bd80      	pop	{r7, pc}

081023d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81023d8:	b580      	push	{r7, lr}
 81023da:	b086      	sub	sp, #24
 81023dc:	af00      	add	r7, sp, #0
 81023de:	4603      	mov	r3, r0
 81023e0:	60b9      	str	r1, [r7, #8]
 81023e2:	607a      	str	r2, [r7, #4]
 81023e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81023e6:	f7ff ff63 	bl	81022b0 <__NVIC_GetPriorityGrouping>
 81023ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81023ec:	687a      	ldr	r2, [r7, #4]
 81023ee:	68b9      	ldr	r1, [r7, #8]
 81023f0:	6978      	ldr	r0, [r7, #20]
 81023f2:	f7ff ffb3 	bl	810235c <NVIC_EncodePriority>
 81023f6:	4602      	mov	r2, r0
 81023f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81023fc:	4611      	mov	r1, r2
 81023fe:	4618      	mov	r0, r3
 8102400:	f7ff ff82 	bl	8102308 <__NVIC_SetPriority>
}
 8102404:	bf00      	nop
 8102406:	3718      	adds	r7, #24
 8102408:	46bd      	mov	sp, r7
 810240a:	bd80      	pop	{r7, pc}

0810240c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810240c:	b580      	push	{r7, lr}
 810240e:	b082      	sub	sp, #8
 8102410:	af00      	add	r7, sp, #0
 8102412:	4603      	mov	r3, r0
 8102414:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810241a:	4618      	mov	r0, r3
 810241c:	f7ff ff56 	bl	81022cc <__NVIC_EnableIRQ>
}
 8102420:	bf00      	nop
 8102422:	3708      	adds	r7, #8
 8102424:	46bd      	mov	sp, r7
 8102426:	bd80      	pop	{r7, pc}

08102428 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102428:	b480      	push	{r7}
 810242a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810242c:	4b06      	ldr	r3, [pc, #24]	@ (8102448 <HAL_GetCurrentCPUID+0x20>)
 810242e:	681b      	ldr	r3, [r3, #0]
 8102430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8102434:	2b70      	cmp	r3, #112	@ 0x70
 8102436:	d101      	bne.n	810243c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8102438:	2303      	movs	r3, #3
 810243a:	e000      	b.n	810243e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 810243c:	2301      	movs	r3, #1
  }
}
 810243e:	4618      	mov	r0, r3
 8102440:	46bd      	mov	sp, r7
 8102442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102446:	4770      	bx	lr
 8102448:	e000ed00 	.word	0xe000ed00

0810244c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810244c:	b480      	push	{r7}
 810244e:	b089      	sub	sp, #36	@ 0x24
 8102450:	af00      	add	r7, sp, #0
 8102452:	6078      	str	r0, [r7, #4]
 8102454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102456:	2300      	movs	r3, #0
 8102458:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810245a:	4b89      	ldr	r3, [pc, #548]	@ (8102680 <HAL_GPIO_Init+0x234>)
 810245c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810245e:	e194      	b.n	810278a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102460:	683b      	ldr	r3, [r7, #0]
 8102462:	681a      	ldr	r2, [r3, #0]
 8102464:	2101      	movs	r1, #1
 8102466:	69fb      	ldr	r3, [r7, #28]
 8102468:	fa01 f303 	lsl.w	r3, r1, r3
 810246c:	4013      	ands	r3, r2
 810246e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102470:	693b      	ldr	r3, [r7, #16]
 8102472:	2b00      	cmp	r3, #0
 8102474:	f000 8186 	beq.w	8102784 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102478:	683b      	ldr	r3, [r7, #0]
 810247a:	685b      	ldr	r3, [r3, #4]
 810247c:	f003 0303 	and.w	r3, r3, #3
 8102480:	2b01      	cmp	r3, #1
 8102482:	d005      	beq.n	8102490 <HAL_GPIO_Init+0x44>
 8102484:	683b      	ldr	r3, [r7, #0]
 8102486:	685b      	ldr	r3, [r3, #4]
 8102488:	f003 0303 	and.w	r3, r3, #3
 810248c:	2b02      	cmp	r3, #2
 810248e:	d130      	bne.n	81024f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102490:	687b      	ldr	r3, [r7, #4]
 8102492:	689b      	ldr	r3, [r3, #8]
 8102494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102496:	69fb      	ldr	r3, [r7, #28]
 8102498:	005b      	lsls	r3, r3, #1
 810249a:	2203      	movs	r2, #3
 810249c:	fa02 f303 	lsl.w	r3, r2, r3
 81024a0:	43db      	mvns	r3, r3
 81024a2:	69ba      	ldr	r2, [r7, #24]
 81024a4:	4013      	ands	r3, r2
 81024a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81024a8:	683b      	ldr	r3, [r7, #0]
 81024aa:	68da      	ldr	r2, [r3, #12]
 81024ac:	69fb      	ldr	r3, [r7, #28]
 81024ae:	005b      	lsls	r3, r3, #1
 81024b0:	fa02 f303 	lsl.w	r3, r2, r3
 81024b4:	69ba      	ldr	r2, [r7, #24]
 81024b6:	4313      	orrs	r3, r2
 81024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	69ba      	ldr	r2, [r7, #24]
 81024be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	685b      	ldr	r3, [r3, #4]
 81024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81024c6:	2201      	movs	r2, #1
 81024c8:	69fb      	ldr	r3, [r7, #28]
 81024ca:	fa02 f303 	lsl.w	r3, r2, r3
 81024ce:	43db      	mvns	r3, r3
 81024d0:	69ba      	ldr	r2, [r7, #24]
 81024d2:	4013      	ands	r3, r2
 81024d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81024d6:	683b      	ldr	r3, [r7, #0]
 81024d8:	685b      	ldr	r3, [r3, #4]
 81024da:	091b      	lsrs	r3, r3, #4
 81024dc:	f003 0201 	and.w	r2, r3, #1
 81024e0:	69fb      	ldr	r3, [r7, #28]
 81024e2:	fa02 f303 	lsl.w	r3, r2, r3
 81024e6:	69ba      	ldr	r2, [r7, #24]
 81024e8:	4313      	orrs	r3, r2
 81024ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	69ba      	ldr	r2, [r7, #24]
 81024f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81024f2:	683b      	ldr	r3, [r7, #0]
 81024f4:	685b      	ldr	r3, [r3, #4]
 81024f6:	f003 0303 	and.w	r3, r3, #3
 81024fa:	2b03      	cmp	r3, #3
 81024fc:	d017      	beq.n	810252e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81024fe:	687b      	ldr	r3, [r7, #4]
 8102500:	68db      	ldr	r3, [r3, #12]
 8102502:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102504:	69fb      	ldr	r3, [r7, #28]
 8102506:	005b      	lsls	r3, r3, #1
 8102508:	2203      	movs	r2, #3
 810250a:	fa02 f303 	lsl.w	r3, r2, r3
 810250e:	43db      	mvns	r3, r3
 8102510:	69ba      	ldr	r2, [r7, #24]
 8102512:	4013      	ands	r3, r2
 8102514:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102516:	683b      	ldr	r3, [r7, #0]
 8102518:	689a      	ldr	r2, [r3, #8]
 810251a:	69fb      	ldr	r3, [r7, #28]
 810251c:	005b      	lsls	r3, r3, #1
 810251e:	fa02 f303 	lsl.w	r3, r2, r3
 8102522:	69ba      	ldr	r2, [r7, #24]
 8102524:	4313      	orrs	r3, r2
 8102526:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	69ba      	ldr	r2, [r7, #24]
 810252c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810252e:	683b      	ldr	r3, [r7, #0]
 8102530:	685b      	ldr	r3, [r3, #4]
 8102532:	f003 0303 	and.w	r3, r3, #3
 8102536:	2b02      	cmp	r3, #2
 8102538:	d123      	bne.n	8102582 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810253a:	69fb      	ldr	r3, [r7, #28]
 810253c:	08da      	lsrs	r2, r3, #3
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	3208      	adds	r2, #8
 8102542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102548:	69fb      	ldr	r3, [r7, #28]
 810254a:	f003 0307 	and.w	r3, r3, #7
 810254e:	009b      	lsls	r3, r3, #2
 8102550:	220f      	movs	r2, #15
 8102552:	fa02 f303 	lsl.w	r3, r2, r3
 8102556:	43db      	mvns	r3, r3
 8102558:	69ba      	ldr	r2, [r7, #24]
 810255a:	4013      	ands	r3, r2
 810255c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810255e:	683b      	ldr	r3, [r7, #0]
 8102560:	691a      	ldr	r2, [r3, #16]
 8102562:	69fb      	ldr	r3, [r7, #28]
 8102564:	f003 0307 	and.w	r3, r3, #7
 8102568:	009b      	lsls	r3, r3, #2
 810256a:	fa02 f303 	lsl.w	r3, r2, r3
 810256e:	69ba      	ldr	r2, [r7, #24]
 8102570:	4313      	orrs	r3, r2
 8102572:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102574:	69fb      	ldr	r3, [r7, #28]
 8102576:	08da      	lsrs	r2, r3, #3
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	3208      	adds	r2, #8
 810257c:	69b9      	ldr	r1, [r7, #24]
 810257e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	681b      	ldr	r3, [r3, #0]
 8102586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102588:	69fb      	ldr	r3, [r7, #28]
 810258a:	005b      	lsls	r3, r3, #1
 810258c:	2203      	movs	r2, #3
 810258e:	fa02 f303 	lsl.w	r3, r2, r3
 8102592:	43db      	mvns	r3, r3
 8102594:	69ba      	ldr	r2, [r7, #24]
 8102596:	4013      	ands	r3, r2
 8102598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810259a:	683b      	ldr	r3, [r7, #0]
 810259c:	685b      	ldr	r3, [r3, #4]
 810259e:	f003 0203 	and.w	r2, r3, #3
 81025a2:	69fb      	ldr	r3, [r7, #28]
 81025a4:	005b      	lsls	r3, r3, #1
 81025a6:	fa02 f303 	lsl.w	r3, r2, r3
 81025aa:	69ba      	ldr	r2, [r7, #24]
 81025ac:	4313      	orrs	r3, r2
 81025ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	69ba      	ldr	r2, [r7, #24]
 81025b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81025b6:	683b      	ldr	r3, [r7, #0]
 81025b8:	685b      	ldr	r3, [r3, #4]
 81025ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81025be:	2b00      	cmp	r3, #0
 81025c0:	f000 80e0 	beq.w	8102784 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81025c4:	4b2f      	ldr	r3, [pc, #188]	@ (8102684 <HAL_GPIO_Init+0x238>)
 81025c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81025ca:	4a2e      	ldr	r2, [pc, #184]	@ (8102684 <HAL_GPIO_Init+0x238>)
 81025cc:	f043 0302 	orr.w	r3, r3, #2
 81025d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81025d4:	4b2b      	ldr	r3, [pc, #172]	@ (8102684 <HAL_GPIO_Init+0x238>)
 81025d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81025da:	f003 0302 	and.w	r3, r3, #2
 81025de:	60fb      	str	r3, [r7, #12]
 81025e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81025e2:	4a29      	ldr	r2, [pc, #164]	@ (8102688 <HAL_GPIO_Init+0x23c>)
 81025e4:	69fb      	ldr	r3, [r7, #28]
 81025e6:	089b      	lsrs	r3, r3, #2
 81025e8:	3302      	adds	r3, #2
 81025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81025f0:	69fb      	ldr	r3, [r7, #28]
 81025f2:	f003 0303 	and.w	r3, r3, #3
 81025f6:	009b      	lsls	r3, r3, #2
 81025f8:	220f      	movs	r2, #15
 81025fa:	fa02 f303 	lsl.w	r3, r2, r3
 81025fe:	43db      	mvns	r3, r3
 8102600:	69ba      	ldr	r2, [r7, #24]
 8102602:	4013      	ands	r3, r2
 8102604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102606:	687b      	ldr	r3, [r7, #4]
 8102608:	4a20      	ldr	r2, [pc, #128]	@ (810268c <HAL_GPIO_Init+0x240>)
 810260a:	4293      	cmp	r3, r2
 810260c:	d052      	beq.n	81026b4 <HAL_GPIO_Init+0x268>
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	4a1f      	ldr	r2, [pc, #124]	@ (8102690 <HAL_GPIO_Init+0x244>)
 8102612:	4293      	cmp	r3, r2
 8102614:	d031      	beq.n	810267a <HAL_GPIO_Init+0x22e>
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	4a1e      	ldr	r2, [pc, #120]	@ (8102694 <HAL_GPIO_Init+0x248>)
 810261a:	4293      	cmp	r3, r2
 810261c:	d02b      	beq.n	8102676 <HAL_GPIO_Init+0x22a>
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	4a1d      	ldr	r2, [pc, #116]	@ (8102698 <HAL_GPIO_Init+0x24c>)
 8102622:	4293      	cmp	r3, r2
 8102624:	d025      	beq.n	8102672 <HAL_GPIO_Init+0x226>
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	4a1c      	ldr	r2, [pc, #112]	@ (810269c <HAL_GPIO_Init+0x250>)
 810262a:	4293      	cmp	r3, r2
 810262c:	d01f      	beq.n	810266e <HAL_GPIO_Init+0x222>
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	4a1b      	ldr	r2, [pc, #108]	@ (81026a0 <HAL_GPIO_Init+0x254>)
 8102632:	4293      	cmp	r3, r2
 8102634:	d019      	beq.n	810266a <HAL_GPIO_Init+0x21e>
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	4a1a      	ldr	r2, [pc, #104]	@ (81026a4 <HAL_GPIO_Init+0x258>)
 810263a:	4293      	cmp	r3, r2
 810263c:	d013      	beq.n	8102666 <HAL_GPIO_Init+0x21a>
 810263e:	687b      	ldr	r3, [r7, #4]
 8102640:	4a19      	ldr	r2, [pc, #100]	@ (81026a8 <HAL_GPIO_Init+0x25c>)
 8102642:	4293      	cmp	r3, r2
 8102644:	d00d      	beq.n	8102662 <HAL_GPIO_Init+0x216>
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	4a18      	ldr	r2, [pc, #96]	@ (81026ac <HAL_GPIO_Init+0x260>)
 810264a:	4293      	cmp	r3, r2
 810264c:	d007      	beq.n	810265e <HAL_GPIO_Init+0x212>
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	4a17      	ldr	r2, [pc, #92]	@ (81026b0 <HAL_GPIO_Init+0x264>)
 8102652:	4293      	cmp	r3, r2
 8102654:	d101      	bne.n	810265a <HAL_GPIO_Init+0x20e>
 8102656:	2309      	movs	r3, #9
 8102658:	e02d      	b.n	81026b6 <HAL_GPIO_Init+0x26a>
 810265a:	230a      	movs	r3, #10
 810265c:	e02b      	b.n	81026b6 <HAL_GPIO_Init+0x26a>
 810265e:	2308      	movs	r3, #8
 8102660:	e029      	b.n	81026b6 <HAL_GPIO_Init+0x26a>
 8102662:	2307      	movs	r3, #7
 8102664:	e027      	b.n	81026b6 <HAL_GPIO_Init+0x26a>
 8102666:	2306      	movs	r3, #6
 8102668:	e025      	b.n	81026b6 <HAL_GPIO_Init+0x26a>
 810266a:	2305      	movs	r3, #5
 810266c:	e023      	b.n	81026b6 <HAL_GPIO_Init+0x26a>
 810266e:	2304      	movs	r3, #4
 8102670:	e021      	b.n	81026b6 <HAL_GPIO_Init+0x26a>
 8102672:	2303      	movs	r3, #3
 8102674:	e01f      	b.n	81026b6 <HAL_GPIO_Init+0x26a>
 8102676:	2302      	movs	r3, #2
 8102678:	e01d      	b.n	81026b6 <HAL_GPIO_Init+0x26a>
 810267a:	2301      	movs	r3, #1
 810267c:	e01b      	b.n	81026b6 <HAL_GPIO_Init+0x26a>
 810267e:	bf00      	nop
 8102680:	580000c0 	.word	0x580000c0
 8102684:	58024400 	.word	0x58024400
 8102688:	58000400 	.word	0x58000400
 810268c:	58020000 	.word	0x58020000
 8102690:	58020400 	.word	0x58020400
 8102694:	58020800 	.word	0x58020800
 8102698:	58020c00 	.word	0x58020c00
 810269c:	58021000 	.word	0x58021000
 81026a0:	58021400 	.word	0x58021400
 81026a4:	58021800 	.word	0x58021800
 81026a8:	58021c00 	.word	0x58021c00
 81026ac:	58022000 	.word	0x58022000
 81026b0:	58022400 	.word	0x58022400
 81026b4:	2300      	movs	r3, #0
 81026b6:	69fa      	ldr	r2, [r7, #28]
 81026b8:	f002 0203 	and.w	r2, r2, #3
 81026bc:	0092      	lsls	r2, r2, #2
 81026be:	4093      	lsls	r3, r2
 81026c0:	69ba      	ldr	r2, [r7, #24]
 81026c2:	4313      	orrs	r3, r2
 81026c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81026c6:	4938      	ldr	r1, [pc, #224]	@ (81027a8 <HAL_GPIO_Init+0x35c>)
 81026c8:	69fb      	ldr	r3, [r7, #28]
 81026ca:	089b      	lsrs	r3, r3, #2
 81026cc:	3302      	adds	r3, #2
 81026ce:	69ba      	ldr	r2, [r7, #24]
 81026d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81026d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81026d8:	681b      	ldr	r3, [r3, #0]
 81026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026dc:	693b      	ldr	r3, [r7, #16]
 81026de:	43db      	mvns	r3, r3
 81026e0:	69ba      	ldr	r2, [r7, #24]
 81026e2:	4013      	ands	r3, r2
 81026e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81026e6:	683b      	ldr	r3, [r7, #0]
 81026e8:	685b      	ldr	r3, [r3, #4]
 81026ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81026ee:	2b00      	cmp	r3, #0
 81026f0:	d003      	beq.n	81026fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81026f2:	69ba      	ldr	r2, [r7, #24]
 81026f4:	693b      	ldr	r3, [r7, #16]
 81026f6:	4313      	orrs	r3, r2
 81026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81026fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81026fe:	69bb      	ldr	r3, [r7, #24]
 8102700:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102706:	685b      	ldr	r3, [r3, #4]
 8102708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810270a:	693b      	ldr	r3, [r7, #16]
 810270c:	43db      	mvns	r3, r3
 810270e:	69ba      	ldr	r2, [r7, #24]
 8102710:	4013      	ands	r3, r2
 8102712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102714:	683b      	ldr	r3, [r7, #0]
 8102716:	685b      	ldr	r3, [r3, #4]
 8102718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810271c:	2b00      	cmp	r3, #0
 810271e:	d003      	beq.n	8102728 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102720:	69ba      	ldr	r2, [r7, #24]
 8102722:	693b      	ldr	r3, [r7, #16]
 8102724:	4313      	orrs	r3, r2
 8102726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102728:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810272c:	69bb      	ldr	r3, [r7, #24]
 810272e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102730:	697b      	ldr	r3, [r7, #20]
 8102732:	685b      	ldr	r3, [r3, #4]
 8102734:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102736:	693b      	ldr	r3, [r7, #16]
 8102738:	43db      	mvns	r3, r3
 810273a:	69ba      	ldr	r2, [r7, #24]
 810273c:	4013      	ands	r3, r2
 810273e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102740:	683b      	ldr	r3, [r7, #0]
 8102742:	685b      	ldr	r3, [r3, #4]
 8102744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102748:	2b00      	cmp	r3, #0
 810274a:	d003      	beq.n	8102754 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810274c:	69ba      	ldr	r2, [r7, #24]
 810274e:	693b      	ldr	r3, [r7, #16]
 8102750:	4313      	orrs	r3, r2
 8102752:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102754:	697b      	ldr	r3, [r7, #20]
 8102756:	69ba      	ldr	r2, [r7, #24]
 8102758:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810275a:	697b      	ldr	r3, [r7, #20]
 810275c:	681b      	ldr	r3, [r3, #0]
 810275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102760:	693b      	ldr	r3, [r7, #16]
 8102762:	43db      	mvns	r3, r3
 8102764:	69ba      	ldr	r2, [r7, #24]
 8102766:	4013      	ands	r3, r2
 8102768:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810276a:	683b      	ldr	r3, [r7, #0]
 810276c:	685b      	ldr	r3, [r3, #4]
 810276e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102772:	2b00      	cmp	r3, #0
 8102774:	d003      	beq.n	810277e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102776:	69ba      	ldr	r2, [r7, #24]
 8102778:	693b      	ldr	r3, [r7, #16]
 810277a:	4313      	orrs	r3, r2
 810277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810277e:	697b      	ldr	r3, [r7, #20]
 8102780:	69ba      	ldr	r2, [r7, #24]
 8102782:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102784:	69fb      	ldr	r3, [r7, #28]
 8102786:	3301      	adds	r3, #1
 8102788:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810278a:	683b      	ldr	r3, [r7, #0]
 810278c:	681a      	ldr	r2, [r3, #0]
 810278e:	69fb      	ldr	r3, [r7, #28]
 8102790:	fa22 f303 	lsr.w	r3, r2, r3
 8102794:	2b00      	cmp	r3, #0
 8102796:	f47f ae63 	bne.w	8102460 <HAL_GPIO_Init+0x14>
  }
}
 810279a:	bf00      	nop
 810279c:	bf00      	nop
 810279e:	3724      	adds	r7, #36	@ 0x24
 81027a0:	46bd      	mov	sp, r7
 81027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027a6:	4770      	bx	lr
 81027a8:	58000400 	.word	0x58000400

081027ac <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81027ac:	b480      	push	{r7}
 81027ae:	b083      	sub	sp, #12
 81027b0:	af00      	add	r7, sp, #0
 81027b2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81027b4:	4b05      	ldr	r3, [pc, #20]	@ (81027cc <HAL_HSEM_ActivateNotification+0x20>)
 81027b6:	681a      	ldr	r2, [r3, #0]
 81027b8:	4904      	ldr	r1, [pc, #16]	@ (81027cc <HAL_HSEM_ActivateNotification+0x20>)
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	4313      	orrs	r3, r2
 81027be:	600b      	str	r3, [r1, #0]
#endif
}
 81027c0:	bf00      	nop
 81027c2:	370c      	adds	r7, #12
 81027c4:	46bd      	mov	sp, r7
 81027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ca:	4770      	bx	lr
 81027cc:	58026510 	.word	0x58026510

081027d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81027d0:	b580      	push	{r7, lr}
 81027d2:	b086      	sub	sp, #24
 81027d4:	af02      	add	r7, sp, #8
 81027d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	2b00      	cmp	r3, #0
 81027dc:	d101      	bne.n	81027e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81027de:	2301      	movs	r3, #1
 81027e0:	e0fe      	b.n	81029e0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 81027e8:	b2db      	uxtb	r3, r3
 81027ea:	2b00      	cmp	r3, #0
 81027ec:	d106      	bne.n	81027fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	2200      	movs	r2, #0
 81027f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 81027f6:	6878      	ldr	r0, [r7, #4]
 81027f8:	f7fe ffd2 	bl	81017a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	2203      	movs	r2, #3
 8102800:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	4618      	mov	r0, r3
 810280a:	f004 fc0d 	bl	8107028 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810280e:	687b      	ldr	r3, [r7, #4]
 8102810:	6818      	ldr	r0, [r3, #0]
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	7c1a      	ldrb	r2, [r3, #16]
 8102816:	f88d 2000 	strb.w	r2, [sp]
 810281a:	3304      	adds	r3, #4
 810281c:	cb0e      	ldmia	r3, {r1, r2, r3}
 810281e:	f004 fb92 	bl	8106f46 <USB_CoreInit>
 8102822:	4603      	mov	r3, r0
 8102824:	2b00      	cmp	r3, #0
 8102826:	d005      	beq.n	8102834 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	2202      	movs	r2, #2
 810282c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8102830:	2301      	movs	r3, #1
 8102832:	e0d5      	b.n	81029e0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	681b      	ldr	r3, [r3, #0]
 8102838:	2100      	movs	r1, #0
 810283a:	4618      	mov	r0, r3
 810283c:	f004 fc05 	bl	810704a <USB_SetCurrentMode>
 8102840:	4603      	mov	r3, r0
 8102842:	2b00      	cmp	r3, #0
 8102844:	d005      	beq.n	8102852 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	2202      	movs	r2, #2
 810284a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810284e:	2301      	movs	r3, #1
 8102850:	e0c6      	b.n	81029e0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102852:	2300      	movs	r3, #0
 8102854:	73fb      	strb	r3, [r7, #15]
 8102856:	e04a      	b.n	81028ee <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8102858:	7bfa      	ldrb	r2, [r7, #15]
 810285a:	6879      	ldr	r1, [r7, #4]
 810285c:	4613      	mov	r3, r2
 810285e:	00db      	lsls	r3, r3, #3
 8102860:	4413      	add	r3, r2
 8102862:	009b      	lsls	r3, r3, #2
 8102864:	440b      	add	r3, r1
 8102866:	3315      	adds	r3, #21
 8102868:	2201      	movs	r2, #1
 810286a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 810286c:	7bfa      	ldrb	r2, [r7, #15]
 810286e:	6879      	ldr	r1, [r7, #4]
 8102870:	4613      	mov	r3, r2
 8102872:	00db      	lsls	r3, r3, #3
 8102874:	4413      	add	r3, r2
 8102876:	009b      	lsls	r3, r3, #2
 8102878:	440b      	add	r3, r1
 810287a:	3314      	adds	r3, #20
 810287c:	7bfa      	ldrb	r2, [r7, #15]
 810287e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8102880:	7bfa      	ldrb	r2, [r7, #15]
 8102882:	7bfb      	ldrb	r3, [r7, #15]
 8102884:	b298      	uxth	r0, r3
 8102886:	6879      	ldr	r1, [r7, #4]
 8102888:	4613      	mov	r3, r2
 810288a:	00db      	lsls	r3, r3, #3
 810288c:	4413      	add	r3, r2
 810288e:	009b      	lsls	r3, r3, #2
 8102890:	440b      	add	r3, r1
 8102892:	332e      	adds	r3, #46	@ 0x2e
 8102894:	4602      	mov	r2, r0
 8102896:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8102898:	7bfa      	ldrb	r2, [r7, #15]
 810289a:	6879      	ldr	r1, [r7, #4]
 810289c:	4613      	mov	r3, r2
 810289e:	00db      	lsls	r3, r3, #3
 81028a0:	4413      	add	r3, r2
 81028a2:	009b      	lsls	r3, r3, #2
 81028a4:	440b      	add	r3, r1
 81028a6:	3318      	adds	r3, #24
 81028a8:	2200      	movs	r2, #0
 81028aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81028ac:	7bfa      	ldrb	r2, [r7, #15]
 81028ae:	6879      	ldr	r1, [r7, #4]
 81028b0:	4613      	mov	r3, r2
 81028b2:	00db      	lsls	r3, r3, #3
 81028b4:	4413      	add	r3, r2
 81028b6:	009b      	lsls	r3, r3, #2
 81028b8:	440b      	add	r3, r1
 81028ba:	331c      	adds	r3, #28
 81028bc:	2200      	movs	r2, #0
 81028be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81028c0:	7bfa      	ldrb	r2, [r7, #15]
 81028c2:	6879      	ldr	r1, [r7, #4]
 81028c4:	4613      	mov	r3, r2
 81028c6:	00db      	lsls	r3, r3, #3
 81028c8:	4413      	add	r3, r2
 81028ca:	009b      	lsls	r3, r3, #2
 81028cc:	440b      	add	r3, r1
 81028ce:	3320      	adds	r3, #32
 81028d0:	2200      	movs	r2, #0
 81028d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81028d4:	7bfa      	ldrb	r2, [r7, #15]
 81028d6:	6879      	ldr	r1, [r7, #4]
 81028d8:	4613      	mov	r3, r2
 81028da:	00db      	lsls	r3, r3, #3
 81028dc:	4413      	add	r3, r2
 81028de:	009b      	lsls	r3, r3, #2
 81028e0:	440b      	add	r3, r1
 81028e2:	3324      	adds	r3, #36	@ 0x24
 81028e4:	2200      	movs	r2, #0
 81028e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81028e8:	7bfb      	ldrb	r3, [r7, #15]
 81028ea:	3301      	adds	r3, #1
 81028ec:	73fb      	strb	r3, [r7, #15]
 81028ee:	687b      	ldr	r3, [r7, #4]
 81028f0:	791b      	ldrb	r3, [r3, #4]
 81028f2:	7bfa      	ldrb	r2, [r7, #15]
 81028f4:	429a      	cmp	r2, r3
 81028f6:	d3af      	bcc.n	8102858 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81028f8:	2300      	movs	r3, #0
 81028fa:	73fb      	strb	r3, [r7, #15]
 81028fc:	e044      	b.n	8102988 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 81028fe:	7bfa      	ldrb	r2, [r7, #15]
 8102900:	6879      	ldr	r1, [r7, #4]
 8102902:	4613      	mov	r3, r2
 8102904:	00db      	lsls	r3, r3, #3
 8102906:	4413      	add	r3, r2
 8102908:	009b      	lsls	r3, r3, #2
 810290a:	440b      	add	r3, r1
 810290c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8102910:	2200      	movs	r2, #0
 8102912:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8102914:	7bfa      	ldrb	r2, [r7, #15]
 8102916:	6879      	ldr	r1, [r7, #4]
 8102918:	4613      	mov	r3, r2
 810291a:	00db      	lsls	r3, r3, #3
 810291c:	4413      	add	r3, r2
 810291e:	009b      	lsls	r3, r3, #2
 8102920:	440b      	add	r3, r1
 8102922:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8102926:	7bfa      	ldrb	r2, [r7, #15]
 8102928:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 810292a:	7bfa      	ldrb	r2, [r7, #15]
 810292c:	6879      	ldr	r1, [r7, #4]
 810292e:	4613      	mov	r3, r2
 8102930:	00db      	lsls	r3, r3, #3
 8102932:	4413      	add	r3, r2
 8102934:	009b      	lsls	r3, r3, #2
 8102936:	440b      	add	r3, r1
 8102938:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 810293c:	2200      	movs	r2, #0
 810293e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8102940:	7bfa      	ldrb	r2, [r7, #15]
 8102942:	6879      	ldr	r1, [r7, #4]
 8102944:	4613      	mov	r3, r2
 8102946:	00db      	lsls	r3, r3, #3
 8102948:	4413      	add	r3, r2
 810294a:	009b      	lsls	r3, r3, #2
 810294c:	440b      	add	r3, r1
 810294e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8102952:	2200      	movs	r2, #0
 8102954:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8102956:	7bfa      	ldrb	r2, [r7, #15]
 8102958:	6879      	ldr	r1, [r7, #4]
 810295a:	4613      	mov	r3, r2
 810295c:	00db      	lsls	r3, r3, #3
 810295e:	4413      	add	r3, r2
 8102960:	009b      	lsls	r3, r3, #2
 8102962:	440b      	add	r3, r1
 8102964:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8102968:	2200      	movs	r2, #0
 810296a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 810296c:	7bfa      	ldrb	r2, [r7, #15]
 810296e:	6879      	ldr	r1, [r7, #4]
 8102970:	4613      	mov	r3, r2
 8102972:	00db      	lsls	r3, r3, #3
 8102974:	4413      	add	r3, r2
 8102976:	009b      	lsls	r3, r3, #2
 8102978:	440b      	add	r3, r1
 810297a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 810297e:	2200      	movs	r2, #0
 8102980:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102982:	7bfb      	ldrb	r3, [r7, #15]
 8102984:	3301      	adds	r3, #1
 8102986:	73fb      	strb	r3, [r7, #15]
 8102988:	687b      	ldr	r3, [r7, #4]
 810298a:	791b      	ldrb	r3, [r3, #4]
 810298c:	7bfa      	ldrb	r2, [r7, #15]
 810298e:	429a      	cmp	r2, r3
 8102990:	d3b5      	bcc.n	81028fe <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	6818      	ldr	r0, [r3, #0]
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	7c1a      	ldrb	r2, [r3, #16]
 810299a:	f88d 2000 	strb.w	r2, [sp]
 810299e:	3304      	adds	r3, #4
 81029a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 81029a2:	f004 fb9f 	bl	81070e4 <USB_DevInit>
 81029a6:	4603      	mov	r3, r0
 81029a8:	2b00      	cmp	r3, #0
 81029aa:	d005      	beq.n	81029b8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	2202      	movs	r2, #2
 81029b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81029b4:	2301      	movs	r3, #1
 81029b6:	e013      	b.n	81029e0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	2200      	movs	r2, #0
 81029bc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	2201      	movs	r2, #1
 81029c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	7b1b      	ldrb	r3, [r3, #12]
 81029ca:	2b01      	cmp	r3, #1
 81029cc:	d102      	bne.n	81029d4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 81029ce:	6878      	ldr	r0, [r7, #4]
 81029d0:	f000 f80a 	bl	81029e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	4618      	mov	r0, r3
 81029da:	f004 fd5a 	bl	8107492 <USB_DevDisconnect>

  return HAL_OK;
 81029de:	2300      	movs	r3, #0
}
 81029e0:	4618      	mov	r0, r3
 81029e2:	3710      	adds	r7, #16
 81029e4:	46bd      	mov	sp, r7
 81029e6:	bd80      	pop	{r7, pc}

081029e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 81029e8:	b480      	push	{r7}
 81029ea:	b085      	sub	sp, #20
 81029ec:	af00      	add	r7, sp, #0
 81029ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	2201      	movs	r2, #1
 81029fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 81029fe:	687b      	ldr	r3, [r7, #4]
 8102a00:	2200      	movs	r2, #0
 8102a02:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8102a06:	68fb      	ldr	r3, [r7, #12]
 8102a08:	699b      	ldr	r3, [r3, #24]
 8102a0a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8102a0e:	68fb      	ldr	r3, [r7, #12]
 8102a10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8102a12:	68fb      	ldr	r3, [r7, #12]
 8102a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8102a1a:	f043 0303 	orr.w	r3, r3, #3
 8102a1e:	68fa      	ldr	r2, [r7, #12]
 8102a20:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8102a22:	2300      	movs	r3, #0
}
 8102a24:	4618      	mov	r0, r3
 8102a26:	3714      	adds	r7, #20
 8102a28:	46bd      	mov	sp, r7
 8102a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a2e:	4770      	bx	lr

08102a30 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102a30:	b580      	push	{r7, lr}
 8102a32:	b084      	sub	sp, #16
 8102a34:	af00      	add	r7, sp, #0
 8102a36:	60f8      	str	r0, [r7, #12]
 8102a38:	460b      	mov	r3, r1
 8102a3a:	607a      	str	r2, [r7, #4]
 8102a3c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102a3e:	4b37      	ldr	r3, [pc, #220]	@ (8102b1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	f023 0201 	bic.w	r2, r3, #1
 8102a46:	4935      	ldr	r1, [pc, #212]	@ (8102b1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a48:	68fb      	ldr	r3, [r7, #12]
 8102a4a:	4313      	orrs	r3, r2
 8102a4c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102a4e:	687b      	ldr	r3, [r7, #4]
 8102a50:	2b00      	cmp	r3, #0
 8102a52:	d123      	bne.n	8102a9c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102a54:	f7ff fce8 	bl	8102428 <HAL_GetCurrentCPUID>
 8102a58:	4603      	mov	r3, r0
 8102a5a:	2b03      	cmp	r3, #3
 8102a5c:	d158      	bne.n	8102b10 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8102b1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a60:	691b      	ldr	r3, [r3, #16]
 8102a62:	4a2e      	ldr	r2, [pc, #184]	@ (8102b1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102a64:	f023 0301 	bic.w	r3, r3, #1
 8102a68:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8102b20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a6c:	691b      	ldr	r3, [r3, #16]
 8102a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8102b20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a70:	f043 0304 	orr.w	r3, r3, #4
 8102a74:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102a76:	f3bf 8f4f 	dsb	sy
}
 8102a7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102a7c:	f3bf 8f6f 	isb	sy
}
 8102a80:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102a82:	7afb      	ldrb	r3, [r7, #11]
 8102a84:	2b01      	cmp	r3, #1
 8102a86:	d101      	bne.n	8102a8c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102a88:	bf30      	wfi
 8102a8a:	e000      	b.n	8102a8e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102a8c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102a8e:	4b24      	ldr	r3, [pc, #144]	@ (8102b20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a90:	691b      	ldr	r3, [r3, #16]
 8102a92:	4a23      	ldr	r2, [pc, #140]	@ (8102b20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102a94:	f023 0304 	bic.w	r3, r3, #4
 8102a98:	6113      	str	r3, [r2, #16]
 8102a9a:	e03c      	b.n	8102b16 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	2b01      	cmp	r3, #1
 8102aa0:	d123      	bne.n	8102aea <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102aa2:	f7ff fcc1 	bl	8102428 <HAL_GetCurrentCPUID>
 8102aa6:	4603      	mov	r3, r0
 8102aa8:	2b01      	cmp	r3, #1
 8102aaa:	d133      	bne.n	8102b14 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102aac:	4b1b      	ldr	r3, [pc, #108]	@ (8102b1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102aae:	695b      	ldr	r3, [r3, #20]
 8102ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8102b1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ab2:	f023 0302 	bic.w	r3, r3, #2
 8102ab6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102ab8:	4b19      	ldr	r3, [pc, #100]	@ (8102b20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102aba:	691b      	ldr	r3, [r3, #16]
 8102abc:	4a18      	ldr	r2, [pc, #96]	@ (8102b20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102abe:	f043 0304 	orr.w	r3, r3, #4
 8102ac2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102ac4:	f3bf 8f4f 	dsb	sy
}
 8102ac8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102aca:	f3bf 8f6f 	isb	sy
}
 8102ace:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102ad0:	7afb      	ldrb	r3, [r7, #11]
 8102ad2:	2b01      	cmp	r3, #1
 8102ad4:	d101      	bne.n	8102ada <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102ad6:	bf30      	wfi
 8102ad8:	e000      	b.n	8102adc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102ada:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102adc:	4b10      	ldr	r3, [pc, #64]	@ (8102b20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ade:	691b      	ldr	r3, [r3, #16]
 8102ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8102b20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ae2:	f023 0304 	bic.w	r3, r3, #4
 8102ae6:	6113      	str	r3, [r2, #16]
 8102ae8:	e015      	b.n	8102b16 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102aea:	f7ff fc9d 	bl	8102428 <HAL_GetCurrentCPUID>
 8102aee:	4603      	mov	r3, r0
 8102af0:	2b03      	cmp	r3, #3
 8102af2:	d106      	bne.n	8102b02 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102af4:	4b09      	ldr	r3, [pc, #36]	@ (8102b1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102af6:	691b      	ldr	r3, [r3, #16]
 8102af8:	4a08      	ldr	r2, [pc, #32]	@ (8102b1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102afa:	f023 0304 	bic.w	r3, r3, #4
 8102afe:	6113      	str	r3, [r2, #16]
 8102b00:	e009      	b.n	8102b16 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102b02:	4b06      	ldr	r3, [pc, #24]	@ (8102b1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b04:	695b      	ldr	r3, [r3, #20]
 8102b06:	4a05      	ldr	r2, [pc, #20]	@ (8102b1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b08:	f023 0304 	bic.w	r3, r3, #4
 8102b0c:	6153      	str	r3, [r2, #20]
 8102b0e:	e002      	b.n	8102b16 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102b10:	bf00      	nop
 8102b12:	e000      	b.n	8102b16 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102b14:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102b16:	3710      	adds	r7, #16
 8102b18:	46bd      	mov	sp, r7
 8102b1a:	bd80      	pop	{r7, pc}
 8102b1c:	58024800 	.word	0x58024800
 8102b20:	e000ed00 	.word	0xe000ed00

08102b24 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102b24:	b580      	push	{r7, lr}
 8102b26:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102b28:	f7ff fc7e 	bl	8102428 <HAL_GetCurrentCPUID>
 8102b2c:	4603      	mov	r3, r0
 8102b2e:	2b03      	cmp	r3, #3
 8102b30:	d101      	bne.n	8102b36 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102b32:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102b34:	e001      	b.n	8102b3a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102b36:	bf40      	sev
    __WFE ();
 8102b38:	bf20      	wfe
}
 8102b3a:	bf00      	nop
 8102b3c:	bd80      	pop	{r7, pc}
	...

08102b40 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8102b40:	b480      	push	{r7}
 8102b42:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8102b44:	4b05      	ldr	r3, [pc, #20]	@ (8102b5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8102b46:	68db      	ldr	r3, [r3, #12]
 8102b48:	4a04      	ldr	r2, [pc, #16]	@ (8102b5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8102b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8102b4e:	60d3      	str	r3, [r2, #12]
}
 8102b50:	bf00      	nop
 8102b52:	46bd      	mov	sp, r7
 8102b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b58:	4770      	bx	lr
 8102b5a:	bf00      	nop
 8102b5c:	58024800 	.word	0x58024800

08102b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102b60:	b480      	push	{r7}
 8102b62:	b089      	sub	sp, #36	@ 0x24
 8102b64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102b66:	4bb3      	ldr	r3, [pc, #716]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b68:	691b      	ldr	r3, [r3, #16]
 8102b6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8102b6e:	2b18      	cmp	r3, #24
 8102b70:	f200 8155 	bhi.w	8102e1e <HAL_RCC_GetSysClockFreq+0x2be>
 8102b74:	a201      	add	r2, pc, #4	@ (adr r2, 8102b7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102b7a:	bf00      	nop
 8102b7c:	08102be1 	.word	0x08102be1
 8102b80:	08102e1f 	.word	0x08102e1f
 8102b84:	08102e1f 	.word	0x08102e1f
 8102b88:	08102e1f 	.word	0x08102e1f
 8102b8c:	08102e1f 	.word	0x08102e1f
 8102b90:	08102e1f 	.word	0x08102e1f
 8102b94:	08102e1f 	.word	0x08102e1f
 8102b98:	08102e1f 	.word	0x08102e1f
 8102b9c:	08102c07 	.word	0x08102c07
 8102ba0:	08102e1f 	.word	0x08102e1f
 8102ba4:	08102e1f 	.word	0x08102e1f
 8102ba8:	08102e1f 	.word	0x08102e1f
 8102bac:	08102e1f 	.word	0x08102e1f
 8102bb0:	08102e1f 	.word	0x08102e1f
 8102bb4:	08102e1f 	.word	0x08102e1f
 8102bb8:	08102e1f 	.word	0x08102e1f
 8102bbc:	08102c0d 	.word	0x08102c0d
 8102bc0:	08102e1f 	.word	0x08102e1f
 8102bc4:	08102e1f 	.word	0x08102e1f
 8102bc8:	08102e1f 	.word	0x08102e1f
 8102bcc:	08102e1f 	.word	0x08102e1f
 8102bd0:	08102e1f 	.word	0x08102e1f
 8102bd4:	08102e1f 	.word	0x08102e1f
 8102bd8:	08102e1f 	.word	0x08102e1f
 8102bdc:	08102c13 	.word	0x08102c13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102be0:	4b94      	ldr	r3, [pc, #592]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102be2:	681b      	ldr	r3, [r3, #0]
 8102be4:	f003 0320 	and.w	r3, r3, #32
 8102be8:	2b00      	cmp	r3, #0
 8102bea:	d009      	beq.n	8102c00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102bec:	4b91      	ldr	r3, [pc, #580]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bee:	681b      	ldr	r3, [r3, #0]
 8102bf0:	08db      	lsrs	r3, r3, #3
 8102bf2:	f003 0303 	and.w	r3, r3, #3
 8102bf6:	4a90      	ldr	r2, [pc, #576]	@ (8102e38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8102bfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102bfe:	e111      	b.n	8102e24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102c00:	4b8d      	ldr	r3, [pc, #564]	@ (8102e38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c02:	61bb      	str	r3, [r7, #24]
      break;
 8102c04:	e10e      	b.n	8102e24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102c06:	4b8d      	ldr	r3, [pc, #564]	@ (8102e3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102c08:	61bb      	str	r3, [r7, #24]
      break;
 8102c0a:	e10b      	b.n	8102e24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8102e40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102c0e:	61bb      	str	r3, [r7, #24]
      break;
 8102c10:	e108      	b.n	8102e24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102c12:	4b88      	ldr	r3, [pc, #544]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102c16:	f003 0303 	and.w	r3, r3, #3
 8102c1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102c1c:	4b85      	ldr	r3, [pc, #532]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102c20:	091b      	lsrs	r3, r3, #4
 8102c22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102c26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102c28:	4b82      	ldr	r3, [pc, #520]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c2c:	f003 0301 	and.w	r3, r3, #1
 8102c30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102c32:	4b80      	ldr	r3, [pc, #512]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102c36:	08db      	lsrs	r3, r3, #3
 8102c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102c3c:	68fa      	ldr	r2, [r7, #12]
 8102c3e:	fb02 f303 	mul.w	r3, r2, r3
 8102c42:	ee07 3a90 	vmov	s15, r3
 8102c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102c4e:	693b      	ldr	r3, [r7, #16]
 8102c50:	2b00      	cmp	r3, #0
 8102c52:	f000 80e1 	beq.w	8102e18 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8102c56:	697b      	ldr	r3, [r7, #20]
 8102c58:	2b02      	cmp	r3, #2
 8102c5a:	f000 8083 	beq.w	8102d64 <HAL_RCC_GetSysClockFreq+0x204>
 8102c5e:	697b      	ldr	r3, [r7, #20]
 8102c60:	2b02      	cmp	r3, #2
 8102c62:	f200 80a1 	bhi.w	8102da8 <HAL_RCC_GetSysClockFreq+0x248>
 8102c66:	697b      	ldr	r3, [r7, #20]
 8102c68:	2b00      	cmp	r3, #0
 8102c6a:	d003      	beq.n	8102c74 <HAL_RCC_GetSysClockFreq+0x114>
 8102c6c:	697b      	ldr	r3, [r7, #20]
 8102c6e:	2b01      	cmp	r3, #1
 8102c70:	d056      	beq.n	8102d20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102c72:	e099      	b.n	8102da8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102c74:	4b6f      	ldr	r3, [pc, #444]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	f003 0320 	and.w	r3, r3, #32
 8102c7c:	2b00      	cmp	r3, #0
 8102c7e:	d02d      	beq.n	8102cdc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102c80:	4b6c      	ldr	r3, [pc, #432]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	08db      	lsrs	r3, r3, #3
 8102c86:	f003 0303 	and.w	r3, r3, #3
 8102c8a:	4a6b      	ldr	r2, [pc, #428]	@ (8102e38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8102c90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	ee07 3a90 	vmov	s15, r3
 8102c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c9c:	693b      	ldr	r3, [r7, #16]
 8102c9e:	ee07 3a90 	vmov	s15, r3
 8102ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102caa:	4b62      	ldr	r3, [pc, #392]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102cb2:	ee07 3a90 	vmov	s15, r3
 8102cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8102cbe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8102e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8102cda:	e087      	b.n	8102dec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102cdc:	693b      	ldr	r3, [r7, #16]
 8102cde:	ee07 3a90 	vmov	s15, r3
 8102ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ce6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8102e48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102cee:	4b51      	ldr	r3, [pc, #324]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102cf6:	ee07 3a90 	vmov	s15, r3
 8102cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8102e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102d1e:	e065      	b.n	8102dec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102d20:	693b      	ldr	r3, [r7, #16]
 8102d22:	ee07 3a90 	vmov	s15, r3
 8102d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8102e4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d32:	4b40      	ldr	r3, [pc, #256]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d3a:	ee07 3a90 	vmov	s15, r3
 8102d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8102e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102d62:	e043      	b.n	8102dec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102d64:	693b      	ldr	r3, [r7, #16]
 8102d66:	ee07 3a90 	vmov	s15, r3
 8102d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102e50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d76:	4b2f      	ldr	r3, [pc, #188]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d7e:	ee07 3a90 	vmov	s15, r3
 8102d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8102e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102da2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102da6:	e021      	b.n	8102dec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102da8:	693b      	ldr	r3, [r7, #16]
 8102daa:	ee07 3a90 	vmov	s15, r3
 8102dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102db2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8102e4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8102db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102dba:	4b1e      	ldr	r3, [pc, #120]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dc2:	ee07 3a90 	vmov	s15, r3
 8102dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8102dce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8102e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102de6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102dea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102dec:	4b11      	ldr	r3, [pc, #68]	@ (8102e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102df0:	0a5b      	lsrs	r3, r3, #9
 8102df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102df6:	3301      	adds	r3, #1
 8102df8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8102dfa:	683b      	ldr	r3, [r7, #0]
 8102dfc:	ee07 3a90 	vmov	s15, r3
 8102e00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e10:	ee17 3a90 	vmov	r3, s15
 8102e14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102e16:	e005      	b.n	8102e24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102e18:	2300      	movs	r3, #0
 8102e1a:	61bb      	str	r3, [r7, #24]
      break;
 8102e1c:	e002      	b.n	8102e24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8102e1e:	4b07      	ldr	r3, [pc, #28]	@ (8102e3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102e20:	61bb      	str	r3, [r7, #24]
      break;
 8102e22:	bf00      	nop
  }

  return sysclockfreq;
 8102e24:	69bb      	ldr	r3, [r7, #24]
}
 8102e26:	4618      	mov	r0, r3
 8102e28:	3724      	adds	r7, #36	@ 0x24
 8102e2a:	46bd      	mov	sp, r7
 8102e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e30:	4770      	bx	lr
 8102e32:	bf00      	nop
 8102e34:	58024400 	.word	0x58024400
 8102e38:	03d09000 	.word	0x03d09000
 8102e3c:	003d0900 	.word	0x003d0900
 8102e40:	017d7840 	.word	0x017d7840
 8102e44:	46000000 	.word	0x46000000
 8102e48:	4c742400 	.word	0x4c742400
 8102e4c:	4a742400 	.word	0x4a742400
 8102e50:	4bbebc20 	.word	0x4bbebc20

08102e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102e54:	b580      	push	{r7, lr}
 8102e56:	b082      	sub	sp, #8
 8102e58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102e5a:	f7ff fe81 	bl	8102b60 <HAL_RCC_GetSysClockFreq>
 8102e5e:	4602      	mov	r2, r0
 8102e60:	4b11      	ldr	r3, [pc, #68]	@ (8102ea8 <HAL_RCC_GetHCLKFreq+0x54>)
 8102e62:	699b      	ldr	r3, [r3, #24]
 8102e64:	0a1b      	lsrs	r3, r3, #8
 8102e66:	f003 030f 	and.w	r3, r3, #15
 8102e6a:	4910      	ldr	r1, [pc, #64]	@ (8102eac <HAL_RCC_GetHCLKFreq+0x58>)
 8102e6c:	5ccb      	ldrb	r3, [r1, r3]
 8102e6e:	f003 031f 	and.w	r3, r3, #31
 8102e72:	fa22 f303 	lsr.w	r3, r2, r3
 8102e76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102e78:	4b0b      	ldr	r3, [pc, #44]	@ (8102ea8 <HAL_RCC_GetHCLKFreq+0x54>)
 8102e7a:	699b      	ldr	r3, [r3, #24]
 8102e7c:	f003 030f 	and.w	r3, r3, #15
 8102e80:	4a0a      	ldr	r2, [pc, #40]	@ (8102eac <HAL_RCC_GetHCLKFreq+0x58>)
 8102e82:	5cd3      	ldrb	r3, [r2, r3]
 8102e84:	f003 031f 	and.w	r3, r3, #31
 8102e88:	687a      	ldr	r2, [r7, #4]
 8102e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8102e8e:	4a08      	ldr	r2, [pc, #32]	@ (8102eb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102e90:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102e92:	4b07      	ldr	r3, [pc, #28]	@ (8102eb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102e94:	681b      	ldr	r3, [r3, #0]
 8102e96:	4a07      	ldr	r2, [pc, #28]	@ (8102eb4 <HAL_RCC_GetHCLKFreq+0x60>)
 8102e98:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102e9a:	4b05      	ldr	r3, [pc, #20]	@ (8102eb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102e9c:	681b      	ldr	r3, [r3, #0]
}
 8102e9e:	4618      	mov	r0, r3
 8102ea0:	3708      	adds	r7, #8
 8102ea2:	46bd      	mov	sp, r7
 8102ea4:	bd80      	pop	{r7, pc}
 8102ea6:	bf00      	nop
 8102ea8:	58024400 	.word	0x58024400
 8102eac:	08108934 	.word	0x08108934
 8102eb0:	10000004 	.word	0x10000004
 8102eb4:	10000000 	.word	0x10000000

08102eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102eb8:	b580      	push	{r7, lr}
 8102eba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102ebc:	f7ff ffca 	bl	8102e54 <HAL_RCC_GetHCLKFreq>
 8102ec0:	4602      	mov	r2, r0
 8102ec2:	4b06      	ldr	r3, [pc, #24]	@ (8102edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8102ec4:	69db      	ldr	r3, [r3, #28]
 8102ec6:	091b      	lsrs	r3, r3, #4
 8102ec8:	f003 0307 	and.w	r3, r3, #7
 8102ecc:	4904      	ldr	r1, [pc, #16]	@ (8102ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102ece:	5ccb      	ldrb	r3, [r1, r3]
 8102ed0:	f003 031f 	and.w	r3, r3, #31
 8102ed4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102ed8:	4618      	mov	r0, r3
 8102eda:	bd80      	pop	{r7, pc}
 8102edc:	58024400 	.word	0x58024400
 8102ee0:	08108934 	.word	0x08108934

08102ee4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8102ee4:	b480      	push	{r7}
 8102ee6:	b083      	sub	sp, #12
 8102ee8:	af00      	add	r7, sp, #0
 8102eea:	6078      	str	r0, [r7, #4]
 8102eec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	223f      	movs	r2, #63	@ 0x3f
 8102ef2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8102ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8102f60 <HAL_RCC_GetClockConfig+0x7c>)
 8102ef6:	691b      	ldr	r3, [r3, #16]
 8102ef8:	f003 0207 	and.w	r2, r3, #7
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8102f00:	4b17      	ldr	r3, [pc, #92]	@ (8102f60 <HAL_RCC_GetClockConfig+0x7c>)
 8102f02:	699b      	ldr	r3, [r3, #24]
 8102f04:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8102f0c:	4b14      	ldr	r3, [pc, #80]	@ (8102f60 <HAL_RCC_GetClockConfig+0x7c>)
 8102f0e:	699b      	ldr	r3, [r3, #24]
 8102f10:	f003 020f 	and.w	r2, r3, #15
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8102f18:	4b11      	ldr	r3, [pc, #68]	@ (8102f60 <HAL_RCC_GetClockConfig+0x7c>)
 8102f1a:	699b      	ldr	r3, [r3, #24]
 8102f1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8102f24:	4b0e      	ldr	r3, [pc, #56]	@ (8102f60 <HAL_RCC_GetClockConfig+0x7c>)
 8102f26:	69db      	ldr	r3, [r3, #28]
 8102f28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8102f30:	4b0b      	ldr	r3, [pc, #44]	@ (8102f60 <HAL_RCC_GetClockConfig+0x7c>)
 8102f32:	69db      	ldr	r3, [r3, #28]
 8102f34:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8102f3c:	4b08      	ldr	r3, [pc, #32]	@ (8102f60 <HAL_RCC_GetClockConfig+0x7c>)
 8102f3e:	6a1b      	ldr	r3, [r3, #32]
 8102f40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8102f48:	4b06      	ldr	r3, [pc, #24]	@ (8102f64 <HAL_RCC_GetClockConfig+0x80>)
 8102f4a:	681b      	ldr	r3, [r3, #0]
 8102f4c:	f003 020f 	and.w	r2, r3, #15
 8102f50:	683b      	ldr	r3, [r7, #0]
 8102f52:	601a      	str	r2, [r3, #0]
}
 8102f54:	bf00      	nop
 8102f56:	370c      	adds	r7, #12
 8102f58:	46bd      	mov	sp, r7
 8102f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f5e:	4770      	bx	lr
 8102f60:	58024400 	.word	0x58024400
 8102f64:	52002000 	.word	0x52002000

08102f68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102f6c:	b0cc      	sub	sp, #304	@ 0x130
 8102f6e:	af00      	add	r7, sp, #0
 8102f70:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102f74:	2300      	movs	r3, #0
 8102f76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102f7a:	2300      	movs	r3, #0
 8102f7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102f8c:	2500      	movs	r5, #0
 8102f8e:	ea54 0305 	orrs.w	r3, r4, r5
 8102f92:	d049      	beq.n	8103028 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102f9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102f9e:	d02f      	beq.n	8103000 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102fa0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102fa4:	d828      	bhi.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102fa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102faa:	d01a      	beq.n	8102fe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102fac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102fb0:	d822      	bhi.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102fb2:	2b00      	cmp	r3, #0
 8102fb4:	d003      	beq.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8102fb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102fba:	d007      	beq.n	8102fcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102fbc:	e01c      	b.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fbe:	4bb8      	ldr	r3, [pc, #736]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fc2:	4ab7      	ldr	r2, [pc, #732]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102fca:	e01a      	b.n	8103002 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fd0:	3308      	adds	r3, #8
 8102fd2:	2102      	movs	r1, #2
 8102fd4:	4618      	mov	r0, r3
 8102fd6:	f002 fba1 	bl	810571c <RCCEx_PLL2_Config>
 8102fda:	4603      	mov	r3, r0
 8102fdc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102fe0:	e00f      	b.n	8103002 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fe6:	3328      	adds	r3, #40	@ 0x28
 8102fe8:	2102      	movs	r1, #2
 8102fea:	4618      	mov	r0, r3
 8102fec:	f002 fc48 	bl	8105880 <RCCEx_PLL3_Config>
 8102ff0:	4603      	mov	r3, r0
 8102ff2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102ff6:	e004      	b.n	8103002 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102ff8:	2301      	movs	r3, #1
 8102ffa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102ffe:	e000      	b.n	8103002 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103002:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103006:	2b00      	cmp	r3, #0
 8103008:	d10a      	bne.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810300a:	4ba5      	ldr	r3, [pc, #660]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810300c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810300e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103012:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103018:	4aa1      	ldr	r2, [pc, #644]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810301a:	430b      	orrs	r3, r1
 810301c:	6513      	str	r3, [r2, #80]	@ 0x50
 810301e:	e003      	b.n	8103028 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103020:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103024:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103028:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103030:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8103034:	f04f 0900 	mov.w	r9, #0
 8103038:	ea58 0309 	orrs.w	r3, r8, r9
 810303c:	d047      	beq.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810303e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103044:	2b04      	cmp	r3, #4
 8103046:	d82a      	bhi.n	810309e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103048:	a201      	add	r2, pc, #4	@ (adr r2, 8103050 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810304e:	bf00      	nop
 8103050:	08103065 	.word	0x08103065
 8103054:	08103073 	.word	0x08103073
 8103058:	08103089 	.word	0x08103089
 810305c:	081030a7 	.word	0x081030a7
 8103060:	081030a7 	.word	0x081030a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103064:	4b8e      	ldr	r3, [pc, #568]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103068:	4a8d      	ldr	r2, [pc, #564]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810306a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810306e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103070:	e01a      	b.n	81030a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103072:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103076:	3308      	adds	r3, #8
 8103078:	2100      	movs	r1, #0
 810307a:	4618      	mov	r0, r3
 810307c:	f002 fb4e 	bl	810571c <RCCEx_PLL2_Config>
 8103080:	4603      	mov	r3, r0
 8103082:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103086:	e00f      	b.n	81030a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810308c:	3328      	adds	r3, #40	@ 0x28
 810308e:	2100      	movs	r1, #0
 8103090:	4618      	mov	r0, r3
 8103092:	f002 fbf5 	bl	8105880 <RCCEx_PLL3_Config>
 8103096:	4603      	mov	r3, r0
 8103098:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810309c:	e004      	b.n	81030a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810309e:	2301      	movs	r3, #1
 81030a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81030a4:	e000      	b.n	81030a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81030a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81030a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81030ac:	2b00      	cmp	r3, #0
 81030ae:	d10a      	bne.n	81030c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81030b0:	4b7b      	ldr	r3, [pc, #492]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81030b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81030b4:	f023 0107 	bic.w	r1, r3, #7
 81030b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81030be:	4a78      	ldr	r2, [pc, #480]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81030c0:	430b      	orrs	r3, r1
 81030c2:	6513      	str	r3, [r2, #80]	@ 0x50
 81030c4:	e003      	b.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81030ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81030ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81030da:	f04f 0b00 	mov.w	fp, #0
 81030de:	ea5a 030b 	orrs.w	r3, sl, fp
 81030e2:	d04c      	beq.n	810317e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81030e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81030ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81030ee:	d030      	beq.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81030f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81030f4:	d829      	bhi.n	810314a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81030f6:	2bc0      	cmp	r3, #192	@ 0xc0
 81030f8:	d02d      	beq.n	8103156 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81030fa:	2bc0      	cmp	r3, #192	@ 0xc0
 81030fc:	d825      	bhi.n	810314a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81030fe:	2b80      	cmp	r3, #128	@ 0x80
 8103100:	d018      	beq.n	8103134 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8103102:	2b80      	cmp	r3, #128	@ 0x80
 8103104:	d821      	bhi.n	810314a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103106:	2b00      	cmp	r3, #0
 8103108:	d002      	beq.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810310a:	2b40      	cmp	r3, #64	@ 0x40
 810310c:	d007      	beq.n	810311e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810310e:	e01c      	b.n	810314a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103110:	4b63      	ldr	r3, [pc, #396]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103114:	4a62      	ldr	r2, [pc, #392]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810311a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810311c:	e01c      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810311e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103122:	3308      	adds	r3, #8
 8103124:	2100      	movs	r1, #0
 8103126:	4618      	mov	r0, r3
 8103128:	f002 faf8 	bl	810571c <RCCEx_PLL2_Config>
 810312c:	4603      	mov	r3, r0
 810312e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103132:	e011      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103134:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103138:	3328      	adds	r3, #40	@ 0x28
 810313a:	2100      	movs	r1, #0
 810313c:	4618      	mov	r0, r3
 810313e:	f002 fb9f 	bl	8105880 <RCCEx_PLL3_Config>
 8103142:	4603      	mov	r3, r0
 8103144:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103148:	e006      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810314a:	2301      	movs	r3, #1
 810314c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103150:	e002      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103152:	bf00      	nop
 8103154:	e000      	b.n	8103158 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103158:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810315c:	2b00      	cmp	r3, #0
 810315e:	d10a      	bne.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103160:	4b4f      	ldr	r3, [pc, #316]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103164:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8103168:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810316c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810316e:	4a4c      	ldr	r2, [pc, #304]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103170:	430b      	orrs	r3, r1
 8103172:	6513      	str	r3, [r2, #80]	@ 0x50
 8103174:	e003      	b.n	810317e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103176:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810317a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810317e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103186:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810318a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 810318e:	2300      	movs	r3, #0
 8103190:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8103194:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8103198:	460b      	mov	r3, r1
 810319a:	4313      	orrs	r3, r2
 810319c:	d053      	beq.n	8103246 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810319e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81031a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81031aa:	d035      	beq.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81031ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81031b0:	d82e      	bhi.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81031b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81031b6:	d031      	beq.n	810321c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81031b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81031bc:	d828      	bhi.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81031be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81031c2:	d01a      	beq.n	81031fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 81031c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81031c8:	d822      	bhi.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81031ca:	2b00      	cmp	r3, #0
 81031cc:	d003      	beq.n	81031d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81031ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81031d2:	d007      	beq.n	81031e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81031d4:	e01c      	b.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031d6:	4b32      	ldr	r3, [pc, #200]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031da:	4a31      	ldr	r2, [pc, #196]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81031dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81031e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81031e2:	e01c      	b.n	810321e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81031e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031e8:	3308      	adds	r3, #8
 81031ea:	2100      	movs	r1, #0
 81031ec:	4618      	mov	r0, r3
 81031ee:	f002 fa95 	bl	810571c <RCCEx_PLL2_Config>
 81031f2:	4603      	mov	r3, r0
 81031f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81031f8:	e011      	b.n	810321e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81031fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031fe:	3328      	adds	r3, #40	@ 0x28
 8103200:	2100      	movs	r1, #0
 8103202:	4618      	mov	r0, r3
 8103204:	f002 fb3c 	bl	8105880 <RCCEx_PLL3_Config>
 8103208:	4603      	mov	r3, r0
 810320a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810320e:	e006      	b.n	810321e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103210:	2301      	movs	r3, #1
 8103212:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103216:	e002      	b.n	810321e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103218:	bf00      	nop
 810321a:	e000      	b.n	810321e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810321c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810321e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103222:	2b00      	cmp	r3, #0
 8103224:	d10b      	bne.n	810323e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103226:	4b1e      	ldr	r3, [pc, #120]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810322a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810322e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103236:	4a1a      	ldr	r2, [pc, #104]	@ (81032a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103238:	430b      	orrs	r3, r1
 810323a:	6593      	str	r3, [r2, #88]	@ 0x58
 810323c:	e003      	b.n	8103246 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810323e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103242:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810324e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8103252:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8103256:	2300      	movs	r3, #0
 8103258:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810325c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8103260:	460b      	mov	r3, r1
 8103262:	4313      	orrs	r3, r2
 8103264:	d056      	beq.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810326a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810326e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103272:	d038      	beq.n	81032e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103274:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103278:	d831      	bhi.n	81032de <HAL_RCCEx_PeriphCLKConfig+0x376>
 810327a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810327e:	d034      	beq.n	81032ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103280:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103284:	d82b      	bhi.n	81032de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810328a:	d01d      	beq.n	81032c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810328c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103290:	d825      	bhi.n	81032de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103292:	2b00      	cmp	r3, #0
 8103294:	d006      	beq.n	81032a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103296:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810329a:	d00a      	beq.n	81032b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810329c:	e01f      	b.n	81032de <HAL_RCCEx_PeriphCLKConfig+0x376>
 810329e:	bf00      	nop
 81032a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032a4:	4ba2      	ldr	r3, [pc, #648]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81032a8:	4aa1      	ldr	r2, [pc, #644]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81032aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81032ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81032b0:	e01c      	b.n	81032ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81032b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032b6:	3308      	adds	r3, #8
 81032b8:	2100      	movs	r1, #0
 81032ba:	4618      	mov	r0, r3
 81032bc:	f002 fa2e 	bl	810571c <RCCEx_PLL2_Config>
 81032c0:	4603      	mov	r3, r0
 81032c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81032c6:	e011      	b.n	81032ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81032c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032cc:	3328      	adds	r3, #40	@ 0x28
 81032ce:	2100      	movs	r1, #0
 81032d0:	4618      	mov	r0, r3
 81032d2:	f002 fad5 	bl	8105880 <RCCEx_PLL3_Config>
 81032d6:	4603      	mov	r3, r0
 81032d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81032dc:	e006      	b.n	81032ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81032de:	2301      	movs	r3, #1
 81032e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81032e4:	e002      	b.n	81032ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81032e6:	bf00      	nop
 81032e8:	e000      	b.n	81032ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81032ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81032ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81032f0:	2b00      	cmp	r3, #0
 81032f2:	d10b      	bne.n	810330c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81032f4:	4b8e      	ldr	r3, [pc, #568]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81032f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81032fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103304:	4a8a      	ldr	r2, [pc, #552]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103306:	430b      	orrs	r3, r1
 8103308:	6593      	str	r3, [r2, #88]	@ 0x58
 810330a:	e003      	b.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810330c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103310:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103318:	e9d3 2300 	ldrd	r2, r3, [r3]
 810331c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8103320:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8103324:	2300      	movs	r3, #0
 8103326:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810332a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810332e:	460b      	mov	r3, r1
 8103330:	4313      	orrs	r3, r2
 8103332:	d03a      	beq.n	81033aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810333a:	2b30      	cmp	r3, #48	@ 0x30
 810333c:	d01f      	beq.n	810337e <HAL_RCCEx_PeriphCLKConfig+0x416>
 810333e:	2b30      	cmp	r3, #48	@ 0x30
 8103340:	d819      	bhi.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103342:	2b20      	cmp	r3, #32
 8103344:	d00c      	beq.n	8103360 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103346:	2b20      	cmp	r3, #32
 8103348:	d815      	bhi.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810334a:	2b00      	cmp	r3, #0
 810334c:	d019      	beq.n	8103382 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810334e:	2b10      	cmp	r3, #16
 8103350:	d111      	bne.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103352:	4b77      	ldr	r3, [pc, #476]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103356:	4a76      	ldr	r2, [pc, #472]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810335c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810335e:	e011      	b.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103360:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103364:	3308      	adds	r3, #8
 8103366:	2102      	movs	r1, #2
 8103368:	4618      	mov	r0, r3
 810336a:	f002 f9d7 	bl	810571c <RCCEx_PLL2_Config>
 810336e:	4603      	mov	r3, r0
 8103370:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103374:	e006      	b.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103376:	2301      	movs	r3, #1
 8103378:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810337c:	e002      	b.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810337e:	bf00      	nop
 8103380:	e000      	b.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103384:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103388:	2b00      	cmp	r3, #0
 810338a:	d10a      	bne.n	81033a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810338c:	4b68      	ldr	r3, [pc, #416]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810338e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103390:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8103394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810339a:	4a65      	ldr	r2, [pc, #404]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810339c:	430b      	orrs	r3, r1
 810339e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81033a0:	e003      	b.n	81033aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81033aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81033b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81033ba:	2300      	movs	r3, #0
 81033bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81033c0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81033c4:	460b      	mov	r3, r1
 81033c6:	4313      	orrs	r3, r2
 81033c8:	d051      	beq.n	810346e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81033ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81033d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81033d4:	d035      	beq.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81033d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81033da:	d82e      	bhi.n	810343a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81033dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81033e0:	d031      	beq.n	8103446 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81033e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81033e6:	d828      	bhi.n	810343a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81033e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81033ec:	d01a      	beq.n	8103424 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81033ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81033f2:	d822      	bhi.n	810343a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81033f4:	2b00      	cmp	r3, #0
 81033f6:	d003      	beq.n	8103400 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81033f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81033fc:	d007      	beq.n	810340e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81033fe:	e01c      	b.n	810343a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103400:	4b4b      	ldr	r3, [pc, #300]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103404:	4a4a      	ldr	r2, [pc, #296]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810340a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810340c:	e01c      	b.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810340e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103412:	3308      	adds	r3, #8
 8103414:	2100      	movs	r1, #0
 8103416:	4618      	mov	r0, r3
 8103418:	f002 f980 	bl	810571c <RCCEx_PLL2_Config>
 810341c:	4603      	mov	r3, r0
 810341e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103422:	e011      	b.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103424:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103428:	3328      	adds	r3, #40	@ 0x28
 810342a:	2100      	movs	r1, #0
 810342c:	4618      	mov	r0, r3
 810342e:	f002 fa27 	bl	8105880 <RCCEx_PLL3_Config>
 8103432:	4603      	mov	r3, r0
 8103434:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103438:	e006      	b.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810343a:	2301      	movs	r3, #1
 810343c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103440:	e002      	b.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103442:	bf00      	nop
 8103444:	e000      	b.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103448:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810344c:	2b00      	cmp	r3, #0
 810344e:	d10a      	bne.n	8103466 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103450:	4b37      	ldr	r3, [pc, #220]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103454:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8103458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810345c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810345e:	4a34      	ldr	r2, [pc, #208]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103460:	430b      	orrs	r3, r1
 8103462:	6513      	str	r3, [r2, #80]	@ 0x50
 8103464:	e003      	b.n	810346e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103466:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810346a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810346e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103476:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810347a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810347e:	2300      	movs	r3, #0
 8103480:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8103484:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8103488:	460b      	mov	r3, r1
 810348a:	4313      	orrs	r3, r2
 810348c:	d056      	beq.n	810353c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810348e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103498:	d033      	beq.n	8103502 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810349a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810349e:	d82c      	bhi.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81034a4:	d02f      	beq.n	8103506 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81034a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81034aa:	d826      	bhi.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81034b0:	d02b      	beq.n	810350a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81034b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81034b6:	d820      	bhi.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81034bc:	d012      	beq.n	81034e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81034be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81034c2:	d81a      	bhi.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034c4:	2b00      	cmp	r3, #0
 81034c6:	d022      	beq.n	810350e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81034c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81034cc:	d115      	bne.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81034ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034d2:	3308      	adds	r3, #8
 81034d4:	2101      	movs	r1, #1
 81034d6:	4618      	mov	r0, r3
 81034d8:	f002 f920 	bl	810571c <RCCEx_PLL2_Config>
 81034dc:	4603      	mov	r3, r0
 81034de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81034e2:	e015      	b.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81034e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034e8:	3328      	adds	r3, #40	@ 0x28
 81034ea:	2101      	movs	r1, #1
 81034ec:	4618      	mov	r0, r3
 81034ee:	f002 f9c7 	bl	8105880 <RCCEx_PLL3_Config>
 81034f2:	4603      	mov	r3, r0
 81034f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81034f8:	e00a      	b.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81034fa:	2301      	movs	r3, #1
 81034fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103500:	e006      	b.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103502:	bf00      	nop
 8103504:	e004      	b.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103506:	bf00      	nop
 8103508:	e002      	b.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810350a:	bf00      	nop
 810350c:	e000      	b.n	8103510 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810350e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103510:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103514:	2b00      	cmp	r3, #0
 8103516:	d10d      	bne.n	8103534 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103518:	4b05      	ldr	r3, [pc, #20]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810351a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810351c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103520:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103526:	4a02      	ldr	r2, [pc, #8]	@ (8103530 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103528:	430b      	orrs	r3, r1
 810352a:	6513      	str	r3, [r2, #80]	@ 0x50
 810352c:	e006      	b.n	810353c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810352e:	bf00      	nop
 8103530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103534:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103538:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810353c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103544:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103548:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810354c:	2300      	movs	r3, #0
 810354e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8103552:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8103556:	460b      	mov	r3, r1
 8103558:	4313      	orrs	r3, r2
 810355a:	d055      	beq.n	8103608 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810355c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103560:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103568:	d033      	beq.n	81035d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810356a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810356e:	d82c      	bhi.n	81035ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103574:	d02f      	beq.n	81035d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810357a:	d826      	bhi.n	81035ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 810357c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103580:	d02b      	beq.n	81035da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103582:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103586:	d820      	bhi.n	81035ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810358c:	d012      	beq.n	81035b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810358e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103592:	d81a      	bhi.n	81035ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103594:	2b00      	cmp	r3, #0
 8103596:	d022      	beq.n	81035de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810359c:	d115      	bne.n	81035ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810359e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035a2:	3308      	adds	r3, #8
 81035a4:	2101      	movs	r1, #1
 81035a6:	4618      	mov	r0, r3
 81035a8:	f002 f8b8 	bl	810571c <RCCEx_PLL2_Config>
 81035ac:	4603      	mov	r3, r0
 81035ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81035b2:	e015      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81035b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035b8:	3328      	adds	r3, #40	@ 0x28
 81035ba:	2101      	movs	r1, #1
 81035bc:	4618      	mov	r0, r3
 81035be:	f002 f95f 	bl	8105880 <RCCEx_PLL3_Config>
 81035c2:	4603      	mov	r3, r0
 81035c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81035c8:	e00a      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81035ca:	2301      	movs	r3, #1
 81035cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81035d0:	e006      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81035d2:	bf00      	nop
 81035d4:	e004      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81035d6:	bf00      	nop
 81035d8:	e002      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81035da:	bf00      	nop
 81035dc:	e000      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81035de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81035e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81035e4:	2b00      	cmp	r3, #0
 81035e6:	d10b      	bne.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81035e8:	4bb7      	ldr	r3, [pc, #732]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81035ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81035ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81035f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81035f8:	4ab3      	ldr	r2, [pc, #716]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81035fa:	430b      	orrs	r3, r1
 81035fc:	6593      	str	r3, [r2, #88]	@ 0x58
 81035fe:	e003      	b.n	8103608 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103600:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103604:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8103608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103610:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8103614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8103618:	2300      	movs	r3, #0
 810361a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810361e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8103622:	460b      	mov	r3, r1
 8103624:	4313      	orrs	r3, r2
 8103626:	d02a      	beq.n	810367e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8103628:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810362c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810362e:	2b00      	cmp	r3, #0
 8103630:	d011      	beq.n	8103656 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8103632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103636:	d10a      	bne.n	810364e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103638:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810363c:	3308      	adds	r3, #8
 810363e:	2101      	movs	r1, #1
 8103640:	4618      	mov	r0, r3
 8103642:	f002 f86b 	bl	810571c <RCCEx_PLL2_Config>
 8103646:	4603      	mov	r3, r0
 8103648:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 810364c:	e004      	b.n	8103658 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810364e:	2301      	movs	r3, #1
 8103650:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103654:	e000      	b.n	8103658 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8103656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103658:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810365c:	2b00      	cmp	r3, #0
 810365e:	d10a      	bne.n	8103676 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8103660:	4b99      	ldr	r3, [pc, #612]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103664:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8103668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810366c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810366e:	4a96      	ldr	r2, [pc, #600]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103670:	430b      	orrs	r3, r1
 8103672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103674:	e003      	b.n	810367e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103676:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810367a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810367e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103686:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810368a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810368e:	2300      	movs	r3, #0
 8103690:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8103694:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8103698:	460b      	mov	r3, r1
 810369a:	4313      	orrs	r3, r2
 810369c:	d037      	beq.n	810370e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810369e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81036a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81036a8:	d00e      	beq.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 81036aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81036ae:	d816      	bhi.n	81036de <HAL_RCCEx_PeriphCLKConfig+0x776>
 81036b0:	2b00      	cmp	r3, #0
 81036b2:	d018      	beq.n	81036e6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 81036b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81036b8:	d111      	bne.n	81036de <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81036ba:	4b83      	ldr	r3, [pc, #524]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036be:	4a82      	ldr	r2, [pc, #520]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81036c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81036c6:	e00f      	b.n	81036e8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81036c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036cc:	3308      	adds	r3, #8
 81036ce:	2101      	movs	r1, #1
 81036d0:	4618      	mov	r0, r3
 81036d2:	f002 f823 	bl	810571c <RCCEx_PLL2_Config>
 81036d6:	4603      	mov	r3, r0
 81036d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81036dc:	e004      	b.n	81036e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036de:	2301      	movs	r3, #1
 81036e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81036e4:	e000      	b.n	81036e8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 81036e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81036e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81036ec:	2b00      	cmp	r3, #0
 81036ee:	d10a      	bne.n	8103706 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81036f0:	4b75      	ldr	r3, [pc, #468]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81036f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81036f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81036fe:	4a72      	ldr	r2, [pc, #456]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103700:	430b      	orrs	r3, r1
 8103702:	6513      	str	r3, [r2, #80]	@ 0x50
 8103704:	e003      	b.n	810370e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103706:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810370a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810370e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103716:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810371a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810371e:	2300      	movs	r3, #0
 8103720:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103724:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8103728:	460b      	mov	r3, r1
 810372a:	4313      	orrs	r3, r2
 810372c:	d03a      	beq.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810372e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103734:	2b03      	cmp	r3, #3
 8103736:	d81d      	bhi.n	8103774 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8103738:	a201      	add	r2, pc, #4	@ (adr r2, 8103740 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 810373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810373e:	bf00      	nop
 8103740:	0810377d 	.word	0x0810377d
 8103744:	08103751 	.word	0x08103751
 8103748:	0810375f 	.word	0x0810375f
 810374c:	0810377d 	.word	0x0810377d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103750:	4b5d      	ldr	r3, [pc, #372]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103754:	4a5c      	ldr	r2, [pc, #368]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810375a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810375c:	e00f      	b.n	810377e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810375e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103762:	3308      	adds	r3, #8
 8103764:	2102      	movs	r1, #2
 8103766:	4618      	mov	r0, r3
 8103768:	f001 ffd8 	bl	810571c <RCCEx_PLL2_Config>
 810376c:	4603      	mov	r3, r0
 810376e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103772:	e004      	b.n	810377e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103774:	2301      	movs	r3, #1
 8103776:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810377a:	e000      	b.n	810377e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 810377c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810377e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103782:	2b00      	cmp	r3, #0
 8103784:	d10a      	bne.n	810379c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103786:	4b50      	ldr	r3, [pc, #320]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810378a:	f023 0103 	bic.w	r1, r3, #3
 810378e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103794:	4a4c      	ldr	r2, [pc, #304]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103796:	430b      	orrs	r3, r1
 8103798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810379a:	e003      	b.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810379c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81037a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81037a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81037b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81037b4:	2300      	movs	r3, #0
 81037b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81037ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81037be:	460b      	mov	r3, r1
 81037c0:	4313      	orrs	r3, r2
 81037c2:	f000 80a0 	beq.w	8103906 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81037c6:	4b41      	ldr	r3, [pc, #260]	@ (81038cc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	4a40      	ldr	r2, [pc, #256]	@ (81038cc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81037cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81037d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81037d2:	f7fe fb99 	bl	8101f08 <HAL_GetTick>
 81037d6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81037da:	e00b      	b.n	81037f4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81037dc:	f7fe fb94 	bl	8101f08 <HAL_GetTick>
 81037e0:	4602      	mov	r2, r0
 81037e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 81037e6:	1ad3      	subs	r3, r2, r3
 81037e8:	2b64      	cmp	r3, #100	@ 0x64
 81037ea:	d903      	bls.n	81037f4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 81037ec:	2303      	movs	r3, #3
 81037ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81037f2:	e005      	b.n	8103800 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81037f4:	4b35      	ldr	r3, [pc, #212]	@ (81038cc <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81037fc:	2b00      	cmp	r3, #0
 81037fe:	d0ed      	beq.n	81037dc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8103800:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103804:	2b00      	cmp	r3, #0
 8103806:	d17a      	bne.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103808:	4b2f      	ldr	r3, [pc, #188]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810380a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810380c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103810:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103814:	4053      	eors	r3, r2
 8103816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810381a:	2b00      	cmp	r3, #0
 810381c:	d015      	beq.n	810384a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810381e:	4b2a      	ldr	r3, [pc, #168]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103826:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810382a:	4b27      	ldr	r3, [pc, #156]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810382e:	4a26      	ldr	r2, [pc, #152]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103834:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103836:	4b24      	ldr	r3, [pc, #144]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810383a:	4a23      	ldr	r2, [pc, #140]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810383c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8103840:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103842:	4a21      	ldr	r2, [pc, #132]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103844:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8103848:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810384a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810384e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103856:	d118      	bne.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103858:	f7fe fb56 	bl	8101f08 <HAL_GetTick>
 810385c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103860:	e00d      	b.n	810387e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103862:	f7fe fb51 	bl	8101f08 <HAL_GetTick>
 8103866:	4602      	mov	r2, r0
 8103868:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810386c:	1ad2      	subs	r2, r2, r3
 810386e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8103872:	429a      	cmp	r2, r3
 8103874:	d903      	bls.n	810387e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8103876:	2303      	movs	r3, #3
 8103878:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 810387c:	e005      	b.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810387e:	4b12      	ldr	r3, [pc, #72]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103882:	f003 0302 	and.w	r3, r3, #2
 8103886:	2b00      	cmp	r3, #0
 8103888:	d0eb      	beq.n	8103862 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810388a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810388e:	2b00      	cmp	r3, #0
 8103890:	d130      	bne.n	81038f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103896:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810389a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810389e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81038a2:	d115      	bne.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 81038a4:	4b08      	ldr	r3, [pc, #32]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038a6:	691b      	ldr	r3, [r3, #16]
 81038a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81038ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81038b4:	091b      	lsrs	r3, r3, #4
 81038b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81038ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81038be:	4a02      	ldr	r2, [pc, #8]	@ (81038c8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038c0:	430b      	orrs	r3, r1
 81038c2:	6113      	str	r3, [r2, #16]
 81038c4:	e00a      	b.n	81038dc <HAL_RCCEx_PeriphCLKConfig+0x974>
 81038c6:	bf00      	nop
 81038c8:	58024400 	.word	0x58024400
 81038cc:	58024800 	.word	0x58024800
 81038d0:	4bd4      	ldr	r3, [pc, #848]	@ (8103c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81038d2:	691b      	ldr	r3, [r3, #16]
 81038d4:	4ad3      	ldr	r2, [pc, #844]	@ (8103c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81038d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81038da:	6113      	str	r3, [r2, #16]
 81038dc:	4bd1      	ldr	r3, [pc, #836]	@ (8103c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81038de:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81038e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81038e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81038ec:	4acd      	ldr	r2, [pc, #820]	@ (8103c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81038ee:	430b      	orrs	r3, r1
 81038f0:	6713      	str	r3, [r2, #112]	@ 0x70
 81038f2:	e008      	b.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81038f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81038f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 81038fc:	e003      	b.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103902:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103906:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810390e:	f002 0301 	and.w	r3, r2, #1
 8103912:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8103916:	2300      	movs	r3, #0
 8103918:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810391c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8103920:	460b      	mov	r3, r1
 8103922:	4313      	orrs	r3, r2
 8103924:	f000 808b 	beq.w	8103a3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103928:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810392c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103930:	2b28      	cmp	r3, #40	@ 0x28
 8103932:	d86b      	bhi.n	8103a0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8103934:	a201      	add	r2, pc, #4	@ (adr r2, 810393c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8103936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810393a:	bf00      	nop
 810393c:	08103a15 	.word	0x08103a15
 8103940:	08103a0d 	.word	0x08103a0d
 8103944:	08103a0d 	.word	0x08103a0d
 8103948:	08103a0d 	.word	0x08103a0d
 810394c:	08103a0d 	.word	0x08103a0d
 8103950:	08103a0d 	.word	0x08103a0d
 8103954:	08103a0d 	.word	0x08103a0d
 8103958:	08103a0d 	.word	0x08103a0d
 810395c:	081039e1 	.word	0x081039e1
 8103960:	08103a0d 	.word	0x08103a0d
 8103964:	08103a0d 	.word	0x08103a0d
 8103968:	08103a0d 	.word	0x08103a0d
 810396c:	08103a0d 	.word	0x08103a0d
 8103970:	08103a0d 	.word	0x08103a0d
 8103974:	08103a0d 	.word	0x08103a0d
 8103978:	08103a0d 	.word	0x08103a0d
 810397c:	081039f7 	.word	0x081039f7
 8103980:	08103a0d 	.word	0x08103a0d
 8103984:	08103a0d 	.word	0x08103a0d
 8103988:	08103a0d 	.word	0x08103a0d
 810398c:	08103a0d 	.word	0x08103a0d
 8103990:	08103a0d 	.word	0x08103a0d
 8103994:	08103a0d 	.word	0x08103a0d
 8103998:	08103a0d 	.word	0x08103a0d
 810399c:	08103a15 	.word	0x08103a15
 81039a0:	08103a0d 	.word	0x08103a0d
 81039a4:	08103a0d 	.word	0x08103a0d
 81039a8:	08103a0d 	.word	0x08103a0d
 81039ac:	08103a0d 	.word	0x08103a0d
 81039b0:	08103a0d 	.word	0x08103a0d
 81039b4:	08103a0d 	.word	0x08103a0d
 81039b8:	08103a0d 	.word	0x08103a0d
 81039bc:	08103a15 	.word	0x08103a15
 81039c0:	08103a0d 	.word	0x08103a0d
 81039c4:	08103a0d 	.word	0x08103a0d
 81039c8:	08103a0d 	.word	0x08103a0d
 81039cc:	08103a0d 	.word	0x08103a0d
 81039d0:	08103a0d 	.word	0x08103a0d
 81039d4:	08103a0d 	.word	0x08103a0d
 81039d8:	08103a0d 	.word	0x08103a0d
 81039dc:	08103a15 	.word	0x08103a15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81039e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039e4:	3308      	adds	r3, #8
 81039e6:	2101      	movs	r1, #1
 81039e8:	4618      	mov	r0, r3
 81039ea:	f001 fe97 	bl	810571c <RCCEx_PLL2_Config>
 81039ee:	4603      	mov	r3, r0
 81039f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81039f4:	e00f      	b.n	8103a16 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81039f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039fa:	3328      	adds	r3, #40	@ 0x28
 81039fc:	2101      	movs	r1, #1
 81039fe:	4618      	mov	r0, r3
 8103a00:	f001 ff3e 	bl	8105880 <RCCEx_PLL3_Config>
 8103a04:	4603      	mov	r3, r0
 8103a06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103a0a:	e004      	b.n	8103a16 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a0c:	2301      	movs	r3, #1
 8103a0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103a12:	e000      	b.n	8103a16 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8103a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a1a:	2b00      	cmp	r3, #0
 8103a1c:	d10b      	bne.n	8103a36 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103a1e:	4b81      	ldr	r3, [pc, #516]	@ (8103c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8103a26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103a2e:	4a7d      	ldr	r2, [pc, #500]	@ (8103c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103a30:	430b      	orrs	r3, r1
 8103a32:	6553      	str	r3, [r2, #84]	@ 0x54
 8103a34:	e003      	b.n	8103a3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a46:	f002 0302 	and.w	r3, r2, #2
 8103a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8103a4e:	2300      	movs	r3, #0
 8103a50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8103a54:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8103a58:	460b      	mov	r3, r1
 8103a5a:	4313      	orrs	r3, r2
 8103a5c:	d042      	beq.n	8103ae4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103a64:	2b05      	cmp	r3, #5
 8103a66:	d825      	bhi.n	8103ab4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8103a68:	a201      	add	r2, pc, #4	@ (adr r2, 8103a70 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8103a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a6e:	bf00      	nop
 8103a70:	08103abd 	.word	0x08103abd
 8103a74:	08103a89 	.word	0x08103a89
 8103a78:	08103a9f 	.word	0x08103a9f
 8103a7c:	08103abd 	.word	0x08103abd
 8103a80:	08103abd 	.word	0x08103abd
 8103a84:	08103abd 	.word	0x08103abd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a8c:	3308      	adds	r3, #8
 8103a8e:	2101      	movs	r1, #1
 8103a90:	4618      	mov	r0, r3
 8103a92:	f001 fe43 	bl	810571c <RCCEx_PLL2_Config>
 8103a96:	4603      	mov	r3, r0
 8103a98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103a9c:	e00f      	b.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aa2:	3328      	adds	r3, #40	@ 0x28
 8103aa4:	2101      	movs	r1, #1
 8103aa6:	4618      	mov	r0, r3
 8103aa8:	f001 feea 	bl	8105880 <RCCEx_PLL3_Config>
 8103aac:	4603      	mov	r3, r0
 8103aae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103ab2:	e004      	b.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103ab4:	2301      	movs	r3, #1
 8103ab6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103aba:	e000      	b.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8103abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103abe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ac2:	2b00      	cmp	r3, #0
 8103ac4:	d10a      	bne.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103ac6:	4b57      	ldr	r3, [pc, #348]	@ (8103c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103aca:	f023 0107 	bic.w	r1, r3, #7
 8103ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ad2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103ad4:	4a53      	ldr	r2, [pc, #332]	@ (8103c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103ad6:	430b      	orrs	r3, r1
 8103ad8:	6553      	str	r3, [r2, #84]	@ 0x54
 8103ada:	e003      	b.n	8103ae4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103adc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103ae0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103aec:	f002 0304 	and.w	r3, r2, #4
 8103af0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8103af4:	2300      	movs	r3, #0
 8103af6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8103afa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8103afe:	460b      	mov	r3, r1
 8103b00:	4313      	orrs	r3, r2
 8103b02:	d044      	beq.n	8103b8e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103b0c:	2b05      	cmp	r3, #5
 8103b0e:	d825      	bhi.n	8103b5c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8103b10:	a201      	add	r2, pc, #4	@ (adr r2, 8103b18 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8103b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b16:	bf00      	nop
 8103b18:	08103b65 	.word	0x08103b65
 8103b1c:	08103b31 	.word	0x08103b31
 8103b20:	08103b47 	.word	0x08103b47
 8103b24:	08103b65 	.word	0x08103b65
 8103b28:	08103b65 	.word	0x08103b65
 8103b2c:	08103b65 	.word	0x08103b65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b34:	3308      	adds	r3, #8
 8103b36:	2101      	movs	r1, #1
 8103b38:	4618      	mov	r0, r3
 8103b3a:	f001 fdef 	bl	810571c <RCCEx_PLL2_Config>
 8103b3e:	4603      	mov	r3, r0
 8103b40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103b44:	e00f      	b.n	8103b66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b4a:	3328      	adds	r3, #40	@ 0x28
 8103b4c:	2101      	movs	r1, #1
 8103b4e:	4618      	mov	r0, r3
 8103b50:	f001 fe96 	bl	8105880 <RCCEx_PLL3_Config>
 8103b54:	4603      	mov	r3, r0
 8103b56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103b5a:	e004      	b.n	8103b66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b5c:	2301      	movs	r3, #1
 8103b5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103b62:	e000      	b.n	8103b66 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8103b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b6a:	2b00      	cmp	r3, #0
 8103b6c:	d10b      	bne.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8103c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b72:	f023 0107 	bic.w	r1, r3, #7
 8103b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103b7e:	4a29      	ldr	r2, [pc, #164]	@ (8103c24 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b80:	430b      	orrs	r3, r1
 8103b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8103b84:	e003      	b.n	8103b8e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b8a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b96:	f002 0320 	and.w	r3, r2, #32
 8103b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8103b9e:	2300      	movs	r3, #0
 8103ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8103ba4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8103ba8:	460b      	mov	r3, r1
 8103baa:	4313      	orrs	r3, r2
 8103bac:	d057      	beq.n	8103c5e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8103bae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103bba:	d035      	beq.n	8103c28 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8103bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103bc0:	d82c      	bhi.n	8103c1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103bc6:	d031      	beq.n	8103c2c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8103bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103bcc:	d826      	bhi.n	8103c1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103bce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103bd2:	d02d      	beq.n	8103c30 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8103bd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103bd8:	d820      	bhi.n	8103c1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103bda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103bde:	d012      	beq.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8103be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103be4:	d81a      	bhi.n	8103c1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103be6:	2b00      	cmp	r3, #0
 8103be8:	d024      	beq.n	8103c34 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8103bea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103bee:	d115      	bne.n	8103c1c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bf4:	3308      	adds	r3, #8
 8103bf6:	2100      	movs	r1, #0
 8103bf8:	4618      	mov	r0, r3
 8103bfa:	f001 fd8f 	bl	810571c <RCCEx_PLL2_Config>
 8103bfe:	4603      	mov	r3, r0
 8103c00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103c04:	e017      	b.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c0a:	3328      	adds	r3, #40	@ 0x28
 8103c0c:	2102      	movs	r1, #2
 8103c0e:	4618      	mov	r0, r3
 8103c10:	f001 fe36 	bl	8105880 <RCCEx_PLL3_Config>
 8103c14:	4603      	mov	r3, r0
 8103c16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103c1a:	e00c      	b.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c1c:	2301      	movs	r3, #1
 8103c1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103c22:	e008      	b.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8103c24:	58024400 	.word	0x58024400
        break;
 8103c28:	bf00      	nop
 8103c2a:	e004      	b.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103c2c:	bf00      	nop
 8103c2e:	e002      	b.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103c30:	bf00      	nop
 8103c32:	e000      	b.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c3a:	2b00      	cmp	r3, #0
 8103c3c:	d10b      	bne.n	8103c56 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103c3e:	4bc2      	ldr	r3, [pc, #776]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103c4e:	4abe      	ldr	r2, [pc, #760]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103c50:	430b      	orrs	r3, r1
 8103c52:	6553      	str	r3, [r2, #84]	@ 0x54
 8103c54:	e003      	b.n	8103c5e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8103c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8103c6e:	2300      	movs	r3, #0
 8103c70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8103c74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8103c78:	460b      	mov	r3, r1
 8103c7a:	4313      	orrs	r3, r2
 8103c7c:	d055      	beq.n	8103d2a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8103c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103c86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103c8a:	d033      	beq.n	8103cf4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8103c8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103c90:	d82c      	bhi.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103c96:	d02f      	beq.n	8103cf8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8103c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103c9c:	d826      	bhi.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103c9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103ca2:	d02b      	beq.n	8103cfc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8103ca4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103ca8:	d820      	bhi.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103caa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103cae:	d012      	beq.n	8103cd6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8103cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103cb4:	d81a      	bhi.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103cb6:	2b00      	cmp	r3, #0
 8103cb8:	d022      	beq.n	8103d00 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8103cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8103cbe:	d115      	bne.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103cc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cc4:	3308      	adds	r3, #8
 8103cc6:	2100      	movs	r1, #0
 8103cc8:	4618      	mov	r0, r3
 8103cca:	f001 fd27 	bl	810571c <RCCEx_PLL2_Config>
 8103cce:	4603      	mov	r3, r0
 8103cd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103cd4:	e015      	b.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cda:	3328      	adds	r3, #40	@ 0x28
 8103cdc:	2102      	movs	r1, #2
 8103cde:	4618      	mov	r0, r3
 8103ce0:	f001 fdce 	bl	8105880 <RCCEx_PLL3_Config>
 8103ce4:	4603      	mov	r3, r0
 8103ce6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103cea:	e00a      	b.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103cec:	2301      	movs	r3, #1
 8103cee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103cf2:	e006      	b.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103cf4:	bf00      	nop
 8103cf6:	e004      	b.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103cf8:	bf00      	nop
 8103cfa:	e002      	b.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103cfc:	bf00      	nop
 8103cfe:	e000      	b.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d06:	2b00      	cmp	r3, #0
 8103d08:	d10b      	bne.n	8103d22 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103d0a:	4b8f      	ldr	r3, [pc, #572]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103d0e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8103d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103d1a:	4a8b      	ldr	r2, [pc, #556]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103d1c:	430b      	orrs	r3, r1
 8103d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8103d20:	e003      	b.n	8103d2a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d32:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8103d36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8103d3a:	2300      	movs	r3, #0
 8103d3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8103d40:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8103d44:	460b      	mov	r3, r1
 8103d46:	4313      	orrs	r3, r2
 8103d48:	d055      	beq.n	8103df6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103d52:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103d56:	d033      	beq.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8103d58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103d5c:	d82c      	bhi.n	8103db8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103d62:	d02f      	beq.n	8103dc4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8103d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103d68:	d826      	bhi.n	8103db8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103d6a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103d6e:	d02b      	beq.n	8103dc8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8103d70:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103d74:	d820      	bhi.n	8103db8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103d76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103d7a:	d012      	beq.n	8103da2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8103d7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103d80:	d81a      	bhi.n	8103db8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103d82:	2b00      	cmp	r3, #0
 8103d84:	d022      	beq.n	8103dcc <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8103d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103d8a:	d115      	bne.n	8103db8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103d8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d90:	3308      	adds	r3, #8
 8103d92:	2100      	movs	r1, #0
 8103d94:	4618      	mov	r0, r3
 8103d96:	f001 fcc1 	bl	810571c <RCCEx_PLL2_Config>
 8103d9a:	4603      	mov	r3, r0
 8103d9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103da0:	e015      	b.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103da6:	3328      	adds	r3, #40	@ 0x28
 8103da8:	2102      	movs	r1, #2
 8103daa:	4618      	mov	r0, r3
 8103dac:	f001 fd68 	bl	8105880 <RCCEx_PLL3_Config>
 8103db0:	4603      	mov	r3, r0
 8103db2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103db6:	e00a      	b.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103db8:	2301      	movs	r3, #1
 8103dba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103dbe:	e006      	b.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103dc0:	bf00      	nop
 8103dc2:	e004      	b.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103dc4:	bf00      	nop
 8103dc6:	e002      	b.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103dc8:	bf00      	nop
 8103dca:	e000      	b.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103dce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103dd2:	2b00      	cmp	r3, #0
 8103dd4:	d10b      	bne.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103dda:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8103dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103de2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103de6:	4a58      	ldr	r2, [pc, #352]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103de8:	430b      	orrs	r3, r1
 8103dea:	6593      	str	r3, [r2, #88]	@ 0x58
 8103dec:	e003      	b.n	8103df6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103df2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103dfe:	f002 0308 	and.w	r3, r2, #8
 8103e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103e06:	2300      	movs	r3, #0
 8103e08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8103e0c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8103e10:	460b      	mov	r3, r1
 8103e12:	4313      	orrs	r3, r2
 8103e14:	d01e      	beq.n	8103e54 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103e22:	d10c      	bne.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e28:	3328      	adds	r3, #40	@ 0x28
 8103e2a:	2102      	movs	r1, #2
 8103e2c:	4618      	mov	r0, r3
 8103e2e:	f001 fd27 	bl	8105880 <RCCEx_PLL3_Config>
 8103e32:	4603      	mov	r3, r0
 8103e34:	2b00      	cmp	r3, #0
 8103e36:	d002      	beq.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8103e38:	2301      	movs	r3, #1
 8103e3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103e3e:	4b42      	ldr	r3, [pc, #264]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103e42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103e50:	430b      	orrs	r3, r1
 8103e52:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e5c:	f002 0310 	and.w	r3, r2, #16
 8103e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8103e64:	2300      	movs	r3, #0
 8103e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8103e6a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8103e6e:	460b      	mov	r3, r1
 8103e70:	4313      	orrs	r3, r2
 8103e72:	d01e      	beq.n	8103eb2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8103e74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103e80:	d10c      	bne.n	8103e9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e86:	3328      	adds	r3, #40	@ 0x28
 8103e88:	2102      	movs	r1, #2
 8103e8a:	4618      	mov	r0, r3
 8103e8c:	f001 fcf8 	bl	8105880 <RCCEx_PLL3_Config>
 8103e90:	4603      	mov	r3, r0
 8103e92:	2b00      	cmp	r3, #0
 8103e94:	d002      	beq.n	8103e9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8103e96:	2301      	movs	r3, #1
 8103e98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103ea0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103eac:	4a26      	ldr	r2, [pc, #152]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103eae:	430b      	orrs	r3, r1
 8103eb0:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103eb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103eba:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8103ebe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103ec2:	2300      	movs	r3, #0
 8103ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8103ec8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8103ecc:	460b      	mov	r3, r1
 8103ece:	4313      	orrs	r3, r2
 8103ed0:	d040      	beq.n	8103f54 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103eda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103ede:	d022      	beq.n	8103f26 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8103ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103ee4:	d81b      	bhi.n	8103f1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	d003      	beq.n	8103ef2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8103eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103eee:	d00b      	beq.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8103ef0:	e015      	b.n	8103f1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103ef2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ef6:	3308      	adds	r3, #8
 8103ef8:	2100      	movs	r1, #0
 8103efa:	4618      	mov	r0, r3
 8103efc:	f001 fc0e 	bl	810571c <RCCEx_PLL2_Config>
 8103f00:	4603      	mov	r3, r0
 8103f02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103f06:	e00f      	b.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f0c:	3328      	adds	r3, #40	@ 0x28
 8103f0e:	2102      	movs	r1, #2
 8103f10:	4618      	mov	r0, r3
 8103f12:	f001 fcb5 	bl	8105880 <RCCEx_PLL3_Config>
 8103f16:	4603      	mov	r3, r0
 8103f18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103f1c:	e004      	b.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f1e:	2301      	movs	r3, #1
 8103f20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103f24:	e000      	b.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8103f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f2c:	2b00      	cmp	r3, #0
 8103f2e:	d10d      	bne.n	8103f4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103f30:	4b05      	ldr	r3, [pc, #20]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103f34:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8103f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103f40:	4a01      	ldr	r2, [pc, #4]	@ (8103f48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103f42:	430b      	orrs	r3, r1
 8103f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8103f46:	e005      	b.n	8103f54 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8103f48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f5c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8103f60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8103f62:	2300      	movs	r3, #0
 8103f64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8103f66:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8103f6a:	460b      	mov	r3, r1
 8103f6c:	4313      	orrs	r3, r2
 8103f6e:	d03b      	beq.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103f78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103f7c:	d01f      	beq.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8103f7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103f82:	d818      	bhi.n	8103fb6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8103f84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103f88:	d003      	beq.n	8103f92 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8103f8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103f8e:	d007      	beq.n	8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8103f90:	e011      	b.n	8103fb6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f92:	4b64      	ldr	r3, [pc, #400]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f96:	4a63      	ldr	r2, [pc, #396]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103f9e:	e00f      	b.n	8103fc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fa4:	3328      	adds	r3, #40	@ 0x28
 8103fa6:	2101      	movs	r1, #1
 8103fa8:	4618      	mov	r0, r3
 8103faa:	f001 fc69 	bl	8105880 <RCCEx_PLL3_Config>
 8103fae:	4603      	mov	r3, r0
 8103fb0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8103fb4:	e004      	b.n	8103fc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103fb6:	2301      	movs	r3, #1
 8103fb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103fbc:	e000      	b.n	8103fc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8103fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103fc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103fc4:	2b00      	cmp	r3, #0
 8103fc6:	d10b      	bne.n	8103fe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103fc8:	4b56      	ldr	r3, [pc, #344]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103fcc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103fd8:	4a52      	ldr	r2, [pc, #328]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103fda:	430b      	orrs	r3, r1
 8103fdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8103fde:	e003      	b.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fe0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103fe4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ff0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8103ff4:	673b      	str	r3, [r7, #112]	@ 0x70
 8103ff6:	2300      	movs	r3, #0
 8103ff8:	677b      	str	r3, [r7, #116]	@ 0x74
 8103ffa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8103ffe:	460b      	mov	r3, r1
 8104000:	4313      	orrs	r3, r2
 8104002:	d031      	beq.n	8104068 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8104004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810400a:	2b00      	cmp	r3, #0
 810400c:	d003      	beq.n	8104016 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810400e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104012:	d007      	beq.n	8104024 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8104014:	e011      	b.n	810403a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104016:	4b43      	ldr	r3, [pc, #268]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810401a:	4a42      	ldr	r2, [pc, #264]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810401c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104022:	e00e      	b.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104028:	3308      	adds	r3, #8
 810402a:	2102      	movs	r1, #2
 810402c:	4618      	mov	r0, r3
 810402e:	f001 fb75 	bl	810571c <RCCEx_PLL2_Config>
 8104032:	4603      	mov	r3, r0
 8104034:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104038:	e003      	b.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810403a:	2301      	movs	r3, #1
 810403c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104042:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104046:	2b00      	cmp	r3, #0
 8104048:	d10a      	bne.n	8104060 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810404a:	4b36      	ldr	r3, [pc, #216]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810404c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810404e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8104052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104058:	4a32      	ldr	r2, [pc, #200]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810405a:	430b      	orrs	r3, r1
 810405c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810405e:	e003      	b.n	8104068 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104060:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104064:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104070:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8104074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8104076:	2300      	movs	r3, #0
 8104078:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810407a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810407e:	460b      	mov	r3, r1
 8104080:	4313      	orrs	r3, r2
 8104082:	d00c      	beq.n	810409e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104088:	3328      	adds	r3, #40	@ 0x28
 810408a:	2102      	movs	r1, #2
 810408c:	4618      	mov	r0, r3
 810408e:	f001 fbf7 	bl	8105880 <RCCEx_PLL3_Config>
 8104092:	4603      	mov	r3, r0
 8104094:	2b00      	cmp	r3, #0
 8104096:	d002      	beq.n	810409e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8104098:	2301      	movs	r3, #1
 810409a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810409e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81040aa:	663b      	str	r3, [r7, #96]	@ 0x60
 81040ac:	2300      	movs	r3, #0
 81040ae:	667b      	str	r3, [r7, #100]	@ 0x64
 81040b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81040b4:	460b      	mov	r3, r1
 81040b6:	4313      	orrs	r3, r2
 81040b8:	d03a      	beq.n	8104130 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 81040ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81040c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81040c6:	d018      	beq.n	81040fa <HAL_RCCEx_PeriphCLKConfig+0x1192>
 81040c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81040cc:	d811      	bhi.n	81040f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81040ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81040d2:	d014      	beq.n	81040fe <HAL_RCCEx_PeriphCLKConfig+0x1196>
 81040d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81040d8:	d80b      	bhi.n	81040f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 81040da:	2b00      	cmp	r3, #0
 81040dc:	d011      	beq.n	8104102 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 81040de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81040e2:	d106      	bne.n	81040f2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81040e4:	4b0f      	ldr	r3, [pc, #60]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81040e8:	4a0e      	ldr	r2, [pc, #56]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81040ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81040ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81040f0:	e008      	b.n	8104104 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81040f2:	2301      	movs	r3, #1
 81040f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81040f8:	e004      	b.n	8104104 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81040fa:	bf00      	nop
 81040fc:	e002      	b.n	8104104 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81040fe:	bf00      	nop
 8104100:	e000      	b.n	8104104 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104104:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104108:	2b00      	cmp	r3, #0
 810410a:	d10d      	bne.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810410c:	4b05      	ldr	r3, [pc, #20]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810410e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104110:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810411c:	4a01      	ldr	r2, [pc, #4]	@ (8104124 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810411e:	430b      	orrs	r3, r1
 8104120:	6553      	str	r3, [r2, #84]	@ 0x54
 8104122:	e005      	b.n	8104130 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8104124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104128:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810412c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104138:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810413c:	65bb      	str	r3, [r7, #88]	@ 0x58
 810413e:	2300      	movs	r3, #0
 8104140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8104142:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8104146:	460b      	mov	r3, r1
 8104148:	4313      	orrs	r3, r2
 810414a:	d009      	beq.n	8104160 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810414c:	4baa      	ldr	r3, [pc, #680]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810414e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104150:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8104154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810415a:	4aa7      	ldr	r2, [pc, #668]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810415c:	430b      	orrs	r3, r1
 810415e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104160:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104168:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810416c:	653b      	str	r3, [r7, #80]	@ 0x50
 810416e:	2300      	movs	r3, #0
 8104170:	657b      	str	r3, [r7, #84]	@ 0x54
 8104172:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8104176:	460b      	mov	r3, r1
 8104178:	4313      	orrs	r3, r2
 810417a:	d00a      	beq.n	8104192 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810417c:	4b9e      	ldr	r3, [pc, #632]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810417e:	691b      	ldr	r3, [r3, #16]
 8104180:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8104184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104188:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810418c:	4a9a      	ldr	r2, [pc, #616]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810418e:	430b      	orrs	r3, r1
 8104190:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104192:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104196:	e9d3 2300 	ldrd	r2, r3, [r3]
 810419a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810419e:	64bb      	str	r3, [r7, #72]	@ 0x48
 81041a0:	2300      	movs	r3, #0
 81041a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81041a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81041a8:	460b      	mov	r3, r1
 81041aa:	4313      	orrs	r3, r2
 81041ac:	d009      	beq.n	81041c2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81041ae:	4b92      	ldr	r3, [pc, #584]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81041b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81041b2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81041b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81041bc:	4a8e      	ldr	r2, [pc, #568]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81041be:	430b      	orrs	r3, r1
 81041c0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81041c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041ca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81041ce:	643b      	str	r3, [r7, #64]	@ 0x40
 81041d0:	2300      	movs	r3, #0
 81041d2:	647b      	str	r3, [r7, #68]	@ 0x44
 81041d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81041d8:	460b      	mov	r3, r1
 81041da:	4313      	orrs	r3, r2
 81041dc:	d00e      	beq.n	81041fc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81041de:	4b86      	ldr	r3, [pc, #536]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81041e0:	691b      	ldr	r3, [r3, #16]
 81041e2:	4a85      	ldr	r2, [pc, #532]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81041e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81041e8:	6113      	str	r3, [r2, #16]
 81041ea:	4b83      	ldr	r3, [pc, #524]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81041ec:	6919      	ldr	r1, [r3, #16]
 81041ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81041f6:	4a80      	ldr	r2, [pc, #512]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81041f8:	430b      	orrs	r3, r1
 81041fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81041fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104204:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8104208:	63bb      	str	r3, [r7, #56]	@ 0x38
 810420a:	2300      	movs	r3, #0
 810420c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810420e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8104212:	460b      	mov	r3, r1
 8104214:	4313      	orrs	r3, r2
 8104216:	d009      	beq.n	810422c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104218:	4b77      	ldr	r3, [pc, #476]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810421a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810421c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8104220:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104226:	4a74      	ldr	r2, [pc, #464]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104228:	430b      	orrs	r3, r1
 810422a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810422c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104234:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8104238:	633b      	str	r3, [r7, #48]	@ 0x30
 810423a:	2300      	movs	r3, #0
 810423c:	637b      	str	r3, [r7, #52]	@ 0x34
 810423e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8104242:	460b      	mov	r3, r1
 8104244:	4313      	orrs	r3, r2
 8104246:	d00a      	beq.n	810425e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104248:	4b6b      	ldr	r3, [pc, #428]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810424a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810424c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8104250:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104258:	4a67      	ldr	r2, [pc, #412]	@ (81043f8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810425a:	430b      	orrs	r3, r1
 810425c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810425e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104266:	2100      	movs	r1, #0
 8104268:	62b9      	str	r1, [r7, #40]	@ 0x28
 810426a:	f003 0301 	and.w	r3, r3, #1
 810426e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104270:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8104274:	460b      	mov	r3, r1
 8104276:	4313      	orrs	r3, r2
 8104278:	d011      	beq.n	810429e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810427a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810427e:	3308      	adds	r3, #8
 8104280:	2100      	movs	r1, #0
 8104282:	4618      	mov	r0, r3
 8104284:	f001 fa4a 	bl	810571c <RCCEx_PLL2_Config>
 8104288:	4603      	mov	r3, r0
 810428a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810428e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104292:	2b00      	cmp	r3, #0
 8104294:	d003      	beq.n	810429e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104296:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810429a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810429e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042a6:	2100      	movs	r1, #0
 81042a8:	6239      	str	r1, [r7, #32]
 81042aa:	f003 0302 	and.w	r3, r3, #2
 81042ae:	627b      	str	r3, [r7, #36]	@ 0x24
 81042b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81042b4:	460b      	mov	r3, r1
 81042b6:	4313      	orrs	r3, r2
 81042b8:	d011      	beq.n	81042de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81042ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042be:	3308      	adds	r3, #8
 81042c0:	2101      	movs	r1, #1
 81042c2:	4618      	mov	r0, r3
 81042c4:	f001 fa2a 	bl	810571c <RCCEx_PLL2_Config>
 81042c8:	4603      	mov	r3, r0
 81042ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81042ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81042d2:	2b00      	cmp	r3, #0
 81042d4:	d003      	beq.n	81042de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81042da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81042de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042e6:	2100      	movs	r1, #0
 81042e8:	61b9      	str	r1, [r7, #24]
 81042ea:	f003 0304 	and.w	r3, r3, #4
 81042ee:	61fb      	str	r3, [r7, #28]
 81042f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81042f4:	460b      	mov	r3, r1
 81042f6:	4313      	orrs	r3, r2
 81042f8:	d011      	beq.n	810431e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81042fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042fe:	3308      	adds	r3, #8
 8104300:	2102      	movs	r1, #2
 8104302:	4618      	mov	r0, r3
 8104304:	f001 fa0a 	bl	810571c <RCCEx_PLL2_Config>
 8104308:	4603      	mov	r3, r0
 810430a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810430e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104312:	2b00      	cmp	r3, #0
 8104314:	d003      	beq.n	810431e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104316:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810431a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810431e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104326:	2100      	movs	r1, #0
 8104328:	6139      	str	r1, [r7, #16]
 810432a:	f003 0308 	and.w	r3, r3, #8
 810432e:	617b      	str	r3, [r7, #20]
 8104330:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104334:	460b      	mov	r3, r1
 8104336:	4313      	orrs	r3, r2
 8104338:	d011      	beq.n	810435e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810433a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810433e:	3328      	adds	r3, #40	@ 0x28
 8104340:	2100      	movs	r1, #0
 8104342:	4618      	mov	r0, r3
 8104344:	f001 fa9c 	bl	8105880 <RCCEx_PLL3_Config>
 8104348:	4603      	mov	r3, r0
 810434a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810434e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104352:	2b00      	cmp	r3, #0
 8104354:	d003      	beq.n	810435e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104356:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810435a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810435e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104366:	2100      	movs	r1, #0
 8104368:	60b9      	str	r1, [r7, #8]
 810436a:	f003 0310 	and.w	r3, r3, #16
 810436e:	60fb      	str	r3, [r7, #12]
 8104370:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104374:	460b      	mov	r3, r1
 8104376:	4313      	orrs	r3, r2
 8104378:	d011      	beq.n	810439e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810437a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810437e:	3328      	adds	r3, #40	@ 0x28
 8104380:	2101      	movs	r1, #1
 8104382:	4618      	mov	r0, r3
 8104384:	f001 fa7c 	bl	8105880 <RCCEx_PLL3_Config>
 8104388:	4603      	mov	r3, r0
 810438a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810438e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104392:	2b00      	cmp	r3, #0
 8104394:	d003      	beq.n	810439e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104396:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810439a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810439e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043a6:	2100      	movs	r1, #0
 81043a8:	6039      	str	r1, [r7, #0]
 81043aa:	f003 0320 	and.w	r3, r3, #32
 81043ae:	607b      	str	r3, [r7, #4]
 81043b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 81043b4:	460b      	mov	r3, r1
 81043b6:	4313      	orrs	r3, r2
 81043b8:	d011      	beq.n	81043de <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81043ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043be:	3328      	adds	r3, #40	@ 0x28
 81043c0:	2102      	movs	r1, #2
 81043c2:	4618      	mov	r0, r3
 81043c4:	f001 fa5c 	bl	8105880 <RCCEx_PLL3_Config>
 81043c8:	4603      	mov	r3, r0
 81043ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81043ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043d2:	2b00      	cmp	r3, #0
 81043d4:	d003      	beq.n	81043de <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 81043de:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 81043e2:	2b00      	cmp	r3, #0
 81043e4:	d101      	bne.n	81043ea <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 81043e6:	2300      	movs	r3, #0
 81043e8:	e000      	b.n	81043ec <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81043ea:	2301      	movs	r3, #1
}
 81043ec:	4618      	mov	r0, r3
 81043ee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 81043f2:	46bd      	mov	sp, r7
 81043f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81043f8:	58024400 	.word	0x58024400

081043fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 81043fc:	b580      	push	{r7, lr}
 81043fe:	b090      	sub	sp, #64	@ 0x40
 8104400:	af00      	add	r7, sp, #0
 8104402:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104406:	e9d7 2300 	ldrd	r2, r3, [r7]
 810440a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810440e:	430b      	orrs	r3, r1
 8104410:	f040 8094 	bne.w	810453c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8104414:	4b9e      	ldr	r3, [pc, #632]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104418:	f003 0307 	and.w	r3, r3, #7
 810441c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810441e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104420:	2b04      	cmp	r3, #4
 8104422:	f200 8087 	bhi.w	8104534 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8104426:	a201      	add	r2, pc, #4	@ (adr r2, 810442c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8104428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810442c:	08104441 	.word	0x08104441
 8104430:	08104469 	.word	0x08104469
 8104434:	08104491 	.word	0x08104491
 8104438:	0810452d 	.word	0x0810452d
 810443c:	081044b9 	.word	0x081044b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104440:	4b93      	ldr	r3, [pc, #588]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104442:	681b      	ldr	r3, [r3, #0]
 8104444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104448:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810444c:	d108      	bne.n	8104460 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810444e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104452:	4618      	mov	r0, r3
 8104454:	f001 f810 	bl	8105478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810445a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810445c:	f000 bd45 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104460:	2300      	movs	r3, #0
 8104462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104464:	f000 bd41 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104468:	4b89      	ldr	r3, [pc, #548]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810446a:	681b      	ldr	r3, [r3, #0]
 810446c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104470:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104474:	d108      	bne.n	8104488 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104476:	f107 0318 	add.w	r3, r7, #24
 810447a:	4618      	mov	r0, r3
 810447c:	f000 fd54 	bl	8104f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104480:	69bb      	ldr	r3, [r7, #24]
 8104482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104484:	f000 bd31 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104488:	2300      	movs	r3, #0
 810448a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810448c:	f000 bd2d 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104490:	4b7f      	ldr	r3, [pc, #508]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104492:	681b      	ldr	r3, [r3, #0]
 8104494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810449c:	d108      	bne.n	81044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810449e:	f107 030c 	add.w	r3, r7, #12
 81044a2:	4618      	mov	r0, r3
 81044a4:	f000 fe94 	bl	81051d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81044a8:	68fb      	ldr	r3, [r7, #12]
 81044aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81044ac:	f000 bd1d 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81044b0:	2300      	movs	r3, #0
 81044b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81044b4:	f000 bd19 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81044b8:	4b75      	ldr	r3, [pc, #468]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81044ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81044bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81044c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81044c2:	4b73      	ldr	r3, [pc, #460]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81044c4:	681b      	ldr	r3, [r3, #0]
 81044c6:	f003 0304 	and.w	r3, r3, #4
 81044ca:	2b04      	cmp	r3, #4
 81044cc:	d10c      	bne.n	81044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81044ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81044d0:	2b00      	cmp	r3, #0
 81044d2:	d109      	bne.n	81044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81044d4:	4b6e      	ldr	r3, [pc, #440]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81044d6:	681b      	ldr	r3, [r3, #0]
 81044d8:	08db      	lsrs	r3, r3, #3
 81044da:	f003 0303 	and.w	r3, r3, #3
 81044de:	4a6d      	ldr	r2, [pc, #436]	@ (8104694 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81044e0:	fa22 f303 	lsr.w	r3, r2, r3
 81044e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81044e6:	e01f      	b.n	8104528 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81044e8:	4b69      	ldr	r3, [pc, #420]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81044f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81044f4:	d106      	bne.n	8104504 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81044f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81044f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81044fc:	d102      	bne.n	8104504 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81044fe:	4b66      	ldr	r3, [pc, #408]	@ (8104698 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104502:	e011      	b.n	8104528 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104504:	4b62      	ldr	r3, [pc, #392]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810450c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104510:	d106      	bne.n	8104520 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8104512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104518:	d102      	bne.n	8104520 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810451a:	4b60      	ldr	r3, [pc, #384]	@ (810469c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810451c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810451e:	e003      	b.n	8104528 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104520:	2300      	movs	r3, #0
 8104522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104524:	f000 bce1 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104528:	f000 bcdf 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810452c:	4b5c      	ldr	r3, [pc, #368]	@ (81046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810452e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104530:	f000 bcdb 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104534:	2300      	movs	r3, #0
 8104536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104538:	f000 bcd7 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810453c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104540:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8104544:	430b      	orrs	r3, r1
 8104546:	f040 80ad 	bne.w	81046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810454a:	4b51      	ldr	r3, [pc, #324]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810454c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810454e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8104552:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810455a:	d056      	beq.n	810460a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 810455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810455e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104562:	f200 8090 	bhi.w	8104686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104568:	2bc0      	cmp	r3, #192	@ 0xc0
 810456a:	f000 8088 	beq.w	810467e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104570:	2bc0      	cmp	r3, #192	@ 0xc0
 8104572:	f200 8088 	bhi.w	8104686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104578:	2b80      	cmp	r3, #128	@ 0x80
 810457a:	d032      	beq.n	81045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 810457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810457e:	2b80      	cmp	r3, #128	@ 0x80
 8104580:	f200 8081 	bhi.w	8104686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104586:	2b00      	cmp	r3, #0
 8104588:	d003      	beq.n	8104592 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810458c:	2b40      	cmp	r3, #64	@ 0x40
 810458e:	d014      	beq.n	81045ba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8104590:	e079      	b.n	8104686 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104592:	4b3f      	ldr	r3, [pc, #252]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104594:	681b      	ldr	r3, [r3, #0]
 8104596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810459a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810459e:	d108      	bne.n	81045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81045a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81045a4:	4618      	mov	r0, r3
 81045a6:	f000 ff67 	bl	8105478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81045ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81045ae:	f000 bc9c 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81045b2:	2300      	movs	r3, #0
 81045b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045b6:	f000 bc98 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81045ba:	4b35      	ldr	r3, [pc, #212]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81045bc:	681b      	ldr	r3, [r3, #0]
 81045be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81045c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81045c6:	d108      	bne.n	81045da <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81045c8:	f107 0318 	add.w	r3, r7, #24
 81045cc:	4618      	mov	r0, r3
 81045ce:	f000 fcab 	bl	8104f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81045d2:	69bb      	ldr	r3, [r7, #24]
 81045d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81045d6:	f000 bc88 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81045da:	2300      	movs	r3, #0
 81045dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045de:	f000 bc84 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81045e2:	4b2b      	ldr	r3, [pc, #172]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81045ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81045ee:	d108      	bne.n	8104602 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81045f0:	f107 030c 	add.w	r3, r7, #12
 81045f4:	4618      	mov	r0, r3
 81045f6:	f000 fdeb 	bl	81051d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81045fa:	68fb      	ldr	r3, [r7, #12]
 81045fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81045fe:	f000 bc74 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104602:	2300      	movs	r3, #0
 8104604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104606:	f000 bc70 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810460a:	4b21      	ldr	r3, [pc, #132]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810460e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104612:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104614:	4b1e      	ldr	r3, [pc, #120]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104616:	681b      	ldr	r3, [r3, #0]
 8104618:	f003 0304 	and.w	r3, r3, #4
 810461c:	2b04      	cmp	r3, #4
 810461e:	d10c      	bne.n	810463a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8104620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104622:	2b00      	cmp	r3, #0
 8104624:	d109      	bne.n	810463a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104626:	4b1a      	ldr	r3, [pc, #104]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	08db      	lsrs	r3, r3, #3
 810462c:	f003 0303 	and.w	r3, r3, #3
 8104630:	4a18      	ldr	r2, [pc, #96]	@ (8104694 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104632:	fa22 f303 	lsr.w	r3, r2, r3
 8104636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104638:	e01f      	b.n	810467a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810463a:	4b15      	ldr	r3, [pc, #84]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104646:	d106      	bne.n	8104656 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8104648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810464a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810464e:	d102      	bne.n	8104656 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104650:	4b11      	ldr	r3, [pc, #68]	@ (8104698 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104654:	e011      	b.n	810467a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104656:	4b0e      	ldr	r3, [pc, #56]	@ (8104690 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810465e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104662:	d106      	bne.n	8104672 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8104664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810466a:	d102      	bne.n	8104672 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810466c:	4b0b      	ldr	r3, [pc, #44]	@ (810469c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810466e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104670:	e003      	b.n	810467a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104672:	2300      	movs	r3, #0
 8104674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104676:	f000 bc38 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810467a:	f000 bc36 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810467e:	4b08      	ldr	r3, [pc, #32]	@ (81046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104682:	f000 bc32 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104686:	2300      	movs	r3, #0
 8104688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810468a:	f000 bc2e 	b.w	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810468e:	bf00      	nop
 8104690:	58024400 	.word	0x58024400
 8104694:	03d09000 	.word	0x03d09000
 8104698:	003d0900 	.word	0x003d0900
 810469c:	017d7840 	.word	0x017d7840
 81046a0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81046a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81046a8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 81046ac:	430b      	orrs	r3, r1
 81046ae:	f040 809c 	bne.w	81047ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81046b2:	4b9e      	ldr	r3, [pc, #632]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81046b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81046b6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 81046ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81046bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81046c2:	d054      	beq.n	810476e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 81046c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81046ca:	f200 808b 	bhi.w	81047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81046ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81046d4:	f000 8083 	beq.w	81047de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 81046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81046de:	f200 8081 	bhi.w	81047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81046e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81046e8:	d02f      	beq.n	810474a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81046f0:	d878      	bhi.n	81047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046f4:	2b00      	cmp	r3, #0
 81046f6:	d004      	beq.n	8104702 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 81046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81046fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81046fe:	d012      	beq.n	8104726 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8104700:	e070      	b.n	81047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104702:	4b8a      	ldr	r3, [pc, #552]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104704:	681b      	ldr	r3, [r3, #0]
 8104706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810470a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810470e:	d107      	bne.n	8104720 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104714:	4618      	mov	r0, r3
 8104716:	f000 feaf 	bl	8105478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810471a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810471c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810471e:	e3e4      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104720:	2300      	movs	r3, #0
 8104722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104724:	e3e1      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104726:	4b81      	ldr	r3, [pc, #516]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810472e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104732:	d107      	bne.n	8104744 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104734:	f107 0318 	add.w	r3, r7, #24
 8104738:	4618      	mov	r0, r3
 810473a:	f000 fbf5 	bl	8104f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810473e:	69bb      	ldr	r3, [r7, #24]
 8104740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104742:	e3d2      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104744:	2300      	movs	r3, #0
 8104746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104748:	e3cf      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810474a:	4b78      	ldr	r3, [pc, #480]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104756:	d107      	bne.n	8104768 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104758:	f107 030c 	add.w	r3, r7, #12
 810475c:	4618      	mov	r0, r3
 810475e:	f000 fd37 	bl	81051d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104762:	68fb      	ldr	r3, [r7, #12]
 8104764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104766:	e3c0      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104768:	2300      	movs	r3, #0
 810476a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810476c:	e3bd      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810476e:	4b6f      	ldr	r3, [pc, #444]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104772:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104776:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104778:	4b6c      	ldr	r3, [pc, #432]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	f003 0304 	and.w	r3, r3, #4
 8104780:	2b04      	cmp	r3, #4
 8104782:	d10c      	bne.n	810479e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8104784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104786:	2b00      	cmp	r3, #0
 8104788:	d109      	bne.n	810479e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810478a:	4b68      	ldr	r3, [pc, #416]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810478c:	681b      	ldr	r3, [r3, #0]
 810478e:	08db      	lsrs	r3, r3, #3
 8104790:	f003 0303 	and.w	r3, r3, #3
 8104794:	4a66      	ldr	r2, [pc, #408]	@ (8104930 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104796:	fa22 f303 	lsr.w	r3, r2, r3
 810479a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810479c:	e01e      	b.n	81047dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810479e:	4b63      	ldr	r3, [pc, #396]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81047a0:	681b      	ldr	r3, [r3, #0]
 81047a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81047a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81047aa:	d106      	bne.n	81047ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81047ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81047b2:	d102      	bne.n	81047ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81047b4:	4b5f      	ldr	r3, [pc, #380]	@ (8104934 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81047b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81047b8:	e010      	b.n	81047dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81047ba:	4b5c      	ldr	r3, [pc, #368]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81047bc:	681b      	ldr	r3, [r3, #0]
 81047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81047c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81047c6:	d106      	bne.n	81047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 81047c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81047ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81047ce:	d102      	bne.n	81047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81047d0:	4b59      	ldr	r3, [pc, #356]	@ (8104938 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81047d4:	e002      	b.n	81047dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81047d6:	2300      	movs	r3, #0
 81047d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81047da:	e386      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81047dc:	e385      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81047de:	4b57      	ldr	r3, [pc, #348]	@ (810493c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81047e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81047e2:	e382      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81047e4:	2300      	movs	r3, #0
 81047e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81047e8:	e37f      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81047ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 81047ee:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 81047f2:	430b      	orrs	r3, r1
 81047f4:	f040 80a7 	bne.w	8104946 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 81047f8:	4b4c      	ldr	r3, [pc, #304]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81047fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81047fc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8104800:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104804:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104808:	d055      	beq.n	81048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810480c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104810:	f200 8096 	bhi.w	8104940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104816:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810481a:	f000 8084 	beq.w	8104926 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810481e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104820:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104824:	f200 808c 	bhi.w	8104940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810482a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810482e:	d030      	beq.n	8104892 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8104830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104832:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104836:	f200 8083 	bhi.w	8104940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810483c:	2b00      	cmp	r3, #0
 810483e:	d004      	beq.n	810484a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8104840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104846:	d012      	beq.n	810486e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8104848:	e07a      	b.n	8104940 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810484a:	4b38      	ldr	r3, [pc, #224]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810484c:	681b      	ldr	r3, [r3, #0]
 810484e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104852:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104856:	d107      	bne.n	8104868 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810485c:	4618      	mov	r0, r3
 810485e:	f000 fe0b 	bl	8105478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104866:	e340      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104868:	2300      	movs	r3, #0
 810486a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810486c:	e33d      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810486e:	4b2f      	ldr	r3, [pc, #188]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104870:	681b      	ldr	r3, [r3, #0]
 8104872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810487a:	d107      	bne.n	810488c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810487c:	f107 0318 	add.w	r3, r7, #24
 8104880:	4618      	mov	r0, r3
 8104882:	f000 fb51 	bl	8104f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104886:	69bb      	ldr	r3, [r7, #24]
 8104888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810488a:	e32e      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810488c:	2300      	movs	r3, #0
 810488e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104890:	e32b      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104892:	4b26      	ldr	r3, [pc, #152]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104894:	681b      	ldr	r3, [r3, #0]
 8104896:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810489a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810489e:	d107      	bne.n	81048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81048a0:	f107 030c 	add.w	r3, r7, #12
 81048a4:	4618      	mov	r0, r3
 81048a6:	f000 fc93 	bl	81051d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81048aa:	68fb      	ldr	r3, [r7, #12]
 81048ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81048ae:	e31c      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81048b0:	2300      	movs	r3, #0
 81048b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81048b4:	e319      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81048b6:	4b1d      	ldr	r3, [pc, #116]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81048b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81048ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81048be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81048c0:	4b1a      	ldr	r3, [pc, #104]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81048c2:	681b      	ldr	r3, [r3, #0]
 81048c4:	f003 0304 	and.w	r3, r3, #4
 81048c8:	2b04      	cmp	r3, #4
 81048ca:	d10c      	bne.n	81048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 81048cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81048ce:	2b00      	cmp	r3, #0
 81048d0:	d109      	bne.n	81048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81048d2:	4b16      	ldr	r3, [pc, #88]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	08db      	lsrs	r3, r3, #3
 81048d8:	f003 0303 	and.w	r3, r3, #3
 81048dc:	4a14      	ldr	r2, [pc, #80]	@ (8104930 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81048de:	fa22 f303 	lsr.w	r3, r2, r3
 81048e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81048e4:	e01e      	b.n	8104924 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81048e6:	4b11      	ldr	r3, [pc, #68]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81048ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81048f2:	d106      	bne.n	8104902 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 81048f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81048f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81048fa:	d102      	bne.n	8104902 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81048fc:	4b0d      	ldr	r3, [pc, #52]	@ (8104934 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81048fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104900:	e010      	b.n	8104924 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104902:	4b0a      	ldr	r3, [pc, #40]	@ (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104904:	681b      	ldr	r3, [r3, #0]
 8104906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810490a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810490e:	d106      	bne.n	810491e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8104910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104916:	d102      	bne.n	810491e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104918:	4b07      	ldr	r3, [pc, #28]	@ (8104938 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810491a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810491c:	e002      	b.n	8104924 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810491e:	2300      	movs	r3, #0
 8104920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104922:	e2e2      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104924:	e2e1      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104926:	4b05      	ldr	r3, [pc, #20]	@ (810493c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810492a:	e2de      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810492c:	58024400 	.word	0x58024400
 8104930:	03d09000 	.word	0x03d09000
 8104934:	003d0900 	.word	0x003d0900
 8104938:	017d7840 	.word	0x017d7840
 810493c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8104940:	2300      	movs	r3, #0
 8104942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104944:	e2d1      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8104946:	e9d7 2300 	ldrd	r2, r3, [r7]
 810494a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810494e:	430b      	orrs	r3, r1
 8104950:	f040 809c 	bne.w	8104a8c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8104954:	4b93      	ldr	r3, [pc, #588]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104958:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 810495c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810495e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104964:	d054      	beq.n	8104a10 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8104966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104968:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810496c:	f200 808b 	bhi.w	8104a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104972:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104976:	f000 8083 	beq.w	8104a80 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810497a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810497c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104980:	f200 8081 	bhi.w	8104a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810498a:	d02f      	beq.n	81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 810498c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810498e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104992:	d878      	bhi.n	8104a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104996:	2b00      	cmp	r3, #0
 8104998:	d004      	beq.n	81049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810499c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81049a0:	d012      	beq.n	81049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81049a2:	e070      	b.n	8104a86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81049a4:	4b7f      	ldr	r3, [pc, #508]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81049a6:	681b      	ldr	r3, [r3, #0]
 81049a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81049ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81049b0:	d107      	bne.n	81049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81049b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81049b6:	4618      	mov	r0, r3
 81049b8:	f000 fd5e 	bl	8105478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81049be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049c0:	e293      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049c2:	2300      	movs	r3, #0
 81049c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81049c6:	e290      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81049c8:	4b76      	ldr	r3, [pc, #472]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81049ca:	681b      	ldr	r3, [r3, #0]
 81049cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81049d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81049d4:	d107      	bne.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81049d6:	f107 0318 	add.w	r3, r7, #24
 81049da:	4618      	mov	r0, r3
 81049dc:	f000 faa4 	bl	8104f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81049e0:	69bb      	ldr	r3, [r7, #24]
 81049e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049e4:	e281      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049e6:	2300      	movs	r3, #0
 81049e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81049ea:	e27e      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81049ec:	4b6d      	ldr	r3, [pc, #436]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81049ee:	681b      	ldr	r3, [r3, #0]
 81049f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81049f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81049f8:	d107      	bne.n	8104a0a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81049fa:	f107 030c 	add.w	r3, r7, #12
 81049fe:	4618      	mov	r0, r3
 8104a00:	f000 fbe6 	bl	81051d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104a04:	68fb      	ldr	r3, [r7, #12]
 8104a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a08:	e26f      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a0a:	2300      	movs	r3, #0
 8104a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a0e:	e26c      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104a10:	4b64      	ldr	r3, [pc, #400]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104a14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104a18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104a1a:	4b62      	ldr	r3, [pc, #392]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a1c:	681b      	ldr	r3, [r3, #0]
 8104a1e:	f003 0304 	and.w	r3, r3, #4
 8104a22:	2b04      	cmp	r3, #4
 8104a24:	d10c      	bne.n	8104a40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8104a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104a28:	2b00      	cmp	r3, #0
 8104a2a:	d109      	bne.n	8104a40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a2c:	4b5d      	ldr	r3, [pc, #372]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a2e:	681b      	ldr	r3, [r3, #0]
 8104a30:	08db      	lsrs	r3, r3, #3
 8104a32:	f003 0303 	and.w	r3, r3, #3
 8104a36:	4a5c      	ldr	r2, [pc, #368]	@ (8104ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104a38:	fa22 f303 	lsr.w	r3, r2, r3
 8104a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a3e:	e01e      	b.n	8104a7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104a40:	4b58      	ldr	r3, [pc, #352]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a42:	681b      	ldr	r3, [r3, #0]
 8104a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a4c:	d106      	bne.n	8104a5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8104a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104a50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104a54:	d102      	bne.n	8104a5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104a56:	4b55      	ldr	r3, [pc, #340]	@ (8104bac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a5a:	e010      	b.n	8104a7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104a5c:	4b51      	ldr	r3, [pc, #324]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104a68:	d106      	bne.n	8104a78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8104a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104a70:	d102      	bne.n	8104a78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104a72:	4b4f      	ldr	r3, [pc, #316]	@ (8104bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a76:	e002      	b.n	8104a7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104a78:	2300      	movs	r3, #0
 8104a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104a7c:	e235      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104a7e:	e234      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104a80:	4b4c      	ldr	r3, [pc, #304]	@ (8104bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8104a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a84:	e231      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104a86:	2300      	movs	r3, #0
 8104a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a8a:	e22e      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8104a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104a90:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8104a94:	430b      	orrs	r3, r1
 8104a96:	f040 808f 	bne.w	8104bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8104a9a:	4b42      	ldr	r3, [pc, #264]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104a9e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8104aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8104aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104aa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104aaa:	d06b      	beq.n	8104b84 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8104aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104aae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104ab2:	d874      	bhi.n	8104b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ab6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104aba:	d056      	beq.n	8104b6a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8104abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104abe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104ac2:	d86c      	bhi.n	8104b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ac6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104aca:	d03b      	beq.n	8104b44 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8104acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ace:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104ad2:	d864      	bhi.n	8104b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ad6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104ada:	d021      	beq.n	8104b20 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8104adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104ae2:	d85c      	bhi.n	8104b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ae6:	2b00      	cmp	r3, #0
 8104ae8:	d004      	beq.n	8104af4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8104aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104af0:	d004      	beq.n	8104afc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8104af2:	e054      	b.n	8104b9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8104af4:	f7fe f9e0 	bl	8102eb8 <HAL_RCC_GetPCLK1Freq>
 8104af8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104afa:	e1f6      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104afc:	4b29      	ldr	r3, [pc, #164]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104afe:	681b      	ldr	r3, [r3, #0]
 8104b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104b08:	d107      	bne.n	8104b1a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104b0a:	f107 0318 	add.w	r3, r7, #24
 8104b0e:	4618      	mov	r0, r3
 8104b10:	f000 fa0a 	bl	8104f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104b14:	69fb      	ldr	r3, [r7, #28]
 8104b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b18:	e1e7      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b1a:	2300      	movs	r3, #0
 8104b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b1e:	e1e4      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104b20:	4b20      	ldr	r3, [pc, #128]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b22:	681b      	ldr	r3, [r3, #0]
 8104b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104b2c:	d107      	bne.n	8104b3e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104b2e:	f107 030c 	add.w	r3, r7, #12
 8104b32:	4618      	mov	r0, r3
 8104b34:	f000 fb4c 	bl	81051d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104b38:	693b      	ldr	r3, [r7, #16]
 8104b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b3c:	e1d5      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b3e:	2300      	movs	r3, #0
 8104b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b42:	e1d2      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104b44:	4b17      	ldr	r3, [pc, #92]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b46:	681b      	ldr	r3, [r3, #0]
 8104b48:	f003 0304 	and.w	r3, r3, #4
 8104b4c:	2b04      	cmp	r3, #4
 8104b4e:	d109      	bne.n	8104b64 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104b50:	4b14      	ldr	r3, [pc, #80]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	08db      	lsrs	r3, r3, #3
 8104b56:	f003 0303 	and.w	r3, r3, #3
 8104b5a:	4a13      	ldr	r2, [pc, #76]	@ (8104ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8104b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b62:	e1c2      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b64:	2300      	movs	r3, #0
 8104b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b68:	e1bf      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8104b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104b76:	d102      	bne.n	8104b7e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8104b78:	4b0c      	ldr	r3, [pc, #48]	@ (8104bac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b7c:	e1b5      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b7e:	2300      	movs	r3, #0
 8104b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b82:	e1b2      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104b84:	4b07      	ldr	r3, [pc, #28]	@ (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104b90:	d102      	bne.n	8104b98 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8104b92:	4b07      	ldr	r3, [pc, #28]	@ (8104bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b96:	e1a8      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b98:	2300      	movs	r3, #0
 8104b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b9c:	e1a5      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104b9e:	2300      	movs	r3, #0
 8104ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ba2:	e1a2      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104ba4:	58024400 	.word	0x58024400
 8104ba8:	03d09000 	.word	0x03d09000
 8104bac:	003d0900 	.word	0x003d0900
 8104bb0:	017d7840 	.word	0x017d7840
 8104bb4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8104bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104bbc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8104bc0:	430b      	orrs	r3, r1
 8104bc2:	d173      	bne.n	8104cac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8104bc4:	4b9c      	ldr	r3, [pc, #624]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104bc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104bcc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104bd4:	d02f      	beq.n	8104c36 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8104bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104bdc:	d863      	bhi.n	8104ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8104bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104be0:	2b00      	cmp	r3, #0
 8104be2:	d004      	beq.n	8104bee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8104be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104bea:	d012      	beq.n	8104c12 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8104bec:	e05b      	b.n	8104ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104bee:	4b92      	ldr	r3, [pc, #584]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104bfa:	d107      	bne.n	8104c0c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104bfc:	f107 0318 	add.w	r3, r7, #24
 8104c00:	4618      	mov	r0, r3
 8104c02:	f000 f991 	bl	8104f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104c06:	69bb      	ldr	r3, [r7, #24]
 8104c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c0a:	e16e      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c0c:	2300      	movs	r3, #0
 8104c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c10:	e16b      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104c12:	4b89      	ldr	r3, [pc, #548]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104c1e:	d107      	bne.n	8104c30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104c20:	f107 030c 	add.w	r3, r7, #12
 8104c24:	4618      	mov	r0, r3
 8104c26:	f000 fad3 	bl	81051d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8104c2a:	697b      	ldr	r3, [r7, #20]
 8104c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c2e:	e15c      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c30:	2300      	movs	r3, #0
 8104c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c34:	e159      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104c36:	4b80      	ldr	r3, [pc, #512]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104c3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104c3e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104c40:	4b7d      	ldr	r3, [pc, #500]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c42:	681b      	ldr	r3, [r3, #0]
 8104c44:	f003 0304 	and.w	r3, r3, #4
 8104c48:	2b04      	cmp	r3, #4
 8104c4a:	d10c      	bne.n	8104c66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8104c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104c4e:	2b00      	cmp	r3, #0
 8104c50:	d109      	bne.n	8104c66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104c52:	4b79      	ldr	r3, [pc, #484]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c54:	681b      	ldr	r3, [r3, #0]
 8104c56:	08db      	lsrs	r3, r3, #3
 8104c58:	f003 0303 	and.w	r3, r3, #3
 8104c5c:	4a77      	ldr	r2, [pc, #476]	@ (8104e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8104c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104c64:	e01e      	b.n	8104ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104c66:	4b74      	ldr	r3, [pc, #464]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c68:	681b      	ldr	r3, [r3, #0]
 8104c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104c72:	d106      	bne.n	8104c82 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8104c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104c7a:	d102      	bne.n	8104c82 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104c7c:	4b70      	ldr	r3, [pc, #448]	@ (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104c80:	e010      	b.n	8104ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104c82:	4b6d      	ldr	r3, [pc, #436]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c84:	681b      	ldr	r3, [r3, #0]
 8104c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104c8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104c8e:	d106      	bne.n	8104c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8104c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104c96:	d102      	bne.n	8104c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104c98:	4b6a      	ldr	r3, [pc, #424]	@ (8104e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104c9c:	e002      	b.n	8104ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104c9e:	2300      	movs	r3, #0
 8104ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104ca2:	e122      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104ca4:	e121      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104ca6:	2300      	movs	r3, #0
 8104ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104caa:	e11e      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8104cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104cb0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8104cb4:	430b      	orrs	r3, r1
 8104cb6:	d133      	bne.n	8104d20 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8104cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104cc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104cc4:	2b00      	cmp	r3, #0
 8104cc6:	d004      	beq.n	8104cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8104cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104cce:	d012      	beq.n	8104cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8104cd0:	e023      	b.n	8104d1a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104cd2:	4b59      	ldr	r3, [pc, #356]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104cd4:	681b      	ldr	r3, [r3, #0]
 8104cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104cde:	d107      	bne.n	8104cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104ce4:	4618      	mov	r0, r3
 8104ce6:	f000 fbc7 	bl	8105478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104cee:	e0fc      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104cf0:	2300      	movs	r3, #0
 8104cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104cf4:	e0f9      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104cf6:	4b50      	ldr	r3, [pc, #320]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104cf8:	681b      	ldr	r3, [r3, #0]
 8104cfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104cfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104d02:	d107      	bne.n	8104d14 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104d04:	f107 0318 	add.w	r3, r7, #24
 8104d08:	4618      	mov	r0, r3
 8104d0a:	f000 f90d 	bl	8104f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8104d0e:	6a3b      	ldr	r3, [r7, #32]
 8104d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104d12:	e0ea      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104d14:	2300      	movs	r3, #0
 8104d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d18:	e0e7      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104d1a:	2300      	movs	r3, #0
 8104d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d1e:	e0e4      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8104d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104d24:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8104d28:	430b      	orrs	r3, r1
 8104d2a:	f040 808d 	bne.w	8104e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8104d2e:	4b42      	ldr	r3, [pc, #264]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104d32:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8104d36:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104d3e:	d06b      	beq.n	8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8104d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104d46:	d874      	bhi.n	8104e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104d4e:	d056      	beq.n	8104dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8104d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104d56:	d86c      	bhi.n	8104e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104d5e:	d03b      	beq.n	8104dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8104d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104d66:	d864      	bhi.n	8104e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104d6e:	d021      	beq.n	8104db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8104d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104d76:	d85c      	bhi.n	8104e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d7a:	2b00      	cmp	r3, #0
 8104d7c:	d004      	beq.n	8104d88 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8104d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104d84:	d004      	beq.n	8104d90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8104d86:	e054      	b.n	8104e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8104d88:	f000 f8b8 	bl	8104efc <HAL_RCCEx_GetD3PCLK1Freq>
 8104d8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104d8e:	e0ac      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104d90:	4b29      	ldr	r3, [pc, #164]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104d98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104d9c:	d107      	bne.n	8104dae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104d9e:	f107 0318 	add.w	r3, r7, #24
 8104da2:	4618      	mov	r0, r3
 8104da4:	f000 f8c0 	bl	8104f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104da8:	69fb      	ldr	r3, [r7, #28]
 8104daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dac:	e09d      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104dae:	2300      	movs	r3, #0
 8104db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104db2:	e09a      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104db4:	4b20      	ldr	r3, [pc, #128]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104db6:	681b      	ldr	r3, [r3, #0]
 8104db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104dc0:	d107      	bne.n	8104dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104dc2:	f107 030c 	add.w	r3, r7, #12
 8104dc6:	4618      	mov	r0, r3
 8104dc8:	f000 fa02 	bl	81051d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104dcc:	693b      	ldr	r3, [r7, #16]
 8104dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dd0:	e08b      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104dd2:	2300      	movs	r3, #0
 8104dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104dd6:	e088      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104dd8:	4b17      	ldr	r3, [pc, #92]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	f003 0304 	and.w	r3, r3, #4
 8104de0:	2b04      	cmp	r3, #4
 8104de2:	d109      	bne.n	8104df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104de4:	4b14      	ldr	r3, [pc, #80]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104de6:	681b      	ldr	r3, [r3, #0]
 8104de8:	08db      	lsrs	r3, r3, #3
 8104dea:	f003 0303 	and.w	r3, r3, #3
 8104dee:	4a13      	ldr	r2, [pc, #76]	@ (8104e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104df0:	fa22 f303 	lsr.w	r3, r2, r3
 8104df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104df6:	e078      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104df8:	2300      	movs	r3, #0
 8104dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104dfc:	e075      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8104dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e00:	681b      	ldr	r3, [r3, #0]
 8104e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104e0a:	d102      	bne.n	8104e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8104e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e10:	e06b      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e12:	2300      	movs	r3, #0
 8104e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e16:	e068      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104e18:	4b07      	ldr	r3, [pc, #28]	@ (8104e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e1a:	681b      	ldr	r3, [r3, #0]
 8104e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104e24:	d102      	bne.n	8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8104e26:	4b07      	ldr	r3, [pc, #28]	@ (8104e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e2a:	e05e      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e2c:	2300      	movs	r3, #0
 8104e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e30:	e05b      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8104e32:	2300      	movs	r3, #0
 8104e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e36:	e058      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104e38:	58024400 	.word	0x58024400
 8104e3c:	03d09000 	.word	0x03d09000
 8104e40:	003d0900 	.word	0x003d0900
 8104e44:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8104e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104e4c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8104e50:	430b      	orrs	r3, r1
 8104e52:	d148      	bne.n	8104ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8104e54:	4b27      	ldr	r3, [pc, #156]	@ (8104ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104e5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104e64:	d02a      	beq.n	8104ebc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8104e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104e6c:	d838      	bhi.n	8104ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8104e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e70:	2b00      	cmp	r3, #0
 8104e72:	d004      	beq.n	8104e7e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8104e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104e7a:	d00d      	beq.n	8104e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8104e7c:	e030      	b.n	8104ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8104ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104e80:	681b      	ldr	r3, [r3, #0]
 8104e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104e86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104e8a:	d102      	bne.n	8104e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8104e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8104e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e90:	e02b      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e92:	2300      	movs	r3, #0
 8104e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e96:	e028      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104e98:	4b16      	ldr	r3, [pc, #88]	@ (8104ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104ea0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104ea4:	d107      	bne.n	8104eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104eaa:	4618      	mov	r0, r3
 8104eac:	f000 fae4 	bl	8105478 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104eb4:	e019      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104eb6:	2300      	movs	r3, #0
 8104eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104eba:	e016      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8104ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104ebe:	681b      	ldr	r3, [r3, #0]
 8104ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104ec4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104ec8:	d107      	bne.n	8104eda <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104eca:	f107 0318 	add.w	r3, r7, #24
 8104ece:	4618      	mov	r0, r3
 8104ed0:	f000 f82a 	bl	8104f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104ed4:	69fb      	ldr	r3, [r7, #28]
 8104ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ed8:	e007      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104eda:	2300      	movs	r3, #0
 8104edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ede:	e004      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104ee0:	2300      	movs	r3, #0
 8104ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104ee4:	e001      	b.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8104ee6:	2300      	movs	r3, #0
 8104ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8104eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8104eec:	4618      	mov	r0, r3
 8104eee:	3740      	adds	r7, #64	@ 0x40
 8104ef0:	46bd      	mov	sp, r7
 8104ef2:	bd80      	pop	{r7, pc}
 8104ef4:	58024400 	.word	0x58024400
 8104ef8:	017d7840 	.word	0x017d7840

08104efc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104efc:	b580      	push	{r7, lr}
 8104efe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104f00:	f7fd ffa8 	bl	8102e54 <HAL_RCC_GetHCLKFreq>
 8104f04:	4602      	mov	r2, r0
 8104f06:	4b06      	ldr	r3, [pc, #24]	@ (8104f20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104f08:	6a1b      	ldr	r3, [r3, #32]
 8104f0a:	091b      	lsrs	r3, r3, #4
 8104f0c:	f003 0307 	and.w	r3, r3, #7
 8104f10:	4904      	ldr	r1, [pc, #16]	@ (8104f24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104f12:	5ccb      	ldrb	r3, [r1, r3]
 8104f14:	f003 031f 	and.w	r3, r3, #31
 8104f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104f1c:	4618      	mov	r0, r3
 8104f1e:	bd80      	pop	{r7, pc}
 8104f20:	58024400 	.word	0x58024400
 8104f24:	08108934 	.word	0x08108934

08104f28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8104f28:	b480      	push	{r7}
 8104f2a:	b089      	sub	sp, #36	@ 0x24
 8104f2c:	af00      	add	r7, sp, #0
 8104f2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104f30:	4ba1      	ldr	r3, [pc, #644]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104f34:	f003 0303 	and.w	r3, r3, #3
 8104f38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8104f3a:	4b9f      	ldr	r3, [pc, #636]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104f3e:	0b1b      	lsrs	r3, r3, #12
 8104f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104f44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104f46:	4b9c      	ldr	r3, [pc, #624]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104f4a:	091b      	lsrs	r3, r3, #4
 8104f4c:	f003 0301 	and.w	r3, r3, #1
 8104f50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8104f52:	4b99      	ldr	r3, [pc, #612]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104f56:	08db      	lsrs	r3, r3, #3
 8104f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104f5c:	693a      	ldr	r2, [r7, #16]
 8104f5e:	fb02 f303 	mul.w	r3, r2, r3
 8104f62:	ee07 3a90 	vmov	s15, r3
 8104f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104f6e:	697b      	ldr	r3, [r7, #20]
 8104f70:	2b00      	cmp	r3, #0
 8104f72:	f000 8111 	beq.w	8105198 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104f76:	69bb      	ldr	r3, [r7, #24]
 8104f78:	2b02      	cmp	r3, #2
 8104f7a:	f000 8083 	beq.w	8105084 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104f7e:	69bb      	ldr	r3, [r7, #24]
 8104f80:	2b02      	cmp	r3, #2
 8104f82:	f200 80a1 	bhi.w	81050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104f86:	69bb      	ldr	r3, [r7, #24]
 8104f88:	2b00      	cmp	r3, #0
 8104f8a:	d003      	beq.n	8104f94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104f8c:	69bb      	ldr	r3, [r7, #24]
 8104f8e:	2b01      	cmp	r3, #1
 8104f90:	d056      	beq.n	8105040 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104f92:	e099      	b.n	81050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104f94:	4b88      	ldr	r3, [pc, #544]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	f003 0320 	and.w	r3, r3, #32
 8104f9c:	2b00      	cmp	r3, #0
 8104f9e:	d02d      	beq.n	8104ffc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104fa0:	4b85      	ldr	r3, [pc, #532]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	08db      	lsrs	r3, r3, #3
 8104fa6:	f003 0303 	and.w	r3, r3, #3
 8104faa:	4a84      	ldr	r2, [pc, #528]	@ (81051bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104fac:	fa22 f303 	lsr.w	r3, r2, r3
 8104fb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104fb2:	68bb      	ldr	r3, [r7, #8]
 8104fb4:	ee07 3a90 	vmov	s15, r3
 8104fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104fbc:	697b      	ldr	r3, [r7, #20]
 8104fbe:	ee07 3a90 	vmov	s15, r3
 8104fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104fca:	4b7b      	ldr	r3, [pc, #492]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104fd2:	ee07 3a90 	vmov	s15, r3
 8104fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8104fde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104ffa:	e087      	b.n	810510c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104ffc:	697b      	ldr	r3, [r7, #20]
 8104ffe:	ee07 3a90 	vmov	s15, r3
 8105002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105006:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810500a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810500e:	4b6a      	ldr	r3, [pc, #424]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105016:	ee07 3a90 	vmov	s15, r3
 810501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810501e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105022:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810502e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105036:	ee67 7a27 	vmul.f32	s15, s14, s15
 810503a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810503e:	e065      	b.n	810510c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105040:	697b      	ldr	r3, [r7, #20]
 8105042:	ee07 3a90 	vmov	s15, r3
 8105046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810504a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105052:	4b59      	ldr	r3, [pc, #356]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810505a:	ee07 3a90 	vmov	s15, r3
 810505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105062:	ed97 6a03 	vldr	s12, [r7, #12]
 8105066:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810507e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105082:	e043      	b.n	810510c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105084:	697b      	ldr	r3, [r7, #20]
 8105086:	ee07 3a90 	vmov	s15, r3
 810508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810508e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81051cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105096:	4b48      	ldr	r3, [pc, #288]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810509e:	ee07 3a90 	vmov	s15, r3
 81050a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81050aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81050ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81050ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81050c6:	e021      	b.n	810510c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81050c8:	697b      	ldr	r3, [r7, #20]
 81050ca:	ee07 3a90 	vmov	s15, r3
 81050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81051c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050da:	4b37      	ldr	r3, [pc, #220]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81050dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050e2:	ee07 3a90 	vmov	s15, r3
 81050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81050ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810510a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810510c:	4b2a      	ldr	r3, [pc, #168]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105110:	0a5b      	lsrs	r3, r3, #9
 8105112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105116:	ee07 3a90 	vmov	s15, r3
 810511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810511e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105126:	edd7 6a07 	vldr	s13, [r7, #28]
 810512a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810512e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105132:	ee17 2a90 	vmov	r2, s15
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810513a:	4b1f      	ldr	r3, [pc, #124]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810513e:	0c1b      	lsrs	r3, r3, #16
 8105140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105144:	ee07 3a90 	vmov	s15, r3
 8105148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810514c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105150:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105154:	edd7 6a07 	vldr	s13, [r7, #28]
 8105158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810515c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105160:	ee17 2a90 	vmov	r2, s15
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105168:	4b13      	ldr	r3, [pc, #76]	@ (81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810516a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810516c:	0e1b      	lsrs	r3, r3, #24
 810516e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105172:	ee07 3a90 	vmov	s15, r3
 8105176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810517a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810517e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105182:	edd7 6a07 	vldr	s13, [r7, #28]
 8105186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810518a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810518e:	ee17 2a90 	vmov	r2, s15
 8105192:	687b      	ldr	r3, [r7, #4]
 8105194:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105196:	e008      	b.n	81051aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105198:	687b      	ldr	r3, [r7, #4]
 810519a:	2200      	movs	r2, #0
 810519c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810519e:	687b      	ldr	r3, [r7, #4]
 81051a0:	2200      	movs	r2, #0
 81051a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	2200      	movs	r2, #0
 81051a8:	609a      	str	r2, [r3, #8]
}
 81051aa:	bf00      	nop
 81051ac:	3724      	adds	r7, #36	@ 0x24
 81051ae:	46bd      	mov	sp, r7
 81051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051b4:	4770      	bx	lr
 81051b6:	bf00      	nop
 81051b8:	58024400 	.word	0x58024400
 81051bc:	03d09000 	.word	0x03d09000
 81051c0:	46000000 	.word	0x46000000
 81051c4:	4c742400 	.word	0x4c742400
 81051c8:	4a742400 	.word	0x4a742400
 81051cc:	4bbebc20 	.word	0x4bbebc20

081051d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81051d0:	b480      	push	{r7}
 81051d2:	b089      	sub	sp, #36	@ 0x24
 81051d4:	af00      	add	r7, sp, #0
 81051d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81051d8:	4ba1      	ldr	r3, [pc, #644]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81051dc:	f003 0303 	and.w	r3, r3, #3
 81051e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81051e2:	4b9f      	ldr	r3, [pc, #636]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81051e6:	0d1b      	lsrs	r3, r3, #20
 81051e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81051ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81051ee:	4b9c      	ldr	r3, [pc, #624]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81051f2:	0a1b      	lsrs	r3, r3, #8
 81051f4:	f003 0301 	and.w	r3, r3, #1
 81051f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81051fa:	4b99      	ldr	r3, [pc, #612]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81051fe:	08db      	lsrs	r3, r3, #3
 8105200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105204:	693a      	ldr	r2, [r7, #16]
 8105206:	fb02 f303 	mul.w	r3, r2, r3
 810520a:	ee07 3a90 	vmov	s15, r3
 810520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105212:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105216:	697b      	ldr	r3, [r7, #20]
 8105218:	2b00      	cmp	r3, #0
 810521a:	f000 8111 	beq.w	8105440 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810521e:	69bb      	ldr	r3, [r7, #24]
 8105220:	2b02      	cmp	r3, #2
 8105222:	f000 8083 	beq.w	810532c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105226:	69bb      	ldr	r3, [r7, #24]
 8105228:	2b02      	cmp	r3, #2
 810522a:	f200 80a1 	bhi.w	8105370 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810522e:	69bb      	ldr	r3, [r7, #24]
 8105230:	2b00      	cmp	r3, #0
 8105232:	d003      	beq.n	810523c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105234:	69bb      	ldr	r3, [r7, #24]
 8105236:	2b01      	cmp	r3, #1
 8105238:	d056      	beq.n	81052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810523a:	e099      	b.n	8105370 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810523c:	4b88      	ldr	r3, [pc, #544]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810523e:	681b      	ldr	r3, [r3, #0]
 8105240:	f003 0320 	and.w	r3, r3, #32
 8105244:	2b00      	cmp	r3, #0
 8105246:	d02d      	beq.n	81052a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105248:	4b85      	ldr	r3, [pc, #532]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810524a:	681b      	ldr	r3, [r3, #0]
 810524c:	08db      	lsrs	r3, r3, #3
 810524e:	f003 0303 	and.w	r3, r3, #3
 8105252:	4a84      	ldr	r2, [pc, #528]	@ (8105464 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105254:	fa22 f303 	lsr.w	r3, r2, r3
 8105258:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810525a:	68bb      	ldr	r3, [r7, #8]
 810525c:	ee07 3a90 	vmov	s15, r3
 8105260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105264:	697b      	ldr	r3, [r7, #20]
 8105266:	ee07 3a90 	vmov	s15, r3
 810526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810526e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105272:	4b7b      	ldr	r3, [pc, #492]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810527a:	ee07 3a90 	vmov	s15, r3
 810527e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105282:	ed97 6a03 	vldr	s12, [r7, #12]
 8105286:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810528a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810528e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810529e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81052a2:	e087      	b.n	81053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81052a4:	697b      	ldr	r3, [r7, #20]
 81052a6:	ee07 3a90 	vmov	s15, r3
 81052aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810546c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81052b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052b6:	4b6a      	ldr	r3, [pc, #424]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81052ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052be:	ee07 3a90 	vmov	s15, r3
 81052c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81052ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81052ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81052da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81052e6:	e065      	b.n	81053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81052e8:	697b      	ldr	r3, [r7, #20]
 81052ea:	ee07 3a90 	vmov	s15, r3
 81052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105470 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81052f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052fa:	4b59      	ldr	r3, [pc, #356]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105302:	ee07 3a90 	vmov	s15, r3
 8105306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810530a:	ed97 6a03 	vldr	s12, [r7, #12]
 810530e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810531a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810531e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810532a:	e043      	b.n	81053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810532c:	697b      	ldr	r3, [r7, #20]
 810532e:	ee07 3a90 	vmov	s15, r3
 8105332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105336:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810533e:	4b48      	ldr	r3, [pc, #288]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105346:	ee07 3a90 	vmov	s15, r3
 810534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810534e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105352:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810535e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105366:	ee67 7a27 	vmul.f32	s15, s14, s15
 810536a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810536e:	e021      	b.n	81053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105370:	697b      	ldr	r3, [r7, #20]
 8105372:	ee07 3a90 	vmov	s15, r3
 8105376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810537a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105470 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105382:	4b37      	ldr	r3, [pc, #220]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810538a:	ee07 3a90 	vmov	s15, r3
 810538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105392:	ed97 6a03 	vldr	s12, [r7, #12]
 8105396:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105468 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81053a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81053b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81053b4:	4b2a      	ldr	r3, [pc, #168]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81053b8:	0a5b      	lsrs	r3, r3, #9
 81053ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81053be:	ee07 3a90 	vmov	s15, r3
 81053c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81053ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053ce:	edd7 6a07 	vldr	s13, [r7, #28]
 81053d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053da:	ee17 2a90 	vmov	r2, s15
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81053e2:	4b1f      	ldr	r3, [pc, #124]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81053e6:	0c1b      	lsrs	r3, r3, #16
 81053e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81053ec:	ee07 3a90 	vmov	s15, r3
 81053f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81053f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8105400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105408:	ee17 2a90 	vmov	r2, s15
 810540c:	687b      	ldr	r3, [r7, #4]
 810540e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105410:	4b13      	ldr	r3, [pc, #76]	@ (8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105414:	0e1b      	lsrs	r3, r3, #24
 8105416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810541a:	ee07 3a90 	vmov	s15, r3
 810541e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105422:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105426:	ee37 7a87 	vadd.f32	s14, s15, s14
 810542a:	edd7 6a07 	vldr	s13, [r7, #28]
 810542e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105436:	ee17 2a90 	vmov	r2, s15
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810543e:	e008      	b.n	8105452 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	2200      	movs	r2, #0
 8105444:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	2200      	movs	r2, #0
 810544a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810544c:	687b      	ldr	r3, [r7, #4]
 810544e:	2200      	movs	r2, #0
 8105450:	609a      	str	r2, [r3, #8]
}
 8105452:	bf00      	nop
 8105454:	3724      	adds	r7, #36	@ 0x24
 8105456:	46bd      	mov	sp, r7
 8105458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810545c:	4770      	bx	lr
 810545e:	bf00      	nop
 8105460:	58024400 	.word	0x58024400
 8105464:	03d09000 	.word	0x03d09000
 8105468:	46000000 	.word	0x46000000
 810546c:	4c742400 	.word	0x4c742400
 8105470:	4a742400 	.word	0x4a742400
 8105474:	4bbebc20 	.word	0x4bbebc20

08105478 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8105478:	b480      	push	{r7}
 810547a:	b089      	sub	sp, #36	@ 0x24
 810547c:	af00      	add	r7, sp, #0
 810547e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105480:	4ba0      	ldr	r3, [pc, #640]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105484:	f003 0303 	and.w	r3, r3, #3
 8105488:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810548a:	4b9e      	ldr	r3, [pc, #632]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810548e:	091b      	lsrs	r3, r3, #4
 8105490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105494:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105496:	4b9b      	ldr	r3, [pc, #620]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810549a:	f003 0301 	and.w	r3, r3, #1
 810549e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81054a0:	4b98      	ldr	r3, [pc, #608]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81054a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81054a4:	08db      	lsrs	r3, r3, #3
 81054a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81054aa:	693a      	ldr	r2, [r7, #16]
 81054ac:	fb02 f303 	mul.w	r3, r2, r3
 81054b0:	ee07 3a90 	vmov	s15, r3
 81054b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81054bc:	697b      	ldr	r3, [r7, #20]
 81054be:	2b00      	cmp	r3, #0
 81054c0:	f000 8111 	beq.w	81056e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81054c4:	69bb      	ldr	r3, [r7, #24]
 81054c6:	2b02      	cmp	r3, #2
 81054c8:	f000 8083 	beq.w	81055d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81054cc:	69bb      	ldr	r3, [r7, #24]
 81054ce:	2b02      	cmp	r3, #2
 81054d0:	f200 80a1 	bhi.w	8105616 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81054d4:	69bb      	ldr	r3, [r7, #24]
 81054d6:	2b00      	cmp	r3, #0
 81054d8:	d003      	beq.n	81054e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81054da:	69bb      	ldr	r3, [r7, #24]
 81054dc:	2b01      	cmp	r3, #1
 81054de:	d056      	beq.n	810558e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81054e0:	e099      	b.n	8105616 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81054e2:	4b88      	ldr	r3, [pc, #544]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81054e4:	681b      	ldr	r3, [r3, #0]
 81054e6:	f003 0320 	and.w	r3, r3, #32
 81054ea:	2b00      	cmp	r3, #0
 81054ec:	d02d      	beq.n	810554a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81054ee:	4b85      	ldr	r3, [pc, #532]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	08db      	lsrs	r3, r3, #3
 81054f4:	f003 0303 	and.w	r3, r3, #3
 81054f8:	4a83      	ldr	r2, [pc, #524]	@ (8105708 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81054fa:	fa22 f303 	lsr.w	r3, r2, r3
 81054fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105500:	68bb      	ldr	r3, [r7, #8]
 8105502:	ee07 3a90 	vmov	s15, r3
 8105506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810550a:	697b      	ldr	r3, [r7, #20]
 810550c:	ee07 3a90 	vmov	s15, r3
 8105510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105518:	4b7a      	ldr	r3, [pc, #488]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810551a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810551c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105520:	ee07 3a90 	vmov	s15, r3
 8105524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105528:	ed97 6a03 	vldr	s12, [r7, #12]
 810552c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 810570c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105538:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810553c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105544:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105548:	e087      	b.n	810565a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810554a:	697b      	ldr	r3, [r7, #20]
 810554c:	ee07 3a90 	vmov	s15, r3
 8105550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105554:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8105710 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810555c:	4b69      	ldr	r3, [pc, #420]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810555e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105564:	ee07 3a90 	vmov	s15, r3
 8105568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810556c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105570:	eddf 5a66 	vldr	s11, [pc, #408]	@ 810570c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810557c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810558c:	e065      	b.n	810565a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810558e:	697b      	ldr	r3, [r7, #20]
 8105590:	ee07 3a90 	vmov	s15, r3
 8105594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105598:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8105714 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810559c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055a0:	4b58      	ldr	r3, [pc, #352]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81055a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81055a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055a8:	ee07 3a90 	vmov	s15, r3
 81055ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055b0:	ed97 6a03 	vldr	s12, [r7, #12]
 81055b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 810570c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81055b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81055c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81055d0:	e043      	b.n	810565a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81055d2:	697b      	ldr	r3, [r7, #20]
 81055d4:	ee07 3a90 	vmov	s15, r3
 81055d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8105718 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81055e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055e4:	4b47      	ldr	r3, [pc, #284]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81055e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055ec:	ee07 3a90 	vmov	s15, r3
 81055f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055f4:	ed97 6a03 	vldr	s12, [r7, #12]
 81055f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 810570c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81055fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810560c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105614:	e021      	b.n	810565a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105616:	697b      	ldr	r3, [r7, #20]
 8105618:	ee07 3a90 	vmov	s15, r3
 810561c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105620:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8105710 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105628:	4b36      	ldr	r3, [pc, #216]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810562c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105630:	ee07 3a90 	vmov	s15, r3
 8105634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105638:	ed97 6a03 	vldr	s12, [r7, #12]
 810563c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 810570c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105648:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810564c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105654:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105658:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810565a:	4b2a      	ldr	r3, [pc, #168]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810565e:	0a5b      	lsrs	r3, r3, #9
 8105660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105664:	ee07 3a90 	vmov	s15, r3
 8105668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810566c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105670:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105674:	edd7 6a07 	vldr	s13, [r7, #28]
 8105678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810567c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105680:	ee17 2a90 	vmov	r2, s15
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8105688:	4b1e      	ldr	r3, [pc, #120]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810568a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810568c:	0c1b      	lsrs	r3, r3, #16
 810568e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105692:	ee07 3a90 	vmov	s15, r3
 8105696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810569a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810569e:	ee37 7a87 	vadd.f32	s14, s15, s14
 81056a2:	edd7 6a07 	vldr	s13, [r7, #28]
 81056a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81056aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81056ae:	ee17 2a90 	vmov	r2, s15
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 81056b6:	4b13      	ldr	r3, [pc, #76]	@ (8105704 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81056ba:	0e1b      	lsrs	r3, r3, #24
 81056bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81056c0:	ee07 3a90 	vmov	s15, r3
 81056c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81056cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81056d0:	edd7 6a07 	vldr	s13, [r7, #28]
 81056d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81056d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81056dc:	ee17 2a90 	vmov	r2, s15
 81056e0:	687b      	ldr	r3, [r7, #4]
 81056e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81056e4:	e008      	b.n	81056f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	2200      	movs	r2, #0
 81056ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	2200      	movs	r2, #0
 81056f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	2200      	movs	r2, #0
 81056f6:	609a      	str	r2, [r3, #8]
}
 81056f8:	bf00      	nop
 81056fa:	3724      	adds	r7, #36	@ 0x24
 81056fc:	46bd      	mov	sp, r7
 81056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105702:	4770      	bx	lr
 8105704:	58024400 	.word	0x58024400
 8105708:	03d09000 	.word	0x03d09000
 810570c:	46000000 	.word	0x46000000
 8105710:	4c742400 	.word	0x4c742400
 8105714:	4a742400 	.word	0x4a742400
 8105718:	4bbebc20 	.word	0x4bbebc20

0810571c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810571c:	b580      	push	{r7, lr}
 810571e:	b084      	sub	sp, #16
 8105720:	af00      	add	r7, sp, #0
 8105722:	6078      	str	r0, [r7, #4]
 8105724:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105726:	2300      	movs	r3, #0
 8105728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810572a:	4b54      	ldr	r3, [pc, #336]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 810572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810572e:	f003 0303 	and.w	r3, r3, #3
 8105732:	2b03      	cmp	r3, #3
 8105734:	d101      	bne.n	810573a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105736:	2301      	movs	r3, #1
 8105738:	e09b      	b.n	8105872 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810573a:	4b50      	ldr	r3, [pc, #320]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 810573c:	681b      	ldr	r3, [r3, #0]
 810573e:	4a4f      	ldr	r2, [pc, #316]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105740:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8105744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105746:	f7fc fbdf 	bl	8101f08 <HAL_GetTick>
 810574a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810574c:	e008      	b.n	8105760 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810574e:	f7fc fbdb 	bl	8101f08 <HAL_GetTick>
 8105752:	4602      	mov	r2, r0
 8105754:	68bb      	ldr	r3, [r7, #8]
 8105756:	1ad3      	subs	r3, r2, r3
 8105758:	2b02      	cmp	r3, #2
 810575a:	d901      	bls.n	8105760 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810575c:	2303      	movs	r3, #3
 810575e:	e088      	b.n	8105872 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105760:	4b46      	ldr	r3, [pc, #280]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105762:	681b      	ldr	r3, [r3, #0]
 8105764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105768:	2b00      	cmp	r3, #0
 810576a:	d1f0      	bne.n	810574e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810576c:	4b43      	ldr	r3, [pc, #268]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 810576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105770:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	681b      	ldr	r3, [r3, #0]
 8105778:	031b      	lsls	r3, r3, #12
 810577a:	4940      	ldr	r1, [pc, #256]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 810577c:	4313      	orrs	r3, r2
 810577e:	628b      	str	r3, [r1, #40]	@ 0x28
 8105780:	687b      	ldr	r3, [r7, #4]
 8105782:	685b      	ldr	r3, [r3, #4]
 8105784:	3b01      	subs	r3, #1
 8105786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	689b      	ldr	r3, [r3, #8]
 810578e:	3b01      	subs	r3, #1
 8105790:	025b      	lsls	r3, r3, #9
 8105792:	b29b      	uxth	r3, r3
 8105794:	431a      	orrs	r2, r3
 8105796:	687b      	ldr	r3, [r7, #4]
 8105798:	68db      	ldr	r3, [r3, #12]
 810579a:	3b01      	subs	r3, #1
 810579c:	041b      	lsls	r3, r3, #16
 810579e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81057a2:	431a      	orrs	r2, r3
 81057a4:	687b      	ldr	r3, [r7, #4]
 81057a6:	691b      	ldr	r3, [r3, #16]
 81057a8:	3b01      	subs	r3, #1
 81057aa:	061b      	lsls	r3, r3, #24
 81057ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81057b0:	4932      	ldr	r1, [pc, #200]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 81057b2:	4313      	orrs	r3, r2
 81057b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81057b6:	4b31      	ldr	r3, [pc, #196]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 81057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81057be:	687b      	ldr	r3, [r7, #4]
 81057c0:	695b      	ldr	r3, [r3, #20]
 81057c2:	492e      	ldr	r1, [pc, #184]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 81057c4:	4313      	orrs	r3, r2
 81057c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81057c8:	4b2c      	ldr	r3, [pc, #176]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 81057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057cc:	f023 0220 	bic.w	r2, r3, #32
 81057d0:	687b      	ldr	r3, [r7, #4]
 81057d2:	699b      	ldr	r3, [r3, #24]
 81057d4:	4929      	ldr	r1, [pc, #164]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 81057d6:	4313      	orrs	r3, r2
 81057d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81057da:	4b28      	ldr	r3, [pc, #160]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 81057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057de:	4a27      	ldr	r2, [pc, #156]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 81057e0:	f023 0310 	bic.w	r3, r3, #16
 81057e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81057e6:	4b25      	ldr	r3, [pc, #148]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 81057e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81057ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81057ee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81057f2:	687a      	ldr	r2, [r7, #4]
 81057f4:	69d2      	ldr	r2, [r2, #28]
 81057f6:	00d2      	lsls	r2, r2, #3
 81057f8:	4920      	ldr	r1, [pc, #128]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 81057fa:	4313      	orrs	r3, r2
 81057fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81057fe:	4b1f      	ldr	r3, [pc, #124]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105802:	4a1e      	ldr	r2, [pc, #120]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105804:	f043 0310 	orr.w	r3, r3, #16
 8105808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810580a:	683b      	ldr	r3, [r7, #0]
 810580c:	2b00      	cmp	r3, #0
 810580e:	d106      	bne.n	810581e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105810:	4b1a      	ldr	r3, [pc, #104]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105814:	4a19      	ldr	r2, [pc, #100]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105816:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810581a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810581c:	e00f      	b.n	810583e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810581e:	683b      	ldr	r3, [r7, #0]
 8105820:	2b01      	cmp	r3, #1
 8105822:	d106      	bne.n	8105832 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105824:	4b15      	ldr	r3, [pc, #84]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105828:	4a14      	ldr	r2, [pc, #80]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 810582a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810582e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105830:	e005      	b.n	810583e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105832:	4b12      	ldr	r3, [pc, #72]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105836:	4a11      	ldr	r2, [pc, #68]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105838:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810583c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810583e:	4b0f      	ldr	r3, [pc, #60]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105840:	681b      	ldr	r3, [r3, #0]
 8105842:	4a0e      	ldr	r2, [pc, #56]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105844:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8105848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810584a:	f7fc fb5d 	bl	8101f08 <HAL_GetTick>
 810584e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105850:	e008      	b.n	8105864 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105852:	f7fc fb59 	bl	8101f08 <HAL_GetTick>
 8105856:	4602      	mov	r2, r0
 8105858:	68bb      	ldr	r3, [r7, #8]
 810585a:	1ad3      	subs	r3, r2, r3
 810585c:	2b02      	cmp	r3, #2
 810585e:	d901      	bls.n	8105864 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105860:	2303      	movs	r3, #3
 8105862:	e006      	b.n	8105872 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105864:	4b05      	ldr	r3, [pc, #20]	@ (810587c <RCCEx_PLL2_Config+0x160>)
 8105866:	681b      	ldr	r3, [r3, #0]
 8105868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810586c:	2b00      	cmp	r3, #0
 810586e:	d0f0      	beq.n	8105852 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105870:	7bfb      	ldrb	r3, [r7, #15]
}
 8105872:	4618      	mov	r0, r3
 8105874:	3710      	adds	r7, #16
 8105876:	46bd      	mov	sp, r7
 8105878:	bd80      	pop	{r7, pc}
 810587a:	bf00      	nop
 810587c:	58024400 	.word	0x58024400

08105880 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105880:	b580      	push	{r7, lr}
 8105882:	b084      	sub	sp, #16
 8105884:	af00      	add	r7, sp, #0
 8105886:	6078      	str	r0, [r7, #4]
 8105888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810588a:	2300      	movs	r3, #0
 810588c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810588e:	4b54      	ldr	r3, [pc, #336]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 8105890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105892:	f003 0303 	and.w	r3, r3, #3
 8105896:	2b03      	cmp	r3, #3
 8105898:	d101      	bne.n	810589e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810589a:	2301      	movs	r3, #1
 810589c:	e09b      	b.n	81059d6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810589e:	4b50      	ldr	r3, [pc, #320]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 81058a0:	681b      	ldr	r3, [r3, #0]
 81058a2:	4a4f      	ldr	r2, [pc, #316]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 81058a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81058a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81058aa:	f7fc fb2d 	bl	8101f08 <HAL_GetTick>
 81058ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81058b0:	e008      	b.n	81058c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81058b2:	f7fc fb29 	bl	8101f08 <HAL_GetTick>
 81058b6:	4602      	mov	r2, r0
 81058b8:	68bb      	ldr	r3, [r7, #8]
 81058ba:	1ad3      	subs	r3, r2, r3
 81058bc:	2b02      	cmp	r3, #2
 81058be:	d901      	bls.n	81058c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81058c0:	2303      	movs	r3, #3
 81058c2:	e088      	b.n	81059d6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81058c4:	4b46      	ldr	r3, [pc, #280]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 81058c6:	681b      	ldr	r3, [r3, #0]
 81058c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81058cc:	2b00      	cmp	r3, #0
 81058ce:	d1f0      	bne.n	81058b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81058d0:	4b43      	ldr	r3, [pc, #268]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 81058d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81058d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	681b      	ldr	r3, [r3, #0]
 81058dc:	051b      	lsls	r3, r3, #20
 81058de:	4940      	ldr	r1, [pc, #256]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 81058e0:	4313      	orrs	r3, r2
 81058e2:	628b      	str	r3, [r1, #40]	@ 0x28
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	685b      	ldr	r3, [r3, #4]
 81058e8:	3b01      	subs	r3, #1
 81058ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	689b      	ldr	r3, [r3, #8]
 81058f2:	3b01      	subs	r3, #1
 81058f4:	025b      	lsls	r3, r3, #9
 81058f6:	b29b      	uxth	r3, r3
 81058f8:	431a      	orrs	r2, r3
 81058fa:	687b      	ldr	r3, [r7, #4]
 81058fc:	68db      	ldr	r3, [r3, #12]
 81058fe:	3b01      	subs	r3, #1
 8105900:	041b      	lsls	r3, r3, #16
 8105902:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8105906:	431a      	orrs	r2, r3
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	691b      	ldr	r3, [r3, #16]
 810590c:	3b01      	subs	r3, #1
 810590e:	061b      	lsls	r3, r3, #24
 8105910:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8105914:	4932      	ldr	r1, [pc, #200]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 8105916:	4313      	orrs	r3, r2
 8105918:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810591a:	4b31      	ldr	r3, [pc, #196]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 810591c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810591e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8105922:	687b      	ldr	r3, [r7, #4]
 8105924:	695b      	ldr	r3, [r3, #20]
 8105926:	492e      	ldr	r1, [pc, #184]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 8105928:	4313      	orrs	r3, r2
 810592a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810592c:	4b2c      	ldr	r3, [pc, #176]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 810592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105930:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8105934:	687b      	ldr	r3, [r7, #4]
 8105936:	699b      	ldr	r3, [r3, #24]
 8105938:	4929      	ldr	r1, [pc, #164]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 810593a:	4313      	orrs	r3, r2
 810593c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810593e:	4b28      	ldr	r3, [pc, #160]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 8105940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105942:	4a27      	ldr	r2, [pc, #156]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 8105944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8105948:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810594a:	4b25      	ldr	r3, [pc, #148]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 810594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810594e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105952:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8105956:	687a      	ldr	r2, [r7, #4]
 8105958:	69d2      	ldr	r2, [r2, #28]
 810595a:	00d2      	lsls	r2, r2, #3
 810595c:	4920      	ldr	r1, [pc, #128]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 810595e:	4313      	orrs	r3, r2
 8105960:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105962:	4b1f      	ldr	r3, [pc, #124]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 8105964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105966:	4a1e      	ldr	r2, [pc, #120]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 8105968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810596c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810596e:	683b      	ldr	r3, [r7, #0]
 8105970:	2b00      	cmp	r3, #0
 8105972:	d106      	bne.n	8105982 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105974:	4b1a      	ldr	r3, [pc, #104]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 8105976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105978:	4a19      	ldr	r2, [pc, #100]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 810597a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810597e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105980:	e00f      	b.n	81059a2 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105982:	683b      	ldr	r3, [r7, #0]
 8105984:	2b01      	cmp	r3, #1
 8105986:	d106      	bne.n	8105996 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105988:	4b15      	ldr	r3, [pc, #84]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 810598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810598c:	4a14      	ldr	r2, [pc, #80]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 810598e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105992:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105994:	e005      	b.n	81059a2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105996:	4b12      	ldr	r3, [pc, #72]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 8105998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810599a:	4a11      	ldr	r2, [pc, #68]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 810599c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81059a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81059a2:	4b0f      	ldr	r3, [pc, #60]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 81059a4:	681b      	ldr	r3, [r3, #0]
 81059a6:	4a0e      	ldr	r2, [pc, #56]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 81059a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81059ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81059ae:	f7fc faab 	bl	8101f08 <HAL_GetTick>
 81059b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81059b4:	e008      	b.n	81059c8 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81059b6:	f7fc faa7 	bl	8101f08 <HAL_GetTick>
 81059ba:	4602      	mov	r2, r0
 81059bc:	68bb      	ldr	r3, [r7, #8]
 81059be:	1ad3      	subs	r3, r2, r3
 81059c0:	2b02      	cmp	r3, #2
 81059c2:	d901      	bls.n	81059c8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81059c4:	2303      	movs	r3, #3
 81059c6:	e006      	b.n	81059d6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81059c8:	4b05      	ldr	r3, [pc, #20]	@ (81059e0 <RCCEx_PLL3_Config+0x160>)
 81059ca:	681b      	ldr	r3, [r3, #0]
 81059cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81059d0:	2b00      	cmp	r3, #0
 81059d2:	d0f0      	beq.n	81059b6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 81059d6:	4618      	mov	r0, r3
 81059d8:	3710      	adds	r7, #16
 81059da:	46bd      	mov	sp, r7
 81059dc:	bd80      	pop	{r7, pc}
 81059de:	bf00      	nop
 81059e0:	58024400 	.word	0x58024400

081059e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 81059e4:	b580      	push	{r7, lr}
 81059e6:	b084      	sub	sp, #16
 81059e8:	af00      	add	r7, sp, #0
 81059ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 81059ec:	2301      	movs	r3, #1
 81059ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	2b00      	cmp	r3, #0
 81059f4:	d073      	beq.n	8105ade <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 81059fc:	b2db      	uxtb	r3, r3
 81059fe:	2b00      	cmp	r3, #0
 8105a00:	d106      	bne.n	8105a10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8105a02:	687b      	ldr	r3, [r7, #4]
 8105a04:	2200      	movs	r2, #0
 8105a06:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8105a0a:	6878      	ldr	r0, [r7, #4]
 8105a0c:	f7fb fda0 	bl	8101550 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105a10:	687b      	ldr	r3, [r7, #4]
 8105a12:	2202      	movs	r2, #2
 8105a14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	681b      	ldr	r3, [r3, #0]
 8105a1c:	68db      	ldr	r3, [r3, #12]
 8105a1e:	f003 0310 	and.w	r3, r3, #16
 8105a22:	2b10      	cmp	r3, #16
 8105a24:	d052      	beq.n	8105acc <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	681b      	ldr	r3, [r3, #0]
 8105a2a:	22ca      	movs	r2, #202	@ 0xca
 8105a2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8105a2e:	687b      	ldr	r3, [r7, #4]
 8105a30:	681b      	ldr	r3, [r3, #0]
 8105a32:	2253      	movs	r2, #83	@ 0x53
 8105a34:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8105a36:	6878      	ldr	r0, [r7, #4]
 8105a38:	f000 f87a 	bl	8105b30 <RTC_EnterInitMode>
 8105a3c:	4603      	mov	r3, r0
 8105a3e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8105a40:	7bfb      	ldrb	r3, [r7, #15]
 8105a42:	2b00      	cmp	r3, #0
 8105a44:	d126      	bne.n	8105a94 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8105a46:	687b      	ldr	r3, [r7, #4]
 8105a48:	681b      	ldr	r3, [r3, #0]
 8105a4a:	689b      	ldr	r3, [r3, #8]
 8105a4c:	687a      	ldr	r2, [r7, #4]
 8105a4e:	6812      	ldr	r2, [r2, #0]
 8105a50:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8105a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8105a58:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	681b      	ldr	r3, [r3, #0]
 8105a5e:	6899      	ldr	r1, [r3, #8]
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	685a      	ldr	r2, [r3, #4]
 8105a64:	687b      	ldr	r3, [r7, #4]
 8105a66:	691b      	ldr	r3, [r3, #16]
 8105a68:	431a      	orrs	r2, r3
 8105a6a:	687b      	ldr	r3, [r7, #4]
 8105a6c:	699b      	ldr	r3, [r3, #24]
 8105a6e:	431a      	orrs	r2, r3
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	681b      	ldr	r3, [r3, #0]
 8105a74:	430a      	orrs	r2, r1
 8105a76:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	689b      	ldr	r3, [r3, #8]
 8105a7c:	0419      	lsls	r1, r3, #16
 8105a7e:	687b      	ldr	r3, [r7, #4]
 8105a80:	68da      	ldr	r2, [r3, #12]
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	681b      	ldr	r3, [r3, #0]
 8105a86:	430a      	orrs	r2, r1
 8105a88:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8105a8a:	6878      	ldr	r0, [r7, #4]
 8105a8c:	f000 f884 	bl	8105b98 <RTC_ExitInitMode>
 8105a90:	4603      	mov	r3, r0
 8105a92:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8105a94:	7bfb      	ldrb	r3, [r7, #15]
 8105a96:	2b00      	cmp	r3, #0
 8105a98:	d113      	bne.n	8105ac2 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	681b      	ldr	r3, [r3, #0]
 8105a9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	681b      	ldr	r3, [r3, #0]
 8105aa4:	f022 0203 	bic.w	r2, r2, #3
 8105aa8:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	69da      	ldr	r2, [r3, #28]
 8105ab4:	687b      	ldr	r3, [r7, #4]
 8105ab6:	695b      	ldr	r3, [r3, #20]
 8105ab8:	431a      	orrs	r2, r3
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	681b      	ldr	r3, [r3, #0]
 8105abe:	430a      	orrs	r2, r1
 8105ac0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	681b      	ldr	r3, [r3, #0]
 8105ac6:	22ff      	movs	r2, #255	@ 0xff
 8105ac8:	625a      	str	r2, [r3, #36]	@ 0x24
 8105aca:	e001      	b.n	8105ad0 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8105acc:	2300      	movs	r3, #0
 8105ace:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8105ad0:	7bfb      	ldrb	r3, [r7, #15]
 8105ad2:	2b00      	cmp	r3, #0
 8105ad4:	d103      	bne.n	8105ade <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	2201      	movs	r2, #1
 8105ada:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8105ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8105ae0:	4618      	mov	r0, r3
 8105ae2:	3710      	adds	r7, #16
 8105ae4:	46bd      	mov	sp, r7
 8105ae6:	bd80      	pop	{r7, pc}

08105ae8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8105ae8:	b580      	push	{r7, lr}
 8105aea:	b084      	sub	sp, #16
 8105aec:	af00      	add	r7, sp, #0
 8105aee:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	4a0d      	ldr	r2, [pc, #52]	@ (8105b2c <HAL_RTC_WaitForSynchro+0x44>)
 8105af6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8105af8:	f7fc fa06 	bl	8101f08 <HAL_GetTick>
 8105afc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105afe:	e009      	b.n	8105b14 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8105b00:	f7fc fa02 	bl	8101f08 <HAL_GetTick>
 8105b04:	4602      	mov	r2, r0
 8105b06:	68fb      	ldr	r3, [r7, #12]
 8105b08:	1ad3      	subs	r3, r2, r3
 8105b0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105b0e:	d901      	bls.n	8105b14 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8105b10:	2303      	movs	r3, #3
 8105b12:	e007      	b.n	8105b24 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	681b      	ldr	r3, [r3, #0]
 8105b18:	68db      	ldr	r3, [r3, #12]
 8105b1a:	f003 0320 	and.w	r3, r3, #32
 8105b1e:	2b00      	cmp	r3, #0
 8105b20:	d0ee      	beq.n	8105b00 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8105b22:	2300      	movs	r3, #0
}
 8105b24:	4618      	mov	r0, r3
 8105b26:	3710      	adds	r7, #16
 8105b28:	46bd      	mov	sp, r7
 8105b2a:	bd80      	pop	{r7, pc}
 8105b2c:	0003ff5f 	.word	0x0003ff5f

08105b30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8105b30:	b580      	push	{r7, lr}
 8105b32:	b084      	sub	sp, #16
 8105b34:	af00      	add	r7, sp, #0
 8105b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105b38:	2300      	movs	r3, #0
 8105b3a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105b3c:	687b      	ldr	r3, [r7, #4]
 8105b3e:	681b      	ldr	r3, [r3, #0]
 8105b40:	68db      	ldr	r3, [r3, #12]
 8105b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105b46:	2b00      	cmp	r3, #0
 8105b48:	d120      	bne.n	8105b8c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8105b4a:	687b      	ldr	r3, [r7, #4]
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8105b52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8105b54:	f7fc f9d8 	bl	8101f08 <HAL_GetTick>
 8105b58:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105b5a:	e00d      	b.n	8105b78 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8105b5c:	f7fc f9d4 	bl	8101f08 <HAL_GetTick>
 8105b60:	4602      	mov	r2, r0
 8105b62:	68bb      	ldr	r3, [r7, #8]
 8105b64:	1ad3      	subs	r3, r2, r3
 8105b66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105b6a:	d905      	bls.n	8105b78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8105b6c:	2303      	movs	r3, #3
 8105b6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105b70:	687b      	ldr	r3, [r7, #4]
 8105b72:	2203      	movs	r2, #3
 8105b74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	681b      	ldr	r3, [r3, #0]
 8105b7c:	68db      	ldr	r3, [r3, #12]
 8105b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105b82:	2b00      	cmp	r3, #0
 8105b84:	d102      	bne.n	8105b8c <RTC_EnterInitMode+0x5c>
 8105b86:	7bfb      	ldrb	r3, [r7, #15]
 8105b88:	2b03      	cmp	r3, #3
 8105b8a:	d1e7      	bne.n	8105b5c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8105b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8105b8e:	4618      	mov	r0, r3
 8105b90:	3710      	adds	r7, #16
 8105b92:	46bd      	mov	sp, r7
 8105b94:	bd80      	pop	{r7, pc}
	...

08105b98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8105b98:	b580      	push	{r7, lr}
 8105b9a:	b084      	sub	sp, #16
 8105b9c:	af00      	add	r7, sp, #0
 8105b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105ba0:	2300      	movs	r3, #0
 8105ba2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8105ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8105c10 <RTC_ExitInitMode+0x78>)
 8105ba6:	68db      	ldr	r3, [r3, #12]
 8105ba8:	4a19      	ldr	r2, [pc, #100]	@ (8105c10 <RTC_ExitInitMode+0x78>)
 8105baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105bae:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8105bb0:	4b17      	ldr	r3, [pc, #92]	@ (8105c10 <RTC_ExitInitMode+0x78>)
 8105bb2:	689b      	ldr	r3, [r3, #8]
 8105bb4:	f003 0320 	and.w	r3, r3, #32
 8105bb8:	2b00      	cmp	r3, #0
 8105bba:	d10c      	bne.n	8105bd6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105bbc:	6878      	ldr	r0, [r7, #4]
 8105bbe:	f7ff ff93 	bl	8105ae8 <HAL_RTC_WaitForSynchro>
 8105bc2:	4603      	mov	r3, r0
 8105bc4:	2b00      	cmp	r3, #0
 8105bc6:	d01e      	beq.n	8105c06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	2203      	movs	r2, #3
 8105bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8105bd0:	2303      	movs	r3, #3
 8105bd2:	73fb      	strb	r3, [r7, #15]
 8105bd4:	e017      	b.n	8105c06 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8105c10 <RTC_ExitInitMode+0x78>)
 8105bd8:	689b      	ldr	r3, [r3, #8]
 8105bda:	4a0d      	ldr	r2, [pc, #52]	@ (8105c10 <RTC_ExitInitMode+0x78>)
 8105bdc:	f023 0320 	bic.w	r3, r3, #32
 8105be0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105be2:	6878      	ldr	r0, [r7, #4]
 8105be4:	f7ff ff80 	bl	8105ae8 <HAL_RTC_WaitForSynchro>
 8105be8:	4603      	mov	r3, r0
 8105bea:	2b00      	cmp	r3, #0
 8105bec:	d005      	beq.n	8105bfa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105bee:	687b      	ldr	r3, [r7, #4]
 8105bf0:	2203      	movs	r2, #3
 8105bf2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8105bf6:	2303      	movs	r3, #3
 8105bf8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105bfa:	4b05      	ldr	r3, [pc, #20]	@ (8105c10 <RTC_ExitInitMode+0x78>)
 8105bfc:	689b      	ldr	r3, [r3, #8]
 8105bfe:	4a04      	ldr	r2, [pc, #16]	@ (8105c10 <RTC_ExitInitMode+0x78>)
 8105c00:	f043 0320 	orr.w	r3, r3, #32
 8105c04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8105c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8105c08:	4618      	mov	r0, r3
 8105c0a:	3710      	adds	r7, #16
 8105c0c:	46bd      	mov	sp, r7
 8105c0e:	bd80      	pop	{r7, pc}
 8105c10:	58004000 	.word	0x58004000

08105c14 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 8105c14:	b480      	push	{r7}
 8105c16:	b085      	sub	sp, #20
 8105c18:	af00      	add	r7, sp, #0
 8105c1a:	6078      	str	r0, [r7, #4]
 8105c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8105c1e:	687b      	ldr	r3, [r7, #4]
 8105c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8105c24:	2b01      	cmp	r3, #1
 8105c26:	d101      	bne.n	8105c2c <HAL_RTCEx_SetTamper+0x18>
 8105c28:	2302      	movs	r3, #2
 8105c2a:	e0cc      	b.n	8105dc6 <HAL_RTCEx_SetTamper+0x1b2>
 8105c2c:	687b      	ldr	r3, [r7, #4]
 8105c2e:	2201      	movs	r2, #1
 8105c30:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	2202      	movs	r2, #2
 8105c38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	681b      	ldr	r3, [r3, #0]
 8105c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105c42:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8105c44:	683b      	ldr	r3, [r7, #0]
 8105c46:	681b      	ldr	r3, [r3, #0]
 8105c48:	68fa      	ldr	r2, [r7, #12]
 8105c4a:	4313      	orrs	r3, r2
 8105c4c:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8105c4e:	683b      	ldr	r3, [r7, #0]
 8105c50:	689b      	ldr	r3, [r3, #8]
 8105c52:	2b08      	cmp	r3, #8
 8105c54:	d003      	beq.n	8105c5e <HAL_RTCEx_SetTamper+0x4a>
 8105c56:	683b      	ldr	r3, [r7, #0]
 8105c58:	689b      	ldr	r3, [r3, #8]
 8105c5a:	2b02      	cmp	r3, #2
 8105c5c:	d106      	bne.n	8105c6c <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8105c5e:	683b      	ldr	r3, [r7, #0]
 8105c60:	681b      	ldr	r3, [r3, #0]
 8105c62:	005b      	lsls	r3, r3, #1
 8105c64:	68fa      	ldr	r2, [r7, #12]
 8105c66:	4313      	orrs	r3, r2
 8105c68:	60fb      	str	r3, [r7, #12]
 8105c6a:	e006      	b.n	8105c7a <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8105c6c:	683b      	ldr	r3, [r7, #0]
 8105c6e:	681b      	ldr	r3, [r3, #0]
 8105c70:	005b      	lsls	r3, r3, #1
 8105c72:	43db      	mvns	r3, r3
 8105c74:	68fa      	ldr	r2, [r7, #12]
 8105c76:	4013      	ands	r3, r2
 8105c78:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8105c7a:	683b      	ldr	r3, [r7, #0]
 8105c7c:	68db      	ldr	r3, [r3, #12]
 8105c7e:	2b00      	cmp	r3, #0
 8105c80:	d01e      	beq.n	8105cc0 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105c82:	683b      	ldr	r3, [r7, #0]
 8105c84:	681b      	ldr	r3, [r3, #0]
 8105c86:	f003 0301 	and.w	r3, r3, #1
 8105c8a:	2b00      	cmp	r3, #0
 8105c8c:	d003      	beq.n	8105c96 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8105c8e:	68fb      	ldr	r3, [r7, #12]
 8105c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105c94:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105c96:	683b      	ldr	r3, [r7, #0]
 8105c98:	681b      	ldr	r3, [r3, #0]
 8105c9a:	f003 0308 	and.w	r3, r3, #8
 8105c9e:	2b00      	cmp	r3, #0
 8105ca0:	d003      	beq.n	8105caa <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8105ca2:	68fb      	ldr	r3, [r7, #12]
 8105ca4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8105ca8:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105caa:	683b      	ldr	r3, [r7, #0]
 8105cac:	681b      	ldr	r3, [r3, #0]
 8105cae:	f003 0320 	and.w	r3, r3, #32
 8105cb2:	2b00      	cmp	r3, #0
 8105cb4:	d022      	beq.n	8105cfc <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8105cb6:	68fb      	ldr	r3, [r7, #12]
 8105cb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105cbc:	60fb      	str	r3, [r7, #12]
 8105cbe:	e01d      	b.n	8105cfc <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105cc0:	683b      	ldr	r3, [r7, #0]
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	f003 0301 	and.w	r3, r3, #1
 8105cc8:	2b00      	cmp	r3, #0
 8105cca:	d003      	beq.n	8105cd4 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8105ccc:	68fb      	ldr	r3, [r7, #12]
 8105cce:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8105cd2:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105cd4:	683b      	ldr	r3, [r7, #0]
 8105cd6:	681b      	ldr	r3, [r3, #0]
 8105cd8:	f003 0308 	and.w	r3, r3, #8
 8105cdc:	2b00      	cmp	r3, #0
 8105cde:	d003      	beq.n	8105ce8 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8105ce0:	68fb      	ldr	r3, [r7, #12]
 8105ce2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8105ce6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105ce8:	683b      	ldr	r3, [r7, #0]
 8105cea:	681b      	ldr	r3, [r3, #0]
 8105cec:	f003 0320 	and.w	r3, r3, #32
 8105cf0:	2b00      	cmp	r3, #0
 8105cf2:	d003      	beq.n	8105cfc <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8105cf4:	68fb      	ldr	r3, [r7, #12]
 8105cf6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8105cfa:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8105cfc:	683b      	ldr	r3, [r7, #0]
 8105cfe:	691b      	ldr	r3, [r3, #16]
 8105d00:	2b00      	cmp	r3, #0
 8105d02:	d01e      	beq.n	8105d42 <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105d04:	683b      	ldr	r3, [r7, #0]
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	f003 0301 	and.w	r3, r3, #1
 8105d0c:	2b00      	cmp	r3, #0
 8105d0e:	d003      	beq.n	8105d18 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8105d10:	68fb      	ldr	r3, [r7, #12]
 8105d12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8105d16:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105d18:	683b      	ldr	r3, [r7, #0]
 8105d1a:	681b      	ldr	r3, [r3, #0]
 8105d1c:	f003 0308 	and.w	r3, r3, #8
 8105d20:	2b00      	cmp	r3, #0
 8105d22:	d003      	beq.n	8105d2c <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8105d24:	68fb      	ldr	r3, [r7, #12]
 8105d26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105d2a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105d2c:	683b      	ldr	r3, [r7, #0]
 8105d2e:	681b      	ldr	r3, [r3, #0]
 8105d30:	f003 0320 	and.w	r3, r3, #32
 8105d34:	2b00      	cmp	r3, #0
 8105d36:	d022      	beq.n	8105d7e <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8105d38:	68fb      	ldr	r3, [r7, #12]
 8105d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105d3e:	60fb      	str	r3, [r7, #12]
 8105d40:	e01d      	b.n	8105d7e <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105d42:	683b      	ldr	r3, [r7, #0]
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	f003 0301 	and.w	r3, r3, #1
 8105d4a:	2b00      	cmp	r3, #0
 8105d4c:	d003      	beq.n	8105d56 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8105d4e:	68fb      	ldr	r3, [r7, #12]
 8105d50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8105d54:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105d56:	683b      	ldr	r3, [r7, #0]
 8105d58:	681b      	ldr	r3, [r3, #0]
 8105d5a:	f003 0308 	and.w	r3, r3, #8
 8105d5e:	2b00      	cmp	r3, #0
 8105d60:	d003      	beq.n	8105d6a <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8105d62:	68fb      	ldr	r3, [r7, #12]
 8105d64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8105d68:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105d6a:	683b      	ldr	r3, [r7, #0]
 8105d6c:	681b      	ldr	r3, [r3, #0]
 8105d6e:	f003 0320 	and.w	r3, r3, #32
 8105d72:	2b00      	cmp	r3, #0
 8105d74:	d003      	beq.n	8105d7e <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8105d76:	68fb      	ldr	r3, [r7, #12]
 8105d78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8105d7c:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8105d7e:	68fb      	ldr	r3, [r7, #12]
 8105d80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105d84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105d88:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105d8a:	683b      	ldr	r3, [r7, #0]
 8105d8c:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8105d8e:	683b      	ldr	r3, [r7, #0]
 8105d90:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105d92:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8105d94:	683b      	ldr	r3, [r7, #0]
 8105d96:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8105d98:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8105d9a:	683b      	ldr	r3, [r7, #0]
 8105d9c:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8105d9e:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8105da0:	683b      	ldr	r3, [r7, #0]
 8105da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8105da4:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105da6:	68fa      	ldr	r2, [r7, #12]
 8105da8:	4313      	orrs	r3, r2
 8105daa:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	681b      	ldr	r3, [r3, #0]
 8105db0:	68fa      	ldr	r2, [r7, #12]
 8105db2:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	2201      	movs	r2, #1
 8105db8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	2200      	movs	r2, #0
 8105dc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8105dc4:	2300      	movs	r3, #0
}
 8105dc6:	4618      	mov	r0, r3
 8105dc8:	3714      	adds	r7, #20
 8105dca:	46bd      	mov	sp, r7
 8105dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dd0:	4770      	bx	lr
	...

08105dd4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8105dd4:	b580      	push	{r7, lr}
 8105dd6:	b08a      	sub	sp, #40	@ 0x28
 8105dd8:	af00      	add	r7, sp, #0
 8105dda:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8105ddc:	687b      	ldr	r3, [r7, #4]
 8105dde:	2b00      	cmp	r3, #0
 8105de0:	d101      	bne.n	8105de6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8105de2:	2301      	movs	r3, #1
 8105de4:	e290      	b.n	8106308 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105de6:	f7fc f8bf 	bl	8101f68 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8105df0:	2b01      	cmp	r3, #1
 8105df2:	d113      	bne.n	8105e1c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105df4:	687b      	ldr	r3, [r7, #4]
 8105df6:	681b      	ldr	r3, [r3, #0]
 8105df8:	4a96      	ldr	r2, [pc, #600]	@ (8106054 <HAL_SAI_Init+0x280>)
 8105dfa:	4293      	cmp	r3, r2
 8105dfc:	d004      	beq.n	8105e08 <HAL_SAI_Init+0x34>
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	681b      	ldr	r3, [r3, #0]
 8105e02:	4a95      	ldr	r2, [pc, #596]	@ (8106058 <HAL_SAI_Init+0x284>)
 8105e04:	4293      	cmp	r3, r2
 8105e06:	d107      	bne.n	8105e18 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105e0c:	2b01      	cmp	r3, #1
 8105e0e:	d103      	bne.n	8105e18 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8105e10:	687b      	ldr	r3, [r7, #4]
 8105e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105e14:	2b00      	cmp	r3, #0
 8105e16:	d001      	beq.n	8105e1c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8105e18:	2301      	movs	r3, #1
 8105e1a:	e275      	b.n	8106308 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	681b      	ldr	r3, [r3, #0]
 8105e20:	4a8c      	ldr	r2, [pc, #560]	@ (8106054 <HAL_SAI_Init+0x280>)
 8105e22:	4293      	cmp	r3, r2
 8105e24:	d004      	beq.n	8105e30 <HAL_SAI_Init+0x5c>
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	681b      	ldr	r3, [r3, #0]
 8105e2a:	4a8c      	ldr	r2, [pc, #560]	@ (810605c <HAL_SAI_Init+0x288>)
 8105e2c:	4293      	cmp	r3, r2
 8105e2e:	d102      	bne.n	8105e36 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8105e30:	4b8b      	ldr	r3, [pc, #556]	@ (8106060 <HAL_SAI_Init+0x28c>)
 8105e32:	61bb      	str	r3, [r7, #24]
 8105e34:	e028      	b.n	8105e88 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	681b      	ldr	r3, [r3, #0]
 8105e3a:	4a8a      	ldr	r2, [pc, #552]	@ (8106064 <HAL_SAI_Init+0x290>)
 8105e3c:	4293      	cmp	r3, r2
 8105e3e:	d004      	beq.n	8105e4a <HAL_SAI_Init+0x76>
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	681b      	ldr	r3, [r3, #0]
 8105e44:	4a88      	ldr	r2, [pc, #544]	@ (8106068 <HAL_SAI_Init+0x294>)
 8105e46:	4293      	cmp	r3, r2
 8105e48:	d102      	bne.n	8105e50 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8105e4a:	4b88      	ldr	r3, [pc, #544]	@ (810606c <HAL_SAI_Init+0x298>)
 8105e4c:	61bb      	str	r3, [r7, #24]
 8105e4e:	e01b      	b.n	8105e88 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	681b      	ldr	r3, [r3, #0]
 8105e54:	4a86      	ldr	r2, [pc, #536]	@ (8106070 <HAL_SAI_Init+0x29c>)
 8105e56:	4293      	cmp	r3, r2
 8105e58:	d004      	beq.n	8105e64 <HAL_SAI_Init+0x90>
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	681b      	ldr	r3, [r3, #0]
 8105e5e:	4a85      	ldr	r2, [pc, #532]	@ (8106074 <HAL_SAI_Init+0x2a0>)
 8105e60:	4293      	cmp	r3, r2
 8105e62:	d102      	bne.n	8105e6a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8105e64:	4b84      	ldr	r3, [pc, #528]	@ (8106078 <HAL_SAI_Init+0x2a4>)
 8105e66:	61bb      	str	r3, [r7, #24]
 8105e68:	e00e      	b.n	8105e88 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8105e6a:	687b      	ldr	r3, [r7, #4]
 8105e6c:	681b      	ldr	r3, [r3, #0]
 8105e6e:	4a7a      	ldr	r2, [pc, #488]	@ (8106058 <HAL_SAI_Init+0x284>)
 8105e70:	4293      	cmp	r3, r2
 8105e72:	d004      	beq.n	8105e7e <HAL_SAI_Init+0xaa>
 8105e74:	687b      	ldr	r3, [r7, #4]
 8105e76:	681b      	ldr	r3, [r3, #0]
 8105e78:	4a80      	ldr	r2, [pc, #512]	@ (810607c <HAL_SAI_Init+0x2a8>)
 8105e7a:	4293      	cmp	r3, r2
 8105e7c:	d102      	bne.n	8105e84 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8105e7e:	4b80      	ldr	r3, [pc, #512]	@ (8106080 <HAL_SAI_Init+0x2ac>)
 8105e80:	61bb      	str	r3, [r7, #24]
 8105e82:	e001      	b.n	8105e88 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8105e84:	2301      	movs	r3, #1
 8105e86:	e23f      	b.n	8106308 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8105e88:	687b      	ldr	r3, [r7, #4]
 8105e8a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8105e8e:	b2db      	uxtb	r3, r3
 8105e90:	2b00      	cmp	r3, #0
 8105e92:	d106      	bne.n	8105ea2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8105e94:	687b      	ldr	r3, [r7, #4]
 8105e96:	2200      	movs	r2, #0
 8105e98:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8105e9c:	6878      	ldr	r0, [r7, #4]
 8105e9e:	f7fb fd9d 	bl	81019dc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8105ea2:	6878      	ldr	r0, [r7, #4]
 8105ea4:	f000 fa40 	bl	8106328 <SAI_Disable>
 8105ea8:	4603      	mov	r3, r0
 8105eaa:	2b00      	cmp	r3, #0
 8105eac:	d001      	beq.n	8105eb2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8105eae:	2301      	movs	r3, #1
 8105eb0:	e22a      	b.n	8106308 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	2202      	movs	r2, #2
 8105eb6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	68db      	ldr	r3, [r3, #12]
 8105ebe:	2b02      	cmp	r3, #2
 8105ec0:	d00c      	beq.n	8105edc <HAL_SAI_Init+0x108>
 8105ec2:	2b02      	cmp	r3, #2
 8105ec4:	d80d      	bhi.n	8105ee2 <HAL_SAI_Init+0x10e>
 8105ec6:	2b00      	cmp	r3, #0
 8105ec8:	d002      	beq.n	8105ed0 <HAL_SAI_Init+0xfc>
 8105eca:	2b01      	cmp	r3, #1
 8105ecc:	d003      	beq.n	8105ed6 <HAL_SAI_Init+0x102>
 8105ece:	e008      	b.n	8105ee2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8105ed0:	2300      	movs	r3, #0
 8105ed2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105ed4:	e008      	b.n	8105ee8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8105ed6:	2310      	movs	r3, #16
 8105ed8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105eda:	e005      	b.n	8105ee8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8105edc:	2320      	movs	r3, #32
 8105ede:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105ee0:	e002      	b.n	8105ee8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8105ee2:	2300      	movs	r3, #0
 8105ee4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105ee6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8105ee8:	687b      	ldr	r3, [r7, #4]
 8105eea:	689b      	ldr	r3, [r3, #8]
 8105eec:	2b05      	cmp	r3, #5
 8105eee:	d832      	bhi.n	8105f56 <HAL_SAI_Init+0x182>
 8105ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8105ef8 <HAL_SAI_Init+0x124>)
 8105ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105ef6:	bf00      	nop
 8105ef8:	08105f11 	.word	0x08105f11
 8105efc:	08105f17 	.word	0x08105f17
 8105f00:	08105f1f 	.word	0x08105f1f
 8105f04:	08105f27 	.word	0x08105f27
 8105f08:	08105f37 	.word	0x08105f37
 8105f0c:	08105f47 	.word	0x08105f47
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8105f10:	2300      	movs	r3, #0
 8105f12:	61fb      	str	r3, [r7, #28]
      break;
 8105f14:	e022      	b.n	8105f5c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8105f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8105f1a:	61fb      	str	r3, [r7, #28]
      break;
 8105f1c:	e01e      	b.n	8105f5c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105f22:	61fb      	str	r3, [r7, #28]
      break;
 8105f24:	e01a      	b.n	8105f5c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105f2a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8105f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f2e:	f043 0301 	orr.w	r3, r3, #1
 8105f32:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105f34:	e012      	b.n	8105f5c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105f3a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8105f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f3e:	f043 0302 	orr.w	r3, r3, #2
 8105f42:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105f44:	e00a      	b.n	8105f5c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105f4a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8105f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f4e:	f043 0303 	orr.w	r3, r3, #3
 8105f52:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105f54:	e002      	b.n	8105f5c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8105f56:	2300      	movs	r3, #0
 8105f58:	61fb      	str	r3, [r7, #28]
      break;
 8105f5a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8105f5c:	69bb      	ldr	r3, [r7, #24]
 8105f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105f60:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	6a1b      	ldr	r3, [r3, #32]
 8105f66:	2b00      	cmp	r3, #0
 8105f68:	f000 80c5 	beq.w	81060f6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8105f6c:	2300      	movs	r3, #0
 8105f6e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105f70:	687b      	ldr	r3, [r7, #4]
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	4a37      	ldr	r2, [pc, #220]	@ (8106054 <HAL_SAI_Init+0x280>)
 8105f76:	4293      	cmp	r3, r2
 8105f78:	d004      	beq.n	8105f84 <HAL_SAI_Init+0x1b0>
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	681b      	ldr	r3, [r3, #0]
 8105f7e:	4a37      	ldr	r2, [pc, #220]	@ (810605c <HAL_SAI_Init+0x288>)
 8105f80:	4293      	cmp	r3, r2
 8105f82:	d106      	bne.n	8105f92 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8105f84:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8105f88:	f04f 0100 	mov.w	r1, #0
 8105f8c:	f7fe fa36 	bl	81043fc <HAL_RCCEx_GetPeriphCLKFreq>
 8105f90:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	681b      	ldr	r3, [r3, #0]
 8105f96:	4a33      	ldr	r2, [pc, #204]	@ (8106064 <HAL_SAI_Init+0x290>)
 8105f98:	4293      	cmp	r3, r2
 8105f9a:	d004      	beq.n	8105fa6 <HAL_SAI_Init+0x1d2>
 8105f9c:	687b      	ldr	r3, [r7, #4]
 8105f9e:	681b      	ldr	r3, [r3, #0]
 8105fa0:	4a31      	ldr	r2, [pc, #196]	@ (8106068 <HAL_SAI_Init+0x294>)
 8105fa2:	4293      	cmp	r3, r2
 8105fa4:	d106      	bne.n	8105fb4 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8105fa6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8105faa:	f04f 0100 	mov.w	r1, #0
 8105fae:	f7fe fa25 	bl	81043fc <HAL_RCCEx_GetPeriphCLKFreq>
 8105fb2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8106070 <HAL_SAI_Init+0x29c>)
 8105fba:	4293      	cmp	r3, r2
 8105fbc:	d004      	beq.n	8105fc8 <HAL_SAI_Init+0x1f4>
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	681b      	ldr	r3, [r3, #0]
 8105fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8106074 <HAL_SAI_Init+0x2a0>)
 8105fc4:	4293      	cmp	r3, r2
 8105fc6:	d106      	bne.n	8105fd6 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8105fc8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8105fcc:	f04f 0100 	mov.w	r1, #0
 8105fd0:	f7fe fa14 	bl	81043fc <HAL_RCCEx_GetPeriphCLKFreq>
 8105fd4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	681b      	ldr	r3, [r3, #0]
 8105fda:	4a1f      	ldr	r2, [pc, #124]	@ (8106058 <HAL_SAI_Init+0x284>)
 8105fdc:	4293      	cmp	r3, r2
 8105fde:	d106      	bne.n	8105fee <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8105fe0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8105fe4:	f04f 0100 	mov.w	r1, #0
 8105fe8:	f7fe fa08 	bl	81043fc <HAL_RCCEx_GetPeriphCLKFreq>
 8105fec:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8105fee:	687b      	ldr	r3, [r7, #4]
 8105ff0:	681b      	ldr	r3, [r3, #0]
 8105ff2:	4a22      	ldr	r2, [pc, #136]	@ (810607c <HAL_SAI_Init+0x2a8>)
 8105ff4:	4293      	cmp	r3, r2
 8105ff6:	d106      	bne.n	8106006 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8105ff8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8105ffc:	f04f 0100 	mov.w	r1, #0
 8106000:	f7fe f9fc 	bl	81043fc <HAL_RCCEx_GetPeriphCLKFreq>
 8106004:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8106006:	687b      	ldr	r3, [r7, #4]
 8106008:	699b      	ldr	r3, [r3, #24]
 810600a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 810600e:	d139      	bne.n	8106084 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8106010:	687b      	ldr	r3, [r7, #4]
 8106012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106014:	2b04      	cmp	r3, #4
 8106016:	d102      	bne.n	810601e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8106018:	2340      	movs	r3, #64	@ 0x40
 810601a:	60fb      	str	r3, [r7, #12]
 810601c:	e00a      	b.n	8106034 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106022:	2b08      	cmp	r3, #8
 8106024:	d103      	bne.n	810602e <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8106026:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810602a:	60fb      	str	r3, [r7, #12]
 810602c:	e002      	b.n	8106034 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106032:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8106034:	697a      	ldr	r2, [r7, #20]
 8106036:	4613      	mov	r3, r2
 8106038:	009b      	lsls	r3, r3, #2
 810603a:	4413      	add	r3, r2
 810603c:	005b      	lsls	r3, r3, #1
 810603e:	4619      	mov	r1, r3
 8106040:	687b      	ldr	r3, [r7, #4]
 8106042:	6a1b      	ldr	r3, [r3, #32]
 8106044:	68fa      	ldr	r2, [r7, #12]
 8106046:	fb02 f303 	mul.w	r3, r2, r3
 810604a:	fbb1 f3f3 	udiv	r3, r1, r3
 810604e:	613b      	str	r3, [r7, #16]
 8106050:	e030      	b.n	81060b4 <HAL_SAI_Init+0x2e0>
 8106052:	bf00      	nop
 8106054:	40015804 	.word	0x40015804
 8106058:	58005404 	.word	0x58005404
 810605c:	40015824 	.word	0x40015824
 8106060:	40015800 	.word	0x40015800
 8106064:	40015c04 	.word	0x40015c04
 8106068:	40015c24 	.word	0x40015c24
 810606c:	40015c00 	.word	0x40015c00
 8106070:	40016004 	.word	0x40016004
 8106074:	40016024 	.word	0x40016024
 8106078:	40016000 	.word	0x40016000
 810607c:	58005424 	.word	0x58005424
 8106080:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8106084:	687b      	ldr	r3, [r7, #4]
 8106086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106088:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810608c:	d101      	bne.n	8106092 <HAL_SAI_Init+0x2be>
 810608e:	2302      	movs	r3, #2
 8106090:	e000      	b.n	8106094 <HAL_SAI_Init+0x2c0>
 8106092:	2301      	movs	r3, #1
 8106094:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8106096:	697a      	ldr	r2, [r7, #20]
 8106098:	4613      	mov	r3, r2
 810609a:	009b      	lsls	r3, r3, #2
 810609c:	4413      	add	r3, r2
 810609e:	005b      	lsls	r3, r3, #1
 81060a0:	4619      	mov	r1, r3
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	6a1b      	ldr	r3, [r3, #32]
 81060a6:	68ba      	ldr	r2, [r7, #8]
 81060a8:	fb02 f303 	mul.w	r3, r2, r3
 81060ac:	021b      	lsls	r3, r3, #8
 81060ae:	fbb1 f3f3 	udiv	r3, r1, r3
 81060b2:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 81060b4:	693b      	ldr	r3, [r7, #16]
 81060b6:	4a96      	ldr	r2, [pc, #600]	@ (8106310 <HAL_SAI_Init+0x53c>)
 81060b8:	fba2 2303 	umull	r2, r3, r2, r3
 81060bc:	08da      	lsrs	r2, r3, #3
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 81060c2:	6939      	ldr	r1, [r7, #16]
 81060c4:	4b92      	ldr	r3, [pc, #584]	@ (8106310 <HAL_SAI_Init+0x53c>)
 81060c6:	fba3 2301 	umull	r2, r3, r3, r1
 81060ca:	08da      	lsrs	r2, r3, #3
 81060cc:	4613      	mov	r3, r2
 81060ce:	009b      	lsls	r3, r3, #2
 81060d0:	4413      	add	r3, r2
 81060d2:	005b      	lsls	r3, r3, #1
 81060d4:	1aca      	subs	r2, r1, r3
 81060d6:	2a08      	cmp	r2, #8
 81060d8:	d904      	bls.n	81060e4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81060de:	1c5a      	adds	r2, r3, #1
 81060e0:	687b      	ldr	r3, [r7, #4]
 81060e2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81060e8:	2b04      	cmp	r3, #4
 81060ea:	d104      	bne.n	81060f6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81060f0:	085a      	lsrs	r2, r3, #1
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	685b      	ldr	r3, [r3, #4]
 81060fa:	2b00      	cmp	r3, #0
 81060fc:	d003      	beq.n	8106106 <HAL_SAI_Init+0x332>
 81060fe:	687b      	ldr	r3, [r7, #4]
 8106100:	685b      	ldr	r3, [r3, #4]
 8106102:	2b02      	cmp	r3, #2
 8106104:	d109      	bne.n	810611a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810610a:	2b01      	cmp	r3, #1
 810610c:	d101      	bne.n	8106112 <HAL_SAI_Init+0x33e>
 810610e:	2300      	movs	r3, #0
 8106110:	e001      	b.n	8106116 <HAL_SAI_Init+0x342>
 8106112:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8106116:	623b      	str	r3, [r7, #32]
 8106118:	e008      	b.n	810612c <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810611e:	2b01      	cmp	r3, #1
 8106120:	d102      	bne.n	8106128 <HAL_SAI_Init+0x354>
 8106122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8106126:	e000      	b.n	810612a <HAL_SAI_Init+0x356>
 8106128:	2300      	movs	r3, #0
 810612a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810612c:	f7fb ff1c 	bl	8101f68 <HAL_GetREVID>
 8106130:	4603      	mov	r3, r0
 8106132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106136:	d331      	bcc.n	810619c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	681b      	ldr	r3, [r3, #0]
 810613c:	6819      	ldr	r1, [r3, #0]
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	681a      	ldr	r2, [r3, #0]
 8106142:	4b74      	ldr	r3, [pc, #464]	@ (8106314 <HAL_SAI_Init+0x540>)
 8106144:	400b      	ands	r3, r1
 8106146:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106148:	687b      	ldr	r3, [r7, #4]
 810614a:	681b      	ldr	r3, [r3, #0]
 810614c:	6819      	ldr	r1, [r3, #0]
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	685a      	ldr	r2, [r3, #4]
 8106152:	687b      	ldr	r3, [r7, #4]
 8106154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106156:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106158:	687b      	ldr	r3, [r7, #4]
 810615a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810615c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106162:	431a      	orrs	r2, r3
 8106164:	6a3b      	ldr	r3, [r7, #32]
 8106166:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106168:	69fb      	ldr	r3, [r7, #28]
 810616a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106170:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106172:	687b      	ldr	r3, [r7, #4]
 8106174:	695b      	ldr	r3, [r3, #20]
 8106176:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106178:	687b      	ldr	r3, [r7, #4]
 810617a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810617c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106182:	051b      	lsls	r3, r3, #20
 8106184:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810618a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	691b      	ldr	r3, [r3, #16]
 8106190:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	681b      	ldr	r3, [r3, #0]
 8106196:	430a      	orrs	r2, r1
 8106198:	601a      	str	r2, [r3, #0]
 810619a:	e02d      	b.n	81061f8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	6819      	ldr	r1, [r3, #0]
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	681a      	ldr	r2, [r3, #0]
 81061a6:	4b5c      	ldr	r3, [pc, #368]	@ (8106318 <HAL_SAI_Init+0x544>)
 81061a8:	400b      	ands	r3, r1
 81061aa:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	681b      	ldr	r3, [r3, #0]
 81061b0:	6819      	ldr	r1, [r3, #0]
 81061b2:	687b      	ldr	r3, [r7, #4]
 81061b4:	685a      	ldr	r2, [r3, #4]
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81061ba:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81061bc:	687b      	ldr	r3, [r7, #4]
 81061be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81061c0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81061c2:	687b      	ldr	r3, [r7, #4]
 81061c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81061c6:	431a      	orrs	r2, r3
 81061c8:	6a3b      	ldr	r3, [r7, #32]
 81061ca:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81061cc:	69fb      	ldr	r3, [r7, #28]
 81061ce:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81061d0:	687b      	ldr	r3, [r7, #4]
 81061d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 81061d4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81061d6:	687b      	ldr	r3, [r7, #4]
 81061d8:	695b      	ldr	r3, [r3, #20]
 81061da:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81061dc:	687b      	ldr	r3, [r7, #4]
 81061de:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81061e0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81061e6:	051b      	lsls	r3, r3, #20
 81061e8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81061ea:	687b      	ldr	r3, [r7, #4]
 81061ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81061ee:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81061f0:	687b      	ldr	r3, [r7, #4]
 81061f2:	681b      	ldr	r3, [r3, #0]
 81061f4:	430a      	orrs	r2, r1
 81061f6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81061f8:	687b      	ldr	r3, [r7, #4]
 81061fa:	681b      	ldr	r3, [r3, #0]
 81061fc:	685b      	ldr	r3, [r3, #4]
 81061fe:	687a      	ldr	r2, [r7, #4]
 8106200:	6812      	ldr	r2, [r2, #0]
 8106202:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8106206:	f023 030f 	bic.w	r3, r3, #15
 810620a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	681b      	ldr	r3, [r3, #0]
 8106210:	6859      	ldr	r1, [r3, #4]
 8106212:	687b      	ldr	r3, [r7, #4]
 8106214:	69da      	ldr	r2, [r3, #28]
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810621a:	431a      	orrs	r2, r3
 810621c:	687b      	ldr	r3, [r7, #4]
 810621e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106220:	431a      	orrs	r2, r3
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	681b      	ldr	r3, [r3, #0]
 8106226:	430a      	orrs	r2, r1
 8106228:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 810622a:	687b      	ldr	r3, [r7, #4]
 810622c:	681b      	ldr	r3, [r3, #0]
 810622e:	6899      	ldr	r1, [r3, #8]
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	681a      	ldr	r2, [r3, #0]
 8106234:	4b39      	ldr	r3, [pc, #228]	@ (810631c <HAL_SAI_Init+0x548>)
 8106236:	400b      	ands	r3, r1
 8106238:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810623a:	687b      	ldr	r3, [r7, #4]
 810623c:	681b      	ldr	r3, [r3, #0]
 810623e:	6899      	ldr	r1, [r3, #8]
 8106240:	687b      	ldr	r3, [r7, #4]
 8106242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106244:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810624a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 810624c:	687b      	ldr	r3, [r7, #4]
 810624e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8106250:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8106252:	687b      	ldr	r3, [r7, #4]
 8106254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8106256:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810625c:	3b01      	subs	r3, #1
 810625e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8106260:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106262:	687b      	ldr	r3, [r7, #4]
 8106264:	681b      	ldr	r3, [r3, #0]
 8106266:	430a      	orrs	r2, r1
 8106268:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 810626a:	687b      	ldr	r3, [r7, #4]
 810626c:	681b      	ldr	r3, [r3, #0]
 810626e:	68d9      	ldr	r1, [r3, #12]
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	681a      	ldr	r2, [r3, #0]
 8106274:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8106278:	400b      	ands	r3, r1
 810627a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	681b      	ldr	r3, [r3, #0]
 8106280:	68d9      	ldr	r1, [r3, #12]
 8106282:	687b      	ldr	r3, [r7, #4]
 8106284:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8106286:	687b      	ldr	r3, [r7, #4]
 8106288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810628a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106290:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106292:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106294:	687b      	ldr	r3, [r7, #4]
 8106296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106298:	3b01      	subs	r3, #1
 810629a:	021b      	lsls	r3, r3, #8
 810629c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810629e:	687b      	ldr	r3, [r7, #4]
 81062a0:	681b      	ldr	r3, [r3, #0]
 81062a2:	430a      	orrs	r2, r1
 81062a4:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 81062a6:	687b      	ldr	r3, [r7, #4]
 81062a8:	681b      	ldr	r3, [r3, #0]
 81062aa:	4a1d      	ldr	r2, [pc, #116]	@ (8106320 <HAL_SAI_Init+0x54c>)
 81062ac:	4293      	cmp	r3, r2
 81062ae:	d004      	beq.n	81062ba <HAL_SAI_Init+0x4e6>
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	681b      	ldr	r3, [r3, #0]
 81062b4:	4a1b      	ldr	r2, [pc, #108]	@ (8106324 <HAL_SAI_Init+0x550>)
 81062b6:	4293      	cmp	r3, r2
 81062b8:	d119      	bne.n	81062ee <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 81062ba:	69bb      	ldr	r3, [r7, #24]
 81062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81062be:	f023 0201 	bic.w	r2, r3, #1
 81062c2:	69bb      	ldr	r3, [r7, #24]
 81062c4:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 81062c6:	687b      	ldr	r3, [r7, #4]
 81062c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81062cc:	2b01      	cmp	r3, #1
 81062ce:	d10e      	bne.n	81062ee <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81062d0:	687b      	ldr	r3, [r7, #4]
 81062d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81062d4:	687b      	ldr	r3, [r7, #4]
 81062d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81062d8:	3b01      	subs	r3, #1
 81062da:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81062dc:	431a      	orrs	r2, r3
 81062de:	69bb      	ldr	r3, [r7, #24]
 81062e0:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81062e2:	69bb      	ldr	r3, [r7, #24]
 81062e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81062e6:	f043 0201 	orr.w	r2, r3, #1
 81062ea:	69bb      	ldr	r3, [r7, #24]
 81062ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81062ee:	687b      	ldr	r3, [r7, #4]
 81062f0:	2200      	movs	r2, #0
 81062f2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81062f6:	687b      	ldr	r3, [r7, #4]
 81062f8:	2201      	movs	r2, #1
 81062fa:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	2200      	movs	r2, #0
 8106302:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8106306:	2300      	movs	r3, #0
}
 8106308:	4618      	mov	r0, r3
 810630a:	3728      	adds	r7, #40	@ 0x28
 810630c:	46bd      	mov	sp, r7
 810630e:	bd80      	pop	{r7, pc}
 8106310:	cccccccd 	.word	0xcccccccd
 8106314:	f005c010 	.word	0xf005c010
 8106318:	f805c010 	.word	0xf805c010
 810631c:	fff88000 	.word	0xfff88000
 8106320:	40015804 	.word	0x40015804
 8106324:	58005404 	.word	0x58005404

08106328 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8106328:	b480      	push	{r7}
 810632a:	b085      	sub	sp, #20
 810632c:	af00      	add	r7, sp, #0
 810632e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8106330:	4b18      	ldr	r3, [pc, #96]	@ (8106394 <SAI_Disable+0x6c>)
 8106332:	681b      	ldr	r3, [r3, #0]
 8106334:	4a18      	ldr	r2, [pc, #96]	@ (8106398 <SAI_Disable+0x70>)
 8106336:	fba2 2303 	umull	r2, r3, r2, r3
 810633a:	0b1b      	lsrs	r3, r3, #12
 810633c:	009b      	lsls	r3, r3, #2
 810633e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8106340:	2300      	movs	r3, #0
 8106342:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	681a      	ldr	r2, [r3, #0]
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	681b      	ldr	r3, [r3, #0]
 810634e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8106352:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8106354:	68fb      	ldr	r3, [r7, #12]
 8106356:	2b00      	cmp	r3, #0
 8106358:	d10a      	bne.n	8106370 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 810635a:	687b      	ldr	r3, [r7, #4]
 810635c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106360:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 810636a:	2303      	movs	r3, #3
 810636c:	72fb      	strb	r3, [r7, #11]
      break;
 810636e:	e009      	b.n	8106384 <SAI_Disable+0x5c>
    }
    count--;
 8106370:	68fb      	ldr	r3, [r7, #12]
 8106372:	3b01      	subs	r3, #1
 8106374:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	681b      	ldr	r3, [r3, #0]
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106380:	2b00      	cmp	r3, #0
 8106382:	d1e7      	bne.n	8106354 <SAI_Disable+0x2c>

  return status;
 8106384:	7afb      	ldrb	r3, [r7, #11]
}
 8106386:	4618      	mov	r0, r3
 8106388:	3714      	adds	r7, #20
 810638a:	46bd      	mov	sp, r7
 810638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106390:	4770      	bx	lr
 8106392:	bf00      	nop
 8106394:	10000000 	.word	0x10000000
 8106398:	95cbec1b 	.word	0x95cbec1b

0810639c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 810639c:	b580      	push	{r7, lr}
 810639e:	b084      	sub	sp, #16
 81063a0:	af00      	add	r7, sp, #0
 81063a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	2b00      	cmp	r3, #0
 81063a8:	d101      	bne.n	81063ae <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 81063aa:	2301      	movs	r3, #1
 81063ac:	e05e      	b.n	810646c <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 81063b4:	b2db      	uxtb	r3, r3
 81063b6:	2b00      	cmp	r3, #0
 81063b8:	d106      	bne.n	81063c8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 81063ba:	687b      	ldr	r3, [r7, #4]
 81063bc:	2200      	movs	r2, #0
 81063be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 81063c2:	6878      	ldr	r0, [r7, #4]
 81063c4:	f7fb f8f6 	bl	81015b4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	2202      	movs	r2, #2
 81063cc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	681b      	ldr	r3, [r3, #0]
 81063d4:	681a      	ldr	r2, [r3, #0]
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	681b      	ldr	r3, [r3, #0]
 81063da:	f022 0203 	bic.w	r2, r2, #3
 81063de:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	681b      	ldr	r3, [r3, #0]
 81063e4:	681b      	ldr	r3, [r3, #0]
 81063e6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 81063e8:	68fa      	ldr	r2, [r7, #12]
 81063ea:	4b22      	ldr	r3, [pc, #136]	@ (8106474 <HAL_SPDIFRX_Init+0xd8>)
 81063ec:	4013      	ands	r3, r2
 81063ee:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 81063f0:	687b      	ldr	r3, [r7, #4]
 81063f2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 81063f8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 81063fe:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8106404:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 810640a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8106410:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8106412:	687b      	ldr	r3, [r7, #4]
 8106414:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8106416:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 810641c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8106422:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8106424:	687b      	ldr	r3, [r7, #4]
 8106426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8106428:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 810642a:	68fa      	ldr	r2, [r7, #12]
 810642c:	4313      	orrs	r3, r2
 810642e:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8106436:	2b01      	cmp	r3, #1
 8106438:	d103      	bne.n	8106442 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 810643a:	68fb      	ldr	r3, [r7, #12]
 810643c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106440:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8106448:	2b01      	cmp	r3, #1
 810644a:	d103      	bne.n	8106454 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 810644c:	68fb      	ldr	r3, [r7, #12]
 810644e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8106452:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8106454:	687b      	ldr	r3, [r7, #4]
 8106456:	681b      	ldr	r3, [r3, #0]
 8106458:	68fa      	ldr	r2, [r7, #12]
 810645a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	2200      	movs	r2, #0
 8106460:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8106462:	687b      	ldr	r3, [r7, #4]
 8106464:	2201      	movs	r2, #1
 8106466:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 810646a:	2300      	movs	r3, #0
}
 810646c:	4618      	mov	r0, r3
 810646e:	3710      	adds	r7, #16
 8106470:	46bd      	mov	sp, r7
 8106472:	bd80      	pop	{r7, pc}
 8106474:	ffc88407 	.word	0xffc88407

08106478 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8106478:	b580      	push	{r7, lr}
 810647a:	b084      	sub	sp, #16
 810647c:	af00      	add	r7, sp, #0
 810647e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	2b00      	cmp	r3, #0
 8106484:	d101      	bne.n	810648a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8106486:	2301      	movs	r3, #1
 8106488:	e10f      	b.n	81066aa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	2200      	movs	r2, #0
 810648e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	681b      	ldr	r3, [r3, #0]
 8106494:	4a87      	ldr	r2, [pc, #540]	@ (81066b4 <HAL_SPI_Init+0x23c>)
 8106496:	4293      	cmp	r3, r2
 8106498:	d00f      	beq.n	81064ba <HAL_SPI_Init+0x42>
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	4a86      	ldr	r2, [pc, #536]	@ (81066b8 <HAL_SPI_Init+0x240>)
 81064a0:	4293      	cmp	r3, r2
 81064a2:	d00a      	beq.n	81064ba <HAL_SPI_Init+0x42>
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	681b      	ldr	r3, [r3, #0]
 81064a8:	4a84      	ldr	r2, [pc, #528]	@ (81066bc <HAL_SPI_Init+0x244>)
 81064aa:	4293      	cmp	r3, r2
 81064ac:	d005      	beq.n	81064ba <HAL_SPI_Init+0x42>
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	68db      	ldr	r3, [r3, #12]
 81064b2:	2b0f      	cmp	r3, #15
 81064b4:	d901      	bls.n	81064ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81064b6:	2301      	movs	r3, #1
 81064b8:	e0f7      	b.n	81066aa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81064ba:	6878      	ldr	r0, [r7, #4]
 81064bc:	f000 f900 	bl	81066c0 <SPI_GetPacketSize>
 81064c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	681b      	ldr	r3, [r3, #0]
 81064c6:	4a7b      	ldr	r2, [pc, #492]	@ (81066b4 <HAL_SPI_Init+0x23c>)
 81064c8:	4293      	cmp	r3, r2
 81064ca:	d00c      	beq.n	81064e6 <HAL_SPI_Init+0x6e>
 81064cc:	687b      	ldr	r3, [r7, #4]
 81064ce:	681b      	ldr	r3, [r3, #0]
 81064d0:	4a79      	ldr	r2, [pc, #484]	@ (81066b8 <HAL_SPI_Init+0x240>)
 81064d2:	4293      	cmp	r3, r2
 81064d4:	d007      	beq.n	81064e6 <HAL_SPI_Init+0x6e>
 81064d6:	687b      	ldr	r3, [r7, #4]
 81064d8:	681b      	ldr	r3, [r3, #0]
 81064da:	4a78      	ldr	r2, [pc, #480]	@ (81066bc <HAL_SPI_Init+0x244>)
 81064dc:	4293      	cmp	r3, r2
 81064de:	d002      	beq.n	81064e6 <HAL_SPI_Init+0x6e>
 81064e0:	68fb      	ldr	r3, [r7, #12]
 81064e2:	2b08      	cmp	r3, #8
 81064e4:	d811      	bhi.n	810650a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81064ea:	4a72      	ldr	r2, [pc, #456]	@ (81066b4 <HAL_SPI_Init+0x23c>)
 81064ec:	4293      	cmp	r3, r2
 81064ee:	d009      	beq.n	8106504 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	681b      	ldr	r3, [r3, #0]
 81064f4:	4a70      	ldr	r2, [pc, #448]	@ (81066b8 <HAL_SPI_Init+0x240>)
 81064f6:	4293      	cmp	r3, r2
 81064f8:	d004      	beq.n	8106504 <HAL_SPI_Init+0x8c>
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	4a6f      	ldr	r2, [pc, #444]	@ (81066bc <HAL_SPI_Init+0x244>)
 8106500:	4293      	cmp	r3, r2
 8106502:	d104      	bne.n	810650e <HAL_SPI_Init+0x96>
 8106504:	68fb      	ldr	r3, [r7, #12]
 8106506:	2b10      	cmp	r3, #16
 8106508:	d901      	bls.n	810650e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810650a:	2301      	movs	r3, #1
 810650c:	e0cd      	b.n	81066aa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810650e:	687b      	ldr	r3, [r7, #4]
 8106510:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8106514:	b2db      	uxtb	r3, r3
 8106516:	2b00      	cmp	r3, #0
 8106518:	d106      	bne.n	8106528 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	2200      	movs	r2, #0
 810651e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8106522:	6878      	ldr	r0, [r7, #4]
 8106524:	f7fb f8ac 	bl	8101680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	2202      	movs	r2, #2
 810652c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	681a      	ldr	r2, [r3, #0]
 8106536:	687b      	ldr	r3, [r7, #4]
 8106538:	681b      	ldr	r3, [r3, #0]
 810653a:	f022 0201 	bic.w	r2, r2, #1
 810653e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	681b      	ldr	r3, [r3, #0]
 8106544:	689b      	ldr	r3, [r3, #8]
 8106546:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810654a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	699b      	ldr	r3, [r3, #24]
 8106550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106554:	d119      	bne.n	810658a <HAL_SPI_Init+0x112>
 8106556:	687b      	ldr	r3, [r7, #4]
 8106558:	685b      	ldr	r3, [r3, #4]
 810655a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810655e:	d103      	bne.n	8106568 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106560:	687b      	ldr	r3, [r7, #4]
 8106562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106564:	2b00      	cmp	r3, #0
 8106566:	d008      	beq.n	810657a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810656c:	2b00      	cmp	r3, #0
 810656e:	d10c      	bne.n	810658a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106574:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106578:	d107      	bne.n	810658a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	681b      	ldr	r3, [r3, #0]
 810657e:	681a      	ldr	r2, [r3, #0]
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8106588:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	685b      	ldr	r3, [r3, #4]
 810658e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8106592:	2b00      	cmp	r3, #0
 8106594:	d00f      	beq.n	81065b6 <HAL_SPI_Init+0x13e>
 8106596:	687b      	ldr	r3, [r7, #4]
 8106598:	68db      	ldr	r3, [r3, #12]
 810659a:	2b06      	cmp	r3, #6
 810659c:	d90b      	bls.n	81065b6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	681b      	ldr	r3, [r3, #0]
 81065a2:	681b      	ldr	r3, [r3, #0]
 81065a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81065ac:	687b      	ldr	r3, [r7, #4]
 81065ae:	681b      	ldr	r3, [r3, #0]
 81065b0:	430a      	orrs	r2, r1
 81065b2:	601a      	str	r2, [r3, #0]
 81065b4:	e007      	b.n	81065c6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	681b      	ldr	r3, [r3, #0]
 81065ba:	681a      	ldr	r2, [r3, #0]
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	681b      	ldr	r3, [r3, #0]
 81065c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81065c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81065c6:	687b      	ldr	r3, [r7, #4]
 81065c8:	69da      	ldr	r2, [r3, #28]
 81065ca:	687b      	ldr	r3, [r7, #4]
 81065cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81065ce:	431a      	orrs	r2, r3
 81065d0:	68bb      	ldr	r3, [r7, #8]
 81065d2:	431a      	orrs	r2, r3
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81065d8:	ea42 0103 	orr.w	r1, r2, r3
 81065dc:	687b      	ldr	r3, [r7, #4]
 81065de:	68da      	ldr	r2, [r3, #12]
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	681b      	ldr	r3, [r3, #0]
 81065e4:	430a      	orrs	r2, r1
 81065e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 81065e8:	687b      	ldr	r3, [r7, #4]
 81065ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81065f0:	431a      	orrs	r2, r3
 81065f2:	687b      	ldr	r3, [r7, #4]
 81065f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81065f6:	431a      	orrs	r2, r3
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	699b      	ldr	r3, [r3, #24]
 81065fc:	431a      	orrs	r2, r3
 81065fe:	687b      	ldr	r3, [r7, #4]
 8106600:	691b      	ldr	r3, [r3, #16]
 8106602:	431a      	orrs	r2, r3
 8106604:	687b      	ldr	r3, [r7, #4]
 8106606:	695b      	ldr	r3, [r3, #20]
 8106608:	431a      	orrs	r2, r3
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	6a1b      	ldr	r3, [r3, #32]
 810660e:	431a      	orrs	r2, r3
 8106610:	687b      	ldr	r3, [r7, #4]
 8106612:	685b      	ldr	r3, [r3, #4]
 8106614:	431a      	orrs	r2, r3
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810661a:	431a      	orrs	r2, r3
 810661c:	687b      	ldr	r3, [r7, #4]
 810661e:	689b      	ldr	r3, [r3, #8]
 8106620:	431a      	orrs	r2, r3
 8106622:	687b      	ldr	r3, [r7, #4]
 8106624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106626:	ea42 0103 	orr.w	r1, r2, r3
 810662a:	687b      	ldr	r3, [r7, #4]
 810662c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	681b      	ldr	r3, [r3, #0]
 8106632:	430a      	orrs	r2, r1
 8106634:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8106636:	687b      	ldr	r3, [r7, #4]
 8106638:	685b      	ldr	r3, [r3, #4]
 810663a:	2b00      	cmp	r3, #0
 810663c:	d113      	bne.n	8106666 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810663e:	687b      	ldr	r3, [r7, #4]
 8106640:	681b      	ldr	r3, [r3, #0]
 8106642:	689b      	ldr	r3, [r3, #8]
 8106644:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	681b      	ldr	r3, [r3, #0]
 810664c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8106650:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	681b      	ldr	r3, [r3, #0]
 8106656:	689b      	ldr	r3, [r3, #8]
 8106658:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810665c:	687b      	ldr	r3, [r7, #4]
 810665e:	681b      	ldr	r3, [r3, #0]
 8106660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8106664:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8106666:	687b      	ldr	r3, [r7, #4]
 8106668:	681b      	ldr	r3, [r3, #0]
 810666a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	f022 0201 	bic.w	r2, r2, #1
 8106674:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	685b      	ldr	r3, [r3, #4]
 810667a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810667e:	2b00      	cmp	r3, #0
 8106680:	d00a      	beq.n	8106698 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	681b      	ldr	r3, [r3, #0]
 8106686:	68db      	ldr	r3, [r3, #12]
 8106688:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	681b      	ldr	r3, [r3, #0]
 8106694:	430a      	orrs	r2, r1
 8106696:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	2200      	movs	r2, #0
 810669c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	2201      	movs	r2, #1
 81066a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 81066a8:	2300      	movs	r3, #0
}
 81066aa:	4618      	mov	r0, r3
 81066ac:	3710      	adds	r7, #16
 81066ae:	46bd      	mov	sp, r7
 81066b0:	bd80      	pop	{r7, pc}
 81066b2:	bf00      	nop
 81066b4:	40013000 	.word	0x40013000
 81066b8:	40003800 	.word	0x40003800
 81066bc:	40003c00 	.word	0x40003c00

081066c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 81066c0:	b480      	push	{r7}
 81066c2:	b085      	sub	sp, #20
 81066c4:	af00      	add	r7, sp, #0
 81066c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81066cc:	095b      	lsrs	r3, r3, #5
 81066ce:	3301      	adds	r3, #1
 81066d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81066d2:	687b      	ldr	r3, [r7, #4]
 81066d4:	68db      	ldr	r3, [r3, #12]
 81066d6:	3301      	adds	r3, #1
 81066d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81066da:	68bb      	ldr	r3, [r7, #8]
 81066dc:	3307      	adds	r3, #7
 81066de:	08db      	lsrs	r3, r3, #3
 81066e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81066e2:	68bb      	ldr	r3, [r7, #8]
 81066e4:	68fa      	ldr	r2, [r7, #12]
 81066e6:	fb02 f303 	mul.w	r3, r2, r3
}
 81066ea:	4618      	mov	r0, r3
 81066ec:	3714      	adds	r7, #20
 81066ee:	46bd      	mov	sp, r7
 81066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066f4:	4770      	bx	lr

081066f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81066f6:	b580      	push	{r7, lr}
 81066f8:	b082      	sub	sp, #8
 81066fa:	af00      	add	r7, sp, #0
 81066fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	2b00      	cmp	r3, #0
 8106702:	d101      	bne.n	8106708 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106704:	2301      	movs	r3, #1
 8106706:	e049      	b.n	810679c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810670e:	b2db      	uxtb	r3, r3
 8106710:	2b00      	cmp	r3, #0
 8106712:	d106      	bne.n	8106722 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106714:	687b      	ldr	r3, [r7, #4]
 8106716:	2200      	movs	r2, #0
 8106718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810671c:	6878      	ldr	r0, [r7, #4]
 810671e:	f000 f841 	bl	81067a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106722:	687b      	ldr	r3, [r7, #4]
 8106724:	2202      	movs	r2, #2
 8106726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	681a      	ldr	r2, [r3, #0]
 810672e:	687b      	ldr	r3, [r7, #4]
 8106730:	3304      	adds	r3, #4
 8106732:	4619      	mov	r1, r3
 8106734:	4610      	mov	r0, r2
 8106736:	f000 f9e7 	bl	8106b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810673a:	687b      	ldr	r3, [r7, #4]
 810673c:	2201      	movs	r2, #1
 810673e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	2201      	movs	r2, #1
 8106746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	2201      	movs	r2, #1
 810674e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106752:	687b      	ldr	r3, [r7, #4]
 8106754:	2201      	movs	r2, #1
 8106756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810675a:	687b      	ldr	r3, [r7, #4]
 810675c:	2201      	movs	r2, #1
 810675e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	2201      	movs	r2, #1
 8106766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	2201      	movs	r2, #1
 810676e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106772:	687b      	ldr	r3, [r7, #4]
 8106774:	2201      	movs	r2, #1
 8106776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810677a:	687b      	ldr	r3, [r7, #4]
 810677c:	2201      	movs	r2, #1
 810677e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	2201      	movs	r2, #1
 8106786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	2201      	movs	r2, #1
 810678e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	2201      	movs	r2, #1
 8106796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810679a:	2300      	movs	r3, #0
}
 810679c:	4618      	mov	r0, r3
 810679e:	3708      	adds	r7, #8
 81067a0:	46bd      	mov	sp, r7
 81067a2:	bd80      	pop	{r7, pc}

081067a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81067a4:	b480      	push	{r7}
 81067a6:	b083      	sub	sp, #12
 81067a8:	af00      	add	r7, sp, #0
 81067aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81067ac:	bf00      	nop
 81067ae:	370c      	adds	r7, #12
 81067b0:	46bd      	mov	sp, r7
 81067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b6:	4770      	bx	lr

081067b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81067b8:	b480      	push	{r7}
 81067ba:	b085      	sub	sp, #20
 81067bc:	af00      	add	r7, sp, #0
 81067be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81067c6:	b2db      	uxtb	r3, r3
 81067c8:	2b01      	cmp	r3, #1
 81067ca:	d001      	beq.n	81067d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81067cc:	2301      	movs	r3, #1
 81067ce:	e054      	b.n	810687a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	2202      	movs	r2, #2
 81067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	681b      	ldr	r3, [r3, #0]
 81067dc:	68da      	ldr	r2, [r3, #12]
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	681b      	ldr	r3, [r3, #0]
 81067e2:	f042 0201 	orr.w	r2, r2, #1
 81067e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81067e8:	687b      	ldr	r3, [r7, #4]
 81067ea:	681b      	ldr	r3, [r3, #0]
 81067ec:	4a26      	ldr	r2, [pc, #152]	@ (8106888 <HAL_TIM_Base_Start_IT+0xd0>)
 81067ee:	4293      	cmp	r3, r2
 81067f0:	d022      	beq.n	8106838 <HAL_TIM_Base_Start_IT+0x80>
 81067f2:	687b      	ldr	r3, [r7, #4]
 81067f4:	681b      	ldr	r3, [r3, #0]
 81067f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81067fa:	d01d      	beq.n	8106838 <HAL_TIM_Base_Start_IT+0x80>
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	681b      	ldr	r3, [r3, #0]
 8106800:	4a22      	ldr	r2, [pc, #136]	@ (810688c <HAL_TIM_Base_Start_IT+0xd4>)
 8106802:	4293      	cmp	r3, r2
 8106804:	d018      	beq.n	8106838 <HAL_TIM_Base_Start_IT+0x80>
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	681b      	ldr	r3, [r3, #0]
 810680a:	4a21      	ldr	r2, [pc, #132]	@ (8106890 <HAL_TIM_Base_Start_IT+0xd8>)
 810680c:	4293      	cmp	r3, r2
 810680e:	d013      	beq.n	8106838 <HAL_TIM_Base_Start_IT+0x80>
 8106810:	687b      	ldr	r3, [r7, #4]
 8106812:	681b      	ldr	r3, [r3, #0]
 8106814:	4a1f      	ldr	r2, [pc, #124]	@ (8106894 <HAL_TIM_Base_Start_IT+0xdc>)
 8106816:	4293      	cmp	r3, r2
 8106818:	d00e      	beq.n	8106838 <HAL_TIM_Base_Start_IT+0x80>
 810681a:	687b      	ldr	r3, [r7, #4]
 810681c:	681b      	ldr	r3, [r3, #0]
 810681e:	4a1e      	ldr	r2, [pc, #120]	@ (8106898 <HAL_TIM_Base_Start_IT+0xe0>)
 8106820:	4293      	cmp	r3, r2
 8106822:	d009      	beq.n	8106838 <HAL_TIM_Base_Start_IT+0x80>
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	681b      	ldr	r3, [r3, #0]
 8106828:	4a1c      	ldr	r2, [pc, #112]	@ (810689c <HAL_TIM_Base_Start_IT+0xe4>)
 810682a:	4293      	cmp	r3, r2
 810682c:	d004      	beq.n	8106838 <HAL_TIM_Base_Start_IT+0x80>
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	681b      	ldr	r3, [r3, #0]
 8106832:	4a1b      	ldr	r2, [pc, #108]	@ (81068a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8106834:	4293      	cmp	r3, r2
 8106836:	d115      	bne.n	8106864 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	681b      	ldr	r3, [r3, #0]
 810683c:	689a      	ldr	r2, [r3, #8]
 810683e:	4b19      	ldr	r3, [pc, #100]	@ (81068a4 <HAL_TIM_Base_Start_IT+0xec>)
 8106840:	4013      	ands	r3, r2
 8106842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106844:	68fb      	ldr	r3, [r7, #12]
 8106846:	2b06      	cmp	r3, #6
 8106848:	d015      	beq.n	8106876 <HAL_TIM_Base_Start_IT+0xbe>
 810684a:	68fb      	ldr	r3, [r7, #12]
 810684c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106850:	d011      	beq.n	8106876 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	681b      	ldr	r3, [r3, #0]
 8106856:	681a      	ldr	r2, [r3, #0]
 8106858:	687b      	ldr	r3, [r7, #4]
 810685a:	681b      	ldr	r3, [r3, #0]
 810685c:	f042 0201 	orr.w	r2, r2, #1
 8106860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106862:	e008      	b.n	8106876 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106864:	687b      	ldr	r3, [r7, #4]
 8106866:	681b      	ldr	r3, [r3, #0]
 8106868:	681a      	ldr	r2, [r3, #0]
 810686a:	687b      	ldr	r3, [r7, #4]
 810686c:	681b      	ldr	r3, [r3, #0]
 810686e:	f042 0201 	orr.w	r2, r2, #1
 8106872:	601a      	str	r2, [r3, #0]
 8106874:	e000      	b.n	8106878 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106878:	2300      	movs	r3, #0
}
 810687a:	4618      	mov	r0, r3
 810687c:	3714      	adds	r7, #20
 810687e:	46bd      	mov	sp, r7
 8106880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106884:	4770      	bx	lr
 8106886:	bf00      	nop
 8106888:	40010000 	.word	0x40010000
 810688c:	40000400 	.word	0x40000400
 8106890:	40000800 	.word	0x40000800
 8106894:	40000c00 	.word	0x40000c00
 8106898:	40010400 	.word	0x40010400
 810689c:	40001800 	.word	0x40001800
 81068a0:	40014000 	.word	0x40014000
 81068a4:	00010007 	.word	0x00010007

081068a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81068a8:	b580      	push	{r7, lr}
 81068aa:	b084      	sub	sp, #16
 81068ac:	af00      	add	r7, sp, #0
 81068ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	681b      	ldr	r3, [r3, #0]
 81068b4:	68db      	ldr	r3, [r3, #12]
 81068b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 81068b8:	687b      	ldr	r3, [r7, #4]
 81068ba:	681b      	ldr	r3, [r3, #0]
 81068bc:	691b      	ldr	r3, [r3, #16]
 81068be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 81068c0:	68bb      	ldr	r3, [r7, #8]
 81068c2:	f003 0302 	and.w	r3, r3, #2
 81068c6:	2b00      	cmp	r3, #0
 81068c8:	d020      	beq.n	810690c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 81068ca:	68fb      	ldr	r3, [r7, #12]
 81068cc:	f003 0302 	and.w	r3, r3, #2
 81068d0:	2b00      	cmp	r3, #0
 81068d2:	d01b      	beq.n	810690c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	681b      	ldr	r3, [r3, #0]
 81068d8:	f06f 0202 	mvn.w	r2, #2
 81068dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81068de:	687b      	ldr	r3, [r7, #4]
 81068e0:	2201      	movs	r2, #1
 81068e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	681b      	ldr	r3, [r3, #0]
 81068e8:	699b      	ldr	r3, [r3, #24]
 81068ea:	f003 0303 	and.w	r3, r3, #3
 81068ee:	2b00      	cmp	r3, #0
 81068f0:	d003      	beq.n	81068fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81068f2:	6878      	ldr	r0, [r7, #4]
 81068f4:	f000 f8e9 	bl	8106aca <HAL_TIM_IC_CaptureCallback>
 81068f8:	e005      	b.n	8106906 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81068fa:	6878      	ldr	r0, [r7, #4]
 81068fc:	f000 f8db 	bl	8106ab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106900:	6878      	ldr	r0, [r7, #4]
 8106902:	f000 f8ec 	bl	8106ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	2200      	movs	r2, #0
 810690a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810690c:	68bb      	ldr	r3, [r7, #8]
 810690e:	f003 0304 	and.w	r3, r3, #4
 8106912:	2b00      	cmp	r3, #0
 8106914:	d020      	beq.n	8106958 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8106916:	68fb      	ldr	r3, [r7, #12]
 8106918:	f003 0304 	and.w	r3, r3, #4
 810691c:	2b00      	cmp	r3, #0
 810691e:	d01b      	beq.n	8106958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8106920:	687b      	ldr	r3, [r7, #4]
 8106922:	681b      	ldr	r3, [r3, #0]
 8106924:	f06f 0204 	mvn.w	r2, #4
 8106928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	2202      	movs	r2, #2
 810692e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8106930:	687b      	ldr	r3, [r7, #4]
 8106932:	681b      	ldr	r3, [r3, #0]
 8106934:	699b      	ldr	r3, [r3, #24]
 8106936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810693a:	2b00      	cmp	r3, #0
 810693c:	d003      	beq.n	8106946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810693e:	6878      	ldr	r0, [r7, #4]
 8106940:	f000 f8c3 	bl	8106aca <HAL_TIM_IC_CaptureCallback>
 8106944:	e005      	b.n	8106952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106946:	6878      	ldr	r0, [r7, #4]
 8106948:	f000 f8b5 	bl	8106ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810694c:	6878      	ldr	r0, [r7, #4]
 810694e:	f000 f8c6 	bl	8106ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	2200      	movs	r2, #0
 8106956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8106958:	68bb      	ldr	r3, [r7, #8]
 810695a:	f003 0308 	and.w	r3, r3, #8
 810695e:	2b00      	cmp	r3, #0
 8106960:	d020      	beq.n	81069a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8106962:	68fb      	ldr	r3, [r7, #12]
 8106964:	f003 0308 	and.w	r3, r3, #8
 8106968:	2b00      	cmp	r3, #0
 810696a:	d01b      	beq.n	81069a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	681b      	ldr	r3, [r3, #0]
 8106970:	f06f 0208 	mvn.w	r2, #8
 8106974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106976:	687b      	ldr	r3, [r7, #4]
 8106978:	2204      	movs	r2, #4
 810697a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810697c:	687b      	ldr	r3, [r7, #4]
 810697e:	681b      	ldr	r3, [r3, #0]
 8106980:	69db      	ldr	r3, [r3, #28]
 8106982:	f003 0303 	and.w	r3, r3, #3
 8106986:	2b00      	cmp	r3, #0
 8106988:	d003      	beq.n	8106992 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810698a:	6878      	ldr	r0, [r7, #4]
 810698c:	f000 f89d 	bl	8106aca <HAL_TIM_IC_CaptureCallback>
 8106990:	e005      	b.n	810699e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106992:	6878      	ldr	r0, [r7, #4]
 8106994:	f000 f88f 	bl	8106ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106998:	6878      	ldr	r0, [r7, #4]
 810699a:	f000 f8a0 	bl	8106ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	2200      	movs	r2, #0
 81069a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 81069a4:	68bb      	ldr	r3, [r7, #8]
 81069a6:	f003 0310 	and.w	r3, r3, #16
 81069aa:	2b00      	cmp	r3, #0
 81069ac:	d020      	beq.n	81069f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81069ae:	68fb      	ldr	r3, [r7, #12]
 81069b0:	f003 0310 	and.w	r3, r3, #16
 81069b4:	2b00      	cmp	r3, #0
 81069b6:	d01b      	beq.n	81069f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	681b      	ldr	r3, [r3, #0]
 81069bc:	f06f 0210 	mvn.w	r2, #16
 81069c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	2208      	movs	r2, #8
 81069c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	681b      	ldr	r3, [r3, #0]
 81069cc:	69db      	ldr	r3, [r3, #28]
 81069ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81069d2:	2b00      	cmp	r3, #0
 81069d4:	d003      	beq.n	81069de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81069d6:	6878      	ldr	r0, [r7, #4]
 81069d8:	f000 f877 	bl	8106aca <HAL_TIM_IC_CaptureCallback>
 81069dc:	e005      	b.n	81069ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81069de:	6878      	ldr	r0, [r7, #4]
 81069e0:	f000 f869 	bl	8106ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81069e4:	6878      	ldr	r0, [r7, #4]
 81069e6:	f000 f87a 	bl	8106ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81069ea:	687b      	ldr	r3, [r7, #4]
 81069ec:	2200      	movs	r2, #0
 81069ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 81069f0:	68bb      	ldr	r3, [r7, #8]
 81069f2:	f003 0301 	and.w	r3, r3, #1
 81069f6:	2b00      	cmp	r3, #0
 81069f8:	d00c      	beq.n	8106a14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81069fa:	68fb      	ldr	r3, [r7, #12]
 81069fc:	f003 0301 	and.w	r3, r3, #1
 8106a00:	2b00      	cmp	r3, #0
 8106a02:	d007      	beq.n	8106a14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	681b      	ldr	r3, [r3, #0]
 8106a08:	f06f 0201 	mvn.w	r2, #1
 8106a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8106a0e:	6878      	ldr	r0, [r7, #4]
 8106a10:	f7fa fcee 	bl	81013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106a14:	68bb      	ldr	r3, [r7, #8]
 8106a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106a1a:	2b00      	cmp	r3, #0
 8106a1c:	d104      	bne.n	8106a28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8106a1e:	68bb      	ldr	r3, [r7, #8]
 8106a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106a24:	2b00      	cmp	r3, #0
 8106a26:	d00c      	beq.n	8106a42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106a28:	68fb      	ldr	r3, [r7, #12]
 8106a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106a2e:	2b00      	cmp	r3, #0
 8106a30:	d007      	beq.n	8106a42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8106a32:	687b      	ldr	r3, [r7, #4]
 8106a34:	681b      	ldr	r3, [r3, #0]
 8106a36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8106a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106a3c:	6878      	ldr	r0, [r7, #4]
 8106a3e:	f000 f90d 	bl	8106c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8106a42:	68bb      	ldr	r3, [r7, #8]
 8106a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106a48:	2b00      	cmp	r3, #0
 8106a4a:	d00c      	beq.n	8106a66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106a4c:	68fb      	ldr	r3, [r7, #12]
 8106a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106a52:	2b00      	cmp	r3, #0
 8106a54:	d007      	beq.n	8106a66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106a56:	687b      	ldr	r3, [r7, #4]
 8106a58:	681b      	ldr	r3, [r3, #0]
 8106a5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8106a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106a60:	6878      	ldr	r0, [r7, #4]
 8106a62:	f000 f905 	bl	8106c70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8106a66:	68bb      	ldr	r3, [r7, #8]
 8106a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106a6c:	2b00      	cmp	r3, #0
 8106a6e:	d00c      	beq.n	8106a8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8106a70:	68fb      	ldr	r3, [r7, #12]
 8106a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106a76:	2b00      	cmp	r3, #0
 8106a78:	d007      	beq.n	8106a8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	681b      	ldr	r3, [r3, #0]
 8106a7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8106a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106a84:	6878      	ldr	r0, [r7, #4]
 8106a86:	f000 f834 	bl	8106af2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8106a8a:	68bb      	ldr	r3, [r7, #8]
 8106a8c:	f003 0320 	and.w	r3, r3, #32
 8106a90:	2b00      	cmp	r3, #0
 8106a92:	d00c      	beq.n	8106aae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8106a94:	68fb      	ldr	r3, [r7, #12]
 8106a96:	f003 0320 	and.w	r3, r3, #32
 8106a9a:	2b00      	cmp	r3, #0
 8106a9c:	d007      	beq.n	8106aae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8106a9e:	687b      	ldr	r3, [r7, #4]
 8106aa0:	681b      	ldr	r3, [r3, #0]
 8106aa2:	f06f 0220 	mvn.w	r2, #32
 8106aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106aa8:	6878      	ldr	r0, [r7, #4]
 8106aaa:	f000 f8cd 	bl	8106c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8106aae:	bf00      	nop
 8106ab0:	3710      	adds	r7, #16
 8106ab2:	46bd      	mov	sp, r7
 8106ab4:	bd80      	pop	{r7, pc}

08106ab6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106ab6:	b480      	push	{r7}
 8106ab8:	b083      	sub	sp, #12
 8106aba:	af00      	add	r7, sp, #0
 8106abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106abe:	bf00      	nop
 8106ac0:	370c      	adds	r7, #12
 8106ac2:	46bd      	mov	sp, r7
 8106ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ac8:	4770      	bx	lr

08106aca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8106aca:	b480      	push	{r7}
 8106acc:	b083      	sub	sp, #12
 8106ace:	af00      	add	r7, sp, #0
 8106ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106ad2:	bf00      	nop
 8106ad4:	370c      	adds	r7, #12
 8106ad6:	46bd      	mov	sp, r7
 8106ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106adc:	4770      	bx	lr

08106ade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8106ade:	b480      	push	{r7}
 8106ae0:	b083      	sub	sp, #12
 8106ae2:	af00      	add	r7, sp, #0
 8106ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8106ae6:	bf00      	nop
 8106ae8:	370c      	adds	r7, #12
 8106aea:	46bd      	mov	sp, r7
 8106aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106af0:	4770      	bx	lr

08106af2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8106af2:	b480      	push	{r7}
 8106af4:	b083      	sub	sp, #12
 8106af6:	af00      	add	r7, sp, #0
 8106af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8106afa:	bf00      	nop
 8106afc:	370c      	adds	r7, #12
 8106afe:	46bd      	mov	sp, r7
 8106b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b04:	4770      	bx	lr
	...

08106b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106b08:	b480      	push	{r7}
 8106b0a:	b085      	sub	sp, #20
 8106b0c:	af00      	add	r7, sp, #0
 8106b0e:	6078      	str	r0, [r7, #4]
 8106b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106b12:	687b      	ldr	r3, [r7, #4]
 8106b14:	681b      	ldr	r3, [r3, #0]
 8106b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106b18:	687b      	ldr	r3, [r7, #4]
 8106b1a:	4a43      	ldr	r2, [pc, #268]	@ (8106c28 <TIM_Base_SetConfig+0x120>)
 8106b1c:	4293      	cmp	r3, r2
 8106b1e:	d013      	beq.n	8106b48 <TIM_Base_SetConfig+0x40>
 8106b20:	687b      	ldr	r3, [r7, #4]
 8106b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b26:	d00f      	beq.n	8106b48 <TIM_Base_SetConfig+0x40>
 8106b28:	687b      	ldr	r3, [r7, #4]
 8106b2a:	4a40      	ldr	r2, [pc, #256]	@ (8106c2c <TIM_Base_SetConfig+0x124>)
 8106b2c:	4293      	cmp	r3, r2
 8106b2e:	d00b      	beq.n	8106b48 <TIM_Base_SetConfig+0x40>
 8106b30:	687b      	ldr	r3, [r7, #4]
 8106b32:	4a3f      	ldr	r2, [pc, #252]	@ (8106c30 <TIM_Base_SetConfig+0x128>)
 8106b34:	4293      	cmp	r3, r2
 8106b36:	d007      	beq.n	8106b48 <TIM_Base_SetConfig+0x40>
 8106b38:	687b      	ldr	r3, [r7, #4]
 8106b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8106c34 <TIM_Base_SetConfig+0x12c>)
 8106b3c:	4293      	cmp	r3, r2
 8106b3e:	d003      	beq.n	8106b48 <TIM_Base_SetConfig+0x40>
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	4a3d      	ldr	r2, [pc, #244]	@ (8106c38 <TIM_Base_SetConfig+0x130>)
 8106b44:	4293      	cmp	r3, r2
 8106b46:	d108      	bne.n	8106b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106b48:	68fb      	ldr	r3, [r7, #12]
 8106b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8106b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106b50:	683b      	ldr	r3, [r7, #0]
 8106b52:	685b      	ldr	r3, [r3, #4]
 8106b54:	68fa      	ldr	r2, [r7, #12]
 8106b56:	4313      	orrs	r3, r2
 8106b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106b5a:	687b      	ldr	r3, [r7, #4]
 8106b5c:	4a32      	ldr	r2, [pc, #200]	@ (8106c28 <TIM_Base_SetConfig+0x120>)
 8106b5e:	4293      	cmp	r3, r2
 8106b60:	d01f      	beq.n	8106ba2 <TIM_Base_SetConfig+0x9a>
 8106b62:	687b      	ldr	r3, [r7, #4]
 8106b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b68:	d01b      	beq.n	8106ba2 <TIM_Base_SetConfig+0x9a>
 8106b6a:	687b      	ldr	r3, [r7, #4]
 8106b6c:	4a2f      	ldr	r2, [pc, #188]	@ (8106c2c <TIM_Base_SetConfig+0x124>)
 8106b6e:	4293      	cmp	r3, r2
 8106b70:	d017      	beq.n	8106ba2 <TIM_Base_SetConfig+0x9a>
 8106b72:	687b      	ldr	r3, [r7, #4]
 8106b74:	4a2e      	ldr	r2, [pc, #184]	@ (8106c30 <TIM_Base_SetConfig+0x128>)
 8106b76:	4293      	cmp	r3, r2
 8106b78:	d013      	beq.n	8106ba2 <TIM_Base_SetConfig+0x9a>
 8106b7a:	687b      	ldr	r3, [r7, #4]
 8106b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8106c34 <TIM_Base_SetConfig+0x12c>)
 8106b7e:	4293      	cmp	r3, r2
 8106b80:	d00f      	beq.n	8106ba2 <TIM_Base_SetConfig+0x9a>
 8106b82:	687b      	ldr	r3, [r7, #4]
 8106b84:	4a2c      	ldr	r2, [pc, #176]	@ (8106c38 <TIM_Base_SetConfig+0x130>)
 8106b86:	4293      	cmp	r3, r2
 8106b88:	d00b      	beq.n	8106ba2 <TIM_Base_SetConfig+0x9a>
 8106b8a:	687b      	ldr	r3, [r7, #4]
 8106b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8106c3c <TIM_Base_SetConfig+0x134>)
 8106b8e:	4293      	cmp	r3, r2
 8106b90:	d007      	beq.n	8106ba2 <TIM_Base_SetConfig+0x9a>
 8106b92:	687b      	ldr	r3, [r7, #4]
 8106b94:	4a2a      	ldr	r2, [pc, #168]	@ (8106c40 <TIM_Base_SetConfig+0x138>)
 8106b96:	4293      	cmp	r3, r2
 8106b98:	d003      	beq.n	8106ba2 <TIM_Base_SetConfig+0x9a>
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	4a29      	ldr	r2, [pc, #164]	@ (8106c44 <TIM_Base_SetConfig+0x13c>)
 8106b9e:	4293      	cmp	r3, r2
 8106ba0:	d108      	bne.n	8106bb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106ba2:	68fb      	ldr	r3, [r7, #12]
 8106ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106baa:	683b      	ldr	r3, [r7, #0]
 8106bac:	68db      	ldr	r3, [r3, #12]
 8106bae:	68fa      	ldr	r2, [r7, #12]
 8106bb0:	4313      	orrs	r3, r2
 8106bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106bb4:	68fb      	ldr	r3, [r7, #12]
 8106bb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8106bba:	683b      	ldr	r3, [r7, #0]
 8106bbc:	695b      	ldr	r3, [r3, #20]
 8106bbe:	4313      	orrs	r3, r2
 8106bc0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106bc2:	683b      	ldr	r3, [r7, #0]
 8106bc4:	689a      	ldr	r2, [r3, #8]
 8106bc6:	687b      	ldr	r3, [r7, #4]
 8106bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106bca:	683b      	ldr	r3, [r7, #0]
 8106bcc:	681a      	ldr	r2, [r3, #0]
 8106bce:	687b      	ldr	r3, [r7, #4]
 8106bd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	4a14      	ldr	r2, [pc, #80]	@ (8106c28 <TIM_Base_SetConfig+0x120>)
 8106bd6:	4293      	cmp	r3, r2
 8106bd8:	d00f      	beq.n	8106bfa <TIM_Base_SetConfig+0xf2>
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	4a16      	ldr	r2, [pc, #88]	@ (8106c38 <TIM_Base_SetConfig+0x130>)
 8106bde:	4293      	cmp	r3, r2
 8106be0:	d00b      	beq.n	8106bfa <TIM_Base_SetConfig+0xf2>
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	4a15      	ldr	r2, [pc, #84]	@ (8106c3c <TIM_Base_SetConfig+0x134>)
 8106be6:	4293      	cmp	r3, r2
 8106be8:	d007      	beq.n	8106bfa <TIM_Base_SetConfig+0xf2>
 8106bea:	687b      	ldr	r3, [r7, #4]
 8106bec:	4a14      	ldr	r2, [pc, #80]	@ (8106c40 <TIM_Base_SetConfig+0x138>)
 8106bee:	4293      	cmp	r3, r2
 8106bf0:	d003      	beq.n	8106bfa <TIM_Base_SetConfig+0xf2>
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	4a13      	ldr	r2, [pc, #76]	@ (8106c44 <TIM_Base_SetConfig+0x13c>)
 8106bf6:	4293      	cmp	r3, r2
 8106bf8:	d103      	bne.n	8106c02 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106bfa:	683b      	ldr	r3, [r7, #0]
 8106bfc:	691a      	ldr	r2, [r3, #16]
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	681b      	ldr	r3, [r3, #0]
 8106c06:	f043 0204 	orr.w	r2, r3, #4
 8106c0a:	687b      	ldr	r3, [r7, #4]
 8106c0c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106c0e:	687b      	ldr	r3, [r7, #4]
 8106c10:	2201      	movs	r2, #1
 8106c12:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8106c14:	687b      	ldr	r3, [r7, #4]
 8106c16:	68fa      	ldr	r2, [r7, #12]
 8106c18:	601a      	str	r2, [r3, #0]
}
 8106c1a:	bf00      	nop
 8106c1c:	3714      	adds	r7, #20
 8106c1e:	46bd      	mov	sp, r7
 8106c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c24:	4770      	bx	lr
 8106c26:	bf00      	nop
 8106c28:	40010000 	.word	0x40010000
 8106c2c:	40000400 	.word	0x40000400
 8106c30:	40000800 	.word	0x40000800
 8106c34:	40000c00 	.word	0x40000c00
 8106c38:	40010400 	.word	0x40010400
 8106c3c:	40014000 	.word	0x40014000
 8106c40:	40014400 	.word	0x40014400
 8106c44:	40014800 	.word	0x40014800

08106c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106c48:	b480      	push	{r7}
 8106c4a:	b083      	sub	sp, #12
 8106c4c:	af00      	add	r7, sp, #0
 8106c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106c50:	bf00      	nop
 8106c52:	370c      	adds	r7, #12
 8106c54:	46bd      	mov	sp, r7
 8106c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c5a:	4770      	bx	lr

08106c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106c5c:	b480      	push	{r7}
 8106c5e:	b083      	sub	sp, #12
 8106c60:	af00      	add	r7, sp, #0
 8106c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8106c64:	bf00      	nop
 8106c66:	370c      	adds	r7, #12
 8106c68:	46bd      	mov	sp, r7
 8106c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c6e:	4770      	bx	lr

08106c70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106c70:	b480      	push	{r7}
 8106c72:	b083      	sub	sp, #12
 8106c74:	af00      	add	r7, sp, #0
 8106c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106c78:	bf00      	nop
 8106c7a:	370c      	adds	r7, #12
 8106c7c:	46bd      	mov	sp, r7
 8106c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c82:	4770      	bx	lr

08106c84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106c84:	b580      	push	{r7, lr}
 8106c86:	b08a      	sub	sp, #40	@ 0x28
 8106c88:	af02      	add	r7, sp, #8
 8106c8a:	60f8      	str	r0, [r7, #12]
 8106c8c:	60b9      	str	r1, [r7, #8]
 8106c8e:	603b      	str	r3, [r7, #0]
 8106c90:	4613      	mov	r3, r2
 8106c92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8106c94:	68fb      	ldr	r3, [r7, #12]
 8106c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106c9a:	2b20      	cmp	r3, #32
 8106c9c:	d17b      	bne.n	8106d96 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8106c9e:	68bb      	ldr	r3, [r7, #8]
 8106ca0:	2b00      	cmp	r3, #0
 8106ca2:	d002      	beq.n	8106caa <HAL_UART_Transmit+0x26>
 8106ca4:	88fb      	ldrh	r3, [r7, #6]
 8106ca6:	2b00      	cmp	r3, #0
 8106ca8:	d101      	bne.n	8106cae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8106caa:	2301      	movs	r3, #1
 8106cac:	e074      	b.n	8106d98 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106cae:	68fb      	ldr	r3, [r7, #12]
 8106cb0:	2200      	movs	r2, #0
 8106cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106cb6:	68fb      	ldr	r3, [r7, #12]
 8106cb8:	2221      	movs	r2, #33	@ 0x21
 8106cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106cbe:	f7fb f923 	bl	8101f08 <HAL_GetTick>
 8106cc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8106cc4:	68fb      	ldr	r3, [r7, #12]
 8106cc6:	88fa      	ldrh	r2, [r7, #6]
 8106cc8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8106ccc:	68fb      	ldr	r3, [r7, #12]
 8106cce:	88fa      	ldrh	r2, [r7, #6]
 8106cd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106cd4:	68fb      	ldr	r3, [r7, #12]
 8106cd6:	689b      	ldr	r3, [r3, #8]
 8106cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106cdc:	d108      	bne.n	8106cf0 <HAL_UART_Transmit+0x6c>
 8106cde:	68fb      	ldr	r3, [r7, #12]
 8106ce0:	691b      	ldr	r3, [r3, #16]
 8106ce2:	2b00      	cmp	r3, #0
 8106ce4:	d104      	bne.n	8106cf0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8106ce6:	2300      	movs	r3, #0
 8106ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8106cea:	68bb      	ldr	r3, [r7, #8]
 8106cec:	61bb      	str	r3, [r7, #24]
 8106cee:	e003      	b.n	8106cf8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8106cf0:	68bb      	ldr	r3, [r7, #8]
 8106cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106cf4:	2300      	movs	r3, #0
 8106cf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8106cf8:	e030      	b.n	8106d5c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106cfa:	683b      	ldr	r3, [r7, #0]
 8106cfc:	9300      	str	r3, [sp, #0]
 8106cfe:	697b      	ldr	r3, [r7, #20]
 8106d00:	2200      	movs	r2, #0
 8106d02:	2180      	movs	r1, #128	@ 0x80
 8106d04:	68f8      	ldr	r0, [r7, #12]
 8106d06:	f000 f84b 	bl	8106da0 <UART_WaitOnFlagUntilTimeout>
 8106d0a:	4603      	mov	r3, r0
 8106d0c:	2b00      	cmp	r3, #0
 8106d0e:	d005      	beq.n	8106d1c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8106d10:	68fb      	ldr	r3, [r7, #12]
 8106d12:	2220      	movs	r2, #32
 8106d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8106d18:	2303      	movs	r3, #3
 8106d1a:	e03d      	b.n	8106d98 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8106d1c:	69fb      	ldr	r3, [r7, #28]
 8106d1e:	2b00      	cmp	r3, #0
 8106d20:	d10b      	bne.n	8106d3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8106d22:	69bb      	ldr	r3, [r7, #24]
 8106d24:	881b      	ldrh	r3, [r3, #0]
 8106d26:	461a      	mov	r2, r3
 8106d28:	68fb      	ldr	r3, [r7, #12]
 8106d2a:	681b      	ldr	r3, [r3, #0]
 8106d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106d30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8106d32:	69bb      	ldr	r3, [r7, #24]
 8106d34:	3302      	adds	r3, #2
 8106d36:	61bb      	str	r3, [r7, #24]
 8106d38:	e007      	b.n	8106d4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8106d3a:	69fb      	ldr	r3, [r7, #28]
 8106d3c:	781a      	ldrb	r2, [r3, #0]
 8106d3e:	68fb      	ldr	r3, [r7, #12]
 8106d40:	681b      	ldr	r3, [r3, #0]
 8106d42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8106d44:	69fb      	ldr	r3, [r7, #28]
 8106d46:	3301      	adds	r3, #1
 8106d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8106d4a:	68fb      	ldr	r3, [r7, #12]
 8106d4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8106d50:	b29b      	uxth	r3, r3
 8106d52:	3b01      	subs	r3, #1
 8106d54:	b29a      	uxth	r2, r3
 8106d56:	68fb      	ldr	r3, [r7, #12]
 8106d58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8106d5c:	68fb      	ldr	r3, [r7, #12]
 8106d5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8106d62:	b29b      	uxth	r3, r3
 8106d64:	2b00      	cmp	r3, #0
 8106d66:	d1c8      	bne.n	8106cfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8106d68:	683b      	ldr	r3, [r7, #0]
 8106d6a:	9300      	str	r3, [sp, #0]
 8106d6c:	697b      	ldr	r3, [r7, #20]
 8106d6e:	2200      	movs	r2, #0
 8106d70:	2140      	movs	r1, #64	@ 0x40
 8106d72:	68f8      	ldr	r0, [r7, #12]
 8106d74:	f000 f814 	bl	8106da0 <UART_WaitOnFlagUntilTimeout>
 8106d78:	4603      	mov	r3, r0
 8106d7a:	2b00      	cmp	r3, #0
 8106d7c:	d005      	beq.n	8106d8a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8106d7e:	68fb      	ldr	r3, [r7, #12]
 8106d80:	2220      	movs	r2, #32
 8106d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8106d86:	2303      	movs	r3, #3
 8106d88:	e006      	b.n	8106d98 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106d8a:	68fb      	ldr	r3, [r7, #12]
 8106d8c:	2220      	movs	r2, #32
 8106d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8106d92:	2300      	movs	r3, #0
 8106d94:	e000      	b.n	8106d98 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8106d96:	2302      	movs	r3, #2
  }
}
 8106d98:	4618      	mov	r0, r3
 8106d9a:	3720      	adds	r7, #32
 8106d9c:	46bd      	mov	sp, r7
 8106d9e:	bd80      	pop	{r7, pc}

08106da0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106da0:	b580      	push	{r7, lr}
 8106da2:	b084      	sub	sp, #16
 8106da4:	af00      	add	r7, sp, #0
 8106da6:	60f8      	str	r0, [r7, #12]
 8106da8:	60b9      	str	r1, [r7, #8]
 8106daa:	603b      	str	r3, [r7, #0]
 8106dac:	4613      	mov	r3, r2
 8106dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106db0:	e04f      	b.n	8106e52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106db2:	69bb      	ldr	r3, [r7, #24]
 8106db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106db8:	d04b      	beq.n	8106e52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106dba:	f7fb f8a5 	bl	8101f08 <HAL_GetTick>
 8106dbe:	4602      	mov	r2, r0
 8106dc0:	683b      	ldr	r3, [r7, #0]
 8106dc2:	1ad3      	subs	r3, r2, r3
 8106dc4:	69ba      	ldr	r2, [r7, #24]
 8106dc6:	429a      	cmp	r2, r3
 8106dc8:	d302      	bcc.n	8106dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8106dca:	69bb      	ldr	r3, [r7, #24]
 8106dcc:	2b00      	cmp	r3, #0
 8106dce:	d101      	bne.n	8106dd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8106dd0:	2303      	movs	r3, #3
 8106dd2:	e04e      	b.n	8106e72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8106dd4:	68fb      	ldr	r3, [r7, #12]
 8106dd6:	681b      	ldr	r3, [r3, #0]
 8106dd8:	681b      	ldr	r3, [r3, #0]
 8106dda:	f003 0304 	and.w	r3, r3, #4
 8106dde:	2b00      	cmp	r3, #0
 8106de0:	d037      	beq.n	8106e52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8106de2:	68bb      	ldr	r3, [r7, #8]
 8106de4:	2b80      	cmp	r3, #128	@ 0x80
 8106de6:	d034      	beq.n	8106e52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8106de8:	68bb      	ldr	r3, [r7, #8]
 8106dea:	2b40      	cmp	r3, #64	@ 0x40
 8106dec:	d031      	beq.n	8106e52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8106dee:	68fb      	ldr	r3, [r7, #12]
 8106df0:	681b      	ldr	r3, [r3, #0]
 8106df2:	69db      	ldr	r3, [r3, #28]
 8106df4:	f003 0308 	and.w	r3, r3, #8
 8106df8:	2b08      	cmp	r3, #8
 8106dfa:	d110      	bne.n	8106e1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106dfc:	68fb      	ldr	r3, [r7, #12]
 8106dfe:	681b      	ldr	r3, [r3, #0]
 8106e00:	2208      	movs	r2, #8
 8106e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106e04:	68f8      	ldr	r0, [r7, #12]
 8106e06:	f000 f838 	bl	8106e7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8106e0a:	68fb      	ldr	r3, [r7, #12]
 8106e0c:	2208      	movs	r2, #8
 8106e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106e12:	68fb      	ldr	r3, [r7, #12]
 8106e14:	2200      	movs	r2, #0
 8106e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8106e1a:	2301      	movs	r3, #1
 8106e1c:	e029      	b.n	8106e72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106e1e:	68fb      	ldr	r3, [r7, #12]
 8106e20:	681b      	ldr	r3, [r3, #0]
 8106e22:	69db      	ldr	r3, [r3, #28]
 8106e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8106e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106e2c:	d111      	bne.n	8106e52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106e2e:	68fb      	ldr	r3, [r7, #12]
 8106e30:	681b      	ldr	r3, [r3, #0]
 8106e32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8106e36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106e38:	68f8      	ldr	r0, [r7, #12]
 8106e3a:	f000 f81e 	bl	8106e7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106e3e:	68fb      	ldr	r3, [r7, #12]
 8106e40:	2220      	movs	r2, #32
 8106e42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106e46:	68fb      	ldr	r3, [r7, #12]
 8106e48:	2200      	movs	r2, #0
 8106e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8106e4e:	2303      	movs	r3, #3
 8106e50:	e00f      	b.n	8106e72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106e52:	68fb      	ldr	r3, [r7, #12]
 8106e54:	681b      	ldr	r3, [r3, #0]
 8106e56:	69da      	ldr	r2, [r3, #28]
 8106e58:	68bb      	ldr	r3, [r7, #8]
 8106e5a:	4013      	ands	r3, r2
 8106e5c:	68ba      	ldr	r2, [r7, #8]
 8106e5e:	429a      	cmp	r2, r3
 8106e60:	bf0c      	ite	eq
 8106e62:	2301      	moveq	r3, #1
 8106e64:	2300      	movne	r3, #0
 8106e66:	b2db      	uxtb	r3, r3
 8106e68:	461a      	mov	r2, r3
 8106e6a:	79fb      	ldrb	r3, [r7, #7]
 8106e6c:	429a      	cmp	r2, r3
 8106e6e:	d0a0      	beq.n	8106db2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106e70:	2300      	movs	r3, #0
}
 8106e72:	4618      	mov	r0, r3
 8106e74:	3710      	adds	r7, #16
 8106e76:	46bd      	mov	sp, r7
 8106e78:	bd80      	pop	{r7, pc}

08106e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8106e7a:	b480      	push	{r7}
 8106e7c:	b095      	sub	sp, #84	@ 0x54
 8106e7e:	af00      	add	r7, sp, #0
 8106e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106e82:	687b      	ldr	r3, [r7, #4]
 8106e84:	681b      	ldr	r3, [r3, #0]
 8106e86:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106e8a:	e853 3f00 	ldrex	r3, [r3]
 8106e8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8106e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8106e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	681b      	ldr	r3, [r3, #0]
 8106e9c:	461a      	mov	r2, r3
 8106e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8106ea0:	643b      	str	r3, [r7, #64]	@ 0x40
 8106ea2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ea4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8106ea6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8106ea8:	e841 2300 	strex	r3, r2, [r1]
 8106eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8106eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106eb0:	2b00      	cmp	r3, #0
 8106eb2:	d1e6      	bne.n	8106e82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106eb4:	687b      	ldr	r3, [r7, #4]
 8106eb6:	681b      	ldr	r3, [r3, #0]
 8106eb8:	3308      	adds	r3, #8
 8106eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106ebc:	6a3b      	ldr	r3, [r7, #32]
 8106ebe:	e853 3f00 	ldrex	r3, [r3]
 8106ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8106ec4:	69fb      	ldr	r3, [r7, #28]
 8106ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8106eca:	f023 0301 	bic.w	r3, r3, #1
 8106ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	681b      	ldr	r3, [r3, #0]
 8106ed4:	3308      	adds	r3, #8
 8106ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8106eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106ee0:	e841 2300 	strex	r3, r2, [r1]
 8106ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8106ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106ee8:	2b00      	cmp	r3, #0
 8106eea:	d1e3      	bne.n	8106eb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106ef0:	2b01      	cmp	r3, #1
 8106ef2:	d118      	bne.n	8106f26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106efa:	68fb      	ldr	r3, [r7, #12]
 8106efc:	e853 3f00 	ldrex	r3, [r3]
 8106f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8106f02:	68bb      	ldr	r3, [r7, #8]
 8106f04:	f023 0310 	bic.w	r3, r3, #16
 8106f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8106f0a:	687b      	ldr	r3, [r7, #4]
 8106f0c:	681b      	ldr	r3, [r3, #0]
 8106f0e:	461a      	mov	r2, r3
 8106f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8106f12:	61bb      	str	r3, [r7, #24]
 8106f14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106f16:	6979      	ldr	r1, [r7, #20]
 8106f18:	69ba      	ldr	r2, [r7, #24]
 8106f1a:	e841 2300 	strex	r3, r2, [r1]
 8106f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8106f20:	693b      	ldr	r3, [r7, #16]
 8106f22:	2b00      	cmp	r3, #0
 8106f24:	d1e6      	bne.n	8106ef4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	2220      	movs	r2, #32
 8106f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	2200      	movs	r2, #0
 8106f32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	2200      	movs	r2, #0
 8106f38:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8106f3a:	bf00      	nop
 8106f3c:	3754      	adds	r7, #84	@ 0x54
 8106f3e:	46bd      	mov	sp, r7
 8106f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f44:	4770      	bx	lr

08106f46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8106f46:	b084      	sub	sp, #16
 8106f48:	b580      	push	{r7, lr}
 8106f4a:	b084      	sub	sp, #16
 8106f4c:	af00      	add	r7, sp, #0
 8106f4e:	6078      	str	r0, [r7, #4]
 8106f50:	f107 001c 	add.w	r0, r7, #28
 8106f54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8106f58:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8106f5c:	2b01      	cmp	r3, #1
 8106f5e:	d123      	bne.n	8106fa8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8106f60:	687b      	ldr	r3, [r7, #4]
 8106f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106f64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8106f68:	687b      	ldr	r3, [r7, #4]
 8106f6a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	68db      	ldr	r3, [r3, #12]
 8106f70:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8106f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8106f78:	687a      	ldr	r2, [r7, #4]
 8106f7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8106f7c:	687b      	ldr	r3, [r7, #4]
 8106f7e:	68db      	ldr	r3, [r3, #12]
 8106f80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8106f88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8106f8c:	2b01      	cmp	r3, #1
 8106f8e:	d105      	bne.n	8106f9c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	68db      	ldr	r3, [r3, #12]
 8106f94:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8106f98:	687b      	ldr	r3, [r7, #4]
 8106f9a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8106f9c:	6878      	ldr	r0, [r7, #4]
 8106f9e:	f000 faa7 	bl	81074f0 <USB_CoreReset>
 8106fa2:	4603      	mov	r3, r0
 8106fa4:	73fb      	strb	r3, [r7, #15]
 8106fa6:	e01b      	b.n	8106fe0 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8106fa8:	687b      	ldr	r3, [r7, #4]
 8106faa:	68db      	ldr	r3, [r3, #12]
 8106fac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8106fb0:	687b      	ldr	r3, [r7, #4]
 8106fb2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8106fb4:	6878      	ldr	r0, [r7, #4]
 8106fb6:	f000 fa9b 	bl	81074f0 <USB_CoreReset>
 8106fba:	4603      	mov	r3, r0
 8106fbc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8106fbe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8106fc2:	2b00      	cmp	r3, #0
 8106fc4:	d106      	bne.n	8106fd4 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8106fc6:	687b      	ldr	r3, [r7, #4]
 8106fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106fca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8106fce:	687b      	ldr	r3, [r7, #4]
 8106fd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8106fd2:	e005      	b.n	8106fe0 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8106fd4:	687b      	ldr	r3, [r7, #4]
 8106fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106fd8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8106fe0:	7fbb      	ldrb	r3, [r7, #30]
 8106fe2:	2b01      	cmp	r3, #1
 8106fe4:	d118      	bne.n	8107018 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106fea:	b29a      	uxth	r2, r3
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8106ff0:	687b      	ldr	r3, [r7, #4]
 8106ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106ff4:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 8106ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106ffc:	687a      	ldr	r2, [r7, #4]
 8106ffe:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	689b      	ldr	r3, [r3, #8]
 8107004:	f043 0206 	orr.w	r2, r3, #6
 8107008:	687b      	ldr	r3, [r7, #4]
 810700a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	689b      	ldr	r3, [r3, #8]
 8107010:	f043 0220 	orr.w	r2, r3, #32
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8107018:	7bfb      	ldrb	r3, [r7, #15]
}
 810701a:	4618      	mov	r0, r3
 810701c:	3710      	adds	r7, #16
 810701e:	46bd      	mov	sp, r7
 8107020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8107024:	b004      	add	sp, #16
 8107026:	4770      	bx	lr

08107028 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8107028:	b480      	push	{r7}
 810702a:	b083      	sub	sp, #12
 810702c:	af00      	add	r7, sp, #0
 810702e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	689b      	ldr	r3, [r3, #8]
 8107034:	f023 0201 	bic.w	r2, r3, #1
 8107038:	687b      	ldr	r3, [r7, #4]
 810703a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810703c:	2300      	movs	r3, #0
}
 810703e:	4618      	mov	r0, r3
 8107040:	370c      	adds	r7, #12
 8107042:	46bd      	mov	sp, r7
 8107044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107048:	4770      	bx	lr

0810704a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810704a:	b580      	push	{r7, lr}
 810704c:	b084      	sub	sp, #16
 810704e:	af00      	add	r7, sp, #0
 8107050:	6078      	str	r0, [r7, #4]
 8107052:	460b      	mov	r3, r1
 8107054:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8107056:	2300      	movs	r3, #0
 8107058:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810705a:	687b      	ldr	r3, [r7, #4]
 810705c:	68db      	ldr	r3, [r3, #12]
 810705e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8107062:	687b      	ldr	r3, [r7, #4]
 8107064:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8107066:	78fb      	ldrb	r3, [r7, #3]
 8107068:	2b01      	cmp	r3, #1
 810706a:	d115      	bne.n	8107098 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810706c:	687b      	ldr	r3, [r7, #4]
 810706e:	68db      	ldr	r3, [r3, #12]
 8107070:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8107074:	687b      	ldr	r3, [r7, #4]
 8107076:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8107078:	200a      	movs	r0, #10
 810707a:	f7fa ff51 	bl	8101f20 <HAL_Delay>
      ms += 10U;
 810707e:	68fb      	ldr	r3, [r7, #12]
 8107080:	330a      	adds	r3, #10
 8107082:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8107084:	6878      	ldr	r0, [r7, #4]
 8107086:	f000 fa25 	bl	81074d4 <USB_GetMode>
 810708a:	4603      	mov	r3, r0
 810708c:	2b01      	cmp	r3, #1
 810708e:	d01e      	beq.n	81070ce <USB_SetCurrentMode+0x84>
 8107090:	68fb      	ldr	r3, [r7, #12]
 8107092:	2bc7      	cmp	r3, #199	@ 0xc7
 8107094:	d9f0      	bls.n	8107078 <USB_SetCurrentMode+0x2e>
 8107096:	e01a      	b.n	81070ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8107098:	78fb      	ldrb	r3, [r7, #3]
 810709a:	2b00      	cmp	r3, #0
 810709c:	d115      	bne.n	81070ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810709e:	687b      	ldr	r3, [r7, #4]
 81070a0:	68db      	ldr	r3, [r3, #12]
 81070a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 81070a6:	687b      	ldr	r3, [r7, #4]
 81070a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 81070aa:	200a      	movs	r0, #10
 81070ac:	f7fa ff38 	bl	8101f20 <HAL_Delay>
      ms += 10U;
 81070b0:	68fb      	ldr	r3, [r7, #12]
 81070b2:	330a      	adds	r3, #10
 81070b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 81070b6:	6878      	ldr	r0, [r7, #4]
 81070b8:	f000 fa0c 	bl	81074d4 <USB_GetMode>
 81070bc:	4603      	mov	r3, r0
 81070be:	2b00      	cmp	r3, #0
 81070c0:	d005      	beq.n	81070ce <USB_SetCurrentMode+0x84>
 81070c2:	68fb      	ldr	r3, [r7, #12]
 81070c4:	2bc7      	cmp	r3, #199	@ 0xc7
 81070c6:	d9f0      	bls.n	81070aa <USB_SetCurrentMode+0x60>
 81070c8:	e001      	b.n	81070ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 81070ca:	2301      	movs	r3, #1
 81070cc:	e005      	b.n	81070da <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 81070ce:	68fb      	ldr	r3, [r7, #12]
 81070d0:	2bc8      	cmp	r3, #200	@ 0xc8
 81070d2:	d101      	bne.n	81070d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 81070d4:	2301      	movs	r3, #1
 81070d6:	e000      	b.n	81070da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 81070d8:	2300      	movs	r3, #0
}
 81070da:	4618      	mov	r0, r3
 81070dc:	3710      	adds	r7, #16
 81070de:	46bd      	mov	sp, r7
 81070e0:	bd80      	pop	{r7, pc}
	...

081070e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 81070e4:	b084      	sub	sp, #16
 81070e6:	b580      	push	{r7, lr}
 81070e8:	b086      	sub	sp, #24
 81070ea:	af00      	add	r7, sp, #0
 81070ec:	6078      	str	r0, [r7, #4]
 81070ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 81070f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 81070f6:	2300      	movs	r3, #0
 81070f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81070fa:	687b      	ldr	r3, [r7, #4]
 81070fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 81070fe:	2300      	movs	r3, #0
 8107100:	613b      	str	r3, [r7, #16]
 8107102:	e009      	b.n	8107118 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8107104:	687a      	ldr	r2, [r7, #4]
 8107106:	693b      	ldr	r3, [r7, #16]
 8107108:	3340      	adds	r3, #64	@ 0x40
 810710a:	009b      	lsls	r3, r3, #2
 810710c:	4413      	add	r3, r2
 810710e:	2200      	movs	r2, #0
 8107110:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8107112:	693b      	ldr	r3, [r7, #16]
 8107114:	3301      	adds	r3, #1
 8107116:	613b      	str	r3, [r7, #16]
 8107118:	693b      	ldr	r3, [r7, #16]
 810711a:	2b0e      	cmp	r3, #14
 810711c:	d9f2      	bls.n	8107104 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810711e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8107122:	2b00      	cmp	r3, #0
 8107124:	d11c      	bne.n	8107160 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8107126:	68fb      	ldr	r3, [r7, #12]
 8107128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810712c:	685b      	ldr	r3, [r3, #4]
 810712e:	68fa      	ldr	r2, [r7, #12]
 8107130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8107134:	f043 0302 	orr.w	r3, r3, #2
 8107138:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810713a:	687b      	ldr	r3, [r7, #4]
 810713c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810713e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8107142:	687b      	ldr	r3, [r7, #4]
 8107144:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8107146:	687b      	ldr	r3, [r7, #4]
 8107148:	681b      	ldr	r3, [r3, #0]
 810714a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	681b      	ldr	r3, [r3, #0]
 8107156:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810715a:	687b      	ldr	r3, [r7, #4]
 810715c:	601a      	str	r2, [r3, #0]
 810715e:	e005      	b.n	810716c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107164:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8107168:	687b      	ldr	r3, [r7, #4]
 810716a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810716c:	68fb      	ldr	r3, [r7, #12]
 810716e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8107172:	461a      	mov	r2, r3
 8107174:	2300      	movs	r3, #0
 8107176:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8107178:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 810717c:	2b01      	cmp	r3, #1
 810717e:	d10d      	bne.n	810719c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8107180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8107184:	2b00      	cmp	r3, #0
 8107186:	d104      	bne.n	8107192 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8107188:	2100      	movs	r1, #0
 810718a:	6878      	ldr	r0, [r7, #4]
 810718c:	f000 f968 	bl	8107460 <USB_SetDevSpeed>
 8107190:	e008      	b.n	81071a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8107192:	2101      	movs	r1, #1
 8107194:	6878      	ldr	r0, [r7, #4]
 8107196:	f000 f963 	bl	8107460 <USB_SetDevSpeed>
 810719a:	e003      	b.n	81071a4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810719c:	2103      	movs	r1, #3
 810719e:	6878      	ldr	r0, [r7, #4]
 81071a0:	f000 f95e 	bl	8107460 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 81071a4:	2110      	movs	r1, #16
 81071a6:	6878      	ldr	r0, [r7, #4]
 81071a8:	f000 f8fa 	bl	81073a0 <USB_FlushTxFifo>
 81071ac:	4603      	mov	r3, r0
 81071ae:	2b00      	cmp	r3, #0
 81071b0:	d001      	beq.n	81071b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 81071b2:	2301      	movs	r3, #1
 81071b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 81071b6:	6878      	ldr	r0, [r7, #4]
 81071b8:	f000 f924 	bl	8107404 <USB_FlushRxFifo>
 81071bc:	4603      	mov	r3, r0
 81071be:	2b00      	cmp	r3, #0
 81071c0:	d001      	beq.n	81071c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 81071c2:	2301      	movs	r3, #1
 81071c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 81071c6:	68fb      	ldr	r3, [r7, #12]
 81071c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81071cc:	461a      	mov	r2, r3
 81071ce:	2300      	movs	r3, #0
 81071d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 81071d2:	68fb      	ldr	r3, [r7, #12]
 81071d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81071d8:	461a      	mov	r2, r3
 81071da:	2300      	movs	r3, #0
 81071dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 81071de:	68fb      	ldr	r3, [r7, #12]
 81071e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81071e4:	461a      	mov	r2, r3
 81071e6:	2300      	movs	r3, #0
 81071e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 81071ea:	2300      	movs	r3, #0
 81071ec:	613b      	str	r3, [r7, #16]
 81071ee:	e043      	b.n	8107278 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 81071f0:	693b      	ldr	r3, [r7, #16]
 81071f2:	015a      	lsls	r2, r3, #5
 81071f4:	68fb      	ldr	r3, [r7, #12]
 81071f6:	4413      	add	r3, r2
 81071f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81071fc:	681b      	ldr	r3, [r3, #0]
 81071fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8107202:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8107206:	d118      	bne.n	810723a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8107208:	693b      	ldr	r3, [r7, #16]
 810720a:	2b00      	cmp	r3, #0
 810720c:	d10a      	bne.n	8107224 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810720e:	693b      	ldr	r3, [r7, #16]
 8107210:	015a      	lsls	r2, r3, #5
 8107212:	68fb      	ldr	r3, [r7, #12]
 8107214:	4413      	add	r3, r2
 8107216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810721a:	461a      	mov	r2, r3
 810721c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8107220:	6013      	str	r3, [r2, #0]
 8107222:	e013      	b.n	810724c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8107224:	693b      	ldr	r3, [r7, #16]
 8107226:	015a      	lsls	r2, r3, #5
 8107228:	68fb      	ldr	r3, [r7, #12]
 810722a:	4413      	add	r3, r2
 810722c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107230:	461a      	mov	r2, r3
 8107232:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8107236:	6013      	str	r3, [r2, #0]
 8107238:	e008      	b.n	810724c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810723a:	693b      	ldr	r3, [r7, #16]
 810723c:	015a      	lsls	r2, r3, #5
 810723e:	68fb      	ldr	r3, [r7, #12]
 8107240:	4413      	add	r3, r2
 8107242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107246:	461a      	mov	r2, r3
 8107248:	2300      	movs	r3, #0
 810724a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810724c:	693b      	ldr	r3, [r7, #16]
 810724e:	015a      	lsls	r2, r3, #5
 8107250:	68fb      	ldr	r3, [r7, #12]
 8107252:	4413      	add	r3, r2
 8107254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107258:	461a      	mov	r2, r3
 810725a:	2300      	movs	r3, #0
 810725c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810725e:	693b      	ldr	r3, [r7, #16]
 8107260:	015a      	lsls	r2, r3, #5
 8107262:	68fb      	ldr	r3, [r7, #12]
 8107264:	4413      	add	r3, r2
 8107266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810726a:	461a      	mov	r2, r3
 810726c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8107270:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107272:	693b      	ldr	r3, [r7, #16]
 8107274:	3301      	adds	r3, #1
 8107276:	613b      	str	r3, [r7, #16]
 8107278:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810727c:	461a      	mov	r2, r3
 810727e:	693b      	ldr	r3, [r7, #16]
 8107280:	4293      	cmp	r3, r2
 8107282:	d3b5      	bcc.n	81071f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107284:	2300      	movs	r3, #0
 8107286:	613b      	str	r3, [r7, #16]
 8107288:	e043      	b.n	8107312 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810728a:	693b      	ldr	r3, [r7, #16]
 810728c:	015a      	lsls	r2, r3, #5
 810728e:	68fb      	ldr	r3, [r7, #12]
 8107290:	4413      	add	r3, r2
 8107292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107296:	681b      	ldr	r3, [r3, #0]
 8107298:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810729c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81072a0:	d118      	bne.n	81072d4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 81072a2:	693b      	ldr	r3, [r7, #16]
 81072a4:	2b00      	cmp	r3, #0
 81072a6:	d10a      	bne.n	81072be <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 81072a8:	693b      	ldr	r3, [r7, #16]
 81072aa:	015a      	lsls	r2, r3, #5
 81072ac:	68fb      	ldr	r3, [r7, #12]
 81072ae:	4413      	add	r3, r2
 81072b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81072b4:	461a      	mov	r2, r3
 81072b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 81072ba:	6013      	str	r3, [r2, #0]
 81072bc:	e013      	b.n	81072e6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 81072be:	693b      	ldr	r3, [r7, #16]
 81072c0:	015a      	lsls	r2, r3, #5
 81072c2:	68fb      	ldr	r3, [r7, #12]
 81072c4:	4413      	add	r3, r2
 81072c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81072ca:	461a      	mov	r2, r3
 81072cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 81072d0:	6013      	str	r3, [r2, #0]
 81072d2:	e008      	b.n	81072e6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 81072d4:	693b      	ldr	r3, [r7, #16]
 81072d6:	015a      	lsls	r2, r3, #5
 81072d8:	68fb      	ldr	r3, [r7, #12]
 81072da:	4413      	add	r3, r2
 81072dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81072e0:	461a      	mov	r2, r3
 81072e2:	2300      	movs	r3, #0
 81072e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 81072e6:	693b      	ldr	r3, [r7, #16]
 81072e8:	015a      	lsls	r2, r3, #5
 81072ea:	68fb      	ldr	r3, [r7, #12]
 81072ec:	4413      	add	r3, r2
 81072ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81072f2:	461a      	mov	r2, r3
 81072f4:	2300      	movs	r3, #0
 81072f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 81072f8:	693b      	ldr	r3, [r7, #16]
 81072fa:	015a      	lsls	r2, r3, #5
 81072fc:	68fb      	ldr	r3, [r7, #12]
 81072fe:	4413      	add	r3, r2
 8107300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107304:	461a      	mov	r2, r3
 8107306:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810730a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810730c:	693b      	ldr	r3, [r7, #16]
 810730e:	3301      	adds	r3, #1
 8107310:	613b      	str	r3, [r7, #16]
 8107312:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8107316:	461a      	mov	r2, r3
 8107318:	693b      	ldr	r3, [r7, #16]
 810731a:	4293      	cmp	r3, r2
 810731c:	d3b5      	bcc.n	810728a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810731e:	68fb      	ldr	r3, [r7, #12]
 8107320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107324:	691b      	ldr	r3, [r3, #16]
 8107326:	68fa      	ldr	r2, [r7, #12]
 8107328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810732c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8107330:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8107332:	687b      	ldr	r3, [r7, #4]
 8107334:	2200      	movs	r2, #0
 8107336:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 810733e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8107340:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8107344:	2b00      	cmp	r3, #0
 8107346:	d105      	bne.n	8107354 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8107348:	687b      	ldr	r3, [r7, #4]
 810734a:	699b      	ldr	r3, [r3, #24]
 810734c:	f043 0210 	orr.w	r2, r3, #16
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	699a      	ldr	r2, [r3, #24]
 8107358:	4b10      	ldr	r3, [pc, #64]	@ (810739c <USB_DevInit+0x2b8>)
 810735a:	4313      	orrs	r3, r2
 810735c:	687a      	ldr	r2, [r7, #4]
 810735e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8107360:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8107364:	2b00      	cmp	r3, #0
 8107366:	d005      	beq.n	8107374 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8107368:	687b      	ldr	r3, [r7, #4]
 810736a:	699b      	ldr	r3, [r3, #24]
 810736c:	f043 0208 	orr.w	r2, r3, #8
 8107370:	687b      	ldr	r3, [r7, #4]
 8107372:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8107374:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8107378:	2b01      	cmp	r3, #1
 810737a:	d107      	bne.n	810738c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810737c:	687b      	ldr	r3, [r7, #4]
 810737e:	699b      	ldr	r3, [r3, #24]
 8107380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8107384:	f043 0304 	orr.w	r3, r3, #4
 8107388:	687a      	ldr	r2, [r7, #4]
 810738a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810738c:	7dfb      	ldrb	r3, [r7, #23]
}
 810738e:	4618      	mov	r0, r3
 8107390:	3718      	adds	r7, #24
 8107392:	46bd      	mov	sp, r7
 8107394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8107398:	b004      	add	sp, #16
 810739a:	4770      	bx	lr
 810739c:	803c3800 	.word	0x803c3800

081073a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 81073a0:	b480      	push	{r7}
 81073a2:	b085      	sub	sp, #20
 81073a4:	af00      	add	r7, sp, #0
 81073a6:	6078      	str	r0, [r7, #4]
 81073a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 81073aa:	2300      	movs	r3, #0
 81073ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81073ae:	68fb      	ldr	r3, [r7, #12]
 81073b0:	3301      	adds	r3, #1
 81073b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81073b4:	68fb      	ldr	r3, [r7, #12]
 81073b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81073ba:	d901      	bls.n	81073c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 81073bc:	2303      	movs	r3, #3
 81073be:	e01b      	b.n	81073f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81073c0:	687b      	ldr	r3, [r7, #4]
 81073c2:	691b      	ldr	r3, [r3, #16]
 81073c4:	2b00      	cmp	r3, #0
 81073c6:	daf2      	bge.n	81073ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 81073c8:	2300      	movs	r3, #0
 81073ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 81073cc:	683b      	ldr	r3, [r7, #0]
 81073ce:	019b      	lsls	r3, r3, #6
 81073d0:	f043 0220 	orr.w	r2, r3, #32
 81073d4:	687b      	ldr	r3, [r7, #4]
 81073d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81073d8:	68fb      	ldr	r3, [r7, #12]
 81073da:	3301      	adds	r3, #1
 81073dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 81073e4:	d901      	bls.n	81073ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 81073e6:	2303      	movs	r3, #3
 81073e8:	e006      	b.n	81073f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 81073ea:	687b      	ldr	r3, [r7, #4]
 81073ec:	691b      	ldr	r3, [r3, #16]
 81073ee:	f003 0320 	and.w	r3, r3, #32
 81073f2:	2b20      	cmp	r3, #32
 81073f4:	d0f0      	beq.n	81073d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 81073f6:	2300      	movs	r3, #0
}
 81073f8:	4618      	mov	r0, r3
 81073fa:	3714      	adds	r7, #20
 81073fc:	46bd      	mov	sp, r7
 81073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107402:	4770      	bx	lr

08107404 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8107404:	b480      	push	{r7}
 8107406:	b085      	sub	sp, #20
 8107408:	af00      	add	r7, sp, #0
 810740a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810740c:	2300      	movs	r3, #0
 810740e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8107410:	68fb      	ldr	r3, [r7, #12]
 8107412:	3301      	adds	r3, #1
 8107414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107416:	68fb      	ldr	r3, [r7, #12]
 8107418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810741c:	d901      	bls.n	8107422 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810741e:	2303      	movs	r3, #3
 8107420:	e018      	b.n	8107454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8107422:	687b      	ldr	r3, [r7, #4]
 8107424:	691b      	ldr	r3, [r3, #16]
 8107426:	2b00      	cmp	r3, #0
 8107428:	daf2      	bge.n	8107410 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810742a:	2300      	movs	r3, #0
 810742c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810742e:	687b      	ldr	r3, [r7, #4]
 8107430:	2210      	movs	r2, #16
 8107432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8107434:	68fb      	ldr	r3, [r7, #12]
 8107436:	3301      	adds	r3, #1
 8107438:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810743a:	68fb      	ldr	r3, [r7, #12]
 810743c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107440:	d901      	bls.n	8107446 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8107442:	2303      	movs	r3, #3
 8107444:	e006      	b.n	8107454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8107446:	687b      	ldr	r3, [r7, #4]
 8107448:	691b      	ldr	r3, [r3, #16]
 810744a:	f003 0310 	and.w	r3, r3, #16
 810744e:	2b10      	cmp	r3, #16
 8107450:	d0f0      	beq.n	8107434 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8107452:	2300      	movs	r3, #0
}
 8107454:	4618      	mov	r0, r3
 8107456:	3714      	adds	r7, #20
 8107458:	46bd      	mov	sp, r7
 810745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810745e:	4770      	bx	lr

08107460 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8107460:	b480      	push	{r7}
 8107462:	b085      	sub	sp, #20
 8107464:	af00      	add	r7, sp, #0
 8107466:	6078      	str	r0, [r7, #4]
 8107468:	460b      	mov	r3, r1
 810746a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810746c:	687b      	ldr	r3, [r7, #4]
 810746e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8107470:	68fb      	ldr	r3, [r7, #12]
 8107472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107476:	681a      	ldr	r2, [r3, #0]
 8107478:	78fb      	ldrb	r3, [r7, #3]
 810747a:	68f9      	ldr	r1, [r7, #12]
 810747c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8107480:	4313      	orrs	r3, r2
 8107482:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8107484:	2300      	movs	r3, #0
}
 8107486:	4618      	mov	r0, r3
 8107488:	3714      	adds	r7, #20
 810748a:	46bd      	mov	sp, r7
 810748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107490:	4770      	bx	lr

08107492 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8107492:	b480      	push	{r7}
 8107494:	b085      	sub	sp, #20
 8107496:	af00      	add	r7, sp, #0
 8107498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810749a:	687b      	ldr	r3, [r7, #4]
 810749c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810749e:	68fb      	ldr	r3, [r7, #12]
 81074a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 81074a4:	681b      	ldr	r3, [r3, #0]
 81074a6:	68fa      	ldr	r2, [r7, #12]
 81074a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 81074ac:	f023 0303 	bic.w	r3, r3, #3
 81074b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 81074b2:	68fb      	ldr	r3, [r7, #12]
 81074b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81074b8:	685b      	ldr	r3, [r3, #4]
 81074ba:	68fa      	ldr	r2, [r7, #12]
 81074bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81074c0:	f043 0302 	orr.w	r3, r3, #2
 81074c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 81074c6:	2300      	movs	r3, #0
}
 81074c8:	4618      	mov	r0, r3
 81074ca:	3714      	adds	r7, #20
 81074cc:	46bd      	mov	sp, r7
 81074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074d2:	4770      	bx	lr

081074d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 81074d4:	b480      	push	{r7}
 81074d6:	b083      	sub	sp, #12
 81074d8:	af00      	add	r7, sp, #0
 81074da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	695b      	ldr	r3, [r3, #20]
 81074e0:	f003 0301 	and.w	r3, r3, #1
}
 81074e4:	4618      	mov	r0, r3
 81074e6:	370c      	adds	r7, #12
 81074e8:	46bd      	mov	sp, r7
 81074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ee:	4770      	bx	lr

081074f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 81074f0:	b480      	push	{r7}
 81074f2:	b085      	sub	sp, #20
 81074f4:	af00      	add	r7, sp, #0
 81074f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81074f8:	2300      	movs	r3, #0
 81074fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81074fc:	68fb      	ldr	r3, [r7, #12]
 81074fe:	3301      	adds	r3, #1
 8107500:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107502:	68fb      	ldr	r3, [r7, #12]
 8107504:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107508:	d901      	bls.n	810750e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810750a:	2303      	movs	r3, #3
 810750c:	e01b      	b.n	8107546 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810750e:	687b      	ldr	r3, [r7, #4]
 8107510:	691b      	ldr	r3, [r3, #16]
 8107512:	2b00      	cmp	r3, #0
 8107514:	daf2      	bge.n	81074fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8107516:	2300      	movs	r3, #0
 8107518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810751a:	687b      	ldr	r3, [r7, #4]
 810751c:	691b      	ldr	r3, [r3, #16]
 810751e:	f043 0201 	orr.w	r2, r3, #1
 8107522:	687b      	ldr	r3, [r7, #4]
 8107524:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8107526:	68fb      	ldr	r3, [r7, #12]
 8107528:	3301      	adds	r3, #1
 810752a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810752c:	68fb      	ldr	r3, [r7, #12]
 810752e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107532:	d901      	bls.n	8107538 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8107534:	2303      	movs	r3, #3
 8107536:	e006      	b.n	8107546 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8107538:	687b      	ldr	r3, [r7, #4]
 810753a:	691b      	ldr	r3, [r3, #16]
 810753c:	f003 0301 	and.w	r3, r3, #1
 8107540:	2b01      	cmp	r3, #1
 8107542:	d0f0      	beq.n	8107526 <USB_CoreReset+0x36>

  return HAL_OK;
 8107544:	2300      	movs	r3, #0
}
 8107546:	4618      	mov	r0, r3
 8107548:	3714      	adds	r7, #20
 810754a:	46bd      	mov	sp, r7
 810754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107550:	4770      	bx	lr
	...

08107554 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8107554:	b580      	push	{r7, lr}
 8107556:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8107558:	4b05      	ldr	r3, [pc, #20]	@ (8107570 <SysTick_Handler+0x1c>)
 810755a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810755c:	f000 f9fe 	bl	810795c <xTaskGetSchedulerState>
 8107560:	4603      	mov	r3, r0
 8107562:	2b01      	cmp	r3, #1
 8107564:	d001      	beq.n	810756a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8107566:	f000 f89f 	bl	81076a8 <xPortSysTickHandler>
  }
}
 810756a:	bf00      	nop
 810756c:	bd80      	pop	{r7, pc}
 810756e:	bf00      	nop
 8107570:	e000e010 	.word	0xe000e010

08107574 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8107574:	b480      	push	{r7}
 8107576:	b085      	sub	sp, #20
 8107578:	af00      	add	r7, sp, #0
 810757a:	6078      	str	r0, [r7, #4]
 810757c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810757e:	687b      	ldr	r3, [r7, #4]
 8107580:	685b      	ldr	r3, [r3, #4]
 8107582:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8107584:	683b      	ldr	r3, [r7, #0]
 8107586:	68fa      	ldr	r2, [r7, #12]
 8107588:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810758a:	68fb      	ldr	r3, [r7, #12]
 810758c:	689a      	ldr	r2, [r3, #8]
 810758e:	683b      	ldr	r3, [r7, #0]
 8107590:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8107592:	68fb      	ldr	r3, [r7, #12]
 8107594:	689b      	ldr	r3, [r3, #8]
 8107596:	683a      	ldr	r2, [r7, #0]
 8107598:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810759a:	68fb      	ldr	r3, [r7, #12]
 810759c:	683a      	ldr	r2, [r7, #0]
 810759e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81075a0:	683b      	ldr	r3, [r7, #0]
 81075a2:	687a      	ldr	r2, [r7, #4]
 81075a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	681b      	ldr	r3, [r3, #0]
 81075aa:	1c5a      	adds	r2, r3, #1
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	601a      	str	r2, [r3, #0]
}
 81075b0:	bf00      	nop
 81075b2:	3714      	adds	r7, #20
 81075b4:	46bd      	mov	sp, r7
 81075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075ba:	4770      	bx	lr

081075bc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 81075bc:	b480      	push	{r7}
 81075be:	b085      	sub	sp, #20
 81075c0:	af00      	add	r7, sp, #0
 81075c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 81075c4:	687b      	ldr	r3, [r7, #4]
 81075c6:	691b      	ldr	r3, [r3, #16]
 81075c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	685b      	ldr	r3, [r3, #4]
 81075ce:	687a      	ldr	r2, [r7, #4]
 81075d0:	6892      	ldr	r2, [r2, #8]
 81075d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 81075d4:	687b      	ldr	r3, [r7, #4]
 81075d6:	689b      	ldr	r3, [r3, #8]
 81075d8:	687a      	ldr	r2, [r7, #4]
 81075da:	6852      	ldr	r2, [r2, #4]
 81075dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81075de:	68fb      	ldr	r3, [r7, #12]
 81075e0:	685b      	ldr	r3, [r3, #4]
 81075e2:	687a      	ldr	r2, [r7, #4]
 81075e4:	429a      	cmp	r2, r3
 81075e6:	d103      	bne.n	81075f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81075e8:	687b      	ldr	r3, [r7, #4]
 81075ea:	689a      	ldr	r2, [r3, #8]
 81075ec:	68fb      	ldr	r3, [r7, #12]
 81075ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81075f0:	687b      	ldr	r3, [r7, #4]
 81075f2:	2200      	movs	r2, #0
 81075f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81075f6:	68fb      	ldr	r3, [r7, #12]
 81075f8:	681b      	ldr	r3, [r3, #0]
 81075fa:	1e5a      	subs	r2, r3, #1
 81075fc:	68fb      	ldr	r3, [r7, #12]
 81075fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8107600:	68fb      	ldr	r3, [r7, #12]
 8107602:	681b      	ldr	r3, [r3, #0]
}
 8107604:	4618      	mov	r0, r3
 8107606:	3714      	adds	r7, #20
 8107608:	46bd      	mov	sp, r7
 810760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810760e:	4770      	bx	lr

08107610 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8107610:	4b07      	ldr	r3, [pc, #28]	@ (8107630 <pxCurrentTCBConst2>)
 8107612:	6819      	ldr	r1, [r3, #0]
 8107614:	6808      	ldr	r0, [r1, #0]
 8107616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810761a:	f380 8809 	msr	PSP, r0
 810761e:	f3bf 8f6f 	isb	sy
 8107622:	f04f 0000 	mov.w	r0, #0
 8107626:	f380 8811 	msr	BASEPRI, r0
 810762a:	4770      	bx	lr
 810762c:	f3af 8000 	nop.w

08107630 <pxCurrentTCBConst2>:
 8107630:	10000858 	.word	0x10000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8107634:	bf00      	nop
 8107636:	bf00      	nop
	...

08107640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8107640:	f3ef 8009 	mrs	r0, PSP
 8107644:	f3bf 8f6f 	isb	sy
 8107648:	4b15      	ldr	r3, [pc, #84]	@ (81076a0 <pxCurrentTCBConst>)
 810764a:	681a      	ldr	r2, [r3, #0]
 810764c:	f01e 0f10 	tst.w	lr, #16
 8107650:	bf08      	it	eq
 8107652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8107656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810765a:	6010      	str	r0, [r2, #0]
 810765c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8107660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8107664:	f380 8811 	msr	BASEPRI, r0
 8107668:	f3bf 8f4f 	dsb	sy
 810766c:	f3bf 8f6f 	isb	sy
 8107670:	f000 f8f6 	bl	8107860 <vTaskSwitchContext>
 8107674:	f04f 0000 	mov.w	r0, #0
 8107678:	f380 8811 	msr	BASEPRI, r0
 810767c:	bc09      	pop	{r0, r3}
 810767e:	6819      	ldr	r1, [r3, #0]
 8107680:	6808      	ldr	r0, [r1, #0]
 8107682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107686:	f01e 0f10 	tst.w	lr, #16
 810768a:	bf08      	it	eq
 810768c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8107690:	f380 8809 	msr	PSP, r0
 8107694:	f3bf 8f6f 	isb	sy
 8107698:	4770      	bx	lr
 810769a:	bf00      	nop
 810769c:	f3af 8000 	nop.w

081076a0 <pxCurrentTCBConst>:
 81076a0:	10000858 	.word	0x10000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81076a4:	bf00      	nop
 81076a6:	bf00      	nop

081076a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81076a8:	b580      	push	{r7, lr}
 81076aa:	b082      	sub	sp, #8
 81076ac:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81076b2:	f383 8811 	msr	BASEPRI, r3
 81076b6:	f3bf 8f6f 	isb	sy
 81076ba:	f3bf 8f4f 	dsb	sy
 81076be:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81076c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 81076c2:	f000 f813 	bl	81076ec <xTaskIncrementTick>
 81076c6:	4603      	mov	r3, r0
 81076c8:	2b00      	cmp	r3, #0
 81076ca:	d003      	beq.n	81076d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 81076cc:	4b06      	ldr	r3, [pc, #24]	@ (81076e8 <xPortSysTickHandler+0x40>)
 81076ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81076d2:	601a      	str	r2, [r3, #0]
 81076d4:	2300      	movs	r3, #0
 81076d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81076d8:	683b      	ldr	r3, [r7, #0]
 81076da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81076de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 81076e0:	bf00      	nop
 81076e2:	3708      	adds	r7, #8
 81076e4:	46bd      	mov	sp, r7
 81076e6:	bd80      	pop	{r7, pc}
 81076e8:	e000ed04 	.word	0xe000ed04

081076ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81076ec:	b580      	push	{r7, lr}
 81076ee:	b086      	sub	sp, #24
 81076f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81076f2:	2300      	movs	r3, #0
 81076f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81076f6:	4b4f      	ldr	r3, [pc, #316]	@ (8107834 <xTaskIncrementTick+0x148>)
 81076f8:	681b      	ldr	r3, [r3, #0]
 81076fa:	2b00      	cmp	r3, #0
 81076fc:	f040 8090 	bne.w	8107820 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8107700:	4b4d      	ldr	r3, [pc, #308]	@ (8107838 <xTaskIncrementTick+0x14c>)
 8107702:	681b      	ldr	r3, [r3, #0]
 8107704:	3301      	adds	r3, #1
 8107706:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8107708:	4a4b      	ldr	r2, [pc, #300]	@ (8107838 <xTaskIncrementTick+0x14c>)
 810770a:	693b      	ldr	r3, [r7, #16]
 810770c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810770e:	693b      	ldr	r3, [r7, #16]
 8107710:	2b00      	cmp	r3, #0
 8107712:	d121      	bne.n	8107758 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8107714:	4b49      	ldr	r3, [pc, #292]	@ (810783c <xTaskIncrementTick+0x150>)
 8107716:	681b      	ldr	r3, [r3, #0]
 8107718:	681b      	ldr	r3, [r3, #0]
 810771a:	2b00      	cmp	r3, #0
 810771c:	d00b      	beq.n	8107736 <xTaskIncrementTick+0x4a>
	__asm volatile
 810771e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107722:	f383 8811 	msr	BASEPRI, r3
 8107726:	f3bf 8f6f 	isb	sy
 810772a:	f3bf 8f4f 	dsb	sy
 810772e:	603b      	str	r3, [r7, #0]
}
 8107730:	bf00      	nop
 8107732:	bf00      	nop
 8107734:	e7fd      	b.n	8107732 <xTaskIncrementTick+0x46>
 8107736:	4b41      	ldr	r3, [pc, #260]	@ (810783c <xTaskIncrementTick+0x150>)
 8107738:	681b      	ldr	r3, [r3, #0]
 810773a:	60fb      	str	r3, [r7, #12]
 810773c:	4b40      	ldr	r3, [pc, #256]	@ (8107840 <xTaskIncrementTick+0x154>)
 810773e:	681b      	ldr	r3, [r3, #0]
 8107740:	4a3e      	ldr	r2, [pc, #248]	@ (810783c <xTaskIncrementTick+0x150>)
 8107742:	6013      	str	r3, [r2, #0]
 8107744:	4a3e      	ldr	r2, [pc, #248]	@ (8107840 <xTaskIncrementTick+0x154>)
 8107746:	68fb      	ldr	r3, [r7, #12]
 8107748:	6013      	str	r3, [r2, #0]
 810774a:	4b3e      	ldr	r3, [pc, #248]	@ (8107844 <xTaskIncrementTick+0x158>)
 810774c:	681b      	ldr	r3, [r3, #0]
 810774e:	3301      	adds	r3, #1
 8107750:	4a3c      	ldr	r2, [pc, #240]	@ (8107844 <xTaskIncrementTick+0x158>)
 8107752:	6013      	str	r3, [r2, #0]
 8107754:	f000 f8e2 	bl	810791c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8107758:	4b3b      	ldr	r3, [pc, #236]	@ (8107848 <xTaskIncrementTick+0x15c>)
 810775a:	681b      	ldr	r3, [r3, #0]
 810775c:	693a      	ldr	r2, [r7, #16]
 810775e:	429a      	cmp	r2, r3
 8107760:	d349      	bcc.n	81077f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107762:	4b36      	ldr	r3, [pc, #216]	@ (810783c <xTaskIncrementTick+0x150>)
 8107764:	681b      	ldr	r3, [r3, #0]
 8107766:	681b      	ldr	r3, [r3, #0]
 8107768:	2b00      	cmp	r3, #0
 810776a:	d104      	bne.n	8107776 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810776c:	4b36      	ldr	r3, [pc, #216]	@ (8107848 <xTaskIncrementTick+0x15c>)
 810776e:	f04f 32ff 	mov.w	r2, #4294967295
 8107772:	601a      	str	r2, [r3, #0]
					break;
 8107774:	e03f      	b.n	81077f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107776:	4b31      	ldr	r3, [pc, #196]	@ (810783c <xTaskIncrementTick+0x150>)
 8107778:	681b      	ldr	r3, [r3, #0]
 810777a:	68db      	ldr	r3, [r3, #12]
 810777c:	68db      	ldr	r3, [r3, #12]
 810777e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8107780:	68bb      	ldr	r3, [r7, #8]
 8107782:	685b      	ldr	r3, [r3, #4]
 8107784:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8107786:	693a      	ldr	r2, [r7, #16]
 8107788:	687b      	ldr	r3, [r7, #4]
 810778a:	429a      	cmp	r2, r3
 810778c:	d203      	bcs.n	8107796 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810778e:	4a2e      	ldr	r2, [pc, #184]	@ (8107848 <xTaskIncrementTick+0x15c>)
 8107790:	687b      	ldr	r3, [r7, #4]
 8107792:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8107794:	e02f      	b.n	81077f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107796:	68bb      	ldr	r3, [r7, #8]
 8107798:	3304      	adds	r3, #4
 810779a:	4618      	mov	r0, r3
 810779c:	f7ff ff0e 	bl	81075bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 81077a0:	68bb      	ldr	r3, [r7, #8]
 81077a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81077a4:	2b00      	cmp	r3, #0
 81077a6:	d004      	beq.n	81077b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81077a8:	68bb      	ldr	r3, [r7, #8]
 81077aa:	3318      	adds	r3, #24
 81077ac:	4618      	mov	r0, r3
 81077ae:	f7ff ff05 	bl	81075bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 81077b2:	68bb      	ldr	r3, [r7, #8]
 81077b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81077b6:	4b25      	ldr	r3, [pc, #148]	@ (810784c <xTaskIncrementTick+0x160>)
 81077b8:	681b      	ldr	r3, [r3, #0]
 81077ba:	429a      	cmp	r2, r3
 81077bc:	d903      	bls.n	81077c6 <xTaskIncrementTick+0xda>
 81077be:	68bb      	ldr	r3, [r7, #8]
 81077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81077c2:	4a22      	ldr	r2, [pc, #136]	@ (810784c <xTaskIncrementTick+0x160>)
 81077c4:	6013      	str	r3, [r2, #0]
 81077c6:	68bb      	ldr	r3, [r7, #8]
 81077c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81077ca:	4613      	mov	r3, r2
 81077cc:	009b      	lsls	r3, r3, #2
 81077ce:	4413      	add	r3, r2
 81077d0:	009b      	lsls	r3, r3, #2
 81077d2:	4a1f      	ldr	r2, [pc, #124]	@ (8107850 <xTaskIncrementTick+0x164>)
 81077d4:	441a      	add	r2, r3
 81077d6:	68bb      	ldr	r3, [r7, #8]
 81077d8:	3304      	adds	r3, #4
 81077da:	4619      	mov	r1, r3
 81077dc:	4610      	mov	r0, r2
 81077de:	f7ff fec9 	bl	8107574 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81077e2:	68bb      	ldr	r3, [r7, #8]
 81077e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81077e6:	4b1b      	ldr	r3, [pc, #108]	@ (8107854 <xTaskIncrementTick+0x168>)
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81077ec:	429a      	cmp	r2, r3
 81077ee:	d3b8      	bcc.n	8107762 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 81077f0:	2301      	movs	r3, #1
 81077f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81077f4:	e7b5      	b.n	8107762 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81077f6:	4b17      	ldr	r3, [pc, #92]	@ (8107854 <xTaskIncrementTick+0x168>)
 81077f8:	681b      	ldr	r3, [r3, #0]
 81077fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81077fc:	4914      	ldr	r1, [pc, #80]	@ (8107850 <xTaskIncrementTick+0x164>)
 81077fe:	4613      	mov	r3, r2
 8107800:	009b      	lsls	r3, r3, #2
 8107802:	4413      	add	r3, r2
 8107804:	009b      	lsls	r3, r3, #2
 8107806:	440b      	add	r3, r1
 8107808:	681b      	ldr	r3, [r3, #0]
 810780a:	2b01      	cmp	r3, #1
 810780c:	d901      	bls.n	8107812 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810780e:	2301      	movs	r3, #1
 8107810:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8107812:	4b11      	ldr	r3, [pc, #68]	@ (8107858 <xTaskIncrementTick+0x16c>)
 8107814:	681b      	ldr	r3, [r3, #0]
 8107816:	2b00      	cmp	r3, #0
 8107818:	d007      	beq.n	810782a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810781a:	2301      	movs	r3, #1
 810781c:	617b      	str	r3, [r7, #20]
 810781e:	e004      	b.n	810782a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8107820:	4b0e      	ldr	r3, [pc, #56]	@ (810785c <xTaskIncrementTick+0x170>)
 8107822:	681b      	ldr	r3, [r3, #0]
 8107824:	3301      	adds	r3, #1
 8107826:	4a0d      	ldr	r2, [pc, #52]	@ (810785c <xTaskIncrementTick+0x170>)
 8107828:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810782a:	697b      	ldr	r3, [r7, #20]
}
 810782c:	4618      	mov	r0, r3
 810782e:	3718      	adds	r7, #24
 8107830:	46bd      	mov	sp, r7
 8107832:	bd80      	pop	{r7, pc}
 8107834:	10000ce0 	.word	0x10000ce0
 8107838:	10000cc4 	.word	0x10000cc4
 810783c:	10000cbc 	.word	0x10000cbc
 8107840:	10000cc0 	.word	0x10000cc0
 8107844:	10000cd8 	.word	0x10000cd8
 8107848:	10000cdc 	.word	0x10000cdc
 810784c:	10000cc8 	.word	0x10000cc8
 8107850:	1000085c 	.word	0x1000085c
 8107854:	10000858 	.word	0x10000858
 8107858:	10000cd4 	.word	0x10000cd4
 810785c:	10000cd0 	.word	0x10000cd0

08107860 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8107860:	b480      	push	{r7}
 8107862:	b085      	sub	sp, #20
 8107864:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8107866:	4b28      	ldr	r3, [pc, #160]	@ (8107908 <vTaskSwitchContext+0xa8>)
 8107868:	681b      	ldr	r3, [r3, #0]
 810786a:	2b00      	cmp	r3, #0
 810786c:	d003      	beq.n	8107876 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810786e:	4b27      	ldr	r3, [pc, #156]	@ (810790c <vTaskSwitchContext+0xac>)
 8107870:	2201      	movs	r2, #1
 8107872:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8107874:	e042      	b.n	81078fc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8107876:	4b25      	ldr	r3, [pc, #148]	@ (810790c <vTaskSwitchContext+0xac>)
 8107878:	2200      	movs	r2, #0
 810787a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810787c:	4b24      	ldr	r3, [pc, #144]	@ (8107910 <vTaskSwitchContext+0xb0>)
 810787e:	681b      	ldr	r3, [r3, #0]
 8107880:	60fb      	str	r3, [r7, #12]
 8107882:	e011      	b.n	81078a8 <vTaskSwitchContext+0x48>
 8107884:	68fb      	ldr	r3, [r7, #12]
 8107886:	2b00      	cmp	r3, #0
 8107888:	d10b      	bne.n	81078a2 <vTaskSwitchContext+0x42>
	__asm volatile
 810788a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810788e:	f383 8811 	msr	BASEPRI, r3
 8107892:	f3bf 8f6f 	isb	sy
 8107896:	f3bf 8f4f 	dsb	sy
 810789a:	607b      	str	r3, [r7, #4]
}
 810789c:	bf00      	nop
 810789e:	bf00      	nop
 81078a0:	e7fd      	b.n	810789e <vTaskSwitchContext+0x3e>
 81078a2:	68fb      	ldr	r3, [r7, #12]
 81078a4:	3b01      	subs	r3, #1
 81078a6:	60fb      	str	r3, [r7, #12]
 81078a8:	491a      	ldr	r1, [pc, #104]	@ (8107914 <vTaskSwitchContext+0xb4>)
 81078aa:	68fa      	ldr	r2, [r7, #12]
 81078ac:	4613      	mov	r3, r2
 81078ae:	009b      	lsls	r3, r3, #2
 81078b0:	4413      	add	r3, r2
 81078b2:	009b      	lsls	r3, r3, #2
 81078b4:	440b      	add	r3, r1
 81078b6:	681b      	ldr	r3, [r3, #0]
 81078b8:	2b00      	cmp	r3, #0
 81078ba:	d0e3      	beq.n	8107884 <vTaskSwitchContext+0x24>
 81078bc:	68fa      	ldr	r2, [r7, #12]
 81078be:	4613      	mov	r3, r2
 81078c0:	009b      	lsls	r3, r3, #2
 81078c2:	4413      	add	r3, r2
 81078c4:	009b      	lsls	r3, r3, #2
 81078c6:	4a13      	ldr	r2, [pc, #76]	@ (8107914 <vTaskSwitchContext+0xb4>)
 81078c8:	4413      	add	r3, r2
 81078ca:	60bb      	str	r3, [r7, #8]
 81078cc:	68bb      	ldr	r3, [r7, #8]
 81078ce:	685b      	ldr	r3, [r3, #4]
 81078d0:	685a      	ldr	r2, [r3, #4]
 81078d2:	68bb      	ldr	r3, [r7, #8]
 81078d4:	605a      	str	r2, [r3, #4]
 81078d6:	68bb      	ldr	r3, [r7, #8]
 81078d8:	685a      	ldr	r2, [r3, #4]
 81078da:	68bb      	ldr	r3, [r7, #8]
 81078dc:	3308      	adds	r3, #8
 81078de:	429a      	cmp	r2, r3
 81078e0:	d104      	bne.n	81078ec <vTaskSwitchContext+0x8c>
 81078e2:	68bb      	ldr	r3, [r7, #8]
 81078e4:	685b      	ldr	r3, [r3, #4]
 81078e6:	685a      	ldr	r2, [r3, #4]
 81078e8:	68bb      	ldr	r3, [r7, #8]
 81078ea:	605a      	str	r2, [r3, #4]
 81078ec:	68bb      	ldr	r3, [r7, #8]
 81078ee:	685b      	ldr	r3, [r3, #4]
 81078f0:	68db      	ldr	r3, [r3, #12]
 81078f2:	4a09      	ldr	r2, [pc, #36]	@ (8107918 <vTaskSwitchContext+0xb8>)
 81078f4:	6013      	str	r3, [r2, #0]
 81078f6:	4a06      	ldr	r2, [pc, #24]	@ (8107910 <vTaskSwitchContext+0xb0>)
 81078f8:	68fb      	ldr	r3, [r7, #12]
 81078fa:	6013      	str	r3, [r2, #0]
}
 81078fc:	bf00      	nop
 81078fe:	3714      	adds	r7, #20
 8107900:	46bd      	mov	sp, r7
 8107902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107906:	4770      	bx	lr
 8107908:	10000ce0 	.word	0x10000ce0
 810790c:	10000cd4 	.word	0x10000cd4
 8107910:	10000cc8 	.word	0x10000cc8
 8107914:	1000085c 	.word	0x1000085c
 8107918:	10000858 	.word	0x10000858

0810791c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810791c:	b480      	push	{r7}
 810791e:	b083      	sub	sp, #12
 8107920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107922:	4b0c      	ldr	r3, [pc, #48]	@ (8107954 <prvResetNextTaskUnblockTime+0x38>)
 8107924:	681b      	ldr	r3, [r3, #0]
 8107926:	681b      	ldr	r3, [r3, #0]
 8107928:	2b00      	cmp	r3, #0
 810792a:	d104      	bne.n	8107936 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810792c:	4b0a      	ldr	r3, [pc, #40]	@ (8107958 <prvResetNextTaskUnblockTime+0x3c>)
 810792e:	f04f 32ff 	mov.w	r2, #4294967295
 8107932:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8107934:	e008      	b.n	8107948 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107936:	4b07      	ldr	r3, [pc, #28]	@ (8107954 <prvResetNextTaskUnblockTime+0x38>)
 8107938:	681b      	ldr	r3, [r3, #0]
 810793a:	68db      	ldr	r3, [r3, #12]
 810793c:	68db      	ldr	r3, [r3, #12]
 810793e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8107940:	687b      	ldr	r3, [r7, #4]
 8107942:	685b      	ldr	r3, [r3, #4]
 8107944:	4a04      	ldr	r2, [pc, #16]	@ (8107958 <prvResetNextTaskUnblockTime+0x3c>)
 8107946:	6013      	str	r3, [r2, #0]
}
 8107948:	bf00      	nop
 810794a:	370c      	adds	r7, #12
 810794c:	46bd      	mov	sp, r7
 810794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107952:	4770      	bx	lr
 8107954:	10000cbc 	.word	0x10000cbc
 8107958:	10000cdc 	.word	0x10000cdc

0810795c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810795c:	b480      	push	{r7}
 810795e:	b083      	sub	sp, #12
 8107960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8107962:	4b0b      	ldr	r3, [pc, #44]	@ (8107990 <xTaskGetSchedulerState+0x34>)
 8107964:	681b      	ldr	r3, [r3, #0]
 8107966:	2b00      	cmp	r3, #0
 8107968:	d102      	bne.n	8107970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810796a:	2301      	movs	r3, #1
 810796c:	607b      	str	r3, [r7, #4]
 810796e:	e008      	b.n	8107982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107970:	4b08      	ldr	r3, [pc, #32]	@ (8107994 <xTaskGetSchedulerState+0x38>)
 8107972:	681b      	ldr	r3, [r3, #0]
 8107974:	2b00      	cmp	r3, #0
 8107976:	d102      	bne.n	810797e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8107978:	2302      	movs	r3, #2
 810797a:	607b      	str	r3, [r7, #4]
 810797c:	e001      	b.n	8107982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810797e:	2300      	movs	r3, #0
 8107980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8107982:	687b      	ldr	r3, [r7, #4]
	}
 8107984:	4618      	mov	r0, r3
 8107986:	370c      	adds	r7, #12
 8107988:	46bd      	mov	sp, r7
 810798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810798e:	4770      	bx	lr
 8107990:	10000ccc 	.word	0x10000ccc
 8107994:	10000ce0 	.word	0x10000ce0

08107998 <std>:
 8107998:	2300      	movs	r3, #0
 810799a:	b510      	push	{r4, lr}
 810799c:	4604      	mov	r4, r0
 810799e:	e9c0 3300 	strd	r3, r3, [r0]
 81079a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81079a6:	6083      	str	r3, [r0, #8]
 81079a8:	8181      	strh	r1, [r0, #12]
 81079aa:	6643      	str	r3, [r0, #100]	@ 0x64
 81079ac:	81c2      	strh	r2, [r0, #14]
 81079ae:	6183      	str	r3, [r0, #24]
 81079b0:	4619      	mov	r1, r3
 81079b2:	2208      	movs	r2, #8
 81079b4:	305c      	adds	r0, #92	@ 0x5c
 81079b6:	f000 f9f9 	bl	8107dac <memset>
 81079ba:	4b0d      	ldr	r3, [pc, #52]	@ (81079f0 <std+0x58>)
 81079bc:	6263      	str	r3, [r4, #36]	@ 0x24
 81079be:	4b0d      	ldr	r3, [pc, #52]	@ (81079f4 <std+0x5c>)
 81079c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 81079c2:	4b0d      	ldr	r3, [pc, #52]	@ (81079f8 <std+0x60>)
 81079c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 81079c6:	4b0d      	ldr	r3, [pc, #52]	@ (81079fc <std+0x64>)
 81079c8:	6323      	str	r3, [r4, #48]	@ 0x30
 81079ca:	4b0d      	ldr	r3, [pc, #52]	@ (8107a00 <std+0x68>)
 81079cc:	6224      	str	r4, [r4, #32]
 81079ce:	429c      	cmp	r4, r3
 81079d0:	d006      	beq.n	81079e0 <std+0x48>
 81079d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 81079d6:	4294      	cmp	r4, r2
 81079d8:	d002      	beq.n	81079e0 <std+0x48>
 81079da:	33d0      	adds	r3, #208	@ 0xd0
 81079dc:	429c      	cmp	r4, r3
 81079de:	d105      	bne.n	81079ec <std+0x54>
 81079e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 81079e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81079e8:	f000 ba58 	b.w	8107e9c <__retarget_lock_init_recursive>
 81079ec:	bd10      	pop	{r4, pc}
 81079ee:	bf00      	nop
 81079f0:	08107bfd 	.word	0x08107bfd
 81079f4:	08107c1f 	.word	0x08107c1f
 81079f8:	08107c57 	.word	0x08107c57
 81079fc:	08107c7b 	.word	0x08107c7b
 8107a00:	10000ce4 	.word	0x10000ce4

08107a04 <stdio_exit_handler>:
 8107a04:	4a02      	ldr	r2, [pc, #8]	@ (8107a10 <stdio_exit_handler+0xc>)
 8107a06:	4903      	ldr	r1, [pc, #12]	@ (8107a14 <stdio_exit_handler+0x10>)
 8107a08:	4803      	ldr	r0, [pc, #12]	@ (8107a18 <stdio_exit_handler+0x14>)
 8107a0a:	f000 b869 	b.w	8107ae0 <_fwalk_sglue>
 8107a0e:	bf00      	nop
 8107a10:	10000010 	.word	0x10000010
 8107a14:	08108755 	.word	0x08108755
 8107a18:	10000020 	.word	0x10000020

08107a1c <cleanup_stdio>:
 8107a1c:	6841      	ldr	r1, [r0, #4]
 8107a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8107a50 <cleanup_stdio+0x34>)
 8107a20:	4299      	cmp	r1, r3
 8107a22:	b510      	push	{r4, lr}
 8107a24:	4604      	mov	r4, r0
 8107a26:	d001      	beq.n	8107a2c <cleanup_stdio+0x10>
 8107a28:	f000 fe94 	bl	8108754 <_fflush_r>
 8107a2c:	68a1      	ldr	r1, [r4, #8]
 8107a2e:	4b09      	ldr	r3, [pc, #36]	@ (8107a54 <cleanup_stdio+0x38>)
 8107a30:	4299      	cmp	r1, r3
 8107a32:	d002      	beq.n	8107a3a <cleanup_stdio+0x1e>
 8107a34:	4620      	mov	r0, r4
 8107a36:	f000 fe8d 	bl	8108754 <_fflush_r>
 8107a3a:	68e1      	ldr	r1, [r4, #12]
 8107a3c:	4b06      	ldr	r3, [pc, #24]	@ (8107a58 <cleanup_stdio+0x3c>)
 8107a3e:	4299      	cmp	r1, r3
 8107a40:	d004      	beq.n	8107a4c <cleanup_stdio+0x30>
 8107a42:	4620      	mov	r0, r4
 8107a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107a48:	f000 be84 	b.w	8108754 <_fflush_r>
 8107a4c:	bd10      	pop	{r4, pc}
 8107a4e:	bf00      	nop
 8107a50:	10000ce4 	.word	0x10000ce4
 8107a54:	10000d4c 	.word	0x10000d4c
 8107a58:	10000db4 	.word	0x10000db4

08107a5c <global_stdio_init.part.0>:
 8107a5c:	b510      	push	{r4, lr}
 8107a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8107a8c <global_stdio_init.part.0+0x30>)
 8107a60:	4c0b      	ldr	r4, [pc, #44]	@ (8107a90 <global_stdio_init.part.0+0x34>)
 8107a62:	4a0c      	ldr	r2, [pc, #48]	@ (8107a94 <global_stdio_init.part.0+0x38>)
 8107a64:	601a      	str	r2, [r3, #0]
 8107a66:	4620      	mov	r0, r4
 8107a68:	2200      	movs	r2, #0
 8107a6a:	2104      	movs	r1, #4
 8107a6c:	f7ff ff94 	bl	8107998 <std>
 8107a70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8107a74:	2201      	movs	r2, #1
 8107a76:	2109      	movs	r1, #9
 8107a78:	f7ff ff8e 	bl	8107998 <std>
 8107a7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8107a80:	2202      	movs	r2, #2
 8107a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107a86:	2112      	movs	r1, #18
 8107a88:	f7ff bf86 	b.w	8107998 <std>
 8107a8c:	10000e1c 	.word	0x10000e1c
 8107a90:	10000ce4 	.word	0x10000ce4
 8107a94:	08107a05 	.word	0x08107a05

08107a98 <__sfp_lock_acquire>:
 8107a98:	4801      	ldr	r0, [pc, #4]	@ (8107aa0 <__sfp_lock_acquire+0x8>)
 8107a9a:	f000 ba00 	b.w	8107e9e <__retarget_lock_acquire_recursive>
 8107a9e:	bf00      	nop
 8107aa0:	10000e25 	.word	0x10000e25

08107aa4 <__sfp_lock_release>:
 8107aa4:	4801      	ldr	r0, [pc, #4]	@ (8107aac <__sfp_lock_release+0x8>)
 8107aa6:	f000 b9fb 	b.w	8107ea0 <__retarget_lock_release_recursive>
 8107aaa:	bf00      	nop
 8107aac:	10000e25 	.word	0x10000e25

08107ab0 <__sinit>:
 8107ab0:	b510      	push	{r4, lr}
 8107ab2:	4604      	mov	r4, r0
 8107ab4:	f7ff fff0 	bl	8107a98 <__sfp_lock_acquire>
 8107ab8:	6a23      	ldr	r3, [r4, #32]
 8107aba:	b11b      	cbz	r3, 8107ac4 <__sinit+0x14>
 8107abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107ac0:	f7ff bff0 	b.w	8107aa4 <__sfp_lock_release>
 8107ac4:	4b04      	ldr	r3, [pc, #16]	@ (8107ad8 <__sinit+0x28>)
 8107ac6:	6223      	str	r3, [r4, #32]
 8107ac8:	4b04      	ldr	r3, [pc, #16]	@ (8107adc <__sinit+0x2c>)
 8107aca:	681b      	ldr	r3, [r3, #0]
 8107acc:	2b00      	cmp	r3, #0
 8107ace:	d1f5      	bne.n	8107abc <__sinit+0xc>
 8107ad0:	f7ff ffc4 	bl	8107a5c <global_stdio_init.part.0>
 8107ad4:	e7f2      	b.n	8107abc <__sinit+0xc>
 8107ad6:	bf00      	nop
 8107ad8:	08107a1d 	.word	0x08107a1d
 8107adc:	10000e1c 	.word	0x10000e1c

08107ae0 <_fwalk_sglue>:
 8107ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107ae4:	4607      	mov	r7, r0
 8107ae6:	4688      	mov	r8, r1
 8107ae8:	4614      	mov	r4, r2
 8107aea:	2600      	movs	r6, #0
 8107aec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8107af0:	f1b9 0901 	subs.w	r9, r9, #1
 8107af4:	d505      	bpl.n	8107b02 <_fwalk_sglue+0x22>
 8107af6:	6824      	ldr	r4, [r4, #0]
 8107af8:	2c00      	cmp	r4, #0
 8107afa:	d1f7      	bne.n	8107aec <_fwalk_sglue+0xc>
 8107afc:	4630      	mov	r0, r6
 8107afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107b02:	89ab      	ldrh	r3, [r5, #12]
 8107b04:	2b01      	cmp	r3, #1
 8107b06:	d907      	bls.n	8107b18 <_fwalk_sglue+0x38>
 8107b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8107b0c:	3301      	adds	r3, #1
 8107b0e:	d003      	beq.n	8107b18 <_fwalk_sglue+0x38>
 8107b10:	4629      	mov	r1, r5
 8107b12:	4638      	mov	r0, r7
 8107b14:	47c0      	blx	r8
 8107b16:	4306      	orrs	r6, r0
 8107b18:	3568      	adds	r5, #104	@ 0x68
 8107b1a:	e7e9      	b.n	8107af0 <_fwalk_sglue+0x10>

08107b1c <iprintf>:
 8107b1c:	b40f      	push	{r0, r1, r2, r3}
 8107b1e:	b507      	push	{r0, r1, r2, lr}
 8107b20:	4906      	ldr	r1, [pc, #24]	@ (8107b3c <iprintf+0x20>)
 8107b22:	ab04      	add	r3, sp, #16
 8107b24:	6808      	ldr	r0, [r1, #0]
 8107b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8107b2a:	6881      	ldr	r1, [r0, #8]
 8107b2c:	9301      	str	r3, [sp, #4]
 8107b2e:	f000 fae9 	bl	8108104 <_vfiprintf_r>
 8107b32:	b003      	add	sp, #12
 8107b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8107b38:	b004      	add	sp, #16
 8107b3a:	4770      	bx	lr
 8107b3c:	1000001c 	.word	0x1000001c

08107b40 <_puts_r>:
 8107b40:	6a03      	ldr	r3, [r0, #32]
 8107b42:	b570      	push	{r4, r5, r6, lr}
 8107b44:	6884      	ldr	r4, [r0, #8]
 8107b46:	4605      	mov	r5, r0
 8107b48:	460e      	mov	r6, r1
 8107b4a:	b90b      	cbnz	r3, 8107b50 <_puts_r+0x10>
 8107b4c:	f7ff ffb0 	bl	8107ab0 <__sinit>
 8107b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8107b52:	07db      	lsls	r3, r3, #31
 8107b54:	d405      	bmi.n	8107b62 <_puts_r+0x22>
 8107b56:	89a3      	ldrh	r3, [r4, #12]
 8107b58:	0598      	lsls	r0, r3, #22
 8107b5a:	d402      	bmi.n	8107b62 <_puts_r+0x22>
 8107b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8107b5e:	f000 f99e 	bl	8107e9e <__retarget_lock_acquire_recursive>
 8107b62:	89a3      	ldrh	r3, [r4, #12]
 8107b64:	0719      	lsls	r1, r3, #28
 8107b66:	d502      	bpl.n	8107b6e <_puts_r+0x2e>
 8107b68:	6923      	ldr	r3, [r4, #16]
 8107b6a:	2b00      	cmp	r3, #0
 8107b6c:	d135      	bne.n	8107bda <_puts_r+0x9a>
 8107b6e:	4621      	mov	r1, r4
 8107b70:	4628      	mov	r0, r5
 8107b72:	f000 f8c5 	bl	8107d00 <__swsetup_r>
 8107b76:	b380      	cbz	r0, 8107bda <_puts_r+0x9a>
 8107b78:	f04f 35ff 	mov.w	r5, #4294967295
 8107b7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8107b7e:	07da      	lsls	r2, r3, #31
 8107b80:	d405      	bmi.n	8107b8e <_puts_r+0x4e>
 8107b82:	89a3      	ldrh	r3, [r4, #12]
 8107b84:	059b      	lsls	r3, r3, #22
 8107b86:	d402      	bmi.n	8107b8e <_puts_r+0x4e>
 8107b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8107b8a:	f000 f989 	bl	8107ea0 <__retarget_lock_release_recursive>
 8107b8e:	4628      	mov	r0, r5
 8107b90:	bd70      	pop	{r4, r5, r6, pc}
 8107b92:	2b00      	cmp	r3, #0
 8107b94:	da04      	bge.n	8107ba0 <_puts_r+0x60>
 8107b96:	69a2      	ldr	r2, [r4, #24]
 8107b98:	429a      	cmp	r2, r3
 8107b9a:	dc17      	bgt.n	8107bcc <_puts_r+0x8c>
 8107b9c:	290a      	cmp	r1, #10
 8107b9e:	d015      	beq.n	8107bcc <_puts_r+0x8c>
 8107ba0:	6823      	ldr	r3, [r4, #0]
 8107ba2:	1c5a      	adds	r2, r3, #1
 8107ba4:	6022      	str	r2, [r4, #0]
 8107ba6:	7019      	strb	r1, [r3, #0]
 8107ba8:	68a3      	ldr	r3, [r4, #8]
 8107baa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8107bae:	3b01      	subs	r3, #1
 8107bb0:	60a3      	str	r3, [r4, #8]
 8107bb2:	2900      	cmp	r1, #0
 8107bb4:	d1ed      	bne.n	8107b92 <_puts_r+0x52>
 8107bb6:	2b00      	cmp	r3, #0
 8107bb8:	da11      	bge.n	8107bde <_puts_r+0x9e>
 8107bba:	4622      	mov	r2, r4
 8107bbc:	210a      	movs	r1, #10
 8107bbe:	4628      	mov	r0, r5
 8107bc0:	f000 f85f 	bl	8107c82 <__swbuf_r>
 8107bc4:	3001      	adds	r0, #1
 8107bc6:	d0d7      	beq.n	8107b78 <_puts_r+0x38>
 8107bc8:	250a      	movs	r5, #10
 8107bca:	e7d7      	b.n	8107b7c <_puts_r+0x3c>
 8107bcc:	4622      	mov	r2, r4
 8107bce:	4628      	mov	r0, r5
 8107bd0:	f000 f857 	bl	8107c82 <__swbuf_r>
 8107bd4:	3001      	adds	r0, #1
 8107bd6:	d1e7      	bne.n	8107ba8 <_puts_r+0x68>
 8107bd8:	e7ce      	b.n	8107b78 <_puts_r+0x38>
 8107bda:	3e01      	subs	r6, #1
 8107bdc:	e7e4      	b.n	8107ba8 <_puts_r+0x68>
 8107bde:	6823      	ldr	r3, [r4, #0]
 8107be0:	1c5a      	adds	r2, r3, #1
 8107be2:	6022      	str	r2, [r4, #0]
 8107be4:	220a      	movs	r2, #10
 8107be6:	701a      	strb	r2, [r3, #0]
 8107be8:	e7ee      	b.n	8107bc8 <_puts_r+0x88>
	...

08107bec <puts>:
 8107bec:	4b02      	ldr	r3, [pc, #8]	@ (8107bf8 <puts+0xc>)
 8107bee:	4601      	mov	r1, r0
 8107bf0:	6818      	ldr	r0, [r3, #0]
 8107bf2:	f7ff bfa5 	b.w	8107b40 <_puts_r>
 8107bf6:	bf00      	nop
 8107bf8:	1000001c 	.word	0x1000001c

08107bfc <__sread>:
 8107bfc:	b510      	push	{r4, lr}
 8107bfe:	460c      	mov	r4, r1
 8107c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107c04:	f000 f8fc 	bl	8107e00 <_read_r>
 8107c08:	2800      	cmp	r0, #0
 8107c0a:	bfab      	itete	ge
 8107c0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8107c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8107c10:	181b      	addge	r3, r3, r0
 8107c12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8107c16:	bfac      	ite	ge
 8107c18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8107c1a:	81a3      	strhlt	r3, [r4, #12]
 8107c1c:	bd10      	pop	{r4, pc}

08107c1e <__swrite>:
 8107c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107c22:	461f      	mov	r7, r3
 8107c24:	898b      	ldrh	r3, [r1, #12]
 8107c26:	05db      	lsls	r3, r3, #23
 8107c28:	4605      	mov	r5, r0
 8107c2a:	460c      	mov	r4, r1
 8107c2c:	4616      	mov	r6, r2
 8107c2e:	d505      	bpl.n	8107c3c <__swrite+0x1e>
 8107c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107c34:	2302      	movs	r3, #2
 8107c36:	2200      	movs	r2, #0
 8107c38:	f000 f8d0 	bl	8107ddc <_lseek_r>
 8107c3c:	89a3      	ldrh	r3, [r4, #12]
 8107c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107c42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8107c46:	81a3      	strh	r3, [r4, #12]
 8107c48:	4632      	mov	r2, r6
 8107c4a:	463b      	mov	r3, r7
 8107c4c:	4628      	mov	r0, r5
 8107c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107c52:	f000 b8e7 	b.w	8107e24 <_write_r>

08107c56 <__sseek>:
 8107c56:	b510      	push	{r4, lr}
 8107c58:	460c      	mov	r4, r1
 8107c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107c5e:	f000 f8bd 	bl	8107ddc <_lseek_r>
 8107c62:	1c43      	adds	r3, r0, #1
 8107c64:	89a3      	ldrh	r3, [r4, #12]
 8107c66:	bf15      	itete	ne
 8107c68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8107c6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8107c6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8107c72:	81a3      	strheq	r3, [r4, #12]
 8107c74:	bf18      	it	ne
 8107c76:	81a3      	strhne	r3, [r4, #12]
 8107c78:	bd10      	pop	{r4, pc}

08107c7a <__sclose>:
 8107c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107c7e:	f000 b89d 	b.w	8107dbc <_close_r>

08107c82 <__swbuf_r>:
 8107c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107c84:	460e      	mov	r6, r1
 8107c86:	4614      	mov	r4, r2
 8107c88:	4605      	mov	r5, r0
 8107c8a:	b118      	cbz	r0, 8107c94 <__swbuf_r+0x12>
 8107c8c:	6a03      	ldr	r3, [r0, #32]
 8107c8e:	b90b      	cbnz	r3, 8107c94 <__swbuf_r+0x12>
 8107c90:	f7ff ff0e 	bl	8107ab0 <__sinit>
 8107c94:	69a3      	ldr	r3, [r4, #24]
 8107c96:	60a3      	str	r3, [r4, #8]
 8107c98:	89a3      	ldrh	r3, [r4, #12]
 8107c9a:	071a      	lsls	r2, r3, #28
 8107c9c:	d501      	bpl.n	8107ca2 <__swbuf_r+0x20>
 8107c9e:	6923      	ldr	r3, [r4, #16]
 8107ca0:	b943      	cbnz	r3, 8107cb4 <__swbuf_r+0x32>
 8107ca2:	4621      	mov	r1, r4
 8107ca4:	4628      	mov	r0, r5
 8107ca6:	f000 f82b 	bl	8107d00 <__swsetup_r>
 8107caa:	b118      	cbz	r0, 8107cb4 <__swbuf_r+0x32>
 8107cac:	f04f 37ff 	mov.w	r7, #4294967295
 8107cb0:	4638      	mov	r0, r7
 8107cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107cb4:	6823      	ldr	r3, [r4, #0]
 8107cb6:	6922      	ldr	r2, [r4, #16]
 8107cb8:	1a98      	subs	r0, r3, r2
 8107cba:	6963      	ldr	r3, [r4, #20]
 8107cbc:	b2f6      	uxtb	r6, r6
 8107cbe:	4283      	cmp	r3, r0
 8107cc0:	4637      	mov	r7, r6
 8107cc2:	dc05      	bgt.n	8107cd0 <__swbuf_r+0x4e>
 8107cc4:	4621      	mov	r1, r4
 8107cc6:	4628      	mov	r0, r5
 8107cc8:	f000 fd44 	bl	8108754 <_fflush_r>
 8107ccc:	2800      	cmp	r0, #0
 8107cce:	d1ed      	bne.n	8107cac <__swbuf_r+0x2a>
 8107cd0:	68a3      	ldr	r3, [r4, #8]
 8107cd2:	3b01      	subs	r3, #1
 8107cd4:	60a3      	str	r3, [r4, #8]
 8107cd6:	6823      	ldr	r3, [r4, #0]
 8107cd8:	1c5a      	adds	r2, r3, #1
 8107cda:	6022      	str	r2, [r4, #0]
 8107cdc:	701e      	strb	r6, [r3, #0]
 8107cde:	6962      	ldr	r2, [r4, #20]
 8107ce0:	1c43      	adds	r3, r0, #1
 8107ce2:	429a      	cmp	r2, r3
 8107ce4:	d004      	beq.n	8107cf0 <__swbuf_r+0x6e>
 8107ce6:	89a3      	ldrh	r3, [r4, #12]
 8107ce8:	07db      	lsls	r3, r3, #31
 8107cea:	d5e1      	bpl.n	8107cb0 <__swbuf_r+0x2e>
 8107cec:	2e0a      	cmp	r6, #10
 8107cee:	d1df      	bne.n	8107cb0 <__swbuf_r+0x2e>
 8107cf0:	4621      	mov	r1, r4
 8107cf2:	4628      	mov	r0, r5
 8107cf4:	f000 fd2e 	bl	8108754 <_fflush_r>
 8107cf8:	2800      	cmp	r0, #0
 8107cfa:	d0d9      	beq.n	8107cb0 <__swbuf_r+0x2e>
 8107cfc:	e7d6      	b.n	8107cac <__swbuf_r+0x2a>
	...

08107d00 <__swsetup_r>:
 8107d00:	b538      	push	{r3, r4, r5, lr}
 8107d02:	4b29      	ldr	r3, [pc, #164]	@ (8107da8 <__swsetup_r+0xa8>)
 8107d04:	4605      	mov	r5, r0
 8107d06:	6818      	ldr	r0, [r3, #0]
 8107d08:	460c      	mov	r4, r1
 8107d0a:	b118      	cbz	r0, 8107d14 <__swsetup_r+0x14>
 8107d0c:	6a03      	ldr	r3, [r0, #32]
 8107d0e:	b90b      	cbnz	r3, 8107d14 <__swsetup_r+0x14>
 8107d10:	f7ff fece 	bl	8107ab0 <__sinit>
 8107d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107d18:	0719      	lsls	r1, r3, #28
 8107d1a:	d422      	bmi.n	8107d62 <__swsetup_r+0x62>
 8107d1c:	06da      	lsls	r2, r3, #27
 8107d1e:	d407      	bmi.n	8107d30 <__swsetup_r+0x30>
 8107d20:	2209      	movs	r2, #9
 8107d22:	602a      	str	r2, [r5, #0]
 8107d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8107d28:	81a3      	strh	r3, [r4, #12]
 8107d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8107d2e:	e033      	b.n	8107d98 <__swsetup_r+0x98>
 8107d30:	0758      	lsls	r0, r3, #29
 8107d32:	d512      	bpl.n	8107d5a <__swsetup_r+0x5a>
 8107d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107d36:	b141      	cbz	r1, 8107d4a <__swsetup_r+0x4a>
 8107d38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8107d3c:	4299      	cmp	r1, r3
 8107d3e:	d002      	beq.n	8107d46 <__swsetup_r+0x46>
 8107d40:	4628      	mov	r0, r5
 8107d42:	f000 f8bd 	bl	8107ec0 <_free_r>
 8107d46:	2300      	movs	r3, #0
 8107d48:	6363      	str	r3, [r4, #52]	@ 0x34
 8107d4a:	89a3      	ldrh	r3, [r4, #12]
 8107d4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8107d50:	81a3      	strh	r3, [r4, #12]
 8107d52:	2300      	movs	r3, #0
 8107d54:	6063      	str	r3, [r4, #4]
 8107d56:	6923      	ldr	r3, [r4, #16]
 8107d58:	6023      	str	r3, [r4, #0]
 8107d5a:	89a3      	ldrh	r3, [r4, #12]
 8107d5c:	f043 0308 	orr.w	r3, r3, #8
 8107d60:	81a3      	strh	r3, [r4, #12]
 8107d62:	6923      	ldr	r3, [r4, #16]
 8107d64:	b94b      	cbnz	r3, 8107d7a <__swsetup_r+0x7a>
 8107d66:	89a3      	ldrh	r3, [r4, #12]
 8107d68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8107d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107d70:	d003      	beq.n	8107d7a <__swsetup_r+0x7a>
 8107d72:	4621      	mov	r1, r4
 8107d74:	4628      	mov	r0, r5
 8107d76:	f000 fd3b 	bl	81087f0 <__smakebuf_r>
 8107d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107d7e:	f013 0201 	ands.w	r2, r3, #1
 8107d82:	d00a      	beq.n	8107d9a <__swsetup_r+0x9a>
 8107d84:	2200      	movs	r2, #0
 8107d86:	60a2      	str	r2, [r4, #8]
 8107d88:	6962      	ldr	r2, [r4, #20]
 8107d8a:	4252      	negs	r2, r2
 8107d8c:	61a2      	str	r2, [r4, #24]
 8107d8e:	6922      	ldr	r2, [r4, #16]
 8107d90:	b942      	cbnz	r2, 8107da4 <__swsetup_r+0xa4>
 8107d92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8107d96:	d1c5      	bne.n	8107d24 <__swsetup_r+0x24>
 8107d98:	bd38      	pop	{r3, r4, r5, pc}
 8107d9a:	0799      	lsls	r1, r3, #30
 8107d9c:	bf58      	it	pl
 8107d9e:	6962      	ldrpl	r2, [r4, #20]
 8107da0:	60a2      	str	r2, [r4, #8]
 8107da2:	e7f4      	b.n	8107d8e <__swsetup_r+0x8e>
 8107da4:	2000      	movs	r0, #0
 8107da6:	e7f7      	b.n	8107d98 <__swsetup_r+0x98>
 8107da8:	1000001c 	.word	0x1000001c

08107dac <memset>:
 8107dac:	4402      	add	r2, r0
 8107dae:	4603      	mov	r3, r0
 8107db0:	4293      	cmp	r3, r2
 8107db2:	d100      	bne.n	8107db6 <memset+0xa>
 8107db4:	4770      	bx	lr
 8107db6:	f803 1b01 	strb.w	r1, [r3], #1
 8107dba:	e7f9      	b.n	8107db0 <memset+0x4>

08107dbc <_close_r>:
 8107dbc:	b538      	push	{r3, r4, r5, lr}
 8107dbe:	4d06      	ldr	r5, [pc, #24]	@ (8107dd8 <_close_r+0x1c>)
 8107dc0:	2300      	movs	r3, #0
 8107dc2:	4604      	mov	r4, r0
 8107dc4:	4608      	mov	r0, r1
 8107dc6:	602b      	str	r3, [r5, #0]
 8107dc8:	f7f9 ff95 	bl	8101cf6 <_close>
 8107dcc:	1c43      	adds	r3, r0, #1
 8107dce:	d102      	bne.n	8107dd6 <_close_r+0x1a>
 8107dd0:	682b      	ldr	r3, [r5, #0]
 8107dd2:	b103      	cbz	r3, 8107dd6 <_close_r+0x1a>
 8107dd4:	6023      	str	r3, [r4, #0]
 8107dd6:	bd38      	pop	{r3, r4, r5, pc}
 8107dd8:	10000e20 	.word	0x10000e20

08107ddc <_lseek_r>:
 8107ddc:	b538      	push	{r3, r4, r5, lr}
 8107dde:	4d07      	ldr	r5, [pc, #28]	@ (8107dfc <_lseek_r+0x20>)
 8107de0:	4604      	mov	r4, r0
 8107de2:	4608      	mov	r0, r1
 8107de4:	4611      	mov	r1, r2
 8107de6:	2200      	movs	r2, #0
 8107de8:	602a      	str	r2, [r5, #0]
 8107dea:	461a      	mov	r2, r3
 8107dec:	f7f9 ffaa 	bl	8101d44 <_lseek>
 8107df0:	1c43      	adds	r3, r0, #1
 8107df2:	d102      	bne.n	8107dfa <_lseek_r+0x1e>
 8107df4:	682b      	ldr	r3, [r5, #0]
 8107df6:	b103      	cbz	r3, 8107dfa <_lseek_r+0x1e>
 8107df8:	6023      	str	r3, [r4, #0]
 8107dfa:	bd38      	pop	{r3, r4, r5, pc}
 8107dfc:	10000e20 	.word	0x10000e20

08107e00 <_read_r>:
 8107e00:	b538      	push	{r3, r4, r5, lr}
 8107e02:	4d07      	ldr	r5, [pc, #28]	@ (8107e20 <_read_r+0x20>)
 8107e04:	4604      	mov	r4, r0
 8107e06:	4608      	mov	r0, r1
 8107e08:	4611      	mov	r1, r2
 8107e0a:	2200      	movs	r2, #0
 8107e0c:	602a      	str	r2, [r5, #0]
 8107e0e:	461a      	mov	r2, r3
 8107e10:	f7f9 ff38 	bl	8101c84 <_read>
 8107e14:	1c43      	adds	r3, r0, #1
 8107e16:	d102      	bne.n	8107e1e <_read_r+0x1e>
 8107e18:	682b      	ldr	r3, [r5, #0]
 8107e1a:	b103      	cbz	r3, 8107e1e <_read_r+0x1e>
 8107e1c:	6023      	str	r3, [r4, #0]
 8107e1e:	bd38      	pop	{r3, r4, r5, pc}
 8107e20:	10000e20 	.word	0x10000e20

08107e24 <_write_r>:
 8107e24:	b538      	push	{r3, r4, r5, lr}
 8107e26:	4d07      	ldr	r5, [pc, #28]	@ (8107e44 <_write_r+0x20>)
 8107e28:	4604      	mov	r4, r0
 8107e2a:	4608      	mov	r0, r1
 8107e2c:	4611      	mov	r1, r2
 8107e2e:	2200      	movs	r2, #0
 8107e30:	602a      	str	r2, [r5, #0]
 8107e32:	461a      	mov	r2, r3
 8107e34:	f7f9 ff43 	bl	8101cbe <_write>
 8107e38:	1c43      	adds	r3, r0, #1
 8107e3a:	d102      	bne.n	8107e42 <_write_r+0x1e>
 8107e3c:	682b      	ldr	r3, [r5, #0]
 8107e3e:	b103      	cbz	r3, 8107e42 <_write_r+0x1e>
 8107e40:	6023      	str	r3, [r4, #0]
 8107e42:	bd38      	pop	{r3, r4, r5, pc}
 8107e44:	10000e20 	.word	0x10000e20

08107e48 <__errno>:
 8107e48:	4b01      	ldr	r3, [pc, #4]	@ (8107e50 <__errno+0x8>)
 8107e4a:	6818      	ldr	r0, [r3, #0]
 8107e4c:	4770      	bx	lr
 8107e4e:	bf00      	nop
 8107e50:	1000001c 	.word	0x1000001c

08107e54 <__libc_init_array>:
 8107e54:	b570      	push	{r4, r5, r6, lr}
 8107e56:	4d0d      	ldr	r5, [pc, #52]	@ (8107e8c <__libc_init_array+0x38>)
 8107e58:	4c0d      	ldr	r4, [pc, #52]	@ (8107e90 <__libc_init_array+0x3c>)
 8107e5a:	1b64      	subs	r4, r4, r5
 8107e5c:	10a4      	asrs	r4, r4, #2
 8107e5e:	2600      	movs	r6, #0
 8107e60:	42a6      	cmp	r6, r4
 8107e62:	d109      	bne.n	8107e78 <__libc_init_array+0x24>
 8107e64:	4d0b      	ldr	r5, [pc, #44]	@ (8107e94 <__libc_init_array+0x40>)
 8107e66:	4c0c      	ldr	r4, [pc, #48]	@ (8107e98 <__libc_init_array+0x44>)
 8107e68:	f000 fd30 	bl	81088cc <_init>
 8107e6c:	1b64      	subs	r4, r4, r5
 8107e6e:	10a4      	asrs	r4, r4, #2
 8107e70:	2600      	movs	r6, #0
 8107e72:	42a6      	cmp	r6, r4
 8107e74:	d105      	bne.n	8107e82 <__libc_init_array+0x2e>
 8107e76:	bd70      	pop	{r4, r5, r6, pc}
 8107e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8107e7c:	4798      	blx	r3
 8107e7e:	3601      	adds	r6, #1
 8107e80:	e7ee      	b.n	8107e60 <__libc_init_array+0xc>
 8107e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8107e86:	4798      	blx	r3
 8107e88:	3601      	adds	r6, #1
 8107e8a:	e7f2      	b.n	8107e72 <__libc_init_array+0x1e>
 8107e8c:	08108980 	.word	0x08108980
 8107e90:	08108980 	.word	0x08108980
 8107e94:	08108980 	.word	0x08108980
 8107e98:	08108984 	.word	0x08108984

08107e9c <__retarget_lock_init_recursive>:
 8107e9c:	4770      	bx	lr

08107e9e <__retarget_lock_acquire_recursive>:
 8107e9e:	4770      	bx	lr

08107ea0 <__retarget_lock_release_recursive>:
 8107ea0:	4770      	bx	lr

08107ea2 <memcpy>:
 8107ea2:	440a      	add	r2, r1
 8107ea4:	4291      	cmp	r1, r2
 8107ea6:	f100 33ff 	add.w	r3, r0, #4294967295
 8107eaa:	d100      	bne.n	8107eae <memcpy+0xc>
 8107eac:	4770      	bx	lr
 8107eae:	b510      	push	{r4, lr}
 8107eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107eb8:	4291      	cmp	r1, r2
 8107eba:	d1f9      	bne.n	8107eb0 <memcpy+0xe>
 8107ebc:	bd10      	pop	{r4, pc}
	...

08107ec0 <_free_r>:
 8107ec0:	b538      	push	{r3, r4, r5, lr}
 8107ec2:	4605      	mov	r5, r0
 8107ec4:	2900      	cmp	r1, #0
 8107ec6:	d041      	beq.n	8107f4c <_free_r+0x8c>
 8107ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107ecc:	1f0c      	subs	r4, r1, #4
 8107ece:	2b00      	cmp	r3, #0
 8107ed0:	bfb8      	it	lt
 8107ed2:	18e4      	addlt	r4, r4, r3
 8107ed4:	f000 f8e0 	bl	8108098 <__malloc_lock>
 8107ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8107f50 <_free_r+0x90>)
 8107eda:	6813      	ldr	r3, [r2, #0]
 8107edc:	b933      	cbnz	r3, 8107eec <_free_r+0x2c>
 8107ede:	6063      	str	r3, [r4, #4]
 8107ee0:	6014      	str	r4, [r2, #0]
 8107ee2:	4628      	mov	r0, r5
 8107ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107ee8:	f000 b8dc 	b.w	81080a4 <__malloc_unlock>
 8107eec:	42a3      	cmp	r3, r4
 8107eee:	d908      	bls.n	8107f02 <_free_r+0x42>
 8107ef0:	6820      	ldr	r0, [r4, #0]
 8107ef2:	1821      	adds	r1, r4, r0
 8107ef4:	428b      	cmp	r3, r1
 8107ef6:	bf01      	itttt	eq
 8107ef8:	6819      	ldreq	r1, [r3, #0]
 8107efa:	685b      	ldreq	r3, [r3, #4]
 8107efc:	1809      	addeq	r1, r1, r0
 8107efe:	6021      	streq	r1, [r4, #0]
 8107f00:	e7ed      	b.n	8107ede <_free_r+0x1e>
 8107f02:	461a      	mov	r2, r3
 8107f04:	685b      	ldr	r3, [r3, #4]
 8107f06:	b10b      	cbz	r3, 8107f0c <_free_r+0x4c>
 8107f08:	42a3      	cmp	r3, r4
 8107f0a:	d9fa      	bls.n	8107f02 <_free_r+0x42>
 8107f0c:	6811      	ldr	r1, [r2, #0]
 8107f0e:	1850      	adds	r0, r2, r1
 8107f10:	42a0      	cmp	r0, r4
 8107f12:	d10b      	bne.n	8107f2c <_free_r+0x6c>
 8107f14:	6820      	ldr	r0, [r4, #0]
 8107f16:	4401      	add	r1, r0
 8107f18:	1850      	adds	r0, r2, r1
 8107f1a:	4283      	cmp	r3, r0
 8107f1c:	6011      	str	r1, [r2, #0]
 8107f1e:	d1e0      	bne.n	8107ee2 <_free_r+0x22>
 8107f20:	6818      	ldr	r0, [r3, #0]
 8107f22:	685b      	ldr	r3, [r3, #4]
 8107f24:	6053      	str	r3, [r2, #4]
 8107f26:	4408      	add	r0, r1
 8107f28:	6010      	str	r0, [r2, #0]
 8107f2a:	e7da      	b.n	8107ee2 <_free_r+0x22>
 8107f2c:	d902      	bls.n	8107f34 <_free_r+0x74>
 8107f2e:	230c      	movs	r3, #12
 8107f30:	602b      	str	r3, [r5, #0]
 8107f32:	e7d6      	b.n	8107ee2 <_free_r+0x22>
 8107f34:	6820      	ldr	r0, [r4, #0]
 8107f36:	1821      	adds	r1, r4, r0
 8107f38:	428b      	cmp	r3, r1
 8107f3a:	bf04      	itt	eq
 8107f3c:	6819      	ldreq	r1, [r3, #0]
 8107f3e:	685b      	ldreq	r3, [r3, #4]
 8107f40:	6063      	str	r3, [r4, #4]
 8107f42:	bf04      	itt	eq
 8107f44:	1809      	addeq	r1, r1, r0
 8107f46:	6021      	streq	r1, [r4, #0]
 8107f48:	6054      	str	r4, [r2, #4]
 8107f4a:	e7ca      	b.n	8107ee2 <_free_r+0x22>
 8107f4c:	bd38      	pop	{r3, r4, r5, pc}
 8107f4e:	bf00      	nop
 8107f50:	10000e2c 	.word	0x10000e2c

08107f54 <sbrk_aligned>:
 8107f54:	b570      	push	{r4, r5, r6, lr}
 8107f56:	4e0f      	ldr	r6, [pc, #60]	@ (8107f94 <sbrk_aligned+0x40>)
 8107f58:	460c      	mov	r4, r1
 8107f5a:	6831      	ldr	r1, [r6, #0]
 8107f5c:	4605      	mov	r5, r0
 8107f5e:	b911      	cbnz	r1, 8107f66 <sbrk_aligned+0x12>
 8107f60:	f000 fca4 	bl	81088ac <_sbrk_r>
 8107f64:	6030      	str	r0, [r6, #0]
 8107f66:	4621      	mov	r1, r4
 8107f68:	4628      	mov	r0, r5
 8107f6a:	f000 fc9f 	bl	81088ac <_sbrk_r>
 8107f6e:	1c43      	adds	r3, r0, #1
 8107f70:	d103      	bne.n	8107f7a <sbrk_aligned+0x26>
 8107f72:	f04f 34ff 	mov.w	r4, #4294967295
 8107f76:	4620      	mov	r0, r4
 8107f78:	bd70      	pop	{r4, r5, r6, pc}
 8107f7a:	1cc4      	adds	r4, r0, #3
 8107f7c:	f024 0403 	bic.w	r4, r4, #3
 8107f80:	42a0      	cmp	r0, r4
 8107f82:	d0f8      	beq.n	8107f76 <sbrk_aligned+0x22>
 8107f84:	1a21      	subs	r1, r4, r0
 8107f86:	4628      	mov	r0, r5
 8107f88:	f000 fc90 	bl	81088ac <_sbrk_r>
 8107f8c:	3001      	adds	r0, #1
 8107f8e:	d1f2      	bne.n	8107f76 <sbrk_aligned+0x22>
 8107f90:	e7ef      	b.n	8107f72 <sbrk_aligned+0x1e>
 8107f92:	bf00      	nop
 8107f94:	10000e28 	.word	0x10000e28

08107f98 <_malloc_r>:
 8107f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107f9c:	1ccd      	adds	r5, r1, #3
 8107f9e:	f025 0503 	bic.w	r5, r5, #3
 8107fa2:	3508      	adds	r5, #8
 8107fa4:	2d0c      	cmp	r5, #12
 8107fa6:	bf38      	it	cc
 8107fa8:	250c      	movcc	r5, #12
 8107faa:	2d00      	cmp	r5, #0
 8107fac:	4606      	mov	r6, r0
 8107fae:	db01      	blt.n	8107fb4 <_malloc_r+0x1c>
 8107fb0:	42a9      	cmp	r1, r5
 8107fb2:	d904      	bls.n	8107fbe <_malloc_r+0x26>
 8107fb4:	230c      	movs	r3, #12
 8107fb6:	6033      	str	r3, [r6, #0]
 8107fb8:	2000      	movs	r0, #0
 8107fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8108094 <_malloc_r+0xfc>
 8107fc2:	f000 f869 	bl	8108098 <__malloc_lock>
 8107fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8107fca:	461c      	mov	r4, r3
 8107fcc:	bb44      	cbnz	r4, 8108020 <_malloc_r+0x88>
 8107fce:	4629      	mov	r1, r5
 8107fd0:	4630      	mov	r0, r6
 8107fd2:	f7ff ffbf 	bl	8107f54 <sbrk_aligned>
 8107fd6:	1c43      	adds	r3, r0, #1
 8107fd8:	4604      	mov	r4, r0
 8107fda:	d158      	bne.n	810808e <_malloc_r+0xf6>
 8107fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8107fe0:	4627      	mov	r7, r4
 8107fe2:	2f00      	cmp	r7, #0
 8107fe4:	d143      	bne.n	810806e <_malloc_r+0xd6>
 8107fe6:	2c00      	cmp	r4, #0
 8107fe8:	d04b      	beq.n	8108082 <_malloc_r+0xea>
 8107fea:	6823      	ldr	r3, [r4, #0]
 8107fec:	4639      	mov	r1, r7
 8107fee:	4630      	mov	r0, r6
 8107ff0:	eb04 0903 	add.w	r9, r4, r3
 8107ff4:	f000 fc5a 	bl	81088ac <_sbrk_r>
 8107ff8:	4581      	cmp	r9, r0
 8107ffa:	d142      	bne.n	8108082 <_malloc_r+0xea>
 8107ffc:	6821      	ldr	r1, [r4, #0]
 8107ffe:	1a6d      	subs	r5, r5, r1
 8108000:	4629      	mov	r1, r5
 8108002:	4630      	mov	r0, r6
 8108004:	f7ff ffa6 	bl	8107f54 <sbrk_aligned>
 8108008:	3001      	adds	r0, #1
 810800a:	d03a      	beq.n	8108082 <_malloc_r+0xea>
 810800c:	6823      	ldr	r3, [r4, #0]
 810800e:	442b      	add	r3, r5
 8108010:	6023      	str	r3, [r4, #0]
 8108012:	f8d8 3000 	ldr.w	r3, [r8]
 8108016:	685a      	ldr	r2, [r3, #4]
 8108018:	bb62      	cbnz	r2, 8108074 <_malloc_r+0xdc>
 810801a:	f8c8 7000 	str.w	r7, [r8]
 810801e:	e00f      	b.n	8108040 <_malloc_r+0xa8>
 8108020:	6822      	ldr	r2, [r4, #0]
 8108022:	1b52      	subs	r2, r2, r5
 8108024:	d420      	bmi.n	8108068 <_malloc_r+0xd0>
 8108026:	2a0b      	cmp	r2, #11
 8108028:	d917      	bls.n	810805a <_malloc_r+0xc2>
 810802a:	1961      	adds	r1, r4, r5
 810802c:	42a3      	cmp	r3, r4
 810802e:	6025      	str	r5, [r4, #0]
 8108030:	bf18      	it	ne
 8108032:	6059      	strne	r1, [r3, #4]
 8108034:	6863      	ldr	r3, [r4, #4]
 8108036:	bf08      	it	eq
 8108038:	f8c8 1000 	streq.w	r1, [r8]
 810803c:	5162      	str	r2, [r4, r5]
 810803e:	604b      	str	r3, [r1, #4]
 8108040:	4630      	mov	r0, r6
 8108042:	f000 f82f 	bl	81080a4 <__malloc_unlock>
 8108046:	f104 000b 	add.w	r0, r4, #11
 810804a:	1d23      	adds	r3, r4, #4
 810804c:	f020 0007 	bic.w	r0, r0, #7
 8108050:	1ac2      	subs	r2, r0, r3
 8108052:	bf1c      	itt	ne
 8108054:	1a1b      	subne	r3, r3, r0
 8108056:	50a3      	strne	r3, [r4, r2]
 8108058:	e7af      	b.n	8107fba <_malloc_r+0x22>
 810805a:	6862      	ldr	r2, [r4, #4]
 810805c:	42a3      	cmp	r3, r4
 810805e:	bf0c      	ite	eq
 8108060:	f8c8 2000 	streq.w	r2, [r8]
 8108064:	605a      	strne	r2, [r3, #4]
 8108066:	e7eb      	b.n	8108040 <_malloc_r+0xa8>
 8108068:	4623      	mov	r3, r4
 810806a:	6864      	ldr	r4, [r4, #4]
 810806c:	e7ae      	b.n	8107fcc <_malloc_r+0x34>
 810806e:	463c      	mov	r4, r7
 8108070:	687f      	ldr	r7, [r7, #4]
 8108072:	e7b6      	b.n	8107fe2 <_malloc_r+0x4a>
 8108074:	461a      	mov	r2, r3
 8108076:	685b      	ldr	r3, [r3, #4]
 8108078:	42a3      	cmp	r3, r4
 810807a:	d1fb      	bne.n	8108074 <_malloc_r+0xdc>
 810807c:	2300      	movs	r3, #0
 810807e:	6053      	str	r3, [r2, #4]
 8108080:	e7de      	b.n	8108040 <_malloc_r+0xa8>
 8108082:	230c      	movs	r3, #12
 8108084:	6033      	str	r3, [r6, #0]
 8108086:	4630      	mov	r0, r6
 8108088:	f000 f80c 	bl	81080a4 <__malloc_unlock>
 810808c:	e794      	b.n	8107fb8 <_malloc_r+0x20>
 810808e:	6005      	str	r5, [r0, #0]
 8108090:	e7d6      	b.n	8108040 <_malloc_r+0xa8>
 8108092:	bf00      	nop
 8108094:	10000e2c 	.word	0x10000e2c

08108098 <__malloc_lock>:
 8108098:	4801      	ldr	r0, [pc, #4]	@ (81080a0 <__malloc_lock+0x8>)
 810809a:	f7ff bf00 	b.w	8107e9e <__retarget_lock_acquire_recursive>
 810809e:	bf00      	nop
 81080a0:	10000e24 	.word	0x10000e24

081080a4 <__malloc_unlock>:
 81080a4:	4801      	ldr	r0, [pc, #4]	@ (81080ac <__malloc_unlock+0x8>)
 81080a6:	f7ff befb 	b.w	8107ea0 <__retarget_lock_release_recursive>
 81080aa:	bf00      	nop
 81080ac:	10000e24 	.word	0x10000e24

081080b0 <__sfputc_r>:
 81080b0:	6893      	ldr	r3, [r2, #8]
 81080b2:	3b01      	subs	r3, #1
 81080b4:	2b00      	cmp	r3, #0
 81080b6:	b410      	push	{r4}
 81080b8:	6093      	str	r3, [r2, #8]
 81080ba:	da08      	bge.n	81080ce <__sfputc_r+0x1e>
 81080bc:	6994      	ldr	r4, [r2, #24]
 81080be:	42a3      	cmp	r3, r4
 81080c0:	db01      	blt.n	81080c6 <__sfputc_r+0x16>
 81080c2:	290a      	cmp	r1, #10
 81080c4:	d103      	bne.n	81080ce <__sfputc_r+0x1e>
 81080c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 81080ca:	f7ff bdda 	b.w	8107c82 <__swbuf_r>
 81080ce:	6813      	ldr	r3, [r2, #0]
 81080d0:	1c58      	adds	r0, r3, #1
 81080d2:	6010      	str	r0, [r2, #0]
 81080d4:	7019      	strb	r1, [r3, #0]
 81080d6:	4608      	mov	r0, r1
 81080d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 81080dc:	4770      	bx	lr

081080de <__sfputs_r>:
 81080de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81080e0:	4606      	mov	r6, r0
 81080e2:	460f      	mov	r7, r1
 81080e4:	4614      	mov	r4, r2
 81080e6:	18d5      	adds	r5, r2, r3
 81080e8:	42ac      	cmp	r4, r5
 81080ea:	d101      	bne.n	81080f0 <__sfputs_r+0x12>
 81080ec:	2000      	movs	r0, #0
 81080ee:	e007      	b.n	8108100 <__sfputs_r+0x22>
 81080f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 81080f4:	463a      	mov	r2, r7
 81080f6:	4630      	mov	r0, r6
 81080f8:	f7ff ffda 	bl	81080b0 <__sfputc_r>
 81080fc:	1c43      	adds	r3, r0, #1
 81080fe:	d1f3      	bne.n	81080e8 <__sfputs_r+0xa>
 8108100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08108104 <_vfiprintf_r>:
 8108104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108108:	460d      	mov	r5, r1
 810810a:	b09d      	sub	sp, #116	@ 0x74
 810810c:	4614      	mov	r4, r2
 810810e:	4698      	mov	r8, r3
 8108110:	4606      	mov	r6, r0
 8108112:	b118      	cbz	r0, 810811c <_vfiprintf_r+0x18>
 8108114:	6a03      	ldr	r3, [r0, #32]
 8108116:	b90b      	cbnz	r3, 810811c <_vfiprintf_r+0x18>
 8108118:	f7ff fcca 	bl	8107ab0 <__sinit>
 810811c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810811e:	07d9      	lsls	r1, r3, #31
 8108120:	d405      	bmi.n	810812e <_vfiprintf_r+0x2a>
 8108122:	89ab      	ldrh	r3, [r5, #12]
 8108124:	059a      	lsls	r2, r3, #22
 8108126:	d402      	bmi.n	810812e <_vfiprintf_r+0x2a>
 8108128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810812a:	f7ff feb8 	bl	8107e9e <__retarget_lock_acquire_recursive>
 810812e:	89ab      	ldrh	r3, [r5, #12]
 8108130:	071b      	lsls	r3, r3, #28
 8108132:	d501      	bpl.n	8108138 <_vfiprintf_r+0x34>
 8108134:	692b      	ldr	r3, [r5, #16]
 8108136:	b99b      	cbnz	r3, 8108160 <_vfiprintf_r+0x5c>
 8108138:	4629      	mov	r1, r5
 810813a:	4630      	mov	r0, r6
 810813c:	f7ff fde0 	bl	8107d00 <__swsetup_r>
 8108140:	b170      	cbz	r0, 8108160 <_vfiprintf_r+0x5c>
 8108142:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8108144:	07dc      	lsls	r4, r3, #31
 8108146:	d504      	bpl.n	8108152 <_vfiprintf_r+0x4e>
 8108148:	f04f 30ff 	mov.w	r0, #4294967295
 810814c:	b01d      	add	sp, #116	@ 0x74
 810814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108152:	89ab      	ldrh	r3, [r5, #12]
 8108154:	0598      	lsls	r0, r3, #22
 8108156:	d4f7      	bmi.n	8108148 <_vfiprintf_r+0x44>
 8108158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810815a:	f7ff fea1 	bl	8107ea0 <__retarget_lock_release_recursive>
 810815e:	e7f3      	b.n	8108148 <_vfiprintf_r+0x44>
 8108160:	2300      	movs	r3, #0
 8108162:	9309      	str	r3, [sp, #36]	@ 0x24
 8108164:	2320      	movs	r3, #32
 8108166:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810816a:	f8cd 800c 	str.w	r8, [sp, #12]
 810816e:	2330      	movs	r3, #48	@ 0x30
 8108170:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8108320 <_vfiprintf_r+0x21c>
 8108174:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8108178:	f04f 0901 	mov.w	r9, #1
 810817c:	4623      	mov	r3, r4
 810817e:	469a      	mov	sl, r3
 8108180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108184:	b10a      	cbz	r2, 810818a <_vfiprintf_r+0x86>
 8108186:	2a25      	cmp	r2, #37	@ 0x25
 8108188:	d1f9      	bne.n	810817e <_vfiprintf_r+0x7a>
 810818a:	ebba 0b04 	subs.w	fp, sl, r4
 810818e:	d00b      	beq.n	81081a8 <_vfiprintf_r+0xa4>
 8108190:	465b      	mov	r3, fp
 8108192:	4622      	mov	r2, r4
 8108194:	4629      	mov	r1, r5
 8108196:	4630      	mov	r0, r6
 8108198:	f7ff ffa1 	bl	81080de <__sfputs_r>
 810819c:	3001      	adds	r0, #1
 810819e:	f000 80a7 	beq.w	81082f0 <_vfiprintf_r+0x1ec>
 81081a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81081a4:	445a      	add	r2, fp
 81081a6:	9209      	str	r2, [sp, #36]	@ 0x24
 81081a8:	f89a 3000 	ldrb.w	r3, [sl]
 81081ac:	2b00      	cmp	r3, #0
 81081ae:	f000 809f 	beq.w	81082f0 <_vfiprintf_r+0x1ec>
 81081b2:	2300      	movs	r3, #0
 81081b4:	f04f 32ff 	mov.w	r2, #4294967295
 81081b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81081bc:	f10a 0a01 	add.w	sl, sl, #1
 81081c0:	9304      	str	r3, [sp, #16]
 81081c2:	9307      	str	r3, [sp, #28]
 81081c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81081c8:	931a      	str	r3, [sp, #104]	@ 0x68
 81081ca:	4654      	mov	r4, sl
 81081cc:	2205      	movs	r2, #5
 81081ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 81081d2:	4853      	ldr	r0, [pc, #332]	@ (8108320 <_vfiprintf_r+0x21c>)
 81081d4:	f7f8 f884 	bl	81002e0 <memchr>
 81081d8:	9a04      	ldr	r2, [sp, #16]
 81081da:	b9d8      	cbnz	r0, 8108214 <_vfiprintf_r+0x110>
 81081dc:	06d1      	lsls	r1, r2, #27
 81081de:	bf44      	itt	mi
 81081e0:	2320      	movmi	r3, #32
 81081e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81081e6:	0713      	lsls	r3, r2, #28
 81081e8:	bf44      	itt	mi
 81081ea:	232b      	movmi	r3, #43	@ 0x2b
 81081ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81081f0:	f89a 3000 	ldrb.w	r3, [sl]
 81081f4:	2b2a      	cmp	r3, #42	@ 0x2a
 81081f6:	d015      	beq.n	8108224 <_vfiprintf_r+0x120>
 81081f8:	9a07      	ldr	r2, [sp, #28]
 81081fa:	4654      	mov	r4, sl
 81081fc:	2000      	movs	r0, #0
 81081fe:	f04f 0c0a 	mov.w	ip, #10
 8108202:	4621      	mov	r1, r4
 8108204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8108208:	3b30      	subs	r3, #48	@ 0x30
 810820a:	2b09      	cmp	r3, #9
 810820c:	d94b      	bls.n	81082a6 <_vfiprintf_r+0x1a2>
 810820e:	b1b0      	cbz	r0, 810823e <_vfiprintf_r+0x13a>
 8108210:	9207      	str	r2, [sp, #28]
 8108212:	e014      	b.n	810823e <_vfiprintf_r+0x13a>
 8108214:	eba0 0308 	sub.w	r3, r0, r8
 8108218:	fa09 f303 	lsl.w	r3, r9, r3
 810821c:	4313      	orrs	r3, r2
 810821e:	9304      	str	r3, [sp, #16]
 8108220:	46a2      	mov	sl, r4
 8108222:	e7d2      	b.n	81081ca <_vfiprintf_r+0xc6>
 8108224:	9b03      	ldr	r3, [sp, #12]
 8108226:	1d19      	adds	r1, r3, #4
 8108228:	681b      	ldr	r3, [r3, #0]
 810822a:	9103      	str	r1, [sp, #12]
 810822c:	2b00      	cmp	r3, #0
 810822e:	bfbb      	ittet	lt
 8108230:	425b      	neglt	r3, r3
 8108232:	f042 0202 	orrlt.w	r2, r2, #2
 8108236:	9307      	strge	r3, [sp, #28]
 8108238:	9307      	strlt	r3, [sp, #28]
 810823a:	bfb8      	it	lt
 810823c:	9204      	strlt	r2, [sp, #16]
 810823e:	7823      	ldrb	r3, [r4, #0]
 8108240:	2b2e      	cmp	r3, #46	@ 0x2e
 8108242:	d10a      	bne.n	810825a <_vfiprintf_r+0x156>
 8108244:	7863      	ldrb	r3, [r4, #1]
 8108246:	2b2a      	cmp	r3, #42	@ 0x2a
 8108248:	d132      	bne.n	81082b0 <_vfiprintf_r+0x1ac>
 810824a:	9b03      	ldr	r3, [sp, #12]
 810824c:	1d1a      	adds	r2, r3, #4
 810824e:	681b      	ldr	r3, [r3, #0]
 8108250:	9203      	str	r2, [sp, #12]
 8108252:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8108256:	3402      	adds	r4, #2
 8108258:	9305      	str	r3, [sp, #20]
 810825a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8108330 <_vfiprintf_r+0x22c>
 810825e:	7821      	ldrb	r1, [r4, #0]
 8108260:	2203      	movs	r2, #3
 8108262:	4650      	mov	r0, sl
 8108264:	f7f8 f83c 	bl	81002e0 <memchr>
 8108268:	b138      	cbz	r0, 810827a <_vfiprintf_r+0x176>
 810826a:	9b04      	ldr	r3, [sp, #16]
 810826c:	eba0 000a 	sub.w	r0, r0, sl
 8108270:	2240      	movs	r2, #64	@ 0x40
 8108272:	4082      	lsls	r2, r0
 8108274:	4313      	orrs	r3, r2
 8108276:	3401      	adds	r4, #1
 8108278:	9304      	str	r3, [sp, #16]
 810827a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810827e:	4829      	ldr	r0, [pc, #164]	@ (8108324 <_vfiprintf_r+0x220>)
 8108280:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8108284:	2206      	movs	r2, #6
 8108286:	f7f8 f82b 	bl	81002e0 <memchr>
 810828a:	2800      	cmp	r0, #0
 810828c:	d03f      	beq.n	810830e <_vfiprintf_r+0x20a>
 810828e:	4b26      	ldr	r3, [pc, #152]	@ (8108328 <_vfiprintf_r+0x224>)
 8108290:	bb1b      	cbnz	r3, 81082da <_vfiprintf_r+0x1d6>
 8108292:	9b03      	ldr	r3, [sp, #12]
 8108294:	3307      	adds	r3, #7
 8108296:	f023 0307 	bic.w	r3, r3, #7
 810829a:	3308      	adds	r3, #8
 810829c:	9303      	str	r3, [sp, #12]
 810829e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81082a0:	443b      	add	r3, r7
 81082a2:	9309      	str	r3, [sp, #36]	@ 0x24
 81082a4:	e76a      	b.n	810817c <_vfiprintf_r+0x78>
 81082a6:	fb0c 3202 	mla	r2, ip, r2, r3
 81082aa:	460c      	mov	r4, r1
 81082ac:	2001      	movs	r0, #1
 81082ae:	e7a8      	b.n	8108202 <_vfiprintf_r+0xfe>
 81082b0:	2300      	movs	r3, #0
 81082b2:	3401      	adds	r4, #1
 81082b4:	9305      	str	r3, [sp, #20]
 81082b6:	4619      	mov	r1, r3
 81082b8:	f04f 0c0a 	mov.w	ip, #10
 81082bc:	4620      	mov	r0, r4
 81082be:	f810 2b01 	ldrb.w	r2, [r0], #1
 81082c2:	3a30      	subs	r2, #48	@ 0x30
 81082c4:	2a09      	cmp	r2, #9
 81082c6:	d903      	bls.n	81082d0 <_vfiprintf_r+0x1cc>
 81082c8:	2b00      	cmp	r3, #0
 81082ca:	d0c6      	beq.n	810825a <_vfiprintf_r+0x156>
 81082cc:	9105      	str	r1, [sp, #20]
 81082ce:	e7c4      	b.n	810825a <_vfiprintf_r+0x156>
 81082d0:	fb0c 2101 	mla	r1, ip, r1, r2
 81082d4:	4604      	mov	r4, r0
 81082d6:	2301      	movs	r3, #1
 81082d8:	e7f0      	b.n	81082bc <_vfiprintf_r+0x1b8>
 81082da:	ab03      	add	r3, sp, #12
 81082dc:	9300      	str	r3, [sp, #0]
 81082de:	462a      	mov	r2, r5
 81082e0:	4b12      	ldr	r3, [pc, #72]	@ (810832c <_vfiprintf_r+0x228>)
 81082e2:	a904      	add	r1, sp, #16
 81082e4:	4630      	mov	r0, r6
 81082e6:	f3af 8000 	nop.w
 81082ea:	4607      	mov	r7, r0
 81082ec:	1c78      	adds	r0, r7, #1
 81082ee:	d1d6      	bne.n	810829e <_vfiprintf_r+0x19a>
 81082f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81082f2:	07d9      	lsls	r1, r3, #31
 81082f4:	d405      	bmi.n	8108302 <_vfiprintf_r+0x1fe>
 81082f6:	89ab      	ldrh	r3, [r5, #12]
 81082f8:	059a      	lsls	r2, r3, #22
 81082fa:	d402      	bmi.n	8108302 <_vfiprintf_r+0x1fe>
 81082fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81082fe:	f7ff fdcf 	bl	8107ea0 <__retarget_lock_release_recursive>
 8108302:	89ab      	ldrh	r3, [r5, #12]
 8108304:	065b      	lsls	r3, r3, #25
 8108306:	f53f af1f 	bmi.w	8108148 <_vfiprintf_r+0x44>
 810830a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810830c:	e71e      	b.n	810814c <_vfiprintf_r+0x48>
 810830e:	ab03      	add	r3, sp, #12
 8108310:	9300      	str	r3, [sp, #0]
 8108312:	462a      	mov	r2, r5
 8108314:	4b05      	ldr	r3, [pc, #20]	@ (810832c <_vfiprintf_r+0x228>)
 8108316:	a904      	add	r1, sp, #16
 8108318:	4630      	mov	r0, r6
 810831a:	f000 f879 	bl	8108410 <_printf_i>
 810831e:	e7e4      	b.n	81082ea <_vfiprintf_r+0x1e6>
 8108320:	08108944 	.word	0x08108944
 8108324:	0810894e 	.word	0x0810894e
 8108328:	00000000 	.word	0x00000000
 810832c:	081080df 	.word	0x081080df
 8108330:	0810894a 	.word	0x0810894a

08108334 <_printf_common>:
 8108334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108338:	4616      	mov	r6, r2
 810833a:	4698      	mov	r8, r3
 810833c:	688a      	ldr	r2, [r1, #8]
 810833e:	690b      	ldr	r3, [r1, #16]
 8108340:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8108344:	4293      	cmp	r3, r2
 8108346:	bfb8      	it	lt
 8108348:	4613      	movlt	r3, r2
 810834a:	6033      	str	r3, [r6, #0]
 810834c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8108350:	4607      	mov	r7, r0
 8108352:	460c      	mov	r4, r1
 8108354:	b10a      	cbz	r2, 810835a <_printf_common+0x26>
 8108356:	3301      	adds	r3, #1
 8108358:	6033      	str	r3, [r6, #0]
 810835a:	6823      	ldr	r3, [r4, #0]
 810835c:	0699      	lsls	r1, r3, #26
 810835e:	bf42      	ittt	mi
 8108360:	6833      	ldrmi	r3, [r6, #0]
 8108362:	3302      	addmi	r3, #2
 8108364:	6033      	strmi	r3, [r6, #0]
 8108366:	6825      	ldr	r5, [r4, #0]
 8108368:	f015 0506 	ands.w	r5, r5, #6
 810836c:	d106      	bne.n	810837c <_printf_common+0x48>
 810836e:	f104 0a19 	add.w	sl, r4, #25
 8108372:	68e3      	ldr	r3, [r4, #12]
 8108374:	6832      	ldr	r2, [r6, #0]
 8108376:	1a9b      	subs	r3, r3, r2
 8108378:	42ab      	cmp	r3, r5
 810837a:	dc26      	bgt.n	81083ca <_printf_common+0x96>
 810837c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8108380:	6822      	ldr	r2, [r4, #0]
 8108382:	3b00      	subs	r3, #0
 8108384:	bf18      	it	ne
 8108386:	2301      	movne	r3, #1
 8108388:	0692      	lsls	r2, r2, #26
 810838a:	d42b      	bmi.n	81083e4 <_printf_common+0xb0>
 810838c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8108390:	4641      	mov	r1, r8
 8108392:	4638      	mov	r0, r7
 8108394:	47c8      	blx	r9
 8108396:	3001      	adds	r0, #1
 8108398:	d01e      	beq.n	81083d8 <_printf_common+0xa4>
 810839a:	6823      	ldr	r3, [r4, #0]
 810839c:	6922      	ldr	r2, [r4, #16]
 810839e:	f003 0306 	and.w	r3, r3, #6
 81083a2:	2b04      	cmp	r3, #4
 81083a4:	bf02      	ittt	eq
 81083a6:	68e5      	ldreq	r5, [r4, #12]
 81083a8:	6833      	ldreq	r3, [r6, #0]
 81083aa:	1aed      	subeq	r5, r5, r3
 81083ac:	68a3      	ldr	r3, [r4, #8]
 81083ae:	bf0c      	ite	eq
 81083b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81083b4:	2500      	movne	r5, #0
 81083b6:	4293      	cmp	r3, r2
 81083b8:	bfc4      	itt	gt
 81083ba:	1a9b      	subgt	r3, r3, r2
 81083bc:	18ed      	addgt	r5, r5, r3
 81083be:	2600      	movs	r6, #0
 81083c0:	341a      	adds	r4, #26
 81083c2:	42b5      	cmp	r5, r6
 81083c4:	d11a      	bne.n	81083fc <_printf_common+0xc8>
 81083c6:	2000      	movs	r0, #0
 81083c8:	e008      	b.n	81083dc <_printf_common+0xa8>
 81083ca:	2301      	movs	r3, #1
 81083cc:	4652      	mov	r2, sl
 81083ce:	4641      	mov	r1, r8
 81083d0:	4638      	mov	r0, r7
 81083d2:	47c8      	blx	r9
 81083d4:	3001      	adds	r0, #1
 81083d6:	d103      	bne.n	81083e0 <_printf_common+0xac>
 81083d8:	f04f 30ff 	mov.w	r0, #4294967295
 81083dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81083e0:	3501      	adds	r5, #1
 81083e2:	e7c6      	b.n	8108372 <_printf_common+0x3e>
 81083e4:	18e1      	adds	r1, r4, r3
 81083e6:	1c5a      	adds	r2, r3, #1
 81083e8:	2030      	movs	r0, #48	@ 0x30
 81083ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 81083ee:	4422      	add	r2, r4
 81083f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 81083f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 81083f8:	3302      	adds	r3, #2
 81083fa:	e7c7      	b.n	810838c <_printf_common+0x58>
 81083fc:	2301      	movs	r3, #1
 81083fe:	4622      	mov	r2, r4
 8108400:	4641      	mov	r1, r8
 8108402:	4638      	mov	r0, r7
 8108404:	47c8      	blx	r9
 8108406:	3001      	adds	r0, #1
 8108408:	d0e6      	beq.n	81083d8 <_printf_common+0xa4>
 810840a:	3601      	adds	r6, #1
 810840c:	e7d9      	b.n	81083c2 <_printf_common+0x8e>
	...

08108410 <_printf_i>:
 8108410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108414:	7e0f      	ldrb	r7, [r1, #24]
 8108416:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8108418:	2f78      	cmp	r7, #120	@ 0x78
 810841a:	4691      	mov	r9, r2
 810841c:	4680      	mov	r8, r0
 810841e:	460c      	mov	r4, r1
 8108420:	469a      	mov	sl, r3
 8108422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8108426:	d807      	bhi.n	8108438 <_printf_i+0x28>
 8108428:	2f62      	cmp	r7, #98	@ 0x62
 810842a:	d80a      	bhi.n	8108442 <_printf_i+0x32>
 810842c:	2f00      	cmp	r7, #0
 810842e:	f000 80d1 	beq.w	81085d4 <_printf_i+0x1c4>
 8108432:	2f58      	cmp	r7, #88	@ 0x58
 8108434:	f000 80b8 	beq.w	81085a8 <_printf_i+0x198>
 8108438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810843c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8108440:	e03a      	b.n	81084b8 <_printf_i+0xa8>
 8108442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8108446:	2b15      	cmp	r3, #21
 8108448:	d8f6      	bhi.n	8108438 <_printf_i+0x28>
 810844a:	a101      	add	r1, pc, #4	@ (adr r1, 8108450 <_printf_i+0x40>)
 810844c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8108450:	081084a9 	.word	0x081084a9
 8108454:	081084bd 	.word	0x081084bd
 8108458:	08108439 	.word	0x08108439
 810845c:	08108439 	.word	0x08108439
 8108460:	08108439 	.word	0x08108439
 8108464:	08108439 	.word	0x08108439
 8108468:	081084bd 	.word	0x081084bd
 810846c:	08108439 	.word	0x08108439
 8108470:	08108439 	.word	0x08108439
 8108474:	08108439 	.word	0x08108439
 8108478:	08108439 	.word	0x08108439
 810847c:	081085bb 	.word	0x081085bb
 8108480:	081084e7 	.word	0x081084e7
 8108484:	08108575 	.word	0x08108575
 8108488:	08108439 	.word	0x08108439
 810848c:	08108439 	.word	0x08108439
 8108490:	081085dd 	.word	0x081085dd
 8108494:	08108439 	.word	0x08108439
 8108498:	081084e7 	.word	0x081084e7
 810849c:	08108439 	.word	0x08108439
 81084a0:	08108439 	.word	0x08108439
 81084a4:	0810857d 	.word	0x0810857d
 81084a8:	6833      	ldr	r3, [r6, #0]
 81084aa:	1d1a      	adds	r2, r3, #4
 81084ac:	681b      	ldr	r3, [r3, #0]
 81084ae:	6032      	str	r2, [r6, #0]
 81084b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81084b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 81084b8:	2301      	movs	r3, #1
 81084ba:	e09c      	b.n	81085f6 <_printf_i+0x1e6>
 81084bc:	6833      	ldr	r3, [r6, #0]
 81084be:	6820      	ldr	r0, [r4, #0]
 81084c0:	1d19      	adds	r1, r3, #4
 81084c2:	6031      	str	r1, [r6, #0]
 81084c4:	0606      	lsls	r6, r0, #24
 81084c6:	d501      	bpl.n	81084cc <_printf_i+0xbc>
 81084c8:	681d      	ldr	r5, [r3, #0]
 81084ca:	e003      	b.n	81084d4 <_printf_i+0xc4>
 81084cc:	0645      	lsls	r5, r0, #25
 81084ce:	d5fb      	bpl.n	81084c8 <_printf_i+0xb8>
 81084d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 81084d4:	2d00      	cmp	r5, #0
 81084d6:	da03      	bge.n	81084e0 <_printf_i+0xd0>
 81084d8:	232d      	movs	r3, #45	@ 0x2d
 81084da:	426d      	negs	r5, r5
 81084dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81084e0:	4858      	ldr	r0, [pc, #352]	@ (8108644 <_printf_i+0x234>)
 81084e2:	230a      	movs	r3, #10
 81084e4:	e011      	b.n	810850a <_printf_i+0xfa>
 81084e6:	6821      	ldr	r1, [r4, #0]
 81084e8:	6833      	ldr	r3, [r6, #0]
 81084ea:	0608      	lsls	r0, r1, #24
 81084ec:	f853 5b04 	ldr.w	r5, [r3], #4
 81084f0:	d402      	bmi.n	81084f8 <_printf_i+0xe8>
 81084f2:	0649      	lsls	r1, r1, #25
 81084f4:	bf48      	it	mi
 81084f6:	b2ad      	uxthmi	r5, r5
 81084f8:	2f6f      	cmp	r7, #111	@ 0x6f
 81084fa:	4852      	ldr	r0, [pc, #328]	@ (8108644 <_printf_i+0x234>)
 81084fc:	6033      	str	r3, [r6, #0]
 81084fe:	bf14      	ite	ne
 8108500:	230a      	movne	r3, #10
 8108502:	2308      	moveq	r3, #8
 8108504:	2100      	movs	r1, #0
 8108506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810850a:	6866      	ldr	r6, [r4, #4]
 810850c:	60a6      	str	r6, [r4, #8]
 810850e:	2e00      	cmp	r6, #0
 8108510:	db05      	blt.n	810851e <_printf_i+0x10e>
 8108512:	6821      	ldr	r1, [r4, #0]
 8108514:	432e      	orrs	r6, r5
 8108516:	f021 0104 	bic.w	r1, r1, #4
 810851a:	6021      	str	r1, [r4, #0]
 810851c:	d04b      	beq.n	81085b6 <_printf_i+0x1a6>
 810851e:	4616      	mov	r6, r2
 8108520:	fbb5 f1f3 	udiv	r1, r5, r3
 8108524:	fb03 5711 	mls	r7, r3, r1, r5
 8108528:	5dc7      	ldrb	r7, [r0, r7]
 810852a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810852e:	462f      	mov	r7, r5
 8108530:	42bb      	cmp	r3, r7
 8108532:	460d      	mov	r5, r1
 8108534:	d9f4      	bls.n	8108520 <_printf_i+0x110>
 8108536:	2b08      	cmp	r3, #8
 8108538:	d10b      	bne.n	8108552 <_printf_i+0x142>
 810853a:	6823      	ldr	r3, [r4, #0]
 810853c:	07df      	lsls	r7, r3, #31
 810853e:	d508      	bpl.n	8108552 <_printf_i+0x142>
 8108540:	6923      	ldr	r3, [r4, #16]
 8108542:	6861      	ldr	r1, [r4, #4]
 8108544:	4299      	cmp	r1, r3
 8108546:	bfde      	ittt	le
 8108548:	2330      	movle	r3, #48	@ 0x30
 810854a:	f806 3c01 	strble.w	r3, [r6, #-1]
 810854e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8108552:	1b92      	subs	r2, r2, r6
 8108554:	6122      	str	r2, [r4, #16]
 8108556:	f8cd a000 	str.w	sl, [sp]
 810855a:	464b      	mov	r3, r9
 810855c:	aa03      	add	r2, sp, #12
 810855e:	4621      	mov	r1, r4
 8108560:	4640      	mov	r0, r8
 8108562:	f7ff fee7 	bl	8108334 <_printf_common>
 8108566:	3001      	adds	r0, #1
 8108568:	d14a      	bne.n	8108600 <_printf_i+0x1f0>
 810856a:	f04f 30ff 	mov.w	r0, #4294967295
 810856e:	b004      	add	sp, #16
 8108570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108574:	6823      	ldr	r3, [r4, #0]
 8108576:	f043 0320 	orr.w	r3, r3, #32
 810857a:	6023      	str	r3, [r4, #0]
 810857c:	4832      	ldr	r0, [pc, #200]	@ (8108648 <_printf_i+0x238>)
 810857e:	2778      	movs	r7, #120	@ 0x78
 8108580:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8108584:	6823      	ldr	r3, [r4, #0]
 8108586:	6831      	ldr	r1, [r6, #0]
 8108588:	061f      	lsls	r7, r3, #24
 810858a:	f851 5b04 	ldr.w	r5, [r1], #4
 810858e:	d402      	bmi.n	8108596 <_printf_i+0x186>
 8108590:	065f      	lsls	r7, r3, #25
 8108592:	bf48      	it	mi
 8108594:	b2ad      	uxthmi	r5, r5
 8108596:	6031      	str	r1, [r6, #0]
 8108598:	07d9      	lsls	r1, r3, #31
 810859a:	bf44      	itt	mi
 810859c:	f043 0320 	orrmi.w	r3, r3, #32
 81085a0:	6023      	strmi	r3, [r4, #0]
 81085a2:	b11d      	cbz	r5, 81085ac <_printf_i+0x19c>
 81085a4:	2310      	movs	r3, #16
 81085a6:	e7ad      	b.n	8108504 <_printf_i+0xf4>
 81085a8:	4826      	ldr	r0, [pc, #152]	@ (8108644 <_printf_i+0x234>)
 81085aa:	e7e9      	b.n	8108580 <_printf_i+0x170>
 81085ac:	6823      	ldr	r3, [r4, #0]
 81085ae:	f023 0320 	bic.w	r3, r3, #32
 81085b2:	6023      	str	r3, [r4, #0]
 81085b4:	e7f6      	b.n	81085a4 <_printf_i+0x194>
 81085b6:	4616      	mov	r6, r2
 81085b8:	e7bd      	b.n	8108536 <_printf_i+0x126>
 81085ba:	6833      	ldr	r3, [r6, #0]
 81085bc:	6825      	ldr	r5, [r4, #0]
 81085be:	6961      	ldr	r1, [r4, #20]
 81085c0:	1d18      	adds	r0, r3, #4
 81085c2:	6030      	str	r0, [r6, #0]
 81085c4:	062e      	lsls	r6, r5, #24
 81085c6:	681b      	ldr	r3, [r3, #0]
 81085c8:	d501      	bpl.n	81085ce <_printf_i+0x1be>
 81085ca:	6019      	str	r1, [r3, #0]
 81085cc:	e002      	b.n	81085d4 <_printf_i+0x1c4>
 81085ce:	0668      	lsls	r0, r5, #25
 81085d0:	d5fb      	bpl.n	81085ca <_printf_i+0x1ba>
 81085d2:	8019      	strh	r1, [r3, #0]
 81085d4:	2300      	movs	r3, #0
 81085d6:	6123      	str	r3, [r4, #16]
 81085d8:	4616      	mov	r6, r2
 81085da:	e7bc      	b.n	8108556 <_printf_i+0x146>
 81085dc:	6833      	ldr	r3, [r6, #0]
 81085de:	1d1a      	adds	r2, r3, #4
 81085e0:	6032      	str	r2, [r6, #0]
 81085e2:	681e      	ldr	r6, [r3, #0]
 81085e4:	6862      	ldr	r2, [r4, #4]
 81085e6:	2100      	movs	r1, #0
 81085e8:	4630      	mov	r0, r6
 81085ea:	f7f7 fe79 	bl	81002e0 <memchr>
 81085ee:	b108      	cbz	r0, 81085f4 <_printf_i+0x1e4>
 81085f0:	1b80      	subs	r0, r0, r6
 81085f2:	6060      	str	r0, [r4, #4]
 81085f4:	6863      	ldr	r3, [r4, #4]
 81085f6:	6123      	str	r3, [r4, #16]
 81085f8:	2300      	movs	r3, #0
 81085fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81085fe:	e7aa      	b.n	8108556 <_printf_i+0x146>
 8108600:	6923      	ldr	r3, [r4, #16]
 8108602:	4632      	mov	r2, r6
 8108604:	4649      	mov	r1, r9
 8108606:	4640      	mov	r0, r8
 8108608:	47d0      	blx	sl
 810860a:	3001      	adds	r0, #1
 810860c:	d0ad      	beq.n	810856a <_printf_i+0x15a>
 810860e:	6823      	ldr	r3, [r4, #0]
 8108610:	079b      	lsls	r3, r3, #30
 8108612:	d413      	bmi.n	810863c <_printf_i+0x22c>
 8108614:	68e0      	ldr	r0, [r4, #12]
 8108616:	9b03      	ldr	r3, [sp, #12]
 8108618:	4298      	cmp	r0, r3
 810861a:	bfb8      	it	lt
 810861c:	4618      	movlt	r0, r3
 810861e:	e7a6      	b.n	810856e <_printf_i+0x15e>
 8108620:	2301      	movs	r3, #1
 8108622:	4632      	mov	r2, r6
 8108624:	4649      	mov	r1, r9
 8108626:	4640      	mov	r0, r8
 8108628:	47d0      	blx	sl
 810862a:	3001      	adds	r0, #1
 810862c:	d09d      	beq.n	810856a <_printf_i+0x15a>
 810862e:	3501      	adds	r5, #1
 8108630:	68e3      	ldr	r3, [r4, #12]
 8108632:	9903      	ldr	r1, [sp, #12]
 8108634:	1a5b      	subs	r3, r3, r1
 8108636:	42ab      	cmp	r3, r5
 8108638:	dcf2      	bgt.n	8108620 <_printf_i+0x210>
 810863a:	e7eb      	b.n	8108614 <_printf_i+0x204>
 810863c:	2500      	movs	r5, #0
 810863e:	f104 0619 	add.w	r6, r4, #25
 8108642:	e7f5      	b.n	8108630 <_printf_i+0x220>
 8108644:	08108955 	.word	0x08108955
 8108648:	08108966 	.word	0x08108966

0810864c <__sflush_r>:
 810864c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8108650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108654:	0716      	lsls	r6, r2, #28
 8108656:	4605      	mov	r5, r0
 8108658:	460c      	mov	r4, r1
 810865a:	d454      	bmi.n	8108706 <__sflush_r+0xba>
 810865c:	684b      	ldr	r3, [r1, #4]
 810865e:	2b00      	cmp	r3, #0
 8108660:	dc02      	bgt.n	8108668 <__sflush_r+0x1c>
 8108662:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8108664:	2b00      	cmp	r3, #0
 8108666:	dd48      	ble.n	81086fa <__sflush_r+0xae>
 8108668:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810866a:	2e00      	cmp	r6, #0
 810866c:	d045      	beq.n	81086fa <__sflush_r+0xae>
 810866e:	2300      	movs	r3, #0
 8108670:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8108674:	682f      	ldr	r7, [r5, #0]
 8108676:	6a21      	ldr	r1, [r4, #32]
 8108678:	602b      	str	r3, [r5, #0]
 810867a:	d030      	beq.n	81086de <__sflush_r+0x92>
 810867c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810867e:	89a3      	ldrh	r3, [r4, #12]
 8108680:	0759      	lsls	r1, r3, #29
 8108682:	d505      	bpl.n	8108690 <__sflush_r+0x44>
 8108684:	6863      	ldr	r3, [r4, #4]
 8108686:	1ad2      	subs	r2, r2, r3
 8108688:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810868a:	b10b      	cbz	r3, 8108690 <__sflush_r+0x44>
 810868c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810868e:	1ad2      	subs	r2, r2, r3
 8108690:	2300      	movs	r3, #0
 8108692:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8108694:	6a21      	ldr	r1, [r4, #32]
 8108696:	4628      	mov	r0, r5
 8108698:	47b0      	blx	r6
 810869a:	1c43      	adds	r3, r0, #1
 810869c:	89a3      	ldrh	r3, [r4, #12]
 810869e:	d106      	bne.n	81086ae <__sflush_r+0x62>
 81086a0:	6829      	ldr	r1, [r5, #0]
 81086a2:	291d      	cmp	r1, #29
 81086a4:	d82b      	bhi.n	81086fe <__sflush_r+0xb2>
 81086a6:	4a2a      	ldr	r2, [pc, #168]	@ (8108750 <__sflush_r+0x104>)
 81086a8:	40ca      	lsrs	r2, r1
 81086aa:	07d6      	lsls	r6, r2, #31
 81086ac:	d527      	bpl.n	81086fe <__sflush_r+0xb2>
 81086ae:	2200      	movs	r2, #0
 81086b0:	6062      	str	r2, [r4, #4]
 81086b2:	04d9      	lsls	r1, r3, #19
 81086b4:	6922      	ldr	r2, [r4, #16]
 81086b6:	6022      	str	r2, [r4, #0]
 81086b8:	d504      	bpl.n	81086c4 <__sflush_r+0x78>
 81086ba:	1c42      	adds	r2, r0, #1
 81086bc:	d101      	bne.n	81086c2 <__sflush_r+0x76>
 81086be:	682b      	ldr	r3, [r5, #0]
 81086c0:	b903      	cbnz	r3, 81086c4 <__sflush_r+0x78>
 81086c2:	6560      	str	r0, [r4, #84]	@ 0x54
 81086c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81086c6:	602f      	str	r7, [r5, #0]
 81086c8:	b1b9      	cbz	r1, 81086fa <__sflush_r+0xae>
 81086ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81086ce:	4299      	cmp	r1, r3
 81086d0:	d002      	beq.n	81086d8 <__sflush_r+0x8c>
 81086d2:	4628      	mov	r0, r5
 81086d4:	f7ff fbf4 	bl	8107ec0 <_free_r>
 81086d8:	2300      	movs	r3, #0
 81086da:	6363      	str	r3, [r4, #52]	@ 0x34
 81086dc:	e00d      	b.n	81086fa <__sflush_r+0xae>
 81086de:	2301      	movs	r3, #1
 81086e0:	4628      	mov	r0, r5
 81086e2:	47b0      	blx	r6
 81086e4:	4602      	mov	r2, r0
 81086e6:	1c50      	adds	r0, r2, #1
 81086e8:	d1c9      	bne.n	810867e <__sflush_r+0x32>
 81086ea:	682b      	ldr	r3, [r5, #0]
 81086ec:	2b00      	cmp	r3, #0
 81086ee:	d0c6      	beq.n	810867e <__sflush_r+0x32>
 81086f0:	2b1d      	cmp	r3, #29
 81086f2:	d001      	beq.n	81086f8 <__sflush_r+0xac>
 81086f4:	2b16      	cmp	r3, #22
 81086f6:	d11e      	bne.n	8108736 <__sflush_r+0xea>
 81086f8:	602f      	str	r7, [r5, #0]
 81086fa:	2000      	movs	r0, #0
 81086fc:	e022      	b.n	8108744 <__sflush_r+0xf8>
 81086fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108702:	b21b      	sxth	r3, r3
 8108704:	e01b      	b.n	810873e <__sflush_r+0xf2>
 8108706:	690f      	ldr	r7, [r1, #16]
 8108708:	2f00      	cmp	r7, #0
 810870a:	d0f6      	beq.n	81086fa <__sflush_r+0xae>
 810870c:	0793      	lsls	r3, r2, #30
 810870e:	680e      	ldr	r6, [r1, #0]
 8108710:	bf08      	it	eq
 8108712:	694b      	ldreq	r3, [r1, #20]
 8108714:	600f      	str	r7, [r1, #0]
 8108716:	bf18      	it	ne
 8108718:	2300      	movne	r3, #0
 810871a:	eba6 0807 	sub.w	r8, r6, r7
 810871e:	608b      	str	r3, [r1, #8]
 8108720:	f1b8 0f00 	cmp.w	r8, #0
 8108724:	dde9      	ble.n	81086fa <__sflush_r+0xae>
 8108726:	6a21      	ldr	r1, [r4, #32]
 8108728:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810872a:	4643      	mov	r3, r8
 810872c:	463a      	mov	r2, r7
 810872e:	4628      	mov	r0, r5
 8108730:	47b0      	blx	r6
 8108732:	2800      	cmp	r0, #0
 8108734:	dc08      	bgt.n	8108748 <__sflush_r+0xfc>
 8108736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810873a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810873e:	81a3      	strh	r3, [r4, #12]
 8108740:	f04f 30ff 	mov.w	r0, #4294967295
 8108744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108748:	4407      	add	r7, r0
 810874a:	eba8 0800 	sub.w	r8, r8, r0
 810874e:	e7e7      	b.n	8108720 <__sflush_r+0xd4>
 8108750:	20400001 	.word	0x20400001

08108754 <_fflush_r>:
 8108754:	b538      	push	{r3, r4, r5, lr}
 8108756:	690b      	ldr	r3, [r1, #16]
 8108758:	4605      	mov	r5, r0
 810875a:	460c      	mov	r4, r1
 810875c:	b913      	cbnz	r3, 8108764 <_fflush_r+0x10>
 810875e:	2500      	movs	r5, #0
 8108760:	4628      	mov	r0, r5
 8108762:	bd38      	pop	{r3, r4, r5, pc}
 8108764:	b118      	cbz	r0, 810876e <_fflush_r+0x1a>
 8108766:	6a03      	ldr	r3, [r0, #32]
 8108768:	b90b      	cbnz	r3, 810876e <_fflush_r+0x1a>
 810876a:	f7ff f9a1 	bl	8107ab0 <__sinit>
 810876e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108772:	2b00      	cmp	r3, #0
 8108774:	d0f3      	beq.n	810875e <_fflush_r+0xa>
 8108776:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8108778:	07d0      	lsls	r0, r2, #31
 810877a:	d404      	bmi.n	8108786 <_fflush_r+0x32>
 810877c:	0599      	lsls	r1, r3, #22
 810877e:	d402      	bmi.n	8108786 <_fflush_r+0x32>
 8108780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108782:	f7ff fb8c 	bl	8107e9e <__retarget_lock_acquire_recursive>
 8108786:	4628      	mov	r0, r5
 8108788:	4621      	mov	r1, r4
 810878a:	f7ff ff5f 	bl	810864c <__sflush_r>
 810878e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8108790:	07da      	lsls	r2, r3, #31
 8108792:	4605      	mov	r5, r0
 8108794:	d4e4      	bmi.n	8108760 <_fflush_r+0xc>
 8108796:	89a3      	ldrh	r3, [r4, #12]
 8108798:	059b      	lsls	r3, r3, #22
 810879a:	d4e1      	bmi.n	8108760 <_fflush_r+0xc>
 810879c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810879e:	f7ff fb7f 	bl	8107ea0 <__retarget_lock_release_recursive>
 81087a2:	e7dd      	b.n	8108760 <_fflush_r+0xc>

081087a4 <__swhatbuf_r>:
 81087a4:	b570      	push	{r4, r5, r6, lr}
 81087a6:	460c      	mov	r4, r1
 81087a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81087ac:	2900      	cmp	r1, #0
 81087ae:	b096      	sub	sp, #88	@ 0x58
 81087b0:	4615      	mov	r5, r2
 81087b2:	461e      	mov	r6, r3
 81087b4:	da0d      	bge.n	81087d2 <__swhatbuf_r+0x2e>
 81087b6:	89a3      	ldrh	r3, [r4, #12]
 81087b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 81087bc:	f04f 0100 	mov.w	r1, #0
 81087c0:	bf14      	ite	ne
 81087c2:	2340      	movne	r3, #64	@ 0x40
 81087c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 81087c8:	2000      	movs	r0, #0
 81087ca:	6031      	str	r1, [r6, #0]
 81087cc:	602b      	str	r3, [r5, #0]
 81087ce:	b016      	add	sp, #88	@ 0x58
 81087d0:	bd70      	pop	{r4, r5, r6, pc}
 81087d2:	466a      	mov	r2, sp
 81087d4:	f000 f848 	bl	8108868 <_fstat_r>
 81087d8:	2800      	cmp	r0, #0
 81087da:	dbec      	blt.n	81087b6 <__swhatbuf_r+0x12>
 81087dc:	9901      	ldr	r1, [sp, #4]
 81087de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 81087e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 81087e6:	4259      	negs	r1, r3
 81087e8:	4159      	adcs	r1, r3
 81087ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81087ee:	e7eb      	b.n	81087c8 <__swhatbuf_r+0x24>

081087f0 <__smakebuf_r>:
 81087f0:	898b      	ldrh	r3, [r1, #12]
 81087f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81087f4:	079d      	lsls	r5, r3, #30
 81087f6:	4606      	mov	r6, r0
 81087f8:	460c      	mov	r4, r1
 81087fa:	d507      	bpl.n	810880c <__smakebuf_r+0x1c>
 81087fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8108800:	6023      	str	r3, [r4, #0]
 8108802:	6123      	str	r3, [r4, #16]
 8108804:	2301      	movs	r3, #1
 8108806:	6163      	str	r3, [r4, #20]
 8108808:	b003      	add	sp, #12
 810880a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810880c:	ab01      	add	r3, sp, #4
 810880e:	466a      	mov	r2, sp
 8108810:	f7ff ffc8 	bl	81087a4 <__swhatbuf_r>
 8108814:	9f00      	ldr	r7, [sp, #0]
 8108816:	4605      	mov	r5, r0
 8108818:	4639      	mov	r1, r7
 810881a:	4630      	mov	r0, r6
 810881c:	f7ff fbbc 	bl	8107f98 <_malloc_r>
 8108820:	b948      	cbnz	r0, 8108836 <__smakebuf_r+0x46>
 8108822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108826:	059a      	lsls	r2, r3, #22
 8108828:	d4ee      	bmi.n	8108808 <__smakebuf_r+0x18>
 810882a:	f023 0303 	bic.w	r3, r3, #3
 810882e:	f043 0302 	orr.w	r3, r3, #2
 8108832:	81a3      	strh	r3, [r4, #12]
 8108834:	e7e2      	b.n	81087fc <__smakebuf_r+0xc>
 8108836:	89a3      	ldrh	r3, [r4, #12]
 8108838:	6020      	str	r0, [r4, #0]
 810883a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810883e:	81a3      	strh	r3, [r4, #12]
 8108840:	9b01      	ldr	r3, [sp, #4]
 8108842:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8108846:	b15b      	cbz	r3, 8108860 <__smakebuf_r+0x70>
 8108848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810884c:	4630      	mov	r0, r6
 810884e:	f000 f81d 	bl	810888c <_isatty_r>
 8108852:	b128      	cbz	r0, 8108860 <__smakebuf_r+0x70>
 8108854:	89a3      	ldrh	r3, [r4, #12]
 8108856:	f023 0303 	bic.w	r3, r3, #3
 810885a:	f043 0301 	orr.w	r3, r3, #1
 810885e:	81a3      	strh	r3, [r4, #12]
 8108860:	89a3      	ldrh	r3, [r4, #12]
 8108862:	431d      	orrs	r5, r3
 8108864:	81a5      	strh	r5, [r4, #12]
 8108866:	e7cf      	b.n	8108808 <__smakebuf_r+0x18>

08108868 <_fstat_r>:
 8108868:	b538      	push	{r3, r4, r5, lr}
 810886a:	4d07      	ldr	r5, [pc, #28]	@ (8108888 <_fstat_r+0x20>)
 810886c:	2300      	movs	r3, #0
 810886e:	4604      	mov	r4, r0
 8108870:	4608      	mov	r0, r1
 8108872:	4611      	mov	r1, r2
 8108874:	602b      	str	r3, [r5, #0]
 8108876:	f7f9 fa4a 	bl	8101d0e <_fstat>
 810887a:	1c43      	adds	r3, r0, #1
 810887c:	d102      	bne.n	8108884 <_fstat_r+0x1c>
 810887e:	682b      	ldr	r3, [r5, #0]
 8108880:	b103      	cbz	r3, 8108884 <_fstat_r+0x1c>
 8108882:	6023      	str	r3, [r4, #0]
 8108884:	bd38      	pop	{r3, r4, r5, pc}
 8108886:	bf00      	nop
 8108888:	10000e20 	.word	0x10000e20

0810888c <_isatty_r>:
 810888c:	b538      	push	{r3, r4, r5, lr}
 810888e:	4d06      	ldr	r5, [pc, #24]	@ (81088a8 <_isatty_r+0x1c>)
 8108890:	2300      	movs	r3, #0
 8108892:	4604      	mov	r4, r0
 8108894:	4608      	mov	r0, r1
 8108896:	602b      	str	r3, [r5, #0]
 8108898:	f7f9 fa49 	bl	8101d2e <_isatty>
 810889c:	1c43      	adds	r3, r0, #1
 810889e:	d102      	bne.n	81088a6 <_isatty_r+0x1a>
 81088a0:	682b      	ldr	r3, [r5, #0]
 81088a2:	b103      	cbz	r3, 81088a6 <_isatty_r+0x1a>
 81088a4:	6023      	str	r3, [r4, #0]
 81088a6:	bd38      	pop	{r3, r4, r5, pc}
 81088a8:	10000e20 	.word	0x10000e20

081088ac <_sbrk_r>:
 81088ac:	b538      	push	{r3, r4, r5, lr}
 81088ae:	4d06      	ldr	r5, [pc, #24]	@ (81088c8 <_sbrk_r+0x1c>)
 81088b0:	2300      	movs	r3, #0
 81088b2:	4604      	mov	r4, r0
 81088b4:	4608      	mov	r0, r1
 81088b6:	602b      	str	r3, [r5, #0]
 81088b8:	f7f9 fa52 	bl	8101d60 <_sbrk>
 81088bc:	1c43      	adds	r3, r0, #1
 81088be:	d102      	bne.n	81088c6 <_sbrk_r+0x1a>
 81088c0:	682b      	ldr	r3, [r5, #0]
 81088c2:	b103      	cbz	r3, 81088c6 <_sbrk_r+0x1a>
 81088c4:	6023      	str	r3, [r4, #0]
 81088c6:	bd38      	pop	{r3, r4, r5, pc}
 81088c8:	10000e20 	.word	0x10000e20

081088cc <_init>:
 81088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81088ce:	bf00      	nop
 81088d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81088d2:	bc08      	pop	{r3}
 81088d4:	469e      	mov	lr, r3
 81088d6:	4770      	bx	lr

081088d8 <_fini>:
 81088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81088da:	bf00      	nop
 81088dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81088de:	bc08      	pop	{r3}
 81088e0:	469e      	mov	lr, r3
 81088e2:	4770      	bx	lr
