
Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008908  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08108ba8  08108ba8  00009ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08108bd8  08108bd8  00009bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08108bdc  08108bdc  00009bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000006c  10000000  08108be0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ed4  1000006c  08108c4c  0000a06c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000f40  08108c4c  0000af40  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002909b  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004b58  00000000  00000000  00033137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002128  00000000  00000000  00037c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000019d0  00000000  00000000  00039db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000073ca  00000000  00000000  0003b788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00029fbf  00000000  00000000  00042b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001c0250  00000000  00000000  0006cb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0022cd61  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009480  00000000  00000000  0022cda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000068  00000000  00000000  00236224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000006c 	.word	0x1000006c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08108b90 	.word	0x08108b90

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000070 	.word	0x10000070
 81002dc:	08108b90 	.word	0x08108b90

081002e0 <__io_putchar>:
uint8_t *pM4Read = pM4Buf, *pM4Write = pM4Buf;

Log sLogger_ = {NULL};

PUTCHAR_PROTOTYPE
{
 81002e0:	b580      	push	{r7, lr}
 81002e2:	b084      	sub	sp, #16
 81002e4:	af00      	add	r7, sp, #0
 81002e6:	6078      	str	r0, [r7, #4]
  uint32_t cpuID = HAL_GetCurrentCPUID();
 81002e8:	f001 ff8e 	bl	8102208 <HAL_GetCurrentCPUID>
 81002ec:	60f8      	str	r0, [r7, #12]
  uint8_t *read, *write;
  HAL_UART_Transmit(sLogger_.pUART, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 81002ee:	4b06      	ldr	r3, [pc, #24]	@ (8100308 <__io_putchar+0x28>)
 81002f0:	6818      	ldr	r0, [r3, #0]
 81002f2:	1d39      	adds	r1, r7, #4
 81002f4:	f04f 33ff 	mov.w	r3, #4294967295
 81002f8:	2201      	movs	r2, #1
 81002fa:	f007 f90f 	bl	810751c <HAL_UART_Transmit>
  return ch;
 81002fe:	687b      	ldr	r3, [r7, #4]
}
 8100300:	4618      	mov	r0, r3
 8100302:	3710      	adds	r7, #16
 8100304:	46bd      	mov	sp, r7
 8100306:	bd80      	pop	{r7, pc}
 8100308:	10000088 	.word	0x10000088

0810030c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810030c:	b480      	push	{r7}
 810030e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100310:	4b09      	ldr	r3, [pc, #36]	@ (8100338 <SystemInit+0x2c>)
 8100312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100316:	4a08      	ldr	r2, [pc, #32]	@ (8100338 <SystemInit+0x2c>)
 8100318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810031c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100320:	4b05      	ldr	r3, [pc, #20]	@ (8100338 <SystemInit+0x2c>)
 8100322:	691b      	ldr	r3, [r3, #16]
 8100324:	4a04      	ldr	r2, [pc, #16]	@ (8100338 <SystemInit+0x2c>)
 8100326:	f043 0310 	orr.w	r3, r3, #16
 810032a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810032c:	bf00      	nop
 810032e:	46bd      	mov	sp, r7
 8100330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100334:	4770      	bx	lr
 8100336:	bf00      	nop
 8100338:	e000ed00 	.word	0xe000ed00

0810033c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 810033c:	b480      	push	{r7}
 810033e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100340:	4b09      	ldr	r3, [pc, #36]	@ (8100368 <ExitRun0Mode+0x2c>)
 8100342:	68db      	ldr	r3, [r3, #12]
 8100344:	4a08      	ldr	r2, [pc, #32]	@ (8100368 <ExitRun0Mode+0x2c>)
 8100346:	f023 0302 	bic.w	r3, r3, #2
 810034a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 810034c:	bf00      	nop
 810034e:	4b06      	ldr	r3, [pc, #24]	@ (8100368 <ExitRun0Mode+0x2c>)
 8100350:	685b      	ldr	r3, [r3, #4]
 8100352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100356:	2b00      	cmp	r3, #0
 8100358:	d0f9      	beq.n	810034e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810035a:	bf00      	nop
 810035c:	bf00      	nop
 810035e:	46bd      	mov	sp, r7
 8100360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100364:	4770      	bx	lr
 8100366:	bf00      	nop
 8100368:	58024800 	.word	0x58024800

0810036c <HAL_GPIO_EXTI_Callback>:
}

// SPI_HandleTypeDef *const pIMUSPIRef = &hspi2;

void HAL_GPIO_EXTI_Callback(uint16_t gpioPin)
{
 810036c:	b480      	push	{r7}
 810036e:	b083      	sub	sp, #12
 8100370:	af00      	add	r7, sp, #0
 8100372:	4603      	mov	r3, r0
 8100374:	80fb      	strh	r3, [r7, #6]
	if(gpioPin == IMU_INT_Pin) {

	}
}
 8100376:	bf00      	nop
 8100378:	370c      	adds	r7, #12
 810037a:	46bd      	mov	sp, r7
 810037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100380:	4770      	bx	lr
	...

08100384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100384:	b580      	push	{r7, lr}
 8100386:	b082      	sub	sp, #8
 8100388:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810038a:	4b29      	ldr	r3, [pc, #164]	@ (8100430 <main+0xac>)
 810038c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100390:	4a27      	ldr	r2, [pc, #156]	@ (8100430 <main+0xac>)
 8100392:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100396:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810039a:	4b25      	ldr	r3, [pc, #148]	@ (8100430 <main+0xac>)
 810039c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81003a4:	607b      	str	r3, [r7, #4]
 81003a6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003a8:	2001      	movs	r0, #1
 81003aa:	f002 f909 	bl	81025c0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81003ae:	f002 fac3 	bl	8102938 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81003b2:	2201      	movs	r2, #1
 81003b4:	2102      	movs	r1, #2
 81003b6:	2000      	movs	r0, #0
 81003b8:	f002 fa44 	bl	8102844 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003bc:	4b1d      	ldr	r3, [pc, #116]	@ (8100434 <main+0xb0>)
 81003be:	681b      	ldr	r3, [r3, #0]
 81003c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81003c4:	2b70      	cmp	r3, #112	@ 0x70
 81003c6:	d108      	bne.n	81003da <main+0x56>
 81003c8:	4b1b      	ldr	r3, [pc, #108]	@ (8100438 <main+0xb4>)
 81003ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81003ce:	4a1a      	ldr	r2, [pc, #104]	@ (8100438 <main+0xb4>)
 81003d0:	f043 0301 	orr.w	r3, r3, #1
 81003d4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81003d8:	e007      	b.n	81003ea <main+0x66>
 81003da:	4b17      	ldr	r3, [pc, #92]	@ (8100438 <main+0xb4>)
 81003dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81003e0:	4a15      	ldr	r2, [pc, #84]	@ (8100438 <main+0xb4>)
 81003e2:	f043 0301 	orr.w	r3, r3, #1
 81003e6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003ea:	f001 fc0b 	bl	8101c04 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81003ee:	f000 fb3d 	bl	8100a6c <MX_GPIO_Init>
  MX_HDMI_CEC_Init();
 81003f2:	f000 f825 	bl	8100440 <MX_HDMI_CEC_Init>
  MX_RTC_Init();
 81003f6:	f000 f857 	bl	81004a8 <MX_RTC_Init>
  MX_SAI1_Init();
 81003fa:	f000 f8a3 	bl	8100544 <MX_SAI1_Init>
  MX_SPDIFRX1_Init();
 81003fe:	f000 f943 	bl	8100688 <MX_SPDIFRX1_Init>
  MX_SPI2_Init();
 8100402:	f000 f979 	bl	81006f8 <MX_SPI2_Init>
  MX_SPI5_Init();
 8100406:	f000 f9cd 	bl	81007a4 <MX_SPI5_Init>
  MX_TIM8_Init();
 810040a:	f000 fa1f 	bl	810084c <MX_TIM8_Init>
  MX_TIM13_Init();
 810040e:	f000 faad 	bl	810096c <MX_TIM13_Init>
  MX_USB_OTG_HS_PCD_Init();
 8100412:	f000 faf9 	bl	8100a08 <MX_USB_OTG_HS_PCD_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	  HAL_Delay(500);
 8100416:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 810041a:	f001 fc71 	bl	8101d00 <HAL_Delay>

	  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	  HAL_Delay(500);
 810041e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8100422:	f001 fc6d 	bl	8101d00 <HAL_Delay>

	  printf("Hello from CM4 \r\n");
 8100426:	4805      	ldr	r0, [pc, #20]	@ (810043c <main+0xb8>)
 8100428:	f008 f81e 	bl	8108468 <puts>
  {
 810042c:	bf00      	nop
 810042e:	e7f2      	b.n	8100416 <main+0x92>
 8100430:	58024400 	.word	0x58024400
 8100434:	e000ed00 	.word	0xe000ed00
 8100438:	58026400 	.word	0x58026400
 810043c:	08108bb4 	.word	0x08108bb4

08100440 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100440:	b580      	push	{r7, lr}
 8100442:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100444:	4b15      	ldr	r3, [pc, #84]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 8100446:	4a16      	ldr	r2, [pc, #88]	@ (81004a0 <MX_HDMI_CEC_Init+0x60>)
 8100448:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 810044a:	4b14      	ldr	r3, [pc, #80]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 810044c:	2200      	movs	r2, #0
 810044e:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100450:	4b12      	ldr	r3, [pc, #72]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 8100452:	2200      	movs	r2, #0
 8100454:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100456:	4b11      	ldr	r3, [pc, #68]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 8100458:	2210      	movs	r2, #16
 810045a:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 810045c:	4b0f      	ldr	r3, [pc, #60]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 810045e:	2200      	movs	r2, #0
 8100460:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100462:	4b0e      	ldr	r3, [pc, #56]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 8100464:	2200      	movs	r2, #0
 8100466:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100468:	4b0c      	ldr	r3, [pc, #48]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 810046a:	2200      	movs	r2, #0
 810046c:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 810046e:	4b0b      	ldr	r3, [pc, #44]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 8100470:	2200      	movs	r2, #0
 8100472:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100474:	4b09      	ldr	r3, [pc, #36]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 8100476:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810047a:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 810047c:	4b07      	ldr	r3, [pc, #28]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 810047e:	2200      	movs	r2, #0
 8100480:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100482:	4b06      	ldr	r3, [pc, #24]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 8100484:	4a07      	ldr	r2, [pc, #28]	@ (81004a4 <MX_HDMI_CEC_Init+0x64>)
 8100486:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100488:	4804      	ldr	r0, [pc, #16]	@ (810049c <MX_HDMI_CEC_Init+0x5c>)
 810048a:	f001 fc7f 	bl	8101d8c <HAL_CEC_Init>
 810048e:	4603      	mov	r3, r0
 8100490:	2b00      	cmp	r3, #0
 8100492:	d001      	beq.n	8100498 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100494:	f000 fd46 	bl	8100f24 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100498:	bf00      	nop
 810049a:	bd80      	pop	{r7, pc}
 810049c:	1000008c 	.word	0x1000008c
 81004a0:	40006c00 	.word	0x40006c00
 81004a4:	10000900 	.word	0x10000900

081004a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 81004a8:	b580      	push	{r7, lr}
 81004aa:	b08a      	sub	sp, #40	@ 0x28
 81004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 81004ae:	463b      	mov	r3, r7
 81004b0:	2228      	movs	r2, #40	@ 0x28
 81004b2:	2100      	movs	r1, #0
 81004b4:	4618      	mov	r0, r3
 81004b6:	f008 f8b7 	bl	8108628 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 81004ba:	4b20      	ldr	r3, [pc, #128]	@ (810053c <MX_RTC_Init+0x94>)
 81004bc:	4a20      	ldr	r2, [pc, #128]	@ (8100540 <MX_RTC_Init+0x98>)
 81004be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 81004c0:	4b1e      	ldr	r3, [pc, #120]	@ (810053c <MX_RTC_Init+0x94>)
 81004c2:	2200      	movs	r2, #0
 81004c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 81004c6:	4b1d      	ldr	r3, [pc, #116]	@ (810053c <MX_RTC_Init+0x94>)
 81004c8:	227f      	movs	r2, #127	@ 0x7f
 81004ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 81004cc:	4b1b      	ldr	r3, [pc, #108]	@ (810053c <MX_RTC_Init+0x94>)
 81004ce:	22ff      	movs	r2, #255	@ 0xff
 81004d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 81004d2:	4b1a      	ldr	r3, [pc, #104]	@ (810053c <MX_RTC_Init+0x94>)
 81004d4:	2200      	movs	r2, #0
 81004d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 81004d8:	4b18      	ldr	r3, [pc, #96]	@ (810053c <MX_RTC_Init+0x94>)
 81004da:	2200      	movs	r2, #0
 81004dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 81004de:	4b17      	ldr	r3, [pc, #92]	@ (810053c <MX_RTC_Init+0x94>)
 81004e0:	2200      	movs	r2, #0
 81004e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 81004e4:	4b15      	ldr	r3, [pc, #84]	@ (810053c <MX_RTC_Init+0x94>)
 81004e6:	2200      	movs	r2, #0
 81004e8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 81004ea:	4814      	ldr	r0, [pc, #80]	@ (810053c <MX_RTC_Init+0x94>)
 81004ec:	f005 f984 	bl	81057f8 <HAL_RTC_Init>
 81004f0:	4603      	mov	r3, r0
 81004f2:	2b00      	cmp	r3, #0
 81004f4:	d001      	beq.n	81004fa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 81004f6:	f000 fd15 	bl	8100f24 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 81004fa:	2301      	movs	r3, #1
 81004fc:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 81004fe:	2301      	movs	r3, #1
 8100500:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100502:	2300      	movs	r3, #0
 8100504:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100506:	2300      	movs	r3, #0
 8100508:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 810050a:	2300      	movs	r3, #0
 810050c:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 810050e:	2300      	movs	r3, #0
 8100510:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100512:	2300      	movs	r3, #0
 8100514:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100516:	2300      	movs	r3, #0
 8100518:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 810051a:	2380      	movs	r3, #128	@ 0x80
 810051c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 810051e:	463b      	mov	r3, r7
 8100520:	4619      	mov	r1, r3
 8100522:	4806      	ldr	r0, [pc, #24]	@ (810053c <MX_RTC_Init+0x94>)
 8100524:	f005 fa80 	bl	8105a28 <HAL_RTCEx_SetTamper>
 8100528:	4603      	mov	r3, r0
 810052a:	2b00      	cmp	r3, #0
 810052c:	d001      	beq.n	8100532 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 810052e:	f000 fcf9 	bl	8100f24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100532:	bf00      	nop
 8100534:	3728      	adds	r7, #40	@ 0x28
 8100536:	46bd      	mov	sp, r7
 8100538:	bd80      	pop	{r7, pc}
 810053a:	bf00      	nop
 810053c:	100000d0 	.word	0x100000d0
 8100540:	58004000 	.word	0x58004000

08100544 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100544:	b580      	push	{r7, lr}
 8100546:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100548:	4b4a      	ldr	r3, [pc, #296]	@ (8100674 <MX_SAI1_Init+0x130>)
 810054a:	4a4b      	ldr	r2, [pc, #300]	@ (8100678 <MX_SAI1_Init+0x134>)
 810054c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 810054e:	4b49      	ldr	r3, [pc, #292]	@ (8100674 <MX_SAI1_Init+0x130>)
 8100550:	2200      	movs	r2, #0
 8100552:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100554:	4b47      	ldr	r3, [pc, #284]	@ (8100674 <MX_SAI1_Init+0x130>)
 8100556:	2200      	movs	r2, #0
 8100558:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 810055a:	4b46      	ldr	r3, [pc, #280]	@ (8100674 <MX_SAI1_Init+0x130>)
 810055c:	2240      	movs	r2, #64	@ 0x40
 810055e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100560:	4b44      	ldr	r3, [pc, #272]	@ (8100674 <MX_SAI1_Init+0x130>)
 8100562:	2200      	movs	r2, #0
 8100564:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100566:	4b43      	ldr	r3, [pc, #268]	@ (8100674 <MX_SAI1_Init+0x130>)
 8100568:	2200      	movs	r2, #0
 810056a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 810056c:	4b41      	ldr	r3, [pc, #260]	@ (8100674 <MX_SAI1_Init+0x130>)
 810056e:	2200      	movs	r2, #0
 8100570:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100572:	4b40      	ldr	r3, [pc, #256]	@ (8100674 <MX_SAI1_Init+0x130>)
 8100574:	2200      	movs	r2, #0
 8100576:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100578:	4b3e      	ldr	r3, [pc, #248]	@ (8100674 <MX_SAI1_Init+0x130>)
 810057a:	2200      	movs	r2, #0
 810057c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 810057e:	4b3d      	ldr	r3, [pc, #244]	@ (8100674 <MX_SAI1_Init+0x130>)
 8100580:	2200      	movs	r2, #0
 8100582:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100584:	4b3b      	ldr	r3, [pc, #236]	@ (8100674 <MX_SAI1_Init+0x130>)
 8100586:	2200      	movs	r2, #0
 8100588:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 810058a:	4b3a      	ldr	r3, [pc, #232]	@ (8100674 <MX_SAI1_Init+0x130>)
 810058c:	4a3b      	ldr	r2, [pc, #236]	@ (810067c <MX_SAI1_Init+0x138>)
 810058e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100590:	4b38      	ldr	r3, [pc, #224]	@ (8100674 <MX_SAI1_Init+0x130>)
 8100592:	2200      	movs	r2, #0
 8100594:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100596:	4b37      	ldr	r3, [pc, #220]	@ (8100674 <MX_SAI1_Init+0x130>)
 8100598:	2200      	movs	r2, #0
 810059a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 810059c:	4b35      	ldr	r3, [pc, #212]	@ (8100674 <MX_SAI1_Init+0x130>)
 810059e:	2200      	movs	r2, #0
 81005a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 81005a2:	4b34      	ldr	r3, [pc, #208]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005a4:	2200      	movs	r2, #0
 81005a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 81005a8:	4b32      	ldr	r3, [pc, #200]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005aa:	2200      	movs	r2, #0
 81005ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 81005b0:	4b30      	ldr	r3, [pc, #192]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005b2:	2201      	movs	r2, #1
 81005b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 81005b6:	4b2f      	ldr	r3, [pc, #188]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81005bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 81005be:	4b2d      	ldr	r3, [pc, #180]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005c0:	2208      	movs	r2, #8
 81005c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 81005c4:	4b2b      	ldr	r3, [pc, #172]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005c6:	2201      	movs	r2, #1
 81005c8:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 81005ca:	4b2a      	ldr	r3, [pc, #168]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005cc:	2200      	movs	r2, #0
 81005ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 81005d0:	4b28      	ldr	r3, [pc, #160]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005d2:	2200      	movs	r2, #0
 81005d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 81005d6:	4b27      	ldr	r3, [pc, #156]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005d8:	2200      	movs	r2, #0
 81005da:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 81005dc:	4b25      	ldr	r3, [pc, #148]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005de:	2200      	movs	r2, #0
 81005e0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 81005e2:	4b24      	ldr	r3, [pc, #144]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005e4:	2200      	movs	r2, #0
 81005e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 81005e8:	4b22      	ldr	r3, [pc, #136]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005ea:	2201      	movs	r2, #1
 81005ec:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 81005ee:	4b21      	ldr	r3, [pc, #132]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005f0:	2200      	movs	r2, #0
 81005f2:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 81005f4:	481f      	ldr	r0, [pc, #124]	@ (8100674 <MX_SAI1_Init+0x130>)
 81005f6:	f005 faf7 	bl	8105be8 <HAL_SAI_Init>
 81005fa:	4603      	mov	r3, r0
 81005fc:	2b00      	cmp	r3, #0
 81005fe:	d001      	beq.n	8100604 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8100600:	f000 fc90 	bl	8100f24 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100604:	4b1e      	ldr	r3, [pc, #120]	@ (8100680 <MX_SAI1_Init+0x13c>)
 8100606:	4a1f      	ldr	r2, [pc, #124]	@ (8100684 <MX_SAI1_Init+0x140>)
 8100608:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 810060a:	4b1d      	ldr	r3, [pc, #116]	@ (8100680 <MX_SAI1_Init+0x13c>)
 810060c:	2204      	movs	r2, #4
 810060e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100610:	4b1b      	ldr	r3, [pc, #108]	@ (8100680 <MX_SAI1_Init+0x13c>)
 8100612:	2200      	movs	r2, #0
 8100614:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100616:	4b1a      	ldr	r3, [pc, #104]	@ (8100680 <MX_SAI1_Init+0x13c>)
 8100618:	2200      	movs	r2, #0
 810061a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 810061c:	4b18      	ldr	r3, [pc, #96]	@ (8100680 <MX_SAI1_Init+0x13c>)
 810061e:	2200      	movs	r2, #0
 8100620:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100622:	4b17      	ldr	r3, [pc, #92]	@ (8100680 <MX_SAI1_Init+0x13c>)
 8100624:	2200      	movs	r2, #0
 8100626:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100628:	4b15      	ldr	r3, [pc, #84]	@ (8100680 <MX_SAI1_Init+0x13c>)
 810062a:	2200      	movs	r2, #0
 810062c:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 810062e:	4b14      	ldr	r3, [pc, #80]	@ (8100680 <MX_SAI1_Init+0x13c>)
 8100630:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100634:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100636:	4b12      	ldr	r3, [pc, #72]	@ (8100680 <MX_SAI1_Init+0x13c>)
 8100638:	2200      	movs	r2, #0
 810063a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 810063c:	4b10      	ldr	r3, [pc, #64]	@ (8100680 <MX_SAI1_Init+0x13c>)
 810063e:	2200      	movs	r2, #0
 8100640:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100642:	4b0f      	ldr	r3, [pc, #60]	@ (8100680 <MX_SAI1_Init+0x13c>)
 8100644:	2200      	movs	r2, #0
 8100646:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100648:	4b0d      	ldr	r3, [pc, #52]	@ (8100680 <MX_SAI1_Init+0x13c>)
 810064a:	2200      	movs	r2, #0
 810064c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100650:	4b0b      	ldr	r3, [pc, #44]	@ (8100680 <MX_SAI1_Init+0x13c>)
 8100652:	2201      	movs	r2, #1
 8100654:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100656:	4b0a      	ldr	r3, [pc, #40]	@ (8100680 <MX_SAI1_Init+0x13c>)
 8100658:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810065c:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 810065e:	4808      	ldr	r0, [pc, #32]	@ (8100680 <MX_SAI1_Init+0x13c>)
 8100660:	f005 fac2 	bl	8105be8 <HAL_SAI_Init>
 8100664:	4603      	mov	r3, r0
 8100666:	2b00      	cmp	r3, #0
 8100668:	d001      	beq.n	810066e <MX_SAI1_Init+0x12a>
  {
    Error_Handler();
 810066a:	f000 fc5b 	bl	8100f24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 810066e:	bf00      	nop
 8100670:	bd80      	pop	{r7, pc}
 8100672:	bf00      	nop
 8100674:	100000f4 	.word	0x100000f4
 8100678:	40015804 	.word	0x40015804
 810067c:	0002ee00 	.word	0x0002ee00
 8100680:	1000018c 	.word	0x1000018c
 8100684:	40015824 	.word	0x40015824

08100688 <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100688:	b580      	push	{r7, lr}
 810068a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 810068c:	4b19      	ldr	r3, [pc, #100]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 810068e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100692:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100694:	4b17      	ldr	r3, [pc, #92]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 8100696:	2200      	movs	r2, #0
 8100698:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 810069a:	4b16      	ldr	r3, [pc, #88]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 810069c:	2200      	movs	r2, #0
 810069e:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 81006a0:	4b14      	ldr	r3, [pc, #80]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006a2:	2200      	movs	r2, #0
 81006a4:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 81006a6:	4b13      	ldr	r3, [pc, #76]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006a8:	2200      	movs	r2, #0
 81006aa:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 81006ac:	4b11      	ldr	r3, [pc, #68]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006ae:	2200      	movs	r2, #0
 81006b0:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 81006b2:	4b10      	ldr	r3, [pc, #64]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006b4:	2200      	movs	r2, #0
 81006b6:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 81006b8:	4b0e      	ldr	r3, [pc, #56]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006ba:	2200      	movs	r2, #0
 81006bc:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 81006be:	4b0d      	ldr	r3, [pc, #52]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006c0:	2200      	movs	r2, #0
 81006c2:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 81006c4:	4b0b      	ldr	r3, [pc, #44]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006c6:	2200      	movs	r2, #0
 81006c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 81006ca:	4b0a      	ldr	r3, [pc, #40]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006cc:	2200      	movs	r2, #0
 81006ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 81006d0:	4b08      	ldr	r3, [pc, #32]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006d2:	2200      	movs	r2, #0
 81006d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 81006d8:	4b06      	ldr	r3, [pc, #24]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006da:	2200      	movs	r2, #0
 81006dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 81006e0:	4804      	ldr	r0, [pc, #16]	@ (81006f4 <MX_SPDIFRX1_Init+0x6c>)
 81006e2:	f005 fd65 	bl	81061b0 <HAL_SPDIFRX_Init>
 81006e6:	4603      	mov	r3, r0
 81006e8:	2b00      	cmp	r3, #0
 81006ea:	d001      	beq.n	81006f0 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 81006ec:	f000 fc1a 	bl	8100f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 81006f0:	bf00      	nop
 81006f2:	bd80      	pop	{r7, pc}
 81006f4:	10000224 	.word	0x10000224

081006f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 81006f8:	b580      	push	{r7, lr}
 81006fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 81006fc:	4b27      	ldr	r3, [pc, #156]	@ (810079c <MX_SPI2_Init+0xa4>)
 81006fe:	4a28      	ldr	r2, [pc, #160]	@ (81007a0 <MX_SPI2_Init+0xa8>)
 8100700:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8100702:	4b26      	ldr	r3, [pc, #152]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100704:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100708:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 810070a:	4b24      	ldr	r3, [pc, #144]	@ (810079c <MX_SPI2_Init+0xa4>)
 810070c:	2200      	movs	r2, #0
 810070e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8100710:	4b22      	ldr	r3, [pc, #136]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100712:	2207      	movs	r2, #7
 8100714:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100716:	4b21      	ldr	r3, [pc, #132]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100718:	2200      	movs	r2, #0
 810071a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 810071c:	4b1f      	ldr	r3, [pc, #124]	@ (810079c <MX_SPI2_Init+0xa4>)
 810071e:	2200      	movs	r2, #0
 8100720:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8100722:	4b1e      	ldr	r3, [pc, #120]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100724:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8100728:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 810072a:	4b1c      	ldr	r3, [pc, #112]	@ (810079c <MX_SPI2_Init+0xa4>)
 810072c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8100730:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100732:	4b1a      	ldr	r3, [pc, #104]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100734:	2200      	movs	r2, #0
 8100736:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8100738:	4b18      	ldr	r3, [pc, #96]	@ (810079c <MX_SPI2_Init+0xa4>)
 810073a:	2200      	movs	r2, #0
 810073c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810073e:	4b17      	ldr	r3, [pc, #92]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100740:	2200      	movs	r2, #0
 8100742:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100744:	4b15      	ldr	r3, [pc, #84]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100746:	2200      	movs	r2, #0
 8100748:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810074a:	4b14      	ldr	r3, [pc, #80]	@ (810079c <MX_SPI2_Init+0xa4>)
 810074c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100750:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100752:	4b12      	ldr	r3, [pc, #72]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100754:	2200      	movs	r2, #0
 8100756:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100758:	4b10      	ldr	r3, [pc, #64]	@ (810079c <MX_SPI2_Init+0xa4>)
 810075a:	2200      	movs	r2, #0
 810075c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810075e:	4b0f      	ldr	r3, [pc, #60]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100760:	2200      	movs	r2, #0
 8100762:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100764:	4b0d      	ldr	r3, [pc, #52]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100766:	2200      	movs	r2, #0
 8100768:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810076a:	4b0c      	ldr	r3, [pc, #48]	@ (810079c <MX_SPI2_Init+0xa4>)
 810076c:	2200      	movs	r2, #0
 810076e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100770:	4b0a      	ldr	r3, [pc, #40]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100772:	2200      	movs	r2, #0
 8100774:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100776:	4b09      	ldr	r3, [pc, #36]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100778:	2200      	movs	r2, #0
 810077a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810077c:	4b07      	ldr	r3, [pc, #28]	@ (810079c <MX_SPI2_Init+0xa4>)
 810077e:	2200      	movs	r2, #0
 8100780:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100782:	4b06      	ldr	r3, [pc, #24]	@ (810079c <MX_SPI2_Init+0xa4>)
 8100784:	2200      	movs	r2, #0
 8100786:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100788:	4804      	ldr	r0, [pc, #16]	@ (810079c <MX_SPI2_Init+0xa4>)
 810078a:	f005 fd7f 	bl	810628c <HAL_SPI_Init>
 810078e:	4603      	mov	r3, r0
 8100790:	2b00      	cmp	r3, #0
 8100792:	d001      	beq.n	8100798 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8100794:	f000 fbc6 	bl	8100f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100798:	bf00      	nop
 810079a:	bd80      	pop	{r7, pc}
 810079c:	10000274 	.word	0x10000274
 81007a0:	40003800 	.word	0x40003800

081007a4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 81007a4:	b580      	push	{r7, lr}
 81007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 81007a8:	4b26      	ldr	r3, [pc, #152]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007aa:	4a27      	ldr	r2, [pc, #156]	@ (8100848 <MX_SPI5_Init+0xa4>)
 81007ac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 81007ae:	4b25      	ldr	r3, [pc, #148]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 81007b4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 81007b6:	4b23      	ldr	r3, [pc, #140]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007b8:	2200      	movs	r2, #0
 81007ba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 81007bc:	4b21      	ldr	r3, [pc, #132]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007be:	2203      	movs	r2, #3
 81007c0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 81007c2:	4b20      	ldr	r3, [pc, #128]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007c4:	2200      	movs	r2, #0
 81007c6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 81007c8:	4b1e      	ldr	r3, [pc, #120]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007ca:	2200      	movs	r2, #0
 81007cc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 81007ce:	4b1d      	ldr	r3, [pc, #116]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007d0:	2200      	movs	r2, #0
 81007d2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 81007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007d6:	2200      	movs	r2, #0
 81007d8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81007da:	4b1a      	ldr	r3, [pc, #104]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007dc:	2200      	movs	r2, #0
 81007de:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 81007e0:	4b18      	ldr	r3, [pc, #96]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007e2:	2200      	movs	r2, #0
 81007e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81007e6:	4b17      	ldr	r3, [pc, #92]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007e8:	2200      	movs	r2, #0
 81007ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 81007ec:	4b15      	ldr	r3, [pc, #84]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007ee:	2200      	movs	r2, #0
 81007f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81007f2:	4b14      	ldr	r3, [pc, #80]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81007f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81007fa:	4b12      	ldr	r3, [pc, #72]	@ (8100844 <MX_SPI5_Init+0xa0>)
 81007fc:	2200      	movs	r2, #0
 81007fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100800:	4b10      	ldr	r3, [pc, #64]	@ (8100844 <MX_SPI5_Init+0xa0>)
 8100802:	2200      	movs	r2, #0
 8100804:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100806:	4b0f      	ldr	r3, [pc, #60]	@ (8100844 <MX_SPI5_Init+0xa0>)
 8100808:	2200      	movs	r2, #0
 810080a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810080c:	4b0d      	ldr	r3, [pc, #52]	@ (8100844 <MX_SPI5_Init+0xa0>)
 810080e:	2200      	movs	r2, #0
 8100810:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100812:	4b0c      	ldr	r3, [pc, #48]	@ (8100844 <MX_SPI5_Init+0xa0>)
 8100814:	2200      	movs	r2, #0
 8100816:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100818:	4b0a      	ldr	r3, [pc, #40]	@ (8100844 <MX_SPI5_Init+0xa0>)
 810081a:	2200      	movs	r2, #0
 810081c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810081e:	4b09      	ldr	r3, [pc, #36]	@ (8100844 <MX_SPI5_Init+0xa0>)
 8100820:	2200      	movs	r2, #0
 8100822:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100824:	4b07      	ldr	r3, [pc, #28]	@ (8100844 <MX_SPI5_Init+0xa0>)
 8100826:	2200      	movs	r2, #0
 8100828:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810082a:	4b06      	ldr	r3, [pc, #24]	@ (8100844 <MX_SPI5_Init+0xa0>)
 810082c:	2200      	movs	r2, #0
 810082e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100830:	4804      	ldr	r0, [pc, #16]	@ (8100844 <MX_SPI5_Init+0xa0>)
 8100832:	f005 fd2b 	bl	810628c <HAL_SPI_Init>
 8100836:	4603      	mov	r3, r0
 8100838:	2b00      	cmp	r3, #0
 810083a:	d001      	beq.n	8100840 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 810083c:	f000 fb72 	bl	8100f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100840:	bf00      	nop
 8100842:	bd80      	pop	{r7, pc}
 8100844:	100002fc 	.word	0x100002fc
 8100848:	40015000 	.word	0x40015000

0810084c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 810084c:	b580      	push	{r7, lr}
 810084e:	b096      	sub	sp, #88	@ 0x58
 8100850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100852:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100856:	2200      	movs	r2, #0
 8100858:	601a      	str	r2, [r3, #0]
 810085a:	605a      	str	r2, [r3, #4]
 810085c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810085e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100862:	2200      	movs	r2, #0
 8100864:	601a      	str	r2, [r3, #0]
 8100866:	605a      	str	r2, [r3, #4]
 8100868:	609a      	str	r2, [r3, #8]
 810086a:	60da      	str	r2, [r3, #12]
 810086c:	611a      	str	r2, [r3, #16]
 810086e:	615a      	str	r2, [r3, #20]
 8100870:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100872:	1d3b      	adds	r3, r7, #4
 8100874:	222c      	movs	r2, #44	@ 0x2c
 8100876:	2100      	movs	r1, #0
 8100878:	4618      	mov	r0, r3
 810087a:	f007 fed5 	bl	8108628 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 810087e:	4b39      	ldr	r3, [pc, #228]	@ (8100964 <MX_TIM8_Init+0x118>)
 8100880:	4a39      	ldr	r2, [pc, #228]	@ (8100968 <MX_TIM8_Init+0x11c>)
 8100882:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100884:	4b37      	ldr	r3, [pc, #220]	@ (8100964 <MX_TIM8_Init+0x118>)
 8100886:	2200      	movs	r2, #0
 8100888:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 810088a:	4b36      	ldr	r3, [pc, #216]	@ (8100964 <MX_TIM8_Init+0x118>)
 810088c:	2200      	movs	r2, #0
 810088e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100890:	4b34      	ldr	r3, [pc, #208]	@ (8100964 <MX_TIM8_Init+0x118>)
 8100892:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100896:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100898:	4b32      	ldr	r3, [pc, #200]	@ (8100964 <MX_TIM8_Init+0x118>)
 810089a:	2200      	movs	r2, #0
 810089c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 810089e:	4b31      	ldr	r3, [pc, #196]	@ (8100964 <MX_TIM8_Init+0x118>)
 81008a0:	2200      	movs	r2, #0
 81008a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81008a4:	4b2f      	ldr	r3, [pc, #188]	@ (8100964 <MX_TIM8_Init+0x118>)
 81008a6:	2200      	movs	r2, #0
 81008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 81008aa:	482e      	ldr	r0, [pc, #184]	@ (8100964 <MX_TIM8_Init+0x118>)
 81008ac:	f005 fefc 	bl	81066a8 <HAL_TIM_PWM_Init>
 81008b0:	4603      	mov	r3, r0
 81008b2:	2b00      	cmp	r3, #0
 81008b4:	d001      	beq.n	81008ba <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 81008b6:	f000 fb35 	bl	8100f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81008ba:	2300      	movs	r3, #0
 81008bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81008be:	2300      	movs	r3, #0
 81008c0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81008c2:	2300      	movs	r3, #0
 81008c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 81008c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 81008ca:	4619      	mov	r1, r3
 81008cc:	4825      	ldr	r0, [pc, #148]	@ (8100964 <MX_TIM8_Init+0x118>)
 81008ce:	f006 fcfb 	bl	81072c8 <HAL_TIMEx_MasterConfigSynchronization>
 81008d2:	4603      	mov	r3, r0
 81008d4:	2b00      	cmp	r3, #0
 81008d6:	d001      	beq.n	81008dc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 81008d8:	f000 fb24 	bl	8100f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81008dc:	2360      	movs	r3, #96	@ 0x60
 81008de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 81008e0:	2300      	movs	r3, #0
 81008e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81008e4:	2300      	movs	r3, #0
 81008e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81008e8:	2300      	movs	r3, #0
 81008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81008ec:	2300      	movs	r3, #0
 81008ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81008f0:	2300      	movs	r3, #0
 81008f2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81008f4:	2300      	movs	r3, #0
 81008f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81008f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81008fc:	2200      	movs	r2, #0
 81008fe:	4619      	mov	r1, r3
 8100900:	4818      	ldr	r0, [pc, #96]	@ (8100964 <MX_TIM8_Init+0x118>)
 8100902:	f006 f82f 	bl	8106964 <HAL_TIM_PWM_ConfigChannel>
 8100906:	4603      	mov	r3, r0
 8100908:	2b00      	cmp	r3, #0
 810090a:	d001      	beq.n	8100910 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 810090c:	f000 fb0a 	bl	8100f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100910:	2300      	movs	r3, #0
 8100912:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100914:	2300      	movs	r3, #0
 8100916:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100918:	2300      	movs	r3, #0
 810091a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 810091c:	2300      	movs	r3, #0
 810091e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100920:	2300      	movs	r3, #0
 8100922:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8100928:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 810092a:	2300      	movs	r3, #0
 810092c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 810092e:	2300      	movs	r3, #0
 8100930:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8100936:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100938:	2300      	movs	r3, #0
 810093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 810093c:	2300      	movs	r3, #0
 810093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8100940:	1d3b      	adds	r3, r7, #4
 8100942:	4619      	mov	r1, r3
 8100944:	4807      	ldr	r0, [pc, #28]	@ (8100964 <MX_TIM8_Init+0x118>)
 8100946:	f006 fd4d 	bl	81073e4 <HAL_TIMEx_ConfigBreakDeadTime>
 810094a:	4603      	mov	r3, r0
 810094c:	2b00      	cmp	r3, #0
 810094e:	d001      	beq.n	8100954 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8100950:	f000 fae8 	bl	8100f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8100954:	4803      	ldr	r0, [pc, #12]	@ (8100964 <MX_TIM8_Init+0x118>)
 8100956:	f000 fd87 	bl	8101468 <HAL_TIM_MspPostInit>

}
 810095a:	bf00      	nop
 810095c:	3758      	adds	r7, #88	@ 0x58
 810095e:	46bd      	mov	sp, r7
 8100960:	bd80      	pop	{r7, pc}
 8100962:	bf00      	nop
 8100964:	10000384 	.word	0x10000384
 8100968:	40010400 	.word	0x40010400

0810096c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 810096c:	b580      	push	{r7, lr}
 810096e:	b088      	sub	sp, #32
 8100970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8100972:	1d3b      	adds	r3, r7, #4
 8100974:	2200      	movs	r2, #0
 8100976:	601a      	str	r2, [r3, #0]
 8100978:	605a      	str	r2, [r3, #4]
 810097a:	609a      	str	r2, [r3, #8]
 810097c:	60da      	str	r2, [r3, #12]
 810097e:	611a      	str	r2, [r3, #16]
 8100980:	615a      	str	r2, [r3, #20]
 8100982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8100984:	4b1e      	ldr	r3, [pc, #120]	@ (8100a00 <MX_TIM13_Init+0x94>)
 8100986:	4a1f      	ldr	r2, [pc, #124]	@ (8100a04 <MX_TIM13_Init+0x98>)
 8100988:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 810098a:	4b1d      	ldr	r3, [pc, #116]	@ (8100a00 <MX_TIM13_Init+0x94>)
 810098c:	2200      	movs	r2, #0
 810098e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100990:	4b1b      	ldr	r3, [pc, #108]	@ (8100a00 <MX_TIM13_Init+0x94>)
 8100992:	2200      	movs	r2, #0
 8100994:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8100996:	4b1a      	ldr	r3, [pc, #104]	@ (8100a00 <MX_TIM13_Init+0x94>)
 8100998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810099c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810099e:	4b18      	ldr	r3, [pc, #96]	@ (8100a00 <MX_TIM13_Init+0x94>)
 81009a0:	2200      	movs	r2, #0
 81009a2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81009a4:	4b16      	ldr	r3, [pc, #88]	@ (8100a00 <MX_TIM13_Init+0x94>)
 81009a6:	2200      	movs	r2, #0
 81009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 81009aa:	4815      	ldr	r0, [pc, #84]	@ (8100a00 <MX_TIM13_Init+0x94>)
 81009ac:	f005 fdad 	bl	810650a <HAL_TIM_Base_Init>
 81009b0:	4603      	mov	r3, r0
 81009b2:	2b00      	cmp	r3, #0
 81009b4:	d001      	beq.n	81009ba <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 81009b6:	f000 fab5 	bl	8100f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 81009ba:	4811      	ldr	r0, [pc, #68]	@ (8100a00 <MX_TIM13_Init+0x94>)
 81009bc:	f005 fe74 	bl	81066a8 <HAL_TIM_PWM_Init>
 81009c0:	4603      	mov	r3, r0
 81009c2:	2b00      	cmp	r3, #0
 81009c4:	d001      	beq.n	81009ca <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 81009c6:	f000 faad 	bl	8100f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81009ca:	2360      	movs	r3, #96	@ 0x60
 81009cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 81009ce:	2300      	movs	r3, #0
 81009d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81009d2:	2300      	movs	r3, #0
 81009d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81009d6:	2300      	movs	r3, #0
 81009d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81009da:	1d3b      	adds	r3, r7, #4
 81009dc:	2200      	movs	r2, #0
 81009de:	4619      	mov	r1, r3
 81009e0:	4807      	ldr	r0, [pc, #28]	@ (8100a00 <MX_TIM13_Init+0x94>)
 81009e2:	f005 ffbf 	bl	8106964 <HAL_TIM_PWM_ConfigChannel>
 81009e6:	4603      	mov	r3, r0
 81009e8:	2b00      	cmp	r3, #0
 81009ea:	d001      	beq.n	81009f0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 81009ec:	f000 fa9a 	bl	8100f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 81009f0:	4803      	ldr	r0, [pc, #12]	@ (8100a00 <MX_TIM13_Init+0x94>)
 81009f2:	f000 fd39 	bl	8101468 <HAL_TIM_MspPostInit>

}
 81009f6:	bf00      	nop
 81009f8:	3720      	adds	r7, #32
 81009fa:	46bd      	mov	sp, r7
 81009fc:	bd80      	pop	{r7, pc}
 81009fe:	bf00      	nop
 8100a00:	100003d0 	.word	0x100003d0
 8100a04:	40001c00 	.word	0x40001c00

08100a08 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8100a08:	b580      	push	{r7, lr}
 8100a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8100a0c:	4b15      	ldr	r3, [pc, #84]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a0e:	4a16      	ldr	r2, [pc, #88]	@ (8100a68 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8100a10:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8100a12:	4b14      	ldr	r3, [pc, #80]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a14:	2209      	movs	r2, #9
 8100a16:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8100a18:	4b12      	ldr	r3, [pc, #72]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a1a:	2200      	movs	r2, #0
 8100a1c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8100a1e:	4b11      	ldr	r3, [pc, #68]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a20:	2200      	movs	r2, #0
 8100a22:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8100a24:	4b0f      	ldr	r3, [pc, #60]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a26:	2201      	movs	r2, #1
 8100a28:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8100a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a2c:	2200      	movs	r2, #0
 8100a2e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8100a30:	4b0c      	ldr	r3, [pc, #48]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a32:	2200      	movs	r2, #0
 8100a34:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8100a36:	4b0b      	ldr	r3, [pc, #44]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a38:	2200      	movs	r2, #0
 8100a3a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8100a3c:	4b09      	ldr	r3, [pc, #36]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a3e:	2200      	movs	r2, #0
 8100a40:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8100a42:	4b08      	ldr	r3, [pc, #32]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a44:	2200      	movs	r2, #0
 8100a46:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8100a48:	4b06      	ldr	r3, [pc, #24]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a4a:	2200      	movs	r2, #0
 8100a4c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8100a4e:	4805      	ldr	r0, [pc, #20]	@ (8100a64 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8100a50:	f001 fdc8 	bl	81025e4 <HAL_PCD_Init>
 8100a54:	4603      	mov	r3, r0
 8100a56:	2b00      	cmp	r3, #0
 8100a58:	d001      	beq.n	8100a5e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8100a5a:	f000 fa63 	bl	8100f24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8100a5e:	bf00      	nop
 8100a60:	bd80      	pop	{r7, pc}
 8100a62:	bf00      	nop
 8100a64:	1000041c 	.word	0x1000041c
 8100a68:	40040000 	.word	0x40040000

08100a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100a6c:	b580      	push	{r7, lr}
 8100a6e:	b090      	sub	sp, #64	@ 0x40
 8100a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100a72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100a76:	2200      	movs	r2, #0
 8100a78:	601a      	str	r2, [r3, #0]
 8100a7a:	605a      	str	r2, [r3, #4]
 8100a7c:	609a      	str	r2, [r3, #8]
 8100a7e:	60da      	str	r2, [r3, #12]
 8100a80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100a82:	4bbc      	ldr	r3, [pc, #752]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a88:	4aba      	ldr	r2, [pc, #744]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100a92:	4bb8      	ldr	r3, [pc, #736]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8100a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100aa0:	4bb4      	ldr	r3, [pc, #720]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100aa6:	4ab3      	ldr	r2, [pc, #716]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100aa8:	f043 0302 	orr.w	r3, r3, #2
 8100aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100ab0:	4bb0      	ldr	r3, [pc, #704]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ab6:	f003 0302 	and.w	r3, r3, #2
 8100aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8100abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100abe:	4bad      	ldr	r3, [pc, #692]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ac4:	4aab      	ldr	r2, [pc, #684]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100ace:	4ba9      	ldr	r3, [pc, #676]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100ad8:	623b      	str	r3, [r7, #32]
 8100ada:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100adc:	4ba5      	ldr	r3, [pc, #660]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ae2:	4aa4      	ldr	r2, [pc, #656]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100ae4:	f043 0304 	orr.w	r3, r3, #4
 8100ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100aec:	4ba1      	ldr	r3, [pc, #644]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100af2:	f003 0304 	and.w	r3, r3, #4
 8100af6:	61fb      	str	r3, [r7, #28]
 8100af8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100afa:	4b9e      	ldr	r3, [pc, #632]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b00:	4a9c      	ldr	r2, [pc, #624]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b02:	f043 0310 	orr.w	r3, r3, #16
 8100b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b0a:	4b9a      	ldr	r3, [pc, #616]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b10:	f003 0310 	and.w	r3, r3, #16
 8100b14:	61bb      	str	r3, [r7, #24]
 8100b16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100b18:	4b96      	ldr	r3, [pc, #600]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b1e:	4a95      	ldr	r2, [pc, #596]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100b24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b28:	4b92      	ldr	r3, [pc, #584]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100b32:	617b      	str	r3, [r7, #20]
 8100b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100b36:	4b8f      	ldr	r3, [pc, #572]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b3c:	4a8d      	ldr	r2, [pc, #564]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b3e:	f043 0308 	orr.w	r3, r3, #8
 8100b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b46:	4b8b      	ldr	r3, [pc, #556]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b4c:	f003 0308 	and.w	r3, r3, #8
 8100b50:	613b      	str	r3, [r7, #16]
 8100b52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100b54:	4b87      	ldr	r3, [pc, #540]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b5a:	4a86      	ldr	r2, [pc, #536]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b5c:	f043 0301 	orr.w	r3, r3, #1
 8100b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b64:	4b83      	ldr	r3, [pc, #524]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b6a:	f003 0301 	and.w	r3, r3, #1
 8100b6e:	60fb      	str	r3, [r7, #12]
 8100b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100b72:	4b80      	ldr	r3, [pc, #512]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b78:	4a7e      	ldr	r2, [pc, #504]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b7a:	f043 0320 	orr.w	r3, r3, #32
 8100b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b82:	4b7c      	ldr	r3, [pc, #496]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b88:	f003 0320 	and.w	r3, r3, #32
 8100b8c:	60bb      	str	r3, [r7, #8]
 8100b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8100b90:	4b78      	ldr	r3, [pc, #480]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b96:	4a77      	ldr	r2, [pc, #476]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100b98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8100b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100ba0:	4b74      	ldr	r3, [pc, #464]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8100baa:	607b      	str	r3, [r7, #4]
 8100bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100bae:	4b71      	ldr	r3, [pc, #452]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100bb4:	4a6f      	ldr	r2, [pc, #444]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8100bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8100d74 <MX_GPIO_Init+0x308>)
 8100bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8100bc8:	603b      	str	r3, [r7, #0]
 8100bca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PI6 PI5 PI4 PI1
                           PI0 PI7 PI2 PI3
                           PI9 PI10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8100bcc:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8100bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100bd2:	2302      	movs	r3, #2
 8100bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bd6:	2300      	movs	r3, #0
 8100bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100bda:	2303      	movs	r3, #3
 8100bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100bde:	230c      	movs	r3, #12
 8100be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100be2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100be6:	4619      	mov	r1, r3
 8100be8:	4863      	ldr	r0, [pc, #396]	@ (8100d78 <MX_GPIO_Init+0x30c>)
 8100bea:	f001 fb1f 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8100bee:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8100bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100bf4:	2302      	movs	r3, #2
 8100bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bf8:	2300      	movs	r3, #0
 8100bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100bfc:	2300      	movs	r3, #0
 8100bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8100c00:	2309      	movs	r3, #9
 8100c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100c04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100c08:	4619      	mov	r1, r3
 8100c0a:	485c      	ldr	r0, [pc, #368]	@ (8100d7c <MX_GPIO_Init+0x310>)
 8100c0c:	f001 fb0e 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_8;
 8100c10:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8100c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c16:	2302      	movs	r3, #2
 8100c18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c1a:	2300      	movs	r3, #0
 8100c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100c1e:	2303      	movs	r3, #3
 8100c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8100c22:	230c      	movs	r3, #12
 8100c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100c2a:	4619      	mov	r1, r3
 8100c2c:	4854      	ldr	r0, [pc, #336]	@ (8100d80 <MX_GPIO_Init+0x314>)
 8100c2e:	f001 fafd 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8100c32:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8100c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c38:	2302      	movs	r3, #2
 8100c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c3c:	2300      	movs	r3, #0
 8100c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100c40:	2303      	movs	r3, #3
 8100c42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100c44:	230c      	movs	r3, #12
 8100c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100c48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100c4c:	4619      	mov	r1, r3
 8100c4e:	484d      	ldr	r0, [pc, #308]	@ (8100d84 <MX_GPIO_Init+0x318>)
 8100c50:	f001 faec 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8100c54:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8100c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c5a:	2302      	movs	r3, #2
 8100c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c5e:	2300      	movs	r3, #0
 8100c60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c62:	2300      	movs	r3, #0
 8100c64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100c66:	230b      	movs	r3, #11
 8100c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100c6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100c6e:	4619      	mov	r1, r3
 8100c70:	4842      	ldr	r0, [pc, #264]	@ (8100d7c <MX_GPIO_Init+0x310>)
 8100c72:	f001 fadb 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH14 PH13 PH5
                           PH10 PH11 PH9 PH12
                           PH6 PH8 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_5
 8100c76:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8100c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_12
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c7c:	2302      	movs	r3, #2
 8100c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c80:	2300      	movs	r3, #0
 8100c82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100c84:	2303      	movs	r3, #3
 8100c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100c88:	230c      	movs	r3, #12
 8100c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100c8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100c90:	4619      	mov	r1, r3
 8100c92:	483d      	ldr	r0, [pc, #244]	@ (8100d88 <MX_GPIO_Init+0x31c>)
 8100c94:	f001 faca 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG4 PG2
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_2
 8100c98:	f248 1317 	movw	r3, #33047	@ 0x8117
 8100c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c9e:	2302      	movs	r3, #2
 8100ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ca2:	2300      	movs	r3, #0
 8100ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100ca6:	2303      	movs	r3, #3
 8100ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100caa:	230c      	movs	r3, #12
 8100cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100cae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100cb2:	4619      	mov	r1, r3
 8100cb4:	4831      	ldr	r0, [pc, #196]	@ (8100d7c <MX_GPIO_Init+0x310>)
 8100cb6:	f001 fab9 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8100cba:	2304      	movs	r3, #4
 8100cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100cbe:	2302      	movs	r3, #2
 8100cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cc2:	2300      	movs	r3, #0
 8100cc4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100cc6:	2303      	movs	r3, #3
 8100cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8100cca:	230c      	movs	r3, #12
 8100ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100cce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100cd2:	4619      	mov	r1, r3
 8100cd4:	482d      	ldr	r0, [pc, #180]	@ (8100d8c <MX_GPIO_Init+0x320>)
 8100cd6:	f001 faa9 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8100cda:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8100cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ce0:	2302      	movs	r3, #2
 8100ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ce4:	2300      	movs	r3, #0
 8100ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100ce8:	2303      	movs	r3, #3
 8100cea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100cec:	230c      	movs	r3, #12
 8100cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100cf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100cf4:	4619      	mov	r1, r3
 8100cf6:	4825      	ldr	r0, [pc, #148]	@ (8100d8c <MX_GPIO_Init+0x320>)
 8100cf8:	f001 fa98 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8100cfc:	2380      	movs	r3, #128	@ 0x80
 8100cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8100d00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8100d04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d06:	2300      	movs	r3, #0
 8100d08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8100d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100d0e:	4619      	mov	r1, r3
 8100d10:	481b      	ldr	r0, [pc, #108]	@ (8100d80 <MX_GPIO_Init+0x314>)
 8100d12:	f001 fa8b 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8100d16:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8100d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d1c:	2302      	movs	r3, #2
 8100d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d20:	2300      	movs	r3, #0
 8100d22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100d24:	2303      	movs	r3, #3
 8100d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100d28:	230c      	movs	r3, #12
 8100d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100d2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100d30:	4619      	mov	r1, r3
 8100d32:	4817      	ldr	r0, [pc, #92]	@ (8100d90 <MX_GPIO_Init+0x324>)
 8100d34:	f001 fa7a 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8100d38:	2340      	movs	r3, #64	@ 0x40
 8100d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d3c:	2302      	movs	r3, #2
 8100d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d40:	2300      	movs	r3, #0
 8100d42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d44:	2300      	movs	r3, #0
 8100d46:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8100d48:	230a      	movs	r3, #10
 8100d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100d4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100d50:	4619      	mov	r1, r3
 8100d52:	480a      	ldr	r0, [pc, #40]	@ (8100d7c <MX_GPIO_Init+0x310>)
 8100d54:	f001 fa6a 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8100d58:	23c0      	movs	r3, #192	@ 0xc0
 8100d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d5c:	2302      	movs	r3, #2
 8100d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d60:	2300      	movs	r3, #0
 8100d62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d64:	2300      	movs	r3, #0
 8100d66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8100d68:	2309      	movs	r3, #9
 8100d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100d6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100d70:	4619      	mov	r1, r3
 8100d72:	e00f      	b.n	8100d94 <MX_GPIO_Init+0x328>
 8100d74:	58024400 	.word	0x58024400
 8100d78:	58022000 	.word	0x58022000
 8100d7c:	58021800 	.word	0x58021800
 8100d80:	58020800 	.word	0x58020800
 8100d84:	58021000 	.word	0x58021000
 8100d88:	58021c00 	.word	0x58021c00
 8100d8c:	58020c00 	.word	0x58020c00
 8100d90:	58021400 	.word	0x58021400
 8100d94:	4853      	ldr	r0, [pc, #332]	@ (8100ee4 <MX_GPIO_Init+0x478>)
 8100d96:	f001 fa49 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8100d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8100d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8100da0:	2303      	movs	r3, #3
 8100da2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100da4:	2300      	movs	r3, #0
 8100da6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100da8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100dac:	4619      	mov	r1, r3
 8100dae:	484d      	ldr	r0, [pc, #308]	@ (8100ee4 <MX_GPIO_Init+0x478>)
 8100db0:	f001 fa3c 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8100db4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8100db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100dba:	2302      	movs	r3, #2
 8100dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100dbe:	2300      	movs	r3, #0
 8100dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100dc2:	2300      	movs	r3, #0
 8100dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8100dc6:	230a      	movs	r3, #10
 8100dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100dce:	4619      	mov	r1, r3
 8100dd0:	4844      	ldr	r0, [pc, #272]	@ (8100ee4 <MX_GPIO_Init+0x478>)
 8100dd2:	f001 fa2b 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8100dd6:	2332      	movs	r3, #50	@ 0x32
 8100dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100dda:	2302      	movs	r3, #2
 8100ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100dde:	2300      	movs	r3, #0
 8100de0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100de2:	2300      	movs	r3, #0
 8100de4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100de6:	230b      	movs	r3, #11
 8100de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100dea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100dee:	4619      	mov	r1, r3
 8100df0:	483d      	ldr	r0, [pc, #244]	@ (8100ee8 <MX_GPIO_Init+0x47c>)
 8100df2:	f001 fa1b 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ9 PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8100df6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8100dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100dfc:	2302      	movs	r3, #2
 8100dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e00:	2300      	movs	r3, #0
 8100e02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e04:	2300      	movs	r3, #0
 8100e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8100e08:	2308      	movs	r3, #8
 8100e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8100e0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100e10:	4619      	mov	r1, r3
 8100e12:	4836      	ldr	r0, [pc, #216]	@ (8100eec <MX_GPIO_Init+0x480>)
 8100e14:	f001 fa0a 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8100e18:	230c      	movs	r3, #12
 8100e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e1c:	2302      	movs	r3, #2
 8100e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e20:	2300      	movs	r3, #0
 8100e22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e24:	2300      	movs	r3, #0
 8100e26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8100e28:	2309      	movs	r3, #9
 8100e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100e2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100e30:	4619      	mov	r1, r3
 8100e32:	482f      	ldr	r0, [pc, #188]	@ (8100ef0 <MX_GPIO_Init+0x484>)
 8100e34:	f001 f9fa 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 8100e38:	2386      	movs	r3, #134	@ 0x86
 8100e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e3c:	2302      	movs	r3, #2
 8100e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e40:	2300      	movs	r3, #0
 8100e42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e44:	2300      	movs	r3, #0
 8100e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100e48:	230b      	movs	r3, #11
 8100e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100e4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100e50:	4619      	mov	r1, r3
 8100e52:	4828      	ldr	r0, [pc, #160]	@ (8100ef4 <MX_GPIO_Init+0x488>)
 8100e54:	f001 f9ea 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8100e58:	2304      	movs	r3, #4
 8100e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e5c:	2302      	movs	r3, #2
 8100e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e60:	2300      	movs	r3, #0
 8100e62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e64:	2300      	movs	r3, #0
 8100e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8100e68:	2309      	movs	r3, #9
 8100e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100e6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100e70:	4619      	mov	r1, r3
 8100e72:	4821      	ldr	r0, [pc, #132]	@ (8100ef8 <MX_GPIO_Init+0x48c>)
 8100e74:	f001 f9da 	bl	810222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8100e78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8100e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e7e:	2302      	movs	r3, #2
 8100e80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e82:	2300      	movs	r3, #0
 8100e84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e86:	2300      	movs	r3, #0
 8100e88:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8100e8a:	2309      	movs	r3, #9
 8100e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100e8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100e92:	4619      	mov	r1, r3
 8100e94:	4819      	ldr	r0, [pc, #100]	@ (8100efc <MX_GPIO_Init+0x490>)
 8100e96:	f001 f9c9 	bl	810222c <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8100e9a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8100e9e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8100ea2:	f000 ff5d 	bl	8101d60 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8100ea6:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8100eaa:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8100eae:	f000 ff57 	bl	8101d60 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8100eb2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8100eb6:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8100eba:	f000 ff51 	bl	8101d60 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8100ebe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8100ec2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8100ec6:	f000 ff4b 	bl	8101d60 <HAL_SYSCFG_AnalogSwitchConfig>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8100eca:	2200      	movs	r2, #0
 8100ecc:	2105      	movs	r1, #5
 8100ece:	2017      	movs	r0, #23
 8100ed0:	f001 f972 	bl	81021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8100ed4:	2017      	movs	r0, #23
 8100ed6:	f001 f989 	bl	81021ec <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8100eda:	bf00      	nop
 8100edc:	3740      	adds	r7, #64	@ 0x40
 8100ede:	46bd      	mov	sp, r7
 8100ee0:	bd80      	pop	{r7, pc}
 8100ee2:	bf00      	nop
 8100ee4:	58021400 	.word	0x58021400
 8100ee8:	58020800 	.word	0x58020800
 8100eec:	58022400 	.word	0x58022400
 8100ef0:	58021c00 	.word	0x58021c00
 8100ef4:	58020000 	.word	0x58020000
 8100ef8:	58020400 	.word	0x58020400
 8100efc:	58020c00 	.word	0x58020c00

08100f00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100f00:	b580      	push	{r7, lr}
 8100f02:	b082      	sub	sp, #8
 8100f04:	af00      	add	r7, sp, #0
 8100f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8100f08:	687b      	ldr	r3, [r7, #4]
 8100f0a:	681b      	ldr	r3, [r3, #0]
 8100f0c:	4a04      	ldr	r2, [pc, #16]	@ (8100f20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100f0e:	4293      	cmp	r3, r2
 8100f10:	d101      	bne.n	8100f16 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8100f12:	f000 fed5 	bl	8101cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100f16:	bf00      	nop
 8100f18:	3708      	adds	r7, #8
 8100f1a:	46bd      	mov	sp, r7
 8100f1c:	bd80      	pop	{r7, pc}
 8100f1e:	bf00      	nop
 8100f20:	40000400 	.word	0x40000400

08100f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100f24:	b480      	push	{r7}
 8100f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100f28:	b672      	cpsid	i
}
 8100f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100f2c:	bf00      	nop
 8100f2e:	e7fd      	b.n	8100f2c <Error_Handler+0x8>

08100f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100f30:	b580      	push	{r7, lr}
 8100f32:	b082      	sub	sp, #8
 8100f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100f36:	4b0c      	ldr	r3, [pc, #48]	@ (8100f68 <HAL_MspInit+0x38>)
 8100f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8100f68 <HAL_MspInit+0x38>)
 8100f3e:	f043 0302 	orr.w	r3, r3, #2
 8100f42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100f46:	4b08      	ldr	r3, [pc, #32]	@ (8100f68 <HAL_MspInit+0x38>)
 8100f48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100f4c:	f003 0302 	and.w	r3, r3, #2
 8100f50:	607b      	str	r3, [r7, #4]
 8100f52:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100f54:	2200      	movs	r2, #0
 8100f56:	210f      	movs	r1, #15
 8100f58:	f06f 0001 	mvn.w	r0, #1
 8100f5c:	f001 f92c 	bl	81021b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100f60:	bf00      	nop
 8100f62:	3708      	adds	r7, #8
 8100f64:	46bd      	mov	sp, r7
 8100f66:	bd80      	pop	{r7, pc}
 8100f68:	58024400 	.word	0x58024400

08100f6c <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8100f6c:	b580      	push	{r7, lr}
 8100f6e:	b0bc      	sub	sp, #240	@ 0xf0
 8100f70:	af00      	add	r7, sp, #0
 8100f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f74:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100f78:	2200      	movs	r2, #0
 8100f7a:	601a      	str	r2, [r3, #0]
 8100f7c:	605a      	str	r2, [r3, #4]
 8100f7e:	609a      	str	r2, [r3, #8]
 8100f80:	60da      	str	r2, [r3, #12]
 8100f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f84:	f107 0310 	add.w	r3, r7, #16
 8100f88:	22c8      	movs	r2, #200	@ 0xc8
 8100f8a:	2100      	movs	r1, #0
 8100f8c:	4618      	mov	r0, r3
 8100f8e:	f007 fb4b 	bl	8108628 <memset>
  if(hcec->Instance==CEC)
 8100f92:	687b      	ldr	r3, [r7, #4]
 8100f94:	681b      	ldr	r3, [r3, #0]
 8100f96:	4a2b      	ldr	r2, [pc, #172]	@ (8101044 <HAL_CEC_MspInit+0xd8>)
 8100f98:	4293      	cmp	r3, r2
 8100f9a:	d14e      	bne.n	810103a <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8100f9c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8100fa0:	f04f 0300 	mov.w	r3, #0
 8100fa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8100fa8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8100fac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100fb0:	f107 0310 	add.w	r3, r7, #16
 8100fb4:	4618      	mov	r0, r3
 8100fb6:	f001 fee1 	bl	8102d7c <HAL_RCCEx_PeriphCLKConfig>
 8100fba:	4603      	mov	r3, r0
 8100fbc:	2b00      	cmp	r3, #0
 8100fbe:	d001      	beq.n	8100fc4 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 8100fc0:	f7ff ffb0 	bl	8100f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8100fc4:	4b20      	ldr	r3, [pc, #128]	@ (8101048 <HAL_CEC_MspInit+0xdc>)
 8100fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100fca:	4a1f      	ldr	r2, [pc, #124]	@ (8101048 <HAL_CEC_MspInit+0xdc>)
 8100fcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8100fd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8101048 <HAL_CEC_MspInit+0xdc>)
 8100fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100fda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8100fde:	60fb      	str	r3, [r7, #12]
 8100fe0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100fe2:	4b19      	ldr	r3, [pc, #100]	@ (8101048 <HAL_CEC_MspInit+0xdc>)
 8100fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fe8:	4a17      	ldr	r2, [pc, #92]	@ (8101048 <HAL_CEC_MspInit+0xdc>)
 8100fea:	f043 0302 	orr.w	r3, r3, #2
 8100fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100ff2:	4b15      	ldr	r3, [pc, #84]	@ (8101048 <HAL_CEC_MspInit+0xdc>)
 8100ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ff8:	f003 0302 	and.w	r3, r3, #2
 8100ffc:	60bb      	str	r3, [r7, #8]
 8100ffe:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8101000:	2340      	movs	r3, #64	@ 0x40
 8101002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101006:	2312      	movs	r3, #18
 8101008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810100c:	2300      	movs	r3, #0
 810100e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101012:	2300      	movs	r3, #0
 8101014:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101018:	2305      	movs	r3, #5
 810101a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 810101e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101022:	4619      	mov	r1, r3
 8101024:	4809      	ldr	r0, [pc, #36]	@ (810104c <HAL_CEC_MspInit+0xe0>)
 8101026:	f001 f901 	bl	810222c <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 810102a:	2200      	movs	r2, #0
 810102c:	2105      	movs	r1, #5
 810102e:	205e      	movs	r0, #94	@ 0x5e
 8101030:	f001 f8c2 	bl	81021b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8101034:	205e      	movs	r0, #94	@ 0x5e
 8101036:	f001 f8d9 	bl	81021ec <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 810103a:	bf00      	nop
 810103c:	37f0      	adds	r7, #240	@ 0xf0
 810103e:	46bd      	mov	sp, r7
 8101040:	bd80      	pop	{r7, pc}
 8101042:	bf00      	nop
 8101044:	40006c00 	.word	0x40006c00
 8101048:	58024400 	.word	0x58024400
 810104c:	58020400 	.word	0x58020400

08101050 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101050:	b580      	push	{r7, lr}
 8101052:	b0b4      	sub	sp, #208	@ 0xd0
 8101054:	af00      	add	r7, sp, #0
 8101056:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101058:	f107 0308 	add.w	r3, r7, #8
 810105c:	22c8      	movs	r2, #200	@ 0xc8
 810105e:	2100      	movs	r1, #0
 8101060:	4618      	mov	r0, r3
 8101062:	f007 fae1 	bl	8108628 <memset>
  if(hrtc->Instance==RTC)
 8101066:	687b      	ldr	r3, [r7, #4]
 8101068:	681b      	ldr	r3, [r3, #0]
 810106a:	4a10      	ldr	r2, [pc, #64]	@ (81010ac <HAL_RTC_MspInit+0x5c>)
 810106c:	4293      	cmp	r3, r2
 810106e:	d119      	bne.n	81010a4 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101070:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101074:	f04f 0300 	mov.w	r3, #0
 8101078:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 810107c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101080:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101084:	f107 0308 	add.w	r3, r7, #8
 8101088:	4618      	mov	r0, r3
 810108a:	f001 fe77 	bl	8102d7c <HAL_RCCEx_PeriphCLKConfig>
 810108e:	4603      	mov	r3, r0
 8101090:	2b00      	cmp	r3, #0
 8101092:	d001      	beq.n	8101098 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8101094:	f7ff ff46 	bl	8100f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101098:	4b05      	ldr	r3, [pc, #20]	@ (81010b0 <HAL_RTC_MspInit+0x60>)
 810109a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810109c:	4a04      	ldr	r2, [pc, #16]	@ (81010b0 <HAL_RTC_MspInit+0x60>)
 810109e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81010a2:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 81010a4:	bf00      	nop
 81010a6:	37d0      	adds	r7, #208	@ 0xd0
 81010a8:	46bd      	mov	sp, r7
 81010aa:	bd80      	pop	{r7, pc}
 81010ac:	58004000 	.word	0x58004000
 81010b0:	58024400 	.word	0x58024400

081010b4 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 81010b4:	b580      	push	{r7, lr}
 81010b6:	b0bc      	sub	sp, #240	@ 0xf0
 81010b8:	af00      	add	r7, sp, #0
 81010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81010c0:	2200      	movs	r2, #0
 81010c2:	601a      	str	r2, [r3, #0]
 81010c4:	605a      	str	r2, [r3, #4]
 81010c6:	609a      	str	r2, [r3, #8]
 81010c8:	60da      	str	r2, [r3, #12]
 81010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81010cc:	f107 0310 	add.w	r3, r7, #16
 81010d0:	22c8      	movs	r2, #200	@ 0xc8
 81010d2:	2100      	movs	r1, #0
 81010d4:	4618      	mov	r0, r3
 81010d6:	f007 faa7 	bl	8108628 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 81010da:	687b      	ldr	r3, [r7, #4]
 81010dc:	681b      	ldr	r3, [r3, #0]
 81010de:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 81010e2:	d144      	bne.n	810116e <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 81010e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 81010e8:	f04f 0300 	mov.w	r3, #0
 81010ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 81010f0:	2300      	movs	r3, #0
 81010f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81010f4:	f107 0310 	add.w	r3, r7, #16
 81010f8:	4618      	mov	r0, r3
 81010fa:	f001 fe3f 	bl	8102d7c <HAL_RCCEx_PeriphCLKConfig>
 81010fe:	4603      	mov	r3, r0
 8101100:	2b00      	cmp	r3, #0
 8101102:	d001      	beq.n	8101108 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8101104:	f7ff ff0e 	bl	8100f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101108:	4b1b      	ldr	r3, [pc, #108]	@ (8101178 <HAL_SPDIFRX_MspInit+0xc4>)
 810110a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810110e:	4a1a      	ldr	r2, [pc, #104]	@ (8101178 <HAL_SPDIFRX_MspInit+0xc4>)
 8101110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101114:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101118:	4b17      	ldr	r3, [pc, #92]	@ (8101178 <HAL_SPDIFRX_MspInit+0xc4>)
 810111a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810111e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101122:	60fb      	str	r3, [r7, #12]
 8101124:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101126:	4b14      	ldr	r3, [pc, #80]	@ (8101178 <HAL_SPDIFRX_MspInit+0xc4>)
 8101128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810112c:	4a12      	ldr	r2, [pc, #72]	@ (8101178 <HAL_SPDIFRX_MspInit+0xc4>)
 810112e:	f043 0308 	orr.w	r3, r3, #8
 8101132:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101136:	4b10      	ldr	r3, [pc, #64]	@ (8101178 <HAL_SPDIFRX_MspInit+0xc4>)
 8101138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810113c:	f003 0308 	and.w	r3, r3, #8
 8101140:	60bb      	str	r3, [r7, #8]
 8101142:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101144:	2380      	movs	r3, #128	@ 0x80
 8101146:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810114a:	2302      	movs	r3, #2
 810114c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101150:	2300      	movs	r3, #0
 8101152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101156:	2300      	movs	r3, #0
 8101158:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 810115c:	2309      	movs	r3, #9
 810115e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101162:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101166:	4619      	mov	r1, r3
 8101168:	4804      	ldr	r0, [pc, #16]	@ (810117c <HAL_SPDIFRX_MspInit+0xc8>)
 810116a:	f001 f85f 	bl	810222c <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 810116e:	bf00      	nop
 8101170:	37f0      	adds	r7, #240	@ 0xf0
 8101172:	46bd      	mov	sp, r7
 8101174:	bd80      	pop	{r7, pc}
 8101176:	bf00      	nop
 8101178:	58024400 	.word	0x58024400
 810117c:	58020c00 	.word	0x58020c00

08101180 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101180:	b580      	push	{r7, lr}
 8101182:	b0c0      	sub	sp, #256	@ 0x100
 8101184:	af00      	add	r7, sp, #0
 8101186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101188:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810118c:	2200      	movs	r2, #0
 810118e:	601a      	str	r2, [r3, #0]
 8101190:	605a      	str	r2, [r3, #4]
 8101192:	609a      	str	r2, [r3, #8]
 8101194:	60da      	str	r2, [r3, #12]
 8101196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101198:	f107 0320 	add.w	r3, r7, #32
 810119c:	22c8      	movs	r2, #200	@ 0xc8
 810119e:	2100      	movs	r1, #0
 81011a0:	4618      	mov	r0, r3
 81011a2:	f007 fa41 	bl	8108628 <memset>
  if(hspi->Instance==SPI2)
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	681b      	ldr	r3, [r3, #0]
 81011aa:	4a72      	ldr	r2, [pc, #456]	@ (8101374 <HAL_SPI_MspInit+0x1f4>)
 81011ac:	4293      	cmp	r3, r2
 81011ae:	d16b      	bne.n	8101288 <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 81011b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 81011b4:	f04f 0300 	mov.w	r3, #0
 81011b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 81011bc:	2300      	movs	r3, #0
 81011be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81011c2:	f107 0320 	add.w	r3, r7, #32
 81011c6:	4618      	mov	r0, r3
 81011c8:	f001 fdd8 	bl	8102d7c <HAL_RCCEx_PeriphCLKConfig>
 81011cc:	4603      	mov	r3, r0
 81011ce:	2b00      	cmp	r3, #0
 81011d0:	d001      	beq.n	81011d6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 81011d2:	f7ff fea7 	bl	8100f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 81011d6:	4b68      	ldr	r3, [pc, #416]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81011d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81011dc:	4a66      	ldr	r2, [pc, #408]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81011de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81011e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81011e6:	4b64      	ldr	r3, [pc, #400]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81011e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81011ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81011f0:	61fb      	str	r3, [r7, #28]
 81011f2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81011f4:	4b60      	ldr	r3, [pc, #384]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011fa:	4a5f      	ldr	r2, [pc, #380]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81011fc:	f043 0301 	orr.w	r3, r3, #1
 8101200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101204:	4b5c      	ldr	r3, [pc, #368]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 8101206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810120a:	f003 0301 	and.w	r3, r3, #1
 810120e:	61bb      	str	r3, [r7, #24]
 8101210:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101212:	4b59      	ldr	r3, [pc, #356]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 8101214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101218:	4a57      	ldr	r2, [pc, #348]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 810121a:	f043 0304 	orr.w	r3, r3, #4
 810121e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101222:	4b55      	ldr	r3, [pc, #340]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 8101224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101228:	f003 0304 	and.w	r3, r3, #4
 810122c:	617b      	str	r3, [r7, #20]
 810122e:	697b      	ldr	r3, [r7, #20]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 8101230:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8101234:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101238:	2302      	movs	r3, #2
 810123a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810123e:	2300      	movs	r3, #0
 8101240:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101244:	2300      	movs	r3, #0
 8101246:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 810124a:	2305      	movs	r3, #5
 810124c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101250:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101254:	4619      	mov	r1, r3
 8101256:	4849      	ldr	r0, [pc, #292]	@ (810137c <HAL_SPI_MspInit+0x1fc>)
 8101258:	f000 ffe8 	bl	810222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 810125c:	230c      	movs	r3, #12
 810125e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101262:	2302      	movs	r3, #2
 8101264:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101268:	2300      	movs	r3, #0
 810126a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810126e:	2300      	movs	r3, #0
 8101270:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101274:	2305      	movs	r3, #5
 8101276:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810127a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810127e:	4619      	mov	r1, r3
 8101280:	483f      	ldr	r0, [pc, #252]	@ (8101380 <HAL_SPI_MspInit+0x200>)
 8101282:	f000 ffd3 	bl	810222c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 8101286:	e06f      	b.n	8101368 <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI5)
 8101288:	687b      	ldr	r3, [r7, #4]
 810128a:	681b      	ldr	r3, [r3, #0]
 810128c:	4a3d      	ldr	r2, [pc, #244]	@ (8101384 <HAL_SPI_MspInit+0x204>)
 810128e:	4293      	cmp	r3, r2
 8101290:	d16a      	bne.n	8101368 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101292:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101296:	f04f 0300 	mov.w	r3, #0
 810129a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 810129e:	2300      	movs	r3, #0
 81012a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81012a4:	f107 0320 	add.w	r3, r7, #32
 81012a8:	4618      	mov	r0, r3
 81012aa:	f001 fd67 	bl	8102d7c <HAL_RCCEx_PeriphCLKConfig>
 81012ae:	4603      	mov	r3, r0
 81012b0:	2b00      	cmp	r3, #0
 81012b2:	d001      	beq.n	81012b8 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 81012b4:	f7ff fe36 	bl	8100f24 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 81012b8:	4b2f      	ldr	r3, [pc, #188]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81012ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81012be:	4a2e      	ldr	r2, [pc, #184]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81012c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81012c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81012c8:	4b2b      	ldr	r3, [pc, #172]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81012ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81012ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81012d2:	613b      	str	r3, [r7, #16]
 81012d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 81012d6:	4b28      	ldr	r3, [pc, #160]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012dc:	4a26      	ldr	r2, [pc, #152]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81012de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012e6:	4b24      	ldr	r3, [pc, #144]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81012f0:	60fb      	str	r3, [r7, #12]
 81012f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81012f4:	4b20      	ldr	r3, [pc, #128]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012fa:	4a1f      	ldr	r2, [pc, #124]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 81012fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101304:	4b1c      	ldr	r3, [pc, #112]	@ (8101378 <HAL_SPI_MspInit+0x1f8>)
 8101306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810130a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810130e:	60bb      	str	r3, [r7, #8]
 8101310:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101312:	2303      	movs	r3, #3
 8101314:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101318:	2302      	movs	r3, #2
 810131a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810131e:	2300      	movs	r3, #0
 8101320:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101324:	2300      	movs	r3, #0
 8101326:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 810132a:	2305      	movs	r3, #5
 810132c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8101330:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101334:	4619      	mov	r1, r3
 8101336:	4814      	ldr	r0, [pc, #80]	@ (8101388 <HAL_SPI_MspInit+0x208>)
 8101338:	f000 ff78 	bl	810222c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 810133c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101340:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101344:	2302      	movs	r3, #2
 8101346:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810134a:	2300      	movs	r3, #0
 810134c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101350:	2300      	movs	r3, #0
 8101352:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101356:	2305      	movs	r3, #5
 8101358:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 810135c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101360:	4619      	mov	r1, r3
 8101362:	480a      	ldr	r0, [pc, #40]	@ (810138c <HAL_SPI_MspInit+0x20c>)
 8101364:	f000 ff62 	bl	810222c <HAL_GPIO_Init>
}
 8101368:	bf00      	nop
 810136a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 810136e:	46bd      	mov	sp, r7
 8101370:	bd80      	pop	{r7, pc}
 8101372:	bf00      	nop
 8101374:	40003800 	.word	0x40003800
 8101378:	58024400 	.word	0x58024400
 810137c:	58020000 	.word	0x58020000
 8101380:	58020800 	.word	0x58020800
 8101384:	40015000 	.word	0x40015000
 8101388:	58022800 	.word	0x58022800
 810138c:	58022400 	.word	0x58022400

08101390 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8101390:	b580      	push	{r7, lr}
 8101392:	b08a      	sub	sp, #40	@ 0x28
 8101394:	af00      	add	r7, sp, #0
 8101396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101398:	f107 0314 	add.w	r3, r7, #20
 810139c:	2200      	movs	r2, #0
 810139e:	601a      	str	r2, [r3, #0]
 81013a0:	605a      	str	r2, [r3, #4]
 81013a2:	609a      	str	r2, [r3, #8]
 81013a4:	60da      	str	r2, [r3, #12]
 81013a6:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM8)
 81013a8:	687b      	ldr	r3, [r7, #4]
 81013aa:	681b      	ldr	r3, [r3, #0]
 81013ac:	4a1a      	ldr	r2, [pc, #104]	@ (8101418 <HAL_TIM_PWM_MspInit+0x88>)
 81013ae:	4293      	cmp	r3, r2
 81013b0:	d12d      	bne.n	810140e <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 81013b2:	4b1a      	ldr	r3, [pc, #104]	@ (810141c <HAL_TIM_PWM_MspInit+0x8c>)
 81013b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81013b8:	4a18      	ldr	r2, [pc, #96]	@ (810141c <HAL_TIM_PWM_MspInit+0x8c>)
 81013ba:	f043 0302 	orr.w	r3, r3, #2
 81013be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81013c2:	4b16      	ldr	r3, [pc, #88]	@ (810141c <HAL_TIM_PWM_MspInit+0x8c>)
 81013c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81013c8:	f003 0302 	and.w	r3, r3, #2
 81013cc:	613b      	str	r3, [r7, #16]
 81013ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81013d0:	4b12      	ldr	r3, [pc, #72]	@ (810141c <HAL_TIM_PWM_MspInit+0x8c>)
 81013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013d6:	4a11      	ldr	r2, [pc, #68]	@ (810141c <HAL_TIM_PWM_MspInit+0x8c>)
 81013d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013e0:	4b0e      	ldr	r3, [pc, #56]	@ (810141c <HAL_TIM_PWM_MspInit+0x8c>)
 81013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81013ea:	60fb      	str	r3, [r7, #12]
 81013ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 81013ee:	2340      	movs	r3, #64	@ 0x40
 81013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013f2:	2302      	movs	r3, #2
 81013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013f6:	2300      	movs	r3, #0
 81013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013fa:	2300      	movs	r3, #0
 81013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 81013fe:	2303      	movs	r3, #3
 8101400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8101402:	f107 0314 	add.w	r3, r7, #20
 8101406:	4619      	mov	r1, r3
 8101408:	4805      	ldr	r0, [pc, #20]	@ (8101420 <HAL_TIM_PWM_MspInit+0x90>)
 810140a:	f000 ff0f 	bl	810222c <HAL_GPIO_Init>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 810140e:	bf00      	nop
 8101410:	3728      	adds	r7, #40	@ 0x28
 8101412:	46bd      	mov	sp, r7
 8101414:	bd80      	pop	{r7, pc}
 8101416:	bf00      	nop
 8101418:	40010400 	.word	0x40010400
 810141c:	58024400 	.word	0x58024400
 8101420:	58022400 	.word	0x58022400

08101424 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101424:	b480      	push	{r7}
 8101426:	b085      	sub	sp, #20
 8101428:	af00      	add	r7, sp, #0
 810142a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 810142c:	687b      	ldr	r3, [r7, #4]
 810142e:	681b      	ldr	r3, [r3, #0]
 8101430:	4a0b      	ldr	r2, [pc, #44]	@ (8101460 <HAL_TIM_Base_MspInit+0x3c>)
 8101432:	4293      	cmp	r3, r2
 8101434:	d10e      	bne.n	8101454 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101436:	4b0b      	ldr	r3, [pc, #44]	@ (8101464 <HAL_TIM_Base_MspInit+0x40>)
 8101438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810143c:	4a09      	ldr	r2, [pc, #36]	@ (8101464 <HAL_TIM_Base_MspInit+0x40>)
 810143e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101442:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101446:	4b07      	ldr	r3, [pc, #28]	@ (8101464 <HAL_TIM_Base_MspInit+0x40>)
 8101448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810144c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101450:	60fb      	str	r3, [r7, #12]
 8101452:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8101454:	bf00      	nop
 8101456:	3714      	adds	r7, #20
 8101458:	46bd      	mov	sp, r7
 810145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810145e:	4770      	bx	lr
 8101460:	40001c00 	.word	0x40001c00
 8101464:	58024400 	.word	0x58024400

08101468 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101468:	b580      	push	{r7, lr}
 810146a:	b08a      	sub	sp, #40	@ 0x28
 810146c:	af00      	add	r7, sp, #0
 810146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101470:	f107 0314 	add.w	r3, r7, #20
 8101474:	2200      	movs	r2, #0
 8101476:	601a      	str	r2, [r3, #0]
 8101478:	605a      	str	r2, [r3, #4]
 810147a:	609a      	str	r2, [r3, #8]
 810147c:	60da      	str	r2, [r3, #12]
 810147e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8101480:	687b      	ldr	r3, [r7, #4]
 8101482:	681b      	ldr	r3, [r3, #0]
 8101484:	4a35      	ldr	r2, [pc, #212]	@ (810155c <HAL_TIM_MspPostInit+0xf4>)
 8101486:	4293      	cmp	r3, r2
 8101488:	d13e      	bne.n	8101508 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810148a:	4b35      	ldr	r3, [pc, #212]	@ (8101560 <HAL_TIM_MspPostInit+0xf8>)
 810148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101490:	4a33      	ldr	r2, [pc, #204]	@ (8101560 <HAL_TIM_MspPostInit+0xf8>)
 8101492:	f043 0304 	orr.w	r3, r3, #4
 8101496:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810149a:	4b31      	ldr	r3, [pc, #196]	@ (8101560 <HAL_TIM_MspPostInit+0xf8>)
 810149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014a0:	f003 0304 	and.w	r3, r3, #4
 81014a4:	613b      	str	r3, [r7, #16]
 81014a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81014a8:	4b2d      	ldr	r3, [pc, #180]	@ (8101560 <HAL_TIM_MspPostInit+0xf8>)
 81014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014ae:	4a2c      	ldr	r2, [pc, #176]	@ (8101560 <HAL_TIM_MspPostInit+0xf8>)
 81014b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014b8:	4b29      	ldr	r3, [pc, #164]	@ (8101560 <HAL_TIM_MspPostInit+0xf8>)
 81014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81014c2:	60fb      	str	r3, [r7, #12]
 81014c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81014c6:	2340      	movs	r3, #64	@ 0x40
 81014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014ca:	2302      	movs	r3, #2
 81014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ce:	2300      	movs	r3, #0
 81014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014d2:	2300      	movs	r3, #0
 81014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 81014d6:	2303      	movs	r3, #3
 81014d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81014da:	f107 0314 	add.w	r3, r7, #20
 81014de:	4619      	mov	r1, r3
 81014e0:	4820      	ldr	r0, [pc, #128]	@ (8101564 <HAL_TIM_MspPostInit+0xfc>)
 81014e2:	f000 fea3 	bl	810222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 81014e6:	2380      	movs	r3, #128	@ 0x80
 81014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014ea:	2302      	movs	r3, #2
 81014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ee:	2300      	movs	r3, #0
 81014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014f2:	2300      	movs	r3, #0
 81014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 81014f6:	2303      	movs	r3, #3
 81014f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 81014fa:	f107 0314 	add.w	r3, r7, #20
 81014fe:	4619      	mov	r1, r3
 8101500:	4819      	ldr	r0, [pc, #100]	@ (8101568 <HAL_TIM_MspPostInit+0x100>)
 8101502:	f000 fe93 	bl	810222c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8101506:	e024      	b.n	8101552 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM13)
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	681b      	ldr	r3, [r3, #0]
 810150c:	4a17      	ldr	r2, [pc, #92]	@ (810156c <HAL_TIM_MspPostInit+0x104>)
 810150e:	4293      	cmp	r3, r2
 8101510:	d11f      	bne.n	8101552 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101512:	4b13      	ldr	r3, [pc, #76]	@ (8101560 <HAL_TIM_MspPostInit+0xf8>)
 8101514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101518:	4a11      	ldr	r2, [pc, #68]	@ (8101560 <HAL_TIM_MspPostInit+0xf8>)
 810151a:	f043 0320 	orr.w	r3, r3, #32
 810151e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101522:	4b0f      	ldr	r3, [pc, #60]	@ (8101560 <HAL_TIM_MspPostInit+0xf8>)
 8101524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101528:	f003 0320 	and.w	r3, r3, #32
 810152c:	60bb      	str	r3, [r7, #8]
 810152e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8101530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8101534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101536:	2302      	movs	r3, #2
 8101538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810153a:	2300      	movs	r3, #0
 810153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810153e:	2300      	movs	r3, #0
 8101540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8101542:	2309      	movs	r3, #9
 8101544:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8101546:	f107 0314 	add.w	r3, r7, #20
 810154a:	4619      	mov	r1, r3
 810154c:	4808      	ldr	r0, [pc, #32]	@ (8101570 <HAL_TIM_MspPostInit+0x108>)
 810154e:	f000 fe6d 	bl	810222c <HAL_GPIO_Init>
}
 8101552:	bf00      	nop
 8101554:	3728      	adds	r7, #40	@ 0x28
 8101556:	46bd      	mov	sp, r7
 8101558:	bd80      	pop	{r7, pc}
 810155a:	bf00      	nop
 810155c:	40010400 	.word	0x40010400
 8101560:	58024400 	.word	0x58024400
 8101564:	58020800 	.word	0x58020800
 8101568:	58022400 	.word	0x58022400
 810156c:	40001c00 	.word	0x40001c00
 8101570:	58021400 	.word	0x58021400

08101574 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8101574:	b580      	push	{r7, lr}
 8101576:	b0c2      	sub	sp, #264	@ 0x108
 8101578:	af00      	add	r7, sp, #0
 810157a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 810157e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8101582:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101584:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101588:	2200      	movs	r2, #0
 810158a:	601a      	str	r2, [r3, #0]
 810158c:	605a      	str	r2, [r3, #4]
 810158e:	609a      	str	r2, [r3, #8]
 8101590:	60da      	str	r2, [r3, #12]
 8101592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101594:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101598:	22c8      	movs	r2, #200	@ 0xc8
 810159a:	2100      	movs	r1, #0
 810159c:	4618      	mov	r0, r3
 810159e:	f007 f843 	bl	8108628 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 81015a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81015a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81015aa:	681b      	ldr	r3, [r3, #0]
 81015ac:	681b      	ldr	r3, [r3, #0]
 81015ae:	4a79      	ldr	r2, [pc, #484]	@ (8101794 <HAL_PCD_MspInit+0x220>)
 81015b0:	4293      	cmp	r3, r2
 81015b2:	f040 80ea 	bne.w	810178a <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81015b6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 81015ba:	f04f 0300 	mov.w	r3, #0
 81015be:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 81015c2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 81015c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81015ce:	4618      	mov	r0, r3
 81015d0:	f001 fbd4 	bl	8102d7c <HAL_RCCEx_PeriphCLKConfig>
 81015d4:	4603      	mov	r3, r0
 81015d6:	2b00      	cmp	r3, #0
 81015d8:	d001      	beq.n	81015de <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 81015da:	f7ff fca3 	bl	8100f24 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 81015de:	f001 f9b9 	bl	8102954 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81015e2:	4b6d      	ldr	r3, [pc, #436]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 81015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015e8:	4a6b      	ldr	r2, [pc, #428]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 81015ea:	f043 0302 	orr.w	r3, r3, #2
 81015ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015f2:	4b69      	ldr	r3, [pc, #420]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 81015f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015f8:	f003 0302 	and.w	r3, r3, #2
 81015fc:	627b      	str	r3, [r7, #36]	@ 0x24
 81015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8101600:	4b65      	ldr	r3, [pc, #404]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101606:	4a64      	ldr	r2, [pc, #400]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810160c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101610:	4b61      	ldr	r3, [pc, #388]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810161a:	623b      	str	r3, [r7, #32]
 810161c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810161e:	4b5e      	ldr	r3, [pc, #376]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101624:	4a5c      	ldr	r2, [pc, #368]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101626:	f043 0304 	orr.w	r3, r3, #4
 810162a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810162e:	4b5a      	ldr	r3, [pc, #360]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101634:	f003 0304 	and.w	r3, r3, #4
 8101638:	61fb      	str	r3, [r7, #28]
 810163a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 810163c:	4b56      	ldr	r3, [pc, #344]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 810163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101642:	4a55      	ldr	r2, [pc, #340]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810164c:	4b52      	ldr	r3, [pc, #328]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 810164e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101656:	61bb      	str	r3, [r7, #24]
 8101658:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810165a:	4b4f      	ldr	r3, [pc, #316]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 810165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101660:	4a4d      	ldr	r2, [pc, #308]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101662:	f043 0301 	orr.w	r3, r3, #1
 8101666:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810166a:	4b4b      	ldr	r3, [pc, #300]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 810166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101670:	f003 0301 	and.w	r3, r3, #1
 8101674:	617b      	str	r3, [r7, #20]
 8101676:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8101678:	f643 4323 	movw	r3, #15395	@ 0x3c23
 810167c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101680:	2302      	movs	r3, #2
 8101682:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101686:	2300      	movs	r3, #0
 8101688:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810168c:	2302      	movs	r3, #2
 810168e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101692:	230a      	movs	r3, #10
 8101694:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101698:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810169c:	4619      	mov	r1, r3
 810169e:	483f      	ldr	r0, [pc, #252]	@ (810179c <HAL_PCD_MspInit+0x228>)
 81016a0:	f000 fdc4 	bl	810222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 81016a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81016a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016ac:	2302      	movs	r3, #2
 81016ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016b2:	2300      	movs	r3, #0
 81016b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81016b8:	2302      	movs	r3, #2
 81016ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81016be:	230a      	movs	r3, #10
 81016c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 81016c4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81016c8:	4619      	mov	r1, r3
 81016ca:	4835      	ldr	r0, [pc, #212]	@ (81017a0 <HAL_PCD_MspInit+0x22c>)
 81016cc:	f000 fdae 	bl	810222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 81016d0:	2301      	movs	r3, #1
 81016d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016d6:	2302      	movs	r3, #2
 81016d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016dc:	2300      	movs	r3, #0
 81016de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81016e2:	2302      	movs	r3, #2
 81016e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81016e8:	230a      	movs	r3, #10
 81016ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 81016ee:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81016f2:	4619      	mov	r1, r3
 81016f4:	482b      	ldr	r0, [pc, #172]	@ (81017a4 <HAL_PCD_MspInit+0x230>)
 81016f6:	f000 fd99 	bl	810222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 81016fa:	2310      	movs	r3, #16
 81016fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101700:	2302      	movs	r3, #2
 8101702:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101706:	2300      	movs	r3, #0
 8101708:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810170c:	2302      	movs	r3, #2
 810170e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101712:	230a      	movs	r3, #10
 8101714:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8101718:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810171c:	4619      	mov	r1, r3
 810171e:	4822      	ldr	r0, [pc, #136]	@ (81017a8 <HAL_PCD_MspInit+0x234>)
 8101720:	f000 fd84 	bl	810222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8101724:	2328      	movs	r3, #40	@ 0x28
 8101726:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810172a:	2302      	movs	r3, #2
 810172c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101730:	2300      	movs	r3, #0
 8101732:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101736:	2302      	movs	r3, #2
 8101738:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810173c:	230a      	movs	r3, #10
 810173e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101742:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8101746:	4619      	mov	r1, r3
 8101748:	4818      	ldr	r0, [pc, #96]	@ (81017ac <HAL_PCD_MspInit+0x238>)
 810174a:	f000 fd6f 	bl	810222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 810174e:	4b12      	ldr	r3, [pc, #72]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101750:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101754:	4a10      	ldr	r2, [pc, #64]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101756:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810175a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810175e:	4b0e      	ldr	r3, [pc, #56]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101760:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101768:	613b      	str	r3, [r7, #16]
 810176a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 810176c:	4b0a      	ldr	r3, [pc, #40]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 810176e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101772:	4a09      	ldr	r2, [pc, #36]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 8101774:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8101778:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810177c:	4b06      	ldr	r3, [pc, #24]	@ (8101798 <HAL_PCD_MspInit+0x224>)
 810177e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101782:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8101786:	60fb      	str	r3, [r7, #12]
 8101788:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 810178a:	bf00      	nop
 810178c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8101790:	46bd      	mov	sp, r7
 8101792:	bd80      	pop	{r7, pc}
 8101794:	40040000 	.word	0x40040000
 8101798:	58024400 	.word	0x58024400
 810179c:	58020400 	.word	0x58020400
 81017a0:	58022000 	.word	0x58022000
 81017a4:	58020800 	.word	0x58020800
 81017a8:	58021c00 	.word	0x58021c00
 81017ac:	58020000 	.word	0x58020000

081017b0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 81017b0:	b580      	push	{r7, lr}
 81017b2:	b0bc      	sub	sp, #240	@ 0xf0
 81017b4:	af00      	add	r7, sp, #0
 81017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017b8:	f107 0310 	add.w	r3, r7, #16
 81017bc:	22c8      	movs	r2, #200	@ 0xc8
 81017be:	2100      	movs	r1, #0
 81017c0:	4618      	mov	r0, r3
 81017c2:	f006 ff31 	bl	8108628 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	681b      	ldr	r3, [r3, #0]
 81017ca:	4a4f      	ldr	r2, [pc, #316]	@ (8101908 <HAL_SAI_MspInit+0x158>)
 81017cc:	4293      	cmp	r3, r2
 81017ce:	d153      	bne.n	8101878 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81017d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81017d4:	f04f 0300 	mov.w	r3, #0
 81017d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81017dc:	2300      	movs	r3, #0
 81017de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017e0:	f107 0310 	add.w	r3, r7, #16
 81017e4:	4618      	mov	r0, r3
 81017e6:	f001 fac9 	bl	8102d7c <HAL_RCCEx_PeriphCLKConfig>
 81017ea:	4603      	mov	r3, r0
 81017ec:	2b00      	cmp	r3, #0
 81017ee:	d001      	beq.n	81017f4 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 81017f0:	f7ff fb98 	bl	8100f24 <Error_Handler>
    }

    if (SAI1_client == 0)
 81017f4:	4b45      	ldr	r3, [pc, #276]	@ (810190c <HAL_SAI_MspInit+0x15c>)
 81017f6:	681b      	ldr	r3, [r3, #0]
 81017f8:	2b00      	cmp	r3, #0
 81017fa:	d10e      	bne.n	810181a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81017fc:	4b44      	ldr	r3, [pc, #272]	@ (8101910 <HAL_SAI_MspInit+0x160>)
 81017fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101802:	4a43      	ldr	r2, [pc, #268]	@ (8101910 <HAL_SAI_MspInit+0x160>)
 8101804:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101808:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810180c:	4b40      	ldr	r3, [pc, #256]	@ (8101910 <HAL_SAI_MspInit+0x160>)
 810180e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101816:	60fb      	str	r3, [r7, #12]
 8101818:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 810181a:	4b3c      	ldr	r3, [pc, #240]	@ (810190c <HAL_SAI_MspInit+0x15c>)
 810181c:	681b      	ldr	r3, [r3, #0]
 810181e:	3301      	adds	r3, #1
 8101820:	4a3a      	ldr	r2, [pc, #232]	@ (810190c <HAL_SAI_MspInit+0x15c>)
 8101822:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8101824:	2370      	movs	r3, #112	@ 0x70
 8101826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810182a:	2302      	movs	r3, #2
 810182c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101830:	2300      	movs	r3, #0
 8101832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101836:	2300      	movs	r3, #0
 8101838:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810183c:	2306      	movs	r3, #6
 810183e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101842:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101846:	4619      	mov	r1, r3
 8101848:	4832      	ldr	r0, [pc, #200]	@ (8101914 <HAL_SAI_MspInit+0x164>)
 810184a:	f000 fcef 	bl	810222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 810184e:	2380      	movs	r3, #128	@ 0x80
 8101850:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101854:	2302      	movs	r3, #2
 8101856:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810185a:	2300      	movs	r3, #0
 810185c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101860:	2300      	movs	r3, #0
 8101862:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101866:	2306      	movs	r3, #6
 8101868:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 810186c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101870:	4619      	mov	r1, r3
 8101872:	4829      	ldr	r0, [pc, #164]	@ (8101918 <HAL_SAI_MspInit+0x168>)
 8101874:	f000 fcda 	bl	810222c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8101878:	687b      	ldr	r3, [r7, #4]
 810187a:	681b      	ldr	r3, [r3, #0]
 810187c:	4a27      	ldr	r2, [pc, #156]	@ (810191c <HAL_SAI_MspInit+0x16c>)
 810187e:	4293      	cmp	r3, r2
 8101880:	d13e      	bne.n	8101900 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8101882:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101886:	f04f 0300 	mov.w	r3, #0
 810188a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 810188e:	2300      	movs	r3, #0
 8101890:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101892:	f107 0310 	add.w	r3, r7, #16
 8101896:	4618      	mov	r0, r3
 8101898:	f001 fa70 	bl	8102d7c <HAL_RCCEx_PeriphCLKConfig>
 810189c:	4603      	mov	r3, r0
 810189e:	2b00      	cmp	r3, #0
 81018a0:	d001      	beq.n	81018a6 <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 81018a2:	f7ff fb3f 	bl	8100f24 <Error_Handler>
    }

      if (SAI1_client == 0)
 81018a6:	4b19      	ldr	r3, [pc, #100]	@ (810190c <HAL_SAI_MspInit+0x15c>)
 81018a8:	681b      	ldr	r3, [r3, #0]
 81018aa:	2b00      	cmp	r3, #0
 81018ac:	d10e      	bne.n	81018cc <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81018ae:	4b18      	ldr	r3, [pc, #96]	@ (8101910 <HAL_SAI_MspInit+0x160>)
 81018b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81018b4:	4a16      	ldr	r2, [pc, #88]	@ (8101910 <HAL_SAI_MspInit+0x160>)
 81018b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81018ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81018be:	4b14      	ldr	r3, [pc, #80]	@ (8101910 <HAL_SAI_MspInit+0x160>)
 81018c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81018c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81018c8:	60bb      	str	r3, [r7, #8]
 81018ca:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 81018cc:	4b0f      	ldr	r3, [pc, #60]	@ (810190c <HAL_SAI_MspInit+0x15c>)
 81018ce:	681b      	ldr	r3, [r3, #0]
 81018d0:	3301      	adds	r3, #1
 81018d2:	4a0e      	ldr	r2, [pc, #56]	@ (810190c <HAL_SAI_MspInit+0x15c>)
 81018d4:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 81018d6:	2308      	movs	r3, #8
 81018d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018dc:	2302      	movs	r3, #2
 81018de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018e2:	2300      	movs	r3, #0
 81018e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018e8:	2300      	movs	r3, #0
 81018ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81018ee:	2306      	movs	r3, #6
 81018f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 81018f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81018f8:	4619      	mov	r1, r3
 81018fa:	4806      	ldr	r0, [pc, #24]	@ (8101914 <HAL_SAI_MspInit+0x164>)
 81018fc:	f000 fc96 	bl	810222c <HAL_GPIO_Init>

    }
}
 8101900:	bf00      	nop
 8101902:	37f0      	adds	r7, #240	@ 0xf0
 8101904:	46bd      	mov	sp, r7
 8101906:	bd80      	pop	{r7, pc}
 8101908:	40015804 	.word	0x40015804
 810190c:	10000910 	.word	0x10000910
 8101910:	58024400 	.word	0x58024400
 8101914:	58021000 	.word	0x58021000
 8101918:	58021800 	.word	0x58021800
 810191c:	40015824 	.word	0x40015824

08101920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101920:	b580      	push	{r7, lr}
 8101922:	b090      	sub	sp, #64	@ 0x40
 8101924:	af00      	add	r7, sp, #0
 8101926:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101928:	687b      	ldr	r3, [r7, #4]
 810192a:	2b0f      	cmp	r3, #15
 810192c:	d827      	bhi.n	810197e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 810192e:	2200      	movs	r2, #0
 8101930:	6879      	ldr	r1, [r7, #4]
 8101932:	201d      	movs	r0, #29
 8101934:	f000 fc40 	bl	81021b8 <HAL_NVIC_SetPriority>

     /* Enable the TIM3 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8101938:	201d      	movs	r0, #29
 810193a:	f000 fc57 	bl	81021ec <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 810193e:	4a29      	ldr	r2, [pc, #164]	@ (81019e4 <HAL_InitTick+0xc4>)
 8101940:	687b      	ldr	r3, [r7, #4]
 8101942:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8101944:	4b28      	ldr	r3, [pc, #160]	@ (81019e8 <HAL_InitTick+0xc8>)
 8101946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810194a:	4a27      	ldr	r2, [pc, #156]	@ (81019e8 <HAL_InitTick+0xc8>)
 810194c:	f043 0302 	orr.w	r3, r3, #2
 8101950:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101954:	4b24      	ldr	r3, [pc, #144]	@ (81019e8 <HAL_InitTick+0xc8>)
 8101956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810195a:	f003 0302 	and.w	r3, r3, #2
 810195e:	60fb      	str	r3, [r7, #12]
 8101960:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101962:	f107 0210 	add.w	r2, r7, #16
 8101966:	f107 0314 	add.w	r3, r7, #20
 810196a:	4611      	mov	r1, r2
 810196c:	4618      	mov	r0, r3
 810196e:	f001 f9c3 	bl	8102cf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8101972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101974:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8101976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101978:	2b00      	cmp	r3, #0
 810197a:	d106      	bne.n	810198a <HAL_InitTick+0x6a>
 810197c:	e001      	b.n	8101982 <HAL_InitTick+0x62>
    return HAL_ERROR;
 810197e:	2301      	movs	r3, #1
 8101980:	e02b      	b.n	81019da <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8101982:	f001 f9a3 	bl	8102ccc <HAL_RCC_GetPCLK1Freq>
 8101986:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8101988:	e004      	b.n	8101994 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 810198a:	f001 f99f 	bl	8102ccc <HAL_RCC_GetPCLK1Freq>
 810198e:	4603      	mov	r3, r0
 8101990:	005b      	lsls	r3, r3, #1
 8101992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101996:	4a15      	ldr	r2, [pc, #84]	@ (81019ec <HAL_InitTick+0xcc>)
 8101998:	fba2 2303 	umull	r2, r3, r2, r3
 810199c:	0c9b      	lsrs	r3, r3, #18
 810199e:	3b01      	subs	r3, #1
 81019a0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 81019a2:	4b13      	ldr	r3, [pc, #76]	@ (81019f0 <HAL_InitTick+0xd0>)
 81019a4:	4a13      	ldr	r2, [pc, #76]	@ (81019f4 <HAL_InitTick+0xd4>)
 81019a6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 81019a8:	4b11      	ldr	r3, [pc, #68]	@ (81019f0 <HAL_InitTick+0xd0>)
 81019aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81019ae:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 81019b0:	4a0f      	ldr	r2, [pc, #60]	@ (81019f0 <HAL_InitTick+0xd0>)
 81019b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81019b4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 81019b6:	4b0e      	ldr	r3, [pc, #56]	@ (81019f0 <HAL_InitTick+0xd0>)
 81019b8:	2200      	movs	r2, #0
 81019ba:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81019bc:	4b0c      	ldr	r3, [pc, #48]	@ (81019f0 <HAL_InitTick+0xd0>)
 81019be:	2200      	movs	r2, #0
 81019c0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 81019c2:	480b      	ldr	r0, [pc, #44]	@ (81019f0 <HAL_InitTick+0xd0>)
 81019c4:	f004 fda1 	bl	810650a <HAL_TIM_Base_Init>
 81019c8:	4603      	mov	r3, r0
 81019ca:	2b00      	cmp	r3, #0
 81019cc:	d104      	bne.n	81019d8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 81019ce:	4808      	ldr	r0, [pc, #32]	@ (81019f0 <HAL_InitTick+0xd0>)
 81019d0:	f004 fdf2 	bl	81065b8 <HAL_TIM_Base_Start_IT>
 81019d4:	4603      	mov	r3, r0
 81019d6:	e000      	b.n	81019da <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81019d8:	2301      	movs	r3, #1
}
 81019da:	4618      	mov	r0, r3
 81019dc:	3740      	adds	r7, #64	@ 0x40
 81019de:	46bd      	mov	sp, r7
 81019e0:	bd80      	pop	{r7, pc}
 81019e2:	bf00      	nop
 81019e4:	10000008 	.word	0x10000008
 81019e8:	58024400 	.word	0x58024400
 81019ec:	431bde83 	.word	0x431bde83
 81019f0:	10000914 	.word	0x10000914
 81019f4:	40000400 	.word	0x40000400

081019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81019f8:	b480      	push	{r7}
 81019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81019fc:	bf00      	nop
 81019fe:	e7fd      	b.n	81019fc <NMI_Handler+0x4>

08101a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101a00:	b480      	push	{r7}
 8101a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101a04:	bf00      	nop
 8101a06:	e7fd      	b.n	8101a04 <HardFault_Handler+0x4>

08101a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101a08:	b480      	push	{r7}
 8101a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101a0c:	bf00      	nop
 8101a0e:	e7fd      	b.n	8101a0c <MemManage_Handler+0x4>

08101a10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101a10:	b480      	push	{r7}
 8101a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101a14:	bf00      	nop
 8101a16:	e7fd      	b.n	8101a14 <BusFault_Handler+0x4>

08101a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101a18:	b480      	push	{r7}
 8101a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101a1c:	bf00      	nop
 8101a1e:	e7fd      	b.n	8101a1c <UsageFault_Handler+0x4>

08101a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101a20:	b480      	push	{r7}
 8101a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101a24:	bf00      	nop
 8101a26:	46bd      	mov	sp, r7
 8101a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a2c:	4770      	bx	lr

08101a2e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8101a2e:	b580      	push	{r7, lr}
 8101a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8101a32:	2080      	movs	r0, #128	@ 0x80
 8101a34:	f000 fdaa 	bl	810258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8101a38:	bf00      	nop
 8101a3a:	bd80      	pop	{r7, pc}

08101a3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8101a3c:	b580      	push	{r7, lr}
 8101a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8101a40:	4802      	ldr	r0, [pc, #8]	@ (8101a4c <TIM3_IRQHandler+0x10>)
 8101a42:	f004 fe88 	bl	8106756 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8101a46:	bf00      	nop
 8101a48:	bd80      	pop	{r7, pc}
 8101a4a:	bf00      	nop
 8101a4c:	10000914 	.word	0x10000914

08101a50 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8101a50:	b580      	push	{r7, lr}
 8101a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8101a54:	4802      	ldr	r0, [pc, #8]	@ (8101a60 <CEC_IRQHandler+0x10>)
 8101a56:	f000 f9fb 	bl	8101e50 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8101a5a:	bf00      	nop
 8101a5c:	bd80      	pop	{r7, pc}
 8101a5e:	bf00      	nop
 8101a60:	1000008c 	.word	0x1000008c

08101a64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101a64:	b580      	push	{r7, lr}
 8101a66:	b086      	sub	sp, #24
 8101a68:	af00      	add	r7, sp, #0
 8101a6a:	60f8      	str	r0, [r7, #12]
 8101a6c:	60b9      	str	r1, [r7, #8]
 8101a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101a70:	2300      	movs	r3, #0
 8101a72:	617b      	str	r3, [r7, #20]
 8101a74:	e00a      	b.n	8101a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101a76:	f3af 8000 	nop.w
 8101a7a:	4601      	mov	r1, r0
 8101a7c:	68bb      	ldr	r3, [r7, #8]
 8101a7e:	1c5a      	adds	r2, r3, #1
 8101a80:	60ba      	str	r2, [r7, #8]
 8101a82:	b2ca      	uxtb	r2, r1
 8101a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101a86:	697b      	ldr	r3, [r7, #20]
 8101a88:	3301      	adds	r3, #1
 8101a8a:	617b      	str	r3, [r7, #20]
 8101a8c:	697a      	ldr	r2, [r7, #20]
 8101a8e:	687b      	ldr	r3, [r7, #4]
 8101a90:	429a      	cmp	r2, r3
 8101a92:	dbf0      	blt.n	8101a76 <_read+0x12>
  }

  return len;
 8101a94:	687b      	ldr	r3, [r7, #4]
}
 8101a96:	4618      	mov	r0, r3
 8101a98:	3718      	adds	r7, #24
 8101a9a:	46bd      	mov	sp, r7
 8101a9c:	bd80      	pop	{r7, pc}

08101a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101a9e:	b580      	push	{r7, lr}
 8101aa0:	b086      	sub	sp, #24
 8101aa2:	af00      	add	r7, sp, #0
 8101aa4:	60f8      	str	r0, [r7, #12]
 8101aa6:	60b9      	str	r1, [r7, #8]
 8101aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101aaa:	2300      	movs	r3, #0
 8101aac:	617b      	str	r3, [r7, #20]
 8101aae:	e009      	b.n	8101ac4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101ab0:	68bb      	ldr	r3, [r7, #8]
 8101ab2:	1c5a      	adds	r2, r3, #1
 8101ab4:	60ba      	str	r2, [r7, #8]
 8101ab6:	781b      	ldrb	r3, [r3, #0]
 8101ab8:	4618      	mov	r0, r3
 8101aba:	f7fe fc11 	bl	81002e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101abe:	697b      	ldr	r3, [r7, #20]
 8101ac0:	3301      	adds	r3, #1
 8101ac2:	617b      	str	r3, [r7, #20]
 8101ac4:	697a      	ldr	r2, [r7, #20]
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	429a      	cmp	r2, r3
 8101aca:	dbf1      	blt.n	8101ab0 <_write+0x12>
  }
  return len;
 8101acc:	687b      	ldr	r3, [r7, #4]
}
 8101ace:	4618      	mov	r0, r3
 8101ad0:	3718      	adds	r7, #24
 8101ad2:	46bd      	mov	sp, r7
 8101ad4:	bd80      	pop	{r7, pc}

08101ad6 <_close>:

int _close(int file)
{
 8101ad6:	b480      	push	{r7}
 8101ad8:	b083      	sub	sp, #12
 8101ada:	af00      	add	r7, sp, #0
 8101adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101ae2:	4618      	mov	r0, r3
 8101ae4:	370c      	adds	r7, #12
 8101ae6:	46bd      	mov	sp, r7
 8101ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aec:	4770      	bx	lr

08101aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101aee:	b480      	push	{r7}
 8101af0:	b083      	sub	sp, #12
 8101af2:	af00      	add	r7, sp, #0
 8101af4:	6078      	str	r0, [r7, #4]
 8101af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101af8:	683b      	ldr	r3, [r7, #0]
 8101afa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101afe:	605a      	str	r2, [r3, #4]
  return 0;
 8101b00:	2300      	movs	r3, #0
}
 8101b02:	4618      	mov	r0, r3
 8101b04:	370c      	adds	r7, #12
 8101b06:	46bd      	mov	sp, r7
 8101b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b0c:	4770      	bx	lr

08101b0e <_isatty>:

int _isatty(int file)
{
 8101b0e:	b480      	push	{r7}
 8101b10:	b083      	sub	sp, #12
 8101b12:	af00      	add	r7, sp, #0
 8101b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101b16:	2301      	movs	r3, #1
}
 8101b18:	4618      	mov	r0, r3
 8101b1a:	370c      	adds	r7, #12
 8101b1c:	46bd      	mov	sp, r7
 8101b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b22:	4770      	bx	lr

08101b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101b24:	b480      	push	{r7}
 8101b26:	b085      	sub	sp, #20
 8101b28:	af00      	add	r7, sp, #0
 8101b2a:	60f8      	str	r0, [r7, #12]
 8101b2c:	60b9      	str	r1, [r7, #8]
 8101b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101b30:	2300      	movs	r3, #0
}
 8101b32:	4618      	mov	r0, r3
 8101b34:	3714      	adds	r7, #20
 8101b36:	46bd      	mov	sp, r7
 8101b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b3c:	4770      	bx	lr
	...

08101b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101b40:	b580      	push	{r7, lr}
 8101b42:	b086      	sub	sp, #24
 8101b44:	af00      	add	r7, sp, #0
 8101b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101b48:	4a14      	ldr	r2, [pc, #80]	@ (8101b9c <_sbrk+0x5c>)
 8101b4a:	4b15      	ldr	r3, [pc, #84]	@ (8101ba0 <_sbrk+0x60>)
 8101b4c:	1ad3      	subs	r3, r2, r3
 8101b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101b50:	697b      	ldr	r3, [r7, #20]
 8101b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101b54:	4b13      	ldr	r3, [pc, #76]	@ (8101ba4 <_sbrk+0x64>)
 8101b56:	681b      	ldr	r3, [r3, #0]
 8101b58:	2b00      	cmp	r3, #0
 8101b5a:	d102      	bne.n	8101b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101b5c:	4b11      	ldr	r3, [pc, #68]	@ (8101ba4 <_sbrk+0x64>)
 8101b5e:	4a12      	ldr	r2, [pc, #72]	@ (8101ba8 <_sbrk+0x68>)
 8101b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101b62:	4b10      	ldr	r3, [pc, #64]	@ (8101ba4 <_sbrk+0x64>)
 8101b64:	681a      	ldr	r2, [r3, #0]
 8101b66:	687b      	ldr	r3, [r7, #4]
 8101b68:	4413      	add	r3, r2
 8101b6a:	693a      	ldr	r2, [r7, #16]
 8101b6c:	429a      	cmp	r2, r3
 8101b6e:	d207      	bcs.n	8101b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101b70:	f006 fda8 	bl	81086c4 <__errno>
 8101b74:	4603      	mov	r3, r0
 8101b76:	220c      	movs	r2, #12
 8101b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8101b7e:	e009      	b.n	8101b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101b80:	4b08      	ldr	r3, [pc, #32]	@ (8101ba4 <_sbrk+0x64>)
 8101b82:	681b      	ldr	r3, [r3, #0]
 8101b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101b86:	4b07      	ldr	r3, [pc, #28]	@ (8101ba4 <_sbrk+0x64>)
 8101b88:	681a      	ldr	r2, [r3, #0]
 8101b8a:	687b      	ldr	r3, [r7, #4]
 8101b8c:	4413      	add	r3, r2
 8101b8e:	4a05      	ldr	r2, [pc, #20]	@ (8101ba4 <_sbrk+0x64>)
 8101b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101b92:	68fb      	ldr	r3, [r7, #12]
}
 8101b94:	4618      	mov	r0, r3
 8101b96:	3718      	adds	r7, #24
 8101b98:	46bd      	mov	sp, r7
 8101b9a:	bd80      	pop	{r7, pc}
 8101b9c:	10048000 	.word	0x10048000
 8101ba0:	00000400 	.word	0x00000400
 8101ba4:	10000960 	.word	0x10000960
 8101ba8:	10000f40 	.word	0x10000f40

08101bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101bac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8101be8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8101bb0:	f7fe fbc4 	bl	810033c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8101bb4:	f7fe fbaa 	bl	810030c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101bb8:	480c      	ldr	r0, [pc, #48]	@ (8101bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101bba:	490d      	ldr	r1, [pc, #52]	@ (8101bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8101bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101bc0:	e002      	b.n	8101bc8 <LoopCopyDataInit>

08101bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101bc6:	3304      	adds	r3, #4

08101bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101bcc:	d3f9      	bcc.n	8101bc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101bce:	4a0a      	ldr	r2, [pc, #40]	@ (8101bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8101bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8101bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101bd4:	e001      	b.n	8101bda <LoopFillZerobss>

08101bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101bd8:	3204      	adds	r2, #4

08101bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101bdc:	d3fb      	bcc.n	8101bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101bde:	f006 fd77 	bl	81086d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101be2:	f7fe fbcf 	bl	8100384 <main>
  bx  lr
 8101be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101be8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101bec:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101bf0:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 8101bf4:	08108be0 	.word	0x08108be0
  ldr r2, =_sbss
 8101bf8:	1000006c 	.word	0x1000006c
  ldr r4, =_ebss
 8101bfc:	10000f40 	.word	0x10000f40

08101c00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101c00:	e7fe      	b.n	8101c00 <ADC3_IRQHandler>
	...

08101c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101c04:	b580      	push	{r7, lr}
 8101c06:	b082      	sub	sp, #8
 8101c08:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101c0a:	4b28      	ldr	r3, [pc, #160]	@ (8101cac <HAL_Init+0xa8>)
 8101c0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101c10:	4a26      	ldr	r2, [pc, #152]	@ (8101cac <HAL_Init+0xa8>)
 8101c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101c16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101c1a:	4b24      	ldr	r3, [pc, #144]	@ (8101cac <HAL_Init+0xa8>)
 8101c1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101c24:	603b      	str	r3, [r7, #0]
 8101c26:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101c28:	4b21      	ldr	r3, [pc, #132]	@ (8101cb0 <HAL_Init+0xac>)
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101c30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101c34:	4a1e      	ldr	r2, [pc, #120]	@ (8101cb0 <HAL_Init+0xac>)
 8101c36:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8101c3a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8101cb0 <HAL_Init+0xac>)
 8101c3e:	681b      	ldr	r3, [r3, #0]
 8101c40:	4a1b      	ldr	r2, [pc, #108]	@ (8101cb0 <HAL_Init+0xac>)
 8101c42:	f043 0301 	orr.w	r3, r3, #1
 8101c46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101c48:	2003      	movs	r0, #3
 8101c4a:	f000 faaa 	bl	81021a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101c4e:	f000 fe91 	bl	8102974 <HAL_RCC_GetSysClockFreq>
 8101c52:	4602      	mov	r2, r0
 8101c54:	4b15      	ldr	r3, [pc, #84]	@ (8101cac <HAL_Init+0xa8>)
 8101c56:	699b      	ldr	r3, [r3, #24]
 8101c58:	0a1b      	lsrs	r3, r3, #8
 8101c5a:	f003 030f 	and.w	r3, r3, #15
 8101c5e:	4915      	ldr	r1, [pc, #84]	@ (8101cb4 <HAL_Init+0xb0>)
 8101c60:	5ccb      	ldrb	r3, [r1, r3]
 8101c62:	f003 031f 	and.w	r3, r3, #31
 8101c66:	fa22 f303 	lsr.w	r3, r2, r3
 8101c6a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8101cac <HAL_Init+0xa8>)
 8101c6e:	699b      	ldr	r3, [r3, #24]
 8101c70:	f003 030f 	and.w	r3, r3, #15
 8101c74:	4a0f      	ldr	r2, [pc, #60]	@ (8101cb4 <HAL_Init+0xb0>)
 8101c76:	5cd3      	ldrb	r3, [r2, r3]
 8101c78:	f003 031f 	and.w	r3, r3, #31
 8101c7c:	687a      	ldr	r2, [r7, #4]
 8101c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8101c82:	4a0d      	ldr	r2, [pc, #52]	@ (8101cb8 <HAL_Init+0xb4>)
 8101c84:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101c86:	4b0c      	ldr	r3, [pc, #48]	@ (8101cb8 <HAL_Init+0xb4>)
 8101c88:	681b      	ldr	r3, [r3, #0]
 8101c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8101cbc <HAL_Init+0xb8>)
 8101c8c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101c8e:	200f      	movs	r0, #15
 8101c90:	f7ff fe46 	bl	8101920 <HAL_InitTick>
 8101c94:	4603      	mov	r3, r0
 8101c96:	2b00      	cmp	r3, #0
 8101c98:	d001      	beq.n	8101c9e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101c9a:	2301      	movs	r3, #1
 8101c9c:	e002      	b.n	8101ca4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101c9e:	f7ff f947 	bl	8100f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101ca2:	2300      	movs	r3, #0
}
 8101ca4:	4618      	mov	r0, r3
 8101ca6:	3708      	adds	r7, #8
 8101ca8:	46bd      	mov	sp, r7
 8101caa:	bd80      	pop	{r7, pc}
 8101cac:	58024400 	.word	0x58024400
 8101cb0:	40024400 	.word	0x40024400
 8101cb4:	08108bc8 	.word	0x08108bc8
 8101cb8:	10000004 	.word	0x10000004
 8101cbc:	10000000 	.word	0x10000000

08101cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101cc0:	b480      	push	{r7}
 8101cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101cc4:	4b06      	ldr	r3, [pc, #24]	@ (8101ce0 <HAL_IncTick+0x20>)
 8101cc6:	781b      	ldrb	r3, [r3, #0]
 8101cc8:	461a      	mov	r2, r3
 8101cca:	4b06      	ldr	r3, [pc, #24]	@ (8101ce4 <HAL_IncTick+0x24>)
 8101ccc:	681b      	ldr	r3, [r3, #0]
 8101cce:	4413      	add	r3, r2
 8101cd0:	4a04      	ldr	r2, [pc, #16]	@ (8101ce4 <HAL_IncTick+0x24>)
 8101cd2:	6013      	str	r3, [r2, #0]
}
 8101cd4:	bf00      	nop
 8101cd6:	46bd      	mov	sp, r7
 8101cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cdc:	4770      	bx	lr
 8101cde:	bf00      	nop
 8101ce0:	1000000c 	.word	0x1000000c
 8101ce4:	10000964 	.word	0x10000964

08101ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101ce8:	b480      	push	{r7}
 8101cea:	af00      	add	r7, sp, #0
  return uwTick;
 8101cec:	4b03      	ldr	r3, [pc, #12]	@ (8101cfc <HAL_GetTick+0x14>)
 8101cee:	681b      	ldr	r3, [r3, #0]
}
 8101cf0:	4618      	mov	r0, r3
 8101cf2:	46bd      	mov	sp, r7
 8101cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cf8:	4770      	bx	lr
 8101cfa:	bf00      	nop
 8101cfc:	10000964 	.word	0x10000964

08101d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101d00:	b580      	push	{r7, lr}
 8101d02:	b084      	sub	sp, #16
 8101d04:	af00      	add	r7, sp, #0
 8101d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101d08:	f7ff ffee 	bl	8101ce8 <HAL_GetTick>
 8101d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101d0e:	687b      	ldr	r3, [r7, #4]
 8101d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101d12:	68fb      	ldr	r3, [r7, #12]
 8101d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101d18:	d005      	beq.n	8101d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8101d44 <HAL_Delay+0x44>)
 8101d1c:	781b      	ldrb	r3, [r3, #0]
 8101d1e:	461a      	mov	r2, r3
 8101d20:	68fb      	ldr	r3, [r7, #12]
 8101d22:	4413      	add	r3, r2
 8101d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101d26:	bf00      	nop
 8101d28:	f7ff ffde 	bl	8101ce8 <HAL_GetTick>
 8101d2c:	4602      	mov	r2, r0
 8101d2e:	68bb      	ldr	r3, [r7, #8]
 8101d30:	1ad3      	subs	r3, r2, r3
 8101d32:	68fa      	ldr	r2, [r7, #12]
 8101d34:	429a      	cmp	r2, r3
 8101d36:	d8f7      	bhi.n	8101d28 <HAL_Delay+0x28>
  {
  }
}
 8101d38:	bf00      	nop
 8101d3a:	bf00      	nop
 8101d3c:	3710      	adds	r7, #16
 8101d3e:	46bd      	mov	sp, r7
 8101d40:	bd80      	pop	{r7, pc}
 8101d42:	bf00      	nop
 8101d44:	1000000c 	.word	0x1000000c

08101d48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101d48:	b480      	push	{r7}
 8101d4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101d4c:	4b03      	ldr	r3, [pc, #12]	@ (8101d5c <HAL_GetREVID+0x14>)
 8101d4e:	681b      	ldr	r3, [r3, #0]
 8101d50:	0c1b      	lsrs	r3, r3, #16
}
 8101d52:	4618      	mov	r0, r3
 8101d54:	46bd      	mov	sp, r7
 8101d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d5a:	4770      	bx	lr
 8101d5c:	5c001000 	.word	0x5c001000

08101d60 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8101d60:	b480      	push	{r7}
 8101d62:	b083      	sub	sp, #12
 8101d64:	af00      	add	r7, sp, #0
 8101d66:	6078      	str	r0, [r7, #4]
 8101d68:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8101d6a:	4b07      	ldr	r3, [pc, #28]	@ (8101d88 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101d6c:	685a      	ldr	r2, [r3, #4]
 8101d6e:	687b      	ldr	r3, [r7, #4]
 8101d70:	43db      	mvns	r3, r3
 8101d72:	401a      	ands	r2, r3
 8101d74:	4904      	ldr	r1, [pc, #16]	@ (8101d88 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101d76:	683b      	ldr	r3, [r7, #0]
 8101d78:	4313      	orrs	r3, r2
 8101d7a:	604b      	str	r3, [r1, #4]
}
 8101d7c:	bf00      	nop
 8101d7e:	370c      	adds	r7, #12
 8101d80:	46bd      	mov	sp, r7
 8101d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d86:	4770      	bx	lr
 8101d88:	58000400 	.word	0x58000400

08101d8c <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8101d8c:	b580      	push	{r7, lr}
 8101d8e:	b082      	sub	sp, #8
 8101d90:	af00      	add	r7, sp, #0
 8101d92:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	2b00      	cmp	r3, #0
 8101d98:	d003      	beq.n	8101da2 <HAL_CEC_Init+0x16>
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101d9e:	2b00      	cmp	r3, #0
 8101da0:	d101      	bne.n	8101da6 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8101da2:	2301      	movs	r3, #1
 8101da4:	e050      	b.n	8101e48 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101daa:	2b00      	cmp	r3, #0
 8101dac:	d106      	bne.n	8101dbc <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	2200      	movs	r2, #0
 8101db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8101db6:	6878      	ldr	r0, [r7, #4]
 8101db8:	f7ff f8d8 	bl	8100f6c <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	2224      	movs	r2, #36	@ 0x24
 8101dc0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	681b      	ldr	r3, [r3, #0]
 8101dc6:	681a      	ldr	r2, [r3, #0]
 8101dc8:	687b      	ldr	r3, [r7, #4]
 8101dca:	681b      	ldr	r3, [r3, #0]
 8101dcc:	f022 0201 	bic.w	r2, r2, #1
 8101dd0:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	685a      	ldr	r2, [r3, #4]
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	689b      	ldr	r3, [r3, #8]
 8101dda:	431a      	orrs	r2, r3
 8101ddc:	687b      	ldr	r3, [r7, #4]
 8101dde:	68db      	ldr	r3, [r3, #12]
 8101de0:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8101de2:	687b      	ldr	r3, [r7, #4]
 8101de4:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8101de6:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	695b      	ldr	r3, [r3, #20]
 8101dec:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8101dee:	687b      	ldr	r3, [r7, #4]
 8101df0:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8101df2:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8101df8:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8101dfa:	687b      	ldr	r3, [r7, #4]
 8101dfc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8101dfe:	041b      	lsls	r3, r3, #16
 8101e00:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8101e0c:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8101e0e:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8101e10:	687b      	ldr	r3, [r7, #4]
 8101e12:	681b      	ldr	r3, [r3, #0]
 8101e14:	695b      	ldr	r3, [r3, #20]
 8101e16:	687a      	ldr	r2, [r7, #4]
 8101e18:	6812      	ldr	r2, [r2, #0]
 8101e1a:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8101e1e:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8101e22:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8101e24:	687b      	ldr	r3, [r7, #4]
 8101e26:	681b      	ldr	r3, [r3, #0]
 8101e28:	681a      	ldr	r2, [r3, #0]
 8101e2a:	687b      	ldr	r3, [r7, #4]
 8101e2c:	681b      	ldr	r3, [r3, #0]
 8101e2e:	f042 0201 	orr.w	r2, r2, #1
 8101e32:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	2200      	movs	r2, #0
 8101e38:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	2220      	movs	r2, #32
 8101e3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8101e40:	687b      	ldr	r3, [r7, #4]
 8101e42:	2220      	movs	r2, #32
 8101e44:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8101e46:	2300      	movs	r3, #0
}
 8101e48:	4618      	mov	r0, r3
 8101e4a:	3708      	adds	r7, #8
 8101e4c:	46bd      	mov	sp, r7
 8101e4e:	bd80      	pop	{r7, pc}

08101e50 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8101e50:	b580      	push	{r7, lr}
 8101e52:	b084      	sub	sp, #16
 8101e54:	af00      	add	r7, sp, #0
 8101e56:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	681b      	ldr	r3, [r3, #0]
 8101e5c:	691b      	ldr	r3, [r3, #16]
 8101e5e:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8101e60:	68fb      	ldr	r3, [r7, #12]
 8101e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101e66:	2b00      	cmp	r3, #0
 8101e68:	d00a      	beq.n	8101e80 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	2280      	movs	r2, #128	@ 0x80
 8101e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	691a      	ldr	r2, [r3, #16]
 8101e76:	687b      	ldr	r3, [r7, #4]
 8101e78:	681b      	ldr	r3, [r3, #0]
 8101e7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8101e7e:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8101e80:	68fb      	ldr	r3, [r7, #12]
 8101e82:	f003 0301 	and.w	r3, r3, #1
 8101e86:	2b00      	cmp	r3, #0
 8101e88:	d01c      	beq.n	8101ec4 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	2222      	movs	r2, #34	@ 0x22
 8101e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 8101e90:	687b      	ldr	r3, [r7, #4]
 8101e92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8101e94:	3301      	adds	r3, #1
 8101e96:	b29a      	uxth	r2, r3
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	681b      	ldr	r3, [r3, #0]
 8101ea0:	68da      	ldr	r2, [r3, #12]
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101ea6:	b2d2      	uxtb	r2, r2
 8101ea8:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8101eaa:	687b      	ldr	r3, [r7, #4]
 8101eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101eae:	1c5a      	adds	r2, r3, #1
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	681b      	ldr	r3, [r3, #0]
 8101eb8:	691a      	ldr	r2, [r3, #16]
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	681b      	ldr	r3, [r3, #0]
 8101ebe:	f042 0201 	orr.w	r2, r2, #1
 8101ec2:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8101ec4:	68fb      	ldr	r3, [r7, #12]
 8101ec6:	f003 0302 	and.w	r3, r3, #2
 8101eca:	2b00      	cmp	r3, #0
 8101ecc:	d01e      	beq.n	8101f0c <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	691a      	ldr	r2, [r3, #16]
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	f042 0202 	orr.w	r2, r2, #2
 8101edc:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	2220      	movs	r2, #32
 8101ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8101ee4:	687b      	ldr	r3, [r7, #4]
 8101ee6:	2200      	movs	r2, #0
 8101ee8:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8101ef2:	425b      	negs	r3, r3
 8101ef4:	441a      	add	r2, r3
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8101efe:	4619      	mov	r1, r3
 8101f00:	6878      	ldr	r0, [r7, #4]
 8101f02:	f000 f88c 	bl	810201e <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	2200      	movs	r2, #0
 8101f0a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8101f0c:	68fb      	ldr	r3, [r7, #12]
 8101f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101f12:	2b00      	cmp	r3, #0
 8101f14:	d024      	beq.n	8101f60 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8101f16:	687b      	ldr	r3, [r7, #4]
 8101f18:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8101f1a:	3b01      	subs	r3, #1
 8101f1c:	b29a      	uxth	r2, r3
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8101f26:	2b00      	cmp	r3, #0
 8101f28:	d107      	bne.n	8101f3a <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	681a      	ldr	r2, [r3, #0]
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	681b      	ldr	r3, [r3, #0]
 8101f34:	f042 0204 	orr.w	r2, r2, #4
 8101f38:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101f3e:	781a      	ldrb	r2, [r3, #0]
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	681b      	ldr	r3, [r3, #0]
 8101f44:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101f4a:	1c5a      	adds	r2, r3, #1
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8101f50:	687b      	ldr	r3, [r7, #4]
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	691a      	ldr	r2, [r3, #16]
 8101f56:	687b      	ldr	r3, [r7, #4]
 8101f58:	681b      	ldr	r3, [r3, #0]
 8101f5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8101f5e:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8101f60:	68fb      	ldr	r3, [r7, #12]
 8101f62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101f66:	2b00      	cmp	r3, #0
 8101f68:	d014      	beq.n	8101f94 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	681b      	ldr	r3, [r3, #0]
 8101f6e:	691a      	ldr	r2, [r3, #16]
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	681b      	ldr	r3, [r3, #0]
 8101f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8101f78:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8101f7a:	687b      	ldr	r3, [r7, #4]
 8101f7c:	2220      	movs	r2, #32
 8101f7e:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	2200      	movs	r2, #0
 8101f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	2200      	movs	r2, #0
 8101f8c:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8101f8e:	6878      	ldr	r0, [r7, #4]
 8101f90:	f000 f83b 	bl	810200a <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8101f94:	68fa      	ldr	r2, [r7, #12]
 8101f96:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8101f9a:	4013      	ands	r3, r2
 8101f9c:	2b00      	cmp	r3, #0
 8101f9e:	d030      	beq.n	8102002 <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	68fa      	ldr	r2, [r7, #12]
 8101fa4:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	681b      	ldr	r3, [r3, #0]
 8101faa:	691b      	ldr	r3, [r3, #16]
 8101fac:	687a      	ldr	r2, [r7, #4]
 8101fae:	6812      	ldr	r2, [r2, #0]
 8101fb0:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 8101fb4:	f043 031c 	orr.w	r3, r3, #28
 8101fb8:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8101fba:	68fb      	ldr	r3, [r7, #12]
 8101fbc:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8101fc0:	2b00      	cmp	r3, #0
 8101fc2:	d00e      	beq.n	8101fe2 <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8101fcc:	425b      	negs	r3, r3
 8101fce:	441a      	add	r2, r3
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	2200      	movs	r2, #0
 8101fd8:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	2220      	movs	r2, #32
 8101fde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8101fe0:	e00c      	b.n	8101ffc <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8101fe2:	68fb      	ldr	r3, [r7, #12]
 8101fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101fe8:	2b00      	cmp	r3, #0
 8101fea:	d107      	bne.n	8101ffc <HAL_CEC_IRQHandler+0x1ac>
 8101fec:	68fb      	ldr	r3, [r7, #12]
 8101fee:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8101ff2:	2b00      	cmp	r3, #0
 8101ff4:	d002      	beq.n	8101ffc <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	2220      	movs	r2, #32
 8101ffa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8101ffc:	6878      	ldr	r0, [r7, #4]
 8101ffe:	f000 f819 	bl	8102034 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8102002:	bf00      	nop
 8102004:	3710      	adds	r7, #16
 8102006:	46bd      	mov	sp, r7
 8102008:	bd80      	pop	{r7, pc}

0810200a <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 810200a:	b480      	push	{r7}
 810200c:	b083      	sub	sp, #12
 810200e:	af00      	add	r7, sp, #0
 8102010:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8102012:	bf00      	nop
 8102014:	370c      	adds	r7, #12
 8102016:	46bd      	mov	sp, r7
 8102018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810201c:	4770      	bx	lr

0810201e <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 810201e:	b480      	push	{r7}
 8102020:	b083      	sub	sp, #12
 8102022:	af00      	add	r7, sp, #0
 8102024:	6078      	str	r0, [r7, #4]
 8102026:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8102028:	bf00      	nop
 810202a:	370c      	adds	r7, #12
 810202c:	46bd      	mov	sp, r7
 810202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102032:	4770      	bx	lr

08102034 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8102034:	b480      	push	{r7}
 8102036:	b083      	sub	sp, #12
 8102038:	af00      	add	r7, sp, #0
 810203a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 810203c:	bf00      	nop
 810203e:	370c      	adds	r7, #12
 8102040:	46bd      	mov	sp, r7
 8102042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102046:	4770      	bx	lr

08102048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102048:	b480      	push	{r7}
 810204a:	b085      	sub	sp, #20
 810204c:	af00      	add	r7, sp, #0
 810204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	f003 0307 	and.w	r3, r3, #7
 8102056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102058:	4b0c      	ldr	r3, [pc, #48]	@ (810208c <__NVIC_SetPriorityGrouping+0x44>)
 810205a:	68db      	ldr	r3, [r3, #12]
 810205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810205e:	68ba      	ldr	r2, [r7, #8]
 8102060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102064:	4013      	ands	r3, r2
 8102066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102068:	68fb      	ldr	r3, [r7, #12]
 810206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810206c:	68bb      	ldr	r3, [r7, #8]
 810206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810207a:	4a04      	ldr	r2, [pc, #16]	@ (810208c <__NVIC_SetPriorityGrouping+0x44>)
 810207c:	68bb      	ldr	r3, [r7, #8]
 810207e:	60d3      	str	r3, [r2, #12]
}
 8102080:	bf00      	nop
 8102082:	3714      	adds	r7, #20
 8102084:	46bd      	mov	sp, r7
 8102086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810208a:	4770      	bx	lr
 810208c:	e000ed00 	.word	0xe000ed00

08102090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102090:	b480      	push	{r7}
 8102092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102094:	4b04      	ldr	r3, [pc, #16]	@ (81020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8102096:	68db      	ldr	r3, [r3, #12]
 8102098:	0a1b      	lsrs	r3, r3, #8
 810209a:	f003 0307 	and.w	r3, r3, #7
}
 810209e:	4618      	mov	r0, r3
 81020a0:	46bd      	mov	sp, r7
 81020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020a6:	4770      	bx	lr
 81020a8:	e000ed00 	.word	0xe000ed00

081020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81020ac:	b480      	push	{r7}
 81020ae:	b083      	sub	sp, #12
 81020b0:	af00      	add	r7, sp, #0
 81020b2:	4603      	mov	r3, r0
 81020b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81020b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81020ba:	2b00      	cmp	r3, #0
 81020bc:	db0b      	blt.n	81020d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81020be:	88fb      	ldrh	r3, [r7, #6]
 81020c0:	f003 021f 	and.w	r2, r3, #31
 81020c4:	4907      	ldr	r1, [pc, #28]	@ (81020e4 <__NVIC_EnableIRQ+0x38>)
 81020c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81020ca:	095b      	lsrs	r3, r3, #5
 81020cc:	2001      	movs	r0, #1
 81020ce:	fa00 f202 	lsl.w	r2, r0, r2
 81020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81020d6:	bf00      	nop
 81020d8:	370c      	adds	r7, #12
 81020da:	46bd      	mov	sp, r7
 81020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020e0:	4770      	bx	lr
 81020e2:	bf00      	nop
 81020e4:	e000e100 	.word	0xe000e100

081020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81020e8:	b480      	push	{r7}
 81020ea:	b083      	sub	sp, #12
 81020ec:	af00      	add	r7, sp, #0
 81020ee:	4603      	mov	r3, r0
 81020f0:	6039      	str	r1, [r7, #0]
 81020f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81020f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81020f8:	2b00      	cmp	r3, #0
 81020fa:	db0a      	blt.n	8102112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81020fc:	683b      	ldr	r3, [r7, #0]
 81020fe:	b2da      	uxtb	r2, r3
 8102100:	490c      	ldr	r1, [pc, #48]	@ (8102134 <__NVIC_SetPriority+0x4c>)
 8102102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102106:	0112      	lsls	r2, r2, #4
 8102108:	b2d2      	uxtb	r2, r2
 810210a:	440b      	add	r3, r1
 810210c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102110:	e00a      	b.n	8102128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102112:	683b      	ldr	r3, [r7, #0]
 8102114:	b2da      	uxtb	r2, r3
 8102116:	4908      	ldr	r1, [pc, #32]	@ (8102138 <__NVIC_SetPriority+0x50>)
 8102118:	88fb      	ldrh	r3, [r7, #6]
 810211a:	f003 030f 	and.w	r3, r3, #15
 810211e:	3b04      	subs	r3, #4
 8102120:	0112      	lsls	r2, r2, #4
 8102122:	b2d2      	uxtb	r2, r2
 8102124:	440b      	add	r3, r1
 8102126:	761a      	strb	r2, [r3, #24]
}
 8102128:	bf00      	nop
 810212a:	370c      	adds	r7, #12
 810212c:	46bd      	mov	sp, r7
 810212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102132:	4770      	bx	lr
 8102134:	e000e100 	.word	0xe000e100
 8102138:	e000ed00 	.word	0xe000ed00

0810213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810213c:	b480      	push	{r7}
 810213e:	b089      	sub	sp, #36	@ 0x24
 8102140:	af00      	add	r7, sp, #0
 8102142:	60f8      	str	r0, [r7, #12]
 8102144:	60b9      	str	r1, [r7, #8]
 8102146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102148:	68fb      	ldr	r3, [r7, #12]
 810214a:	f003 0307 	and.w	r3, r3, #7
 810214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102150:	69fb      	ldr	r3, [r7, #28]
 8102152:	f1c3 0307 	rsb	r3, r3, #7
 8102156:	2b04      	cmp	r3, #4
 8102158:	bf28      	it	cs
 810215a:	2304      	movcs	r3, #4
 810215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810215e:	69fb      	ldr	r3, [r7, #28]
 8102160:	3304      	adds	r3, #4
 8102162:	2b06      	cmp	r3, #6
 8102164:	d902      	bls.n	810216c <NVIC_EncodePriority+0x30>
 8102166:	69fb      	ldr	r3, [r7, #28]
 8102168:	3b03      	subs	r3, #3
 810216a:	e000      	b.n	810216e <NVIC_EncodePriority+0x32>
 810216c:	2300      	movs	r3, #0
 810216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102170:	f04f 32ff 	mov.w	r2, #4294967295
 8102174:	69bb      	ldr	r3, [r7, #24]
 8102176:	fa02 f303 	lsl.w	r3, r2, r3
 810217a:	43da      	mvns	r2, r3
 810217c:	68bb      	ldr	r3, [r7, #8]
 810217e:	401a      	ands	r2, r3
 8102180:	697b      	ldr	r3, [r7, #20]
 8102182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102184:	f04f 31ff 	mov.w	r1, #4294967295
 8102188:	697b      	ldr	r3, [r7, #20]
 810218a:	fa01 f303 	lsl.w	r3, r1, r3
 810218e:	43d9      	mvns	r1, r3
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102194:	4313      	orrs	r3, r2
         );
}
 8102196:	4618      	mov	r0, r3
 8102198:	3724      	adds	r7, #36	@ 0x24
 810219a:	46bd      	mov	sp, r7
 810219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021a0:	4770      	bx	lr

081021a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81021a2:	b580      	push	{r7, lr}
 81021a4:	b082      	sub	sp, #8
 81021a6:	af00      	add	r7, sp, #0
 81021a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81021aa:	6878      	ldr	r0, [r7, #4]
 81021ac:	f7ff ff4c 	bl	8102048 <__NVIC_SetPriorityGrouping>
}
 81021b0:	bf00      	nop
 81021b2:	3708      	adds	r7, #8
 81021b4:	46bd      	mov	sp, r7
 81021b6:	bd80      	pop	{r7, pc}

081021b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81021b8:	b580      	push	{r7, lr}
 81021ba:	b086      	sub	sp, #24
 81021bc:	af00      	add	r7, sp, #0
 81021be:	4603      	mov	r3, r0
 81021c0:	60b9      	str	r1, [r7, #8]
 81021c2:	607a      	str	r2, [r7, #4]
 81021c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81021c6:	f7ff ff63 	bl	8102090 <__NVIC_GetPriorityGrouping>
 81021ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81021cc:	687a      	ldr	r2, [r7, #4]
 81021ce:	68b9      	ldr	r1, [r7, #8]
 81021d0:	6978      	ldr	r0, [r7, #20]
 81021d2:	f7ff ffb3 	bl	810213c <NVIC_EncodePriority>
 81021d6:	4602      	mov	r2, r0
 81021d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81021dc:	4611      	mov	r1, r2
 81021de:	4618      	mov	r0, r3
 81021e0:	f7ff ff82 	bl	81020e8 <__NVIC_SetPriority>
}
 81021e4:	bf00      	nop
 81021e6:	3718      	adds	r7, #24
 81021e8:	46bd      	mov	sp, r7
 81021ea:	bd80      	pop	{r7, pc}

081021ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81021ec:	b580      	push	{r7, lr}
 81021ee:	b082      	sub	sp, #8
 81021f0:	af00      	add	r7, sp, #0
 81021f2:	4603      	mov	r3, r0
 81021f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81021f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81021fa:	4618      	mov	r0, r3
 81021fc:	f7ff ff56 	bl	81020ac <__NVIC_EnableIRQ>
}
 8102200:	bf00      	nop
 8102202:	3708      	adds	r7, #8
 8102204:	46bd      	mov	sp, r7
 8102206:	bd80      	pop	{r7, pc}

08102208 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102208:	b480      	push	{r7}
 810220a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810220c:	4b06      	ldr	r3, [pc, #24]	@ (8102228 <HAL_GetCurrentCPUID+0x20>)
 810220e:	681b      	ldr	r3, [r3, #0]
 8102210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8102214:	2b70      	cmp	r3, #112	@ 0x70
 8102216:	d101      	bne.n	810221c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8102218:	2303      	movs	r3, #3
 810221a:	e000      	b.n	810221e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 810221c:	2301      	movs	r3, #1
  }
}
 810221e:	4618      	mov	r0, r3
 8102220:	46bd      	mov	sp, r7
 8102222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102226:	4770      	bx	lr
 8102228:	e000ed00 	.word	0xe000ed00

0810222c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810222c:	b480      	push	{r7}
 810222e:	b089      	sub	sp, #36	@ 0x24
 8102230:	af00      	add	r7, sp, #0
 8102232:	6078      	str	r0, [r7, #4]
 8102234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102236:	2300      	movs	r3, #0
 8102238:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810223a:	4b89      	ldr	r3, [pc, #548]	@ (8102460 <HAL_GPIO_Init+0x234>)
 810223c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810223e:	e194      	b.n	810256a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102240:	683b      	ldr	r3, [r7, #0]
 8102242:	681a      	ldr	r2, [r3, #0]
 8102244:	2101      	movs	r1, #1
 8102246:	69fb      	ldr	r3, [r7, #28]
 8102248:	fa01 f303 	lsl.w	r3, r1, r3
 810224c:	4013      	ands	r3, r2
 810224e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102250:	693b      	ldr	r3, [r7, #16]
 8102252:	2b00      	cmp	r3, #0
 8102254:	f000 8186 	beq.w	8102564 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102258:	683b      	ldr	r3, [r7, #0]
 810225a:	685b      	ldr	r3, [r3, #4]
 810225c:	f003 0303 	and.w	r3, r3, #3
 8102260:	2b01      	cmp	r3, #1
 8102262:	d005      	beq.n	8102270 <HAL_GPIO_Init+0x44>
 8102264:	683b      	ldr	r3, [r7, #0]
 8102266:	685b      	ldr	r3, [r3, #4]
 8102268:	f003 0303 	and.w	r3, r3, #3
 810226c:	2b02      	cmp	r3, #2
 810226e:	d130      	bne.n	81022d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	689b      	ldr	r3, [r3, #8]
 8102274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102276:	69fb      	ldr	r3, [r7, #28]
 8102278:	005b      	lsls	r3, r3, #1
 810227a:	2203      	movs	r2, #3
 810227c:	fa02 f303 	lsl.w	r3, r2, r3
 8102280:	43db      	mvns	r3, r3
 8102282:	69ba      	ldr	r2, [r7, #24]
 8102284:	4013      	ands	r3, r2
 8102286:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102288:	683b      	ldr	r3, [r7, #0]
 810228a:	68da      	ldr	r2, [r3, #12]
 810228c:	69fb      	ldr	r3, [r7, #28]
 810228e:	005b      	lsls	r3, r3, #1
 8102290:	fa02 f303 	lsl.w	r3, r2, r3
 8102294:	69ba      	ldr	r2, [r7, #24]
 8102296:	4313      	orrs	r3, r2
 8102298:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	69ba      	ldr	r2, [r7, #24]
 810229e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	685b      	ldr	r3, [r3, #4]
 81022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81022a6:	2201      	movs	r2, #1
 81022a8:	69fb      	ldr	r3, [r7, #28]
 81022aa:	fa02 f303 	lsl.w	r3, r2, r3
 81022ae:	43db      	mvns	r3, r3
 81022b0:	69ba      	ldr	r2, [r7, #24]
 81022b2:	4013      	ands	r3, r2
 81022b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81022b6:	683b      	ldr	r3, [r7, #0]
 81022b8:	685b      	ldr	r3, [r3, #4]
 81022ba:	091b      	lsrs	r3, r3, #4
 81022bc:	f003 0201 	and.w	r2, r3, #1
 81022c0:	69fb      	ldr	r3, [r7, #28]
 81022c2:	fa02 f303 	lsl.w	r3, r2, r3
 81022c6:	69ba      	ldr	r2, [r7, #24]
 81022c8:	4313      	orrs	r3, r2
 81022ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	69ba      	ldr	r2, [r7, #24]
 81022d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81022d2:	683b      	ldr	r3, [r7, #0]
 81022d4:	685b      	ldr	r3, [r3, #4]
 81022d6:	f003 0303 	and.w	r3, r3, #3
 81022da:	2b03      	cmp	r3, #3
 81022dc:	d017      	beq.n	810230e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	68db      	ldr	r3, [r3, #12]
 81022e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81022e4:	69fb      	ldr	r3, [r7, #28]
 81022e6:	005b      	lsls	r3, r3, #1
 81022e8:	2203      	movs	r2, #3
 81022ea:	fa02 f303 	lsl.w	r3, r2, r3
 81022ee:	43db      	mvns	r3, r3
 81022f0:	69ba      	ldr	r2, [r7, #24]
 81022f2:	4013      	ands	r3, r2
 81022f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81022f6:	683b      	ldr	r3, [r7, #0]
 81022f8:	689a      	ldr	r2, [r3, #8]
 81022fa:	69fb      	ldr	r3, [r7, #28]
 81022fc:	005b      	lsls	r3, r3, #1
 81022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8102302:	69ba      	ldr	r2, [r7, #24]
 8102304:	4313      	orrs	r3, r2
 8102306:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	69ba      	ldr	r2, [r7, #24]
 810230c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810230e:	683b      	ldr	r3, [r7, #0]
 8102310:	685b      	ldr	r3, [r3, #4]
 8102312:	f003 0303 	and.w	r3, r3, #3
 8102316:	2b02      	cmp	r3, #2
 8102318:	d123      	bne.n	8102362 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810231a:	69fb      	ldr	r3, [r7, #28]
 810231c:	08da      	lsrs	r2, r3, #3
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	3208      	adds	r2, #8
 8102322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102328:	69fb      	ldr	r3, [r7, #28]
 810232a:	f003 0307 	and.w	r3, r3, #7
 810232e:	009b      	lsls	r3, r3, #2
 8102330:	220f      	movs	r2, #15
 8102332:	fa02 f303 	lsl.w	r3, r2, r3
 8102336:	43db      	mvns	r3, r3
 8102338:	69ba      	ldr	r2, [r7, #24]
 810233a:	4013      	ands	r3, r2
 810233c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810233e:	683b      	ldr	r3, [r7, #0]
 8102340:	691a      	ldr	r2, [r3, #16]
 8102342:	69fb      	ldr	r3, [r7, #28]
 8102344:	f003 0307 	and.w	r3, r3, #7
 8102348:	009b      	lsls	r3, r3, #2
 810234a:	fa02 f303 	lsl.w	r3, r2, r3
 810234e:	69ba      	ldr	r2, [r7, #24]
 8102350:	4313      	orrs	r3, r2
 8102352:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102354:	69fb      	ldr	r3, [r7, #28]
 8102356:	08da      	lsrs	r2, r3, #3
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	3208      	adds	r2, #8
 810235c:	69b9      	ldr	r1, [r7, #24]
 810235e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102362:	687b      	ldr	r3, [r7, #4]
 8102364:	681b      	ldr	r3, [r3, #0]
 8102366:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102368:	69fb      	ldr	r3, [r7, #28]
 810236a:	005b      	lsls	r3, r3, #1
 810236c:	2203      	movs	r2, #3
 810236e:	fa02 f303 	lsl.w	r3, r2, r3
 8102372:	43db      	mvns	r3, r3
 8102374:	69ba      	ldr	r2, [r7, #24]
 8102376:	4013      	ands	r3, r2
 8102378:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810237a:	683b      	ldr	r3, [r7, #0]
 810237c:	685b      	ldr	r3, [r3, #4]
 810237e:	f003 0203 	and.w	r2, r3, #3
 8102382:	69fb      	ldr	r3, [r7, #28]
 8102384:	005b      	lsls	r3, r3, #1
 8102386:	fa02 f303 	lsl.w	r3, r2, r3
 810238a:	69ba      	ldr	r2, [r7, #24]
 810238c:	4313      	orrs	r3, r2
 810238e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	69ba      	ldr	r2, [r7, #24]
 8102394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102396:	683b      	ldr	r3, [r7, #0]
 8102398:	685b      	ldr	r3, [r3, #4]
 810239a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810239e:	2b00      	cmp	r3, #0
 81023a0:	f000 80e0 	beq.w	8102564 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81023a4:	4b2f      	ldr	r3, [pc, #188]	@ (8102464 <HAL_GPIO_Init+0x238>)
 81023a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81023aa:	4a2e      	ldr	r2, [pc, #184]	@ (8102464 <HAL_GPIO_Init+0x238>)
 81023ac:	f043 0302 	orr.w	r3, r3, #2
 81023b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8102464 <HAL_GPIO_Init+0x238>)
 81023b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81023ba:	f003 0302 	and.w	r3, r3, #2
 81023be:	60fb      	str	r3, [r7, #12]
 81023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81023c2:	4a29      	ldr	r2, [pc, #164]	@ (8102468 <HAL_GPIO_Init+0x23c>)
 81023c4:	69fb      	ldr	r3, [r7, #28]
 81023c6:	089b      	lsrs	r3, r3, #2
 81023c8:	3302      	adds	r3, #2
 81023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81023d0:	69fb      	ldr	r3, [r7, #28]
 81023d2:	f003 0303 	and.w	r3, r3, #3
 81023d6:	009b      	lsls	r3, r3, #2
 81023d8:	220f      	movs	r2, #15
 81023da:	fa02 f303 	lsl.w	r3, r2, r3
 81023de:	43db      	mvns	r3, r3
 81023e0:	69ba      	ldr	r2, [r7, #24]
 81023e2:	4013      	ands	r3, r2
 81023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	4a20      	ldr	r2, [pc, #128]	@ (810246c <HAL_GPIO_Init+0x240>)
 81023ea:	4293      	cmp	r3, r2
 81023ec:	d052      	beq.n	8102494 <HAL_GPIO_Init+0x268>
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	4a1f      	ldr	r2, [pc, #124]	@ (8102470 <HAL_GPIO_Init+0x244>)
 81023f2:	4293      	cmp	r3, r2
 81023f4:	d031      	beq.n	810245a <HAL_GPIO_Init+0x22e>
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	4a1e      	ldr	r2, [pc, #120]	@ (8102474 <HAL_GPIO_Init+0x248>)
 81023fa:	4293      	cmp	r3, r2
 81023fc:	d02b      	beq.n	8102456 <HAL_GPIO_Init+0x22a>
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	4a1d      	ldr	r2, [pc, #116]	@ (8102478 <HAL_GPIO_Init+0x24c>)
 8102402:	4293      	cmp	r3, r2
 8102404:	d025      	beq.n	8102452 <HAL_GPIO_Init+0x226>
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	4a1c      	ldr	r2, [pc, #112]	@ (810247c <HAL_GPIO_Init+0x250>)
 810240a:	4293      	cmp	r3, r2
 810240c:	d01f      	beq.n	810244e <HAL_GPIO_Init+0x222>
 810240e:	687b      	ldr	r3, [r7, #4]
 8102410:	4a1b      	ldr	r2, [pc, #108]	@ (8102480 <HAL_GPIO_Init+0x254>)
 8102412:	4293      	cmp	r3, r2
 8102414:	d019      	beq.n	810244a <HAL_GPIO_Init+0x21e>
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	4a1a      	ldr	r2, [pc, #104]	@ (8102484 <HAL_GPIO_Init+0x258>)
 810241a:	4293      	cmp	r3, r2
 810241c:	d013      	beq.n	8102446 <HAL_GPIO_Init+0x21a>
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	4a19      	ldr	r2, [pc, #100]	@ (8102488 <HAL_GPIO_Init+0x25c>)
 8102422:	4293      	cmp	r3, r2
 8102424:	d00d      	beq.n	8102442 <HAL_GPIO_Init+0x216>
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	4a18      	ldr	r2, [pc, #96]	@ (810248c <HAL_GPIO_Init+0x260>)
 810242a:	4293      	cmp	r3, r2
 810242c:	d007      	beq.n	810243e <HAL_GPIO_Init+0x212>
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	4a17      	ldr	r2, [pc, #92]	@ (8102490 <HAL_GPIO_Init+0x264>)
 8102432:	4293      	cmp	r3, r2
 8102434:	d101      	bne.n	810243a <HAL_GPIO_Init+0x20e>
 8102436:	2309      	movs	r3, #9
 8102438:	e02d      	b.n	8102496 <HAL_GPIO_Init+0x26a>
 810243a:	230a      	movs	r3, #10
 810243c:	e02b      	b.n	8102496 <HAL_GPIO_Init+0x26a>
 810243e:	2308      	movs	r3, #8
 8102440:	e029      	b.n	8102496 <HAL_GPIO_Init+0x26a>
 8102442:	2307      	movs	r3, #7
 8102444:	e027      	b.n	8102496 <HAL_GPIO_Init+0x26a>
 8102446:	2306      	movs	r3, #6
 8102448:	e025      	b.n	8102496 <HAL_GPIO_Init+0x26a>
 810244a:	2305      	movs	r3, #5
 810244c:	e023      	b.n	8102496 <HAL_GPIO_Init+0x26a>
 810244e:	2304      	movs	r3, #4
 8102450:	e021      	b.n	8102496 <HAL_GPIO_Init+0x26a>
 8102452:	2303      	movs	r3, #3
 8102454:	e01f      	b.n	8102496 <HAL_GPIO_Init+0x26a>
 8102456:	2302      	movs	r3, #2
 8102458:	e01d      	b.n	8102496 <HAL_GPIO_Init+0x26a>
 810245a:	2301      	movs	r3, #1
 810245c:	e01b      	b.n	8102496 <HAL_GPIO_Init+0x26a>
 810245e:	bf00      	nop
 8102460:	580000c0 	.word	0x580000c0
 8102464:	58024400 	.word	0x58024400
 8102468:	58000400 	.word	0x58000400
 810246c:	58020000 	.word	0x58020000
 8102470:	58020400 	.word	0x58020400
 8102474:	58020800 	.word	0x58020800
 8102478:	58020c00 	.word	0x58020c00
 810247c:	58021000 	.word	0x58021000
 8102480:	58021400 	.word	0x58021400
 8102484:	58021800 	.word	0x58021800
 8102488:	58021c00 	.word	0x58021c00
 810248c:	58022000 	.word	0x58022000
 8102490:	58022400 	.word	0x58022400
 8102494:	2300      	movs	r3, #0
 8102496:	69fa      	ldr	r2, [r7, #28]
 8102498:	f002 0203 	and.w	r2, r2, #3
 810249c:	0092      	lsls	r2, r2, #2
 810249e:	4093      	lsls	r3, r2
 81024a0:	69ba      	ldr	r2, [r7, #24]
 81024a2:	4313      	orrs	r3, r2
 81024a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81024a6:	4938      	ldr	r1, [pc, #224]	@ (8102588 <HAL_GPIO_Init+0x35c>)
 81024a8:	69fb      	ldr	r3, [r7, #28]
 81024aa:	089b      	lsrs	r3, r3, #2
 81024ac:	3302      	adds	r3, #2
 81024ae:	69ba      	ldr	r2, [r7, #24]
 81024b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81024b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81024bc:	693b      	ldr	r3, [r7, #16]
 81024be:	43db      	mvns	r3, r3
 81024c0:	69ba      	ldr	r2, [r7, #24]
 81024c2:	4013      	ands	r3, r2
 81024c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81024c6:	683b      	ldr	r3, [r7, #0]
 81024c8:	685b      	ldr	r3, [r3, #4]
 81024ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81024ce:	2b00      	cmp	r3, #0
 81024d0:	d003      	beq.n	81024da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81024d2:	69ba      	ldr	r2, [r7, #24]
 81024d4:	693b      	ldr	r3, [r7, #16]
 81024d6:	4313      	orrs	r3, r2
 81024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81024da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81024de:	69bb      	ldr	r3, [r7, #24]
 81024e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81024e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81024e6:	685b      	ldr	r3, [r3, #4]
 81024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81024ea:	693b      	ldr	r3, [r7, #16]
 81024ec:	43db      	mvns	r3, r3
 81024ee:	69ba      	ldr	r2, [r7, #24]
 81024f0:	4013      	ands	r3, r2
 81024f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81024f4:	683b      	ldr	r3, [r7, #0]
 81024f6:	685b      	ldr	r3, [r3, #4]
 81024f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81024fc:	2b00      	cmp	r3, #0
 81024fe:	d003      	beq.n	8102508 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102500:	69ba      	ldr	r2, [r7, #24]
 8102502:	693b      	ldr	r3, [r7, #16]
 8102504:	4313      	orrs	r3, r2
 8102506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102508:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810250c:	69bb      	ldr	r3, [r7, #24]
 810250e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102510:	697b      	ldr	r3, [r7, #20]
 8102512:	685b      	ldr	r3, [r3, #4]
 8102514:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102516:	693b      	ldr	r3, [r7, #16]
 8102518:	43db      	mvns	r3, r3
 810251a:	69ba      	ldr	r2, [r7, #24]
 810251c:	4013      	ands	r3, r2
 810251e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102520:	683b      	ldr	r3, [r7, #0]
 8102522:	685b      	ldr	r3, [r3, #4]
 8102524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102528:	2b00      	cmp	r3, #0
 810252a:	d003      	beq.n	8102534 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810252c:	69ba      	ldr	r2, [r7, #24]
 810252e:	693b      	ldr	r3, [r7, #16]
 8102530:	4313      	orrs	r3, r2
 8102532:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102534:	697b      	ldr	r3, [r7, #20]
 8102536:	69ba      	ldr	r2, [r7, #24]
 8102538:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810253a:	697b      	ldr	r3, [r7, #20]
 810253c:	681b      	ldr	r3, [r3, #0]
 810253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102540:	693b      	ldr	r3, [r7, #16]
 8102542:	43db      	mvns	r3, r3
 8102544:	69ba      	ldr	r2, [r7, #24]
 8102546:	4013      	ands	r3, r2
 8102548:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810254a:	683b      	ldr	r3, [r7, #0]
 810254c:	685b      	ldr	r3, [r3, #4]
 810254e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102552:	2b00      	cmp	r3, #0
 8102554:	d003      	beq.n	810255e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102556:	69ba      	ldr	r2, [r7, #24]
 8102558:	693b      	ldr	r3, [r7, #16]
 810255a:	4313      	orrs	r3, r2
 810255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810255e:	697b      	ldr	r3, [r7, #20]
 8102560:	69ba      	ldr	r2, [r7, #24]
 8102562:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102564:	69fb      	ldr	r3, [r7, #28]
 8102566:	3301      	adds	r3, #1
 8102568:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810256a:	683b      	ldr	r3, [r7, #0]
 810256c:	681a      	ldr	r2, [r3, #0]
 810256e:	69fb      	ldr	r3, [r7, #28]
 8102570:	fa22 f303 	lsr.w	r3, r2, r3
 8102574:	2b00      	cmp	r3, #0
 8102576:	f47f ae63 	bne.w	8102240 <HAL_GPIO_Init+0x14>
  }
}
 810257a:	bf00      	nop
 810257c:	bf00      	nop
 810257e:	3724      	adds	r7, #36	@ 0x24
 8102580:	46bd      	mov	sp, r7
 8102582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102586:	4770      	bx	lr
 8102588:	58000400 	.word	0x58000400

0810258c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 810258c:	b580      	push	{r7, lr}
 810258e:	b082      	sub	sp, #8
 8102590:	af00      	add	r7, sp, #0
 8102592:	4603      	mov	r3, r0
 8102594:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8102596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810259a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 810259e:	88fb      	ldrh	r3, [r7, #6]
 81025a0:	4013      	ands	r3, r2
 81025a2:	2b00      	cmp	r3, #0
 81025a4:	d008      	beq.n	81025b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81025a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81025aa:	88fb      	ldrh	r3, [r7, #6]
 81025ac:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81025b0:	88fb      	ldrh	r3, [r7, #6]
 81025b2:	4618      	mov	r0, r3
 81025b4:	f7fd feda 	bl	810036c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81025b8:	bf00      	nop
 81025ba:	3708      	adds	r7, #8
 81025bc:	46bd      	mov	sp, r7
 81025be:	bd80      	pop	{r7, pc}

081025c0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81025c0:	b480      	push	{r7}
 81025c2:	b083      	sub	sp, #12
 81025c4:	af00      	add	r7, sp, #0
 81025c6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81025c8:	4b05      	ldr	r3, [pc, #20]	@ (81025e0 <HAL_HSEM_ActivateNotification+0x20>)
 81025ca:	681a      	ldr	r2, [r3, #0]
 81025cc:	4904      	ldr	r1, [pc, #16]	@ (81025e0 <HAL_HSEM_ActivateNotification+0x20>)
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	4313      	orrs	r3, r2
 81025d2:	600b      	str	r3, [r1, #0]
#endif
}
 81025d4:	bf00      	nop
 81025d6:	370c      	adds	r7, #12
 81025d8:	46bd      	mov	sp, r7
 81025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025de:	4770      	bx	lr
 81025e0:	58026510 	.word	0x58026510

081025e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81025e4:	b580      	push	{r7, lr}
 81025e6:	b086      	sub	sp, #24
 81025e8:	af02      	add	r7, sp, #8
 81025ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	2b00      	cmp	r3, #0
 81025f0:	d101      	bne.n	81025f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81025f2:	2301      	movs	r3, #1
 81025f4:	e0fe      	b.n	81027f4 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 81025fc:	b2db      	uxtb	r3, r3
 81025fe:	2b00      	cmp	r3, #0
 8102600:	d106      	bne.n	8102610 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	2200      	movs	r2, #0
 8102606:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 810260a:	6878      	ldr	r0, [r7, #4]
 810260c:	f7fe ffb2 	bl	8101574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	2203      	movs	r2, #3
 8102614:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	4618      	mov	r0, r3
 810261e:	f005 f94f 	bl	81078c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	6818      	ldr	r0, [r3, #0]
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	7c1a      	ldrb	r2, [r3, #16]
 810262a:	f88d 2000 	strb.w	r2, [sp]
 810262e:	3304      	adds	r3, #4
 8102630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8102632:	f005 f8d4 	bl	81077de <USB_CoreInit>
 8102636:	4603      	mov	r3, r0
 8102638:	2b00      	cmp	r3, #0
 810263a:	d005      	beq.n	8102648 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	2202      	movs	r2, #2
 8102640:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8102644:	2301      	movs	r3, #1
 8102646:	e0d5      	b.n	81027f4 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	681b      	ldr	r3, [r3, #0]
 810264c:	2100      	movs	r1, #0
 810264e:	4618      	mov	r0, r3
 8102650:	f005 f947 	bl	81078e2 <USB_SetCurrentMode>
 8102654:	4603      	mov	r3, r0
 8102656:	2b00      	cmp	r3, #0
 8102658:	d005      	beq.n	8102666 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	2202      	movs	r2, #2
 810265e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8102662:	2301      	movs	r3, #1
 8102664:	e0c6      	b.n	81027f4 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102666:	2300      	movs	r3, #0
 8102668:	73fb      	strb	r3, [r7, #15]
 810266a:	e04a      	b.n	8102702 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 810266c:	7bfa      	ldrb	r2, [r7, #15]
 810266e:	6879      	ldr	r1, [r7, #4]
 8102670:	4613      	mov	r3, r2
 8102672:	00db      	lsls	r3, r3, #3
 8102674:	4413      	add	r3, r2
 8102676:	009b      	lsls	r3, r3, #2
 8102678:	440b      	add	r3, r1
 810267a:	3315      	adds	r3, #21
 810267c:	2201      	movs	r2, #1
 810267e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8102680:	7bfa      	ldrb	r2, [r7, #15]
 8102682:	6879      	ldr	r1, [r7, #4]
 8102684:	4613      	mov	r3, r2
 8102686:	00db      	lsls	r3, r3, #3
 8102688:	4413      	add	r3, r2
 810268a:	009b      	lsls	r3, r3, #2
 810268c:	440b      	add	r3, r1
 810268e:	3314      	adds	r3, #20
 8102690:	7bfa      	ldrb	r2, [r7, #15]
 8102692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8102694:	7bfa      	ldrb	r2, [r7, #15]
 8102696:	7bfb      	ldrb	r3, [r7, #15]
 8102698:	b298      	uxth	r0, r3
 810269a:	6879      	ldr	r1, [r7, #4]
 810269c:	4613      	mov	r3, r2
 810269e:	00db      	lsls	r3, r3, #3
 81026a0:	4413      	add	r3, r2
 81026a2:	009b      	lsls	r3, r3, #2
 81026a4:	440b      	add	r3, r1
 81026a6:	332e      	adds	r3, #46	@ 0x2e
 81026a8:	4602      	mov	r2, r0
 81026aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81026ac:	7bfa      	ldrb	r2, [r7, #15]
 81026ae:	6879      	ldr	r1, [r7, #4]
 81026b0:	4613      	mov	r3, r2
 81026b2:	00db      	lsls	r3, r3, #3
 81026b4:	4413      	add	r3, r2
 81026b6:	009b      	lsls	r3, r3, #2
 81026b8:	440b      	add	r3, r1
 81026ba:	3318      	adds	r3, #24
 81026bc:	2200      	movs	r2, #0
 81026be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81026c0:	7bfa      	ldrb	r2, [r7, #15]
 81026c2:	6879      	ldr	r1, [r7, #4]
 81026c4:	4613      	mov	r3, r2
 81026c6:	00db      	lsls	r3, r3, #3
 81026c8:	4413      	add	r3, r2
 81026ca:	009b      	lsls	r3, r3, #2
 81026cc:	440b      	add	r3, r1
 81026ce:	331c      	adds	r3, #28
 81026d0:	2200      	movs	r2, #0
 81026d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81026d4:	7bfa      	ldrb	r2, [r7, #15]
 81026d6:	6879      	ldr	r1, [r7, #4]
 81026d8:	4613      	mov	r3, r2
 81026da:	00db      	lsls	r3, r3, #3
 81026dc:	4413      	add	r3, r2
 81026de:	009b      	lsls	r3, r3, #2
 81026e0:	440b      	add	r3, r1
 81026e2:	3320      	adds	r3, #32
 81026e4:	2200      	movs	r2, #0
 81026e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81026e8:	7bfa      	ldrb	r2, [r7, #15]
 81026ea:	6879      	ldr	r1, [r7, #4]
 81026ec:	4613      	mov	r3, r2
 81026ee:	00db      	lsls	r3, r3, #3
 81026f0:	4413      	add	r3, r2
 81026f2:	009b      	lsls	r3, r3, #2
 81026f4:	440b      	add	r3, r1
 81026f6:	3324      	adds	r3, #36	@ 0x24
 81026f8:	2200      	movs	r2, #0
 81026fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81026fc:	7bfb      	ldrb	r3, [r7, #15]
 81026fe:	3301      	adds	r3, #1
 8102700:	73fb      	strb	r3, [r7, #15]
 8102702:	687b      	ldr	r3, [r7, #4]
 8102704:	791b      	ldrb	r3, [r3, #4]
 8102706:	7bfa      	ldrb	r2, [r7, #15]
 8102708:	429a      	cmp	r2, r3
 810270a:	d3af      	bcc.n	810266c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810270c:	2300      	movs	r3, #0
 810270e:	73fb      	strb	r3, [r7, #15]
 8102710:	e044      	b.n	810279c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8102712:	7bfa      	ldrb	r2, [r7, #15]
 8102714:	6879      	ldr	r1, [r7, #4]
 8102716:	4613      	mov	r3, r2
 8102718:	00db      	lsls	r3, r3, #3
 810271a:	4413      	add	r3, r2
 810271c:	009b      	lsls	r3, r3, #2
 810271e:	440b      	add	r3, r1
 8102720:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8102724:	2200      	movs	r2, #0
 8102726:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8102728:	7bfa      	ldrb	r2, [r7, #15]
 810272a:	6879      	ldr	r1, [r7, #4]
 810272c:	4613      	mov	r3, r2
 810272e:	00db      	lsls	r3, r3, #3
 8102730:	4413      	add	r3, r2
 8102732:	009b      	lsls	r3, r3, #2
 8102734:	440b      	add	r3, r1
 8102736:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 810273a:	7bfa      	ldrb	r2, [r7, #15]
 810273c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 810273e:	7bfa      	ldrb	r2, [r7, #15]
 8102740:	6879      	ldr	r1, [r7, #4]
 8102742:	4613      	mov	r3, r2
 8102744:	00db      	lsls	r3, r3, #3
 8102746:	4413      	add	r3, r2
 8102748:	009b      	lsls	r3, r3, #2
 810274a:	440b      	add	r3, r1
 810274c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8102750:	2200      	movs	r2, #0
 8102752:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8102754:	7bfa      	ldrb	r2, [r7, #15]
 8102756:	6879      	ldr	r1, [r7, #4]
 8102758:	4613      	mov	r3, r2
 810275a:	00db      	lsls	r3, r3, #3
 810275c:	4413      	add	r3, r2
 810275e:	009b      	lsls	r3, r3, #2
 8102760:	440b      	add	r3, r1
 8102762:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8102766:	2200      	movs	r2, #0
 8102768:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 810276a:	7bfa      	ldrb	r2, [r7, #15]
 810276c:	6879      	ldr	r1, [r7, #4]
 810276e:	4613      	mov	r3, r2
 8102770:	00db      	lsls	r3, r3, #3
 8102772:	4413      	add	r3, r2
 8102774:	009b      	lsls	r3, r3, #2
 8102776:	440b      	add	r3, r1
 8102778:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 810277c:	2200      	movs	r2, #0
 810277e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8102780:	7bfa      	ldrb	r2, [r7, #15]
 8102782:	6879      	ldr	r1, [r7, #4]
 8102784:	4613      	mov	r3, r2
 8102786:	00db      	lsls	r3, r3, #3
 8102788:	4413      	add	r3, r2
 810278a:	009b      	lsls	r3, r3, #2
 810278c:	440b      	add	r3, r1
 810278e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8102792:	2200      	movs	r2, #0
 8102794:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8102796:	7bfb      	ldrb	r3, [r7, #15]
 8102798:	3301      	adds	r3, #1
 810279a:	73fb      	strb	r3, [r7, #15]
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	791b      	ldrb	r3, [r3, #4]
 81027a0:	7bfa      	ldrb	r2, [r7, #15]
 81027a2:	429a      	cmp	r2, r3
 81027a4:	d3b5      	bcc.n	8102712 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81027a6:	687b      	ldr	r3, [r7, #4]
 81027a8:	6818      	ldr	r0, [r3, #0]
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	7c1a      	ldrb	r2, [r3, #16]
 81027ae:	f88d 2000 	strb.w	r2, [sp]
 81027b2:	3304      	adds	r3, #4
 81027b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 81027b6:	f005 f8e1 	bl	810797c <USB_DevInit>
 81027ba:	4603      	mov	r3, r0
 81027bc:	2b00      	cmp	r3, #0
 81027be:	d005      	beq.n	81027cc <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	2202      	movs	r2, #2
 81027c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81027c8:	2301      	movs	r3, #1
 81027ca:	e013      	b.n	81027f4 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	2200      	movs	r2, #0
 81027d0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 81027d2:	687b      	ldr	r3, [r7, #4]
 81027d4:	2201      	movs	r2, #1
 81027d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 81027da:	687b      	ldr	r3, [r7, #4]
 81027dc:	7b1b      	ldrb	r3, [r3, #12]
 81027de:	2b01      	cmp	r3, #1
 81027e0:	d102      	bne.n	81027e8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 81027e2:	6878      	ldr	r0, [r7, #4]
 81027e4:	f000 f80a 	bl	81027fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	681b      	ldr	r3, [r3, #0]
 81027ec:	4618      	mov	r0, r3
 81027ee:	f005 fa9c 	bl	8107d2a <USB_DevDisconnect>

  return HAL_OK;
 81027f2:	2300      	movs	r3, #0
}
 81027f4:	4618      	mov	r0, r3
 81027f6:	3710      	adds	r7, #16
 81027f8:	46bd      	mov	sp, r7
 81027fa:	bd80      	pop	{r7, pc}

081027fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 81027fc:	b480      	push	{r7}
 81027fe:	b085      	sub	sp, #20
 8102800:	af00      	add	r7, sp, #0
 8102802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	2201      	movs	r2, #1
 810280e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	2200      	movs	r2, #0
 8102816:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 810281a:	68fb      	ldr	r3, [r7, #12]
 810281c:	699b      	ldr	r3, [r3, #24]
 810281e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8102822:	68fb      	ldr	r3, [r7, #12]
 8102824:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8102826:	68fb      	ldr	r3, [r7, #12]
 8102828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810282a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810282e:	f043 0303 	orr.w	r3, r3, #3
 8102832:	68fa      	ldr	r2, [r7, #12]
 8102834:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8102836:	2300      	movs	r3, #0
}
 8102838:	4618      	mov	r0, r3
 810283a:	3714      	adds	r7, #20
 810283c:	46bd      	mov	sp, r7
 810283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102842:	4770      	bx	lr

08102844 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102844:	b580      	push	{r7, lr}
 8102846:	b084      	sub	sp, #16
 8102848:	af00      	add	r7, sp, #0
 810284a:	60f8      	str	r0, [r7, #12]
 810284c:	460b      	mov	r3, r1
 810284e:	607a      	str	r2, [r7, #4]
 8102850:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102852:	4b37      	ldr	r3, [pc, #220]	@ (8102930 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102854:	681b      	ldr	r3, [r3, #0]
 8102856:	f023 0201 	bic.w	r2, r3, #1
 810285a:	4935      	ldr	r1, [pc, #212]	@ (8102930 <HAL_PWREx_EnterSTOPMode+0xec>)
 810285c:	68fb      	ldr	r3, [r7, #12]
 810285e:	4313      	orrs	r3, r2
 8102860:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	2b00      	cmp	r3, #0
 8102866:	d123      	bne.n	81028b0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102868:	f7ff fcce 	bl	8102208 <HAL_GetCurrentCPUID>
 810286c:	4603      	mov	r3, r0
 810286e:	2b03      	cmp	r3, #3
 8102870:	d158      	bne.n	8102924 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102872:	4b2f      	ldr	r3, [pc, #188]	@ (8102930 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102874:	691b      	ldr	r3, [r3, #16]
 8102876:	4a2e      	ldr	r2, [pc, #184]	@ (8102930 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102878:	f023 0301 	bic.w	r3, r3, #1
 810287c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810287e:	4b2d      	ldr	r3, [pc, #180]	@ (8102934 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102880:	691b      	ldr	r3, [r3, #16]
 8102882:	4a2c      	ldr	r2, [pc, #176]	@ (8102934 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102884:	f043 0304 	orr.w	r3, r3, #4
 8102888:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810288a:	f3bf 8f4f 	dsb	sy
}
 810288e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102890:	f3bf 8f6f 	isb	sy
}
 8102894:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102896:	7afb      	ldrb	r3, [r7, #11]
 8102898:	2b01      	cmp	r3, #1
 810289a:	d101      	bne.n	81028a0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810289c:	bf30      	wfi
 810289e:	e000      	b.n	81028a2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81028a0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81028a2:	4b24      	ldr	r3, [pc, #144]	@ (8102934 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028a4:	691b      	ldr	r3, [r3, #16]
 81028a6:	4a23      	ldr	r2, [pc, #140]	@ (8102934 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028a8:	f023 0304 	bic.w	r3, r3, #4
 81028ac:	6113      	str	r3, [r2, #16]
 81028ae:	e03c      	b.n	810292a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	2b01      	cmp	r3, #1
 81028b4:	d123      	bne.n	81028fe <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81028b6:	f7ff fca7 	bl	8102208 <HAL_GetCurrentCPUID>
 81028ba:	4603      	mov	r3, r0
 81028bc:	2b01      	cmp	r3, #1
 81028be:	d133      	bne.n	8102928 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81028c0:	4b1b      	ldr	r3, [pc, #108]	@ (8102930 <HAL_PWREx_EnterSTOPMode+0xec>)
 81028c2:	695b      	ldr	r3, [r3, #20]
 81028c4:	4a1a      	ldr	r2, [pc, #104]	@ (8102930 <HAL_PWREx_EnterSTOPMode+0xec>)
 81028c6:	f023 0302 	bic.w	r3, r3, #2
 81028ca:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81028cc:	4b19      	ldr	r3, [pc, #100]	@ (8102934 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028ce:	691b      	ldr	r3, [r3, #16]
 81028d0:	4a18      	ldr	r2, [pc, #96]	@ (8102934 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028d2:	f043 0304 	orr.w	r3, r3, #4
 81028d6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81028d8:	f3bf 8f4f 	dsb	sy
}
 81028dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81028de:	f3bf 8f6f 	isb	sy
}
 81028e2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81028e4:	7afb      	ldrb	r3, [r7, #11]
 81028e6:	2b01      	cmp	r3, #1
 81028e8:	d101      	bne.n	81028ee <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81028ea:	bf30      	wfi
 81028ec:	e000      	b.n	81028f0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81028ee:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81028f0:	4b10      	ldr	r3, [pc, #64]	@ (8102934 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028f2:	691b      	ldr	r3, [r3, #16]
 81028f4:	4a0f      	ldr	r2, [pc, #60]	@ (8102934 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028f6:	f023 0304 	bic.w	r3, r3, #4
 81028fa:	6113      	str	r3, [r2, #16]
 81028fc:	e015      	b.n	810292a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81028fe:	f7ff fc83 	bl	8102208 <HAL_GetCurrentCPUID>
 8102902:	4603      	mov	r3, r0
 8102904:	2b03      	cmp	r3, #3
 8102906:	d106      	bne.n	8102916 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102908:	4b09      	ldr	r3, [pc, #36]	@ (8102930 <HAL_PWREx_EnterSTOPMode+0xec>)
 810290a:	691b      	ldr	r3, [r3, #16]
 810290c:	4a08      	ldr	r2, [pc, #32]	@ (8102930 <HAL_PWREx_EnterSTOPMode+0xec>)
 810290e:	f023 0304 	bic.w	r3, r3, #4
 8102912:	6113      	str	r3, [r2, #16]
 8102914:	e009      	b.n	810292a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102916:	4b06      	ldr	r3, [pc, #24]	@ (8102930 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102918:	695b      	ldr	r3, [r3, #20]
 810291a:	4a05      	ldr	r2, [pc, #20]	@ (8102930 <HAL_PWREx_EnterSTOPMode+0xec>)
 810291c:	f023 0304 	bic.w	r3, r3, #4
 8102920:	6153      	str	r3, [r2, #20]
 8102922:	e002      	b.n	810292a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102924:	bf00      	nop
 8102926:	e000      	b.n	810292a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102928:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810292a:	3710      	adds	r7, #16
 810292c:	46bd      	mov	sp, r7
 810292e:	bd80      	pop	{r7, pc}
 8102930:	58024800 	.word	0x58024800
 8102934:	e000ed00 	.word	0xe000ed00

08102938 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102938:	b580      	push	{r7, lr}
 810293a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810293c:	f7ff fc64 	bl	8102208 <HAL_GetCurrentCPUID>
 8102940:	4603      	mov	r3, r0
 8102942:	2b03      	cmp	r3, #3
 8102944:	d101      	bne.n	810294a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102946:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102948:	e001      	b.n	810294e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810294a:	bf40      	sev
    __WFE ();
 810294c:	bf20      	wfe
}
 810294e:	bf00      	nop
 8102950:	bd80      	pop	{r7, pc}
	...

08102954 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8102954:	b480      	push	{r7}
 8102956:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8102958:	4b05      	ldr	r3, [pc, #20]	@ (8102970 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 810295a:	68db      	ldr	r3, [r3, #12]
 810295c:	4a04      	ldr	r2, [pc, #16]	@ (8102970 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 810295e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8102962:	60d3      	str	r3, [r2, #12]
}
 8102964:	bf00      	nop
 8102966:	46bd      	mov	sp, r7
 8102968:	f85d 7b04 	ldr.w	r7, [sp], #4
 810296c:	4770      	bx	lr
 810296e:	bf00      	nop
 8102970:	58024800 	.word	0x58024800

08102974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102974:	b480      	push	{r7}
 8102976:	b089      	sub	sp, #36	@ 0x24
 8102978:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810297a:	4bb3      	ldr	r3, [pc, #716]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810297c:	691b      	ldr	r3, [r3, #16]
 810297e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8102982:	2b18      	cmp	r3, #24
 8102984:	f200 8155 	bhi.w	8102c32 <HAL_RCC_GetSysClockFreq+0x2be>
 8102988:	a201      	add	r2, pc, #4	@ (adr r2, 8102990 <HAL_RCC_GetSysClockFreq+0x1c>)
 810298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810298e:	bf00      	nop
 8102990:	081029f5 	.word	0x081029f5
 8102994:	08102c33 	.word	0x08102c33
 8102998:	08102c33 	.word	0x08102c33
 810299c:	08102c33 	.word	0x08102c33
 81029a0:	08102c33 	.word	0x08102c33
 81029a4:	08102c33 	.word	0x08102c33
 81029a8:	08102c33 	.word	0x08102c33
 81029ac:	08102c33 	.word	0x08102c33
 81029b0:	08102a1b 	.word	0x08102a1b
 81029b4:	08102c33 	.word	0x08102c33
 81029b8:	08102c33 	.word	0x08102c33
 81029bc:	08102c33 	.word	0x08102c33
 81029c0:	08102c33 	.word	0x08102c33
 81029c4:	08102c33 	.word	0x08102c33
 81029c8:	08102c33 	.word	0x08102c33
 81029cc:	08102c33 	.word	0x08102c33
 81029d0:	08102a21 	.word	0x08102a21
 81029d4:	08102c33 	.word	0x08102c33
 81029d8:	08102c33 	.word	0x08102c33
 81029dc:	08102c33 	.word	0x08102c33
 81029e0:	08102c33 	.word	0x08102c33
 81029e4:	08102c33 	.word	0x08102c33
 81029e8:	08102c33 	.word	0x08102c33
 81029ec:	08102c33 	.word	0x08102c33
 81029f0:	08102a27 	.word	0x08102a27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81029f4:	4b94      	ldr	r3, [pc, #592]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	f003 0320 	and.w	r3, r3, #32
 81029fc:	2b00      	cmp	r3, #0
 81029fe:	d009      	beq.n	8102a14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102a00:	4b91      	ldr	r3, [pc, #580]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a02:	681b      	ldr	r3, [r3, #0]
 8102a04:	08db      	lsrs	r3, r3, #3
 8102a06:	f003 0303 	and.w	r3, r3, #3
 8102a0a:	4a90      	ldr	r2, [pc, #576]	@ (8102c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8102a10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102a12:	e111      	b.n	8102c38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102a14:	4b8d      	ldr	r3, [pc, #564]	@ (8102c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102a16:	61bb      	str	r3, [r7, #24]
      break;
 8102a18:	e10e      	b.n	8102c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8102c50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102a1c:	61bb      	str	r3, [r7, #24]
      break;
 8102a1e:	e10b      	b.n	8102c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102a20:	4b8c      	ldr	r3, [pc, #560]	@ (8102c54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102a22:	61bb      	str	r3, [r7, #24]
      break;
 8102a24:	e108      	b.n	8102c38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102a26:	4b88      	ldr	r3, [pc, #544]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a2a:	f003 0303 	and.w	r3, r3, #3
 8102a2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102a30:	4b85      	ldr	r3, [pc, #532]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a34:	091b      	lsrs	r3, r3, #4
 8102a36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102a3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102a3c:	4b82      	ldr	r3, [pc, #520]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a40:	f003 0301 	and.w	r3, r3, #1
 8102a44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102a46:	4b80      	ldr	r3, [pc, #512]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102a4a:	08db      	lsrs	r3, r3, #3
 8102a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102a50:	68fa      	ldr	r2, [r7, #12]
 8102a52:	fb02 f303 	mul.w	r3, r2, r3
 8102a56:	ee07 3a90 	vmov	s15, r3
 8102a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102a62:	693b      	ldr	r3, [r7, #16]
 8102a64:	2b00      	cmp	r3, #0
 8102a66:	f000 80e1 	beq.w	8102c2c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8102a6a:	697b      	ldr	r3, [r7, #20]
 8102a6c:	2b02      	cmp	r3, #2
 8102a6e:	f000 8083 	beq.w	8102b78 <HAL_RCC_GetSysClockFreq+0x204>
 8102a72:	697b      	ldr	r3, [r7, #20]
 8102a74:	2b02      	cmp	r3, #2
 8102a76:	f200 80a1 	bhi.w	8102bbc <HAL_RCC_GetSysClockFreq+0x248>
 8102a7a:	697b      	ldr	r3, [r7, #20]
 8102a7c:	2b00      	cmp	r3, #0
 8102a7e:	d003      	beq.n	8102a88 <HAL_RCC_GetSysClockFreq+0x114>
 8102a80:	697b      	ldr	r3, [r7, #20]
 8102a82:	2b01      	cmp	r3, #1
 8102a84:	d056      	beq.n	8102b34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102a86:	e099      	b.n	8102bbc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102a88:	4b6f      	ldr	r3, [pc, #444]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	f003 0320 	and.w	r3, r3, #32
 8102a90:	2b00      	cmp	r3, #0
 8102a92:	d02d      	beq.n	8102af0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102a94:	4b6c      	ldr	r3, [pc, #432]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a96:	681b      	ldr	r3, [r3, #0]
 8102a98:	08db      	lsrs	r3, r3, #3
 8102a9a:	f003 0303 	and.w	r3, r3, #3
 8102a9e:	4a6b      	ldr	r2, [pc, #428]	@ (8102c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8102aa4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	ee07 3a90 	vmov	s15, r3
 8102aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ab0:	693b      	ldr	r3, [r7, #16]
 8102ab2:	ee07 3a90 	vmov	s15, r3
 8102ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102abe:	4b62      	ldr	r3, [pc, #392]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ac6:	ee07 3a90 	vmov	s15, r3
 8102aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8102ad2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8102c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102aea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8102aee:	e087      	b.n	8102c00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102af0:	693b      	ldr	r3, [r7, #16]
 8102af2:	ee07 3a90 	vmov	s15, r3
 8102af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102afa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8102c5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8102afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b02:	4b51      	ldr	r3, [pc, #324]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b0a:	ee07 3a90 	vmov	s15, r3
 8102b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8102c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102b32:	e065      	b.n	8102c00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102b34:	693b      	ldr	r3, [r7, #16]
 8102b36:	ee07 3a90 	vmov	s15, r3
 8102b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8102c60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b46:	4b40      	ldr	r3, [pc, #256]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b4e:	ee07 3a90 	vmov	s15, r3
 8102b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8102c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102b76:	e043      	b.n	8102c00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102b78:	693b      	ldr	r3, [r7, #16]
 8102b7a:	ee07 3a90 	vmov	s15, r3
 8102b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102c64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b92:	ee07 3a90 	vmov	s15, r3
 8102b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8102c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102bba:	e021      	b.n	8102c00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102bbc:	693b      	ldr	r3, [r7, #16]
 8102bbe:	ee07 3a90 	vmov	s15, r3
 8102bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8102c60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102bce:	4b1e      	ldr	r3, [pc, #120]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102bd6:	ee07 3a90 	vmov	s15, r3
 8102bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8102be2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8102c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102bfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102c00:	4b11      	ldr	r3, [pc, #68]	@ (8102c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102c04:	0a5b      	lsrs	r3, r3, #9
 8102c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102c0a:	3301      	adds	r3, #1
 8102c0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8102c0e:	683b      	ldr	r3, [r7, #0]
 8102c10:	ee07 3a90 	vmov	s15, r3
 8102c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8102c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102c24:	ee17 3a90 	vmov	r3, s15
 8102c28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102c2a:	e005      	b.n	8102c38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102c2c:	2300      	movs	r3, #0
 8102c2e:	61bb      	str	r3, [r7, #24]
      break;
 8102c30:	e002      	b.n	8102c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8102c32:	4b07      	ldr	r3, [pc, #28]	@ (8102c50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102c34:	61bb      	str	r3, [r7, #24]
      break;
 8102c36:	bf00      	nop
  }

  return sysclockfreq;
 8102c38:	69bb      	ldr	r3, [r7, #24]
}
 8102c3a:	4618      	mov	r0, r3
 8102c3c:	3724      	adds	r7, #36	@ 0x24
 8102c3e:	46bd      	mov	sp, r7
 8102c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c44:	4770      	bx	lr
 8102c46:	bf00      	nop
 8102c48:	58024400 	.word	0x58024400
 8102c4c:	03d09000 	.word	0x03d09000
 8102c50:	003d0900 	.word	0x003d0900
 8102c54:	017d7840 	.word	0x017d7840
 8102c58:	46000000 	.word	0x46000000
 8102c5c:	4c742400 	.word	0x4c742400
 8102c60:	4a742400 	.word	0x4a742400
 8102c64:	4bbebc20 	.word	0x4bbebc20

08102c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102c68:	b580      	push	{r7, lr}
 8102c6a:	b082      	sub	sp, #8
 8102c6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102c6e:	f7ff fe81 	bl	8102974 <HAL_RCC_GetSysClockFreq>
 8102c72:	4602      	mov	r2, r0
 8102c74:	4b11      	ldr	r3, [pc, #68]	@ (8102cbc <HAL_RCC_GetHCLKFreq+0x54>)
 8102c76:	699b      	ldr	r3, [r3, #24]
 8102c78:	0a1b      	lsrs	r3, r3, #8
 8102c7a:	f003 030f 	and.w	r3, r3, #15
 8102c7e:	4910      	ldr	r1, [pc, #64]	@ (8102cc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8102c80:	5ccb      	ldrb	r3, [r1, r3]
 8102c82:	f003 031f 	and.w	r3, r3, #31
 8102c86:	fa22 f303 	lsr.w	r3, r2, r3
 8102c8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8102cbc <HAL_RCC_GetHCLKFreq+0x54>)
 8102c8e:	699b      	ldr	r3, [r3, #24]
 8102c90:	f003 030f 	and.w	r3, r3, #15
 8102c94:	4a0a      	ldr	r2, [pc, #40]	@ (8102cc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8102c96:	5cd3      	ldrb	r3, [r2, r3]
 8102c98:	f003 031f 	and.w	r3, r3, #31
 8102c9c:	687a      	ldr	r2, [r7, #4]
 8102c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8102ca2:	4a08      	ldr	r2, [pc, #32]	@ (8102cc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102ca4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102ca6:	4b07      	ldr	r3, [pc, #28]	@ (8102cc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	4a07      	ldr	r2, [pc, #28]	@ (8102cc8 <HAL_RCC_GetHCLKFreq+0x60>)
 8102cac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102cae:	4b05      	ldr	r3, [pc, #20]	@ (8102cc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102cb0:	681b      	ldr	r3, [r3, #0]
}
 8102cb2:	4618      	mov	r0, r3
 8102cb4:	3708      	adds	r7, #8
 8102cb6:	46bd      	mov	sp, r7
 8102cb8:	bd80      	pop	{r7, pc}
 8102cba:	bf00      	nop
 8102cbc:	58024400 	.word	0x58024400
 8102cc0:	08108bc8 	.word	0x08108bc8
 8102cc4:	10000004 	.word	0x10000004
 8102cc8:	10000000 	.word	0x10000000

08102ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102ccc:	b580      	push	{r7, lr}
 8102cce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102cd0:	f7ff ffca 	bl	8102c68 <HAL_RCC_GetHCLKFreq>
 8102cd4:	4602      	mov	r2, r0
 8102cd6:	4b06      	ldr	r3, [pc, #24]	@ (8102cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102cd8:	69db      	ldr	r3, [r3, #28]
 8102cda:	091b      	lsrs	r3, r3, #4
 8102cdc:	f003 0307 	and.w	r3, r3, #7
 8102ce0:	4904      	ldr	r1, [pc, #16]	@ (8102cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102ce2:	5ccb      	ldrb	r3, [r1, r3]
 8102ce4:	f003 031f 	and.w	r3, r3, #31
 8102ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102cec:	4618      	mov	r0, r3
 8102cee:	bd80      	pop	{r7, pc}
 8102cf0:	58024400 	.word	0x58024400
 8102cf4:	08108bc8 	.word	0x08108bc8

08102cf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8102cf8:	b480      	push	{r7}
 8102cfa:	b083      	sub	sp, #12
 8102cfc:	af00      	add	r7, sp, #0
 8102cfe:	6078      	str	r0, [r7, #4]
 8102d00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8102d02:	687b      	ldr	r3, [r7, #4]
 8102d04:	223f      	movs	r2, #63	@ 0x3f
 8102d06:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8102d08:	4b1a      	ldr	r3, [pc, #104]	@ (8102d74 <HAL_RCC_GetClockConfig+0x7c>)
 8102d0a:	691b      	ldr	r3, [r3, #16]
 8102d0c:	f003 0207 	and.w	r2, r3, #7
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8102d14:	4b17      	ldr	r3, [pc, #92]	@ (8102d74 <HAL_RCC_GetClockConfig+0x7c>)
 8102d16:	699b      	ldr	r3, [r3, #24]
 8102d18:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8102d20:	4b14      	ldr	r3, [pc, #80]	@ (8102d74 <HAL_RCC_GetClockConfig+0x7c>)
 8102d22:	699b      	ldr	r3, [r3, #24]
 8102d24:	f003 020f 	and.w	r2, r3, #15
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8102d2c:	4b11      	ldr	r3, [pc, #68]	@ (8102d74 <HAL_RCC_GetClockConfig+0x7c>)
 8102d2e:	699b      	ldr	r3, [r3, #24]
 8102d30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102d34:	687b      	ldr	r3, [r7, #4]
 8102d36:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8102d38:	4b0e      	ldr	r3, [pc, #56]	@ (8102d74 <HAL_RCC_GetClockConfig+0x7c>)
 8102d3a:	69db      	ldr	r3, [r3, #28]
 8102d3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8102d44:	4b0b      	ldr	r3, [pc, #44]	@ (8102d74 <HAL_RCC_GetClockConfig+0x7c>)
 8102d46:	69db      	ldr	r3, [r3, #28]
 8102d48:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8102d50:	4b08      	ldr	r3, [pc, #32]	@ (8102d74 <HAL_RCC_GetClockConfig+0x7c>)
 8102d52:	6a1b      	ldr	r3, [r3, #32]
 8102d54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102d58:	687b      	ldr	r3, [r7, #4]
 8102d5a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8102d5c:	4b06      	ldr	r3, [pc, #24]	@ (8102d78 <HAL_RCC_GetClockConfig+0x80>)
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	f003 020f 	and.w	r2, r3, #15
 8102d64:	683b      	ldr	r3, [r7, #0]
 8102d66:	601a      	str	r2, [r3, #0]
}
 8102d68:	bf00      	nop
 8102d6a:	370c      	adds	r7, #12
 8102d6c:	46bd      	mov	sp, r7
 8102d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d72:	4770      	bx	lr
 8102d74:	58024400 	.word	0x58024400
 8102d78:	52002000 	.word	0x52002000

08102d7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102d80:	b0cc      	sub	sp, #304	@ 0x130
 8102d82:	af00      	add	r7, sp, #0
 8102d84:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102d88:	2300      	movs	r3, #0
 8102d8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102d8e:	2300      	movs	r3, #0
 8102d90:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d9c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102da0:	2500      	movs	r5, #0
 8102da2:	ea54 0305 	orrs.w	r3, r4, r5
 8102da6:	d049      	beq.n	8102e3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102dae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102db2:	d02f      	beq.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102db4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102db8:	d828      	bhi.n	8102e0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102dbe:	d01a      	beq.n	8102df6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102dc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102dc4:	d822      	bhi.n	8102e0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102dc6:	2b00      	cmp	r3, #0
 8102dc8:	d003      	beq.n	8102dd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8102dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102dce:	d007      	beq.n	8102de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102dd0:	e01c      	b.n	8102e0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102dd2:	4bb8      	ldr	r3, [pc, #736]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102dd6:	4ab7      	ldr	r2, [pc, #732]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102dde:	e01a      	b.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102de4:	3308      	adds	r3, #8
 8102de6:	2102      	movs	r1, #2
 8102de8:	4618      	mov	r0, r3
 8102dea:	f002 fba1 	bl	8105530 <RCCEx_PLL2_Config>
 8102dee:	4603      	mov	r3, r0
 8102df0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102df4:	e00f      	b.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102dfa:	3328      	adds	r3, #40	@ 0x28
 8102dfc:	2102      	movs	r1, #2
 8102dfe:	4618      	mov	r0, r3
 8102e00:	f002 fc48 	bl	8105694 <RCCEx_PLL3_Config>
 8102e04:	4603      	mov	r3, r0
 8102e06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102e0a:	e004      	b.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102e0c:	2301      	movs	r3, #1
 8102e0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102e12:	e000      	b.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102e1a:	2b00      	cmp	r3, #0
 8102e1c:	d10a      	bne.n	8102e34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102e1e:	4ba5      	ldr	r3, [pc, #660]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102e22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102e2c:	4aa1      	ldr	r2, [pc, #644]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102e2e:	430b      	orrs	r3, r1
 8102e30:	6513      	str	r3, [r2, #80]	@ 0x50
 8102e32:	e003      	b.n	8102e3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102e38:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8102e48:	f04f 0900 	mov.w	r9, #0
 8102e4c:	ea58 0309 	orrs.w	r3, r8, r9
 8102e50:	d047      	beq.n	8102ee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8102e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102e58:	2b04      	cmp	r3, #4
 8102e5a:	d82a      	bhi.n	8102eb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8102e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8102e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8102e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102e62:	bf00      	nop
 8102e64:	08102e79 	.word	0x08102e79
 8102e68:	08102e87 	.word	0x08102e87
 8102e6c:	08102e9d 	.word	0x08102e9d
 8102e70:	08102ebb 	.word	0x08102ebb
 8102e74:	08102ebb 	.word	0x08102ebb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e78:	4b8e      	ldr	r3, [pc, #568]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102e7c:	4a8d      	ldr	r2, [pc, #564]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102e84:	e01a      	b.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e8a:	3308      	adds	r3, #8
 8102e8c:	2100      	movs	r1, #0
 8102e8e:	4618      	mov	r0, r3
 8102e90:	f002 fb4e 	bl	8105530 <RCCEx_PLL2_Config>
 8102e94:	4603      	mov	r3, r0
 8102e96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102e9a:	e00f      	b.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ea0:	3328      	adds	r3, #40	@ 0x28
 8102ea2:	2100      	movs	r1, #0
 8102ea4:	4618      	mov	r0, r3
 8102ea6:	f002 fbf5 	bl	8105694 <RCCEx_PLL3_Config>
 8102eaa:	4603      	mov	r3, r0
 8102eac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102eb0:	e004      	b.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102eb2:	2301      	movs	r3, #1
 8102eb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102eb8:	e000      	b.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8102eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ebc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102ec0:	2b00      	cmp	r3, #0
 8102ec2:	d10a      	bne.n	8102eda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102ec4:	4b7b      	ldr	r3, [pc, #492]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102ec8:	f023 0107 	bic.w	r1, r3, #7
 8102ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102ed2:	4a78      	ldr	r2, [pc, #480]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102ed4:	430b      	orrs	r3, r1
 8102ed6:	6513      	str	r3, [r2, #80]	@ 0x50
 8102ed8:	e003      	b.n	8102ee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102eda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102ede:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102eea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8102eee:	f04f 0b00 	mov.w	fp, #0
 8102ef2:	ea5a 030b 	orrs.w	r3, sl, fp
 8102ef6:	d04c      	beq.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8102ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102f02:	d030      	beq.n	8102f66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102f08:	d829      	bhi.n	8102f5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102f0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8102f0c:	d02d      	beq.n	8102f6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8102f0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8102f10:	d825      	bhi.n	8102f5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102f12:	2b80      	cmp	r3, #128	@ 0x80
 8102f14:	d018      	beq.n	8102f48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8102f16:	2b80      	cmp	r3, #128	@ 0x80
 8102f18:	d821      	bhi.n	8102f5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102f1a:	2b00      	cmp	r3, #0
 8102f1c:	d002      	beq.n	8102f24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8102f1e:	2b40      	cmp	r3, #64	@ 0x40
 8102f20:	d007      	beq.n	8102f32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8102f22:	e01c      	b.n	8102f5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f24:	4b63      	ldr	r3, [pc, #396]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f28:	4a62      	ldr	r2, [pc, #392]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102f30:	e01c      	b.n	8102f6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f36:	3308      	adds	r3, #8
 8102f38:	2100      	movs	r1, #0
 8102f3a:	4618      	mov	r0, r3
 8102f3c:	f002 faf8 	bl	8105530 <RCCEx_PLL2_Config>
 8102f40:	4603      	mov	r3, r0
 8102f42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102f46:	e011      	b.n	8102f6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f4c:	3328      	adds	r3, #40	@ 0x28
 8102f4e:	2100      	movs	r1, #0
 8102f50:	4618      	mov	r0, r3
 8102f52:	f002 fb9f 	bl	8105694 <RCCEx_PLL3_Config>
 8102f56:	4603      	mov	r3, r0
 8102f58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102f5c:	e006      	b.n	8102f6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102f5e:	2301      	movs	r3, #1
 8102f60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102f64:	e002      	b.n	8102f6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102f66:	bf00      	nop
 8102f68:	e000      	b.n	8102f6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102f6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102f70:	2b00      	cmp	r3, #0
 8102f72:	d10a      	bne.n	8102f8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102f74:	4b4f      	ldr	r3, [pc, #316]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102f78:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8102f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102f82:	4a4c      	ldr	r2, [pc, #304]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102f84:	430b      	orrs	r3, r1
 8102f86:	6513      	str	r3, [r2, #80]	@ 0x50
 8102f88:	e003      	b.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102f8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f9a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8102f9e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8102fa2:	2300      	movs	r3, #0
 8102fa4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8102fa8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8102fac:	460b      	mov	r3, r1
 8102fae:	4313      	orrs	r3, r2
 8102fb0:	d053      	beq.n	810305a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8102fb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102fba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102fbe:	d035      	beq.n	810302c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102fc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102fc4:	d82e      	bhi.n	8103024 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102fc6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102fca:	d031      	beq.n	8103030 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8102fcc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102fd0:	d828      	bhi.n	8103024 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102fd6:	d01a      	beq.n	810300e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8102fd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102fdc:	d822      	bhi.n	8103024 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102fde:	2b00      	cmp	r3, #0
 8102fe0:	d003      	beq.n	8102fea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8102fe2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102fe6:	d007      	beq.n	8102ff8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8102fe8:	e01c      	b.n	8103024 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fea:	4b32      	ldr	r3, [pc, #200]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fee:	4a31      	ldr	r2, [pc, #196]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102ff6:	e01c      	b.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ffc:	3308      	adds	r3, #8
 8102ffe:	2100      	movs	r1, #0
 8103000:	4618      	mov	r0, r3
 8103002:	f002 fa95 	bl	8105530 <RCCEx_PLL2_Config>
 8103006:	4603      	mov	r3, r0
 8103008:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810300c:	e011      	b.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810300e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103012:	3328      	adds	r3, #40	@ 0x28
 8103014:	2100      	movs	r1, #0
 8103016:	4618      	mov	r0, r3
 8103018:	f002 fb3c 	bl	8105694 <RCCEx_PLL3_Config>
 810301c:	4603      	mov	r3, r0
 810301e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103022:	e006      	b.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103024:	2301      	movs	r3, #1
 8103026:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810302a:	e002      	b.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810302c:	bf00      	nop
 810302e:	e000      	b.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103032:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103036:	2b00      	cmp	r3, #0
 8103038:	d10b      	bne.n	8103052 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810303a:	4b1e      	ldr	r3, [pc, #120]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810303c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810303e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8103042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103046:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810304a:	4a1a      	ldr	r2, [pc, #104]	@ (81030b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810304c:	430b      	orrs	r3, r1
 810304e:	6593      	str	r3, [r2, #88]	@ 0x58
 8103050:	e003      	b.n	810305a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103052:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103056:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810305a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103062:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8103066:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810306a:	2300      	movs	r3, #0
 810306c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8103070:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8103074:	460b      	mov	r3, r1
 8103076:	4313      	orrs	r3, r2
 8103078:	d056      	beq.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810307a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810307e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103082:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103086:	d038      	beq.n	81030fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103088:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810308c:	d831      	bhi.n	81030f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810308e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103092:	d034      	beq.n	81030fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103094:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103098:	d82b      	bhi.n	81030f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810309a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810309e:	d01d      	beq.n	81030dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 81030a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81030a4:	d825      	bhi.n	81030f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81030a6:	2b00      	cmp	r3, #0
 81030a8:	d006      	beq.n	81030b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81030aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81030ae:	d00a      	beq.n	81030c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81030b0:	e01f      	b.n	81030f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81030b2:	bf00      	nop
 81030b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030b8:	4ba2      	ldr	r3, [pc, #648]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81030bc:	4aa1      	ldr	r2, [pc, #644]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81030be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81030c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81030c4:	e01c      	b.n	8103100 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81030c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030ca:	3308      	adds	r3, #8
 81030cc:	2100      	movs	r1, #0
 81030ce:	4618      	mov	r0, r3
 81030d0:	f002 fa2e 	bl	8105530 <RCCEx_PLL2_Config>
 81030d4:	4603      	mov	r3, r0
 81030d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81030da:	e011      	b.n	8103100 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81030dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030e0:	3328      	adds	r3, #40	@ 0x28
 81030e2:	2100      	movs	r1, #0
 81030e4:	4618      	mov	r0, r3
 81030e6:	f002 fad5 	bl	8105694 <RCCEx_PLL3_Config>
 81030ea:	4603      	mov	r3, r0
 81030ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81030f0:	e006      	b.n	8103100 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81030f2:	2301      	movs	r3, #1
 81030f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81030f8:	e002      	b.n	8103100 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81030fa:	bf00      	nop
 81030fc:	e000      	b.n	8103100 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81030fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103100:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103104:	2b00      	cmp	r3, #0
 8103106:	d10b      	bne.n	8103120 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103108:	4b8e      	ldr	r3, [pc, #568]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810310c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8103110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103114:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103118:	4a8a      	ldr	r2, [pc, #552]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810311a:	430b      	orrs	r3, r1
 810311c:	6593      	str	r3, [r2, #88]	@ 0x58
 810311e:	e003      	b.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103120:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103124:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103128:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103130:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8103134:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8103138:	2300      	movs	r3, #0
 810313a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810313e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8103142:	460b      	mov	r3, r1
 8103144:	4313      	orrs	r3, r2
 8103146:	d03a      	beq.n	81031be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810314c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810314e:	2b30      	cmp	r3, #48	@ 0x30
 8103150:	d01f      	beq.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103152:	2b30      	cmp	r3, #48	@ 0x30
 8103154:	d819      	bhi.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103156:	2b20      	cmp	r3, #32
 8103158:	d00c      	beq.n	8103174 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810315a:	2b20      	cmp	r3, #32
 810315c:	d815      	bhi.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810315e:	2b00      	cmp	r3, #0
 8103160:	d019      	beq.n	8103196 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103162:	2b10      	cmp	r3, #16
 8103164:	d111      	bne.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103166:	4b77      	ldr	r3, [pc, #476]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810316a:	4a76      	ldr	r2, [pc, #472]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810316c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103170:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103172:	e011      	b.n	8103198 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103178:	3308      	adds	r3, #8
 810317a:	2102      	movs	r1, #2
 810317c:	4618      	mov	r0, r3
 810317e:	f002 f9d7 	bl	8105530 <RCCEx_PLL2_Config>
 8103182:	4603      	mov	r3, r0
 8103184:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103188:	e006      	b.n	8103198 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810318a:	2301      	movs	r3, #1
 810318c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103190:	e002      	b.n	8103198 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103192:	bf00      	nop
 8103194:	e000      	b.n	8103198 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103198:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810319c:	2b00      	cmp	r3, #0
 810319e:	d10a      	bne.n	81031b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81031a0:	4b68      	ldr	r3, [pc, #416]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81031a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81031a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 81031a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81031ae:	4a65      	ldr	r2, [pc, #404]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81031b0:	430b      	orrs	r3, r1
 81031b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81031b4:	e003      	b.n	81031be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81031ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81031be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81031ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81031ce:	2300      	movs	r3, #0
 81031d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81031d4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81031d8:	460b      	mov	r3, r1
 81031da:	4313      	orrs	r3, r2
 81031dc:	d051      	beq.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81031de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81031e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81031e8:	d035      	beq.n	8103256 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81031ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81031ee:	d82e      	bhi.n	810324e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81031f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81031f4:	d031      	beq.n	810325a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81031f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81031fa:	d828      	bhi.n	810324e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81031fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103200:	d01a      	beq.n	8103238 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103206:	d822      	bhi.n	810324e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103208:	2b00      	cmp	r3, #0
 810320a:	d003      	beq.n	8103214 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810320c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103210:	d007      	beq.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103212:	e01c      	b.n	810324e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103214:	4b4b      	ldr	r3, [pc, #300]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103218:	4a4a      	ldr	r2, [pc, #296]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810321a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810321e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103220:	e01c      	b.n	810325c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103226:	3308      	adds	r3, #8
 8103228:	2100      	movs	r1, #0
 810322a:	4618      	mov	r0, r3
 810322c:	f002 f980 	bl	8105530 <RCCEx_PLL2_Config>
 8103230:	4603      	mov	r3, r0
 8103232:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103236:	e011      	b.n	810325c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810323c:	3328      	adds	r3, #40	@ 0x28
 810323e:	2100      	movs	r1, #0
 8103240:	4618      	mov	r0, r3
 8103242:	f002 fa27 	bl	8105694 <RCCEx_PLL3_Config>
 8103246:	4603      	mov	r3, r0
 8103248:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810324c:	e006      	b.n	810325c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810324e:	2301      	movs	r3, #1
 8103250:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103254:	e002      	b.n	810325c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103256:	bf00      	nop
 8103258:	e000      	b.n	810325c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810325a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810325c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103260:	2b00      	cmp	r3, #0
 8103262:	d10a      	bne.n	810327a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103264:	4b37      	ldr	r3, [pc, #220]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103268:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810326c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103272:	4a34      	ldr	r2, [pc, #208]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103274:	430b      	orrs	r3, r1
 8103276:	6513      	str	r3, [r2, #80]	@ 0x50
 8103278:	e003      	b.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810327a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810327e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103286:	e9d3 2300 	ldrd	r2, r3, [r3]
 810328a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810328e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8103292:	2300      	movs	r3, #0
 8103294:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8103298:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810329c:	460b      	mov	r3, r1
 810329e:	4313      	orrs	r3, r2
 81032a0:	d056      	beq.n	8103350 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81032a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81032a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81032ac:	d033      	beq.n	8103316 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81032ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81032b2:	d82c      	bhi.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x592>
 81032b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81032b8:	d02f      	beq.n	810331a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81032ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81032be:	d826      	bhi.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x592>
 81032c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81032c4:	d02b      	beq.n	810331e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81032c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81032ca:	d820      	bhi.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x592>
 81032cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81032d0:	d012      	beq.n	81032f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81032d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81032d6:	d81a      	bhi.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x592>
 81032d8:	2b00      	cmp	r3, #0
 81032da:	d022      	beq.n	8103322 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81032dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81032e0:	d115      	bne.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81032e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032e6:	3308      	adds	r3, #8
 81032e8:	2101      	movs	r1, #1
 81032ea:	4618      	mov	r0, r3
 81032ec:	f002 f920 	bl	8105530 <RCCEx_PLL2_Config>
 81032f0:	4603      	mov	r3, r0
 81032f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81032f6:	e015      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81032f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032fc:	3328      	adds	r3, #40	@ 0x28
 81032fe:	2101      	movs	r1, #1
 8103300:	4618      	mov	r0, r3
 8103302:	f002 f9c7 	bl	8105694 <RCCEx_PLL3_Config>
 8103306:	4603      	mov	r3, r0
 8103308:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810330c:	e00a      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810330e:	2301      	movs	r3, #1
 8103310:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103314:	e006      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103316:	bf00      	nop
 8103318:	e004      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810331a:	bf00      	nop
 810331c:	e002      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810331e:	bf00      	nop
 8103320:	e000      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103324:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103328:	2b00      	cmp	r3, #0
 810332a:	d10d      	bne.n	8103348 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810332c:	4b05      	ldr	r3, [pc, #20]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810332e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103330:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810333a:	4a02      	ldr	r2, [pc, #8]	@ (8103344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810333c:	430b      	orrs	r3, r1
 810333e:	6513      	str	r3, [r2, #80]	@ 0x50
 8103340:	e006      	b.n	8103350 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103342:	bf00      	nop
 8103344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103348:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810334c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103350:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103358:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810335c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8103360:	2300      	movs	r3, #0
 8103362:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8103366:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810336a:	460b      	mov	r3, r1
 810336c:	4313      	orrs	r3, r2
 810336e:	d055      	beq.n	810341c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103370:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103374:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810337c:	d033      	beq.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810337e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103382:	d82c      	bhi.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103388:	d02f      	beq.n	81033ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810338a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810338e:	d826      	bhi.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103390:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103394:	d02b      	beq.n	81033ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103396:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810339a:	d820      	bhi.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x662>
 810339c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81033a0:	d012      	beq.n	81033c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81033a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81033a6:	d81a      	bhi.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x662>
 81033a8:	2b00      	cmp	r3, #0
 81033aa:	d022      	beq.n	81033f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 81033ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81033b0:	d115      	bne.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81033b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033b6:	3308      	adds	r3, #8
 81033b8:	2101      	movs	r1, #1
 81033ba:	4618      	mov	r0, r3
 81033bc:	f002 f8b8 	bl	8105530 <RCCEx_PLL2_Config>
 81033c0:	4603      	mov	r3, r0
 81033c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81033c6:	e015      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81033c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033cc:	3328      	adds	r3, #40	@ 0x28
 81033ce:	2101      	movs	r1, #1
 81033d0:	4618      	mov	r0, r3
 81033d2:	f002 f95f 	bl	8105694 <RCCEx_PLL3_Config>
 81033d6:	4603      	mov	r3, r0
 81033d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81033dc:	e00a      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81033de:	2301      	movs	r3, #1
 81033e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81033e4:	e006      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81033e6:	bf00      	nop
 81033e8:	e004      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81033ea:	bf00      	nop
 81033ec:	e002      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81033ee:	bf00      	nop
 81033f0:	e000      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81033f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81033f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033f8:	2b00      	cmp	r3, #0
 81033fa:	d10b      	bne.n	8103414 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81033fc:	4bb7      	ldr	r3, [pc, #732]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81033fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103400:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103404:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103408:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810340c:	4ab3      	ldr	r2, [pc, #716]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810340e:	430b      	orrs	r3, r1
 8103410:	6593      	str	r3, [r2, #88]	@ 0x58
 8103412:	e003      	b.n	810341c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103414:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103418:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810341c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103424:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8103428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810342c:	2300      	movs	r3, #0
 810342e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8103432:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8103436:	460b      	mov	r3, r1
 8103438:	4313      	orrs	r3, r2
 810343a:	d02a      	beq.n	8103492 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810343c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103442:	2b00      	cmp	r3, #0
 8103444:	d011      	beq.n	810346a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8103446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810344a:	d10a      	bne.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810344c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103450:	3308      	adds	r3, #8
 8103452:	2101      	movs	r1, #1
 8103454:	4618      	mov	r0, r3
 8103456:	f002 f86b 	bl	8105530 <RCCEx_PLL2_Config>
 810345a:	4603      	mov	r3, r0
 810345c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8103460:	e004      	b.n	810346c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103462:	2301      	movs	r3, #1
 8103464:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103468:	e000      	b.n	810346c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 810346a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810346c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103470:	2b00      	cmp	r3, #0
 8103472:	d10a      	bne.n	810348a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8103474:	4b99      	ldr	r3, [pc, #612]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103478:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810347c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103482:	4a96      	ldr	r2, [pc, #600]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103484:	430b      	orrs	r3, r1
 8103486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103488:	e003      	b.n	8103492 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810348a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810348e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103496:	e9d3 2300 	ldrd	r2, r3, [r3]
 810349a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810349e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81034a2:	2300      	movs	r3, #0
 81034a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81034a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81034ac:	460b      	mov	r3, r1
 81034ae:	4313      	orrs	r3, r2
 81034b0:	d037      	beq.n	8103522 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81034b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81034b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81034bc:	d00e      	beq.n	81034dc <HAL_RCCEx_PeriphCLKConfig+0x760>
 81034be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81034c2:	d816      	bhi.n	81034f2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 81034c4:	2b00      	cmp	r3, #0
 81034c6:	d018      	beq.n	81034fa <HAL_RCCEx_PeriphCLKConfig+0x77e>
 81034c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81034cc:	d111      	bne.n	81034f2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034ce:	4b83      	ldr	r3, [pc, #524]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81034d2:	4a82      	ldr	r2, [pc, #520]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81034d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81034d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81034da:	e00f      	b.n	81034fc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81034dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81034e0:	3308      	adds	r3, #8
 81034e2:	2101      	movs	r1, #1
 81034e4:	4618      	mov	r0, r3
 81034e6:	f002 f823 	bl	8105530 <RCCEx_PLL2_Config>
 81034ea:	4603      	mov	r3, r0
 81034ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81034f0:	e004      	b.n	81034fc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81034f2:	2301      	movs	r3, #1
 81034f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81034f8:	e000      	b.n	81034fc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 81034fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81034fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103500:	2b00      	cmp	r3, #0
 8103502:	d10a      	bne.n	810351a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103504:	4b75      	ldr	r3, [pc, #468]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103508:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810350c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103512:	4a72      	ldr	r2, [pc, #456]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103514:	430b      	orrs	r3, r1
 8103516:	6513      	str	r3, [r2, #80]	@ 0x50
 8103518:	e003      	b.n	8103522 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810351a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810351e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103526:	e9d3 2300 	ldrd	r2, r3, [r3]
 810352a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810352e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8103532:	2300      	movs	r3, #0
 8103534:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103538:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810353c:	460b      	mov	r3, r1
 810353e:	4313      	orrs	r3, r2
 8103540:	d03a      	beq.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103548:	2b03      	cmp	r3, #3
 810354a:	d81d      	bhi.n	8103588 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 810354c:	a201      	add	r2, pc, #4	@ (adr r2, 8103554 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 810354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103552:	bf00      	nop
 8103554:	08103591 	.word	0x08103591
 8103558:	08103565 	.word	0x08103565
 810355c:	08103573 	.word	0x08103573
 8103560:	08103591 	.word	0x08103591
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103564:	4b5d      	ldr	r3, [pc, #372]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103568:	4a5c      	ldr	r2, [pc, #368]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810356a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810356e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103570:	e00f      	b.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103576:	3308      	adds	r3, #8
 8103578:	2102      	movs	r1, #2
 810357a:	4618      	mov	r0, r3
 810357c:	f001 ffd8 	bl	8105530 <RCCEx_PLL2_Config>
 8103580:	4603      	mov	r3, r0
 8103582:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103586:	e004      	b.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103588:	2301      	movs	r3, #1
 810358a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810358e:	e000      	b.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8103590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103592:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103596:	2b00      	cmp	r3, #0
 8103598:	d10a      	bne.n	81035b0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810359a:	4b50      	ldr	r3, [pc, #320]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810359e:	f023 0103 	bic.w	r1, r3, #3
 81035a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81035a8:	4a4c      	ldr	r2, [pc, #304]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81035aa:	430b      	orrs	r3, r1
 81035ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81035ae:	e003      	b.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81035b4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81035b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81035c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81035c8:	2300      	movs	r3, #0
 81035ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81035ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81035d2:	460b      	mov	r3, r1
 81035d4:	4313      	orrs	r3, r2
 81035d6:	f000 80a0 	beq.w	810371a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81035da:	4b41      	ldr	r3, [pc, #260]	@ (81036e0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81035dc:	681b      	ldr	r3, [r3, #0]
 81035de:	4a40      	ldr	r2, [pc, #256]	@ (81036e0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81035e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81035e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81035e6:	f7fe fb7f 	bl	8101ce8 <HAL_GetTick>
 81035ea:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81035ee:	e00b      	b.n	8103608 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81035f0:	f7fe fb7a 	bl	8101ce8 <HAL_GetTick>
 81035f4:	4602      	mov	r2, r0
 81035f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 81035fa:	1ad3      	subs	r3, r2, r3
 81035fc:	2b64      	cmp	r3, #100	@ 0x64
 81035fe:	d903      	bls.n	8103608 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8103600:	2303      	movs	r3, #3
 8103602:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103606:	e005      	b.n	8103614 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103608:	4b35      	ldr	r3, [pc, #212]	@ (81036e0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810360a:	681b      	ldr	r3, [r3, #0]
 810360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103610:	2b00      	cmp	r3, #0
 8103612:	d0ed      	beq.n	81035f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8103614:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103618:	2b00      	cmp	r3, #0
 810361a:	d17a      	bne.n	8103712 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810361c:	4b2f      	ldr	r3, [pc, #188]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810361e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8103620:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103624:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103628:	4053      	eors	r3, r2
 810362a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810362e:	2b00      	cmp	r3, #0
 8103630:	d015      	beq.n	810365e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103632:	4b2a      	ldr	r3, [pc, #168]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810363a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810363e:	4b27      	ldr	r3, [pc, #156]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103642:	4a26      	ldr	r2, [pc, #152]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103648:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810364a:	4b24      	ldr	r3, [pc, #144]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810364e:	4a23      	ldr	r2, [pc, #140]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8103654:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103656:	4a21      	ldr	r2, [pc, #132]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103658:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 810365c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810365e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103662:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810366a:	d118      	bne.n	810369e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810366c:	f7fe fb3c 	bl	8101ce8 <HAL_GetTick>
 8103670:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103674:	e00d      	b.n	8103692 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103676:	f7fe fb37 	bl	8101ce8 <HAL_GetTick>
 810367a:	4602      	mov	r2, r0
 810367c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8103680:	1ad2      	subs	r2, r2, r3
 8103682:	f241 3388 	movw	r3, #5000	@ 0x1388
 8103686:	429a      	cmp	r2, r3
 8103688:	d903      	bls.n	8103692 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 810368a:	2303      	movs	r3, #3
 810368c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8103690:	e005      	b.n	810369e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103692:	4b12      	ldr	r3, [pc, #72]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103696:	f003 0302 	and.w	r3, r3, #2
 810369a:	2b00      	cmp	r3, #0
 810369c:	d0eb      	beq.n	8103676 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810369e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81036a2:	2b00      	cmp	r3, #0
 81036a4:	d130      	bne.n	8103708 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81036a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81036ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81036b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81036b6:	d115      	bne.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 81036b8:	4b08      	ldr	r3, [pc, #32]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036ba:	691b      	ldr	r3, [r3, #16]
 81036bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81036c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81036c8:	091b      	lsrs	r3, r3, #4
 81036ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81036ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81036d2:	4a02      	ldr	r2, [pc, #8]	@ (81036dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81036d4:	430b      	orrs	r3, r1
 81036d6:	6113      	str	r3, [r2, #16]
 81036d8:	e00a      	b.n	81036f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 81036da:	bf00      	nop
 81036dc:	58024400 	.word	0x58024400
 81036e0:	58024800 	.word	0x58024800
 81036e4:	4bd4      	ldr	r3, [pc, #848]	@ (8103a38 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81036e6:	691b      	ldr	r3, [r3, #16]
 81036e8:	4ad3      	ldr	r2, [pc, #844]	@ (8103a38 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81036ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81036ee:	6113      	str	r3, [r2, #16]
 81036f0:	4bd1      	ldr	r3, [pc, #836]	@ (8103a38 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81036f2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81036f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81036f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81036fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103700:	4acd      	ldr	r2, [pc, #820]	@ (8103a38 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103702:	430b      	orrs	r3, r1
 8103704:	6713      	str	r3, [r2, #112]	@ 0x70
 8103706:	e008      	b.n	810371a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103708:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810370c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8103710:	e003      	b.n	810371a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103712:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103716:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810371a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103722:	f002 0301 	and.w	r3, r2, #1
 8103726:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810372a:	2300      	movs	r3, #0
 810372c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8103730:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8103734:	460b      	mov	r3, r1
 8103736:	4313      	orrs	r3, r2
 8103738:	f000 808b 	beq.w	8103852 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810373c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103744:	2b28      	cmp	r3, #40	@ 0x28
 8103746:	d86b      	bhi.n	8103820 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8103748:	a201      	add	r2, pc, #4	@ (adr r2, 8103750 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810374e:	bf00      	nop
 8103750:	08103829 	.word	0x08103829
 8103754:	08103821 	.word	0x08103821
 8103758:	08103821 	.word	0x08103821
 810375c:	08103821 	.word	0x08103821
 8103760:	08103821 	.word	0x08103821
 8103764:	08103821 	.word	0x08103821
 8103768:	08103821 	.word	0x08103821
 810376c:	08103821 	.word	0x08103821
 8103770:	081037f5 	.word	0x081037f5
 8103774:	08103821 	.word	0x08103821
 8103778:	08103821 	.word	0x08103821
 810377c:	08103821 	.word	0x08103821
 8103780:	08103821 	.word	0x08103821
 8103784:	08103821 	.word	0x08103821
 8103788:	08103821 	.word	0x08103821
 810378c:	08103821 	.word	0x08103821
 8103790:	0810380b 	.word	0x0810380b
 8103794:	08103821 	.word	0x08103821
 8103798:	08103821 	.word	0x08103821
 810379c:	08103821 	.word	0x08103821
 81037a0:	08103821 	.word	0x08103821
 81037a4:	08103821 	.word	0x08103821
 81037a8:	08103821 	.word	0x08103821
 81037ac:	08103821 	.word	0x08103821
 81037b0:	08103829 	.word	0x08103829
 81037b4:	08103821 	.word	0x08103821
 81037b8:	08103821 	.word	0x08103821
 81037bc:	08103821 	.word	0x08103821
 81037c0:	08103821 	.word	0x08103821
 81037c4:	08103821 	.word	0x08103821
 81037c8:	08103821 	.word	0x08103821
 81037cc:	08103821 	.word	0x08103821
 81037d0:	08103829 	.word	0x08103829
 81037d4:	08103821 	.word	0x08103821
 81037d8:	08103821 	.word	0x08103821
 81037dc:	08103821 	.word	0x08103821
 81037e0:	08103821 	.word	0x08103821
 81037e4:	08103821 	.word	0x08103821
 81037e8:	08103821 	.word	0x08103821
 81037ec:	08103821 	.word	0x08103821
 81037f0:	08103829 	.word	0x08103829
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81037f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037f8:	3308      	adds	r3, #8
 81037fa:	2101      	movs	r1, #1
 81037fc:	4618      	mov	r0, r3
 81037fe:	f001 fe97 	bl	8105530 <RCCEx_PLL2_Config>
 8103802:	4603      	mov	r3, r0
 8103804:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103808:	e00f      	b.n	810382a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810380a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810380e:	3328      	adds	r3, #40	@ 0x28
 8103810:	2101      	movs	r1, #1
 8103812:	4618      	mov	r0, r3
 8103814:	f001 ff3e 	bl	8105694 <RCCEx_PLL3_Config>
 8103818:	4603      	mov	r3, r0
 810381a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810381e:	e004      	b.n	810382a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103820:	2301      	movs	r3, #1
 8103822:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103826:	e000      	b.n	810382a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8103828:	bf00      	nop
    }

    if (ret == HAL_OK)
 810382a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810382e:	2b00      	cmp	r3, #0
 8103830:	d10b      	bne.n	810384a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103832:	4b81      	ldr	r3, [pc, #516]	@ (8103a38 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103836:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810383a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103842:	4a7d      	ldr	r2, [pc, #500]	@ (8103a38 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103844:	430b      	orrs	r3, r1
 8103846:	6553      	str	r3, [r2, #84]	@ 0x54
 8103848:	e003      	b.n	8103852 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810384a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810384e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103856:	e9d3 2300 	ldrd	r2, r3, [r3]
 810385a:	f002 0302 	and.w	r3, r2, #2
 810385e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8103862:	2300      	movs	r3, #0
 8103864:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8103868:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810386c:	460b      	mov	r3, r1
 810386e:	4313      	orrs	r3, r2
 8103870:	d042      	beq.n	81038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103872:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103878:	2b05      	cmp	r3, #5
 810387a:	d825      	bhi.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 810387c:	a201      	add	r2, pc, #4	@ (adr r2, 8103884 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 810387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103882:	bf00      	nop
 8103884:	081038d1 	.word	0x081038d1
 8103888:	0810389d 	.word	0x0810389d
 810388c:	081038b3 	.word	0x081038b3
 8103890:	081038d1 	.word	0x081038d1
 8103894:	081038d1 	.word	0x081038d1
 8103898:	081038d1 	.word	0x081038d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810389c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038a0:	3308      	adds	r3, #8
 81038a2:	2101      	movs	r1, #1
 81038a4:	4618      	mov	r0, r3
 81038a6:	f001 fe43 	bl	8105530 <RCCEx_PLL2_Config>
 81038aa:	4603      	mov	r3, r0
 81038ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81038b0:	e00f      	b.n	81038d2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81038b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038b6:	3328      	adds	r3, #40	@ 0x28
 81038b8:	2101      	movs	r1, #1
 81038ba:	4618      	mov	r0, r3
 81038bc:	f001 feea 	bl	8105694 <RCCEx_PLL3_Config>
 81038c0:	4603      	mov	r3, r0
 81038c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81038c6:	e004      	b.n	81038d2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81038c8:	2301      	movs	r3, #1
 81038ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81038ce:	e000      	b.n	81038d2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 81038d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81038d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81038d6:	2b00      	cmp	r3, #0
 81038d8:	d10a      	bne.n	81038f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81038da:	4b57      	ldr	r3, [pc, #348]	@ (8103a38 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81038dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81038de:	f023 0107 	bic.w	r1, r3, #7
 81038e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81038e8:	4a53      	ldr	r2, [pc, #332]	@ (8103a38 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81038ea:	430b      	orrs	r3, r1
 81038ec:	6553      	str	r3, [r2, #84]	@ 0x54
 81038ee:	e003      	b.n	81038f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81038f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81038f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103900:	f002 0304 	and.w	r3, r2, #4
 8103904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8103908:	2300      	movs	r3, #0
 810390a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810390e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8103912:	460b      	mov	r3, r1
 8103914:	4313      	orrs	r3, r2
 8103916:	d044      	beq.n	81039a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810391c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103920:	2b05      	cmp	r3, #5
 8103922:	d825      	bhi.n	8103970 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8103924:	a201      	add	r2, pc, #4	@ (adr r2, 810392c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8103926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810392a:	bf00      	nop
 810392c:	08103979 	.word	0x08103979
 8103930:	08103945 	.word	0x08103945
 8103934:	0810395b 	.word	0x0810395b
 8103938:	08103979 	.word	0x08103979
 810393c:	08103979 	.word	0x08103979
 8103940:	08103979 	.word	0x08103979
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103944:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103948:	3308      	adds	r3, #8
 810394a:	2101      	movs	r1, #1
 810394c:	4618      	mov	r0, r3
 810394e:	f001 fdef 	bl	8105530 <RCCEx_PLL2_Config>
 8103952:	4603      	mov	r3, r0
 8103954:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103958:	e00f      	b.n	810397a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810395a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810395e:	3328      	adds	r3, #40	@ 0x28
 8103960:	2101      	movs	r1, #1
 8103962:	4618      	mov	r0, r3
 8103964:	f001 fe96 	bl	8105694 <RCCEx_PLL3_Config>
 8103968:	4603      	mov	r3, r0
 810396a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810396e:	e004      	b.n	810397a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103970:	2301      	movs	r3, #1
 8103972:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103976:	e000      	b.n	810397a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8103978:	bf00      	nop
    }

    if (ret == HAL_OK)
 810397a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810397e:	2b00      	cmp	r3, #0
 8103980:	d10b      	bne.n	810399a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103982:	4b2d      	ldr	r3, [pc, #180]	@ (8103a38 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103986:	f023 0107 	bic.w	r1, r3, #7
 810398a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810398e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103992:	4a29      	ldr	r2, [pc, #164]	@ (8103a38 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103994:	430b      	orrs	r3, r1
 8103996:	6593      	str	r3, [r2, #88]	@ 0x58
 8103998:	e003      	b.n	81039a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810399a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810399e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81039a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039aa:	f002 0320 	and.w	r3, r2, #32
 81039ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81039b2:	2300      	movs	r3, #0
 81039b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81039b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81039bc:	460b      	mov	r3, r1
 81039be:	4313      	orrs	r3, r2
 81039c0:	d057      	beq.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81039c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81039c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81039ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81039ce:	d035      	beq.n	8103a3c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 81039d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81039d4:	d82c      	bhi.n	8103a30 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81039da:	d031      	beq.n	8103a40 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 81039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81039e0:	d826      	bhi.n	8103a30 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81039e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81039e6:	d02d      	beq.n	8103a44 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 81039e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81039ec:	d820      	bhi.n	8103a30 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81039ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81039f2:	d012      	beq.n	8103a1a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 81039f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81039f8:	d81a      	bhi.n	8103a30 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81039fa:	2b00      	cmp	r3, #0
 81039fc:	d024      	beq.n	8103a48 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 81039fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103a02:	d115      	bne.n	8103a30 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a08:	3308      	adds	r3, #8
 8103a0a:	2100      	movs	r1, #0
 8103a0c:	4618      	mov	r0, r3
 8103a0e:	f001 fd8f 	bl	8105530 <RCCEx_PLL2_Config>
 8103a12:	4603      	mov	r3, r0
 8103a14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103a18:	e017      	b.n	8103a4a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a1e:	3328      	adds	r3, #40	@ 0x28
 8103a20:	2102      	movs	r1, #2
 8103a22:	4618      	mov	r0, r3
 8103a24:	f001 fe36 	bl	8105694 <RCCEx_PLL3_Config>
 8103a28:	4603      	mov	r3, r0
 8103a2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103a2e:	e00c      	b.n	8103a4a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a30:	2301      	movs	r3, #1
 8103a32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103a36:	e008      	b.n	8103a4a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8103a38:	58024400 	.word	0x58024400
        break;
 8103a3c:	bf00      	nop
 8103a3e:	e004      	b.n	8103a4a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103a40:	bf00      	nop
 8103a42:	e002      	b.n	8103a4a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103a44:	bf00      	nop
 8103a46:	e000      	b.n	8103a4a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a4e:	2b00      	cmp	r3, #0
 8103a50:	d10b      	bne.n	8103a6a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103a52:	4bc2      	ldr	r3, [pc, #776]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a56:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103a62:	4abe      	ldr	r2, [pc, #760]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103a64:	430b      	orrs	r3, r1
 8103a66:	6553      	str	r3, [r2, #84]	@ 0x54
 8103a68:	e003      	b.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103a6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a7a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8103a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8103a82:	2300      	movs	r3, #0
 8103a84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8103a88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8103a8c:	460b      	mov	r3, r1
 8103a8e:	4313      	orrs	r3, r2
 8103a90:	d055      	beq.n	8103b3e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8103a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103a96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103a9a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103a9e:	d033      	beq.n	8103b08 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8103aa0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103aa4:	d82c      	bhi.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103aaa:	d02f      	beq.n	8103b0c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8103aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103ab0:	d826      	bhi.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103ab2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103ab6:	d02b      	beq.n	8103b10 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8103ab8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103abc:	d820      	bhi.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103abe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103ac2:	d012      	beq.n	8103aea <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8103ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103ac8:	d81a      	bhi.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103aca:	2b00      	cmp	r3, #0
 8103acc:	d022      	beq.n	8103b14 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8103ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8103ad2:	d115      	bne.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ad8:	3308      	adds	r3, #8
 8103ada:	2100      	movs	r1, #0
 8103adc:	4618      	mov	r0, r3
 8103ade:	f001 fd27 	bl	8105530 <RCCEx_PLL2_Config>
 8103ae2:	4603      	mov	r3, r0
 8103ae4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103ae8:	e015      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103aee:	3328      	adds	r3, #40	@ 0x28
 8103af0:	2102      	movs	r1, #2
 8103af2:	4618      	mov	r0, r3
 8103af4:	f001 fdce 	bl	8105694 <RCCEx_PLL3_Config>
 8103af8:	4603      	mov	r3, r0
 8103afa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103afe:	e00a      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b00:	2301      	movs	r3, #1
 8103b02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103b06:	e006      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103b08:	bf00      	nop
 8103b0a:	e004      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103b0c:	bf00      	nop
 8103b0e:	e002      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103b10:	bf00      	nop
 8103b12:	e000      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b1a:	2b00      	cmp	r3, #0
 8103b1c:	d10b      	bne.n	8103b36 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103b1e:	4b8f      	ldr	r3, [pc, #572]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b22:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8103b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103b2e:	4a8b      	ldr	r2, [pc, #556]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103b30:	430b      	orrs	r3, r1
 8103b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8103b34:	e003      	b.n	8103b3e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103b3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b46:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8103b4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8103b4e:	2300      	movs	r3, #0
 8103b50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8103b54:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8103b58:	460b      	mov	r3, r1
 8103b5a:	4313      	orrs	r3, r2
 8103b5c:	d055      	beq.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103b62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103b66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103b6a:	d033      	beq.n	8103bd4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8103b6c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103b70:	d82c      	bhi.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103b76:	d02f      	beq.n	8103bd8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8103b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103b7c:	d826      	bhi.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103b7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103b82:	d02b      	beq.n	8103bdc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8103b84:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103b88:	d820      	bhi.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103b8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103b8e:	d012      	beq.n	8103bb6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8103b90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103b94:	d81a      	bhi.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103b96:	2b00      	cmp	r3, #0
 8103b98:	d022      	beq.n	8103be0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8103b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103b9e:	d115      	bne.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ba4:	3308      	adds	r3, #8
 8103ba6:	2100      	movs	r1, #0
 8103ba8:	4618      	mov	r0, r3
 8103baa:	f001 fcc1 	bl	8105530 <RCCEx_PLL2_Config>
 8103bae:	4603      	mov	r3, r0
 8103bb0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103bb4:	e015      	b.n	8103be2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bba:	3328      	adds	r3, #40	@ 0x28
 8103bbc:	2102      	movs	r1, #2
 8103bbe:	4618      	mov	r0, r3
 8103bc0:	f001 fd68 	bl	8105694 <RCCEx_PLL3_Config>
 8103bc4:	4603      	mov	r3, r0
 8103bc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103bca:	e00a      	b.n	8103be2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103bcc:	2301      	movs	r3, #1
 8103bce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103bd2:	e006      	b.n	8103be2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103bd4:	bf00      	nop
 8103bd6:	e004      	b.n	8103be2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103bd8:	bf00      	nop
 8103bda:	e002      	b.n	8103be2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103bdc:	bf00      	nop
 8103bde:	e000      	b.n	8103be2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8103be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103be2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103be6:	2b00      	cmp	r3, #0
 8103be8:	d10b      	bne.n	8103c02 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103bea:	4b5c      	ldr	r3, [pc, #368]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103bee:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8103bf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103bf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103bfa:	4a58      	ldr	r2, [pc, #352]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103bfc:	430b      	orrs	r3, r1
 8103bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8103c00:	e003      	b.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103c06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c12:	f002 0308 	and.w	r3, r2, #8
 8103c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103c1a:	2300      	movs	r3, #0
 8103c1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8103c20:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8103c24:	460b      	mov	r3, r1
 8103c26:	4313      	orrs	r3, r2
 8103c28:	d01e      	beq.n	8103c68 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103c36:	d10c      	bne.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c3c:	3328      	adds	r3, #40	@ 0x28
 8103c3e:	2102      	movs	r1, #2
 8103c40:	4618      	mov	r0, r3
 8103c42:	f001 fd27 	bl	8105694 <RCCEx_PLL3_Config>
 8103c46:	4603      	mov	r3, r0
 8103c48:	2b00      	cmp	r3, #0
 8103c4a:	d002      	beq.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8103c4c:	2301      	movs	r3, #1
 8103c4e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103c52:	4b42      	ldr	r3, [pc, #264]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103c62:	4a3e      	ldr	r2, [pc, #248]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103c64:	430b      	orrs	r3, r1
 8103c66:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c70:	f002 0310 	and.w	r3, r2, #16
 8103c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8103c78:	2300      	movs	r3, #0
 8103c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8103c7e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8103c82:	460b      	mov	r3, r1
 8103c84:	4313      	orrs	r3, r2
 8103c86:	d01e      	beq.n	8103cc6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8103c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103c94:	d10c      	bne.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103c9a:	3328      	adds	r3, #40	@ 0x28
 8103c9c:	2102      	movs	r1, #2
 8103c9e:	4618      	mov	r0, r3
 8103ca0:	f001 fcf8 	bl	8105694 <RCCEx_PLL3_Config>
 8103ca4:	4603      	mov	r3, r0
 8103ca6:	2b00      	cmp	r3, #0
 8103ca8:	d002      	beq.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8103caa:	2301      	movs	r3, #1
 8103cac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103cb4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103cc0:	4a26      	ldr	r2, [pc, #152]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103cc2:	430b      	orrs	r3, r1
 8103cc4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cce:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8103cd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103cd6:	2300      	movs	r3, #0
 8103cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8103cdc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8103ce0:	460b      	mov	r3, r1
 8103ce2:	4313      	orrs	r3, r2
 8103ce4:	d040      	beq.n	8103d68 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103cee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103cf2:	d022      	beq.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8103cf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103cf8:	d81b      	bhi.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103cfa:	2b00      	cmp	r3, #0
 8103cfc:	d003      	beq.n	8103d06 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8103cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103d02:	d00b      	beq.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8103d04:	e015      	b.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d0a:	3308      	adds	r3, #8
 8103d0c:	2100      	movs	r1, #0
 8103d0e:	4618      	mov	r0, r3
 8103d10:	f001 fc0e 	bl	8105530 <RCCEx_PLL2_Config>
 8103d14:	4603      	mov	r3, r0
 8103d16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103d1a:	e00f      	b.n	8103d3c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d20:	3328      	adds	r3, #40	@ 0x28
 8103d22:	2102      	movs	r1, #2
 8103d24:	4618      	mov	r0, r3
 8103d26:	f001 fcb5 	bl	8105694 <RCCEx_PLL3_Config>
 8103d2a:	4603      	mov	r3, r0
 8103d2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103d30:	e004      	b.n	8103d3c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d32:	2301      	movs	r3, #1
 8103d34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103d38:	e000      	b.n	8103d3c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8103d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d40:	2b00      	cmp	r3, #0
 8103d42:	d10d      	bne.n	8103d60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103d44:	4b05      	ldr	r3, [pc, #20]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103d48:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8103d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103d54:	4a01      	ldr	r2, [pc, #4]	@ (8103d5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103d56:	430b      	orrs	r3, r1
 8103d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8103d5a:	e005      	b.n	8103d68 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8103d5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103d64:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d70:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8103d74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8103d76:	2300      	movs	r3, #0
 8103d78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8103d7a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8103d7e:	460b      	mov	r3, r1
 8103d80:	4313      	orrs	r3, r2
 8103d82:	d03b      	beq.n	8103dfc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103d8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103d90:	d01f      	beq.n	8103dd2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8103d92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103d96:	d818      	bhi.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8103d98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103d9c:	d003      	beq.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8103d9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103da2:	d007      	beq.n	8103db4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8103da4:	e011      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103da6:	4b64      	ldr	r3, [pc, #400]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103daa:	4a63      	ldr	r2, [pc, #396]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103db2:	e00f      	b.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103db8:	3328      	adds	r3, #40	@ 0x28
 8103dba:	2101      	movs	r1, #1
 8103dbc:	4618      	mov	r0, r3
 8103dbe:	f001 fc69 	bl	8105694 <RCCEx_PLL3_Config>
 8103dc2:	4603      	mov	r3, r0
 8103dc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8103dc8:	e004      	b.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103dca:	2301      	movs	r3, #1
 8103dcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103dd0:	e000      	b.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8103dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103dd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103dd8:	2b00      	cmp	r3, #0
 8103dda:	d10b      	bne.n	8103df4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103ddc:	4b56      	ldr	r3, [pc, #344]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103de0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103dec:	4a52      	ldr	r2, [pc, #328]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103dee:	430b      	orrs	r3, r1
 8103df0:	6553      	str	r3, [r2, #84]	@ 0x54
 8103df2:	e003      	b.n	8103dfc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103df4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103df8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103dfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e04:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8103e08:	673b      	str	r3, [r7, #112]	@ 0x70
 8103e0a:	2300      	movs	r3, #0
 8103e0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8103e0e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8103e12:	460b      	mov	r3, r1
 8103e14:	4313      	orrs	r3, r2
 8103e16:	d031      	beq.n	8103e7c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8103e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103e1e:	2b00      	cmp	r3, #0
 8103e20:	d003      	beq.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8103e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103e26:	d007      	beq.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8103e28:	e011      	b.n	8103e4e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e2a:	4b43      	ldr	r3, [pc, #268]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e2e:	4a42      	ldr	r2, [pc, #264]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103e36:	e00e      	b.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e3c:	3308      	adds	r3, #8
 8103e3e:	2102      	movs	r1, #2
 8103e40:	4618      	mov	r0, r3
 8103e42:	f001 fb75 	bl	8105530 <RCCEx_PLL2_Config>
 8103e46:	4603      	mov	r3, r0
 8103e48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103e4c:	e003      	b.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8103e4e:	2301      	movs	r3, #1
 8103e50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e5a:	2b00      	cmp	r3, #0
 8103e5c:	d10a      	bne.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103e5e:	4b36      	ldr	r3, [pc, #216]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103e62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103e6c:	4a32      	ldr	r2, [pc, #200]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103e6e:	430b      	orrs	r3, r1
 8103e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103e72:	e003      	b.n	8103e7c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103e78:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103e7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8103e88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8103e8a:	2300      	movs	r3, #0
 8103e8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8103e8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8103e92:	460b      	mov	r3, r1
 8103e94:	4313      	orrs	r3, r2
 8103e96:	d00c      	beq.n	8103eb2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103e9c:	3328      	adds	r3, #40	@ 0x28
 8103e9e:	2102      	movs	r1, #2
 8103ea0:	4618      	mov	r0, r3
 8103ea2:	f001 fbf7 	bl	8105694 <RCCEx_PLL3_Config>
 8103ea6:	4603      	mov	r3, r0
 8103ea8:	2b00      	cmp	r3, #0
 8103eaa:	d002      	beq.n	8103eb2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8103eac:	2301      	movs	r3, #1
 8103eae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103eb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103eba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8103ebe:	663b      	str	r3, [r7, #96]	@ 0x60
 8103ec0:	2300      	movs	r3, #0
 8103ec2:	667b      	str	r3, [r7, #100]	@ 0x64
 8103ec4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8103ec8:	460b      	mov	r3, r1
 8103eca:	4313      	orrs	r3, r2
 8103ecc:	d03a      	beq.n	8103f44 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8103ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103eda:	d018      	beq.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8103edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103ee0:	d811      	bhi.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8103ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103ee6:	d014      	beq.n	8103f12 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8103ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103eec:	d80b      	bhi.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8103eee:	2b00      	cmp	r3, #0
 8103ef0:	d011      	beq.n	8103f16 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8103ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103ef6:	d106      	bne.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103efc:	4a0e      	ldr	r2, [pc, #56]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103f04:	e008      	b.n	8103f18 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f06:	2301      	movs	r3, #1
 8103f08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103f0c:	e004      	b.n	8103f18 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103f0e:	bf00      	nop
 8103f10:	e002      	b.n	8103f18 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103f12:	bf00      	nop
 8103f14:	e000      	b.n	8103f18 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f1c:	2b00      	cmp	r3, #0
 8103f1e:	d10d      	bne.n	8103f3c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103f20:	4b05      	ldr	r3, [pc, #20]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103f30:	4a01      	ldr	r2, [pc, #4]	@ (8103f38 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103f32:	430b      	orrs	r3, r1
 8103f34:	6553      	str	r3, [r2, #84]	@ 0x54
 8103f36:	e005      	b.n	8103f44 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8103f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103f40:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f4c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8103f50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8103f52:	2300      	movs	r3, #0
 8103f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8103f56:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8103f5a:	460b      	mov	r3, r1
 8103f5c:	4313      	orrs	r3, r2
 8103f5e:	d009      	beq.n	8103f74 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103f60:	4baa      	ldr	r3, [pc, #680]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f64:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8103f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8103f6e:	4aa7      	ldr	r2, [pc, #668]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103f70:	430b      	orrs	r3, r1
 8103f72:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f7c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8103f80:	653b      	str	r3, [r7, #80]	@ 0x50
 8103f82:	2300      	movs	r3, #0
 8103f84:	657b      	str	r3, [r7, #84]	@ 0x54
 8103f86:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8103f8a:	460b      	mov	r3, r1
 8103f8c:	4313      	orrs	r3, r2
 8103f8e:	d00a      	beq.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103f90:	4b9e      	ldr	r3, [pc, #632]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103f92:	691b      	ldr	r3, [r3, #16]
 8103f94:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8103f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8103fa0:	4a9a      	ldr	r2, [pc, #616]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103fa2:	430b      	orrs	r3, r1
 8103fa4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8103fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103fb4:	2300      	movs	r3, #0
 8103fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103fb8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8103fbc:	460b      	mov	r3, r1
 8103fbe:	4313      	orrs	r3, r2
 8103fc0:	d009      	beq.n	8103fd6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103fc2:	4b92      	ldr	r3, [pc, #584]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103fc6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8103fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103fd0:	4a8e      	ldr	r2, [pc, #568]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103fd2:	430b      	orrs	r3, r1
 8103fd4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fde:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8103fe2:	643b      	str	r3, [r7, #64]	@ 0x40
 8103fe4:	2300      	movs	r3, #0
 8103fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8103fe8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8103fec:	460b      	mov	r3, r1
 8103fee:	4313      	orrs	r3, r2
 8103ff0:	d00e      	beq.n	8104010 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103ff2:	4b86      	ldr	r3, [pc, #536]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103ff4:	691b      	ldr	r3, [r3, #16]
 8103ff6:	4a85      	ldr	r2, [pc, #532]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103ff8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8103ffc:	6113      	str	r3, [r2, #16]
 8103ffe:	4b83      	ldr	r3, [pc, #524]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104000:	6919      	ldr	r1, [r3, #16]
 8104002:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104006:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810400a:	4a80      	ldr	r2, [pc, #512]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810400c:	430b      	orrs	r3, r1
 810400e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104010:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104018:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810401c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810401e:	2300      	movs	r3, #0
 8104020:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104022:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8104026:	460b      	mov	r3, r1
 8104028:	4313      	orrs	r3, r2
 810402a:	d009      	beq.n	8104040 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810402c:	4b77      	ldr	r3, [pc, #476]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810402e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104030:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8104034:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810403a:	4a74      	ldr	r2, [pc, #464]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810403c:	430b      	orrs	r3, r1
 810403e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104048:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810404c:	633b      	str	r3, [r7, #48]	@ 0x30
 810404e:	2300      	movs	r3, #0
 8104050:	637b      	str	r3, [r7, #52]	@ 0x34
 8104052:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8104056:	460b      	mov	r3, r1
 8104058:	4313      	orrs	r3, r2
 810405a:	d00a      	beq.n	8104072 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810405c:	4b6b      	ldr	r3, [pc, #428]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810405e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104060:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8104064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810406c:	4a67      	ldr	r2, [pc, #412]	@ (810420c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810406e:	430b      	orrs	r3, r1
 8104070:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104072:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104076:	e9d3 2300 	ldrd	r2, r3, [r3]
 810407a:	2100      	movs	r1, #0
 810407c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810407e:	f003 0301 	and.w	r3, r3, #1
 8104082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104084:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8104088:	460b      	mov	r3, r1
 810408a:	4313      	orrs	r3, r2
 810408c:	d011      	beq.n	81040b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810408e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104092:	3308      	adds	r3, #8
 8104094:	2100      	movs	r1, #0
 8104096:	4618      	mov	r0, r3
 8104098:	f001 fa4a 	bl	8105530 <RCCEx_PLL2_Config>
 810409c:	4603      	mov	r3, r0
 810409e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81040a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81040a6:	2b00      	cmp	r3, #0
 81040a8:	d003      	beq.n	81040b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81040ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81040b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040ba:	2100      	movs	r1, #0
 81040bc:	6239      	str	r1, [r7, #32]
 81040be:	f003 0302 	and.w	r3, r3, #2
 81040c2:	627b      	str	r3, [r7, #36]	@ 0x24
 81040c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81040c8:	460b      	mov	r3, r1
 81040ca:	4313      	orrs	r3, r2
 81040cc:	d011      	beq.n	81040f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81040ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040d2:	3308      	adds	r3, #8
 81040d4:	2101      	movs	r1, #1
 81040d6:	4618      	mov	r0, r3
 81040d8:	f001 fa2a 	bl	8105530 <RCCEx_PLL2_Config>
 81040dc:	4603      	mov	r3, r0
 81040de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81040e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81040e6:	2b00      	cmp	r3, #0
 81040e8:	d003      	beq.n	81040f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81040ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81040f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040fa:	2100      	movs	r1, #0
 81040fc:	61b9      	str	r1, [r7, #24]
 81040fe:	f003 0304 	and.w	r3, r3, #4
 8104102:	61fb      	str	r3, [r7, #28]
 8104104:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104108:	460b      	mov	r3, r1
 810410a:	4313      	orrs	r3, r2
 810410c:	d011      	beq.n	8104132 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810410e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104112:	3308      	adds	r3, #8
 8104114:	2102      	movs	r1, #2
 8104116:	4618      	mov	r0, r3
 8104118:	f001 fa0a 	bl	8105530 <RCCEx_PLL2_Config>
 810411c:	4603      	mov	r3, r0
 810411e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8104122:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104126:	2b00      	cmp	r3, #0
 8104128:	d003      	beq.n	8104132 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810412a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810412e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104132:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104136:	e9d3 2300 	ldrd	r2, r3, [r3]
 810413a:	2100      	movs	r1, #0
 810413c:	6139      	str	r1, [r7, #16]
 810413e:	f003 0308 	and.w	r3, r3, #8
 8104142:	617b      	str	r3, [r7, #20]
 8104144:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104148:	460b      	mov	r3, r1
 810414a:	4313      	orrs	r3, r2
 810414c:	d011      	beq.n	8104172 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810414e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104152:	3328      	adds	r3, #40	@ 0x28
 8104154:	2100      	movs	r1, #0
 8104156:	4618      	mov	r0, r3
 8104158:	f001 fa9c 	bl	8105694 <RCCEx_PLL3_Config>
 810415c:	4603      	mov	r3, r0
 810415e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8104162:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104166:	2b00      	cmp	r3, #0
 8104168:	d003      	beq.n	8104172 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810416a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810416e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104172:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104176:	e9d3 2300 	ldrd	r2, r3, [r3]
 810417a:	2100      	movs	r1, #0
 810417c:	60b9      	str	r1, [r7, #8]
 810417e:	f003 0310 	and.w	r3, r3, #16
 8104182:	60fb      	str	r3, [r7, #12]
 8104184:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104188:	460b      	mov	r3, r1
 810418a:	4313      	orrs	r3, r2
 810418c:	d011      	beq.n	81041b2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810418e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104192:	3328      	adds	r3, #40	@ 0x28
 8104194:	2101      	movs	r1, #1
 8104196:	4618      	mov	r0, r3
 8104198:	f001 fa7c 	bl	8105694 <RCCEx_PLL3_Config>
 810419c:	4603      	mov	r3, r0
 810419e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81041a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81041a6:	2b00      	cmp	r3, #0
 81041a8:	d003      	beq.n	81041b2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81041ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81041b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041ba:	2100      	movs	r1, #0
 81041bc:	6039      	str	r1, [r7, #0]
 81041be:	f003 0320 	and.w	r3, r3, #32
 81041c2:	607b      	str	r3, [r7, #4]
 81041c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 81041c8:	460b      	mov	r3, r1
 81041ca:	4313      	orrs	r3, r2
 81041cc:	d011      	beq.n	81041f2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81041ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041d2:	3328      	adds	r3, #40	@ 0x28
 81041d4:	2102      	movs	r1, #2
 81041d6:	4618      	mov	r0, r3
 81041d8:	f001 fa5c 	bl	8105694 <RCCEx_PLL3_Config>
 81041dc:	4603      	mov	r3, r0
 81041de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81041e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81041e6:	2b00      	cmp	r3, #0
 81041e8:	d003      	beq.n	81041f2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81041ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 81041f2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 81041f6:	2b00      	cmp	r3, #0
 81041f8:	d101      	bne.n	81041fe <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 81041fa:	2300      	movs	r3, #0
 81041fc:	e000      	b.n	8104200 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81041fe:	2301      	movs	r3, #1
}
 8104200:	4618      	mov	r0, r3
 8104202:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8104206:	46bd      	mov	sp, r7
 8104208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810420c:	58024400 	.word	0x58024400

08104210 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8104210:	b580      	push	{r7, lr}
 8104212:	b090      	sub	sp, #64	@ 0x40
 8104214:	af00      	add	r7, sp, #0
 8104216:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810421a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810421e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8104222:	430b      	orrs	r3, r1
 8104224:	f040 8094 	bne.w	8104350 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8104228:	4b9e      	ldr	r3, [pc, #632]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810422c:	f003 0307 	and.w	r3, r3, #7
 8104230:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104234:	2b04      	cmp	r3, #4
 8104236:	f200 8087 	bhi.w	8104348 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810423a:	a201      	add	r2, pc, #4	@ (adr r2, 8104240 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 810423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104240:	08104255 	.word	0x08104255
 8104244:	0810427d 	.word	0x0810427d
 8104248:	081042a5 	.word	0x081042a5
 810424c:	08104341 	.word	0x08104341
 8104250:	081042cd 	.word	0x081042cd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104254:	4b93      	ldr	r3, [pc, #588]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104256:	681b      	ldr	r3, [r3, #0]
 8104258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810425c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104260:	d108      	bne.n	8104274 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104266:	4618      	mov	r0, r3
 8104268:	f001 f810 	bl	810528c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810426e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104270:	f000 bd45 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104274:	2300      	movs	r3, #0
 8104276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104278:	f000 bd41 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810427c:	4b89      	ldr	r3, [pc, #548]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104288:	d108      	bne.n	810429c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810428a:	f107 0318 	add.w	r3, r7, #24
 810428e:	4618      	mov	r0, r3
 8104290:	f000 fd54 	bl	8104d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104294:	69bb      	ldr	r3, [r7, #24]
 8104296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104298:	f000 bd31 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810429c:	2300      	movs	r3, #0
 810429e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81042a0:	f000 bd2d 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81042a4:	4b7f      	ldr	r3, [pc, #508]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81042a6:	681b      	ldr	r3, [r3, #0]
 81042a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81042ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81042b0:	d108      	bne.n	81042c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81042b2:	f107 030c 	add.w	r3, r7, #12
 81042b6:	4618      	mov	r0, r3
 81042b8:	f000 fe94 	bl	8104fe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81042bc:	68fb      	ldr	r3, [r7, #12]
 81042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81042c0:	f000 bd1d 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81042c4:	2300      	movs	r3, #0
 81042c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81042c8:	f000 bd19 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81042cc:	4b75      	ldr	r3, [pc, #468]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81042ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81042d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81042d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81042d6:	4b73      	ldr	r3, [pc, #460]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	f003 0304 	and.w	r3, r3, #4
 81042de:	2b04      	cmp	r3, #4
 81042e0:	d10c      	bne.n	81042fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81042e4:	2b00      	cmp	r3, #0
 81042e6:	d109      	bne.n	81042fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81042e8:	4b6e      	ldr	r3, [pc, #440]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81042ea:	681b      	ldr	r3, [r3, #0]
 81042ec:	08db      	lsrs	r3, r3, #3
 81042ee:	f003 0303 	and.w	r3, r3, #3
 81042f2:	4a6d      	ldr	r2, [pc, #436]	@ (81044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81042f4:	fa22 f303 	lsr.w	r3, r2, r3
 81042f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81042fa:	e01f      	b.n	810433c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81042fc:	4b69      	ldr	r3, [pc, #420]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81042fe:	681b      	ldr	r3, [r3, #0]
 8104300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104308:	d106      	bne.n	8104318 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810430a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810430c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104310:	d102      	bne.n	8104318 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104312:	4b66      	ldr	r3, [pc, #408]	@ (81044ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104316:	e011      	b.n	810433c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104318:	4b62      	ldr	r3, [pc, #392]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104324:	d106      	bne.n	8104334 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8104326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810432c:	d102      	bne.n	8104334 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810432e:	4b60      	ldr	r3, [pc, #384]	@ (81044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104332:	e003      	b.n	810433c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104334:	2300      	movs	r3, #0
 8104336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104338:	f000 bce1 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810433c:	f000 bcdf 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104340:	4b5c      	ldr	r3, [pc, #368]	@ (81044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104344:	f000 bcdb 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104348:	2300      	movs	r3, #0
 810434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810434c:	f000 bcd7 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104354:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8104358:	430b      	orrs	r3, r1
 810435a:	f040 80ad 	bne.w	81044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810435e:	4b51      	ldr	r3, [pc, #324]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104362:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8104366:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810436a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810436e:	d056      	beq.n	810441e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8104370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104376:	f200 8090 	bhi.w	810449a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810437c:	2bc0      	cmp	r3, #192	@ 0xc0
 810437e:	f000 8088 	beq.w	8104492 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8104382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104384:	2bc0      	cmp	r3, #192	@ 0xc0
 8104386:	f200 8088 	bhi.w	810449a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810438c:	2b80      	cmp	r3, #128	@ 0x80
 810438e:	d032      	beq.n	81043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8104390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104392:	2b80      	cmp	r3, #128	@ 0x80
 8104394:	f200 8081 	bhi.w	810449a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810439a:	2b00      	cmp	r3, #0
 810439c:	d003      	beq.n	81043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81043a0:	2b40      	cmp	r3, #64	@ 0x40
 81043a2:	d014      	beq.n	81043ce <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81043a4:	e079      	b.n	810449a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81043a6:	4b3f      	ldr	r3, [pc, #252]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81043a8:	681b      	ldr	r3, [r3, #0]
 81043aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81043ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81043b2:	d108      	bne.n	81043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81043b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81043b8:	4618      	mov	r0, r3
 81043ba:	f000 ff67 	bl	810528c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81043c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81043c2:	f000 bc9c 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81043c6:	2300      	movs	r3, #0
 81043c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81043ca:	f000 bc98 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81043ce:	4b35      	ldr	r3, [pc, #212]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81043d0:	681b      	ldr	r3, [r3, #0]
 81043d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81043d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81043da:	d108      	bne.n	81043ee <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81043dc:	f107 0318 	add.w	r3, r7, #24
 81043e0:	4618      	mov	r0, r3
 81043e2:	f000 fcab 	bl	8104d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81043e6:	69bb      	ldr	r3, [r7, #24]
 81043e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81043ea:	f000 bc88 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81043ee:	2300      	movs	r3, #0
 81043f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81043f2:	f000 bc84 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81043f6:	4b2b      	ldr	r3, [pc, #172]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81043f8:	681b      	ldr	r3, [r3, #0]
 81043fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81043fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104402:	d108      	bne.n	8104416 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104404:	f107 030c 	add.w	r3, r7, #12
 8104408:	4618      	mov	r0, r3
 810440a:	f000 fdeb 	bl	8104fe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810440e:	68fb      	ldr	r3, [r7, #12]
 8104410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104412:	f000 bc74 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104416:	2300      	movs	r3, #0
 8104418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810441a:	f000 bc70 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810441e:	4b21      	ldr	r3, [pc, #132]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104422:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104426:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104428:	4b1e      	ldr	r3, [pc, #120]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	f003 0304 	and.w	r3, r3, #4
 8104430:	2b04      	cmp	r3, #4
 8104432:	d10c      	bne.n	810444e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8104434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104436:	2b00      	cmp	r3, #0
 8104438:	d109      	bne.n	810444e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810443a:	4b1a      	ldr	r3, [pc, #104]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	08db      	lsrs	r3, r3, #3
 8104440:	f003 0303 	and.w	r3, r3, #3
 8104444:	4a18      	ldr	r2, [pc, #96]	@ (81044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104446:	fa22 f303 	lsr.w	r3, r2, r3
 810444a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810444c:	e01f      	b.n	810448e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810444e:	4b15      	ldr	r3, [pc, #84]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104450:	681b      	ldr	r3, [r3, #0]
 8104452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810445a:	d106      	bne.n	810446a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 810445c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810445e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104462:	d102      	bne.n	810446a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104464:	4b11      	ldr	r3, [pc, #68]	@ (81044ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104468:	e011      	b.n	810448e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810446a:	4b0e      	ldr	r3, [pc, #56]	@ (81044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810446c:	681b      	ldr	r3, [r3, #0]
 810446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104476:	d106      	bne.n	8104486 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8104478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810447a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810447e:	d102      	bne.n	8104486 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104480:	4b0b      	ldr	r3, [pc, #44]	@ (81044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104484:	e003      	b.n	810448e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104486:	2300      	movs	r3, #0
 8104488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810448a:	f000 bc38 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810448e:	f000 bc36 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104492:	4b08      	ldr	r3, [pc, #32]	@ (81044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104496:	f000 bc32 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810449a:	2300      	movs	r3, #0
 810449c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810449e:	f000 bc2e 	b.w	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81044a2:	bf00      	nop
 81044a4:	58024400 	.word	0x58024400
 81044a8:	03d09000 	.word	0x03d09000
 81044ac:	003d0900 	.word	0x003d0900
 81044b0:	017d7840 	.word	0x017d7840
 81044b4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81044b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81044bc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 81044c0:	430b      	orrs	r3, r1
 81044c2:	f040 809c 	bne.w	81045fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81044c6:	4b9e      	ldr	r3, [pc, #632]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81044ca:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 81044ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81044d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81044d6:	d054      	beq.n	8104582 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 81044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81044da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81044de:	f200 808b 	bhi.w	81045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81044e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81044e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81044e8:	f000 8083 	beq.w	81045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 81044ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81044ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81044f2:	f200 8081 	bhi.w	81045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81044f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81044fc:	d02f      	beq.n	810455e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104500:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104504:	d878      	bhi.n	81045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104508:	2b00      	cmp	r3, #0
 810450a:	d004      	beq.n	8104516 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 810450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810450e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104512:	d012      	beq.n	810453a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8104514:	e070      	b.n	81045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104516:	4b8a      	ldr	r3, [pc, #552]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810451e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104522:	d107      	bne.n	8104534 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104528:	4618      	mov	r0, r3
 810452a:	f000 feaf 	bl	810528c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104532:	e3e4      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104534:	2300      	movs	r3, #0
 8104536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104538:	e3e1      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810453a:	4b81      	ldr	r3, [pc, #516]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104546:	d107      	bne.n	8104558 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104548:	f107 0318 	add.w	r3, r7, #24
 810454c:	4618      	mov	r0, r3
 810454e:	f000 fbf5 	bl	8104d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104552:	69bb      	ldr	r3, [r7, #24]
 8104554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104556:	e3d2      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104558:	2300      	movs	r3, #0
 810455a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810455c:	e3cf      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810455e:	4b78      	ldr	r3, [pc, #480]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810456a:	d107      	bne.n	810457c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810456c:	f107 030c 	add.w	r3, r7, #12
 8104570:	4618      	mov	r0, r3
 8104572:	f000 fd37 	bl	8104fe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104576:	68fb      	ldr	r3, [r7, #12]
 8104578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810457a:	e3c0      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810457c:	2300      	movs	r3, #0
 810457e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104580:	e3bd      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104582:	4b6f      	ldr	r3, [pc, #444]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104586:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810458a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810458c:	4b6c      	ldr	r3, [pc, #432]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	f003 0304 	and.w	r3, r3, #4
 8104594:	2b04      	cmp	r3, #4
 8104596:	d10c      	bne.n	81045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8104598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810459a:	2b00      	cmp	r3, #0
 810459c:	d109      	bne.n	81045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810459e:	4b68      	ldr	r3, [pc, #416]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81045a0:	681b      	ldr	r3, [r3, #0]
 81045a2:	08db      	lsrs	r3, r3, #3
 81045a4:	f003 0303 	and.w	r3, r3, #3
 81045a8:	4a66      	ldr	r2, [pc, #408]	@ (8104744 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81045aa:	fa22 f303 	lsr.w	r3, r2, r3
 81045ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81045b0:	e01e      	b.n	81045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81045b2:	4b63      	ldr	r3, [pc, #396]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81045b4:	681b      	ldr	r3, [r3, #0]
 81045b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81045ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81045be:	d106      	bne.n	81045ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81045c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81045c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81045c6:	d102      	bne.n	81045ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81045c8:	4b5f      	ldr	r3, [pc, #380]	@ (8104748 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81045ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81045cc:	e010      	b.n	81045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81045ce:	4b5c      	ldr	r3, [pc, #368]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81045d0:	681b      	ldr	r3, [r3, #0]
 81045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81045d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81045da:	d106      	bne.n	81045ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 81045dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81045de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81045e2:	d102      	bne.n	81045ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81045e4:	4b59      	ldr	r3, [pc, #356]	@ (810474c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81045e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81045e8:	e002      	b.n	81045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81045ea:	2300      	movs	r3, #0
 81045ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81045ee:	e386      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81045f0:	e385      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81045f2:	4b57      	ldr	r3, [pc, #348]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81045f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045f6:	e382      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81045f8:	2300      	movs	r3, #0
 81045fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045fc:	e37f      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81045fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104602:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8104606:	430b      	orrs	r3, r1
 8104608:	f040 80a7 	bne.w	810475a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810460c:	4b4c      	ldr	r3, [pc, #304]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104610:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8104614:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104618:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810461c:	d055      	beq.n	81046ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104620:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104624:	f200 8096 	bhi.w	8104754 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810462a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810462e:	f000 8084 	beq.w	810473a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8104632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104634:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104638:	f200 808c 	bhi.w	8104754 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810463e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104642:	d030      	beq.n	81046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8104644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810464a:	f200 8083 	bhi.w	8104754 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104650:	2b00      	cmp	r3, #0
 8104652:	d004      	beq.n	810465e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8104654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104656:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810465a:	d012      	beq.n	8104682 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 810465c:	e07a      	b.n	8104754 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810465e:	4b38      	ldr	r3, [pc, #224]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104660:	681b      	ldr	r3, [r3, #0]
 8104662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810466a:	d107      	bne.n	810467c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810466c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104670:	4618      	mov	r0, r3
 8104672:	f000 fe0b 	bl	810528c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810467a:	e340      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810467c:	2300      	movs	r3, #0
 810467e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104680:	e33d      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104682:	4b2f      	ldr	r3, [pc, #188]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104684:	681b      	ldr	r3, [r3, #0]
 8104686:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810468a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810468e:	d107      	bne.n	81046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104690:	f107 0318 	add.w	r3, r7, #24
 8104694:	4618      	mov	r0, r3
 8104696:	f000 fb51 	bl	8104d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810469a:	69bb      	ldr	r3, [r7, #24]
 810469c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810469e:	e32e      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046a0:	2300      	movs	r3, #0
 81046a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81046a4:	e32b      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81046a6:	4b26      	ldr	r3, [pc, #152]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81046ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81046b2:	d107      	bne.n	81046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81046b4:	f107 030c 	add.w	r3, r7, #12
 81046b8:	4618      	mov	r0, r3
 81046ba:	f000 fc93 	bl	8104fe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81046be:	68fb      	ldr	r3, [r7, #12]
 81046c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046c2:	e31c      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046c4:	2300      	movs	r3, #0
 81046c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81046c8:	e319      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81046ca:	4b1d      	ldr	r3, [pc, #116]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81046cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81046ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81046d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81046d4:	4b1a      	ldr	r3, [pc, #104]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	f003 0304 	and.w	r3, r3, #4
 81046dc:	2b04      	cmp	r3, #4
 81046de:	d10c      	bne.n	81046fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 81046e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81046e2:	2b00      	cmp	r3, #0
 81046e4:	d109      	bne.n	81046fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81046e6:	4b16      	ldr	r3, [pc, #88]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81046e8:	681b      	ldr	r3, [r3, #0]
 81046ea:	08db      	lsrs	r3, r3, #3
 81046ec:	f003 0303 	and.w	r3, r3, #3
 81046f0:	4a14      	ldr	r2, [pc, #80]	@ (8104744 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81046f2:	fa22 f303 	lsr.w	r3, r2, r3
 81046f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81046f8:	e01e      	b.n	8104738 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81046fa:	4b11      	ldr	r3, [pc, #68]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104706:	d106      	bne.n	8104716 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8104708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810470a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810470e:	d102      	bne.n	8104716 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104710:	4b0d      	ldr	r3, [pc, #52]	@ (8104748 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104714:	e010      	b.n	8104738 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104716:	4b0a      	ldr	r3, [pc, #40]	@ (8104740 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104718:	681b      	ldr	r3, [r3, #0]
 810471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810471e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104722:	d106      	bne.n	8104732 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8104724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810472a:	d102      	bne.n	8104732 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810472c:	4b07      	ldr	r3, [pc, #28]	@ (810474c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104730:	e002      	b.n	8104738 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104732:	2300      	movs	r3, #0
 8104734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104736:	e2e2      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104738:	e2e1      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810473a:	4b05      	ldr	r3, [pc, #20]	@ (8104750 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810473c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810473e:	e2de      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104740:	58024400 	.word	0x58024400
 8104744:	03d09000 	.word	0x03d09000
 8104748:	003d0900 	.word	0x003d0900
 810474c:	017d7840 	.word	0x017d7840
 8104750:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8104754:	2300      	movs	r3, #0
 8104756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104758:	e2d1      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810475a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810475e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8104762:	430b      	orrs	r3, r1
 8104764:	f040 809c 	bne.w	81048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8104768:	4b93      	ldr	r3, [pc, #588]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810476a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810476c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8104770:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104778:	d054      	beq.n	8104824 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810477a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810477c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104780:	f200 808b 	bhi.w	810489a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104786:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810478a:	f000 8083 	beq.w	8104894 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104790:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104794:	f200 8081 	bhi.w	810489a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810479a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810479e:	d02f      	beq.n	8104800 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81047a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81047a6:	d878      	bhi.n	810489a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81047aa:	2b00      	cmp	r3, #0
 81047ac:	d004      	beq.n	81047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81047ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81047b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81047b4:	d012      	beq.n	81047dc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81047b6:	e070      	b.n	810489a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81047b8:	4b7f      	ldr	r3, [pc, #508]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81047ba:	681b      	ldr	r3, [r3, #0]
 81047bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81047c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81047c4:	d107      	bne.n	81047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81047c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81047ca:	4618      	mov	r0, r3
 81047cc:	f000 fd5e 	bl	810528c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81047d4:	e293      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81047d6:	2300      	movs	r3, #0
 81047d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81047da:	e290      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81047dc:	4b76      	ldr	r3, [pc, #472]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81047e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81047e8:	d107      	bne.n	81047fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81047ea:	f107 0318 	add.w	r3, r7, #24
 81047ee:	4618      	mov	r0, r3
 81047f0:	f000 faa4 	bl	8104d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81047f4:	69bb      	ldr	r3, [r7, #24]
 81047f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81047f8:	e281      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81047fa:	2300      	movs	r3, #0
 81047fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81047fe:	e27e      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104800:	4b6d      	ldr	r3, [pc, #436]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104802:	681b      	ldr	r3, [r3, #0]
 8104804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810480c:	d107      	bne.n	810481e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810480e:	f107 030c 	add.w	r3, r7, #12
 8104812:	4618      	mov	r0, r3
 8104814:	f000 fbe6 	bl	8104fe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104818:	68fb      	ldr	r3, [r7, #12]
 810481a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810481c:	e26f      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810481e:	2300      	movs	r3, #0
 8104820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104822:	e26c      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104824:	4b64      	ldr	r3, [pc, #400]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104828:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810482c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810482e:	4b62      	ldr	r3, [pc, #392]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	f003 0304 	and.w	r3, r3, #4
 8104836:	2b04      	cmp	r3, #4
 8104838:	d10c      	bne.n	8104854 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810483a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810483c:	2b00      	cmp	r3, #0
 810483e:	d109      	bne.n	8104854 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104840:	4b5d      	ldr	r3, [pc, #372]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104842:	681b      	ldr	r3, [r3, #0]
 8104844:	08db      	lsrs	r3, r3, #3
 8104846:	f003 0303 	and.w	r3, r3, #3
 810484a:	4a5c      	ldr	r2, [pc, #368]	@ (81049bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810484c:	fa22 f303 	lsr.w	r3, r2, r3
 8104850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104852:	e01e      	b.n	8104892 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104854:	4b58      	ldr	r3, [pc, #352]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104856:	681b      	ldr	r3, [r3, #0]
 8104858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810485c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104860:	d106      	bne.n	8104870 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8104862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104868:	d102      	bne.n	8104870 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810486a:	4b55      	ldr	r3, [pc, #340]	@ (81049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810486c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810486e:	e010      	b.n	8104892 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104870:	4b51      	ldr	r3, [pc, #324]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104872:	681b      	ldr	r3, [r3, #0]
 8104874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810487c:	d106      	bne.n	810488c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810487e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104884:	d102      	bne.n	810488c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104886:	4b4f      	ldr	r3, [pc, #316]	@ (81049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810488a:	e002      	b.n	8104892 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810488c:	2300      	movs	r3, #0
 810488e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104890:	e235      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104892:	e234      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104894:	4b4c      	ldr	r3, [pc, #304]	@ (81049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8104896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104898:	e231      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810489a:	2300      	movs	r3, #0
 810489c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810489e:	e22e      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81048a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81048a4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 81048a8:	430b      	orrs	r3, r1
 81048aa:	f040 808f 	bne.w	81049cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81048ae:	4b42      	ldr	r3, [pc, #264]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81048b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81048b2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81048b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 81048b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81048be:	d06b      	beq.n	8104998 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81048c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81048c6:	d874      	bhi.n	81049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81048c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81048ce:	d056      	beq.n	810497e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 81048d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81048d6:	d86c      	bhi.n	81049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81048d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81048de:	d03b      	beq.n	8104958 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 81048e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81048e6:	d864      	bhi.n	81049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81048e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81048ee:	d021      	beq.n	8104934 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 81048f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81048f6:	d85c      	bhi.n	81049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81048f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81048fa:	2b00      	cmp	r3, #0
 81048fc:	d004      	beq.n	8104908 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 81048fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104904:	d004      	beq.n	8104910 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8104906:	e054      	b.n	81049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8104908:	f7fe f9e0 	bl	8102ccc <HAL_RCC_GetPCLK1Freq>
 810490c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810490e:	e1f6      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104910:	4b29      	ldr	r3, [pc, #164]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810491c:	d107      	bne.n	810492e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810491e:	f107 0318 	add.w	r3, r7, #24
 8104922:	4618      	mov	r0, r3
 8104924:	f000 fa0a 	bl	8104d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104928:	69fb      	ldr	r3, [r7, #28]
 810492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810492c:	e1e7      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810492e:	2300      	movs	r3, #0
 8104930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104932:	e1e4      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104934:	4b20      	ldr	r3, [pc, #128]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810493c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104940:	d107      	bne.n	8104952 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104942:	f107 030c 	add.w	r3, r7, #12
 8104946:	4618      	mov	r0, r3
 8104948:	f000 fb4c 	bl	8104fe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810494c:	693b      	ldr	r3, [r7, #16]
 810494e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104950:	e1d5      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104952:	2300      	movs	r3, #0
 8104954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104956:	e1d2      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104958:	4b17      	ldr	r3, [pc, #92]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	f003 0304 	and.w	r3, r3, #4
 8104960:	2b04      	cmp	r3, #4
 8104962:	d109      	bne.n	8104978 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104964:	4b14      	ldr	r3, [pc, #80]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104966:	681b      	ldr	r3, [r3, #0]
 8104968:	08db      	lsrs	r3, r3, #3
 810496a:	f003 0303 	and.w	r3, r3, #3
 810496e:	4a13      	ldr	r2, [pc, #76]	@ (81049bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104970:	fa22 f303 	lsr.w	r3, r2, r3
 8104974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104976:	e1c2      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104978:	2300      	movs	r3, #0
 810497a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810497c:	e1bf      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810497e:	4b0e      	ldr	r3, [pc, #56]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104980:	681b      	ldr	r3, [r3, #0]
 8104982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810498a:	d102      	bne.n	8104992 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 810498c:	4b0c      	ldr	r3, [pc, #48]	@ (81049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810498e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104990:	e1b5      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104992:	2300      	movs	r3, #0
 8104994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104996:	e1b2      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104998:	4b07      	ldr	r3, [pc, #28]	@ (81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810499a:	681b      	ldr	r3, [r3, #0]
 810499c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81049a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81049a4:	d102      	bne.n	81049ac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81049a6:	4b07      	ldr	r3, [pc, #28]	@ (81049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81049a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049aa:	e1a8      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049ac:	2300      	movs	r3, #0
 81049ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81049b0:	e1a5      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81049b2:	2300      	movs	r3, #0
 81049b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81049b6:	e1a2      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81049b8:	58024400 	.word	0x58024400
 81049bc:	03d09000 	.word	0x03d09000
 81049c0:	003d0900 	.word	0x003d0900
 81049c4:	017d7840 	.word	0x017d7840
 81049c8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81049cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81049d0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 81049d4:	430b      	orrs	r3, r1
 81049d6:	d173      	bne.n	8104ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 81049d8:	4b9c      	ldr	r3, [pc, #624]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81049da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81049dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81049e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81049e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81049e8:	d02f      	beq.n	8104a4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81049ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81049f0:	d863      	bhi.n	8104aba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 81049f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049f4:	2b00      	cmp	r3, #0
 81049f6:	d004      	beq.n	8104a02 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81049fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81049fe:	d012      	beq.n	8104a26 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8104a00:	e05b      	b.n	8104aba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104a02:	4b92      	ldr	r3, [pc, #584]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a04:	681b      	ldr	r3, [r3, #0]
 8104a06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104a0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104a0e:	d107      	bne.n	8104a20 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104a10:	f107 0318 	add.w	r3, r7, #24
 8104a14:	4618      	mov	r0, r3
 8104a16:	f000 f991 	bl	8104d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104a1a:	69bb      	ldr	r3, [r7, #24]
 8104a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a1e:	e16e      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a20:	2300      	movs	r3, #0
 8104a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a24:	e16b      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104a26:	4b89      	ldr	r3, [pc, #548]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a28:	681b      	ldr	r3, [r3, #0]
 8104a2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104a32:	d107      	bne.n	8104a44 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104a34:	f107 030c 	add.w	r3, r7, #12
 8104a38:	4618      	mov	r0, r3
 8104a3a:	f000 fad3 	bl	8104fe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8104a3e:	697b      	ldr	r3, [r7, #20]
 8104a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a42:	e15c      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a44:	2300      	movs	r3, #0
 8104a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104a48:	e159      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104a4a:	4b80      	ldr	r3, [pc, #512]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104a4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104a52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104a54:	4b7d      	ldr	r3, [pc, #500]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a56:	681b      	ldr	r3, [r3, #0]
 8104a58:	f003 0304 	and.w	r3, r3, #4
 8104a5c:	2b04      	cmp	r3, #4
 8104a5e:	d10c      	bne.n	8104a7a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8104a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104a62:	2b00      	cmp	r3, #0
 8104a64:	d109      	bne.n	8104a7a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a66:	4b79      	ldr	r3, [pc, #484]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	08db      	lsrs	r3, r3, #3
 8104a6c:	f003 0303 	and.w	r3, r3, #3
 8104a70:	4a77      	ldr	r2, [pc, #476]	@ (8104c50 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104a72:	fa22 f303 	lsr.w	r3, r2, r3
 8104a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a78:	e01e      	b.n	8104ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104a7a:	4b74      	ldr	r3, [pc, #464]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a86:	d106      	bne.n	8104a96 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8104a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104a8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104a8e:	d102      	bne.n	8104a96 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104a90:	4b70      	ldr	r3, [pc, #448]	@ (8104c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a94:	e010      	b.n	8104ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104a96:	4b6d      	ldr	r3, [pc, #436]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104aa2:	d106      	bne.n	8104ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8104aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104aaa:	d102      	bne.n	8104ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104aac:	4b6a      	ldr	r3, [pc, #424]	@ (8104c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104ab0:	e002      	b.n	8104ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104ab2:	2300      	movs	r3, #0
 8104ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104ab6:	e122      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104ab8:	e121      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104aba:	2300      	movs	r3, #0
 8104abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104abe:	e11e      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8104ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104ac4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8104ac8:	430b      	orrs	r3, r1
 8104aca:	d133      	bne.n	8104b34 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8104acc:	4b5f      	ldr	r3, [pc, #380]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104ad4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ad8:	2b00      	cmp	r3, #0
 8104ada:	d004      	beq.n	8104ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8104adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104ae2:	d012      	beq.n	8104b0a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8104ae4:	e023      	b.n	8104b2e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104ae6:	4b59      	ldr	r3, [pc, #356]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104aee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104af2:	d107      	bne.n	8104b04 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104af8:	4618      	mov	r0, r3
 8104afa:	f000 fbc7 	bl	810528c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b02:	e0fc      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b04:	2300      	movs	r3, #0
 8104b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b08:	e0f9      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104b0a:	4b50      	ldr	r3, [pc, #320]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104b0c:	681b      	ldr	r3, [r3, #0]
 8104b0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104b16:	d107      	bne.n	8104b28 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104b18:	f107 0318 	add.w	r3, r7, #24
 8104b1c:	4618      	mov	r0, r3
 8104b1e:	f000 f90d 	bl	8104d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8104b22:	6a3b      	ldr	r3, [r7, #32]
 8104b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b26:	e0ea      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b28:	2300      	movs	r3, #0
 8104b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b2c:	e0e7      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104b2e:	2300      	movs	r3, #0
 8104b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104b32:	e0e4      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8104b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104b38:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8104b3c:	430b      	orrs	r3, r1
 8104b3e:	f040 808d 	bne.w	8104c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8104b42:	4b42      	ldr	r3, [pc, #264]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104b46:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8104b4a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104b52:	d06b      	beq.n	8104c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8104b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104b5a:	d874      	bhi.n	8104c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104b62:	d056      	beq.n	8104c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8104b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104b6a:	d86c      	bhi.n	8104c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104b72:	d03b      	beq.n	8104bec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8104b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104b7a:	d864      	bhi.n	8104c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104b82:	d021      	beq.n	8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8104b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104b8a:	d85c      	bhi.n	8104c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b8e:	2b00      	cmp	r3, #0
 8104b90:	d004      	beq.n	8104b9c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8104b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104b98:	d004      	beq.n	8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8104b9a:	e054      	b.n	8104c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8104b9c:	f000 f8b8 	bl	8104d10 <HAL_RCCEx_GetD3PCLK1Freq>
 8104ba0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104ba2:	e0ac      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104ba4:	4b29      	ldr	r3, [pc, #164]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ba6:	681b      	ldr	r3, [r3, #0]
 8104ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104bb0:	d107      	bne.n	8104bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104bb2:	f107 0318 	add.w	r3, r7, #24
 8104bb6:	4618      	mov	r0, r3
 8104bb8:	f000 f8c0 	bl	8104d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104bbc:	69fb      	ldr	r3, [r7, #28]
 8104bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104bc0:	e09d      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104bc2:	2300      	movs	r3, #0
 8104bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104bc6:	e09a      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104bc8:	4b20      	ldr	r3, [pc, #128]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104bca:	681b      	ldr	r3, [r3, #0]
 8104bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104bd4:	d107      	bne.n	8104be6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104bd6:	f107 030c 	add.w	r3, r7, #12
 8104bda:	4618      	mov	r0, r3
 8104bdc:	f000 fa02 	bl	8104fe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104be0:	693b      	ldr	r3, [r7, #16]
 8104be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104be4:	e08b      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104be6:	2300      	movs	r3, #0
 8104be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104bea:	e088      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104bec:	4b17      	ldr	r3, [pc, #92]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104bee:	681b      	ldr	r3, [r3, #0]
 8104bf0:	f003 0304 	and.w	r3, r3, #4
 8104bf4:	2b04      	cmp	r3, #4
 8104bf6:	d109      	bne.n	8104c0c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104bf8:	4b14      	ldr	r3, [pc, #80]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	08db      	lsrs	r3, r3, #3
 8104bfe:	f003 0303 	and.w	r3, r3, #3
 8104c02:	4a13      	ldr	r2, [pc, #76]	@ (8104c50 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104c04:	fa22 f303 	lsr.w	r3, r2, r3
 8104c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c0a:	e078      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c0c:	2300      	movs	r3, #0
 8104c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c10:	e075      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8104c12:	4b0e      	ldr	r3, [pc, #56]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104c1e:	d102      	bne.n	8104c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8104c20:	4b0c      	ldr	r3, [pc, #48]	@ (8104c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c24:	e06b      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c26:	2300      	movs	r3, #0
 8104c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c2a:	e068      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104c2c:	4b07      	ldr	r3, [pc, #28]	@ (8104c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104c38:	d102      	bne.n	8104c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8104c3a:	4b07      	ldr	r3, [pc, #28]	@ (8104c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c3e:	e05e      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c40:	2300      	movs	r3, #0
 8104c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c44:	e05b      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8104c46:	2300      	movs	r3, #0
 8104c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c4a:	e058      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104c4c:	58024400 	.word	0x58024400
 8104c50:	03d09000 	.word	0x03d09000
 8104c54:	003d0900 	.word	0x003d0900
 8104c58:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8104c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104c60:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8104c64:	430b      	orrs	r3, r1
 8104c66:	d148      	bne.n	8104cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8104c68:	4b27      	ldr	r3, [pc, #156]	@ (8104d08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104c6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104c70:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8104c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104c78:	d02a      	beq.n	8104cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8104c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104c80:	d838      	bhi.n	8104cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8104c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104c84:	2b00      	cmp	r3, #0
 8104c86:	d004      	beq.n	8104c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8104c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104c8e:	d00d      	beq.n	8104cac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8104c90:	e030      	b.n	8104cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104c92:	4b1d      	ldr	r3, [pc, #116]	@ (8104d08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104c9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104c9e:	d102      	bne.n	8104ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8104ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8104d0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8104ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ca4:	e02b      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ca6:	2300      	movs	r3, #0
 8104ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104caa:	e028      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104cac:	4b16      	ldr	r3, [pc, #88]	@ (8104d08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104cae:	681b      	ldr	r3, [r3, #0]
 8104cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104cb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104cb8:	d107      	bne.n	8104cca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104cbe:	4618      	mov	r0, r3
 8104cc0:	f000 fae4 	bl	810528c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104cc8:	e019      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104cca:	2300      	movs	r3, #0
 8104ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104cce:	e016      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8104d08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8104cd2:	681b      	ldr	r3, [r3, #0]
 8104cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104cd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104cdc:	d107      	bne.n	8104cee <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104cde:	f107 0318 	add.w	r3, r7, #24
 8104ce2:	4618      	mov	r0, r3
 8104ce4:	f000 f82a 	bl	8104d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104ce8:	69fb      	ldr	r3, [r7, #28]
 8104cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104cec:	e007      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104cee:	2300      	movs	r3, #0
 8104cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104cf2:	e004      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104cf4:	2300      	movs	r3, #0
 8104cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104cf8:	e001      	b.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8104cfa:	2300      	movs	r3, #0
 8104cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8104cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8104d00:	4618      	mov	r0, r3
 8104d02:	3740      	adds	r7, #64	@ 0x40
 8104d04:	46bd      	mov	sp, r7
 8104d06:	bd80      	pop	{r7, pc}
 8104d08:	58024400 	.word	0x58024400
 8104d0c:	017d7840 	.word	0x017d7840

08104d10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104d10:	b580      	push	{r7, lr}
 8104d12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104d14:	f7fd ffa8 	bl	8102c68 <HAL_RCC_GetHCLKFreq>
 8104d18:	4602      	mov	r2, r0
 8104d1a:	4b06      	ldr	r3, [pc, #24]	@ (8104d34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104d1c:	6a1b      	ldr	r3, [r3, #32]
 8104d1e:	091b      	lsrs	r3, r3, #4
 8104d20:	f003 0307 	and.w	r3, r3, #7
 8104d24:	4904      	ldr	r1, [pc, #16]	@ (8104d38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104d26:	5ccb      	ldrb	r3, [r1, r3]
 8104d28:	f003 031f 	and.w	r3, r3, #31
 8104d2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104d30:	4618      	mov	r0, r3
 8104d32:	bd80      	pop	{r7, pc}
 8104d34:	58024400 	.word	0x58024400
 8104d38:	08108bc8 	.word	0x08108bc8

08104d3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8104d3c:	b480      	push	{r7}
 8104d3e:	b089      	sub	sp, #36	@ 0x24
 8104d40:	af00      	add	r7, sp, #0
 8104d42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104d44:	4ba1      	ldr	r3, [pc, #644]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104d48:	f003 0303 	and.w	r3, r3, #3
 8104d4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8104d4e:	4b9f      	ldr	r3, [pc, #636]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104d52:	0b1b      	lsrs	r3, r3, #12
 8104d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104d58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d5e:	091b      	lsrs	r3, r3, #4
 8104d60:	f003 0301 	and.w	r3, r3, #1
 8104d64:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8104d66:	4b99      	ldr	r3, [pc, #612]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104d6a:	08db      	lsrs	r3, r3, #3
 8104d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104d70:	693a      	ldr	r2, [r7, #16]
 8104d72:	fb02 f303 	mul.w	r3, r2, r3
 8104d76:	ee07 3a90 	vmov	s15, r3
 8104d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104d82:	697b      	ldr	r3, [r7, #20]
 8104d84:	2b00      	cmp	r3, #0
 8104d86:	f000 8111 	beq.w	8104fac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104d8a:	69bb      	ldr	r3, [r7, #24]
 8104d8c:	2b02      	cmp	r3, #2
 8104d8e:	f000 8083 	beq.w	8104e98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104d92:	69bb      	ldr	r3, [r7, #24]
 8104d94:	2b02      	cmp	r3, #2
 8104d96:	f200 80a1 	bhi.w	8104edc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104d9a:	69bb      	ldr	r3, [r7, #24]
 8104d9c:	2b00      	cmp	r3, #0
 8104d9e:	d003      	beq.n	8104da8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104da0:	69bb      	ldr	r3, [r7, #24]
 8104da2:	2b01      	cmp	r3, #1
 8104da4:	d056      	beq.n	8104e54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104da6:	e099      	b.n	8104edc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104da8:	4b88      	ldr	r3, [pc, #544]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	f003 0320 	and.w	r3, r3, #32
 8104db0:	2b00      	cmp	r3, #0
 8104db2:	d02d      	beq.n	8104e10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104db4:	4b85      	ldr	r3, [pc, #532]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104db6:	681b      	ldr	r3, [r3, #0]
 8104db8:	08db      	lsrs	r3, r3, #3
 8104dba:	f003 0303 	and.w	r3, r3, #3
 8104dbe:	4a84      	ldr	r2, [pc, #528]	@ (8104fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8104dc4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104dc6:	68bb      	ldr	r3, [r7, #8]
 8104dc8:	ee07 3a90 	vmov	s15, r3
 8104dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104dd0:	697b      	ldr	r3, [r7, #20]
 8104dd2:	ee07 3a90 	vmov	s15, r3
 8104dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104dde:	4b7b      	ldr	r3, [pc, #492]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104de6:	ee07 3a90 	vmov	s15, r3
 8104dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8104df2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104e0e:	e087      	b.n	8104f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104e10:	697b      	ldr	r3, [r7, #20]
 8104e12:	ee07 3a90 	vmov	s15, r3
 8104e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8104fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e22:	4b6a      	ldr	r3, [pc, #424]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e2a:	ee07 3a90 	vmov	s15, r3
 8104e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104e52:	e065      	b.n	8104f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104e54:	697b      	ldr	r3, [r7, #20]
 8104e56:	ee07 3a90 	vmov	s15, r3
 8104e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104e66:	4b59      	ldr	r3, [pc, #356]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e6e:	ee07 3a90 	vmov	s15, r3
 8104e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8104e7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104e96:	e043      	b.n	8104f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104e98:	697b      	ldr	r3, [r7, #20]
 8104e9a:	ee07 3a90 	vmov	s15, r3
 8104e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ea2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8104fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104eaa:	4b48      	ldr	r3, [pc, #288]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104eb2:	ee07 3a90 	vmov	s15, r3
 8104eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ebe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104eda:	e021      	b.n	8104f20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104edc:	697b      	ldr	r3, [r7, #20]
 8104ede:	ee07 3a90 	vmov	s15, r3
 8104ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ee6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104eee:	4b37      	ldr	r3, [pc, #220]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ef6:	ee07 3a90 	vmov	s15, r3
 8104efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8104f02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104f1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8104f20:	4b2a      	ldr	r3, [pc, #168]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104f24:	0a5b      	lsrs	r3, r3, #9
 8104f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104f2a:	ee07 3a90 	vmov	s15, r3
 8104f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f46:	ee17 2a90 	vmov	r2, s15
 8104f4a:	687b      	ldr	r3, [r7, #4]
 8104f4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8104f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104f52:	0c1b      	lsrs	r3, r3, #16
 8104f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104f58:	ee07 3a90 	vmov	s15, r3
 8104f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104f74:	ee17 2a90 	vmov	r2, s15
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8104f7c:	4b13      	ldr	r3, [pc, #76]	@ (8104fcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104f80:	0e1b      	lsrs	r3, r3, #24
 8104f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104f86:	ee07 3a90 	vmov	s15, r3
 8104f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104f96:	edd7 6a07 	vldr	s13, [r7, #28]
 8104f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104fa2:	ee17 2a90 	vmov	r2, s15
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104faa:	e008      	b.n	8104fbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104fac:	687b      	ldr	r3, [r7, #4]
 8104fae:	2200      	movs	r2, #0
 8104fb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	2200      	movs	r2, #0
 8104fb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	2200      	movs	r2, #0
 8104fbc:	609a      	str	r2, [r3, #8]
}
 8104fbe:	bf00      	nop
 8104fc0:	3724      	adds	r7, #36	@ 0x24
 8104fc2:	46bd      	mov	sp, r7
 8104fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fc8:	4770      	bx	lr
 8104fca:	bf00      	nop
 8104fcc:	58024400 	.word	0x58024400
 8104fd0:	03d09000 	.word	0x03d09000
 8104fd4:	46000000 	.word	0x46000000
 8104fd8:	4c742400 	.word	0x4c742400
 8104fdc:	4a742400 	.word	0x4a742400
 8104fe0:	4bbebc20 	.word	0x4bbebc20

08104fe4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8104fe4:	b480      	push	{r7}
 8104fe6:	b089      	sub	sp, #36	@ 0x24
 8104fe8:	af00      	add	r7, sp, #0
 8104fea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104fec:	4ba1      	ldr	r3, [pc, #644]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ff0:	f003 0303 	and.w	r3, r3, #3
 8104ff4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8104ff6:	4b9f      	ldr	r3, [pc, #636]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ffa:	0d1b      	lsrs	r3, r3, #20
 8104ffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105000:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105002:	4b9c      	ldr	r3, [pc, #624]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105006:	0a1b      	lsrs	r3, r3, #8
 8105008:	f003 0301 	and.w	r3, r3, #1
 810500c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810500e:	4b99      	ldr	r3, [pc, #612]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105012:	08db      	lsrs	r3, r3, #3
 8105014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105018:	693a      	ldr	r2, [r7, #16]
 810501a:	fb02 f303 	mul.w	r3, r2, r3
 810501e:	ee07 3a90 	vmov	s15, r3
 8105022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810502a:	697b      	ldr	r3, [r7, #20]
 810502c:	2b00      	cmp	r3, #0
 810502e:	f000 8111 	beq.w	8105254 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105032:	69bb      	ldr	r3, [r7, #24]
 8105034:	2b02      	cmp	r3, #2
 8105036:	f000 8083 	beq.w	8105140 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810503a:	69bb      	ldr	r3, [r7, #24]
 810503c:	2b02      	cmp	r3, #2
 810503e:	f200 80a1 	bhi.w	8105184 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105042:	69bb      	ldr	r3, [r7, #24]
 8105044:	2b00      	cmp	r3, #0
 8105046:	d003      	beq.n	8105050 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105048:	69bb      	ldr	r3, [r7, #24]
 810504a:	2b01      	cmp	r3, #1
 810504c:	d056      	beq.n	81050fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810504e:	e099      	b.n	8105184 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105050:	4b88      	ldr	r3, [pc, #544]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	f003 0320 	and.w	r3, r3, #32
 8105058:	2b00      	cmp	r3, #0
 810505a:	d02d      	beq.n	81050b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810505c:	4b85      	ldr	r3, [pc, #532]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810505e:	681b      	ldr	r3, [r3, #0]
 8105060:	08db      	lsrs	r3, r3, #3
 8105062:	f003 0303 	and.w	r3, r3, #3
 8105066:	4a84      	ldr	r2, [pc, #528]	@ (8105278 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105068:	fa22 f303 	lsr.w	r3, r2, r3
 810506c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810506e:	68bb      	ldr	r3, [r7, #8]
 8105070:	ee07 3a90 	vmov	s15, r3
 8105074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105078:	697b      	ldr	r3, [r7, #20]
 810507a:	ee07 3a90 	vmov	s15, r3
 810507e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105086:	4b7b      	ldr	r3, [pc, #492]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810508e:	ee07 3a90 	vmov	s15, r3
 8105092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105096:	ed97 6a03 	vldr	s12, [r7, #12]
 810509a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810527c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810509e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81050aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81050b6:	e087      	b.n	81051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81050b8:	697b      	ldr	r3, [r7, #20]
 81050ba:	ee07 3a90 	vmov	s15, r3
 81050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105280 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81050c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050ca:	4b6a      	ldr	r3, [pc, #424]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81050ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050d2:	ee07 3a90 	vmov	s15, r3
 81050d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050da:	ed97 6a03 	vldr	s12, [r7, #12]
 81050de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810527c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81050e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81050ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81050fa:	e065      	b.n	81051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81050fc:	697b      	ldr	r3, [r7, #20]
 81050fe:	ee07 3a90 	vmov	s15, r3
 8105102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105106:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810510a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810510e:	4b59      	ldr	r3, [pc, #356]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105116:	ee07 3a90 	vmov	s15, r3
 810511a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810511e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105122:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810527c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810512a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810512e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105136:	ee67 7a27 	vmul.f32	s15, s14, s15
 810513a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810513e:	e043      	b.n	81051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105140:	697b      	ldr	r3, [r7, #20]
 8105142:	ee07 3a90 	vmov	s15, r3
 8105146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810514a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105288 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810514e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105152:	4b48      	ldr	r3, [pc, #288]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810515a:	ee07 3a90 	vmov	s15, r3
 810515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105162:	ed97 6a03 	vldr	s12, [r7, #12]
 8105166:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810527c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810517e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105182:	e021      	b.n	81051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105184:	697b      	ldr	r3, [r7, #20]
 8105186:	ee07 3a90 	vmov	s15, r3
 810518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810518e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105196:	4b37      	ldr	r3, [pc, #220]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810519e:	ee07 3a90 	vmov	s15, r3
 81051a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81051aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810527c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81051ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81051ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81051c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81051c8:	4b2a      	ldr	r3, [pc, #168]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81051cc:	0a5b      	lsrs	r3, r3, #9
 81051ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81051d2:	ee07 3a90 	vmov	s15, r3
 81051d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81051de:	ee37 7a87 	vadd.f32	s14, s15, s14
 81051e2:	edd7 6a07 	vldr	s13, [r7, #28]
 81051e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81051ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81051ee:	ee17 2a90 	vmov	r2, s15
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81051f6:	4b1f      	ldr	r3, [pc, #124]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81051fa:	0c1b      	lsrs	r3, r3, #16
 81051fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105200:	ee07 3a90 	vmov	s15, r3
 8105204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105208:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810520c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105210:	edd7 6a07 	vldr	s13, [r7, #28]
 8105214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810521c:	ee17 2a90 	vmov	r2, s15
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105224:	4b13      	ldr	r3, [pc, #76]	@ (8105274 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105228:	0e1b      	lsrs	r3, r3, #24
 810522a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810522e:	ee07 3a90 	vmov	s15, r3
 8105232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105236:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810523a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810523e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810524a:	ee17 2a90 	vmov	r2, s15
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105252:	e008      	b.n	8105266 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	2200      	movs	r2, #0
 8105258:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	2200      	movs	r2, #0
 810525e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	2200      	movs	r2, #0
 8105264:	609a      	str	r2, [r3, #8]
}
 8105266:	bf00      	nop
 8105268:	3724      	adds	r7, #36	@ 0x24
 810526a:	46bd      	mov	sp, r7
 810526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105270:	4770      	bx	lr
 8105272:	bf00      	nop
 8105274:	58024400 	.word	0x58024400
 8105278:	03d09000 	.word	0x03d09000
 810527c:	46000000 	.word	0x46000000
 8105280:	4c742400 	.word	0x4c742400
 8105284:	4a742400 	.word	0x4a742400
 8105288:	4bbebc20 	.word	0x4bbebc20

0810528c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810528c:	b480      	push	{r7}
 810528e:	b089      	sub	sp, #36	@ 0x24
 8105290:	af00      	add	r7, sp, #0
 8105292:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105294:	4ba0      	ldr	r3, [pc, #640]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105298:	f003 0303 	and.w	r3, r3, #3
 810529c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810529e:	4b9e      	ldr	r3, [pc, #632]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81052a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81052a2:	091b      	lsrs	r3, r3, #4
 81052a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81052a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81052aa:	4b9b      	ldr	r3, [pc, #620]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81052ae:	f003 0301 	and.w	r3, r3, #1
 81052b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81052b4:	4b98      	ldr	r3, [pc, #608]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81052b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81052b8:	08db      	lsrs	r3, r3, #3
 81052ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81052be:	693a      	ldr	r2, [r7, #16]
 81052c0:	fb02 f303 	mul.w	r3, r2, r3
 81052c4:	ee07 3a90 	vmov	s15, r3
 81052c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81052d0:	697b      	ldr	r3, [r7, #20]
 81052d2:	2b00      	cmp	r3, #0
 81052d4:	f000 8111 	beq.w	81054fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81052d8:	69bb      	ldr	r3, [r7, #24]
 81052da:	2b02      	cmp	r3, #2
 81052dc:	f000 8083 	beq.w	81053e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81052e0:	69bb      	ldr	r3, [r7, #24]
 81052e2:	2b02      	cmp	r3, #2
 81052e4:	f200 80a1 	bhi.w	810542a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81052e8:	69bb      	ldr	r3, [r7, #24]
 81052ea:	2b00      	cmp	r3, #0
 81052ec:	d003      	beq.n	81052f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81052ee:	69bb      	ldr	r3, [r7, #24]
 81052f0:	2b01      	cmp	r3, #1
 81052f2:	d056      	beq.n	81053a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81052f4:	e099      	b.n	810542a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81052f6:	4b88      	ldr	r3, [pc, #544]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81052f8:	681b      	ldr	r3, [r3, #0]
 81052fa:	f003 0320 	and.w	r3, r3, #32
 81052fe:	2b00      	cmp	r3, #0
 8105300:	d02d      	beq.n	810535e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105302:	4b85      	ldr	r3, [pc, #532]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105304:	681b      	ldr	r3, [r3, #0]
 8105306:	08db      	lsrs	r3, r3, #3
 8105308:	f003 0303 	and.w	r3, r3, #3
 810530c:	4a83      	ldr	r2, [pc, #524]	@ (810551c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810530e:	fa22 f303 	lsr.w	r3, r2, r3
 8105312:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105314:	68bb      	ldr	r3, [r7, #8]
 8105316:	ee07 3a90 	vmov	s15, r3
 810531a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810531e:	697b      	ldr	r3, [r7, #20]
 8105320:	ee07 3a90 	vmov	s15, r3
 8105324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810532c:	4b7a      	ldr	r3, [pc, #488]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810532e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105334:	ee07 3a90 	vmov	s15, r3
 8105338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810533c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105340:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8105520 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810534c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105358:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810535c:	e087      	b.n	810546e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810535e:	697b      	ldr	r3, [r7, #20]
 8105360:	ee07 3a90 	vmov	s15, r3
 8105364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105368:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8105524 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810536c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105370:	4b69      	ldr	r3, [pc, #420]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105378:	ee07 3a90 	vmov	s15, r3
 810537c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105380:	ed97 6a03 	vldr	s12, [r7, #12]
 8105384:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8105520 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810538c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105398:	ee67 7a27 	vmul.f32	s15, s14, s15
 810539c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81053a0:	e065      	b.n	810546e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81053a2:	697b      	ldr	r3, [r7, #20]
 81053a4:	ee07 3a90 	vmov	s15, r3
 81053a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053ac:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8105528 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81053b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053b4:	4b58      	ldr	r3, [pc, #352]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81053b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81053b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053bc:	ee07 3a90 	vmov	s15, r3
 81053c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81053c4:	ed97 6a03 	vldr	s12, [r7, #12]
 81053c8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8105520 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81053cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81053d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81053d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81053d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81053e4:	e043      	b.n	810546e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81053e6:	697b      	ldr	r3, [r7, #20]
 81053e8:	ee07 3a90 	vmov	s15, r3
 81053ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053f0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 810552c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81053f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053f8:	4b47      	ldr	r3, [pc, #284]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81053fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81053fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105400:	ee07 3a90 	vmov	s15, r3
 8105404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105408:	ed97 6a03 	vldr	s12, [r7, #12]
 810540c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8105520 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810541c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105424:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105428:	e021      	b.n	810546e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810542a:	697b      	ldr	r3, [r7, #20]
 810542c:	ee07 3a90 	vmov	s15, r3
 8105430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105434:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8105524 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810543c:	4b36      	ldr	r3, [pc, #216]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810543e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105444:	ee07 3a90 	vmov	s15, r3
 8105448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810544c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105450:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8105520 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810545c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105468:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810546c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810546e:	4b2a      	ldr	r3, [pc, #168]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105472:	0a5b      	lsrs	r3, r3, #9
 8105474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105478:	ee07 3a90 	vmov	s15, r3
 810547c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105484:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105488:	edd7 6a07 	vldr	s13, [r7, #28]
 810548c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105494:	ee17 2a90 	vmov	r2, s15
 8105498:	687b      	ldr	r3, [r7, #4]
 810549a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810549c:	4b1e      	ldr	r3, [pc, #120]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810549e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81054a0:	0c1b      	lsrs	r3, r3, #16
 81054a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81054a6:	ee07 3a90 	vmov	s15, r3
 81054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81054b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81054b6:	edd7 6a07 	vldr	s13, [r7, #28]
 81054ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81054be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81054c2:	ee17 2a90 	vmov	r2, s15
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 81054ca:	4b13      	ldr	r3, [pc, #76]	@ (8105518 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81054ce:	0e1b      	lsrs	r3, r3, #24
 81054d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81054d4:	ee07 3a90 	vmov	s15, r3
 81054d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81054e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81054e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81054e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81054ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81054f0:	ee17 2a90 	vmov	r2, s15
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81054f8:	e008      	b.n	810550c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	2200      	movs	r2, #0
 81054fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	2200      	movs	r2, #0
 8105504:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	2200      	movs	r2, #0
 810550a:	609a      	str	r2, [r3, #8]
}
 810550c:	bf00      	nop
 810550e:	3724      	adds	r7, #36	@ 0x24
 8105510:	46bd      	mov	sp, r7
 8105512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105516:	4770      	bx	lr
 8105518:	58024400 	.word	0x58024400
 810551c:	03d09000 	.word	0x03d09000
 8105520:	46000000 	.word	0x46000000
 8105524:	4c742400 	.word	0x4c742400
 8105528:	4a742400 	.word	0x4a742400
 810552c:	4bbebc20 	.word	0x4bbebc20

08105530 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105530:	b580      	push	{r7, lr}
 8105532:	b084      	sub	sp, #16
 8105534:	af00      	add	r7, sp, #0
 8105536:	6078      	str	r0, [r7, #4]
 8105538:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810553a:	2300      	movs	r3, #0
 810553c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810553e:	4b54      	ldr	r3, [pc, #336]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105542:	f003 0303 	and.w	r3, r3, #3
 8105546:	2b03      	cmp	r3, #3
 8105548:	d101      	bne.n	810554e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810554a:	2301      	movs	r3, #1
 810554c:	e09b      	b.n	8105686 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810554e:	4b50      	ldr	r3, [pc, #320]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105550:	681b      	ldr	r3, [r3, #0]
 8105552:	4a4f      	ldr	r2, [pc, #316]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105554:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8105558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810555a:	f7fc fbc5 	bl	8101ce8 <HAL_GetTick>
 810555e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105560:	e008      	b.n	8105574 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105562:	f7fc fbc1 	bl	8101ce8 <HAL_GetTick>
 8105566:	4602      	mov	r2, r0
 8105568:	68bb      	ldr	r3, [r7, #8]
 810556a:	1ad3      	subs	r3, r2, r3
 810556c:	2b02      	cmp	r3, #2
 810556e:	d901      	bls.n	8105574 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105570:	2303      	movs	r3, #3
 8105572:	e088      	b.n	8105686 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105574:	4b46      	ldr	r3, [pc, #280]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105576:	681b      	ldr	r3, [r3, #0]
 8105578:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810557c:	2b00      	cmp	r3, #0
 810557e:	d1f0      	bne.n	8105562 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105580:	4b43      	ldr	r3, [pc, #268]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105584:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8105588:	687b      	ldr	r3, [r7, #4]
 810558a:	681b      	ldr	r3, [r3, #0]
 810558c:	031b      	lsls	r3, r3, #12
 810558e:	4940      	ldr	r1, [pc, #256]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105590:	4313      	orrs	r3, r2
 8105592:	628b      	str	r3, [r1, #40]	@ 0x28
 8105594:	687b      	ldr	r3, [r7, #4]
 8105596:	685b      	ldr	r3, [r3, #4]
 8105598:	3b01      	subs	r3, #1
 810559a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	689b      	ldr	r3, [r3, #8]
 81055a2:	3b01      	subs	r3, #1
 81055a4:	025b      	lsls	r3, r3, #9
 81055a6:	b29b      	uxth	r3, r3
 81055a8:	431a      	orrs	r2, r3
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	68db      	ldr	r3, [r3, #12]
 81055ae:	3b01      	subs	r3, #1
 81055b0:	041b      	lsls	r3, r3, #16
 81055b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81055b6:	431a      	orrs	r2, r3
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	691b      	ldr	r3, [r3, #16]
 81055bc:	3b01      	subs	r3, #1
 81055be:	061b      	lsls	r3, r3, #24
 81055c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81055c4:	4932      	ldr	r1, [pc, #200]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 81055c6:	4313      	orrs	r3, r2
 81055c8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81055ca:	4b31      	ldr	r3, [pc, #196]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 81055cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81055ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	695b      	ldr	r3, [r3, #20]
 81055d6:	492e      	ldr	r1, [pc, #184]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 81055d8:	4313      	orrs	r3, r2
 81055da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81055dc:	4b2c      	ldr	r3, [pc, #176]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 81055de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81055e0:	f023 0220 	bic.w	r2, r3, #32
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	699b      	ldr	r3, [r3, #24]
 81055e8:	4929      	ldr	r1, [pc, #164]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 81055ea:	4313      	orrs	r3, r2
 81055ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81055ee:	4b28      	ldr	r3, [pc, #160]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 81055f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81055f2:	4a27      	ldr	r2, [pc, #156]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 81055f4:	f023 0310 	bic.w	r3, r3, #16
 81055f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81055fa:	4b25      	ldr	r3, [pc, #148]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 81055fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81055fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105602:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8105606:	687a      	ldr	r2, [r7, #4]
 8105608:	69d2      	ldr	r2, [r2, #28]
 810560a:	00d2      	lsls	r2, r2, #3
 810560c:	4920      	ldr	r1, [pc, #128]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 810560e:	4313      	orrs	r3, r2
 8105610:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105612:	4b1f      	ldr	r3, [pc, #124]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105616:	4a1e      	ldr	r2, [pc, #120]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105618:	f043 0310 	orr.w	r3, r3, #16
 810561c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810561e:	683b      	ldr	r3, [r7, #0]
 8105620:	2b00      	cmp	r3, #0
 8105622:	d106      	bne.n	8105632 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105624:	4b1a      	ldr	r3, [pc, #104]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105628:	4a19      	ldr	r2, [pc, #100]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 810562a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810562e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105630:	e00f      	b.n	8105652 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105632:	683b      	ldr	r3, [r7, #0]
 8105634:	2b01      	cmp	r3, #1
 8105636:	d106      	bne.n	8105646 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105638:	4b15      	ldr	r3, [pc, #84]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 810563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810563c:	4a14      	ldr	r2, [pc, #80]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 810563e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8105642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105644:	e005      	b.n	8105652 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105646:	4b12      	ldr	r3, [pc, #72]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810564a:	4a11      	ldr	r2, [pc, #68]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 810564c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105650:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105652:	4b0f      	ldr	r3, [pc, #60]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105654:	681b      	ldr	r3, [r3, #0]
 8105656:	4a0e      	ldr	r2, [pc, #56]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 8105658:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810565c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810565e:	f7fc fb43 	bl	8101ce8 <HAL_GetTick>
 8105662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105664:	e008      	b.n	8105678 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105666:	f7fc fb3f 	bl	8101ce8 <HAL_GetTick>
 810566a:	4602      	mov	r2, r0
 810566c:	68bb      	ldr	r3, [r7, #8]
 810566e:	1ad3      	subs	r3, r2, r3
 8105670:	2b02      	cmp	r3, #2
 8105672:	d901      	bls.n	8105678 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105674:	2303      	movs	r3, #3
 8105676:	e006      	b.n	8105686 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105678:	4b05      	ldr	r3, [pc, #20]	@ (8105690 <RCCEx_PLL2_Config+0x160>)
 810567a:	681b      	ldr	r3, [r3, #0]
 810567c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105680:	2b00      	cmp	r3, #0
 8105682:	d0f0      	beq.n	8105666 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105684:	7bfb      	ldrb	r3, [r7, #15]
}
 8105686:	4618      	mov	r0, r3
 8105688:	3710      	adds	r7, #16
 810568a:	46bd      	mov	sp, r7
 810568c:	bd80      	pop	{r7, pc}
 810568e:	bf00      	nop
 8105690:	58024400 	.word	0x58024400

08105694 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105694:	b580      	push	{r7, lr}
 8105696:	b084      	sub	sp, #16
 8105698:	af00      	add	r7, sp, #0
 810569a:	6078      	str	r0, [r7, #4]
 810569c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810569e:	2300      	movs	r3, #0
 81056a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81056a2:	4b54      	ldr	r3, [pc, #336]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056a6:	f003 0303 	and.w	r3, r3, #3
 81056aa:	2b03      	cmp	r3, #3
 81056ac:	d101      	bne.n	81056b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81056ae:	2301      	movs	r3, #1
 81056b0:	e09b      	b.n	81057ea <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81056b2:	4b50      	ldr	r3, [pc, #320]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	4a4f      	ldr	r2, [pc, #316]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81056b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81056bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81056be:	f7fc fb13 	bl	8101ce8 <HAL_GetTick>
 81056c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81056c4:	e008      	b.n	81056d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81056c6:	f7fc fb0f 	bl	8101ce8 <HAL_GetTick>
 81056ca:	4602      	mov	r2, r0
 81056cc:	68bb      	ldr	r3, [r7, #8]
 81056ce:	1ad3      	subs	r3, r2, r3
 81056d0:	2b02      	cmp	r3, #2
 81056d2:	d901      	bls.n	81056d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81056d4:	2303      	movs	r3, #3
 81056d6:	e088      	b.n	81057ea <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81056d8:	4b46      	ldr	r3, [pc, #280]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81056da:	681b      	ldr	r3, [r3, #0]
 81056dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81056e0:	2b00      	cmp	r3, #0
 81056e2:	d1f0      	bne.n	81056c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81056e4:	4b43      	ldr	r3, [pc, #268]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81056e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	681b      	ldr	r3, [r3, #0]
 81056f0:	051b      	lsls	r3, r3, #20
 81056f2:	4940      	ldr	r1, [pc, #256]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81056f4:	4313      	orrs	r3, r2
 81056f6:	628b      	str	r3, [r1, #40]	@ 0x28
 81056f8:	687b      	ldr	r3, [r7, #4]
 81056fa:	685b      	ldr	r3, [r3, #4]
 81056fc:	3b01      	subs	r3, #1
 81056fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105702:	687b      	ldr	r3, [r7, #4]
 8105704:	689b      	ldr	r3, [r3, #8]
 8105706:	3b01      	subs	r3, #1
 8105708:	025b      	lsls	r3, r3, #9
 810570a:	b29b      	uxth	r3, r3
 810570c:	431a      	orrs	r2, r3
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	68db      	ldr	r3, [r3, #12]
 8105712:	3b01      	subs	r3, #1
 8105714:	041b      	lsls	r3, r3, #16
 8105716:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810571a:	431a      	orrs	r2, r3
 810571c:	687b      	ldr	r3, [r7, #4]
 810571e:	691b      	ldr	r3, [r3, #16]
 8105720:	3b01      	subs	r3, #1
 8105722:	061b      	lsls	r3, r3, #24
 8105724:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8105728:	4932      	ldr	r1, [pc, #200]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 810572a:	4313      	orrs	r3, r2
 810572c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810572e:	4b31      	ldr	r3, [pc, #196]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 8105730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105732:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	695b      	ldr	r3, [r3, #20]
 810573a:	492e      	ldr	r1, [pc, #184]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 810573c:	4313      	orrs	r3, r2
 810573e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105740:	4b2c      	ldr	r3, [pc, #176]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 8105742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105744:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	699b      	ldr	r3, [r3, #24]
 810574c:	4929      	ldr	r1, [pc, #164]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 810574e:	4313      	orrs	r3, r2
 8105750:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105752:	4b28      	ldr	r3, [pc, #160]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 8105754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105756:	4a27      	ldr	r2, [pc, #156]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 8105758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810575c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810575e:	4b25      	ldr	r3, [pc, #148]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 8105760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105766:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810576a:	687a      	ldr	r2, [r7, #4]
 810576c:	69d2      	ldr	r2, [r2, #28]
 810576e:	00d2      	lsls	r2, r2, #3
 8105770:	4920      	ldr	r1, [pc, #128]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 8105772:	4313      	orrs	r3, r2
 8105774:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105776:	4b1f      	ldr	r3, [pc, #124]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 8105778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810577a:	4a1e      	ldr	r2, [pc, #120]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 810577c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105780:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105782:	683b      	ldr	r3, [r7, #0]
 8105784:	2b00      	cmp	r3, #0
 8105786:	d106      	bne.n	8105796 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105788:	4b1a      	ldr	r3, [pc, #104]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 810578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810578c:	4a19      	ldr	r2, [pc, #100]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 810578e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8105792:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105794:	e00f      	b.n	81057b6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105796:	683b      	ldr	r3, [r7, #0]
 8105798:	2b01      	cmp	r3, #1
 810579a:	d106      	bne.n	81057aa <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810579c:	4b15      	ldr	r3, [pc, #84]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 810579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057a0:	4a14      	ldr	r2, [pc, #80]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81057a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81057a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81057a8:	e005      	b.n	81057b6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81057aa:	4b12      	ldr	r3, [pc, #72]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057ae:	4a11      	ldr	r2, [pc, #68]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81057b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81057b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81057b6:	4b0f      	ldr	r3, [pc, #60]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81057b8:	681b      	ldr	r3, [r3, #0]
 81057ba:	4a0e      	ldr	r2, [pc, #56]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81057bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81057c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81057c2:	f7fc fa91 	bl	8101ce8 <HAL_GetTick>
 81057c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81057c8:	e008      	b.n	81057dc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81057ca:	f7fc fa8d 	bl	8101ce8 <HAL_GetTick>
 81057ce:	4602      	mov	r2, r0
 81057d0:	68bb      	ldr	r3, [r7, #8]
 81057d2:	1ad3      	subs	r3, r2, r3
 81057d4:	2b02      	cmp	r3, #2
 81057d6:	d901      	bls.n	81057dc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81057d8:	2303      	movs	r3, #3
 81057da:	e006      	b.n	81057ea <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81057dc:	4b05      	ldr	r3, [pc, #20]	@ (81057f4 <RCCEx_PLL3_Config+0x160>)
 81057de:	681b      	ldr	r3, [r3, #0]
 81057e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81057e4:	2b00      	cmp	r3, #0
 81057e6:	d0f0      	beq.n	81057ca <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 81057ea:	4618      	mov	r0, r3
 81057ec:	3710      	adds	r7, #16
 81057ee:	46bd      	mov	sp, r7
 81057f0:	bd80      	pop	{r7, pc}
 81057f2:	bf00      	nop
 81057f4:	58024400 	.word	0x58024400

081057f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 81057f8:	b580      	push	{r7, lr}
 81057fa:	b084      	sub	sp, #16
 81057fc:	af00      	add	r7, sp, #0
 81057fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8105800:	2301      	movs	r3, #1
 8105802:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8105804:	687b      	ldr	r3, [r7, #4]
 8105806:	2b00      	cmp	r3, #0
 8105808:	d073      	beq.n	81058f2 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 810580a:	687b      	ldr	r3, [r7, #4]
 810580c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8105810:	b2db      	uxtb	r3, r3
 8105812:	2b00      	cmp	r3, #0
 8105814:	d106      	bne.n	8105824 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8105816:	687b      	ldr	r3, [r7, #4]
 8105818:	2200      	movs	r2, #0
 810581a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 810581e:	6878      	ldr	r0, [r7, #4]
 8105820:	f7fb fc16 	bl	8101050 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	2202      	movs	r2, #2
 8105828:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 810582c:	687b      	ldr	r3, [r7, #4]
 810582e:	681b      	ldr	r3, [r3, #0]
 8105830:	68db      	ldr	r3, [r3, #12]
 8105832:	f003 0310 	and.w	r3, r3, #16
 8105836:	2b10      	cmp	r3, #16
 8105838:	d052      	beq.n	81058e0 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	22ca      	movs	r2, #202	@ 0xca
 8105840:	625a      	str	r2, [r3, #36]	@ 0x24
 8105842:	687b      	ldr	r3, [r7, #4]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	2253      	movs	r2, #83	@ 0x53
 8105848:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 810584a:	6878      	ldr	r0, [r7, #4]
 810584c:	f000 f87a 	bl	8105944 <RTC_EnterInitMode>
 8105850:	4603      	mov	r3, r0
 8105852:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8105854:	7bfb      	ldrb	r3, [r7, #15]
 8105856:	2b00      	cmp	r3, #0
 8105858:	d126      	bne.n	81058a8 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 810585a:	687b      	ldr	r3, [r7, #4]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	689b      	ldr	r3, [r3, #8]
 8105860:	687a      	ldr	r2, [r7, #4]
 8105862:	6812      	ldr	r2, [r2, #0]
 8105864:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8105868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810586c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	681b      	ldr	r3, [r3, #0]
 8105872:	6899      	ldr	r1, [r3, #8]
 8105874:	687b      	ldr	r3, [r7, #4]
 8105876:	685a      	ldr	r2, [r3, #4]
 8105878:	687b      	ldr	r3, [r7, #4]
 810587a:	691b      	ldr	r3, [r3, #16]
 810587c:	431a      	orrs	r2, r3
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	699b      	ldr	r3, [r3, #24]
 8105882:	431a      	orrs	r2, r3
 8105884:	687b      	ldr	r3, [r7, #4]
 8105886:	681b      	ldr	r3, [r3, #0]
 8105888:	430a      	orrs	r2, r1
 810588a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	689b      	ldr	r3, [r3, #8]
 8105890:	0419      	lsls	r1, r3, #16
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	68da      	ldr	r2, [r3, #12]
 8105896:	687b      	ldr	r3, [r7, #4]
 8105898:	681b      	ldr	r3, [r3, #0]
 810589a:	430a      	orrs	r2, r1
 810589c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 810589e:	6878      	ldr	r0, [r7, #4]
 81058a0:	f000 f884 	bl	81059ac <RTC_ExitInitMode>
 81058a4:	4603      	mov	r3, r0
 81058a6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 81058a8:	7bfb      	ldrb	r3, [r7, #15]
 81058aa:	2b00      	cmp	r3, #0
 81058ac:	d113      	bne.n	81058d6 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 81058ae:	687b      	ldr	r3, [r7, #4]
 81058b0:	681b      	ldr	r3, [r3, #0]
 81058b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81058b4:	687b      	ldr	r3, [r7, #4]
 81058b6:	681b      	ldr	r3, [r3, #0]
 81058b8:	f022 0203 	bic.w	r2, r2, #3
 81058bc:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 81058be:	687b      	ldr	r3, [r7, #4]
 81058c0:	681b      	ldr	r3, [r3, #0]
 81058c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	69da      	ldr	r2, [r3, #28]
 81058c8:	687b      	ldr	r3, [r7, #4]
 81058ca:	695b      	ldr	r3, [r3, #20]
 81058cc:	431a      	orrs	r2, r3
 81058ce:	687b      	ldr	r3, [r7, #4]
 81058d0:	681b      	ldr	r3, [r3, #0]
 81058d2:	430a      	orrs	r2, r1
 81058d4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	681b      	ldr	r3, [r3, #0]
 81058da:	22ff      	movs	r2, #255	@ 0xff
 81058dc:	625a      	str	r2, [r3, #36]	@ 0x24
 81058de:	e001      	b.n	81058e4 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 81058e0:	2300      	movs	r3, #0
 81058e2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 81058e4:	7bfb      	ldrb	r3, [r7, #15]
 81058e6:	2b00      	cmp	r3, #0
 81058e8:	d103      	bne.n	81058f2 <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	2201      	movs	r2, #1
 81058ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 81058f2:	7bfb      	ldrb	r3, [r7, #15]
}
 81058f4:	4618      	mov	r0, r3
 81058f6:	3710      	adds	r7, #16
 81058f8:	46bd      	mov	sp, r7
 81058fa:	bd80      	pop	{r7, pc}

081058fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 81058fc:	b580      	push	{r7, lr}
 81058fe:	b084      	sub	sp, #16
 8105900:	af00      	add	r7, sp, #0
 8105902:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8105904:	687b      	ldr	r3, [r7, #4]
 8105906:	681b      	ldr	r3, [r3, #0]
 8105908:	4a0d      	ldr	r2, [pc, #52]	@ (8105940 <HAL_RTC_WaitForSynchro+0x44>)
 810590a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 810590c:	f7fc f9ec 	bl	8101ce8 <HAL_GetTick>
 8105910:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105912:	e009      	b.n	8105928 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8105914:	f7fc f9e8 	bl	8101ce8 <HAL_GetTick>
 8105918:	4602      	mov	r2, r0
 810591a:	68fb      	ldr	r3, [r7, #12]
 810591c:	1ad3      	subs	r3, r2, r3
 810591e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105922:	d901      	bls.n	8105928 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8105924:	2303      	movs	r3, #3
 8105926:	e007      	b.n	8105938 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105928:	687b      	ldr	r3, [r7, #4]
 810592a:	681b      	ldr	r3, [r3, #0]
 810592c:	68db      	ldr	r3, [r3, #12]
 810592e:	f003 0320 	and.w	r3, r3, #32
 8105932:	2b00      	cmp	r3, #0
 8105934:	d0ee      	beq.n	8105914 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8105936:	2300      	movs	r3, #0
}
 8105938:	4618      	mov	r0, r3
 810593a:	3710      	adds	r7, #16
 810593c:	46bd      	mov	sp, r7
 810593e:	bd80      	pop	{r7, pc}
 8105940:	0003ff5f 	.word	0x0003ff5f

08105944 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8105944:	b580      	push	{r7, lr}
 8105946:	b084      	sub	sp, #16
 8105948:	af00      	add	r7, sp, #0
 810594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810594c:	2300      	movs	r3, #0
 810594e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	681b      	ldr	r3, [r3, #0]
 8105954:	68db      	ldr	r3, [r3, #12]
 8105956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810595a:	2b00      	cmp	r3, #0
 810595c:	d120      	bne.n	81059a0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 810595e:	687b      	ldr	r3, [r7, #4]
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	f04f 32ff 	mov.w	r2, #4294967295
 8105966:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8105968:	f7fc f9be 	bl	8101ce8 <HAL_GetTick>
 810596c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810596e:	e00d      	b.n	810598c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8105970:	f7fc f9ba 	bl	8101ce8 <HAL_GetTick>
 8105974:	4602      	mov	r2, r0
 8105976:	68bb      	ldr	r3, [r7, #8]
 8105978:	1ad3      	subs	r3, r2, r3
 810597a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810597e:	d905      	bls.n	810598c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8105980:	2303      	movs	r3, #3
 8105982:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	2203      	movs	r2, #3
 8105988:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	68db      	ldr	r3, [r3, #12]
 8105992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105996:	2b00      	cmp	r3, #0
 8105998:	d102      	bne.n	81059a0 <RTC_EnterInitMode+0x5c>
 810599a:	7bfb      	ldrb	r3, [r7, #15]
 810599c:	2b03      	cmp	r3, #3
 810599e:	d1e7      	bne.n	8105970 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 81059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 81059a2:	4618      	mov	r0, r3
 81059a4:	3710      	adds	r7, #16
 81059a6:	46bd      	mov	sp, r7
 81059a8:	bd80      	pop	{r7, pc}
	...

081059ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 81059ac:	b580      	push	{r7, lr}
 81059ae:	b084      	sub	sp, #16
 81059b0:	af00      	add	r7, sp, #0
 81059b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81059b4:	2300      	movs	r3, #0
 81059b6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 81059b8:	4b1a      	ldr	r3, [pc, #104]	@ (8105a24 <RTC_ExitInitMode+0x78>)
 81059ba:	68db      	ldr	r3, [r3, #12]
 81059bc:	4a19      	ldr	r2, [pc, #100]	@ (8105a24 <RTC_ExitInitMode+0x78>)
 81059be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81059c2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 81059c4:	4b17      	ldr	r3, [pc, #92]	@ (8105a24 <RTC_ExitInitMode+0x78>)
 81059c6:	689b      	ldr	r3, [r3, #8]
 81059c8:	f003 0320 	and.w	r3, r3, #32
 81059cc:	2b00      	cmp	r3, #0
 81059ce:	d10c      	bne.n	81059ea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81059d0:	6878      	ldr	r0, [r7, #4]
 81059d2:	f7ff ff93 	bl	81058fc <HAL_RTC_WaitForSynchro>
 81059d6:	4603      	mov	r3, r0
 81059d8:	2b00      	cmp	r3, #0
 81059da:	d01e      	beq.n	8105a1a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	2203      	movs	r2, #3
 81059e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 81059e4:	2303      	movs	r3, #3
 81059e6:	73fb      	strb	r3, [r7, #15]
 81059e8:	e017      	b.n	8105a1a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81059ea:	4b0e      	ldr	r3, [pc, #56]	@ (8105a24 <RTC_ExitInitMode+0x78>)
 81059ec:	689b      	ldr	r3, [r3, #8]
 81059ee:	4a0d      	ldr	r2, [pc, #52]	@ (8105a24 <RTC_ExitInitMode+0x78>)
 81059f0:	f023 0320 	bic.w	r3, r3, #32
 81059f4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81059f6:	6878      	ldr	r0, [r7, #4]
 81059f8:	f7ff ff80 	bl	81058fc <HAL_RTC_WaitForSynchro>
 81059fc:	4603      	mov	r3, r0
 81059fe:	2b00      	cmp	r3, #0
 8105a00:	d005      	beq.n	8105a0e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105a02:	687b      	ldr	r3, [r7, #4]
 8105a04:	2203      	movs	r2, #3
 8105a06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8105a0a:	2303      	movs	r3, #3
 8105a0c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105a0e:	4b05      	ldr	r3, [pc, #20]	@ (8105a24 <RTC_ExitInitMode+0x78>)
 8105a10:	689b      	ldr	r3, [r3, #8]
 8105a12:	4a04      	ldr	r2, [pc, #16]	@ (8105a24 <RTC_ExitInitMode+0x78>)
 8105a14:	f043 0320 	orr.w	r3, r3, #32
 8105a18:	6093      	str	r3, [r2, #8]
  }

  return status;
 8105a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8105a1c:	4618      	mov	r0, r3
 8105a1e:	3710      	adds	r7, #16
 8105a20:	46bd      	mov	sp, r7
 8105a22:	bd80      	pop	{r7, pc}
 8105a24:	58004000 	.word	0x58004000

08105a28 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 8105a28:	b480      	push	{r7}
 8105a2a:	b085      	sub	sp, #20
 8105a2c:	af00      	add	r7, sp, #0
 8105a2e:	6078      	str	r0, [r7, #4]
 8105a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8105a32:	687b      	ldr	r3, [r7, #4]
 8105a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8105a38:	2b01      	cmp	r3, #1
 8105a3a:	d101      	bne.n	8105a40 <HAL_RTCEx_SetTamper+0x18>
 8105a3c:	2302      	movs	r3, #2
 8105a3e:	e0cc      	b.n	8105bda <HAL_RTCEx_SetTamper+0x1b2>
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	2201      	movs	r2, #1
 8105a44:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	2202      	movs	r2, #2
 8105a4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	681b      	ldr	r3, [r3, #0]
 8105a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105a56:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8105a58:	683b      	ldr	r3, [r7, #0]
 8105a5a:	681b      	ldr	r3, [r3, #0]
 8105a5c:	68fa      	ldr	r2, [r7, #12]
 8105a5e:	4313      	orrs	r3, r2
 8105a60:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8105a62:	683b      	ldr	r3, [r7, #0]
 8105a64:	689b      	ldr	r3, [r3, #8]
 8105a66:	2b08      	cmp	r3, #8
 8105a68:	d003      	beq.n	8105a72 <HAL_RTCEx_SetTamper+0x4a>
 8105a6a:	683b      	ldr	r3, [r7, #0]
 8105a6c:	689b      	ldr	r3, [r3, #8]
 8105a6e:	2b02      	cmp	r3, #2
 8105a70:	d106      	bne.n	8105a80 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8105a72:	683b      	ldr	r3, [r7, #0]
 8105a74:	681b      	ldr	r3, [r3, #0]
 8105a76:	005b      	lsls	r3, r3, #1
 8105a78:	68fa      	ldr	r2, [r7, #12]
 8105a7a:	4313      	orrs	r3, r2
 8105a7c:	60fb      	str	r3, [r7, #12]
 8105a7e:	e006      	b.n	8105a8e <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8105a80:	683b      	ldr	r3, [r7, #0]
 8105a82:	681b      	ldr	r3, [r3, #0]
 8105a84:	005b      	lsls	r3, r3, #1
 8105a86:	43db      	mvns	r3, r3
 8105a88:	68fa      	ldr	r2, [r7, #12]
 8105a8a:	4013      	ands	r3, r2
 8105a8c:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8105a8e:	683b      	ldr	r3, [r7, #0]
 8105a90:	68db      	ldr	r3, [r3, #12]
 8105a92:	2b00      	cmp	r3, #0
 8105a94:	d01e      	beq.n	8105ad4 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105a96:	683b      	ldr	r3, [r7, #0]
 8105a98:	681b      	ldr	r3, [r3, #0]
 8105a9a:	f003 0301 	and.w	r3, r3, #1
 8105a9e:	2b00      	cmp	r3, #0
 8105aa0:	d003      	beq.n	8105aaa <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8105aa2:	68fb      	ldr	r3, [r7, #12]
 8105aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105aa8:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105aaa:	683b      	ldr	r3, [r7, #0]
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	f003 0308 	and.w	r3, r3, #8
 8105ab2:	2b00      	cmp	r3, #0
 8105ab4:	d003      	beq.n	8105abe <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8105ab6:	68fb      	ldr	r3, [r7, #12]
 8105ab8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8105abc:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105abe:	683b      	ldr	r3, [r7, #0]
 8105ac0:	681b      	ldr	r3, [r3, #0]
 8105ac2:	f003 0320 	and.w	r3, r3, #32
 8105ac6:	2b00      	cmp	r3, #0
 8105ac8:	d022      	beq.n	8105b10 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8105aca:	68fb      	ldr	r3, [r7, #12]
 8105acc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105ad0:	60fb      	str	r3, [r7, #12]
 8105ad2:	e01d      	b.n	8105b10 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105ad4:	683b      	ldr	r3, [r7, #0]
 8105ad6:	681b      	ldr	r3, [r3, #0]
 8105ad8:	f003 0301 	and.w	r3, r3, #1
 8105adc:	2b00      	cmp	r3, #0
 8105ade:	d003      	beq.n	8105ae8 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8105ae0:	68fb      	ldr	r3, [r7, #12]
 8105ae2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8105ae6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105ae8:	683b      	ldr	r3, [r7, #0]
 8105aea:	681b      	ldr	r3, [r3, #0]
 8105aec:	f003 0308 	and.w	r3, r3, #8
 8105af0:	2b00      	cmp	r3, #0
 8105af2:	d003      	beq.n	8105afc <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8105af4:	68fb      	ldr	r3, [r7, #12]
 8105af6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8105afa:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105afc:	683b      	ldr	r3, [r7, #0]
 8105afe:	681b      	ldr	r3, [r3, #0]
 8105b00:	f003 0320 	and.w	r3, r3, #32
 8105b04:	2b00      	cmp	r3, #0
 8105b06:	d003      	beq.n	8105b10 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8105b08:	68fb      	ldr	r3, [r7, #12]
 8105b0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8105b0e:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8105b10:	683b      	ldr	r3, [r7, #0]
 8105b12:	691b      	ldr	r3, [r3, #16]
 8105b14:	2b00      	cmp	r3, #0
 8105b16:	d01e      	beq.n	8105b56 <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105b18:	683b      	ldr	r3, [r7, #0]
 8105b1a:	681b      	ldr	r3, [r3, #0]
 8105b1c:	f003 0301 	and.w	r3, r3, #1
 8105b20:	2b00      	cmp	r3, #0
 8105b22:	d003      	beq.n	8105b2c <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8105b24:	68fb      	ldr	r3, [r7, #12]
 8105b26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8105b2a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105b2c:	683b      	ldr	r3, [r7, #0]
 8105b2e:	681b      	ldr	r3, [r3, #0]
 8105b30:	f003 0308 	and.w	r3, r3, #8
 8105b34:	2b00      	cmp	r3, #0
 8105b36:	d003      	beq.n	8105b40 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8105b38:	68fb      	ldr	r3, [r7, #12]
 8105b3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105b3e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105b40:	683b      	ldr	r3, [r7, #0]
 8105b42:	681b      	ldr	r3, [r3, #0]
 8105b44:	f003 0320 	and.w	r3, r3, #32
 8105b48:	2b00      	cmp	r3, #0
 8105b4a:	d022      	beq.n	8105b92 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8105b4c:	68fb      	ldr	r3, [r7, #12]
 8105b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105b52:	60fb      	str	r3, [r7, #12]
 8105b54:	e01d      	b.n	8105b92 <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105b56:	683b      	ldr	r3, [r7, #0]
 8105b58:	681b      	ldr	r3, [r3, #0]
 8105b5a:	f003 0301 	and.w	r3, r3, #1
 8105b5e:	2b00      	cmp	r3, #0
 8105b60:	d003      	beq.n	8105b6a <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8105b62:	68fb      	ldr	r3, [r7, #12]
 8105b64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8105b68:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105b6a:	683b      	ldr	r3, [r7, #0]
 8105b6c:	681b      	ldr	r3, [r3, #0]
 8105b6e:	f003 0308 	and.w	r3, r3, #8
 8105b72:	2b00      	cmp	r3, #0
 8105b74:	d003      	beq.n	8105b7e <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8105b76:	68fb      	ldr	r3, [r7, #12]
 8105b78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8105b7c:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105b7e:	683b      	ldr	r3, [r7, #0]
 8105b80:	681b      	ldr	r3, [r3, #0]
 8105b82:	f003 0320 	and.w	r3, r3, #32
 8105b86:	2b00      	cmp	r3, #0
 8105b88:	d003      	beq.n	8105b92 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8105b8a:	68fb      	ldr	r3, [r7, #12]
 8105b8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8105b90:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8105b92:	68fb      	ldr	r3, [r7, #12]
 8105b94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105b98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105b9c:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105b9e:	683b      	ldr	r3, [r7, #0]
 8105ba0:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8105ba2:	683b      	ldr	r3, [r7, #0]
 8105ba4:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105ba6:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8105ba8:	683b      	ldr	r3, [r7, #0]
 8105baa:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8105bac:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8105bae:	683b      	ldr	r3, [r7, #0]
 8105bb0:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8105bb2:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8105bb4:	683b      	ldr	r3, [r7, #0]
 8105bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8105bb8:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105bba:	68fa      	ldr	r2, [r7, #12]
 8105bbc:	4313      	orrs	r3, r2
 8105bbe:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8105bc0:	687b      	ldr	r3, [r7, #4]
 8105bc2:	681b      	ldr	r3, [r3, #0]
 8105bc4:	68fa      	ldr	r2, [r7, #12]
 8105bc6:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	2201      	movs	r2, #1
 8105bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	2200      	movs	r2, #0
 8105bd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8105bd8:	2300      	movs	r3, #0
}
 8105bda:	4618      	mov	r0, r3
 8105bdc:	3714      	adds	r7, #20
 8105bde:	46bd      	mov	sp, r7
 8105be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105be4:	4770      	bx	lr
	...

08105be8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8105be8:	b580      	push	{r7, lr}
 8105bea:	b08a      	sub	sp, #40	@ 0x28
 8105bec:	af00      	add	r7, sp, #0
 8105bee:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8105bf0:	687b      	ldr	r3, [r7, #4]
 8105bf2:	2b00      	cmp	r3, #0
 8105bf4:	d101      	bne.n	8105bfa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8105bf6:	2301      	movs	r3, #1
 8105bf8:	e290      	b.n	810611c <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105bfa:	f7fc f8a5 	bl	8101d48 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8105bfe:	687b      	ldr	r3, [r7, #4]
 8105c00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8105c04:	2b01      	cmp	r3, #1
 8105c06:	d113      	bne.n	8105c30 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	4a96      	ldr	r2, [pc, #600]	@ (8105e68 <HAL_SAI_Init+0x280>)
 8105c0e:	4293      	cmp	r3, r2
 8105c10:	d004      	beq.n	8105c1c <HAL_SAI_Init+0x34>
 8105c12:	687b      	ldr	r3, [r7, #4]
 8105c14:	681b      	ldr	r3, [r3, #0]
 8105c16:	4a95      	ldr	r2, [pc, #596]	@ (8105e6c <HAL_SAI_Init+0x284>)
 8105c18:	4293      	cmp	r3, r2
 8105c1a:	d107      	bne.n	8105c2c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105c20:	2b01      	cmp	r3, #1
 8105c22:	d103      	bne.n	8105c2c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8105c24:	687b      	ldr	r3, [r7, #4]
 8105c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105c28:	2b00      	cmp	r3, #0
 8105c2a:	d001      	beq.n	8105c30 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8105c2c:	2301      	movs	r3, #1
 8105c2e:	e275      	b.n	810611c <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105c30:	687b      	ldr	r3, [r7, #4]
 8105c32:	681b      	ldr	r3, [r3, #0]
 8105c34:	4a8c      	ldr	r2, [pc, #560]	@ (8105e68 <HAL_SAI_Init+0x280>)
 8105c36:	4293      	cmp	r3, r2
 8105c38:	d004      	beq.n	8105c44 <HAL_SAI_Init+0x5c>
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	681b      	ldr	r3, [r3, #0]
 8105c3e:	4a8c      	ldr	r2, [pc, #560]	@ (8105e70 <HAL_SAI_Init+0x288>)
 8105c40:	4293      	cmp	r3, r2
 8105c42:	d102      	bne.n	8105c4a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8105c44:	4b8b      	ldr	r3, [pc, #556]	@ (8105e74 <HAL_SAI_Init+0x28c>)
 8105c46:	61bb      	str	r3, [r7, #24]
 8105c48:	e028      	b.n	8105c9c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	681b      	ldr	r3, [r3, #0]
 8105c4e:	4a8a      	ldr	r2, [pc, #552]	@ (8105e78 <HAL_SAI_Init+0x290>)
 8105c50:	4293      	cmp	r3, r2
 8105c52:	d004      	beq.n	8105c5e <HAL_SAI_Init+0x76>
 8105c54:	687b      	ldr	r3, [r7, #4]
 8105c56:	681b      	ldr	r3, [r3, #0]
 8105c58:	4a88      	ldr	r2, [pc, #544]	@ (8105e7c <HAL_SAI_Init+0x294>)
 8105c5a:	4293      	cmp	r3, r2
 8105c5c:	d102      	bne.n	8105c64 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8105c5e:	4b88      	ldr	r3, [pc, #544]	@ (8105e80 <HAL_SAI_Init+0x298>)
 8105c60:	61bb      	str	r3, [r7, #24]
 8105c62:	e01b      	b.n	8105c9c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	681b      	ldr	r3, [r3, #0]
 8105c68:	4a86      	ldr	r2, [pc, #536]	@ (8105e84 <HAL_SAI_Init+0x29c>)
 8105c6a:	4293      	cmp	r3, r2
 8105c6c:	d004      	beq.n	8105c78 <HAL_SAI_Init+0x90>
 8105c6e:	687b      	ldr	r3, [r7, #4]
 8105c70:	681b      	ldr	r3, [r3, #0]
 8105c72:	4a85      	ldr	r2, [pc, #532]	@ (8105e88 <HAL_SAI_Init+0x2a0>)
 8105c74:	4293      	cmp	r3, r2
 8105c76:	d102      	bne.n	8105c7e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8105c78:	4b84      	ldr	r3, [pc, #528]	@ (8105e8c <HAL_SAI_Init+0x2a4>)
 8105c7a:	61bb      	str	r3, [r7, #24]
 8105c7c:	e00e      	b.n	8105c9c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8105c7e:	687b      	ldr	r3, [r7, #4]
 8105c80:	681b      	ldr	r3, [r3, #0]
 8105c82:	4a7a      	ldr	r2, [pc, #488]	@ (8105e6c <HAL_SAI_Init+0x284>)
 8105c84:	4293      	cmp	r3, r2
 8105c86:	d004      	beq.n	8105c92 <HAL_SAI_Init+0xaa>
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	681b      	ldr	r3, [r3, #0]
 8105c8c:	4a80      	ldr	r2, [pc, #512]	@ (8105e90 <HAL_SAI_Init+0x2a8>)
 8105c8e:	4293      	cmp	r3, r2
 8105c90:	d102      	bne.n	8105c98 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8105c92:	4b80      	ldr	r3, [pc, #512]	@ (8105e94 <HAL_SAI_Init+0x2ac>)
 8105c94:	61bb      	str	r3, [r7, #24]
 8105c96:	e001      	b.n	8105c9c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8105c98:	2301      	movs	r3, #1
 8105c9a:	e23f      	b.n	810611c <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8105ca2:	b2db      	uxtb	r3, r3
 8105ca4:	2b00      	cmp	r3, #0
 8105ca6:	d106      	bne.n	8105cb6 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8105ca8:	687b      	ldr	r3, [r7, #4]
 8105caa:	2200      	movs	r2, #0
 8105cac:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8105cb0:	6878      	ldr	r0, [r7, #4]
 8105cb2:	f7fb fd7d 	bl	81017b0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8105cb6:	6878      	ldr	r0, [r7, #4]
 8105cb8:	f000 fa40 	bl	810613c <SAI_Disable>
 8105cbc:	4603      	mov	r3, r0
 8105cbe:	2b00      	cmp	r3, #0
 8105cc0:	d001      	beq.n	8105cc6 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8105cc2:	2301      	movs	r3, #1
 8105cc4:	e22a      	b.n	810611c <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	2202      	movs	r2, #2
 8105cca:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8105cce:	687b      	ldr	r3, [r7, #4]
 8105cd0:	68db      	ldr	r3, [r3, #12]
 8105cd2:	2b02      	cmp	r3, #2
 8105cd4:	d00c      	beq.n	8105cf0 <HAL_SAI_Init+0x108>
 8105cd6:	2b02      	cmp	r3, #2
 8105cd8:	d80d      	bhi.n	8105cf6 <HAL_SAI_Init+0x10e>
 8105cda:	2b00      	cmp	r3, #0
 8105cdc:	d002      	beq.n	8105ce4 <HAL_SAI_Init+0xfc>
 8105cde:	2b01      	cmp	r3, #1
 8105ce0:	d003      	beq.n	8105cea <HAL_SAI_Init+0x102>
 8105ce2:	e008      	b.n	8105cf6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8105ce4:	2300      	movs	r3, #0
 8105ce6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105ce8:	e008      	b.n	8105cfc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8105cea:	2310      	movs	r3, #16
 8105cec:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105cee:	e005      	b.n	8105cfc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8105cf0:	2320      	movs	r3, #32
 8105cf2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105cf4:	e002      	b.n	8105cfc <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8105cf6:	2300      	movs	r3, #0
 8105cf8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105cfa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	689b      	ldr	r3, [r3, #8]
 8105d00:	2b05      	cmp	r3, #5
 8105d02:	d832      	bhi.n	8105d6a <HAL_SAI_Init+0x182>
 8105d04:	a201      	add	r2, pc, #4	@ (adr r2, 8105d0c <HAL_SAI_Init+0x124>)
 8105d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d0a:	bf00      	nop
 8105d0c:	08105d25 	.word	0x08105d25
 8105d10:	08105d2b 	.word	0x08105d2b
 8105d14:	08105d33 	.word	0x08105d33
 8105d18:	08105d3b 	.word	0x08105d3b
 8105d1c:	08105d4b 	.word	0x08105d4b
 8105d20:	08105d5b 	.word	0x08105d5b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8105d24:	2300      	movs	r3, #0
 8105d26:	61fb      	str	r3, [r7, #28]
      break;
 8105d28:	e022      	b.n	8105d70 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8105d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8105d2e:	61fb      	str	r3, [r7, #28]
      break;
 8105d30:	e01e      	b.n	8105d70 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105d32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105d36:	61fb      	str	r3, [r7, #28]
      break;
 8105d38:	e01a      	b.n	8105d70 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105d3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105d3e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8105d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105d42:	f043 0301 	orr.w	r3, r3, #1
 8105d46:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105d48:	e012      	b.n	8105d70 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105d4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105d4e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8105d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105d52:	f043 0302 	orr.w	r3, r3, #2
 8105d56:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105d58:	e00a      	b.n	8105d70 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105d5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105d5e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8105d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105d62:	f043 0303 	orr.w	r3, r3, #3
 8105d66:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8105d68:	e002      	b.n	8105d70 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8105d6a:	2300      	movs	r3, #0
 8105d6c:	61fb      	str	r3, [r7, #28]
      break;
 8105d6e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8105d70:	69bb      	ldr	r3, [r7, #24]
 8105d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105d74:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	6a1b      	ldr	r3, [r3, #32]
 8105d7a:	2b00      	cmp	r3, #0
 8105d7c:	f000 80c5 	beq.w	8105f0a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8105d80:	2300      	movs	r3, #0
 8105d82:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105d84:	687b      	ldr	r3, [r7, #4]
 8105d86:	681b      	ldr	r3, [r3, #0]
 8105d88:	4a37      	ldr	r2, [pc, #220]	@ (8105e68 <HAL_SAI_Init+0x280>)
 8105d8a:	4293      	cmp	r3, r2
 8105d8c:	d004      	beq.n	8105d98 <HAL_SAI_Init+0x1b0>
 8105d8e:	687b      	ldr	r3, [r7, #4]
 8105d90:	681b      	ldr	r3, [r3, #0]
 8105d92:	4a37      	ldr	r2, [pc, #220]	@ (8105e70 <HAL_SAI_Init+0x288>)
 8105d94:	4293      	cmp	r3, r2
 8105d96:	d106      	bne.n	8105da6 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8105d98:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8105d9c:	f04f 0100 	mov.w	r1, #0
 8105da0:	f7fe fa36 	bl	8104210 <HAL_RCCEx_GetPeriphCLKFreq>
 8105da4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	681b      	ldr	r3, [r3, #0]
 8105daa:	4a33      	ldr	r2, [pc, #204]	@ (8105e78 <HAL_SAI_Init+0x290>)
 8105dac:	4293      	cmp	r3, r2
 8105dae:	d004      	beq.n	8105dba <HAL_SAI_Init+0x1d2>
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	681b      	ldr	r3, [r3, #0]
 8105db4:	4a31      	ldr	r2, [pc, #196]	@ (8105e7c <HAL_SAI_Init+0x294>)
 8105db6:	4293      	cmp	r3, r2
 8105db8:	d106      	bne.n	8105dc8 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8105dba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8105dbe:	f04f 0100 	mov.w	r1, #0
 8105dc2:	f7fe fa25 	bl	8104210 <HAL_RCCEx_GetPeriphCLKFreq>
 8105dc6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105dc8:	687b      	ldr	r3, [r7, #4]
 8105dca:	681b      	ldr	r3, [r3, #0]
 8105dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8105e84 <HAL_SAI_Init+0x29c>)
 8105dce:	4293      	cmp	r3, r2
 8105dd0:	d004      	beq.n	8105ddc <HAL_SAI_Init+0x1f4>
 8105dd2:	687b      	ldr	r3, [r7, #4]
 8105dd4:	681b      	ldr	r3, [r3, #0]
 8105dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8105e88 <HAL_SAI_Init+0x2a0>)
 8105dd8:	4293      	cmp	r3, r2
 8105dda:	d106      	bne.n	8105dea <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8105ddc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8105de0:	f04f 0100 	mov.w	r1, #0
 8105de4:	f7fe fa14 	bl	8104210 <HAL_RCCEx_GetPeriphCLKFreq>
 8105de8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	681b      	ldr	r3, [r3, #0]
 8105dee:	4a1f      	ldr	r2, [pc, #124]	@ (8105e6c <HAL_SAI_Init+0x284>)
 8105df0:	4293      	cmp	r3, r2
 8105df2:	d106      	bne.n	8105e02 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8105df4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8105df8:	f04f 0100 	mov.w	r1, #0
 8105dfc:	f7fe fa08 	bl	8104210 <HAL_RCCEx_GetPeriphCLKFreq>
 8105e00:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	681b      	ldr	r3, [r3, #0]
 8105e06:	4a22      	ldr	r2, [pc, #136]	@ (8105e90 <HAL_SAI_Init+0x2a8>)
 8105e08:	4293      	cmp	r3, r2
 8105e0a:	d106      	bne.n	8105e1a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8105e0c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8105e10:	f04f 0100 	mov.w	r1, #0
 8105e14:	f7fe f9fc 	bl	8104210 <HAL_RCCEx_GetPeriphCLKFreq>
 8105e18:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8105e1a:	687b      	ldr	r3, [r7, #4]
 8105e1c:	699b      	ldr	r3, [r3, #24]
 8105e1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8105e22:	d139      	bne.n	8105e98 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8105e24:	687b      	ldr	r3, [r7, #4]
 8105e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105e28:	2b04      	cmp	r3, #4
 8105e2a:	d102      	bne.n	8105e32 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8105e2c:	2340      	movs	r3, #64	@ 0x40
 8105e2e:	60fb      	str	r3, [r7, #12]
 8105e30:	e00a      	b.n	8105e48 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105e36:	2b08      	cmp	r3, #8
 8105e38:	d103      	bne.n	8105e42 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8105e3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8105e3e:	60fb      	str	r3, [r7, #12]
 8105e40:	e002      	b.n	8105e48 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105e46:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8105e48:	697a      	ldr	r2, [r7, #20]
 8105e4a:	4613      	mov	r3, r2
 8105e4c:	009b      	lsls	r3, r3, #2
 8105e4e:	4413      	add	r3, r2
 8105e50:	005b      	lsls	r3, r3, #1
 8105e52:	4619      	mov	r1, r3
 8105e54:	687b      	ldr	r3, [r7, #4]
 8105e56:	6a1b      	ldr	r3, [r3, #32]
 8105e58:	68fa      	ldr	r2, [r7, #12]
 8105e5a:	fb02 f303 	mul.w	r3, r2, r3
 8105e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8105e62:	613b      	str	r3, [r7, #16]
 8105e64:	e030      	b.n	8105ec8 <HAL_SAI_Init+0x2e0>
 8105e66:	bf00      	nop
 8105e68:	40015804 	.word	0x40015804
 8105e6c:	58005404 	.word	0x58005404
 8105e70:	40015824 	.word	0x40015824
 8105e74:	40015800 	.word	0x40015800
 8105e78:	40015c04 	.word	0x40015c04
 8105e7c:	40015c24 	.word	0x40015c24
 8105e80:	40015c00 	.word	0x40015c00
 8105e84:	40016004 	.word	0x40016004
 8105e88:	40016024 	.word	0x40016024
 8105e8c:	40016000 	.word	0x40016000
 8105e90:	58005424 	.word	0x58005424
 8105e94:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8105e98:	687b      	ldr	r3, [r7, #4]
 8105e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105e9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105ea0:	d101      	bne.n	8105ea6 <HAL_SAI_Init+0x2be>
 8105ea2:	2302      	movs	r3, #2
 8105ea4:	e000      	b.n	8105ea8 <HAL_SAI_Init+0x2c0>
 8105ea6:	2301      	movs	r3, #1
 8105ea8:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8105eaa:	697a      	ldr	r2, [r7, #20]
 8105eac:	4613      	mov	r3, r2
 8105eae:	009b      	lsls	r3, r3, #2
 8105eb0:	4413      	add	r3, r2
 8105eb2:	005b      	lsls	r3, r3, #1
 8105eb4:	4619      	mov	r1, r3
 8105eb6:	687b      	ldr	r3, [r7, #4]
 8105eb8:	6a1b      	ldr	r3, [r3, #32]
 8105eba:	68ba      	ldr	r2, [r7, #8]
 8105ebc:	fb02 f303 	mul.w	r3, r2, r3
 8105ec0:	021b      	lsls	r3, r3, #8
 8105ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8105ec6:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8105ec8:	693b      	ldr	r3, [r7, #16]
 8105eca:	4a96      	ldr	r2, [pc, #600]	@ (8106124 <HAL_SAI_Init+0x53c>)
 8105ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8105ed0:	08da      	lsrs	r2, r3, #3
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8105ed6:	6939      	ldr	r1, [r7, #16]
 8105ed8:	4b92      	ldr	r3, [pc, #584]	@ (8106124 <HAL_SAI_Init+0x53c>)
 8105eda:	fba3 2301 	umull	r2, r3, r3, r1
 8105ede:	08da      	lsrs	r2, r3, #3
 8105ee0:	4613      	mov	r3, r2
 8105ee2:	009b      	lsls	r3, r3, #2
 8105ee4:	4413      	add	r3, r2
 8105ee6:	005b      	lsls	r3, r3, #1
 8105ee8:	1aca      	subs	r2, r1, r3
 8105eea:	2a08      	cmp	r2, #8
 8105eec:	d904      	bls.n	8105ef8 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105ef2:	1c5a      	adds	r2, r3, #1
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8105ef8:	687b      	ldr	r3, [r7, #4]
 8105efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105efc:	2b04      	cmp	r3, #4
 8105efe:	d104      	bne.n	8105f0a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8105f00:	687b      	ldr	r3, [r7, #4]
 8105f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105f04:	085a      	lsrs	r2, r3, #1
 8105f06:	687b      	ldr	r3, [r7, #4]
 8105f08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	685b      	ldr	r3, [r3, #4]
 8105f0e:	2b00      	cmp	r3, #0
 8105f10:	d003      	beq.n	8105f1a <HAL_SAI_Init+0x332>
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	685b      	ldr	r3, [r3, #4]
 8105f16:	2b02      	cmp	r3, #2
 8105f18:	d109      	bne.n	8105f2e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f1e:	2b01      	cmp	r3, #1
 8105f20:	d101      	bne.n	8105f26 <HAL_SAI_Init+0x33e>
 8105f22:	2300      	movs	r3, #0
 8105f24:	e001      	b.n	8105f2a <HAL_SAI_Init+0x342>
 8105f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8105f2a:	623b      	str	r3, [r7, #32]
 8105f2c:	e008      	b.n	8105f40 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f32:	2b01      	cmp	r3, #1
 8105f34:	d102      	bne.n	8105f3c <HAL_SAI_Init+0x354>
 8105f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8105f3a:	e000      	b.n	8105f3e <HAL_SAI_Init+0x356>
 8105f3c:	2300      	movs	r3, #0
 8105f3e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105f40:	f7fb ff02 	bl	8101d48 <HAL_GetREVID>
 8105f44:	4603      	mov	r3, r0
 8105f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105f4a:	d331      	bcc.n	8105fb0 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	6819      	ldr	r1, [r3, #0]
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	681a      	ldr	r2, [r3, #0]
 8105f56:	4b74      	ldr	r3, [pc, #464]	@ (8106128 <HAL_SAI_Init+0x540>)
 8105f58:	400b      	ands	r3, r1
 8105f5a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	681b      	ldr	r3, [r3, #0]
 8105f60:	6819      	ldr	r1, [r3, #0]
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	685a      	ldr	r2, [r3, #4]
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105f6a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105f70:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105f76:	431a      	orrs	r2, r3
 8105f78:	6a3b      	ldr	r3, [r7, #32]
 8105f7a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8105f7c:	69fb      	ldr	r3, [r7, #28]
 8105f7e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8105f84:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	695b      	ldr	r3, [r3, #20]
 8105f8a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105f90:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105f96:	051b      	lsls	r3, r3, #20
 8105f98:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105f9e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	691b      	ldr	r3, [r3, #16]
 8105fa4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105fa6:	687b      	ldr	r3, [r7, #4]
 8105fa8:	681b      	ldr	r3, [r3, #0]
 8105faa:	430a      	orrs	r2, r1
 8105fac:	601a      	str	r2, [r3, #0]
 8105fae:	e02d      	b.n	810600c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	681b      	ldr	r3, [r3, #0]
 8105fb4:	6819      	ldr	r1, [r3, #0]
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	681a      	ldr	r2, [r3, #0]
 8105fba:	4b5c      	ldr	r3, [pc, #368]	@ (810612c <HAL_SAI_Init+0x544>)
 8105fbc:	400b      	ands	r3, r1
 8105fbe:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	6819      	ldr	r1, [r3, #0]
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	685a      	ldr	r2, [r3, #4]
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105fce:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105fd4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105fda:	431a      	orrs	r2, r3
 8105fdc:	6a3b      	ldr	r3, [r7, #32]
 8105fde:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8105fe0:	69fb      	ldr	r3, [r7, #28]
 8105fe2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8105fe8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105fea:	687b      	ldr	r3, [r7, #4]
 8105fec:	695b      	ldr	r3, [r3, #20]
 8105fee:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105ff4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105ffa:	051b      	lsls	r3, r3, #20
 8105ffc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8105ffe:	687b      	ldr	r3, [r7, #4]
 8106000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106002:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	681b      	ldr	r3, [r3, #0]
 8106008:	430a      	orrs	r2, r1
 810600a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	681b      	ldr	r3, [r3, #0]
 8106010:	685b      	ldr	r3, [r3, #4]
 8106012:	687a      	ldr	r2, [r7, #4]
 8106014:	6812      	ldr	r2, [r2, #0]
 8106016:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 810601a:	f023 030f 	bic.w	r3, r3, #15
 810601e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8106020:	687b      	ldr	r3, [r7, #4]
 8106022:	681b      	ldr	r3, [r3, #0]
 8106024:	6859      	ldr	r1, [r3, #4]
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	69da      	ldr	r2, [r3, #28]
 810602a:	687b      	ldr	r3, [r7, #4]
 810602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810602e:	431a      	orrs	r2, r3
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106034:	431a      	orrs	r2, r3
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	430a      	orrs	r2, r1
 810603c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 810603e:	687b      	ldr	r3, [r7, #4]
 8106040:	681b      	ldr	r3, [r3, #0]
 8106042:	6899      	ldr	r1, [r3, #8]
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	681a      	ldr	r2, [r3, #0]
 8106048:	4b39      	ldr	r3, [pc, #228]	@ (8106130 <HAL_SAI_Init+0x548>)
 810604a:	400b      	ands	r3, r1
 810604c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810604e:	687b      	ldr	r3, [r7, #4]
 8106050:	681b      	ldr	r3, [r3, #0]
 8106052:	6899      	ldr	r1, [r3, #8]
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106058:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810605e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8106060:	687b      	ldr	r3, [r7, #4]
 8106062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8106064:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8106066:	687b      	ldr	r3, [r7, #4]
 8106068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 810606a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106070:	3b01      	subs	r3, #1
 8106072:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8106074:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	681b      	ldr	r3, [r3, #0]
 810607a:	430a      	orrs	r2, r1
 810607c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	681b      	ldr	r3, [r3, #0]
 8106082:	68d9      	ldr	r1, [r3, #12]
 8106084:	687b      	ldr	r3, [r7, #4]
 8106086:	681a      	ldr	r2, [r3, #0]
 8106088:	f24f 0320 	movw	r3, #61472	@ 0xf020
 810608c:	400b      	ands	r3, r1
 810608e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	68d9      	ldr	r1, [r3, #12]
 8106096:	687b      	ldr	r3, [r7, #4]
 8106098:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 810609a:	687b      	ldr	r3, [r7, #4]
 810609c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810609e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81060a4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81060a6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81060ac:	3b01      	subs	r3, #1
 81060ae:	021b      	lsls	r3, r3, #8
 81060b0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	681b      	ldr	r3, [r3, #0]
 81060b6:	430a      	orrs	r2, r1
 81060b8:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 81060ba:	687b      	ldr	r3, [r7, #4]
 81060bc:	681b      	ldr	r3, [r3, #0]
 81060be:	4a1d      	ldr	r2, [pc, #116]	@ (8106134 <HAL_SAI_Init+0x54c>)
 81060c0:	4293      	cmp	r3, r2
 81060c2:	d004      	beq.n	81060ce <HAL_SAI_Init+0x4e6>
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	4a1b      	ldr	r2, [pc, #108]	@ (8106138 <HAL_SAI_Init+0x550>)
 81060ca:	4293      	cmp	r3, r2
 81060cc:	d119      	bne.n	8106102 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 81060ce:	69bb      	ldr	r3, [r7, #24]
 81060d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81060d2:	f023 0201 	bic.w	r2, r3, #1
 81060d6:	69bb      	ldr	r3, [r7, #24]
 81060d8:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81060e0:	2b01      	cmp	r3, #1
 81060e2:	d10e      	bne.n	8106102 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81060ec:	3b01      	subs	r3, #1
 81060ee:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81060f0:	431a      	orrs	r2, r3
 81060f2:	69bb      	ldr	r3, [r7, #24]
 81060f4:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81060f6:	69bb      	ldr	r3, [r7, #24]
 81060f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81060fa:	f043 0201 	orr.w	r2, r3, #1
 81060fe:	69bb      	ldr	r3, [r7, #24]
 8106100:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8106102:	687b      	ldr	r3, [r7, #4]
 8106104:	2200      	movs	r2, #0
 8106106:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 810610a:	687b      	ldr	r3, [r7, #4]
 810610c:	2201      	movs	r2, #1
 810610e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	2200      	movs	r2, #0
 8106116:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 810611a:	2300      	movs	r3, #0
}
 810611c:	4618      	mov	r0, r3
 810611e:	3728      	adds	r7, #40	@ 0x28
 8106120:	46bd      	mov	sp, r7
 8106122:	bd80      	pop	{r7, pc}
 8106124:	cccccccd 	.word	0xcccccccd
 8106128:	f005c010 	.word	0xf005c010
 810612c:	f805c010 	.word	0xf805c010
 8106130:	fff88000 	.word	0xfff88000
 8106134:	40015804 	.word	0x40015804
 8106138:	58005404 	.word	0x58005404

0810613c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 810613c:	b480      	push	{r7}
 810613e:	b085      	sub	sp, #20
 8106140:	af00      	add	r7, sp, #0
 8106142:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8106144:	4b18      	ldr	r3, [pc, #96]	@ (81061a8 <SAI_Disable+0x6c>)
 8106146:	681b      	ldr	r3, [r3, #0]
 8106148:	4a18      	ldr	r2, [pc, #96]	@ (81061ac <SAI_Disable+0x70>)
 810614a:	fba2 2303 	umull	r2, r3, r2, r3
 810614e:	0b1b      	lsrs	r3, r3, #12
 8106150:	009b      	lsls	r3, r3, #2
 8106152:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8106154:	2300      	movs	r3, #0
 8106156:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8106158:	687b      	ldr	r3, [r7, #4]
 810615a:	681b      	ldr	r3, [r3, #0]
 810615c:	681a      	ldr	r2, [r3, #0]
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	681b      	ldr	r3, [r3, #0]
 8106162:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8106166:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8106168:	68fb      	ldr	r3, [r7, #12]
 810616a:	2b00      	cmp	r3, #0
 810616c:	d10a      	bne.n	8106184 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 810616e:	687b      	ldr	r3, [r7, #4]
 8106170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106174:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8106178:	687b      	ldr	r3, [r7, #4]
 810617a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 810617e:	2303      	movs	r3, #3
 8106180:	72fb      	strb	r3, [r7, #11]
      break;
 8106182:	e009      	b.n	8106198 <SAI_Disable+0x5c>
    }
    count--;
 8106184:	68fb      	ldr	r3, [r7, #12]
 8106186:	3b01      	subs	r3, #1
 8106188:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	681b      	ldr	r3, [r3, #0]
 8106190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106194:	2b00      	cmp	r3, #0
 8106196:	d1e7      	bne.n	8106168 <SAI_Disable+0x2c>

  return status;
 8106198:	7afb      	ldrb	r3, [r7, #11]
}
 810619a:	4618      	mov	r0, r3
 810619c:	3714      	adds	r7, #20
 810619e:	46bd      	mov	sp, r7
 81061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061a4:	4770      	bx	lr
 81061a6:	bf00      	nop
 81061a8:	10000000 	.word	0x10000000
 81061ac:	95cbec1b 	.word	0x95cbec1b

081061b0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 81061b0:	b580      	push	{r7, lr}
 81061b2:	b084      	sub	sp, #16
 81061b4:	af00      	add	r7, sp, #0
 81061b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	2b00      	cmp	r3, #0
 81061bc:	d101      	bne.n	81061c2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 81061be:	2301      	movs	r3, #1
 81061c0:	e05e      	b.n	8106280 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 81061c2:	687b      	ldr	r3, [r7, #4]
 81061c4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 81061c8:	b2db      	uxtb	r3, r3
 81061ca:	2b00      	cmp	r3, #0
 81061cc:	d106      	bne.n	81061dc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 81061ce:	687b      	ldr	r3, [r7, #4]
 81061d0:	2200      	movs	r2, #0
 81061d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 81061d6:	6878      	ldr	r0, [r7, #4]
 81061d8:	f7fa ff6c 	bl	81010b4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 81061dc:	687b      	ldr	r3, [r7, #4]
 81061de:	2202      	movs	r2, #2
 81061e0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 81061e4:	687b      	ldr	r3, [r7, #4]
 81061e6:	681b      	ldr	r3, [r3, #0]
 81061e8:	681a      	ldr	r2, [r3, #0]
 81061ea:	687b      	ldr	r3, [r7, #4]
 81061ec:	681b      	ldr	r3, [r3, #0]
 81061ee:	f022 0203 	bic.w	r2, r2, #3
 81061f2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	681b      	ldr	r3, [r3, #0]
 81061f8:	681b      	ldr	r3, [r3, #0]
 81061fa:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 81061fc:	68fa      	ldr	r2, [r7, #12]
 81061fe:	4b22      	ldr	r3, [pc, #136]	@ (8106288 <HAL_SPDIFRX_Init+0xd8>)
 8106200:	4013      	ands	r3, r2
 8106202:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8106208:	687b      	ldr	r3, [r7, #4]
 810620a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 810620c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8106212:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8106218:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 810621e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8106220:	687b      	ldr	r3, [r7, #4]
 8106222:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8106224:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 810622a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 810622c:	687b      	ldr	r3, [r7, #4]
 810622e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8106230:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8106236:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 810623c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 810623e:	68fa      	ldr	r2, [r7, #12]
 8106240:	4313      	orrs	r3, r2
 8106242:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810624a:	2b01      	cmp	r3, #1
 810624c:	d103      	bne.n	8106256 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 810624e:	68fb      	ldr	r3, [r7, #12]
 8106250:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106254:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8106256:	687b      	ldr	r3, [r7, #4]
 8106258:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810625c:	2b01      	cmp	r3, #1
 810625e:	d103      	bne.n	8106268 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8106260:	68fb      	ldr	r3, [r7, #12]
 8106262:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8106266:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8106268:	687b      	ldr	r3, [r7, #4]
 810626a:	681b      	ldr	r3, [r3, #0]
 810626c:	68fa      	ldr	r2, [r7, #12]
 810626e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	2200      	movs	r2, #0
 8106274:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	2201      	movs	r2, #1
 810627a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 810627e:	2300      	movs	r3, #0
}
 8106280:	4618      	mov	r0, r3
 8106282:	3710      	adds	r7, #16
 8106284:	46bd      	mov	sp, r7
 8106286:	bd80      	pop	{r7, pc}
 8106288:	ffc88407 	.word	0xffc88407

0810628c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810628c:	b580      	push	{r7, lr}
 810628e:	b084      	sub	sp, #16
 8106290:	af00      	add	r7, sp, #0
 8106292:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8106294:	687b      	ldr	r3, [r7, #4]
 8106296:	2b00      	cmp	r3, #0
 8106298:	d101      	bne.n	810629e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810629a:	2301      	movs	r3, #1
 810629c:	e10f      	b.n	81064be <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810629e:	687b      	ldr	r3, [r7, #4]
 81062a0:	2200      	movs	r2, #0
 81062a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	681b      	ldr	r3, [r3, #0]
 81062a8:	4a87      	ldr	r2, [pc, #540]	@ (81064c8 <HAL_SPI_Init+0x23c>)
 81062aa:	4293      	cmp	r3, r2
 81062ac:	d00f      	beq.n	81062ce <HAL_SPI_Init+0x42>
 81062ae:	687b      	ldr	r3, [r7, #4]
 81062b0:	681b      	ldr	r3, [r3, #0]
 81062b2:	4a86      	ldr	r2, [pc, #536]	@ (81064cc <HAL_SPI_Init+0x240>)
 81062b4:	4293      	cmp	r3, r2
 81062b6:	d00a      	beq.n	81062ce <HAL_SPI_Init+0x42>
 81062b8:	687b      	ldr	r3, [r7, #4]
 81062ba:	681b      	ldr	r3, [r3, #0]
 81062bc:	4a84      	ldr	r2, [pc, #528]	@ (81064d0 <HAL_SPI_Init+0x244>)
 81062be:	4293      	cmp	r3, r2
 81062c0:	d005      	beq.n	81062ce <HAL_SPI_Init+0x42>
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	68db      	ldr	r3, [r3, #12]
 81062c6:	2b0f      	cmp	r3, #15
 81062c8:	d901      	bls.n	81062ce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81062ca:	2301      	movs	r3, #1
 81062cc:	e0f7      	b.n	81064be <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81062ce:	6878      	ldr	r0, [r7, #4]
 81062d0:	f000 f900 	bl	81064d4 <SPI_GetPacketSize>
 81062d4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	681b      	ldr	r3, [r3, #0]
 81062da:	4a7b      	ldr	r2, [pc, #492]	@ (81064c8 <HAL_SPI_Init+0x23c>)
 81062dc:	4293      	cmp	r3, r2
 81062de:	d00c      	beq.n	81062fa <HAL_SPI_Init+0x6e>
 81062e0:	687b      	ldr	r3, [r7, #4]
 81062e2:	681b      	ldr	r3, [r3, #0]
 81062e4:	4a79      	ldr	r2, [pc, #484]	@ (81064cc <HAL_SPI_Init+0x240>)
 81062e6:	4293      	cmp	r3, r2
 81062e8:	d007      	beq.n	81062fa <HAL_SPI_Init+0x6e>
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	681b      	ldr	r3, [r3, #0]
 81062ee:	4a78      	ldr	r2, [pc, #480]	@ (81064d0 <HAL_SPI_Init+0x244>)
 81062f0:	4293      	cmp	r3, r2
 81062f2:	d002      	beq.n	81062fa <HAL_SPI_Init+0x6e>
 81062f4:	68fb      	ldr	r3, [r7, #12]
 81062f6:	2b08      	cmp	r3, #8
 81062f8:	d811      	bhi.n	810631e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81062fa:	687b      	ldr	r3, [r7, #4]
 81062fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81062fe:	4a72      	ldr	r2, [pc, #456]	@ (81064c8 <HAL_SPI_Init+0x23c>)
 8106300:	4293      	cmp	r3, r2
 8106302:	d009      	beq.n	8106318 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106304:	687b      	ldr	r3, [r7, #4]
 8106306:	681b      	ldr	r3, [r3, #0]
 8106308:	4a70      	ldr	r2, [pc, #448]	@ (81064cc <HAL_SPI_Init+0x240>)
 810630a:	4293      	cmp	r3, r2
 810630c:	d004      	beq.n	8106318 <HAL_SPI_Init+0x8c>
 810630e:	687b      	ldr	r3, [r7, #4]
 8106310:	681b      	ldr	r3, [r3, #0]
 8106312:	4a6f      	ldr	r2, [pc, #444]	@ (81064d0 <HAL_SPI_Init+0x244>)
 8106314:	4293      	cmp	r3, r2
 8106316:	d104      	bne.n	8106322 <HAL_SPI_Init+0x96>
 8106318:	68fb      	ldr	r3, [r7, #12]
 810631a:	2b10      	cmp	r3, #16
 810631c:	d901      	bls.n	8106322 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810631e:	2301      	movs	r3, #1
 8106320:	e0cd      	b.n	81064be <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8106328:	b2db      	uxtb	r3, r3
 810632a:	2b00      	cmp	r3, #0
 810632c:	d106      	bne.n	810633c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810632e:	687b      	ldr	r3, [r7, #4]
 8106330:	2200      	movs	r2, #0
 8106332:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8106336:	6878      	ldr	r0, [r7, #4]
 8106338:	f7fa ff22 	bl	8101180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	2202      	movs	r2, #2
 8106340:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	681a      	ldr	r2, [r3, #0]
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	681b      	ldr	r3, [r3, #0]
 810634e:	f022 0201 	bic.w	r2, r2, #1
 8106352:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	681b      	ldr	r3, [r3, #0]
 8106358:	689b      	ldr	r3, [r3, #8]
 810635a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810635e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	699b      	ldr	r3, [r3, #24]
 8106364:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106368:	d119      	bne.n	810639e <HAL_SPI_Init+0x112>
 810636a:	687b      	ldr	r3, [r7, #4]
 810636c:	685b      	ldr	r3, [r3, #4]
 810636e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106372:	d103      	bne.n	810637c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106378:	2b00      	cmp	r3, #0
 810637a:	d008      	beq.n	810638e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106380:	2b00      	cmp	r3, #0
 8106382:	d10c      	bne.n	810639e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810638c:	d107      	bne.n	810639e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810638e:	687b      	ldr	r3, [r7, #4]
 8106390:	681b      	ldr	r3, [r3, #0]
 8106392:	681a      	ldr	r2, [r3, #0]
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	681b      	ldr	r3, [r3, #0]
 8106398:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 810639c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810639e:	687b      	ldr	r3, [r7, #4]
 81063a0:	685b      	ldr	r3, [r3, #4]
 81063a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81063a6:	2b00      	cmp	r3, #0
 81063a8:	d00f      	beq.n	81063ca <HAL_SPI_Init+0x13e>
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	68db      	ldr	r3, [r3, #12]
 81063ae:	2b06      	cmp	r3, #6
 81063b0:	d90b      	bls.n	81063ca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	681b      	ldr	r3, [r3, #0]
 81063b6:	681b      	ldr	r3, [r3, #0]
 81063b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	681b      	ldr	r3, [r3, #0]
 81063c4:	430a      	orrs	r2, r1
 81063c6:	601a      	str	r2, [r3, #0]
 81063c8:	e007      	b.n	81063da <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 81063ca:	687b      	ldr	r3, [r7, #4]
 81063cc:	681b      	ldr	r3, [r3, #0]
 81063ce:	681a      	ldr	r2, [r3, #0]
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	681b      	ldr	r3, [r3, #0]
 81063d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81063d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81063da:	687b      	ldr	r3, [r7, #4]
 81063dc:	69da      	ldr	r2, [r3, #28]
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063e2:	431a      	orrs	r2, r3
 81063e4:	68bb      	ldr	r3, [r7, #8]
 81063e6:	431a      	orrs	r2, r3
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81063ec:	ea42 0103 	orr.w	r1, r2, r3
 81063f0:	687b      	ldr	r3, [r7, #4]
 81063f2:	68da      	ldr	r2, [r3, #12]
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	681b      	ldr	r3, [r3, #0]
 81063f8:	430a      	orrs	r2, r1
 81063fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106404:	431a      	orrs	r2, r3
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810640a:	431a      	orrs	r2, r3
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	699b      	ldr	r3, [r3, #24]
 8106410:	431a      	orrs	r2, r3
 8106412:	687b      	ldr	r3, [r7, #4]
 8106414:	691b      	ldr	r3, [r3, #16]
 8106416:	431a      	orrs	r2, r3
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	695b      	ldr	r3, [r3, #20]
 810641c:	431a      	orrs	r2, r3
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	6a1b      	ldr	r3, [r3, #32]
 8106422:	431a      	orrs	r2, r3
 8106424:	687b      	ldr	r3, [r7, #4]
 8106426:	685b      	ldr	r3, [r3, #4]
 8106428:	431a      	orrs	r2, r3
 810642a:	687b      	ldr	r3, [r7, #4]
 810642c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810642e:	431a      	orrs	r2, r3
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	689b      	ldr	r3, [r3, #8]
 8106434:	431a      	orrs	r2, r3
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810643a:	ea42 0103 	orr.w	r1, r2, r3
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	681b      	ldr	r3, [r3, #0]
 8106446:	430a      	orrs	r2, r1
 8106448:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810644a:	687b      	ldr	r3, [r7, #4]
 810644c:	685b      	ldr	r3, [r3, #4]
 810644e:	2b00      	cmp	r3, #0
 8106450:	d113      	bne.n	810647a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	681b      	ldr	r3, [r3, #0]
 8106456:	689b      	ldr	r3, [r3, #8]
 8106458:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8106464:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	681b      	ldr	r3, [r3, #0]
 810646a:	689b      	ldr	r3, [r3, #8]
 810646c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8106478:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	681b      	ldr	r3, [r3, #0]
 810647e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	681b      	ldr	r3, [r3, #0]
 8106484:	f022 0201 	bic.w	r2, r2, #1
 8106488:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	685b      	ldr	r3, [r3, #4]
 810648e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8106492:	2b00      	cmp	r3, #0
 8106494:	d00a      	beq.n	81064ac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	681b      	ldr	r3, [r3, #0]
 810649a:	68db      	ldr	r3, [r3, #12]
 810649c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81064a0:	687b      	ldr	r3, [r7, #4]
 81064a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	681b      	ldr	r3, [r3, #0]
 81064a8:	430a      	orrs	r2, r1
 81064aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	2200      	movs	r2, #0
 81064b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	2201      	movs	r2, #1
 81064b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 81064bc:	2300      	movs	r3, #0
}
 81064be:	4618      	mov	r0, r3
 81064c0:	3710      	adds	r7, #16
 81064c2:	46bd      	mov	sp, r7
 81064c4:	bd80      	pop	{r7, pc}
 81064c6:	bf00      	nop
 81064c8:	40013000 	.word	0x40013000
 81064cc:	40003800 	.word	0x40003800
 81064d0:	40003c00 	.word	0x40003c00

081064d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 81064d4:	b480      	push	{r7}
 81064d6:	b085      	sub	sp, #20
 81064d8:	af00      	add	r7, sp, #0
 81064da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81064e0:	095b      	lsrs	r3, r3, #5
 81064e2:	3301      	adds	r3, #1
 81064e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	68db      	ldr	r3, [r3, #12]
 81064ea:	3301      	adds	r3, #1
 81064ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81064ee:	68bb      	ldr	r3, [r7, #8]
 81064f0:	3307      	adds	r3, #7
 81064f2:	08db      	lsrs	r3, r3, #3
 81064f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81064f6:	68bb      	ldr	r3, [r7, #8]
 81064f8:	68fa      	ldr	r2, [r7, #12]
 81064fa:	fb02 f303 	mul.w	r3, r2, r3
}
 81064fe:	4618      	mov	r0, r3
 8106500:	3714      	adds	r7, #20
 8106502:	46bd      	mov	sp, r7
 8106504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106508:	4770      	bx	lr

0810650a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810650a:	b580      	push	{r7, lr}
 810650c:	b082      	sub	sp, #8
 810650e:	af00      	add	r7, sp, #0
 8106510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	2b00      	cmp	r3, #0
 8106516:	d101      	bne.n	810651c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106518:	2301      	movs	r3, #1
 810651a:	e049      	b.n	81065b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106522:	b2db      	uxtb	r3, r3
 8106524:	2b00      	cmp	r3, #0
 8106526:	d106      	bne.n	8106536 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	2200      	movs	r2, #0
 810652c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106530:	6878      	ldr	r0, [r7, #4]
 8106532:	f7fa ff77 	bl	8101424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106536:	687b      	ldr	r3, [r7, #4]
 8106538:	2202      	movs	r2, #2
 810653a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810653e:	687b      	ldr	r3, [r7, #4]
 8106540:	681a      	ldr	r2, [r3, #0]
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	3304      	adds	r3, #4
 8106546:	4619      	mov	r1, r3
 8106548:	4610      	mov	r0, r2
 810654a:	f000 fb47 	bl	8106bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810654e:	687b      	ldr	r3, [r7, #4]
 8106550:	2201      	movs	r2, #1
 8106552:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106556:	687b      	ldr	r3, [r7, #4]
 8106558:	2201      	movs	r2, #1
 810655a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810655e:	687b      	ldr	r3, [r7, #4]
 8106560:	2201      	movs	r2, #1
 8106562:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106566:	687b      	ldr	r3, [r7, #4]
 8106568:	2201      	movs	r2, #1
 810656a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810656e:	687b      	ldr	r3, [r7, #4]
 8106570:	2201      	movs	r2, #1
 8106572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106576:	687b      	ldr	r3, [r7, #4]
 8106578:	2201      	movs	r2, #1
 810657a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	2201      	movs	r2, #1
 8106582:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106586:	687b      	ldr	r3, [r7, #4]
 8106588:	2201      	movs	r2, #1
 810658a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	2201      	movs	r2, #1
 8106592:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106596:	687b      	ldr	r3, [r7, #4]
 8106598:	2201      	movs	r2, #1
 810659a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	2201      	movs	r2, #1
 81065a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	2201      	movs	r2, #1
 81065aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81065ae:	2300      	movs	r3, #0
}
 81065b0:	4618      	mov	r0, r3
 81065b2:	3708      	adds	r7, #8
 81065b4:	46bd      	mov	sp, r7
 81065b6:	bd80      	pop	{r7, pc}

081065b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81065b8:	b480      	push	{r7}
 81065ba:	b085      	sub	sp, #20
 81065bc:	af00      	add	r7, sp, #0
 81065be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81065c0:	687b      	ldr	r3, [r7, #4]
 81065c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81065c6:	b2db      	uxtb	r3, r3
 81065c8:	2b01      	cmp	r3, #1
 81065ca:	d001      	beq.n	81065d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81065cc:	2301      	movs	r3, #1
 81065ce:	e054      	b.n	810667a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	2202      	movs	r2, #2
 81065d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81065d8:	687b      	ldr	r3, [r7, #4]
 81065da:	681b      	ldr	r3, [r3, #0]
 81065dc:	68da      	ldr	r2, [r3, #12]
 81065de:	687b      	ldr	r3, [r7, #4]
 81065e0:	681b      	ldr	r3, [r3, #0]
 81065e2:	f042 0201 	orr.w	r2, r2, #1
 81065e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81065e8:	687b      	ldr	r3, [r7, #4]
 81065ea:	681b      	ldr	r3, [r3, #0]
 81065ec:	4a26      	ldr	r2, [pc, #152]	@ (8106688 <HAL_TIM_Base_Start_IT+0xd0>)
 81065ee:	4293      	cmp	r3, r2
 81065f0:	d022      	beq.n	8106638 <HAL_TIM_Base_Start_IT+0x80>
 81065f2:	687b      	ldr	r3, [r7, #4]
 81065f4:	681b      	ldr	r3, [r3, #0]
 81065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81065fa:	d01d      	beq.n	8106638 <HAL_TIM_Base_Start_IT+0x80>
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	4a22      	ldr	r2, [pc, #136]	@ (810668c <HAL_TIM_Base_Start_IT+0xd4>)
 8106602:	4293      	cmp	r3, r2
 8106604:	d018      	beq.n	8106638 <HAL_TIM_Base_Start_IT+0x80>
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	681b      	ldr	r3, [r3, #0]
 810660a:	4a21      	ldr	r2, [pc, #132]	@ (8106690 <HAL_TIM_Base_Start_IT+0xd8>)
 810660c:	4293      	cmp	r3, r2
 810660e:	d013      	beq.n	8106638 <HAL_TIM_Base_Start_IT+0x80>
 8106610:	687b      	ldr	r3, [r7, #4]
 8106612:	681b      	ldr	r3, [r3, #0]
 8106614:	4a1f      	ldr	r2, [pc, #124]	@ (8106694 <HAL_TIM_Base_Start_IT+0xdc>)
 8106616:	4293      	cmp	r3, r2
 8106618:	d00e      	beq.n	8106638 <HAL_TIM_Base_Start_IT+0x80>
 810661a:	687b      	ldr	r3, [r7, #4]
 810661c:	681b      	ldr	r3, [r3, #0]
 810661e:	4a1e      	ldr	r2, [pc, #120]	@ (8106698 <HAL_TIM_Base_Start_IT+0xe0>)
 8106620:	4293      	cmp	r3, r2
 8106622:	d009      	beq.n	8106638 <HAL_TIM_Base_Start_IT+0x80>
 8106624:	687b      	ldr	r3, [r7, #4]
 8106626:	681b      	ldr	r3, [r3, #0]
 8106628:	4a1c      	ldr	r2, [pc, #112]	@ (810669c <HAL_TIM_Base_Start_IT+0xe4>)
 810662a:	4293      	cmp	r3, r2
 810662c:	d004      	beq.n	8106638 <HAL_TIM_Base_Start_IT+0x80>
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	681b      	ldr	r3, [r3, #0]
 8106632:	4a1b      	ldr	r2, [pc, #108]	@ (81066a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8106634:	4293      	cmp	r3, r2
 8106636:	d115      	bne.n	8106664 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	681b      	ldr	r3, [r3, #0]
 810663c:	689a      	ldr	r2, [r3, #8]
 810663e:	4b19      	ldr	r3, [pc, #100]	@ (81066a4 <HAL_TIM_Base_Start_IT+0xec>)
 8106640:	4013      	ands	r3, r2
 8106642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106644:	68fb      	ldr	r3, [r7, #12]
 8106646:	2b06      	cmp	r3, #6
 8106648:	d015      	beq.n	8106676 <HAL_TIM_Base_Start_IT+0xbe>
 810664a:	68fb      	ldr	r3, [r7, #12]
 810664c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106650:	d011      	beq.n	8106676 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	681b      	ldr	r3, [r3, #0]
 8106656:	681a      	ldr	r2, [r3, #0]
 8106658:	687b      	ldr	r3, [r7, #4]
 810665a:	681b      	ldr	r3, [r3, #0]
 810665c:	f042 0201 	orr.w	r2, r2, #1
 8106660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106662:	e008      	b.n	8106676 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	681b      	ldr	r3, [r3, #0]
 8106668:	681a      	ldr	r2, [r3, #0]
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	681b      	ldr	r3, [r3, #0]
 810666e:	f042 0201 	orr.w	r2, r2, #1
 8106672:	601a      	str	r2, [r3, #0]
 8106674:	e000      	b.n	8106678 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106676:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106678:	2300      	movs	r3, #0
}
 810667a:	4618      	mov	r0, r3
 810667c:	3714      	adds	r7, #20
 810667e:	46bd      	mov	sp, r7
 8106680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106684:	4770      	bx	lr
 8106686:	bf00      	nop
 8106688:	40010000 	.word	0x40010000
 810668c:	40000400 	.word	0x40000400
 8106690:	40000800 	.word	0x40000800
 8106694:	40000c00 	.word	0x40000c00
 8106698:	40010400 	.word	0x40010400
 810669c:	40001800 	.word	0x40001800
 81066a0:	40014000 	.word	0x40014000
 81066a4:	00010007 	.word	0x00010007

081066a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81066a8:	b580      	push	{r7, lr}
 81066aa:	b082      	sub	sp, #8
 81066ac:	af00      	add	r7, sp, #0
 81066ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81066b0:	687b      	ldr	r3, [r7, #4]
 81066b2:	2b00      	cmp	r3, #0
 81066b4:	d101      	bne.n	81066ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81066b6:	2301      	movs	r3, #1
 81066b8:	e049      	b.n	810674e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81066ba:	687b      	ldr	r3, [r7, #4]
 81066bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81066c0:	b2db      	uxtb	r3, r3
 81066c2:	2b00      	cmp	r3, #0
 81066c4:	d106      	bne.n	81066d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	2200      	movs	r2, #0
 81066ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81066ce:	6878      	ldr	r0, [r7, #4]
 81066d0:	f7fa fe5e 	bl	8101390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	2202      	movs	r2, #2
 81066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81066dc:	687b      	ldr	r3, [r7, #4]
 81066de:	681a      	ldr	r2, [r3, #0]
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	3304      	adds	r3, #4
 81066e4:	4619      	mov	r1, r3
 81066e6:	4610      	mov	r0, r2
 81066e8:	f000 fa78 	bl	8106bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81066ec:	687b      	ldr	r3, [r7, #4]
 81066ee:	2201      	movs	r2, #1
 81066f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	2201      	movs	r2, #1
 81066f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	2201      	movs	r2, #1
 8106700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106704:	687b      	ldr	r3, [r7, #4]
 8106706:	2201      	movs	r2, #1
 8106708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	2201      	movs	r2, #1
 8106710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106714:	687b      	ldr	r3, [r7, #4]
 8106716:	2201      	movs	r2, #1
 8106718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810671c:	687b      	ldr	r3, [r7, #4]
 810671e:	2201      	movs	r2, #1
 8106720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	2201      	movs	r2, #1
 8106728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810672c:	687b      	ldr	r3, [r7, #4]
 810672e:	2201      	movs	r2, #1
 8106730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106734:	687b      	ldr	r3, [r7, #4]
 8106736:	2201      	movs	r2, #1
 8106738:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810673c:	687b      	ldr	r3, [r7, #4]
 810673e:	2201      	movs	r2, #1
 8106740:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	2201      	movs	r2, #1
 8106748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810674c:	2300      	movs	r3, #0
}
 810674e:	4618      	mov	r0, r3
 8106750:	3708      	adds	r7, #8
 8106752:	46bd      	mov	sp, r7
 8106754:	bd80      	pop	{r7, pc}

08106756 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106756:	b580      	push	{r7, lr}
 8106758:	b084      	sub	sp, #16
 810675a:	af00      	add	r7, sp, #0
 810675c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810675e:	687b      	ldr	r3, [r7, #4]
 8106760:	681b      	ldr	r3, [r3, #0]
 8106762:	68db      	ldr	r3, [r3, #12]
 8106764:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8106766:	687b      	ldr	r3, [r7, #4]
 8106768:	681b      	ldr	r3, [r3, #0]
 810676a:	691b      	ldr	r3, [r3, #16]
 810676c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810676e:	68bb      	ldr	r3, [r7, #8]
 8106770:	f003 0302 	and.w	r3, r3, #2
 8106774:	2b00      	cmp	r3, #0
 8106776:	d020      	beq.n	81067ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8106778:	68fb      	ldr	r3, [r7, #12]
 810677a:	f003 0302 	and.w	r3, r3, #2
 810677e:	2b00      	cmp	r3, #0
 8106780:	d01b      	beq.n	81067ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	681b      	ldr	r3, [r3, #0]
 8106786:	f06f 0202 	mvn.w	r2, #2
 810678a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810678c:	687b      	ldr	r3, [r7, #4]
 810678e:	2201      	movs	r2, #1
 8106790:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	699b      	ldr	r3, [r3, #24]
 8106798:	f003 0303 	and.w	r3, r3, #3
 810679c:	2b00      	cmp	r3, #0
 810679e:	d003      	beq.n	81067a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81067a0:	6878      	ldr	r0, [r7, #4]
 81067a2:	f000 f9fd 	bl	8106ba0 <HAL_TIM_IC_CaptureCallback>
 81067a6:	e005      	b.n	81067b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81067a8:	6878      	ldr	r0, [r7, #4]
 81067aa:	f000 f9ef 	bl	8106b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81067ae:	6878      	ldr	r0, [r7, #4]
 81067b0:	f000 fa00 	bl	8106bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81067b4:	687b      	ldr	r3, [r7, #4]
 81067b6:	2200      	movs	r2, #0
 81067b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81067ba:	68bb      	ldr	r3, [r7, #8]
 81067bc:	f003 0304 	and.w	r3, r3, #4
 81067c0:	2b00      	cmp	r3, #0
 81067c2:	d020      	beq.n	8106806 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 81067c4:	68fb      	ldr	r3, [r7, #12]
 81067c6:	f003 0304 	and.w	r3, r3, #4
 81067ca:	2b00      	cmp	r3, #0
 81067cc:	d01b      	beq.n	8106806 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	681b      	ldr	r3, [r3, #0]
 81067d2:	f06f 0204 	mvn.w	r2, #4
 81067d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	2202      	movs	r2, #2
 81067dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	681b      	ldr	r3, [r3, #0]
 81067e2:	699b      	ldr	r3, [r3, #24]
 81067e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81067e8:	2b00      	cmp	r3, #0
 81067ea:	d003      	beq.n	81067f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81067ec:	6878      	ldr	r0, [r7, #4]
 81067ee:	f000 f9d7 	bl	8106ba0 <HAL_TIM_IC_CaptureCallback>
 81067f2:	e005      	b.n	8106800 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81067f4:	6878      	ldr	r0, [r7, #4]
 81067f6:	f000 f9c9 	bl	8106b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81067fa:	6878      	ldr	r0, [r7, #4]
 81067fc:	f000 f9da 	bl	8106bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106800:	687b      	ldr	r3, [r7, #4]
 8106802:	2200      	movs	r2, #0
 8106804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8106806:	68bb      	ldr	r3, [r7, #8]
 8106808:	f003 0308 	and.w	r3, r3, #8
 810680c:	2b00      	cmp	r3, #0
 810680e:	d020      	beq.n	8106852 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8106810:	68fb      	ldr	r3, [r7, #12]
 8106812:	f003 0308 	and.w	r3, r3, #8
 8106816:	2b00      	cmp	r3, #0
 8106818:	d01b      	beq.n	8106852 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810681a:	687b      	ldr	r3, [r7, #4]
 810681c:	681b      	ldr	r3, [r3, #0]
 810681e:	f06f 0208 	mvn.w	r2, #8
 8106822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	2204      	movs	r2, #4
 8106828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810682a:	687b      	ldr	r3, [r7, #4]
 810682c:	681b      	ldr	r3, [r3, #0]
 810682e:	69db      	ldr	r3, [r3, #28]
 8106830:	f003 0303 	and.w	r3, r3, #3
 8106834:	2b00      	cmp	r3, #0
 8106836:	d003      	beq.n	8106840 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106838:	6878      	ldr	r0, [r7, #4]
 810683a:	f000 f9b1 	bl	8106ba0 <HAL_TIM_IC_CaptureCallback>
 810683e:	e005      	b.n	810684c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106840:	6878      	ldr	r0, [r7, #4]
 8106842:	f000 f9a3 	bl	8106b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106846:	6878      	ldr	r0, [r7, #4]
 8106848:	f000 f9b4 	bl	8106bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	2200      	movs	r2, #0
 8106850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8106852:	68bb      	ldr	r3, [r7, #8]
 8106854:	f003 0310 	and.w	r3, r3, #16
 8106858:	2b00      	cmp	r3, #0
 810685a:	d020      	beq.n	810689e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810685c:	68fb      	ldr	r3, [r7, #12]
 810685e:	f003 0310 	and.w	r3, r3, #16
 8106862:	2b00      	cmp	r3, #0
 8106864:	d01b      	beq.n	810689e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	681b      	ldr	r3, [r3, #0]
 810686a:	f06f 0210 	mvn.w	r2, #16
 810686e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106870:	687b      	ldr	r3, [r7, #4]
 8106872:	2208      	movs	r2, #8
 8106874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106876:	687b      	ldr	r3, [r7, #4]
 8106878:	681b      	ldr	r3, [r3, #0]
 810687a:	69db      	ldr	r3, [r3, #28]
 810687c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106880:	2b00      	cmp	r3, #0
 8106882:	d003      	beq.n	810688c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106884:	6878      	ldr	r0, [r7, #4]
 8106886:	f000 f98b 	bl	8106ba0 <HAL_TIM_IC_CaptureCallback>
 810688a:	e005      	b.n	8106898 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810688c:	6878      	ldr	r0, [r7, #4]
 810688e:	f000 f97d 	bl	8106b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106892:	6878      	ldr	r0, [r7, #4]
 8106894:	f000 f98e 	bl	8106bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	2200      	movs	r2, #0
 810689c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810689e:	68bb      	ldr	r3, [r7, #8]
 81068a0:	f003 0301 	and.w	r3, r3, #1
 81068a4:	2b00      	cmp	r3, #0
 81068a6:	d00c      	beq.n	81068c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81068a8:	68fb      	ldr	r3, [r7, #12]
 81068aa:	f003 0301 	and.w	r3, r3, #1
 81068ae:	2b00      	cmp	r3, #0
 81068b0:	d007      	beq.n	81068c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 81068b2:	687b      	ldr	r3, [r7, #4]
 81068b4:	681b      	ldr	r3, [r3, #0]
 81068b6:	f06f 0201 	mvn.w	r2, #1
 81068ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81068bc:	6878      	ldr	r0, [r7, #4]
 81068be:	f7fa fb1f 	bl	8100f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81068c2:	68bb      	ldr	r3, [r7, #8]
 81068c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81068c8:	2b00      	cmp	r3, #0
 81068ca:	d104      	bne.n	81068d6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 81068cc:	68bb      	ldr	r3, [r7, #8]
 81068ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81068d2:	2b00      	cmp	r3, #0
 81068d4:	d00c      	beq.n	81068f0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81068d6:	68fb      	ldr	r3, [r7, #12]
 81068d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81068dc:	2b00      	cmp	r3, #0
 81068de:	d007      	beq.n	81068f0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	681b      	ldr	r3, [r3, #0]
 81068e4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 81068e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81068ea:	6878      	ldr	r0, [r7, #4]
 81068ec:	f000 fe02 	bl	81074f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 81068f0:	68bb      	ldr	r3, [r7, #8]
 81068f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81068f6:	2b00      	cmp	r3, #0
 81068f8:	d00c      	beq.n	8106914 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81068fa:	68fb      	ldr	r3, [r7, #12]
 81068fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106900:	2b00      	cmp	r3, #0
 8106902:	d007      	beq.n	8106914 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106904:	687b      	ldr	r3, [r7, #4]
 8106906:	681b      	ldr	r3, [r3, #0]
 8106908:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810690c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810690e:	6878      	ldr	r0, [r7, #4]
 8106910:	f000 fdfa 	bl	8107508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8106914:	68bb      	ldr	r3, [r7, #8]
 8106916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810691a:	2b00      	cmp	r3, #0
 810691c:	d00c      	beq.n	8106938 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810691e:	68fb      	ldr	r3, [r7, #12]
 8106920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106924:	2b00      	cmp	r3, #0
 8106926:	d007      	beq.n	8106938 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8106928:	687b      	ldr	r3, [r7, #4]
 810692a:	681b      	ldr	r3, [r3, #0]
 810692c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8106930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106932:	6878      	ldr	r0, [r7, #4]
 8106934:	f000 f948 	bl	8106bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8106938:	68bb      	ldr	r3, [r7, #8]
 810693a:	f003 0320 	and.w	r3, r3, #32
 810693e:	2b00      	cmp	r3, #0
 8106940:	d00c      	beq.n	810695c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8106942:	68fb      	ldr	r3, [r7, #12]
 8106944:	f003 0320 	and.w	r3, r3, #32
 8106948:	2b00      	cmp	r3, #0
 810694a:	d007      	beq.n	810695c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	681b      	ldr	r3, [r3, #0]
 8106950:	f06f 0220 	mvn.w	r2, #32
 8106954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106956:	6878      	ldr	r0, [r7, #4]
 8106958:	f000 fdc2 	bl	81074e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810695c:	bf00      	nop
 810695e:	3710      	adds	r7, #16
 8106960:	46bd      	mov	sp, r7
 8106962:	bd80      	pop	{r7, pc}

08106964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8106964:	b580      	push	{r7, lr}
 8106966:	b086      	sub	sp, #24
 8106968:	af00      	add	r7, sp, #0
 810696a:	60f8      	str	r0, [r7, #12]
 810696c:	60b9      	str	r1, [r7, #8]
 810696e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106970:	2300      	movs	r3, #0
 8106972:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106974:	68fb      	ldr	r3, [r7, #12]
 8106976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810697a:	2b01      	cmp	r3, #1
 810697c:	d101      	bne.n	8106982 <HAL_TIM_PWM_ConfigChannel+0x1e>
 810697e:	2302      	movs	r3, #2
 8106980:	e0ff      	b.n	8106b82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8106982:	68fb      	ldr	r3, [r7, #12]
 8106984:	2201      	movs	r2, #1
 8106986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810698a:	687b      	ldr	r3, [r7, #4]
 810698c:	2b14      	cmp	r3, #20
 810698e:	f200 80f0 	bhi.w	8106b72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8106992:	a201      	add	r2, pc, #4	@ (adr r2, 8106998 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8106994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106998:	081069ed 	.word	0x081069ed
 810699c:	08106b73 	.word	0x08106b73
 81069a0:	08106b73 	.word	0x08106b73
 81069a4:	08106b73 	.word	0x08106b73
 81069a8:	08106a2d 	.word	0x08106a2d
 81069ac:	08106b73 	.word	0x08106b73
 81069b0:	08106b73 	.word	0x08106b73
 81069b4:	08106b73 	.word	0x08106b73
 81069b8:	08106a6f 	.word	0x08106a6f
 81069bc:	08106b73 	.word	0x08106b73
 81069c0:	08106b73 	.word	0x08106b73
 81069c4:	08106b73 	.word	0x08106b73
 81069c8:	08106aaf 	.word	0x08106aaf
 81069cc:	08106b73 	.word	0x08106b73
 81069d0:	08106b73 	.word	0x08106b73
 81069d4:	08106b73 	.word	0x08106b73
 81069d8:	08106af1 	.word	0x08106af1
 81069dc:	08106b73 	.word	0x08106b73
 81069e0:	08106b73 	.word	0x08106b73
 81069e4:	08106b73 	.word	0x08106b73
 81069e8:	08106b31 	.word	0x08106b31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81069ec:	68fb      	ldr	r3, [r7, #12]
 81069ee:	681b      	ldr	r3, [r3, #0]
 81069f0:	68b9      	ldr	r1, [r7, #8]
 81069f2:	4618      	mov	r0, r3
 81069f4:	f000 f992 	bl	8106d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81069f8:	68fb      	ldr	r3, [r7, #12]
 81069fa:	681b      	ldr	r3, [r3, #0]
 81069fc:	699a      	ldr	r2, [r3, #24]
 81069fe:	68fb      	ldr	r3, [r7, #12]
 8106a00:	681b      	ldr	r3, [r3, #0]
 8106a02:	f042 0208 	orr.w	r2, r2, #8
 8106a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8106a08:	68fb      	ldr	r3, [r7, #12]
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	699a      	ldr	r2, [r3, #24]
 8106a0e:	68fb      	ldr	r3, [r7, #12]
 8106a10:	681b      	ldr	r3, [r3, #0]
 8106a12:	f022 0204 	bic.w	r2, r2, #4
 8106a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8106a18:	68fb      	ldr	r3, [r7, #12]
 8106a1a:	681b      	ldr	r3, [r3, #0]
 8106a1c:	6999      	ldr	r1, [r3, #24]
 8106a1e:	68bb      	ldr	r3, [r7, #8]
 8106a20:	691a      	ldr	r2, [r3, #16]
 8106a22:	68fb      	ldr	r3, [r7, #12]
 8106a24:	681b      	ldr	r3, [r3, #0]
 8106a26:	430a      	orrs	r2, r1
 8106a28:	619a      	str	r2, [r3, #24]
      break;
 8106a2a:	e0a5      	b.n	8106b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8106a2c:	68fb      	ldr	r3, [r7, #12]
 8106a2e:	681b      	ldr	r3, [r3, #0]
 8106a30:	68b9      	ldr	r1, [r7, #8]
 8106a32:	4618      	mov	r0, r3
 8106a34:	f000 fa02 	bl	8106e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8106a38:	68fb      	ldr	r3, [r7, #12]
 8106a3a:	681b      	ldr	r3, [r3, #0]
 8106a3c:	699a      	ldr	r2, [r3, #24]
 8106a3e:	68fb      	ldr	r3, [r7, #12]
 8106a40:	681b      	ldr	r3, [r3, #0]
 8106a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8106a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8106a48:	68fb      	ldr	r3, [r7, #12]
 8106a4a:	681b      	ldr	r3, [r3, #0]
 8106a4c:	699a      	ldr	r2, [r3, #24]
 8106a4e:	68fb      	ldr	r3, [r7, #12]
 8106a50:	681b      	ldr	r3, [r3, #0]
 8106a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8106a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106a58:	68fb      	ldr	r3, [r7, #12]
 8106a5a:	681b      	ldr	r3, [r3, #0]
 8106a5c:	6999      	ldr	r1, [r3, #24]
 8106a5e:	68bb      	ldr	r3, [r7, #8]
 8106a60:	691b      	ldr	r3, [r3, #16]
 8106a62:	021a      	lsls	r2, r3, #8
 8106a64:	68fb      	ldr	r3, [r7, #12]
 8106a66:	681b      	ldr	r3, [r3, #0]
 8106a68:	430a      	orrs	r2, r1
 8106a6a:	619a      	str	r2, [r3, #24]
      break;
 8106a6c:	e084      	b.n	8106b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8106a6e:	68fb      	ldr	r3, [r7, #12]
 8106a70:	681b      	ldr	r3, [r3, #0]
 8106a72:	68b9      	ldr	r1, [r7, #8]
 8106a74:	4618      	mov	r0, r3
 8106a76:	f000 fa6b 	bl	8106f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106a7a:	68fb      	ldr	r3, [r7, #12]
 8106a7c:	681b      	ldr	r3, [r3, #0]
 8106a7e:	69da      	ldr	r2, [r3, #28]
 8106a80:	68fb      	ldr	r3, [r7, #12]
 8106a82:	681b      	ldr	r3, [r3, #0]
 8106a84:	f042 0208 	orr.w	r2, r2, #8
 8106a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8106a8a:	68fb      	ldr	r3, [r7, #12]
 8106a8c:	681b      	ldr	r3, [r3, #0]
 8106a8e:	69da      	ldr	r2, [r3, #28]
 8106a90:	68fb      	ldr	r3, [r7, #12]
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	f022 0204 	bic.w	r2, r2, #4
 8106a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106a9a:	68fb      	ldr	r3, [r7, #12]
 8106a9c:	681b      	ldr	r3, [r3, #0]
 8106a9e:	69d9      	ldr	r1, [r3, #28]
 8106aa0:	68bb      	ldr	r3, [r7, #8]
 8106aa2:	691a      	ldr	r2, [r3, #16]
 8106aa4:	68fb      	ldr	r3, [r7, #12]
 8106aa6:	681b      	ldr	r3, [r3, #0]
 8106aa8:	430a      	orrs	r2, r1
 8106aaa:	61da      	str	r2, [r3, #28]
      break;
 8106aac:	e064      	b.n	8106b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8106aae:	68fb      	ldr	r3, [r7, #12]
 8106ab0:	681b      	ldr	r3, [r3, #0]
 8106ab2:	68b9      	ldr	r1, [r7, #8]
 8106ab4:	4618      	mov	r0, r3
 8106ab6:	f000 fad3 	bl	8107060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8106aba:	68fb      	ldr	r3, [r7, #12]
 8106abc:	681b      	ldr	r3, [r3, #0]
 8106abe:	69da      	ldr	r2, [r3, #28]
 8106ac0:	68fb      	ldr	r3, [r7, #12]
 8106ac2:	681b      	ldr	r3, [r3, #0]
 8106ac4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8106ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8106aca:	68fb      	ldr	r3, [r7, #12]
 8106acc:	681b      	ldr	r3, [r3, #0]
 8106ace:	69da      	ldr	r2, [r3, #28]
 8106ad0:	68fb      	ldr	r3, [r7, #12]
 8106ad2:	681b      	ldr	r3, [r3, #0]
 8106ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8106ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8106ada:	68fb      	ldr	r3, [r7, #12]
 8106adc:	681b      	ldr	r3, [r3, #0]
 8106ade:	69d9      	ldr	r1, [r3, #28]
 8106ae0:	68bb      	ldr	r3, [r7, #8]
 8106ae2:	691b      	ldr	r3, [r3, #16]
 8106ae4:	021a      	lsls	r2, r3, #8
 8106ae6:	68fb      	ldr	r3, [r7, #12]
 8106ae8:	681b      	ldr	r3, [r3, #0]
 8106aea:	430a      	orrs	r2, r1
 8106aec:	61da      	str	r2, [r3, #28]
      break;
 8106aee:	e043      	b.n	8106b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8106af0:	68fb      	ldr	r3, [r7, #12]
 8106af2:	681b      	ldr	r3, [r3, #0]
 8106af4:	68b9      	ldr	r1, [r7, #8]
 8106af6:	4618      	mov	r0, r3
 8106af8:	f000 fb1c 	bl	8107134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8106afc:	68fb      	ldr	r3, [r7, #12]
 8106afe:	681b      	ldr	r3, [r3, #0]
 8106b00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8106b02:	68fb      	ldr	r3, [r7, #12]
 8106b04:	681b      	ldr	r3, [r3, #0]
 8106b06:	f042 0208 	orr.w	r2, r2, #8
 8106b0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8106b0c:	68fb      	ldr	r3, [r7, #12]
 8106b0e:	681b      	ldr	r3, [r3, #0]
 8106b10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8106b12:	68fb      	ldr	r3, [r7, #12]
 8106b14:	681b      	ldr	r3, [r3, #0]
 8106b16:	f022 0204 	bic.w	r2, r2, #4
 8106b1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106b1c:	68fb      	ldr	r3, [r7, #12]
 8106b1e:	681b      	ldr	r3, [r3, #0]
 8106b20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8106b22:	68bb      	ldr	r3, [r7, #8]
 8106b24:	691a      	ldr	r2, [r3, #16]
 8106b26:	68fb      	ldr	r3, [r7, #12]
 8106b28:	681b      	ldr	r3, [r3, #0]
 8106b2a:	430a      	orrs	r2, r1
 8106b2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8106b2e:	e023      	b.n	8106b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8106b30:	68fb      	ldr	r3, [r7, #12]
 8106b32:	681b      	ldr	r3, [r3, #0]
 8106b34:	68b9      	ldr	r1, [r7, #8]
 8106b36:	4618      	mov	r0, r3
 8106b38:	f000 fb60 	bl	81071fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8106b3c:	68fb      	ldr	r3, [r7, #12]
 8106b3e:	681b      	ldr	r3, [r3, #0]
 8106b40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8106b42:	68fb      	ldr	r3, [r7, #12]
 8106b44:	681b      	ldr	r3, [r3, #0]
 8106b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8106b4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8106b4c:	68fb      	ldr	r3, [r7, #12]
 8106b4e:	681b      	ldr	r3, [r3, #0]
 8106b50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8106b52:	68fb      	ldr	r3, [r7, #12]
 8106b54:	681b      	ldr	r3, [r3, #0]
 8106b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8106b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8106b5c:	68fb      	ldr	r3, [r7, #12]
 8106b5e:	681b      	ldr	r3, [r3, #0]
 8106b60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8106b62:	68bb      	ldr	r3, [r7, #8]
 8106b64:	691b      	ldr	r3, [r3, #16]
 8106b66:	021a      	lsls	r2, r3, #8
 8106b68:	68fb      	ldr	r3, [r7, #12]
 8106b6a:	681b      	ldr	r3, [r3, #0]
 8106b6c:	430a      	orrs	r2, r1
 8106b6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8106b70:	e002      	b.n	8106b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8106b72:	2301      	movs	r3, #1
 8106b74:	75fb      	strb	r3, [r7, #23]
      break;
 8106b76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8106b78:	68fb      	ldr	r3, [r7, #12]
 8106b7a:	2200      	movs	r2, #0
 8106b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8106b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8106b82:	4618      	mov	r0, r3
 8106b84:	3718      	adds	r7, #24
 8106b86:	46bd      	mov	sp, r7
 8106b88:	bd80      	pop	{r7, pc}
 8106b8a:	bf00      	nop

08106b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106b8c:	b480      	push	{r7}
 8106b8e:	b083      	sub	sp, #12
 8106b90:	af00      	add	r7, sp, #0
 8106b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106b94:	bf00      	nop
 8106b96:	370c      	adds	r7, #12
 8106b98:	46bd      	mov	sp, r7
 8106b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b9e:	4770      	bx	lr

08106ba0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8106ba0:	b480      	push	{r7}
 8106ba2:	b083      	sub	sp, #12
 8106ba4:	af00      	add	r7, sp, #0
 8106ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106ba8:	bf00      	nop
 8106baa:	370c      	adds	r7, #12
 8106bac:	46bd      	mov	sp, r7
 8106bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bb2:	4770      	bx	lr

08106bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8106bb4:	b480      	push	{r7}
 8106bb6:	b083      	sub	sp, #12
 8106bb8:	af00      	add	r7, sp, #0
 8106bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8106bbc:	bf00      	nop
 8106bbe:	370c      	adds	r7, #12
 8106bc0:	46bd      	mov	sp, r7
 8106bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bc6:	4770      	bx	lr

08106bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8106bc8:	b480      	push	{r7}
 8106bca:	b083      	sub	sp, #12
 8106bcc:	af00      	add	r7, sp, #0
 8106bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8106bd0:	bf00      	nop
 8106bd2:	370c      	adds	r7, #12
 8106bd4:	46bd      	mov	sp, r7
 8106bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bda:	4770      	bx	lr

08106bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106bdc:	b480      	push	{r7}
 8106bde:	b085      	sub	sp, #20
 8106be0:	af00      	add	r7, sp, #0
 8106be2:	6078      	str	r0, [r7, #4]
 8106be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106be6:	687b      	ldr	r3, [r7, #4]
 8106be8:	681b      	ldr	r3, [r3, #0]
 8106bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106bec:	687b      	ldr	r3, [r7, #4]
 8106bee:	4a43      	ldr	r2, [pc, #268]	@ (8106cfc <TIM_Base_SetConfig+0x120>)
 8106bf0:	4293      	cmp	r3, r2
 8106bf2:	d013      	beq.n	8106c1c <TIM_Base_SetConfig+0x40>
 8106bf4:	687b      	ldr	r3, [r7, #4]
 8106bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106bfa:	d00f      	beq.n	8106c1c <TIM_Base_SetConfig+0x40>
 8106bfc:	687b      	ldr	r3, [r7, #4]
 8106bfe:	4a40      	ldr	r2, [pc, #256]	@ (8106d00 <TIM_Base_SetConfig+0x124>)
 8106c00:	4293      	cmp	r3, r2
 8106c02:	d00b      	beq.n	8106c1c <TIM_Base_SetConfig+0x40>
 8106c04:	687b      	ldr	r3, [r7, #4]
 8106c06:	4a3f      	ldr	r2, [pc, #252]	@ (8106d04 <TIM_Base_SetConfig+0x128>)
 8106c08:	4293      	cmp	r3, r2
 8106c0a:	d007      	beq.n	8106c1c <TIM_Base_SetConfig+0x40>
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8106d08 <TIM_Base_SetConfig+0x12c>)
 8106c10:	4293      	cmp	r3, r2
 8106c12:	d003      	beq.n	8106c1c <TIM_Base_SetConfig+0x40>
 8106c14:	687b      	ldr	r3, [r7, #4]
 8106c16:	4a3d      	ldr	r2, [pc, #244]	@ (8106d0c <TIM_Base_SetConfig+0x130>)
 8106c18:	4293      	cmp	r3, r2
 8106c1a:	d108      	bne.n	8106c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106c1c:	68fb      	ldr	r3, [r7, #12]
 8106c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8106c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106c24:	683b      	ldr	r3, [r7, #0]
 8106c26:	685b      	ldr	r3, [r3, #4]
 8106c28:	68fa      	ldr	r2, [r7, #12]
 8106c2a:	4313      	orrs	r3, r2
 8106c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106c2e:	687b      	ldr	r3, [r7, #4]
 8106c30:	4a32      	ldr	r2, [pc, #200]	@ (8106cfc <TIM_Base_SetConfig+0x120>)
 8106c32:	4293      	cmp	r3, r2
 8106c34:	d01f      	beq.n	8106c76 <TIM_Base_SetConfig+0x9a>
 8106c36:	687b      	ldr	r3, [r7, #4]
 8106c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106c3c:	d01b      	beq.n	8106c76 <TIM_Base_SetConfig+0x9a>
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	4a2f      	ldr	r2, [pc, #188]	@ (8106d00 <TIM_Base_SetConfig+0x124>)
 8106c42:	4293      	cmp	r3, r2
 8106c44:	d017      	beq.n	8106c76 <TIM_Base_SetConfig+0x9a>
 8106c46:	687b      	ldr	r3, [r7, #4]
 8106c48:	4a2e      	ldr	r2, [pc, #184]	@ (8106d04 <TIM_Base_SetConfig+0x128>)
 8106c4a:	4293      	cmp	r3, r2
 8106c4c:	d013      	beq.n	8106c76 <TIM_Base_SetConfig+0x9a>
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	4a2d      	ldr	r2, [pc, #180]	@ (8106d08 <TIM_Base_SetConfig+0x12c>)
 8106c52:	4293      	cmp	r3, r2
 8106c54:	d00f      	beq.n	8106c76 <TIM_Base_SetConfig+0x9a>
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	4a2c      	ldr	r2, [pc, #176]	@ (8106d0c <TIM_Base_SetConfig+0x130>)
 8106c5a:	4293      	cmp	r3, r2
 8106c5c:	d00b      	beq.n	8106c76 <TIM_Base_SetConfig+0x9a>
 8106c5e:	687b      	ldr	r3, [r7, #4]
 8106c60:	4a2b      	ldr	r2, [pc, #172]	@ (8106d10 <TIM_Base_SetConfig+0x134>)
 8106c62:	4293      	cmp	r3, r2
 8106c64:	d007      	beq.n	8106c76 <TIM_Base_SetConfig+0x9a>
 8106c66:	687b      	ldr	r3, [r7, #4]
 8106c68:	4a2a      	ldr	r2, [pc, #168]	@ (8106d14 <TIM_Base_SetConfig+0x138>)
 8106c6a:	4293      	cmp	r3, r2
 8106c6c:	d003      	beq.n	8106c76 <TIM_Base_SetConfig+0x9a>
 8106c6e:	687b      	ldr	r3, [r7, #4]
 8106c70:	4a29      	ldr	r2, [pc, #164]	@ (8106d18 <TIM_Base_SetConfig+0x13c>)
 8106c72:	4293      	cmp	r3, r2
 8106c74:	d108      	bne.n	8106c88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106c76:	68fb      	ldr	r3, [r7, #12]
 8106c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106c7e:	683b      	ldr	r3, [r7, #0]
 8106c80:	68db      	ldr	r3, [r3, #12]
 8106c82:	68fa      	ldr	r2, [r7, #12]
 8106c84:	4313      	orrs	r3, r2
 8106c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106c88:	68fb      	ldr	r3, [r7, #12]
 8106c8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8106c8e:	683b      	ldr	r3, [r7, #0]
 8106c90:	695b      	ldr	r3, [r3, #20]
 8106c92:	4313      	orrs	r3, r2
 8106c94:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106c96:	683b      	ldr	r3, [r7, #0]
 8106c98:	689a      	ldr	r2, [r3, #8]
 8106c9a:	687b      	ldr	r3, [r7, #4]
 8106c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106c9e:	683b      	ldr	r3, [r7, #0]
 8106ca0:	681a      	ldr	r2, [r3, #0]
 8106ca2:	687b      	ldr	r3, [r7, #4]
 8106ca4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	4a14      	ldr	r2, [pc, #80]	@ (8106cfc <TIM_Base_SetConfig+0x120>)
 8106caa:	4293      	cmp	r3, r2
 8106cac:	d00f      	beq.n	8106cce <TIM_Base_SetConfig+0xf2>
 8106cae:	687b      	ldr	r3, [r7, #4]
 8106cb0:	4a16      	ldr	r2, [pc, #88]	@ (8106d0c <TIM_Base_SetConfig+0x130>)
 8106cb2:	4293      	cmp	r3, r2
 8106cb4:	d00b      	beq.n	8106cce <TIM_Base_SetConfig+0xf2>
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	4a15      	ldr	r2, [pc, #84]	@ (8106d10 <TIM_Base_SetConfig+0x134>)
 8106cba:	4293      	cmp	r3, r2
 8106cbc:	d007      	beq.n	8106cce <TIM_Base_SetConfig+0xf2>
 8106cbe:	687b      	ldr	r3, [r7, #4]
 8106cc0:	4a14      	ldr	r2, [pc, #80]	@ (8106d14 <TIM_Base_SetConfig+0x138>)
 8106cc2:	4293      	cmp	r3, r2
 8106cc4:	d003      	beq.n	8106cce <TIM_Base_SetConfig+0xf2>
 8106cc6:	687b      	ldr	r3, [r7, #4]
 8106cc8:	4a13      	ldr	r2, [pc, #76]	@ (8106d18 <TIM_Base_SetConfig+0x13c>)
 8106cca:	4293      	cmp	r3, r2
 8106ccc:	d103      	bne.n	8106cd6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106cce:	683b      	ldr	r3, [r7, #0]
 8106cd0:	691a      	ldr	r2, [r3, #16]
 8106cd2:	687b      	ldr	r3, [r7, #4]
 8106cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	681b      	ldr	r3, [r3, #0]
 8106cda:	f043 0204 	orr.w	r2, r3, #4
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106ce2:	687b      	ldr	r3, [r7, #4]
 8106ce4:	2201      	movs	r2, #1
 8106ce6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	68fa      	ldr	r2, [r7, #12]
 8106cec:	601a      	str	r2, [r3, #0]
}
 8106cee:	bf00      	nop
 8106cf0:	3714      	adds	r7, #20
 8106cf2:	46bd      	mov	sp, r7
 8106cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cf8:	4770      	bx	lr
 8106cfa:	bf00      	nop
 8106cfc:	40010000 	.word	0x40010000
 8106d00:	40000400 	.word	0x40000400
 8106d04:	40000800 	.word	0x40000800
 8106d08:	40000c00 	.word	0x40000c00
 8106d0c:	40010400 	.word	0x40010400
 8106d10:	40014000 	.word	0x40014000
 8106d14:	40014400 	.word	0x40014400
 8106d18:	40014800 	.word	0x40014800

08106d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106d1c:	b480      	push	{r7}
 8106d1e:	b087      	sub	sp, #28
 8106d20:	af00      	add	r7, sp, #0
 8106d22:	6078      	str	r0, [r7, #4]
 8106d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	6a1b      	ldr	r3, [r3, #32]
 8106d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106d2c:	687b      	ldr	r3, [r7, #4]
 8106d2e:	6a1b      	ldr	r3, [r3, #32]
 8106d30:	f023 0201 	bic.w	r2, r3, #1
 8106d34:	687b      	ldr	r3, [r7, #4]
 8106d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	685b      	ldr	r3, [r3, #4]
 8106d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	699b      	ldr	r3, [r3, #24]
 8106d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8106d44:	68fb      	ldr	r3, [r7, #12]
 8106d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8106d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8106d50:	68fb      	ldr	r3, [r7, #12]
 8106d52:	f023 0303 	bic.w	r3, r3, #3
 8106d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106d58:	683b      	ldr	r3, [r7, #0]
 8106d5a:	681b      	ldr	r3, [r3, #0]
 8106d5c:	68fa      	ldr	r2, [r7, #12]
 8106d5e:	4313      	orrs	r3, r2
 8106d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8106d62:	697b      	ldr	r3, [r7, #20]
 8106d64:	f023 0302 	bic.w	r3, r3, #2
 8106d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8106d6a:	683b      	ldr	r3, [r7, #0]
 8106d6c:	689b      	ldr	r3, [r3, #8]
 8106d6e:	697a      	ldr	r2, [r7, #20]
 8106d70:	4313      	orrs	r3, r2
 8106d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	4a2c      	ldr	r2, [pc, #176]	@ (8106e28 <TIM_OC1_SetConfig+0x10c>)
 8106d78:	4293      	cmp	r3, r2
 8106d7a:	d00f      	beq.n	8106d9c <TIM_OC1_SetConfig+0x80>
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8106e2c <TIM_OC1_SetConfig+0x110>)
 8106d80:	4293      	cmp	r3, r2
 8106d82:	d00b      	beq.n	8106d9c <TIM_OC1_SetConfig+0x80>
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	4a2a      	ldr	r2, [pc, #168]	@ (8106e30 <TIM_OC1_SetConfig+0x114>)
 8106d88:	4293      	cmp	r3, r2
 8106d8a:	d007      	beq.n	8106d9c <TIM_OC1_SetConfig+0x80>
 8106d8c:	687b      	ldr	r3, [r7, #4]
 8106d8e:	4a29      	ldr	r2, [pc, #164]	@ (8106e34 <TIM_OC1_SetConfig+0x118>)
 8106d90:	4293      	cmp	r3, r2
 8106d92:	d003      	beq.n	8106d9c <TIM_OC1_SetConfig+0x80>
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	4a28      	ldr	r2, [pc, #160]	@ (8106e38 <TIM_OC1_SetConfig+0x11c>)
 8106d98:	4293      	cmp	r3, r2
 8106d9a:	d10c      	bne.n	8106db6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8106d9c:	697b      	ldr	r3, [r7, #20]
 8106d9e:	f023 0308 	bic.w	r3, r3, #8
 8106da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8106da4:	683b      	ldr	r3, [r7, #0]
 8106da6:	68db      	ldr	r3, [r3, #12]
 8106da8:	697a      	ldr	r2, [r7, #20]
 8106daa:	4313      	orrs	r3, r2
 8106dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8106dae:	697b      	ldr	r3, [r7, #20]
 8106db0:	f023 0304 	bic.w	r3, r3, #4
 8106db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106db6:	687b      	ldr	r3, [r7, #4]
 8106db8:	4a1b      	ldr	r2, [pc, #108]	@ (8106e28 <TIM_OC1_SetConfig+0x10c>)
 8106dba:	4293      	cmp	r3, r2
 8106dbc:	d00f      	beq.n	8106dde <TIM_OC1_SetConfig+0xc2>
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8106e2c <TIM_OC1_SetConfig+0x110>)
 8106dc2:	4293      	cmp	r3, r2
 8106dc4:	d00b      	beq.n	8106dde <TIM_OC1_SetConfig+0xc2>
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	4a19      	ldr	r2, [pc, #100]	@ (8106e30 <TIM_OC1_SetConfig+0x114>)
 8106dca:	4293      	cmp	r3, r2
 8106dcc:	d007      	beq.n	8106dde <TIM_OC1_SetConfig+0xc2>
 8106dce:	687b      	ldr	r3, [r7, #4]
 8106dd0:	4a18      	ldr	r2, [pc, #96]	@ (8106e34 <TIM_OC1_SetConfig+0x118>)
 8106dd2:	4293      	cmp	r3, r2
 8106dd4:	d003      	beq.n	8106dde <TIM_OC1_SetConfig+0xc2>
 8106dd6:	687b      	ldr	r3, [r7, #4]
 8106dd8:	4a17      	ldr	r2, [pc, #92]	@ (8106e38 <TIM_OC1_SetConfig+0x11c>)
 8106dda:	4293      	cmp	r3, r2
 8106ddc:	d111      	bne.n	8106e02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8106dde:	693b      	ldr	r3, [r7, #16]
 8106de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8106de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8106de6:	693b      	ldr	r3, [r7, #16]
 8106de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8106dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8106dee:	683b      	ldr	r3, [r7, #0]
 8106df0:	695b      	ldr	r3, [r3, #20]
 8106df2:	693a      	ldr	r2, [r7, #16]
 8106df4:	4313      	orrs	r3, r2
 8106df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106df8:	683b      	ldr	r3, [r7, #0]
 8106dfa:	699b      	ldr	r3, [r3, #24]
 8106dfc:	693a      	ldr	r2, [r7, #16]
 8106dfe:	4313      	orrs	r3, r2
 8106e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106e02:	687b      	ldr	r3, [r7, #4]
 8106e04:	693a      	ldr	r2, [r7, #16]
 8106e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106e08:	687b      	ldr	r3, [r7, #4]
 8106e0a:	68fa      	ldr	r2, [r7, #12]
 8106e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8106e0e:	683b      	ldr	r3, [r7, #0]
 8106e10:	685a      	ldr	r2, [r3, #4]
 8106e12:	687b      	ldr	r3, [r7, #4]
 8106e14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106e16:	687b      	ldr	r3, [r7, #4]
 8106e18:	697a      	ldr	r2, [r7, #20]
 8106e1a:	621a      	str	r2, [r3, #32]
}
 8106e1c:	bf00      	nop
 8106e1e:	371c      	adds	r7, #28
 8106e20:	46bd      	mov	sp, r7
 8106e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e26:	4770      	bx	lr
 8106e28:	40010000 	.word	0x40010000
 8106e2c:	40010400 	.word	0x40010400
 8106e30:	40014000 	.word	0x40014000
 8106e34:	40014400 	.word	0x40014400
 8106e38:	40014800 	.word	0x40014800

08106e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106e3c:	b480      	push	{r7}
 8106e3e:	b087      	sub	sp, #28
 8106e40:	af00      	add	r7, sp, #0
 8106e42:	6078      	str	r0, [r7, #4]
 8106e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106e46:	687b      	ldr	r3, [r7, #4]
 8106e48:	6a1b      	ldr	r3, [r3, #32]
 8106e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	6a1b      	ldr	r3, [r3, #32]
 8106e50:	f023 0210 	bic.w	r2, r3, #16
 8106e54:	687b      	ldr	r3, [r7, #4]
 8106e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	685b      	ldr	r3, [r3, #4]
 8106e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106e5e:	687b      	ldr	r3, [r7, #4]
 8106e60:	699b      	ldr	r3, [r3, #24]
 8106e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8106e64:	68fb      	ldr	r3, [r7, #12]
 8106e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8106e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8106e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8106e70:	68fb      	ldr	r3, [r7, #12]
 8106e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106e78:	683b      	ldr	r3, [r7, #0]
 8106e7a:	681b      	ldr	r3, [r3, #0]
 8106e7c:	021b      	lsls	r3, r3, #8
 8106e7e:	68fa      	ldr	r2, [r7, #12]
 8106e80:	4313      	orrs	r3, r2
 8106e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8106e84:	697b      	ldr	r3, [r7, #20]
 8106e86:	f023 0320 	bic.w	r3, r3, #32
 8106e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106e8c:	683b      	ldr	r3, [r7, #0]
 8106e8e:	689b      	ldr	r3, [r3, #8]
 8106e90:	011b      	lsls	r3, r3, #4
 8106e92:	697a      	ldr	r2, [r7, #20]
 8106e94:	4313      	orrs	r3, r2
 8106e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	4a28      	ldr	r2, [pc, #160]	@ (8106f3c <TIM_OC2_SetConfig+0x100>)
 8106e9c:	4293      	cmp	r3, r2
 8106e9e:	d003      	beq.n	8106ea8 <TIM_OC2_SetConfig+0x6c>
 8106ea0:	687b      	ldr	r3, [r7, #4]
 8106ea2:	4a27      	ldr	r2, [pc, #156]	@ (8106f40 <TIM_OC2_SetConfig+0x104>)
 8106ea4:	4293      	cmp	r3, r2
 8106ea6:	d10d      	bne.n	8106ec4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8106ea8:	697b      	ldr	r3, [r7, #20]
 8106eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8106eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106eb0:	683b      	ldr	r3, [r7, #0]
 8106eb2:	68db      	ldr	r3, [r3, #12]
 8106eb4:	011b      	lsls	r3, r3, #4
 8106eb6:	697a      	ldr	r2, [r7, #20]
 8106eb8:	4313      	orrs	r3, r2
 8106eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8106ebc:	697b      	ldr	r3, [r7, #20]
 8106ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8106ec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106ec4:	687b      	ldr	r3, [r7, #4]
 8106ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8106f3c <TIM_OC2_SetConfig+0x100>)
 8106ec8:	4293      	cmp	r3, r2
 8106eca:	d00f      	beq.n	8106eec <TIM_OC2_SetConfig+0xb0>
 8106ecc:	687b      	ldr	r3, [r7, #4]
 8106ece:	4a1c      	ldr	r2, [pc, #112]	@ (8106f40 <TIM_OC2_SetConfig+0x104>)
 8106ed0:	4293      	cmp	r3, r2
 8106ed2:	d00b      	beq.n	8106eec <TIM_OC2_SetConfig+0xb0>
 8106ed4:	687b      	ldr	r3, [r7, #4]
 8106ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8106f44 <TIM_OC2_SetConfig+0x108>)
 8106ed8:	4293      	cmp	r3, r2
 8106eda:	d007      	beq.n	8106eec <TIM_OC2_SetConfig+0xb0>
 8106edc:	687b      	ldr	r3, [r7, #4]
 8106ede:	4a1a      	ldr	r2, [pc, #104]	@ (8106f48 <TIM_OC2_SetConfig+0x10c>)
 8106ee0:	4293      	cmp	r3, r2
 8106ee2:	d003      	beq.n	8106eec <TIM_OC2_SetConfig+0xb0>
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	4a19      	ldr	r2, [pc, #100]	@ (8106f4c <TIM_OC2_SetConfig+0x110>)
 8106ee8:	4293      	cmp	r3, r2
 8106eea:	d113      	bne.n	8106f14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8106eec:	693b      	ldr	r3, [r7, #16]
 8106eee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8106ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106ef4:	693b      	ldr	r3, [r7, #16]
 8106ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8106efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8106efc:	683b      	ldr	r3, [r7, #0]
 8106efe:	695b      	ldr	r3, [r3, #20]
 8106f00:	009b      	lsls	r3, r3, #2
 8106f02:	693a      	ldr	r2, [r7, #16]
 8106f04:	4313      	orrs	r3, r2
 8106f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106f08:	683b      	ldr	r3, [r7, #0]
 8106f0a:	699b      	ldr	r3, [r3, #24]
 8106f0c:	009b      	lsls	r3, r3, #2
 8106f0e:	693a      	ldr	r2, [r7, #16]
 8106f10:	4313      	orrs	r3, r2
 8106f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106f14:	687b      	ldr	r3, [r7, #4]
 8106f16:	693a      	ldr	r2, [r7, #16]
 8106f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	68fa      	ldr	r2, [r7, #12]
 8106f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8106f20:	683b      	ldr	r3, [r7, #0]
 8106f22:	685a      	ldr	r2, [r3, #4]
 8106f24:	687b      	ldr	r3, [r7, #4]
 8106f26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106f28:	687b      	ldr	r3, [r7, #4]
 8106f2a:	697a      	ldr	r2, [r7, #20]
 8106f2c:	621a      	str	r2, [r3, #32]
}
 8106f2e:	bf00      	nop
 8106f30:	371c      	adds	r7, #28
 8106f32:	46bd      	mov	sp, r7
 8106f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f38:	4770      	bx	lr
 8106f3a:	bf00      	nop
 8106f3c:	40010000 	.word	0x40010000
 8106f40:	40010400 	.word	0x40010400
 8106f44:	40014000 	.word	0x40014000
 8106f48:	40014400 	.word	0x40014400
 8106f4c:	40014800 	.word	0x40014800

08106f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106f50:	b480      	push	{r7}
 8106f52:	b087      	sub	sp, #28
 8106f54:	af00      	add	r7, sp, #0
 8106f56:	6078      	str	r0, [r7, #4]
 8106f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106f5a:	687b      	ldr	r3, [r7, #4]
 8106f5c:	6a1b      	ldr	r3, [r3, #32]
 8106f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8106f60:	687b      	ldr	r3, [r7, #4]
 8106f62:	6a1b      	ldr	r3, [r3, #32]
 8106f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8106f68:	687b      	ldr	r3, [r7, #4]
 8106f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	685b      	ldr	r3, [r3, #4]
 8106f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106f72:	687b      	ldr	r3, [r7, #4]
 8106f74:	69db      	ldr	r3, [r3, #28]
 8106f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8106f78:	68fb      	ldr	r3, [r7, #12]
 8106f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8106f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8106f84:	68fb      	ldr	r3, [r7, #12]
 8106f86:	f023 0303 	bic.w	r3, r3, #3
 8106f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106f8c:	683b      	ldr	r3, [r7, #0]
 8106f8e:	681b      	ldr	r3, [r3, #0]
 8106f90:	68fa      	ldr	r2, [r7, #12]
 8106f92:	4313      	orrs	r3, r2
 8106f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8106f96:	697b      	ldr	r3, [r7, #20]
 8106f98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8106f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8106f9e:	683b      	ldr	r3, [r7, #0]
 8106fa0:	689b      	ldr	r3, [r3, #8]
 8106fa2:	021b      	lsls	r3, r3, #8
 8106fa4:	697a      	ldr	r2, [r7, #20]
 8106fa6:	4313      	orrs	r3, r2
 8106fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8106faa:	687b      	ldr	r3, [r7, #4]
 8106fac:	4a27      	ldr	r2, [pc, #156]	@ (810704c <TIM_OC3_SetConfig+0xfc>)
 8106fae:	4293      	cmp	r3, r2
 8106fb0:	d003      	beq.n	8106fba <TIM_OC3_SetConfig+0x6a>
 8106fb2:	687b      	ldr	r3, [r7, #4]
 8106fb4:	4a26      	ldr	r2, [pc, #152]	@ (8107050 <TIM_OC3_SetConfig+0x100>)
 8106fb6:	4293      	cmp	r3, r2
 8106fb8:	d10d      	bne.n	8106fd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8106fba:	697b      	ldr	r3, [r7, #20]
 8106fbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8106fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8106fc2:	683b      	ldr	r3, [r7, #0]
 8106fc4:	68db      	ldr	r3, [r3, #12]
 8106fc6:	021b      	lsls	r3, r3, #8
 8106fc8:	697a      	ldr	r2, [r7, #20]
 8106fca:	4313      	orrs	r3, r2
 8106fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8106fce:	697b      	ldr	r3, [r7, #20]
 8106fd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8106fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	4a1c      	ldr	r2, [pc, #112]	@ (810704c <TIM_OC3_SetConfig+0xfc>)
 8106fda:	4293      	cmp	r3, r2
 8106fdc:	d00f      	beq.n	8106ffe <TIM_OC3_SetConfig+0xae>
 8106fde:	687b      	ldr	r3, [r7, #4]
 8106fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8107050 <TIM_OC3_SetConfig+0x100>)
 8106fe2:	4293      	cmp	r3, r2
 8106fe4:	d00b      	beq.n	8106ffe <TIM_OC3_SetConfig+0xae>
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8107054 <TIM_OC3_SetConfig+0x104>)
 8106fea:	4293      	cmp	r3, r2
 8106fec:	d007      	beq.n	8106ffe <TIM_OC3_SetConfig+0xae>
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	4a19      	ldr	r2, [pc, #100]	@ (8107058 <TIM_OC3_SetConfig+0x108>)
 8106ff2:	4293      	cmp	r3, r2
 8106ff4:	d003      	beq.n	8106ffe <TIM_OC3_SetConfig+0xae>
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	4a18      	ldr	r2, [pc, #96]	@ (810705c <TIM_OC3_SetConfig+0x10c>)
 8106ffa:	4293      	cmp	r3, r2
 8106ffc:	d113      	bne.n	8107026 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8106ffe:	693b      	ldr	r3, [r7, #16]
 8107000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8107004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107006:	693b      	ldr	r3, [r7, #16]
 8107008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810700c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810700e:	683b      	ldr	r3, [r7, #0]
 8107010:	695b      	ldr	r3, [r3, #20]
 8107012:	011b      	lsls	r3, r3, #4
 8107014:	693a      	ldr	r2, [r7, #16]
 8107016:	4313      	orrs	r3, r2
 8107018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810701a:	683b      	ldr	r3, [r7, #0]
 810701c:	699b      	ldr	r3, [r3, #24]
 810701e:	011b      	lsls	r3, r3, #4
 8107020:	693a      	ldr	r2, [r7, #16]
 8107022:	4313      	orrs	r3, r2
 8107024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107026:	687b      	ldr	r3, [r7, #4]
 8107028:	693a      	ldr	r2, [r7, #16]
 810702a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	68fa      	ldr	r2, [r7, #12]
 8107030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107032:	683b      	ldr	r3, [r7, #0]
 8107034:	685a      	ldr	r2, [r3, #4]
 8107036:	687b      	ldr	r3, [r7, #4]
 8107038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810703a:	687b      	ldr	r3, [r7, #4]
 810703c:	697a      	ldr	r2, [r7, #20]
 810703e:	621a      	str	r2, [r3, #32]
}
 8107040:	bf00      	nop
 8107042:	371c      	adds	r7, #28
 8107044:	46bd      	mov	sp, r7
 8107046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810704a:	4770      	bx	lr
 810704c:	40010000 	.word	0x40010000
 8107050:	40010400 	.word	0x40010400
 8107054:	40014000 	.word	0x40014000
 8107058:	40014400 	.word	0x40014400
 810705c:	40014800 	.word	0x40014800

08107060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107060:	b480      	push	{r7}
 8107062:	b087      	sub	sp, #28
 8107064:	af00      	add	r7, sp, #0
 8107066:	6078      	str	r0, [r7, #4]
 8107068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810706a:	687b      	ldr	r3, [r7, #4]
 810706c:	6a1b      	ldr	r3, [r3, #32]
 810706e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	6a1b      	ldr	r3, [r3, #32]
 8107074:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8107078:	687b      	ldr	r3, [r7, #4]
 810707a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810707c:	687b      	ldr	r3, [r7, #4]
 810707e:	685b      	ldr	r3, [r3, #4]
 8107080:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107082:	687b      	ldr	r3, [r7, #4]
 8107084:	69db      	ldr	r3, [r3, #28]
 8107086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107088:	68fb      	ldr	r3, [r7, #12]
 810708a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810708e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107094:	68fb      	ldr	r3, [r7, #12]
 8107096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810709a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810709c:	683b      	ldr	r3, [r7, #0]
 810709e:	681b      	ldr	r3, [r3, #0]
 81070a0:	021b      	lsls	r3, r3, #8
 81070a2:	68fa      	ldr	r2, [r7, #12]
 81070a4:	4313      	orrs	r3, r2
 81070a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81070a8:	693b      	ldr	r3, [r7, #16]
 81070aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 81070ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81070b0:	683b      	ldr	r3, [r7, #0]
 81070b2:	689b      	ldr	r3, [r3, #8]
 81070b4:	031b      	lsls	r3, r3, #12
 81070b6:	693a      	ldr	r2, [r7, #16]
 81070b8:	4313      	orrs	r3, r2
 81070ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	4a18      	ldr	r2, [pc, #96]	@ (8107120 <TIM_OC4_SetConfig+0xc0>)
 81070c0:	4293      	cmp	r3, r2
 81070c2:	d00f      	beq.n	81070e4 <TIM_OC4_SetConfig+0x84>
 81070c4:	687b      	ldr	r3, [r7, #4]
 81070c6:	4a17      	ldr	r2, [pc, #92]	@ (8107124 <TIM_OC4_SetConfig+0xc4>)
 81070c8:	4293      	cmp	r3, r2
 81070ca:	d00b      	beq.n	81070e4 <TIM_OC4_SetConfig+0x84>
 81070cc:	687b      	ldr	r3, [r7, #4]
 81070ce:	4a16      	ldr	r2, [pc, #88]	@ (8107128 <TIM_OC4_SetConfig+0xc8>)
 81070d0:	4293      	cmp	r3, r2
 81070d2:	d007      	beq.n	81070e4 <TIM_OC4_SetConfig+0x84>
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	4a15      	ldr	r2, [pc, #84]	@ (810712c <TIM_OC4_SetConfig+0xcc>)
 81070d8:	4293      	cmp	r3, r2
 81070da:	d003      	beq.n	81070e4 <TIM_OC4_SetConfig+0x84>
 81070dc:	687b      	ldr	r3, [r7, #4]
 81070de:	4a14      	ldr	r2, [pc, #80]	@ (8107130 <TIM_OC4_SetConfig+0xd0>)
 81070e0:	4293      	cmp	r3, r2
 81070e2:	d109      	bne.n	81070f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81070e4:	697b      	ldr	r3, [r7, #20]
 81070e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 81070ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81070ec:	683b      	ldr	r3, [r7, #0]
 81070ee:	695b      	ldr	r3, [r3, #20]
 81070f0:	019b      	lsls	r3, r3, #6
 81070f2:	697a      	ldr	r2, [r7, #20]
 81070f4:	4313      	orrs	r3, r2
 81070f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81070f8:	687b      	ldr	r3, [r7, #4]
 81070fa:	697a      	ldr	r2, [r7, #20]
 81070fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81070fe:	687b      	ldr	r3, [r7, #4]
 8107100:	68fa      	ldr	r2, [r7, #12]
 8107102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107104:	683b      	ldr	r3, [r7, #0]
 8107106:	685a      	ldr	r2, [r3, #4]
 8107108:	687b      	ldr	r3, [r7, #4]
 810710a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810710c:	687b      	ldr	r3, [r7, #4]
 810710e:	693a      	ldr	r2, [r7, #16]
 8107110:	621a      	str	r2, [r3, #32]
}
 8107112:	bf00      	nop
 8107114:	371c      	adds	r7, #28
 8107116:	46bd      	mov	sp, r7
 8107118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810711c:	4770      	bx	lr
 810711e:	bf00      	nop
 8107120:	40010000 	.word	0x40010000
 8107124:	40010400 	.word	0x40010400
 8107128:	40014000 	.word	0x40014000
 810712c:	40014400 	.word	0x40014400
 8107130:	40014800 	.word	0x40014800

08107134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107134:	b480      	push	{r7}
 8107136:	b087      	sub	sp, #28
 8107138:	af00      	add	r7, sp, #0
 810713a:	6078      	str	r0, [r7, #4]
 810713c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810713e:	687b      	ldr	r3, [r7, #4]
 8107140:	6a1b      	ldr	r3, [r3, #32]
 8107142:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	6a1b      	ldr	r3, [r3, #32]
 8107148:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810714c:	687b      	ldr	r3, [r7, #4]
 810714e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	685b      	ldr	r3, [r3, #4]
 8107154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107156:	687b      	ldr	r3, [r7, #4]
 8107158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810715a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810715c:	68fb      	ldr	r3, [r7, #12]
 810715e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107168:	683b      	ldr	r3, [r7, #0]
 810716a:	681b      	ldr	r3, [r3, #0]
 810716c:	68fa      	ldr	r2, [r7, #12]
 810716e:	4313      	orrs	r3, r2
 8107170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8107172:	693b      	ldr	r3, [r7, #16]
 8107174:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8107178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810717a:	683b      	ldr	r3, [r7, #0]
 810717c:	689b      	ldr	r3, [r3, #8]
 810717e:	041b      	lsls	r3, r3, #16
 8107180:	693a      	ldr	r2, [r7, #16]
 8107182:	4313      	orrs	r3, r2
 8107184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107186:	687b      	ldr	r3, [r7, #4]
 8107188:	4a17      	ldr	r2, [pc, #92]	@ (81071e8 <TIM_OC5_SetConfig+0xb4>)
 810718a:	4293      	cmp	r3, r2
 810718c:	d00f      	beq.n	81071ae <TIM_OC5_SetConfig+0x7a>
 810718e:	687b      	ldr	r3, [r7, #4]
 8107190:	4a16      	ldr	r2, [pc, #88]	@ (81071ec <TIM_OC5_SetConfig+0xb8>)
 8107192:	4293      	cmp	r3, r2
 8107194:	d00b      	beq.n	81071ae <TIM_OC5_SetConfig+0x7a>
 8107196:	687b      	ldr	r3, [r7, #4]
 8107198:	4a15      	ldr	r2, [pc, #84]	@ (81071f0 <TIM_OC5_SetConfig+0xbc>)
 810719a:	4293      	cmp	r3, r2
 810719c:	d007      	beq.n	81071ae <TIM_OC5_SetConfig+0x7a>
 810719e:	687b      	ldr	r3, [r7, #4]
 81071a0:	4a14      	ldr	r2, [pc, #80]	@ (81071f4 <TIM_OC5_SetConfig+0xc0>)
 81071a2:	4293      	cmp	r3, r2
 81071a4:	d003      	beq.n	81071ae <TIM_OC5_SetConfig+0x7a>
 81071a6:	687b      	ldr	r3, [r7, #4]
 81071a8:	4a13      	ldr	r2, [pc, #76]	@ (81071f8 <TIM_OC5_SetConfig+0xc4>)
 81071aa:	4293      	cmp	r3, r2
 81071ac:	d109      	bne.n	81071c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81071ae:	697b      	ldr	r3, [r7, #20]
 81071b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81071b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81071b6:	683b      	ldr	r3, [r7, #0]
 81071b8:	695b      	ldr	r3, [r3, #20]
 81071ba:	021b      	lsls	r3, r3, #8
 81071bc:	697a      	ldr	r2, [r7, #20]
 81071be:	4313      	orrs	r3, r2
 81071c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81071c2:	687b      	ldr	r3, [r7, #4]
 81071c4:	697a      	ldr	r2, [r7, #20]
 81071c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81071c8:	687b      	ldr	r3, [r7, #4]
 81071ca:	68fa      	ldr	r2, [r7, #12]
 81071cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81071ce:	683b      	ldr	r3, [r7, #0]
 81071d0:	685a      	ldr	r2, [r3, #4]
 81071d2:	687b      	ldr	r3, [r7, #4]
 81071d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	693a      	ldr	r2, [r7, #16]
 81071da:	621a      	str	r2, [r3, #32]
}
 81071dc:	bf00      	nop
 81071de:	371c      	adds	r7, #28
 81071e0:	46bd      	mov	sp, r7
 81071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071e6:	4770      	bx	lr
 81071e8:	40010000 	.word	0x40010000
 81071ec:	40010400 	.word	0x40010400
 81071f0:	40014000 	.word	0x40014000
 81071f4:	40014400 	.word	0x40014400
 81071f8:	40014800 	.word	0x40014800

081071fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81071fc:	b480      	push	{r7}
 81071fe:	b087      	sub	sp, #28
 8107200:	af00      	add	r7, sp, #0
 8107202:	6078      	str	r0, [r7, #4]
 8107204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	6a1b      	ldr	r3, [r3, #32]
 810720a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	6a1b      	ldr	r3, [r3, #32]
 8107210:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107218:	687b      	ldr	r3, [r7, #4]
 810721a:	685b      	ldr	r3, [r3, #4]
 810721c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810721e:	687b      	ldr	r3, [r7, #4]
 8107220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107224:	68fb      	ldr	r3, [r7, #12]
 8107226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810722a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107230:	683b      	ldr	r3, [r7, #0]
 8107232:	681b      	ldr	r3, [r3, #0]
 8107234:	021b      	lsls	r3, r3, #8
 8107236:	68fa      	ldr	r2, [r7, #12]
 8107238:	4313      	orrs	r3, r2
 810723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810723c:	693b      	ldr	r3, [r7, #16]
 810723e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8107242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107244:	683b      	ldr	r3, [r7, #0]
 8107246:	689b      	ldr	r3, [r3, #8]
 8107248:	051b      	lsls	r3, r3, #20
 810724a:	693a      	ldr	r2, [r7, #16]
 810724c:	4313      	orrs	r3, r2
 810724e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107250:	687b      	ldr	r3, [r7, #4]
 8107252:	4a18      	ldr	r2, [pc, #96]	@ (81072b4 <TIM_OC6_SetConfig+0xb8>)
 8107254:	4293      	cmp	r3, r2
 8107256:	d00f      	beq.n	8107278 <TIM_OC6_SetConfig+0x7c>
 8107258:	687b      	ldr	r3, [r7, #4]
 810725a:	4a17      	ldr	r2, [pc, #92]	@ (81072b8 <TIM_OC6_SetConfig+0xbc>)
 810725c:	4293      	cmp	r3, r2
 810725e:	d00b      	beq.n	8107278 <TIM_OC6_SetConfig+0x7c>
 8107260:	687b      	ldr	r3, [r7, #4]
 8107262:	4a16      	ldr	r2, [pc, #88]	@ (81072bc <TIM_OC6_SetConfig+0xc0>)
 8107264:	4293      	cmp	r3, r2
 8107266:	d007      	beq.n	8107278 <TIM_OC6_SetConfig+0x7c>
 8107268:	687b      	ldr	r3, [r7, #4]
 810726a:	4a15      	ldr	r2, [pc, #84]	@ (81072c0 <TIM_OC6_SetConfig+0xc4>)
 810726c:	4293      	cmp	r3, r2
 810726e:	d003      	beq.n	8107278 <TIM_OC6_SetConfig+0x7c>
 8107270:	687b      	ldr	r3, [r7, #4]
 8107272:	4a14      	ldr	r2, [pc, #80]	@ (81072c4 <TIM_OC6_SetConfig+0xc8>)
 8107274:	4293      	cmp	r3, r2
 8107276:	d109      	bne.n	810728c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107278:	697b      	ldr	r3, [r7, #20]
 810727a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810727e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107280:	683b      	ldr	r3, [r7, #0]
 8107282:	695b      	ldr	r3, [r3, #20]
 8107284:	029b      	lsls	r3, r3, #10
 8107286:	697a      	ldr	r2, [r7, #20]
 8107288:	4313      	orrs	r3, r2
 810728a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810728c:	687b      	ldr	r3, [r7, #4]
 810728e:	697a      	ldr	r2, [r7, #20]
 8107290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107292:	687b      	ldr	r3, [r7, #4]
 8107294:	68fa      	ldr	r2, [r7, #12]
 8107296:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107298:	683b      	ldr	r3, [r7, #0]
 810729a:	685a      	ldr	r2, [r3, #4]
 810729c:	687b      	ldr	r3, [r7, #4]
 810729e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81072a0:	687b      	ldr	r3, [r7, #4]
 81072a2:	693a      	ldr	r2, [r7, #16]
 81072a4:	621a      	str	r2, [r3, #32]
}
 81072a6:	bf00      	nop
 81072a8:	371c      	adds	r7, #28
 81072aa:	46bd      	mov	sp, r7
 81072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072b0:	4770      	bx	lr
 81072b2:	bf00      	nop
 81072b4:	40010000 	.word	0x40010000
 81072b8:	40010400 	.word	0x40010400
 81072bc:	40014000 	.word	0x40014000
 81072c0:	40014400 	.word	0x40014400
 81072c4:	40014800 	.word	0x40014800

081072c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 81072c8:	b480      	push	{r7}
 81072ca:	b085      	sub	sp, #20
 81072cc:	af00      	add	r7, sp, #0
 81072ce:	6078      	str	r0, [r7, #4]
 81072d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81072d2:	687b      	ldr	r3, [r7, #4]
 81072d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 81072d8:	2b01      	cmp	r3, #1
 81072da:	d101      	bne.n	81072e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81072dc:	2302      	movs	r3, #2
 81072de:	e06d      	b.n	81073bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	2201      	movs	r2, #1
 81072e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	2202      	movs	r2, #2
 81072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	681b      	ldr	r3, [r3, #0]
 81072f4:	685b      	ldr	r3, [r3, #4]
 81072f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81072f8:	687b      	ldr	r3, [r7, #4]
 81072fa:	681b      	ldr	r3, [r3, #0]
 81072fc:	689b      	ldr	r3, [r3, #8]
 81072fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	681b      	ldr	r3, [r3, #0]
 8107304:	4a30      	ldr	r2, [pc, #192]	@ (81073c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107306:	4293      	cmp	r3, r2
 8107308:	d004      	beq.n	8107314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810730a:	687b      	ldr	r3, [r7, #4]
 810730c:	681b      	ldr	r3, [r3, #0]
 810730e:	4a2f      	ldr	r2, [pc, #188]	@ (81073cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107310:	4293      	cmp	r3, r2
 8107312:	d108      	bne.n	8107326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8107314:	68fb      	ldr	r3, [r7, #12]
 8107316:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810731a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810731c:	683b      	ldr	r3, [r7, #0]
 810731e:	685b      	ldr	r3, [r3, #4]
 8107320:	68fa      	ldr	r2, [r7, #12]
 8107322:	4313      	orrs	r3, r2
 8107324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8107326:	68fb      	ldr	r3, [r7, #12]
 8107328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810732c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810732e:	683b      	ldr	r3, [r7, #0]
 8107330:	681b      	ldr	r3, [r3, #0]
 8107332:	68fa      	ldr	r2, [r7, #12]
 8107334:	4313      	orrs	r3, r2
 8107336:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	681b      	ldr	r3, [r3, #0]
 810733c:	68fa      	ldr	r2, [r7, #12]
 810733e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107340:	687b      	ldr	r3, [r7, #4]
 8107342:	681b      	ldr	r3, [r3, #0]
 8107344:	4a20      	ldr	r2, [pc, #128]	@ (81073c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107346:	4293      	cmp	r3, r2
 8107348:	d022      	beq.n	8107390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	681b      	ldr	r3, [r3, #0]
 810734e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107352:	d01d      	beq.n	8107390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	681b      	ldr	r3, [r3, #0]
 8107358:	4a1d      	ldr	r2, [pc, #116]	@ (81073d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810735a:	4293      	cmp	r3, r2
 810735c:	d018      	beq.n	8107390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810735e:	687b      	ldr	r3, [r7, #4]
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	4a1c      	ldr	r2, [pc, #112]	@ (81073d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107364:	4293      	cmp	r3, r2
 8107366:	d013      	beq.n	8107390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107368:	687b      	ldr	r3, [r7, #4]
 810736a:	681b      	ldr	r3, [r3, #0]
 810736c:	4a1a      	ldr	r2, [pc, #104]	@ (81073d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810736e:	4293      	cmp	r3, r2
 8107370:	d00e      	beq.n	8107390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107372:	687b      	ldr	r3, [r7, #4]
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	4a15      	ldr	r2, [pc, #84]	@ (81073cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107378:	4293      	cmp	r3, r2
 810737a:	d009      	beq.n	8107390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810737c:	687b      	ldr	r3, [r7, #4]
 810737e:	681b      	ldr	r3, [r3, #0]
 8107380:	4a16      	ldr	r2, [pc, #88]	@ (81073dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8107382:	4293      	cmp	r3, r2
 8107384:	d004      	beq.n	8107390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107386:	687b      	ldr	r3, [r7, #4]
 8107388:	681b      	ldr	r3, [r3, #0]
 810738a:	4a15      	ldr	r2, [pc, #84]	@ (81073e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810738c:	4293      	cmp	r3, r2
 810738e:	d10c      	bne.n	81073aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107390:	68bb      	ldr	r3, [r7, #8]
 8107392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8107396:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107398:	683b      	ldr	r3, [r7, #0]
 810739a:	689b      	ldr	r3, [r3, #8]
 810739c:	68ba      	ldr	r2, [r7, #8]
 810739e:	4313      	orrs	r3, r2
 81073a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81073a2:	687b      	ldr	r3, [r7, #4]
 81073a4:	681b      	ldr	r3, [r3, #0]
 81073a6:	68ba      	ldr	r2, [r7, #8]
 81073a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81073aa:	687b      	ldr	r3, [r7, #4]
 81073ac:	2201      	movs	r2, #1
 81073ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 81073b2:	687b      	ldr	r3, [r7, #4]
 81073b4:	2200      	movs	r2, #0
 81073b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 81073ba:	2300      	movs	r3, #0
}
 81073bc:	4618      	mov	r0, r3
 81073be:	3714      	adds	r7, #20
 81073c0:	46bd      	mov	sp, r7
 81073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073c6:	4770      	bx	lr
 81073c8:	40010000 	.word	0x40010000
 81073cc:	40010400 	.word	0x40010400
 81073d0:	40000400 	.word	0x40000400
 81073d4:	40000800 	.word	0x40000800
 81073d8:	40000c00 	.word	0x40000c00
 81073dc:	40001800 	.word	0x40001800
 81073e0:	40014000 	.word	0x40014000

081073e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 81073e4:	b480      	push	{r7}
 81073e6:	b085      	sub	sp, #20
 81073e8:	af00      	add	r7, sp, #0
 81073ea:	6078      	str	r0, [r7, #4]
 81073ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 81073ee:	2300      	movs	r3, #0
 81073f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 81073f8:	2b01      	cmp	r3, #1
 81073fa:	d101      	bne.n	8107400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 81073fc:	2302      	movs	r3, #2
 81073fe:	e065      	b.n	81074cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8107400:	687b      	ldr	r3, [r7, #4]
 8107402:	2201      	movs	r2, #1
 8107404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810740e:	683b      	ldr	r3, [r7, #0]
 8107410:	68db      	ldr	r3, [r3, #12]
 8107412:	4313      	orrs	r3, r2
 8107414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8107416:	68fb      	ldr	r3, [r7, #12]
 8107418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810741c:	683b      	ldr	r3, [r7, #0]
 810741e:	689b      	ldr	r3, [r3, #8]
 8107420:	4313      	orrs	r3, r2
 8107422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8107424:	68fb      	ldr	r3, [r7, #12]
 8107426:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810742a:	683b      	ldr	r3, [r7, #0]
 810742c:	685b      	ldr	r3, [r3, #4]
 810742e:	4313      	orrs	r3, r2
 8107430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8107432:	68fb      	ldr	r3, [r7, #12]
 8107434:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8107438:	683b      	ldr	r3, [r7, #0]
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	4313      	orrs	r3, r2
 810743e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8107440:	68fb      	ldr	r3, [r7, #12]
 8107442:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8107446:	683b      	ldr	r3, [r7, #0]
 8107448:	691b      	ldr	r3, [r3, #16]
 810744a:	4313      	orrs	r3, r2
 810744c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810744e:	68fb      	ldr	r3, [r7, #12]
 8107450:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8107454:	683b      	ldr	r3, [r7, #0]
 8107456:	695b      	ldr	r3, [r3, #20]
 8107458:	4313      	orrs	r3, r2
 810745a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810745c:	68fb      	ldr	r3, [r7, #12]
 810745e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8107462:	683b      	ldr	r3, [r7, #0]
 8107464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107466:	4313      	orrs	r3, r2
 8107468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810746a:	68fb      	ldr	r3, [r7, #12]
 810746c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8107470:	683b      	ldr	r3, [r7, #0]
 8107472:	699b      	ldr	r3, [r3, #24]
 8107474:	041b      	lsls	r3, r3, #16
 8107476:	4313      	orrs	r3, r2
 8107478:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810747a:	687b      	ldr	r3, [r7, #4]
 810747c:	681b      	ldr	r3, [r3, #0]
 810747e:	4a16      	ldr	r2, [pc, #88]	@ (81074d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8107480:	4293      	cmp	r3, r2
 8107482:	d004      	beq.n	810748e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	681b      	ldr	r3, [r3, #0]
 8107488:	4a14      	ldr	r2, [pc, #80]	@ (81074dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810748a:	4293      	cmp	r3, r2
 810748c:	d115      	bne.n	81074ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810748e:	68fb      	ldr	r3, [r7, #12]
 8107490:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8107494:	683b      	ldr	r3, [r7, #0]
 8107496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107498:	051b      	lsls	r3, r3, #20
 810749a:	4313      	orrs	r3, r2
 810749c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810749e:	68fb      	ldr	r3, [r7, #12]
 81074a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 81074a4:	683b      	ldr	r3, [r7, #0]
 81074a6:	69db      	ldr	r3, [r3, #28]
 81074a8:	4313      	orrs	r3, r2
 81074aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 81074ac:	68fb      	ldr	r3, [r7, #12]
 81074ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 81074b2:	683b      	ldr	r3, [r7, #0]
 81074b4:	6a1b      	ldr	r3, [r3, #32]
 81074b6:	4313      	orrs	r3, r2
 81074b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 81074ba:	687b      	ldr	r3, [r7, #4]
 81074bc:	681b      	ldr	r3, [r3, #0]
 81074be:	68fa      	ldr	r2, [r7, #12]
 81074c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 81074c2:	687b      	ldr	r3, [r7, #4]
 81074c4:	2200      	movs	r2, #0
 81074c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 81074ca:	2300      	movs	r3, #0
}
 81074cc:	4618      	mov	r0, r3
 81074ce:	3714      	adds	r7, #20
 81074d0:	46bd      	mov	sp, r7
 81074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074d6:	4770      	bx	lr
 81074d8:	40010000 	.word	0x40010000
 81074dc:	40010400 	.word	0x40010400

081074e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81074e0:	b480      	push	{r7}
 81074e2:	b083      	sub	sp, #12
 81074e4:	af00      	add	r7, sp, #0
 81074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81074e8:	bf00      	nop
 81074ea:	370c      	adds	r7, #12
 81074ec:	46bd      	mov	sp, r7
 81074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074f2:	4770      	bx	lr

081074f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81074f4:	b480      	push	{r7}
 81074f6:	b083      	sub	sp, #12
 81074f8:	af00      	add	r7, sp, #0
 81074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81074fc:	bf00      	nop
 81074fe:	370c      	adds	r7, #12
 8107500:	46bd      	mov	sp, r7
 8107502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107506:	4770      	bx	lr

08107508 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107508:	b480      	push	{r7}
 810750a:	b083      	sub	sp, #12
 810750c:	af00      	add	r7, sp, #0
 810750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107510:	bf00      	nop
 8107512:	370c      	adds	r7, #12
 8107514:	46bd      	mov	sp, r7
 8107516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810751a:	4770      	bx	lr

0810751c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810751c:	b580      	push	{r7, lr}
 810751e:	b08a      	sub	sp, #40	@ 0x28
 8107520:	af02      	add	r7, sp, #8
 8107522:	60f8      	str	r0, [r7, #12]
 8107524:	60b9      	str	r1, [r7, #8]
 8107526:	603b      	str	r3, [r7, #0]
 8107528:	4613      	mov	r3, r2
 810752a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810752c:	68fb      	ldr	r3, [r7, #12]
 810752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107532:	2b20      	cmp	r3, #32
 8107534:	d17b      	bne.n	810762e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8107536:	68bb      	ldr	r3, [r7, #8]
 8107538:	2b00      	cmp	r3, #0
 810753a:	d002      	beq.n	8107542 <HAL_UART_Transmit+0x26>
 810753c:	88fb      	ldrh	r3, [r7, #6]
 810753e:	2b00      	cmp	r3, #0
 8107540:	d101      	bne.n	8107546 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8107542:	2301      	movs	r3, #1
 8107544:	e074      	b.n	8107630 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107546:	68fb      	ldr	r3, [r7, #12]
 8107548:	2200      	movs	r2, #0
 810754a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810754e:	68fb      	ldr	r3, [r7, #12]
 8107550:	2221      	movs	r2, #33	@ 0x21
 8107552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8107556:	f7fa fbc7 	bl	8101ce8 <HAL_GetTick>
 810755a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810755c:	68fb      	ldr	r3, [r7, #12]
 810755e:	88fa      	ldrh	r2, [r7, #6]
 8107560:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8107564:	68fb      	ldr	r3, [r7, #12]
 8107566:	88fa      	ldrh	r2, [r7, #6]
 8107568:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810756c:	68fb      	ldr	r3, [r7, #12]
 810756e:	689b      	ldr	r3, [r3, #8]
 8107570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107574:	d108      	bne.n	8107588 <HAL_UART_Transmit+0x6c>
 8107576:	68fb      	ldr	r3, [r7, #12]
 8107578:	691b      	ldr	r3, [r3, #16]
 810757a:	2b00      	cmp	r3, #0
 810757c:	d104      	bne.n	8107588 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810757e:	2300      	movs	r3, #0
 8107580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8107582:	68bb      	ldr	r3, [r7, #8]
 8107584:	61bb      	str	r3, [r7, #24]
 8107586:	e003      	b.n	8107590 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8107588:	68bb      	ldr	r3, [r7, #8]
 810758a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810758c:	2300      	movs	r3, #0
 810758e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8107590:	e030      	b.n	81075f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107592:	683b      	ldr	r3, [r7, #0]
 8107594:	9300      	str	r3, [sp, #0]
 8107596:	697b      	ldr	r3, [r7, #20]
 8107598:	2200      	movs	r2, #0
 810759a:	2180      	movs	r1, #128	@ 0x80
 810759c:	68f8      	ldr	r0, [r7, #12]
 810759e:	f000 f84b 	bl	8107638 <UART_WaitOnFlagUntilTimeout>
 81075a2:	4603      	mov	r3, r0
 81075a4:	2b00      	cmp	r3, #0
 81075a6:	d005      	beq.n	81075b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 81075a8:	68fb      	ldr	r3, [r7, #12]
 81075aa:	2220      	movs	r2, #32
 81075ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 81075b0:	2303      	movs	r3, #3
 81075b2:	e03d      	b.n	8107630 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 81075b4:	69fb      	ldr	r3, [r7, #28]
 81075b6:	2b00      	cmp	r3, #0
 81075b8:	d10b      	bne.n	81075d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81075ba:	69bb      	ldr	r3, [r7, #24]
 81075bc:	881b      	ldrh	r3, [r3, #0]
 81075be:	461a      	mov	r2, r3
 81075c0:	68fb      	ldr	r3, [r7, #12]
 81075c2:	681b      	ldr	r3, [r3, #0]
 81075c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81075c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 81075ca:	69bb      	ldr	r3, [r7, #24]
 81075cc:	3302      	adds	r3, #2
 81075ce:	61bb      	str	r3, [r7, #24]
 81075d0:	e007      	b.n	81075e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81075d2:	69fb      	ldr	r3, [r7, #28]
 81075d4:	781a      	ldrb	r2, [r3, #0]
 81075d6:	68fb      	ldr	r3, [r7, #12]
 81075d8:	681b      	ldr	r3, [r3, #0]
 81075da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81075dc:	69fb      	ldr	r3, [r7, #28]
 81075de:	3301      	adds	r3, #1
 81075e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81075e2:	68fb      	ldr	r3, [r7, #12]
 81075e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81075e8:	b29b      	uxth	r3, r3
 81075ea:	3b01      	subs	r3, #1
 81075ec:	b29a      	uxth	r2, r3
 81075ee:	68fb      	ldr	r3, [r7, #12]
 81075f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81075f4:	68fb      	ldr	r3, [r7, #12]
 81075f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81075fa:	b29b      	uxth	r3, r3
 81075fc:	2b00      	cmp	r3, #0
 81075fe:	d1c8      	bne.n	8107592 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107600:	683b      	ldr	r3, [r7, #0]
 8107602:	9300      	str	r3, [sp, #0]
 8107604:	697b      	ldr	r3, [r7, #20]
 8107606:	2200      	movs	r2, #0
 8107608:	2140      	movs	r1, #64	@ 0x40
 810760a:	68f8      	ldr	r0, [r7, #12]
 810760c:	f000 f814 	bl	8107638 <UART_WaitOnFlagUntilTimeout>
 8107610:	4603      	mov	r3, r0
 8107612:	2b00      	cmp	r3, #0
 8107614:	d005      	beq.n	8107622 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8107616:	68fb      	ldr	r3, [r7, #12]
 8107618:	2220      	movs	r2, #32
 810761a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810761e:	2303      	movs	r3, #3
 8107620:	e006      	b.n	8107630 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107622:	68fb      	ldr	r3, [r7, #12]
 8107624:	2220      	movs	r2, #32
 8107626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810762a:	2300      	movs	r3, #0
 810762c:	e000      	b.n	8107630 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810762e:	2302      	movs	r3, #2
  }
}
 8107630:	4618      	mov	r0, r3
 8107632:	3720      	adds	r7, #32
 8107634:	46bd      	mov	sp, r7
 8107636:	bd80      	pop	{r7, pc}

08107638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107638:	b580      	push	{r7, lr}
 810763a:	b084      	sub	sp, #16
 810763c:	af00      	add	r7, sp, #0
 810763e:	60f8      	str	r0, [r7, #12]
 8107640:	60b9      	str	r1, [r7, #8]
 8107642:	603b      	str	r3, [r7, #0]
 8107644:	4613      	mov	r3, r2
 8107646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107648:	e04f      	b.n	81076ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810764a:	69bb      	ldr	r3, [r7, #24]
 810764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107650:	d04b      	beq.n	81076ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107652:	f7fa fb49 	bl	8101ce8 <HAL_GetTick>
 8107656:	4602      	mov	r2, r0
 8107658:	683b      	ldr	r3, [r7, #0]
 810765a:	1ad3      	subs	r3, r2, r3
 810765c:	69ba      	ldr	r2, [r7, #24]
 810765e:	429a      	cmp	r2, r3
 8107660:	d302      	bcc.n	8107668 <UART_WaitOnFlagUntilTimeout+0x30>
 8107662:	69bb      	ldr	r3, [r7, #24]
 8107664:	2b00      	cmp	r3, #0
 8107666:	d101      	bne.n	810766c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8107668:	2303      	movs	r3, #3
 810766a:	e04e      	b.n	810770a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810766c:	68fb      	ldr	r3, [r7, #12]
 810766e:	681b      	ldr	r3, [r3, #0]
 8107670:	681b      	ldr	r3, [r3, #0]
 8107672:	f003 0304 	and.w	r3, r3, #4
 8107676:	2b00      	cmp	r3, #0
 8107678:	d037      	beq.n	81076ea <UART_WaitOnFlagUntilTimeout+0xb2>
 810767a:	68bb      	ldr	r3, [r7, #8]
 810767c:	2b80      	cmp	r3, #128	@ 0x80
 810767e:	d034      	beq.n	81076ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8107680:	68bb      	ldr	r3, [r7, #8]
 8107682:	2b40      	cmp	r3, #64	@ 0x40
 8107684:	d031      	beq.n	81076ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8107686:	68fb      	ldr	r3, [r7, #12]
 8107688:	681b      	ldr	r3, [r3, #0]
 810768a:	69db      	ldr	r3, [r3, #28]
 810768c:	f003 0308 	and.w	r3, r3, #8
 8107690:	2b08      	cmp	r3, #8
 8107692:	d110      	bne.n	81076b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8107694:	68fb      	ldr	r3, [r7, #12]
 8107696:	681b      	ldr	r3, [r3, #0]
 8107698:	2208      	movs	r2, #8
 810769a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810769c:	68f8      	ldr	r0, [r7, #12]
 810769e:	f000 f838 	bl	8107712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 81076a2:	68fb      	ldr	r3, [r7, #12]
 81076a4:	2208      	movs	r2, #8
 81076a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81076aa:	68fb      	ldr	r3, [r7, #12]
 81076ac:	2200      	movs	r2, #0
 81076ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 81076b2:	2301      	movs	r3, #1
 81076b4:	e029      	b.n	810770a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81076b6:	68fb      	ldr	r3, [r7, #12]
 81076b8:	681b      	ldr	r3, [r3, #0]
 81076ba:	69db      	ldr	r3, [r3, #28]
 81076bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81076c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81076c4:	d111      	bne.n	81076ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81076c6:	68fb      	ldr	r3, [r7, #12]
 81076c8:	681b      	ldr	r3, [r3, #0]
 81076ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81076ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81076d0:	68f8      	ldr	r0, [r7, #12]
 81076d2:	f000 f81e 	bl	8107712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81076d6:	68fb      	ldr	r3, [r7, #12]
 81076d8:	2220      	movs	r2, #32
 81076da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81076de:	68fb      	ldr	r3, [r7, #12]
 81076e0:	2200      	movs	r2, #0
 81076e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81076e6:	2303      	movs	r3, #3
 81076e8:	e00f      	b.n	810770a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81076ea:	68fb      	ldr	r3, [r7, #12]
 81076ec:	681b      	ldr	r3, [r3, #0]
 81076ee:	69da      	ldr	r2, [r3, #28]
 81076f0:	68bb      	ldr	r3, [r7, #8]
 81076f2:	4013      	ands	r3, r2
 81076f4:	68ba      	ldr	r2, [r7, #8]
 81076f6:	429a      	cmp	r2, r3
 81076f8:	bf0c      	ite	eq
 81076fa:	2301      	moveq	r3, #1
 81076fc:	2300      	movne	r3, #0
 81076fe:	b2db      	uxtb	r3, r3
 8107700:	461a      	mov	r2, r3
 8107702:	79fb      	ldrb	r3, [r7, #7]
 8107704:	429a      	cmp	r2, r3
 8107706:	d0a0      	beq.n	810764a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107708:	2300      	movs	r3, #0
}
 810770a:	4618      	mov	r0, r3
 810770c:	3710      	adds	r7, #16
 810770e:	46bd      	mov	sp, r7
 8107710:	bd80      	pop	{r7, pc}

08107712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8107712:	b480      	push	{r7}
 8107714:	b095      	sub	sp, #84	@ 0x54
 8107716:	af00      	add	r7, sp, #0
 8107718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810771a:	687b      	ldr	r3, [r7, #4]
 810771c:	681b      	ldr	r3, [r3, #0]
 810771e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107722:	e853 3f00 	ldrex	r3, [r3]
 8107726:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8107728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810772a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810772e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107730:	687b      	ldr	r3, [r7, #4]
 8107732:	681b      	ldr	r3, [r3, #0]
 8107734:	461a      	mov	r2, r3
 8107736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8107738:	643b      	str	r3, [r7, #64]	@ 0x40
 810773a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810773c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810773e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8107740:	e841 2300 	strex	r3, r2, [r1]
 8107744:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8107746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107748:	2b00      	cmp	r3, #0
 810774a:	d1e6      	bne.n	810771a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810774c:	687b      	ldr	r3, [r7, #4]
 810774e:	681b      	ldr	r3, [r3, #0]
 8107750:	3308      	adds	r3, #8
 8107752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107754:	6a3b      	ldr	r3, [r7, #32]
 8107756:	e853 3f00 	ldrex	r3, [r3]
 810775a:	61fb      	str	r3, [r7, #28]
   return(result);
 810775c:	69fb      	ldr	r3, [r7, #28]
 810775e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8107762:	f023 0301 	bic.w	r3, r3, #1
 8107766:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107768:	687b      	ldr	r3, [r7, #4]
 810776a:	681b      	ldr	r3, [r3, #0]
 810776c:	3308      	adds	r3, #8
 810776e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8107770:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8107772:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107774:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8107776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8107778:	e841 2300 	strex	r3, r2, [r1]
 810777c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107780:	2b00      	cmp	r3, #0
 8107782:	d1e3      	bne.n	810774c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8107784:	687b      	ldr	r3, [r7, #4]
 8107786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107788:	2b01      	cmp	r3, #1
 810778a:	d118      	bne.n	81077be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810778c:	687b      	ldr	r3, [r7, #4]
 810778e:	681b      	ldr	r3, [r3, #0]
 8107790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107792:	68fb      	ldr	r3, [r7, #12]
 8107794:	e853 3f00 	ldrex	r3, [r3]
 8107798:	60bb      	str	r3, [r7, #8]
   return(result);
 810779a:	68bb      	ldr	r3, [r7, #8]
 810779c:	f023 0310 	bic.w	r3, r3, #16
 81077a0:	647b      	str	r3, [r7, #68]	@ 0x44
 81077a2:	687b      	ldr	r3, [r7, #4]
 81077a4:	681b      	ldr	r3, [r3, #0]
 81077a6:	461a      	mov	r2, r3
 81077a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81077aa:	61bb      	str	r3, [r7, #24]
 81077ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81077ae:	6979      	ldr	r1, [r7, #20]
 81077b0:	69ba      	ldr	r2, [r7, #24]
 81077b2:	e841 2300 	strex	r3, r2, [r1]
 81077b6:	613b      	str	r3, [r7, #16]
   return(result);
 81077b8:	693b      	ldr	r3, [r7, #16]
 81077ba:	2b00      	cmp	r3, #0
 81077bc:	d1e6      	bne.n	810778c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81077be:	687b      	ldr	r3, [r7, #4]
 81077c0:	2220      	movs	r2, #32
 81077c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81077c6:	687b      	ldr	r3, [r7, #4]
 81077c8:	2200      	movs	r2, #0
 81077ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81077cc:	687b      	ldr	r3, [r7, #4]
 81077ce:	2200      	movs	r2, #0
 81077d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 81077d2:	bf00      	nop
 81077d4:	3754      	adds	r7, #84	@ 0x54
 81077d6:	46bd      	mov	sp, r7
 81077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077dc:	4770      	bx	lr

081077de <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 81077de:	b084      	sub	sp, #16
 81077e0:	b580      	push	{r7, lr}
 81077e2:	b084      	sub	sp, #16
 81077e4:	af00      	add	r7, sp, #0
 81077e6:	6078      	str	r0, [r7, #4]
 81077e8:	f107 001c 	add.w	r0, r7, #28
 81077ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 81077f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 81077f4:	2b01      	cmp	r3, #1
 81077f6:	d123      	bne.n	8107840 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 81077f8:	687b      	ldr	r3, [r7, #4]
 81077fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81077fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8107800:	687b      	ldr	r3, [r7, #4]
 8107802:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	68db      	ldr	r3, [r3, #12]
 8107808:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 810780c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8107810:	687a      	ldr	r2, [r7, #4]
 8107812:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8107814:	687b      	ldr	r3, [r7, #4]
 8107816:	68db      	ldr	r3, [r3, #12]
 8107818:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 810781c:	687b      	ldr	r3, [r7, #4]
 810781e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8107820:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8107824:	2b01      	cmp	r3, #1
 8107826:	d105      	bne.n	8107834 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8107828:	687b      	ldr	r3, [r7, #4]
 810782a:	68db      	ldr	r3, [r3, #12]
 810782c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8107830:	687b      	ldr	r3, [r7, #4]
 8107832:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8107834:	6878      	ldr	r0, [r7, #4]
 8107836:	f000 faa7 	bl	8107d88 <USB_CoreReset>
 810783a:	4603      	mov	r3, r0
 810783c:	73fb      	strb	r3, [r7, #15]
 810783e:	e01b      	b.n	8107878 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8107840:	687b      	ldr	r3, [r7, #4]
 8107842:	68db      	ldr	r3, [r3, #12]
 8107844:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8107848:	687b      	ldr	r3, [r7, #4]
 810784a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810784c:	6878      	ldr	r0, [r7, #4]
 810784e:	f000 fa9b 	bl	8107d88 <USB_CoreReset>
 8107852:	4603      	mov	r3, r0
 8107854:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8107856:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 810785a:	2b00      	cmp	r3, #0
 810785c:	d106      	bne.n	810786c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810785e:	687b      	ldr	r3, [r7, #4]
 8107860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107862:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8107866:	687b      	ldr	r3, [r7, #4]
 8107868:	639a      	str	r2, [r3, #56]	@ 0x38
 810786a:	e005      	b.n	8107878 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810786c:	687b      	ldr	r3, [r7, #4]
 810786e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107870:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8107874:	687b      	ldr	r3, [r7, #4]
 8107876:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8107878:	7fbb      	ldrb	r3, [r7, #30]
 810787a:	2b01      	cmp	r3, #1
 810787c:	d118      	bne.n	81078b0 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810787e:	687b      	ldr	r3, [r7, #4]
 8107880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107882:	b29a      	uxth	r2, r3
 8107884:	687b      	ldr	r3, [r7, #4]
 8107886:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8107888:	687b      	ldr	r3, [r7, #4]
 810788a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810788c:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 8107890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107894:	687a      	ldr	r2, [r7, #4]
 8107896:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8107898:	687b      	ldr	r3, [r7, #4]
 810789a:	689b      	ldr	r3, [r3, #8]
 810789c:	f043 0206 	orr.w	r2, r3, #6
 81078a0:	687b      	ldr	r3, [r7, #4]
 81078a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 81078a4:	687b      	ldr	r3, [r7, #4]
 81078a6:	689b      	ldr	r3, [r3, #8]
 81078a8:	f043 0220 	orr.w	r2, r3, #32
 81078ac:	687b      	ldr	r3, [r7, #4]
 81078ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 81078b0:	7bfb      	ldrb	r3, [r7, #15]
}
 81078b2:	4618      	mov	r0, r3
 81078b4:	3710      	adds	r7, #16
 81078b6:	46bd      	mov	sp, r7
 81078b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81078bc:	b004      	add	sp, #16
 81078be:	4770      	bx	lr

081078c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 81078c0:	b480      	push	{r7}
 81078c2:	b083      	sub	sp, #12
 81078c4:	af00      	add	r7, sp, #0
 81078c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 81078c8:	687b      	ldr	r3, [r7, #4]
 81078ca:	689b      	ldr	r3, [r3, #8]
 81078cc:	f023 0201 	bic.w	r2, r3, #1
 81078d0:	687b      	ldr	r3, [r7, #4]
 81078d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 81078d4:	2300      	movs	r3, #0
}
 81078d6:	4618      	mov	r0, r3
 81078d8:	370c      	adds	r7, #12
 81078da:	46bd      	mov	sp, r7
 81078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078e0:	4770      	bx	lr

081078e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 81078e2:	b580      	push	{r7, lr}
 81078e4:	b084      	sub	sp, #16
 81078e6:	af00      	add	r7, sp, #0
 81078e8:	6078      	str	r0, [r7, #4]
 81078ea:	460b      	mov	r3, r1
 81078ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 81078ee:	2300      	movs	r3, #0
 81078f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 81078f2:	687b      	ldr	r3, [r7, #4]
 81078f4:	68db      	ldr	r3, [r3, #12]
 81078f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 81078fa:	687b      	ldr	r3, [r7, #4]
 81078fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 81078fe:	78fb      	ldrb	r3, [r7, #3]
 8107900:	2b01      	cmp	r3, #1
 8107902:	d115      	bne.n	8107930 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8107904:	687b      	ldr	r3, [r7, #4]
 8107906:	68db      	ldr	r3, [r3, #12]
 8107908:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810790c:	687b      	ldr	r3, [r7, #4]
 810790e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8107910:	200a      	movs	r0, #10
 8107912:	f7fa f9f5 	bl	8101d00 <HAL_Delay>
      ms += 10U;
 8107916:	68fb      	ldr	r3, [r7, #12]
 8107918:	330a      	adds	r3, #10
 810791a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810791c:	6878      	ldr	r0, [r7, #4]
 810791e:	f000 fa25 	bl	8107d6c <USB_GetMode>
 8107922:	4603      	mov	r3, r0
 8107924:	2b01      	cmp	r3, #1
 8107926:	d01e      	beq.n	8107966 <USB_SetCurrentMode+0x84>
 8107928:	68fb      	ldr	r3, [r7, #12]
 810792a:	2bc7      	cmp	r3, #199	@ 0xc7
 810792c:	d9f0      	bls.n	8107910 <USB_SetCurrentMode+0x2e>
 810792e:	e01a      	b.n	8107966 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8107930:	78fb      	ldrb	r3, [r7, #3]
 8107932:	2b00      	cmp	r3, #0
 8107934:	d115      	bne.n	8107962 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8107936:	687b      	ldr	r3, [r7, #4]
 8107938:	68db      	ldr	r3, [r3, #12]
 810793a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810793e:	687b      	ldr	r3, [r7, #4]
 8107940:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8107942:	200a      	movs	r0, #10
 8107944:	f7fa f9dc 	bl	8101d00 <HAL_Delay>
      ms += 10U;
 8107948:	68fb      	ldr	r3, [r7, #12]
 810794a:	330a      	adds	r3, #10
 810794c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810794e:	6878      	ldr	r0, [r7, #4]
 8107950:	f000 fa0c 	bl	8107d6c <USB_GetMode>
 8107954:	4603      	mov	r3, r0
 8107956:	2b00      	cmp	r3, #0
 8107958:	d005      	beq.n	8107966 <USB_SetCurrentMode+0x84>
 810795a:	68fb      	ldr	r3, [r7, #12]
 810795c:	2bc7      	cmp	r3, #199	@ 0xc7
 810795e:	d9f0      	bls.n	8107942 <USB_SetCurrentMode+0x60>
 8107960:	e001      	b.n	8107966 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8107962:	2301      	movs	r3, #1
 8107964:	e005      	b.n	8107972 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8107966:	68fb      	ldr	r3, [r7, #12]
 8107968:	2bc8      	cmp	r3, #200	@ 0xc8
 810796a:	d101      	bne.n	8107970 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810796c:	2301      	movs	r3, #1
 810796e:	e000      	b.n	8107972 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8107970:	2300      	movs	r3, #0
}
 8107972:	4618      	mov	r0, r3
 8107974:	3710      	adds	r7, #16
 8107976:	46bd      	mov	sp, r7
 8107978:	bd80      	pop	{r7, pc}
	...

0810797c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810797c:	b084      	sub	sp, #16
 810797e:	b580      	push	{r7, lr}
 8107980:	b086      	sub	sp, #24
 8107982:	af00      	add	r7, sp, #0
 8107984:	6078      	str	r0, [r7, #4]
 8107986:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 810798a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810798e:	2300      	movs	r3, #0
 8107990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8107992:	687b      	ldr	r3, [r7, #4]
 8107994:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8107996:	2300      	movs	r3, #0
 8107998:	613b      	str	r3, [r7, #16]
 810799a:	e009      	b.n	81079b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810799c:	687a      	ldr	r2, [r7, #4]
 810799e:	693b      	ldr	r3, [r7, #16]
 81079a0:	3340      	adds	r3, #64	@ 0x40
 81079a2:	009b      	lsls	r3, r3, #2
 81079a4:	4413      	add	r3, r2
 81079a6:	2200      	movs	r2, #0
 81079a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 81079aa:	693b      	ldr	r3, [r7, #16]
 81079ac:	3301      	adds	r3, #1
 81079ae:	613b      	str	r3, [r7, #16]
 81079b0:	693b      	ldr	r3, [r7, #16]
 81079b2:	2b0e      	cmp	r3, #14
 81079b4:	d9f2      	bls.n	810799c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 81079b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 81079ba:	2b00      	cmp	r3, #0
 81079bc:	d11c      	bne.n	81079f8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 81079be:	68fb      	ldr	r3, [r7, #12]
 81079c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81079c4:	685b      	ldr	r3, [r3, #4]
 81079c6:	68fa      	ldr	r2, [r7, #12]
 81079c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81079cc:	f043 0302 	orr.w	r3, r3, #2
 81079d0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 81079d2:	687b      	ldr	r3, [r7, #4]
 81079d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81079d6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 81079da:	687b      	ldr	r3, [r7, #4]
 81079dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 81079de:	687b      	ldr	r3, [r7, #4]
 81079e0:	681b      	ldr	r3, [r3, #0]
 81079e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 81079e6:	687b      	ldr	r3, [r7, #4]
 81079e8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 81079ea:	687b      	ldr	r3, [r7, #4]
 81079ec:	681b      	ldr	r3, [r3, #0]
 81079ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81079f2:	687b      	ldr	r3, [r7, #4]
 81079f4:	601a      	str	r2, [r3, #0]
 81079f6:	e005      	b.n	8107a04 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 81079f8:	687b      	ldr	r3, [r7, #4]
 81079fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81079fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8107a00:	687b      	ldr	r3, [r7, #4]
 8107a02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8107a04:	68fb      	ldr	r3, [r7, #12]
 8107a06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8107a0a:	461a      	mov	r2, r3
 8107a0c:	2300      	movs	r3, #0
 8107a0e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8107a10:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8107a14:	2b01      	cmp	r3, #1
 8107a16:	d10d      	bne.n	8107a34 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8107a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8107a1c:	2b00      	cmp	r3, #0
 8107a1e:	d104      	bne.n	8107a2a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8107a20:	2100      	movs	r1, #0
 8107a22:	6878      	ldr	r0, [r7, #4]
 8107a24:	f000 f968 	bl	8107cf8 <USB_SetDevSpeed>
 8107a28:	e008      	b.n	8107a3c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8107a2a:	2101      	movs	r1, #1
 8107a2c:	6878      	ldr	r0, [r7, #4]
 8107a2e:	f000 f963 	bl	8107cf8 <USB_SetDevSpeed>
 8107a32:	e003      	b.n	8107a3c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8107a34:	2103      	movs	r1, #3
 8107a36:	6878      	ldr	r0, [r7, #4]
 8107a38:	f000 f95e 	bl	8107cf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8107a3c:	2110      	movs	r1, #16
 8107a3e:	6878      	ldr	r0, [r7, #4]
 8107a40:	f000 f8fa 	bl	8107c38 <USB_FlushTxFifo>
 8107a44:	4603      	mov	r3, r0
 8107a46:	2b00      	cmp	r3, #0
 8107a48:	d001      	beq.n	8107a4e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8107a4a:	2301      	movs	r3, #1
 8107a4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8107a4e:	6878      	ldr	r0, [r7, #4]
 8107a50:	f000 f924 	bl	8107c9c <USB_FlushRxFifo>
 8107a54:	4603      	mov	r3, r0
 8107a56:	2b00      	cmp	r3, #0
 8107a58:	d001      	beq.n	8107a5e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8107a5a:	2301      	movs	r3, #1
 8107a5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8107a5e:	68fb      	ldr	r3, [r7, #12]
 8107a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107a64:	461a      	mov	r2, r3
 8107a66:	2300      	movs	r3, #0
 8107a68:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8107a6a:	68fb      	ldr	r3, [r7, #12]
 8107a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107a70:	461a      	mov	r2, r3
 8107a72:	2300      	movs	r3, #0
 8107a74:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8107a76:	68fb      	ldr	r3, [r7, #12]
 8107a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107a7c:	461a      	mov	r2, r3
 8107a7e:	2300      	movs	r3, #0
 8107a80:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107a82:	2300      	movs	r3, #0
 8107a84:	613b      	str	r3, [r7, #16]
 8107a86:	e043      	b.n	8107b10 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8107a88:	693b      	ldr	r3, [r7, #16]
 8107a8a:	015a      	lsls	r2, r3, #5
 8107a8c:	68fb      	ldr	r3, [r7, #12]
 8107a8e:	4413      	add	r3, r2
 8107a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107a94:	681b      	ldr	r3, [r3, #0]
 8107a96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8107a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8107a9e:	d118      	bne.n	8107ad2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8107aa0:	693b      	ldr	r3, [r7, #16]
 8107aa2:	2b00      	cmp	r3, #0
 8107aa4:	d10a      	bne.n	8107abc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8107aa6:	693b      	ldr	r3, [r7, #16]
 8107aa8:	015a      	lsls	r2, r3, #5
 8107aaa:	68fb      	ldr	r3, [r7, #12]
 8107aac:	4413      	add	r3, r2
 8107aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107ab2:	461a      	mov	r2, r3
 8107ab4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8107ab8:	6013      	str	r3, [r2, #0]
 8107aba:	e013      	b.n	8107ae4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8107abc:	693b      	ldr	r3, [r7, #16]
 8107abe:	015a      	lsls	r2, r3, #5
 8107ac0:	68fb      	ldr	r3, [r7, #12]
 8107ac2:	4413      	add	r3, r2
 8107ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107ac8:	461a      	mov	r2, r3
 8107aca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8107ace:	6013      	str	r3, [r2, #0]
 8107ad0:	e008      	b.n	8107ae4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8107ad2:	693b      	ldr	r3, [r7, #16]
 8107ad4:	015a      	lsls	r2, r3, #5
 8107ad6:	68fb      	ldr	r3, [r7, #12]
 8107ad8:	4413      	add	r3, r2
 8107ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107ade:	461a      	mov	r2, r3
 8107ae0:	2300      	movs	r3, #0
 8107ae2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8107ae4:	693b      	ldr	r3, [r7, #16]
 8107ae6:	015a      	lsls	r2, r3, #5
 8107ae8:	68fb      	ldr	r3, [r7, #12]
 8107aea:	4413      	add	r3, r2
 8107aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107af0:	461a      	mov	r2, r3
 8107af2:	2300      	movs	r3, #0
 8107af4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8107af6:	693b      	ldr	r3, [r7, #16]
 8107af8:	015a      	lsls	r2, r3, #5
 8107afa:	68fb      	ldr	r3, [r7, #12]
 8107afc:	4413      	add	r3, r2
 8107afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8107b02:	461a      	mov	r2, r3
 8107b04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8107b08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107b0a:	693b      	ldr	r3, [r7, #16]
 8107b0c:	3301      	adds	r3, #1
 8107b0e:	613b      	str	r3, [r7, #16]
 8107b10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8107b14:	461a      	mov	r2, r3
 8107b16:	693b      	ldr	r3, [r7, #16]
 8107b18:	4293      	cmp	r3, r2
 8107b1a:	d3b5      	bcc.n	8107a88 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107b1c:	2300      	movs	r3, #0
 8107b1e:	613b      	str	r3, [r7, #16]
 8107b20:	e043      	b.n	8107baa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8107b22:	693b      	ldr	r3, [r7, #16]
 8107b24:	015a      	lsls	r2, r3, #5
 8107b26:	68fb      	ldr	r3, [r7, #12]
 8107b28:	4413      	add	r3, r2
 8107b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107b2e:	681b      	ldr	r3, [r3, #0]
 8107b30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8107b34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8107b38:	d118      	bne.n	8107b6c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8107b3a:	693b      	ldr	r3, [r7, #16]
 8107b3c:	2b00      	cmp	r3, #0
 8107b3e:	d10a      	bne.n	8107b56 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8107b40:	693b      	ldr	r3, [r7, #16]
 8107b42:	015a      	lsls	r2, r3, #5
 8107b44:	68fb      	ldr	r3, [r7, #12]
 8107b46:	4413      	add	r3, r2
 8107b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107b4c:	461a      	mov	r2, r3
 8107b4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8107b52:	6013      	str	r3, [r2, #0]
 8107b54:	e013      	b.n	8107b7e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8107b56:	693b      	ldr	r3, [r7, #16]
 8107b58:	015a      	lsls	r2, r3, #5
 8107b5a:	68fb      	ldr	r3, [r7, #12]
 8107b5c:	4413      	add	r3, r2
 8107b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107b62:	461a      	mov	r2, r3
 8107b64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8107b68:	6013      	str	r3, [r2, #0]
 8107b6a:	e008      	b.n	8107b7e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8107b6c:	693b      	ldr	r3, [r7, #16]
 8107b6e:	015a      	lsls	r2, r3, #5
 8107b70:	68fb      	ldr	r3, [r7, #12]
 8107b72:	4413      	add	r3, r2
 8107b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107b78:	461a      	mov	r2, r3
 8107b7a:	2300      	movs	r3, #0
 8107b7c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8107b7e:	693b      	ldr	r3, [r7, #16]
 8107b80:	015a      	lsls	r2, r3, #5
 8107b82:	68fb      	ldr	r3, [r7, #12]
 8107b84:	4413      	add	r3, r2
 8107b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107b8a:	461a      	mov	r2, r3
 8107b8c:	2300      	movs	r3, #0
 8107b8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8107b90:	693b      	ldr	r3, [r7, #16]
 8107b92:	015a      	lsls	r2, r3, #5
 8107b94:	68fb      	ldr	r3, [r7, #12]
 8107b96:	4413      	add	r3, r2
 8107b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8107b9c:	461a      	mov	r2, r3
 8107b9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8107ba2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107ba4:	693b      	ldr	r3, [r7, #16]
 8107ba6:	3301      	adds	r3, #1
 8107ba8:	613b      	str	r3, [r7, #16]
 8107baa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8107bae:	461a      	mov	r2, r3
 8107bb0:	693b      	ldr	r3, [r7, #16]
 8107bb2:	4293      	cmp	r3, r2
 8107bb4:	d3b5      	bcc.n	8107b22 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8107bb6:	68fb      	ldr	r3, [r7, #12]
 8107bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107bbc:	691b      	ldr	r3, [r3, #16]
 8107bbe:	68fa      	ldr	r2, [r7, #12]
 8107bc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8107bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8107bc8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8107bca:	687b      	ldr	r3, [r7, #4]
 8107bcc:	2200      	movs	r2, #0
 8107bce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8107bd0:	687b      	ldr	r3, [r7, #4]
 8107bd2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8107bd6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8107bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8107bdc:	2b00      	cmp	r3, #0
 8107bde:	d105      	bne.n	8107bec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8107be0:	687b      	ldr	r3, [r7, #4]
 8107be2:	699b      	ldr	r3, [r3, #24]
 8107be4:	f043 0210 	orr.w	r2, r3, #16
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8107bec:	687b      	ldr	r3, [r7, #4]
 8107bee:	699a      	ldr	r2, [r3, #24]
 8107bf0:	4b10      	ldr	r3, [pc, #64]	@ (8107c34 <USB_DevInit+0x2b8>)
 8107bf2:	4313      	orrs	r3, r2
 8107bf4:	687a      	ldr	r2, [r7, #4]
 8107bf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8107bf8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8107bfc:	2b00      	cmp	r3, #0
 8107bfe:	d005      	beq.n	8107c0c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8107c00:	687b      	ldr	r3, [r7, #4]
 8107c02:	699b      	ldr	r3, [r3, #24]
 8107c04:	f043 0208 	orr.w	r2, r3, #8
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8107c0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8107c10:	2b01      	cmp	r3, #1
 8107c12:	d107      	bne.n	8107c24 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8107c14:	687b      	ldr	r3, [r7, #4]
 8107c16:	699b      	ldr	r3, [r3, #24]
 8107c18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8107c1c:	f043 0304 	orr.w	r3, r3, #4
 8107c20:	687a      	ldr	r2, [r7, #4]
 8107c22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8107c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8107c26:	4618      	mov	r0, r3
 8107c28:	3718      	adds	r7, #24
 8107c2a:	46bd      	mov	sp, r7
 8107c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8107c30:	b004      	add	sp, #16
 8107c32:	4770      	bx	lr
 8107c34:	803c3800 	.word	0x803c3800

08107c38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8107c38:	b480      	push	{r7}
 8107c3a:	b085      	sub	sp, #20
 8107c3c:	af00      	add	r7, sp, #0
 8107c3e:	6078      	str	r0, [r7, #4]
 8107c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8107c42:	2300      	movs	r3, #0
 8107c44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8107c46:	68fb      	ldr	r3, [r7, #12]
 8107c48:	3301      	adds	r3, #1
 8107c4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107c4c:	68fb      	ldr	r3, [r7, #12]
 8107c4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107c52:	d901      	bls.n	8107c58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8107c54:	2303      	movs	r3, #3
 8107c56:	e01b      	b.n	8107c90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8107c58:	687b      	ldr	r3, [r7, #4]
 8107c5a:	691b      	ldr	r3, [r3, #16]
 8107c5c:	2b00      	cmp	r3, #0
 8107c5e:	daf2      	bge.n	8107c46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8107c60:	2300      	movs	r3, #0
 8107c62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8107c64:	683b      	ldr	r3, [r7, #0]
 8107c66:	019b      	lsls	r3, r3, #6
 8107c68:	f043 0220 	orr.w	r2, r3, #32
 8107c6c:	687b      	ldr	r3, [r7, #4]
 8107c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8107c70:	68fb      	ldr	r3, [r7, #12]
 8107c72:	3301      	adds	r3, #1
 8107c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107c76:	68fb      	ldr	r3, [r7, #12]
 8107c78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107c7c:	d901      	bls.n	8107c82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8107c7e:	2303      	movs	r3, #3
 8107c80:	e006      	b.n	8107c90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8107c82:	687b      	ldr	r3, [r7, #4]
 8107c84:	691b      	ldr	r3, [r3, #16]
 8107c86:	f003 0320 	and.w	r3, r3, #32
 8107c8a:	2b20      	cmp	r3, #32
 8107c8c:	d0f0      	beq.n	8107c70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8107c8e:	2300      	movs	r3, #0
}
 8107c90:	4618      	mov	r0, r3
 8107c92:	3714      	adds	r7, #20
 8107c94:	46bd      	mov	sp, r7
 8107c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c9a:	4770      	bx	lr

08107c9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8107c9c:	b480      	push	{r7}
 8107c9e:	b085      	sub	sp, #20
 8107ca0:	af00      	add	r7, sp, #0
 8107ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8107ca4:	2300      	movs	r3, #0
 8107ca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8107ca8:	68fb      	ldr	r3, [r7, #12]
 8107caa:	3301      	adds	r3, #1
 8107cac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107cae:	68fb      	ldr	r3, [r7, #12]
 8107cb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107cb4:	d901      	bls.n	8107cba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8107cb6:	2303      	movs	r3, #3
 8107cb8:	e018      	b.n	8107cec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	691b      	ldr	r3, [r3, #16]
 8107cbe:	2b00      	cmp	r3, #0
 8107cc0:	daf2      	bge.n	8107ca8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8107cc2:	2300      	movs	r3, #0
 8107cc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	2210      	movs	r2, #16
 8107cca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8107ccc:	68fb      	ldr	r3, [r7, #12]
 8107cce:	3301      	adds	r3, #1
 8107cd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107cd2:	68fb      	ldr	r3, [r7, #12]
 8107cd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107cd8:	d901      	bls.n	8107cde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8107cda:	2303      	movs	r3, #3
 8107cdc:	e006      	b.n	8107cec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8107cde:	687b      	ldr	r3, [r7, #4]
 8107ce0:	691b      	ldr	r3, [r3, #16]
 8107ce2:	f003 0310 	and.w	r3, r3, #16
 8107ce6:	2b10      	cmp	r3, #16
 8107ce8:	d0f0      	beq.n	8107ccc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8107cea:	2300      	movs	r3, #0
}
 8107cec:	4618      	mov	r0, r3
 8107cee:	3714      	adds	r7, #20
 8107cf0:	46bd      	mov	sp, r7
 8107cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cf6:	4770      	bx	lr

08107cf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8107cf8:	b480      	push	{r7}
 8107cfa:	b085      	sub	sp, #20
 8107cfc:	af00      	add	r7, sp, #0
 8107cfe:	6078      	str	r0, [r7, #4]
 8107d00:	460b      	mov	r3, r1
 8107d02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8107d08:	68fb      	ldr	r3, [r7, #12]
 8107d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107d0e:	681a      	ldr	r2, [r3, #0]
 8107d10:	78fb      	ldrb	r3, [r7, #3]
 8107d12:	68f9      	ldr	r1, [r7, #12]
 8107d14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8107d18:	4313      	orrs	r3, r2
 8107d1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8107d1c:	2300      	movs	r3, #0
}
 8107d1e:	4618      	mov	r0, r3
 8107d20:	3714      	adds	r7, #20
 8107d22:	46bd      	mov	sp, r7
 8107d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d28:	4770      	bx	lr

08107d2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8107d2a:	b480      	push	{r7}
 8107d2c:	b085      	sub	sp, #20
 8107d2e:	af00      	add	r7, sp, #0
 8107d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8107d32:	687b      	ldr	r3, [r7, #4]
 8107d34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8107d36:	68fb      	ldr	r3, [r7, #12]
 8107d38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8107d3c:	681b      	ldr	r3, [r3, #0]
 8107d3e:	68fa      	ldr	r2, [r7, #12]
 8107d40:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8107d44:	f023 0303 	bic.w	r3, r3, #3
 8107d48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8107d4a:	68fb      	ldr	r3, [r7, #12]
 8107d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8107d50:	685b      	ldr	r3, [r3, #4]
 8107d52:	68fa      	ldr	r2, [r7, #12]
 8107d54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8107d58:	f043 0302 	orr.w	r3, r3, #2
 8107d5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8107d5e:	2300      	movs	r3, #0
}
 8107d60:	4618      	mov	r0, r3
 8107d62:	3714      	adds	r7, #20
 8107d64:	46bd      	mov	sp, r7
 8107d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d6a:	4770      	bx	lr

08107d6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8107d6c:	b480      	push	{r7}
 8107d6e:	b083      	sub	sp, #12
 8107d70:	af00      	add	r7, sp, #0
 8107d72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	695b      	ldr	r3, [r3, #20]
 8107d78:	f003 0301 	and.w	r3, r3, #1
}
 8107d7c:	4618      	mov	r0, r3
 8107d7e:	370c      	adds	r7, #12
 8107d80:	46bd      	mov	sp, r7
 8107d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d86:	4770      	bx	lr

08107d88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8107d88:	b480      	push	{r7}
 8107d8a:	b085      	sub	sp, #20
 8107d8c:	af00      	add	r7, sp, #0
 8107d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8107d90:	2300      	movs	r3, #0
 8107d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8107d94:	68fb      	ldr	r3, [r7, #12]
 8107d96:	3301      	adds	r3, #1
 8107d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107d9a:	68fb      	ldr	r3, [r7, #12]
 8107d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107da0:	d901      	bls.n	8107da6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8107da2:	2303      	movs	r3, #3
 8107da4:	e01b      	b.n	8107dde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8107da6:	687b      	ldr	r3, [r7, #4]
 8107da8:	691b      	ldr	r3, [r3, #16]
 8107daa:	2b00      	cmp	r3, #0
 8107dac:	daf2      	bge.n	8107d94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8107dae:	2300      	movs	r3, #0
 8107db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	691b      	ldr	r3, [r3, #16]
 8107db6:	f043 0201 	orr.w	r2, r3, #1
 8107dba:	687b      	ldr	r3, [r7, #4]
 8107dbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8107dbe:	68fb      	ldr	r3, [r7, #12]
 8107dc0:	3301      	adds	r3, #1
 8107dc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8107dc4:	68fb      	ldr	r3, [r7, #12]
 8107dc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8107dca:	d901      	bls.n	8107dd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8107dcc:	2303      	movs	r3, #3
 8107dce:	e006      	b.n	8107dde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8107dd0:	687b      	ldr	r3, [r7, #4]
 8107dd2:	691b      	ldr	r3, [r3, #16]
 8107dd4:	f003 0301 	and.w	r3, r3, #1
 8107dd8:	2b01      	cmp	r3, #1
 8107dda:	d0f0      	beq.n	8107dbe <USB_CoreReset+0x36>

  return HAL_OK;
 8107ddc:	2300      	movs	r3, #0
}
 8107dde:	4618      	mov	r0, r3
 8107de0:	3714      	adds	r7, #20
 8107de2:	46bd      	mov	sp, r7
 8107de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107de8:	4770      	bx	lr
	...

08107dec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8107dec:	b580      	push	{r7, lr}
 8107dee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8107df0:	4b05      	ldr	r3, [pc, #20]	@ (8107e08 <SysTick_Handler+0x1c>)
 8107df2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8107df4:	f000 fa02 	bl	81081fc <xTaskGetSchedulerState>
 8107df8:	4603      	mov	r3, r0
 8107dfa:	2b01      	cmp	r3, #1
 8107dfc:	d001      	beq.n	8107e02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8107dfe:	f000 f8a3 	bl	8107f48 <xPortSysTickHandler>
  }
}
 8107e02:	bf00      	nop
 8107e04:	bd80      	pop	{r7, pc}
 8107e06:	bf00      	nop
 8107e08:	e000e010 	.word	0xe000e010

08107e0c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8107e0c:	b480      	push	{r7}
 8107e0e:	b085      	sub	sp, #20
 8107e10:	af00      	add	r7, sp, #0
 8107e12:	6078      	str	r0, [r7, #4]
 8107e14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	685b      	ldr	r3, [r3, #4]
 8107e1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8107e1c:	683b      	ldr	r3, [r7, #0]
 8107e1e:	68fa      	ldr	r2, [r7, #12]
 8107e20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8107e22:	68fb      	ldr	r3, [r7, #12]
 8107e24:	689a      	ldr	r2, [r3, #8]
 8107e26:	683b      	ldr	r3, [r7, #0]
 8107e28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8107e2a:	68fb      	ldr	r3, [r7, #12]
 8107e2c:	689b      	ldr	r3, [r3, #8]
 8107e2e:	683a      	ldr	r2, [r7, #0]
 8107e30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8107e32:	68fb      	ldr	r3, [r7, #12]
 8107e34:	683a      	ldr	r2, [r7, #0]
 8107e36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8107e38:	683b      	ldr	r3, [r7, #0]
 8107e3a:	687a      	ldr	r2, [r7, #4]
 8107e3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8107e3e:	687b      	ldr	r3, [r7, #4]
 8107e40:	681b      	ldr	r3, [r3, #0]
 8107e42:	1c5a      	adds	r2, r3, #1
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	601a      	str	r2, [r3, #0]
}
 8107e48:	bf00      	nop
 8107e4a:	3714      	adds	r7, #20
 8107e4c:	46bd      	mov	sp, r7
 8107e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e52:	4770      	bx	lr

08107e54 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8107e54:	b480      	push	{r7}
 8107e56:	b085      	sub	sp, #20
 8107e58:	af00      	add	r7, sp, #0
 8107e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8107e5c:	687b      	ldr	r3, [r7, #4]
 8107e5e:	691b      	ldr	r3, [r3, #16]
 8107e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	685b      	ldr	r3, [r3, #4]
 8107e66:	687a      	ldr	r2, [r7, #4]
 8107e68:	6892      	ldr	r2, [r2, #8]
 8107e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8107e6c:	687b      	ldr	r3, [r7, #4]
 8107e6e:	689b      	ldr	r3, [r3, #8]
 8107e70:	687a      	ldr	r2, [r7, #4]
 8107e72:	6852      	ldr	r2, [r2, #4]
 8107e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8107e76:	68fb      	ldr	r3, [r7, #12]
 8107e78:	685b      	ldr	r3, [r3, #4]
 8107e7a:	687a      	ldr	r2, [r7, #4]
 8107e7c:	429a      	cmp	r2, r3
 8107e7e:	d103      	bne.n	8107e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	689a      	ldr	r2, [r3, #8]
 8107e84:	68fb      	ldr	r3, [r7, #12]
 8107e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8107e88:	687b      	ldr	r3, [r7, #4]
 8107e8a:	2200      	movs	r2, #0
 8107e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8107e8e:	68fb      	ldr	r3, [r7, #12]
 8107e90:	681b      	ldr	r3, [r3, #0]
 8107e92:	1e5a      	subs	r2, r3, #1
 8107e94:	68fb      	ldr	r3, [r7, #12]
 8107e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8107e98:	68fb      	ldr	r3, [r7, #12]
 8107e9a:	681b      	ldr	r3, [r3, #0]
}
 8107e9c:	4618      	mov	r0, r3
 8107e9e:	3714      	adds	r7, #20
 8107ea0:	46bd      	mov	sp, r7
 8107ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ea6:	4770      	bx	lr
	...

08107eb0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8107eb0:	4b07      	ldr	r3, [pc, #28]	@ (8107ed0 <pxCurrentTCBConst2>)
 8107eb2:	6819      	ldr	r1, [r3, #0]
 8107eb4:	6808      	ldr	r0, [r1, #0]
 8107eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107eba:	f380 8809 	msr	PSP, r0
 8107ebe:	f3bf 8f6f 	isb	sy
 8107ec2:	f04f 0000 	mov.w	r0, #0
 8107ec6:	f380 8811 	msr	BASEPRI, r0
 8107eca:	4770      	bx	lr
 8107ecc:	f3af 8000 	nop.w

08107ed0 <pxCurrentTCBConst2>:
 8107ed0:	10000968 	.word	0x10000968
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8107ed4:	bf00      	nop
 8107ed6:	bf00      	nop
	...

08107ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8107ee0:	f3ef 8009 	mrs	r0, PSP
 8107ee4:	f3bf 8f6f 	isb	sy
 8107ee8:	4b15      	ldr	r3, [pc, #84]	@ (8107f40 <pxCurrentTCBConst>)
 8107eea:	681a      	ldr	r2, [r3, #0]
 8107eec:	f01e 0f10 	tst.w	lr, #16
 8107ef0:	bf08      	it	eq
 8107ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8107ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107efa:	6010      	str	r0, [r2, #0]
 8107efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8107f00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8107f04:	f380 8811 	msr	BASEPRI, r0
 8107f08:	f3bf 8f4f 	dsb	sy
 8107f0c:	f3bf 8f6f 	isb	sy
 8107f10:	f000 f8f6 	bl	8108100 <vTaskSwitchContext>
 8107f14:	f04f 0000 	mov.w	r0, #0
 8107f18:	f380 8811 	msr	BASEPRI, r0
 8107f1c:	bc09      	pop	{r0, r3}
 8107f1e:	6819      	ldr	r1, [r3, #0]
 8107f20:	6808      	ldr	r0, [r1, #0]
 8107f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107f26:	f01e 0f10 	tst.w	lr, #16
 8107f2a:	bf08      	it	eq
 8107f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8107f30:	f380 8809 	msr	PSP, r0
 8107f34:	f3bf 8f6f 	isb	sy
 8107f38:	4770      	bx	lr
 8107f3a:	bf00      	nop
 8107f3c:	f3af 8000 	nop.w

08107f40 <pxCurrentTCBConst>:
 8107f40:	10000968 	.word	0x10000968
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8107f44:	bf00      	nop
 8107f46:	bf00      	nop

08107f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8107f48:	b580      	push	{r7, lr}
 8107f4a:	b082      	sub	sp, #8
 8107f4c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8107f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107f52:	f383 8811 	msr	BASEPRI, r3
 8107f56:	f3bf 8f6f 	isb	sy
 8107f5a:	f3bf 8f4f 	dsb	sy
 8107f5e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8107f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8107f62:	f000 f813 	bl	8107f8c <xTaskIncrementTick>
 8107f66:	4603      	mov	r3, r0
 8107f68:	2b00      	cmp	r3, #0
 8107f6a:	d003      	beq.n	8107f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8107f6c:	4b06      	ldr	r3, [pc, #24]	@ (8107f88 <xPortSysTickHandler+0x40>)
 8107f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107f72:	601a      	str	r2, [r3, #0]
 8107f74:	2300      	movs	r3, #0
 8107f76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8107f78:	683b      	ldr	r3, [r7, #0]
 8107f7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8107f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8107f80:	bf00      	nop
 8107f82:	3708      	adds	r7, #8
 8107f84:	46bd      	mov	sp, r7
 8107f86:	bd80      	pop	{r7, pc}
 8107f88:	e000ed04 	.word	0xe000ed04

08107f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8107f8c:	b580      	push	{r7, lr}
 8107f8e:	b086      	sub	sp, #24
 8107f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8107f92:	2300      	movs	r3, #0
 8107f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107f96:	4b4f      	ldr	r3, [pc, #316]	@ (81080d4 <xTaskIncrementTick+0x148>)
 8107f98:	681b      	ldr	r3, [r3, #0]
 8107f9a:	2b00      	cmp	r3, #0
 8107f9c:	f040 8090 	bne.w	81080c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8107fa0:	4b4d      	ldr	r3, [pc, #308]	@ (81080d8 <xTaskIncrementTick+0x14c>)
 8107fa2:	681b      	ldr	r3, [r3, #0]
 8107fa4:	3301      	adds	r3, #1
 8107fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8107fa8:	4a4b      	ldr	r2, [pc, #300]	@ (81080d8 <xTaskIncrementTick+0x14c>)
 8107faa:	693b      	ldr	r3, [r7, #16]
 8107fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8107fae:	693b      	ldr	r3, [r7, #16]
 8107fb0:	2b00      	cmp	r3, #0
 8107fb2:	d121      	bne.n	8107ff8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8107fb4:	4b49      	ldr	r3, [pc, #292]	@ (81080dc <xTaskIncrementTick+0x150>)
 8107fb6:	681b      	ldr	r3, [r3, #0]
 8107fb8:	681b      	ldr	r3, [r3, #0]
 8107fba:	2b00      	cmp	r3, #0
 8107fbc:	d00b      	beq.n	8107fd6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8107fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107fc2:	f383 8811 	msr	BASEPRI, r3
 8107fc6:	f3bf 8f6f 	isb	sy
 8107fca:	f3bf 8f4f 	dsb	sy
 8107fce:	603b      	str	r3, [r7, #0]
}
 8107fd0:	bf00      	nop
 8107fd2:	bf00      	nop
 8107fd4:	e7fd      	b.n	8107fd2 <xTaskIncrementTick+0x46>
 8107fd6:	4b41      	ldr	r3, [pc, #260]	@ (81080dc <xTaskIncrementTick+0x150>)
 8107fd8:	681b      	ldr	r3, [r3, #0]
 8107fda:	60fb      	str	r3, [r7, #12]
 8107fdc:	4b40      	ldr	r3, [pc, #256]	@ (81080e0 <xTaskIncrementTick+0x154>)
 8107fde:	681b      	ldr	r3, [r3, #0]
 8107fe0:	4a3e      	ldr	r2, [pc, #248]	@ (81080dc <xTaskIncrementTick+0x150>)
 8107fe2:	6013      	str	r3, [r2, #0]
 8107fe4:	4a3e      	ldr	r2, [pc, #248]	@ (81080e0 <xTaskIncrementTick+0x154>)
 8107fe6:	68fb      	ldr	r3, [r7, #12]
 8107fe8:	6013      	str	r3, [r2, #0]
 8107fea:	4b3e      	ldr	r3, [pc, #248]	@ (81080e4 <xTaskIncrementTick+0x158>)
 8107fec:	681b      	ldr	r3, [r3, #0]
 8107fee:	3301      	adds	r3, #1
 8107ff0:	4a3c      	ldr	r2, [pc, #240]	@ (81080e4 <xTaskIncrementTick+0x158>)
 8107ff2:	6013      	str	r3, [r2, #0]
 8107ff4:	f000 f8e2 	bl	81081bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8107ff8:	4b3b      	ldr	r3, [pc, #236]	@ (81080e8 <xTaskIncrementTick+0x15c>)
 8107ffa:	681b      	ldr	r3, [r3, #0]
 8107ffc:	693a      	ldr	r2, [r7, #16]
 8107ffe:	429a      	cmp	r2, r3
 8108000:	d349      	bcc.n	8108096 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8108002:	4b36      	ldr	r3, [pc, #216]	@ (81080dc <xTaskIncrementTick+0x150>)
 8108004:	681b      	ldr	r3, [r3, #0]
 8108006:	681b      	ldr	r3, [r3, #0]
 8108008:	2b00      	cmp	r3, #0
 810800a:	d104      	bne.n	8108016 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810800c:	4b36      	ldr	r3, [pc, #216]	@ (81080e8 <xTaskIncrementTick+0x15c>)
 810800e:	f04f 32ff 	mov.w	r2, #4294967295
 8108012:	601a      	str	r2, [r3, #0]
					break;
 8108014:	e03f      	b.n	8108096 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108016:	4b31      	ldr	r3, [pc, #196]	@ (81080dc <xTaskIncrementTick+0x150>)
 8108018:	681b      	ldr	r3, [r3, #0]
 810801a:	68db      	ldr	r3, [r3, #12]
 810801c:	68db      	ldr	r3, [r3, #12]
 810801e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8108020:	68bb      	ldr	r3, [r7, #8]
 8108022:	685b      	ldr	r3, [r3, #4]
 8108024:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8108026:	693a      	ldr	r2, [r7, #16]
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	429a      	cmp	r2, r3
 810802c:	d203      	bcs.n	8108036 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810802e:	4a2e      	ldr	r2, [pc, #184]	@ (81080e8 <xTaskIncrementTick+0x15c>)
 8108030:	687b      	ldr	r3, [r7, #4]
 8108032:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8108034:	e02f      	b.n	8108096 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8108036:	68bb      	ldr	r3, [r7, #8]
 8108038:	3304      	adds	r3, #4
 810803a:	4618      	mov	r0, r3
 810803c:	f7ff ff0a 	bl	8107e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8108040:	68bb      	ldr	r3, [r7, #8]
 8108042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108044:	2b00      	cmp	r3, #0
 8108046:	d004      	beq.n	8108052 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8108048:	68bb      	ldr	r3, [r7, #8]
 810804a:	3318      	adds	r3, #24
 810804c:	4618      	mov	r0, r3
 810804e:	f7ff ff01 	bl	8107e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8108052:	68bb      	ldr	r3, [r7, #8]
 8108054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8108056:	4b25      	ldr	r3, [pc, #148]	@ (81080ec <xTaskIncrementTick+0x160>)
 8108058:	681b      	ldr	r3, [r3, #0]
 810805a:	429a      	cmp	r2, r3
 810805c:	d903      	bls.n	8108066 <xTaskIncrementTick+0xda>
 810805e:	68bb      	ldr	r3, [r7, #8]
 8108060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108062:	4a22      	ldr	r2, [pc, #136]	@ (81080ec <xTaskIncrementTick+0x160>)
 8108064:	6013      	str	r3, [r2, #0]
 8108066:	68bb      	ldr	r3, [r7, #8]
 8108068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810806a:	4613      	mov	r3, r2
 810806c:	009b      	lsls	r3, r3, #2
 810806e:	4413      	add	r3, r2
 8108070:	009b      	lsls	r3, r3, #2
 8108072:	4a1f      	ldr	r2, [pc, #124]	@ (81080f0 <xTaskIncrementTick+0x164>)
 8108074:	441a      	add	r2, r3
 8108076:	68bb      	ldr	r3, [r7, #8]
 8108078:	3304      	adds	r3, #4
 810807a:	4619      	mov	r1, r3
 810807c:	4610      	mov	r0, r2
 810807e:	f7ff fec5 	bl	8107e0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8108082:	68bb      	ldr	r3, [r7, #8]
 8108084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8108086:	4b1b      	ldr	r3, [pc, #108]	@ (81080f4 <xTaskIncrementTick+0x168>)
 8108088:	681b      	ldr	r3, [r3, #0]
 810808a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810808c:	429a      	cmp	r2, r3
 810808e:	d3b8      	bcc.n	8108002 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8108090:	2301      	movs	r3, #1
 8108092:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8108094:	e7b5      	b.n	8108002 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8108096:	4b17      	ldr	r3, [pc, #92]	@ (81080f4 <xTaskIncrementTick+0x168>)
 8108098:	681b      	ldr	r3, [r3, #0]
 810809a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810809c:	4914      	ldr	r1, [pc, #80]	@ (81080f0 <xTaskIncrementTick+0x164>)
 810809e:	4613      	mov	r3, r2
 81080a0:	009b      	lsls	r3, r3, #2
 81080a2:	4413      	add	r3, r2
 81080a4:	009b      	lsls	r3, r3, #2
 81080a6:	440b      	add	r3, r1
 81080a8:	681b      	ldr	r3, [r3, #0]
 81080aa:	2b01      	cmp	r3, #1
 81080ac:	d901      	bls.n	81080b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 81080ae:	2301      	movs	r3, #1
 81080b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81080b2:	4b11      	ldr	r3, [pc, #68]	@ (81080f8 <xTaskIncrementTick+0x16c>)
 81080b4:	681b      	ldr	r3, [r3, #0]
 81080b6:	2b00      	cmp	r3, #0
 81080b8:	d007      	beq.n	81080ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 81080ba:	2301      	movs	r3, #1
 81080bc:	617b      	str	r3, [r7, #20]
 81080be:	e004      	b.n	81080ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81080c0:	4b0e      	ldr	r3, [pc, #56]	@ (81080fc <xTaskIncrementTick+0x170>)
 81080c2:	681b      	ldr	r3, [r3, #0]
 81080c4:	3301      	adds	r3, #1
 81080c6:	4a0d      	ldr	r2, [pc, #52]	@ (81080fc <xTaskIncrementTick+0x170>)
 81080c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81080ca:	697b      	ldr	r3, [r7, #20]
}
 81080cc:	4618      	mov	r0, r3
 81080ce:	3718      	adds	r7, #24
 81080d0:	46bd      	mov	sp, r7
 81080d2:	bd80      	pop	{r7, pc}
 81080d4:	10000df0 	.word	0x10000df0
 81080d8:	10000dd4 	.word	0x10000dd4
 81080dc:	10000dcc 	.word	0x10000dcc
 81080e0:	10000dd0 	.word	0x10000dd0
 81080e4:	10000de8 	.word	0x10000de8
 81080e8:	10000dec 	.word	0x10000dec
 81080ec:	10000dd8 	.word	0x10000dd8
 81080f0:	1000096c 	.word	0x1000096c
 81080f4:	10000968 	.word	0x10000968
 81080f8:	10000de4 	.word	0x10000de4
 81080fc:	10000de0 	.word	0x10000de0

08108100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8108100:	b480      	push	{r7}
 8108102:	b085      	sub	sp, #20
 8108104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8108106:	4b28      	ldr	r3, [pc, #160]	@ (81081a8 <vTaskSwitchContext+0xa8>)
 8108108:	681b      	ldr	r3, [r3, #0]
 810810a:	2b00      	cmp	r3, #0
 810810c:	d003      	beq.n	8108116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810810e:	4b27      	ldr	r3, [pc, #156]	@ (81081ac <vTaskSwitchContext+0xac>)
 8108110:	2201      	movs	r2, #1
 8108112:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8108114:	e042      	b.n	810819c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8108116:	4b25      	ldr	r3, [pc, #148]	@ (81081ac <vTaskSwitchContext+0xac>)
 8108118:	2200      	movs	r2, #0
 810811a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810811c:	4b24      	ldr	r3, [pc, #144]	@ (81081b0 <vTaskSwitchContext+0xb0>)
 810811e:	681b      	ldr	r3, [r3, #0]
 8108120:	60fb      	str	r3, [r7, #12]
 8108122:	e011      	b.n	8108148 <vTaskSwitchContext+0x48>
 8108124:	68fb      	ldr	r3, [r7, #12]
 8108126:	2b00      	cmp	r3, #0
 8108128:	d10b      	bne.n	8108142 <vTaskSwitchContext+0x42>
	__asm volatile
 810812a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810812e:	f383 8811 	msr	BASEPRI, r3
 8108132:	f3bf 8f6f 	isb	sy
 8108136:	f3bf 8f4f 	dsb	sy
 810813a:	607b      	str	r3, [r7, #4]
}
 810813c:	bf00      	nop
 810813e:	bf00      	nop
 8108140:	e7fd      	b.n	810813e <vTaskSwitchContext+0x3e>
 8108142:	68fb      	ldr	r3, [r7, #12]
 8108144:	3b01      	subs	r3, #1
 8108146:	60fb      	str	r3, [r7, #12]
 8108148:	491a      	ldr	r1, [pc, #104]	@ (81081b4 <vTaskSwitchContext+0xb4>)
 810814a:	68fa      	ldr	r2, [r7, #12]
 810814c:	4613      	mov	r3, r2
 810814e:	009b      	lsls	r3, r3, #2
 8108150:	4413      	add	r3, r2
 8108152:	009b      	lsls	r3, r3, #2
 8108154:	440b      	add	r3, r1
 8108156:	681b      	ldr	r3, [r3, #0]
 8108158:	2b00      	cmp	r3, #0
 810815a:	d0e3      	beq.n	8108124 <vTaskSwitchContext+0x24>
 810815c:	68fa      	ldr	r2, [r7, #12]
 810815e:	4613      	mov	r3, r2
 8108160:	009b      	lsls	r3, r3, #2
 8108162:	4413      	add	r3, r2
 8108164:	009b      	lsls	r3, r3, #2
 8108166:	4a13      	ldr	r2, [pc, #76]	@ (81081b4 <vTaskSwitchContext+0xb4>)
 8108168:	4413      	add	r3, r2
 810816a:	60bb      	str	r3, [r7, #8]
 810816c:	68bb      	ldr	r3, [r7, #8]
 810816e:	685b      	ldr	r3, [r3, #4]
 8108170:	685a      	ldr	r2, [r3, #4]
 8108172:	68bb      	ldr	r3, [r7, #8]
 8108174:	605a      	str	r2, [r3, #4]
 8108176:	68bb      	ldr	r3, [r7, #8]
 8108178:	685a      	ldr	r2, [r3, #4]
 810817a:	68bb      	ldr	r3, [r7, #8]
 810817c:	3308      	adds	r3, #8
 810817e:	429a      	cmp	r2, r3
 8108180:	d104      	bne.n	810818c <vTaskSwitchContext+0x8c>
 8108182:	68bb      	ldr	r3, [r7, #8]
 8108184:	685b      	ldr	r3, [r3, #4]
 8108186:	685a      	ldr	r2, [r3, #4]
 8108188:	68bb      	ldr	r3, [r7, #8]
 810818a:	605a      	str	r2, [r3, #4]
 810818c:	68bb      	ldr	r3, [r7, #8]
 810818e:	685b      	ldr	r3, [r3, #4]
 8108190:	68db      	ldr	r3, [r3, #12]
 8108192:	4a09      	ldr	r2, [pc, #36]	@ (81081b8 <vTaskSwitchContext+0xb8>)
 8108194:	6013      	str	r3, [r2, #0]
 8108196:	4a06      	ldr	r2, [pc, #24]	@ (81081b0 <vTaskSwitchContext+0xb0>)
 8108198:	68fb      	ldr	r3, [r7, #12]
 810819a:	6013      	str	r3, [r2, #0]
}
 810819c:	bf00      	nop
 810819e:	3714      	adds	r7, #20
 81081a0:	46bd      	mov	sp, r7
 81081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081a6:	4770      	bx	lr
 81081a8:	10000df0 	.word	0x10000df0
 81081ac:	10000de4 	.word	0x10000de4
 81081b0:	10000dd8 	.word	0x10000dd8
 81081b4:	1000096c 	.word	0x1000096c
 81081b8:	10000968 	.word	0x10000968

081081bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 81081bc:	b480      	push	{r7}
 81081be:	b083      	sub	sp, #12
 81081c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81081c2:	4b0c      	ldr	r3, [pc, #48]	@ (81081f4 <prvResetNextTaskUnblockTime+0x38>)
 81081c4:	681b      	ldr	r3, [r3, #0]
 81081c6:	681b      	ldr	r3, [r3, #0]
 81081c8:	2b00      	cmp	r3, #0
 81081ca:	d104      	bne.n	81081d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81081cc:	4b0a      	ldr	r3, [pc, #40]	@ (81081f8 <prvResetNextTaskUnblockTime+0x3c>)
 81081ce:	f04f 32ff 	mov.w	r2, #4294967295
 81081d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81081d4:	e008      	b.n	81081e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81081d6:	4b07      	ldr	r3, [pc, #28]	@ (81081f4 <prvResetNextTaskUnblockTime+0x38>)
 81081d8:	681b      	ldr	r3, [r3, #0]
 81081da:	68db      	ldr	r3, [r3, #12]
 81081dc:	68db      	ldr	r3, [r3, #12]
 81081de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81081e0:	687b      	ldr	r3, [r7, #4]
 81081e2:	685b      	ldr	r3, [r3, #4]
 81081e4:	4a04      	ldr	r2, [pc, #16]	@ (81081f8 <prvResetNextTaskUnblockTime+0x3c>)
 81081e6:	6013      	str	r3, [r2, #0]
}
 81081e8:	bf00      	nop
 81081ea:	370c      	adds	r7, #12
 81081ec:	46bd      	mov	sp, r7
 81081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081f2:	4770      	bx	lr
 81081f4:	10000dcc 	.word	0x10000dcc
 81081f8:	10000dec 	.word	0x10000dec

081081fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81081fc:	b480      	push	{r7}
 81081fe:	b083      	sub	sp, #12
 8108200:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8108202:	4b0b      	ldr	r3, [pc, #44]	@ (8108230 <xTaskGetSchedulerState+0x34>)
 8108204:	681b      	ldr	r3, [r3, #0]
 8108206:	2b00      	cmp	r3, #0
 8108208:	d102      	bne.n	8108210 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810820a:	2301      	movs	r3, #1
 810820c:	607b      	str	r3, [r7, #4]
 810820e:	e008      	b.n	8108222 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8108210:	4b08      	ldr	r3, [pc, #32]	@ (8108234 <xTaskGetSchedulerState+0x38>)
 8108212:	681b      	ldr	r3, [r3, #0]
 8108214:	2b00      	cmp	r3, #0
 8108216:	d102      	bne.n	810821e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8108218:	2302      	movs	r3, #2
 810821a:	607b      	str	r3, [r7, #4]
 810821c:	e001      	b.n	8108222 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810821e:	2300      	movs	r3, #0
 8108220:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8108222:	687b      	ldr	r3, [r7, #4]
	}
 8108224:	4618      	mov	r0, r3
 8108226:	370c      	adds	r7, #12
 8108228:	46bd      	mov	sp, r7
 810822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810822e:	4770      	bx	lr
 8108230:	10000ddc 	.word	0x10000ddc
 8108234:	10000df0 	.word	0x10000df0

08108238 <std>:
 8108238:	2300      	movs	r3, #0
 810823a:	b510      	push	{r4, lr}
 810823c:	4604      	mov	r4, r0
 810823e:	e9c0 3300 	strd	r3, r3, [r0]
 8108242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8108246:	6083      	str	r3, [r0, #8]
 8108248:	8181      	strh	r1, [r0, #12]
 810824a:	6643      	str	r3, [r0, #100]	@ 0x64
 810824c:	81c2      	strh	r2, [r0, #14]
 810824e:	6183      	str	r3, [r0, #24]
 8108250:	4619      	mov	r1, r3
 8108252:	2208      	movs	r2, #8
 8108254:	305c      	adds	r0, #92	@ 0x5c
 8108256:	f000 f9e7 	bl	8108628 <memset>
 810825a:	4b0d      	ldr	r3, [pc, #52]	@ (8108290 <std+0x58>)
 810825c:	6263      	str	r3, [r4, #36]	@ 0x24
 810825e:	4b0d      	ldr	r3, [pc, #52]	@ (8108294 <std+0x5c>)
 8108260:	62a3      	str	r3, [r4, #40]	@ 0x28
 8108262:	4b0d      	ldr	r3, [pc, #52]	@ (8108298 <std+0x60>)
 8108264:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8108266:	4b0d      	ldr	r3, [pc, #52]	@ (810829c <std+0x64>)
 8108268:	6323      	str	r3, [r4, #48]	@ 0x30
 810826a:	4b0d      	ldr	r3, [pc, #52]	@ (81082a0 <std+0x68>)
 810826c:	6224      	str	r4, [r4, #32]
 810826e:	429c      	cmp	r4, r3
 8108270:	d006      	beq.n	8108280 <std+0x48>
 8108272:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8108276:	4294      	cmp	r4, r2
 8108278:	d002      	beq.n	8108280 <std+0x48>
 810827a:	33d0      	adds	r3, #208	@ 0xd0
 810827c:	429c      	cmp	r4, r3
 810827e:	d105      	bne.n	810828c <std+0x54>
 8108280:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8108284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108288:	f000 ba46 	b.w	8108718 <__retarget_lock_init_recursive>
 810828c:	bd10      	pop	{r4, pc}
 810828e:	bf00      	nop
 8108290:	08108479 	.word	0x08108479
 8108294:	0810849b 	.word	0x0810849b
 8108298:	081084d3 	.word	0x081084d3
 810829c:	081084f7 	.word	0x081084f7
 81082a0:	10000df4 	.word	0x10000df4

081082a4 <stdio_exit_handler>:
 81082a4:	4a02      	ldr	r2, [pc, #8]	@ (81082b0 <stdio_exit_handler+0xc>)
 81082a6:	4903      	ldr	r1, [pc, #12]	@ (81082b4 <stdio_exit_handler+0x10>)
 81082a8:	4803      	ldr	r0, [pc, #12]	@ (81082b8 <stdio_exit_handler+0x14>)
 81082aa:	f000 b869 	b.w	8108380 <_fwalk_sglue>
 81082ae:	bf00      	nop
 81082b0:	10000010 	.word	0x10000010
 81082b4:	08108a19 	.word	0x08108a19
 81082b8:	10000020 	.word	0x10000020

081082bc <cleanup_stdio>:
 81082bc:	6841      	ldr	r1, [r0, #4]
 81082be:	4b0c      	ldr	r3, [pc, #48]	@ (81082f0 <cleanup_stdio+0x34>)
 81082c0:	4299      	cmp	r1, r3
 81082c2:	b510      	push	{r4, lr}
 81082c4:	4604      	mov	r4, r0
 81082c6:	d001      	beq.n	81082cc <cleanup_stdio+0x10>
 81082c8:	f000 fba6 	bl	8108a18 <_fflush_r>
 81082cc:	68a1      	ldr	r1, [r4, #8]
 81082ce:	4b09      	ldr	r3, [pc, #36]	@ (81082f4 <cleanup_stdio+0x38>)
 81082d0:	4299      	cmp	r1, r3
 81082d2:	d002      	beq.n	81082da <cleanup_stdio+0x1e>
 81082d4:	4620      	mov	r0, r4
 81082d6:	f000 fb9f 	bl	8108a18 <_fflush_r>
 81082da:	68e1      	ldr	r1, [r4, #12]
 81082dc:	4b06      	ldr	r3, [pc, #24]	@ (81082f8 <cleanup_stdio+0x3c>)
 81082de:	4299      	cmp	r1, r3
 81082e0:	d004      	beq.n	81082ec <cleanup_stdio+0x30>
 81082e2:	4620      	mov	r0, r4
 81082e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81082e8:	f000 bb96 	b.w	8108a18 <_fflush_r>
 81082ec:	bd10      	pop	{r4, pc}
 81082ee:	bf00      	nop
 81082f0:	10000df4 	.word	0x10000df4
 81082f4:	10000e5c 	.word	0x10000e5c
 81082f8:	10000ec4 	.word	0x10000ec4

081082fc <global_stdio_init.part.0>:
 81082fc:	b510      	push	{r4, lr}
 81082fe:	4b0b      	ldr	r3, [pc, #44]	@ (810832c <global_stdio_init.part.0+0x30>)
 8108300:	4c0b      	ldr	r4, [pc, #44]	@ (8108330 <global_stdio_init.part.0+0x34>)
 8108302:	4a0c      	ldr	r2, [pc, #48]	@ (8108334 <global_stdio_init.part.0+0x38>)
 8108304:	601a      	str	r2, [r3, #0]
 8108306:	4620      	mov	r0, r4
 8108308:	2200      	movs	r2, #0
 810830a:	2104      	movs	r1, #4
 810830c:	f7ff ff94 	bl	8108238 <std>
 8108310:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8108314:	2201      	movs	r2, #1
 8108316:	2109      	movs	r1, #9
 8108318:	f7ff ff8e 	bl	8108238 <std>
 810831c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8108320:	2202      	movs	r2, #2
 8108322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108326:	2112      	movs	r1, #18
 8108328:	f7ff bf86 	b.w	8108238 <std>
 810832c:	10000f2c 	.word	0x10000f2c
 8108330:	10000df4 	.word	0x10000df4
 8108334:	081082a5 	.word	0x081082a5

08108338 <__sfp_lock_acquire>:
 8108338:	4801      	ldr	r0, [pc, #4]	@ (8108340 <__sfp_lock_acquire+0x8>)
 810833a:	f000 b9ee 	b.w	810871a <__retarget_lock_acquire_recursive>
 810833e:	bf00      	nop
 8108340:	10000f35 	.word	0x10000f35

08108344 <__sfp_lock_release>:
 8108344:	4801      	ldr	r0, [pc, #4]	@ (810834c <__sfp_lock_release+0x8>)
 8108346:	f000 b9e9 	b.w	810871c <__retarget_lock_release_recursive>
 810834a:	bf00      	nop
 810834c:	10000f35 	.word	0x10000f35

08108350 <__sinit>:
 8108350:	b510      	push	{r4, lr}
 8108352:	4604      	mov	r4, r0
 8108354:	f7ff fff0 	bl	8108338 <__sfp_lock_acquire>
 8108358:	6a23      	ldr	r3, [r4, #32]
 810835a:	b11b      	cbz	r3, 8108364 <__sinit+0x14>
 810835c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108360:	f7ff bff0 	b.w	8108344 <__sfp_lock_release>
 8108364:	4b04      	ldr	r3, [pc, #16]	@ (8108378 <__sinit+0x28>)
 8108366:	6223      	str	r3, [r4, #32]
 8108368:	4b04      	ldr	r3, [pc, #16]	@ (810837c <__sinit+0x2c>)
 810836a:	681b      	ldr	r3, [r3, #0]
 810836c:	2b00      	cmp	r3, #0
 810836e:	d1f5      	bne.n	810835c <__sinit+0xc>
 8108370:	f7ff ffc4 	bl	81082fc <global_stdio_init.part.0>
 8108374:	e7f2      	b.n	810835c <__sinit+0xc>
 8108376:	bf00      	nop
 8108378:	081082bd 	.word	0x081082bd
 810837c:	10000f2c 	.word	0x10000f2c

08108380 <_fwalk_sglue>:
 8108380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108384:	4607      	mov	r7, r0
 8108386:	4688      	mov	r8, r1
 8108388:	4614      	mov	r4, r2
 810838a:	2600      	movs	r6, #0
 810838c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8108390:	f1b9 0901 	subs.w	r9, r9, #1
 8108394:	d505      	bpl.n	81083a2 <_fwalk_sglue+0x22>
 8108396:	6824      	ldr	r4, [r4, #0]
 8108398:	2c00      	cmp	r4, #0
 810839a:	d1f7      	bne.n	810838c <_fwalk_sglue+0xc>
 810839c:	4630      	mov	r0, r6
 810839e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81083a2:	89ab      	ldrh	r3, [r5, #12]
 81083a4:	2b01      	cmp	r3, #1
 81083a6:	d907      	bls.n	81083b8 <_fwalk_sglue+0x38>
 81083a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81083ac:	3301      	adds	r3, #1
 81083ae:	d003      	beq.n	81083b8 <_fwalk_sglue+0x38>
 81083b0:	4629      	mov	r1, r5
 81083b2:	4638      	mov	r0, r7
 81083b4:	47c0      	blx	r8
 81083b6:	4306      	orrs	r6, r0
 81083b8:	3568      	adds	r5, #104	@ 0x68
 81083ba:	e7e9      	b.n	8108390 <_fwalk_sglue+0x10>

081083bc <_puts_r>:
 81083bc:	6a03      	ldr	r3, [r0, #32]
 81083be:	b570      	push	{r4, r5, r6, lr}
 81083c0:	6884      	ldr	r4, [r0, #8]
 81083c2:	4605      	mov	r5, r0
 81083c4:	460e      	mov	r6, r1
 81083c6:	b90b      	cbnz	r3, 81083cc <_puts_r+0x10>
 81083c8:	f7ff ffc2 	bl	8108350 <__sinit>
 81083cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81083ce:	07db      	lsls	r3, r3, #31
 81083d0:	d405      	bmi.n	81083de <_puts_r+0x22>
 81083d2:	89a3      	ldrh	r3, [r4, #12]
 81083d4:	0598      	lsls	r0, r3, #22
 81083d6:	d402      	bmi.n	81083de <_puts_r+0x22>
 81083d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81083da:	f000 f99e 	bl	810871a <__retarget_lock_acquire_recursive>
 81083de:	89a3      	ldrh	r3, [r4, #12]
 81083e0:	0719      	lsls	r1, r3, #28
 81083e2:	d502      	bpl.n	81083ea <_puts_r+0x2e>
 81083e4:	6923      	ldr	r3, [r4, #16]
 81083e6:	2b00      	cmp	r3, #0
 81083e8:	d135      	bne.n	8108456 <_puts_r+0x9a>
 81083ea:	4621      	mov	r1, r4
 81083ec:	4628      	mov	r0, r5
 81083ee:	f000 f8c5 	bl	810857c <__swsetup_r>
 81083f2:	b380      	cbz	r0, 8108456 <_puts_r+0x9a>
 81083f4:	f04f 35ff 	mov.w	r5, #4294967295
 81083f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81083fa:	07da      	lsls	r2, r3, #31
 81083fc:	d405      	bmi.n	810840a <_puts_r+0x4e>
 81083fe:	89a3      	ldrh	r3, [r4, #12]
 8108400:	059b      	lsls	r3, r3, #22
 8108402:	d402      	bmi.n	810840a <_puts_r+0x4e>
 8108404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108406:	f000 f989 	bl	810871c <__retarget_lock_release_recursive>
 810840a:	4628      	mov	r0, r5
 810840c:	bd70      	pop	{r4, r5, r6, pc}
 810840e:	2b00      	cmp	r3, #0
 8108410:	da04      	bge.n	810841c <_puts_r+0x60>
 8108412:	69a2      	ldr	r2, [r4, #24]
 8108414:	429a      	cmp	r2, r3
 8108416:	dc17      	bgt.n	8108448 <_puts_r+0x8c>
 8108418:	290a      	cmp	r1, #10
 810841a:	d015      	beq.n	8108448 <_puts_r+0x8c>
 810841c:	6823      	ldr	r3, [r4, #0]
 810841e:	1c5a      	adds	r2, r3, #1
 8108420:	6022      	str	r2, [r4, #0]
 8108422:	7019      	strb	r1, [r3, #0]
 8108424:	68a3      	ldr	r3, [r4, #8]
 8108426:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810842a:	3b01      	subs	r3, #1
 810842c:	60a3      	str	r3, [r4, #8]
 810842e:	2900      	cmp	r1, #0
 8108430:	d1ed      	bne.n	810840e <_puts_r+0x52>
 8108432:	2b00      	cmp	r3, #0
 8108434:	da11      	bge.n	810845a <_puts_r+0x9e>
 8108436:	4622      	mov	r2, r4
 8108438:	210a      	movs	r1, #10
 810843a:	4628      	mov	r0, r5
 810843c:	f000 f85f 	bl	81084fe <__swbuf_r>
 8108440:	3001      	adds	r0, #1
 8108442:	d0d7      	beq.n	81083f4 <_puts_r+0x38>
 8108444:	250a      	movs	r5, #10
 8108446:	e7d7      	b.n	81083f8 <_puts_r+0x3c>
 8108448:	4622      	mov	r2, r4
 810844a:	4628      	mov	r0, r5
 810844c:	f000 f857 	bl	81084fe <__swbuf_r>
 8108450:	3001      	adds	r0, #1
 8108452:	d1e7      	bne.n	8108424 <_puts_r+0x68>
 8108454:	e7ce      	b.n	81083f4 <_puts_r+0x38>
 8108456:	3e01      	subs	r6, #1
 8108458:	e7e4      	b.n	8108424 <_puts_r+0x68>
 810845a:	6823      	ldr	r3, [r4, #0]
 810845c:	1c5a      	adds	r2, r3, #1
 810845e:	6022      	str	r2, [r4, #0]
 8108460:	220a      	movs	r2, #10
 8108462:	701a      	strb	r2, [r3, #0]
 8108464:	e7ee      	b.n	8108444 <_puts_r+0x88>
	...

08108468 <puts>:
 8108468:	4b02      	ldr	r3, [pc, #8]	@ (8108474 <puts+0xc>)
 810846a:	4601      	mov	r1, r0
 810846c:	6818      	ldr	r0, [r3, #0]
 810846e:	f7ff bfa5 	b.w	81083bc <_puts_r>
 8108472:	bf00      	nop
 8108474:	1000001c 	.word	0x1000001c

08108478 <__sread>:
 8108478:	b510      	push	{r4, lr}
 810847a:	460c      	mov	r4, r1
 810847c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108480:	f000 f8fc 	bl	810867c <_read_r>
 8108484:	2800      	cmp	r0, #0
 8108486:	bfab      	itete	ge
 8108488:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810848a:	89a3      	ldrhlt	r3, [r4, #12]
 810848c:	181b      	addge	r3, r3, r0
 810848e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8108492:	bfac      	ite	ge
 8108494:	6563      	strge	r3, [r4, #84]	@ 0x54
 8108496:	81a3      	strhlt	r3, [r4, #12]
 8108498:	bd10      	pop	{r4, pc}

0810849a <__swrite>:
 810849a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810849e:	461f      	mov	r7, r3
 81084a0:	898b      	ldrh	r3, [r1, #12]
 81084a2:	05db      	lsls	r3, r3, #23
 81084a4:	4605      	mov	r5, r0
 81084a6:	460c      	mov	r4, r1
 81084a8:	4616      	mov	r6, r2
 81084aa:	d505      	bpl.n	81084b8 <__swrite+0x1e>
 81084ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81084b0:	2302      	movs	r3, #2
 81084b2:	2200      	movs	r2, #0
 81084b4:	f000 f8d0 	bl	8108658 <_lseek_r>
 81084b8:	89a3      	ldrh	r3, [r4, #12]
 81084ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81084be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81084c2:	81a3      	strh	r3, [r4, #12]
 81084c4:	4632      	mov	r2, r6
 81084c6:	463b      	mov	r3, r7
 81084c8:	4628      	mov	r0, r5
 81084ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81084ce:	f000 b8e7 	b.w	81086a0 <_write_r>

081084d2 <__sseek>:
 81084d2:	b510      	push	{r4, lr}
 81084d4:	460c      	mov	r4, r1
 81084d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81084da:	f000 f8bd 	bl	8108658 <_lseek_r>
 81084de:	1c43      	adds	r3, r0, #1
 81084e0:	89a3      	ldrh	r3, [r4, #12]
 81084e2:	bf15      	itete	ne
 81084e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 81084e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 81084ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 81084ee:	81a3      	strheq	r3, [r4, #12]
 81084f0:	bf18      	it	ne
 81084f2:	81a3      	strhne	r3, [r4, #12]
 81084f4:	bd10      	pop	{r4, pc}

081084f6 <__sclose>:
 81084f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81084fa:	f000 b89d 	b.w	8108638 <_close_r>

081084fe <__swbuf_r>:
 81084fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108500:	460e      	mov	r6, r1
 8108502:	4614      	mov	r4, r2
 8108504:	4605      	mov	r5, r0
 8108506:	b118      	cbz	r0, 8108510 <__swbuf_r+0x12>
 8108508:	6a03      	ldr	r3, [r0, #32]
 810850a:	b90b      	cbnz	r3, 8108510 <__swbuf_r+0x12>
 810850c:	f7ff ff20 	bl	8108350 <__sinit>
 8108510:	69a3      	ldr	r3, [r4, #24]
 8108512:	60a3      	str	r3, [r4, #8]
 8108514:	89a3      	ldrh	r3, [r4, #12]
 8108516:	071a      	lsls	r2, r3, #28
 8108518:	d501      	bpl.n	810851e <__swbuf_r+0x20>
 810851a:	6923      	ldr	r3, [r4, #16]
 810851c:	b943      	cbnz	r3, 8108530 <__swbuf_r+0x32>
 810851e:	4621      	mov	r1, r4
 8108520:	4628      	mov	r0, r5
 8108522:	f000 f82b 	bl	810857c <__swsetup_r>
 8108526:	b118      	cbz	r0, 8108530 <__swbuf_r+0x32>
 8108528:	f04f 37ff 	mov.w	r7, #4294967295
 810852c:	4638      	mov	r0, r7
 810852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108530:	6823      	ldr	r3, [r4, #0]
 8108532:	6922      	ldr	r2, [r4, #16]
 8108534:	1a98      	subs	r0, r3, r2
 8108536:	6963      	ldr	r3, [r4, #20]
 8108538:	b2f6      	uxtb	r6, r6
 810853a:	4283      	cmp	r3, r0
 810853c:	4637      	mov	r7, r6
 810853e:	dc05      	bgt.n	810854c <__swbuf_r+0x4e>
 8108540:	4621      	mov	r1, r4
 8108542:	4628      	mov	r0, r5
 8108544:	f000 fa68 	bl	8108a18 <_fflush_r>
 8108548:	2800      	cmp	r0, #0
 810854a:	d1ed      	bne.n	8108528 <__swbuf_r+0x2a>
 810854c:	68a3      	ldr	r3, [r4, #8]
 810854e:	3b01      	subs	r3, #1
 8108550:	60a3      	str	r3, [r4, #8]
 8108552:	6823      	ldr	r3, [r4, #0]
 8108554:	1c5a      	adds	r2, r3, #1
 8108556:	6022      	str	r2, [r4, #0]
 8108558:	701e      	strb	r6, [r3, #0]
 810855a:	6962      	ldr	r2, [r4, #20]
 810855c:	1c43      	adds	r3, r0, #1
 810855e:	429a      	cmp	r2, r3
 8108560:	d004      	beq.n	810856c <__swbuf_r+0x6e>
 8108562:	89a3      	ldrh	r3, [r4, #12]
 8108564:	07db      	lsls	r3, r3, #31
 8108566:	d5e1      	bpl.n	810852c <__swbuf_r+0x2e>
 8108568:	2e0a      	cmp	r6, #10
 810856a:	d1df      	bne.n	810852c <__swbuf_r+0x2e>
 810856c:	4621      	mov	r1, r4
 810856e:	4628      	mov	r0, r5
 8108570:	f000 fa52 	bl	8108a18 <_fflush_r>
 8108574:	2800      	cmp	r0, #0
 8108576:	d0d9      	beq.n	810852c <__swbuf_r+0x2e>
 8108578:	e7d6      	b.n	8108528 <__swbuf_r+0x2a>
	...

0810857c <__swsetup_r>:
 810857c:	b538      	push	{r3, r4, r5, lr}
 810857e:	4b29      	ldr	r3, [pc, #164]	@ (8108624 <__swsetup_r+0xa8>)
 8108580:	4605      	mov	r5, r0
 8108582:	6818      	ldr	r0, [r3, #0]
 8108584:	460c      	mov	r4, r1
 8108586:	b118      	cbz	r0, 8108590 <__swsetup_r+0x14>
 8108588:	6a03      	ldr	r3, [r0, #32]
 810858a:	b90b      	cbnz	r3, 8108590 <__swsetup_r+0x14>
 810858c:	f7ff fee0 	bl	8108350 <__sinit>
 8108590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108594:	0719      	lsls	r1, r3, #28
 8108596:	d422      	bmi.n	81085de <__swsetup_r+0x62>
 8108598:	06da      	lsls	r2, r3, #27
 810859a:	d407      	bmi.n	81085ac <__swsetup_r+0x30>
 810859c:	2209      	movs	r2, #9
 810859e:	602a      	str	r2, [r5, #0]
 81085a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81085a4:	81a3      	strh	r3, [r4, #12]
 81085a6:	f04f 30ff 	mov.w	r0, #4294967295
 81085aa:	e033      	b.n	8108614 <__swsetup_r+0x98>
 81085ac:	0758      	lsls	r0, r3, #29
 81085ae:	d512      	bpl.n	81085d6 <__swsetup_r+0x5a>
 81085b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81085b2:	b141      	cbz	r1, 81085c6 <__swsetup_r+0x4a>
 81085b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81085b8:	4299      	cmp	r1, r3
 81085ba:	d002      	beq.n	81085c2 <__swsetup_r+0x46>
 81085bc:	4628      	mov	r0, r5
 81085be:	f000 f8af 	bl	8108720 <_free_r>
 81085c2:	2300      	movs	r3, #0
 81085c4:	6363      	str	r3, [r4, #52]	@ 0x34
 81085c6:	89a3      	ldrh	r3, [r4, #12]
 81085c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 81085cc:	81a3      	strh	r3, [r4, #12]
 81085ce:	2300      	movs	r3, #0
 81085d0:	6063      	str	r3, [r4, #4]
 81085d2:	6923      	ldr	r3, [r4, #16]
 81085d4:	6023      	str	r3, [r4, #0]
 81085d6:	89a3      	ldrh	r3, [r4, #12]
 81085d8:	f043 0308 	orr.w	r3, r3, #8
 81085dc:	81a3      	strh	r3, [r4, #12]
 81085de:	6923      	ldr	r3, [r4, #16]
 81085e0:	b94b      	cbnz	r3, 81085f6 <__swsetup_r+0x7a>
 81085e2:	89a3      	ldrh	r3, [r4, #12]
 81085e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 81085e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81085ec:	d003      	beq.n	81085f6 <__swsetup_r+0x7a>
 81085ee:	4621      	mov	r1, r4
 81085f0:	4628      	mov	r0, r5
 81085f2:	f000 fa5f 	bl	8108ab4 <__smakebuf_r>
 81085f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81085fa:	f013 0201 	ands.w	r2, r3, #1
 81085fe:	d00a      	beq.n	8108616 <__swsetup_r+0x9a>
 8108600:	2200      	movs	r2, #0
 8108602:	60a2      	str	r2, [r4, #8]
 8108604:	6962      	ldr	r2, [r4, #20]
 8108606:	4252      	negs	r2, r2
 8108608:	61a2      	str	r2, [r4, #24]
 810860a:	6922      	ldr	r2, [r4, #16]
 810860c:	b942      	cbnz	r2, 8108620 <__swsetup_r+0xa4>
 810860e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8108612:	d1c5      	bne.n	81085a0 <__swsetup_r+0x24>
 8108614:	bd38      	pop	{r3, r4, r5, pc}
 8108616:	0799      	lsls	r1, r3, #30
 8108618:	bf58      	it	pl
 810861a:	6962      	ldrpl	r2, [r4, #20]
 810861c:	60a2      	str	r2, [r4, #8]
 810861e:	e7f4      	b.n	810860a <__swsetup_r+0x8e>
 8108620:	2000      	movs	r0, #0
 8108622:	e7f7      	b.n	8108614 <__swsetup_r+0x98>
 8108624:	1000001c 	.word	0x1000001c

08108628 <memset>:
 8108628:	4402      	add	r2, r0
 810862a:	4603      	mov	r3, r0
 810862c:	4293      	cmp	r3, r2
 810862e:	d100      	bne.n	8108632 <memset+0xa>
 8108630:	4770      	bx	lr
 8108632:	f803 1b01 	strb.w	r1, [r3], #1
 8108636:	e7f9      	b.n	810862c <memset+0x4>

08108638 <_close_r>:
 8108638:	b538      	push	{r3, r4, r5, lr}
 810863a:	4d06      	ldr	r5, [pc, #24]	@ (8108654 <_close_r+0x1c>)
 810863c:	2300      	movs	r3, #0
 810863e:	4604      	mov	r4, r0
 8108640:	4608      	mov	r0, r1
 8108642:	602b      	str	r3, [r5, #0]
 8108644:	f7f9 fa47 	bl	8101ad6 <_close>
 8108648:	1c43      	adds	r3, r0, #1
 810864a:	d102      	bne.n	8108652 <_close_r+0x1a>
 810864c:	682b      	ldr	r3, [r5, #0]
 810864e:	b103      	cbz	r3, 8108652 <_close_r+0x1a>
 8108650:	6023      	str	r3, [r4, #0]
 8108652:	bd38      	pop	{r3, r4, r5, pc}
 8108654:	10000f30 	.word	0x10000f30

08108658 <_lseek_r>:
 8108658:	b538      	push	{r3, r4, r5, lr}
 810865a:	4d07      	ldr	r5, [pc, #28]	@ (8108678 <_lseek_r+0x20>)
 810865c:	4604      	mov	r4, r0
 810865e:	4608      	mov	r0, r1
 8108660:	4611      	mov	r1, r2
 8108662:	2200      	movs	r2, #0
 8108664:	602a      	str	r2, [r5, #0]
 8108666:	461a      	mov	r2, r3
 8108668:	f7f9 fa5c 	bl	8101b24 <_lseek>
 810866c:	1c43      	adds	r3, r0, #1
 810866e:	d102      	bne.n	8108676 <_lseek_r+0x1e>
 8108670:	682b      	ldr	r3, [r5, #0]
 8108672:	b103      	cbz	r3, 8108676 <_lseek_r+0x1e>
 8108674:	6023      	str	r3, [r4, #0]
 8108676:	bd38      	pop	{r3, r4, r5, pc}
 8108678:	10000f30 	.word	0x10000f30

0810867c <_read_r>:
 810867c:	b538      	push	{r3, r4, r5, lr}
 810867e:	4d07      	ldr	r5, [pc, #28]	@ (810869c <_read_r+0x20>)
 8108680:	4604      	mov	r4, r0
 8108682:	4608      	mov	r0, r1
 8108684:	4611      	mov	r1, r2
 8108686:	2200      	movs	r2, #0
 8108688:	602a      	str	r2, [r5, #0]
 810868a:	461a      	mov	r2, r3
 810868c:	f7f9 f9ea 	bl	8101a64 <_read>
 8108690:	1c43      	adds	r3, r0, #1
 8108692:	d102      	bne.n	810869a <_read_r+0x1e>
 8108694:	682b      	ldr	r3, [r5, #0]
 8108696:	b103      	cbz	r3, 810869a <_read_r+0x1e>
 8108698:	6023      	str	r3, [r4, #0]
 810869a:	bd38      	pop	{r3, r4, r5, pc}
 810869c:	10000f30 	.word	0x10000f30

081086a0 <_write_r>:
 81086a0:	b538      	push	{r3, r4, r5, lr}
 81086a2:	4d07      	ldr	r5, [pc, #28]	@ (81086c0 <_write_r+0x20>)
 81086a4:	4604      	mov	r4, r0
 81086a6:	4608      	mov	r0, r1
 81086a8:	4611      	mov	r1, r2
 81086aa:	2200      	movs	r2, #0
 81086ac:	602a      	str	r2, [r5, #0]
 81086ae:	461a      	mov	r2, r3
 81086b0:	f7f9 f9f5 	bl	8101a9e <_write>
 81086b4:	1c43      	adds	r3, r0, #1
 81086b6:	d102      	bne.n	81086be <_write_r+0x1e>
 81086b8:	682b      	ldr	r3, [r5, #0]
 81086ba:	b103      	cbz	r3, 81086be <_write_r+0x1e>
 81086bc:	6023      	str	r3, [r4, #0]
 81086be:	bd38      	pop	{r3, r4, r5, pc}
 81086c0:	10000f30 	.word	0x10000f30

081086c4 <__errno>:
 81086c4:	4b01      	ldr	r3, [pc, #4]	@ (81086cc <__errno+0x8>)
 81086c6:	6818      	ldr	r0, [r3, #0]
 81086c8:	4770      	bx	lr
 81086ca:	bf00      	nop
 81086cc:	1000001c 	.word	0x1000001c

081086d0 <__libc_init_array>:
 81086d0:	b570      	push	{r4, r5, r6, lr}
 81086d2:	4d0d      	ldr	r5, [pc, #52]	@ (8108708 <__libc_init_array+0x38>)
 81086d4:	4c0d      	ldr	r4, [pc, #52]	@ (810870c <__libc_init_array+0x3c>)
 81086d6:	1b64      	subs	r4, r4, r5
 81086d8:	10a4      	asrs	r4, r4, #2
 81086da:	2600      	movs	r6, #0
 81086dc:	42a6      	cmp	r6, r4
 81086de:	d109      	bne.n	81086f4 <__libc_init_array+0x24>
 81086e0:	4d0b      	ldr	r5, [pc, #44]	@ (8108710 <__libc_init_array+0x40>)
 81086e2:	4c0c      	ldr	r4, [pc, #48]	@ (8108714 <__libc_init_array+0x44>)
 81086e4:	f000 fa54 	bl	8108b90 <_init>
 81086e8:	1b64      	subs	r4, r4, r5
 81086ea:	10a4      	asrs	r4, r4, #2
 81086ec:	2600      	movs	r6, #0
 81086ee:	42a6      	cmp	r6, r4
 81086f0:	d105      	bne.n	81086fe <__libc_init_array+0x2e>
 81086f2:	bd70      	pop	{r4, r5, r6, pc}
 81086f4:	f855 3b04 	ldr.w	r3, [r5], #4
 81086f8:	4798      	blx	r3
 81086fa:	3601      	adds	r6, #1
 81086fc:	e7ee      	b.n	81086dc <__libc_init_array+0xc>
 81086fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8108702:	4798      	blx	r3
 8108704:	3601      	adds	r6, #1
 8108706:	e7f2      	b.n	81086ee <__libc_init_array+0x1e>
 8108708:	08108bd8 	.word	0x08108bd8
 810870c:	08108bd8 	.word	0x08108bd8
 8108710:	08108bd8 	.word	0x08108bd8
 8108714:	08108bdc 	.word	0x08108bdc

08108718 <__retarget_lock_init_recursive>:
 8108718:	4770      	bx	lr

0810871a <__retarget_lock_acquire_recursive>:
 810871a:	4770      	bx	lr

0810871c <__retarget_lock_release_recursive>:
 810871c:	4770      	bx	lr
	...

08108720 <_free_r>:
 8108720:	b538      	push	{r3, r4, r5, lr}
 8108722:	4605      	mov	r5, r0
 8108724:	2900      	cmp	r1, #0
 8108726:	d041      	beq.n	81087ac <_free_r+0x8c>
 8108728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810872c:	1f0c      	subs	r4, r1, #4
 810872e:	2b00      	cmp	r3, #0
 8108730:	bfb8      	it	lt
 8108732:	18e4      	addlt	r4, r4, r3
 8108734:	f000 f8e0 	bl	81088f8 <__malloc_lock>
 8108738:	4a1d      	ldr	r2, [pc, #116]	@ (81087b0 <_free_r+0x90>)
 810873a:	6813      	ldr	r3, [r2, #0]
 810873c:	b933      	cbnz	r3, 810874c <_free_r+0x2c>
 810873e:	6063      	str	r3, [r4, #4]
 8108740:	6014      	str	r4, [r2, #0]
 8108742:	4628      	mov	r0, r5
 8108744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8108748:	f000 b8dc 	b.w	8108904 <__malloc_unlock>
 810874c:	42a3      	cmp	r3, r4
 810874e:	d908      	bls.n	8108762 <_free_r+0x42>
 8108750:	6820      	ldr	r0, [r4, #0]
 8108752:	1821      	adds	r1, r4, r0
 8108754:	428b      	cmp	r3, r1
 8108756:	bf01      	itttt	eq
 8108758:	6819      	ldreq	r1, [r3, #0]
 810875a:	685b      	ldreq	r3, [r3, #4]
 810875c:	1809      	addeq	r1, r1, r0
 810875e:	6021      	streq	r1, [r4, #0]
 8108760:	e7ed      	b.n	810873e <_free_r+0x1e>
 8108762:	461a      	mov	r2, r3
 8108764:	685b      	ldr	r3, [r3, #4]
 8108766:	b10b      	cbz	r3, 810876c <_free_r+0x4c>
 8108768:	42a3      	cmp	r3, r4
 810876a:	d9fa      	bls.n	8108762 <_free_r+0x42>
 810876c:	6811      	ldr	r1, [r2, #0]
 810876e:	1850      	adds	r0, r2, r1
 8108770:	42a0      	cmp	r0, r4
 8108772:	d10b      	bne.n	810878c <_free_r+0x6c>
 8108774:	6820      	ldr	r0, [r4, #0]
 8108776:	4401      	add	r1, r0
 8108778:	1850      	adds	r0, r2, r1
 810877a:	4283      	cmp	r3, r0
 810877c:	6011      	str	r1, [r2, #0]
 810877e:	d1e0      	bne.n	8108742 <_free_r+0x22>
 8108780:	6818      	ldr	r0, [r3, #0]
 8108782:	685b      	ldr	r3, [r3, #4]
 8108784:	6053      	str	r3, [r2, #4]
 8108786:	4408      	add	r0, r1
 8108788:	6010      	str	r0, [r2, #0]
 810878a:	e7da      	b.n	8108742 <_free_r+0x22>
 810878c:	d902      	bls.n	8108794 <_free_r+0x74>
 810878e:	230c      	movs	r3, #12
 8108790:	602b      	str	r3, [r5, #0]
 8108792:	e7d6      	b.n	8108742 <_free_r+0x22>
 8108794:	6820      	ldr	r0, [r4, #0]
 8108796:	1821      	adds	r1, r4, r0
 8108798:	428b      	cmp	r3, r1
 810879a:	bf04      	itt	eq
 810879c:	6819      	ldreq	r1, [r3, #0]
 810879e:	685b      	ldreq	r3, [r3, #4]
 81087a0:	6063      	str	r3, [r4, #4]
 81087a2:	bf04      	itt	eq
 81087a4:	1809      	addeq	r1, r1, r0
 81087a6:	6021      	streq	r1, [r4, #0]
 81087a8:	6054      	str	r4, [r2, #4]
 81087aa:	e7ca      	b.n	8108742 <_free_r+0x22>
 81087ac:	bd38      	pop	{r3, r4, r5, pc}
 81087ae:	bf00      	nop
 81087b0:	10000f3c 	.word	0x10000f3c

081087b4 <sbrk_aligned>:
 81087b4:	b570      	push	{r4, r5, r6, lr}
 81087b6:	4e0f      	ldr	r6, [pc, #60]	@ (81087f4 <sbrk_aligned+0x40>)
 81087b8:	460c      	mov	r4, r1
 81087ba:	6831      	ldr	r1, [r6, #0]
 81087bc:	4605      	mov	r5, r0
 81087be:	b911      	cbnz	r1, 81087c6 <sbrk_aligned+0x12>
 81087c0:	f000 f9d6 	bl	8108b70 <_sbrk_r>
 81087c4:	6030      	str	r0, [r6, #0]
 81087c6:	4621      	mov	r1, r4
 81087c8:	4628      	mov	r0, r5
 81087ca:	f000 f9d1 	bl	8108b70 <_sbrk_r>
 81087ce:	1c43      	adds	r3, r0, #1
 81087d0:	d103      	bne.n	81087da <sbrk_aligned+0x26>
 81087d2:	f04f 34ff 	mov.w	r4, #4294967295
 81087d6:	4620      	mov	r0, r4
 81087d8:	bd70      	pop	{r4, r5, r6, pc}
 81087da:	1cc4      	adds	r4, r0, #3
 81087dc:	f024 0403 	bic.w	r4, r4, #3
 81087e0:	42a0      	cmp	r0, r4
 81087e2:	d0f8      	beq.n	81087d6 <sbrk_aligned+0x22>
 81087e4:	1a21      	subs	r1, r4, r0
 81087e6:	4628      	mov	r0, r5
 81087e8:	f000 f9c2 	bl	8108b70 <_sbrk_r>
 81087ec:	3001      	adds	r0, #1
 81087ee:	d1f2      	bne.n	81087d6 <sbrk_aligned+0x22>
 81087f0:	e7ef      	b.n	81087d2 <sbrk_aligned+0x1e>
 81087f2:	bf00      	nop
 81087f4:	10000f38 	.word	0x10000f38

081087f8 <_malloc_r>:
 81087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81087fc:	1ccd      	adds	r5, r1, #3
 81087fe:	f025 0503 	bic.w	r5, r5, #3
 8108802:	3508      	adds	r5, #8
 8108804:	2d0c      	cmp	r5, #12
 8108806:	bf38      	it	cc
 8108808:	250c      	movcc	r5, #12
 810880a:	2d00      	cmp	r5, #0
 810880c:	4606      	mov	r6, r0
 810880e:	db01      	blt.n	8108814 <_malloc_r+0x1c>
 8108810:	42a9      	cmp	r1, r5
 8108812:	d904      	bls.n	810881e <_malloc_r+0x26>
 8108814:	230c      	movs	r3, #12
 8108816:	6033      	str	r3, [r6, #0]
 8108818:	2000      	movs	r0, #0
 810881a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810881e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 81088f4 <_malloc_r+0xfc>
 8108822:	f000 f869 	bl	81088f8 <__malloc_lock>
 8108826:	f8d8 3000 	ldr.w	r3, [r8]
 810882a:	461c      	mov	r4, r3
 810882c:	bb44      	cbnz	r4, 8108880 <_malloc_r+0x88>
 810882e:	4629      	mov	r1, r5
 8108830:	4630      	mov	r0, r6
 8108832:	f7ff ffbf 	bl	81087b4 <sbrk_aligned>
 8108836:	1c43      	adds	r3, r0, #1
 8108838:	4604      	mov	r4, r0
 810883a:	d158      	bne.n	81088ee <_malloc_r+0xf6>
 810883c:	f8d8 4000 	ldr.w	r4, [r8]
 8108840:	4627      	mov	r7, r4
 8108842:	2f00      	cmp	r7, #0
 8108844:	d143      	bne.n	81088ce <_malloc_r+0xd6>
 8108846:	2c00      	cmp	r4, #0
 8108848:	d04b      	beq.n	81088e2 <_malloc_r+0xea>
 810884a:	6823      	ldr	r3, [r4, #0]
 810884c:	4639      	mov	r1, r7
 810884e:	4630      	mov	r0, r6
 8108850:	eb04 0903 	add.w	r9, r4, r3
 8108854:	f000 f98c 	bl	8108b70 <_sbrk_r>
 8108858:	4581      	cmp	r9, r0
 810885a:	d142      	bne.n	81088e2 <_malloc_r+0xea>
 810885c:	6821      	ldr	r1, [r4, #0]
 810885e:	1a6d      	subs	r5, r5, r1
 8108860:	4629      	mov	r1, r5
 8108862:	4630      	mov	r0, r6
 8108864:	f7ff ffa6 	bl	81087b4 <sbrk_aligned>
 8108868:	3001      	adds	r0, #1
 810886a:	d03a      	beq.n	81088e2 <_malloc_r+0xea>
 810886c:	6823      	ldr	r3, [r4, #0]
 810886e:	442b      	add	r3, r5
 8108870:	6023      	str	r3, [r4, #0]
 8108872:	f8d8 3000 	ldr.w	r3, [r8]
 8108876:	685a      	ldr	r2, [r3, #4]
 8108878:	bb62      	cbnz	r2, 81088d4 <_malloc_r+0xdc>
 810887a:	f8c8 7000 	str.w	r7, [r8]
 810887e:	e00f      	b.n	81088a0 <_malloc_r+0xa8>
 8108880:	6822      	ldr	r2, [r4, #0]
 8108882:	1b52      	subs	r2, r2, r5
 8108884:	d420      	bmi.n	81088c8 <_malloc_r+0xd0>
 8108886:	2a0b      	cmp	r2, #11
 8108888:	d917      	bls.n	81088ba <_malloc_r+0xc2>
 810888a:	1961      	adds	r1, r4, r5
 810888c:	42a3      	cmp	r3, r4
 810888e:	6025      	str	r5, [r4, #0]
 8108890:	bf18      	it	ne
 8108892:	6059      	strne	r1, [r3, #4]
 8108894:	6863      	ldr	r3, [r4, #4]
 8108896:	bf08      	it	eq
 8108898:	f8c8 1000 	streq.w	r1, [r8]
 810889c:	5162      	str	r2, [r4, r5]
 810889e:	604b      	str	r3, [r1, #4]
 81088a0:	4630      	mov	r0, r6
 81088a2:	f000 f82f 	bl	8108904 <__malloc_unlock>
 81088a6:	f104 000b 	add.w	r0, r4, #11
 81088aa:	1d23      	adds	r3, r4, #4
 81088ac:	f020 0007 	bic.w	r0, r0, #7
 81088b0:	1ac2      	subs	r2, r0, r3
 81088b2:	bf1c      	itt	ne
 81088b4:	1a1b      	subne	r3, r3, r0
 81088b6:	50a3      	strne	r3, [r4, r2]
 81088b8:	e7af      	b.n	810881a <_malloc_r+0x22>
 81088ba:	6862      	ldr	r2, [r4, #4]
 81088bc:	42a3      	cmp	r3, r4
 81088be:	bf0c      	ite	eq
 81088c0:	f8c8 2000 	streq.w	r2, [r8]
 81088c4:	605a      	strne	r2, [r3, #4]
 81088c6:	e7eb      	b.n	81088a0 <_malloc_r+0xa8>
 81088c8:	4623      	mov	r3, r4
 81088ca:	6864      	ldr	r4, [r4, #4]
 81088cc:	e7ae      	b.n	810882c <_malloc_r+0x34>
 81088ce:	463c      	mov	r4, r7
 81088d0:	687f      	ldr	r7, [r7, #4]
 81088d2:	e7b6      	b.n	8108842 <_malloc_r+0x4a>
 81088d4:	461a      	mov	r2, r3
 81088d6:	685b      	ldr	r3, [r3, #4]
 81088d8:	42a3      	cmp	r3, r4
 81088da:	d1fb      	bne.n	81088d4 <_malloc_r+0xdc>
 81088dc:	2300      	movs	r3, #0
 81088de:	6053      	str	r3, [r2, #4]
 81088e0:	e7de      	b.n	81088a0 <_malloc_r+0xa8>
 81088e2:	230c      	movs	r3, #12
 81088e4:	6033      	str	r3, [r6, #0]
 81088e6:	4630      	mov	r0, r6
 81088e8:	f000 f80c 	bl	8108904 <__malloc_unlock>
 81088ec:	e794      	b.n	8108818 <_malloc_r+0x20>
 81088ee:	6005      	str	r5, [r0, #0]
 81088f0:	e7d6      	b.n	81088a0 <_malloc_r+0xa8>
 81088f2:	bf00      	nop
 81088f4:	10000f3c 	.word	0x10000f3c

081088f8 <__malloc_lock>:
 81088f8:	4801      	ldr	r0, [pc, #4]	@ (8108900 <__malloc_lock+0x8>)
 81088fa:	f7ff bf0e 	b.w	810871a <__retarget_lock_acquire_recursive>
 81088fe:	bf00      	nop
 8108900:	10000f34 	.word	0x10000f34

08108904 <__malloc_unlock>:
 8108904:	4801      	ldr	r0, [pc, #4]	@ (810890c <__malloc_unlock+0x8>)
 8108906:	f7ff bf09 	b.w	810871c <__retarget_lock_release_recursive>
 810890a:	bf00      	nop
 810890c:	10000f34 	.word	0x10000f34

08108910 <__sflush_r>:
 8108910:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8108914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108918:	0716      	lsls	r6, r2, #28
 810891a:	4605      	mov	r5, r0
 810891c:	460c      	mov	r4, r1
 810891e:	d454      	bmi.n	81089ca <__sflush_r+0xba>
 8108920:	684b      	ldr	r3, [r1, #4]
 8108922:	2b00      	cmp	r3, #0
 8108924:	dc02      	bgt.n	810892c <__sflush_r+0x1c>
 8108926:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8108928:	2b00      	cmp	r3, #0
 810892a:	dd48      	ble.n	81089be <__sflush_r+0xae>
 810892c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810892e:	2e00      	cmp	r6, #0
 8108930:	d045      	beq.n	81089be <__sflush_r+0xae>
 8108932:	2300      	movs	r3, #0
 8108934:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8108938:	682f      	ldr	r7, [r5, #0]
 810893a:	6a21      	ldr	r1, [r4, #32]
 810893c:	602b      	str	r3, [r5, #0]
 810893e:	d030      	beq.n	81089a2 <__sflush_r+0x92>
 8108940:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8108942:	89a3      	ldrh	r3, [r4, #12]
 8108944:	0759      	lsls	r1, r3, #29
 8108946:	d505      	bpl.n	8108954 <__sflush_r+0x44>
 8108948:	6863      	ldr	r3, [r4, #4]
 810894a:	1ad2      	subs	r2, r2, r3
 810894c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810894e:	b10b      	cbz	r3, 8108954 <__sflush_r+0x44>
 8108950:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8108952:	1ad2      	subs	r2, r2, r3
 8108954:	2300      	movs	r3, #0
 8108956:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8108958:	6a21      	ldr	r1, [r4, #32]
 810895a:	4628      	mov	r0, r5
 810895c:	47b0      	blx	r6
 810895e:	1c43      	adds	r3, r0, #1
 8108960:	89a3      	ldrh	r3, [r4, #12]
 8108962:	d106      	bne.n	8108972 <__sflush_r+0x62>
 8108964:	6829      	ldr	r1, [r5, #0]
 8108966:	291d      	cmp	r1, #29
 8108968:	d82b      	bhi.n	81089c2 <__sflush_r+0xb2>
 810896a:	4a2a      	ldr	r2, [pc, #168]	@ (8108a14 <__sflush_r+0x104>)
 810896c:	40ca      	lsrs	r2, r1
 810896e:	07d6      	lsls	r6, r2, #31
 8108970:	d527      	bpl.n	81089c2 <__sflush_r+0xb2>
 8108972:	2200      	movs	r2, #0
 8108974:	6062      	str	r2, [r4, #4]
 8108976:	04d9      	lsls	r1, r3, #19
 8108978:	6922      	ldr	r2, [r4, #16]
 810897a:	6022      	str	r2, [r4, #0]
 810897c:	d504      	bpl.n	8108988 <__sflush_r+0x78>
 810897e:	1c42      	adds	r2, r0, #1
 8108980:	d101      	bne.n	8108986 <__sflush_r+0x76>
 8108982:	682b      	ldr	r3, [r5, #0]
 8108984:	b903      	cbnz	r3, 8108988 <__sflush_r+0x78>
 8108986:	6560      	str	r0, [r4, #84]	@ 0x54
 8108988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810898a:	602f      	str	r7, [r5, #0]
 810898c:	b1b9      	cbz	r1, 81089be <__sflush_r+0xae>
 810898e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8108992:	4299      	cmp	r1, r3
 8108994:	d002      	beq.n	810899c <__sflush_r+0x8c>
 8108996:	4628      	mov	r0, r5
 8108998:	f7ff fec2 	bl	8108720 <_free_r>
 810899c:	2300      	movs	r3, #0
 810899e:	6363      	str	r3, [r4, #52]	@ 0x34
 81089a0:	e00d      	b.n	81089be <__sflush_r+0xae>
 81089a2:	2301      	movs	r3, #1
 81089a4:	4628      	mov	r0, r5
 81089a6:	47b0      	blx	r6
 81089a8:	4602      	mov	r2, r0
 81089aa:	1c50      	adds	r0, r2, #1
 81089ac:	d1c9      	bne.n	8108942 <__sflush_r+0x32>
 81089ae:	682b      	ldr	r3, [r5, #0]
 81089b0:	2b00      	cmp	r3, #0
 81089b2:	d0c6      	beq.n	8108942 <__sflush_r+0x32>
 81089b4:	2b1d      	cmp	r3, #29
 81089b6:	d001      	beq.n	81089bc <__sflush_r+0xac>
 81089b8:	2b16      	cmp	r3, #22
 81089ba:	d11e      	bne.n	81089fa <__sflush_r+0xea>
 81089bc:	602f      	str	r7, [r5, #0]
 81089be:	2000      	movs	r0, #0
 81089c0:	e022      	b.n	8108a08 <__sflush_r+0xf8>
 81089c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81089c6:	b21b      	sxth	r3, r3
 81089c8:	e01b      	b.n	8108a02 <__sflush_r+0xf2>
 81089ca:	690f      	ldr	r7, [r1, #16]
 81089cc:	2f00      	cmp	r7, #0
 81089ce:	d0f6      	beq.n	81089be <__sflush_r+0xae>
 81089d0:	0793      	lsls	r3, r2, #30
 81089d2:	680e      	ldr	r6, [r1, #0]
 81089d4:	bf08      	it	eq
 81089d6:	694b      	ldreq	r3, [r1, #20]
 81089d8:	600f      	str	r7, [r1, #0]
 81089da:	bf18      	it	ne
 81089dc:	2300      	movne	r3, #0
 81089de:	eba6 0807 	sub.w	r8, r6, r7
 81089e2:	608b      	str	r3, [r1, #8]
 81089e4:	f1b8 0f00 	cmp.w	r8, #0
 81089e8:	dde9      	ble.n	81089be <__sflush_r+0xae>
 81089ea:	6a21      	ldr	r1, [r4, #32]
 81089ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 81089ee:	4643      	mov	r3, r8
 81089f0:	463a      	mov	r2, r7
 81089f2:	4628      	mov	r0, r5
 81089f4:	47b0      	blx	r6
 81089f6:	2800      	cmp	r0, #0
 81089f8:	dc08      	bgt.n	8108a0c <__sflush_r+0xfc>
 81089fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81089fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108a02:	81a3      	strh	r3, [r4, #12]
 8108a04:	f04f 30ff 	mov.w	r0, #4294967295
 8108a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108a0c:	4407      	add	r7, r0
 8108a0e:	eba8 0800 	sub.w	r8, r8, r0
 8108a12:	e7e7      	b.n	81089e4 <__sflush_r+0xd4>
 8108a14:	20400001 	.word	0x20400001

08108a18 <_fflush_r>:
 8108a18:	b538      	push	{r3, r4, r5, lr}
 8108a1a:	690b      	ldr	r3, [r1, #16]
 8108a1c:	4605      	mov	r5, r0
 8108a1e:	460c      	mov	r4, r1
 8108a20:	b913      	cbnz	r3, 8108a28 <_fflush_r+0x10>
 8108a22:	2500      	movs	r5, #0
 8108a24:	4628      	mov	r0, r5
 8108a26:	bd38      	pop	{r3, r4, r5, pc}
 8108a28:	b118      	cbz	r0, 8108a32 <_fflush_r+0x1a>
 8108a2a:	6a03      	ldr	r3, [r0, #32]
 8108a2c:	b90b      	cbnz	r3, 8108a32 <_fflush_r+0x1a>
 8108a2e:	f7ff fc8f 	bl	8108350 <__sinit>
 8108a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108a36:	2b00      	cmp	r3, #0
 8108a38:	d0f3      	beq.n	8108a22 <_fflush_r+0xa>
 8108a3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8108a3c:	07d0      	lsls	r0, r2, #31
 8108a3e:	d404      	bmi.n	8108a4a <_fflush_r+0x32>
 8108a40:	0599      	lsls	r1, r3, #22
 8108a42:	d402      	bmi.n	8108a4a <_fflush_r+0x32>
 8108a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108a46:	f7ff fe68 	bl	810871a <__retarget_lock_acquire_recursive>
 8108a4a:	4628      	mov	r0, r5
 8108a4c:	4621      	mov	r1, r4
 8108a4e:	f7ff ff5f 	bl	8108910 <__sflush_r>
 8108a52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8108a54:	07da      	lsls	r2, r3, #31
 8108a56:	4605      	mov	r5, r0
 8108a58:	d4e4      	bmi.n	8108a24 <_fflush_r+0xc>
 8108a5a:	89a3      	ldrh	r3, [r4, #12]
 8108a5c:	059b      	lsls	r3, r3, #22
 8108a5e:	d4e1      	bmi.n	8108a24 <_fflush_r+0xc>
 8108a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108a62:	f7ff fe5b 	bl	810871c <__retarget_lock_release_recursive>
 8108a66:	e7dd      	b.n	8108a24 <_fflush_r+0xc>

08108a68 <__swhatbuf_r>:
 8108a68:	b570      	push	{r4, r5, r6, lr}
 8108a6a:	460c      	mov	r4, r1
 8108a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108a70:	2900      	cmp	r1, #0
 8108a72:	b096      	sub	sp, #88	@ 0x58
 8108a74:	4615      	mov	r5, r2
 8108a76:	461e      	mov	r6, r3
 8108a78:	da0d      	bge.n	8108a96 <__swhatbuf_r+0x2e>
 8108a7a:	89a3      	ldrh	r3, [r4, #12]
 8108a7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8108a80:	f04f 0100 	mov.w	r1, #0
 8108a84:	bf14      	ite	ne
 8108a86:	2340      	movne	r3, #64	@ 0x40
 8108a88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8108a8c:	2000      	movs	r0, #0
 8108a8e:	6031      	str	r1, [r6, #0]
 8108a90:	602b      	str	r3, [r5, #0]
 8108a92:	b016      	add	sp, #88	@ 0x58
 8108a94:	bd70      	pop	{r4, r5, r6, pc}
 8108a96:	466a      	mov	r2, sp
 8108a98:	f000 f848 	bl	8108b2c <_fstat_r>
 8108a9c:	2800      	cmp	r0, #0
 8108a9e:	dbec      	blt.n	8108a7a <__swhatbuf_r+0x12>
 8108aa0:	9901      	ldr	r1, [sp, #4]
 8108aa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8108aa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8108aaa:	4259      	negs	r1, r3
 8108aac:	4159      	adcs	r1, r3
 8108aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8108ab2:	e7eb      	b.n	8108a8c <__swhatbuf_r+0x24>

08108ab4 <__smakebuf_r>:
 8108ab4:	898b      	ldrh	r3, [r1, #12]
 8108ab6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8108ab8:	079d      	lsls	r5, r3, #30
 8108aba:	4606      	mov	r6, r0
 8108abc:	460c      	mov	r4, r1
 8108abe:	d507      	bpl.n	8108ad0 <__smakebuf_r+0x1c>
 8108ac0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8108ac4:	6023      	str	r3, [r4, #0]
 8108ac6:	6123      	str	r3, [r4, #16]
 8108ac8:	2301      	movs	r3, #1
 8108aca:	6163      	str	r3, [r4, #20]
 8108acc:	b003      	add	sp, #12
 8108ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8108ad0:	ab01      	add	r3, sp, #4
 8108ad2:	466a      	mov	r2, sp
 8108ad4:	f7ff ffc8 	bl	8108a68 <__swhatbuf_r>
 8108ad8:	9f00      	ldr	r7, [sp, #0]
 8108ada:	4605      	mov	r5, r0
 8108adc:	4639      	mov	r1, r7
 8108ade:	4630      	mov	r0, r6
 8108ae0:	f7ff fe8a 	bl	81087f8 <_malloc_r>
 8108ae4:	b948      	cbnz	r0, 8108afa <__smakebuf_r+0x46>
 8108ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108aea:	059a      	lsls	r2, r3, #22
 8108aec:	d4ee      	bmi.n	8108acc <__smakebuf_r+0x18>
 8108aee:	f023 0303 	bic.w	r3, r3, #3
 8108af2:	f043 0302 	orr.w	r3, r3, #2
 8108af6:	81a3      	strh	r3, [r4, #12]
 8108af8:	e7e2      	b.n	8108ac0 <__smakebuf_r+0xc>
 8108afa:	89a3      	ldrh	r3, [r4, #12]
 8108afc:	6020      	str	r0, [r4, #0]
 8108afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8108b02:	81a3      	strh	r3, [r4, #12]
 8108b04:	9b01      	ldr	r3, [sp, #4]
 8108b06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8108b0a:	b15b      	cbz	r3, 8108b24 <__smakebuf_r+0x70>
 8108b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8108b10:	4630      	mov	r0, r6
 8108b12:	f000 f81d 	bl	8108b50 <_isatty_r>
 8108b16:	b128      	cbz	r0, 8108b24 <__smakebuf_r+0x70>
 8108b18:	89a3      	ldrh	r3, [r4, #12]
 8108b1a:	f023 0303 	bic.w	r3, r3, #3
 8108b1e:	f043 0301 	orr.w	r3, r3, #1
 8108b22:	81a3      	strh	r3, [r4, #12]
 8108b24:	89a3      	ldrh	r3, [r4, #12]
 8108b26:	431d      	orrs	r5, r3
 8108b28:	81a5      	strh	r5, [r4, #12]
 8108b2a:	e7cf      	b.n	8108acc <__smakebuf_r+0x18>

08108b2c <_fstat_r>:
 8108b2c:	b538      	push	{r3, r4, r5, lr}
 8108b2e:	4d07      	ldr	r5, [pc, #28]	@ (8108b4c <_fstat_r+0x20>)
 8108b30:	2300      	movs	r3, #0
 8108b32:	4604      	mov	r4, r0
 8108b34:	4608      	mov	r0, r1
 8108b36:	4611      	mov	r1, r2
 8108b38:	602b      	str	r3, [r5, #0]
 8108b3a:	f7f8 ffd8 	bl	8101aee <_fstat>
 8108b3e:	1c43      	adds	r3, r0, #1
 8108b40:	d102      	bne.n	8108b48 <_fstat_r+0x1c>
 8108b42:	682b      	ldr	r3, [r5, #0]
 8108b44:	b103      	cbz	r3, 8108b48 <_fstat_r+0x1c>
 8108b46:	6023      	str	r3, [r4, #0]
 8108b48:	bd38      	pop	{r3, r4, r5, pc}
 8108b4a:	bf00      	nop
 8108b4c:	10000f30 	.word	0x10000f30

08108b50 <_isatty_r>:
 8108b50:	b538      	push	{r3, r4, r5, lr}
 8108b52:	4d06      	ldr	r5, [pc, #24]	@ (8108b6c <_isatty_r+0x1c>)
 8108b54:	2300      	movs	r3, #0
 8108b56:	4604      	mov	r4, r0
 8108b58:	4608      	mov	r0, r1
 8108b5a:	602b      	str	r3, [r5, #0]
 8108b5c:	f7f8 ffd7 	bl	8101b0e <_isatty>
 8108b60:	1c43      	adds	r3, r0, #1
 8108b62:	d102      	bne.n	8108b6a <_isatty_r+0x1a>
 8108b64:	682b      	ldr	r3, [r5, #0]
 8108b66:	b103      	cbz	r3, 8108b6a <_isatty_r+0x1a>
 8108b68:	6023      	str	r3, [r4, #0]
 8108b6a:	bd38      	pop	{r3, r4, r5, pc}
 8108b6c:	10000f30 	.word	0x10000f30

08108b70 <_sbrk_r>:
 8108b70:	b538      	push	{r3, r4, r5, lr}
 8108b72:	4d06      	ldr	r5, [pc, #24]	@ (8108b8c <_sbrk_r+0x1c>)
 8108b74:	2300      	movs	r3, #0
 8108b76:	4604      	mov	r4, r0
 8108b78:	4608      	mov	r0, r1
 8108b7a:	602b      	str	r3, [r5, #0]
 8108b7c:	f7f8 ffe0 	bl	8101b40 <_sbrk>
 8108b80:	1c43      	adds	r3, r0, #1
 8108b82:	d102      	bne.n	8108b8a <_sbrk_r+0x1a>
 8108b84:	682b      	ldr	r3, [r5, #0]
 8108b86:	b103      	cbz	r3, 8108b8a <_sbrk_r+0x1a>
 8108b88:	6023      	str	r3, [r4, #0]
 8108b8a:	bd38      	pop	{r3, r4, r5, pc}
 8108b8c:	10000f30 	.word	0x10000f30

08108b90 <_init>:
 8108b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108b92:	bf00      	nop
 8108b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108b96:	bc08      	pop	{r3}
 8108b98:	469e      	mov	lr, r3
 8108b9a:	4770      	bx	lr

08108b9c <_fini>:
 8108b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108b9e:	bf00      	nop
 8108ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108ba2:	bc08      	pop	{r3}
 8108ba4:	469e      	mov	lr, r3
 8108ba6:	4770      	bx	lr
